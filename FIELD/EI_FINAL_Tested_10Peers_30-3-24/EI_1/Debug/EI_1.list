
EI_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023bbc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000052fc  08023dbc  08023dbc  00033dbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080290b8  080290b8  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  080290b8  080290b8  000390b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080290c0  080290c0  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080290c0  080290c0  000390c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080290c4  080290c4  000390c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080290c8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  0802926c  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  0802930c  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000143a0  200002e4  080293ac  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20014684  080293ac  00044684  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037c7c  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00008301  00000000  00000000  00077f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  00080290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021a8  00000000  00000000  00082708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043076  00000000  00000000  000848b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00045b7e  00000000  00000000  000c7926  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013b9ee  00000000  00000000  0010d4a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00248e92  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a01c  00000000  00000000  00248ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08023da4 	.word	0x08023da4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08023da4 	.word	0x08023da4

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08023dbc 	.word	0x08023dbc
 8000a74:	08023dc8 	.word	0x08023dc8
 8000a78:	08023dd8 	.word	0x08023dd8
 8000a7c:	08023de8 	.word	0x08023de8
 8000a80:	08023dfc 	.word	0x08023dfc
 8000a84:	08023e10 	.word	0x08023e10
 8000a88:	08023e24 	.word	0x08023e24
 8000a8c:	08023e30 	.word	0x08023e30
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a fc85 	bl	801b3b4 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f021 ffb1 	bl	8022a1c <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000c024 	.word	0x2000c024
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 fb59 	bl	8018194 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 fb49 	bl	8018194 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 fb38 	bl	8018194 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 fd74 	bl	8022668 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00e f8bf 	bl	800ed08 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 fb1d 	bl	80151d4 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 facc 	bl	8015154 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 fe2a 	bl	8022838 <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f021 fe9e 	bl	8022970 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 fdf4 	bl	8022838 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 fe6f 	bl	8022970 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 fdc2 	bl	8022838 <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 fe5b 	bl	8022970 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 fda5 	bl	8022838 <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fd97 	bl	8022838 <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 fe30 	bl	8022970 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fd77 	bl	8022838 <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 fd69 	bl	8022838 <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 fe02 	bl	8022970 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fd44 	bl	8022838 <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fd22 	bl	8022838 <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fd09 	bl	8022838 <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 fcfb 	bl	8022838 <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 fced 	bl	8022838 <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fd85 	bl	8022970 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fcfb 	bl	800f870 <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a3e4 	.word	0x2000a3e4
 8000e88:	08023e38 	.word	0x08023e38
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	08023e50 	.word	0x08023e50
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08023e90 	.word	0x08023e90
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08023ea4 	.word	0x08023ea4
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08023ec0 	.word	0x08023ec0
 8000eac:	08023edc 	.word	0x08023edc
 8000eb0:	20001a1c 	.word	0x20001a1c
 8000eb4:	08023eec 	.word	0x08023eec
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	08023f00 	.word	0x08023f00
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	08023f10 	.word	0x08023f10
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	08023f2c 	.word	0x08023f2c
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	08023f3c 	.word	0x08023f3c
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 fb6c 	bl	80225f8 <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f021 fb7f 	bl	8022668 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00e fa88 	bl	800f48c <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00e fa39 	bl	800f464 <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f021 fb11 	bl	8022668 <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00d fe51 	bl	800ed08 <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f014 f8b0 	bl	80151d4 <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f021 fbd4 	bl	8022838 <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f014 f825 	bl	8015154 <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f021 fa92 	bl	8022668 <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	2000a3e0 	.word	0x2000a3e0
 800115c:	08023f78 	.word	0x08023f78

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f021 fa75 	bl	8022668 <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f014 faec 	bl	8015824 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f014 fae5 	bl	8015824 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f021 fb83 	bl	8022970 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f021 fab1 	bl	8022838 <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f021 fb36 	bl	8022970 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f021 fa96 	bl	8022838 <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f021 fa8b 	bl	8022838 <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f021 fb15 	bl	8022970 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f021 fa75 	bl	8022838 <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f021 fa6a 	bl	8022838 <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f021 fafd 	bl	8022970 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f021 fa5d 	bl	8022838 <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f021 fae9 	bl	8022970 <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f021 fae5 	bl	8022970 <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f021 fada 	bl	8022970 <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f021 fa36 	bl	8022838 <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f021 fab4 	bl	8022970 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00d fc73 	bl	800ed08 <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f021 f9ea 	bl	8022838 <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f021 f8f8 	bl	8022668 <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f021 f8ca 	bl	8022618 <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fc15 	bl	8007cf0 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	08023fa4 	.word	0x08023fa4
 80014f4:	08023fe4 	.word	0x08023fe4
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	20000645 	.word	0x20000645
 8001504:	08023ff0 	.word	0x08023ff0
 8001508:	0802402c 	.word	0x0802402c
 800150c:	08024048 	.word	0x08024048
 8001510:	0802406c 	.word	0x0802406c
 8001514:	20001a1c 	.word	0x20001a1c
 8001518:	080240a4 	.word	0x080240a4
 800151c:	080240c8 	.word	0x080240c8
 8001520:	080240d8 	.word	0x080240d8
 8001524:	080240e8 	.word	0x080240e8
 8001528:	0802411c 	.word	0x0802411c
 800152c:	20001080 	.word	0x20001080
 8001530:	0802413c 	.word	0x0802413c
 8001534:	0802414c 	.word	0x0802414c
 8001538:	0802415c 	.word	0x0802415c
 800153c:	08024174 	.word	0x08024174
 8001540:	20000f7c 	.word	0x20000f7c
 8001544:	20000fa4 	.word	0x20000fa4
 8001548:	20000fcc 	.word	0x20000fcc
 800154c:	08024198 	.word	0x08024198
 8001550:	20001024 	.word	0x20001024
 8001554:	20001030 	.word	0x20001030
 8001558:	080241b0 	.word	0x080241b0
 800155c:	20001f50 	.word	0x20001f50
 8001560:	20001674 	.word	0x20001674
 8001564:	20000e74 	.word	0x20000e74
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f021 f9f1 	bl	8022970 <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 fe61 	bl	8005260 <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f861 	bl	8006670 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f021 f93f 	bl	8022838 <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	080241cc 	.word	0x080241cc
 80015cc:	080241f0 	.word	0x080241f0

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f014 f913 	bl	8015824 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f011 fd2a 	bl	801306c <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f021 f8f7 	bl	8022838 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f021 f8f3 	bl	8022838 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f021 f8ef 	bl	8022838 <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33f4      	adds	r3, #244	; 0xf4
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f021 f8c4 	bl	8022838 <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f021 f8bf 	bl	8022838 <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33f4      	adds	r3, #244	; 0xf4
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f021 f8b5 	bl	8022838 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	0802420c 	.word	0x0802420c
 80016e8:	08024228 	.word	0x08024228
 80016ec:	08024238 	.word	0x08024238
 80016f0:	20000ff4 	.word	0x20000ff4
 80016f4:	2000100c 	.word	0x2000100c
 80016f8:	20001000 	.word	0x20001000
 80016fc:	08024248 	.word	0x08024248
 8001700:	08024280 	.word	0x08024280
 8001704:	080242a4 	.word	0x080242a4
 8001708:	08023fe4 	.word	0x08023fe4
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f021 f874 	bl	8022838 <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f021 f86b 	bl	8022838 <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f021 f866 	bl	8022838 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f021 f819 	bl	8022838 <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f020 ffe6 	bl	8022838 <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001000 	.word	0x20001000
 80019c4:	20000304 	.word	0x20000304
 80019c8:	080242c8 	.word	0x080242c8
 80019cc:	080242f0 	.word	0x080242f0
 80019d0:	08024304 	.word	0x08024304
 80019d4:	08023fe4 	.word	0x08023fe4
 80019d8:	20000305 	.word	0x20000305
 80019dc:	20000fa4 	.word	0x20000fa4
 80019e0:	2000100c 	.word	0x2000100c
 80019e4:	2000108c 	.word	0x2000108c
 80019e8:	20001098 	.word	0x20001098
 80019ec:	20001264 	.word	0x20001264
 80019f0:	08024318 	.word	0x08024318
 80019f4:	08024320 	.word	0x08024320
 80019f8:	200011c4 	.word	0x200011c4
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f007 f842 	bl	8008cd0 <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200011c4 	.word	0x200011c4
 8001c60:	20001188 	.word	0x20001188
 8001c64:	200010d8 	.word	0x200010d8
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f020 fc76 	bl	8022618 <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	200010d8 	.word	0x200010d8
 8001f00:	20001264 	.word	0x20001264
 8001f04:	200011c4 	.word	0x200011c4
 8001f08:	20001674 	.word	0x20001674
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f020 fc8a 	bl	8022970 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f020 fbe5 	bl	8022838 <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f020 fbdb 	bl	8022838 <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f020 fb77 	bl	8022838 <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f020 fc10 	bl	8022970 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200011c4 	.word	0x200011c4
 8002210:	20001264 	.word	0x20001264
 8002214:	20000304 	.word	0x20000304
 8002218:	08024328 	.word	0x08024328
 800221c:	080242f0 	.word	0x080242f0
 8002220:	08024304 	.word	0x08024304
 8002224:	08024344 	.word	0x08024344
 8002228:	08024370 	.word	0x08024370
 800222c:	20001674 	.word	0x20001674
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f020 f9f6 	bl	8022668 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f020 f9c2 	bl	8022618 <memcpy>


#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2001 	movw	r0, #513	; 0x201
 8002298:	f00d faea 	bl	800f870 <TransmitCanPkt>

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f013 fab7 	bl	8015824 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20001674 	.word	0x20001674
 80022cc:	20001854 	.word	0x20001854
 80022d0:	20000e44 	.word	0x20000e44

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f020 f9b9 	bl	8022668 <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f017 feb0 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f020 fa94 	bl	8022970 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f020 f9f4 	bl	8022838 <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f020 f9ee 	bl	8022838 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f017 fe50 	bl	801a188 <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f020 fa36 	bl	8022970 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f020 f990 	bl	8022838 <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f020 f98a 	bl	8022838 <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	20001a1c 	.word	0x20001a1c
 8002548:	2000a05c 	.word	0x2000a05c
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	0802438c 	.word	0x0802438c
 8002554:	080243b0 	.word	0x080243b0
 8002558:	080243d0 	.word	0x080243d0
 800255c:	080243f0 	.word	0x080243f0
 8002560:	200011c4 	.word	0x200011c4
 8002564:	08024414 	.word	0x08024414
 8002568:	08024434 	.word	0x08024434

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200011c4 	.word	0x200011c4
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f017 fb40 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f01f ff22 	bl	8022970 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f01f fe7c 	bl	8022838 <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f01f fe63 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200011c4 	.word	0x200011c4
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	20001674 	.word	0x20001674
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	20001a1c 	.word	0x20001a1c
 8002ba0:	2000a05c 	.word	0x2000a05c
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	08024454 	.word	0x08024454
 8002bac:	08024484 	.word	0x08024484
 8002bb0:	080244a0 	.word	0x080244a0
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f010 fa02 	bl	801306c <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f01f fe4d 	bl	8022970 <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f01f fdae 	bl	8022838 <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fc68 	bl	80075c0 <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	20001a1c 	.word	0x20001a1c
 8002d04:	080244bc 	.word	0x080244bc
 8002d08:	080244d4 	.word	0x080244d4

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b099      	sub	sp, #100	; 0x64
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002d34:	f012 fd76 	bl	8015824 <HAL_GetTick>
 8002d38:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f01f fc85 	bl	8022668 <memset>
	BITSTUFFINIT(0, 0);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d6a:	49a1      	ldr	r1, [pc, #644]	; (8002ff0 <Vital_Msg_extr+0x2e4>)
 8002d6c:	48a1      	ldr	r0, [pc, #644]	; (8002ff4 <Vital_Msg_extr+0x2e8>)
 8002d6e:	f7fd fa67 	bl	8000240 <strcmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8138 	beq.w	8002fea <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d7a:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02d      	beq.n	8002de2 <Vital_Msg_extr+0xd6>
 8002d86:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d128      	bne.n	8002de2 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002d90:	2316      	movs	r3, #22
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d94:	4899      	ldr	r0, [pc, #612]	; (8002ffc <Vital_Msg_extr+0x2f0>)
 8002d96:	f017 f9f7 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b98      	ldr	r3, [pc, #608]	; (8003000 <Vital_Msg_extr+0x2f4>)
 8002d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002da2:	0dd9      	lsrs	r1, r3, #23
 8002da4:	460b      	mov	r3, r1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	1a5b      	subs	r3, r3, r1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002db0:	4894      	ldr	r0, [pc, #592]	; (8003004 <Vital_Msg_extr+0x2f8>)
 8002db2:	f01f fddd 	bl	8022970 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	4a93      	ldr	r2, [pc, #588]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4891      	ldr	r0, [pc, #580]	; (800300c <Vital_Msg_extr+0x300>)
 8002dc6:	f01f fd37 	bl	8022838 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dcc:	4890      	ldr	r0, [pc, #576]	; (8003010 <Vital_Msg_extr+0x304>)
 8002dce:	f01f fd33 	bl	8022838 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	2118      	movs	r1, #24
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fca6 	bl	800072c <InsertBits>
	{
 8002de0:	e00b      	b.n	8002dfa <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002de2:	78bb      	ldrb	r3, [r7, #2]
 8002de4:	4a88      	ldr	r2, [pc, #544]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	3308      	adds	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	2118      	movs	r1, #24
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fc99 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e00:	e010      	b.n	8002e24 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e02:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e0e:	3303      	adds	r3, #3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	443b      	add	r3, r7
 8002e16:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e24:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbe8      	blt.n	8002e02 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3303      	adds	r3, #3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f010 f913 	bl	801306c <CalculateDirectReverseCrc>
 8002e46:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	441a      	add	r2, r3
 8002e50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e54:	2120      	movs	r1, #32
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fbdc 	bl	8000614 <ExtractBits>
 8002e5c:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f000 80ec 	beq.w	8003040 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3305      	adds	r3, #5
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2108      	movs	r1, #8
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fbcf 	bl	8000614 <ExtractBits>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <Vital_Msg_extr+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3305      	adds	r3, #5
 8002e80:	461a      	mov	r2, r3
 8002e82:	2108      	movs	r1, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd fbc5 	bl	8000614 <ExtractBits>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 8098 	bne.w	8002fc2 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002e92:	4860      	ldr	r0, [pc, #384]	; (8003014 <Vital_Msg_extr+0x308>)
 8002e94:	f01f fd6c 	bl	8022970 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	223c      	movs	r2, #60	; 0x3c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f01f fbe1 	bl	8022668 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f107 0208 	add.w	r2, r7, #8
 8002eb8:	2118      	movs	r1, #24
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fc36 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ec6:	e010      	b.n	8002eea <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ec8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	441a      	add	r2, r3
 8002ed0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002eea:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	3b05      	subs	r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbe8      	blt.n	8002ec8 <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002ef6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3303      	adds	r3, #3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f010 f8b0 	bl	801306c <CalculateDirectReverseCrc>
 8002f0c:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	3b05      	subs	r3, #5
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	441a      	add	r2, r3
 8002f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb79 	bl	8000614 <ExtractBits>
 8002f22:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8002f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d136      	bne.n	8002f9a <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002f2e:	f01f fd1f 	bl	8022970 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f34:	4839      	ldr	r0, [pc, #228]	; (800301c <Vital_Msg_extr+0x310>)
 8002f36:	f01f fc7f 	bl	8022838 <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4835      	ldr	r0, [pc, #212]	; (8003020 <Vital_Msg_extr+0x314>)
 8002f4a:	f01f fc75 	bl	8022838 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f4e:	78bb      	ldrb	r3, [r7, #2]
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	440a      	add	r2, r1
 8002f56:	3208      	adds	r2, #8
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	492a      	ldr	r1, [pc, #168]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	3308      	adds	r3, #8
 8002f64:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	482b      	ldr	r0, [pc, #172]	; (8003024 <Vital_Msg_extr+0x318>)
 8002f76:	f01f fc5f 	bl	8022838 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	78ba      	ldrb	r2, [r7, #2]
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4403      	add	r3, r0
 8002f94:	3308      	adds	r3, #8
 8002f96:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002f98:	e053      	b.n	8003042 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <Vital_Msg_extr+0x320>)
 8002f9e:	3366      	adds	r3, #102	; 0x66
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4821      	ldr	r0, [pc, #132]	; (8003030 <Vital_Msg_extr+0x324>)
 8002faa:	f01f fc45 	bl	8022838 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fb0:	4820      	ldr	r0, [pc, #128]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fb2:	f01f fc41 	bl	8022838 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fba:	f01f fc3d 	bl	8022838 <iprintf>
				return;
 8002fbe:	f000 beac 	b.w	8003d1a <Vital_Msg_extr+0x100e>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <Vital_Msg_extr+0x320>)
 8002fc6:	3366      	adds	r3, #102	; 0x66
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481a      	ldr	r0, [pc, #104]	; (800303c <Vital_Msg_extr+0x330>)
 8002fd2:	f01f fc31 	bl	8022838 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fd8:	4816      	ldr	r0, [pc, #88]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fda:	f01f fc2d 	bl	8022838 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fe2:	f01f fc29 	bl	8022838 <iprintf>
			return;
 8002fe6:	f000 be98 	b.w	8003d1a <Vital_Msg_extr+0x100e>
		goto ROLLOVER_VITAL;
 8002fea:	bf00      	nop
 8002fec:	e029      	b.n	8003042 <Vital_Msg_extr+0x336>
 8002fee:	bf00      	nop
 8002ff0:	08023fe4 	.word	0x08023fe4
 8002ff4:	20000305 	.word	0x20000305
 8002ff8:	20001a1c 	.word	0x20001a1c
 8002ffc:	2000a05c 	.word	0x2000a05c
 8003000:	80008001 	.word	0x80008001
 8003004:	080244e8 	.word	0x080244e8
 8003008:	200011c4 	.word	0x200011c4
 800300c:	08024508 	.word	0x08024508
 8003010:	08024530 	.word	0x08024530
 8003014:	08024558 	.word	0x08024558
 8003018:	08024574 	.word	0x08024574
 800301c:	0802458c 	.word	0x0802458c
 8003020:	080245ac 	.word	0x080245ac
 8003024:	080245cc 	.word	0x080245cc
 8003028:	20001674 	.word	0x20001674
 800302c:	20000304 	.word	0x20000304
 8003030:	080245f8 	.word	0x080245f8
 8003034:	08024228 	.word	0x08024228
 8003038:	08024238 	.word	0x08024238
 800303c:	08024618 	.word	0x08024618
		}
	}

	ROLLOVER_VITAL:
 8003040:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003042:	78bb      	ldrb	r3, [r7, #2]
 8003044:	49c3      	ldr	r1, [pc, #780]	; (8003354 <Vital_Msg_extr+0x648>)
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	49c2      	ldr	r1, [pc, #776]	; (8003358 <Vital_Msg_extr+0x64c>)
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	4ac0      	ldr	r2, [pc, #768]	; (800335c <Vital_Msg_extr+0x650>)
 800305a:	2101      	movs	r1, #1
 800305c:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800305e:	78ba      	ldrb	r2, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	019b      	lsls	r3, r3, #6
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4abd      	ldr	r2, [pc, #756]	; (8003360 <Vital_Msg_extr+0x654>)
 800306a:	4413      	add	r3, r2
 800306c:	2280      	movs	r2, #128	; 0x80
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f01f faf9 	bl	8022668 <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 8003076:	78ba      	ldrb	r2, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	019b      	lsls	r3, r3, #6
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4ab7      	ldr	r2, [pc, #732]	; (8003360 <Vital_Msg_extr+0x654>)
 8003082:	4413      	add	r3, r2
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f01f fac5 	bl	8022618 <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 800308e:	78ba      	ldrb	r2, [r7, #2]
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	b298      	uxth	r0, r3
 8003094:	49b2      	ldr	r1, [pc, #712]	; (8003360 <Vital_Msg_extr+0x654>)
 8003096:	4613      	mov	r3, r2
 8003098:	019b      	lsls	r3, r3, #6
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	3380      	adds	r3, #128	; 0x80
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030a6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80030aa:	3308      	adds	r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Vital_Msg_extr+0x3a6>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ba:	4413      	add	r3, r2
 80030bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80030c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030c4:	3308      	adds	r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	425a      	negs	r2, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	f002 0207 	and.w	r2, r2, #7
 80030d4:	bf58      	it	pl
 80030d6:	4253      	negpl	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80030de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	441a      	add	r2, r3
 80030e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030ea:	2110      	movs	r1, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa91 	bl	8000614 <ExtractBits>
 80030f2:	4603      	mov	r3, r0
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	b298      	uxth	r0, r3
 80030f8:	499a      	ldr	r1, [pc, #616]	; (8003364 <Vital_Msg_extr+0x658>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	4602      	mov	r2, r0
 8003108:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800310a:	78ba      	ldrb	r2, [r7, #2]
 800310c:	4995      	ldr	r1, [pc, #596]	; (8003364 <Vital_Msg_extr+0x658>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4892      	ldr	r0, [pc, #584]	; (8003368 <Vital_Msg_extr+0x65c>)
 8003120:	f01f fb8a 	bl	8022838 <iprintf>
	BITSTUFFINC(16);
 8003124:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003128:	3310      	adds	r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	da00      	bge.n	8003130 <Vital_Msg_extr+0x424>
 800312e:	3307      	adds	r3, #7
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	b29a      	uxth	r2, r3
 8003134:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003138:	4413      	add	r3, r2
 800313a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800313e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003142:	3310      	adds	r3, #16
 8003144:	b29b      	uxth	r3, r3
 8003146:	b21b      	sxth	r3, r3
 8003148:	425a      	negs	r2, r3
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	f002 0207 	and.w	r2, r2, #7
 8003152:	bf58      	it	pl
 8003154:	4253      	negpl	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800315c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	441a      	add	r2, r3
 8003164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003168:	2110      	movs	r1, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fa52 	bl	8000614 <ExtractBits>
 8003170:	4603      	mov	r3, r0
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	b298      	uxth	r0, r3
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <Vital_Msg_extr+0x658>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3326      	adds	r3, #38	; 0x26
 8003184:	4602      	mov	r2, r0
 8003186:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 8003188:	78ba      	ldrb	r2, [r7, #2]
 800318a:	4976      	ldr	r1, [pc, #472]	; (8003364 <Vital_Msg_extr+0x658>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4873      	ldr	r0, [pc, #460]	; (800336c <Vital_Msg_extr+0x660>)
 800319e:	f01f fb4b 	bl	8022838 <iprintf>
	BITSTUFFINC(16);
 80031a2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80031a6:	3310      	adds	r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <Vital_Msg_extr+0x4a2>
 80031ac:	3307      	adds	r3, #7
 80031ae:	10db      	asrs	r3, r3, #3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031b6:	4413      	add	r3, r2
 80031b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031c0:	3310      	adds	r3, #16
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	425a      	negs	r2, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	f002 0207 	and.w	r2, r2, #7
 80031d0:	bf58      	it	pl
 80031d2:	4253      	negpl	r3, r2
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80031da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031e6:	2108      	movs	r1, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fa13 	bl	8000614 <ExtractBits>
 80031ee:	4602      	mov	r2, r0
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	b2d1      	uxtb	r1, r2
 80031f4:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <Vital_Msg_extr+0x664>)
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	460a      	mov	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003200:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003204:	3308      	adds	r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	da00      	bge.n	800320c <Vital_Msg_extr+0x500>
 800320a:	3307      	adds	r3, #7
 800320c:	10db      	asrs	r3, r3, #3
 800320e:	b29a      	uxth	r2, r3
 8003210:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003214:	4413      	add	r3, r2
 8003216:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800321a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321e:	3308      	adds	r3, #8
 8003220:	b29b      	uxth	r3, r3
 8003222:	b21b      	sxth	r3, r3
 8003224:	425a      	negs	r2, r3
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	f002 0207 	and.w	r2, r2, #7
 800322e:	bf58      	it	pl
 8003230:	4253      	negpl	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003244:	2108      	movs	r1, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9e4 	bl	8000614 <ExtractBits>
 800324c:	4602      	mov	r2, r0
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <Vital_Msg_extr+0x664>)
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	3301      	adds	r3, #1
 800325a:	460a      	mov	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	4a43      	ldr	r2, [pc, #268]	; (8003370 <Vital_Msg_extr+0x664>)
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3301      	adds	r3, #1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d138      	bne.n	80032e0 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	4a40      	ldr	r2, [pc, #256]	; (8003374 <Vital_Msg_extr+0x668>)
 8003272:	3366      	adds	r3, #102	; 0x66
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4619      	mov	r1, r3
 800327c:	483e      	ldr	r0, [pc, #248]	; (8003378 <Vital_Msg_extr+0x66c>)
 800327e:	f01f fadb 	bl	8022838 <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <Vital_Msg_extr+0x664>)
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	330c      	adds	r3, #12
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	483a      	ldr	r0, [pc, #232]	; (800337c <Vital_Msg_extr+0x670>)
 8003292:	f01f fad1 	bl	8022838 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <Vital_Msg_extr+0x664>)
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	440a      	add	r2, r1
 800329e:	320c      	adds	r2, #12
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	3201      	adds	r2, #1
 80032a4:	4932      	ldr	r1, [pc, #200]	; (8003370 <Vital_Msg_extr+0x664>)
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	330c      	adds	r3, #12
 80032ac:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <Vital_Msg_extr+0x664>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <Vital_Msg_extr+0x674>)
 80032be:	f01f fabb 	bl	8022838 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	492a      	ldr	r1, [pc, #168]	; (8003370 <Vital_Msg_extr+0x664>)
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	330c      	adds	r3, #12
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <Vital_Msg_extr+0x678>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4403      	add	r3, r0
 80032dc:	330c      	adds	r3, #12
 80032de:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80032e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e4:	3308      	adds	r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da00      	bge.n	80032ec <Vital_Msg_extr+0x5e0>
 80032ea:	3307      	adds	r3, #7
 80032ec:	10db      	asrs	r3, r3, #3
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f4:	4413      	add	r3, r2
 80032f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032fe:	3308      	adds	r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b21b      	sxth	r3, r3
 8003304:	425a      	negs	r2, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	f002 0207 	and.w	r2, r2, #7
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003318:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	441a      	add	r2, r3
 8003320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003324:	2108      	movs	r1, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f974 	bl	8000614 <ExtractBits>
 800332c:	4603      	mov	r3, r0
 800332e:	78ba      	ldrb	r2, [r7, #2]
 8003330:	b2d8      	uxtb	r0, r3
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <Vital_Msg_extr+0x658>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3302      	adds	r3, #2
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003344:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003348:	3308      	adds	r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	da1c      	bge.n	8003388 <Vital_Msg_extr+0x67c>
 800334e:	3307      	adds	r3, #7
 8003350:	e01a      	b.n	8003388 <Vital_Msg_extr+0x67c>
 8003352:	bf00      	nop
 8003354:	20000fa4 	.word	0x20000fa4
 8003358:	20000fcc 	.word	0x20000fcc
 800335c:	20001018 	.word	0x20001018
 8003360:	20001a3c 	.word	0x20001a3c
 8003364:	200013a4 	.word	0x200013a4
 8003368:	08024318 	.word	0x08024318
 800336c:	08024320 	.word	0x08024320
 8003370:	200011c4 	.word	0x200011c4
 8003374:	20000304 	.word	0x20000304
 8003378:	0802462c 	.word	0x0802462c
 800337c:	08024670 	.word	0x08024670
 8003380:	08024680 	.word	0x08024680
 8003384:	20001674 	.word	0x20001674
 8003388:	10db      	asrs	r3, r3, #3
 800338a:	b29a      	uxth	r2, r3
 800338c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003390:	4413      	add	r3, r2
 8003392:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800339a:	3308      	adds	r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b21b      	sxth	r3, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	f002 0207 	and.w	r2, r2, #7
 80033aa:	bf58      	it	pl
 80033ac:	4253      	negpl	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f926 	bl	8000614 <ExtractBits>
 80033c8:	4602      	mov	r2, r0
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	b291      	uxth	r1, r2
 80033ce:	4abd      	ldr	r2, [pc, #756]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	460a      	mov	r2, r1
 80033d8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80033da:	49bb      	ldr	r1, [pc, #748]	; (80036c8 <Vital_Msg_extr+0x9bc>)
 80033dc:	48bb      	ldr	r0, [pc, #748]	; (80036cc <Vital_Msg_extr+0x9c0>)
 80033de:	f7fc ff2f 	bl	8000240 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80033e8:	78bb      	ldrb	r3, [r7, #2]
 80033ea:	4ab6      	ldr	r2, [pc, #728]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	b291      	uxth	r1, r2
 80033fc:	4ab1      	ldr	r2, [pc, #708]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	460a      	mov	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003408:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800340c:	3310      	adds	r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <Vital_Msg_extr+0x708>
 8003412:	3307      	adds	r3, #7
 8003414:	10db      	asrs	r3, r3, #3
 8003416:	b29a      	uxth	r2, r3
 8003418:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800341c:	4413      	add	r3, r2
 800341e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003426:	3310      	adds	r3, #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	b21b      	sxth	r3, r3
 800342c:	425a      	negs	r2, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	f002 0207 	and.w	r2, r2, #7
 8003436:	bf58      	it	pl
 8003438:	4253      	negpl	r3, r2
 800343a:	b21b      	sxth	r3, r3
 800343c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	4aa0      	ldr	r2, [pc, #640]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8145 	beq.w	80036e0 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003462:	2108      	movs	r1, #8
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f8d5 	bl	8000614 <ExtractBits>
 800346a:	4603      	mov	r3, r0
 800346c:	78ba      	ldrb	r2, [r7, #2]
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	4997      	ldr	r1, [pc, #604]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	3305      	adds	r3, #5
 800347e:	4602      	mov	r2, r0
 8003480:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003482:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003486:	3308      	adds	r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <Vital_Msg_extr+0x782>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	b29a      	uxth	r2, r3
 8003492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003496:	4413      	add	r3, r2
 8003498:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800349c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a0:	3308      	adds	r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	425a      	negs	r2, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	bf58      	it	pl
 80034b2:	4253      	negpl	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c6:	2108      	movs	r1, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f8a3 	bl	8000614 <ExtractBits>
 80034ce:	4603      	mov	r3, r0
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	497e      	ldr	r1, [pc, #504]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80034e6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034ea:	3308      	adds	r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da00      	bge.n	80034f2 <Vital_Msg_extr+0x7e6>
 80034f0:	3307      	adds	r3, #7
 80034f2:	10db      	asrs	r3, r3, #3
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034fa:	4413      	add	r3, r2
 80034fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003504:	3308      	adds	r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21b      	sxth	r3, r3
 800350a:	425a      	negs	r2, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	f002 0207 	and.w	r2, r2, #7
 8003514:	bf58      	it	pl
 8003516:	4253      	negpl	r3, r2
 8003518:	b21b      	sxth	r3, r3
 800351a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800351e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	441a      	add	r2, r3
 8003526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800352a:	2108      	movs	r1, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f871 	bl	8000614 <ExtractBits>
 8003532:	4603      	mov	r3, r0
 8003534:	78ba      	ldrb	r2, [r7, #2]
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	4965      	ldr	r1, [pc, #404]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	3303      	adds	r3, #3
 8003546:	4602      	mov	r2, r0
 8003548:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800354a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800354e:	3308      	adds	r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <Vital_Msg_extr+0x84a>
 8003554:	3307      	adds	r3, #7
 8003556:	10db      	asrs	r3, r3, #3
 8003558:	b29a      	uxth	r2, r3
 800355a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800355e:	4413      	add	r3, r2
 8003560:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003564:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003568:	3308      	adds	r3, #8
 800356a:	b29b      	uxth	r3, r3
 800356c:	b21b      	sxth	r3, r3
 800356e:	425a      	negs	r2, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	f002 0207 	and.w	r2, r2, #7
 8003578:	bf58      	it	pl
 800357a:	4253      	negpl	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003582:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358e:	2108      	movs	r1, #8
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f83f 	bl	8000614 <ExtractBits>
 8003596:	4603      	mov	r3, r0
 8003598:	78ba      	ldrb	r2, [r7, #2]
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035ac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035b0:	3308      	adds	r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da00      	bge.n	80035b8 <Vital_Msg_extr+0x8ac>
 80035b6:	3307      	adds	r3, #7
 80035b8:	10db      	asrs	r3, r3, #3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035c0:	4413      	add	r3, r2
 80035c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ca:	3308      	adds	r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	425a      	negs	r2, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f002 0207 	and.w	r2, r2, #7
 80035da:	bf58      	it	pl
 80035dc:	4253      	negpl	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	441a      	add	r2, r3
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035f0:	2108      	movs	r1, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd f80e 	bl	8000614 <ExtractBits>
 80035f8:	4603      	mov	r3, r0
 80035fa:	78ba      	ldrb	r2, [r7, #2]
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	3301      	adds	r3, #1
 800360c:	4602      	mov	r2, r0
 800360e:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003610:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003614:	3308      	adds	r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <Vital_Msg_extr+0x910>
 800361a:	3307      	adds	r3, #7
 800361c:	10db      	asrs	r3, r3, #3
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003624:	4413      	add	r3, r2
 8003626:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800362a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800362e:	3308      	adds	r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	425a      	negs	r2, r3
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	f002 0207 	and.w	r2, r2, #7
 800363e:	bf58      	it	pl
 8003640:	4253      	negpl	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003648:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	441a      	add	r2, r3
 8003650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003654:	2108      	movs	r1, #8
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ffdc 	bl	8000614 <ExtractBits>
 800365c:	4603      	mov	r3, r0
 800365e:	78ba      	ldrb	r2, [r7, #2]
 8003660:	b2d8      	uxtb	r0, r3
 8003662:	491b      	ldr	r1, [pc, #108]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	3302      	adds	r3, #2
 8003670:	4602      	mov	r2, r0
 8003672:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003674:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003678:	3308      	adds	r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	da00      	bge.n	8003680 <Vital_Msg_extr+0x974>
 800367e:	3307      	adds	r3, #7
 8003680:	10db      	asrs	r3, r3, #3
 8003682:	b29a      	uxth	r2, r3
 8003684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003688:	4413      	add	r3, r2
 800368a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800368e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003692:	3308      	adds	r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	425a      	negs	r2, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	f002 0207 	and.w	r2, r2, #7
 80036a2:	bf58      	it	pl
 80036a4:	4253      	negpl	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036ac:	78bb      	ldrb	r3, [r7, #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 fb0e 	bl	8008cd0 <IS_MLK_EIPC_TIME_MATCHING>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <Vital_Msg_extr+0x9cc>
 80036ba:	78bb      	ldrb	r3, [r7, #2]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <Vital_Msg_extr+0x9c8>)
 80036be:	2100      	movs	r1, #0
 80036c0:	54d1      	strb	r1, [r2, r3]
 80036c2:	e00d      	b.n	80036e0 <Vital_Msg_extr+0x9d4>
 80036c4:	200011c4 	.word	0x200011c4
 80036c8:	08023fe4 	.word	0x08023fe4
 80036cc:	20000305 	.word	0x20000305
 80036d0:	20001188 	.word	0x20001188
 80036d4:	200010d8 	.word	0x200010d8
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <Vital_Msg_extr+0xbe8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <Vital_Msg_extr+0xbec>)
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	441a      	add	r2, r3
 8003702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003706:	2108      	movs	r1, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff83 	bl	8000614 <ExtractBits>
 800370e:	4603      	mov	r3, r0
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	4979      	ldr	r1, [pc, #484]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	3303      	adds	r3, #3
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003726:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800372a:	3308      	adds	r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	da00      	bge.n	8003732 <Vital_Msg_extr+0xa26>
 8003730:	3307      	adds	r3, #7
 8003732:	10db      	asrs	r3, r3, #3
 8003734:	b29a      	uxth	r2, r3
 8003736:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800373a:	4413      	add	r3, r2
 800373c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003744:	3308      	adds	r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21b      	sxth	r3, r3
 800374a:	425a      	negs	r2, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	f002 0207 	and.w	r2, r2, #7
 8003754:	bf58      	it	pl
 8003756:	4253      	negpl	r3, r2
 8003758:	b21b      	sxth	r3, r3
 800375a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	4966      	ldr	r1, [pc, #408]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	3303      	adds	r3, #3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	4863      	ldr	r0, [pc, #396]	; (8003900 <Vital_Msg_extr+0xbf4>)
 8003774:	f01f f860 	bl	8022838 <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	441a      	add	r2, r3
 8003780:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003784:	2108      	movs	r1, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc ff44 	bl	8000614 <ExtractBits>
 800378c:	4603      	mov	r3, r0
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	b2d8      	uxtb	r0, r3
 8003792:	495a      	ldr	r1, [pc, #360]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	4602      	mov	r2, r0
 80037a2:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037a4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80037a8:	3308      	adds	r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da00      	bge.n	80037b0 <Vital_Msg_extr+0xaa4>
 80037ae:	3307      	adds	r3, #7
 80037b0:	10db      	asrs	r3, r3, #3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037b8:	4413      	add	r3, r2
 80037ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c2:	3308      	adds	r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	f002 0207 	and.w	r2, r2, #7
 80037d2:	bf58      	it	pl
 80037d4:	4253      	negpl	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <Vital_Msg_extr+0xbf0>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	440b      	add	r3, r1
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80037f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80037fe:	78ba      	ldrb	r2, [r7, #2]
 8003800:	493e      	ldr	r1, [pc, #248]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	440b      	add	r3, r1
 800380c:	3303      	adds	r3, #3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800381a:	e00b      	b.n	8003834 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 800381c:	78ba      	ldrb	r2, [r7, #2]
 800381e:	4937      	ldr	r1, [pc, #220]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	440b      	add	r3, r1
 800382a:	3303      	adds	r3, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003834:	2300      	movs	r3, #0
 8003836:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800383a:	e04c      	b.n	80038d6 <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800383c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	441a      	add	r2, r3
 8003844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003848:	2108      	movs	r1, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fee2 	bl	8000614 <ExtractBits>
 8003850:	4603      	mov	r3, r0
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003858:	b2dc      	uxtb	r4, r3
 800385a:	4828      	ldr	r0, [pc, #160]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4403      	add	r3, r0
 8003866:	440b      	add	r3, r1
 8003868:	3305      	adds	r3, #5
 800386a:	4622      	mov	r2, r4
 800386c:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800386e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003878:	4c20      	ldr	r4, [pc, #128]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4423      	add	r3, r4
 8003884:	440b      	add	r3, r1
 8003886:	3305      	adds	r3, #5
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4601      	mov	r1, r0
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <Vital_Msg_extr+0xbf8>)
 8003890:	f01e ffd2 	bl	8022838 <iprintf>
		BITSTUFFINC(8);
 8003894:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003898:	3308      	adds	r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	da00      	bge.n	80038a0 <Vital_Msg_extr+0xb94>
 800389e:	3307      	adds	r3, #7
 80038a0:	10db      	asrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038a8:	4413      	add	r3, r2
 80038aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038b2:	3308      	adds	r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	425a      	negs	r2, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	f002 0207 	and.w	r2, r2, #7
 80038c2:	bf58      	it	pl
 80038c4:	4253      	negpl	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d0:	3301      	adds	r3, #1
 80038d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ab      	bcc.n	800383c <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80038e4:	200a      	movs	r0, #10
 80038e6:	f01e ffbf 	bl	8022868 <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038f0:	e044      	b.n	800397c <Vital_Msg_extr+0xc70>
 80038f2:	bf00      	nop
 80038f4:	200010d8 	.word	0x200010d8
 80038f8:	200011c4 	.word	0x200011c4
 80038fc:	200013a4 	.word	0x200013a4
 8003900:	08024690 	.word	0x08024690
 8003904:	08024698 	.word	0x08024698
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003908:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	441a      	add	r2, r3
 8003910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003914:	2108      	movs	r1, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fe7c 	bl	8000614 <ExtractBits>
 800391c:	4603      	mov	r3, r0
 800391e:	78ba      	ldrb	r2, [r7, #2]
 8003920:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003924:	b2dc      	uxtb	r4, r3
 8003926:	48c4      	ldr	r0, [pc, #784]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4403      	add	r3, r0
 8003932:	440b      	add	r3, r1
 8003934:	3315      	adds	r3, #21
 8003936:	4622      	mov	r2, r4
 8003938:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800393a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800393e:	3308      	adds	r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	da00      	bge.n	8003946 <Vital_Msg_extr+0xc3a>
 8003944:	3307      	adds	r3, #7
 8003946:	10db      	asrs	r3, r3, #3
 8003948:	b29a      	uxth	r2, r3
 800394a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800394e:	4413      	add	r3, r2
 8003950:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003958:	3308      	adds	r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	425a      	negs	r2, r3
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	f002 0207 	and.w	r2, r2, #7
 8003968:	bf58      	it	pl
 800396a:	4253      	negpl	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003972:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003976:	3301      	adds	r3, #1
 8003978:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	49ae      	ldr	r1, [pc, #696]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b7      	bcc.n	8003908 <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003998:	787a      	ldrb	r2, [r7, #1]
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa6e 	bl	8006e80 <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	4aa5      	ldr	r2, [pc, #660]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80039ac:	78bb      	ldrb	r3, [r7, #2]
 80039ae:	4aa3      	ldr	r2, [pc, #652]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039b0:	3302      	adds	r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	49a0      	ldr	r1, [pc, #640]	; (8003c40 <Vital_Msg_extr+0xf34>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3304      	adds	r3, #4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d116      	bne.n	80039fe <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80039d0:	2286      	movs	r2, #134	; 0x86
 80039d2:	2100      	movs	r1, #0
 80039d4:	489b      	ldr	r0, [pc, #620]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039d6:	f01e fe47 	bl	8022668 <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e0:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e8:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4895      	ldr	r0, [pc, #596]	; (8003c48 <Vital_Msg_extr+0xf3c>)
 80039f2:	f01e fe11 	bl	8022618 <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
 80039f6:	f240 2003 	movw	r0, #515	; 0x203
 80039fa:	f00b ff39 	bl	800f870 <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 80039fe:	78ba      	ldrb	r2, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	2210      	movs	r2, #16
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f01e fe28 	bl	8022668 <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	1c58      	adds	r0, r3, #1
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4a81      	ldr	r2, [pc, #516]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003a34:	4413      	add	r3, r2
 8003a36:	3305      	adds	r3, #5
 8003a38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f01e fdeb 	bl	8022618 <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003a42:	78ba      	ldrb	r2, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	3301      	adds	r3, #1
 8003a52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a56:	b212      	sxth	r2, r2
 8003a58:	78bc      	ldrb	r4, [r7, #2]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f00f fa4b 	bl	8012ef8 <GetCRC16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a68:	4623      	mov	r3, r4
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4423      	add	r3, r4
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3312      	adds	r3, #18
 8003a74:	460a      	mov	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003a78:	78ba      	ldrb	r2, [r7, #2]
 8003a7a:	4974      	ldr	r1, [pc, #464]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3311      	adds	r3, #17
 8003a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a8c:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003a8e:	78ba      	ldrb	r2, [r7, #2]
 8003a90:	496e      	ldr	r1, [pc, #440]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	78ba      	ldrb	r2, [r7, #2]
 8003a9e:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003aa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d172      	bne.n	8003b8e <Vital_Msg_extr+0xe82>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	2210      	movs	r2, #16
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f01e fdd3 	bl	8022668 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ac2:	78ba      	ldrb	r2, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ace:	1898      	adds	r0, r3, r2
 8003ad0:	78ba      	ldrb	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003adc:	4413      	add	r3, r2
 8003ade:	2214      	movs	r2, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f01e fd99 	bl	8022618 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003ae6:	78bb      	ldrb	r3, [r7, #2]
 8003ae8:	495a      	ldr	r1, [pc, #360]	; (8003c54 <Vital_Msg_extr+0xf48>)
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003af4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003af8:	78ba      	ldrb	r2, [r7, #2]
 8003afa:	4855      	ldr	r0, [pc, #340]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3312      	adds	r3, #18
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d03f      	beq.n	8003b8e <Vital_Msg_extr+0xe82>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b0e:	78ba      	ldrb	r2, [r7, #2]
 8003b10:	78b9      	ldrb	r1, [r7, #2]
 8003b12:	484f      	ldr	r0, [pc, #316]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3312      	adds	r3, #18
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003b24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003b28:	2214      	movs	r2, #20
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	484b      	ldr	r0, [pc, #300]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b2e:	f01e fd9b 	bl	8022668 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003b32:	78ba      	ldrb	r2, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	2214      	movs	r2, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4845      	ldr	r0, [pc, #276]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b46:	f01e fd67 	bl	8022618 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8003b4a:	f240 2007 	movw	r0, #519	; 0x207
 8003b4e:	f00b fe8f 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <Vital_Msg_extr+0xf54>)
 8003b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d117      	bne.n	8003b8e <Vital_Msg_extr+0xe82>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b5e:	78bb      	ldrb	r3, [r7, #2]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <Vital_Msg_extr+0xf58>)
 8003b64:	4413      	add	r3, r2
 8003b66:	1c98      	adds	r0, r3, #2
 8003b68:	78ba      	ldrb	r2, [r7, #2]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b74:	4413      	add	r3, r2
 8003b76:	3301      	adds	r3, #1
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f01e fd4c 	bl	8022618 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8003b80:	f240 1019 	movw	r0, #281	; 0x119
 8003b84:	f00b fe74 	bl	800f870 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8003b88:	4a37      	ldr	r2, [pc, #220]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003b8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003b8c:	6013      	str	r3, [r2, #0]

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b8e:	78b9      	ldrb	r1, [r7, #2]
 8003b90:	78ba      	ldrb	r2, [r7, #2]
 8003b92:	482f      	ldr	r0, [pc, #188]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b94:	460b      	mov	r3, r1
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	440b      	add	r3, r1
 8003b9a:	009b      	lsls	r3, r3, #2
 8003b9c:	4403      	add	r3, r0
 8003b9e:	3312      	adds	r3, #18
 8003ba0:	8818      	ldrh	r0, [r3, #0]
 8003ba2:	4927      	ldr	r1, [pc, #156]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	005b      	lsls	r3, r3, #1
 8003ba8:	4413      	add	r3, r2
 8003baa:	00db      	lsls	r3, r3, #3
 8003bac:	440b      	add	r3, r1
 8003bae:	3306      	adds	r3, #6
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003bb4:	78ba      	ldrb	r2, [r7, #2]
 8003bb6:	4922      	ldr	r1, [pc, #136]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bb8:	4613      	mov	r3, r2
 8003bba:	005b      	lsls	r3, r3, #1
 8003bbc:	4413      	add	r3, r2
 8003bbe:	00db      	lsls	r3, r3, #3
 8003bc0:	440b      	add	r3, r1
 8003bc2:	3314      	adds	r3, #20
 8003bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc6:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003bc8:	78ba      	ldrb	r2, [r7, #2]
 8003bca:	491d      	ldr	r1, [pc, #116]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bcc:	4613      	mov	r3, r2
 8003bce:	005b      	lsls	r3, r3, #1
 8003bd0:	4413      	add	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	440b      	add	r3, r1
 8003bd6:	3305      	adds	r3, #5
 8003bd8:	2202      	movs	r2, #2
 8003bda:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	4918      	ldr	r1, [pc, #96]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003be0:	4613      	mov	r3, r2
 8003be2:	005b      	lsls	r3, r3, #1
 8003be4:	4413      	add	r3, r2
 8003be6:	00db      	lsls	r3, r3, #3
 8003be8:	440b      	add	r3, r1
 8003bea:	78ba      	ldrb	r2, [r7, #2]
 8003bec:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003bee:	78ba      	ldrb	r2, [r7, #2]
 8003bf0:	4913      	ldr	r1, [pc, #76]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bf2:	4613      	mov	r3, r2
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	440b      	add	r3, r1
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	2201      	movs	r2, #1
 8003c00:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003c02:	78ba      	ldrb	r2, [r7, #2]
 8003c04:	490e      	ldr	r1, [pc, #56]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c06:	4613      	mov	r3, r2
 8003c08:	005b      	lsls	r3, r3, #1
 8003c0a:	4413      	add	r3, r2
 8003c0c:	00db      	lsls	r3, r3, #3
 8003c0e:	440b      	add	r3, r1
 8003c10:	3302      	adds	r3, #2
 8003c12:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003c16:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003c18:	2218      	movs	r2, #24
 8003c1a:	2100      	movs	r1, #0
 8003c1c:	4813      	ldr	r0, [pc, #76]	; (8003c6c <Vital_Msg_extr+0xf60>)
 8003c1e:	f01e fd23 	bl	8022668 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003c22:	78ba      	ldrb	r2, [r7, #2]
 8003c24:	4613      	mov	r3, r2
 8003c26:	005b      	lsls	r3, r3, #1
 8003c28:	4413      	add	r3, r2
 8003c2a:	00db      	lsls	r3, r3, #3
 8003c2c:	4a04      	ldr	r2, [pc, #16]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c2e:	4413      	add	r3, r2
 8003c30:	2218      	movs	r2, #24
 8003c32:	4619      	mov	r1, r3
 8003c34:	e01c      	b.n	8003c70 <Vital_Msg_extr+0xf64>
 8003c36:	bf00      	nop
 8003c38:	200013a4 	.word	0x200013a4
 8003c3c:	20001fd4 	.word	0x20001fd4
 8003c40:	20001674 	.word	0x20001674
 8003c44:	20001884 	.word	0x20001884
 8003c48:	2000188a 	.word	0x2000188a
 8003c4c:	200020f8 	.word	0x200020f8
 8003c50:	200021c0 	.word	0x200021c0
 8003c54:	20000ed8 	.word	0x20000ed8
 8003c58:	20000f00 	.word	0x20000f00
 8003c5c:	20002350 	.word	0x20002350
 8003c60:	20000ec4 	.word	0x20000ec4
 8003c64:	200010e4 	.word	0x200010e4
 8003c68:	20000e70 	.word	0x20000e70
 8003c6c:	20001854 	.word	0x20001854
 8003c70:	482b      	ldr	r0, [pc, #172]	; (8003d20 <Vital_Msg_extr+0x1014>)
 8003c72:	f01e fcd1 	bl	8022618 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8003c76:	f240 2001 	movw	r0, #513	; 0x201
 8003c7a:	f00b fdf9 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003c7e:	78ba      	ldrb	r2, [r7, #2]
 8003c80:	4928      	ldr	r1, [pc, #160]	; (8003d24 <Vital_Msg_extr+0x1018>)
 8003c82:	4613      	mov	r3, r2
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	4413      	add	r3, r2
 8003c88:	00db      	lsls	r3, r3, #3
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003c92:	78bb      	ldrb	r3, [r7, #2]
 8003c94:	4924      	ldr	r1, [pc, #144]	; (8003d28 <Vital_Msg_extr+0x101c>)
 8003c96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003c9c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d11d      	bne.n	8003ce0 <Vital_Msg_extr+0xfd4>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003ca4:	78bb      	ldrb	r3, [r7, #2]
 8003ca6:	4921      	ldr	r1, [pc, #132]	; (8003d2c <Vital_Msg_extr+0x1020>)
 8003ca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003caa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003cae:	78ba      	ldrb	r2, [r7, #2]
 8003cb0:	491f      	ldr	r1, [pc, #124]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cc0:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003cc2:	78ba      	ldrb	r2, [r7, #2]
 8003cc4:	491a      	ldr	r1, [pc, #104]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	4413      	add	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003cd6:	78bb      	ldrb	r3, [r7, #2]
 8003cd8:	4a16      	ldr	r2, [pc, #88]	; (8003d34 <Vital_Msg_extr+0x1028>)
 8003cda:	2101      	movs	r1, #1
 8003cdc:	54d1      	strb	r1, [r2, r3]
 8003cde:	e017      	b.n	8003d10 <Vital_Msg_extr+0x1004>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003ce0:	78bb      	ldrb	r3, [r7, #2]
 8003ce2:	4a14      	ldr	r2, [pc, #80]	; (8003d34 <Vital_Msg_extr+0x1028>)
 8003ce4:	2100      	movs	r1, #0
 8003ce6:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	4911      	ldr	r1, [pc, #68]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3308      	adds	r3, #8
 8003cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cfa:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003cfc:	78ba      	ldrb	r2, [r7, #2]
 8003cfe:	490c      	ldr	r1, [pc, #48]	; (8003d30 <Vital_Msg_extr+0x1024>)
 8003d00:	4613      	mov	r3, r2
 8003d02:	005b      	lsls	r3, r3, #1
 8003d04:	4413      	add	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003d10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d14:	4808      	ldr	r0, [pc, #32]	; (8003d38 <Vital_Msg_extr+0x102c>)
 8003d16:	f014 fa6e 	bl	80181f6 <HAL_GPIO_TogglePin>

}
 8003d1a:	3764      	adds	r7, #100	; 0x64
 8003d1c:	46bd      	mov	sp, r7
 8003d1e:	bd90      	pop	{r4, r7, pc}
 8003d20:	20001854 	.word	0x20001854
 8003d24:	20001674 	.word	0x20001674
 8003d28:	20000e44 	.word	0x20000e44
 8003d2c:	20000f14 	.word	0x20000f14
 8003d30:	20002008 	.word	0x20002008
 8003d34:	20000f64 	.word	0x20000f64
 8003d38:	40021c00 	.word	0x40021c00

08003d3c <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003d3c:	b590      	push	{r4, r7, lr}
 8003d3e:	b0a5      	sub	sp, #148	; 0x94
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	4603      	mov	r3, r0
 8003d44:	460a      	mov	r2, r1
 8003d46:	71fb      	strb	r3, [r7, #7]
 8003d48:	4613      	mov	r3, r2
 8003d4a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d50:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d54:	2238      	movs	r2, #56	; 0x38
 8003d56:	2100      	movs	r1, #0
 8003d58:	4618      	mov	r0, r3
 8003d5a:	f01e fc85 	bl	8022668 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003d5e:	2300      	movs	r3, #0
 8003d60:	60fb      	str	r3, [r7, #12]
 8003d62:	f107 0310 	add.w	r3, r7, #16
 8003d66:	2238      	movs	r2, #56	; 0x38
 8003d68:	2100      	movs	r1, #0
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f01e fc7c 	bl	8022668 <memset>
	uint8_t uc_index = 0;
 8003d70:	2300      	movs	r3, #0
 8003d72:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003d76:	2300      	movs	r3, #0
 8003d78:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003d82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d86:	223c      	movs	r2, #60	; 0x3c
 8003d88:	2100      	movs	r1, #0
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f01e fc6c 	bl	8022668 <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003d90:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d94:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d98:	441a      	add	r2, r3
 8003d9a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003d9e:	23f4      	movs	r3, #244	; 0xf4
 8003da0:	2108      	movs	r1, #8
 8003da2:	f7fc fcc3 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003da6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003daa:	3308      	adds	r3, #8
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	da00      	bge.n	8003db2 <Send_Vital_Data_Message+0x76>
 8003db0:	3307      	adds	r3, #7
 8003db2:	10db      	asrs	r3, r3, #3
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dba:	4413      	add	r3, r2
 8003dbc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003dc0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dc4:	3308      	adds	r3, #8
 8003dc6:	b29b      	uxth	r3, r3
 8003dc8:	b21b      	sxth	r3, r3
 8003dca:	425a      	negs	r2, r3
 8003dcc:	f003 0307 	and.w	r3, r3, #7
 8003dd0:	f002 0207 	and.w	r2, r2, #7
 8003dd4:	bf58      	it	pl
 8003dd6:	4253      	negpl	r3, r2
 8003dd8:	b21b      	sxth	r3, r3
 8003dda:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003dde:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003de2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003de6:	441a      	add	r2, r3
 8003de8:	79fb      	ldrb	r3, [r7, #7]
 8003dea:	49c6      	ldr	r1, [pc, #792]	; (8004104 <Send_Vital_Data_Message+0x3c8>)
 8003dec:	3366      	adds	r3, #102	; 0x66
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003df8:	2110      	movs	r1, #16
 8003dfa:	f7fc fc97 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003dfe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e02:	3310      	adds	r3, #16
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	da00      	bge.n	8003e0a <Send_Vital_Data_Message+0xce>
 8003e08:	3307      	adds	r3, #7
 8003e0a:	10db      	asrs	r3, r3, #3
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e12:	4413      	add	r3, r2
 8003e14:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e18:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e1c:	3310      	adds	r3, #16
 8003e1e:	b29b      	uxth	r3, r3
 8003e20:	b21b      	sxth	r3, r3
 8003e22:	425a      	negs	r2, r3
 8003e24:	f003 0307 	and.w	r3, r3, #7
 8003e28:	f002 0207 	and.w	r2, r2, #7
 8003e2c:	bf58      	it	pl
 8003e2e:	4253      	negpl	r3, r2
 8003e30:	b21b      	sxth	r3, r3
 8003e32:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003e36:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e3a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e3e:	441a      	add	r2, r3
 8003e40:	79fb      	ldrb	r3, [r7, #7]
 8003e42:	49b0      	ldr	r1, [pc, #704]	; (8004104 <Send_Vital_Data_Message+0x3c8>)
 8003e44:	3370      	adds	r3, #112	; 0x70
 8003e46:	009b      	lsls	r3, r3, #2
 8003e48:	440b      	add	r3, r1
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e50:	2110      	movs	r1, #16
 8003e52:	f7fc fc6b 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e56:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e5a:	3310      	adds	r3, #16
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	da00      	bge.n	8003e62 <Send_Vital_Data_Message+0x126>
 8003e60:	3307      	adds	r3, #7
 8003e62:	10db      	asrs	r3, r3, #3
 8003e64:	b29a      	uxth	r2, r3
 8003e66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e70:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e74:	3310      	adds	r3, #16
 8003e76:	b29b      	uxth	r3, r3
 8003e78:	b21b      	sxth	r3, r3
 8003e7a:	425a      	negs	r2, r3
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	f002 0207 	and.w	r2, r2, #7
 8003e84:	bf58      	it	pl
 8003e86:	4253      	negpl	r3, r2
 8003e88:	b21b      	sxth	r3, r3
 8003e8a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003e8e:	4b9e      	ldr	r3, [pc, #632]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	089b      	lsrs	r3, r3, #2
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d035      	beq.n	8003f08 <Send_Vital_Data_Message+0x1cc>
 8003e9c:	4b9a      	ldr	r3, [pc, #616]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003e9e:	791b      	ldrb	r3, [r3, #4]
 8003ea0:	79fa      	ldrb	r2, [r7, #7]
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d130      	bne.n	8003f08 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003eac:	4897      	ldr	r0, [pc, #604]	; (800410c <Send_Vital_Data_Message+0x3d0>)
 8003eae:	f016 f96b 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	4b96      	ldr	r3, [pc, #600]	; (8004110 <Send_Vital_Data_Message+0x3d4>)
 8003eb6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eba:	099b      	lsrs	r3, r3, #6
 8003ebc:	21c8      	movs	r1, #200	; 0xc8
 8003ebe:	fb01 f303 	mul.w	r3, r1, r3
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003ec8:	4892      	ldr	r0, [pc, #584]	; (8004114 <Send_Vital_Data_Message+0x3d8>)
 8003eca:	f01e fd51 	bl	8022970 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003ece:	79fb      	ldrb	r3, [r7, #7]
 8003ed0:	4a91      	ldr	r2, [pc, #580]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	4413      	add	r3, r2
 8003ed6:	3301      	adds	r3, #1
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	4619      	mov	r1, r3
 8003edc:	488f      	ldr	r0, [pc, #572]	; (800411c <Send_Vital_Data_Message+0x3e0>)
 8003ede:	f01e fcab 	bl	8022838 <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003ee2:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ee6:	4619      	mov	r1, r3
 8003ee8:	488d      	ldr	r0, [pc, #564]	; (8004120 <Send_Vital_Data_Message+0x3e4>)
 8003eea:	f01e fca5 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003eee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ef2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ef6:	441a      	add	r2, r3
 8003ef8:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003efc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f00:	2108      	movs	r1, #8
 8003f02:	f7fc fc13 	bl	800072c <InsertBits>
	{
 8003f06:	e00f      	b.n	8003f28 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003f08:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f0c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003f10:	441a      	add	r2, r3
 8003f12:	79fb      	ldrb	r3, [r7, #7]
 8003f14:	4980      	ldr	r1, [pc, #512]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	440b      	add	r3, r1
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f22:	2108      	movs	r1, #8
 8003f24:	f7fc fc02 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003f28:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f2c:	3308      	adds	r3, #8
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da00      	bge.n	8003f34 <Send_Vital_Data_Message+0x1f8>
 8003f32:	3307      	adds	r3, #7
 8003f34:	10db      	asrs	r3, r3, #3
 8003f36:	b29a      	uxth	r2, r3
 8003f38:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f3c:	4413      	add	r3, r2
 8003f3e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f42:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f46:	3308      	adds	r3, #8
 8003f48:	b29b      	uxth	r3, r3
 8003f4a:	b21b      	sxth	r3, r3
 8003f4c:	425a      	negs	r2, r3
 8003f4e:	f003 0307 	and.w	r3, r3, #7
 8003f52:	f002 0207 	and.w	r2, r2, #7
 8003f56:	bf58      	it	pl
 8003f58:	4253      	negpl	r3, r2
 8003f5a:	b21b      	sxth	r3, r3
 8003f5c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f60:	4b69      	ldr	r3, [pc, #420]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f003 0301 	and.w	r3, r3, #1
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d035      	beq.n	8003fda <Send_Vital_Data_Message+0x29e>
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <Send_Vital_Data_Message+0x3cc>)
 8003f70:	791b      	ldrb	r3, [r3, #4]
 8003f72:	79fa      	ldrb	r2, [r7, #7]
 8003f74:	429a      	cmp	r2, r3
 8003f76:	d130      	bne.n	8003fda <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8003f7e:	4863      	ldr	r0, [pc, #396]	; (800410c <Send_Vital_Data_Message+0x3d0>)
 8003f80:	f016 f902 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8003f84:	4602      	mov	r2, r0
 8003f86:	4b62      	ldr	r3, [pc, #392]	; (8004110 <Send_Vital_Data_Message+0x3d4>)
 8003f88:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8c:	099b      	lsrs	r3, r3, #6
 8003f8e:	21c8      	movs	r1, #200	; 0xc8
 8003f90:	fb01 f303 	mul.w	r3, r1, r3
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8003f9a:	4862      	ldr	r0, [pc, #392]	; (8004124 <Send_Vital_Data_Message+0x3e8>)
 8003f9c:	f01e fce8 	bl	8022970 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	4a5d      	ldr	r2, [pc, #372]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003fa4:	011b      	lsls	r3, r3, #4
 8003fa6:	4413      	add	r3, r2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	4619      	mov	r1, r3
 8003fae:	485e      	ldr	r0, [pc, #376]	; (8004128 <Send_Vital_Data_Message+0x3ec>)
 8003fb0:	f01e fc42 	bl	8022838 <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8003fb4:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fb8:	4619      	mov	r1, r3
 8003fba:	485c      	ldr	r0, [pc, #368]	; (800412c <Send_Vital_Data_Message+0x3f0>)
 8003fbc:	f01e fc3c 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8003fc0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fc8:	441a      	add	r2, r3
 8003fca:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fce:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fd2:	2108      	movs	r1, #8
 8003fd4:	f7fc fbaa 	bl	800072c <InsertBits>
	{
 8003fd8:	e00f      	b.n	8003ffa <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8003fda:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fde:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fe2:	441a      	add	r2, r3
 8003fe4:	79fb      	ldrb	r3, [r7, #7]
 8003fe6:	494c      	ldr	r1, [pc, #304]	; (8004118 <Send_Vital_Data_Message+0x3dc>)
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	440b      	add	r3, r1
 8003fec:	3302      	adds	r3, #2
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003ff4:	2108      	movs	r1, #8
 8003ff6:	f7fc fb99 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 8003ffa:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003ffe:	3308      	adds	r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	da00      	bge.n	8004006 <Send_Vital_Data_Message+0x2ca>
 8004004:	3307      	adds	r3, #7
 8004006:	10db      	asrs	r3, r3, #3
 8004008:	b29a      	uxth	r2, r3
 800400a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800400e:	4413      	add	r3, r2
 8004010:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004014:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004018:	3308      	adds	r3, #8
 800401a:	b29b      	uxth	r3, r3
 800401c:	b21b      	sxth	r3, r3
 800401e:	425a      	negs	r2, r3
 8004020:	f003 0307 	and.w	r3, r3, #7
 8004024:	f002 0207 	and.w	r2, r2, #7
 8004028:	bf58      	it	pl
 800402a:	4253      	negpl	r3, r2
 800402c:	b21b      	sxth	r3, r3
 800402e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 8004032:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004036:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800403a:	441a      	add	r2, r3
 800403c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004040:	2302      	movs	r3, #2
 8004042:	2108      	movs	r1, #8
 8004044:	f7fc fb72 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004048:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800404c:	3308      	adds	r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	da00      	bge.n	8004054 <Send_Vital_Data_Message+0x318>
 8004052:	3307      	adds	r3, #7
 8004054:	10db      	asrs	r3, r3, #3
 8004056:	b29a      	uxth	r2, r3
 8004058:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800405c:	4413      	add	r3, r2
 800405e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004062:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004066:	3308      	adds	r3, #8
 8004068:	b29b      	uxth	r3, r3
 800406a:	b21b      	sxth	r3, r3
 800406c:	425a      	negs	r2, r3
 800406e:	f003 0307 	and.w	r3, r3, #7
 8004072:	f002 0207 	and.w	r2, r2, #7
 8004076:	bf58      	it	pl
 8004078:	4253      	negpl	r3, r2
 800407a:	b21b      	sxth	r3, r3
 800407c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004080:	79fb      	ldrb	r3, [r7, #7]
 8004082:	4a2b      	ldr	r2, [pc, #172]	; (8004130 <Send_Vital_Data_Message+0x3f4>)
 8004084:	5cd3      	ldrb	r3, [r2, r3]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d15a      	bne.n	8004140 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 800408a:	f007 f9c3 	bl	800b414 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800408e:	79fa      	ldrb	r2, [r7, #7]
 8004090:	4613      	mov	r3, r2
 8004092:	005b      	lsls	r3, r3, #1
 8004094:	4413      	add	r3, r2
 8004096:	005b      	lsls	r3, r3, #1
 8004098:	4a26      	ldr	r2, [pc, #152]	; (8004134 <Send_Vital_Data_Message+0x3f8>)
 800409a:	4413      	add	r3, r2
 800409c:	4a26      	ldr	r2, [pc, #152]	; (8004138 <Send_Vital_Data_Message+0x3fc>)
 800409e:	6811      	ldr	r1, [r2, #0]
 80040a0:	6019      	str	r1, [r3, #0]
 80040a2:	8892      	ldrh	r2, [r2, #4]
 80040a4:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80040a6:	4825      	ldr	r0, [pc, #148]	; (800413c <Send_Vital_Data_Message+0x400>)
 80040a8:	f01e fc62 	bl	8022970 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80040ac:	79fb      	ldrb	r3, [r7, #7]
 80040ae:	4a20      	ldr	r2, [pc, #128]	; (8004130 <Send_Vital_Data_Message+0x3f4>)
 80040b0:	2100      	movs	r1, #0
 80040b2:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 80040b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040bc:	441a      	add	r2, r3
 80040be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040c2:	2368      	movs	r3, #104	; 0x68
 80040c4:	2110      	movs	r1, #16
 80040c6:	f7fc fb31 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80040ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040ce:	3310      	adds	r3, #16
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	da00      	bge.n	80040d6 <Send_Vital_Data_Message+0x39a>
 80040d4:	3307      	adds	r3, #7
 80040d6:	10db      	asrs	r3, r3, #3
 80040d8:	b29a      	uxth	r2, r3
 80040da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040de:	4413      	add	r3, r2
 80040e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040e8:	3310      	adds	r3, #16
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	b21b      	sxth	r3, r3
 80040ee:	425a      	negs	r2, r3
 80040f0:	f003 0307 	and.w	r3, r3, #7
 80040f4:	f002 0207 	and.w	r2, r2, #7
 80040f8:	bf58      	it	pl
 80040fa:	4253      	negpl	r3, r2
 80040fc:	b21b      	sxth	r3, r3
 80040fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8004102:	e044      	b.n	800418e <Send_Vital_Data_Message+0x452>
 8004104:	20000304 	.word	0x20000304
 8004108:	20001a1c 	.word	0x20001a1c
 800410c:	2000a05c 	.word	0x2000a05c
 8004110:	51eb851f 	.word	0x51eb851f
 8004114:	080246a8 	.word	0x080246a8
 8004118:	200011c4 	.word	0x200011c4
 800411c:	080246cc 	.word	0x080246cc
 8004120:	080246ec 	.word	0x080246ec
 8004124:	080243f0 	.word	0x080243f0
 8004128:	08024414 	.word	0x08024414
 800412c:	08024434 	.word	0x08024434
 8004130:	200010d8 	.word	0x200010d8
 8004134:	20001188 	.word	0x20001188
 8004138:	20002bcc 	.word	0x20002bcc
 800413c:	0802470c 	.word	0x0802470c
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004140:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004144:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004148:	441a      	add	r2, r3
 800414a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800414e:	2328      	movs	r3, #40	; 0x28
 8004150:	2110      	movs	r1, #16
 8004152:	f7fc faeb 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8004156:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800415a:	3310      	adds	r3, #16
 800415c:	2b00      	cmp	r3, #0
 800415e:	da00      	bge.n	8004162 <Send_Vital_Data_Message+0x426>
 8004160:	3307      	adds	r3, #7
 8004162:	10db      	asrs	r3, r3, #3
 8004164:	b29a      	uxth	r2, r3
 8004166:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800416a:	4413      	add	r3, r2
 800416c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004170:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004174:	3310      	adds	r3, #16
 8004176:	b29b      	uxth	r3, r3
 8004178:	b21b      	sxth	r3, r3
 800417a:	425a      	negs	r2, r3
 800417c:	f003 0307 	and.w	r3, r3, #7
 8004180:	f002 0207 	and.w	r2, r2, #7
 8004184:	bf58      	it	pl
 8004186:	4253      	negpl	r3, r2
 8004188:	b21b      	sxth	r3, r3
 800418a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800418e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004192:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004196:	18d1      	adds	r1, r2, r3
 8004198:	79fa      	ldrb	r2, [r7, #7]
 800419a:	48cd      	ldr	r0, [pc, #820]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800419c:	4613      	mov	r3, r2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	4413      	add	r3, r2
 80041a2:	005b      	lsls	r3, r3, #1
 80041a4:	4403      	add	r3, r0
 80041a6:	3305      	adds	r3, #5
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041ae:	460a      	mov	r2, r1
 80041b0:	2108      	movs	r1, #8
 80041b2:	f7fc fabb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041b6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041ba:	3308      	adds	r3, #8
 80041bc:	2b00      	cmp	r3, #0
 80041be:	da00      	bge.n	80041c2 <Send_Vital_Data_Message+0x486>
 80041c0:	3307      	adds	r3, #7
 80041c2:	10db      	asrs	r3, r3, #3
 80041c4:	b29a      	uxth	r2, r3
 80041c6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041ca:	4413      	add	r3, r2
 80041cc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041d4:	3308      	adds	r3, #8
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	b21b      	sxth	r3, r3
 80041da:	425a      	negs	r2, r3
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	f002 0207 	and.w	r2, r2, #7
 80041e4:	bf58      	it	pl
 80041e6:	4253      	negpl	r3, r2
 80041e8:	b21b      	sxth	r3, r3
 80041ea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80041ee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041f2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041f6:	18d1      	adds	r1, r2, r3
 80041f8:	79fa      	ldrb	r2, [r7, #7]
 80041fa:	48b5      	ldr	r0, [pc, #724]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 80041fc:	4613      	mov	r3, r2
 80041fe:	005b      	lsls	r3, r3, #1
 8004200:	4413      	add	r3, r2
 8004202:	005b      	lsls	r3, r3, #1
 8004204:	4403      	add	r3, r0
 8004206:	3304      	adds	r3, #4
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800420e:	460a      	mov	r2, r1
 8004210:	2108      	movs	r1, #8
 8004212:	f7fc fa8b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004216:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800421a:	3308      	adds	r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	da00      	bge.n	8004222 <Send_Vital_Data_Message+0x4e6>
 8004220:	3307      	adds	r3, #7
 8004222:	10db      	asrs	r3, r3, #3
 8004224:	b29a      	uxth	r2, r3
 8004226:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800422a:	4413      	add	r3, r2
 800422c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004230:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004234:	3308      	adds	r3, #8
 8004236:	b29b      	uxth	r3, r3
 8004238:	b21b      	sxth	r3, r3
 800423a:	425a      	negs	r2, r3
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	f002 0207 	and.w	r2, r2, #7
 8004244:	bf58      	it	pl
 8004246:	4253      	negpl	r3, r2
 8004248:	b21b      	sxth	r3, r3
 800424a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800424e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004252:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004256:	18d1      	adds	r1, r2, r3
 8004258:	79fa      	ldrb	r2, [r7, #7]
 800425a:	489d      	ldr	r0, [pc, #628]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800425c:	4613      	mov	r3, r2
 800425e:	005b      	lsls	r3, r3, #1
 8004260:	4413      	add	r3, r2
 8004262:	005b      	lsls	r3, r3, #1
 8004264:	4403      	add	r3, r0
 8004266:	3303      	adds	r3, #3
 8004268:	781b      	ldrb	r3, [r3, #0]
 800426a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800426e:	460a      	mov	r2, r1
 8004270:	2108      	movs	r1, #8
 8004272:	f7fc fa5b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004276:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800427a:	3308      	adds	r3, #8
 800427c:	2b00      	cmp	r3, #0
 800427e:	da00      	bge.n	8004282 <Send_Vital_Data_Message+0x546>
 8004280:	3307      	adds	r3, #7
 8004282:	10db      	asrs	r3, r3, #3
 8004284:	b29a      	uxth	r2, r3
 8004286:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800428a:	4413      	add	r3, r2
 800428c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004290:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004294:	3308      	adds	r3, #8
 8004296:	b29b      	uxth	r3, r3
 8004298:	b21b      	sxth	r3, r3
 800429a:	425a      	negs	r2, r3
 800429c:	f003 0307 	and.w	r3, r3, #7
 80042a0:	f002 0207 	and.w	r2, r2, #7
 80042a4:	bf58      	it	pl
 80042a6:	4253      	negpl	r3, r2
 80042a8:	b21b      	sxth	r3, r3
 80042aa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80042ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042b2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042b6:	18d1      	adds	r1, r2, r3
 80042b8:	79fa      	ldrb	r2, [r7, #7]
 80042ba:	4885      	ldr	r0, [pc, #532]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 80042bc:	4613      	mov	r3, r2
 80042be:	005b      	lsls	r3, r3, #1
 80042c0:	4413      	add	r3, r2
 80042c2:	005b      	lsls	r3, r3, #1
 80042c4:	4403      	add	r3, r0
 80042c6:	781b      	ldrb	r3, [r3, #0]
 80042c8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042cc:	460a      	mov	r2, r1
 80042ce:	2108      	movs	r1, #8
 80042d0:	f7fc fa2c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042d4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042d8:	3308      	adds	r3, #8
 80042da:	2b00      	cmp	r3, #0
 80042dc:	da00      	bge.n	80042e0 <Send_Vital_Data_Message+0x5a4>
 80042de:	3307      	adds	r3, #7
 80042e0:	10db      	asrs	r3, r3, #3
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042e8:	4413      	add	r3, r2
 80042ea:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042ee:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042f2:	3308      	adds	r3, #8
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	b21b      	sxth	r3, r3
 80042f8:	425a      	negs	r2, r3
 80042fa:	f003 0307 	and.w	r3, r3, #7
 80042fe:	f002 0207 	and.w	r2, r2, #7
 8004302:	bf58      	it	pl
 8004304:	4253      	negpl	r3, r2
 8004306:	b21b      	sxth	r3, r3
 8004308:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 800430c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004310:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004314:	18d1      	adds	r1, r2, r3
 8004316:	79fa      	ldrb	r2, [r7, #7]
 8004318:	486d      	ldr	r0, [pc, #436]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4403      	add	r3, r0
 8004324:	3301      	adds	r3, #1
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800432c:	460a      	mov	r2, r1
 800432e:	2108      	movs	r1, #8
 8004330:	f7fc f9fc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004334:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004338:	3308      	adds	r3, #8
 800433a:	2b00      	cmp	r3, #0
 800433c:	da00      	bge.n	8004340 <Send_Vital_Data_Message+0x604>
 800433e:	3307      	adds	r3, #7
 8004340:	10db      	asrs	r3, r3, #3
 8004342:	b29a      	uxth	r2, r3
 8004344:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004348:	4413      	add	r3, r2
 800434a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800434e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004352:	3308      	adds	r3, #8
 8004354:	b29b      	uxth	r3, r3
 8004356:	b21b      	sxth	r3, r3
 8004358:	425a      	negs	r2, r3
 800435a:	f003 0307 	and.w	r3, r3, #7
 800435e:	f002 0207 	and.w	r2, r2, #7
 8004362:	bf58      	it	pl
 8004364:	4253      	negpl	r3, r2
 8004366:	b21b      	sxth	r3, r3
 8004368:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 800436c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004370:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004374:	18d1      	adds	r1, r2, r3
 8004376:	79fa      	ldrb	r2, [r7, #7]
 8004378:	4855      	ldr	r0, [pc, #340]	; (80044d0 <Send_Vital_Data_Message+0x794>)
 800437a:	4613      	mov	r3, r2
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	4413      	add	r3, r2
 8004380:	005b      	lsls	r3, r3, #1
 8004382:	4403      	add	r3, r0
 8004384:	3302      	adds	r3, #2
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800438c:	460a      	mov	r2, r1
 800438e:	2108      	movs	r1, #8
 8004390:	f7fc f9cc 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004394:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004398:	3308      	adds	r3, #8
 800439a:	2b00      	cmp	r3, #0
 800439c:	da00      	bge.n	80043a0 <Send_Vital_Data_Message+0x664>
 800439e:	3307      	adds	r3, #7
 80043a0:	10db      	asrs	r3, r3, #3
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043a8:	4413      	add	r3, r2
 80043aa:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043ae:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043b2:	3308      	adds	r3, #8
 80043b4:	b29b      	uxth	r3, r3
 80043b6:	b21b      	sxth	r3, r3
 80043b8:	425a      	negs	r2, r3
 80043ba:	f003 0307 	and.w	r3, r3, #7
 80043be:	f002 0207 	and.w	r2, r2, #7
 80043c2:	bf58      	it	pl
 80043c4:	4253      	negpl	r3, r2
 80043c6:	b21b      	sxth	r3, r3
 80043c8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80043cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043d0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043d4:	441a      	add	r2, r3
 80043d6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043da:	2301      	movs	r3, #1
 80043dc:	2108      	movs	r1, #8
 80043de:	f7fc f9a5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043e2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043e6:	3308      	adds	r3, #8
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	da00      	bge.n	80043ee <Send_Vital_Data_Message+0x6b2>
 80043ec:	3307      	adds	r3, #7
 80043ee:	10db      	asrs	r3, r3, #3
 80043f0:	b29a      	uxth	r2, r3
 80043f2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043f6:	4413      	add	r3, r2
 80043f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004400:	3308      	adds	r3, #8
 8004402:	b29b      	uxth	r3, r3
 8004404:	b21b      	sxth	r3, r3
 8004406:	425a      	negs	r2, r3
 8004408:	f003 0307 	and.w	r3, r3, #7
 800440c:	f002 0207 	and.w	r2, r2, #7
 8004410:	bf58      	it	pl
 8004412:	4253      	negpl	r3, r2
 8004414:	b21b      	sxth	r3, r3
 8004416:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 800441a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800441e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004422:	441a      	add	r2, r3
 8004424:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004428:	2300      	movs	r3, #0
 800442a:	2108      	movs	r1, #8
 800442c:	f7fc f97e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004430:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004434:	3308      	adds	r3, #8
 8004436:	2b00      	cmp	r3, #0
 8004438:	da00      	bge.n	800443c <Send_Vital_Data_Message+0x700>
 800443a:	3307      	adds	r3, #7
 800443c:	10db      	asrs	r3, r3, #3
 800443e:	b29a      	uxth	r2, r3
 8004440:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004444:	4413      	add	r3, r2
 8004446:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800444a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800444e:	3308      	adds	r3, #8
 8004450:	b29b      	uxth	r3, r3
 8004452:	b21b      	sxth	r3, r3
 8004454:	425a      	negs	r2, r3
 8004456:	f003 0307 	and.w	r3, r3, #7
 800445a:	f002 0207 	and.w	r2, r2, #7
 800445e:	bf58      	it	pl
 8004460:	4253      	negpl	r3, r2
 8004462:	b21b      	sxth	r3, r3
 8004464:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004468:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800446c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004470:	441a      	add	r2, r3
 8004472:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004476:	2301      	movs	r3, #1
 8004478:	2108      	movs	r1, #8
 800447a:	f7fc f957 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800447e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004482:	3308      	adds	r3, #8
 8004484:	2b00      	cmp	r3, #0
 8004486:	da00      	bge.n	800448a <Send_Vital_Data_Message+0x74e>
 8004488:	3307      	adds	r3, #7
 800448a:	10db      	asrs	r3, r3, #3
 800448c:	b29a      	uxth	r2, r3
 800448e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004492:	4413      	add	r3, r2
 8004494:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004498:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800449c:	3308      	adds	r3, #8
 800449e:	b29b      	uxth	r3, r3
 80044a0:	b21b      	sxth	r3, r3
 80044a2:	425a      	negs	r2, r3
 80044a4:	f003 0307 	and.w	r3, r3, #7
 80044a8:	f002 0207 	and.w	r2, r2, #7
 80044ac:	bf58      	it	pl
 80044ae:	4253      	negpl	r3, r2
 80044b0:	b21b      	sxth	r3, r3
 80044b2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80044b6:	4b07      	ldr	r3, [pc, #28]	; (80044d4 <Send_Vital_Data_Message+0x798>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	085b      	lsrs	r3, r3, #1
 80044bc:	f003 0301 	and.w	r3, r3, #1
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d02c      	beq.n	800451e <Send_Vital_Data_Message+0x7e2>
 80044c4:	4b03      	ldr	r3, [pc, #12]	; (80044d4 <Send_Vital_Data_Message+0x798>)
 80044c6:	791b      	ldrb	r3, [r3, #4]
 80044c8:	79fa      	ldrb	r2, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d127      	bne.n	800451e <Send_Vital_Data_Message+0x7e2>
 80044ce:	e003      	b.n	80044d8 <Send_Vital_Data_Message+0x79c>
 80044d0:	20001188 	.word	0x20001188
 80044d4:	20001a1c 	.word	0x20001a1c
	{
		uint32_t Rand_Number = 0;
 80044d8:	2300      	movs	r3, #0
 80044da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80044de:	484e      	ldr	r0, [pc, #312]	; (8004618 <Send_Vital_Data_Message+0x8dc>)
 80044e0:	f015 fe52 	bl	801a188 <HAL_RNG_GetRandomNumber>
 80044e4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80044e8:	484c      	ldr	r0, [pc, #304]	; (800461c <Send_Vital_Data_Message+0x8e0>)
 80044ea:	f01e fa41 	bl	8022970 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80044ee:	79fb      	ldrb	r3, [r7, #7]
 80044f0:	4a4b      	ldr	r2, [pc, #300]	; (8004620 <Send_Vital_Data_Message+0x8e4>)
 80044f2:	011b      	lsls	r3, r3, #4
 80044f4:	4413      	add	r3, r2
 80044f6:	330c      	adds	r3, #12
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4619      	mov	r1, r3
 80044fc:	4849      	ldr	r0, [pc, #292]	; (8004624 <Send_Vital_Data_Message+0x8e8>)
 80044fe:	f01e f99b 	bl	8022838 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 8004502:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8004506:	4848      	ldr	r0, [pc, #288]	; (8004628 <Send_Vital_Data_Message+0x8ec>)
 8004508:	f01e f996 	bl	8022838 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 800450c:	f107 020c 	add.w	r2, r7, #12
 8004510:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004514:	2118      	movs	r1, #24
 8004516:	2000      	movs	r0, #0
 8004518:	f7fc f908 	bl	800072c <InsertBits>
	{
 800451c:	e00b      	b.n	8004536 <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	4a3f      	ldr	r2, [pc, #252]	; (8004620 <Send_Vital_Data_Message+0x8e4>)
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	4413      	add	r3, r2
 8004526:	330c      	adds	r3, #12
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f107 020c 	add.w	r2, r7, #12
 800452e:	2118      	movs	r1, #24
 8004530:	2000      	movs	r0, #0
 8004532:	f7fc f8fb 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004536:	2300      	movs	r3, #0
 8004538:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800453c:	e011      	b.n	8004562 <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 800453e:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8004542:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004546:	3303      	adds	r3, #3
 8004548:	3290      	adds	r2, #144	; 0x90
 800454a:	443a      	add	r2, r7
 800454c:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004550:	3390      	adds	r3, #144	; 0x90
 8004552:	443b      	add	r3, r7
 8004554:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004558:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800455c:	3301      	adds	r3, #1
 800455e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004562:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004566:	b29b      	uxth	r3, r3
 8004568:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800456c:	429a      	cmp	r2, r3
 800456e:	d8e6      	bhi.n	800453e <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004570:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004574:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004578:	18d4      	adds	r4, r2, r3
 800457a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800457e:	b29b      	uxth	r3, r3
 8004580:	3303      	adds	r3, #3
 8004582:	b29a      	uxth	r2, r3
 8004584:	f107 030c 	add.w	r3, r7, #12
 8004588:	4611      	mov	r1, r2
 800458a:	4618      	mov	r0, r3
 800458c:	f00e fd6e 	bl	801306c <CalculateDirectReverseCrc>
 8004590:	4603      	mov	r3, r0
 8004592:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004596:	4622      	mov	r2, r4
 8004598:	2120      	movs	r1, #32
 800459a:	f7fc f8c7 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 800459e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80045a2:	3320      	adds	r3, #32
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	da00      	bge.n	80045aa <Send_Vital_Data_Message+0x86e>
 80045a8:	3307      	adds	r3, #7
 80045aa:	10db      	asrs	r3, r3, #3
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045b2:	4413      	add	r3, r2
 80045b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045bc:	3320      	adds	r3, #32
 80045be:	b29b      	uxth	r3, r3
 80045c0:	b21b      	sxth	r3, r3
 80045c2:	425a      	negs	r2, r3
 80045c4:	f003 0307 	and.w	r3, r3, #7
 80045c8:	f002 0207 	and.w	r2, r2, #7
 80045cc:	bf58      	it	pl
 80045ce:	4253      	negpl	r3, r2
 80045d0:	b21b      	sxth	r3, r3
 80045d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80045d6:	4b15      	ldr	r3, [pc, #84]	; (800462c <Send_Vital_Data_Message+0x8f0>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	0a5b      	lsrs	r3, r3, #9
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00b      	beq.n	80045fc <Send_Vital_Data_Message+0x8c0>
 80045e4:	4b11      	ldr	r3, [pc, #68]	; (800462c <Send_Vital_Data_Message+0x8f0>)
 80045e6:	791b      	ldrb	r3, [r3, #4]
 80045e8:	79fa      	ldrb	r2, [r7, #7]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d106      	bne.n	80045fc <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80045ee:	4810      	ldr	r0, [pc, #64]	; (8004630 <Send_Vital_Data_Message+0x8f4>)
 80045f0:	f01e f9be 	bl	8022970 <puts>
		printf("Not Sending Reply");
 80045f4:	480f      	ldr	r0, [pc, #60]	; (8004634 <Send_Vital_Data_Message+0x8f8>)
 80045f6:	f01e f91f 	bl	8022838 <iprintf>
 80045fa:	e009      	b.n	8004610 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80045fc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004600:	b2d9      	uxtb	r1, r3
 8004602:	79fa      	ldrb	r2, [r7, #7]
 8004604:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004608:	4618      	mov	r0, r3
 800460a:	f002 ffd9 	bl	80075c0 <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	3794      	adds	r7, #148	; 0x94
 8004614:	46bd      	mov	sp, r7
 8004616:	bd90      	pop	{r4, r7, pc}
 8004618:	2000a05c 	.word	0x2000a05c
 800461c:	08024724 	.word	0x08024724
 8004620:	200011c4 	.word	0x200011c4
 8004624:	08024748 	.word	0x08024748
 8004628:	0802476c 	.word	0x0802476c
 800462c:	20001a1c 	.word	0x20001a1c
 8004630:	080244bc 	.word	0x080244bc
 8004634:	080244d4 	.word	0x080244d4

08004638 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b0c0      	sub	sp, #256	; 0x100
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	4608      	mov	r0, r1
 8004642:	4611      	mov	r1, r2
 8004644:	461a      	mov	r2, r3
 8004646:	4603      	mov	r3, r0
 8004648:	70fb      	strb	r3, [r7, #3]
 800464a:	460b      	mov	r3, r1
 800464c:	70bb      	strb	r3, [r7, #2]
 800464e:	4613      	mov	r3, r2
 8004650:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8004652:	2300      	movs	r3, #0
 8004654:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
	uint32_t Calc_CRC = 0;
 8004658:	2300      	movs	r3, #0
 800465a:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	uint32_t Recv_CRC = 0;
 800465e:	2300      	movs	r3, #0
 8004660:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	uint32_t Ticks = HAL_GetTick();
 8004664:	f011 f8de 	bl	8015824 <HAL_GetTick>
 8004668:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
	uint8_t noofIP = 0, uc_index = 0;
 800466c:	2300      	movs	r3, #0
 800466e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004672:	2300      	movs	r3, #0
 8004674:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
	uint8_t LinkEstablishFlag = 0;
 8004678:	2300      	movs	r3, #0
 800467a:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	uint8_t Temp_Vital_Data_Buff[128] = {0,};
 800467e:	2300      	movs	r3, #0
 8004680:	667b      	str	r3, [r7, #100]	; 0x64
 8004682:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004686:	227c      	movs	r2, #124	; 0x7c
 8004688:	2100      	movs	r1, #0
 800468a:	4618      	mov	r0, r3
 800468c:	f01d ffec 	bl	8022668 <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004690:	2300      	movs	r3, #0
 8004692:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004696:	2300      	movs	r3, #0
 8004698:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 800469c:	78fb      	ldrb	r3, [r7, #3]
 800469e:	b299      	uxth	r1, r3
 80046a0:	78ba      	ldrb	r2, [r7, #2]
 80046a2:	48c3      	ldr	r0, [pc, #780]	; (80049b0 <Vital_Msg_extr_from_CAN+0x378>)
 80046a4:	4613      	mov	r3, r2
 80046a6:	019b      	lsls	r3, r3, #6
 80046a8:	4413      	add	r3, r2
 80046aa:	005b      	lsls	r3, r3, #1
 80046ac:	4403      	add	r3, r0
 80046ae:	3380      	adds	r3, #128	; 0x80
 80046b0:	881b      	ldrh	r3, [r3, #0]
 80046b2:	4299      	cmp	r1, r3
 80046b4:	d11a      	bne.n	80046ec <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 80046b6:	78ba      	ldrb	r2, [r7, #2]
 80046b8:	4613      	mov	r3, r2
 80046ba:	019b      	lsls	r3, r3, #6
 80046bc:	4413      	add	r3, r2
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	4abb      	ldr	r2, [pc, #748]	; (80049b0 <Vital_Msg_extr_from_CAN+0x378>)
 80046c2:	4413      	add	r3, r2
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	4619      	mov	r1, r3
 80046c8:	6878      	ldr	r0, [r7, #4]
 80046ca:	f01d ff95 	bl	80225f8 <memcmp>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10b      	bne.n	80046ec <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80046d4:	78bb      	ldrb	r3, [r7, #2]
 80046d6:	4ab7      	ldr	r2, [pc, #732]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 80046d8:	3366      	adds	r3, #102	; 0x66
 80046da:	009b      	lsls	r3, r3, #2
 80046dc:	4413      	add	r3, r2
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	4619      	mov	r1, r3
 80046e2:	48b5      	ldr	r0, [pc, #724]	; (80049b8 <Vital_Msg_extr_from_CAN+0x380>)
 80046e4:	f01e f8a8 	bl	8022838 <iprintf>
			return;
 80046e8:	f000 bda0 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	3b05      	subs	r3, #5
 80046f0:	687a      	ldr	r2, [r7, #4]
 80046f2:	441a      	add	r2, r3
 80046f4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80046f8:	2120      	movs	r1, #32
 80046fa:	4618      	mov	r0, r3
 80046fc:	f7fb ff8a 	bl	8000614 <ExtractBits>
 8004700:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8004704:	4bad      	ldr	r3, [pc, #692]	; (80049bc <Vital_Msg_extr_from_CAN+0x384>)
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b00      	cmp	r3, #0
 800470e:	d034      	beq.n	800477a <Vital_Msg_extr_from_CAN+0x142>
 8004710:	4baa      	ldr	r3, [pc, #680]	; (80049bc <Vital_Msg_extr_from_CAN+0x384>)
 8004712:	791b      	ldrb	r3, [r3, #4]
 8004714:	78ba      	ldrb	r2, [r7, #2]
 8004716:	429a      	cmp	r2, r3
 8004718:	d12f      	bne.n	800477a <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 800471a:	2316      	movs	r3, #22
 800471c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004720:	48a7      	ldr	r0, [pc, #668]	; (80049c0 <Vital_Msg_extr_from_CAN+0x388>)
 8004722:	f015 fd31 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8004726:	4602      	mov	r2, r0
 8004728:	4ba6      	ldr	r3, [pc, #664]	; (80049c4 <Vital_Msg_extr_from_CAN+0x38c>)
 800472a:	fba3 1302 	umull	r1, r3, r3, r2
 800472e:	0dd9      	lsrs	r1, r3, #23
 8004730:	460b      	mov	r3, r1
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	1a5b      	subs	r3, r3, r1
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
		printf("\nInjected RX Vital CRC failure\n");
 800473e:	48a2      	ldr	r0, [pc, #648]	; (80049c8 <Vital_Msg_extr_from_CAN+0x390>)
 8004740:	f01e f916 	bl	8022970 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004744:	78ba      	ldrb	r2, [r7, #2]
 8004746:	49a1      	ldr	r1, [pc, #644]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 8004748:	4613      	mov	r3, r2
 800474a:	005b      	lsls	r3, r3, #1
 800474c:	4413      	add	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	440b      	add	r3, r1
 8004752:	3308      	adds	r3, #8
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4619      	mov	r1, r3
 8004758:	489d      	ldr	r0, [pc, #628]	; (80049d0 <Vital_Msg_extr_from_CAN+0x398>)
 800475a:	f01e f86d 	bl	8022838 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 800475e:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8004762:	489c      	ldr	r0, [pc, #624]	; (80049d4 <Vital_Msg_extr_from_CAN+0x39c>)
 8004764:	f01e f868 	bl	8022838 <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004768:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800476c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004770:	2118      	movs	r1, #24
 8004772:	2000      	movs	r0, #0
 8004774:	f7fb ffda 	bl	800072c <InsertBits>
	{
 8004778:	e00e      	b.n	8004798 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800477a:	78ba      	ldrb	r2, [r7, #2]
 800477c:	4993      	ldr	r1, [pc, #588]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 800477e:	4613      	mov	r3, r2
 8004780:	005b      	lsls	r3, r3, #1
 8004782:	4413      	add	r3, r2
 8004784:	00db      	lsls	r3, r3, #3
 8004786:	440b      	add	r3, r1
 8004788:	3308      	adds	r3, #8
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8004790:	2118      	movs	r1, #24
 8004792:	2000      	movs	r0, #0
 8004794:	f7fb ffca 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004798:	2300      	movs	r3, #0
 800479a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800479e:	e011      	b.n	80047c4 <Vital_Msg_extr_from_CAN+0x18c>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 80047a0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	441a      	add	r2, r3
 80047a8:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047ac:	3303      	adds	r3, #3
 80047ae:	7812      	ldrb	r2, [r2, #0]
 80047b0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80047b4:	443b      	add	r3, r7
 80047b6:	f803 2c9c 	strb.w	r2, [r3, #-156]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047ba:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047be:	3301      	adds	r3, #1
 80047c0:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 80047c4:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 80047c8:	78fb      	ldrb	r3, [r7, #3]
 80047ca:	3b05      	subs	r3, #5
 80047cc:	429a      	cmp	r2, r3
 80047ce:	dbe7      	blt.n	80047a0 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80047d0:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	3303      	adds	r3, #3
 80047d8:	b29a      	uxth	r2, r3
 80047da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80047de:	4611      	mov	r1, r2
 80047e0:	4618      	mov	r0, r3
 80047e2:	f00e fc43 	bl	801306c <CalculateDirectReverseCrc>
 80047e6:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0

	if(Calc_CRC != Recv_CRC)
 80047ea:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80047ee:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80047f2:	429a      	cmp	r2, r3
 80047f4:	f000 8104 	beq.w	8004a00 <Vital_Msg_extr_from_CAN+0x3c8>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	3305      	adds	r3, #5
 80047fc:	461a      	mov	r2, r3
 80047fe:	2108      	movs	r1, #8
 8004800:	2000      	movs	r0, #0
 8004802:	f7fb ff07 	bl	8000614 <ExtractBits>
 8004806:	4603      	mov	r3, r0
 8004808:	2b00      	cmp	r3, #0
 800480a:	f040 80ba 	bne.w	8004982 <Vital_Msg_extr_from_CAN+0x34a>
		{
			printf("Tx seq Roll over Detected\n");
 800480e:	4872      	ldr	r0, [pc, #456]	; (80049d8 <Vital_Msg_extr_from_CAN+0x3a0>)
 8004810:	f01e f8ae 	bl	8022970 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8004814:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004818:	2280      	movs	r2, #128	; 0x80
 800481a:	2100      	movs	r1, #0
 800481c:	4618      	mov	r0, r3
 800481e:	f01d ff23 	bl	8022668 <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8004822:	78ba      	ldrb	r2, [r7, #2]
 8004824:	4969      	ldr	r1, [pc, #420]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 8004826:	4613      	mov	r3, r2
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	4413      	add	r3, r2
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	440b      	add	r3, r1
 8004830:	3308      	adds	r3, #8
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	3301      	adds	r3, #1
 8004836:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800483a:	2118      	movs	r1, #24
 800483c:	2000      	movs	r0, #0
 800483e:	f7fb ff75 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004842:	2300      	movs	r3, #0
 8004844:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 8004848:	e011      	b.n	800486e <Vital_Msg_extr_from_CAN+0x236>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 800484a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	441a      	add	r2, r3
 8004852:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004856:	3303      	adds	r3, #3
 8004858:	7812      	ldrb	r2, [r2, #0]
 800485a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800485e:	443b      	add	r3, r7
 8004860:	f803 2c9c 	strb.w	r2, [r3, #-156]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004864:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 8004868:	3301      	adds	r3, #1
 800486a:	f887 30fc 	strb.w	r3, [r7, #252]	; 0xfc
 800486e:	f897 20fc 	ldrb.w	r2, [r7, #252]	; 0xfc
 8004872:	78fb      	ldrb	r3, [r7, #3]
 8004874:	3b05      	subs	r3, #5
 8004876:	429a      	cmp	r2, r3
 8004878:	dbe7      	blt.n	800484a <Vital_Msg_extr_from_CAN+0x212>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800487a:	f897 30fc 	ldrb.w	r3, [r7, #252]	; 0xfc
 800487e:	b29b      	uxth	r3, r3
 8004880:	3303      	adds	r3, #3
 8004882:	b29a      	uxth	r2, r3
 8004884:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004888:	4611      	mov	r1, r2
 800488a:	4618      	mov	r0, r3
 800488c:	f00e fbee 	bl	801306c <CalculateDirectReverseCrc>
 8004890:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004894:	78fb      	ldrb	r3, [r7, #3]
 8004896:	3b05      	subs	r3, #5
 8004898:	687a      	ldr	r2, [r7, #4]
 800489a:	441a      	add	r2, r3
 800489c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 80048a0:	2120      	movs	r1, #32
 80048a2:	4618      	mov	r0, r3
 80048a4:	f7fb feb6 	bl	8000614 <ExtractBits>
 80048a8:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec

			if(Calc_CRC == Recv_CRC)
 80048ac:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80048b0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d14e      	bne.n	8004956 <Vital_Msg_extr_from_CAN+0x31e>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 80048b8:	4848      	ldr	r0, [pc, #288]	; (80049dc <Vital_Msg_extr_from_CAN+0x3a4>)
 80048ba:	f01e f859 	bl	8022970 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80048be:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80048c2:	4847      	ldr	r0, [pc, #284]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3a8>)
 80048c4:	f01d ffb8 	bl	8022838 <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048c8:	78ba      	ldrb	r2, [r7, #2]
 80048ca:	4940      	ldr	r1, [pc, #256]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048cc:	4613      	mov	r3, r2
 80048ce:	005b      	lsls	r3, r3, #1
 80048d0:	4413      	add	r3, r2
 80048d2:	00db      	lsls	r3, r3, #3
 80048d4:	440b      	add	r3, r1
 80048d6:	3308      	adds	r3, #8
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4619      	mov	r1, r3
 80048dc:	4841      	ldr	r0, [pc, #260]	; (80049e4 <Vital_Msg_extr_from_CAN+0x3ac>)
 80048de:	f01d ffab 	bl	8022838 <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80048e2:	78ba      	ldrb	r2, [r7, #2]
 80048e4:	4939      	ldr	r1, [pc, #228]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048e6:	4613      	mov	r3, r2
 80048e8:	005b      	lsls	r3, r3, #1
 80048ea:	4413      	add	r3, r2
 80048ec:	00db      	lsls	r3, r3, #3
 80048ee:	440b      	add	r3, r1
 80048f0:	3308      	adds	r3, #8
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	1c59      	adds	r1, r3, #1
 80048f6:	4835      	ldr	r0, [pc, #212]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 80048f8:	4613      	mov	r3, r2
 80048fa:	005b      	lsls	r3, r3, #1
 80048fc:	4413      	add	r3, r2
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	4403      	add	r3, r0
 8004902:	3308      	adds	r3, #8
 8004904:	6019      	str	r1, [r3, #0]
 8004906:	78b9      	ldrb	r1, [r7, #2]
 8004908:	4830      	ldr	r0, [pc, #192]	; (80049cc <Vital_Msg_extr_from_CAN+0x394>)
 800490a:	4613      	mov	r3, r2
 800490c:	005b      	lsls	r3, r3, #1
 800490e:	4413      	add	r3, r2
 8004910:	00db      	lsls	r3, r3, #3
 8004912:	4403      	add	r3, r0
 8004914:	3308      	adds	r3, #8
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4833      	ldr	r0, [pc, #204]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 800491a:	010b      	lsls	r3, r1, #4
 800491c:	4403      	add	r3, r0
 800491e:	3308      	adds	r3, #8
 8004920:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004922:	78bb      	ldrb	r3, [r7, #2]
 8004924:	4a30      	ldr	r2, [pc, #192]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004926:	011b      	lsls	r3, r3, #4
 8004928:	4413      	add	r3, r2
 800492a:	3308      	adds	r3, #8
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	4619      	mov	r1, r3
 8004930:	482e      	ldr	r0, [pc, #184]	; (80049ec <Vital_Msg_extr_from_CAN+0x3b4>)
 8004932:	f01d ff81 	bl	8022838 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8004936:	78bb      	ldrb	r3, [r7, #2]
 8004938:	78ba      	ldrb	r2, [r7, #2]
 800493a:	492b      	ldr	r1, [pc, #172]	; (80049e8 <Vital_Msg_extr_from_CAN+0x3b0>)
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	440b      	add	r3, r1
 8004940:	3308      	adds	r3, #8
 8004942:	6819      	ldr	r1, [r3, #0]
 8004944:	482a      	ldr	r0, [pc, #168]	; (80049f0 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004946:	4613      	mov	r3, r2
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	4413      	add	r3, r2
 800494c:	00db      	lsls	r3, r3, #3
 800494e:	4403      	add	r3, r0
 8004950:	3308      	adds	r3, #8
 8004952:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004954:	e055      	b.n	8004a02 <Vital_Msg_extr_from_CAN+0x3ca>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004956:	78bb      	ldrb	r3, [r7, #2]
 8004958:	4a16      	ldr	r2, [pc, #88]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 800495a:	3366      	adds	r3, #102	; 0x66
 800495c:	009b      	lsls	r3, r3, #2
 800495e:	4413      	add	r3, r2
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4619      	mov	r1, r3
 8004964:	4823      	ldr	r0, [pc, #140]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004966:	f01d ff67 	bl	8022838 <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 800496a:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800496e:	4822      	ldr	r0, [pc, #136]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3c0>)
 8004970:	f01d ff62 	bl	8022838 <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004974:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8004978:	4820      	ldr	r0, [pc, #128]	; (80049fc <Vital_Msg_extr_from_CAN+0x3c4>)
 800497a:	f01d ff5d 	bl	8022838 <iprintf>
				return;
 800497e:	f000 bc55 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004982:	78bb      	ldrb	r3, [r7, #2]
 8004984:	4a0b      	ldr	r2, [pc, #44]	; (80049b4 <Vital_Msg_extr_from_CAN+0x37c>)
 8004986:	3366      	adds	r3, #102	; 0x66
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	4413      	add	r3, r2
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	4619      	mov	r1, r3
 8004990:	4818      	ldr	r0, [pc, #96]	; (80049f4 <Vital_Msg_extr_from_CAN+0x3bc>)
 8004992:	f01d ff51 	bl	8022838 <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 8004996:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 800499a:	4817      	ldr	r0, [pc, #92]	; (80049f8 <Vital_Msg_extr_from_CAN+0x3c0>)
 800499c:	f01d ff4c 	bl	8022838 <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 80049a0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80049a4:	4815      	ldr	r0, [pc, #84]	; (80049fc <Vital_Msg_extr_from_CAN+0x3c4>)
 80049a6:	f01d ff47 	bl	8022838 <iprintf>
			return;
 80049aa:	f000 bc3f 	b.w	800522c <Vital_Msg_extr_from_CAN+0xbf4>
 80049ae:	bf00      	nop
 80049b0:	20001a3c 	.word	0x20001a3c
 80049b4:	20000304 	.word	0x20000304
 80049b8:	08024790 	.word	0x08024790
 80049bc:	20001a1c 	.word	0x20001a1c
 80049c0:	2000a05c 	.word	0x2000a05c
 80049c4:	80008001 	.word	0x80008001
 80049c8:	080244e8 	.word	0x080244e8
 80049cc:	20001764 	.word	0x20001764
 80049d0:	08024508 	.word	0x08024508
 80049d4:	08024530 	.word	0x08024530
 80049d8:	08024558 	.word	0x08024558
 80049dc:	080247d4 	.word	0x080247d4
 80049e0:	0802458c 	.word	0x0802458c
 80049e4:	080247f8 	.word	0x080247f8
 80049e8:	200011c4 	.word	0x200011c4
 80049ec:	080245cc 	.word	0x080245cc
 80049f0:	20001674 	.word	0x20001674
 80049f4:	08024814 	.word	0x08024814
 80049f8:	08024228 	.word	0x08024228
 80049fc:	08024238 	.word	0x08024238
		}
	}
	ROLLOVER_VITAL_CAN:
 8004a00:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 8004a02:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a06:	3308      	adds	r3, #8
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	da00      	bge.n	8004a0e <Vital_Msg_extr_from_CAN+0x3d6>
 8004a0c:	3307      	adds	r3, #7
 8004a0e:	10db      	asrs	r3, r3, #3
 8004a10:	b29a      	uxth	r2, r3
 8004a12:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a16:	4413      	add	r3, r2
 8004a18:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a1c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a20:	3308      	adds	r3, #8
 8004a22:	b29b      	uxth	r3, r3
 8004a24:	b21b      	sxth	r3, r3
 8004a26:	425a      	negs	r2, r3
 8004a28:	f003 0307 	and.w	r3, r3, #7
 8004a2c:	f002 0207 	and.w	r2, r2, #7
 8004a30:	bf58      	it	pl
 8004a32:	4253      	negpl	r3, r2
 8004a34:	b21b      	sxth	r3, r3
 8004a36:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a3a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	441a      	add	r2, r3
 8004a42:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a46:	2110      	movs	r1, #16
 8004a48:	4618      	mov	r0, r3
 8004a4a:	f7fb fde3 	bl	8000614 <ExtractBits>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004a56:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a5a:	4619      	mov	r1, r3
 8004a5c:	48c6      	ldr	r0, [pc, #792]	; (8004d78 <Vital_Msg_extr_from_CAN+0x740>)
 8004a5e:	f01d feeb 	bl	8022838 <iprintf>
	BITSTUFFINC(16);
 8004a62:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004a66:	3310      	adds	r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	da00      	bge.n	8004a6e <Vital_Msg_extr_from_CAN+0x436>
 8004a6c:	3307      	adds	r3, #7
 8004a6e:	10db      	asrs	r3, r3, #3
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a76:	4413      	add	r3, r2
 8004a78:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004a7c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004a80:	3310      	adds	r3, #16
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	b21b      	sxth	r3, r3
 8004a86:	425a      	negs	r2, r3
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	f002 0207 	and.w	r2, r2, #7
 8004a90:	bf58      	it	pl
 8004a92:	4253      	negpl	r3, r2
 8004a94:	b21b      	sxth	r3, r3
 8004a96:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	441a      	add	r2, r3
 8004aa2:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004aa6:	2110      	movs	r1, #16
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	f7fb fdb3 	bl	8000614 <ExtractBits>
 8004aae:	4603      	mov	r3, r0
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004ab6:	f8b7 305a 	ldrh.w	r3, [r7, #90]	; 0x5a
 8004aba:	4619      	mov	r1, r3
 8004abc:	48af      	ldr	r0, [pc, #700]	; (8004d7c <Vital_Msg_extr_from_CAN+0x744>)
 8004abe:	f01d febb 	bl	8022838 <iprintf>
	BITSTUFFINC(16);
 8004ac2:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ac6:	3310      	adds	r3, #16
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da00      	bge.n	8004ace <Vital_Msg_extr_from_CAN+0x496>
 8004acc:	3307      	adds	r3, #7
 8004ace:	10db      	asrs	r3, r3, #3
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004adc:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ae0:	3310      	adds	r3, #16
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	b21b      	sxth	r3, r3
 8004ae6:	425a      	negs	r2, r3
 8004ae8:	f003 0307 	and.w	r3, r3, #7
 8004aec:	f002 0207 	and.w	r2, r2, #7
 8004af0:	bf58      	it	pl
 8004af2:	4253      	negpl	r3, r2
 8004af4:	b21b      	sxth	r3, r3
 8004af6:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004afa:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	441a      	add	r2, r3
 8004b02:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b06:	2108      	movs	r1, #8
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7fb fd83 	bl	8000614 <ExtractBits>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004b16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b1a:	3308      	adds	r3, #8
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	da00      	bge.n	8004b22 <Vital_Msg_extr_from_CAN+0x4ea>
 8004b20:	3307      	adds	r3, #7
 8004b22:	10db      	asrs	r3, r3, #3
 8004b24:	b29a      	uxth	r2, r3
 8004b26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b2a:	4413      	add	r3, r2
 8004b2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b34:	3308      	adds	r3, #8
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	b21b      	sxth	r3, r3
 8004b3a:	425a      	negs	r2, r3
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	f002 0207 	and.w	r2, r2, #7
 8004b44:	bf58      	it	pl
 8004b46:	4253      	negpl	r3, r2
 8004b48:	b21b      	sxth	r3, r3
 8004b4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	441a      	add	r2, r3
 8004b56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b5a:	2108      	movs	r1, #8
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fb fd59 	bl	8000614 <ExtractBits>
 8004b62:	4603      	mov	r3, r0
 8004b64:	b2db      	uxtb	r3, r3
 8004b66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004b6a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004b6e:	3308      	adds	r3, #8
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	da00      	bge.n	8004b76 <Vital_Msg_extr_from_CAN+0x53e>
 8004b74:	3307      	adds	r3, #7
 8004b76:	10db      	asrs	r3, r3, #3
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004b7e:	4413      	add	r3, r2
 8004b80:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004b84:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004b88:	3308      	adds	r3, #8
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	b21b      	sxth	r3, r3
 8004b8e:	425a      	negs	r2, r3
 8004b90:	f003 0307 	and.w	r3, r3, #7
 8004b94:	f002 0207 	and.w	r2, r2, #7
 8004b98:	bf58      	it	pl
 8004b9a:	4253      	negpl	r3, r2
 8004b9c:	b21b      	sxth	r3, r3
 8004b9e:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ba2:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	441a      	add	r2, r3
 8004baa:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bae:	2108      	movs	r1, #8
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	f7fb fd2f 	bl	8000614 <ExtractBits>
 8004bb6:	4603      	mov	r3, r0
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004bbe:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004bc2:	3308      	adds	r3, #8
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	da00      	bge.n	8004bca <Vital_Msg_extr_from_CAN+0x592>
 8004bc8:	3307      	adds	r3, #7
 8004bca:	10db      	asrs	r3, r3, #3
 8004bcc:	b29a      	uxth	r2, r3
 8004bce:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004bd8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004bdc:	3308      	adds	r3, #8
 8004bde:	b29b      	uxth	r3, r3
 8004be0:	b21b      	sxth	r3, r3
 8004be2:	425a      	negs	r2, r3
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	f002 0207 	and.w	r2, r2, #7
 8004bec:	bf58      	it	pl
 8004bee:	4253      	negpl	r3, r2
 8004bf0:	b21b      	sxth	r3, r3
 8004bf2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bf6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	441a      	add	r2, r3
 8004bfe:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c02:	2110      	movs	r1, #16
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fb fd05 	bl	8000614 <ExtractBits>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	853b      	strh	r3, [r7, #40]	; 0x28
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004c10:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c14:	3310      	adds	r3, #16
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	da00      	bge.n	8004c1c <Vital_Msg_extr_from_CAN+0x5e4>
 8004c1a:	3307      	adds	r3, #7
 8004c1c:	10db      	asrs	r3, r3, #3
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c24:	4413      	add	r3, r2
 8004c26:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c2a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c2e:	3310      	adds	r3, #16
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	b21b      	sxth	r3, r3
 8004c34:	425a      	negs	r2, r3
 8004c36:	f003 0307 	and.w	r3, r3, #7
 8004c3a:	f002 0207 	and.w	r2, r2, #7
 8004c3e:	bf58      	it	pl
 8004c40:	4253      	negpl	r3, r2
 8004c42:	b21b      	sxth	r3, r3
 8004c44:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004c4a:	f003 0320 	and.w	r3, r3, #32
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 80fe 	beq.w	8004e50 <Vital_Msg_extr_from_CAN+0x818>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c54:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	441a      	add	r2, r3
 8004c5c:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c60:	2108      	movs	r1, #8
 8004c62:	4618      	mov	r0, r3
 8004c64:	f7fb fcd6 	bl	8000614 <ExtractBits>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004c70:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004c74:	3308      	adds	r3, #8
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	da00      	bge.n	8004c7c <Vital_Msg_extr_from_CAN+0x644>
 8004c7a:	3307      	adds	r3, #7
 8004c7c:	10db      	asrs	r3, r3, #3
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004c84:	4413      	add	r3, r2
 8004c86:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004c8a:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004c8e:	3308      	adds	r3, #8
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	b21b      	sxth	r3, r3
 8004c94:	425a      	negs	r2, r3
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	f002 0207 	and.w	r2, r2, #7
 8004c9e:	bf58      	it	pl
 8004ca0:	4253      	negpl	r3, r2
 8004ca2:	b21b      	sxth	r3, r3
 8004ca4:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ca8:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	441a      	add	r2, r3
 8004cb0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004cb4:	2108      	movs	r1, #8
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fb fcac 	bl	8000614 <ExtractBits>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004cc4:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004cc8:	3308      	adds	r3, #8
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	da00      	bge.n	8004cd0 <Vital_Msg_extr_from_CAN+0x698>
 8004cce:	3307      	adds	r3, #7
 8004cd0:	10db      	asrs	r3, r3, #3
 8004cd2:	b29a      	uxth	r2, r3
 8004cd4:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004cd8:	4413      	add	r3, r2
 8004cda:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004cde:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	b21b      	sxth	r3, r3
 8004ce8:	425a      	negs	r2, r3
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	f002 0207 	and.w	r2, r2, #7
 8004cf2:	bf58      	it	pl
 8004cf4:	4253      	negpl	r3, r2
 8004cf6:	b21b      	sxth	r3, r3
 8004cf8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004cfc:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	441a      	add	r2, r3
 8004d04:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d08:	2108      	movs	r1, #8
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fb fc82 	bl	8000614 <ExtractBits>
 8004d10:	4603      	mov	r3, r0
 8004d12:	b2db      	uxtb	r3, r3
 8004d14:	77fb      	strb	r3, [r7, #31]
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004d16:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	da00      	bge.n	8004d22 <Vital_Msg_extr_from_CAN+0x6ea>
 8004d20:	3307      	adds	r3, #7
 8004d22:	10db      	asrs	r3, r3, #3
 8004d24:	b29a      	uxth	r2, r3
 8004d26:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d30:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d34:	3308      	adds	r3, #8
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	b21b      	sxth	r3, r3
 8004d3a:	425a      	negs	r2, r3
 8004d3c:	f003 0307 	and.w	r3, r3, #7
 8004d40:	f002 0207 	and.w	r2, r2, #7
 8004d44:	bf58      	it	pl
 8004d46:	4253      	negpl	r3, r2
 8004d48:	b21b      	sxth	r3, r3
 8004d4a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d4e:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	441a      	add	r2, r3
 8004d56:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d5a:	2108      	movs	r1, #8
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f7fb fc59 	bl	8000614 <ExtractBits>
 8004d62:	4603      	mov	r3, r0
 8004d64:	b2db      	uxtb	r3, r3
 8004d66:	773b      	strb	r3, [r7, #28]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004d68:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004d6c:	3308      	adds	r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	da06      	bge.n	8004d80 <Vital_Msg_extr_from_CAN+0x748>
 8004d72:	3307      	adds	r3, #7
 8004d74:	e004      	b.n	8004d80 <Vital_Msg_extr_from_CAN+0x748>
 8004d76:	bf00      	nop
 8004d78:	08024318 	.word	0x08024318
 8004d7c:	08024320 	.word	0x08024320
 8004d80:	10db      	asrs	r3, r3, #3
 8004d82:	b29a      	uxth	r2, r3
 8004d84:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004d88:	4413      	add	r3, r2
 8004d8a:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004d8e:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004d92:	3308      	adds	r3, #8
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b21b      	sxth	r3, r3
 8004d98:	425a      	negs	r2, r3
 8004d9a:	f003 0307 	and.w	r3, r3, #7
 8004d9e:	f002 0207 	and.w	r2, r2, #7
 8004da2:	bf58      	it	pl
 8004da4:	4253      	negpl	r3, r2
 8004da6:	b21b      	sxth	r3, r3
 8004da8:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dac:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	441a      	add	r2, r3
 8004db4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004db8:	2108      	movs	r1, #8
 8004dba:	4618      	mov	r0, r3
 8004dbc:	f7fb fc2a 	bl	8000614 <ExtractBits>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	777b      	strb	r3, [r7, #29]
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004dc6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004dca:	3308      	adds	r3, #8
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	da00      	bge.n	8004dd2 <Vital_Msg_extr_from_CAN+0x79a>
 8004dd0:	3307      	adds	r3, #7
 8004dd2:	10db      	asrs	r3, r3, #3
 8004dd4:	b29a      	uxth	r2, r3
 8004dd6:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004dda:	4413      	add	r3, r2
 8004ddc:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004de0:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004de4:	3308      	adds	r3, #8
 8004de6:	b29b      	uxth	r3, r3
 8004de8:	b21b      	sxth	r3, r3
 8004dea:	425a      	negs	r2, r3
 8004dec:	f003 0307 	and.w	r3, r3, #7
 8004df0:	f002 0207 	and.w	r2, r2, #7
 8004df4:	bf58      	it	pl
 8004df6:	4253      	negpl	r3, r2
 8004df8:	b21b      	sxth	r3, r3
 8004dfa:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004dfe:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	441a      	add	r2, r3
 8004e06:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e0a:	2108      	movs	r1, #8
 8004e0c:	4618      	mov	r0, r3
 8004e0e:	f7fb fc01 	bl	8000614 <ExtractBits>
 8004e12:	4603      	mov	r3, r0
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	77bb      	strb	r3, [r7, #30]
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004e18:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e1c:	3308      	adds	r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	da00      	bge.n	8004e24 <Vital_Msg_extr_from_CAN+0x7ec>
 8004e22:	3307      	adds	r3, #7
 8004e24:	10db      	asrs	r3, r3, #3
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e32:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e36:	3308      	adds	r3, #8
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	b21b      	sxth	r3, r3
 8004e3c:	425a      	negs	r2, r3
 8004e3e:	f003 0307 	and.w	r3, r3, #7
 8004e42:	f002 0207 	and.w	r2, r2, #7
 8004e46:	bf58      	it	pl
 8004e48:	4253      	negpl	r3, r2
 8004e4a:	b21b      	sxth	r3, r3
 8004e4c:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004e50:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d002      	beq.n	8004e60 <Vital_Msg_extr_from_CAN+0x828>
	{
		LinkEstablishFlag = SET;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	f887 30fb 	strb.w	r3, [r7, #251]	; 0xfb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e60:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e64:	687a      	ldr	r2, [r7, #4]
 8004e66:	441a      	add	r2, r3
 8004e68:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e6c:	2108      	movs	r1, #8
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fb fbd0 	bl	8000614 <ExtractBits>
 8004e74:	4603      	mov	r3, r0
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	BITSTUFFINC(8);
 8004e7c:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004e80:	3308      	adds	r3, #8
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	da00      	bge.n	8004e88 <Vital_Msg_extr_from_CAN+0x850>
 8004e86:	3307      	adds	r3, #7
 8004e88:	10db      	asrs	r3, r3, #3
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004e90:	4413      	add	r3, r2
 8004e92:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004e96:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004e9a:	3308      	adds	r3, #8
 8004e9c:	b29b      	uxth	r3, r3
 8004e9e:	b21b      	sxth	r3, r3
 8004ea0:	425a      	negs	r2, r3
 8004ea2:	f003 0307 	and.w	r3, r3, #7
 8004ea6:	f002 0207 	and.w	r2, r2, #7
 8004eaa:	bf58      	it	pl
 8004eac:	4253      	negpl	r3, r2
 8004eae:	b21b      	sxth	r3, r3
 8004eb0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004eb8:	4619      	mov	r1, r3
 8004eba:	484b      	ldr	r0, [pc, #300]	; (8004fe8 <Vital_Msg_extr_from_CAN+0x9b0>)
 8004ebc:	f01d fcbc 	bl	8022838 <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ec0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ec4:	687a      	ldr	r2, [r7, #4]
 8004ec6:	441a      	add	r2, r3
 8004ec8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ecc:	2108      	movs	r1, #8
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7fb fba0 	bl	8000614 <ExtractBits>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
	BITSTUFFINC(8);
 8004edc:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004ee0:	3308      	adds	r3, #8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	da00      	bge.n	8004ee8 <Vital_Msg_extr_from_CAN+0x8b0>
 8004ee6:	3307      	adds	r3, #7
 8004ee8:	10db      	asrs	r3, r3, #3
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004ef6:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004efa:	3308      	adds	r3, #8
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	b21b      	sxth	r3, r3
 8004f00:	425a      	negs	r2, r3
 8004f02:	f003 0307 	and.w	r3, r3, #7
 8004f06:	f002 0207 	and.w	r2, r2, #7
 8004f0a:	bf58      	it	pl
 8004f0c:	4253      	negpl	r3, r2
 8004f0e:	b21b      	sxth	r3, r3
 8004f10:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004f14:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	if (noofIP != 0)
 8004f20:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d007      	beq.n	8004f38 <Vital_Msg_extr_from_CAN+0x900>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004f28:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f2c:	08db      	lsrs	r3, r3, #3
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	3301      	adds	r3, #1
 8004f32:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
 8004f36:	e004      	b.n	8004f42 <Vital_Msg_extr_from_CAN+0x90a>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8004f38:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004f3c:	08db      	lsrs	r3, r3, #3
 8004f3e:	f887 30fd 	strb.w	r3, [r7, #253]	; 0xfd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004f42:	2300      	movs	r3, #0
 8004f44:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004f48:	e040      	b.n	8004fcc <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f4a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f4e:	687a      	ldr	r2, [r7, #4]
 8004f50:	441a      	add	r2, r3
 8004f52:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004f56:	2108      	movs	r1, #8
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f7fb fb5b 	bl	8000614 <ExtractBits>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f6a:	443b      	add	r3, r7
 8004f6c:	f803 2cc7 	strb.w	r2, [r3, #-199]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8004f70:	f8b7 10fe 	ldrh.w	r1, [r7, #254]	; 0xfe
 8004f74:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004f78:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8004f7c:	443b      	add	r3, r7
 8004f7e:	f813 3cc7 	ldrb.w	r3, [r3, #-199]
 8004f82:	461a      	mov	r2, r3
 8004f84:	4819      	ldr	r0, [pc, #100]	; (8004fec <Vital_Msg_extr_from_CAN+0x9b4>)
 8004f86:	f01d fc57 	bl	8022838 <iprintf>
		BITSTUFFINC(8);
 8004f8a:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 8004f8e:	3308      	adds	r3, #8
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	da00      	bge.n	8004f96 <Vital_Msg_extr_from_CAN+0x95e>
 8004f94:	3307      	adds	r3, #7
 8004f96:	10db      	asrs	r3, r3, #3
 8004f98:	b29a      	uxth	r2, r3
 8004f9a:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8004fa4:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004fa8:	3308      	adds	r3, #8
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	b21b      	sxth	r3, r3
 8004fae:	425a      	negs	r2, r3
 8004fb0:	f003 0307 	and.w	r3, r3, #7
 8004fb4:	f002 0207 	and.w	r2, r2, #7
 8004fb8:	bf58      	it	pl
 8004fba:	4253      	negpl	r3, r2
 8004fbc:	b21b      	sxth	r3, r3
 8004fbe:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004fc2:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8004fc6:	3301      	adds	r3, #1
 8004fc8:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fcc:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8004fd6:	429a      	cmp	r2, r3
 8004fd8:	d3b7      	bcc.n	8004f4a <Vital_Msg_extr_from_CAN+0x912>
	}
	printf("\n");
 8004fda:	200a      	movs	r0, #10
 8004fdc:	f01d fc44 	bl	8022868 <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8004fe6:	e037      	b.n	8005058 <Vital_Msg_extr_from_CAN+0xa20>
 8004fe8:	08024830 	.word	0x08024830
 8004fec:	08024838 	.word	0x08024838
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ff0:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 8004ff4:	687a      	ldr	r2, [r7, #4]
 8004ff6:	441a      	add	r2, r3
 8004ff8:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8004ffc:	2108      	movs	r1, #8
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fb fb08 	bl	8000614 <ExtractBits>
 8005004:	4602      	mov	r2, r0
 8005006:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 800500a:	b2d2      	uxtb	r2, r2
 800500c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8005010:	443b      	add	r3, r7
 8005012:	f803 2cb7 	strb.w	r2, [r3, #-183]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8005016:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800501a:	3308      	adds	r3, #8
 800501c:	2b00      	cmp	r3, #0
 800501e:	da00      	bge.n	8005022 <Vital_Msg_extr_from_CAN+0x9ea>
 8005020:	3307      	adds	r3, #7
 8005022:	10db      	asrs	r3, r3, #3
 8005024:	b29a      	uxth	r2, r3
 8005026:	f8b7 30f8 	ldrh.w	r3, [r7, #248]	; 0xf8
 800502a:	4413      	add	r3, r2
 800502c:	f8a7 30f8 	strh.w	r3, [r7, #248]	; 0xf8
 8005030:	f8b7 30f6 	ldrh.w	r3, [r7, #246]	; 0xf6
 8005034:	3308      	adds	r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	b21b      	sxth	r3, r3
 800503a:	425a      	negs	r2, r3
 800503c:	f003 0307 	and.w	r3, r3, #7
 8005040:	f002 0207 	and.w	r2, r2, #7
 8005044:	bf58      	it	pl
 8005046:	4253      	negpl	r3, r2
 8005048:	b21b      	sxth	r3, r3
 800504a:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 800504e:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	; 0xfe
 8005052:	3301      	adds	r3, #1
 8005054:	f8a7 30fe 	strh.w	r3, [r7, #254]	; 0xfe
 8005058:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800505c:	b29b      	uxth	r3, r3
 800505e:	f8b7 20fe 	ldrh.w	r2, [r7, #254]	; 0xfe
 8005062:	429a      	cmp	r2, r3
 8005064:	d3c4      	bcc.n	8004ff0 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 8005066:	f107 0308 	add.w	r3, r7, #8
 800506a:	3301      	adds	r3, #1
 800506c:	2210      	movs	r2, #16
 800506e:	2100      	movs	r1, #0
 8005070:	4618      	mov	r0, r3
 8005072:	f01d faf9 	bl	8022668 <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 8005076:	f897 20fd 	ldrb.w	r2, [r7, #253]	; 0xfd
 800507a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800507e:	1d59      	adds	r1, r3, #5
 8005080:	f107 0308 	add.w	r3, r7, #8
 8005084:	3301      	adds	r3, #1
 8005086:	4618      	mov	r0, r3
 8005088:	f01d fac6 	bl	8022618 <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 800508c:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 8005090:	b21a      	sxth	r2, r3
 8005092:	f107 0308 	add.w	r3, r7, #8
 8005096:	3301      	adds	r3, #1
 8005098:	4619      	mov	r1, r3
 800509a:	2000      	movs	r0, #0
 800509c:	f00d ff2c 	bl	8012ef8 <GetCRC16>
 80050a0:	4603      	mov	r3, r0
 80050a2:	837b      	strh	r3, [r7, #26]
	CAN_Relay_st.No_ofIps = noofIP;
 80050a4:	f897 30fd 	ldrb.w	r3, [r7, #253]	; 0xfd
 80050a8:	767b      	strb	r3, [r7, #25]
	CAN_Relay_st.Peer_Index = Source_Index;
 80050aa:	78bb      	ldrb	r3, [r7, #2]
 80050ac:	723b      	strb	r3, [r7, #8]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 80050ae:	78bb      	ldrb	r3, [r7, #2]
 80050b0:	4a60      	ldr	r2, [pc, #384]	; (8005234 <Vital_Msg_extr_from_CAN+0xbfc>)
 80050b2:	4413      	add	r3, r2
 80050b4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050b8:	2b01      	cmp	r3, #1
 80050ba:	d17f      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
 80050bc:	f897 30fb 	ldrb.w	r3, [r7, #251]	; 0xfb
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d17b      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
 80050c4:	8b79      	ldrh	r1, [r7, #26]
 80050c6:	78ba      	ldrb	r2, [r7, #2]
 80050c8:	485b      	ldr	r0, [pc, #364]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80050ca:	4613      	mov	r3, r2
 80050cc:	009b      	lsls	r3, r3, #2
 80050ce:	4413      	add	r3, r2
 80050d0:	009b      	lsls	r3, r3, #2
 80050d2:	4403      	add	r3, r0
 80050d4:	3312      	adds	r3, #18
 80050d6:	881b      	ldrh	r3, [r3, #0]
 80050d8:	4299      	cmp	r1, r3
 80050da:	d06f      	beq.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80050dc:	78ba      	ldrb	r2, [r7, #2]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a54      	ldr	r2, [pc, #336]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80050e8:	4413      	add	r3, r2
 80050ea:	3301      	adds	r3, #1
 80050ec:	2210      	movs	r2, #16
 80050ee:	2100      	movs	r1, #0
 80050f0:	4618      	mov	r0, r3
 80050f2:	f01d fab9 	bl	8022668 <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80050f6:	78ba      	ldrb	r2, [r7, #2]
 80050f8:	4613      	mov	r3, r2
 80050fa:	009b      	lsls	r3, r3, #2
 80050fc:	4413      	add	r3, r2
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	4a4d      	ldr	r2, [pc, #308]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005102:	4413      	add	r3, r2
 8005104:	f107 0108 	add.w	r1, r7, #8
 8005108:	2214      	movs	r2, #20
 800510a:	4618      	mov	r0, r3
 800510c:	f01d fa84 	bl	8022618 <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8005110:	78bb      	ldrb	r3, [r7, #2]
 8005112:	494a      	ldr	r1, [pc, #296]	; (800523c <Vital_Msg_extr_from_CAN+0xc04>)
 8005114:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 800511c:	78bb      	ldrb	r3, [r7, #2]
 800511e:	4a48      	ldr	r2, [pc, #288]	; (8005240 <Vital_Msg_extr_from_CAN+0xc08>)
 8005120:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005124:	78ba      	ldrb	r2, [r7, #2]
 8005126:	4844      	ldr	r0, [pc, #272]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005128:	4613      	mov	r3, r2
 800512a:	009b      	lsls	r3, r3, #2
 800512c:	4413      	add	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4403      	add	r3, r0
 8005132:	3312      	adds	r3, #18
 8005134:	881b      	ldrh	r3, [r3, #0]
 8005136:	4299      	cmp	r1, r3
 8005138:	d040      	beq.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 800513a:	78ba      	ldrb	r2, [r7, #2]
 800513c:	78b9      	ldrb	r1, [r7, #2]
 800513e:	483e      	ldr	r0, [pc, #248]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 8005140:	4613      	mov	r3, r2
 8005142:	009b      	lsls	r3, r3, #2
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	4403      	add	r3, r0
 800514a:	3312      	adds	r3, #18
 800514c:	881a      	ldrh	r2, [r3, #0]
 800514e:	4b3c      	ldr	r3, [pc, #240]	; (8005240 <Vital_Msg_extr_from_CAN+0xc08>)
 8005150:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005154:	2214      	movs	r2, #20
 8005156:	2100      	movs	r1, #0
 8005158:	483a      	ldr	r0, [pc, #232]	; (8005244 <Vital_Msg_extr_from_CAN+0xc0c>)
 800515a:	f01d fa85 	bl	8022668 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 800515e:	78ba      	ldrb	r2, [r7, #2]
 8005160:	4613      	mov	r3, r2
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	009b      	lsls	r3, r3, #2
 8005168:	4a33      	ldr	r2, [pc, #204]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 800516a:	4413      	add	r3, r2
 800516c:	2214      	movs	r2, #20
 800516e:	4619      	mov	r1, r3
 8005170:	4834      	ldr	r0, [pc, #208]	; (8005244 <Vital_Msg_extr_from_CAN+0xc0c>)
 8005172:	f01d fa51 	bl	8022618 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005176:	f240 2007 	movw	r0, #519	; 0x207
 800517a:	f00a fb79 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 800517e:	78bb      	ldrb	r3, [r7, #2]
 8005180:	4a31      	ldr	r2, [pc, #196]	; (8005248 <Vital_Msg_extr_from_CAN+0xc10>)
 8005182:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d118      	bne.n	80051bc <Vital_Msg_extr_from_CAN+0xb84>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 800518a:	78bb      	ldrb	r3, [r7, #2]
 800518c:	011b      	lsls	r3, r3, #4
 800518e:	4a2f      	ldr	r2, [pc, #188]	; (800524c <Vital_Msg_extr_from_CAN+0xc14>)
 8005190:	4413      	add	r3, r2
 8005192:	1c98      	adds	r0, r3, #2
 8005194:	78ba      	ldrb	r2, [r7, #2]
 8005196:	4613      	mov	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	4413      	add	r3, r2
 800519c:	009b      	lsls	r3, r3, #2
 800519e:	4a26      	ldr	r2, [pc, #152]	; (8005238 <Vital_Msg_extr_from_CAN+0xc00>)
 80051a0:	4413      	add	r3, r2
 80051a2:	3301      	adds	r3, #1
 80051a4:	2210      	movs	r2, #16
 80051a6:	4619      	mov	r1, r3
 80051a8:	f01d fa36 	bl	8022618 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 80051ac:	f240 1019 	movw	r0, #281	; 0x119
 80051b0:	f00a fb5e 	bl	800f870 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 80051b4:	4a26      	ldr	r2, [pc, #152]	; (8005250 <Vital_Msg_extr_from_CAN+0xc18>)
 80051b6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80051ba:	6013      	str	r3, [r2, #0]





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 80051bc:	78ba      	ldrb	r2, [r7, #2]
 80051be:	4925      	ldr	r1, [pc, #148]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051c0:	4613      	mov	r3, r2
 80051c2:	005b      	lsls	r3, r3, #1
 80051c4:	4413      	add	r3, r2
 80051c6:	00db      	lsls	r3, r3, #3
 80051c8:	440b      	add	r3, r1
 80051ca:	78ba      	ldrb	r2, [r7, #2]
 80051cc:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80051ce:	78ba      	ldrb	r2, [r7, #2]
 80051d0:	4920      	ldr	r1, [pc, #128]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051d2:	4613      	mov	r3, r2
 80051d4:	005b      	lsls	r3, r3, #1
 80051d6:	4413      	add	r3, r2
 80051d8:	00db      	lsls	r3, r3, #3
 80051da:	440b      	add	r3, r1
 80051dc:	3301      	adds	r3, #1
 80051de:	2201      	movs	r2, #1
 80051e0:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80051e2:	2218      	movs	r2, #24
 80051e4:	2100      	movs	r1, #0
 80051e6:	481c      	ldr	r0, [pc, #112]	; (8005258 <Vital_Msg_extr_from_CAN+0xc20>)
 80051e8:	f01d fa3e 	bl	8022668 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80051ec:	78ba      	ldrb	r2, [r7, #2]
 80051ee:	4613      	mov	r3, r2
 80051f0:	005b      	lsls	r3, r3, #1
 80051f2:	4413      	add	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4a17      	ldr	r2, [pc, #92]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 80051f8:	4413      	add	r3, r2
 80051fa:	2218      	movs	r2, #24
 80051fc:	4619      	mov	r1, r3
 80051fe:	4816      	ldr	r0, [pc, #88]	; (8005258 <Vital_Msg_extr_from_CAN+0xc20>)
 8005200:	f01d fa0a 	bl	8022618 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005204:	f240 2001 	movw	r0, #513	; 0x201
 8005208:	f00a fb32 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800520c:	78ba      	ldrb	r2, [r7, #2]
 800520e:	4911      	ldr	r1, [pc, #68]	; (8005254 <Vital_Msg_extr_from_CAN+0xc1c>)
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	3301      	adds	r3, #1
 800521c:	2200      	movs	r2, #0
 800521e:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005220:	78bb      	ldrb	r3, [r7, #2]
 8005222:	490e      	ldr	r1, [pc, #56]	; (800525c <Vital_Msg_extr_from_CAN+0xc24>)
 8005224:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005228:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 800522c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005230:	46bd      	mov	sp, r7
 8005232:	bd80      	pop	{r7, pc}
 8005234:	20000304 	.word	0x20000304
 8005238:	200021c0 	.word	0x200021c0
 800523c:	20000ed8 	.word	0x20000ed8
 8005240:	20000f00 	.word	0x20000f00
 8005244:	20002350 	.word	0x20002350
 8005248:	20000ec4 	.word	0x20000ec4
 800524c:	200010e4 	.word	0x200010e4
 8005250:	20000e70 	.word	0x20000e70
 8005254:	20001674 	.word	0x20001674
 8005258:	20001854 	.word	0x20001854
 800525c:	20000e44 	.word	0x20000e44

08005260 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005260:	b590      	push	{r4, r7, lr}
 8005262:	b095      	sub	sp, #84	; 0x54
 8005264:	af00      	add	r7, sp, #0
 8005266:	6078      	str	r0, [r7, #4]
 8005268:	4608      	mov	r0, r1
 800526a:	4611      	mov	r1, r2
 800526c:	461a      	mov	r2, r3
 800526e:	4603      	mov	r3, r0
 8005270:	70fb      	strb	r3, [r7, #3]
 8005272:	460b      	mov	r3, r1
 8005274:	70bb      	strb	r3, [r7, #2]
 8005276:	4613      	mov	r3, r2
 8005278:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800527a:	2300      	movs	r3, #0
 800527c:	60bb      	str	r3, [r7, #8]
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	2224      	movs	r2, #36	; 0x24
 8005284:	2100      	movs	r1, #0
 8005286:	4618      	mov	r0, r3
 8005288:	f01d f9ee 	bl	8022668 <memset>
	uint8_t uc_index = 0;
 800528c:	2300      	movs	r3, #0
 800528e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005292:	2300      	movs	r3, #0
 8005294:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005296:	2300      	movs	r3, #0
 8005298:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 80052a0:	f010 fac0 	bl	8015824 <HAL_GetTick>
 80052a4:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 80052a6:	2300      	movs	r3, #0
 80052a8:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 80052ac:	2300      	movs	r3, #0
 80052ae:	873b      	strh	r3, [r7, #56]	; 0x38
 80052b0:	2300      	movs	r3, #0
 80052b2:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80052b4:	499a      	ldr	r1, [pc, #616]	; (8005520 <Status_Msg_Extr+0x2c0>)
 80052b6:	489b      	ldr	r0, [pc, #620]	; (8005524 <Status_Msg_Extr+0x2c4>)
 80052b8:	f7fa ffc2 	bl	8000240 <strcmp>
 80052bc:	4603      	mov	r3, r0
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f000 812c 	beq.w	800551c <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80052c4:	4b98      	ldr	r3, [pc, #608]	; (8005528 <Status_Msg_Extr+0x2c8>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0301 	and.w	r3, r3, #1
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d02c      	beq.n	800532a <Status_Msg_Extr+0xca>
 80052d0:	4b95      	ldr	r3, [pc, #596]	; (8005528 <Status_Msg_Extr+0x2c8>)
 80052d2:	791b      	ldrb	r3, [r3, #4]
 80052d4:	78ba      	ldrb	r2, [r7, #2]
 80052d6:	429a      	cmp	r2, r3
 80052d8:	d127      	bne.n	800532a <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80052de:	4893      	ldr	r0, [pc, #588]	; (800552c <Status_Msg_Extr+0x2cc>)
 80052e0:	f014 ff52 	bl	801a188 <HAL_RNG_GetRandomNumber>
 80052e4:	4602      	mov	r2, r0
 80052e6:	4b92      	ldr	r3, [pc, #584]	; (8005530 <Status_Msg_Extr+0x2d0>)
 80052e8:	fba3 1302 	umull	r1, r3, r3, r2
 80052ec:	0bd9      	lsrs	r1, r3, #15
 80052ee:	460b      	mov	r3, r1
 80052f0:	041b      	lsls	r3, r3, #16
 80052f2:	1a5b      	subs	r3, r3, r1
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80052f8:	488e      	ldr	r0, [pc, #568]	; (8005534 <Status_Msg_Extr+0x2d4>)
 80052fa:	f01d fb39 	bl	8022970 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052fe:	78bb      	ldrb	r3, [r7, #2]
 8005300:	4a8d      	ldr	r2, [pc, #564]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005302:	011b      	lsls	r3, r3, #4
 8005304:	4413      	add	r3, r2
 8005306:	3308      	adds	r3, #8
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4619      	mov	r1, r3
 800530c:	488b      	ldr	r0, [pc, #556]	; (800553c <Status_Msg_Extr+0x2dc>)
 800530e:	f01d fa93 	bl	8022838 <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8005312:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005314:	488a      	ldr	r0, [pc, #552]	; (8005540 <Status_Msg_Extr+0x2e0>)
 8005316:	f01d fa8f 	bl	8022838 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 800531a:	f107 0208 	add.w	r2, r7, #8
 800531e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005320:	2118      	movs	r1, #24
 8005322:	2000      	movs	r0, #0
 8005324:	f7fb fa02 	bl	800072c <InsertBits>
	{
 8005328:	e00b      	b.n	8005342 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800532a:	78bb      	ldrb	r3, [r7, #2]
 800532c:	4a82      	ldr	r2, [pc, #520]	; (8005538 <Status_Msg_Extr+0x2d8>)
 800532e:	011b      	lsls	r3, r3, #4
 8005330:	4413      	add	r3, r2
 8005332:	3308      	adds	r3, #8
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f107 0208 	add.w	r2, r7, #8
 800533a:	2118      	movs	r1, #24
 800533c:	2000      	movs	r0, #0
 800533e:	f7fb f9f5 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005342:	2300      	movs	r3, #0
 8005344:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005348:	e010      	b.n	800536c <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800534a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	441a      	add	r2, r3
 8005352:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005356:	3303      	adds	r3, #3
 8005358:	7812      	ldrb	r2, [r2, #0]
 800535a:	3350      	adds	r3, #80	; 0x50
 800535c:	443b      	add	r3, r7
 800535e:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005362:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005366:	3301      	adds	r3, #1
 8005368:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800536c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005370:	78fb      	ldrb	r3, [r7, #3]
 8005372:	3b05      	subs	r3, #5
 8005374:	429a      	cmp	r2, r3
 8005376:	dbe8      	blt.n	800534a <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005378:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800537c:	b29b      	uxth	r3, r3
 800537e:	3303      	adds	r3, #3
 8005380:	b29a      	uxth	r2, r3
 8005382:	f107 0308 	add.w	r3, r7, #8
 8005386:	4611      	mov	r1, r2
 8005388:	4618      	mov	r0, r3
 800538a:	f00d fe6f 	bl	801306c <CalculateDirectReverseCrc>
 800538e:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005390:	78fb      	ldrb	r3, [r7, #3]
 8005392:	3b05      	subs	r3, #5
 8005394:	687a      	ldr	r2, [r7, #4]
 8005396:	441a      	add	r2, r3
 8005398:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800539a:	2120      	movs	r1, #32
 800539c:	4618      	mov	r0, r3
 800539e:	f7fb f939 	bl	8000614 <ExtractBits>
 80053a2:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 80053a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a8:	429a      	cmp	r2, r3
 80053aa:	f000 80df 	beq.w	800556c <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	3305      	adds	r3, #5
 80053b2:	461a      	mov	r2, r3
 80053b4:	2108      	movs	r1, #8
 80053b6:	2000      	movs	r0, #0
 80053b8:	f7fb f92c 	bl	8000614 <ExtractBits>
 80053bc:	4603      	mov	r3, r0
 80053be:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 80053c2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d004      	beq.n	80053d4 <Status_Msg_Extr+0x174>
 80053ca:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	f040 8090 	bne.w	80054f4 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80053d4:	78bb      	ldrb	r3, [r7, #2]
 80053d6:	4a5b      	ldr	r2, [pc, #364]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80053d8:	3366      	adds	r3, #102	; 0x66
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	4413      	add	r3, r2
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	4619      	mov	r1, r3
 80053e2:	4859      	ldr	r0, [pc, #356]	; (8005548 <Status_Msg_Extr+0x2e8>)
 80053e4:	f01d fa28 	bl	8022838 <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80053e8:	f107 0308 	add.w	r3, r7, #8
 80053ec:	2228      	movs	r2, #40	; 0x28
 80053ee:	2100      	movs	r1, #0
 80053f0:	4618      	mov	r0, r3
 80053f2:	f01d f939 	bl	8022668 <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80053f6:	78bb      	ldrb	r3, [r7, #2]
 80053f8:	4a4f      	ldr	r2, [pc, #316]	; (8005538 <Status_Msg_Extr+0x2d8>)
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	3308      	adds	r3, #8
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	3301      	adds	r3, #1
 8005404:	f107 0208 	add.w	r2, r7, #8
 8005408:	2118      	movs	r1, #24
 800540a:	2000      	movs	r0, #0
 800540c:	f7fb f98e 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005410:	2300      	movs	r3, #0
 8005412:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005416:	e010      	b.n	800543a <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 8005418:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	441a      	add	r2, r3
 8005420:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005424:	3303      	adds	r3, #3
 8005426:	7812      	ldrb	r2, [r2, #0]
 8005428:	3350      	adds	r3, #80	; 0x50
 800542a:	443b      	add	r3, r7
 800542c:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005430:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005434:	3301      	adds	r3, #1
 8005436:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800543a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800543e:	78fb      	ldrb	r3, [r7, #3]
 8005440:	3b05      	subs	r3, #5
 8005442:	429a      	cmp	r2, r3
 8005444:	dbe8      	blt.n	8005418 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005446:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800544a:	b29b      	uxth	r3, r3
 800544c:	3303      	adds	r3, #3
 800544e:	b29a      	uxth	r2, r3
 8005450:	f107 0308 	add.w	r3, r7, #8
 8005454:	4611      	mov	r1, r2
 8005456:	4618      	mov	r0, r3
 8005458:	f00d fe08 	bl	801306c <CalculateDirectReverseCrc>
 800545c:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 800545e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005460:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005462:	429a      	cmp	r2, r3
 8005464:	d132      	bne.n	80054cc <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005466:	4839      	ldr	r0, [pc, #228]	; (800554c <Status_Msg_Extr+0x2ec>)
 8005468:	f01d fa82 	bl	8022970 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800546c:	78bb      	ldrb	r3, [r7, #2]
 800546e:	4a32      	ldr	r2, [pc, #200]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005470:	011b      	lsls	r3, r3, #4
 8005472:	4413      	add	r3, r2
 8005474:	3308      	adds	r3, #8
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4619      	mov	r1, r3
 800547a:	4835      	ldr	r0, [pc, #212]	; (8005550 <Status_Msg_Extr+0x2f0>)
 800547c:	f01d f9dc 	bl	8022838 <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005480:	78bb      	ldrb	r3, [r7, #2]
 8005482:	492d      	ldr	r1, [pc, #180]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005484:	011a      	lsls	r2, r3, #4
 8005486:	440a      	add	r2, r1
 8005488:	3208      	adds	r2, #8
 800548a:	6812      	ldr	r2, [r2, #0]
 800548c:	3201      	adds	r2, #1
 800548e:	492a      	ldr	r1, [pc, #168]	; (8005538 <Status_Msg_Extr+0x2d8>)
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	440b      	add	r3, r1
 8005494:	3308      	adds	r3, #8
 8005496:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005498:	78bb      	ldrb	r3, [r7, #2]
 800549a:	4a27      	ldr	r2, [pc, #156]	; (8005538 <Status_Msg_Extr+0x2d8>)
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	4413      	add	r3, r2
 80054a0:	3308      	adds	r3, #8
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	4619      	mov	r1, r3
 80054a6:	482b      	ldr	r0, [pc, #172]	; (8005554 <Status_Msg_Extr+0x2f4>)
 80054a8:	f01d f9c6 	bl	8022838 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 80054ac:	78bb      	ldrb	r3, [r7, #2]
 80054ae:	78ba      	ldrb	r2, [r7, #2]
 80054b0:	4921      	ldr	r1, [pc, #132]	; (8005538 <Status_Msg_Extr+0x2d8>)
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	440b      	add	r3, r1
 80054b6:	3308      	adds	r3, #8
 80054b8:	6819      	ldr	r1, [r3, #0]
 80054ba:	4827      	ldr	r0, [pc, #156]	; (8005558 <Status_Msg_Extr+0x2f8>)
 80054bc:	4613      	mov	r3, r2
 80054be:	005b      	lsls	r3, r3, #1
 80054c0:	4413      	add	r3, r2
 80054c2:	00db      	lsls	r3, r3, #3
 80054c4:	4403      	add	r3, r0
 80054c6:	3308      	adds	r3, #8
 80054c8:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 80054ca:	e050      	b.n	800556e <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054cc:	78bb      	ldrb	r3, [r7, #2]
 80054ce:	4a1d      	ldr	r2, [pc, #116]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80054d0:	3366      	adds	r3, #102	; 0x66
 80054d2:	009b      	lsls	r3, r3, #2
 80054d4:	4413      	add	r3, r2
 80054d6:	685b      	ldr	r3, [r3, #4]
 80054d8:	4619      	mov	r1, r3
 80054da:	4820      	ldr	r0, [pc, #128]	; (800555c <Status_Msg_Extr+0x2fc>)
 80054dc:	f01d f9ac 	bl	8022838 <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054e0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054e2:	481f      	ldr	r0, [pc, #124]	; (8005560 <Status_Msg_Extr+0x300>)
 80054e4:	f01d f9a8 	bl	8022838 <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054e8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ea:	481e      	ldr	r0, [pc, #120]	; (8005564 <Status_Msg_Extr+0x304>)
 80054ec:	f01d f9a4 	bl	8022838 <iprintf>
				return;
 80054f0:	f000 bc33 	b.w	8005d5a <Status_Msg_Extr+0xafa>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054f4:	78bb      	ldrb	r3, [r7, #2]
 80054f6:	4a13      	ldr	r2, [pc, #76]	; (8005544 <Status_Msg_Extr+0x2e4>)
 80054f8:	3366      	adds	r3, #102	; 0x66
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	685b      	ldr	r3, [r3, #4]
 8005500:	4619      	mov	r1, r3
 8005502:	4819      	ldr	r0, [pc, #100]	; (8005568 <Status_Msg_Extr+0x308>)
 8005504:	f01d f998 	bl	8022838 <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8005508:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800550a:	4815      	ldr	r0, [pc, #84]	; (8005560 <Status_Msg_Extr+0x300>)
 800550c:	f01d f994 	bl	8022838 <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8005510:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005512:	4814      	ldr	r0, [pc, #80]	; (8005564 <Status_Msg_Extr+0x304>)
 8005514:	f01d f990 	bl	8022838 <iprintf>
			return;
 8005518:	f000 bc1f 	b.w	8005d5a <Status_Msg_Extr+0xafa>
		goto ROLLOVER_STATUS;
 800551c:	bf00      	nop
 800551e:	e026      	b.n	800556e <Status_Msg_Extr+0x30e>
 8005520:	08023fe4 	.word	0x08023fe4
 8005524:	20000305 	.word	0x20000305
 8005528:	20001a1c 	.word	0x20001a1c
 800552c:	2000a05c 	.word	0x2000a05c
 8005530:	80008001 	.word	0x80008001
 8005534:	08024848 	.word	0x08024848
 8005538:	200011c4 	.word	0x200011c4
 800553c:	08024868 	.word	0x08024868
 8005540:	08024530 	.word	0x08024530
 8005544:	20000304 	.word	0x20000304
 8005548:	0802488c 	.word	0x0802488c
 800554c:	08024574 	.word	0x08024574
 8005550:	080248b0 	.word	0x080248b0
 8005554:	080248c8 	.word	0x080248c8
 8005558:	20001674 	.word	0x20001674
 800555c:	080248e0 	.word	0x080248e0
 8005560:	08024228 	.word	0x08024228
 8005564:	08024238 	.word	0x08024238
 8005568:	08024900 	.word	0x08024900
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 800556c:	bf00      	nop

	BITSTUFFINC(8);
 800556e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005572:	3308      	adds	r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	da00      	bge.n	800557a <Status_Msg_Extr+0x31a>
 8005578:	3307      	adds	r3, #7
 800557a:	10db      	asrs	r3, r3, #3
 800557c:	b29a      	uxth	r2, r3
 800557e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005580:	4413      	add	r3, r2
 8005582:	873b      	strh	r3, [r7, #56]	; 0x38
 8005584:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005586:	3308      	adds	r3, #8
 8005588:	b29b      	uxth	r3, r3
 800558a:	b21b      	sxth	r3, r3
 800558c:	425a      	negs	r2, r3
 800558e:	f003 0307 	and.w	r3, r3, #7
 8005592:	f002 0207 	and.w	r2, r2, #7
 8005596:	bf58      	it	pl
 8005598:	4253      	negpl	r3, r2
 800559a:	b21b      	sxth	r3, r3
 800559c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800559e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	441a      	add	r2, r3
 80055a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055a6:	2110      	movs	r1, #16
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fb f833 	bl	8000614 <ExtractBits>
 80055ae:	4603      	mov	r3, r0
 80055b0:	78ba      	ldrb	r2, [r7, #2]
 80055b2:	b298      	uxth	r0, r3
 80055b4:	49ab      	ldr	r1, [pc, #684]	; (8005864 <Status_Msg_Extr+0x604>)
 80055b6:	4613      	mov	r3, r2
 80055b8:	005b      	lsls	r3, r3, #1
 80055ba:	4413      	add	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	440b      	add	r3, r1
 80055c0:	3306      	adds	r3, #6
 80055c2:	4602      	mov	r2, r0
 80055c4:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 80055c6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055ca:	3310      	adds	r3, #16
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	da00      	bge.n	80055d2 <Status_Msg_Extr+0x372>
 80055d0:	3307      	adds	r3, #7
 80055d2:	10db      	asrs	r3, r3, #3
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055d8:	4413      	add	r3, r2
 80055da:	873b      	strh	r3, [r7, #56]	; 0x38
 80055dc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055de:	3310      	adds	r3, #16
 80055e0:	b29b      	uxth	r3, r3
 80055e2:	b21b      	sxth	r3, r3
 80055e4:	425a      	negs	r2, r3
 80055e6:	f003 0307 	and.w	r3, r3, #7
 80055ea:	f002 0207 	and.w	r2, r2, #7
 80055ee:	bf58      	it	pl
 80055f0:	4253      	negpl	r3, r2
 80055f2:	b21b      	sxth	r3, r3
 80055f4:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80055f6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055f8:	687a      	ldr	r2, [r7, #4]
 80055fa:	441a      	add	r2, r3
 80055fc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055fe:	2110      	movs	r1, #16
 8005600:	4618      	mov	r0, r3
 8005602:	f7fb f807 	bl	8000614 <ExtractBits>
 8005606:	4603      	mov	r3, r0
 8005608:	78ba      	ldrb	r2, [r7, #2]
 800560a:	b298      	uxth	r0, r3
 800560c:	4995      	ldr	r1, [pc, #596]	; (8005864 <Status_Msg_Extr+0x604>)
 800560e:	4613      	mov	r3, r2
 8005610:	005b      	lsls	r3, r3, #1
 8005612:	4413      	add	r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	3304      	adds	r3, #4
 800561a:	4602      	mov	r2, r0
 800561c:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 800561e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005622:	3310      	adds	r3, #16
 8005624:	2b00      	cmp	r3, #0
 8005626:	da00      	bge.n	800562a <Status_Msg_Extr+0x3ca>
 8005628:	3307      	adds	r3, #7
 800562a:	10db      	asrs	r3, r3, #3
 800562c:	b29a      	uxth	r2, r3
 800562e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005630:	4413      	add	r3, r2
 8005632:	873b      	strh	r3, [r7, #56]	; 0x38
 8005634:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005636:	3310      	adds	r3, #16
 8005638:	b29b      	uxth	r3, r3
 800563a:	b21b      	sxth	r3, r3
 800563c:	425a      	negs	r2, r3
 800563e:	f003 0307 	and.w	r3, r3, #7
 8005642:	f002 0207 	and.w	r2, r2, #7
 8005646:	bf58      	it	pl
 8005648:	4253      	negpl	r3, r2
 800564a:	b21b      	sxth	r3, r3
 800564c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800564e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	441a      	add	r2, r3
 8005654:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005656:	2108      	movs	r1, #8
 8005658:	4618      	mov	r0, r3
 800565a:	f7fa ffdb 	bl	8000614 <ExtractBits>
 800565e:	4602      	mov	r2, r0
 8005660:	78bb      	ldrb	r3, [r7, #2]
 8005662:	b2d1      	uxtb	r1, r2
 8005664:	4a80      	ldr	r2, [pc, #512]	; (8005868 <Status_Msg_Extr+0x608>)
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	4413      	add	r3, r2
 800566a:	3302      	adds	r3, #2
 800566c:	460a      	mov	r2, r1
 800566e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005670:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005674:	3308      	adds	r3, #8
 8005676:	2b00      	cmp	r3, #0
 8005678:	da00      	bge.n	800567c <Status_Msg_Extr+0x41c>
 800567a:	3307      	adds	r3, #7
 800567c:	10db      	asrs	r3, r3, #3
 800567e:	b29a      	uxth	r2, r3
 8005680:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005682:	4413      	add	r3, r2
 8005684:	873b      	strh	r3, [r7, #56]	; 0x38
 8005686:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005688:	3308      	adds	r3, #8
 800568a:	b29b      	uxth	r3, r3
 800568c:	b21b      	sxth	r3, r3
 800568e:	425a      	negs	r2, r3
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	f002 0207 	and.w	r2, r2, #7
 8005698:	bf58      	it	pl
 800569a:	4253      	negpl	r3, r2
 800569c:	b21b      	sxth	r3, r3
 800569e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80056a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	441a      	add	r2, r3
 80056a6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80056a8:	2108      	movs	r1, #8
 80056aa:	4618      	mov	r0, r3
 80056ac:	f7fa ffb2 	bl	8000614 <ExtractBits>
 80056b0:	4602      	mov	r2, r0
 80056b2:	78bb      	ldrb	r3, [r7, #2]
 80056b4:	b2d1      	uxtb	r1, r2
 80056b6:	4a6c      	ldr	r2, [pc, #432]	; (8005868 <Status_Msg_Extr+0x608>)
 80056b8:	011b      	lsls	r3, r3, #4
 80056ba:	4413      	add	r3, r2
 80056bc:	3301      	adds	r3, #1
 80056be:	460a      	mov	r2, r1
 80056c0:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 80056c2:	78bb      	ldrb	r3, [r7, #2]
 80056c4:	4a68      	ldr	r2, [pc, #416]	; (8005868 <Status_Msg_Extr+0x608>)
 80056c6:	011b      	lsls	r3, r3, #4
 80056c8:	4413      	add	r3, r2
 80056ca:	3301      	adds	r3, #1
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d138      	bne.n	8005744 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056d2:	78bb      	ldrb	r3, [r7, #2]
 80056d4:	4a65      	ldr	r2, [pc, #404]	; (800586c <Status_Msg_Extr+0x60c>)
 80056d6:	3366      	adds	r3, #102	; 0x66
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	4413      	add	r3, r2
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	4619      	mov	r1, r3
 80056e0:	4863      	ldr	r0, [pc, #396]	; (8005870 <Status_Msg_Extr+0x610>)
 80056e2:	f01d f8a9 	bl	8022838 <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056e6:	78bb      	ldrb	r3, [r7, #2]
 80056e8:	4a5f      	ldr	r2, [pc, #380]	; (8005868 <Status_Msg_Extr+0x608>)
 80056ea:	011b      	lsls	r3, r3, #4
 80056ec:	4413      	add	r3, r2
 80056ee:	330c      	adds	r3, #12
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4619      	mov	r1, r3
 80056f4:	485f      	ldr	r0, [pc, #380]	; (8005874 <Status_Msg_Extr+0x614>)
 80056f6:	f01d f89f 	bl	8022838 <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056fa:	78bb      	ldrb	r3, [r7, #2]
 80056fc:	495a      	ldr	r1, [pc, #360]	; (8005868 <Status_Msg_Extr+0x608>)
 80056fe:	011a      	lsls	r2, r3, #4
 8005700:	440a      	add	r2, r1
 8005702:	320c      	adds	r2, #12
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	3201      	adds	r2, #1
 8005708:	4957      	ldr	r1, [pc, #348]	; (8005868 <Status_Msg_Extr+0x608>)
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	440b      	add	r3, r1
 800570e:	330c      	adds	r3, #12
 8005710:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8005712:	78bb      	ldrb	r3, [r7, #2]
 8005714:	4a54      	ldr	r2, [pc, #336]	; (8005868 <Status_Msg_Extr+0x608>)
 8005716:	011b      	lsls	r3, r3, #4
 8005718:	4413      	add	r3, r2
 800571a:	330c      	adds	r3, #12
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4619      	mov	r1, r3
 8005720:	4855      	ldr	r0, [pc, #340]	; (8005878 <Status_Msg_Extr+0x618>)
 8005722:	f01d f889 	bl	8022838 <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8005726:	78bb      	ldrb	r3, [r7, #2]
 8005728:	78ba      	ldrb	r2, [r7, #2]
 800572a:	494f      	ldr	r1, [pc, #316]	; (8005868 <Status_Msg_Extr+0x608>)
 800572c:	011b      	lsls	r3, r3, #4
 800572e:	440b      	add	r3, r1
 8005730:	330c      	adds	r3, #12
 8005732:	6819      	ldr	r1, [r3, #0]
 8005734:	4851      	ldr	r0, [pc, #324]	; (800587c <Status_Msg_Extr+0x61c>)
 8005736:	4613      	mov	r3, r2
 8005738:	005b      	lsls	r3, r3, #1
 800573a:	4413      	add	r3, r2
 800573c:	00db      	lsls	r3, r3, #3
 800573e:	4403      	add	r3, r0
 8005740:	330c      	adds	r3, #12
 8005742:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005744:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005748:	3308      	adds	r3, #8
 800574a:	2b00      	cmp	r3, #0
 800574c:	da00      	bge.n	8005750 <Status_Msg_Extr+0x4f0>
 800574e:	3307      	adds	r3, #7
 8005750:	10db      	asrs	r3, r3, #3
 8005752:	b29a      	uxth	r2, r3
 8005754:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005756:	4413      	add	r3, r2
 8005758:	873b      	strh	r3, [r7, #56]	; 0x38
 800575a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800575c:	3308      	adds	r3, #8
 800575e:	b29b      	uxth	r3, r3
 8005760:	b21b      	sxth	r3, r3
 8005762:	425a      	negs	r2, r3
 8005764:	f003 0307 	and.w	r3, r3, #7
 8005768:	f002 0207 	and.w	r2, r2, #7
 800576c:	bf58      	it	pl
 800576e:	4253      	negpl	r3, r2
 8005770:	b21b      	sxth	r3, r3
 8005772:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005774:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005776:	687a      	ldr	r2, [r7, #4]
 8005778:	441a      	add	r2, r3
 800577a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800577c:	2108      	movs	r1, #8
 800577e:	4618      	mov	r0, r3
 8005780:	f7fa ff48 	bl	8000614 <ExtractBits>
 8005784:	4603      	mov	r3, r0
 8005786:	78ba      	ldrb	r2, [r7, #2]
 8005788:	b2d8      	uxtb	r0, r3
 800578a:	4936      	ldr	r1, [pc, #216]	; (8005864 <Status_Msg_Extr+0x604>)
 800578c:	4613      	mov	r3, r2
 800578e:	005b      	lsls	r3, r3, #1
 8005790:	4413      	add	r3, r2
 8005792:	009b      	lsls	r3, r3, #2
 8005794:	440b      	add	r3, r1
 8005796:	3302      	adds	r3, #2
 8005798:	4602      	mov	r2, r0
 800579a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800579c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057a0:	3308      	adds	r3, #8
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	da00      	bge.n	80057a8 <Status_Msg_Extr+0x548>
 80057a6:	3307      	adds	r3, #7
 80057a8:	10db      	asrs	r3, r3, #3
 80057aa:	b29a      	uxth	r2, r3
 80057ac:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ae:	4413      	add	r3, r2
 80057b0:	873b      	strh	r3, [r7, #56]	; 0x38
 80057b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057b4:	3308      	adds	r3, #8
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	b21b      	sxth	r3, r3
 80057ba:	425a      	negs	r2, r3
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	f002 0207 	and.w	r2, r2, #7
 80057c4:	bf58      	it	pl
 80057c6:	4253      	negpl	r3, r2
 80057c8:	b21b      	sxth	r3, r3
 80057ca:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80057cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057ce:	687a      	ldr	r2, [r7, #4]
 80057d0:	441a      	add	r2, r3
 80057d2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057d4:	2110      	movs	r1, #16
 80057d6:	4618      	mov	r0, r3
 80057d8:	f7fa ff1c 	bl	8000614 <ExtractBits>
 80057dc:	4602      	mov	r2, r0
 80057de:	78bb      	ldrb	r3, [r7, #2]
 80057e0:	b291      	uxth	r1, r2
 80057e2:	4a21      	ldr	r2, [pc, #132]	; (8005868 <Status_Msg_Extr+0x608>)
 80057e4:	011b      	lsls	r3, r3, #4
 80057e6:	4413      	add	r3, r2
 80057e8:	3304      	adds	r3, #4
 80057ea:	460a      	mov	r2, r1
 80057ec:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80057ee:	4924      	ldr	r1, [pc, #144]	; (8005880 <Status_Msg_Extr+0x620>)
 80057f0:	4824      	ldr	r0, [pc, #144]	; (8005884 <Status_Msg_Extr+0x624>)
 80057f2:	f7fa fd25 	bl	8000240 <strcmp>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d10f      	bne.n	800581c <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80057fc:	78bb      	ldrb	r3, [r7, #2]
 80057fe:	4a1a      	ldr	r2, [pc, #104]	; (8005868 <Status_Msg_Extr+0x608>)
 8005800:	011b      	lsls	r3, r3, #4
 8005802:	4413      	add	r3, r2
 8005804:	3304      	adds	r3, #4
 8005806:	881a      	ldrh	r2, [r3, #0]
 8005808:	78bb      	ldrb	r3, [r7, #2]
 800580a:	f042 0208 	orr.w	r2, r2, #8
 800580e:	b291      	uxth	r1, r2
 8005810:	4a15      	ldr	r2, [pc, #84]	; (8005868 <Status_Msg_Extr+0x608>)
 8005812:	011b      	lsls	r3, r3, #4
 8005814:	4413      	add	r3, r2
 8005816:	3304      	adds	r3, #4
 8005818:	460a      	mov	r2, r1
 800581a:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 800581c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005820:	3310      	adds	r3, #16
 8005822:	2b00      	cmp	r3, #0
 8005824:	da00      	bge.n	8005828 <Status_Msg_Extr+0x5c8>
 8005826:	3307      	adds	r3, #7
 8005828:	10db      	asrs	r3, r3, #3
 800582a:	b29a      	uxth	r2, r3
 800582c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800582e:	4413      	add	r3, r2
 8005830:	873b      	strh	r3, [r7, #56]	; 0x38
 8005832:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005834:	3310      	adds	r3, #16
 8005836:	b29b      	uxth	r3, r3
 8005838:	b21b      	sxth	r3, r3
 800583a:	425a      	negs	r2, r3
 800583c:	f003 0307 	and.w	r3, r3, #7
 8005840:	f002 0207 	and.w	r2, r2, #7
 8005844:	bf58      	it	pl
 8005846:	4253      	negpl	r3, r2
 8005848:	b21b      	sxth	r3, r3
 800584a:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 800584c:	78bb      	ldrb	r3, [r7, #2]
 800584e:	4a06      	ldr	r2, [pc, #24]	; (8005868 <Status_Msg_Extr+0x608>)
 8005850:	011b      	lsls	r3, r3, #4
 8005852:	4413      	add	r3, r2
 8005854:	3304      	adds	r3, #4
 8005856:	881b      	ldrh	r3, [r3, #0]
 8005858:	f003 0320 	and.w	r3, r3, #32
 800585c:	2b00      	cmp	r3, #0
 800585e:	f000 812f 	beq.w	8005ac0 <Status_Msg_Extr+0x860>
 8005862:	e011      	b.n	8005888 <Status_Msg_Extr+0x628>
 8005864:	200015fc 	.word	0x200015fc
 8005868:	200011c4 	.word	0x200011c4
 800586c:	20000304 	.word	0x20000304
 8005870:	0802462c 	.word	0x0802462c
 8005874:	08024918 	.word	0x08024918
 8005878:	08024924 	.word	0x08024924
 800587c:	20001674 	.word	0x20001674
 8005880:	08023fe4 	.word	0x08023fe4
 8005884:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005888:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	441a      	add	r2, r3
 800588e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005890:	2108      	movs	r1, #8
 8005892:	4618      	mov	r0, r3
 8005894:	f7fa febe 	bl	8000614 <ExtractBits>
 8005898:	4603      	mov	r3, r0
 800589a:	78ba      	ldrb	r2, [r7, #2]
 800589c:	b2d8      	uxtb	r0, r3
 800589e:	4984      	ldr	r1, [pc, #528]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80058a0:	4613      	mov	r3, r2
 80058a2:	005b      	lsls	r3, r3, #1
 80058a4:	4413      	add	r3, r2
 80058a6:	005b      	lsls	r3, r3, #1
 80058a8:	440b      	add	r3, r1
 80058aa:	3305      	adds	r3, #5
 80058ac:	4602      	mov	r2, r0
 80058ae:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80058b0:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058b4:	3308      	adds	r3, #8
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	da00      	bge.n	80058bc <Status_Msg_Extr+0x65c>
 80058ba:	3307      	adds	r3, #7
 80058bc:	10db      	asrs	r3, r3, #3
 80058be:	b29a      	uxth	r2, r3
 80058c0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058c2:	4413      	add	r3, r2
 80058c4:	873b      	strh	r3, [r7, #56]	; 0x38
 80058c6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058c8:	3308      	adds	r3, #8
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	b21b      	sxth	r3, r3
 80058ce:	425a      	negs	r2, r3
 80058d0:	f003 0307 	and.w	r3, r3, #7
 80058d4:	f002 0207 	and.w	r2, r2, #7
 80058d8:	bf58      	it	pl
 80058da:	4253      	negpl	r3, r2
 80058dc:	b21b      	sxth	r3, r3
 80058de:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058e0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058e2:	687a      	ldr	r2, [r7, #4]
 80058e4:	441a      	add	r2, r3
 80058e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058e8:	2108      	movs	r1, #8
 80058ea:	4618      	mov	r0, r3
 80058ec:	f7fa fe92 	bl	8000614 <ExtractBits>
 80058f0:	4603      	mov	r3, r0
 80058f2:	78ba      	ldrb	r2, [r7, #2]
 80058f4:	b2d8      	uxtb	r0, r3
 80058f6:	496e      	ldr	r1, [pc, #440]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80058f8:	4613      	mov	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	4413      	add	r3, r2
 80058fe:	005b      	lsls	r3, r3, #1
 8005900:	440b      	add	r3, r1
 8005902:	3304      	adds	r3, #4
 8005904:	4602      	mov	r2, r0
 8005906:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005908:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800590c:	3308      	adds	r3, #8
 800590e:	2b00      	cmp	r3, #0
 8005910:	da00      	bge.n	8005914 <Status_Msg_Extr+0x6b4>
 8005912:	3307      	adds	r3, #7
 8005914:	10db      	asrs	r3, r3, #3
 8005916:	b29a      	uxth	r2, r3
 8005918:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800591a:	4413      	add	r3, r2
 800591c:	873b      	strh	r3, [r7, #56]	; 0x38
 800591e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005920:	3308      	adds	r3, #8
 8005922:	b29b      	uxth	r3, r3
 8005924:	b21b      	sxth	r3, r3
 8005926:	425a      	negs	r2, r3
 8005928:	f003 0307 	and.w	r3, r3, #7
 800592c:	f002 0207 	and.w	r2, r2, #7
 8005930:	bf58      	it	pl
 8005932:	4253      	negpl	r3, r2
 8005934:	b21b      	sxth	r3, r3
 8005936:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005938:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	441a      	add	r2, r3
 800593e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005940:	2108      	movs	r1, #8
 8005942:	4618      	mov	r0, r3
 8005944:	f7fa fe66 	bl	8000614 <ExtractBits>
 8005948:	4603      	mov	r3, r0
 800594a:	78ba      	ldrb	r2, [r7, #2]
 800594c:	b2d8      	uxtb	r0, r3
 800594e:	4958      	ldr	r1, [pc, #352]	; (8005ab0 <Status_Msg_Extr+0x850>)
 8005950:	4613      	mov	r3, r2
 8005952:	005b      	lsls	r3, r3, #1
 8005954:	4413      	add	r3, r2
 8005956:	005b      	lsls	r3, r3, #1
 8005958:	440b      	add	r3, r1
 800595a:	3303      	adds	r3, #3
 800595c:	4602      	mov	r2, r0
 800595e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005960:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005964:	3308      	adds	r3, #8
 8005966:	2b00      	cmp	r3, #0
 8005968:	da00      	bge.n	800596c <Status_Msg_Extr+0x70c>
 800596a:	3307      	adds	r3, #7
 800596c:	10db      	asrs	r3, r3, #3
 800596e:	b29a      	uxth	r2, r3
 8005970:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005972:	4413      	add	r3, r2
 8005974:	873b      	strh	r3, [r7, #56]	; 0x38
 8005976:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005978:	3308      	adds	r3, #8
 800597a:	b29b      	uxth	r3, r3
 800597c:	b21b      	sxth	r3, r3
 800597e:	425a      	negs	r2, r3
 8005980:	f003 0307 	and.w	r3, r3, #7
 8005984:	f002 0207 	and.w	r2, r2, #7
 8005988:	bf58      	it	pl
 800598a:	4253      	negpl	r3, r2
 800598c:	b21b      	sxth	r3, r3
 800598e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005990:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005992:	687a      	ldr	r2, [r7, #4]
 8005994:	441a      	add	r2, r3
 8005996:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005998:	2108      	movs	r1, #8
 800599a:	4618      	mov	r0, r3
 800599c:	f7fa fe3a 	bl	8000614 <ExtractBits>
 80059a0:	4603      	mov	r3, r0
 80059a2:	78ba      	ldrb	r2, [r7, #2]
 80059a4:	b2d8      	uxtb	r0, r3
 80059a6:	4942      	ldr	r1, [pc, #264]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80059a8:	4613      	mov	r3, r2
 80059aa:	005b      	lsls	r3, r3, #1
 80059ac:	4413      	add	r3, r2
 80059ae:	005b      	lsls	r3, r3, #1
 80059b0:	440b      	add	r3, r1
 80059b2:	4602      	mov	r2, r0
 80059b4:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059b6:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059ba:	3308      	adds	r3, #8
 80059bc:	2b00      	cmp	r3, #0
 80059be:	da00      	bge.n	80059c2 <Status_Msg_Extr+0x762>
 80059c0:	3307      	adds	r3, #7
 80059c2:	10db      	asrs	r3, r3, #3
 80059c4:	b29a      	uxth	r2, r3
 80059c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059c8:	4413      	add	r3, r2
 80059ca:	873b      	strh	r3, [r7, #56]	; 0x38
 80059cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ce:	3308      	adds	r3, #8
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	b21b      	sxth	r3, r3
 80059d4:	425a      	negs	r2, r3
 80059d6:	f003 0307 	and.w	r3, r3, #7
 80059da:	f002 0207 	and.w	r2, r2, #7
 80059de:	bf58      	it	pl
 80059e0:	4253      	negpl	r3, r2
 80059e2:	b21b      	sxth	r3, r3
 80059e4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059e8:	687a      	ldr	r2, [r7, #4]
 80059ea:	441a      	add	r2, r3
 80059ec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059ee:	2108      	movs	r1, #8
 80059f0:	4618      	mov	r0, r3
 80059f2:	f7fa fe0f 	bl	8000614 <ExtractBits>
 80059f6:	4603      	mov	r3, r0
 80059f8:	78ba      	ldrb	r2, [r7, #2]
 80059fa:	b2d8      	uxtb	r0, r3
 80059fc:	492c      	ldr	r1, [pc, #176]	; (8005ab0 <Status_Msg_Extr+0x850>)
 80059fe:	4613      	mov	r3, r2
 8005a00:	005b      	lsls	r3, r3, #1
 8005a02:	4413      	add	r3, r2
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	440b      	add	r3, r1
 8005a08:	3301      	adds	r3, #1
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a0e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a12:	3308      	adds	r3, #8
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	da00      	bge.n	8005a1a <Status_Msg_Extr+0x7ba>
 8005a18:	3307      	adds	r3, #7
 8005a1a:	10db      	asrs	r3, r3, #3
 8005a1c:	b29a      	uxth	r2, r3
 8005a1e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a20:	4413      	add	r3, r2
 8005a22:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a26:	3308      	adds	r3, #8
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	b21b      	sxth	r3, r3
 8005a2c:	425a      	negs	r2, r3
 8005a2e:	f003 0307 	and.w	r3, r3, #7
 8005a32:	f002 0207 	and.w	r2, r2, #7
 8005a36:	bf58      	it	pl
 8005a38:	4253      	negpl	r3, r2
 8005a3a:	b21b      	sxth	r3, r3
 8005a3c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a3e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	441a      	add	r2, r3
 8005a44:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a46:	2108      	movs	r1, #8
 8005a48:	4618      	mov	r0, r3
 8005a4a:	f7fa fde3 	bl	8000614 <ExtractBits>
 8005a4e:	4603      	mov	r3, r0
 8005a50:	78ba      	ldrb	r2, [r7, #2]
 8005a52:	b2d8      	uxtb	r0, r3
 8005a54:	4916      	ldr	r1, [pc, #88]	; (8005ab0 <Status_Msg_Extr+0x850>)
 8005a56:	4613      	mov	r3, r2
 8005a58:	005b      	lsls	r3, r3, #1
 8005a5a:	4413      	add	r3, r2
 8005a5c:	005b      	lsls	r3, r3, #1
 8005a5e:	440b      	add	r3, r1
 8005a60:	3302      	adds	r3, #2
 8005a62:	4602      	mov	r2, r0
 8005a64:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a66:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a6a:	3308      	adds	r3, #8
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	da00      	bge.n	8005a72 <Status_Msg_Extr+0x812>
 8005a70:	3307      	adds	r3, #7
 8005a72:	10db      	asrs	r3, r3, #3
 8005a74:	b29a      	uxth	r2, r3
 8005a76:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a78:	4413      	add	r3, r2
 8005a7a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a7c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a7e:	3308      	adds	r3, #8
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	b21b      	sxth	r3, r3
 8005a84:	425a      	negs	r2, r3
 8005a86:	f003 0307 	and.w	r3, r3, #7
 8005a8a:	f002 0207 	and.w	r2, r2, #7
 8005a8e:	bf58      	it	pl
 8005a90:	4253      	negpl	r3, r2
 8005a92:	b21b      	sxth	r3, r3
 8005a94:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005a96:	78bb      	ldrb	r3, [r7, #2]
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f003 f919 	bl	8008cd0 <IS_MLK_EIPC_TIME_MATCHING>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d009      	beq.n	8005ab8 <Status_Msg_Extr+0x858>
 8005aa4:	78bb      	ldrb	r3, [r7, #2]
 8005aa6:	4a03      	ldr	r2, [pc, #12]	; (8005ab4 <Status_Msg_Extr+0x854>)
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	54d1      	strb	r1, [r2, r3]
 8005aac:	e008      	b.n	8005ac0 <Status_Msg_Extr+0x860>
 8005aae:	bf00      	nop
 8005ab0:	20001188 	.word	0x20001188
 8005ab4:	200010d8 	.word	0x200010d8
 8005ab8:	78bb      	ldrb	r3, [r7, #2]
 8005aba:	4aa9      	ldr	r2, [pc, #676]	; (8005d60 <Status_Msg_Extr+0xb00>)
 8005abc:	2101      	movs	r1, #1
 8005abe:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005ac0:	78bb      	ldrb	r3, [r7, #2]
 8005ac2:	4aa8      	ldr	r2, [pc, #672]	; (8005d64 <Status_Msg_Extr+0xb04>)
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	4413      	add	r3, r2
 8005ac8:	3304      	adds	r3, #4
 8005aca:	881b      	ldrh	r3, [r3, #0]
 8005acc:	f003 0308 	and.w	r3, r3, #8
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d002      	beq.n	8005ada <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005ada:	787a      	ldrb	r2, [r7, #1]
 8005adc:	78bb      	ldrb	r3, [r7, #2]
 8005ade:	4611      	mov	r1, r2
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f000 f961 	bl	8005da8 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005ae6:	78bb      	ldrb	r3, [r7, #2]
 8005ae8:	499f      	ldr	r1, [pc, #636]	; (8005d68 <Status_Msg_Extr+0xb08>)
 8005aea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005af0:	78bb      	ldrb	r3, [r7, #2]
 8005af2:	499e      	ldr	r1, [pc, #632]	; (8005d6c <Status_Msg_Extr+0xb0c>)
 8005af4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005afa:	78ba      	ldrb	r2, [r7, #2]
 8005afc:	499c      	ldr	r1, [pc, #624]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005afe:	4613      	mov	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	4413      	add	r3, r2
 8005b04:	00db      	lsls	r3, r3, #3
 8005b06:	440b      	add	r3, r1
 8005b08:	3310      	adds	r3, #16
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	78bc      	ldrb	r4, [r7, #2]
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f009 f8fa 	bl	800ed08 <HAL_Elaps_Ticks>
 8005b14:	4602      	mov	r2, r0
 8005b16:	4996      	ldr	r1, [pc, #600]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005b18:	4623      	mov	r3, r4
 8005b1a:	005b      	lsls	r3, r3, #1
 8005b1c:	4423      	add	r3, r4
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	440b      	add	r3, r1
 8005b22:	3310      	adds	r3, #16
 8005b24:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005b26:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d16d      	bne.n	8005c0a <Status_Msg_Extr+0x9aa>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005b2e:	78ba      	ldrb	r2, [r7, #2]
 8005b30:	4613      	mov	r3, r2
 8005b32:	009b      	lsls	r3, r3, #2
 8005b34:	4413      	add	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4a8e      	ldr	r2, [pc, #568]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b3a:	4413      	add	r3, r2
 8005b3c:	3301      	adds	r3, #1
 8005b3e:	2210      	movs	r2, #16
 8005b40:	2100      	movs	r1, #0
 8005b42:	4618      	mov	r0, r3
 8005b44:	f01c fd90 	bl	8022668 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005b48:	78ba      	ldrb	r2, [r7, #2]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	009b      	lsls	r3, r3, #2
 8005b4e:	4413      	add	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4a88      	ldr	r2, [pc, #544]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b54:	1898      	adds	r0, r3, r2
 8005b56:	78ba      	ldrb	r2, [r7, #2]
 8005b58:	4613      	mov	r3, r2
 8005b5a:	009b      	lsls	r3, r3, #2
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4a85      	ldr	r2, [pc, #532]	; (8005d78 <Status_Msg_Extr+0xb18>)
 8005b62:	4413      	add	r3, r2
 8005b64:	2214      	movs	r2, #20
 8005b66:	4619      	mov	r1, r3
 8005b68:	f01c fd56 	bl	8022618 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005b6c:	78bb      	ldrb	r3, [r7, #2]
 8005b6e:	4a83      	ldr	r2, [pc, #524]	; (8005d7c <Status_Msg_Extr+0xb1c>)
 8005b70:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b74:	78ba      	ldrb	r2, [r7, #2]
 8005b76:	487f      	ldr	r0, [pc, #508]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	4403      	add	r3, r0
 8005b82:	3312      	adds	r3, #18
 8005b84:	881b      	ldrh	r3, [r3, #0]
 8005b86:	4299      	cmp	r1, r3
 8005b88:	d03f      	beq.n	8005c0a <Status_Msg_Extr+0x9aa>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005b8a:	78ba      	ldrb	r2, [r7, #2]
 8005b8c:	78b9      	ldrb	r1, [r7, #2]
 8005b8e:	4879      	ldr	r0, [pc, #484]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005b90:	4613      	mov	r3, r2
 8005b92:	009b      	lsls	r3, r3, #2
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	4403      	add	r3, r0
 8005b9a:	3312      	adds	r3, #18
 8005b9c:	881a      	ldrh	r2, [r3, #0]
 8005b9e:	4b77      	ldr	r3, [pc, #476]	; (8005d7c <Status_Msg_Extr+0xb1c>)
 8005ba0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005ba4:	2214      	movs	r2, #20
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	4875      	ldr	r0, [pc, #468]	; (8005d80 <Status_Msg_Extr+0xb20>)
 8005baa:	f01c fd5d 	bl	8022668 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005bae:	78ba      	ldrb	r2, [r7, #2]
 8005bb0:	4613      	mov	r3, r2
 8005bb2:	009b      	lsls	r3, r3, #2
 8005bb4:	4413      	add	r3, r2
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	4a6e      	ldr	r2, [pc, #440]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005bba:	4413      	add	r3, r2
 8005bbc:	2214      	movs	r2, #20
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	486f      	ldr	r0, [pc, #444]	; (8005d80 <Status_Msg_Extr+0xb20>)
 8005bc2:	f01c fd29 	bl	8022618 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8005bc6:	f240 2007 	movw	r0, #519	; 0x207
 8005bca:	f009 fe51 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005bce:	78bb      	ldrb	r3, [r7, #2]
 8005bd0:	4a6c      	ldr	r2, [pc, #432]	; (8005d84 <Status_Msg_Extr+0xb24>)
 8005bd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d117      	bne.n	8005c0a <Status_Msg_Extr+0x9aa>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005bda:	78bb      	ldrb	r3, [r7, #2]
 8005bdc:	011b      	lsls	r3, r3, #4
 8005bde:	4a6a      	ldr	r2, [pc, #424]	; (8005d88 <Status_Msg_Extr+0xb28>)
 8005be0:	4413      	add	r3, r2
 8005be2:	1c98      	adds	r0, r3, #2
 8005be4:	78ba      	ldrb	r2, [r7, #2]
 8005be6:	4613      	mov	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	4413      	add	r3, r2
 8005bec:	009b      	lsls	r3, r3, #2
 8005bee:	4a61      	ldr	r2, [pc, #388]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005bf0:	4413      	add	r3, r2
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	2210      	movs	r2, #16
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	f01c fd0e 	bl	8022618 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8005bfc:	f240 1019 	movw	r0, #281	; 0x119
 8005c00:	f009 fe36 	bl	800f870 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8005c04:	4a61      	ldr	r2, [pc, #388]	; (8005d8c <Status_Msg_Extr+0xb2c>)
 8005c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005c08:	6013      	str	r3, [r2, #0]
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005c0a:	78b9      	ldrb	r1, [r7, #2]
 8005c0c:	78ba      	ldrb	r2, [r7, #2]
 8005c0e:	4859      	ldr	r0, [pc, #356]	; (8005d74 <Status_Msg_Extr+0xb14>)
 8005c10:	460b      	mov	r3, r1
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	440b      	add	r3, r1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4403      	add	r3, r0
 8005c1a:	3312      	adds	r3, #18
 8005c1c:	8818      	ldrh	r0, [r3, #0]
 8005c1e:	4954      	ldr	r1, [pc, #336]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c20:	4613      	mov	r3, r2
 8005c22:	005b      	lsls	r3, r3, #1
 8005c24:	4413      	add	r3, r2
 8005c26:	00db      	lsls	r3, r3, #3
 8005c28:	440b      	add	r3, r1
 8005c2a:	3306      	adds	r3, #6
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005c30:	78ba      	ldrb	r2, [r7, #2]
 8005c32:	494f      	ldr	r1, [pc, #316]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c34:	4613      	mov	r3, r2
 8005c36:	005b      	lsls	r3, r3, #1
 8005c38:	4413      	add	r3, r2
 8005c3a:	00db      	lsls	r3, r3, #3
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3314      	adds	r3, #20
 8005c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c42:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005c44:	78ba      	ldrb	r2, [r7, #2]
 8005c46:	494a      	ldr	r1, [pc, #296]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c48:	4613      	mov	r3, r2
 8005c4a:	005b      	lsls	r3, r3, #1
 8005c4c:	4413      	add	r3, r2
 8005c4e:	00db      	lsls	r3, r3, #3
 8005c50:	440b      	add	r3, r1
 8005c52:	3305      	adds	r3, #5
 8005c54:	2204      	movs	r2, #4
 8005c56:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005c58:	78ba      	ldrb	r2, [r7, #2]
 8005c5a:	4945      	ldr	r1, [pc, #276]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	005b      	lsls	r3, r3, #1
 8005c60:	4413      	add	r3, r2
 8005c62:	00db      	lsls	r3, r3, #3
 8005c64:	440b      	add	r3, r1
 8005c66:	78ba      	ldrb	r2, [r7, #2]
 8005c68:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005c6a:	78ba      	ldrb	r2, [r7, #2]
 8005c6c:	4940      	ldr	r1, [pc, #256]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c6e:	4613      	mov	r3, r2
 8005c70:	005b      	lsls	r3, r3, #1
 8005c72:	4413      	add	r3, r2
 8005c74:	00db      	lsls	r3, r3, #3
 8005c76:	440b      	add	r3, r1
 8005c78:	3301      	adds	r3, #1
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005c7e:	78ba      	ldrb	r2, [r7, #2]
 8005c80:	493b      	ldr	r1, [pc, #236]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005c82:	4613      	mov	r3, r2
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	4413      	add	r3, r2
 8005c88:	00db      	lsls	r3, r3, #3
 8005c8a:	440b      	add	r3, r1
 8005c8c:	3302      	adds	r3, #2
 8005c8e:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005c92:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005c94:	2218      	movs	r2, #24
 8005c96:	2100      	movs	r1, #0
 8005c98:	483d      	ldr	r0, [pc, #244]	; (8005d90 <Status_Msg_Extr+0xb30>)
 8005c9a:	f01c fce5 	bl	8022668 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005c9e:	78ba      	ldrb	r2, [r7, #2]
 8005ca0:	4613      	mov	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	4413      	add	r3, r2
 8005ca6:	00db      	lsls	r3, r3, #3
 8005ca8:	4a31      	ldr	r2, [pc, #196]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005caa:	4413      	add	r3, r2
 8005cac:	2218      	movs	r2, #24
 8005cae:	4619      	mov	r1, r3
 8005cb0:	4837      	ldr	r0, [pc, #220]	; (8005d90 <Status_Msg_Extr+0xb30>)
 8005cb2:	f01c fcb1 	bl	8022618 <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8005cb6:	f240 2001 	movw	r0, #513	; 0x201
 8005cba:	f009 fdd9 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005cbe:	78ba      	ldrb	r2, [r7, #2]
 8005cc0:	492b      	ldr	r1, [pc, #172]	; (8005d70 <Status_Msg_Extr+0xb10>)
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	005b      	lsls	r3, r3, #1
 8005cc6:	4413      	add	r3, r2
 8005cc8:	00db      	lsls	r3, r3, #3
 8005cca:	440b      	add	r3, r1
 8005ccc:	3301      	adds	r3, #1
 8005cce:	2200      	movs	r2, #0
 8005cd0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005cd2:	78bb      	ldrb	r3, [r7, #2]
 8005cd4:	492f      	ldr	r1, [pc, #188]	; (8005d94 <Status_Msg_Extr+0xb34>)
 8005cd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005cdc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d11d      	bne.n	8005d20 <Status_Msg_Extr+0xac0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005ce4:	78bb      	ldrb	r3, [r7, #2]
 8005ce6:	492c      	ldr	r1, [pc, #176]	; (8005d98 <Status_Msg_Extr+0xb38>)
 8005ce8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005cee:	78ba      	ldrb	r2, [r7, #2]
 8005cf0:	492a      	ldr	r1, [pc, #168]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	005b      	lsls	r3, r3, #1
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	440b      	add	r3, r1
 8005cfc:	3304      	adds	r3, #4
 8005cfe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d00:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005d02:	78ba      	ldrb	r2, [r7, #2]
 8005d04:	4925      	ldr	r1, [pc, #148]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d06:	4613      	mov	r3, r2
 8005d08:	005b      	lsls	r3, r3, #1
 8005d0a:	4413      	add	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	440b      	add	r3, r1
 8005d10:	3301      	adds	r3, #1
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005d16:	78bb      	ldrb	r3, [r7, #2]
 8005d18:	4a21      	ldr	r2, [pc, #132]	; (8005da0 <Status_Msg_Extr+0xb40>)
 8005d1a:	2101      	movs	r1, #1
 8005d1c:	54d1      	strb	r1, [r2, r3]
 8005d1e:	e017      	b.n	8005d50 <Status_Msg_Extr+0xaf0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005d20:	78bb      	ldrb	r3, [r7, #2]
 8005d22:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <Status_Msg_Extr+0xb40>)
 8005d24:	2100      	movs	r1, #0
 8005d26:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005d28:	78ba      	ldrb	r2, [r7, #2]
 8005d2a:	491c      	ldr	r1, [pc, #112]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	005b      	lsls	r3, r3, #1
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3308      	adds	r3, #8
 8005d38:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005d3a:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005d3c:	78ba      	ldrb	r2, [r7, #2]
 8005d3e:	4917      	ldr	r1, [pc, #92]	; (8005d9c <Status_Msg_Extr+0xb3c>)
 8005d40:	4613      	mov	r3, r2
 8005d42:	005b      	lsls	r3, r3, #1
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005d50:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d54:	4813      	ldr	r0, [pc, #76]	; (8005da4 <Status_Msg_Extr+0xb44>)
 8005d56:	f012 fa4e 	bl	80181f6 <HAL_GPIO_TogglePin>

}
 8005d5a:	3754      	adds	r7, #84	; 0x54
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd90      	pop	{r4, r7, pc}
 8005d60:	200010d8 	.word	0x200010d8
 8005d64:	200011c4 	.word	0x200011c4
 8005d68:	20000fa4 	.word	0x20000fa4
 8005d6c:	20000fcc 	.word	0x20000fcc
 8005d70:	20001674 	.word	0x20001674
 8005d74:	200021c0 	.word	0x200021c0
 8005d78:	200020f8 	.word	0x200020f8
 8005d7c:	20000f00 	.word	0x20000f00
 8005d80:	20002350 	.word	0x20002350
 8005d84:	20000ec4 	.word	0x20000ec4
 8005d88:	200010e4 	.word	0x200010e4
 8005d8c:	20000e70 	.word	0x20000e70
 8005d90:	20001854 	.word	0x20001854
 8005d94:	20000e44 	.word	0x20000e44
 8005d98:	20000f14 	.word	0x20000f14
 8005d9c:	20002008 	.word	0x20002008
 8005da0:	20000f64 	.word	0x20000f64
 8005da4:	40021c00 	.word	0x40021c00

08005da8 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005da8:	b590      	push	{r4, r7, lr}
 8005daa:	b0a5      	sub	sp, #148	; 0x94
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	460a      	mov	r2, r1
 8005db2:	71fb      	strb	r3, [r7, #7]
 8005db4:	4613      	mov	r3, r2
 8005db6:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005db8:	2300      	movs	r3, #0
 8005dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dbc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005dc0:	2238      	movs	r2, #56	; 0x38
 8005dc2:	2100      	movs	r1, #0
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f01c fc4f 	bl	8022668 <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005dca:	2300      	movs	r3, #0
 8005dcc:	60fb      	str	r3, [r7, #12]
 8005dce:	f107 0310 	add.w	r3, r7, #16
 8005dd2:	2238      	movs	r2, #56	; 0x38
 8005dd4:	2100      	movs	r1, #0
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f01c fc46 	bl	8022668 <memset>
	uint8_t uc_index = 0;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005de2:	2300      	movs	r3, #0
 8005de4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005de8:	2300      	movs	r3, #0
 8005dea:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005dee:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005df2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005df6:	441a      	add	r2, r3
 8005df8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005dfc:	23f4      	movs	r3, #244	; 0xf4
 8005dfe:	2108      	movs	r1, #8
 8005e00:	f7fa fc94 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005e04:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e08:	3308      	adds	r3, #8
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	da00      	bge.n	8005e10 <Send_Status_Message+0x68>
 8005e0e:	3307      	adds	r3, #7
 8005e10:	10db      	asrs	r3, r3, #3
 8005e12:	b29a      	uxth	r2, r3
 8005e14:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e18:	4413      	add	r3, r2
 8005e1a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e1e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e22:	3308      	adds	r3, #8
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	b21b      	sxth	r3, r3
 8005e28:	425a      	negs	r2, r3
 8005e2a:	f003 0307 	and.w	r3, r3, #7
 8005e2e:	f002 0207 	and.w	r2, r2, #7
 8005e32:	bf58      	it	pl
 8005e34:	4253      	negpl	r3, r2
 8005e36:	b21b      	sxth	r3, r3
 8005e38:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005e3c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e40:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e44:	441a      	add	r2, r3
 8005e46:	79fb      	ldrb	r3, [r7, #7]
 8005e48:	49bc      	ldr	r1, [pc, #752]	; (800613c <Send_Status_Message+0x394>)
 8005e4a:	3366      	adds	r3, #102	; 0x66
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	440b      	add	r3, r1
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e56:	2110      	movs	r1, #16
 8005e58:	f7fa fc68 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e5c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e60:	3310      	adds	r3, #16
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	da00      	bge.n	8005e68 <Send_Status_Message+0xc0>
 8005e66:	3307      	adds	r3, #7
 8005e68:	10db      	asrs	r3, r3, #3
 8005e6a:	b29a      	uxth	r2, r3
 8005e6c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e70:	4413      	add	r3, r2
 8005e72:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e76:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e7a:	3310      	adds	r3, #16
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	b21b      	sxth	r3, r3
 8005e80:	425a      	negs	r2, r3
 8005e82:	f003 0307 	and.w	r3, r3, #7
 8005e86:	f002 0207 	and.w	r2, r2, #7
 8005e8a:	bf58      	it	pl
 8005e8c:	4253      	negpl	r3, r2
 8005e8e:	b21b      	sxth	r3, r3
 8005e90:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005e94:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e98:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e9c:	441a      	add	r2, r3
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	49a6      	ldr	r1, [pc, #664]	; (800613c <Send_Status_Message+0x394>)
 8005ea2:	3370      	adds	r3, #112	; 0x70
 8005ea4:	009b      	lsls	r3, r3, #2
 8005ea6:	440b      	add	r3, r1
 8005ea8:	685b      	ldr	r3, [r3, #4]
 8005eaa:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005eae:	2110      	movs	r1, #16
 8005eb0:	f7fa fc3c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005eb4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005eb8:	3310      	adds	r3, #16
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	da00      	bge.n	8005ec0 <Send_Status_Message+0x118>
 8005ebe:	3307      	adds	r3, #7
 8005ec0:	10db      	asrs	r3, r3, #3
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005ec8:	4413      	add	r3, r2
 8005eca:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005ece:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005ed2:	3310      	adds	r3, #16
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	b21b      	sxth	r3, r3
 8005ed8:	425a      	negs	r2, r3
 8005eda:	f003 0307 	and.w	r3, r3, #7
 8005ede:	f002 0207 	and.w	r2, r2, #7
 8005ee2:	bf58      	it	pl
 8005ee4:	4253      	negpl	r3, r2
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005eec:	4b94      	ldr	r3, [pc, #592]	; (8006140 <Send_Status_Message+0x398>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	089b      	lsrs	r3, r3, #2
 8005ef2:	f003 0301 	and.w	r3, r3, #1
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d035      	beq.n	8005f66 <Send_Status_Message+0x1be>
 8005efa:	4b91      	ldr	r3, [pc, #580]	; (8006140 <Send_Status_Message+0x398>)
 8005efc:	791b      	ldrb	r3, [r3, #4]
 8005efe:	79fa      	ldrb	r2, [r7, #7]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d130      	bne.n	8005f66 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005f04:	2300      	movs	r3, #0
 8005f06:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005f0a:	488e      	ldr	r0, [pc, #568]	; (8006144 <Send_Status_Message+0x39c>)
 8005f0c:	f014 f93c 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8005f10:	4602      	mov	r2, r0
 8005f12:	4b8d      	ldr	r3, [pc, #564]	; (8006148 <Send_Status_Message+0x3a0>)
 8005f14:	fba3 1302 	umull	r1, r3, r3, r2
 8005f18:	099b      	lsrs	r3, r3, #6
 8005f1a:	21c8      	movs	r1, #200	; 0xc8
 8005f1c:	fb01 f303 	mul.w	r3, r1, r3
 8005f20:	1ad3      	subs	r3, r2, r3
 8005f22:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005f26:	4889      	ldr	r0, [pc, #548]	; (800614c <Send_Status_Message+0x3a4>)
 8005f28:	f01c fd22 	bl	8022970 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005f2c:	79fb      	ldrb	r3, [r7, #7]
 8005f2e:	4a88      	ldr	r2, [pc, #544]	; (8006150 <Send_Status_Message+0x3a8>)
 8005f30:	011b      	lsls	r3, r3, #4
 8005f32:	4413      	add	r3, r2
 8005f34:	3301      	adds	r3, #1
 8005f36:	781b      	ldrb	r3, [r3, #0]
 8005f38:	4619      	mov	r1, r3
 8005f3a:	4886      	ldr	r0, [pc, #536]	; (8006154 <Send_Status_Message+0x3ac>)
 8005f3c:	f01c fc7c 	bl	8022838 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005f40:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f44:	4619      	mov	r1, r3
 8005f46:	4884      	ldr	r0, [pc, #528]	; (8006158 <Send_Status_Message+0x3b0>)
 8005f48:	f01c fc76 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005f4c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f50:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f54:	441a      	add	r2, r3
 8005f56:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f5a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f5e:	2108      	movs	r1, #8
 8005f60:	f7fa fbe4 	bl	800072c <InsertBits>
	{
 8005f64:	e00f      	b.n	8005f86 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8005f66:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f6a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f6e:	441a      	add	r2, r3
 8005f70:	79fb      	ldrb	r3, [r7, #7]
 8005f72:	4977      	ldr	r1, [pc, #476]	; (8006150 <Send_Status_Message+0x3a8>)
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	440b      	add	r3, r1
 8005f78:	3301      	adds	r3, #1
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f80:	2108      	movs	r1, #8
 8005f82:	f7fa fbd3 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8005f86:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f8a:	3308      	adds	r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	da00      	bge.n	8005f92 <Send_Status_Message+0x1ea>
 8005f90:	3307      	adds	r3, #7
 8005f92:	10db      	asrs	r3, r3, #3
 8005f94:	b29a      	uxth	r2, r3
 8005f96:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005fa0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005fa4:	3308      	adds	r3, #8
 8005fa6:	b29b      	uxth	r3, r3
 8005fa8:	b21b      	sxth	r3, r3
 8005faa:	425a      	negs	r2, r3
 8005fac:	f003 0307 	and.w	r3, r3, #7
 8005fb0:	f002 0207 	and.w	r2, r2, #7
 8005fb4:	bf58      	it	pl
 8005fb6:	4253      	negpl	r3, r2
 8005fb8:	b21b      	sxth	r3, r3
 8005fba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005fbe:	4b60      	ldr	r3, [pc, #384]	; (8006140 <Send_Status_Message+0x398>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	08db      	lsrs	r3, r3, #3
 8005fc4:	f003 0301 	and.w	r3, r3, #1
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d038      	beq.n	800603e <Send_Status_Message+0x296>
 8005fcc:	4b5c      	ldr	r3, [pc, #368]	; (8006140 <Send_Status_Message+0x398>)
 8005fce:	791b      	ldrb	r3, [r3, #4]
 8005fd0:	79fa      	ldrb	r2, [r7, #7]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d133      	bne.n	800603e <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8005fdc:	4859      	ldr	r0, [pc, #356]	; (8006144 <Send_Status_Message+0x39c>)
 8005fde:	f014 f8d3 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	4b58      	ldr	r3, [pc, #352]	; (8006148 <Send_Status_Message+0x3a0>)
 8005fe6:	fba3 1302 	umull	r1, r3, r3, r2
 8005fea:	099b      	lsrs	r3, r3, #6
 8005fec:	21c8      	movs	r1, #200	; 0xc8
 8005fee:	fb01 f303 	mul.w	r3, r1, r3
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8005ff8:	4858      	ldr	r0, [pc, #352]	; (800615c <Send_Status_Message+0x3b4>)
 8005ffa:	f01c fcb9 	bl	8022970 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8005ffe:	79fb      	ldrb	r3, [r7, #7]
 8006000:	4a53      	ldr	r2, [pc, #332]	; (8006150 <Send_Status_Message+0x3a8>)
 8006002:	011b      	lsls	r3, r3, #4
 8006004:	4413      	add	r3, r2
 8006006:	3302      	adds	r3, #2
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	4619      	mov	r1, r3
 800600c:	4854      	ldr	r0, [pc, #336]	; (8006160 <Send_Status_Message+0x3b8>)
 800600e:	f01c fc13 	bl	8022838 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8006012:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8006016:	4619      	mov	r1, r3
 8006018:	4852      	ldr	r0, [pc, #328]	; (8006164 <Send_Status_Message+0x3bc>)
 800601a:	f01c fc0d 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800601e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006022:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006026:	441a      	add	r2, r3
 8006028:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 800602c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006030:	2108      	movs	r1, #8
 8006032:	f7fa fb7b 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 8006036:	4b4c      	ldr	r3, [pc, #304]	; (8006168 <Send_Status_Message+0x3c0>)
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]
	{
 800603c:	e020      	b.n	8006080 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 800603e:	4b4a      	ldr	r3, [pc, #296]	; (8006168 <Send_Status_Message+0x3c0>)
 8006040:	2200      	movs	r2, #0
 8006042:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006044:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006048:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800604c:	18d1      	adds	r1, r2, r3
 800604e:	79fb      	ldrb	r3, [r7, #7]
 8006050:	483f      	ldr	r0, [pc, #252]	; (8006150 <Send_Status_Message+0x3a8>)
 8006052:	011a      	lsls	r2, r3, #4
 8006054:	4402      	add	r2, r0
 8006056:	3202      	adds	r2, #2
 8006058:	7812      	ldrb	r2, [r2, #0]
 800605a:	3201      	adds	r2, #1
 800605c:	b2d4      	uxtb	r4, r2
 800605e:	483c      	ldr	r0, [pc, #240]	; (8006150 <Send_Status_Message+0x3a8>)
 8006060:	011a      	lsls	r2, r3, #4
 8006062:	4402      	add	r2, r0
 8006064:	3202      	adds	r2, #2
 8006066:	4620      	mov	r0, r4
 8006068:	7010      	strb	r0, [r2, #0]
 800606a:	4a39      	ldr	r2, [pc, #228]	; (8006150 <Send_Status_Message+0x3a8>)
 800606c:	011b      	lsls	r3, r3, #4
 800606e:	4413      	add	r3, r2
 8006070:	3302      	adds	r3, #2
 8006072:	781b      	ldrb	r3, [r3, #0]
 8006074:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006078:	460a      	mov	r2, r1
 800607a:	2108      	movs	r1, #8
 800607c:	f7fa fb56 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006080:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006084:	3308      	adds	r3, #8
 8006086:	2b00      	cmp	r3, #0
 8006088:	da00      	bge.n	800608c <Send_Status_Message+0x2e4>
 800608a:	3307      	adds	r3, #7
 800608c:	10db      	asrs	r3, r3, #3
 800608e:	b29a      	uxth	r2, r3
 8006090:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006094:	4413      	add	r3, r2
 8006096:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800609a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800609e:	3308      	adds	r3, #8
 80060a0:	b29b      	uxth	r3, r3
 80060a2:	b21b      	sxth	r3, r3
 80060a4:	425a      	negs	r2, r3
 80060a6:	f003 0307 	and.w	r3, r3, #7
 80060aa:	f002 0207 	and.w	r2, r2, #7
 80060ae:	bf58      	it	pl
 80060b0:	4253      	negpl	r3, r2
 80060b2:	b21b      	sxth	r3, r3
 80060b4:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 80060b8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060bc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060c0:	441a      	add	r2, r3
 80060c2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060c6:	2304      	movs	r3, #4
 80060c8:	2108      	movs	r1, #8
 80060ca:	f7fa fb2f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80060ce:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80060d2:	3308      	adds	r3, #8
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	da00      	bge.n	80060da <Send_Status_Message+0x332>
 80060d8:	3307      	adds	r3, #7
 80060da:	10db      	asrs	r3, r3, #3
 80060dc:	b29a      	uxth	r2, r3
 80060de:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060e2:	4413      	add	r3, r2
 80060e4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060e8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060ec:	3308      	adds	r3, #8
 80060ee:	b29b      	uxth	r3, r3
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	425a      	negs	r2, r3
 80060f4:	f003 0307 	and.w	r3, r3, #7
 80060f8:	f002 0207 	and.w	r2, r2, #7
 80060fc:	bf58      	it	pl
 80060fe:	4253      	negpl	r3, r2
 8006100:	b21b      	sxth	r3, r3
 8006102:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 8006106:	79fb      	ldrb	r3, [r7, #7]
 8006108:	4a11      	ldr	r2, [pc, #68]	; (8006150 <Send_Status_Message+0x3a8>)
 800610a:	011b      	lsls	r3, r3, #4
 800610c:	4413      	add	r3, r2
 800610e:	3304      	adds	r3, #4
 8006110:	881b      	ldrh	r3, [r3, #0]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d052      	beq.n	80061c0 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	4a13      	ldr	r2, [pc, #76]	; (800616c <Send_Status_Message+0x3c4>)
 800611e:	5cd3      	ldrb	r3, [r2, r3]
 8006120:	2b01      	cmp	r3, #1
 8006122:	d125      	bne.n	8006170 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 8006124:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006128:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800612c:	441a      	add	r2, r3
 800612e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006132:	2368      	movs	r3, #104	; 0x68
 8006134:	2110      	movs	r1, #16
 8006136:	f7fa faf9 	bl	800072c <InsertBits>
 800613a:	e024      	b.n	8006186 <Send_Status_Message+0x3de>
 800613c:	20000304 	.word	0x20000304
 8006140:	20001a1c 	.word	0x20001a1c
 8006144:	2000a05c 	.word	0x2000a05c
 8006148:	51eb851f 	.word	0x51eb851f
 800614c:	0802438c 	.word	0x0802438c
 8006150:	200011c4 	.word	0x200011c4
 8006154:	08024930 	.word	0x08024930
 8006158:	08024950 	.word	0x08024950
 800615c:	080243f0 	.word	0x080243f0
 8006160:	08024970 	.word	0x08024970
 8006164:	08024990 	.word	0x08024990
 8006168:	20000e39 	.word	0x20000e39
 800616c:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006170:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006174:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006178:	441a      	add	r2, r3
 800617a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800617e:	2328      	movs	r3, #40	; 0x28
 8006180:	2110      	movs	r1, #16
 8006182:	f7fa fad3 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006186:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800618a:	3310      	adds	r3, #16
 800618c:	2b00      	cmp	r3, #0
 800618e:	da00      	bge.n	8006192 <Send_Status_Message+0x3ea>
 8006190:	3307      	adds	r3, #7
 8006192:	10db      	asrs	r3, r3, #3
 8006194:	b29a      	uxth	r2, r3
 8006196:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800619a:	4413      	add	r3, r2
 800619c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061a4:	3310      	adds	r3, #16
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	b21b      	sxth	r3, r3
 80061aa:	425a      	negs	r2, r3
 80061ac:	f003 0307 	and.w	r3, r3, #7
 80061b0:	f002 0207 	and.w	r2, r2, #7
 80061b4:	bf58      	it	pl
 80061b6:	4253      	negpl	r3, r2
 80061b8:	b21b      	sxth	r3, r3
 80061ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80061be:	e03a      	b.n	8006236 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80061c0:	79fb      	ldrb	r3, [r7, #7]
 80061c2:	4a08      	ldr	r2, [pc, #32]	; (80061e4 <Send_Status_Message+0x43c>)
 80061c4:	5cd3      	ldrb	r3, [r2, r3]
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d10e      	bne.n	80061e8 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 80061ca:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ce:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061d2:	441a      	add	r2, r3
 80061d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061d8:	2364      	movs	r3, #100	; 0x64
 80061da:	2110      	movs	r1, #16
 80061dc:	f7fa faa6 	bl	800072c <InsertBits>
 80061e0:	e00d      	b.n	80061fe <Send_Status_Message+0x456>
 80061e2:	bf00      	nop
 80061e4:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80061e8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ec:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061f0:	441a      	add	r2, r3
 80061f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061f6:	2324      	movs	r3, #36	; 0x24
 80061f8:	2110      	movs	r1, #16
 80061fa:	f7fa fa97 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80061fe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006202:	3310      	adds	r3, #16
 8006204:	2b00      	cmp	r3, #0
 8006206:	da00      	bge.n	800620a <Send_Status_Message+0x462>
 8006208:	3307      	adds	r3, #7
 800620a:	10db      	asrs	r3, r3, #3
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006212:	4413      	add	r3, r2
 8006214:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006218:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800621c:	3310      	adds	r3, #16
 800621e:	b29b      	uxth	r3, r3
 8006220:	b21b      	sxth	r3, r3
 8006222:	425a      	negs	r2, r3
 8006224:	f003 0307 	and.w	r3, r3, #7
 8006228:	f002 0207 	and.w	r2, r2, #7
 800622c:	bf58      	it	pl
 800622e:	4253      	negpl	r3, r2
 8006230:	b21b      	sxth	r3, r3
 8006232:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 8006236:	79fb      	ldrb	r3, [r7, #7]
 8006238:	4ac6      	ldr	r2, [pc, #792]	; (8006554 <Send_Status_Message+0x7ac>)
 800623a:	011b      	lsls	r3, r3, #4
 800623c:	4413      	add	r3, r2
 800623e:	3304      	adds	r3, #4
 8006240:	881b      	ldrh	r3, [r3, #0]
 8006242:	095b      	lsrs	r3, r3, #5
 8006244:	b29b      	uxth	r3, r3
 8006246:	f003 0301 	and.w	r3, r3, #1
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8139 	beq.w	80064c2 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006250:	79fb      	ldrb	r3, [r7, #7]
 8006252:	4ac1      	ldr	r2, [pc, #772]	; (8006558 <Send_Status_Message+0x7b0>)
 8006254:	5cd3      	ldrb	r3, [r2, r3]
 8006256:	2b01      	cmp	r3, #1
 8006258:	d114      	bne.n	8006284 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800625a:	f005 f8db 	bl	800b414 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800625e:	79fa      	ldrb	r2, [r7, #7]
 8006260:	4613      	mov	r3, r2
 8006262:	005b      	lsls	r3, r3, #1
 8006264:	4413      	add	r3, r2
 8006266:	005b      	lsls	r3, r3, #1
 8006268:	4abc      	ldr	r2, [pc, #752]	; (800655c <Send_Status_Message+0x7b4>)
 800626a:	4413      	add	r3, r2
 800626c:	4abc      	ldr	r2, [pc, #752]	; (8006560 <Send_Status_Message+0x7b8>)
 800626e:	6811      	ldr	r1, [r2, #0]
 8006270:	6019      	str	r1, [r3, #0]
 8006272:	8892      	ldrh	r2, [r2, #4]
 8006274:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006276:	48bb      	ldr	r0, [pc, #748]	; (8006564 <Send_Status_Message+0x7bc>)
 8006278:	f01c fb7a 	bl	8022970 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 800627c:	79fb      	ldrb	r3, [r7, #7]
 800627e:	4ab6      	ldr	r2, [pc, #728]	; (8006558 <Send_Status_Message+0x7b0>)
 8006280:	2100      	movs	r1, #0
 8006282:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006284:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006288:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800628c:	18d1      	adds	r1, r2, r3
 800628e:	79fa      	ldrb	r2, [r7, #7]
 8006290:	48b2      	ldr	r0, [pc, #712]	; (800655c <Send_Status_Message+0x7b4>)
 8006292:	4613      	mov	r3, r2
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	4413      	add	r3, r2
 8006298:	005b      	lsls	r3, r3, #1
 800629a:	4403      	add	r3, r0
 800629c:	3305      	adds	r3, #5
 800629e:	781b      	ldrb	r3, [r3, #0]
 80062a0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062a4:	460a      	mov	r2, r1
 80062a6:	2108      	movs	r1, #8
 80062a8:	f7fa fa40 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80062ac:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062b0:	3308      	adds	r3, #8
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da00      	bge.n	80062b8 <Send_Status_Message+0x510>
 80062b6:	3307      	adds	r3, #7
 80062b8:	10db      	asrs	r3, r3, #3
 80062ba:	b29a      	uxth	r2, r3
 80062bc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062c0:	4413      	add	r3, r2
 80062c2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062c6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062ca:	3308      	adds	r3, #8
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	425a      	negs	r2, r3
 80062d2:	f003 0307 	and.w	r3, r3, #7
 80062d6:	f002 0207 	and.w	r2, r2, #7
 80062da:	bf58      	it	pl
 80062dc:	4253      	negpl	r3, r2
 80062de:	b21b      	sxth	r3, r3
 80062e0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80062e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062ec:	18d1      	adds	r1, r2, r3
 80062ee:	79fa      	ldrb	r2, [r7, #7]
 80062f0:	489a      	ldr	r0, [pc, #616]	; (800655c <Send_Status_Message+0x7b4>)
 80062f2:	4613      	mov	r3, r2
 80062f4:	005b      	lsls	r3, r3, #1
 80062f6:	4413      	add	r3, r2
 80062f8:	005b      	lsls	r3, r3, #1
 80062fa:	4403      	add	r3, r0
 80062fc:	3304      	adds	r3, #4
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006304:	460a      	mov	r2, r1
 8006306:	2108      	movs	r1, #8
 8006308:	f7fa fa10 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800630c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006310:	3308      	adds	r3, #8
 8006312:	2b00      	cmp	r3, #0
 8006314:	da00      	bge.n	8006318 <Send_Status_Message+0x570>
 8006316:	3307      	adds	r3, #7
 8006318:	10db      	asrs	r3, r3, #3
 800631a:	b29a      	uxth	r2, r3
 800631c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006320:	4413      	add	r3, r2
 8006322:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006326:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800632a:	3308      	adds	r3, #8
 800632c:	b29b      	uxth	r3, r3
 800632e:	b21b      	sxth	r3, r3
 8006330:	425a      	negs	r2, r3
 8006332:	f003 0307 	and.w	r3, r3, #7
 8006336:	f002 0207 	and.w	r2, r2, #7
 800633a:	bf58      	it	pl
 800633c:	4253      	negpl	r3, r2
 800633e:	b21b      	sxth	r3, r3
 8006340:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006344:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006348:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800634c:	18d1      	adds	r1, r2, r3
 800634e:	79fa      	ldrb	r2, [r7, #7]
 8006350:	4882      	ldr	r0, [pc, #520]	; (800655c <Send_Status_Message+0x7b4>)
 8006352:	4613      	mov	r3, r2
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	4413      	add	r3, r2
 8006358:	005b      	lsls	r3, r3, #1
 800635a:	4403      	add	r3, r0
 800635c:	3303      	adds	r3, #3
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006364:	460a      	mov	r2, r1
 8006366:	2108      	movs	r1, #8
 8006368:	f7fa f9e0 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800636c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006370:	3308      	adds	r3, #8
 8006372:	2b00      	cmp	r3, #0
 8006374:	da00      	bge.n	8006378 <Send_Status_Message+0x5d0>
 8006376:	3307      	adds	r3, #7
 8006378:	10db      	asrs	r3, r3, #3
 800637a:	b29a      	uxth	r2, r3
 800637c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006380:	4413      	add	r3, r2
 8006382:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006386:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800638a:	3308      	adds	r3, #8
 800638c:	b29b      	uxth	r3, r3
 800638e:	b21b      	sxth	r3, r3
 8006390:	425a      	negs	r2, r3
 8006392:	f003 0307 	and.w	r3, r3, #7
 8006396:	f002 0207 	and.w	r2, r2, #7
 800639a:	bf58      	it	pl
 800639c:	4253      	negpl	r3, r2
 800639e:	b21b      	sxth	r3, r3
 80063a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80063a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063ac:	18d1      	adds	r1, r2, r3
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	486a      	ldr	r0, [pc, #424]	; (800655c <Send_Status_Message+0x7b4>)
 80063b2:	4613      	mov	r3, r2
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	4413      	add	r3, r2
 80063b8:	005b      	lsls	r3, r3, #1
 80063ba:	4403      	add	r3, r0
 80063bc:	781b      	ldrb	r3, [r3, #0]
 80063be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063c2:	460a      	mov	r2, r1
 80063c4:	2108      	movs	r1, #8
 80063c6:	f7fa f9b1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063ce:	3308      	adds	r3, #8
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	da00      	bge.n	80063d6 <Send_Status_Message+0x62e>
 80063d4:	3307      	adds	r3, #7
 80063d6:	10db      	asrs	r3, r3, #3
 80063d8:	b29a      	uxth	r2, r3
 80063da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063de:	4413      	add	r3, r2
 80063e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063e8:	3308      	adds	r3, #8
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	b21b      	sxth	r3, r3
 80063ee:	425a      	negs	r2, r3
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	f002 0207 	and.w	r2, r2, #7
 80063f8:	bf58      	it	pl
 80063fa:	4253      	negpl	r3, r2
 80063fc:	b21b      	sxth	r3, r3
 80063fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 8006402:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800640a:	18d1      	adds	r1, r2, r3
 800640c:	79fa      	ldrb	r2, [r7, #7]
 800640e:	4853      	ldr	r0, [pc, #332]	; (800655c <Send_Status_Message+0x7b4>)
 8006410:	4613      	mov	r3, r2
 8006412:	005b      	lsls	r3, r3, #1
 8006414:	4413      	add	r3, r2
 8006416:	005b      	lsls	r3, r3, #1
 8006418:	4403      	add	r3, r0
 800641a:	3301      	adds	r3, #1
 800641c:	781b      	ldrb	r3, [r3, #0]
 800641e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006422:	460a      	mov	r2, r1
 8006424:	2108      	movs	r1, #8
 8006426:	f7fa f981 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800642a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800642e:	3308      	adds	r3, #8
 8006430:	2b00      	cmp	r3, #0
 8006432:	da00      	bge.n	8006436 <Send_Status_Message+0x68e>
 8006434:	3307      	adds	r3, #7
 8006436:	10db      	asrs	r3, r3, #3
 8006438:	b29a      	uxth	r2, r3
 800643a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800643e:	4413      	add	r3, r2
 8006440:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006444:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006448:	3308      	adds	r3, #8
 800644a:	b29b      	uxth	r3, r3
 800644c:	b21b      	sxth	r3, r3
 800644e:	425a      	negs	r2, r3
 8006450:	f003 0307 	and.w	r3, r3, #7
 8006454:	f002 0207 	and.w	r2, r2, #7
 8006458:	bf58      	it	pl
 800645a:	4253      	negpl	r3, r2
 800645c:	b21b      	sxth	r3, r3
 800645e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006462:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006466:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800646a:	18d1      	adds	r1, r2, r3
 800646c:	79fa      	ldrb	r2, [r7, #7]
 800646e:	483b      	ldr	r0, [pc, #236]	; (800655c <Send_Status_Message+0x7b4>)
 8006470:	4613      	mov	r3, r2
 8006472:	005b      	lsls	r3, r3, #1
 8006474:	4413      	add	r3, r2
 8006476:	005b      	lsls	r3, r3, #1
 8006478:	4403      	add	r3, r0
 800647a:	3302      	adds	r3, #2
 800647c:	781b      	ldrb	r3, [r3, #0]
 800647e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006482:	460a      	mov	r2, r1
 8006484:	2108      	movs	r1, #8
 8006486:	f7fa f951 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800648a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800648e:	3308      	adds	r3, #8
 8006490:	2b00      	cmp	r3, #0
 8006492:	da00      	bge.n	8006496 <Send_Status_Message+0x6ee>
 8006494:	3307      	adds	r3, #7
 8006496:	10db      	asrs	r3, r3, #3
 8006498:	b29a      	uxth	r2, r3
 800649a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800649e:	4413      	add	r3, r2
 80064a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80064a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80064a8:	3308      	adds	r3, #8
 80064aa:	b29b      	uxth	r3, r3
 80064ac:	b21b      	sxth	r3, r3
 80064ae:	425a      	negs	r2, r3
 80064b0:	f003 0307 	and.w	r3, r3, #7
 80064b4:	f002 0207 	and.w	r2, r2, #7
 80064b8:	bf58      	it	pl
 80064ba:	4253      	negpl	r3, r2
 80064bc:	b21b      	sxth	r3, r3
 80064be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80064c2:	4b29      	ldr	r3, [pc, #164]	; (8006568 <Send_Status_Message+0x7c0>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	085b      	lsrs	r3, r3, #1
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d031      	beq.n	8006534 <Send_Status_Message+0x78c>
 80064d0:	4b25      	ldr	r3, [pc, #148]	; (8006568 <Send_Status_Message+0x7c0>)
 80064d2:	791b      	ldrb	r3, [r3, #4]
 80064d4:	79fa      	ldrb	r2, [r7, #7]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	d12c      	bne.n	8006534 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 80064da:	2300      	movs	r3, #0
 80064dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80064e0:	4822      	ldr	r0, [pc, #136]	; (800656c <Send_Status_Message+0x7c4>)
 80064e2:	f013 fe51 	bl	801a188 <HAL_RNG_GetRandomNumber>
 80064e6:	4602      	mov	r2, r0
 80064e8:	4b21      	ldr	r3, [pc, #132]	; (8006570 <Send_Status_Message+0x7c8>)
 80064ea:	fba3 1302 	umull	r1, r3, r3, r2
 80064ee:	0dd9      	lsrs	r1, r3, #23
 80064f0:	460b      	mov	r3, r1
 80064f2:	041b      	lsls	r3, r3, #16
 80064f4:	1a5b      	subs	r3, r3, r1
 80064f6:	021b      	lsls	r3, r3, #8
 80064f8:	1ad3      	subs	r3, r2, r3
 80064fa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80064fe:	481d      	ldr	r0, [pc, #116]	; (8006574 <Send_Status_Message+0x7cc>)
 8006500:	f01c fa36 	bl	8022970 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006504:	79fb      	ldrb	r3, [r7, #7]
 8006506:	4a13      	ldr	r2, [pc, #76]	; (8006554 <Send_Status_Message+0x7ac>)
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	4413      	add	r3, r2
 800650c:	330c      	adds	r3, #12
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	4619      	mov	r1, r3
 8006512:	4819      	ldr	r0, [pc, #100]	; (8006578 <Send_Status_Message+0x7d0>)
 8006514:	f01c f990 	bl	8022838 <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 8006518:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 800651c:	4817      	ldr	r0, [pc, #92]	; (800657c <Send_Status_Message+0x7d4>)
 800651e:	f01c f98b 	bl	8022838 <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 8006522:	f107 020c 	add.w	r2, r7, #12
 8006526:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800652a:	2118      	movs	r1, #24
 800652c:	2000      	movs	r0, #0
 800652e:	f7fa f8fd 	bl	800072c <InsertBits>
	{
 8006532:	e00b      	b.n	800654c <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8006534:	79fb      	ldrb	r3, [r7, #7]
 8006536:	4a07      	ldr	r2, [pc, #28]	; (8006554 <Send_Status_Message+0x7ac>)
 8006538:	011b      	lsls	r3, r3, #4
 800653a:	4413      	add	r3, r2
 800653c:	330c      	adds	r3, #12
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f107 020c 	add.w	r2, r7, #12
 8006544:	2118      	movs	r1, #24
 8006546:	2000      	movs	r0, #0
 8006548:	f7fa f8f0 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800654c:	2300      	movs	r3, #0
 800654e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006552:	e027      	b.n	80065a4 <Send_Status_Message+0x7fc>
 8006554:	200011c4 	.word	0x200011c4
 8006558:	200010d8 	.word	0x200010d8
 800655c:	20001188 	.word	0x20001188
 8006560:	20002bcc 	.word	0x20002bcc
 8006564:	0802470c 	.word	0x0802470c
 8006568:	20001a1c 	.word	0x20001a1c
 800656c:	2000a05c 	.word	0x2000a05c
 8006570:	80008001 	.word	0x80008001
 8006574:	08024724 	.word	0x08024724
 8006578:	08024748 	.word	0x08024748
 800657c:	0802476c 	.word	0x0802476c
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006580:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006584:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006588:	3303      	adds	r3, #3
 800658a:	3290      	adds	r2, #144	; 0x90
 800658c:	443a      	add	r2, r7
 800658e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006592:	3390      	adds	r3, #144	; 0x90
 8006594:	443b      	add	r3, r7
 8006596:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800659a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800659e:	3301      	adds	r3, #1
 80065a0:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80065a4:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 80065ae:	429a      	cmp	r2, r3
 80065b0:	d8e6      	bhi.n	8006580 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 80065b2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065b6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80065ba:	18d4      	adds	r4, r2, r3
 80065bc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80065c0:	b29b      	uxth	r3, r3
 80065c2:	3303      	adds	r3, #3
 80065c4:	b29a      	uxth	r2, r3
 80065c6:	f107 030c 	add.w	r3, r7, #12
 80065ca:	4611      	mov	r1, r2
 80065cc:	4618      	mov	r0, r3
 80065ce:	f00c fd4d 	bl	801306c <CalculateDirectReverseCrc>
 80065d2:	4603      	mov	r3, r0
 80065d4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80065d8:	4622      	mov	r2, r4
 80065da:	2120      	movs	r1, #32
 80065dc:	f7fa f8a6 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80065e0:	4b1f      	ldr	r3, [pc, #124]	; (8006660 <Send_Status_Message+0x8b8>)
 80065e2:	2200      	movs	r2, #0
 80065e4:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80065e6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065ea:	3320      	adds	r3, #32
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	da00      	bge.n	80065f2 <Send_Status_Message+0x84a>
 80065f0:	3307      	adds	r3, #7
 80065f2:	10db      	asrs	r3, r3, #3
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065fa:	4413      	add	r3, r2
 80065fc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006600:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006604:	3320      	adds	r3, #32
 8006606:	b29b      	uxth	r3, r3
 8006608:	b21b      	sxth	r3, r3
 800660a:	425a      	negs	r2, r3
 800660c:	f003 0307 	and.w	r3, r3, #7
 8006610:	f002 0207 	and.w	r2, r2, #7
 8006614:	bf58      	it	pl
 8006616:	4253      	negpl	r3, r2
 8006618:	b21b      	sxth	r3, r3
 800661a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800661e:	4b11      	ldr	r3, [pc, #68]	; (8006664 <Send_Status_Message+0x8bc>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	0a5b      	lsrs	r3, r3, #9
 8006624:	f003 0301 	and.w	r3, r3, #1
 8006628:	2b00      	cmp	r3, #0
 800662a:	d00b      	beq.n	8006644 <Send_Status_Message+0x89c>
 800662c:	4b0d      	ldr	r3, [pc, #52]	; (8006664 <Send_Status_Message+0x8bc>)
 800662e:	791b      	ldrb	r3, [r3, #4]
 8006630:	79fa      	ldrb	r2, [r7, #7]
 8006632:	429a      	cmp	r2, r3
 8006634:	d106      	bne.n	8006644 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 8006636:	480c      	ldr	r0, [pc, #48]	; (8006668 <Send_Status_Message+0x8c0>)
 8006638:	f01c f99a 	bl	8022970 <puts>
		printf("Not Sending Reply");
 800663c:	480b      	ldr	r0, [pc, #44]	; (800666c <Send_Status_Message+0x8c4>)
 800663e:	f01c f8fb 	bl	8022838 <iprintf>
 8006642:	e009      	b.n	8006658 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006644:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006648:	b2d9      	uxtb	r1, r3
 800664a:	79fa      	ldrb	r2, [r7, #7]
 800664c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006650:	4618      	mov	r0, r3
 8006652:	f000 ffb5 	bl	80075c0 <Process_Sending_Reply>
	}
}
 8006656:	bf00      	nop
 8006658:	bf00      	nop
 800665a:	3794      	adds	r7, #148	; 0x94
 800665c:	46bd      	mov	sp, r7
 800665e:	bd90      	pop	{r4, r7, pc}
 8006660:	20000e39 	.word	0x20000e39
 8006664:	20001a1c 	.word	0x20001a1c
 8006668:	080244bc 	.word	0x080244bc
 800666c:	080244d4 	.word	0x080244d4

08006670 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	4608      	mov	r0, r1
 800667a:	4611      	mov	r1, r2
 800667c:	461a      	mov	r2, r3
 800667e:	4603      	mov	r3, r0
 8006680:	70fb      	strb	r3, [r7, #3]
 8006682:	460b      	mov	r3, r1
 8006684:	70bb      	strb	r3, [r7, #2]
 8006686:	4613      	mov	r3, r2
 8006688:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800668a:	2300      	movs	r3, #0
 800668c:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800668e:	2300      	movs	r3, #0
 8006690:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 8006692:	2300      	movs	r3, #0
 8006694:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006696:	f00f f8c5 	bl	8015824 <HAL_GetTick>
 800669a:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 800669c:	2300      	movs	r3, #0
 800669e:	81fb      	strh	r3, [r7, #14]
 80066a0:	2300      	movs	r3, #0
 80066a2:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 80066a4:	78fb      	ldrb	r3, [r7, #3]
 80066a6:	b29b      	uxth	r3, r3
 80066a8:	3b05      	subs	r3, #5
 80066aa:	b29b      	uxth	r3, r3
 80066ac:	4619      	mov	r1, r3
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f00c fcdc 	bl	801306c <CalculateDirectReverseCrc>
 80066b4:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 80066b6:	78fb      	ldrb	r3, [r7, #3]
 80066b8:	3b05      	subs	r3, #5
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	441a      	add	r2, r3
 80066be:	89bb      	ldrh	r3, [r7, #12]
 80066c0:	2120      	movs	r1, #32
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7f9 ffa6 	bl	8000614 <ExtractBits>
 80066c8:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 80066ca:	697a      	ldr	r2, [r7, #20]
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	429a      	cmp	r2, r3
 80066d0:	d01a      	beq.n	8006708 <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80066d2:	78bb      	ldrb	r3, [r7, #2]
 80066d4:	4a08      	ldr	r2, [pc, #32]	; (80066f8 <Service_Msg_Extr+0x88>)
 80066d6:	3366      	adds	r3, #102	; 0x66
 80066d8:	009b      	lsls	r3, r3, #2
 80066da:	4413      	add	r3, r2
 80066dc:	685b      	ldr	r3, [r3, #4]
 80066de:	4619      	mov	r1, r3
 80066e0:	4806      	ldr	r0, [pc, #24]	; (80066fc <Service_Msg_Extr+0x8c>)
 80066e2:	f01c f8a9 	bl	8022838 <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80066e6:	6979      	ldr	r1, [r7, #20]
 80066e8:	4805      	ldr	r0, [pc, #20]	; (8006700 <Service_Msg_Extr+0x90>)
 80066ea:	f01c f8a5 	bl	8022838 <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80066ee:	69b9      	ldr	r1, [r7, #24]
 80066f0:	4804      	ldr	r0, [pc, #16]	; (8006704 <Service_Msg_Extr+0x94>)
 80066f2:	f01c f8a1 	bl	8022838 <iprintf>
		return;
 80066f6:	e39f      	b.n	8006e38 <Service_Msg_Extr+0x7c8>
 80066f8:	20000304 	.word	0x20000304
 80066fc:	080249b4 	.word	0x080249b4
 8006700:	08024228 	.word	0x08024228
 8006704:	08024238 	.word	0x08024238
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 8006708:	78bb      	ldrb	r3, [r7, #2]
 800670a:	49ae      	ldr	r1, [pc, #696]	; (80069c4 <Service_Msg_Extr+0x354>)
 800670c:	693a      	ldr	r2, [r7, #16]
 800670e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8006712:	78bb      	ldrb	r3, [r7, #2]
 8006714:	49ac      	ldr	r1, [pc, #688]	; (80069c8 <Service_Msg_Extr+0x358>)
 8006716:	693a      	ldr	r2, [r7, #16]
 8006718:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 800671c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006720:	3308      	adds	r3, #8
 8006722:	2b00      	cmp	r3, #0
 8006724:	da00      	bge.n	8006728 <Service_Msg_Extr+0xb8>
 8006726:	3307      	adds	r3, #7
 8006728:	10db      	asrs	r3, r3, #3
 800672a:	b29a      	uxth	r2, r3
 800672c:	89fb      	ldrh	r3, [r7, #14]
 800672e:	4413      	add	r3, r2
 8006730:	81fb      	strh	r3, [r7, #14]
 8006732:	89bb      	ldrh	r3, [r7, #12]
 8006734:	3308      	adds	r3, #8
 8006736:	b29b      	uxth	r3, r3
 8006738:	b21b      	sxth	r3, r3
 800673a:	425a      	negs	r2, r3
 800673c:	f003 0307 	and.w	r3, r3, #7
 8006740:	f002 0207 	and.w	r2, r2, #7
 8006744:	bf58      	it	pl
 8006746:	4253      	negpl	r3, r2
 8006748:	b21b      	sxth	r3, r3
 800674a:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800674c:	89fb      	ldrh	r3, [r7, #14]
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	441a      	add	r2, r3
 8006752:	89bb      	ldrh	r3, [r7, #12]
 8006754:	2110      	movs	r1, #16
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 ff5c 	bl	8000614 <ExtractBits>
 800675c:	4603      	mov	r3, r0
 800675e:	78ba      	ldrb	r2, [r7, #2]
 8006760:	b298      	uxth	r0, r3
 8006762:	499a      	ldr	r1, [pc, #616]	; (80069cc <Service_Msg_Extr+0x35c>)
 8006764:	4613      	mov	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	4413      	add	r3, r2
 800676a:	009b      	lsls	r3, r3, #2
 800676c:	440b      	add	r3, r1
 800676e:	3306      	adds	r3, #6
 8006770:	4602      	mov	r2, r0
 8006772:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006774:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006778:	3310      	adds	r3, #16
 800677a:	2b00      	cmp	r3, #0
 800677c:	da00      	bge.n	8006780 <Service_Msg_Extr+0x110>
 800677e:	3307      	adds	r3, #7
 8006780:	10db      	asrs	r3, r3, #3
 8006782:	b29a      	uxth	r2, r3
 8006784:	89fb      	ldrh	r3, [r7, #14]
 8006786:	4413      	add	r3, r2
 8006788:	81fb      	strh	r3, [r7, #14]
 800678a:	89bb      	ldrh	r3, [r7, #12]
 800678c:	3310      	adds	r3, #16
 800678e:	b29b      	uxth	r3, r3
 8006790:	b21b      	sxth	r3, r3
 8006792:	425a      	negs	r2, r3
 8006794:	f003 0307 	and.w	r3, r3, #7
 8006798:	f002 0207 	and.w	r2, r2, #7
 800679c:	bf58      	it	pl
 800679e:	4253      	negpl	r3, r2
 80067a0:	b21b      	sxth	r3, r3
 80067a2:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	441a      	add	r2, r3
 80067aa:	89bb      	ldrh	r3, [r7, #12]
 80067ac:	2110      	movs	r1, #16
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7f9 ff30 	bl	8000614 <ExtractBits>
 80067b4:	4603      	mov	r3, r0
 80067b6:	78ba      	ldrb	r2, [r7, #2]
 80067b8:	b298      	uxth	r0, r3
 80067ba:	4984      	ldr	r1, [pc, #528]	; (80069cc <Service_Msg_Extr+0x35c>)
 80067bc:	4613      	mov	r3, r2
 80067be:	005b      	lsls	r3, r3, #1
 80067c0:	4413      	add	r3, r2
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	440b      	add	r3, r1
 80067c6:	3304      	adds	r3, #4
 80067c8:	4602      	mov	r2, r0
 80067ca:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80067cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067d0:	3310      	adds	r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da00      	bge.n	80067d8 <Service_Msg_Extr+0x168>
 80067d6:	3307      	adds	r3, #7
 80067d8:	10db      	asrs	r3, r3, #3
 80067da:	b29a      	uxth	r2, r3
 80067dc:	89fb      	ldrh	r3, [r7, #14]
 80067de:	4413      	add	r3, r2
 80067e0:	81fb      	strh	r3, [r7, #14]
 80067e2:	89bb      	ldrh	r3, [r7, #12]
 80067e4:	3310      	adds	r3, #16
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	b21b      	sxth	r3, r3
 80067ea:	425a      	negs	r2, r3
 80067ec:	f003 0307 	and.w	r3, r3, #7
 80067f0:	f002 0207 	and.w	r2, r2, #7
 80067f4:	bf58      	it	pl
 80067f6:	4253      	negpl	r3, r2
 80067f8:	b21b      	sxth	r3, r3
 80067fa:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80067fc:	89fb      	ldrh	r3, [r7, #14]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	441a      	add	r2, r3
 8006802:	89bb      	ldrh	r3, [r7, #12]
 8006804:	2108      	movs	r1, #8
 8006806:	4618      	mov	r0, r3
 8006808:	f7f9 ff04 	bl	8000614 <ExtractBits>
 800680c:	4602      	mov	r2, r0
 800680e:	78bb      	ldrb	r3, [r7, #2]
 8006810:	b2d1      	uxtb	r1, r2
 8006812:	4a6f      	ldr	r2, [pc, #444]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4413      	add	r3, r2
 8006818:	3302      	adds	r3, #2
 800681a:	460a      	mov	r2, r1
 800681c:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800681e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006822:	3308      	adds	r3, #8
 8006824:	2b00      	cmp	r3, #0
 8006826:	da00      	bge.n	800682a <Service_Msg_Extr+0x1ba>
 8006828:	3307      	adds	r3, #7
 800682a:	10db      	asrs	r3, r3, #3
 800682c:	b29a      	uxth	r2, r3
 800682e:	89fb      	ldrh	r3, [r7, #14]
 8006830:	4413      	add	r3, r2
 8006832:	81fb      	strh	r3, [r7, #14]
 8006834:	89bb      	ldrh	r3, [r7, #12]
 8006836:	3308      	adds	r3, #8
 8006838:	b29b      	uxth	r3, r3
 800683a:	b21b      	sxth	r3, r3
 800683c:	425a      	negs	r2, r3
 800683e:	f003 0307 	and.w	r3, r3, #7
 8006842:	f002 0207 	and.w	r2, r2, #7
 8006846:	bf58      	it	pl
 8006848:	4253      	negpl	r3, r2
 800684a:	b21b      	sxth	r3, r3
 800684c:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800684e:	89fb      	ldrh	r3, [r7, #14]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	441a      	add	r2, r3
 8006854:	89bb      	ldrh	r3, [r7, #12]
 8006856:	2108      	movs	r1, #8
 8006858:	4618      	mov	r0, r3
 800685a:	f7f9 fedb 	bl	8000614 <ExtractBits>
 800685e:	4602      	mov	r2, r0
 8006860:	78bb      	ldrb	r3, [r7, #2]
 8006862:	b2d1      	uxtb	r1, r2
 8006864:	4a5a      	ldr	r2, [pc, #360]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006866:	011b      	lsls	r3, r3, #4
 8006868:	4413      	add	r3, r2
 800686a:	3301      	adds	r3, #1
 800686c:	460a      	mov	r2, r1
 800686e:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006870:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006874:	3308      	adds	r3, #8
 8006876:	2b00      	cmp	r3, #0
 8006878:	da00      	bge.n	800687c <Service_Msg_Extr+0x20c>
 800687a:	3307      	adds	r3, #7
 800687c:	10db      	asrs	r3, r3, #3
 800687e:	b29a      	uxth	r2, r3
 8006880:	89fb      	ldrh	r3, [r7, #14]
 8006882:	4413      	add	r3, r2
 8006884:	81fb      	strh	r3, [r7, #14]
 8006886:	89bb      	ldrh	r3, [r7, #12]
 8006888:	3308      	adds	r3, #8
 800688a:	b29b      	uxth	r3, r3
 800688c:	b21b      	sxth	r3, r3
 800688e:	425a      	negs	r2, r3
 8006890:	f003 0307 	and.w	r3, r3, #7
 8006894:	f002 0207 	and.w	r2, r2, #7
 8006898:	bf58      	it	pl
 800689a:	4253      	negpl	r3, r2
 800689c:	b21b      	sxth	r3, r3
 800689e:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80068a0:	89fb      	ldrh	r3, [r7, #14]
 80068a2:	687a      	ldr	r2, [r7, #4]
 80068a4:	441a      	add	r2, r3
 80068a6:	89bb      	ldrh	r3, [r7, #12]
 80068a8:	2108      	movs	r1, #8
 80068aa:	4618      	mov	r0, r3
 80068ac:	f7f9 feb2 	bl	8000614 <ExtractBits>
 80068b0:	4603      	mov	r3, r0
 80068b2:	78ba      	ldrb	r2, [r7, #2]
 80068b4:	b2d8      	uxtb	r0, r3
 80068b6:	4945      	ldr	r1, [pc, #276]	; (80069cc <Service_Msg_Extr+0x35c>)
 80068b8:	4613      	mov	r3, r2
 80068ba:	005b      	lsls	r3, r3, #1
 80068bc:	4413      	add	r3, r2
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	440b      	add	r3, r1
 80068c2:	3302      	adds	r3, #2
 80068c4:	4602      	mov	r2, r0
 80068c6:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 80068c8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80068cc:	3308      	adds	r3, #8
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	da00      	bge.n	80068d4 <Service_Msg_Extr+0x264>
 80068d2:	3307      	adds	r3, #7
 80068d4:	10db      	asrs	r3, r3, #3
 80068d6:	b29a      	uxth	r2, r3
 80068d8:	89fb      	ldrh	r3, [r7, #14]
 80068da:	4413      	add	r3, r2
 80068dc:	81fb      	strh	r3, [r7, #14]
 80068de:	89bb      	ldrh	r3, [r7, #12]
 80068e0:	3308      	adds	r3, #8
 80068e2:	b29b      	uxth	r3, r3
 80068e4:	b21b      	sxth	r3, r3
 80068e6:	425a      	negs	r2, r3
 80068e8:	f003 0307 	and.w	r3, r3, #7
 80068ec:	f002 0207 	and.w	r2, r2, #7
 80068f0:	bf58      	it	pl
 80068f2:	4253      	negpl	r3, r2
 80068f4:	b21b      	sxth	r3, r3
 80068f6:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80068f8:	89fb      	ldrh	r3, [r7, #14]
 80068fa:	687a      	ldr	r2, [r7, #4]
 80068fc:	441a      	add	r2, r3
 80068fe:	89bb      	ldrh	r3, [r7, #12]
 8006900:	2110      	movs	r1, #16
 8006902:	4618      	mov	r0, r3
 8006904:	f7f9 fe86 	bl	8000614 <ExtractBits>
 8006908:	4602      	mov	r2, r0
 800690a:	78bb      	ldrb	r3, [r7, #2]
 800690c:	b291      	uxth	r1, r2
 800690e:	4a30      	ldr	r2, [pc, #192]	; (80069d0 <Service_Msg_Extr+0x360>)
 8006910:	011b      	lsls	r3, r3, #4
 8006912:	4413      	add	r3, r2
 8006914:	3304      	adds	r3, #4
 8006916:	460a      	mov	r2, r1
 8006918:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800691a:	492e      	ldr	r1, [pc, #184]	; (80069d4 <Service_Msg_Extr+0x364>)
 800691c:	482e      	ldr	r0, [pc, #184]	; (80069d8 <Service_Msg_Extr+0x368>)
 800691e:	f7f9 fc8f 	bl	8000240 <strcmp>
 8006922:	4603      	mov	r3, r0
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10f      	bne.n	8006948 <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 8006928:	78bb      	ldrb	r3, [r7, #2]
 800692a:	4a29      	ldr	r2, [pc, #164]	; (80069d0 <Service_Msg_Extr+0x360>)
 800692c:	011b      	lsls	r3, r3, #4
 800692e:	4413      	add	r3, r2
 8006930:	3304      	adds	r3, #4
 8006932:	881a      	ldrh	r2, [r3, #0]
 8006934:	78bb      	ldrb	r3, [r7, #2]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	b291      	uxth	r1, r2
 800693c:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <Service_Msg_Extr+0x360>)
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4413      	add	r3, r2
 8006942:	3304      	adds	r3, #4
 8006944:	460a      	mov	r2, r1
 8006946:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006948:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800694c:	3310      	adds	r3, #16
 800694e:	2b00      	cmp	r3, #0
 8006950:	da00      	bge.n	8006954 <Service_Msg_Extr+0x2e4>
 8006952:	3307      	adds	r3, #7
 8006954:	10db      	asrs	r3, r3, #3
 8006956:	b29a      	uxth	r2, r3
 8006958:	89fb      	ldrh	r3, [r7, #14]
 800695a:	4413      	add	r3, r2
 800695c:	81fb      	strh	r3, [r7, #14]
 800695e:	89bb      	ldrh	r3, [r7, #12]
 8006960:	3310      	adds	r3, #16
 8006962:	b29b      	uxth	r3, r3
 8006964:	b21b      	sxth	r3, r3
 8006966:	425a      	negs	r2, r3
 8006968:	f003 0307 	and.w	r3, r3, #7
 800696c:	f002 0207 	and.w	r2, r2, #7
 8006970:	bf58      	it	pl
 8006972:	4253      	negpl	r3, r2
 8006974:	b21b      	sxth	r3, r3
 8006976:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006978:	78bb      	ldrb	r3, [r7, #2]
 800697a:	4a15      	ldr	r2, [pc, #84]	; (80069d0 <Service_Msg_Extr+0x360>)
 800697c:	011b      	lsls	r3, r3, #4
 800697e:	4413      	add	r3, r2
 8006980:	3304      	adds	r3, #4
 8006982:	881b      	ldrh	r3, [r3, #0]
 8006984:	f003 0320 	and.w	r3, r3, #32
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 812b 	beq.w	8006be4 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800698e:	89fb      	ldrh	r3, [r7, #14]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	441a      	add	r2, r3
 8006994:	89bb      	ldrh	r3, [r7, #12]
 8006996:	2108      	movs	r1, #8
 8006998:	4618      	mov	r0, r3
 800699a:	f7f9 fe3b 	bl	8000614 <ExtractBits>
 800699e:	4603      	mov	r3, r0
 80069a0:	78ba      	ldrb	r2, [r7, #2]
 80069a2:	b2d8      	uxtb	r0, r3
 80069a4:	490d      	ldr	r1, [pc, #52]	; (80069dc <Service_Msg_Extr+0x36c>)
 80069a6:	4613      	mov	r3, r2
 80069a8:	005b      	lsls	r3, r3, #1
 80069aa:	4413      	add	r3, r2
 80069ac:	005b      	lsls	r3, r3, #1
 80069ae:	440b      	add	r3, r1
 80069b0:	3305      	adds	r3, #5
 80069b2:	4602      	mov	r2, r0
 80069b4:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 80069b6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069ba:	3308      	adds	r3, #8
 80069bc:	2b00      	cmp	r3, #0
 80069be:	da0f      	bge.n	80069e0 <Service_Msg_Extr+0x370>
 80069c0:	3307      	adds	r3, #7
 80069c2:	e00d      	b.n	80069e0 <Service_Msg_Extr+0x370>
 80069c4:	20000fa4 	.word	0x20000fa4
 80069c8:	20000fcc 	.word	0x20000fcc
 80069cc:	20001584 	.word	0x20001584
 80069d0:	200011c4 	.word	0x200011c4
 80069d4:	08023fe4 	.word	0x08023fe4
 80069d8:	20000305 	.word	0x20000305
 80069dc:	20001188 	.word	0x20001188
 80069e0:	10db      	asrs	r3, r3, #3
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	89fb      	ldrh	r3, [r7, #14]
 80069e6:	4413      	add	r3, r2
 80069e8:	81fb      	strh	r3, [r7, #14]
 80069ea:	89bb      	ldrh	r3, [r7, #12]
 80069ec:	3308      	adds	r3, #8
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	b21b      	sxth	r3, r3
 80069f2:	425a      	negs	r2, r3
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	f002 0207 	and.w	r2, r2, #7
 80069fc:	bf58      	it	pl
 80069fe:	4253      	negpl	r3, r2
 8006a00:	b21b      	sxth	r3, r3
 8006a02:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a04:	89fb      	ldrh	r3, [r7, #14]
 8006a06:	687a      	ldr	r2, [r7, #4]
 8006a08:	441a      	add	r2, r3
 8006a0a:	89bb      	ldrh	r3, [r7, #12]
 8006a0c:	2108      	movs	r1, #8
 8006a0e:	4618      	mov	r0, r3
 8006a10:	f7f9 fe00 	bl	8000614 <ExtractBits>
 8006a14:	4603      	mov	r3, r0
 8006a16:	78ba      	ldrb	r2, [r7, #2]
 8006a18:	b2d8      	uxtb	r0, r3
 8006a1a:	496e      	ldr	r1, [pc, #440]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006a1c:	4613      	mov	r3, r2
 8006a1e:	005b      	lsls	r3, r3, #1
 8006a20:	4413      	add	r3, r2
 8006a22:	005b      	lsls	r3, r3, #1
 8006a24:	440b      	add	r3, r1
 8006a26:	3304      	adds	r3, #4
 8006a28:	4602      	mov	r2, r0
 8006a2a:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 8006a2c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a30:	3308      	adds	r3, #8
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	da00      	bge.n	8006a38 <Service_Msg_Extr+0x3c8>
 8006a36:	3307      	adds	r3, #7
 8006a38:	10db      	asrs	r3, r3, #3
 8006a3a:	b29a      	uxth	r2, r3
 8006a3c:	89fb      	ldrh	r3, [r7, #14]
 8006a3e:	4413      	add	r3, r2
 8006a40:	81fb      	strh	r3, [r7, #14]
 8006a42:	89bb      	ldrh	r3, [r7, #12]
 8006a44:	3308      	adds	r3, #8
 8006a46:	b29b      	uxth	r3, r3
 8006a48:	b21b      	sxth	r3, r3
 8006a4a:	425a      	negs	r2, r3
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	f002 0207 	and.w	r2, r2, #7
 8006a54:	bf58      	it	pl
 8006a56:	4253      	negpl	r3, r2
 8006a58:	b21b      	sxth	r3, r3
 8006a5a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	441a      	add	r2, r3
 8006a62:	89bb      	ldrh	r3, [r7, #12]
 8006a64:	2108      	movs	r1, #8
 8006a66:	4618      	mov	r0, r3
 8006a68:	f7f9 fdd4 	bl	8000614 <ExtractBits>
 8006a6c:	4603      	mov	r3, r0
 8006a6e:	78ba      	ldrb	r2, [r7, #2]
 8006a70:	b2d8      	uxtb	r0, r3
 8006a72:	4958      	ldr	r1, [pc, #352]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006a74:	4613      	mov	r3, r2
 8006a76:	005b      	lsls	r3, r3, #1
 8006a78:	4413      	add	r3, r2
 8006a7a:	005b      	lsls	r3, r3, #1
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3303      	adds	r3, #3
 8006a80:	4602      	mov	r2, r0
 8006a82:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006a84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a88:	3308      	adds	r3, #8
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	da00      	bge.n	8006a90 <Service_Msg_Extr+0x420>
 8006a8e:	3307      	adds	r3, #7
 8006a90:	10db      	asrs	r3, r3, #3
 8006a92:	b29a      	uxth	r2, r3
 8006a94:	89fb      	ldrh	r3, [r7, #14]
 8006a96:	4413      	add	r3, r2
 8006a98:	81fb      	strh	r3, [r7, #14]
 8006a9a:	89bb      	ldrh	r3, [r7, #12]
 8006a9c:	3308      	adds	r3, #8
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	b21b      	sxth	r3, r3
 8006aa2:	425a      	negs	r2, r3
 8006aa4:	f003 0307 	and.w	r3, r3, #7
 8006aa8:	f002 0207 	and.w	r2, r2, #7
 8006aac:	bf58      	it	pl
 8006aae:	4253      	negpl	r3, r2
 8006ab0:	b21b      	sxth	r3, r3
 8006ab2:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006ab4:	89fb      	ldrh	r3, [r7, #14]
 8006ab6:	687a      	ldr	r2, [r7, #4]
 8006ab8:	441a      	add	r2, r3
 8006aba:	89bb      	ldrh	r3, [r7, #12]
 8006abc:	2108      	movs	r1, #8
 8006abe:	4618      	mov	r0, r3
 8006ac0:	f7f9 fda8 	bl	8000614 <ExtractBits>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	78ba      	ldrb	r2, [r7, #2]
 8006ac8:	b2d8      	uxtb	r0, r3
 8006aca:	4942      	ldr	r1, [pc, #264]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006acc:	4613      	mov	r3, r2
 8006ace:	005b      	lsls	r3, r3, #1
 8006ad0:	4413      	add	r3, r2
 8006ad2:	005b      	lsls	r3, r3, #1
 8006ad4:	440b      	add	r3, r1
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006ada:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006ade:	3308      	adds	r3, #8
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	da00      	bge.n	8006ae6 <Service_Msg_Extr+0x476>
 8006ae4:	3307      	adds	r3, #7
 8006ae6:	10db      	asrs	r3, r3, #3
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	89fb      	ldrh	r3, [r7, #14]
 8006aec:	4413      	add	r3, r2
 8006aee:	81fb      	strh	r3, [r7, #14]
 8006af0:	89bb      	ldrh	r3, [r7, #12]
 8006af2:	3308      	adds	r3, #8
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	b21b      	sxth	r3, r3
 8006af8:	425a      	negs	r2, r3
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	f002 0207 	and.w	r2, r2, #7
 8006b02:	bf58      	it	pl
 8006b04:	4253      	negpl	r3, r2
 8006b06:	b21b      	sxth	r3, r3
 8006b08:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b0a:	89fb      	ldrh	r3, [r7, #14]
 8006b0c:	687a      	ldr	r2, [r7, #4]
 8006b0e:	441a      	add	r2, r3
 8006b10:	89bb      	ldrh	r3, [r7, #12]
 8006b12:	2108      	movs	r1, #8
 8006b14:	4618      	mov	r0, r3
 8006b16:	f7f9 fd7d 	bl	8000614 <ExtractBits>
 8006b1a:	4603      	mov	r3, r0
 8006b1c:	78ba      	ldrb	r2, [r7, #2]
 8006b1e:	b2d8      	uxtb	r0, r3
 8006b20:	492c      	ldr	r1, [pc, #176]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006b22:	4613      	mov	r3, r2
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	4413      	add	r3, r2
 8006b28:	005b      	lsls	r3, r3, #1
 8006b2a:	440b      	add	r3, r1
 8006b2c:	3301      	adds	r3, #1
 8006b2e:	4602      	mov	r2, r0
 8006b30:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006b32:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b36:	3308      	adds	r3, #8
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	da00      	bge.n	8006b3e <Service_Msg_Extr+0x4ce>
 8006b3c:	3307      	adds	r3, #7
 8006b3e:	10db      	asrs	r3, r3, #3
 8006b40:	b29a      	uxth	r2, r3
 8006b42:	89fb      	ldrh	r3, [r7, #14]
 8006b44:	4413      	add	r3, r2
 8006b46:	81fb      	strh	r3, [r7, #14]
 8006b48:	89bb      	ldrh	r3, [r7, #12]
 8006b4a:	3308      	adds	r3, #8
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	b21b      	sxth	r3, r3
 8006b50:	425a      	negs	r2, r3
 8006b52:	f003 0307 	and.w	r3, r3, #7
 8006b56:	f002 0207 	and.w	r2, r2, #7
 8006b5a:	bf58      	it	pl
 8006b5c:	4253      	negpl	r3, r2
 8006b5e:	b21b      	sxth	r3, r3
 8006b60:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b62:	89fb      	ldrh	r3, [r7, #14]
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	441a      	add	r2, r3
 8006b68:	89bb      	ldrh	r3, [r7, #12]
 8006b6a:	2108      	movs	r1, #8
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7f9 fd51 	bl	8000614 <ExtractBits>
 8006b72:	4603      	mov	r3, r0
 8006b74:	78ba      	ldrb	r2, [r7, #2]
 8006b76:	b2d8      	uxtb	r0, r3
 8006b78:	4916      	ldr	r1, [pc, #88]	; (8006bd4 <Service_Msg_Extr+0x564>)
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	005b      	lsls	r3, r3, #1
 8006b7e:	4413      	add	r3, r2
 8006b80:	005b      	lsls	r3, r3, #1
 8006b82:	440b      	add	r3, r1
 8006b84:	3302      	adds	r3, #2
 8006b86:	4602      	mov	r2, r0
 8006b88:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006b8a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b8e:	3308      	adds	r3, #8
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	da00      	bge.n	8006b96 <Service_Msg_Extr+0x526>
 8006b94:	3307      	adds	r3, #7
 8006b96:	10db      	asrs	r3, r3, #3
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	89fb      	ldrh	r3, [r7, #14]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	81fb      	strh	r3, [r7, #14]
 8006ba0:	89bb      	ldrh	r3, [r7, #12]
 8006ba2:	3308      	adds	r3, #8
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	b21b      	sxth	r3, r3
 8006ba8:	425a      	negs	r2, r3
 8006baa:	f003 0307 	and.w	r3, r3, #7
 8006bae:	f002 0207 	and.w	r2, r2, #7
 8006bb2:	bf58      	it	pl
 8006bb4:	4253      	negpl	r3, r2
 8006bb6:	b21b      	sxth	r3, r3
 8006bb8:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006bba:	78bb      	ldrb	r3, [r7, #2]
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	f002 f887 	bl	8008cd0 <IS_MLK_EIPC_TIME_MATCHING>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d009      	beq.n	8006bdc <Service_Msg_Extr+0x56c>
 8006bc8:	78bb      	ldrb	r3, [r7, #2]
 8006bca:	4a03      	ldr	r2, [pc, #12]	; (8006bd8 <Service_Msg_Extr+0x568>)
 8006bcc:	2100      	movs	r1, #0
 8006bce:	54d1      	strb	r1, [r2, r3]
 8006bd0:	e008      	b.n	8006be4 <Service_Msg_Extr+0x574>
 8006bd2:	bf00      	nop
 8006bd4:	20001188 	.word	0x20001188
 8006bd8:	200010d8 	.word	0x200010d8
 8006bdc:	78bb      	ldrb	r3, [r7, #2]
 8006bde:	4a98      	ldr	r2, [pc, #608]	; (8006e40 <Service_Msg_Extr+0x7d0>)
 8006be0:	2101      	movs	r1, #1
 8006be2:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006be4:	78bb      	ldrb	r3, [r7, #2]
 8006be6:	4a97      	ldr	r2, [pc, #604]	; (8006e44 <Service_Msg_Extr+0x7d4>)
 8006be8:	011b      	lsls	r3, r3, #4
 8006bea:	4413      	add	r3, r2
 8006bec:	3304      	adds	r3, #4
 8006bee:	881b      	ldrh	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d001      	beq.n	8006bfc <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006bfc:	787a      	ldrb	r2, [r7, #1]
 8006bfe:	78bb      	ldrb	r3, [r7, #2]
 8006c00:	4611      	mov	r1, r2
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7ff f8d0 	bl	8005da8 <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006c08:	7ffb      	ldrb	r3, [r7, #31]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	f040 8081 	bne.w	8006d12 <Service_Msg_Extr+0x6a2>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006c10:	78ba      	ldrb	r2, [r7, #2]
 8006c12:	4613      	mov	r3, r2
 8006c14:	009b      	lsls	r3, r3, #2
 8006c16:	4413      	add	r3, r2
 8006c18:	009b      	lsls	r3, r3, #2
 8006c1a:	4a8b      	ldr	r2, [pc, #556]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c1c:	4413      	add	r3, r2
 8006c1e:	3301      	adds	r3, #1
 8006c20:	2210      	movs	r2, #16
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f01b fd1f 	bl	8022668 <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4413      	add	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4a84      	ldr	r2, [pc, #528]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c36:	1898      	adds	r0, r3, r2
 8006c38:	78ba      	ldrb	r2, [r7, #2]
 8006c3a:	4613      	mov	r3, r2
 8006c3c:	009b      	lsls	r3, r3, #2
 8006c3e:	4413      	add	r3, r2
 8006c40:	009b      	lsls	r3, r3, #2
 8006c42:	4a82      	ldr	r2, [pc, #520]	; (8006e4c <Service_Msg_Extr+0x7dc>)
 8006c44:	4413      	add	r3, r2
 8006c46:	2214      	movs	r2, #20
 8006c48:	4619      	mov	r1, r3
 8006c4a:	f01b fce5 	bl	8022618 <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006c4e:	78bb      	ldrb	r3, [r7, #2]
 8006c50:	4a7f      	ldr	r2, [pc, #508]	; (8006e50 <Service_Msg_Extr+0x7e0>)
 8006c52:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006c56:	78ba      	ldrb	r2, [r7, #2]
 8006c58:	487b      	ldr	r0, [pc, #492]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c5a:	4613      	mov	r3, r2
 8006c5c:	009b      	lsls	r3, r3, #2
 8006c5e:	4413      	add	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4403      	add	r3, r0
 8006c64:	3312      	adds	r3, #18
 8006c66:	881b      	ldrh	r3, [r3, #0]
 8006c68:	4299      	cmp	r1, r3
 8006c6a:	d052      	beq.n	8006d12 <Service_Msg_Extr+0x6a2>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c6c:	78ba      	ldrb	r2, [r7, #2]
 8006c6e:	78b9      	ldrb	r1, [r7, #2]
 8006c70:	4875      	ldr	r0, [pc, #468]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	4403      	add	r3, r0
 8006c7c:	3312      	adds	r3, #18
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	4b73      	ldr	r3, [pc, #460]	; (8006e50 <Service_Msg_Extr+0x7e0>)
 8006c82:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006c86:	2214      	movs	r2, #20
 8006c88:	2100      	movs	r1, #0
 8006c8a:	4872      	ldr	r0, [pc, #456]	; (8006e54 <Service_Msg_Extr+0x7e4>)
 8006c8c:	f01b fcec 	bl	8022668 <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006c90:	78ba      	ldrb	r2, [r7, #2]
 8006c92:	4613      	mov	r3, r2
 8006c94:	009b      	lsls	r3, r3, #2
 8006c96:	4413      	add	r3, r2
 8006c98:	009b      	lsls	r3, r3, #2
 8006c9a:	4a6b      	ldr	r2, [pc, #428]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006c9c:	4413      	add	r3, r2
 8006c9e:	2214      	movs	r2, #20
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	486c      	ldr	r0, [pc, #432]	; (8006e54 <Service_Msg_Extr+0x7e4>)
 8006ca4:	f01b fcb8 	bl	8022618 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8006ca8:	f240 2007 	movw	r0, #519	; 0x207
 8006cac:	f008 fde0 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006cb0:	78b9      	ldrb	r1, [r7, #2]
 8006cb2:	78ba      	ldrb	r2, [r7, #2]
 8006cb4:	4864      	ldr	r0, [pc, #400]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	009b      	lsls	r3, r3, #2
 8006cba:	440b      	add	r3, r1
 8006cbc:	009b      	lsls	r3, r3, #2
 8006cbe:	4403      	add	r3, r0
 8006cc0:	3312      	adds	r3, #18
 8006cc2:	8818      	ldrh	r0, [r3, #0]
 8006cc4:	4964      	ldr	r1, [pc, #400]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	3306      	adds	r3, #6
 8006cd2:	4602      	mov	r2, r0
 8006cd4:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006cd6:	78bb      	ldrb	r3, [r7, #2]
 8006cd8:	4a60      	ldr	r2, [pc, #384]	; (8006e5c <Service_Msg_Extr+0x7ec>)
 8006cda:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d117      	bne.n	8006d12 <Service_Msg_Extr+0x6a2>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006ce2:	78bb      	ldrb	r3, [r7, #2]
 8006ce4:	011b      	lsls	r3, r3, #4
 8006ce6:	4a5e      	ldr	r2, [pc, #376]	; (8006e60 <Service_Msg_Extr+0x7f0>)
 8006ce8:	4413      	add	r3, r2
 8006cea:	1c98      	adds	r0, r3, #2
 8006cec:	78ba      	ldrb	r2, [r7, #2]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	4413      	add	r3, r2
 8006cf4:	009b      	lsls	r3, r3, #2
 8006cf6:	4a54      	ldr	r2, [pc, #336]	; (8006e48 <Service_Msg_Extr+0x7d8>)
 8006cf8:	4413      	add	r3, r2
 8006cfa:	3301      	adds	r3, #1
 8006cfc:	2210      	movs	r2, #16
 8006cfe:	4619      	mov	r1, r3
 8006d00:	f01b fc8a 	bl	8022618 <memcpy>
#ifdef EI_1
				TransmitCanPkt(EI_PROCESS_DATA);
 8006d04:	f240 1019 	movw	r0, #281	; 0x119
 8006d08:	f008 fdb2 	bl	800f870 <TransmitCanPkt>
				MIE_Signal_Send_CLK = Ticks;
 8006d0c:	4a55      	ldr	r2, [pc, #340]	; (8006e64 <Service_Msg_Extr+0x7f4>)
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	6013      	str	r3, [r2, #0]
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006d12:	78ba      	ldrb	r2, [r7, #2]
 8006d14:	4950      	ldr	r1, [pc, #320]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d16:	4613      	mov	r3, r2
 8006d18:	005b      	lsls	r3, r3, #1
 8006d1a:	4413      	add	r3, r2
 8006d1c:	00db      	lsls	r3, r3, #3
 8006d1e:	440b      	add	r3, r1
 8006d20:	3314      	adds	r3, #20
 8006d22:	697a      	ldr	r2, [r7, #20]
 8006d24:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006d26:	78ba      	ldrb	r2, [r7, #2]
 8006d28:	494b      	ldr	r1, [pc, #300]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d2a:	4613      	mov	r3, r2
 8006d2c:	005b      	lsls	r3, r3, #1
 8006d2e:	4413      	add	r3, r2
 8006d30:	00db      	lsls	r3, r3, #3
 8006d32:	440b      	add	r3, r1
 8006d34:	3305      	adds	r3, #5
 8006d36:	2206      	movs	r2, #6
 8006d38:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006d3a:	78ba      	ldrb	r2, [r7, #2]
 8006d3c:	4946      	ldr	r1, [pc, #280]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d3e:	4613      	mov	r3, r2
 8006d40:	005b      	lsls	r3, r3, #1
 8006d42:	4413      	add	r3, r2
 8006d44:	00db      	lsls	r3, r3, #3
 8006d46:	440b      	add	r3, r1
 8006d48:	78ba      	ldrb	r2, [r7, #2]
 8006d4a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006d4c:	78ba      	ldrb	r2, [r7, #2]
 8006d4e:	4942      	ldr	r1, [pc, #264]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d50:	4613      	mov	r3, r2
 8006d52:	005b      	lsls	r3, r3, #1
 8006d54:	4413      	add	r3, r2
 8006d56:	00db      	lsls	r3, r3, #3
 8006d58:	440b      	add	r3, r1
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006d60:	78ba      	ldrb	r2, [r7, #2]
 8006d62:	493d      	ldr	r1, [pc, #244]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d64:	4613      	mov	r3, r2
 8006d66:	005b      	lsls	r3, r3, #1
 8006d68:	4413      	add	r3, r2
 8006d6a:	00db      	lsls	r3, r3, #3
 8006d6c:	440b      	add	r3, r1
 8006d6e:	3302      	adds	r3, #2
 8006d70:	7ffa      	ldrb	r2, [r7, #31]
 8006d72:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006d74:	2218      	movs	r2, #24
 8006d76:	2100      	movs	r1, #0
 8006d78:	483b      	ldr	r0, [pc, #236]	; (8006e68 <Service_Msg_Extr+0x7f8>)
 8006d7a:	f01b fc75 	bl	8022668 <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006d7e:	78ba      	ldrb	r2, [r7, #2]
 8006d80:	4613      	mov	r3, r2
 8006d82:	005b      	lsls	r3, r3, #1
 8006d84:	4413      	add	r3, r2
 8006d86:	00db      	lsls	r3, r3, #3
 8006d88:	4a33      	ldr	r2, [pc, #204]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006d8a:	4413      	add	r3, r2
 8006d8c:	2218      	movs	r2, #24
 8006d8e:	4619      	mov	r1, r3
 8006d90:	4835      	ldr	r0, [pc, #212]	; (8006e68 <Service_Msg_Extr+0x7f8>)
 8006d92:	f01b fc41 	bl	8022618 <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 8006d96:	f240 2001 	movw	r0, #513	; 0x201
 8006d9a:	f008 fd69 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006d9e:	78ba      	ldrb	r2, [r7, #2]
 8006da0:	492d      	ldr	r1, [pc, #180]	; (8006e58 <Service_Msg_Extr+0x7e8>)
 8006da2:	4613      	mov	r3, r2
 8006da4:	005b      	lsls	r3, r3, #1
 8006da6:	4413      	add	r3, r2
 8006da8:	00db      	lsls	r3, r3, #3
 8006daa:	440b      	add	r3, r1
 8006dac:	3301      	adds	r3, #1
 8006dae:	2200      	movs	r2, #0
 8006db0:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006db2:	78bb      	ldrb	r3, [r7, #2]
 8006db4:	492d      	ldr	r1, [pc, #180]	; (8006e6c <Service_Msg_Extr+0x7fc>)
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006dbc:	7ffb      	ldrb	r3, [r7, #31]
 8006dbe:	2b01      	cmp	r3, #1
 8006dc0:	d11d      	bne.n	8006dfe <Service_Msg_Extr+0x78e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006dc2:	78bb      	ldrb	r3, [r7, #2]
 8006dc4:	492a      	ldr	r1, [pc, #168]	; (8006e70 <Service_Msg_Extr+0x800>)
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006dcc:	78bb      	ldrb	r3, [r7, #2]
 8006dce:	4a29      	ldr	r2, [pc, #164]	; (8006e74 <Service_Msg_Extr+0x804>)
 8006dd0:	2101      	movs	r1, #1
 8006dd2:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006dd4:	78ba      	ldrb	r2, [r7, #2]
 8006dd6:	4928      	ldr	r1, [pc, #160]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006dd8:	4613      	mov	r3, r2
 8006dda:	005b      	lsls	r3, r3, #1
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	440b      	add	r3, r1
 8006de2:	3301      	adds	r3, #1
 8006de4:	2201      	movs	r2, #1
 8006de6:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006de8:	78ba      	ldrb	r2, [r7, #2]
 8006dea:	4923      	ldr	r1, [pc, #140]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006dec:	4613      	mov	r3, r2
 8006dee:	005b      	lsls	r3, r3, #1
 8006df0:	4413      	add	r3, r2
 8006df2:	009b      	lsls	r3, r3, #2
 8006df4:	440b      	add	r3, r1
 8006df6:	3304      	adds	r3, #4
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	601a      	str	r2, [r3, #0]
 8006dfc:	e017      	b.n	8006e2e <Service_Msg_Extr+0x7be>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006dfe:	78bb      	ldrb	r3, [r7, #2]
 8006e00:	4a1c      	ldr	r2, [pc, #112]	; (8006e74 <Service_Msg_Extr+0x804>)
 8006e02:	2100      	movs	r1, #0
 8006e04:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006e06:	78ba      	ldrb	r2, [r7, #2]
 8006e08:	491b      	ldr	r1, [pc, #108]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	005b      	lsls	r3, r3, #1
 8006e0e:	4413      	add	r3, r2
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	440b      	add	r3, r1
 8006e14:	3308      	adds	r3, #8
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006e1a:	78ba      	ldrb	r2, [r7, #2]
 8006e1c:	4916      	ldr	r1, [pc, #88]	; (8006e78 <Service_Msg_Extr+0x808>)
 8006e1e:	4613      	mov	r3, r2
 8006e20:	005b      	lsls	r3, r3, #1
 8006e22:	4413      	add	r3, r2
 8006e24:	009b      	lsls	r3, r3, #2
 8006e26:	440b      	add	r3, r1
 8006e28:	3301      	adds	r3, #1
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006e32:	4812      	ldr	r0, [pc, #72]	; (8006e7c <Service_Msg_Extr+0x80c>)
 8006e34:	f011 f9df 	bl	80181f6 <HAL_GPIO_TogglePin>

}
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	200010d8 	.word	0x200010d8
 8006e44:	200011c4 	.word	0x200011c4
 8006e48:	200021c0 	.word	0x200021c0
 8006e4c:	200020f8 	.word	0x200020f8
 8006e50:	20000f00 	.word	0x20000f00
 8006e54:	20002350 	.word	0x20002350
 8006e58:	20001674 	.word	0x20001674
 8006e5c:	20000ec4 	.word	0x20000ec4
 8006e60:	200010e4 	.word	0x200010e4
 8006e64:	20000e70 	.word	0x20000e70
 8006e68:	20001854 	.word	0x20001854
 8006e6c:	20000e44 	.word	0x20000e44
 8006e70:	20000f14 	.word	0x20000f14
 8006e74:	20000f64 	.word	0x20000f64
 8006e78:	20002008 	.word	0x20002008
 8006e7c:	40021c00 	.word	0x40021c00

08006e80 <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006e80:	b590      	push	{r4, r7, lr}
 8006e82:	b095      	sub	sp, #84	; 0x54
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	4603      	mov	r3, r0
 8006e88:	460a      	mov	r2, r1
 8006e8a:	71fb      	strb	r3, [r7, #7]
 8006e8c:	4613      	mov	r3, r2
 8006e8e:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006e90:	2300      	movs	r3, #0
 8006e92:	60fb      	str	r3, [r7, #12]
 8006e94:	f107 0310 	add.w	r3, r7, #16
 8006e98:	2238      	movs	r2, #56	; 0x38
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f01b fbe3 	bl	8022668 <memset>

	BITSTUFFINIT(0, 0);
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006eae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eb2:	f107 020c 	add.w	r2, r7, #12
 8006eb6:	441a      	add	r2, r3
 8006eb8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ebc:	23f4      	movs	r3, #244	; 0xf4
 8006ebe:	2108      	movs	r1, #8
 8006ec0:	f7f9 fc34 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006ec4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ec8:	3308      	adds	r3, #8
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	da00      	bge.n	8006ed0 <Send_Service_Signal_Message+0x50>
 8006ece:	3307      	adds	r3, #7
 8006ed0:	10db      	asrs	r3, r3, #3
 8006ed2:	b29a      	uxth	r2, r3
 8006ed4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ed8:	4413      	add	r3, r2
 8006eda:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ede:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ee2:	3308      	adds	r3, #8
 8006ee4:	b29b      	uxth	r3, r3
 8006ee6:	b21b      	sxth	r3, r3
 8006ee8:	425a      	negs	r2, r3
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	f002 0207 	and.w	r2, r2, #7
 8006ef2:	bf58      	it	pl
 8006ef4:	4253      	negpl	r3, r2
 8006ef6:	b21b      	sxth	r3, r3
 8006ef8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006efc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f00:	f107 020c 	add.w	r2, r7, #12
 8006f04:	441a      	add	r2, r3
 8006f06:	79fb      	ldrb	r3, [r7, #7]
 8006f08:	497b      	ldr	r1, [pc, #492]	; (80070f8 <Send_Service_Signal_Message+0x278>)
 8006f0a:	3366      	adds	r3, #102	; 0x66
 8006f0c:	009b      	lsls	r3, r3, #2
 8006f0e:	440b      	add	r3, r1
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f16:	2110      	movs	r1, #16
 8006f18:	f7f9 fc08 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f1c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f20:	3310      	adds	r3, #16
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da00      	bge.n	8006f28 <Send_Service_Signal_Message+0xa8>
 8006f26:	3307      	adds	r3, #7
 8006f28:	10db      	asrs	r3, r3, #3
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f30:	4413      	add	r3, r2
 8006f32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f36:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f3a:	3310      	adds	r3, #16
 8006f3c:	b29b      	uxth	r3, r3
 8006f3e:	b21b      	sxth	r3, r3
 8006f40:	425a      	negs	r2, r3
 8006f42:	f003 0307 	and.w	r3, r3, #7
 8006f46:	f002 0207 	and.w	r2, r2, #7
 8006f4a:	bf58      	it	pl
 8006f4c:	4253      	negpl	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006f54:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f58:	f107 020c 	add.w	r2, r7, #12
 8006f5c:	441a      	add	r2, r3
 8006f5e:	79fb      	ldrb	r3, [r7, #7]
 8006f60:	4965      	ldr	r1, [pc, #404]	; (80070f8 <Send_Service_Signal_Message+0x278>)
 8006f62:	3370      	adds	r3, #112	; 0x70
 8006f64:	009b      	lsls	r3, r3, #2
 8006f66:	440b      	add	r3, r1
 8006f68:	685b      	ldr	r3, [r3, #4]
 8006f6a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f6e:	2110      	movs	r1, #16
 8006f70:	f7f9 fbdc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f74:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f78:	3310      	adds	r3, #16
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	da00      	bge.n	8006f80 <Send_Service_Signal_Message+0x100>
 8006f7e:	3307      	adds	r3, #7
 8006f80:	10db      	asrs	r3, r3, #3
 8006f82:	b29a      	uxth	r2, r3
 8006f84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f88:	4413      	add	r3, r2
 8006f8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f8e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f92:	3310      	adds	r3, #16
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	b21b      	sxth	r3, r3
 8006f98:	425a      	negs	r2, r3
 8006f9a:	f003 0307 	and.w	r3, r3, #7
 8006f9e:	f002 0207 	and.w	r2, r2, #7
 8006fa2:	bf58      	it	pl
 8006fa4:	4253      	negpl	r3, r2
 8006fa6:	b21b      	sxth	r3, r3
 8006fa8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006fac:	4b53      	ldr	r3, [pc, #332]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	089b      	lsrs	r3, r3, #2
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d035      	beq.n	8007026 <Send_Service_Signal_Message+0x1a6>
 8006fba:	4b50      	ldr	r3, [pc, #320]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8006fbc:	791b      	ldrb	r3, [r3, #4]
 8006fbe:	79fa      	ldrb	r2, [r7, #7]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d130      	bne.n	8007026 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006fca:	484d      	ldr	r0, [pc, #308]	; (8007100 <Send_Service_Signal_Message+0x280>)
 8006fcc:	f013 f8dc 	bl	801a188 <HAL_RNG_GetRandomNumber>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	4b4c      	ldr	r3, [pc, #304]	; (8007104 <Send_Service_Signal_Message+0x284>)
 8006fd4:	fba3 1302 	umull	r1, r3, r3, r2
 8006fd8:	099b      	lsrs	r3, r3, #6
 8006fda:	21c8      	movs	r1, #200	; 0xc8
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8006fe6:	4848      	ldr	r0, [pc, #288]	; (8007108 <Send_Service_Signal_Message+0x288>)
 8006fe8:	f01b fcc2 	bl	8022970 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006fec:	79fb      	ldrb	r3, [r7, #7]
 8006fee:	4a47      	ldr	r2, [pc, #284]	; (800710c <Send_Service_Signal_Message+0x28c>)
 8006ff0:	011b      	lsls	r3, r3, #4
 8006ff2:	4413      	add	r3, r2
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	4845      	ldr	r0, [pc, #276]	; (8007110 <Send_Service_Signal_Message+0x290>)
 8006ffc:	f01b fc1c 	bl	8022838 <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8007000:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8007004:	4619      	mov	r1, r3
 8007006:	4843      	ldr	r0, [pc, #268]	; (8007114 <Send_Service_Signal_Message+0x294>)
 8007008:	f01b fc16 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 800700c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007010:	f107 020c 	add.w	r2, r7, #12
 8007014:	441a      	add	r2, r3
 8007016:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800701a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800701e:	2108      	movs	r1, #8
 8007020:	f7f9 fb84 	bl	800072c <InsertBits>
	{
 8007024:	e00f      	b.n	8007046 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8007026:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800702a:	f107 020c 	add.w	r2, r7, #12
 800702e:	441a      	add	r2, r3
 8007030:	79fb      	ldrb	r3, [r7, #7]
 8007032:	4936      	ldr	r1, [pc, #216]	; (800710c <Send_Service_Signal_Message+0x28c>)
 8007034:	011b      	lsls	r3, r3, #4
 8007036:	440b      	add	r3, r1
 8007038:	3301      	adds	r3, #1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007040:	2108      	movs	r1, #8
 8007042:	f7f9 fb73 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8007046:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800704a:	3308      	adds	r3, #8
 800704c:	2b00      	cmp	r3, #0
 800704e:	da00      	bge.n	8007052 <Send_Service_Signal_Message+0x1d2>
 8007050:	3307      	adds	r3, #7
 8007052:	10db      	asrs	r3, r3, #3
 8007054:	b29a      	uxth	r2, r3
 8007056:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800705a:	4413      	add	r3, r2
 800705c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007060:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007064:	3308      	adds	r3, #8
 8007066:	b29b      	uxth	r3, r3
 8007068:	b21b      	sxth	r3, r3
 800706a:	425a      	negs	r2, r3
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	f002 0207 	and.w	r2, r2, #7
 8007074:	bf58      	it	pl
 8007076:	4253      	negpl	r3, r2
 8007078:	b21b      	sxth	r3, r3
 800707a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800707e:	4b1f      	ldr	r3, [pc, #124]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	08db      	lsrs	r3, r3, #3
 8007084:	f003 0301 	and.w	r3, r3, #1
 8007088:	2b00      	cmp	r3, #0
 800708a:	d04b      	beq.n	8007124 <Send_Service_Signal_Message+0x2a4>
 800708c:	4b1b      	ldr	r3, [pc, #108]	; (80070fc <Send_Service_Signal_Message+0x27c>)
 800708e:	791b      	ldrb	r3, [r3, #4]
 8007090:	79fa      	ldrb	r2, [r7, #7]
 8007092:	429a      	cmp	r2, r3
 8007094:	d146      	bne.n	8007124 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007096:	2300      	movs	r3, #0
 8007098:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 800709c:	4818      	ldr	r0, [pc, #96]	; (8007100 <Send_Service_Signal_Message+0x280>)
 800709e:	f013 f873 	bl	801a188 <HAL_RNG_GetRandomNumber>
 80070a2:	4602      	mov	r2, r0
 80070a4:	4b17      	ldr	r3, [pc, #92]	; (8007104 <Send_Service_Signal_Message+0x284>)
 80070a6:	fba3 1302 	umull	r1, r3, r3, r2
 80070aa:	099b      	lsrs	r3, r3, #6
 80070ac:	21c8      	movs	r1, #200	; 0xc8
 80070ae:	fb01 f303 	mul.w	r3, r1, r3
 80070b2:	1ad3      	subs	r3, r2, r3
 80070b4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 80070b8:	4817      	ldr	r0, [pc, #92]	; (8007118 <Send_Service_Signal_Message+0x298>)
 80070ba:	f01b fc59 	bl	8022970 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 80070be:	79fb      	ldrb	r3, [r7, #7]
 80070c0:	4a12      	ldr	r2, [pc, #72]	; (800710c <Send_Service_Signal_Message+0x28c>)
 80070c2:	011b      	lsls	r3, r3, #4
 80070c4:	4413      	add	r3, r2
 80070c6:	3302      	adds	r3, #2
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	4619      	mov	r1, r3
 80070cc:	4813      	ldr	r0, [pc, #76]	; (800711c <Send_Service_Signal_Message+0x29c>)
 80070ce:	f01b fbb3 	bl	8022838 <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 80070d2:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070d6:	4619      	mov	r1, r3
 80070d8:	4811      	ldr	r0, [pc, #68]	; (8007120 <Send_Service_Signal_Message+0x2a0>)
 80070da:	f01b fbad 	bl	8022838 <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 80070de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070e2:	f107 020c 	add.w	r2, r7, #12
 80070e6:	441a      	add	r2, r3
 80070e8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80070ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80070f0:	2108      	movs	r1, #8
 80070f2:	f7f9 fb1b 	bl	800072c <InsertBits>
	{
 80070f6:	e033      	b.n	8007160 <Send_Service_Signal_Message+0x2e0>
 80070f8:	20000304 	.word	0x20000304
 80070fc:	20001a1c 	.word	0x20001a1c
 8007100:	2000a05c 	.word	0x2000a05c
 8007104:	51eb851f 	.word	0x51eb851f
 8007108:	0802438c 	.word	0x0802438c
 800710c:	200011c4 	.word	0x200011c4
 8007110:	08024930 	.word	0x08024930
 8007114:	08024950 	.word	0x08024950
 8007118:	080243f0 	.word	0x080243f0
 800711c:	08024970 	.word	0x08024970
 8007120:	08024990 	.word	0x08024990
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8007124:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007128:	f107 020c 	add.w	r2, r7, #12
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	79fb      	ldrb	r3, [r7, #7]
 8007130:	484e      	ldr	r0, [pc, #312]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 8007132:	011a      	lsls	r2, r3, #4
 8007134:	4402      	add	r2, r0
 8007136:	3202      	adds	r2, #2
 8007138:	7812      	ldrb	r2, [r2, #0]
 800713a:	3201      	adds	r2, #1
 800713c:	b2d4      	uxtb	r4, r2
 800713e:	484b      	ldr	r0, [pc, #300]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 8007140:	011a      	lsls	r2, r3, #4
 8007142:	4402      	add	r2, r0
 8007144:	3202      	adds	r2, #2
 8007146:	4620      	mov	r0, r4
 8007148:	7010      	strb	r0, [r2, #0]
 800714a:	4a48      	ldr	r2, [pc, #288]	; (800726c <Send_Service_Signal_Message+0x3ec>)
 800714c:	011b      	lsls	r3, r3, #4
 800714e:	4413      	add	r3, r2
 8007150:	3302      	adds	r3, #2
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007158:	460a      	mov	r2, r1
 800715a:	2108      	movs	r1, #8
 800715c:	f7f9 fae6 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8007160:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007164:	3308      	adds	r3, #8
 8007166:	2b00      	cmp	r3, #0
 8007168:	da00      	bge.n	800716c <Send_Service_Signal_Message+0x2ec>
 800716a:	3307      	adds	r3, #7
 800716c:	10db      	asrs	r3, r3, #3
 800716e:	b29a      	uxth	r2, r3
 8007170:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007174:	4413      	add	r3, r2
 8007176:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800717a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800717e:	3308      	adds	r3, #8
 8007180:	b29b      	uxth	r3, r3
 8007182:	b21b      	sxth	r3, r3
 8007184:	425a      	negs	r2, r3
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	f002 0207 	and.w	r2, r2, #7
 800718e:	bf58      	it	pl
 8007190:	4253      	negpl	r3, r2
 8007192:	b21b      	sxth	r3, r3
 8007194:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007198:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800719c:	f107 020c 	add.w	r2, r7, #12
 80071a0:	441a      	add	r2, r3
 80071a2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071a6:	2306      	movs	r3, #6
 80071a8:	2108      	movs	r1, #8
 80071aa:	f7f9 fabf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80071ae:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071b2:	3308      	adds	r3, #8
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	da00      	bge.n	80071ba <Send_Service_Signal_Message+0x33a>
 80071b8:	3307      	adds	r3, #7
 80071ba:	10db      	asrs	r3, r3, #3
 80071bc:	b29a      	uxth	r2, r3
 80071be:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071c2:	4413      	add	r3, r2
 80071c4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071c8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071cc:	3308      	adds	r3, #8
 80071ce:	b29b      	uxth	r3, r3
 80071d0:	b21b      	sxth	r3, r3
 80071d2:	425a      	negs	r2, r3
 80071d4:	f003 0307 	and.w	r3, r3, #7
 80071d8:	f002 0207 	and.w	r2, r2, #7
 80071dc:	bf58      	it	pl
 80071de:	4253      	negpl	r3, r2
 80071e0:	b21b      	sxth	r3, r3
 80071e2:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 80071e6:	79fb      	ldrb	r3, [r7, #7]
 80071e8:	4a21      	ldr	r2, [pc, #132]	; (8007270 <Send_Service_Signal_Message+0x3f0>)
 80071ea:	5cd3      	ldrb	r3, [r2, r3]
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d147      	bne.n	8007280 <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 80071f0:	f004 f910 	bl	800b414 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80071f4:	79fa      	ldrb	r2, [r7, #7]
 80071f6:	4613      	mov	r3, r2
 80071f8:	005b      	lsls	r3, r3, #1
 80071fa:	4413      	add	r3, r2
 80071fc:	005b      	lsls	r3, r3, #1
 80071fe:	4a1d      	ldr	r2, [pc, #116]	; (8007274 <Send_Service_Signal_Message+0x3f4>)
 8007200:	4413      	add	r3, r2
 8007202:	4a1d      	ldr	r2, [pc, #116]	; (8007278 <Send_Service_Signal_Message+0x3f8>)
 8007204:	6811      	ldr	r1, [r2, #0]
 8007206:	6019      	str	r1, [r3, #0]
 8007208:	8892      	ldrh	r2, [r2, #4]
 800720a:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800720c:	481b      	ldr	r0, [pc, #108]	; (800727c <Send_Service_Signal_Message+0x3fc>)
 800720e:	f01b fbaf 	bl	8022970 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8007212:	79fb      	ldrb	r3, [r7, #7]
 8007214:	4a16      	ldr	r2, [pc, #88]	; (8007270 <Send_Service_Signal_Message+0x3f0>)
 8007216:	2100      	movs	r1, #0
 8007218:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 800721a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800721e:	f107 020c 	add.w	r2, r7, #12
 8007222:	441a      	add	r2, r3
 8007224:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007228:	2369      	movs	r3, #105	; 0x69
 800722a:	2110      	movs	r1, #16
 800722c:	f7f9 fa7e 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007230:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007234:	3310      	adds	r3, #16
 8007236:	2b00      	cmp	r3, #0
 8007238:	da00      	bge.n	800723c <Send_Service_Signal_Message+0x3bc>
 800723a:	3307      	adds	r3, #7
 800723c:	10db      	asrs	r3, r3, #3
 800723e:	b29a      	uxth	r2, r3
 8007240:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007244:	4413      	add	r3, r2
 8007246:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800724a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800724e:	3310      	adds	r3, #16
 8007250:	b29b      	uxth	r3, r3
 8007252:	b21b      	sxth	r3, r3
 8007254:	425a      	negs	r2, r3
 8007256:	f003 0307 	and.w	r3, r3, #7
 800725a:	f002 0207 	and.w	r2, r2, #7
 800725e:	bf58      	it	pl
 8007260:	4253      	negpl	r3, r2
 8007262:	b21b      	sxth	r3, r3
 8007264:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007268:	e031      	b.n	80072ce <Send_Service_Signal_Message+0x44e>
 800726a:	bf00      	nop
 800726c:	200011c4 	.word	0x200011c4
 8007270:	200010d8 	.word	0x200010d8
 8007274:	20001188 	.word	0x20001188
 8007278:	20002bcc 	.word	0x20002bcc
 800727c:	0802470c 	.word	0x0802470c
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 8007280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007284:	f107 020c 	add.w	r2, r7, #12
 8007288:	441a      	add	r2, r3
 800728a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800728e:	2329      	movs	r3, #41	; 0x29
 8007290:	2110      	movs	r1, #16
 8007292:	f7f9 fa4b 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007296:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800729a:	3310      	adds	r3, #16
 800729c:	2b00      	cmp	r3, #0
 800729e:	da00      	bge.n	80072a2 <Send_Service_Signal_Message+0x422>
 80072a0:	3307      	adds	r3, #7
 80072a2:	10db      	asrs	r3, r3, #3
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072aa:	4413      	add	r3, r2
 80072ac:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072b0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072b4:	3310      	adds	r3, #16
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	b21b      	sxth	r3, r3
 80072ba:	425a      	negs	r2, r3
 80072bc:	f003 0307 	and.w	r3, r3, #7
 80072c0:	f002 0207 	and.w	r2, r2, #7
 80072c4:	bf58      	it	pl
 80072c6:	4253      	negpl	r3, r2
 80072c8:	b21b      	sxth	r3, r3
 80072ca:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 80072ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072d2:	f107 020c 	add.w	r2, r7, #12
 80072d6:	18d1      	adds	r1, r2, r3
 80072d8:	79fa      	ldrb	r2, [r7, #7]
 80072da:	48b5      	ldr	r0, [pc, #724]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80072dc:	4613      	mov	r3, r2
 80072de:	005b      	lsls	r3, r3, #1
 80072e0:	4413      	add	r3, r2
 80072e2:	005b      	lsls	r3, r3, #1
 80072e4:	4403      	add	r3, r0
 80072e6:	3305      	adds	r3, #5
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072ee:	460a      	mov	r2, r1
 80072f0:	2108      	movs	r1, #8
 80072f2:	f7f9 fa1b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80072f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072fa:	3308      	adds	r3, #8
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	da00      	bge.n	8007302 <Send_Service_Signal_Message+0x482>
 8007300:	3307      	adds	r3, #7
 8007302:	10db      	asrs	r3, r3, #3
 8007304:	b29a      	uxth	r2, r3
 8007306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800730a:	4413      	add	r3, r2
 800730c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007310:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007314:	3308      	adds	r3, #8
 8007316:	b29b      	uxth	r3, r3
 8007318:	b21b      	sxth	r3, r3
 800731a:	425a      	negs	r2, r3
 800731c:	f003 0307 	and.w	r3, r3, #7
 8007320:	f002 0207 	and.w	r2, r2, #7
 8007324:	bf58      	it	pl
 8007326:	4253      	negpl	r3, r2
 8007328:	b21b      	sxth	r3, r3
 800732a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 800732e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007332:	f107 020c 	add.w	r2, r7, #12
 8007336:	18d1      	adds	r1, r2, r3
 8007338:	79fa      	ldrb	r2, [r7, #7]
 800733a:	489d      	ldr	r0, [pc, #628]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800733c:	4613      	mov	r3, r2
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	4413      	add	r3, r2
 8007342:	005b      	lsls	r3, r3, #1
 8007344:	4403      	add	r3, r0
 8007346:	3304      	adds	r3, #4
 8007348:	781b      	ldrb	r3, [r3, #0]
 800734a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800734e:	460a      	mov	r2, r1
 8007350:	2108      	movs	r1, #8
 8007352:	f7f9 f9eb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007356:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800735a:	3308      	adds	r3, #8
 800735c:	2b00      	cmp	r3, #0
 800735e:	da00      	bge.n	8007362 <Send_Service_Signal_Message+0x4e2>
 8007360:	3307      	adds	r3, #7
 8007362:	10db      	asrs	r3, r3, #3
 8007364:	b29a      	uxth	r2, r3
 8007366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800736a:	4413      	add	r3, r2
 800736c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007370:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007374:	3308      	adds	r3, #8
 8007376:	b29b      	uxth	r3, r3
 8007378:	b21b      	sxth	r3, r3
 800737a:	425a      	negs	r2, r3
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	f002 0207 	and.w	r2, r2, #7
 8007384:	bf58      	it	pl
 8007386:	4253      	negpl	r3, r2
 8007388:	b21b      	sxth	r3, r3
 800738a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800738e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007392:	f107 020c 	add.w	r2, r7, #12
 8007396:	18d1      	adds	r1, r2, r3
 8007398:	79fa      	ldrb	r2, [r7, #7]
 800739a:	4885      	ldr	r0, [pc, #532]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800739c:	4613      	mov	r3, r2
 800739e:	005b      	lsls	r3, r3, #1
 80073a0:	4413      	add	r3, r2
 80073a2:	005b      	lsls	r3, r3, #1
 80073a4:	4403      	add	r3, r0
 80073a6:	3303      	adds	r3, #3
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073ae:	460a      	mov	r2, r1
 80073b0:	2108      	movs	r1, #8
 80073b2:	f7f9 f9bb 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073b6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073ba:	3308      	adds	r3, #8
 80073bc:	2b00      	cmp	r3, #0
 80073be:	da00      	bge.n	80073c2 <Send_Service_Signal_Message+0x542>
 80073c0:	3307      	adds	r3, #7
 80073c2:	10db      	asrs	r3, r3, #3
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073ca:	4413      	add	r3, r2
 80073cc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073d0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073d4:	3308      	adds	r3, #8
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	b21b      	sxth	r3, r3
 80073da:	425a      	negs	r2, r3
 80073dc:	f003 0307 	and.w	r3, r3, #7
 80073e0:	f002 0207 	and.w	r2, r2, #7
 80073e4:	bf58      	it	pl
 80073e6:	4253      	negpl	r3, r2
 80073e8:	b21b      	sxth	r3, r3
 80073ea:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 80073ee:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073f2:	f107 020c 	add.w	r2, r7, #12
 80073f6:	18d1      	adds	r1, r2, r3
 80073f8:	79fa      	ldrb	r2, [r7, #7]
 80073fa:	486d      	ldr	r0, [pc, #436]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80073fc:	4613      	mov	r3, r2
 80073fe:	005b      	lsls	r3, r3, #1
 8007400:	4413      	add	r3, r2
 8007402:	005b      	lsls	r3, r3, #1
 8007404:	4403      	add	r3, r0
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800740c:	460a      	mov	r2, r1
 800740e:	2108      	movs	r1, #8
 8007410:	f7f9 f98c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007414:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007418:	3308      	adds	r3, #8
 800741a:	2b00      	cmp	r3, #0
 800741c:	da00      	bge.n	8007420 <Send_Service_Signal_Message+0x5a0>
 800741e:	3307      	adds	r3, #7
 8007420:	10db      	asrs	r3, r3, #3
 8007422:	b29a      	uxth	r2, r3
 8007424:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007428:	4413      	add	r3, r2
 800742a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800742e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007432:	3308      	adds	r3, #8
 8007434:	b29b      	uxth	r3, r3
 8007436:	b21b      	sxth	r3, r3
 8007438:	425a      	negs	r2, r3
 800743a:	f003 0307 	and.w	r3, r3, #7
 800743e:	f002 0207 	and.w	r2, r2, #7
 8007442:	bf58      	it	pl
 8007444:	4253      	negpl	r3, r2
 8007446:	b21b      	sxth	r3, r3
 8007448:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 800744c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007450:	f107 020c 	add.w	r2, r7, #12
 8007454:	18d1      	adds	r1, r2, r3
 8007456:	79fa      	ldrb	r2, [r7, #7]
 8007458:	4855      	ldr	r0, [pc, #340]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 800745a:	4613      	mov	r3, r2
 800745c:	005b      	lsls	r3, r3, #1
 800745e:	4413      	add	r3, r2
 8007460:	005b      	lsls	r3, r3, #1
 8007462:	4403      	add	r3, r0
 8007464:	3301      	adds	r3, #1
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800746c:	460a      	mov	r2, r1
 800746e:	2108      	movs	r1, #8
 8007470:	f7f9 f95c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007474:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007478:	3308      	adds	r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	da00      	bge.n	8007480 <Send_Service_Signal_Message+0x600>
 800747e:	3307      	adds	r3, #7
 8007480:	10db      	asrs	r3, r3, #3
 8007482:	b29a      	uxth	r2, r3
 8007484:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007488:	4413      	add	r3, r2
 800748a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800748e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007492:	3308      	adds	r3, #8
 8007494:	b29b      	uxth	r3, r3
 8007496:	b21b      	sxth	r3, r3
 8007498:	425a      	negs	r2, r3
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	f002 0207 	and.w	r2, r2, #7
 80074a2:	bf58      	it	pl
 80074a4:	4253      	negpl	r3, r2
 80074a6:	b21b      	sxth	r3, r3
 80074a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 80074ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074b0:	f107 020c 	add.w	r2, r7, #12
 80074b4:	18d1      	adds	r1, r2, r3
 80074b6:	79fa      	ldrb	r2, [r7, #7]
 80074b8:	483d      	ldr	r0, [pc, #244]	; (80075b0 <Send_Service_Signal_Message+0x730>)
 80074ba:	4613      	mov	r3, r2
 80074bc:	005b      	lsls	r3, r3, #1
 80074be:	4413      	add	r3, r2
 80074c0:	005b      	lsls	r3, r3, #1
 80074c2:	4403      	add	r3, r0
 80074c4:	3302      	adds	r3, #2
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074cc:	460a      	mov	r2, r1
 80074ce:	2108      	movs	r1, #8
 80074d0:	f7f9 f92c 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80074d4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074d8:	3308      	adds	r3, #8
 80074da:	2b00      	cmp	r3, #0
 80074dc:	da00      	bge.n	80074e0 <Send_Service_Signal_Message+0x660>
 80074de:	3307      	adds	r3, #7
 80074e0:	10db      	asrs	r3, r3, #3
 80074e2:	b29a      	uxth	r2, r3
 80074e4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074e8:	4413      	add	r3, r2
 80074ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074ee:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074f2:	3308      	adds	r3, #8
 80074f4:	b29b      	uxth	r3, r3
 80074f6:	b21b      	sxth	r3, r3
 80074f8:	425a      	negs	r2, r3
 80074fa:	f003 0307 	and.w	r3, r3, #7
 80074fe:	f002 0207 	and.w	r2, r2, #7
 8007502:	bf58      	it	pl
 8007504:	4253      	negpl	r3, r2
 8007506:	b21b      	sxth	r3, r3
 8007508:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 800750c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007510:	f107 020c 	add.w	r2, r7, #12
 8007514:	18d4      	adds	r4, r2, r3
 8007516:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800751a:	f107 030c 	add.w	r3, r7, #12
 800751e:	4611      	mov	r1, r2
 8007520:	4618      	mov	r0, r3
 8007522:	f00b fda3 	bl	801306c <CalculateDirectReverseCrc>
 8007526:	4603      	mov	r3, r0
 8007528:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800752c:	4622      	mov	r2, r4
 800752e:	2120      	movs	r1, #32
 8007530:	f7f9 f8fc 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8007534:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007538:	3320      	adds	r3, #32
 800753a:	2b00      	cmp	r3, #0
 800753c:	da00      	bge.n	8007540 <Send_Service_Signal_Message+0x6c0>
 800753e:	3307      	adds	r3, #7
 8007540:	10db      	asrs	r3, r3, #3
 8007542:	b29a      	uxth	r2, r3
 8007544:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007548:	4413      	add	r3, r2
 800754a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800754e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007552:	3320      	adds	r3, #32
 8007554:	b29b      	uxth	r3, r3
 8007556:	b21b      	sxth	r3, r3
 8007558:	425a      	negs	r2, r3
 800755a:	f003 0307 	and.w	r3, r3, #7
 800755e:	f002 0207 	and.w	r2, r2, #7
 8007562:	bf58      	it	pl
 8007564:	4253      	negpl	r3, r2
 8007566:	b21b      	sxth	r3, r3
 8007568:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800756c:	4b11      	ldr	r3, [pc, #68]	; (80075b4 <Send_Service_Signal_Message+0x734>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	0a5b      	lsrs	r3, r3, #9
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d00b      	beq.n	8007592 <Send_Service_Signal_Message+0x712>
 800757a:	4b0e      	ldr	r3, [pc, #56]	; (80075b4 <Send_Service_Signal_Message+0x734>)
 800757c:	791b      	ldrb	r3, [r3, #4]
 800757e:	79fa      	ldrb	r2, [r7, #7]
 8007580:	429a      	cmp	r2, r3
 8007582:	d106      	bne.n	8007592 <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007584:	480c      	ldr	r0, [pc, #48]	; (80075b8 <Send_Service_Signal_Message+0x738>)
 8007586:	f01b f9f3 	bl	8022970 <puts>
		printf("Not Sending Reply");
 800758a:	480c      	ldr	r0, [pc, #48]	; (80075bc <Send_Service_Signal_Message+0x73c>)
 800758c:	f01b f954 	bl	8022838 <iprintf>
 8007590:	e009      	b.n	80075a6 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8007592:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007596:	b2d9      	uxtb	r1, r3
 8007598:	79fa      	ldrb	r2, [r7, #7]
 800759a:	f107 030c 	add.w	r3, r7, #12
 800759e:	4618      	mov	r0, r3
 80075a0:	f000 f80e 	bl	80075c0 <Process_Sending_Reply>
	}
}
 80075a4:	bf00      	nop
 80075a6:	bf00      	nop
 80075a8:	3754      	adds	r7, #84	; 0x54
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd90      	pop	{r4, r7, pc}
 80075ae:	bf00      	nop
 80075b0:	20001188 	.word	0x20001188
 80075b4:	20001a1c 	.word	0x20001a1c
 80075b8:	080244bc 	.word	0x080244bc
 80075bc:	080244d4 	.word	0x080244d4

080075c0 <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b09c      	sub	sp, #112	; 0x70
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	6078      	str	r0, [r7, #4]
 80075c8:	460b      	mov	r3, r1
 80075ca:	70fb      	strb	r3, [r7, #3]
 80075cc:	4613      	mov	r3, r2
 80075ce:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 80075d0:	2300      	movs	r3, #0
 80075d2:	60bb      	str	r3, [r7, #8]
 80075d4:	f107 030c 	add.w	r3, r7, #12
 80075d8:	2260      	movs	r2, #96	; 0x60
 80075da:	2100      	movs	r1, #0
 80075dc:	4618      	mov	r0, r3
 80075de:	f01b f843 	bl	8022668 <memset>
	uint8_t uc_index = 0;
 80075e2:	2300      	movs	r3, #0
 80075e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 80075e8:	2300      	movs	r3, #0
 80075ea:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 80075ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075f2:	1c5a      	adds	r2, r3, #1
 80075f4:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80075f8:	4619      	mov	r1, r3
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	781a      	ldrb	r2, [r3, #0]
 80075fe:	f101 0370 	add.w	r3, r1, #112	; 0x70
 8007602:	443b      	add	r3, r7
 8007604:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007608:	2301      	movs	r3, #1
 800760a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800760e:	e03c      	b.n	800768a <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 8007610:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	4413      	add	r3, r2
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2bef      	cmp	r3, #239	; 0xef
 800761c:	d922      	bls.n	8007664 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 800761e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	4413      	add	r3, r2
 8007626:	781a      	ldrb	r2, [r3, #0]
 8007628:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800762c:	1c59      	adds	r1, r3, #1
 800762e:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007632:	f022 020f 	bic.w	r2, r2, #15
 8007636:	b2d2      	uxtb	r2, r2
 8007638:	3370      	adds	r3, #112	; 0x70
 800763a:	443b      	add	r3, r7
 800763c:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 8007640:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007644:	687a      	ldr	r2, [r7, #4]
 8007646:	4413      	add	r3, r2
 8007648:	781a      	ldrb	r2, [r3, #0]
 800764a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800764e:	1c59      	adds	r1, r3, #1
 8007650:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007654:	f002 020f 	and.w	r2, r2, #15
 8007658:	b2d2      	uxtb	r2, r2
 800765a:	3370      	adds	r3, #112	; 0x70
 800765c:	443b      	add	r3, r7
 800765e:	f803 2c68 	strb.w	r2, [r3, #-104]
 8007662:	e00d      	b.n	8007680 <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007664:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007668:	687a      	ldr	r2, [r7, #4]
 800766a:	441a      	add	r2, r3
 800766c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007670:	1c59      	adds	r1, r3, #1
 8007672:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007676:	7812      	ldrb	r2, [r2, #0]
 8007678:	3370      	adds	r3, #112	; 0x70
 800767a:	443b      	add	r3, r7
 800767c:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 8007680:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007684:	3301      	adds	r3, #1
 8007686:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800768a:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800768e:	78fb      	ldrb	r3, [r7, #3]
 8007690:	429a      	cmp	r2, r3
 8007692:	d3bd      	bcc.n	8007610 <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007694:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800769e:	3370      	adds	r3, #112	; 0x70
 80076a0:	443b      	add	r3, r7
 80076a2:	22f6      	movs	r2, #246	; 0xf6
 80076a4:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 80076a8:	78bb      	ldrb	r3, [r7, #2]
 80076aa:	4a37      	ldr	r2, [pc, #220]	; (8007788 <Process_Sending_Reply+0x1c8>)
 80076ac:	5cd3      	ldrb	r3, [r2, r3]
 80076ae:	2b01      	cmp	r3, #1
 80076b0:	d10b      	bne.n	80076ca <Process_Sending_Reply+0x10a>
 80076b2:	4b36      	ldr	r3, [pc, #216]	; (800778c <Process_Sending_Reply+0x1cc>)
 80076b4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d106      	bne.n	80076ca <Process_Sending_Reply+0x10a>
 80076bc:	4b34      	ldr	r3, [pc, #208]	; (8007790 <Process_Sending_Reply+0x1d0>)
 80076be:	781b      	ldrb	r3, [r3, #0]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d102      	bne.n	80076ca <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80076c4:	4833      	ldr	r0, [pc, #204]	; (8007794 <Process_Sending_Reply+0x1d4>)
 80076c6:	f001 f86b 	bl	80087a0 <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 80076ca:	78bb      	ldrb	r3, [r7, #2]
 80076cc:	4a32      	ldr	r2, [pc, #200]	; (8007798 <Process_Sending_Reply+0x1d8>)
 80076ce:	4413      	add	r3, r2
 80076d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d10d      	bne.n	80076f4 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 80076d8:	78bb      	ldrb	r3, [r7, #2]
 80076da:	4a30      	ldr	r2, [pc, #192]	; (800779c <Process_Sending_Reply+0x1dc>)
 80076dc:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 80076e0:	f107 0008 	add.w	r0, r7, #8
 80076e4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80076e8:	f007 fe7e 	bl	800f3e8 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 80076ec:	78bb      	ldrb	r3, [r7, #2]
 80076ee:	4a26      	ldr	r2, [pc, #152]	; (8007788 <Process_Sending_Reply+0x1c8>)
 80076f0:	2100      	movs	r1, #0
 80076f2:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80076f4:	78bb      	ldrb	r3, [r7, #2]
 80076f6:	4a28      	ldr	r2, [pc, #160]	; (8007798 <Process_Sending_Reply+0x1d8>)
 80076f8:	4413      	add	r3, r2
 80076fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d119      	bne.n	8007736 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 8007702:	2300      	movs	r3, #0
 8007704:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007708:	e00e      	b.n	8007728 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 800770a:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800770e:	3370      	adds	r3, #112	; 0x70
 8007710:	443b      	add	r3, r7
 8007712:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8007716:	4619      	mov	r1, r3
 8007718:	2003      	movs	r0, #3
 800771a:	f00d fe2b 	bl	8015374 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 800771e:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8007722:	3301      	adds	r3, #1
 8007724:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8007728:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800772c:	b29b      	uxth	r3, r3
 800772e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8007732:	429a      	cmp	r2, r3
 8007734:	d3e9      	bcc.n	800770a <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 8007736:	4b16      	ldr	r3, [pc, #88]	; (8007790 <Process_Sending_Reply+0x1d0>)
 8007738:	781b      	ldrb	r3, [r3, #0]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d102      	bne.n	8007744 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 800773e:	4815      	ldr	r0, [pc, #84]	; (8007794 <Process_Sending_Reply+0x1d4>)
 8007740:	f001 f82e 	bl	80087a0 <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 8007744:	4b11      	ldr	r3, [pc, #68]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007746:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 800774e:	4b0f      	ldr	r3, [pc, #60]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007750:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007754:	461a      	mov	r2, r3
 8007756:	2101      	movs	r1, #1
 8007758:	480c      	ldr	r0, [pc, #48]	; (800778c <Process_Sending_Reply+0x1cc>)
 800775a:	f000 fe7b 	bl	8008454 <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 800775e:	4b0b      	ldr	r3, [pc, #44]	; (800778c <Process_Sending_Reply+0x1cc>)
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007766:	78fb      	ldrb	r3, [r7, #3]
 8007768:	461a      	mov	r2, r3
 800776a:	2100      	movs	r1, #0
 800776c:	6878      	ldr	r0, [r7, #4]
 800776e:	f000 fe71 	bl	8008454 <Print_EI_DATA>

	if(Debug_flag == 1)
 8007772:	4b07      	ldr	r3, [pc, #28]	; (8007790 <Process_Sending_Reply+0x1d0>)
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	2b01      	cmp	r3, #1
 8007778:	d102      	bne.n	8007780 <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 800777a:	4809      	ldr	r0, [pc, #36]	; (80077a0 <Process_Sending_Reply+0x1e0>)
 800777c:	f001 f810 	bl	80087a0 <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 8007780:	bf00      	nop
 8007782:	3770      	adds	r7, #112	; 0x70
 8007784:	46bd      	mov	sp, r7
 8007786:	bd80      	pop	{r7, pc}
 8007788:	200010cc 	.word	0x200010cc
 800778c:	20001f50 	.word	0x20001f50
 8007790:	20000645 	.word	0x20000645
 8007794:	080249d4 	.word	0x080249d4
 8007798:	20000304 	.word	0x20000304
 800779c:	20001058 	.word	0x20001058
 80077a0:	08024a34 	.word	0x08024a34

080077a4 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	4603      	mov	r3, r0
 80077ac:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 80077ae:	f00e f839 	bl	8015824 <HAL_GetTick>
 80077b2:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a86      	ldr	r2, [pc, #536]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 80077b8:	4413      	add	r3, r2
 80077ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80077be:	2b02      	cmp	r3, #2
 80077c0:	f000 8102 	beq.w	80079c8 <Check_Primary_r_Secondary+0x224>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80077c4:	79fa      	ldrb	r2, [r7, #7]
 80077c6:	4983      	ldr	r1, [pc, #524]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80077c8:	4613      	mov	r3, r2
 80077ca:	005b      	lsls	r3, r3, #1
 80077cc:	4413      	add	r3, r2
 80077ce:	00db      	lsls	r3, r3, #3
 80077d0:	440b      	add	r3, r1
 80077d2:	3303      	adds	r3, #3
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d12b      	bne.n	8007832 <Check_Primary_r_Secondary+0x8e>
 80077da:	79fa      	ldrb	r2, [r7, #7]
 80077dc:	497e      	ldr	r1, [pc, #504]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 80077de:	4613      	mov	r3, r2
 80077e0:	005b      	lsls	r3, r3, #1
 80077e2:	4413      	add	r3, r2
 80077e4:	00db      	lsls	r3, r3, #3
 80077e6:	440b      	add	r3, r1
 80077e8:	3303      	adds	r3, #3
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d120      	bne.n	8007832 <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80077f0:	79fa      	ldrb	r2, [r7, #7]
 80077f2:	4978      	ldr	r1, [pc, #480]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80077f4:	4613      	mov	r3, r2
 80077f6:	005b      	lsls	r3, r3, #1
 80077f8:	4413      	add	r3, r2
 80077fa:	00db      	lsls	r3, r3, #3
 80077fc:	440b      	add	r3, r1
 80077fe:	3304      	adds	r3, #4
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b00      	cmp	r3, #0
 8007804:	f000 80e1 	beq.w	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007808:	79fb      	ldrb	r3, [r7, #7]
 800780a:	4a71      	ldr	r2, [pc, #452]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800780c:	3366      	adds	r3, #102	; 0x66
 800780e:	009b      	lsls	r3, r3, #2
 8007810:	4413      	add	r3, r2
 8007812:	685b      	ldr	r3, [r3, #4]
 8007814:	4619      	mov	r1, r3
 8007816:	4871      	ldr	r0, [pc, #452]	; (80079dc <Check_Primary_r_Secondary+0x238>)
 8007818:	f01b f80e 	bl	8022838 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800781c:	79fa      	ldrb	r2, [r7, #7]
 800781e:	496d      	ldr	r1, [pc, #436]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007820:	4613      	mov	r3, r2
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	4413      	add	r3, r2
 8007826:	00db      	lsls	r3, r3, #3
 8007828:	440b      	add	r3, r1
 800782a:	3304      	adds	r3, #4
 800782c:	2200      	movs	r2, #0
 800782e:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 8007830:	e0cb      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007832:	79fa      	ldrb	r2, [r7, #7]
 8007834:	4967      	ldr	r1, [pc, #412]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007836:	4613      	mov	r3, r2
 8007838:	005b      	lsls	r3, r3, #1
 800783a:	4413      	add	r3, r2
 800783c:	00db      	lsls	r3, r3, #3
 800783e:	440b      	add	r3, r1
 8007840:	3303      	adds	r3, #3
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d12b      	bne.n	80078a0 <Check_Primary_r_Secondary+0xfc>
 8007848:	79fa      	ldrb	r2, [r7, #7]
 800784a:	4963      	ldr	r1, [pc, #396]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 800784c:	4613      	mov	r3, r2
 800784e:	005b      	lsls	r3, r3, #1
 8007850:	4413      	add	r3, r2
 8007852:	00db      	lsls	r3, r3, #3
 8007854:	440b      	add	r3, r1
 8007856:	3303      	adds	r3, #3
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	2b01      	cmp	r3, #1
 800785c:	d120      	bne.n	80078a0 <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800785e:	79fa      	ldrb	r2, [r7, #7]
 8007860:	495c      	ldr	r1, [pc, #368]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007862:	4613      	mov	r3, r2
 8007864:	005b      	lsls	r3, r3, #1
 8007866:	4413      	add	r3, r2
 8007868:	00db      	lsls	r3, r3, #3
 800786a:	440b      	add	r3, r1
 800786c:	3304      	adds	r3, #4
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	f000 80aa 	beq.w	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007876:	79fb      	ldrb	r3, [r7, #7]
 8007878:	4a55      	ldr	r2, [pc, #340]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800787a:	3366      	adds	r3, #102	; 0x66
 800787c:	009b      	lsls	r3, r3, #2
 800787e:	4413      	add	r3, r2
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	4619      	mov	r1, r3
 8007884:	4856      	ldr	r0, [pc, #344]	; (80079e0 <Check_Primary_r_Secondary+0x23c>)
 8007886:	f01a ffd7 	bl	8022838 <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 800788a:	79fa      	ldrb	r2, [r7, #7]
 800788c:	4951      	ldr	r1, [pc, #324]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 800788e:	4613      	mov	r3, r2
 8007890:	005b      	lsls	r3, r3, #1
 8007892:	4413      	add	r3, r2
 8007894:	00db      	lsls	r3, r3, #3
 8007896:	440b      	add	r3, r1
 8007898:	3304      	adds	r3, #4
 800789a:	2200      	movs	r2, #0
 800789c:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800789e:	e094      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 80078a0:	79fa      	ldrb	r2, [r7, #7]
 80078a2:	494c      	ldr	r1, [pc, #304]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80078a4:	4613      	mov	r3, r2
 80078a6:	005b      	lsls	r3, r3, #1
 80078a8:	4413      	add	r3, r2
 80078aa:	00db      	lsls	r3, r3, #3
 80078ac:	440b      	add	r3, r1
 80078ae:	3303      	adds	r3, #3
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b01      	cmp	r3, #1
 80078b4:	d13e      	bne.n	8007934 <Check_Primary_r_Secondary+0x190>
 80078b6:	79fa      	ldrb	r2, [r7, #7]
 80078b8:	4947      	ldr	r1, [pc, #284]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	440b      	add	r3, r1
 80078c4:	3303      	adds	r3, #3
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d133      	bne.n	8007934 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80078cc:	79fa      	ldrb	r2, [r7, #7]
 80078ce:	4941      	ldr	r1, [pc, #260]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80078d0:	4613      	mov	r3, r2
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4413      	add	r3, r2
 80078d6:	00db      	lsls	r3, r3, #3
 80078d8:	440b      	add	r3, r1
 80078da:	3304      	adds	r3, #4
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	2b01      	cmp	r3, #1
 80078e0:	d073      	beq.n	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80078e2:	79fb      	ldrb	r3, [r7, #7]
 80078e4:	4a3a      	ldr	r2, [pc, #232]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 80078e6:	3366      	adds	r3, #102	; 0x66
 80078e8:	009b      	lsls	r3, r3, #2
 80078ea:	4413      	add	r3, r2
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	4619      	mov	r1, r3
 80078f0:	483c      	ldr	r0, [pc, #240]	; (80079e4 <Check_Primary_r_Secondary+0x240>)
 80078f2:	f01a ffa1 	bl	8022838 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80078f6:	79fb      	ldrb	r3, [r7, #7]
 80078f8:	493b      	ldr	r1, [pc, #236]	; (80079e8 <Check_Primary_r_Secondary+0x244>)
 80078fa:	68fa      	ldr	r2, [r7, #12]
 80078fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007900:	79fb      	ldrb	r3, [r7, #7]
 8007902:	493a      	ldr	r1, [pc, #232]	; (80079ec <Check_Primary_r_Secondary+0x248>)
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800790a:	79fa      	ldrb	r2, [r7, #7]
 800790c:	4931      	ldr	r1, [pc, #196]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 800790e:	4613      	mov	r3, r2
 8007910:	005b      	lsls	r3, r3, #1
 8007912:	4413      	add	r3, r2
 8007914:	00db      	lsls	r3, r3, #3
 8007916:	440b      	add	r3, r1
 8007918:	3310      	adds	r3, #16
 800791a:	2200      	movs	r2, #0
 800791c:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 800791e:	79fa      	ldrb	r2, [r7, #7]
 8007920:	492c      	ldr	r1, [pc, #176]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007922:	4613      	mov	r3, r2
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	4413      	add	r3, r2
 8007928:	00db      	lsls	r3, r3, #3
 800792a:	440b      	add	r3, r1
 800792c:	3304      	adds	r3, #4
 800792e:	2201      	movs	r2, #1
 8007930:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007932:	e04a      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 8007934:	79fa      	ldrb	r2, [r7, #7]
 8007936:	4927      	ldr	r1, [pc, #156]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007938:	4613      	mov	r3, r2
 800793a:	005b      	lsls	r3, r3, #1
 800793c:	4413      	add	r3, r2
 800793e:	00db      	lsls	r3, r3, #3
 8007940:	440b      	add	r3, r1
 8007942:	3303      	adds	r3, #3
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b01      	cmp	r3, #1
 8007948:	d13f      	bne.n	80079ca <Check_Primary_r_Secondary+0x226>
 800794a:	79fa      	ldrb	r2, [r7, #7]
 800794c:	4922      	ldr	r1, [pc, #136]	; (80079d8 <Check_Primary_r_Secondary+0x234>)
 800794e:	4613      	mov	r3, r2
 8007950:	005b      	lsls	r3, r3, #1
 8007952:	4413      	add	r3, r2
 8007954:	00db      	lsls	r3, r3, #3
 8007956:	440b      	add	r3, r1
 8007958:	3303      	adds	r3, #3
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d134      	bne.n	80079ca <Check_Primary_r_Secondary+0x226>
		{
#ifdef EI_1
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007960:	79fa      	ldrb	r2, [r7, #7]
 8007962:	491c      	ldr	r1, [pc, #112]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 8007964:	4613      	mov	r3, r2
 8007966:	005b      	lsls	r3, r3, #1
 8007968:	4413      	add	r3, r2
 800796a:	00db      	lsls	r3, r3, #3
 800796c:	440b      	add	r3, r1
 800796e:	3304      	adds	r3, #4
 8007970:	781b      	ldrb	r3, [r3, #0]
 8007972:	2b01      	cmp	r3, #1
 8007974:	d029      	beq.n	80079ca <Check_Primary_r_Secondary+0x226>
			{
				printf("Both Cards Receiving data,EiPC_1 Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007976:	79fb      	ldrb	r3, [r7, #7]
 8007978:	4a15      	ldr	r2, [pc, #84]	; (80079d0 <Check_Primary_r_Secondary+0x22c>)
 800797a:	3366      	adds	r3, #102	; 0x66
 800797c:	009b      	lsls	r3, r3, #2
 800797e:	4413      	add	r3, r2
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	4619      	mov	r1, r3
 8007984:	481a      	ldr	r0, [pc, #104]	; (80079f0 <Check_Primary_r_Secondary+0x24c>)
 8007986:	f01a ff57 	bl	8022838 <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 800798a:	79fb      	ldrb	r3, [r7, #7]
 800798c:	4916      	ldr	r1, [pc, #88]	; (80079e8 <Check_Primary_r_Secondary+0x244>)
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 8007994:	79fb      	ldrb	r3, [r7, #7]
 8007996:	4915      	ldr	r1, [pc, #84]	; (80079ec <Check_Primary_r_Secondary+0x248>)
 8007998:	68fa      	ldr	r2, [r7, #12]
 800799a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 800799e:	79fa      	ldrb	r2, [r7, #7]
 80079a0:	490c      	ldr	r1, [pc, #48]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80079a2:	4613      	mov	r3, r2
 80079a4:	005b      	lsls	r3, r3, #1
 80079a6:	4413      	add	r3, r2
 80079a8:	00db      	lsls	r3, r3, #3
 80079aa:	440b      	add	r3, r1
 80079ac:	3310      	adds	r3, #16
 80079ae:	2200      	movs	r2, #0
 80079b0:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80079b2:	79fa      	ldrb	r2, [r7, #7]
 80079b4:	4907      	ldr	r1, [pc, #28]	; (80079d4 <Check_Primary_r_Secondary+0x230>)
 80079b6:	4613      	mov	r3, r2
 80079b8:	005b      	lsls	r3, r3, #1
 80079ba:	4413      	add	r3, r2
 80079bc:	00db      	lsls	r3, r3, #3
 80079be:	440b      	add	r3, r1
 80079c0:	3304      	adds	r3, #4
 80079c2:	2201      	movs	r2, #1
 80079c4:	701a      	strb	r2, [r3, #0]
 80079c6:	e000      	b.n	80079ca <Check_Primary_r_Secondary+0x226>
		return;
 80079c8:	bf00      	nop
			//			}
#endif

		}
	}
}
 80079ca:	3710      	adds	r7, #16
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}
 80079d0:	20000304 	.word	0x20000304
 80079d4:	20001674 	.word	0x20001674
 80079d8:	20001764 	.word	0x20001764
 80079dc:	08024bec 	.word	0x08024bec
 80079e0:	08024c28 	.word	0x08024c28
 80079e4:	08024c64 	.word	0x08024c64
 80079e8:	20000fa4 	.word	0x20000fa4
 80079ec:	20000fcc 	.word	0x20000fcc
 80079f0:	08024c9c 	.word	0x08024c9c

080079f4 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	4603      	mov	r3, r0
 80079fc:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	4aac      	ldr	r2, [pc, #688]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007a02:	4413      	add	r3, r2
 8007a04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	f000 814f 	beq.w	8007cac <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007a0e:	79fa      	ldrb	r2, [r7, #7]
 8007a10:	49a9      	ldr	r1, [pc, #676]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a12:	4613      	mov	r3, r2
 8007a14:	005b      	lsls	r3, r3, #1
 8007a16:	4413      	add	r3, r2
 8007a18:	00db      	lsls	r3, r3, #3
 8007a1a:	440b      	add	r3, r1
 8007a1c:	3308      	adds	r3, #8
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	79fa      	ldrb	r2, [r7, #7]
 8007a22:	48a6      	ldr	r0, [pc, #664]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a24:	4613      	mov	r3, r2
 8007a26:	005b      	lsls	r3, r3, #1
 8007a28:	4413      	add	r3, r2
 8007a2a:	00db      	lsls	r3, r3, #3
 8007a2c:	4403      	add	r3, r0
 8007a2e:	3308      	adds	r3, #8
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4299      	cmp	r1, r3
 8007a34:	f000 8092 	beq.w	8007b5c <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 8007a38:	79fa      	ldrb	r2, [r7, #7]
 8007a3a:	49a0      	ldr	r1, [pc, #640]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	005b      	lsls	r3, r3, #1
 8007a40:	4413      	add	r3, r2
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	440b      	add	r3, r1
 8007a46:	3308      	adds	r3, #8
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	f000 8086 	beq.w	8007b5c <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007a50:	79fa      	ldrb	r2, [r7, #7]
 8007a52:	4999      	ldr	r1, [pc, #612]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a54:	4613      	mov	r3, r2
 8007a56:	005b      	lsls	r3, r3, #1
 8007a58:	4413      	add	r3, r2
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	440b      	add	r3, r1
 8007a5e:	3304      	adds	r3, #4
 8007a60:	781b      	ldrb	r3, [r3, #0]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d104      	bne.n	8007a70 <Check_Vital_CRC+0x7c>
 8007a66:	79fb      	ldrb	r3, [r7, #7]
 8007a68:	4a95      	ldr	r2, [pc, #596]	; (8007cc0 <Check_Vital_CRC+0x2cc>)
 8007a6a:	5cd3      	ldrb	r3, [r2, r3]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d175      	bne.n	8007b5c <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a70:	79fa      	ldrb	r2, [r7, #7]
 8007a72:	4991      	ldr	r1, [pc, #580]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007a74:	4613      	mov	r3, r2
 8007a76:	005b      	lsls	r3, r3, #1
 8007a78:	4413      	add	r3, r2
 8007a7a:	00db      	lsls	r3, r3, #3
 8007a7c:	440b      	add	r3, r1
 8007a7e:	3308      	adds	r3, #8
 8007a80:	6819      	ldr	r1, [r3, #0]
 8007a82:	79fa      	ldrb	r2, [r7, #7]
 8007a84:	488d      	ldr	r0, [pc, #564]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007a86:	4613      	mov	r3, r2
 8007a88:	005b      	lsls	r3, r3, #1
 8007a8a:	4413      	add	r3, r2
 8007a8c:	00db      	lsls	r3, r3, #3
 8007a8e:	4403      	add	r3, r0
 8007a90:	3308      	adds	r3, #8
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	1acb      	subs	r3, r1, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	bfb8      	it	lt
 8007a9a:	425b      	neglt	r3, r3
 8007a9c:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d104      	bne.n	8007aae <Check_Vital_CRC+0xba>
 8007aa4:	79fb      	ldrb	r3, [r7, #7]
 8007aa6:	4a87      	ldr	r2, [pc, #540]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007aa8:	5cd3      	ldrb	r3, [r2, r3]
 8007aaa:	2b03      	cmp	r3, #3
 8007aac:	d14c      	bne.n	8007b48 <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007aae:	79fb      	ldrb	r3, [r7, #7]
 8007ab0:	4a84      	ldr	r2, [pc, #528]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007ab2:	2100      	movs	r1, #0
 8007ab4:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	4a7e      	ldr	r2, [pc, #504]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007aba:	3366      	adds	r3, #102	; 0x66
 8007abc:	009b      	lsls	r3, r3, #2
 8007abe:	4413      	add	r3, r2
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	4619      	mov	r1, r3
 8007ac4:	4880      	ldr	r0, [pc, #512]	; (8007cc8 <Check_Vital_CRC+0x2d4>)
 8007ac6:	f01a feb7 	bl	8022838 <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007aca:	79fa      	ldrb	r2, [r7, #7]
 8007acc:	497a      	ldr	r1, [pc, #488]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007ace:	4613      	mov	r3, r2
 8007ad0:	005b      	lsls	r3, r3, #1
 8007ad2:	4413      	add	r3, r2
 8007ad4:	00db      	lsls	r3, r3, #3
 8007ad6:	440b      	add	r3, r1
 8007ad8:	3308      	adds	r3, #8
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	4619      	mov	r1, r3
 8007ade:	487b      	ldr	r0, [pc, #492]	; (8007ccc <Check_Vital_CRC+0x2d8>)
 8007ae0:	f01a feaa 	bl	8022838 <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007ae4:	79fa      	ldrb	r2, [r7, #7]
 8007ae6:	4975      	ldr	r1, [pc, #468]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007ae8:	4613      	mov	r3, r2
 8007aea:	005b      	lsls	r3, r3, #1
 8007aec:	4413      	add	r3, r2
 8007aee:	00db      	lsls	r3, r3, #3
 8007af0:	440b      	add	r3, r1
 8007af2:	3308      	adds	r3, #8
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4619      	mov	r1, r3
 8007af8:	4875      	ldr	r0, [pc, #468]	; (8007cd0 <Check_Vital_CRC+0x2dc>)
 8007afa:	f01a fe9d 	bl	8022838 <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007afe:	4875      	ldr	r0, [pc, #468]	; (8007cd4 <Check_Vital_CRC+0x2e0>)
 8007b00:	f01a ff36 	bl	8022970 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b04:	79fa      	ldrb	r2, [r7, #7]
 8007b06:	79f9      	ldrb	r1, [r7, #7]
 8007b08:	486c      	ldr	r0, [pc, #432]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b0a:	4613      	mov	r3, r2
 8007b0c:	005b      	lsls	r3, r3, #1
 8007b0e:	4413      	add	r3, r2
 8007b10:	00db      	lsls	r3, r3, #3
 8007b12:	4403      	add	r3, r0
 8007b14:	3308      	adds	r3, #8
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	486f      	ldr	r0, [pc, #444]	; (8007cd8 <Check_Vital_CRC+0x2e4>)
 8007b1a:	010b      	lsls	r3, r1, #4
 8007b1c:	4403      	add	r3, r0
 8007b1e:	3308      	adds	r3, #8
 8007b20:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007b22:	79f9      	ldrb	r1, [r7, #7]
 8007b24:	79fa      	ldrb	r2, [r7, #7]
 8007b26:	4865      	ldr	r0, [pc, #404]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b28:	460b      	mov	r3, r1
 8007b2a:	005b      	lsls	r3, r3, #1
 8007b2c:	440b      	add	r3, r1
 8007b2e:	00db      	lsls	r3, r3, #3
 8007b30:	4403      	add	r3, r0
 8007b32:	3308      	adds	r3, #8
 8007b34:	6819      	ldr	r1, [r3, #0]
 8007b36:	4860      	ldr	r0, [pc, #384]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007b38:	4613      	mov	r3, r2
 8007b3a:	005b      	lsls	r3, r3, #1
 8007b3c:	4413      	add	r3, r2
 8007b3e:	00db      	lsls	r3, r3, #3
 8007b40:	4403      	add	r3, r0
 8007b42:	3308      	adds	r3, #8
 8007b44:	6019      	str	r1, [r3, #0]
 8007b46:	e009      	b.n	8007b5c <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2b01      	cmp	r3, #1
 8007b4c:	d106      	bne.n	8007b5c <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007b4e:	79fb      	ldrb	r3, [r7, #7]
 8007b50:	4a5c      	ldr	r2, [pc, #368]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007b52:	5cd2      	ldrb	r2, [r2, r3]
 8007b54:	3201      	adds	r2, #1
 8007b56:	b2d1      	uxtb	r1, r2
 8007b58:	4a5a      	ldr	r2, [pc, #360]	; (8007cc4 <Check_Vital_CRC+0x2d0>)
 8007b5a:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007b5c:	79fa      	ldrb	r2, [r7, #7]
 8007b5e:	4956      	ldr	r1, [pc, #344]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007b60:	4613      	mov	r3, r2
 8007b62:	005b      	lsls	r3, r3, #1
 8007b64:	4413      	add	r3, r2
 8007b66:	00db      	lsls	r3, r3, #3
 8007b68:	440b      	add	r3, r1
 8007b6a:	330c      	adds	r3, #12
 8007b6c:	6819      	ldr	r1, [r3, #0]
 8007b6e:	79fa      	ldrb	r2, [r7, #7]
 8007b70:	4852      	ldr	r0, [pc, #328]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b72:	4613      	mov	r3, r2
 8007b74:	005b      	lsls	r3, r3, #1
 8007b76:	4413      	add	r3, r2
 8007b78:	00db      	lsls	r3, r3, #3
 8007b7a:	4403      	add	r3, r0
 8007b7c:	330c      	adds	r3, #12
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4299      	cmp	r1, r3
 8007b82:	f000 8094 	beq.w	8007cae <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007b86:	79fa      	ldrb	r2, [r7, #7]
 8007b88:	494c      	ldr	r1, [pc, #304]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007b8a:	4613      	mov	r3, r2
 8007b8c:	005b      	lsls	r3, r3, #1
 8007b8e:	4413      	add	r3, r2
 8007b90:	00db      	lsls	r3, r3, #3
 8007b92:	440b      	add	r3, r1
 8007b94:	330c      	adds	r3, #12
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	f000 8088 	beq.w	8007cae <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007b9e:	79fa      	ldrb	r2, [r7, #7]
 8007ba0:	4945      	ldr	r1, [pc, #276]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007ba2:	4613      	mov	r3, r2
 8007ba4:	005b      	lsls	r3, r3, #1
 8007ba6:	4413      	add	r3, r2
 8007ba8:	00db      	lsls	r3, r3, #3
 8007baa:	440b      	add	r3, r1
 8007bac:	3304      	adds	r3, #4
 8007bae:	781b      	ldrb	r3, [r3, #0]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d104      	bne.n	8007bbe <Check_Vital_CRC+0x1ca>
 8007bb4:	79fb      	ldrb	r3, [r7, #7]
 8007bb6:	4a42      	ldr	r2, [pc, #264]	; (8007cc0 <Check_Vital_CRC+0x2cc>)
 8007bb8:	5cd3      	ldrb	r3, [r2, r3]
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d177      	bne.n	8007cae <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007bbe:	79fa      	ldrb	r2, [r7, #7]
 8007bc0:	493d      	ldr	r1, [pc, #244]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007bc2:	4613      	mov	r3, r2
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	4413      	add	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	440b      	add	r3, r1
 8007bcc:	330c      	adds	r3, #12
 8007bce:	6819      	ldr	r1, [r3, #0]
 8007bd0:	79fa      	ldrb	r2, [r7, #7]
 8007bd2:	483a      	ldr	r0, [pc, #232]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007bd4:	4613      	mov	r3, r2
 8007bd6:	005b      	lsls	r3, r3, #1
 8007bd8:	4413      	add	r3, r2
 8007bda:	00db      	lsls	r3, r3, #3
 8007bdc:	4403      	add	r3, r0
 8007bde:	330c      	adds	r3, #12
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	1acb      	subs	r3, r1, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	bfb8      	it	lt
 8007be8:	425b      	neglt	r3, r3
 8007bea:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d104      	bne.n	8007bfc <Check_Vital_CRC+0x208>
 8007bf2:	79fb      	ldrb	r3, [r7, #7]
 8007bf4:	4a39      	ldr	r2, [pc, #228]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007bf6:	5cd3      	ldrb	r3, [r2, r3]
 8007bf8:	2b03      	cmp	r3, #3
 8007bfa:	d14c      	bne.n	8007c96 <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	4a37      	ldr	r2, [pc, #220]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007c00:	2100      	movs	r1, #0
 8007c02:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007c04:	79fb      	ldrb	r3, [r7, #7]
 8007c06:	4a2b      	ldr	r2, [pc, #172]	; (8007cb4 <Check_Vital_CRC+0x2c0>)
 8007c08:	3366      	adds	r3, #102	; 0x66
 8007c0a:	009b      	lsls	r3, r3, #2
 8007c0c:	4413      	add	r3, r2
 8007c0e:	685b      	ldr	r3, [r3, #4]
 8007c10:	4619      	mov	r1, r3
 8007c12:	4833      	ldr	r0, [pc, #204]	; (8007ce0 <Check_Vital_CRC+0x2ec>)
 8007c14:	f01a fe10 	bl	8022838 <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c18:	79fa      	ldrb	r2, [r7, #7]
 8007c1a:	4927      	ldr	r1, [pc, #156]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007c1c:	4613      	mov	r3, r2
 8007c1e:	005b      	lsls	r3, r3, #1
 8007c20:	4413      	add	r3, r2
 8007c22:	00db      	lsls	r3, r3, #3
 8007c24:	440b      	add	r3, r1
 8007c26:	330c      	adds	r3, #12
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	482d      	ldr	r0, [pc, #180]	; (8007ce4 <Check_Vital_CRC+0x2f0>)
 8007c2e:	f01a fe03 	bl	8022838 <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007c32:	79fa      	ldrb	r2, [r7, #7]
 8007c34:	4921      	ldr	r1, [pc, #132]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c36:	4613      	mov	r3, r2
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	4413      	add	r3, r2
 8007c3c:	00db      	lsls	r3, r3, #3
 8007c3e:	440b      	add	r3, r1
 8007c40:	330c      	adds	r3, #12
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	4619      	mov	r1, r3
 8007c46:	4828      	ldr	r0, [pc, #160]	; (8007ce8 <Check_Vital_CRC+0x2f4>)
 8007c48:	f01a fdf6 	bl	8022838 <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007c4c:	4827      	ldr	r0, [pc, #156]	; (8007cec <Check_Vital_CRC+0x2f8>)
 8007c4e:	f01a fe8f 	bl	8022970 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c52:	79fa      	ldrb	r2, [r7, #7]
 8007c54:	79f9      	ldrb	r1, [r7, #7]
 8007c56:	4819      	ldr	r0, [pc, #100]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c58:	4613      	mov	r3, r2
 8007c5a:	005b      	lsls	r3, r3, #1
 8007c5c:	4413      	add	r3, r2
 8007c5e:	00db      	lsls	r3, r3, #3
 8007c60:	4403      	add	r3, r0
 8007c62:	330c      	adds	r3, #12
 8007c64:	681a      	ldr	r2, [r3, #0]
 8007c66:	481c      	ldr	r0, [pc, #112]	; (8007cd8 <Check_Vital_CRC+0x2e4>)
 8007c68:	010b      	lsls	r3, r1, #4
 8007c6a:	4403      	add	r3, r0
 8007c6c:	330c      	adds	r3, #12
 8007c6e:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007c70:	79f9      	ldrb	r1, [r7, #7]
 8007c72:	79fa      	ldrb	r2, [r7, #7]
 8007c74:	4811      	ldr	r0, [pc, #68]	; (8007cbc <Check_Vital_CRC+0x2c8>)
 8007c76:	460b      	mov	r3, r1
 8007c78:	005b      	lsls	r3, r3, #1
 8007c7a:	440b      	add	r3, r1
 8007c7c:	00db      	lsls	r3, r3, #3
 8007c7e:	4403      	add	r3, r0
 8007c80:	330c      	adds	r3, #12
 8007c82:	6819      	ldr	r1, [r3, #0]
 8007c84:	480c      	ldr	r0, [pc, #48]	; (8007cb8 <Check_Vital_CRC+0x2c4>)
 8007c86:	4613      	mov	r3, r2
 8007c88:	005b      	lsls	r3, r3, #1
 8007c8a:	4413      	add	r3, r2
 8007c8c:	00db      	lsls	r3, r3, #3
 8007c8e:	4403      	add	r3, r0
 8007c90:	330c      	adds	r3, #12
 8007c92:	6019      	str	r1, [r3, #0]
 8007c94:	e00b      	b.n	8007cae <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d108      	bne.n	8007cae <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	4a0f      	ldr	r2, [pc, #60]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007ca0:	5cd2      	ldrb	r2, [r2, r3]
 8007ca2:	3201      	adds	r2, #1
 8007ca4:	b2d1      	uxtb	r1, r2
 8007ca6:	4a0d      	ldr	r2, [pc, #52]	; (8007cdc <Check_Vital_CRC+0x2e8>)
 8007ca8:	54d1      	strb	r1, [r2, r3]
 8007caa:	e000      	b.n	8007cae <Check_Vital_CRC+0x2ba>
		return;
 8007cac:	bf00      	nop
				}
			}
		}
	}
}
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}
 8007cb4:	20000304 	.word	0x20000304
 8007cb8:	20001674 	.word	0x20001674
 8007cbc:	20001764 	.word	0x20001764
 8007cc0:	20000ff4 	.word	0x20000ff4
 8007cc4:	20002378 	.word	0x20002378
 8007cc8:	08024cd8 	.word	0x08024cd8
 8007ccc:	08024d1c 	.word	0x08024d1c
 8007cd0:	08024d40 	.word	0x08024d40
 8007cd4:	08024d64 	.word	0x08024d64
 8007cd8:	200011c4 	.word	0x200011c4
 8007cdc:	20002384 	.word	0x20002384
 8007ce0:	08024d8c 	.word	0x08024d8c
 8007ce4:	08024dd0 	.word	0x08024dd0
 8007ce8:	08024df4 	.word	0x08024df4
 8007cec:	08024e18 	.word	0x08024e18

08007cf0 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007cfa:	79fb      	ldrb	r3, [r7, #7]
 8007cfc:	4a0a      	ldr	r2, [pc, #40]	; (8007d28 <Check_Other_EiPC_Packet+0x38>)
 8007cfe:	4413      	add	r3, r2
 8007d00:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007d04:	2b02      	cmp	r3, #2
 8007d06:	d007      	beq.n	8007d18 <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007d08:	79fb      	ldrb	r3, [r7, #7]
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7ff fd4a 	bl	80077a4 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7ff fe6e 	bl	80079f4 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007d18:	79fb      	ldrb	r3, [r7, #7]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f001 f970 	bl	8009000 <CheckOtherLinkStatus>
}
 8007d20:	bf00      	nop
 8007d22:	3708      	adds	r7, #8
 8007d24:	46bd      	mov	sp, r7
 8007d26:	bd80      	pop	{r7, pc}
 8007d28:	20000304 	.word	0x20000304

08007d2c <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007d2c:	b590      	push	{r4, r7, lr}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007d32:	2300      	movs	r3, #0
 8007d34:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007d36:	4930      	ldr	r1, [pc, #192]	; (8007df8 <CheckLinkEstablishTimeout+0xcc>)
 8007d38:	4830      	ldr	r0, [pc, #192]	; (8007dfc <CheckLinkEstablishTimeout+0xd0>)
 8007d3a:	f7f8 fa81 	bl	8000240 <strcmp>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d055      	beq.n	8007df0 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007d44:	2300      	movs	r3, #0
 8007d46:	71fb      	strb	r3, [r7, #7]
 8007d48:	e04b      	b.n	8007de2 <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	4a2c      	ldr	r2, [pc, #176]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d52:	4618      	mov	r0, r3
 8007d54:	f006 ffd8 	bl	800ed08 <HAL_Elaps_Ticks>
 8007d58:	4602      	mov	r2, r0
 8007d5a:	79fb      	ldrb	r3, [r7, #7]
 8007d5c:	4929      	ldr	r1, [pc, #164]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007d5e:	339e      	adds	r3, #158	; 0x9e
 8007d60:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	d939      	bls.n	8007ddc <CheckLinkEstablishTimeout+0xb0>
 8007d68:	79fb      	ldrb	r3, [r7, #7]
 8007d6a:	4a27      	ldr	r2, [pc, #156]	; (8007e08 <CheckLinkEstablishTimeout+0xdc>)
 8007d6c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	4923      	ldr	r1, [pc, #140]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d74:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d02f      	beq.n	8007ddc <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007d7c:	79fa      	ldrb	r2, [r7, #7]
 8007d7e:	79fb      	ldrb	r3, [r7, #7]
 8007d80:	491f      	ldr	r1, [pc, #124]	; (8007e00 <CheckLinkEstablishTimeout+0xd4>)
 8007d82:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d86:	4920      	ldr	r1, [pc, #128]	; (8007e08 <CheckLinkEstablishTimeout+0xdc>)
 8007d88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007d8c:	79fb      	ldrb	r3, [r7, #7]
 8007d8e:	4a1d      	ldr	r2, [pc, #116]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007d90:	3366      	adds	r3, #102	; 0x66
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	4413      	add	r3, r2
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	481c      	ldr	r0, [pc, #112]	; (8007e0c <CheckLinkEstablishTimeout+0xe0>)
 8007d9c:	f01a fd4c 	bl	8022838 <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007da0:	79fb      	ldrb	r3, [r7, #7]
 8007da2:	4a1b      	ldr	r2, [pc, #108]	; (8007e10 <CheckLinkEstablishTimeout+0xe4>)
 8007da4:	2100      	movs	r1, #0
 8007da6:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007da8:	79fa      	ldrb	r2, [r7, #7]
 8007daa:	491a      	ldr	r1, [pc, #104]	; (8007e14 <CheckLinkEstablishTimeout+0xe8>)
 8007dac:	4613      	mov	r3, r2
 8007dae:	005b      	lsls	r3, r3, #1
 8007db0:	4413      	add	r3, r2
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	440b      	add	r3, r1
 8007db6:	3310      	adds	r3, #16
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	79fc      	ldrb	r4, [r7, #7]
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	f006 ffa3 	bl	800ed08 <HAL_Elaps_Ticks>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4913      	ldr	r1, [pc, #76]	; (8007e14 <CheckLinkEstablishTimeout+0xe8>)
 8007dc6:	4623      	mov	r3, r4
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4423      	add	r3, r4
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	440b      	add	r3, r1
 8007dd0:	3310      	adds	r3, #16
 8007dd2:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007dd4:	79fb      	ldrb	r3, [r7, #7]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f001 f912 	bl	8009000 <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007ddc:	79fb      	ldrb	r3, [r7, #7]
 8007dde:	3301      	adds	r3, #1
 8007de0:	71fb      	strb	r3, [r7, #7]
 8007de2:	4b08      	ldr	r3, [pc, #32]	; (8007e04 <CheckLinkEstablishTimeout+0xd8>)
 8007de4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007de8:	79fa      	ldrb	r2, [r7, #7]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d3ad      	bcc.n	8007d4a <CheckLinkEstablishTimeout+0x1e>
 8007dee:	e000      	b.n	8007df2 <CheckLinkEstablishTimeout+0xc6>
		return;
 8007df0:	bf00      	nop
		}
	}
}
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd90      	pop	{r4, r7, pc}
 8007df8:	08023fe4 	.word	0x08023fe4
 8007dfc:	20000305 	.word	0x20000305
 8007e00:	20000f14 	.word	0x20000f14
 8007e04:	20000304 	.word	0x20000304
 8007e08:	20002390 	.word	0x20002390
 8007e0c:	08024e40 	.word	0x08024e40
 8007e10:	20000f64 	.word	0x20000f64
 8007e14:	20001674 	.word	0x20001674

08007e18 <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007e18:	b590      	push	{r4, r7, lr}
 8007e1a:	b083      	sub	sp, #12
 8007e1c:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e1e:	2300      	movs	r3, #0
 8007e20:	71fb      	strb	r3, [r7, #7]
 8007e22:	e049      	b.n	8007eb8 <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007e24:	79fb      	ldrb	r3, [r7, #7]
 8007e26:	4a29      	ldr	r2, [pc, #164]	; (8007ecc <Send_Self_Sharing+0xb4>)
 8007e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e2c:	4618      	mov	r0, r3
 8007e2e:	f006 ff6b 	bl	800ed08 <HAL_Elaps_Ticks>
 8007e32:	4602      	mov	r2, r0
 8007e34:	4b26      	ldr	r3, [pc, #152]	; (8007ed0 <Send_Self_Sharing+0xb8>)
 8007e36:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007e3a:	429a      	cmp	r2, r3
 8007e3c:	d939      	bls.n	8007eb2 <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007e3e:	79fa      	ldrb	r2, [r7, #7]
 8007e40:	4924      	ldr	r1, [pc, #144]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	00db      	lsls	r3, r3, #3
 8007e4a:	440b      	add	r3, r1
 8007e4c:	3301      	adds	r3, #1
 8007e4e:	2200      	movs	r2, #0
 8007e50:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007e52:	79f9      	ldrb	r1, [r7, #7]
 8007e54:	79fa      	ldrb	r2, [r7, #7]
 8007e56:	4820      	ldr	r0, [pc, #128]	; (8007ed8 <Send_Self_Sharing+0xc0>)
 8007e58:	460b      	mov	r3, r1
 8007e5a:	005b      	lsls	r3, r3, #1
 8007e5c:	440b      	add	r3, r1
 8007e5e:	009b      	lsls	r3, r3, #2
 8007e60:	4403      	add	r3, r0
 8007e62:	3301      	adds	r3, #1
 8007e64:	7818      	ldrb	r0, [r3, #0]
 8007e66:	491b      	ldr	r1, [pc, #108]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e68:	4613      	mov	r3, r2
 8007e6a:	005b      	lsls	r3, r3, #1
 8007e6c:	4413      	add	r3, r2
 8007e6e:	00db      	lsls	r3, r3, #3
 8007e70:	440b      	add	r3, r1
 8007e72:	3302      	adds	r3, #2
 8007e74:	4602      	mov	r2, r0
 8007e76:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007e78:	2218      	movs	r2, #24
 8007e7a:	2100      	movs	r1, #0
 8007e7c:	4817      	ldr	r0, [pc, #92]	; (8007edc <Send_Self_Sharing+0xc4>)
 8007e7e:	f01a fbf3 	bl	8022668 <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007e82:	79fa      	ldrb	r2, [r7, #7]
 8007e84:	4613      	mov	r3, r2
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	4413      	add	r3, r2
 8007e8a:	00db      	lsls	r3, r3, #3
 8007e8c:	4a11      	ldr	r2, [pc, #68]	; (8007ed4 <Send_Self_Sharing+0xbc>)
 8007e8e:	4413      	add	r3, r2
 8007e90:	2218      	movs	r2, #24
 8007e92:	4619      	mov	r1, r3
 8007e94:	4811      	ldr	r0, [pc, #68]	; (8007edc <Send_Self_Sharing+0xc4>)
 8007e96:	f01a fbbf 	bl	8022618 <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8007e9a:	f240 2001 	movw	r0, #513	; 0x201
 8007e9e:	f007 fce7 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007ea2:	79fc      	ldrb	r4, [r7, #7]
 8007ea4:	f00d fcbe 	bl	8015824 <HAL_GetTick>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	4a08      	ldr	r2, [pc, #32]	; (8007ecc <Send_Self_Sharing+0xb4>)
 8007eac:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007eb0:	e008      	b.n	8007ec4 <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007eb2:	79fb      	ldrb	r3, [r7, #7]
 8007eb4:	3301      	adds	r3, #1
 8007eb6:	71fb      	strb	r3, [r7, #7]
 8007eb8:	4b05      	ldr	r3, [pc, #20]	; (8007ed0 <Send_Self_Sharing+0xb8>)
 8007eba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007ebe:	79fa      	ldrb	r2, [r7, #7]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d3af      	bcc.n	8007e24 <Send_Self_Sharing+0xc>
		}
	}
}
 8007ec4:	370c      	adds	r7, #12
 8007ec6:	46bd      	mov	sp, r7
 8007ec8:	bd90      	pop	{r4, r7, pc}
 8007eca:	bf00      	nop
 8007ecc:	20000e44 	.word	0x20000e44
 8007ed0:	20000304 	.word	0x20000304
 8007ed4:	20001674 	.word	0x20001674
 8007ed8:	20002008 	.word	0x20002008
 8007edc:	20001854 	.word	0x20001854

08007ee0 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007ee4:	4b24      	ldr	r3, [pc, #144]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	2b01      	cmp	r3, #1
 8007eea:	d101      	bne.n	8007ef0 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007eec:	f00b fb6e 	bl	80135cc <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007ef0:	4922      	ldr	r1, [pc, #136]	; (8007f7c <Detect_CAN_Xchange_Failure+0x9c>)
 8007ef2:	4823      	ldr	r0, [pc, #140]	; (8007f80 <Detect_CAN_Xchange_Failure+0xa0>)
 8007ef4:	f7f8 f9a4 	bl	8000240 <strcmp>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d103      	bne.n	8007f06 <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007efe:	4b1e      	ldr	r3, [pc, #120]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007f00:	2201      	movs	r2, #1
 8007f02:	701a      	strb	r2, [r3, #0]
		return;
 8007f04:	e036      	b.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007f06:	4b1f      	ldr	r3, [pc, #124]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4618      	mov	r0, r3
 8007f0c:	f006 fefc 	bl	800ed08 <HAL_Elaps_Ticks>
 8007f10:	4602      	mov	r2, r0
 8007f12:	4b1d      	ldr	r3, [pc, #116]	; (8007f88 <Detect_CAN_Xchange_Failure+0xa8>)
 8007f14:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d32b      	bcc.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007f1c:	4b1b      	ldr	r3, [pc, #108]	; (8007f8c <Detect_CAN_Xchange_Failure+0xac>)
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	4b18      	ldr	r3, [pc, #96]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	d025      	beq.n	8007f74 <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007f28:	4b13      	ldr	r3, [pc, #76]	; (8007f78 <Detect_CAN_Xchange_Failure+0x98>)
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007f2e:	4b15      	ldr	r3, [pc, #84]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4a16      	ldr	r2, [pc, #88]	; (8007f8c <Detect_CAN_Xchange_Failure+0xac>)
 8007f34:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007f36:	4b13      	ldr	r3, [pc, #76]	; (8007f84 <Detect_CAN_Xchange_Failure+0xa4>)
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	f006 fee4 	bl	800ed08 <HAL_Elaps_Ticks>
 8007f40:	4603      	mov	r3, r0
 8007f42:	4a13      	ldr	r2, [pc, #76]	; (8007f90 <Detect_CAN_Xchange_Failure+0xb0>)
 8007f44:	fba2 2303 	umull	r2, r3, r2, r3
 8007f48:	099b      	lsrs	r3, r3, #6
 8007f4a:	4619      	mov	r1, r3
 8007f4c:	4811      	ldr	r0, [pc, #68]	; (8007f94 <Detect_CAN_Xchange_Failure+0xb4>)
 8007f4e:	f01a fc73 	bl	8022838 <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007f52:	4811      	ldr	r0, [pc, #68]	; (8007f98 <Detect_CAN_Xchange_Failure+0xb8>)
 8007f54:	f01a fd0c 	bl	8022970 <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007f58:	2218      	movs	r2, #24
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	480f      	ldr	r0, [pc, #60]	; (8007f9c <Detect_CAN_Xchange_Failure+0xbc>)
 8007f5e:	f01a fb83 	bl	8022668 <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007f62:	22a2      	movs	r2, #162	; 0xa2
 8007f64:	2100      	movs	r1, #0
 8007f66:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <Detect_CAN_Xchange_Failure+0xc0>)
 8007f68:	f01a fb7e 	bl	8022668 <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007f6c:	f240 1019 	movw	r0, #281	; 0x119
 8007f70:	f007 fc7e 	bl	800f870 <TransmitCanPkt>
		}
	}
}
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20000108 	.word	0x20000108
 8007f7c:	08023fe4 	.word	0x08023fe4
 8007f80:	20000305 	.word	0x20000305
 8007f84:	20000e40 	.word	0x20000e40
 8007f88:	20000304 	.word	0x20000304
 8007f8c:	200023b8 	.word	0x200023b8
 8007f90:	10624dd3 	.word	0x10624dd3
 8007f94:	08024e60 	.word	0x08024e60
 8007f98:	08024e90 	.word	0x08024e90
 8007f9c:	20001764 	.word	0x20001764
 8007fa0:	200010e4 	.word	0x200010e4

08007fa4 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b0ae      	sub	sp, #184	; 0xb8
 8007fa8:	af00      	add	r7, sp, #0

#ifdef EI_1

	static uint32_t send_signals_serial_Clk = 0;
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
 8007faa:	2300      	movs	r3, #0
 8007fac:	607b      	str	r3, [r7, #4]
 8007fae:	f107 0308 	add.w	r3, r7, #8
 8007fb2:	22a6      	movs	r2, #166	; 0xa6
 8007fb4:	2100      	movs	r1, #0
 8007fb6:	4618      	mov	r0, r3
 8007fb8:	f01a fb56 	bl	8022668 <memset>
	uint16_t Serial_Byte=0;
 8007fbc:	2300      	movs	r3, #0
 8007fbe:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8007fc2:	4bc3      	ldr	r3, [pc, #780]	; (80082d0 <Process_Send_Signals_2_MIE+0x32c>)
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f006 fe9e 	bl	800ed08 <HAL_Elaps_Ticks>
 8007fcc:	4602      	mov	r2, r0
 8007fce:	4bc1      	ldr	r3, [pc, #772]	; (80082d4 <Process_Send_Signals_2_MIE+0x330>)
 8007fd0:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007fd4:	429a      	cmp	r2, r3
 8007fd6:	f240 822a 	bls.w	800842e <Process_Send_Signals_2_MIE+0x48a>
	{
		uint8_t Traverser = 0;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
		uint8_t Choice = 0;
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
#ifdef EI_1
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007fe6:	2300      	movs	r3, #0
 8007fe8:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 8007fec:	e08f      	b.n	800810e <Process_Send_Signals_2_MIE+0x16a>
		{
			if( (MisMatchFlag[Traverser] == SET) && ( strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0))
 8007fee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8007ff2:	4ab9      	ldr	r2, [pc, #740]	; (80082d8 <Process_Send_Signals_2_MIE+0x334>)
 8007ff4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d11d      	bne.n	8008038 <Process_Send_Signals_2_MIE+0x94>
 8007ffc:	49b7      	ldr	r1, [pc, #732]	; (80082dc <Process_Send_Signals_2_MIE+0x338>)
 8007ffe:	48b8      	ldr	r0, [pc, #736]	; (80082e0 <Process_Send_Signals_2_MIE+0x33c>)
 8008000:	f7f8 f91e 	bl	8000240 <strcmp>
 8008004:	4603      	mov	r3, r0
 8008006:	2b00      	cmp	r3, #0
 8008008:	d016      	beq.n	8008038 <Process_Send_Signals_2_MIE+0x94>
			{
				printf("MisMatch Found:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 800800a:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 800800e:	4ab1      	ldr	r2, [pc, #708]	; (80082d4 <Process_Send_Signals_2_MIE+0x330>)
 8008010:	3366      	adds	r3, #102	; 0x66
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	4413      	add	r3, r2
 8008016:	685b      	ldr	r3, [r3, #4]
 8008018:	4619      	mov	r1, r3
 800801a:	48b2      	ldr	r0, [pc, #712]	; (80082e4 <Process_Send_Signals_2_MIE+0x340>)
 800801c:	f01a fc0c 	bl	8022838 <iprintf>
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 8008020:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	4ab0      	ldr	r2, [pc, #704]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008028:	4413      	add	r3, r2
 800802a:	3302      	adds	r3, #2
 800802c:	2210      	movs	r2, #16
 800802e:	2100      	movs	r1, #0
 8008030:	4618      	mov	r0, r3
 8008032:	f01a fb19 	bl	8022668 <memset>
				continue;
 8008036:	e065      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>
			}
			Choice = 0;
 8008038:	2300      	movs	r3, #0
 800803a:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(OtherCardLink_Flag[Traverser] == SET)?SET_BIT_USER(0,Choice):CLEAR_BIT_USER(0,Choice);
 800803e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008042:	4aaa      	ldr	r2, [pc, #680]	; (80082ec <Process_Send_Signals_2_MIE+0x348>)
 8008044:	5cd3      	ldrb	r3, [r2, r3]
 8008046:	2b01      	cmp	r3, #1
 8008048:	d106      	bne.n	8008058 <Process_Send_Signals_2_MIE+0xb4>
 800804a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8008056:	e005      	b.n	8008064 <Process_Send_Signals_2_MIE+0xc0>
 8008058:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800805c:	f023 0301 	bic.w	r3, r3, #1
 8008060:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
			(Link_Flag[Traverser] == SET)?SET_BIT_USER(1,Choice):CLEAR_BIT_USER(1,Choice);
 8008064:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008068:	4aa1      	ldr	r2, [pc, #644]	; (80082f0 <Process_Send_Signals_2_MIE+0x34c>)
 800806a:	5cd3      	ldrb	r3, [r2, r3]
 800806c:	2b01      	cmp	r3, #1
 800806e:	d106      	bne.n	800807e <Process_Send_Signals_2_MIE+0xda>
 8008070:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 800807c:	e005      	b.n	800808a <Process_Send_Signals_2_MIE+0xe6>
 800807e:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8008082:	f023 0302 	bic.w	r3, r3, #2
 8008086:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4

			switch(Choice)
 800808a:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 800808e:	2b01      	cmp	r3, #1
 8008090:	d005      	beq.n	800809e <Process_Send_Signals_2_MIE+0xfa>
 8008092:	2b00      	cmp	r3, #0
 8008094:	dd2b      	ble.n	80080ee <Process_Send_Signals_2_MIE+0x14a>
 8008096:	3b02      	subs	r3, #2
 8008098:	2b01      	cmp	r3, #1
 800809a:	d828      	bhi.n	80080ee <Process_Send_Signals_2_MIE+0x14a>
 800809c:	e013      	b.n	80080c6 <Process_Send_Signals_2_MIE+0x122>
			{
			case ONE:
				//				printf("\nOtherCard SET\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],OtherCard_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 800809e:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080a2:	011b      	lsls	r3, r3, #4
 80080a4:	4a90      	ldr	r2, [pc, #576]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 80080a6:	4413      	add	r3, r2
 80080a8:	1c98      	adds	r0, r3, #2
 80080aa:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080ae:	4613      	mov	r3, r2
 80080b0:	009b      	lsls	r3, r3, #2
 80080b2:	4413      	add	r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4a8f      	ldr	r2, [pc, #572]	; (80082f4 <Process_Send_Signals_2_MIE+0x350>)
 80080b8:	4413      	add	r3, r2
 80080ba:	3301      	adds	r3, #1
 80080bc:	2210      	movs	r2, #16
 80080be:	4619      	mov	r1, r3
 80080c0:	f01a faaa 	bl	8022618 <memcpy>
				break;
 80080c4:	e01e      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>
			case TWO:
				//				printf("\nBothCard SET2\n");
			case THREE:
				//				printf("\nBothCard SET3\n");
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 80080c6:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080ca:	011b      	lsls	r3, r3, #4
 80080cc:	4a86      	ldr	r2, [pc, #536]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 80080ce:	4413      	add	r3, r2
 80080d0:	1c98      	adds	r0, r3, #2
 80080d2:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 80080d6:	4613      	mov	r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	4413      	add	r3, r2
 80080dc:	009b      	lsls	r3, r3, #2
 80080de:	4a86      	ldr	r2, [pc, #536]	; (80082f8 <Process_Send_Signals_2_MIE+0x354>)
 80080e0:	4413      	add	r3, r2
 80080e2:	3301      	adds	r3, #1
 80080e4:	2210      	movs	r2, #16
 80080e6:	4619      	mov	r1, r3
 80080e8:	f01a fa96 	bl	8022618 <memcpy>
				break;
 80080ec:	e00a      	b.n	8008104 <Process_Send_Signals_2_MIE+0x160>

			default:
				memset(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],0,MAX_OUTPUTS_PER_PEER);
 80080ee:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 80080f2:	011b      	lsls	r3, r3, #4
 80080f4:	4a7c      	ldr	r2, [pc, #496]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 80080f6:	4413      	add	r3, r2
 80080f8:	3302      	adds	r3, #2
 80080fa:	2210      	movs	r2, #16
 80080fc:	2100      	movs	r1, #0
 80080fe:	4618      	mov	r0, r3
 8008100:	f01a fab2 	bl	8022668 <memset>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008104:	f897 30b5 	ldrb.w	r3, [r7, #181]	; 0xb5
 8008108:	3301      	adds	r3, #1
 800810a:	f887 30b5 	strb.w	r3, [r7, #181]	; 0xb5
 800810e:	4b71      	ldr	r3, [pc, #452]	; (80082d4 <Process_Send_Signals_2_MIE+0x330>)
 8008110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008114:	f897 20b5 	ldrb.w	r2, [r7, #181]	; 0xb5
 8008118:	429a      	cmp	r2, r3
 800811a:	f4ff af68 	bcc.w	8007fee <Process_Send_Signals_2_MIE+0x4a>
			}
		}


		if(Is_CAN_Exchange_happening == NO)
 800811e:	4b77      	ldr	r3, [pc, #476]	; (80082fc <Process_Send_Signals_2_MIE+0x358>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d10a      	bne.n	800813c <Process_Send_Signals_2_MIE+0x198>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8008126:	4876      	ldr	r0, [pc, #472]	; (8008300 <Process_Send_Signals_2_MIE+0x35c>)
 8008128:	f01a fc22 	bl	8022970 <puts>
			printf("Sending Blank Relay statuses\n");
 800812c:	4875      	ldr	r0, [pc, #468]	; (8008304 <Process_Send_Signals_2_MIE+0x360>)
 800812e:	f01a fc1f 	bl	8022970 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8008132:	22a2      	movs	r2, #162	; 0xa2
 8008134:	2100      	movs	r1, #0
 8008136:	486c      	ldr	r0, [pc, #432]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008138:	f01a fa96 	bl	8022668 <memset>
		}


		if(Debug_flag == 1)
 800813c:	4b72      	ldr	r3, [pc, #456]	; (8008308 <Process_Send_Signals_2_MIE+0x364>)
 800813e:	781b      	ldrb	r3, [r3, #0]
 8008140:	2b01      	cmp	r3, #1
 8008142:	d133      	bne.n	80081ac <Process_Send_Signals_2_MIE+0x208>
		{
			Get_time();
 8008144:	f003 f966 	bl	800b414 <Get_time>
			//		printf("\n_________________________________________\n");
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8008148:	4b70      	ldr	r3, [pc, #448]	; (800830c <Process_Send_Signals_2_MIE+0x368>)
 800814a:	781b      	ldrb	r3, [r3, #0]
 800814c:	4619      	mov	r1, r3
 800814e:	4b6f      	ldr	r3, [pc, #444]	; (800830c <Process_Send_Signals_2_MIE+0x368>)
 8008150:	785b      	ldrb	r3, [r3, #1]
 8008152:	461a      	mov	r2, r3
 8008154:	4b6d      	ldr	r3, [pc, #436]	; (800830c <Process_Send_Signals_2_MIE+0x368>)
 8008156:	789b      	ldrb	r3, [r3, #2]
 8008158:	486d      	ldr	r0, [pc, #436]	; (8008310 <Process_Send_Signals_2_MIE+0x36c>)
 800815a:	f01a fb6d 	bl	8022838 <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 800815e:	2300      	movs	r3, #0
 8008160:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008164:	e017      	b.n	8008196 <Process_Send_Signals_2_MIE+0x1f2>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8008166:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800816a:	4a5f      	ldr	r2, [pc, #380]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 800816c:	4413      	add	r3, r2
 800816e:	789b      	ldrb	r3, [r3, #2]
 8008170:	4619      	mov	r1, r3
 8008172:	4868      	ldr	r0, [pc, #416]	; (8008314 <Process_Send_Signals_2_MIE+0x370>)
 8008174:	f01a fb60 	bl	8022838 <iprintf>
				if(((Byte+1)%16)==0)
 8008178:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 800817c:	3301      	adds	r3, #1
 800817e:	f003 030f 	and.w	r3, r3, #15
 8008182:	2b00      	cmp	r3, #0
 8008184:	d102      	bne.n	800818c <Process_Send_Signals_2_MIE+0x1e8>
				{
					printf("\n");
 8008186:	200a      	movs	r0, #10
 8008188:	f01a fb6e 	bl	8022868 <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 800818c:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8008190:	3301      	adds	r3, #1
 8008192:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
 8008196:	f8b7 20b2 	ldrh.w	r2, [r7, #178]	; 0xb2
 800819a:	4b4e      	ldr	r3, [pc, #312]	; (80082d4 <Process_Send_Signals_2_MIE+0x330>)
 800819c:	f893 3020 	ldrb.w	r3, [r3, #32]
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	429a      	cmp	r2, r3
 80081a4:	dbdf      	blt.n	8008166 <Process_Send_Signals_2_MIE+0x1c2>
				}
			}
			printf("\n");
 80081a6:	200a      	movs	r0, #10
 80081a8:	f01a fb5e 	bl	8022868 <putchar>
			//		printf("\n_________________________________________\n");
		}
		TransmitCanPkt(EI_PROCESS_DATA);
 80081ac:	f240 1019 	movw	r0, #281	; 0x119
 80081b0:	f007 fb5e 	bl	800f870 <TransmitCanPkt>


		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80081b4:	4949      	ldr	r1, [pc, #292]	; (80082dc <Process_Send_Signals_2_MIE+0x338>)
 80081b6:	484a      	ldr	r0, [pc, #296]	; (80082e0 <Process_Send_Signals_2_MIE+0x33c>)
 80081b8:	f7f8 f842 	bl	8000240 <strcmp>
 80081bc:	4603      	mov	r3, r0
 80081be:	2b00      	cmp	r3, #0
 80081c0:	f040 8130 	bne.w	8008424 <Process_Send_Signals_2_MIE+0x480>
		{
			if(HAL_Elaps_Ticks(send_signals_serial_Clk) >= TWO_SEC )
 80081c4:	4b54      	ldr	r3, [pc, #336]	; (8008318 <Process_Send_Signals_2_MIE+0x374>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f006 fd9d 	bl	800ed08 <HAL_Elaps_Ticks>
 80081ce:	4603      	mov	r3, r0
 80081d0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80081d4:	f0c0 80a8 	bcc.w	8008328 <Process_Send_Signals_2_MIE+0x384>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 80081d8:	4a50      	ldr	r2, [pc, #320]	; (800831c <Process_Send_Signals_2_MIE+0x378>)
 80081da:	4b43      	ldr	r3, [pc, #268]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 80081dc:	4610      	mov	r0, r2
 80081de:	3302      	adds	r3, #2
 80081e0:	22a0      	movs	r2, #160	; 0xa0
 80081e2:	4619      	mov	r1, r3
 80081e4:	f01a fa18 	bl	8022618 <memcpy>
				Serial_Byte = 0;
 80081e8:	2300      	movs	r3, #0
 80081ea:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 80081ee:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80081f2:	1c5a      	adds	r2, r3, #1
 80081f4:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80081f8:	33b8      	adds	r3, #184	; 0xb8
 80081fa:	443b      	add	r3, r7
 80081fc:	227e      	movs	r2, #126	; 0x7e
 80081fe:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008202:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008206:	1c5a      	adds	r2, r3, #1
 8008208:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800820c:	33b8      	adds	r3, #184	; 0xb8
 800820e:	443b      	add	r3, r7
 8008210:	227e      	movs	r2, #126	; 0x7e
 8008212:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008216:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800821a:	1c5a      	adds	r2, r3, #1
 800821c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008220:	33b8      	adds	r3, #184	; 0xb8
 8008222:	443b      	add	r3, r7
 8008224:	227e      	movs	r2, #126	; 0x7e
 8008226:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800822a:	4b37      	ldr	r3, [pc, #220]	; (8008308 <Process_Send_Signals_2_MIE+0x364>)
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	2b01      	cmp	r3, #1
 8008230:	d102      	bne.n	8008238 <Process_Send_Signals_2_MIE+0x294>
				{
					printf("Sending Signals over Ethernet:\n");
 8008232:	483b      	ldr	r0, [pc, #236]	; (8008320 <Process_Send_Signals_2_MIE+0x37c>)
 8008234:	f01a fb9c 	bl	8022970 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008238:	2300      	movs	r3, #0
 800823a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800823e:	e014      	b.n	800826a <Process_Send_Signals_2_MIE+0x2c6>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 8008240:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008244:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008248:	1c59      	adds	r1, r3, #1
 800824a:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 800824e:	4619      	mov	r1, r3
 8008250:	4b25      	ldr	r3, [pc, #148]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 8008252:	4413      	add	r3, r2
 8008254:	789a      	ldrb	r2, [r3, #2]
 8008256:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 800825a:	443b      	add	r3, r7
 800825c:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008260:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 8008264:	3301      	adds	r3, #1
 8008266:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
 800826a:	4b1f      	ldr	r3, [pc, #124]	; (80082e8 <Process_Send_Signals_2_MIE+0x344>)
 800826c:	881b      	ldrh	r3, [r3, #0]
 800826e:	f8b7 20b0 	ldrh.w	r2, [r7, #176]	; 0xb0
 8008272:	429a      	cmp	r2, r3
 8008274:	d3e4      	bcc.n	8008240 <Process_Send_Signals_2_MIE+0x29c>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 8008276:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800827a:	1c5a      	adds	r2, r3, #1
 800827c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008280:	33b8      	adds	r3, #184	; 0xb8
 8008282:	443b      	add	r3, r7
 8008284:	227f      	movs	r2, #127	; 0x7f
 8008286:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800828a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800828e:	1c5a      	adds	r2, r3, #1
 8008290:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008294:	33b8      	adds	r3, #184	; 0xb8
 8008296:	443b      	add	r3, r7
 8008298:	227f      	movs	r2, #127	; 0x7f
 800829a:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 800829e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082a2:	1c5a      	adds	r2, r3, #1
 80082a4:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80082a8:	33b8      	adds	r3, #184	; 0xb8
 80082aa:	443b      	add	r3, r7
 80082ac:	227f      	movs	r2, #127	; 0x7f
 80082ae:	f803 2cb4 	strb.w	r2, [r3, #-180]

				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 80082b2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80082b6:	b2d9      	uxtb	r1, r3
 80082b8:	4a1a      	ldr	r2, [pc, #104]	; (8008324 <Process_Send_Signals_2_MIE+0x380>)
 80082ba:	1d3b      	adds	r3, r7, #4
 80082bc:	6812      	ldr	r2, [r2, #0]
 80082be:	4618      	mov	r0, r3
 80082c0:	f007 f914 	bl	800f4ec <Udp_Send_SigInfo>
				send_signals_serial_Clk = HAL_GetTick();
 80082c4:	f00d faae 	bl	8015824 <HAL_GetTick>
 80082c8:	4603      	mov	r3, r0
 80082ca:	4a13      	ldr	r2, [pc, #76]	; (8008318 <Process_Send_Signals_2_MIE+0x374>)
 80082cc:	6013      	str	r3, [r2, #0]
 80082ce:	e0a9      	b.n	8008424 <Process_Send_Signals_2_MIE+0x480>
 80082d0:	20000e70 	.word	0x20000e70
 80082d4:	20000304 	.word	0x20000304
 80082d8:	20000ec4 	.word	0x20000ec4
 80082dc:	08023fe4 	.word	0x08023fe4
 80082e0:	20000305 	.word	0x20000305
 80082e4:	08024eb4 	.word	0x08024eb4
 80082e8:	200010e4 	.word	0x200010e4
 80082ec:	20000f70 	.word	0x20000f70
 80082f0:	20000f64 	.word	0x20000f64
 80082f4:	20002288 	.word	0x20002288
 80082f8:	200021c0 	.word	0x200021c0
 80082fc:	20000108 	.word	0x20000108
 8008300:	08024ec8 	.word	0x08024ec8
 8008304:	08024eec 	.word	0x08024eec
 8008308:	20000645 	.word	0x20000645
 800830c:	20002bc4 	.word	0x20002bc4
 8008310:	08024f0c 	.word	0x08024f0c
 8008314:	08024f34 	.word	0x08024f34
 8008318:	200023bc 	.word	0x200023bc
 800831c:	200023c0 	.word	0x200023c0
 8008320:	08024f3c 	.word	0x08024f3c
 8008324:	20001058 	.word	0x20001058
			}
			else if(memcmp(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff)) != 0)
 8008328:	22a0      	movs	r2, #160	; 0xa0
 800832a:	4943      	ldr	r1, [pc, #268]	; (8008438 <Process_Send_Signals_2_MIE+0x494>)
 800832c:	4843      	ldr	r0, [pc, #268]	; (800843c <Process_Send_Signals_2_MIE+0x498>)
 800832e:	f01a f963 	bl	80225f8 <memcmp>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d075      	beq.n	8008424 <Process_Send_Signals_2_MIE+0x480>
			{
				memcpy(Prev_Buff,&vEI_Transver_EI_To_MIE.Inputs[0],sizeof(Prev_Buff));
 8008338:	4a40      	ldr	r2, [pc, #256]	; (800843c <Process_Send_Signals_2_MIE+0x498>)
 800833a:	4b41      	ldr	r3, [pc, #260]	; (8008440 <Process_Send_Signals_2_MIE+0x49c>)
 800833c:	4610      	mov	r0, r2
 800833e:	3302      	adds	r3, #2
 8008340:	22a0      	movs	r2, #160	; 0xa0
 8008342:	4619      	mov	r1, r3
 8008344:	f01a f968 	bl	8022618 <memcpy>
				Serial_Byte = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 800834e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008352:	1c5a      	adds	r2, r3, #1
 8008354:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008358:	33b8      	adds	r3, #184	; 0xb8
 800835a:	443b      	add	r3, r7
 800835c:	227e      	movs	r2, #126	; 0x7e
 800835e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008362:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008366:	1c5a      	adds	r2, r3, #1
 8008368:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 800836c:	33b8      	adds	r3, #184	; 0xb8
 800836e:	443b      	add	r3, r7
 8008370:	227e      	movs	r2, #126	; 0x7e
 8008372:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7E;
 8008376:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800837a:	1c5a      	adds	r2, r3, #1
 800837c:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008380:	33b8      	adds	r3, #184	; 0xb8
 8008382:	443b      	add	r3, r7
 8008384:	227e      	movs	r2, #126	; 0x7e
 8008386:	f803 2cb4 	strb.w	r2, [r3, #-180]
				if(Debug_flag == 1)
 800838a:	4b2e      	ldr	r3, [pc, #184]	; (8008444 <Process_Send_Signals_2_MIE+0x4a0>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d102      	bne.n	8008398 <Process_Send_Signals_2_MIE+0x3f4>
				{
					printf("Sending Signals over Ethernet:\n");
 8008392:	482d      	ldr	r0, [pc, #180]	; (8008448 <Process_Send_Signals_2_MIE+0x4a4>)
 8008394:	f01a faec 	bl	8022970 <puts>
				}
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 8008398:	2300      	movs	r3, #0
 800839a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 800839e:	e014      	b.n	80083ca <Process_Send_Signals_2_MIE+0x426>
				{
					Serial_Send_Buffer[Serial_Byte++] = vEI_Transver_EI_To_MIE.Inputs[Byte];
 80083a0:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083a4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083a8:	1c59      	adds	r1, r3, #1
 80083aa:	f8a7 10b6 	strh.w	r1, [r7, #182]	; 0xb6
 80083ae:	4619      	mov	r1, r3
 80083b0:	4b23      	ldr	r3, [pc, #140]	; (8008440 <Process_Send_Signals_2_MIE+0x49c>)
 80083b2:	4413      	add	r3, r2
 80083b4:	789a      	ldrb	r2, [r3, #2]
 80083b6:	f101 03b8 	add.w	r3, r1, #184	; 0xb8
 80083ba:	443b      	add	r3, r7
 80083bc:	f803 2cb4 	strb.w	r2, [r3, #-180]
				for(uint16_t Byte = 0;Byte<(vEI_Transver_EI_To_MIE.ActualDataBytes);++Byte)
 80083c0:	f8b7 30ae 	ldrh.w	r3, [r7, #174]	; 0xae
 80083c4:	3301      	adds	r3, #1
 80083c6:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae
 80083ca:	4b1d      	ldr	r3, [pc, #116]	; (8008440 <Process_Send_Signals_2_MIE+0x49c>)
 80083cc:	881b      	ldrh	r3, [r3, #0]
 80083ce:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 80083d2:	429a      	cmp	r2, r3
 80083d4:	d3e4      	bcc.n	80083a0 <Process_Send_Signals_2_MIE+0x3fc>
				}
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083d6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083da:	1c5a      	adds	r2, r3, #1
 80083dc:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80083e0:	33b8      	adds	r3, #184	; 0xb8
 80083e2:	443b      	add	r3, r7
 80083e4:	227f      	movs	r2, #127	; 0x7f
 80083e6:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083ea:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80083ee:	1c5a      	adds	r2, r3, #1
 80083f0:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 80083f4:	33b8      	adds	r3, #184	; 0xb8
 80083f6:	443b      	add	r3, r7
 80083f8:	227f      	movs	r2, #127	; 0x7f
 80083fa:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Serial_Send_Buffer[Serial_Byte++] = 0x7F;
 80083fe:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008402:	1c5a      	adds	r2, r3, #1
 8008404:	f8a7 20b6 	strh.w	r2, [r7, #182]	; 0xb6
 8008408:	33b8      	adds	r3, #184	; 0xb8
 800840a:	443b      	add	r3, r7
 800840c:	227f      	movs	r2, #127	; 0x7f
 800840e:	f803 2cb4 	strb.w	r2, [r3, #-180]
				Udp_Send_SigInfo(Serial_Send_Buffer, Serial_Byte, Recv_IP_List[0]);
 8008412:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8008416:	b2d9      	uxtb	r1, r3
 8008418:	4a0c      	ldr	r2, [pc, #48]	; (800844c <Process_Send_Signals_2_MIE+0x4a8>)
 800841a:	1d3b      	adds	r3, r7, #4
 800841c:	6812      	ldr	r2, [r2, #0]
 800841e:	4618      	mov	r0, r3
 8008420:	f007 f864 	bl	800f4ec <Udp_Send_SigInfo>
			}
			printf("\n");
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 8008424:	f00d f9fe 	bl	8015824 <HAL_GetTick>
 8008428:	4603      	mov	r3, r0
 800842a:	4a09      	ldr	r2, [pc, #36]	; (8008450 <Process_Send_Signals_2_MIE+0x4ac>)
 800842c:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 800842e:	bf00      	nop
 8008430:	37b8      	adds	r7, #184	; 0xb8
 8008432:	46bd      	mov	sp, r7
 8008434:	bd80      	pop	{r7, pc}
 8008436:	bf00      	nop
 8008438:	200010e6 	.word	0x200010e6
 800843c:	200023c0 	.word	0x200023c0
 8008440:	200010e4 	.word	0x200010e4
 8008444:	20000645 	.word	0x20000645
 8008448:	08024f3c 	.word	0x08024f3c
 800844c:	20001058 	.word	0x20001058
 8008450:	20000e70 	.word	0x20000e70

08008454 <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 8008454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008456:	f5ad 7d09 	sub.w	sp, sp, #548	; 0x224
 800845a:	af04      	add	r7, sp, #16
 800845c:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008460:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008464:	6018      	str	r0, [r3, #0]
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800846e:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 8008472:	4602      	mov	r2, r0
 8008474:	701a      	strb	r2, [r3, #0]
 8008476:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800847a:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800847e:	460a      	mov	r2, r1
 8008480:	701a      	strb	r2, [r3, #0]
	char Print_buff[512] = {0,};
 8008482:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008486:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800848a:	2200      	movs	r2, #0
 800848c:	601a      	str	r2, [r3, #0]
 800848e:	3304      	adds	r3, #4
 8008490:	f44f 72fe 	mov.w	r2, #508	; 0x1fc
 8008494:	2100      	movs	r1, #0
 8008496:	4618      	mov	r0, r3
 8008498:	f01a f8e6 	bl	8022668 <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 800849c:	2300      	movs	r3, #0
 800849e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nR|"):Display("\nX|");
 80084a2:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084a6:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <Print_EI_DATA+0x64>
 80084b0:	48a8      	ldr	r0, [pc, #672]	; (8008754 <Print_EI_DATA+0x300>)
 80084b2:	f000 f975 	bl	80087a0 <Display>
 80084b6:	e002      	b.n	80084be <Print_EI_DATA+0x6a>
 80084b8:	48a7      	ldr	r0, [pc, #668]	; (8008758 <Print_EI_DATA+0x304>)
 80084ba:	f000 f971 	bl	80087a0 <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"DA:%lu|",ExtractBits(0,16,&Msg[1]));
 80084be:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084c2:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	3301      	adds	r3, #1
 80084ca:	461a      	mov	r2, r3
 80084cc:	2110      	movs	r1, #16
 80084ce:	2000      	movs	r0, #0
 80084d0:	f7f8 f8a0 	bl	8000614 <ExtractBits>
 80084d4:	4602      	mov	r2, r0
 80084d6:	f107 030c 	add.w	r3, r7, #12
 80084da:	49a0      	ldr	r1, [pc, #640]	; (800875c <Print_EI_DATA+0x308>)
 80084dc:	4618      	mov	r0, r3
 80084de:	f01a fb63 	bl	8022ba8 <siprintf>
	Display(Print_buff);
 80084e2:	f107 030c 	add.w	r3, r7, #12
 80084e6:	4618      	mov	r0, r3
 80084e8:	f000 f95a 	bl	80087a0 <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"SA:%lu|",ExtractBits(0,16,&Msg[3]));
 80084ec:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80084f0:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	3303      	adds	r3, #3
 80084f8:	461a      	mov	r2, r3
 80084fa:	2110      	movs	r1, #16
 80084fc:	2000      	movs	r0, #0
 80084fe:	f7f8 f889 	bl	8000614 <ExtractBits>
 8008502:	4602      	mov	r2, r0
 8008504:	f107 030c 	add.w	r3, r7, #12
 8008508:	4995      	ldr	r1, [pc, #596]	; (8008760 <Print_EI_DATA+0x30c>)
 800850a:	4618      	mov	r0, r3
 800850c:	f01a fb4c 	bl	8022ba8 <siprintf>
	Display(Print_buff);
 8008510:	f107 030c 	add.w	r3, r7, #12
 8008514:	4618      	mov	r0, r3
 8008516:	f000 f943 	bl	80087a0 <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 800851a:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800851e:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	3307      	adds	r3, #7
 8008526:	461a      	mov	r2, r3
 8008528:	2108      	movs	r1, #8
 800852a:	2000      	movs	r0, #0
 800852c:	f7f8 f872 	bl	8000614 <ExtractBits>
 8008530:	4603      	mov	r3, r0
 8008532:	f887 320e 	strb.w	r3, [r7, #526]	; 0x20e
	Display("MT:");
 8008536:	488b      	ldr	r0, [pc, #556]	; (8008764 <Print_EI_DATA+0x310>)
 8008538:	f000 f932 	bl	80087a0 <Display>
	switch(Msg_type)
 800853c:	f897 320e 	ldrb.w	r3, [r7, #526]	; 0x20e
 8008540:	3b01      	subs	r3, #1
 8008542:	2b05      	cmp	r3, #5
 8008544:	d829      	bhi.n	800859a <Print_EI_DATA+0x146>
 8008546:	a201      	add	r2, pc, #4	; (adr r2, 800854c <Print_EI_DATA+0xf8>)
 8008548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854c:	08008565 	.word	0x08008565
 8008550:	08008583 	.word	0x08008583
 8008554:	0800859b 	.word	0x0800859b
 8008558:	0800858b 	.word	0x0800858b
 800855c:	0800859b 	.word	0x0800859b
 8008560:	08008593 	.word	0x08008593
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008564:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008568:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800856c:	781b      	ldrb	r3, [r3, #0]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d003      	beq.n	800857a <Print_EI_DATA+0x126>
 8008572:	487d      	ldr	r0, [pc, #500]	; (8008768 <Print_EI_DATA+0x314>)
 8008574:	f000 f914 	bl	80087a0 <Display>
		//Display("INIT     ");
		break;
 8008578:	e012      	b.n	80085a0 <Print_EI_DATA+0x14c>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 800857a:	487c      	ldr	r0, [pc, #496]	; (800876c <Print_EI_DATA+0x318>)
 800857c:	f000 f910 	bl	80087a0 <Display>
		break;
 8008580:	e00e      	b.n	80085a0 <Print_EI_DATA+0x14c>
	case 2:
		Display("VIT");
 8008582:	487b      	ldr	r0, [pc, #492]	; (8008770 <Print_EI_DATA+0x31c>)
 8008584:	f000 f90c 	bl	80087a0 <Display>
		break;
 8008588:	e00a      	b.n	80085a0 <Print_EI_DATA+0x14c>
	case 4:
		Display("STS");
 800858a:	487a      	ldr	r0, [pc, #488]	; (8008774 <Print_EI_DATA+0x320>)
 800858c:	f000 f908 	bl	80087a0 <Display>
		break;
 8008590:	e006      	b.n	80085a0 <Print_EI_DATA+0x14c>
	case 6:
		Display("SER");
 8008592:	4879      	ldr	r0, [pc, #484]	; (8008778 <Print_EI_DATA+0x324>)
 8008594:	f000 f904 	bl	80087a0 <Display>
		break;
 8008598:	e002      	b.n	80085a0 <Print_EI_DATA+0x14c>
	default:
		Display("UNKNOWN MESSAGE\n");
 800859a:	4878      	ldr	r0, [pc, #480]	; (800877c <Print_EI_DATA+0x328>)
 800859c:	f000 f900 	bl	80087a0 <Display>
	}
	Display("|");
 80085a0:	4877      	ldr	r0, [pc, #476]	; (8008780 <Print_EI_DATA+0x32c>)
 80085a2:	f000 f8fd 	bl	80087a0 <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 80085a6:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085aa:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	3305      	adds	r3, #5
 80085b2:	461a      	mov	r2, r3
 80085b4:	2108      	movs	r1, #8
 80085b6:	2000      	movs	r0, #0
 80085b8:	f7f8 f82c 	bl	8000614 <ExtractBits>
 80085bc:	4602      	mov	r2, r0
 80085be:	f107 030c 	add.w	r3, r7, #12
 80085c2:	4970      	ldr	r1, [pc, #448]	; (8008784 <Print_EI_DATA+0x330>)
 80085c4:	4618      	mov	r0, r3
 80085c6:	f01a faef 	bl	8022ba8 <siprintf>
	Display(Print_buff);
 80085ca:	f107 030c 	add.w	r3, r7, #12
 80085ce:	4618      	mov	r0, r3
 80085d0:	f000 f8e6 	bl	80087a0 <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 80085d4:	f507 7304 	add.w	r3, r7, #528	; 0x210
 80085d8:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	3306      	adds	r3, #6
 80085e0:	461a      	mov	r2, r3
 80085e2:	2108      	movs	r1, #8
 80085e4:	2000      	movs	r0, #0
 80085e6:	f7f8 f815 	bl	8000614 <ExtractBits>
 80085ea:	4602      	mov	r2, r0
 80085ec:	f107 030c 	add.w	r3, r7, #12
 80085f0:	4965      	ldr	r1, [pc, #404]	; (8008788 <Print_EI_DATA+0x334>)
 80085f2:	4618      	mov	r0, r3
 80085f4:	f01a fad8 	bl	8022ba8 <siprintf>
	Display(Print_buff);
 80085f8:	f107 030c 	add.w	r3, r7, #12
 80085fc:	4618      	mov	r0, r3
 80085fe:	f000 f8cf 	bl	80087a0 <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 8008602:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008606:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	3308      	adds	r3, #8
 800860e:	461a      	mov	r2, r3
 8008610:	2110      	movs	r1, #16
 8008612:	2000      	movs	r0, #0
 8008614:	f7f7 fffe 	bl	8000614 <ExtractBits>
 8008618:	4603      	mov	r3, r0
 800861a:	f8a7 320c 	strh.w	r3, [r7, #524]	; 0x20c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 800861e:	f8b7 220c 	ldrh.w	r2, [r7, #524]	; 0x20c
 8008622:	f107 030c 	add.w	r3, r7, #12
 8008626:	4959      	ldr	r1, [pc, #356]	; (800878c <Print_EI_DATA+0x338>)
 8008628:	4618      	mov	r0, r3
 800862a:	f01a fabd 	bl	8022ba8 <siprintf>
	Display(Print_buff);
 800862e:	f107 030c 	add.w	r3, r7, #12
 8008632:	4618      	mov	r0, r3
 8008634:	f000 f8b4 	bl	80087a0 <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 8008638:	f8b7 320c 	ldrh.w	r3, [r7, #524]	; 0x20c
 800863c:	095b      	lsrs	r3, r3, #5
 800863e:	b29b      	uxth	r3, r3
 8008640:	f003 0301 	and.w	r3, r3, #1
 8008644:	2b00      	cmp	r3, #0
 8008646:	d03f      	beq.n	80086c8 <Print_EI_DATA+0x274>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 8008648:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800864c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	330a      	adds	r3, #10
 8008654:	781b      	ldrb	r3, [r3, #0]
 8008656:	461d      	mov	r5, r3
 8008658:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800865c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	330b      	adds	r3, #11
 8008664:	781b      	ldrb	r3, [r3, #0]
 8008666:	461e      	mov	r6, r3
 8008668:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800866c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	330c      	adds	r3, #12
 8008674:	781b      	ldrb	r3, [r3, #0]
 8008676:	461a      	mov	r2, r3
 8008678:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800867c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	330d      	adds	r3, #13
 8008684:	781b      	ldrb	r3, [r3, #0]
 8008686:	4619      	mov	r1, r3
 8008688:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800868c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	330e      	adds	r3, #14
 8008694:	781b      	ldrb	r3, [r3, #0]
 8008696:	461c      	mov	r4, r3
 8008698:	f507 7304 	add.w	r3, r7, #528	; 0x210
 800869c:	f5a3 7303 	sub.w	r3, r3, #524	; 0x20c
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	330f      	adds	r3, #15
 80086a4:	781b      	ldrb	r3, [r3, #0]
 80086a6:	f107 000c 	add.w	r0, r7, #12
 80086aa:	9303      	str	r3, [sp, #12]
 80086ac:	9402      	str	r4, [sp, #8]
 80086ae:	9101      	str	r1, [sp, #4]
 80086b0:	9200      	str	r2, [sp, #0]
 80086b2:	4633      	mov	r3, r6
 80086b4:	462a      	mov	r2, r5
 80086b6:	4936      	ldr	r1, [pc, #216]	; (8008790 <Print_EI_DATA+0x33c>)
 80086b8:	f01a fa76 	bl	8022ba8 <siprintf>
		Display(Print_buff);
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	4618      	mov	r0, r3
 80086c2:	f000 f86d 	bl	80087a0 <Display>
 80086c6:	e002      	b.n	80086ce <Print_EI_DATA+0x27a>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 80086c8:	4832      	ldr	r0, [pc, #200]	; (8008794 <Print_EI_DATA+0x340>)
 80086ca:	f000 f869 	bl	80087a0 <Display>
	}
	if(Debug_flag == 1)
 80086ce:	4b32      	ldr	r3, [pc, #200]	; (8008798 <Print_EI_DATA+0x344>)
 80086d0:	781b      	ldrb	r3, [r3, #0]
 80086d2:	2b01      	cmp	r3, #1
 80086d4:	d139      	bne.n	800874a <Print_EI_DATA+0x2f6>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 80086d6:	2300      	movs	r3, #0
 80086d8:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 80086dc:	e019      	b.n	8008712 <Print_EI_DATA+0x2be>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 80086de:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80086e2:	f507 7204 	add.w	r2, r7, #528	; 0x210
 80086e6:	f5a2 7203 	sub.w	r2, r2, #524	; 0x20c
 80086ea:	6812      	ldr	r2, [r2, #0]
 80086ec:	4413      	add	r3, r2
 80086ee:	781b      	ldrb	r3, [r3, #0]
 80086f0:	461a      	mov	r2, r3
 80086f2:	f107 030c 	add.w	r3, r7, #12
 80086f6:	4929      	ldr	r1, [pc, #164]	; (800879c <Print_EI_DATA+0x348>)
 80086f8:	4618      	mov	r0, r3
 80086fa:	f01a fa55 	bl	8022ba8 <siprintf>
			Display(Print_buff);
 80086fe:	f107 030c 	add.w	r3, r7, #12
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f84c 	bl	80087a0 <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008708:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800870c:	3301      	adds	r3, #1
 800870e:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
 8008712:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008716:	f2a3 230e 	subw	r3, r3, #526	; 0x20e
 800871a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	429a      	cmp	r2, r3
 8008722:	d3dc      	bcc.n	80086de <Print_EI_DATA+0x28a>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008724:	f507 7304 	add.w	r3, r7, #528	; 0x210
 8008728:	f2a3 230d 	subw	r3, r3, #525	; 0x20d
 800872c:	781b      	ldrb	r3, [r3, #0]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d10b      	bne.n	800874a <Print_EI_DATA+0x2f6>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 8008732:	f107 030c 	add.w	r3, r7, #12
 8008736:	22f6      	movs	r2, #246	; 0xf6
 8008738:	4918      	ldr	r1, [pc, #96]	; (800879c <Print_EI_DATA+0x348>)
 800873a:	4618      	mov	r0, r3
 800873c:	f01a fa34 	bl	8022ba8 <siprintf>
			Display(Print_buff);
 8008740:	f107 030c 	add.w	r3, r7, #12
 8008744:	4618      	mov	r0, r3
 8008746:	f000 f82b 	bl	80087a0 <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 800874a:	bf00      	nop
 800874c:	f507 7705 	add.w	r7, r7, #532	; 0x214
 8008750:	46bd      	mov	sp, r7
 8008752:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008754:	08024f5c 	.word	0x08024f5c
 8008758:	08024f60 	.word	0x08024f60
 800875c:	08024f64 	.word	0x08024f64
 8008760:	08024f6c 	.word	0x08024f6c
 8008764:	08024f74 	.word	0x08024f74
 8008768:	08024f78 	.word	0x08024f78
 800876c:	08024f80 	.word	0x08024f80
 8008770:	08024f88 	.word	0x08024f88
 8008774:	08024f8c 	.word	0x08024f8c
 8008778:	08024f90 	.word	0x08024f90
 800877c:	08024f94 	.word	0x08024f94
 8008780:	08024fa8 	.word	0x08024fa8
 8008784:	08024fac 	.word	0x08024fac
 8008788:	08024fb8 	.word	0x08024fb8
 800878c:	08024fc4 	.word	0x08024fc4
 8008790:	08024fd0 	.word	0x08024fd0
 8008794:	08024ff4 	.word	0x08024ff4
 8008798:	20000645 	.word	0x20000645
 800879c:	08024f34 	.word	0x08024f34

080087a0 <Display>:

void Display(char *Data)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b084      	sub	sp, #16
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80087a8:	2300      	movs	r3, #0
 80087aa:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80087ac:	e00a      	b.n	80087c4 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	4413      	add	r3, r2
 80087b4:	781b      	ldrb	r3, [r3, #0]
 80087b6:	4619      	mov	r1, r3
 80087b8:	2000      	movs	r0, #0
 80087ba:	f00c fddb 	bl	8015374 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 80087be:	7bfb      	ldrb	r3, [r7, #15]
 80087c0:	3301      	adds	r3, #1
 80087c2:	73fb      	strb	r3, [r7, #15]
 80087c4:	7bfb      	ldrb	r3, [r7, #15]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	4413      	add	r3, r2
 80087ca:	781b      	ldrb	r3, [r3, #0]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1ee      	bne.n	80087ae <Display+0xe>
	}
}
 80087d0:	bf00      	nop
 80087d2:	bf00      	nop
 80087d4:	3710      	adds	r7, #16
 80087d6:	46bd      	mov	sp, r7
 80087d8:	bd80      	pop	{r7, pc}
	...

080087dc <print_self_Details>:
	}

}

void print_self_Details(void)
{
 80087dc:	b5b0      	push	{r4, r5, r7, lr}
 80087de:	b086      	sub	sp, #24
 80087e0:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 80087e2:	2300      	movs	r3, #0
 80087e4:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 80087e6:	4890      	ldr	r0, [pc, #576]	; (8008a28 <print_self_Details+0x24c>)
 80087e8:	f01a f8c2 	bl	8022970 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 80087ec:	4b8f      	ldr	r3, [pc, #572]	; (8008a2c <print_self_Details+0x250>)
 80087ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80087f2:	4619      	mov	r1, r3
 80087f4:	488e      	ldr	r0, [pc, #568]	; (8008a30 <print_self_Details+0x254>)
 80087f6:	f01a f81f 	bl	8022838 <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 80087fa:	4b8c      	ldr	r3, [pc, #560]	; (8008a2c <print_self_Details+0x250>)
 80087fc:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8008800:	4619      	mov	r1, r3
 8008802:	488c      	ldr	r0, [pc, #560]	; (8008a34 <print_self_Details+0x258>)
 8008804:	f01a f818 	bl	8022838 <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008808:	4b88      	ldr	r3, [pc, #544]	; (8008a2c <print_self_Details+0x250>)
 800880a:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800880e:	4619      	mov	r1, r3
 8008810:	4889      	ldr	r0, [pc, #548]	; (8008a38 <print_self_Details+0x25c>)
 8008812:	f01a f811 	bl	8022838 <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008816:	4b85      	ldr	r3, [pc, #532]	; (8008a2c <print_self_Details+0x250>)
 8008818:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 800881c:	4619      	mov	r1, r3
 800881e:	4887      	ldr	r0, [pc, #540]	; (8008a3c <print_self_Details+0x260>)
 8008820:	f01a f80a 	bl	8022838 <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008824:	4b81      	ldr	r3, [pc, #516]	; (8008a2c <print_self_Details+0x250>)
 8008826:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 800882a:	4619      	mov	r1, r3
 800882c:	4884      	ldr	r0, [pc, #528]	; (8008a40 <print_self_Details+0x264>)
 800882e:	f01a f803 	bl	8022838 <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008832:	4b7e      	ldr	r3, [pc, #504]	; (8008a2c <print_self_Details+0x250>)
 8008834:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008838:	4619      	mov	r1, r3
 800883a:	4882      	ldr	r0, [pc, #520]	; (8008a44 <print_self_Details+0x268>)
 800883c:	f019 fffc 	bl	8022838 <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008840:	4b7a      	ldr	r3, [pc, #488]	; (8008a2c <print_self_Details+0x250>)
 8008842:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008846:	4619      	mov	r1, r3
 8008848:	4879      	ldr	r0, [pc, #484]	; (8008a30 <print_self_Details+0x254>)
 800884a:	f019 fff5 	bl	8022838 <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800884e:	2300      	movs	r3, #0
 8008850:	71fb      	strb	r3, [r7, #7]
 8008852:	e03b      	b.n	80088cc <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 8008854:	79f9      	ldrb	r1, [r7, #7]
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	4a74      	ldr	r2, [pc, #464]	; (8008a2c <print_self_Details+0x250>)
 800885a:	3312      	adds	r3, #18
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	4413      	add	r3, r2
 8008860:	78db      	ldrb	r3, [r3, #3]
 8008862:	461c      	mov	r4, r3
 8008864:	79fb      	ldrb	r3, [r7, #7]
 8008866:	4a71      	ldr	r2, [pc, #452]	; (8008a2c <print_self_Details+0x250>)
 8008868:	009b      	lsls	r3, r3, #2
 800886a:	4413      	add	r3, r2
 800886c:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8008870:	461d      	mov	r5, r3
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	4a6d      	ldr	r2, [pc, #436]	; (8008a2c <print_self_Details+0x250>)
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800887e:	4618      	mov	r0, r3
 8008880:	79fb      	ldrb	r3, [r7, #7]
 8008882:	4a6a      	ldr	r2, [pc, #424]	; (8008a2c <print_self_Details+0x250>)
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800888c:	9301      	str	r3, [sp, #4]
 800888e:	9000      	str	r0, [sp, #0]
 8008890:	462b      	mov	r3, r5
 8008892:	4622      	mov	r2, r4
 8008894:	486c      	ldr	r0, [pc, #432]	; (8008a48 <print_self_Details+0x26c>)
 8008896:	f019 ffcf 	bl	8022838 <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 800889a:	79f9      	ldrb	r1, [r7, #7]
 800889c:	79fb      	ldrb	r3, [r7, #7]
 800889e:	4a63      	ldr	r2, [pc, #396]	; (8008a2c <print_self_Details+0x250>)
 80088a0:	333e      	adds	r3, #62	; 0x3e
 80088a2:	009b      	lsls	r3, r3, #2
 80088a4:	4413      	add	r3, r2
 80088a6:	885b      	ldrh	r3, [r3, #2]
 80088a8:	461a      	mov	r2, r3
 80088aa:	4868      	ldr	r0, [pc, #416]	; (8008a4c <print_self_Details+0x270>)
 80088ac:	f019 ffc4 	bl	8022838 <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80088b0:	79f9      	ldrb	r1, [r7, #7]
 80088b2:	79fb      	ldrb	r3, [r7, #7]
 80088b4:	4a5d      	ldr	r2, [pc, #372]	; (8008a2c <print_self_Details+0x250>)
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	f8b3 30fc 	ldrh.w	r3, [r3, #252]	; 0xfc
 80088be:	461a      	mov	r2, r3
 80088c0:	4863      	ldr	r0, [pc, #396]	; (8008a50 <print_self_Details+0x274>)
 80088c2:	f019 ffb9 	bl	8022838 <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 80088c6:	79fb      	ldrb	r3, [r7, #7]
 80088c8:	3301      	adds	r3, #1
 80088ca:	71fb      	strb	r3, [r7, #7]
 80088cc:	4b57      	ldr	r3, [pc, #348]	; (8008a2c <print_self_Details+0x250>)
 80088ce:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80088d2:	79fa      	ldrb	r2, [r7, #7]
 80088d4:	429a      	cmp	r2, r3
 80088d6:	d3bd      	bcc.n	8008854 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 80088d8:	4b54      	ldr	r3, [pc, #336]	; (8008a2c <print_self_Details+0x250>)
 80088da:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 80088de:	4619      	mov	r1, r3
 80088e0:	4b52      	ldr	r3, [pc, #328]	; (8008a2c <print_self_Details+0x250>)
 80088e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088e6:	461a      	mov	r2, r3
 80088e8:	4b50      	ldr	r3, [pc, #320]	; (8008a2c <print_self_Details+0x250>)
 80088ea:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80088ee:	4618      	mov	r0, r3
 80088f0:	4b4e      	ldr	r3, [pc, #312]	; (8008a2c <print_self_Details+0x250>)
 80088f2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80088f6:	9300      	str	r3, [sp, #0]
 80088f8:	4603      	mov	r3, r0
 80088fa:	4856      	ldr	r0, [pc, #344]	; (8008a54 <print_self_Details+0x278>)
 80088fc:	f019 ff9c 	bl	8022838 <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 8008900:	4b4a      	ldr	r3, [pc, #296]	; (8008a2c <print_self_Details+0x250>)
 8008902:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8008906:	4618      	mov	r0, r3
 8008908:	4b48      	ldr	r3, [pc, #288]	; (8008a2c <print_self_Details+0x250>)
 800890a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800890e:	461c      	mov	r4, r3
 8008910:	4b46      	ldr	r3, [pc, #280]	; (8008a2c <print_self_Details+0x250>)
 8008912:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008916:	461d      	mov	r5, r3
 8008918:	4b44      	ldr	r3, [pc, #272]	; (8008a2c <print_self_Details+0x250>)
 800891a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800891e:	461a      	mov	r2, r3
 8008920:	4b42      	ldr	r3, [pc, #264]	; (8008a2c <print_self_Details+0x250>)
 8008922:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8008926:	4619      	mov	r1, r3
 8008928:	4b40      	ldr	r3, [pc, #256]	; (8008a2c <print_self_Details+0x250>)
 800892a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800892e:	9302      	str	r3, [sp, #8]
 8008930:	9101      	str	r1, [sp, #4]
 8008932:	9200      	str	r2, [sp, #0]
 8008934:	462b      	mov	r3, r5
 8008936:	4622      	mov	r2, r4
 8008938:	4601      	mov	r1, r0
 800893a:	4847      	ldr	r0, [pc, #284]	; (8008a58 <print_self_Details+0x27c>)
 800893c:	f019 ff7c 	bl	8022838 <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 8008940:	4b3a      	ldr	r3, [pc, #232]	; (8008a2c <print_self_Details+0x250>)
 8008942:	f8b3 30f6 	ldrh.w	r3, [r3, #246]	; 0xf6
 8008946:	4619      	mov	r1, r3
 8008948:	4844      	ldr	r0, [pc, #272]	; (8008a5c <print_self_Details+0x280>)
 800894a:	f019 ff75 	bl	8022838 <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800894e:	2300      	movs	r3, #0
 8008950:	71fb      	strb	r3, [r7, #7]
 8008952:	e05c      	b.n	8008a0e <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 8008954:	79fb      	ldrb	r3, [r7, #7]
 8008956:	3301      	adds	r3, #1
 8008958:	4619      	mov	r1, r3
 800895a:	4841      	ldr	r0, [pc, #260]	; (8008a60 <print_self_Details+0x284>)
 800895c:	f019 ff6c 	bl	8022838 <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008960:	79fb      	ldrb	r3, [r7, #7]
 8008962:	4a32      	ldr	r2, [pc, #200]	; (8008a2c <print_self_Details+0x250>)
 8008964:	3366      	adds	r3, #102	; 0x66
 8008966:	009b      	lsls	r3, r3, #2
 8008968:	4413      	add	r3, r2
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	4619      	mov	r1, r3
 800896e:	483d      	ldr	r0, [pc, #244]	; (8008a64 <print_self_Details+0x288>)
 8008970:	f019 ff62 	bl	8022838 <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 8008974:	79fb      	ldrb	r3, [r7, #7]
 8008976:	4a2d      	ldr	r2, [pc, #180]	; (8008a2c <print_self_Details+0x250>)
 8008978:	3370      	adds	r3, #112	; 0x70
 800897a:	009b      	lsls	r3, r3, #2
 800897c:	4413      	add	r3, r2
 800897e:	685b      	ldr	r3, [r3, #4]
 8008980:	4619      	mov	r1, r3
 8008982:	4839      	ldr	r0, [pc, #228]	; (8008a68 <print_self_Details+0x28c>)
 8008984:	f019 ff58 	bl	8022838 <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	4a28      	ldr	r2, [pc, #160]	; (8008a2c <print_self_Details+0x250>)
 800898c:	33f4      	adds	r3, #244	; 0xf4
 800898e:	005b      	lsls	r3, r3, #1
 8008990:	4413      	add	r3, r2
 8008992:	889b      	ldrh	r3, [r3, #4]
 8008994:	4619      	mov	r1, r3
 8008996:	4835      	ldr	r0, [pc, #212]	; (8008a6c <print_self_Details+0x290>)
 8008998:	f019 ff4e 	bl	8022838 <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 800899c:	79fb      	ldrb	r3, [r7, #7]
 800899e:	4a23      	ldr	r2, [pc, #140]	; (8008a2c <print_self_Details+0x250>)
 80089a0:	4413      	add	r3, r2
 80089a2:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80089a6:	4619      	mov	r1, r3
 80089a8:	4831      	ldr	r0, [pc, #196]	; (8008a70 <print_self_Details+0x294>)
 80089aa:	f019 ff45 	bl	8022838 <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80089ae:	79fb      	ldrb	r3, [r7, #7]
 80089b0:	4a1e      	ldr	r2, [pc, #120]	; (8008a2c <print_self_Details+0x250>)
 80089b2:	4413      	add	r3, r2
 80089b4:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 80089b8:	4619      	mov	r1, r3
 80089ba:	482e      	ldr	r0, [pc, #184]	; (8008a74 <print_self_Details+0x298>)
 80089bc:	f019 ff3c 	bl	8022838 <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 80089c0:	79fb      	ldrb	r3, [r7, #7]
 80089c2:	4a1a      	ldr	r2, [pc, #104]	; (8008a2c <print_self_Details+0x250>)
 80089c4:	4413      	add	r3, r2
 80089c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80089ca:	4619      	mov	r1, r3
 80089cc:	482a      	ldr	r0, [pc, #168]	; (8008a78 <print_self_Details+0x29c>)
 80089ce:	f019 ff33 	bl	8022838 <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 80089d2:	79fb      	ldrb	r3, [r7, #7]
 80089d4:	4a15      	ldr	r2, [pc, #84]	; (8008a2c <print_self_Details+0x250>)
 80089d6:	338a      	adds	r3, #138	; 0x8a
 80089d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089dc:	4619      	mov	r1, r3
 80089de:	4827      	ldr	r0, [pc, #156]	; (8008a7c <print_self_Details+0x2a0>)
 80089e0:	f019 ff2a 	bl	8022838 <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 80089e4:	79fb      	ldrb	r3, [r7, #7]
 80089e6:	4a11      	ldr	r2, [pc, #68]	; (8008a2c <print_self_Details+0x250>)
 80089e8:	3394      	adds	r3, #148	; 0x94
 80089ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089ee:	4619      	mov	r1, r3
 80089f0:	4823      	ldr	r0, [pc, #140]	; (8008a80 <print_self_Details+0x2a4>)
 80089f2:	f019 ff21 	bl	8022838 <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 80089f6:	79fb      	ldrb	r3, [r7, #7]
 80089f8:	4a0c      	ldr	r2, [pc, #48]	; (8008a2c <print_self_Details+0x250>)
 80089fa:	339e      	adds	r3, #158	; 0x9e
 80089fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a00:	4619      	mov	r1, r3
 8008a02:	4820      	ldr	r0, [pc, #128]	; (8008a84 <print_self_Details+0x2a8>)
 8008a04:	f019 ff18 	bl	8022838 <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a08:	79fb      	ldrb	r3, [r7, #7]
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	71fb      	strb	r3, [r7, #7]
 8008a0e:	4b07      	ldr	r3, [pc, #28]	; (8008a2c <print_self_Details+0x250>)
 8008a10:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a14:	79fa      	ldrb	r2, [r7, #7]
 8008a16:	429a      	cmp	r2, r3
 8008a18:	d39c      	bcc.n	8008954 <print_self_Details+0x178>

	}

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 8008a1a:	4803      	ldr	r0, [pc, #12]	; (8008a28 <print_self_Details+0x24c>)
 8008a1c:	f019 ffa8 	bl	8022970 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 8008a20:	bf00      	nop
 8008a22:	3708      	adds	r7, #8
 8008a24:	46bd      	mov	sp, r7
 8008a26:	bdb0      	pop	{r4, r5, r7, pc}
 8008a28:	08025068 	.word	0x08025068
 8008a2c:	20000304 	.word	0x20000304
 8008a30:	080250bc 	.word	0x080250bc
 8008a34:	080250e0 	.word	0x080250e0
 8008a38:	08025104 	.word	0x08025104
 8008a3c:	08025130 	.word	0x08025130
 8008a40:	0802515c 	.word	0x0802515c
 8008a44:	08025188 	.word	0x08025188
 8008a48:	080251b4 	.word	0x080251b4
 8008a4c:	080251d4 	.word	0x080251d4
 8008a50:	080251e4 	.word	0x080251e4
 8008a54:	080251f4 	.word	0x080251f4
 8008a58:	08025210 	.word	0x08025210
 8008a5c:	08025240 	.word	0x08025240
 8008a60:	08025254 	.word	0x08025254
 8008a64:	08025268 	.word	0x08025268
 8008a68:	08025284 	.word	0x08025284
 8008a6c:	080252a0 	.word	0x080252a0
 8008a70:	080252bc 	.word	0x080252bc
 8008a74:	080252d4 	.word	0x080252d4
 8008a78:	080252e8 	.word	0x080252e8
 8008a7c:	080252fc 	.word	0x080252fc
 8008a80:	08025318 	.word	0x08025318
 8008a84:	08025334 	.word	0x08025334

08008a88 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b082      	sub	sp, #8
 8008a8c:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 8008a8e:	2300      	movs	r3, #0
 8008a90:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a92:	2300      	movs	r3, #0
 8008a94:	71fb      	strb	r3, [r7, #7]
 8008a96:	e054      	b.n	8008b42 <Send_Init_After_Timeout+0xba>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 8008a98:	79fb      	ldrb	r3, [r7, #7]
 8008a9a:	4a2f      	ldr	r2, [pc, #188]	; (8008b58 <Send_Init_After_Timeout+0xd0>)
 8008a9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d04b      	beq.n	8008b3c <Send_Init_After_Timeout+0xb4>
		{
#ifdef EI_1
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008aa4:	79fb      	ldrb	r3, [r7, #7]
 8008aa6:	4a2c      	ldr	r2, [pc, #176]	; (8008b58 <Send_Init_After_Timeout+0xd0>)
 8008aa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aac:	4618      	mov	r0, r3
 8008aae:	f006 f92b 	bl	800ed08 <HAL_Elaps_Ticks>
 8008ab2:	4602      	mov	r2, r0
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	4929      	ldr	r1, [pc, #164]	; (8008b5c <Send_Init_After_Timeout+0xd4>)
 8008ab8:	3394      	adds	r3, #148	; 0x94
 8008aba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
			if(
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	d93c      	bls.n	8008b3c <Send_Init_After_Timeout+0xb4>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008ac2:	79fb      	ldrb	r3, [r7, #7]
 8008ac4:	4a26      	ldr	r2, [pc, #152]	; (8008b60 <Send_Init_After_Timeout+0xd8>)
 8008ac6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f006 f91c 	bl	800ed08 <HAL_Elaps_Ticks>
 8008ad0:	4602      	mov	r2, r0
 8008ad2:	79fb      	ldrb	r3, [r7, #7]
 8008ad4:	4921      	ldr	r1, [pc, #132]	; (8008b5c <Send_Init_After_Timeout+0xd4>)
 8008ad6:	3394      	adds	r3, #148	; 0x94
 8008ad8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]) &&
 8008adc:	429a      	cmp	r2, r3
 8008ade:	d92d      	bls.n	8008b3c <Send_Init_After_Timeout+0xb4>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008ae0:	79fb      	ldrb	r3, [r7, #7]
 8008ae2:	4a20      	ldr	r2, [pc, #128]	; (8008b64 <Send_Init_After_Timeout+0xdc>)
 8008ae4:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser])) &&
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d028      	beq.n	8008b3c <Send_Init_After_Timeout+0xb4>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	4a1e      	ldr	r2, [pc, #120]	; (8008b68 <Send_Init_After_Timeout+0xe0>)
 8008aee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008af2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008af6:	d921      	bls.n	8008b3c <Send_Init_After_Timeout+0xb4>
			)
			{
				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 8008af8:	79fb      	ldrb	r3, [r7, #7]
 8008afa:	4a17      	ldr	r2, [pc, #92]	; (8008b58 <Send_Init_After_Timeout+0xd0>)
 8008afc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b00:	4618      	mov	r0, r3
 8008b02:	f006 f901 	bl	800ed08 <HAL_Elaps_Ticks>
 8008b06:	4603      	mov	r3, r0
 8008b08:	4a18      	ldr	r2, [pc, #96]	; (8008b6c <Send_Init_After_Timeout+0xe4>)
 8008b0a:	fba2 2303 	umull	r2, r3, r2, r3
 8008b0e:	099b      	lsrs	r3, r3, #6
 8008b10:	4619      	mov	r1, r3
 8008b12:	4817      	ldr	r0, [pc, #92]	; (8008b70 <Send_Init_After_Timeout+0xe8>)
 8008b14:	f019 fe90 	bl	8022838 <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 8008b18:	79fb      	ldrb	r3, [r7, #7]
 8008b1a:	4a16      	ldr	r2, [pc, #88]	; (8008b74 <Send_Init_After_Timeout+0xec>)
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008b20:	79fa      	ldrb	r2, [r7, #7]
 8008b22:	79fb      	ldrb	r3, [r7, #7]
 8008b24:	4611      	mov	r1, r2
 8008b26:	4618      	mov	r0, r3
 8008b28:	f7f9 fbd4 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008b2c:	79fb      	ldrb	r3, [r7, #7]
 8008b2e:	4a0d      	ldr	r2, [pc, #52]	; (8008b64 <Send_Init_After_Timeout+0xdc>)
 8008b30:	2101      	movs	r1, #1
 8008b32:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	4a10      	ldr	r2, [pc, #64]	; (8008b78 <Send_Init_After_Timeout+0xf0>)
 8008b38:	2101      	movs	r1, #1
 8008b3a:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	3301      	adds	r3, #1
 8008b40:	71fb      	strb	r3, [r7, #7]
 8008b42:	4b06      	ldr	r3, [pc, #24]	; (8008b5c <Send_Init_After_Timeout+0xd4>)
 8008b44:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b48:	79fa      	ldrb	r2, [r7, #7]
 8008b4a:	429a      	cmp	r2, r3
 8008b4c:	d3a4      	bcc.n	8008a98 <Send_Init_After_Timeout+0x10>
				INIT_REQ_SENT_Flag[Traverser] = 1;
			}
#endif
		}
	}
}
 8008b4e:	bf00      	nop
 8008b50:	bf00      	nop
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	20000fa4 	.word	0x20000fa4
 8008b5c:	20000304 	.word	0x20000304
 8008b60:	20000e9c 	.word	0x20000e9c
 8008b64:	2000108c 	.word	0x2000108c
 8008b68:	20001098 	.word	0x20001098
 8008b6c:	10624dd3 	.word	0x10624dd3
 8008b70:	08025350 	.word	0x08025350
 8008b74:	200010cc 	.word	0x200010cc
 8008b78:	200010c0 	.word	0x200010c0

08008b7c <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b082      	sub	sp, #8
 8008b80:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8008b82:	2300      	movs	r3, #0
 8008b84:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b86:	e025      	b.n	8008bd4 <Send_Vital_Msg_After_Rx_VITAL+0x58>
			Send_Vital_Data_Message(Traverser, Traverser);
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if( (Send_Vital_MSG_st.flag[Traverser] == SET) &&(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 20 ) )
 8008b88:	79fb      	ldrb	r3, [r7, #7]
 8008b8a:	4a18      	ldr	r2, [pc, #96]	; (8008bec <Send_Vital_Msg_After_Rx_VITAL+0x70>)
 8008b8c:	5cd3      	ldrb	r3, [r2, r3]
 8008b8e:	2b01      	cmp	r3, #1
 8008b90:	d11d      	bne.n	8008bce <Send_Vital_Msg_After_Rx_VITAL+0x52>
 8008b92:	79fb      	ldrb	r3, [r7, #7]
 8008b94:	4a15      	ldr	r2, [pc, #84]	; (8008bec <Send_Vital_Msg_After_Rx_VITAL+0x70>)
 8008b96:	3302      	adds	r3, #2
 8008b98:	009b      	lsls	r3, r3, #2
 8008b9a:	4413      	add	r3, r2
 8008b9c:	685b      	ldr	r3, [r3, #4]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f006 f8b2 	bl	800ed08 <HAL_Elaps_Ticks>
 8008ba4:	4603      	mov	r3, r0
 8008ba6:	2b14      	cmp	r3, #20
 8008ba8:	d911      	bls.n	8008bce <Send_Vital_Msg_After_Rx_VITAL+0x52>
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8008baa:	79fa      	ldrb	r2, [r7, #7]
 8008bac:	79fb      	ldrb	r3, [r7, #7]
 8008bae:	4611      	mov	r1, r2
 8008bb0:	4618      	mov	r0, r3
 8008bb2:	f7fb f8c3 	bl	8003d3c <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	4a0c      	ldr	r2, [pc, #48]	; (8008bec <Send_Vital_Msg_After_Rx_VITAL+0x70>)
 8008bba:	2100      	movs	r1, #0
 8008bbc:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008bbe:	79fb      	ldrb	r3, [r7, #7]
 8008bc0:	4a0a      	ldr	r2, [pc, #40]	; (8008bec <Send_Vital_Msg_After_Rx_VITAL+0x70>)
 8008bc2:	3302      	adds	r3, #2
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	4413      	add	r3, r2
 8008bc8:	f04f 32ff 	mov.w	r2, #4294967295
 8008bcc:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008bce:	79fb      	ldrb	r3, [r7, #7]
 8008bd0:	3301      	adds	r3, #1
 8008bd2:	71fb      	strb	r3, [r7, #7]
 8008bd4:	4b06      	ldr	r3, [pc, #24]	; (8008bf0 <Send_Vital_Msg_After_Rx_VITAL+0x74>)
 8008bd6:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008bda:	79fa      	ldrb	r2, [r7, #7]
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d3d3      	bcc.n	8008b88 <Send_Vital_Msg_After_Rx_VITAL+0xc>
		}
	}
}
 8008be0:	bf00      	nop
 8008be2:	bf00      	nop
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	20001fd4 	.word	0x20001fd4
 8008bf0:	20000304 	.word	0x20000304

08008bf4 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b082      	sub	sp, #8
 8008bf8:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	71fb      	strb	r3, [r7, #7]
 8008bfe:	e04e      	b.n	8008c9e <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 8008c00:	79fb      	ldrb	r3, [r7, #7]
 8008c02:	4a2c      	ldr	r2, [pc, #176]	; (8008cb4 <Check_Recv_Status_fail+0xc0>)
 8008c04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d045      	beq.n	8008c98 <Check_Recv_Status_fail+0xa4>
 8008c0c:	79fa      	ldrb	r2, [r7, #7]
 8008c0e:	492a      	ldr	r1, [pc, #168]	; (8008cb8 <Check_Recv_Status_fail+0xc4>)
 8008c10:	4613      	mov	r3, r2
 8008c12:	005b      	lsls	r3, r3, #1
 8008c14:	4413      	add	r3, r2
 8008c16:	00db      	lsls	r3, r3, #3
 8008c18:	440b      	add	r3, r1
 8008c1a:	3303      	adds	r3, #3
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d03a      	beq.n	8008c98 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	4a23      	ldr	r2, [pc, #140]	; (8008cb4 <Check_Recv_Status_fail+0xc0>)
 8008c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f006 f86c 	bl	800ed08 <HAL_Elaps_Ticks>
 8008c30:	4602      	mov	r2, r0
 8008c32:	79fb      	ldrb	r3, [r7, #7]
 8008c34:	4921      	ldr	r1, [pc, #132]	; (8008cbc <Check_Recv_Status_fail+0xc8>)
 8008c36:	338a      	adds	r3, #138	; 0x8a
 8008c38:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008c3c:	429a      	cmp	r2, r3
 8008c3e:	d92b      	bls.n	8008c98 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	4a1e      	ldr	r2, [pc, #120]	; (8008cbc <Check_Recv_Status_fail+0xc8>)
 8008c44:	3366      	adds	r3, #102	; 0x66
 8008c46:	009b      	lsls	r3, r3, #2
 8008c48:	4413      	add	r3, r2
 8008c4a:	6859      	ldr	r1, [r3, #4]
 8008c4c:	79fb      	ldrb	r3, [r7, #7]
 8008c4e:	4a1b      	ldr	r2, [pc, #108]	; (8008cbc <Check_Recv_Status_fail+0xc8>)
 8008c50:	338a      	adds	r3, #138	; 0x8a
 8008c52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c56:	4a1a      	ldr	r2, [pc, #104]	; (8008cc0 <Check_Recv_Status_fail+0xcc>)
 8008c58:	fba2 2303 	umull	r2, r3, r2, r3
 8008c5c:	099b      	lsrs	r3, r3, #6
 8008c5e:	461a      	mov	r2, r3
 8008c60:	4818      	ldr	r0, [pc, #96]	; (8008cc4 <Check_Recv_Status_fail+0xd0>)
 8008c62:	f019 fde9 	bl	8022838 <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 8008c66:	79fb      	ldrb	r3, [r7, #7]
 8008c68:	4a12      	ldr	r2, [pc, #72]	; (8008cb4 <Check_Recv_Status_fail+0xc0>)
 8008c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4815      	ldr	r0, [pc, #84]	; (8008cc8 <Check_Recv_Status_fail+0xd4>)
 8008c72:	f019 fde1 	bl	8022838 <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 8008c76:	f00c fdd5 	bl	8015824 <HAL_GetTick>
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	4619      	mov	r1, r3
 8008c7e:	4813      	ldr	r0, [pc, #76]	; (8008ccc <Check_Recv_Status_fail+0xd8>)
 8008c80:	f019 fdda 	bl	8022838 <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8008c84:	79fa      	ldrb	r2, [r7, #7]
 8008c86:	490c      	ldr	r1, [pc, #48]	; (8008cb8 <Check_Recv_Status_fail+0xc4>)
 8008c88:	4613      	mov	r3, r2
 8008c8a:	005b      	lsls	r3, r3, #1
 8008c8c:	4413      	add	r3, r2
 8008c8e:	00db      	lsls	r3, r3, #3
 8008c90:	440b      	add	r3, r1
 8008c92:	3303      	adds	r3, #3
 8008c94:	2200      	movs	r2, #0
 8008c96:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008c98:	79fb      	ldrb	r3, [r7, #7]
 8008c9a:	3301      	adds	r3, #1
 8008c9c:	71fb      	strb	r3, [r7, #7]
 8008c9e:	4b07      	ldr	r3, [pc, #28]	; (8008cbc <Check_Recv_Status_fail+0xc8>)
 8008ca0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008ca4:	79fa      	ldrb	r2, [r7, #7]
 8008ca6:	429a      	cmp	r2, r3
 8008ca8:	d3aa      	bcc.n	8008c00 <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8008caa:	bf00      	nop
 8008cac:	bf00      	nop
 8008cae:	3708      	adds	r7, #8
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	bd80      	pop	{r7, pc}
 8008cb4:	20000fcc 	.word	0x20000fcc
 8008cb8:	20001674 	.word	0x20001674
 8008cbc:	20000304 	.word	0x20000304
 8008cc0:	10624dd3 	.word	0x10624dd3
 8008cc4:	0802537c 	.word	0x0802537c
 8008cc8:	080253b0 	.word	0x080253b0
 8008ccc:	080253e0 	.word	0x080253e0

08008cd0 <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 8008cd0:	b590      	push	{r4, r7, lr}
 8008cd2:	b087      	sub	sp, #28
 8008cd4:	af00      	add	r7, sp, #0
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008cda:	2300      	movs	r3, #0
 8008cdc:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 8008cde:	2300      	movs	r3, #0
 8008ce0:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 8008ce2:	2301      	movs	r3, #1
 8008ce4:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	4a39      	ldr	r2, [pc, #228]	; (8008dd0 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008cea:	4413      	add	r3, r2
 8008cec:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008cf0:	2b01      	cmp	r3, #1
 8008cf2:	d168      	bne.n	8008dc6 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008cf4:	4b37      	ldr	r3, [pc, #220]	; (8008dd4 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008cf6:	781b      	ldrb	r3, [r3, #0]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d164      	bne.n	8008dc6 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008cfc:	79fa      	ldrb	r2, [r7, #7]
 8008cfe:	4936      	ldr	r1, [pc, #216]	; (8008dd8 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d00:	4613      	mov	r3, r2
 8008d02:	005b      	lsls	r3, r3, #1
 8008d04:	4413      	add	r3, r2
 8008d06:	005b      	lsls	r3, r3, #1
 8008d08:	440b      	add	r3, r1
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	f002 fa85 	bl	800b21c <bcdToDec>
 8008d12:	4603      	mov	r3, r0
 8008d14:	461a      	mov	r2, r3
 8008d16:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d1a:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d1e:	79fa      	ldrb	r2, [r7, #7]
 8008d20:	492d      	ldr	r1, [pc, #180]	; (8008dd8 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d22:	4613      	mov	r3, r2
 8008d24:	005b      	lsls	r3, r3, #1
 8008d26:	4413      	add	r3, r2
 8008d28:	005b      	lsls	r3, r3, #1
 8008d2a:	440b      	add	r3, r1
 8008d2c:	3301      	adds	r3, #1
 8008d2e:	781b      	ldrb	r3, [r3, #0]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f002 fa73 	bl	800b21c <bcdToDec>
 8008d36:	4603      	mov	r3, r0
 8008d38:	461a      	mov	r2, r3
 8008d3a:	4613      	mov	r3, r2
 8008d3c:	011b      	lsls	r3, r3, #4
 8008d3e:	1a9b      	subs	r3, r3, r2
 8008d40:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d42:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d44:	79fa      	ldrb	r2, [r7, #7]
 8008d46:	4924      	ldr	r1, [pc, #144]	; (8008dd8 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 8008d48:	4613      	mov	r3, r2
 8008d4a:	005b      	lsls	r3, r3, #1
 8008d4c:	4413      	add	r3, r2
 8008d4e:	005b      	lsls	r3, r3, #1
 8008d50:	440b      	add	r3, r1
 8008d52:	3302      	adds	r3, #2
 8008d54:	781b      	ldrb	r3, [r3, #0]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f002 fa60 	bl	800b21c <bcdToDec>
 8008d5c:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 8008d5e:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 8008d60:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008d62:	613b      	str	r3, [r7, #16]

		Get_time();
 8008d64:	f002 fb56 	bl	800b414 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008d68:	4b1c      	ldr	r3, [pc, #112]	; (8008ddc <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008d72:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008d76:	4b19      	ldr	r3, [pc, #100]	; (8008ddc <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008d78:	785b      	ldrb	r3, [r3, #1]
 8008d7a:	4619      	mov	r1, r3
 8008d7c:	460b      	mov	r3, r1
 8008d7e:	011b      	lsls	r3, r3, #4
 8008d80:	1a5b      	subs	r3, r3, r1
 8008d82:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008d84:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008d86:	4a15      	ldr	r2, [pc, #84]	; (8008ddc <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008d88:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008d8a:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008d8c:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008d8e:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 8008d90:	693a      	ldr	r2, [r7, #16]
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	bfb8      	it	lt
 8008d9a:	425b      	neglt	r3, r3
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	dd12      	ble.n	8008dc6 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8008da0:	693a      	ldr	r2, [r7, #16]
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	1ad3      	subs	r3, r2, r3
 8008da6:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008daa:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8008dae:	79fb      	ldrb	r3, [r7, #7]
 8008db0:	4a07      	ldr	r2, [pc, #28]	; (8008dd0 <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008db2:	3366      	adds	r3, #102	; 0x66
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	4413      	add	r3, r2
 8008db8:	685b      	ldr	r3, [r3, #4]
 8008dba:	461a      	mov	r2, r3
 8008dbc:	4808      	ldr	r0, [pc, #32]	; (8008de0 <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 8008dbe:	f019 fd3b 	bl	8022838 <iprintf>
			Return_Value  = 0;
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008dc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	371c      	adds	r7, #28
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd90      	pop	{r4, r7, pc}
 8008dd0:	20000304 	.word	0x20000304
 8008dd4:	20000e6c 	.word	0x20000e6c
 8008dd8:	20001188 	.word	0x20001188
 8008ddc:	20002bc4 	.word	0x20002bc4
 8008de0:	080253ec 	.word	0x080253ec

08008de4 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008de4:	b590      	push	{r4, r7, lr}
 8008de6:	b083      	sub	sp, #12
 8008de8:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008dea:	2300      	movs	r3, #0
 8008dec:	71fb      	strb	r3, [r7, #7]
 8008dee:	e045      	b.n	8008e7c <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 8008df0:	79fb      	ldrb	r3, [r7, #7]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f7fe fdfe 	bl	80079f4 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008df8:	79fa      	ldrb	r2, [r7, #7]
 8008dfa:	4926      	ldr	r1, [pc, #152]	; (8008e94 <Check_All_Peers+0xb0>)
 8008dfc:	4613      	mov	r3, r2
 8008dfe:	005b      	lsls	r3, r3, #1
 8008e00:	4413      	add	r3, r2
 8008e02:	009b      	lsls	r3, r3, #2
 8008e04:	440b      	add	r3, r1
 8008e06:	3304      	adds	r3, #4
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	f005 ff7c 	bl	800ed08 <HAL_Elaps_Ticks>
 8008e10:	4602      	mov	r2, r0
 8008e12:	79fb      	ldrb	r3, [r7, #7]
 8008e14:	4920      	ldr	r1, [pc, #128]	; (8008e98 <Check_All_Peers+0xb4>)
 8008e16:	338a      	adds	r3, #138	; 0x8a
 8008e18:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008e1c:	429a      	cmp	r2, r3
 8008e1e:	d92a      	bls.n	8008e76 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 8008e20:	79fa      	ldrb	r2, [r7, #7]
 8008e22:	491c      	ldr	r1, [pc, #112]	; (8008e94 <Check_All_Peers+0xb0>)
 8008e24:	4613      	mov	r3, r2
 8008e26:	005b      	lsls	r3, r3, #1
 8008e28:	4413      	add	r3, r2
 8008e2a:	009b      	lsls	r3, r3, #2
 8008e2c:	440b      	add	r3, r1
 8008e2e:	3301      	adds	r3, #1
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	2b01      	cmp	r3, #1
 8008e34:	d11f      	bne.n	8008e76 <Check_All_Peers+0x92>
 8008e36:	79fb      	ldrb	r3, [r7, #7]
 8008e38:	4a18      	ldr	r2, [pc, #96]	; (8008e9c <Check_All_Peers+0xb8>)
 8008e3a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8008e3e:	79fa      	ldrb	r2, [r7, #7]
 8008e40:	4814      	ldr	r0, [pc, #80]	; (8008e94 <Check_All_Peers+0xb0>)
 8008e42:	4613      	mov	r3, r2
 8008e44:	005b      	lsls	r3, r3, #1
 8008e46:	4413      	add	r3, r2
 8008e48:	009b      	lsls	r3, r3, #2
 8008e4a:	4403      	add	r3, r0
 8008e4c:	3304      	adds	r3, #4
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4299      	cmp	r1, r3
 8008e52:	d010      	beq.n	8008e76 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 8008e54:	79fa      	ldrb	r2, [r7, #7]
 8008e56:	490f      	ldr	r1, [pc, #60]	; (8008e94 <Check_All_Peers+0xb0>)
 8008e58:	4613      	mov	r3, r2
 8008e5a:	005b      	lsls	r3, r3, #1
 8008e5c:	4413      	add	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	440b      	add	r3, r1
 8008e62:	3301      	adds	r3, #1
 8008e64:	2200      	movs	r2, #0
 8008e66:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 8008e68:	79fc      	ldrb	r4, [r7, #7]
 8008e6a:	f00c fcdb 	bl	8015824 <HAL_GetTick>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <Check_All_Peers+0xb8>)
 8008e72:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008e76:	79fb      	ldrb	r3, [r7, #7]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	71fb      	strb	r3, [r7, #7]
 8008e7c:	4b06      	ldr	r3, [pc, #24]	; (8008e98 <Check_All_Peers+0xb4>)
 8008e7e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e82:	79fa      	ldrb	r2, [r7, #7]
 8008e84:	429a      	cmp	r2, r3
 8008e86:	d3b3      	bcc.n	8008df0 <Check_All_Peers+0xc>
			}
		}
	}
}
 8008e88:	bf00      	nop
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd90      	pop	{r4, r7, pc}
 8008e92:	bf00      	nop
 8008e94:	20002008 	.word	0x20002008
 8008e98:	20000304 	.word	0x20000304
 8008e9c:	20002460 	.word	0x20002460

08008ea0 <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008ea0:	b580      	push	{r7, lr}
 8008ea2:	b082      	sub	sp, #8
 8008ea4:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008ea6:	4949      	ldr	r1, [pc, #292]	; (8008fcc <Check_for_RelayMisMatch+0x12c>)
 8008ea8:	4849      	ldr	r0, [pc, #292]	; (8008fd0 <Check_for_RelayMisMatch+0x130>)
 8008eaa:	f7f7 f9c9 	bl	8000240 <strcmp>
 8008eae:	4603      	mov	r3, r0
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	f000 8086 	beq.w	8008fc2 <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008eb6:	4b47      	ldr	r3, [pc, #284]	; (8008fd4 <Check_for_RelayMisMatch+0x134>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4618      	mov	r0, r3
 8008ebc:	f005 ff24 	bl	800ed08 <HAL_Elaps_Ticks>
 8008ec0:	4603      	mov	r3, r0
 8008ec2:	2bc8      	cmp	r3, #200	; 0xc8
 8008ec4:	d97e      	bls.n	8008fc4 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	71fb      	strb	r3, [r7, #7]
 8008eca:	e06e      	b.n	8008faa <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	4a42      	ldr	r2, [pc, #264]	; (8008fd8 <Check_for_RelayMisMatch+0x138>)
 8008ed0:	5cd3      	ldrb	r3, [r2, r3]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d116      	bne.n	8008f04 <Check_for_RelayMisMatch+0x64>
 8008ed6:	79fb      	ldrb	r3, [r7, #7]
 8008ed8:	4a40      	ldr	r2, [pc, #256]	; (8008fdc <Check_for_RelayMisMatch+0x13c>)
 8008eda:	5cd3      	ldrb	r3, [r2, r3]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d111      	bne.n	8008f04 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008ee0:	79fa      	ldrb	r2, [r7, #7]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	009b      	lsls	r3, r3, #2
 8008eea:	4a3d      	ldr	r2, [pc, #244]	; (8008fe0 <Check_for_RelayMisMatch+0x140>)
 8008eec:	1898      	adds	r0, r3, r2
 8008eee:	79fa      	ldrb	r2, [r7, #7]
 8008ef0:	4613      	mov	r3, r2
 8008ef2:	009b      	lsls	r3, r3, #2
 8008ef4:	4413      	add	r3, r2
 8008ef6:	009b      	lsls	r3, r3, #2
 8008ef8:	4a3a      	ldr	r2, [pc, #232]	; (8008fe4 <Check_for_RelayMisMatch+0x144>)
 8008efa:	4413      	add	r3, r2
 8008efc:	2214      	movs	r2, #20
 8008efe:	4619      	mov	r1, r3
 8008f00:	f019 fb8a 	bl	8022618 <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008f04:	79fa      	ldrb	r2, [r7, #7]
 8008f06:	4936      	ldr	r1, [pc, #216]	; (8008fe0 <Check_for_RelayMisMatch+0x140>)
 8008f08:	4613      	mov	r3, r2
 8008f0a:	009b      	lsls	r3, r3, #2
 8008f0c:	4413      	add	r3, r2
 8008f0e:	009b      	lsls	r3, r3, #2
 8008f10:	440b      	add	r3, r1
 8008f12:	3312      	adds	r3, #18
 8008f14:	8819      	ldrh	r1, [r3, #0]
 8008f16:	79fa      	ldrb	r2, [r7, #7]
 8008f18:	4832      	ldr	r0, [pc, #200]	; (8008fe4 <Check_for_RelayMisMatch+0x144>)
 8008f1a:	4613      	mov	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	4413      	add	r3, r2
 8008f20:	009b      	lsls	r3, r3, #2
 8008f22:	4403      	add	r3, r0
 8008f24:	3312      	adds	r3, #18
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	4299      	cmp	r1, r3
 8008f2a:	d034      	beq.n	8008f96 <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008f2c:	79fb      	ldrb	r3, [r7, #7]
 8008f2e:	4a2e      	ldr	r2, [pc, #184]	; (8008fe8 <Check_for_RelayMisMatch+0x148>)
 8008f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f34:	4618      	mov	r0, r3
 8008f36:	f005 fee7 	bl	800ed08 <HAL_Elaps_Ticks>
 8008f3a:	4603      	mov	r3, r0
 8008f3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008f40:	d32f      	bcc.n	8008fa2 <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008f42:	79fb      	ldrb	r3, [r7, #7]
 8008f44:	4a29      	ldr	r2, [pc, #164]	; (8008fec <Check_for_RelayMisMatch+0x14c>)
 8008f46:	3366      	adds	r3, #102	; 0x66
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	685b      	ldr	r3, [r3, #4]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4827      	ldr	r0, [pc, #156]	; (8008ff0 <Check_for_RelayMisMatch+0x150>)
 8008f52:	f019 fc71 	bl	8022838 <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008f56:	79fa      	ldrb	r2, [r7, #7]
 8008f58:	4921      	ldr	r1, [pc, #132]	; (8008fe0 <Check_for_RelayMisMatch+0x140>)
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	009b      	lsls	r3, r3, #2
 8008f5e:	4413      	add	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	440b      	add	r3, r1
 8008f64:	3312      	adds	r3, #18
 8008f66:	881b      	ldrh	r3, [r3, #0]
 8008f68:	4619      	mov	r1, r3
 8008f6a:	4822      	ldr	r0, [pc, #136]	; (8008ff4 <Check_for_RelayMisMatch+0x154>)
 8008f6c:	f019 fc64 	bl	8022838 <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008f70:	79fa      	ldrb	r2, [r7, #7]
 8008f72:	491c      	ldr	r1, [pc, #112]	; (8008fe4 <Check_for_RelayMisMatch+0x144>)
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	009b      	lsls	r3, r3, #2
 8008f7c:	440b      	add	r3, r1
 8008f7e:	3312      	adds	r3, #18
 8008f80:	881b      	ldrh	r3, [r3, #0]
 8008f82:	4619      	mov	r1, r3
 8008f84:	481c      	ldr	r0, [pc, #112]	; (8008ff8 <Check_for_RelayMisMatch+0x158>)
 8008f86:	f019 fc57 	bl	8022838 <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008f8a:	79fb      	ldrb	r3, [r7, #7]
 8008f8c:	4a1b      	ldr	r2, [pc, #108]	; (8008ffc <Check_for_RelayMisMatch+0x15c>)
 8008f8e:	2101      	movs	r1, #1
 8008f90:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008f94:	e006      	b.n	8008fa4 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	4a18      	ldr	r2, [pc, #96]	; (8008ffc <Check_for_RelayMisMatch+0x15c>)
 8008f9a:	2100      	movs	r1, #0
 8008f9c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008fa0:	e000      	b.n	8008fa4 <Check_for_RelayMisMatch+0x104>
					continue;
 8008fa2:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008fa4:	79fb      	ldrb	r3, [r7, #7]
 8008fa6:	3301      	adds	r3, #1
 8008fa8:	71fb      	strb	r3, [r7, #7]
 8008faa:	4b10      	ldr	r3, [pc, #64]	; (8008fec <Check_for_RelayMisMatch+0x14c>)
 8008fac:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008fb0:	79fa      	ldrb	r2, [r7, #7]
 8008fb2:	429a      	cmp	r2, r3
 8008fb4:	d38a      	bcc.n	8008ecc <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 8008fb6:	f00c fc35 	bl	8015824 <HAL_GetTick>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	4a05      	ldr	r2, [pc, #20]	; (8008fd4 <Check_for_RelayMisMatch+0x134>)
 8008fbe:	6013      	str	r3, [r2, #0]
 8008fc0:	e000      	b.n	8008fc4 <Check_for_RelayMisMatch+0x124>
		return;
 8008fc2:	bf00      	nop
	}
}
 8008fc4:	3708      	adds	r7, #8
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	bd80      	pop	{r7, pc}
 8008fca:	bf00      	nop
 8008fcc:	08023fe4 	.word	0x08023fe4
 8008fd0:	20000305 	.word	0x20000305
 8008fd4:	20002488 	.word	0x20002488
 8008fd8:	20000f70 	.word	0x20000f70
 8008fdc:	20000f64 	.word	0x20000f64
 8008fe0:	200021c0 	.word	0x200021c0
 8008fe4:	20002288 	.word	0x20002288
 8008fe8:	20000ed8 	.word	0x20000ed8
 8008fec:	20000304 	.word	0x20000304
 8008ff0:	0802542c 	.word	0x0802542c
 8008ff4:	08025438 	.word	0x08025438
 8008ff8:	08025448 	.word	0x08025448
 8008ffc:	20000ec4 	.word	0x20000ec4

08009000 <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8009000:	b580      	push	{r7, lr}
 8009002:	b084      	sub	sp, #16
 8009004:	af00      	add	r7, sp, #0
 8009006:	4603      	mov	r3, r0
 8009008:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800900a:	f00c fc0b 	bl	8015824 <HAL_GetTick>
 800900e:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8009010:	79fa      	ldrb	r2, [r7, #7]
 8009012:	492a      	ldr	r1, [pc, #168]	; (80090bc <CheckOtherLinkStatus+0xbc>)
 8009014:	4613      	mov	r3, r2
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	4413      	add	r3, r2
 800901a:	00db      	lsls	r3, r3, #3
 800901c:	440b      	add	r3, r1
 800901e:	3302      	adds	r3, #2
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b01      	cmp	r3, #1
 8009024:	d11d      	bne.n	8009062 <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8009026:	79fb      	ldrb	r3, [r7, #7]
 8009028:	4925      	ldr	r1, [pc, #148]	; (80090c0 <CheckOtherLinkStatus+0xc0>)
 800902a:	68fa      	ldr	r2, [r7, #12]
 800902c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8009030:	79fa      	ldrb	r2, [r7, #7]
 8009032:	4924      	ldr	r1, [pc, #144]	; (80090c4 <CheckOtherLinkStatus+0xc4>)
 8009034:	4613      	mov	r3, r2
 8009036:	005b      	lsls	r3, r3, #1
 8009038:	4413      	add	r3, r2
 800903a:	009b      	lsls	r3, r3, #2
 800903c:	440b      	add	r3, r1
 800903e:	3304      	adds	r3, #4
 8009040:	68fa      	ldr	r2, [r7, #12]
 8009042:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8009044:	79fa      	ldrb	r2, [r7, #7]
 8009046:	491f      	ldr	r1, [pc, #124]	; (80090c4 <CheckOtherLinkStatus+0xc4>)
 8009048:	4613      	mov	r3, r2
 800904a:	005b      	lsls	r3, r3, #1
 800904c:	4413      	add	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	440b      	add	r3, r1
 8009052:	3301      	adds	r3, #1
 8009054:	2201      	movs	r2, #1
 8009056:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8009058:	79fb      	ldrb	r3, [r7, #7]
 800905a:	4a1b      	ldr	r2, [pc, #108]	; (80090c8 <CheckOtherLinkStatus+0xc8>)
 800905c:	2101      	movs	r1, #1
 800905e:	54d1      	strb	r1, [r2, r3]
 8009060:	e017      	b.n	8009092 <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 8009062:	79fb      	ldrb	r3, [r7, #7]
 8009064:	4a18      	ldr	r2, [pc, #96]	; (80090c8 <CheckOtherLinkStatus+0xc8>)
 8009066:	2100      	movs	r1, #0
 8009068:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 800906a:	79fa      	ldrb	r2, [r7, #7]
 800906c:	4915      	ldr	r1, [pc, #84]	; (80090c4 <CheckOtherLinkStatus+0xc4>)
 800906e:	4613      	mov	r3, r2
 8009070:	005b      	lsls	r3, r3, #1
 8009072:	4413      	add	r3, r2
 8009074:	009b      	lsls	r3, r3, #2
 8009076:	440b      	add	r3, r1
 8009078:	3308      	adds	r3, #8
 800907a:	68fa      	ldr	r2, [r7, #12]
 800907c:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 800907e:	79fa      	ldrb	r2, [r7, #7]
 8009080:	4910      	ldr	r1, [pc, #64]	; (80090c4 <CheckOtherLinkStatus+0xc4>)
 8009082:	4613      	mov	r3, r2
 8009084:	005b      	lsls	r3, r3, #1
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	440b      	add	r3, r1
 800908c:	3301      	adds	r3, #1
 800908e:	2200      	movs	r2, #0
 8009090:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8009092:	79fa      	ldrb	r2, [r7, #7]
 8009094:	4909      	ldr	r1, [pc, #36]	; (80090bc <CheckOtherLinkStatus+0xbc>)
 8009096:	4613      	mov	r3, r2
 8009098:	005b      	lsls	r3, r3, #1
 800909a:	4413      	add	r3, r2
 800909c:	00db      	lsls	r3, r3, #3
 800909e:	440b      	add	r3, r1
 80090a0:	3301      	adds	r3, #1
 80090a2:	781b      	ldrb	r3, [r3, #0]
 80090a4:	2b01      	cmp	r3, #1
 80090a6:	d104      	bne.n	80090b2 <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 80090a8:	79fb      	ldrb	r3, [r7, #7]
 80090aa:	4908      	ldr	r1, [pc, #32]	; (80090cc <CheckOtherLinkStatus+0xcc>)
 80090ac:	68fa      	ldr	r2, [r7, #12]
 80090ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 80090b2:	bf00      	nop
 80090b4:	3710      	adds	r7, #16
 80090b6:	46bd      	mov	sp, r7
 80090b8:	bd80      	pop	{r7, pc}
 80090ba:	bf00      	nop
 80090bc:	20001764 	.word	0x20001764
 80090c0:	20000f3c 	.word	0x20000f3c
 80090c4:	20002080 	.word	0x20002080
 80090c8:	20000f70 	.word	0x20000f70
 80090cc:	20000e9c 	.word	0x20000e9c

080090d0 <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 80090d4:	4b1a      	ldr	r3, [pc, #104]	; (8009140 <SendRelay2_Other+0x70>)
 80090d6:	681b      	ldr	r3, [r3, #0]
 80090d8:	4618      	mov	r0, r3
 80090da:	f005 fe15 	bl	800ed08 <HAL_Elaps_Ticks>
 80090de:	4603      	mov	r3, r0
 80090e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090e4:	d92a      	bls.n	800913c <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 80090e6:	2214      	movs	r2, #20
 80090e8:	2100      	movs	r1, #0
 80090ea:	4816      	ldr	r0, [pc, #88]	; (8009144 <SendRelay2_Other+0x74>)
 80090ec:	f019 fabc 	bl	8022668 <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 80090f0:	4b15      	ldr	r3, [pc, #84]	; (8009148 <SendRelay2_Other+0x78>)
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	4613      	mov	r3, r2
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	009b      	lsls	r3, r3, #2
 80090fc:	4a13      	ldr	r2, [pc, #76]	; (800914c <SendRelay2_Other+0x7c>)
 80090fe:	4413      	add	r3, r2
 8009100:	2214      	movs	r2, #20
 8009102:	4619      	mov	r1, r3
 8009104:	480f      	ldr	r0, [pc, #60]	; (8009144 <SendRelay2_Other+0x74>)
 8009106:	f019 fa87 	bl	8022618 <memcpy>
		//			printf("I:%u ",Tx_Temp_Main_Relays_st.No_ofIps);
		//			printf("C:%04X\n",Tx_Temp_Main_Relays_st.RelayIPS_CRC);
		//		}

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800910a:	f240 2007 	movw	r0, #519	; 0x207
 800910e:	f006 fbaf 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

		++Traverser;
 8009112:	4b0d      	ldr	r3, [pc, #52]	; (8009148 <SendRelay2_Other+0x78>)
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	4a0b      	ldr	r2, [pc, #44]	; (8009148 <SendRelay2_Other+0x78>)
 800911a:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 800911c:	4b0c      	ldr	r3, [pc, #48]	; (8009150 <SendRelay2_Other+0x80>)
 800911e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009122:	461a      	mov	r2, r3
 8009124:	4b08      	ldr	r3, [pc, #32]	; (8009148 <SendRelay2_Other+0x78>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	429a      	cmp	r2, r3
 800912a:	d102      	bne.n	8009132 <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 800912c:	4b06      	ldr	r3, [pc, #24]	; (8009148 <SendRelay2_Other+0x78>)
 800912e:	2200      	movs	r2, #0
 8009130:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8009132:	f00c fb77 	bl	8015824 <HAL_GetTick>
 8009136:	4603      	mov	r3, r0
 8009138:	4a01      	ldr	r2, [pc, #4]	; (8009140 <SendRelay2_Other+0x70>)
 800913a:	6013      	str	r3, [r2, #0]
	}
}
 800913c:	bf00      	nop
 800913e:	bd80      	pop	{r7, pc}
 8009140:	2000248c 	.word	0x2000248c
 8009144:	20002350 	.word	0x20002350
 8009148:	20002490 	.word	0x20002490
 800914c:	200021c0 	.word	0x200021c0
 8009150:	20000304 	.word	0x20000304

08009154 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 8009154:	b580      	push	{r7, lr}
 8009156:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8009158:	f013 fe52 	bl	801ce00 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800915c:	481a      	ldr	r0, [pc, #104]	; (80091c8 <Process_HitachiEI+0x74>)
 800915e:	f00f fec7 	bl	8018ef0 <HAL_IWDG_Refresh>

		Feed_wdt();
 8009162:	f00a fa17 	bl	8013594 <Feed_wdt>

		readCanToStructs();
 8009166:	f007 f805 	bl	8010174 <readCanToStructs>

		Check_for_cmd();
 800916a:	f7f7 fcf5 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 800916e:	f7f7 feed 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8009172:	f7f7 ff59 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8009176:	f7fe ff15 	bl	8007fa4 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 800917a:	f7fe fe4d 	bl	8007e18 <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 800917e:	f7fe feaf 	bl	8007ee0 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8009182:	f7fe fdd3 	bl	8007d2c <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8009186:	f7ff fe2d 	bl	8008de4 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 800918a:	f7ff fcf7 	bl	8008b7c <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 800918e:	f7ff fc7b 	bl	8008a88 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8009192:	f7ff fd2f 	bl	8008bf4 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8009196:	f002 f99f 	bl	800b4d8 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 800919a:	f7ff fe81 	bl	8008ea0 <Check_for_RelayMisMatch>

		SendRelay2_Other();
 800919e:	f7ff ff97 	bl	80090d0 <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 80091a2:	f00b fb0d 	bl	80147c0 <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 80091a6:	4b09      	ldr	r3, [pc, #36]	; (80091cc <Process_HitachiEI+0x78>)
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d003      	beq.n	80091b6 <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 80091ae:	4b08      	ldr	r3, [pc, #32]	; (80091d0 <Process_HitachiEI+0x7c>)
 80091b0:	2203      	movs	r2, #3
 80091b2:	701a      	strb	r2, [r3, #0]
			break;
 80091b4:	e002      	b.n	80091bc <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 80091b6:	f00c f923 	bl	8015400 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 80091ba:	e7cd      	b.n	8009158 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 80091bc:	f00b f9fe 	bl	80145bc <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 80091c0:	4801      	ldr	r0, [pc, #4]	; (80091c8 <Process_HitachiEI+0x74>)
 80091c2:	f00f fe95 	bl	8018ef0 <HAL_IWDG_Refresh>
		Data_Processing();
 80091c6:	e7f9      	b.n	80091bc <Process_HitachiEI+0x68>
 80091c8:	2000a04c 	.word	0x2000a04c
 80091cc:	20000644 	.word	0x20000644
 80091d0:	20000a49 	.word	0x20000a49

080091d4 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b083      	sub	sp, #12
 80091d8:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 80091da:	4b26      	ldr	r3, [pc, #152]	; (8009274 <reset_cause_get+0xa0>)
 80091dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da02      	bge.n	80091e8 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 80091e2:	2301      	movs	r3, #1
 80091e4:	71fb      	strb	r3, [r7, #7]
 80091e6:	e037      	b.n	8009258 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 80091e8:	4b22      	ldr	r3, [pc, #136]	; (8009274 <reset_cause_get+0xa0>)
 80091ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 80091f4:	2302      	movs	r3, #2
 80091f6:	71fb      	strb	r3, [r7, #7]
 80091f8:	e02e      	b.n	8009258 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 80091fa:	4b1e      	ldr	r3, [pc, #120]	; (8009274 <reset_cause_get+0xa0>)
 80091fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009202:	2b00      	cmp	r3, #0
 8009204:	d002      	beq.n	800920c <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8009206:	2303      	movs	r3, #3
 8009208:	71fb      	strb	r3, [r7, #7]
 800920a:	e025      	b.n	8009258 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 800920c:	4b19      	ldr	r3, [pc, #100]	; (8009274 <reset_cause_get+0xa0>)
 800920e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009210:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009214:	2b00      	cmp	r3, #0
 8009216:	d002      	beq.n	800921e <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8009218:	2304      	movs	r3, #4
 800921a:	71fb      	strb	r3, [r7, #7]
 800921c:	e01c      	b.n	8009258 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 800921e:	4b15      	ldr	r3, [pc, #84]	; (8009274 <reset_cause_get+0xa0>)
 8009220:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009222:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009226:	2b00      	cmp	r3, #0
 8009228:	d002      	beq.n	8009230 <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 800922a:	2305      	movs	r3, #5
 800922c:	71fb      	strb	r3, [r7, #7]
 800922e:	e013      	b.n	8009258 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8009230:	4b10      	ldr	r3, [pc, #64]	; (8009274 <reset_cause_get+0xa0>)
 8009232:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009234:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 800923c:	2306      	movs	r3, #6
 800923e:	71fb      	strb	r3, [r7, #7]
 8009240:	e00a      	b.n	8009258 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <reset_cause_get+0xa0>)
 8009244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009246:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800924a:	2b00      	cmp	r3, #0
 800924c:	d002      	beq.n	8009254 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 800924e:	2307      	movs	r3, #7
 8009250:	71fb      	strb	r3, [r7, #7]
 8009252:	e001      	b.n	8009258 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8009254:	2300      	movs	r3, #0
 8009256:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8009258:	4b06      	ldr	r3, [pc, #24]	; (8009274 <reset_cause_get+0xa0>)
 800925a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800925c:	4a05      	ldr	r2, [pc, #20]	; (8009274 <reset_cause_get+0xa0>)
 800925e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009262:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 8009264:	79fb      	ldrb	r3, [r7, #7]
}
 8009266:	4618      	mov	r0, r3
 8009268:	370c      	adds	r7, #12
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	40023800 	.word	0x40023800

08009278 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 8009278:	b480      	push	{r7}
 800927a:	b085      	sub	sp, #20
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 8009282:	4b1c      	ldr	r3, [pc, #112]	; (80092f4 <reset_cause_get_name+0x7c>)
 8009284:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8009286:	79fb      	ldrb	r3, [r7, #7]
 8009288:	2b07      	cmp	r3, #7
 800928a:	d82b      	bhi.n	80092e4 <reset_cause_get_name+0x6c>
 800928c:	a201      	add	r2, pc, #4	; (adr r2, 8009294 <reset_cause_get_name+0x1c>)
 800928e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009292:	bf00      	nop
 8009294:	080092b5 	.word	0x080092b5
 8009298:	080092bb 	.word	0x080092bb
 800929c:	080092c1 	.word	0x080092c1
 80092a0:	080092c7 	.word	0x080092c7
 80092a4:	080092cd 	.word	0x080092cd
 80092a8:	080092d3 	.word	0x080092d3
 80092ac:	080092d9 	.word	0x080092d9
 80092b0:	080092df 	.word	0x080092df
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 80092b4:	4b10      	ldr	r3, [pc, #64]	; (80092f8 <reset_cause_get_name+0x80>)
 80092b6:	60fb      	str	r3, [r7, #12]
            break;
 80092b8:	e014      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 80092ba:	4b10      	ldr	r3, [pc, #64]	; (80092fc <reset_cause_get_name+0x84>)
 80092bc:	60fb      	str	r3, [r7, #12]
            break;
 80092be:	e011      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 80092c0:	4b0f      	ldr	r3, [pc, #60]	; (8009300 <reset_cause_get_name+0x88>)
 80092c2:	60fb      	str	r3, [r7, #12]
            break;
 80092c4:	e00e      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 80092c6:	4b0f      	ldr	r3, [pc, #60]	; (8009304 <reset_cause_get_name+0x8c>)
 80092c8:	60fb      	str	r3, [r7, #12]
            break;
 80092ca:	e00b      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 80092cc:	4b0e      	ldr	r3, [pc, #56]	; (8009308 <reset_cause_get_name+0x90>)
 80092ce:	60fb      	str	r3, [r7, #12]
            break;
 80092d0:	e008      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 80092d2:	4b0e      	ldr	r3, [pc, #56]	; (800930c <reset_cause_get_name+0x94>)
 80092d4:	60fb      	str	r3, [r7, #12]
            break;
 80092d6:	e005      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 80092d8:	4b0d      	ldr	r3, [pc, #52]	; (8009310 <reset_cause_get_name+0x98>)
 80092da:	60fb      	str	r3, [r7, #12]
            break;
 80092dc:	e002      	b.n	80092e4 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 80092de:	4b0d      	ldr	r3, [pc, #52]	; (8009314 <reset_cause_get_name+0x9c>)
 80092e0:	60fb      	str	r3, [r7, #12]
            break;
 80092e2:	bf00      	nop
    }

    return reset_cause_name;
 80092e4:	68fb      	ldr	r3, [r7, #12]
}
 80092e6:	4618      	mov	r0, r3
 80092e8:	3714      	adds	r7, #20
 80092ea:	46bd      	mov	sp, r7
 80092ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f0:	4770      	bx	lr
 80092f2:	bf00      	nop
 80092f4:	08025458 	.word	0x08025458
 80092f8:	0802545c 	.word	0x0802545c
 80092fc:	08025464 	.word	0x08025464
 8009300:	08025474 	.word	0x08025474
 8009304:	0802548c 	.word	0x0802548c
 8009308:	080254a8 	.word	0x080254a8
 800930c:	080254b8 	.word	0x080254b8
 8009310:	080254e8 	.word	0x080254e8
 8009314:	08025504 	.word	0x08025504

08009318 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8009318:	b580      	push	{r7, lr}
 800931a:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 800931c:	f00b fa50 	bl	80147c0 <Print_BuildDat_Details>

		readCanToStructs();
 8009320:	f006 ff28 	bl	8010174 <readCanToStructs>

		Feed_wdt();
 8009324:	f00a f936 	bl	8013594 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8009328:	480f      	ldr	r0, [pc, #60]	; (8009368 <Process_Medha_EI+0x50>)
 800932a:	f00f fde1 	bl	8018ef0 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 800932e:	f000 f91d 	bl	800956c <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 8009332:	f000 fed3 	bl	800a0dc <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 8009336:	f000 ff39 	bl	800a1ac <Process_Clear_Relays>

		Send_Data_to_Other();
 800933a:	f000 ffcf 	bl	800a2dc <Send_Data_to_Other>

		Process_Data_from_Other();
 800933e:	f001 f827 	bl	800a390 <Process_Data_from_Other>

		CheckforMedhaCMD();
 8009342:	f001 f9ed 	bl	800a720 <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 8009346:	4b09      	ldr	r3, [pc, #36]	; (800936c <Process_Medha_EI+0x54>)
 8009348:	781b      	ldrb	r3, [r3, #0]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d003      	beq.n	8009356 <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 800934e:	4b08      	ldr	r3, [pc, #32]	; (8009370 <Process_Medha_EI+0x58>)
 8009350:	2203      	movs	r2, #3
 8009352:	701a      	strb	r2, [r3, #0]
			break;
 8009354:	e002      	b.n	800935c <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 8009356:	f00c f853 	bl	8015400 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 800935a:	e7df      	b.n	800931c <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 800935c:	4802      	ldr	r0, [pc, #8]	; (8009368 <Process_Medha_EI+0x50>)
 800935e:	f00f fdc7 	bl	8018ef0 <HAL_IWDG_Refresh>
		Data_Processing();
 8009362:	f00b f92b 	bl	80145bc <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8009366:	e7f9      	b.n	800935c <Process_Medha_EI+0x44>
 8009368:	2000a04c 	.word	0x2000a04c
 800936c:	20000644 	.word	0x20000644
 8009370:	20000a49 	.word	0x20000a49

08009374 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 8009374:	b580      	push	{r7, lr}
 8009376:	b084      	sub	sp, #16
 8009378:	af00      	add	r7, sp, #0
 800937a:	4603      	mov	r3, r0
 800937c:	6039      	str	r1, [r7, #0]
 800937e:	71fb      	strb	r3, [r7, #7]
 8009380:	4613      	mov	r3, r2
 8009382:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 8009384:	2300      	movs	r3, #0
 8009386:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 8009388:	2300      	movs	r3, #0
 800938a:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 800938c:	e0d0      	b.n	8009530 <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 800938e:	79fb      	ldrb	r3, [r7, #7]
 8009390:	4618      	mov	r0, r3
 8009392:	f00b ff1f 	bl	80151d4 <Com_Get_Byte>
 8009396:	4603      	mov	r3, r0
 8009398:	461a      	mov	r2, r3
 800939a:	4b6c      	ldr	r3, [pc, #432]	; (800954c <Get_Medha_EI_Message+0x1d8>)
 800939c:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 800939e:	4b6c      	ldr	r3, [pc, #432]	; (8009550 <Get_Medha_EI_Message+0x1dc>)
 80093a0:	781b      	ldrb	r3, [r3, #0]
 80093a2:	3b01      	subs	r3, #1
 80093a4:	2b04      	cmp	r3, #4
 80093a6:	f200 80c2 	bhi.w	800952e <Get_Medha_EI_Message+0x1ba>
 80093aa:	a201      	add	r2, pc, #4	; (adr r2, 80093b0 <Get_Medha_EI_Message+0x3c>)
 80093ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093b0:	080093c5 	.word	0x080093c5
 80093b4:	080093dd 	.word	0x080093dd
 80093b8:	0800952f 	.word	0x0800952f
 80093bc:	08009429 	.word	0x08009429
 80093c0:	08009481 	.word	0x08009481
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 80093c4:	4b61      	ldr	r3, [pc, #388]	; (800954c <Get_Medha_EI_Message+0x1d8>)
 80093c6:	781b      	ldrb	r3, [r3, #0]
 80093c8:	2b53      	cmp	r3, #83	; 0x53
 80093ca:	f040 80b1 	bne.w	8009530 <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 80093ce:	4b61      	ldr	r3, [pc, #388]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80093d0:	2201      	movs	r2, #1
 80093d2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 80093d4:	4b5e      	ldr	r3, [pc, #376]	; (8009550 <Get_Medha_EI_Message+0x1dc>)
 80093d6:	2202      	movs	r2, #2
 80093d8:	701a      	strb	r2, [r3, #0]
			}
			break;
 80093da:	e0a9      	b.n	8009530 <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 80093dc:	4b5d      	ldr	r3, [pc, #372]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80093de:	881b      	ldrh	r3, [r3, #0]
 80093e0:	2b08      	cmp	r3, #8
 80093e2:	d111      	bne.n	8009408 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 80093e4:	4b5b      	ldr	r3, [pc, #364]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80093e6:	881b      	ldrh	r3, [r3, #0]
 80093e8:	461a      	mov	r2, r3
 80093ea:	683b      	ldr	r3, [r7, #0]
 80093ec:	4413      	add	r3, r2
 80093ee:	4a57      	ldr	r2, [pc, #348]	; (800954c <Get_Medha_EI_Message+0x1d8>)
 80093f0:	7812      	ldrb	r2, [r2, #0]
 80093f2:	701a      	strb	r2, [r3, #0]
					i++;
 80093f4:	4b57      	ldr	r3, [pc, #348]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80093f6:	881b      	ldrh	r3, [r3, #0]
 80093f8:	3301      	adds	r3, #1
 80093fa:	b29a      	uxth	r2, r3
 80093fc:	4b55      	ldr	r3, [pc, #340]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80093fe:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8009400:	4b53      	ldr	r3, [pc, #332]	; (8009550 <Get_Medha_EI_Message+0x1dc>)
 8009402:	2204      	movs	r2, #4
 8009404:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 8009406:	e00d      	b.n	8009424 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8009408:	4b52      	ldr	r3, [pc, #328]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 800940a:	881b      	ldrh	r3, [r3, #0]
 800940c:	461a      	mov	r2, r3
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	4413      	add	r3, r2
 8009412:	4a4e      	ldr	r2, [pc, #312]	; (800954c <Get_Medha_EI_Message+0x1d8>)
 8009414:	7812      	ldrb	r2, [r2, #0]
 8009416:	701a      	strb	r2, [r3, #0]
					i++;
 8009418:	4b4e      	ldr	r3, [pc, #312]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 800941a:	881b      	ldrh	r3, [r3, #0]
 800941c:	3301      	adds	r3, #1
 800941e:	b29a      	uxth	r2, r3
 8009420:	4b4c      	ldr	r3, [pc, #304]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 8009422:	801a      	strh	r2, [r3, #0]
				break;
 8009424:	bf00      	nop
			}
			break;
 8009426:	e083      	b.n	8009530 <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8009428:	4b4a      	ldr	r3, [pc, #296]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 800942a:	881b      	ldrh	r3, [r3, #0]
 800942c:	3b02      	subs	r3, #2
 800942e:	683a      	ldr	r2, [r7, #0]
 8009430:	4413      	add	r3, r2
 8009432:	881b      	ldrh	r3, [r3, #0]
 8009434:	b29b      	uxth	r3, r3
 8009436:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 8009438:	4b47      	ldr	r3, [pc, #284]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 800943a:	2200      	movs	r2, #0
 800943c:	801a      	strh	r2, [r3, #0]
				j=1;
 800943e:	4b47      	ldr	r3, [pc, #284]	; (800955c <Get_Medha_EI_Message+0x1e8>)
 8009440:	2201      	movs	r2, #1
 8009442:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 8009444:	4b43      	ldr	r3, [pc, #268]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 8009446:	881b      	ldrh	r3, [r3, #0]
 8009448:	461a      	mov	r2, r3
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	4413      	add	r3, r2
 800944e:	4a3f      	ldr	r2, [pc, #252]	; (800954c <Get_Medha_EI_Message+0x1d8>)
 8009450:	7812      	ldrb	r2, [r2, #0]
 8009452:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 8009454:	4b40      	ldr	r3, [pc, #256]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 8009456:	881b      	ldrh	r3, [r3, #0]
 8009458:	3301      	adds	r3, #1
 800945a:	b29a      	uxth	r2, r3
 800945c:	4b3e      	ldr	r3, [pc, #248]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 800945e:	801a      	strh	r2, [r3, #0]
				i++;
 8009460:	4b3c      	ldr	r3, [pc, #240]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 8009462:	881b      	ldrh	r3, [r3, #0]
 8009464:	3301      	adds	r3, #1
 8009466:	b29a      	uxth	r2, r3
 8009468:	4b3a      	ldr	r3, [pc, #232]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 800946a:	801a      	strh	r2, [r3, #0]
				j++;
 800946c:	4b3b      	ldr	r3, [pc, #236]	; (800955c <Get_Medha_EI_Message+0x1e8>)
 800946e:	881b      	ldrh	r3, [r3, #0]
 8009470:	3301      	adds	r3, #1
 8009472:	b29a      	uxth	r2, r3
 8009474:	4b39      	ldr	r3, [pc, #228]	; (800955c <Get_Medha_EI_Message+0x1e8>)
 8009476:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 8009478:	4b35      	ldr	r3, [pc, #212]	; (8009550 <Get_Medha_EI_Message+0x1dc>)
 800947a:	2205      	movs	r2, #5
 800947c:	701a      	strb	r2, [r3, #0]
				break;
 800947e:	e057      	b.n	8009530 <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 8009480:	4b34      	ldr	r3, [pc, #208]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 8009482:	881b      	ldrh	r3, [r3, #0]
 8009484:	461a      	mov	r2, r3
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	4413      	add	r3, r2
 800948a:	4a30      	ldr	r2, [pc, #192]	; (800954c <Get_Medha_EI_Message+0x1d8>)
 800948c:	7812      	ldrb	r2, [r2, #0]
 800948e:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 8009490:	89ba      	ldrh	r2, [r7, #12]
 8009492:	4b31      	ldr	r3, [pc, #196]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 8009494:	881b      	ldrh	r3, [r3, #0]
 8009496:	429a      	cmp	r2, r3
 8009498:	d940      	bls.n	800951c <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 800949a:	4b2f      	ldr	r3, [pc, #188]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 800949c:	881b      	ldrh	r3, [r3, #0]
 800949e:	3301      	adds	r3, #1
 80094a0:	b29a      	uxth	r2, r3
 80094a2:	4b2d      	ldr	r3, [pc, #180]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 80094a4:	801a      	strh	r2, [r3, #0]
					i++;
 80094a6:	4b2b      	ldr	r3, [pc, #172]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80094a8:	881b      	ldrh	r3, [r3, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	b29a      	uxth	r2, r3
 80094ae:	4b29      	ldr	r3, [pc, #164]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80094b0:	801a      	strh	r2, [r3, #0]
					j++;
 80094b2:	4b2a      	ldr	r3, [pc, #168]	; (800955c <Get_Medha_EI_Message+0x1e8>)
 80094b4:	881b      	ldrh	r3, [r3, #0]
 80094b6:	3301      	adds	r3, #1
 80094b8:	b29a      	uxth	r2, r3
 80094ba:	4b28      	ldr	r3, [pc, #160]	; (800955c <Get_Medha_EI_Message+0x1e8>)
 80094bc:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 80094be:	89ba      	ldrh	r2, [r7, #12]
 80094c0:	4b25      	ldr	r3, [pc, #148]	; (8009558 <Get_Medha_EI_Message+0x1e4>)
 80094c2:	881b      	ldrh	r3, [r3, #0]
 80094c4:	429a      	cmp	r2, r3
 80094c6:	d133      	bne.n	8009530 <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 80094c8:	4b22      	ldr	r3, [pc, #136]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80094ca:	881b      	ldrh	r3, [r3, #0]
 80094cc:	3b04      	subs	r3, #4
 80094ce:	b29a      	uxth	r2, r3
 80094d0:	4b23      	ldr	r3, [pc, #140]	; (8009560 <Get_Medha_EI_Message+0x1ec>)
 80094d2:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 80094d4:	4b22      	ldr	r3, [pc, #136]	; (8009560 <Get_Medha_EI_Message+0x1ec>)
 80094d6:	881b      	ldrh	r3, [r3, #0]
 80094d8:	81fb      	strh	r3, [r7, #14]
						i = 0;
 80094da:	4b1e      	ldr	r3, [pc, #120]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 80094dc:	2200      	movs	r2, #0
 80094de:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 80094e0:	4b1b      	ldr	r3, [pc, #108]	; (8009550 <Get_Medha_EI_Message+0x1dc>)
 80094e2:	2201      	movs	r2, #1
 80094e4:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 80094e6:	2300      	movs	r3, #0
 80094e8:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 80094ea:	89fb      	ldrh	r3, [r7, #14]
 80094ec:	2b04      	cmp	r3, #4
 80094ee:	d804      	bhi.n	80094fa <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 80094f0:	481c      	ldr	r0, [pc, #112]	; (8009564 <Get_Medha_EI_Message+0x1f0>)
 80094f2:	f019 fa3d 	bl	8022970 <puts>
							return ZERO;
 80094f6:	2300      	movs	r3, #0
 80094f8:	e023      	b.n	8009542 <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 80094fa:	4b19      	ldr	r3, [pc, #100]	; (8009560 <Get_Medha_EI_Message+0x1ec>)
 80094fc:	881b      	ldrh	r3, [r3, #0]
 80094fe:	461a      	mov	r2, r3
 8009500:	6839      	ldr	r1, [r7, #0]
 8009502:	2000      	movs	r0, #0
 8009504:	f001 fbce 	bl	800aca4 <CheckCRC32>
 8009508:	4603      	mov	r3, r0
 800950a:	2b00      	cmp	r3, #0
 800950c:	d001      	beq.n	8009512 <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800950e:	89fb      	ldrh	r3, [r7, #14]
 8009510:	e017      	b.n	8009542 <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 8009512:	4815      	ldr	r0, [pc, #84]	; (8009568 <Get_Medha_EI_Message+0x1f4>)
 8009514:	f019 fa2c 	bl	8022970 <puts>
							return ZERO;
 8009518:	2300      	movs	r3, #0
 800951a:	e012      	b.n	8009542 <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 800951c:	4b0d      	ldr	r3, [pc, #52]	; (8009554 <Get_Medha_EI_Message+0x1e0>)
 800951e:	2200      	movs	r2, #0
 8009520:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 8009522:	4b0b      	ldr	r3, [pc, #44]	; (8009550 <Get_Medha_EI_Message+0x1dc>)
 8009524:	2201      	movs	r2, #1
 8009526:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 8009528:	2300      	movs	r3, #0
 800952a:	81bb      	strh	r3, [r7, #12]
				}
				break;
 800952c:	e000      	b.n	8009530 <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 800952e:	bf00      	nop
	while(Com_DataReady(ComPort))
 8009530:	79fb      	ldrb	r3, [r7, #7]
 8009532:	4618      	mov	r0, r3
 8009534:	f00b fe0e 	bl	8015154 <Com_DataReady>
 8009538:	4603      	mov	r3, r0
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f af27 	bne.w	800938e <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 8009540:	2300      	movs	r3, #0
}
 8009542:	4618      	mov	r0, r3
 8009544:	3710      	adds	r7, #16
 8009546:	46bd      	mov	sp, r7
 8009548:	bd80      	pop	{r7, pc}
 800954a:	bf00      	nop
 800954c:	20002b90 	.word	0x20002b90
 8009550:	20000116 	.word	0x20000116
 8009554:	20002b92 	.word	0x20002b92
 8009558:	20002b94 	.word	0x20002b94
 800955c:	20002b96 	.word	0x20002b96
 8009560:	20002b98 	.word	0x20002b98
 8009564:	0802551c 	.word	0x0802551c
 8009568:	08025524 	.word	0x08025524

0800956c <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 800956c:	b5b0      	push	{r4, r5, r7, lr}
 800956e:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8009572:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 8009574:	2300      	movs	r3, #0
 8009576:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 800957a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800957e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8009582:	2200      	movs	r2, #0
 8009584:	601a      	str	r2, [r3, #0]
 8009586:	3304      	adds	r3, #4
 8009588:	f44f 7294 	mov.w	r2, #296	; 0x128
 800958c:	2100      	movs	r1, #0
 800958e:	4618      	mov	r0, r3
 8009590:	f019 f86a 	bl	8022668 <memset>
	uint16_t NoOfInputs 		= 0;
 8009594:	2300      	movs	r3, #0
 8009596:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 800959a:	2300      	movs	r3, #0
 800959c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 80095a0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80095a4:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80095a8:	2200      	movs	r2, #0
 80095aa:	601a      	str	r2, [r3, #0]
 80095ac:	3304      	adds	r3, #4
 80095ae:	227c      	movs	r2, #124	; 0x7c
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f019 f858 	bl	8022668 <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 80095b8:	2300      	movs	r3, #0
 80095ba:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 80095be:	2300      	movs	r3, #0
 80095c0:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 80095c4:	4bbf      	ldr	r3, [pc, #764]	; (80098c4 <Medha_EI_Analyser+0x358>)
 80095c6:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80095ca:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 80095ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80095d2:	4618      	mov	r0, r3
 80095d4:	f7ff fece 	bl	8009374 <Get_Medha_EI_Message>
 80095d8:	4603      	mov	r3, r0
 80095da:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 80095de:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80095e2:	2b05      	cmp	r3, #5
 80095e4:	d934      	bls.n	8009650 <Medha_EI_Analyser+0xe4>
	{
		printf("Raw Data:\n");
 80095e6:	48b8      	ldr	r0, [pc, #736]	; (80098c8 <Medha_EI_Analyser+0x35c>)
 80095e8:	f019 f9c2 	bl	8022970 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 80095ec:	2300      	movs	r3, #0
 80095ee:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 80095f2:	e024      	b.n	800963e <Medha_EI_Analyser+0xd2>
		{

			if((i!=0) && ((i%10)==0))
 80095f4:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d010      	beq.n	800961e <Medha_EI_Analyser+0xb2>
 80095fc:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009600:	4bb2      	ldr	r3, [pc, #712]	; (80098cc <Medha_EI_Analyser+0x360>)
 8009602:	fba3 1302 	umull	r1, r3, r3, r2
 8009606:	08d9      	lsrs	r1, r3, #3
 8009608:	460b      	mov	r3, r1
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	005b      	lsls	r3, r3, #1
 8009610:	1ad3      	subs	r3, r2, r3
 8009612:	b29b      	uxth	r3, r3
 8009614:	2b00      	cmp	r3, #0
 8009616:	d102      	bne.n	800961e <Medha_EI_Analyser+0xb2>
			{
				printf("\n");
 8009618:	200a      	movs	r0, #10
 800961a:	f019 f925 	bl	8022868 <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800961e:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009622:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009626:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800962a:	5cd3      	ldrb	r3, [r2, r3]
 800962c:	4619      	mov	r1, r3
 800962e:	48a8      	ldr	r0, [pc, #672]	; (80098d0 <Medha_EI_Analyser+0x364>)
 8009630:	f019 f902 	bl	8022838 <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009634:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009638:	3301      	adds	r3, #1
 800963a:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800963e:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 8009642:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009646:	429a      	cmp	r2, r3
 8009648:	d3d4      	bcc.n	80095f4 <Medha_EI_Analyser+0x88>
		}
		printf("\n");
 800964a:	200a      	movs	r0, #10
 800964c:	f019 f90c 	bl	8022868 <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 8009650:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 83ba 	beq.w	8009dce <Medha_EI_Analyser+0x862>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 800965a:	463b      	mov	r3, r7
 800965c:	f44f 7292 	mov.w	r2, #292	; 0x124
 8009660:	2100      	movs	r1, #0
 8009662:	4618      	mov	r0, r3
 8009664:	f019 f800 	bl	8022668 <memset>

		BYTEINIT(0);
 8009668:	2300      	movs	r3, #0
 800966a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 800966e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009672:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009676:	4413      	add	r3, r2
 8009678:	781a      	ldrb	r2, [r3, #0]
 800967a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800967e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009682:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 8009684:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009688:	3301      	adds	r3, #1
 800968a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800968e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009692:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009696:	4413      	add	r3, r2
 8009698:	881b      	ldrh	r3, [r3, #0]
 800969a:	b29a      	uxth	r2, r3
 800969c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096a0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096a4:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 80096a6:	4b87      	ldr	r3, [pc, #540]	; (80098c4 <Medha_EI_Analyser+0x358>)
 80096a8:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 80096ac:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096b0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096b4:	889b      	ldrh	r3, [r3, #4]
 80096b6:	429a      	cmp	r2, r3
 80096b8:	d010      	beq.n	80096dc <Medha_EI_Analyser+0x170>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 80096ba:	4886      	ldr	r0, [pc, #536]	; (80098d4 <Medha_EI_Analyser+0x368>)
 80096bc:	f019 f958 	bl	8022970 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 80096c0:	4b80      	ldr	r3, [pc, #512]	; (80098c4 <Medha_EI_Analyser+0x358>)
 80096c2:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 80096c6:	4619      	mov	r1, r3
 80096c8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096cc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096d0:	889b      	ldrh	r3, [r3, #4]
 80096d2:	461a      	mov	r2, r3
 80096d4:	4880      	ldr	r0, [pc, #512]	; (80098d8 <Medha_EI_Analyser+0x36c>)
 80096d6:	f019 f8af 	bl	8022838 <iprintf>
			return;
 80096da:	e37b      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 80096dc:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096e0:	3302      	adds	r3, #2
 80096e2:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 80096e6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096ea:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80096ee:	4413      	add	r3, r2
 80096f0:	881b      	ldrh	r3, [r3, #0]
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096f8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096fc:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 80096fe:	4b71      	ldr	r3, [pc, #452]	; (80098c4 <Medha_EI_Analyser+0x358>)
 8009700:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009704:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009708:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800970c:	885b      	ldrh	r3, [r3, #2]
 800970e:	429a      	cmp	r2, r3
 8009710:	d010      	beq.n	8009734 <Medha_EI_Analyser+0x1c8>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 8009712:	4872      	ldr	r0, [pc, #456]	; (80098dc <Medha_EI_Analyser+0x370>)
 8009714:	f019 f92c 	bl	8022970 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 8009718:	4b6a      	ldr	r3, [pc, #424]	; (80098c4 <Medha_EI_Analyser+0x358>)
 800971a:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800971e:	4619      	mov	r1, r3
 8009720:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009724:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009728:	885b      	ldrh	r3, [r3, #2]
 800972a:	461a      	mov	r2, r3
 800972c:	486a      	ldr	r0, [pc, #424]	; (80098d8 <Medha_EI_Analyser+0x36c>)
 800972e:	f019 f883 	bl	8022838 <iprintf>
			return;
 8009732:	e34f      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(2);
 8009734:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009738:	3302      	adds	r3, #2
 800973a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 800973e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009742:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009746:	4413      	add	r3, r2
 8009748:	781a      	ldrb	r2, [r3, #0]
 800974a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800974e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009752:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 8009754:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009758:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800975c:	799b      	ldrb	r3, [r3, #6]
 800975e:	2baa      	cmp	r3, #170	; 0xaa
 8009760:	d010      	beq.n	8009784 <Medha_EI_Analyser+0x218>
 8009762:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009766:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800976a:	799b      	ldrb	r3, [r3, #6]
 800976c:	2bbb      	cmp	r3, #187	; 0xbb
 800976e:	d009      	beq.n	8009784 <Medha_EI_Analyser+0x218>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 8009770:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009774:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009778:	799b      	ldrb	r3, [r3, #6]
 800977a:	4619      	mov	r1, r3
 800977c:	4858      	ldr	r0, [pc, #352]	; (80098e0 <Medha_EI_Analyser+0x374>)
 800977e:	f019 f85b 	bl	8022838 <iprintf>
			return;
 8009782:	e327      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(1);
 8009784:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009788:	3301      	adds	r3, #1
 800978a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800978e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009792:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009796:	4413      	add	r3, r2
 8009798:	781a      	ldrb	r2, [r3, #0]
 800979a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800979e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097a2:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 80097a4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097a8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097ac:	79db      	ldrb	r3, [r3, #7]
 80097ae:	2be1      	cmp	r3, #225	; 0xe1
 80097b0:	d009      	beq.n	80097c6 <Medha_EI_Analyser+0x25a>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 80097b2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097b6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097ba:	79db      	ldrb	r3, [r3, #7]
 80097bc:	4619      	mov	r1, r3
 80097be:	4849      	ldr	r0, [pc, #292]	; (80098e4 <Medha_EI_Analyser+0x378>)
 80097c0:	f019 f83a 	bl	8022838 <iprintf>
			return;
 80097c4:	e306      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 80097c6:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097ca:	3301      	adds	r3, #1
 80097cc:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 80097d0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097d4:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097d8:	4413      	add	r3, r2
 80097da:	881b      	ldrh	r3, [r3, #0]
 80097dc:	b29a      	uxth	r2, r3
 80097de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097e6:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 80097e8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097ec:	3302      	adds	r3, #2
 80097ee:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 80097f2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80097f6:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80097fa:	4413      	add	r3, r2
 80097fc:	781a      	ldrb	r2, [r3, #0]
 80097fe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009802:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009806:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 8009808:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800980c:	3301      	adds	r3, #1
 800980e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 8009812:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009816:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800981a:	441a      	add	r2, r3
 800981c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009820:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009824:	330b      	adds	r3, #11
 8009826:	6811      	ldr	r1, [r2, #0]
 8009828:	6019      	str	r1, [r3, #0]
 800982a:	8891      	ldrh	r1, [r2, #4]
 800982c:	7992      	ldrb	r2, [r2, #6]
 800982e:	8099      	strh	r1, [r3, #4]
 8009830:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 8009832:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009836:	3307      	adds	r3, #7
 8009838:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 800983c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009840:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009844:	4413      	add	r3, r2
 8009846:	781a      	ldrb	r2, [r3, #0]
 8009848:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800984c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009850:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 8009852:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009856:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800985a:	7c9b      	ldrb	r3, [r3, #18]
 800985c:	2b11      	cmp	r3, #17
 800985e:	d009      	beq.n	8009874 <Medha_EI_Analyser+0x308>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 8009860:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009864:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009868:	7c9b      	ldrb	r3, [r3, #18]
 800986a:	4619      	mov	r1, r3
 800986c:	481e      	ldr	r0, [pc, #120]	; (80098e8 <Medha_EI_Analyser+0x37c>)
 800986e:	f018 ffe3 	bl	8022838 <iprintf>
			return;
 8009872:	e2af      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}

		BYTEINC(1);
 8009874:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009878:	3301      	adds	r3, #1
 800987a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 800987e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009882:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 8009886:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800988a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800988e:	4413      	add	r3, r2
 8009890:	881b      	ldrh	r3, [r3, #0]
 8009892:	b29a      	uxth	r2, r3
 8009894:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009898:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800989c:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800989e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098a2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098a6:	8a9b      	ldrh	r3, [r3, #20]
 80098a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80098ac:	d920      	bls.n	80098f0 <Medha_EI_Analyser+0x384>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 80098ae:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098b2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098b6:	8a9b      	ldrh	r3, [r3, #20]
 80098b8:	4619      	mov	r1, r3
 80098ba:	480c      	ldr	r0, [pc, #48]	; (80098ec <Medha_EI_Analyser+0x380>)
 80098bc:	f018 ffbc 	bl	8022838 <iprintf>
			return;
 80098c0:	e288      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
 80098c2:	bf00      	nop
 80098c4:	20000304 	.word	0x20000304
 80098c8:	0802552c 	.word	0x0802552c
 80098cc:	cccccccd 	.word	0xcccccccd
 80098d0:	08025538 	.word	0x08025538
 80098d4:	08025540 	.word	0x08025540
 80098d8:	08025574 	.word	0x08025574
 80098dc:	08025598 	.word	0x08025598
 80098e0:	080255c8 	.word	0x080255c8
 80098e4:	08025600 	.word	0x08025600
 80098e8:	08025638 	.word	0x08025638
 80098ec:	0802567c 	.word	0x0802567c
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 80098f0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098f4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098f8:	8a9a      	ldrh	r2, [r3, #20]
 80098fa:	4ba6      	ldr	r3, [pc, #664]	; (8009b94 <Medha_EI_Analyser+0x628>)
 80098fc:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009900:	429a      	cmp	r2, r3
 8009902:	d014      	beq.n	800992e <Medha_EI_Analyser+0x3c2>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009904:	4ba3      	ldr	r3, [pc, #652]	; (8009b94 <Medha_EI_Analyser+0x628>)
 8009906:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800990a:	4619      	mov	r1, r3
 800990c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009910:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009914:	8a9b      	ldrh	r3, [r3, #20]
 8009916:	461a      	mov	r2, r3
 8009918:	489f      	ldr	r0, [pc, #636]	; (8009b98 <Medha_EI_Analyser+0x62c>)
 800991a:	f018 ff8d 	bl	8022838 <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800991e:	499f      	ldr	r1, [pc, #636]	; (8009b9c <Medha_EI_Analyser+0x630>)
 8009920:	489f      	ldr	r0, [pc, #636]	; (8009ba0 <Medha_EI_Analyser+0x634>)
 8009922:	f7f6 fc8d 	bl	8000240 <strcmp>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	f000 8252 	beq.w	8009dd2 <Medha_EI_Analyser+0x866>
			{
				return;
			}
		}

		BYTEINC(2);
 800992e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009932:	3302      	adds	r3, #2
 8009934:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 8009938:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800993c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009940:	8a9b      	ldrh	r3, [r3, #20]
 8009942:	f003 0307 	and.w	r3, r3, #7
 8009946:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 800994a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00a      	beq.n	8009968 <Medha_EI_Analyser+0x3fc>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 8009952:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009956:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800995a:	8a9b      	ldrh	r3, [r3, #20]
 800995c:	08db      	lsrs	r3, r3, #3
 800995e:	b29b      	uxth	r3, r3
 8009960:	3301      	adds	r3, #1
 8009962:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 8009966:	e007      	b.n	8009978 <Medha_EI_Analyser+0x40c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 8009968:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800996c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009970:	8a9b      	ldrh	r3, [r3, #20]
 8009972:	08db      	lsrs	r3, r3, #3
 8009974:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009978:	2300      	movs	r3, #0
 800997a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800997e:	e02a      	b.n	80099d6 <Medha_EI_Analyser+0x46a>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009980:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009984:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009988:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800998c:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009990:	5c89      	ldrb	r1, [r1, r2]
 8009992:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009996:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 800999a:	4413      	add	r3, r2
 800999c:	460a      	mov	r2, r1
 800999e:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 80099a0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099a4:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80099a8:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 80099ac:	4413      	add	r3, r2
 80099ae:	7d9a      	ldrb	r2, [r3, #22]
 80099b0:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099b4:	43d2      	mvns	r2, r2
 80099b6:	b2d1      	uxtb	r1, r2
 80099b8:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80099bc:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 80099c0:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 80099c2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80099c6:	3301      	adds	r3, #1
 80099c8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80099cc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099d0:	3301      	adds	r3, #1
 80099d2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80099d6:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80099da:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80099de:	429a      	cmp	r2, r3
 80099e0:	d3ce      	bcc.n	8009980 <Medha_EI_Analyser+0x414>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80099e2:	2300      	movs	r3, #0
 80099e4:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80099e8:	e01a      	b.n	8009a20 <Medha_EI_Analyser+0x4b4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 80099ea:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 80099ee:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80099f2:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 80099f6:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80099fa:	5c89      	ldrb	r1, [r1, r2]
 80099fc:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009a00:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009a04:	4413      	add	r3, r2
 8009a06:	460a      	mov	r2, r1
 8009a08:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009a0c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009a10:	3301      	adds	r3, #1
 8009a12:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009a16:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a20:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009a24:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d3de      	bcc.n	80099ea <Medha_EI_Analyser+0x47e>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 8009a2c:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 8009a30:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8009a34:	463b      	mov	r3, r7
 8009a36:	3396      	adds	r3, #150	; 0x96
 8009a38:	4618      	mov	r0, r3
 8009a3a:	f018 fddd 	bl	80225f8 <memcmp>
 8009a3e:	4603      	mov	r3, r0
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d03f      	beq.n	8009ac4 <Medha_EI_Analyser+0x558>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 8009a44:	4857      	ldr	r0, [pc, #348]	; (8009ba4 <Medha_EI_Analyser+0x638>)
 8009a46:	f018 ff93 	bl	8022970 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a50:	e011      	b.n	8009a76 <Medha_EI_Analyser+0x50a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 8009a52:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a56:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009a5a:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009a5e:	4413      	add	r3, r2
 8009a60:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 8009a64:	4619      	mov	r1, r3
 8009a66:	4850      	ldr	r0, [pc, #320]	; (8009ba8 <Medha_EI_Analyser+0x63c>)
 8009a68:	f018 fee6 	bl	8022838 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009a6c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a70:	3301      	adds	r3, #1
 8009a72:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a76:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009a7a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009a7e:	429a      	cmp	r2, r3
 8009a80:	d3e7      	bcc.n	8009a52 <Medha_EI_Analyser+0x4e6>
			}

			printf("\nExpected Compliment Relay Status:\n");
 8009a82:	484a      	ldr	r0, [pc, #296]	; (8009bac <Medha_EI_Analyser+0x640>)
 8009a84:	f018 ff74 	bl	8022970 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009a88:	2300      	movs	r3, #0
 8009a8a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009a8e:	e00f      	b.n	8009ab0 <Medha_EI_Analyser+0x544>
			{
				printf("%02X ",TempCompliment[Traverser]);
 8009a90:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009a94:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009a98:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009a9c:	5cd3      	ldrb	r3, [r2, r3]
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4841      	ldr	r0, [pc, #260]	; (8009ba8 <Medha_EI_Analyser+0x63c>)
 8009aa2:	f018 fec9 	bl	8022838 <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009aa6:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009ab0:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009ab4:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d3e9      	bcc.n	8009a90 <Medha_EI_Analyser+0x524>
			}

			printf("\nPACKET Rejected\n");
 8009abc:	483c      	ldr	r0, [pc, #240]	; (8009bb0 <Medha_EI_Analyser+0x644>)
 8009abe:	f018 ff57 	bl	8022970 <puts>
			return;
 8009ac2:	e187      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009ac4:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009ac8:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009acc:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 8009ad0:	4618      	mov	r0, r3
 8009ad2:	f001 f8b3 	bl	800ac3c <GetCRC32>
 8009ad6:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 8009ada:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009ade:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009ae2:	4413      	add	r3, r2
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009aec:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009af0:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009af4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009af8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009afc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009b00:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d00c      	beq.n	8009b22 <Medha_EI_Analyser+0x5b6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009b08:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b0c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009b10:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009b14:	461a      	mov	r2, r3
 8009b16:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8009b1a:	4826      	ldr	r0, [pc, #152]	; (8009bb4 <Medha_EI_Analyser+0x648>)
 8009b1c:	f018 fe8c 	bl	8022838 <iprintf>
			return;
 8009b20:	e158      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
		}
		BYTEINC(4);
 8009b22:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b26:	3304      	adds	r3, #4
 8009b28:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 8009b2c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b30:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009b34:	4413      	add	r3, r2
 8009b36:	881b      	ldrh	r3, [r3, #0]
 8009b38:	b29a      	uxth	r2, r3
 8009b3a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b3e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009b42:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 8009b46:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009b4a:	3302      	adds	r3, #2
 8009b4c:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 8009b50:	f00b fe68 	bl	8015824 <HAL_GetTick>
 8009b54:	4603      	mov	r3, r0
 8009b56:	4a18      	ldr	r2, [pc, #96]	; (8009bb8 <Medha_EI_Analyser+0x64c>)
 8009b58:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 8009b5a:	4a18      	ldr	r2, [pc, #96]	; (8009bbc <Medha_EI_Analyser+0x650>)
 8009b5c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009b60:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009b64:	4610      	mov	r0, r2
 8009b66:	4619      	mov	r1, r3
 8009b68:	f44f 7392 	mov.w	r3, #292	; 0x124
 8009b6c:	461a      	mov	r2, r3
 8009b6e:	f018 fd53 	bl	8022618 <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 8009b72:	4b13      	ldr	r3, [pc, #76]	; (8009bc0 <Medha_EI_Analyser+0x654>)
 8009b74:	2201      	movs	r2, #1
 8009b76:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009b78:	4b10      	ldr	r3, [pc, #64]	; (8009bbc <Medha_EI_Analyser+0x650>)
 8009b7a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009b7e:	4a10      	ldr	r2, [pc, #64]	; (8009bc0 <Medha_EI_Analyser+0x654>)
 8009b80:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 8009b82:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f954 	bl	8009e34 <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009b92:	e028      	b.n	8009be6 <Medha_EI_Analyser+0x67a>
 8009b94:	20000304 	.word	0x20000304
 8009b98:	080256cc 	.word	0x080256cc
 8009b9c:	08025708 	.word	0x08025708
 8009ba0:	20000305 	.word	0x20000305
 8009ba4:	08025714 	.word	0x08025714
 8009ba8:	08025538 	.word	0x08025538
 8009bac:	08025760 	.word	0x08025760
 8009bb0:	08025784 	.word	0x08025784
 8009bb4:	08025798 	.word	0x08025798
 8009bb8:	200029dc 	.word	0x200029dc
 8009bbc:	20002888 	.word	0x20002888
 8009bc0:	200029ec 	.word	0x200029ec
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009bc4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009bc8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009bcc:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009bd0:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009bd4:	440a      	add	r2, r1
 8009bd6:	7d91      	ldrb	r1, [r2, #22]
 8009bd8:	4a80      	ldr	r2, [pc, #512]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009bda:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009bdc:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009be0:	3301      	adds	r3, #1
 8009be2:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009be6:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009bea:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009bee:	429a      	cmp	r2, r3
 8009bf0:	d3e8      	bcc.n	8009bc4 <Medha_EI_Analyser+0x658>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 8009bf2:	4b7b      	ldr	r3, [pc, #492]	; (8009de0 <Medha_EI_Analyser+0x874>)
 8009bf4:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009bf8:	4a78      	ldr	r2, [pc, #480]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009bfa:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 8009bfe:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c02:	461a      	mov	r2, r3
 8009c04:	4975      	ldr	r1, [pc, #468]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009c06:	4877      	ldr	r0, [pc, #476]	; (8009de4 <Medha_EI_Analyser+0x878>)
 8009c08:	f018 fcf6 	bl	80225f8 <memcmp>
 8009c0c:	4603      	mov	r3, r0
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d030      	beq.n	8009c74 <Medha_EI_Analyser+0x708>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009c12:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c16:	461a      	mov	r2, r3
 8009c18:	4970      	ldr	r1, [pc, #448]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009c1a:	4872      	ldr	r0, [pc, #456]	; (8009de4 <Medha_EI_Analyser+0x878>)
 8009c1c:	f018 fcfc 	bl	8022618 <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 8009c20:	4b6e      	ldr	r3, [pc, #440]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009c26:	4a6f      	ldr	r2, [pc, #444]	; (8009de4 <Medha_EI_Analyser+0x878>)
 8009c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(MEDHA_RELAY_STS_t));
 8009c2c:	2230      	movs	r2, #48	; 0x30
 8009c2e:	2100      	movs	r1, #0
 8009c30:	486d      	ldr	r0, [pc, #436]	; (8009de8 <Medha_EI_Analyser+0x87c>)
 8009c32:	f018 fd19 	bl	8022668 <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 8009c36:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	4967      	ldr	r1, [pc, #412]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009c3e:	486a      	ldr	r0, [pc, #424]	; (8009de8 <Medha_EI_Analyser+0x87c>)
 8009c40:	f018 fcea 	bl	8022618 <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
 8009c44:	f240 1019 	movw	r0, #281	; 0x119
 8009c48:	f005 fe12 	bl	800f870 <TransmitCanPkt>
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009c4c:	f00b fdea 	bl	8015824 <HAL_GetTick>
 8009c50:	4603      	mov	r3, r0
 8009c52:	4a66      	ldr	r2, [pc, #408]	; (8009dec <Medha_EI_Analyser+0x880>)
 8009c54:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 8009c56:	4866      	ldr	r0, [pc, #408]	; (8009df0 <Medha_EI_Analyser+0x884>)
 8009c58:	f018 fe8a 	bl	8022970 <puts>


#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
 8009c5c:	f240 2001 	movw	r0, #513	; 0x201
 8009c60:	f005 fe06 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 8009c64:	4b63      	ldr	r3, [pc, #396]	; (8009df4 <Medha_EI_Analyser+0x888>)
 8009c66:	685b      	ldr	r3, [r3, #4]
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d103      	bne.n	8009c74 <Medha_EI_Analyser+0x708>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 8009c6c:	f240 2007 	movw	r0, #519	; 0x207
 8009c70:	f005 fdfe 	bl	800f870 <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 8009c74:	4860      	ldr	r0, [pc, #384]	; (8009df8 <Medha_EI_Analyser+0x88c>)
 8009c76:	f018 fe7b 	bl	8022970 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 8009c7a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c7e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c82:	889b      	ldrh	r3, [r3, #4]
 8009c84:	4619      	mov	r1, r3
 8009c86:	485d      	ldr	r0, [pc, #372]	; (8009dfc <Medha_EI_Analyser+0x890>)
 8009c88:	f018 fdd6 	bl	8022838 <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 8009c8c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009c90:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009c94:	885b      	ldrh	r3, [r3, #2]
 8009c96:	4619      	mov	r1, r3
 8009c98:	4859      	ldr	r0, [pc, #356]	; (8009e00 <Medha_EI_Analyser+0x894>)
 8009c9a:	f018 fdcd 	bl	8022838 <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 8009c9e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009ca2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009ca6:	799b      	ldrb	r3, [r3, #6]
 8009ca8:	4619      	mov	r1, r3
 8009caa:	4856      	ldr	r0, [pc, #344]	; (8009e04 <Medha_EI_Analyser+0x898>)
 8009cac:	f018 fdc4 	bl	8022838 <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 8009cb0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cb4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cb8:	79db      	ldrb	r3, [r3, #7]
 8009cba:	4619      	mov	r1, r3
 8009cbc:	4852      	ldr	r0, [pc, #328]	; (8009e08 <Medha_EI_Analyser+0x89c>)
 8009cbe:	f018 fdbb 	bl	8022838 <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 8009cc2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cc6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cca:	891b      	ldrh	r3, [r3, #8]
 8009ccc:	4619      	mov	r1, r3
 8009cce:	484f      	ldr	r0, [pc, #316]	; (8009e0c <Medha_EI_Analyser+0x8a0>)
 8009cd0:	f018 fdb2 	bl	8022838 <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009cd4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cd8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cdc:	7a9b      	ldrb	r3, [r3, #10]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	484b      	ldr	r0, [pc, #300]	; (8009e10 <Medha_EI_Analyser+0x8a4>)
 8009ce2:	f018 fda9 	bl	8022838 <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 8009ce6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cea:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cee:	7b9b      	ldrb	r3, [r3, #14]
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009cf6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009cfa:	7b5b      	ldrb	r3, [r3, #13]
 8009cfc:	461c      	mov	r4, r3
 8009cfe:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d02:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d06:	7b1b      	ldrb	r3, [r3, #12]
 8009d08:	461d      	mov	r5, r3
 8009d0a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d0e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d12:	7bdb      	ldrb	r3, [r3, #15]
 8009d14:	461a      	mov	r2, r3
 8009d16:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d1a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d1e:	7c1b      	ldrb	r3, [r3, #16]
 8009d20:	4619      	mov	r1, r3
 8009d22:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d26:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d2a:	7c5b      	ldrb	r3, [r3, #17]
 8009d2c:	9302      	str	r3, [sp, #8]
 8009d2e:	9101      	str	r1, [sp, #4]
 8009d30:	9200      	str	r2, [sp, #0]
 8009d32:	462b      	mov	r3, r5
 8009d34:	4622      	mov	r2, r4
 8009d36:	4601      	mov	r1, r0
 8009d38:	4836      	ldr	r0, [pc, #216]	; (8009e14 <Medha_EI_Analyser+0x8a8>)
 8009d3a:	f018 fd7d 	bl	8022838 <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 8009d3e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d42:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d46:	7c9b      	ldrb	r3, [r3, #18]
 8009d48:	4619      	mov	r1, r3
 8009d4a:	4833      	ldr	r0, [pc, #204]	; (8009e18 <Medha_EI_Analyser+0x8ac>)
 8009d4c:	f018 fd74 	bl	8022838 <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 8009d50:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009d54:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009d58:	8a9b      	ldrh	r3, [r3, #20]
 8009d5a:	4619      	mov	r1, r3
 8009d5c:	482f      	ldr	r0, [pc, #188]	; (8009e1c <Medha_EI_Analyser+0x8b0>)
 8009d5e:	f018 fd6b 	bl	8022838 <iprintf>
		printf("SIGNAL DATA       :");
 8009d62:	482f      	ldr	r0, [pc, #188]	; (8009e20 <Medha_EI_Analyser+0x8b4>)
 8009d64:	f018 fd68 	bl	8022838 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009d68:	2300      	movs	r3, #0
 8009d6a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009d6e:	e021      	b.n	8009db4 <Medha_EI_Analyser+0x848>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 8009d70:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d010      	beq.n	8009d9a <Medha_EI_Analyser+0x82e>
 8009d78:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009d7c:	4b29      	ldr	r3, [pc, #164]	; (8009e24 <Medha_EI_Analyser+0x8b8>)
 8009d7e:	fba3 1302 	umull	r1, r3, r3, r2
 8009d82:	08d9      	lsrs	r1, r3, #3
 8009d84:	460b      	mov	r3, r1
 8009d86:	009b      	lsls	r3, r3, #2
 8009d88:	440b      	add	r3, r1
 8009d8a:	005b      	lsls	r3, r3, #1
 8009d8c:	1ad3      	subs	r3, r2, r3
 8009d8e:	b29b      	uxth	r3, r3
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <Medha_EI_Analyser+0x82e>
			{
				printf("\n                   ");
 8009d94:	4824      	ldr	r0, [pc, #144]	; (8009e28 <Medha_EI_Analyser+0x8bc>)
 8009d96:	f018 fd4f 	bl	8022838 <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 8009d9a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009d9e:	4a0f      	ldr	r2, [pc, #60]	; (8009ddc <Medha_EI_Analyser+0x870>)
 8009da0:	5cd3      	ldrb	r3, [r2, r3]
 8009da2:	4619      	mov	r1, r3
 8009da4:	4821      	ldr	r0, [pc, #132]	; (8009e2c <Medha_EI_Analyser+0x8c0>)
 8009da6:	f018 fd47 	bl	8022838 <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009daa:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009dae:	3301      	adds	r3, #1
 8009db0:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009db4:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009db8:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009dbc:	429a      	cmp	r2, r3
 8009dbe:	d3d7      	bcc.n	8009d70 <Medha_EI_Analyser+0x804>
		}
		printf("\n");
 8009dc0:	200a      	movs	r0, #10
 8009dc2:	f018 fd51 	bl	8022868 <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 8009dc6:	481a      	ldr	r0, [pc, #104]	; (8009e30 <Medha_EI_Analyser+0x8c4>)
 8009dc8:	f018 fdd2 	bl	8022970 <puts>
		return;
 8009dcc:	e002      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
	}
	else
	{
		return;
 8009dce:	bf00      	nop
 8009dd0:	e000      	b.n	8009dd4 <Medha_EI_Analyser+0x868>
				return;
 8009dd2:	bf00      	nop
	}
}
 8009dd4:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 8009dd8:	46bd      	mov	sp, r7
 8009dda:	bdb0      	pop	{r4, r5, r7, pc}
 8009ddc:	20002a04 	.word	0x20002a04
 8009de0:	20002888 	.word	0x20002888
 8009de4:	20002b0c 	.word	0x20002b0c
 8009de8:	200029ac 	.word	0x200029ac
 8009dec:	200029dc 	.word	0x200029dc
 8009df0:	080257d8 	.word	0x080257d8
 8009df4:	200029f4 	.word	0x200029f4
 8009df8:	080257f0 	.word	0x080257f0
 8009dfc:	08025818 	.word	0x08025818
 8009e00:	08025820 	.word	0x08025820
 8009e04:	08025828 	.word	0x08025828
 8009e08:	08025834 	.word	0x08025834
 8009e0c:	08025840 	.word	0x08025840
 8009e10:	08025848 	.word	0x08025848
 8009e14:	08025850 	.word	0x08025850
 8009e18:	08025874 	.word	0x08025874
 8009e1c:	08025880 	.word	0x08025880
 8009e20:	08025888 	.word	0x08025888
 8009e24:	cccccccd 	.word	0xcccccccd
 8009e28:	0802589c 	.word	0x0802589c
 8009e2c:	08025538 	.word	0x08025538
 8009e30:	080258b4 	.word	0x080258b4

08009e34 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b0d2      	sub	sp, #328	; 0x148
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009e40:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009e44:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 8009e46:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009e4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8009e4e:	2200      	movs	r2, #0
 8009e50:	601a      	str	r2, [r3, #0]
 8009e52:	3304      	adds	r3, #4
 8009e54:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009e58:	2100      	movs	r1, #0
 8009e5a:	4618      	mov	r0, r3
 8009e5c:	f018 fc04 	bl	8022668 <memset>
	uint32_t Cal_Crc =0;
 8009e60:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009e64:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009e68:	2200      	movs	r2, #0
 8009e6a:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 8009e72:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009e76:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 8009e84:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009e88:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009e8c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009e90:	2153      	movs	r1, #83	; 0x53
 8009e92:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009e94:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 8009e9e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ea2:	f107 0214 	add.w	r2, r7, #20
 8009ea6:	4413      	add	r3, r2
 8009ea8:	4a88      	ldr	r2, [pc, #544]	; (800a0cc <Send_Medha_EI_Reply+0x298>)
 8009eaa:	8852      	ldrh	r2, [r2, #2]
 8009eac:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009eae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009eb2:	3302      	adds	r3, #2
 8009eb4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 8009eb8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ebc:	f107 0214 	add.w	r2, r7, #20
 8009ec0:	4413      	add	r3, r2
 8009ec2:	4a82      	ldr	r2, [pc, #520]	; (800a0cc <Send_Medha_EI_Reply+0x298>)
 8009ec4:	8892      	ldrh	r2, [r2, #4]
 8009ec6:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009ec8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ecc:	3302      	adds	r3, #2
 8009ece:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 8009ed2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ed6:	f107 0214 	add.w	r2, r7, #20
 8009eda:	4413      	add	r3, r2
 8009edc:	4a7b      	ldr	r2, [pc, #492]	; (800a0cc <Send_Medha_EI_Reply+0x298>)
 8009ede:	7992      	ldrb	r2, [r2, #6]
 8009ee0:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009ee2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ee6:	3301      	adds	r3, #1
 8009ee8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 8009eec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ef0:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009ef4:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009ef8:	21e2      	movs	r1, #226	; 0xe2
 8009efa:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009efc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f00:	3301      	adds	r3, #1
 8009f02:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 8009f06:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f0a:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 8009f0e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f12:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009f16:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f1a:	2100      	movs	r1, #0
 8009f1c:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 8009f1e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f22:	3301      	adds	r3, #1
 8009f24:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009f28:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009f2c:	2100      	movs	r1, #0
 8009f2e:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 8009f30:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f34:	3302      	adds	r3, #2
 8009f36:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 8009f3a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f3e:	f107 0214 	add.w	r2, r7, #20
 8009f42:	4413      	add	r3, r2
 8009f44:	4a61      	ldr	r2, [pc, #388]	; (800a0cc <Send_Medha_EI_Reply+0x298>)
 8009f46:	7a92      	ldrb	r2, [r2, #10]
 8009f48:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009f4a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f4e:	3301      	adds	r3, #1
 8009f50:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 8009f54:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f58:	f107 0214 	add.w	r2, r7, #20
 8009f5c:	441a      	add	r2, r3
 8009f5e:	4b5b      	ldr	r3, [pc, #364]	; (800a0cc <Send_Medha_EI_Reply+0x298>)
 8009f60:	330b      	adds	r3, #11
 8009f62:	6819      	ldr	r1, [r3, #0]
 8009f64:	6011      	str	r1, [r2, #0]
 8009f66:	8899      	ldrh	r1, [r3, #4]
 8009f68:	799b      	ldrb	r3, [r3, #6]
 8009f6a:	8091      	strh	r1, [r2, #4]
 8009f6c:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 8009f6e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f72:	3307      	adds	r3, #7
 8009f74:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 8009f78:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f7c:	f107 0214 	add.w	r2, r7, #20
 8009f80:	4413      	add	r3, r2
 8009f82:	4a52      	ldr	r2, [pc, #328]	; (800a0cc <Send_Medha_EI_Reply+0x298>)
 8009f84:	8a92      	ldrh	r2, [r2, #20]
 8009f86:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009f88:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f8c:	3302      	adds	r3, #2
 8009f8e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 8009f92:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009f96:	f107 0214 	add.w	r2, r7, #20
 8009f9a:	18d0      	adds	r0, r2, r3
 8009f9c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fa0:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009fa4:	881b      	ldrh	r3, [r3, #0]
 8009fa6:	461a      	mov	r2, r3
 8009fa8:	4949      	ldr	r1, [pc, #292]	; (800a0d0 <Send_Medha_EI_Reply+0x29c>)
 8009faa:	f018 fb35 	bl	8022618 <memcpy>
	BYTEINC(Outputs);
 8009fae:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fb2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009fb6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009fba:	881b      	ldrh	r3, [r3, #0]
 8009fbc:	4413      	add	r3, r2
 8009fbe:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 8009fc2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009fc6:	f107 0214 	add.w	r2, r7, #20
 8009fca:	18d0      	adds	r0, r2, r3
 8009fcc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fd0:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009fd4:	881b      	ldrh	r3, [r3, #0]
 8009fd6:	461a      	mov	r2, r3
 8009fd8:	493e      	ldr	r1, [pc, #248]	; (800a0d4 <Send_Medha_EI_Reply+0x2a0>)
 8009fda:	f018 fb1d 	bl	8022618 <memcpy>
	BYTEINC(Outputs);
 8009fde:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009fe2:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009fe6:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009fea:	881b      	ldrh	r3, [r3, #0]
 8009fec:	4413      	add	r3, r2
 8009fee:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 8009ff2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ff6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009ffa:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009ffe:	2100      	movs	r1, #0
 800a000:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 800a002:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a006:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a00a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a00e:	2100      	movs	r1, #0
 800a010:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 800a012:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a016:	3302      	adds	r3, #2
 800a018:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 800a01c:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a020:	b29b      	uxth	r3, r3
 800a022:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a026:	1ad3      	subs	r3, r2, r3
 800a028:	b29b      	uxth	r3, r3
 800a02a:	3302      	adds	r3, #2
 800a02c:	b29a      	uxth	r2, r3
 800a02e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a032:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 800a036:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 800a038:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 800a03c:	f107 0214 	add.w	r2, r7, #20
 800a040:	4413      	add	r3, r2
 800a042:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a046:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 800a04a:	8812      	ldrh	r2, [r2, #0]
 800a04c:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 800a04e:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 800a052:	f107 0314 	add.w	r3, r7, #20
 800a056:	4619      	mov	r1, r3
 800a058:	2000      	movs	r0, #0
 800a05a:	f000 fdef 	bl	800ac3c <GetCRC32>
 800a05e:	4602      	mov	r2, r0
 800a060:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800a064:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 800a068:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 800a06a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a06e:	f107 0214 	add.w	r2, r7, #20
 800a072:	4413      	add	r3, r2
 800a074:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a078:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 800a080:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a084:	3304      	adds	r3, #4
 800a086:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a08a:	2300      	movs	r3, #0
 800a08c:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a090:	e011      	b.n	800a0b6 <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 800a092:	4b11      	ldr	r3, [pc, #68]	; (800a0d8 <Send_Medha_EI_Reply+0x2a4>)
 800a094:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 800a098:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a09c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800a0a0:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 800a0a4:	5cd3      	ldrb	r3, [r2, r3]
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	f00b f964 	bl	8015374 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 800a0ac:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 800a0b0:	3301      	adds	r3, #1
 800a0b2:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 800a0b6:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 800a0ba:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d3e7      	bcc.n	800a092 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 800a0c2:	bf00      	nop
}
 800a0c4:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}
 800a0cc:	20002888 	.word	0x20002888
 800a0d0:	2000289e 	.word	0x2000289e
 800a0d4:	2000291e 	.word	0x2000291e
 800a0d8:	20000304 	.word	0x20000304

0800a0dc <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 800a0dc:	b580      	push	{r7, lr}
 800a0de:	b082      	sub	sp, #8
 800a0e0:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 800a0e2:	4b2c      	ldr	r3, [pc, #176]	; (800a194 <Send_Relay_Statuses_2_MIE+0xb8>)
 800a0e4:	689b      	ldr	r3, [r3, #8]
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f004 fe0e 	bl	800ed08 <HAL_Elaps_Ticks>
 800a0ec:	4602      	mov	r2, r0
 800a0ee:	4b2a      	ldr	r3, [pc, #168]	; (800a198 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a0f0:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d349      	bcc.n	800a18c <Send_Relay_Statuses_2_MIE+0xb0>
	{
		uint16_t NoOfInputs = 0;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 800a0fc:	4b26      	ldr	r3, [pc, #152]	; (800a198 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a0fe:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a102:	f003 0307 	and.w	r3, r3, #7
 800a106:	b29b      	uxth	r3, r3
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <Send_Relay_Statuses_2_MIE+0x40>
 800a10c:	4b22      	ldr	r3, [pc, #136]	; (800a198 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a10e:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a112:	08db      	lsrs	r3, r3, #3
 800a114:	b29b      	uxth	r3, r3
 800a116:	3301      	adds	r3, #1
 800a118:	80fb      	strh	r3, [r7, #6]
 800a11a:	e004      	b.n	800a126 <Send_Relay_Statuses_2_MIE+0x4a>
 800a11c:	4b1e      	ldr	r3, [pc, #120]	; (800a198 <Send_Relay_Statuses_2_MIE+0xbc>)
 800a11e:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a122:	08db      	lsrs	r3, r3, #3
 800a124:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 800a126:	f00b fb7d 	bl	8015824 <HAL_GetTick>
 800a12a:	4603      	mov	r3, r0
 800a12c:	4a19      	ldr	r2, [pc, #100]	; (800a194 <Send_Relay_Statuses_2_MIE+0xb8>)
 800a12e:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 800a130:	481a      	ldr	r0, [pc, #104]	; (800a19c <Send_Relay_Statuses_2_MIE+0xc0>)
 800a132:	f018 fc1d 	bl	8022970 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a136:	2300      	movs	r3, #0
 800a138:	603b      	str	r3, [r7, #0]
 800a13a:	e01c      	b.n	800a176 <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d00e      	beq.n	800a160 <Send_Relay_Statuses_2_MIE+0x84>
 800a142:	6839      	ldr	r1, [r7, #0]
 800a144:	4b16      	ldr	r3, [pc, #88]	; (800a1a0 <Send_Relay_Statuses_2_MIE+0xc4>)
 800a146:	fba3 2301 	umull	r2, r3, r3, r1
 800a14a:	091a      	lsrs	r2, r3, #4
 800a14c:	4613      	mov	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	1aca      	subs	r2, r1, r3
 800a156:	2a00      	cmp	r2, #0
 800a158:	d102      	bne.n	800a160 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 800a15a:	200a      	movs	r0, #10
 800a15c:	f018 fb84 	bl	8022868 <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 800a160:	4a10      	ldr	r2, [pc, #64]	; (800a1a4 <Send_Relay_Statuses_2_MIE+0xc8>)
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	4413      	add	r3, r2
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	4619      	mov	r1, r3
 800a16a:	480f      	ldr	r0, [pc, #60]	; (800a1a8 <Send_Relay_Statuses_2_MIE+0xcc>)
 800a16c:	f018 fb64 	bl	8022838 <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 800a170:	683b      	ldr	r3, [r7, #0]
 800a172:	3301      	adds	r3, #1
 800a174:	603b      	str	r3, [r7, #0]
 800a176:	88fb      	ldrh	r3, [r7, #6]
 800a178:	683a      	ldr	r2, [r7, #0]
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d3de      	bcc.n	800a13c <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 800a17e:	200a      	movs	r0, #10
 800a180:	f018 fb72 	bl	8022868 <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
 800a184:	f240 1019 	movw	r0, #281	; 0x119
 800a188:	f005 fb72 	bl	800f870 <TransmitCanPkt>
#endif
	}
}
 800a18c:	bf00      	nop
 800a18e:	3708      	adds	r7, #8
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	200029dc 	.word	0x200029dc
 800a198:	20000304 	.word	0x20000304
 800a19c:	080258dc 	.word	0x080258dc
 800a1a0:	cccccccd 	.word	0xcccccccd
 800a1a4:	200029ac 	.word	0x200029ac
 800a1a8:	08025538 	.word	0x08025538

0800a1ac <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b082      	sub	sp, #8
 800a1b0:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 800a1b2:	4b3d      	ldr	r3, [pc, #244]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	f004 fda6 	bl	800ed08 <HAL_Elaps_Ticks>
 800a1bc:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a1be:	4b3b      	ldr	r3, [pc, #236]	; (800a2ac <Process_Clear_Relays+0x100>)
 800a1c0:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a1c4:	4a39      	ldr	r2, [pc, #228]	; (800a2ac <Process_Clear_Relays+0x100>)
 800a1c6:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 800a1ca:	fb02 f303 	mul.w	r3, r2, r3
 800a1ce:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800a1d0:	4937      	ldr	r1, [pc, #220]	; (800a2b0 <Process_Clear_Relays+0x104>)
 800a1d2:	4838      	ldr	r0, [pc, #224]	; (800a2b4 <Process_Clear_Relays+0x108>)
 800a1d4:	f7f6 f834 	bl	8000240 <strcmp>
 800a1d8:	4603      	mov	r3, r0
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d05f      	beq.n	800a29e <Process_Clear_Relays+0xf2>
	}




	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 800a1de:	687a      	ldr	r2, [r7, #4]
 800a1e0:	683b      	ldr	r3, [r7, #0]
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	d30c      	bcc.n	800a200 <Process_Clear_Relays+0x54>
 800a1e6:	4b30      	ldr	r3, [pc, #192]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a1e8:	685a      	ldr	r2, [r3, #4]
 800a1ea:	4b33      	ldr	r3, [pc, #204]	; (800a2b8 <Process_Clear_Relays+0x10c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	429a      	cmp	r2, r3
 800a1f0:	d006      	beq.n	800a200 <Process_Clear_Relays+0x54>
 800a1f2:	4b32      	ldr	r3, [pc, #200]	; (800a2bc <Process_Clear_Relays+0x110>)
 800a1f4:	785a      	ldrb	r2, [r3, #1]
 800a1f6:	4b2d      	ldr	r3, [pc, #180]	; (800a2ac <Process_Clear_Relays+0x100>)
 800a1f8:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a1fc:	429a      	cmp	r2, r3
 800a1fe:	d808      	bhi.n	800a212 <Process_Clear_Relays+0x66>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 800a200:	4b29      	ldr	r3, [pc, #164]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d04b      	beq.n	800a2a0 <Process_Clear_Relays+0xf4>
 800a208:	4b2d      	ldr	r3, [pc, #180]	; (800a2c0 <Process_Clear_Relays+0x114>)
 800a20a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d046      	beq.n	800a2a0 <Process_Clear_Relays+0xf4>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a212:	4b25      	ldr	r3, [pc, #148]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a214:	781b      	ldrb	r3, [r3, #0]
 800a216:	4619      	mov	r1, r3
 800a218:	482a      	ldr	r0, [pc, #168]	; (800a2c4 <Process_Clear_Relays+0x118>)
 800a21a:	f018 fb0d 	bl	8022838 <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a21e:	4b22      	ldr	r3, [pc, #136]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a220:	781b      	ldrb	r3, [r3, #0]
 800a222:	f003 0301 	and.w	r3, r3, #1
 800a226:	2b00      	cmp	r3, #0
 800a228:	d006      	beq.n	800a238 <Process_Clear_Relays+0x8c>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a22a:	4b1f      	ldr	r3, [pc, #124]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a22c:	781b      	ldrb	r3, [r3, #0]
 800a22e:	f023 0301 	bic.w	r3, r3, #1
 800a232:	b2da      	uxtb	r2, r3
 800a234:	4b1c      	ldr	r3, [pc, #112]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a236:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 800a238:	4b1b      	ldr	r3, [pc, #108]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a23a:	781b      	ldrb	r3, [r3, #0]
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d006      	beq.n	800a252 <Process_Clear_Relays+0xa6>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a244:	4b18      	ldr	r3, [pc, #96]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a246:	781b      	ldrb	r3, [r3, #0]
 800a248:	f023 0302 	bic.w	r3, r3, #2
 800a24c:	b2da      	uxtb	r2, r3
 800a24e:	4b16      	ldr	r3, [pc, #88]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a250:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a252:	2284      	movs	r2, #132	; 0x84
 800a254:	2100      	movs	r1, #0
 800a256:	481a      	ldr	r0, [pc, #104]	; (800a2c0 <Process_Clear_Relays+0x114>)
 800a258:	f018 fa06 	bl	8022668 <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 800a25c:	2230      	movs	r2, #48	; 0x30
 800a25e:	2100      	movs	r1, #0
 800a260:	4819      	ldr	r0, [pc, #100]	; (800a2c8 <Process_Clear_Relays+0x11c>)
 800a262:	f018 fa01 	bl	8022668 <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a266:	2284      	movs	r2, #132	; 0x84
 800a268:	2100      	movs	r1, #0
 800a26a:	4818      	ldr	r0, [pc, #96]	; (800a2cc <Process_Clear_Relays+0x120>)
 800a26c:	f018 f9fc 	bl	8022668 <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a270:	2208      	movs	r2, #8
 800a272:	2100      	movs	r1, #0
 800a274:	4816      	ldr	r0, [pc, #88]	; (800a2d0 <Process_Clear_Relays+0x124>)
 800a276:	f018 f9f7 	bl	8022668 <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a27a:	2208      	movs	r2, #8
 800a27c:	2100      	movs	r1, #0
 800a27e:	480f      	ldr	r0, [pc, #60]	; (800a2bc <Process_Clear_Relays+0x110>)
 800a280:	f018 f9f2 	bl	8022668 <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 800a284:	2208      	movs	r2, #8
 800a286:	2100      	movs	r1, #0
 800a288:	4812      	ldr	r0, [pc, #72]	; (800a2d4 <Process_Clear_Relays+0x128>)
 800a28a:	f018 f9ed 	bl	8022668 <memset>
		printf("Cleared Relay Statuses\n");
 800a28e:	4812      	ldr	r0, [pc, #72]	; (800a2d8 <Process_Clear_Relays+0x12c>)
 800a290:	f018 fb6e 	bl	8022970 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a294:	4b04      	ldr	r3, [pc, #16]	; (800a2a8 <Process_Clear_Relays+0xfc>)
 800a296:	685b      	ldr	r3, [r3, #4]
 800a298:	4a07      	ldr	r2, [pc, #28]	; (800a2b8 <Process_Clear_Relays+0x10c>)
 800a29a:	6013      	str	r3, [r2, #0]
 800a29c:	e000      	b.n	800a2a0 <Process_Clear_Relays+0xf4>
		return;
 800a29e:	bf00      	nop
	}
}
 800a2a0:	3708      	adds	r7, #8
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}
 800a2a6:	bf00      	nop
 800a2a8:	200029dc 	.word	0x200029dc
 800a2ac:	20000304 	.word	0x20000304
 800a2b0:	08025708 	.word	0x08025708
 800a2b4:	20000305 	.word	0x20000305
 800a2b8:	20002b9c 	.word	0x20002b9c
 800a2bc:	200029f4 	.word	0x200029f4
 800a2c0:	20002a04 	.word	0x20002a04
 800a2c4:	080258f0 	.word	0x080258f0
 800a2c8:	200029ac 	.word	0x200029ac
 800a2cc:	20002b0c 	.word	0x20002b0c
 800a2d0:	200029ec 	.word	0x200029ec
 800a2d4:	200029fc 	.word	0x200029fc
 800a2d8:	08025920 	.word	0x08025920

0800a2dc <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 800a2e0:	4b26      	ldr	r3, [pc, #152]	; (800a37c <Send_Data_to_Other+0xa0>)
 800a2e2:	685b      	ldr	r3, [r3, #4]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f004 fd0f 	bl	800ed08 <HAL_Elaps_Ticks>
 800a2ea:	4602      	mov	r2, r0
 800a2ec:	4b24      	ldr	r3, [pc, #144]	; (800a380 <Send_Data_to_Other+0xa4>)
 800a2ee:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a2f2:	4923      	ldr	r1, [pc, #140]	; (800a380 <Send_Data_to_Other+0xa4>)
 800a2f4:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 800a2f8:	fb01 f303 	mul.w	r3, r1, r3
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d306      	bcc.n	800a30e <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 800a300:	4b20      	ldr	r3, [pc, #128]	; (800a384 <Send_Data_to_Other+0xa8>)
 800a302:	781b      	ldrb	r3, [r3, #0]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d002      	beq.n	800a30e <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 800a308:	4b1e      	ldr	r3, [pc, #120]	; (800a384 <Send_Data_to_Other+0xa8>)
 800a30a:	2200      	movs	r2, #0
 800a30c:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 800a30e:	4b1b      	ldr	r3, [pc, #108]	; (800a37c <Send_Data_to_Other+0xa0>)
 800a310:	685b      	ldr	r3, [r3, #4]
 800a312:	4618      	mov	r0, r3
 800a314:	f004 fcf8 	bl	800ed08 <HAL_Elaps_Ticks>
 800a318:	4602      	mov	r2, r0
 800a31a:	4b19      	ldr	r3, [pc, #100]	; (800a380 <Send_Data_to_Other+0xa4>)
 800a31c:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a320:	429a      	cmp	r2, r3
 800a322:	d90e      	bls.n	800a342 <Send_Data_to_Other+0x66>
 800a324:	4b15      	ldr	r3, [pc, #84]	; (800a37c <Send_Data_to_Other+0xa0>)
 800a326:	685a      	ldr	r2, [r3, #4]
 800a328:	4b17      	ldr	r3, [pc, #92]	; (800a388 <Send_Data_to_Other+0xac>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	429a      	cmp	r2, r3
 800a32e:	d008      	beq.n	800a342 <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 800a330:	4b12      	ldr	r3, [pc, #72]	; (800a37c <Send_Data_to_Other+0xa0>)
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	4a14      	ldr	r2, [pc, #80]	; (800a388 <Send_Data_to_Other+0xac>)
 800a336:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a338:	f240 2001 	movw	r0, #513	; 0x201
 800a33c:	f005 fa98 	bl	800f870 <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 800a340:	e01a      	b.n	800a378 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 800a342:	4b12      	ldr	r3, [pc, #72]	; (800a38c <Send_Data_to_Other+0xb0>)
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	4618      	mov	r0, r3
 800a348:	f004 fcde 	bl	800ed08 <HAL_Elaps_Ticks>
 800a34c:	4603      	mov	r3, r0
 800a34e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a352:	d911      	bls.n	800a378 <Send_Data_to_Other+0x9c>
 800a354:	4b09      	ldr	r3, [pc, #36]	; (800a37c <Send_Data_to_Other+0xa0>)
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	4618      	mov	r0, r3
 800a35a:	f004 fcd5 	bl	800ed08 <HAL_Elaps_Ticks>
 800a35e:	4603      	mov	r3, r0
 800a360:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800a364:	d908      	bls.n	800a378 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 800a366:	f00b fa5d 	bl	8015824 <HAL_GetTick>
 800a36a:	4603      	mov	r3, r0
 800a36c:	4a07      	ldr	r2, [pc, #28]	; (800a38c <Send_Data_to_Other+0xb0>)
 800a36e:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_1_SELF_SHARING);
 800a370:	f240 2001 	movw	r0, #513	; 0x201
 800a374:	f005 fa7c 	bl	800f870 <TransmitCanPkt>
}
 800a378:	bf00      	nop
 800a37a:	bd80      	pop	{r7, pc}
 800a37c:	200029dc 	.word	0x200029dc
 800a380:	20000304 	.word	0x20000304
 800a384:	200029ec 	.word	0x200029ec
 800a388:	20002ba0 	.word	0x20002ba0
 800a38c:	20002ba4 	.word	0x20002ba4

0800a390 <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 800a390:	b5b0      	push	{r4, r5, r7, lr}
 800a392:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 800a394:	4b95      	ldr	r3, [pc, #596]	; (800a5ec <Process_Data_from_Other+0x25c>)
 800a396:	681a      	ldr	r2, [r3, #0]
 800a398:	4b95      	ldr	r3, [pc, #596]	; (800a5f0 <Process_Data_from_Other+0x260>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	429a      	cmp	r2, r3
 800a39e:	d109      	bne.n	800a3b4 <Process_Data_from_Other+0x24>
 800a3a0:	4b92      	ldr	r3, [pc, #584]	; (800a5ec <Process_Data_from_Other+0x25c>)
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f004 fcaf 	bl	800ed08 <HAL_Elaps_Ticks>
 800a3aa:	4603      	mov	r3, r0
 800a3ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a3b0:	f0c0 80e4 	bcc.w	800a57c <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 800a3b4:	f00b fa36 	bl	8015824 <HAL_GetTick>
 800a3b8:	4603      	mov	r3, r0
 800a3ba:	4a8c      	ldr	r2, [pc, #560]	; (800a5ec <Process_Data_from_Other+0x25c>)
 800a3bc:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 800a3be:	4b8d      	ldr	r3, [pc, #564]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a3c0:	781b      	ldrb	r3, [r3, #0]
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d007      	beq.n	800a3d6 <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 800a3c6:	4b8c      	ldr	r3, [pc, #560]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	f043 0301 	orr.w	r3, r3, #1
 800a3ce:	b2da      	uxtb	r2, r3
 800a3d0:	4b89      	ldr	r3, [pc, #548]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	e006      	b.n	800a3e4 <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 800a3d6:	4b88      	ldr	r3, [pc, #544]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3d8:	781b      	ldrb	r3, [r3, #0]
 800a3da:	f023 0301 	bic.w	r3, r3, #1
 800a3de:	b2da      	uxtb	r2, r3
 800a3e0:	4b85      	ldr	r3, [pc, #532]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3e2:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 800a3e4:	4b85      	ldr	r3, [pc, #532]	; (800a5fc <Process_Data_from_Other+0x26c>)
 800a3e6:	781b      	ldrb	r3, [r3, #0]
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d007      	beq.n	800a3fc <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 800a3ec:	4b82      	ldr	r3, [pc, #520]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	f043 0302 	orr.w	r3, r3, #2
 800a3f4:	b2da      	uxtb	r2, r3
 800a3f6:	4b80      	ldr	r3, [pc, #512]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3f8:	701a      	strb	r2, [r3, #0]
 800a3fa:	e006      	b.n	800a40a <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 800a3fc:	4b7e      	ldr	r3, [pc, #504]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a3fe:	781b      	ldrb	r3, [r3, #0]
 800a400:	f023 0302 	bic.w	r3, r3, #2
 800a404:	b2da      	uxtb	r2, r3
 800a406:	4b7c      	ldr	r3, [pc, #496]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a408:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 800a40a:	4b7b      	ldr	r3, [pc, #492]	; (800a5f8 <Process_Data_from_Other+0x268>)
 800a40c:	781b      	ldrb	r3, [r3, #0]
 800a40e:	2b03      	cmp	r3, #3
 800a410:	f200 809a 	bhi.w	800a548 <Process_Data_from_Other+0x1b8>
 800a414:	a201      	add	r2, pc, #4	; (adr r2, 800a41c <Process_Data_from_Other+0x8c>)
 800a416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a41a:	bf00      	nop
 800a41c:	0800a42d 	.word	0x0800a42d
 800a420:	0800a4bd 	.word	0x0800a4bd
 800a424:	0800a43b 	.word	0x0800a43b
 800a428:	0800a50d 	.word	0x0800a50d
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a42c:	4b71      	ldr	r3, [pc, #452]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a42e:	785b      	ldrb	r3, [r3, #1]
 800a430:	3301      	adds	r3, #1
 800a432:	b2da      	uxtb	r2, r3
 800a434:	4b6f      	ldr	r3, [pc, #444]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a436:	705a      	strb	r2, [r3, #1]
			break;
 800a438:	e086      	b.n	800a548 <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a43a:	4b70      	ldr	r3, [pc, #448]	; (800a5fc <Process_Data_from_Other+0x26c>)
 800a43c:	685a      	ldr	r2, [r3, #4]
 800a43e:	4b6d      	ldr	r3, [pc, #436]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a440:	685b      	ldr	r3, [r3, #4]
 800a442:	429a      	cmp	r2, r3
 800a444:	d02f      	beq.n	800a4a6 <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 800a446:	4b6e      	ldr	r3, [pc, #440]	; (800a600 <Process_Data_from_Other+0x270>)
 800a448:	781b      	ldrb	r3, [r3, #0]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d179      	bne.n	800a542 <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 800a44e:	4b69      	ldr	r3, [pc, #420]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	4619      	mov	r1, r3
 800a454:	486b      	ldr	r0, [pc, #428]	; (800a604 <Process_Data_from_Other+0x274>)
 800a456:	f018 f9ef 	bl	8022838 <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 800a45a:	4b68      	ldr	r3, [pc, #416]	; (800a5fc <Process_Data_from_Other+0x26c>)
 800a45c:	685b      	ldr	r3, [r3, #4]
 800a45e:	4619      	mov	r1, r3
 800a460:	4869      	ldr	r0, [pc, #420]	; (800a608 <Process_Data_from_Other+0x278>)
 800a462:	f018 f9e9 	bl	8022838 <iprintf>
					Received_CAN_Relay_Status=NO;
 800a466:	4b66      	ldr	r3, [pc, #408]	; (800a600 <Process_Data_from_Other+0x270>)
 800a468:	2200      	movs	r2, #0
 800a46a:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 800a46c:	4867      	ldr	r0, [pc, #412]	; (800a60c <Process_Data_from_Other+0x27c>)
 800a46e:	f018 fa7f 	bl	8022970 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 800a472:	4a67      	ldr	r2, [pc, #412]	; (800a610 <Process_Data_from_Other+0x280>)
 800a474:	4b67      	ldr	r3, [pc, #412]	; (800a614 <Process_Data_from_Other+0x284>)
 800a476:	4610      	mov	r0, r2
 800a478:	4619      	mov	r1, r3
 800a47a:	2384      	movs	r3, #132	; 0x84
 800a47c:	461a      	mov	r2, r3
 800a47e:	f018 f8cb 	bl	8022618 <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 800a482:	4a65      	ldr	r2, [pc, #404]	; (800a618 <Process_Data_from_Other+0x288>)
 800a484:	4b62      	ldr	r3, [pc, #392]	; (800a610 <Process_Data_from_Other+0x280>)
 800a486:	4614      	mov	r4, r2
 800a488:	461d      	mov	r5, r3
 800a48a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a48c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a48e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a490:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a492:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a496:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a49a:	4b5d      	ldr	r3, [pc, #372]	; (800a610 <Process_Data_from_Other+0x280>)
 800a49c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4a0:	4a54      	ldr	r2, [pc, #336]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a4a2:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a4a4:	e04d      	b.n	800a542 <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a4a6:	4b53      	ldr	r3, [pc, #332]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a4ac:	4b5b      	ldr	r3, [pc, #364]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	f023 0301 	bic.w	r3, r3, #1
 800a4b4:	b2da      	uxtb	r2, r3
 800a4b6:	4b59      	ldr	r3, [pc, #356]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a4b8:	701a      	strb	r2, [r3, #0]
			break;
 800a4ba:	e042      	b.n	800a542 <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a4bc:	4b4f      	ldr	r3, [pc, #316]	; (800a5fc <Process_Data_from_Other+0x26c>)
 800a4be:	685a      	ldr	r2, [r3, #4]
 800a4c0:	4b4c      	ldr	r3, [pc, #304]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d016      	beq.n	800a4f6 <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a4c8:	4855      	ldr	r0, [pc, #340]	; (800a620 <Process_Data_from_Other+0x290>)
 800a4ca:	f018 fa51 	bl	8022970 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a4ce:	4b49      	ldr	r3, [pc, #292]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a4d0:	785b      	ldrb	r3, [r3, #1]
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	4b47      	ldr	r3, [pc, #284]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a4d8:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a4da:	4b46      	ldr	r3, [pc, #280]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b02      	cmp	r3, #2
 800a4e0:	d931      	bls.n	800a546 <Process_Data_from_Other+0x1b6>
 800a4e2:	4b4b      	ldr	r3, [pc, #300]	; (800a610 <Process_Data_from_Other+0x280>)
 800a4e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d02c      	beq.n	800a546 <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800a4ec:	f240 2007 	movw	r0, #519	; 0x207
 800a4f0:	f005 f9be 	bl	800f870 <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a4f4:	e027      	b.n	800a546 <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a4f6:	4b49      	ldr	r3, [pc, #292]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a4f8:	781b      	ldrb	r3, [r3, #0]
 800a4fa:	f023 0301 	bic.w	r3, r3, #1
 800a4fe:	b2da      	uxtb	r2, r3
 800a500:	4b46      	ldr	r3, [pc, #280]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a502:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a504:	4b3b      	ldr	r3, [pc, #236]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a506:	2200      	movs	r2, #0
 800a508:	705a      	strb	r2, [r3, #1]
			break;
 800a50a:	e01c      	b.n	800a546 <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a50c:	4b3b      	ldr	r3, [pc, #236]	; (800a5fc <Process_Data_from_Other+0x26c>)
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b38      	ldr	r3, [pc, #224]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	429a      	cmp	r2, r3
 800a516:	d009      	beq.n	800a52c <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a518:	4841      	ldr	r0, [pc, #260]	; (800a620 <Process_Data_from_Other+0x290>)
 800a51a:	f018 fa29 	bl	8022970 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a51e:	4b35      	ldr	r3, [pc, #212]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a520:	785b      	ldrb	r3, [r3, #1]
 800a522:	3301      	adds	r3, #1
 800a524:	b2da      	uxtb	r2, r3
 800a526:	4b33      	ldr	r3, [pc, #204]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a528:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a52a:	e00d      	b.n	800a548 <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a52c:	4b3b      	ldr	r3, [pc, #236]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a52e:	781b      	ldrb	r3, [r3, #0]
 800a530:	f023 0301 	bic.w	r3, r3, #1
 800a534:	b2da      	uxtb	r2, r3
 800a536:	4b39      	ldr	r3, [pc, #228]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a538:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a53a:	4b2e      	ldr	r3, [pc, #184]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a53c:	2200      	movs	r2, #0
 800a53e:	705a      	strb	r2, [r3, #1]
			break;
 800a540:	e002      	b.n	800a548 <Process_Data_from_Other+0x1b8>
			break;
 800a542:	bf00      	nop
 800a544:	e000      	b.n	800a548 <Process_Data_from_Other+0x1b8>
			break;
 800a546:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a548:	4b2a      	ldr	r3, [pc, #168]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a54a:	785a      	ldrb	r2, [r3, #1]
 800a54c:	4b35      	ldr	r3, [pc, #212]	; (800a624 <Process_Data_from_Other+0x294>)
 800a54e:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a552:	429a      	cmp	r2, r3
 800a554:	d312      	bcc.n	800a57c <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a556:	4b31      	ldr	r3, [pc, #196]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	f003 0301 	and.w	r3, r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d10c      	bne.n	800a57c <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a562:	4831      	ldr	r0, [pc, #196]	; (800a628 <Process_Data_from_Other+0x298>)
 800a564:	f018 fa04 	bl	8022970 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a568:	4b22      	ldr	r3, [pc, #136]	; (800a5f4 <Process_Data_from_Other+0x264>)
 800a56a:	2200      	movs	r2, #0
 800a56c:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a56e:	4b2b      	ldr	r3, [pc, #172]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	f043 0301 	orr.w	r3, r3, #1
 800a576:	b2da      	uxtb	r2, r3
 800a578:	4b28      	ldr	r3, [pc, #160]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a57a:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a57c:	4b1c      	ldr	r3, [pc, #112]	; (800a5f0 <Process_Data_from_Other+0x260>)
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4618      	mov	r0, r3
 800a582:	f004 fbc1 	bl	800ed08 <HAL_Elaps_Ticks>
 800a586:	4602      	mov	r2, r0
 800a588:	4b26      	ldr	r3, [pc, #152]	; (800a624 <Process_Data_from_Other+0x294>)
 800a58a:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a58e:	429a      	cmp	r2, r3
 800a590:	d92a      	bls.n	800a5e8 <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a592:	4b26      	ldr	r3, [pc, #152]	; (800a62c <Process_Data_from_Other+0x29c>)
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	4b16      	ldr	r3, [pc, #88]	; (800a5f0 <Process_Data_from_Other+0x260>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d024      	beq.n	800a5e8 <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a59e:	4b14      	ldr	r3, [pc, #80]	; (800a5f0 <Process_Data_from_Other+0x260>)
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	4a22      	ldr	r2, [pc, #136]	; (800a62c <Process_Data_from_Other+0x29c>)
 800a5a4:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a5a6:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <Process_Data_from_Other+0x260>)
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	f004 fbac 	bl	800ed08 <HAL_Elaps_Ticks>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	4a1f      	ldr	r2, [pc, #124]	; (800a630 <Process_Data_from_Other+0x2a0>)
 800a5b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a5b8:	099b      	lsrs	r3, r3, #6
 800a5ba:	4619      	mov	r1, r3
 800a5bc:	481d      	ldr	r0, [pc, #116]	; (800a634 <Process_Data_from_Other+0x2a4>)
 800a5be:	f018 f93b 	bl	8022838 <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a5c2:	4b0b      	ldr	r3, [pc, #44]	; (800a5f0 <Process_Data_from_Other+0x260>)
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4619      	mov	r1, r3
 800a5c8:	481b      	ldr	r0, [pc, #108]	; (800a638 <Process_Data_from_Other+0x2a8>)
 800a5ca:	f018 f935 	bl	8022838 <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a5ce:	4b13      	ldr	r3, [pc, #76]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a5d0:	781b      	ldrb	r3, [r3, #0]
 800a5d2:	f003 0302 	and.w	r3, r3, #2
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d106      	bne.n	800a5e8 <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a5da:	4b10      	ldr	r3, [pc, #64]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a5dc:	781b      	ldrb	r3, [r3, #0]
 800a5de:	f043 0302 	orr.w	r3, r3, #2
 800a5e2:	b2da      	uxtb	r2, r3
 800a5e4:	4b0d      	ldr	r3, [pc, #52]	; (800a61c <Process_Data_from_Other+0x28c>)
 800a5e6:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a5e8:	bf00      	nop
 800a5ea:	bdb0      	pop	{r4, r5, r7, pc}
 800a5ec:	20002ba8 	.word	0x20002ba8
 800a5f0:	20002498 	.word	0x20002498
 800a5f4:	200029ec 	.word	0x200029ec
 800a5f8:	20002496 	.word	0x20002496
 800a5fc:	200029f4 	.word	0x200029f4
 800a600:	20002495 	.word	0x20002495
 800a604:	08025938 	.word	0x08025938
 800a608:	08025950 	.word	0x08025950
 800a60c:	08025968 	.word	0x08025968
 800a610:	20002a04 	.word	0x20002a04
 800a614:	20002a88 	.word	0x20002a88
 800a618:	200029ac 	.word	0x200029ac
 800a61c:	200029dc 	.word	0x200029dc
 800a620:	0802599c 	.word	0x0802599c
 800a624:	20000304 	.word	0x20000304
 800a628:	080259c0 	.word	0x080259c0
 800a62c:	20002bac 	.word	0x20002bac
 800a630:	10624dd3 	.word	0x10624dd3
 800a634:	080259d8 	.word	0x080259d8
 800a638:	08025a08 	.word	0x08025a08

0800a63c <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a640:	482a      	ldr	r0, [pc, #168]	; (800a6ec <Print_Medha_Self_Details+0xb0>)
 800a642:	f018 f995 	bl	8022970 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a646:	4b2a      	ldr	r3, [pc, #168]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a648:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a64c:	4619      	mov	r1, r3
 800a64e:	4829      	ldr	r0, [pc, #164]	; (800a6f4 <Print_Medha_Self_Details+0xb8>)
 800a650:	f018 f8f2 	bl	8022838 <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a654:	4b26      	ldr	r3, [pc, #152]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a656:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a65a:	4619      	mov	r1, r3
 800a65c:	4826      	ldr	r0, [pc, #152]	; (800a6f8 <Print_Medha_Self_Details+0xbc>)
 800a65e:	f018 f8eb 	bl	8022838 <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a662:	4b23      	ldr	r3, [pc, #140]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a664:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a668:	4619      	mov	r1, r3
 800a66a:	4824      	ldr	r0, [pc, #144]	; (800a6fc <Print_Medha_Self_Details+0xc0>)
 800a66c:	f018 f8e4 	bl	8022838 <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a670:	4b1f      	ldr	r3, [pc, #124]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a672:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a676:	4619      	mov	r1, r3
 800a678:	4821      	ldr	r0, [pc, #132]	; (800a700 <Print_Medha_Self_Details+0xc4>)
 800a67a:	f018 f8dd 	bl	8022838 <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a67e:	4b1c      	ldr	r3, [pc, #112]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a680:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a684:	4619      	mov	r1, r3
 800a686:	481f      	ldr	r0, [pc, #124]	; (800a704 <Print_Medha_Self_Details+0xc8>)
 800a688:	f018 f8d6 	bl	8022838 <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a68c:	4b18      	ldr	r3, [pc, #96]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a68e:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a692:	4619      	mov	r1, r3
 800a694:	481c      	ldr	r0, [pc, #112]	; (800a708 <Print_Medha_Self_Details+0xcc>)
 800a696:	f018 f8cf 	bl	8022838 <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a69a:	4b15      	ldr	r3, [pc, #84]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a69c:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a6a0:	4619      	mov	r1, r3
 800a6a2:	481a      	ldr	r0, [pc, #104]	; (800a70c <Print_Medha_Self_Details+0xd0>)
 800a6a4:	f018 f8c8 	bl	8022838 <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a6a8:	4b11      	ldr	r3, [pc, #68]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a6aa:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a6ae:	4619      	mov	r1, r3
 800a6b0:	4817      	ldr	r0, [pc, #92]	; (800a710 <Print_Medha_Self_Details+0xd4>)
 800a6b2:	f018 f8c1 	bl	8022838 <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a6b6:	4b0e      	ldr	r3, [pc, #56]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a6b8:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a6bc:	4619      	mov	r1, r3
 800a6be:	4815      	ldr	r0, [pc, #84]	; (800a714 <Print_Medha_Self_Details+0xd8>)
 800a6c0:	f018 f8ba 	bl	8022838 <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a6c4:	4b0a      	ldr	r3, [pc, #40]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a6c6:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a6ca:	4619      	mov	r1, r3
 800a6cc:	4812      	ldr	r0, [pc, #72]	; (800a718 <Print_Medha_Self_Details+0xdc>)
 800a6ce:	f018 f8b3 	bl	8022838 <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a6d2:	4b07      	ldr	r3, [pc, #28]	; (800a6f0 <Print_Medha_Self_Details+0xb4>)
 800a6d4:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a6d8:	4619      	mov	r1, r3
 800a6da:	4810      	ldr	r0, [pc, #64]	; (800a71c <Print_Medha_Self_Details+0xe0>)
 800a6dc:	f018 f8ac 	bl	8022838 <iprintf>


#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
 800a6e0:	4802      	ldr	r0, [pc, #8]	; (800a6ec <Print_Medha_Self_Details+0xb0>)
 800a6e2:	f018 f945 	bl	8022970 <puts>
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
#endif
}
 800a6e6:	bf00      	nop
 800a6e8:	bd80      	pop	{r7, pc}
 800a6ea:	bf00      	nop
 800a6ec:	08025a30 	.word	0x08025a30
 800a6f0:	20000304 	.word	0x20000304
 800a6f4:	08025a84 	.word	0x08025a84
 800a6f8:	08025aa8 	.word	0x08025aa8
 800a6fc:	08025acc 	.word	0x08025acc
 800a700:	08025af0 	.word	0x08025af0
 800a704:	08025b14 	.word	0x08025b14
 800a708:	08025b38 	.word	0x08025b38
 800a70c:	08025b5c 	.word	0x08025b5c
 800a710:	08025b80 	.word	0x08025b80
 800a714:	08025ba4 	.word	0x08025ba4
 800a718:	08025bc8 	.word	0x08025bc8
 800a71c:	08025bec 	.word	0x08025bec

0800a720 <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b09a      	sub	sp, #104	; 0x68
 800a724:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a726:	2300      	movs	r3, #0
 800a728:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a72c:	2300      	movs	r3, #0
 800a72e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a738:	2300      	movs	r3, #0
 800a73a:	603b      	str	r3, [r7, #0]
 800a73c:	1d3b      	adds	r3, r7, #4
 800a73e:	2260      	movs	r2, #96	; 0x60
 800a740:	2100      	movs	r1, #0
 800a742:	4618      	mov	r0, r3
 800a744:	f017 ff90 	bl	8022668 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a748:	4bb9      	ldr	r3, [pc, #740]	; (800aa30 <CheckforMedhaCMD+0x310>)
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	4618      	mov	r0, r3
 800a74e:	f004 fadb 	bl	800ed08 <HAL_Elaps_Ticks>
 800a752:	4603      	mov	r3, r0
 800a754:	2b09      	cmp	r3, #9
 800a756:	f240 81ad 	bls.w	800aab4 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a75a:	e010      	b.n	800a77e <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a75c:	2000      	movs	r0, #0
 800a75e:	f00a fd39 	bl	80151d4 <Com_Get_Byte>
 800a762:	4603      	mov	r3, r0
 800a764:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a768:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a76c:	1c5a      	adds	r2, r3, #1
 800a76e:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a772:	3368      	adds	r3, #104	; 0x68
 800a774:	443b      	add	r3, r7
 800a776:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a77a:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a77e:	2000      	movs	r0, #0
 800a780:	f00a fce8 	bl	8015154 <Com_DataReady>
 800a784:	4603      	mov	r3, r0
 800a786:	2b00      	cmp	r3, #0
 800a788:	d1e8      	bne.n	800a75c <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a78a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 8144 	beq.w	800aa1c <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a794:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a798:	3368      	adds	r3, #104	; 0x68
 800a79a:	443b      	add	r3, r7
 800a79c:	2200      	movs	r2, #0
 800a79e:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a7a2:	463b      	mov	r3, r7
 800a7a4:	4619      	mov	r1, r3
 800a7a6:	48a3      	ldr	r0, [pc, #652]	; (800aa34 <CheckforMedhaCMD+0x314>)
 800a7a8:	f018 f846 	bl	8022838 <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a7ac:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a7b0:	463b      	mov	r3, r7
 800a7b2:	4611      	mov	r1, r2
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	f000 fa0d 	bl	800abd4 <Is_MedhaCommand_Valid>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b0c      	cmp	r3, #12
 800a7be:	f200 8129 	bhi.w	800aa14 <CheckforMedhaCMD+0x2f4>
 800a7c2:	a201      	add	r2, pc, #4	; (adr r2, 800a7c8 <CheckforMedhaCMD+0xa8>)
 800a7c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7c8:	0800a7fd 	.word	0x0800a7fd
 800a7cc:	0800a80b 	.word	0x0800a80b
 800a7d0:	0800a86f 	.word	0x0800a86f
 800a7d4:	0800a891 	.word	0x0800a891
 800a7d8:	0800a8b9 	.word	0x0800a8b9
 800a7dc:	0800a8e1 	.word	0x0800a8e1
 800a7e0:	0800a909 	.word	0x0800a909
 800a7e4:	0800a931 	.word	0x0800a931
 800a7e8:	0800a959 	.word	0x0800a959
 800a7ec:	0800a981 	.word	0x0800a981
 800a7f0:	0800a9a9 	.word	0x0800a9a9
 800a7f4:	0800a9d1 	.word	0x0800a9d1
 800a7f8:	0800a9f9 	.word	0x0800a9f9
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a7fc:	4b8e      	ldr	r3, [pc, #568]	; (800aa38 <CheckforMedhaCMD+0x318>)
 800a7fe:	2201      	movs	r2, #1
 800a800:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a802:	488e      	ldr	r0, [pc, #568]	; (800aa3c <CheckforMedhaCMD+0x31c>)
 800a804:	f018 f8b4 	bl	8022970 <puts>
				break;
 800a808:	e109      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a80a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a80e:	3b01      	subs	r3, #1
 800a810:	3368      	adds	r3, #104	; 0x68
 800a812:	443b      	add	r3, r7
 800a814:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a818:	3b30      	subs	r3, #48	; 0x30
 800a81a:	461a      	mov	r2, r3
 800a81c:	4988      	ldr	r1, [pc, #544]	; (800aa40 <CheckforMedhaCMD+0x320>)
 800a81e:	4889      	ldr	r0, [pc, #548]	; (800aa44 <CheckforMedhaCMD+0x324>)
 800a820:	f018 f80a 	bl	8022838 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a824:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a828:	3b01      	subs	r3, #1
 800a82a:	3368      	adds	r3, #104	; 0x68
 800a82c:	443b      	add	r3, r7
 800a82e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a832:	2b2f      	cmp	r3, #47	; 0x2f
 800a834:	d914      	bls.n	800a860 <CheckforMedhaCMD+0x140>
 800a836:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a83a:	3b01      	subs	r3, #1
 800a83c:	3368      	adds	r3, #104	; 0x68
 800a83e:	443b      	add	r3, r7
 800a840:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a844:	2b32      	cmp	r3, #50	; 0x32
 800a846:	d80b      	bhi.n	800a860 <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a848:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a84c:	3b01      	subs	r3, #1
 800a84e:	3368      	adds	r3, #104	; 0x68
 800a850:	443b      	add	r3, r7
 800a852:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a856:	3b30      	subs	r3, #48	; 0x30
 800a858:	b2da      	uxtb	r2, r3
 800a85a:	4b7b      	ldr	r3, [pc, #492]	; (800aa48 <CheckforMedhaCMD+0x328>)
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	e002      	b.n	800a866 <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a860:	487a      	ldr	r0, [pc, #488]	; (800aa4c <CheckforMedhaCMD+0x32c>)
 800a862:	f018 f885 	bl	8022970 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a866:	2301      	movs	r3, #1
 800a868:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a86c:	e0d7      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a86e:	4978      	ldr	r1, [pc, #480]	; (800aa50 <CheckforMedhaCMD+0x330>)
 800a870:	4878      	ldr	r0, [pc, #480]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a872:	f017 ffe1 	bl	8022838 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a876:	4878      	ldr	r0, [pc, #480]	; (800aa58 <CheckforMedhaCMD+0x338>)
 800a878:	f018 f87a 	bl	8022970 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a87c:	4b77      	ldr	r3, [pc, #476]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	f043 0301 	orr.w	r3, r3, #1
 800a884:	4a75      	ldr	r2, [pc, #468]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a886:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a888:	2301      	movs	r3, #1
 800a88a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a88e:	e0c6      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800a890:	4973      	ldr	r1, [pc, #460]	; (800aa60 <CheckforMedhaCMD+0x340>)
 800a892:	4870      	ldr	r0, [pc, #448]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a894:	f017 ffd0 	bl	8022838 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800a898:	4872      	ldr	r0, [pc, #456]	; (800aa64 <CheckforMedhaCMD+0x344>)
 800a89a:	f018 f869 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a89e:	4b6f      	ldr	r3, [pc, #444]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a8a4:	4b6d      	ldr	r3, [pc, #436]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	f043 0302 	orr.w	r3, r3, #2
 800a8ac:	4a6b      	ldr	r2, [pc, #428]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8ae:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a8b6:	e0b2      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800a8b8:	496b      	ldr	r1, [pc, #428]	; (800aa68 <CheckforMedhaCMD+0x348>)
 800a8ba:	4866      	ldr	r0, [pc, #408]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a8bc:	f017 ffbc 	bl	8022838 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800a8c0:	486a      	ldr	r0, [pc, #424]	; (800aa6c <CheckforMedhaCMD+0x34c>)
 800a8c2:	f018 f855 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a8c6:	4b65      	ldr	r3, [pc, #404]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a8cc:	4b63      	ldr	r3, [pc, #396]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f043 0304 	orr.w	r3, r3, #4
 800a8d4:	4a61      	ldr	r2, [pc, #388]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8d6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a8de:	e09e      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800a8e0:	4963      	ldr	r1, [pc, #396]	; (800aa70 <CheckforMedhaCMD+0x350>)
 800a8e2:	485c      	ldr	r0, [pc, #368]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a8e4:	f017 ffa8 	bl	8022838 <iprintf>
				printf("INVALID_DES_PORT\n");
 800a8e8:	4862      	ldr	r0, [pc, #392]	; (800aa74 <CheckforMedhaCMD+0x354>)
 800a8ea:	f018 f841 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a8ee:	4b5b      	ldr	r3, [pc, #364]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a8f4:	4b59      	ldr	r3, [pc, #356]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	f043 0308 	orr.w	r3, r3, #8
 800a8fc:	4a57      	ldr	r2, [pc, #348]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a8fe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a900:	2301      	movs	r3, #1
 800a902:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a906:	e08a      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800a908:	495b      	ldr	r1, [pc, #364]	; (800aa78 <CheckforMedhaCMD+0x358>)
 800a90a:	4852      	ldr	r0, [pc, #328]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a90c:	f017 ff94 	bl	8022838 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800a910:	485a      	ldr	r0, [pc, #360]	; (800aa7c <CheckforMedhaCMD+0x35c>)
 800a912:	f018 f82d 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a916:	4b51      	ldr	r3, [pc, #324]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a918:	2200      	movs	r2, #0
 800a91a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a91c:	4b4f      	ldr	r3, [pc, #316]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	f043 0310 	orr.w	r3, r3, #16
 800a924:	4a4d      	ldr	r2, [pc, #308]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a926:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a928:	2301      	movs	r3, #1
 800a92a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a92e:	e076      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800a930:	4953      	ldr	r1, [pc, #332]	; (800aa80 <CheckforMedhaCMD+0x360>)
 800a932:	4848      	ldr	r0, [pc, #288]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a934:	f017 ff80 	bl	8022838 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800a938:	4852      	ldr	r0, [pc, #328]	; (800aa84 <CheckforMedhaCMD+0x364>)
 800a93a:	f018 f819 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a93e:	4b47      	ldr	r3, [pc, #284]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a940:	2200      	movs	r2, #0
 800a942:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a944:	4b45      	ldr	r3, [pc, #276]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f043 0320 	orr.w	r3, r3, #32
 800a94c:	4a43      	ldr	r2, [pc, #268]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a94e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a950:	2301      	movs	r3, #1
 800a952:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a956:	e062      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800a958:	494b      	ldr	r1, [pc, #300]	; (800aa88 <CheckforMedhaCMD+0x368>)
 800a95a:	484c      	ldr	r0, [pc, #304]	; (800aa8c <CheckforMedhaCMD+0x36c>)
 800a95c:	f017 ff6c 	bl	8022838 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800a960:	484b      	ldr	r0, [pc, #300]	; (800aa90 <CheckforMedhaCMD+0x370>)
 800a962:	f018 f805 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a966:	4b3d      	ldr	r3, [pc, #244]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a968:	2200      	movs	r2, #0
 800a96a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a96c:	4b3b      	ldr	r3, [pc, #236]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a974:	4a39      	ldr	r2, [pc, #228]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a976:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a978:	2301      	movs	r3, #1
 800a97a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a97e:	e04e      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800a980:	4944      	ldr	r1, [pc, #272]	; (800aa94 <CheckforMedhaCMD+0x374>)
 800a982:	4834      	ldr	r0, [pc, #208]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a984:	f017 ff58 	bl	8022838 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800a988:	4843      	ldr	r0, [pc, #268]	; (800aa98 <CheckforMedhaCMD+0x378>)
 800a98a:	f017 fff1 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a98e:	4b33      	ldr	r3, [pc, #204]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a990:	2200      	movs	r2, #0
 800a992:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a994:	4b31      	ldr	r3, [pc, #196]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a99c:	4a2f      	ldr	r2, [pc, #188]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a99e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9a6:	e03a      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800a9a8:	493c      	ldr	r1, [pc, #240]	; (800aa9c <CheckforMedhaCMD+0x37c>)
 800a9aa:	482a      	ldr	r0, [pc, #168]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a9ac:	f017 ff44 	bl	8022838 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800a9b0:	483b      	ldr	r0, [pc, #236]	; (800aaa0 <CheckforMedhaCMD+0x380>)
 800a9b2:	f017 ffdd 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a9b6:	4b29      	ldr	r3, [pc, #164]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9bc:	4b27      	ldr	r3, [pc, #156]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a9c4:	4a25      	ldr	r2, [pc, #148]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a9c6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9c8:	2301      	movs	r3, #1
 800a9ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9ce:	e026      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800a9d0:	4934      	ldr	r1, [pc, #208]	; (800aaa4 <CheckforMedhaCMD+0x384>)
 800a9d2:	4820      	ldr	r0, [pc, #128]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a9d4:	f017 ff30 	bl	8022838 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800a9d8:	4833      	ldr	r0, [pc, #204]	; (800aaa8 <CheckforMedhaCMD+0x388>)
 800a9da:	f017 ffc9 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a9de:	4b1f      	ldr	r3, [pc, #124]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a9e4:	4b1d      	ldr	r3, [pc, #116]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a9ec:	4a1b      	ldr	r2, [pc, #108]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800a9ee:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a9f0:	2301      	movs	r3, #1
 800a9f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a9f6:	e012      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800a9f8:	492c      	ldr	r1, [pc, #176]	; (800aaac <CheckforMedhaCMD+0x38c>)
 800a9fa:	4816      	ldr	r0, [pc, #88]	; (800aa54 <CheckforMedhaCMD+0x334>)
 800a9fc:	f017 ff1c 	bl	8022838 <iprintf>
				printf("CLEAR ALL\n");
 800aa00:	482b      	ldr	r0, [pc, #172]	; (800aab0 <CheckforMedhaCMD+0x390>)
 800aa02:	f017 ffb5 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800aa06:	4b15      	ldr	r3, [pc, #84]	; (800aa5c <CheckforMedhaCMD+0x33c>)
 800aa08:	2200      	movs	r2, #0
 800aa0a:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800aa12:	e004      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800aa14:	480d      	ldr	r0, [pc, #52]	; (800aa4c <CheckforMedhaCMD+0x32c>)
 800aa16:	f017 ffab 	bl	8022970 <puts>
 800aa1a:	e000      	b.n	800aa1e <CheckforMedhaCMD+0x2fe>
			}
		}
 800aa1c:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800aa1e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800aa22:	2b01      	cmp	r3, #1
 800aa24:	d147      	bne.n	800aab6 <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800aa26:	f240 2005 	movw	r0, #517	; 0x205
 800aa2a:	f004 ff21 	bl	800f870 <TransmitCanPkt>
 800aa2e:	e042      	b.n	800aab6 <CheckforMedhaCMD+0x396>
 800aa30:	2000a3e4 	.word	0x2000a3e4
 800aa34:	08025c10 	.word	0x08025c10
 800aa38:	20000644 	.word	0x20000644
 800aa3c:	08025c28 	.word	0x08025c28
 800aa40:	200024ce 	.word	0x200024ce
 800aa44:	08025c68 	.word	0x08025c68
 800aa48:	20000645 	.word	0x20000645
 800aa4c:	08025c7c 	.word	0x08025c7c
 800aa50:	20002500 	.word	0x20002500
 800aa54:	08025c98 	.word	0x08025c98
 800aa58:	08025ca8 	.word	0x08025ca8
 800aa5c:	20003854 	.word	0x20003854
 800aa60:	20002532 	.word	0x20002532
 800aa64:	08025cc0 	.word	0x08025cc0
 800aa68:	20002564 	.word	0x20002564
 800aa6c:	08025cd8 	.word	0x08025cd8
 800aa70:	20002596 	.word	0x20002596
 800aa74:	08025cec 	.word	0x08025cec
 800aa78:	200025c8 	.word	0x200025c8
 800aa7c:	08025d00 	.word	0x08025d00
 800aa80:	200025fa 	.word	0x200025fa
 800aa84:	08025d14 	.word	0x08025d14
 800aa88:	2000262c 	.word	0x2000262c
 800aa8c:	08025d30 	.word	0x08025d30
 800aa90:	08025d48 	.word	0x08025d48
 800aa94:	2000265e 	.word	0x2000265e
 800aa98:	08025d5c 	.word	0x08025d5c
 800aa9c:	20002690 	.word	0x20002690
 800aaa0:	08025d74 	.word	0x08025d74
 800aaa4:	200026c2 	.word	0x200026c2
 800aaa8:	08025d94 	.word	0x08025d94
 800aaac:	200026f4 	.word	0x200026f4
 800aab0:	08025db4 	.word	0x08025db4
		return;
 800aab4:	bf00      	nop
		}
	}
}
 800aab6:	3768      	adds	r7, #104	; 0x68
 800aab8:	46bd      	mov	sp, r7
 800aaba:	bd80      	pop	{r7, pc}

0800aabc <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b083      	sub	sp, #12
 800aac0:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800aac2:	2300      	movs	r3, #0
 800aac4:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800aac6:	79fb      	ldrb	r3, [r7, #7]
 800aac8:	4a3d      	ldr	r2, [pc, #244]	; (800abc0 <Update_MedhaCommands+0x104>)
 800aaca:	2132      	movs	r1, #50	; 0x32
 800aacc:	fb01 f303 	mul.w	r3, r1, r3
 800aad0:	4413      	add	r3, r2
 800aad2:	2224      	movs	r2, #36	; 0x24
 800aad4:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800aad6:	79fb      	ldrb	r3, [r7, #7]
 800aad8:	4a39      	ldr	r2, [pc, #228]	; (800abc0 <Update_MedhaCommands+0x104>)
 800aada:	2132      	movs	r1, #50	; 0x32
 800aadc:	fb01 f303 	mul.w	r3, r1, r3
 800aae0:	4413      	add	r3, r2
 800aae2:	3301      	adds	r3, #1
 800aae4:	2201      	movs	r2, #1
 800aae6:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800aae8:	79fb      	ldrb	r3, [r7, #7]
 800aaea:	4a35      	ldr	r2, [pc, #212]	; (800abc0 <Update_MedhaCommands+0x104>)
 800aaec:	2132      	movs	r1, #50	; 0x32
 800aaee:	fb01 f303 	mul.w	r3, r1, r3
 800aaf2:	4413      	add	r3, r2
 800aaf4:	3302      	adds	r3, #2
 800aaf6:	2230      	movs	r2, #48	; 0x30
 800aaf8:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800aafa:	79fb      	ldrb	r3, [r7, #7]
 800aafc:	4a30      	ldr	r2, [pc, #192]	; (800abc0 <Update_MedhaCommands+0x104>)
 800aafe:	2132      	movs	r1, #50	; 0x32
 800ab00:	fb01 f303 	mul.w	r3, r1, r3
 800ab04:	4413      	add	r3, r2
 800ab06:	3303      	adds	r3, #3
 800ab08:	2240      	movs	r2, #64	; 0x40
 800ab0a:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800ab0c:	79fb      	ldrb	r3, [r7, #7]
 800ab0e:	4a2c      	ldr	r2, [pc, #176]	; (800abc0 <Update_MedhaCommands+0x104>)
 800ab10:	2132      	movs	r1, #50	; 0x32
 800ab12:	fb01 f303 	mul.w	r3, r1, r3
 800ab16:	4413      	add	r3, r2
 800ab18:	3304      	adds	r3, #4
 800ab1a:	22c0      	movs	r2, #192	; 0xc0
 800ab1c:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800ab1e:	79fb      	ldrb	r3, [r7, #7]
 800ab20:	4a27      	ldr	r2, [pc, #156]	; (800abc0 <Update_MedhaCommands+0x104>)
 800ab22:	2132      	movs	r1, #50	; 0x32
 800ab24:	fb01 f303 	mul.w	r3, r1, r3
 800ab28:	4413      	add	r3, r2
 800ab2a:	3305      	adds	r3, #5
 800ab2c:	224e      	movs	r2, #78	; 0x4e
 800ab2e:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800ab30:	79fb      	ldrb	r3, [r7, #7]
 800ab32:	4a23      	ldr	r2, [pc, #140]	; (800abc0 <Update_MedhaCommands+0x104>)
 800ab34:	2132      	movs	r1, #50	; 0x32
 800ab36:	fb01 f303 	mul.w	r3, r1, r3
 800ab3a:	4413      	add	r3, r2
 800ab3c:	3306      	adds	r3, #6
 800ab3e:	2226      	movs	r2, #38	; 0x26
 800ab40:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800ab42:	79fb      	ldrb	r3, [r7, #7]
 800ab44:	3301      	adds	r3, #1
 800ab46:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800ab48:	79fb      	ldrb	r3, [r7, #7]
 800ab4a:	1c5a      	adds	r2, r3, #1
 800ab4c:	71fa      	strb	r2, [r7, #7]
 800ab4e:	461a      	mov	r2, r3
 800ab50:	2332      	movs	r3, #50	; 0x32
 800ab52:	fb02 f303 	mul.w	r3, r2, r3
 800ab56:	4a1a      	ldr	r2, [pc, #104]	; (800abc0 <Update_MedhaCommands+0x104>)
 800ab58:	4413      	add	r3, r2
 800ab5a:	491a      	ldr	r1, [pc, #104]	; (800abc4 <Update_MedhaCommands+0x108>)
 800ab5c:	461a      	mov	r2, r3
 800ab5e:	460b      	mov	r3, r1
 800ab60:	cb03      	ldmia	r3!, {r0, r1}
 800ab62:	6010      	str	r0, [r2, #0]
 800ab64:	6051      	str	r1, [r2, #4]
 800ab66:	8819      	ldrh	r1, [r3, #0]
 800ab68:	789b      	ldrb	r3, [r3, #2]
 800ab6a:	8111      	strh	r1, [r2, #8]
 800ab6c:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800ab6e:	79fb      	ldrb	r3, [r7, #7]
 800ab70:	1c5a      	adds	r2, r3, #1
 800ab72:	71fa      	strb	r2, [r7, #7]
 800ab74:	461a      	mov	r2, r3
 800ab76:	2332      	movs	r3, #50	; 0x32
 800ab78:	fb02 f303 	mul.w	r3, r2, r3
 800ab7c:	4a10      	ldr	r2, [pc, #64]	; (800abc0 <Update_MedhaCommands+0x104>)
 800ab7e:	4413      	add	r3, r2
 800ab80:	4911      	ldr	r1, [pc, #68]	; (800abc8 <Update_MedhaCommands+0x10c>)
 800ab82:	461a      	mov	r2, r3
 800ab84:	460b      	mov	r3, r1
 800ab86:	cb03      	ldmia	r3!, {r0, r1}
 800ab88:	6010      	str	r0, [r2, #0]
 800ab8a:	6051      	str	r1, [r2, #4]
 800ab8c:	881b      	ldrh	r3, [r3, #0]
 800ab8e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800ab90:	79fb      	ldrb	r3, [r7, #7]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	71fa      	strb	r2, [r7, #7]
 800ab96:	461a      	mov	r2, r3
 800ab98:	2332      	movs	r3, #50	; 0x32
 800ab9a:	fb02 f303 	mul.w	r3, r2, r3
 800ab9e:	4a08      	ldr	r2, [pc, #32]	; (800abc0 <Update_MedhaCommands+0x104>)
 800aba0:	4413      	add	r3, r2
 800aba2:	4a0a      	ldr	r2, [pc, #40]	; (800abcc <Update_MedhaCommands+0x110>)
 800aba4:	6810      	ldr	r0, [r2, #0]
 800aba6:	6018      	str	r0, [r3, #0]
 800aba8:	7912      	ldrb	r2, [r2, #4]
 800abaa:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800abac:	4a08      	ldr	r2, [pc, #32]	; (800abd0 <Update_MedhaCommands+0x114>)
 800abae:	79fb      	ldrb	r3, [r7, #7]
 800abb0:	7013      	strb	r3, [r2, #0]
}
 800abb2:	bf00      	nop
 800abb4:	370c      	adds	r7, #12
 800abb6:	46bd      	mov	sp, r7
 800abb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abbc:	4770      	bx	lr
 800abbe:	bf00      	nop
 800abc0:	2000249c 	.word	0x2000249c
 800abc4:	08025dc0 	.word	0x08025dc0
 800abc8:	08025dcc 	.word	0x08025dcc
 800abcc:	08025dd8 	.word	0x08025dd8
 800abd0:	20002884 	.word	0x20002884

0800abd4 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800abd4:	b590      	push	{r4, r7, lr}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	460b      	mov	r3, r1
 800abde:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800abe0:	2300      	movs	r3, #0
 800abe2:	73fb      	strb	r3, [r7, #15]
 800abe4:	e01c      	b.n	800ac20 <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800abe6:	7bfb      	ldrb	r3, [r7, #15]
 800abe8:	2232      	movs	r2, #50	; 0x32
 800abea:	fb02 f303 	mul.w	r3, r2, r3
 800abee:	4a11      	ldr	r2, [pc, #68]	; (800ac34 <Is_MedhaCommand_Valid+0x60>)
 800abf0:	189c      	adds	r4, r3, r2
 800abf2:	7bfb      	ldrb	r3, [r7, #15]
 800abf4:	2232      	movs	r2, #50	; 0x32
 800abf6:	fb02 f303 	mul.w	r3, r2, r3
 800abfa:	4a0e      	ldr	r2, [pc, #56]	; (800ac34 <Is_MedhaCommand_Valid+0x60>)
 800abfc:	4413      	add	r3, r2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f7f5 fb28 	bl	8000254 <strlen>
 800ac04:	4603      	mov	r3, r0
 800ac06:	461a      	mov	r2, r3
 800ac08:	4621      	mov	r1, r4
 800ac0a:	6878      	ldr	r0, [r7, #4]
 800ac0c:	f017 fcf4 	bl	80225f8 <memcmp>
 800ac10:	4603      	mov	r3, r0
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d101      	bne.n	800ac1a <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	e008      	b.n	800ac2c <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800ac1a:	7bfb      	ldrb	r3, [r7, #15]
 800ac1c:	3301      	adds	r3, #1
 800ac1e:	73fb      	strb	r3, [r7, #15]
 800ac20:	4b05      	ldr	r3, [pc, #20]	; (800ac38 <Is_MedhaCommand_Valid+0x64>)
 800ac22:	781b      	ldrb	r3, [r3, #0]
 800ac24:	7bfa      	ldrb	r2, [r7, #15]
 800ac26:	429a      	cmp	r2, r3
 800ac28:	d3dd      	bcc.n	800abe6 <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800ac2a:	23ff      	movs	r3, #255	; 0xff
}
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	3714      	adds	r7, #20
 800ac30:	46bd      	mov	sp, r7
 800ac32:	bd90      	pop	{r4, r7, pc}
 800ac34:	2000249c 	.word	0x2000249c
 800ac38:	20002884 	.word	0x20002884

0800ac3c <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b087      	sub	sp, #28
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	4603      	mov	r3, r0
 800ac44:	6039      	str	r1, [r7, #0]
 800ac46:	80fb      	strh	r3, [r7, #6]
 800ac48:	4613      	mov	r3, r2
 800ac4a:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800ac50:	2300      	movs	r3, #0
 800ac52:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800ac54:	2300      	movs	r3, #0
 800ac56:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800ac58:	88fb      	ldrh	r3, [r7, #6]
 800ac5a:	613b      	str	r3, [r7, #16]
 800ac5c:	e015      	b.n	800ac8a <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800ac5e:	697b      	ldr	r3, [r7, #20]
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	6839      	ldr	r1, [r7, #0]
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	440b      	add	r3, r1
 800ac68:	781b      	ldrb	r3, [r3, #0]
 800ac6a:	4053      	eors	r3, r2
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800ac70:	697b      	ldr	r3, [r7, #20]
 800ac72:	0a1b      	lsrs	r3, r3, #8
 800ac74:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800ac76:	4a0a      	ldr	r2, [pc, #40]	; (800aca0 <GetCRC32+0x64>)
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	4053      	eors	r3, r2
 800ac82:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800ac84:	693b      	ldr	r3, [r7, #16]
 800ac86:	3301      	adds	r3, #1
 800ac88:	613b      	str	r3, [r7, #16]
 800ac8a:	88bb      	ldrh	r3, [r7, #4]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d3e5      	bcc.n	800ac5e <GetCRC32+0x22>
	}

	return Crc;
 800ac92:	697b      	ldr	r3, [r7, #20]
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	371c      	adds	r7, #28
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9e:	4770      	bx	lr
 800aca0:	08028aa4 	.word	0x08028aa4

0800aca4 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b084      	sub	sp, #16
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	4603      	mov	r3, r0
 800acac:	6039      	str	r1, [r7, #0]
 800acae:	80fb      	strh	r3, [r7, #6]
 800acb0:	4613      	mov	r3, r2
 800acb2:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800acb4:	2300      	movs	r3, #0
 800acb6:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800acb8:	2300      	movs	r3, #0
 800acba:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800acbc:	88ba      	ldrh	r2, [r7, #4]
 800acbe:	88fb      	ldrh	r3, [r7, #6]
 800acc0:	6839      	ldr	r1, [r7, #0]
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff ffba 	bl	800ac3c <GetCRC32>
 800acc8:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800acca:	88bb      	ldrh	r3, [r7, #4]
 800accc:	683a      	ldr	r2, [r7, #0]
 800acce:	4413      	add	r3, r2
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	68fa      	ldr	r2, [r7, #12]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d101      	bne.n	800ace0 <CheckCRC32+0x3c>
	{
		return OK;
 800acdc:	2301      	movs	r3, #1
 800acde:	e009      	b.n	800acf4 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4619      	mov	r1, r3
 800ace4:	4805      	ldr	r0, [pc, #20]	; (800acfc <CheckCRC32+0x58>)
 800ace6:	f017 fda7 	bl	8022838 <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800acea:	68f9      	ldr	r1, [r7, #12]
 800acec:	4804      	ldr	r0, [pc, #16]	; (800ad00 <CheckCRC32+0x5c>)
 800acee:	f017 fda3 	bl	8022838 <iprintf>
		return NOT_OK;
 800acf2:	2300      	movs	r3, #0
	}

}
 800acf4:	4618      	mov	r0, r3
 800acf6:	3710      	adds	r7, #16
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}
 800acfc:	08025de0 	.word	0x08025de0
 800ad00:	08025df8 	.word	0x08025df8

0800ad04 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b086      	sub	sp, #24
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	60fb      	str	r3, [r7, #12]
 800ad12:	f107 0310 	add.w	r3, r7, #16
 800ad16:	2200      	movs	r2, #0
 800ad18:	601a      	str	r2, [r3, #0]
 800ad1a:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800ad1c:	79fb      	ldrb	r3, [r7, #7]
 800ad1e:	b29b      	uxth	r3, r3
 800ad20:	f107 010c 	add.w	r1, r7, #12
 800ad24:	220a      	movs	r2, #10
 800ad26:	4618      	mov	r0, r3
 800ad28:	f000 f846 	bl	800adb8 <ReadAndFormMsg>
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	dd34      	ble.n	800ad9c <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800ad32:	7b7b      	ldrb	r3, [r7, #13]
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d115      	bne.n	800ad64 <CheckForRqst+0x60>
 800ad38:	7bbb      	ldrb	r3, [r7, #14]
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d112      	bne.n	800ad64 <CheckForRqst+0x60>
 800ad3e:	7bfb      	ldrb	r3, [r7, #15]
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d10f      	bne.n	800ad64 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800ad44:	4818      	ldr	r0, [pc, #96]	; (800ada8 <CheckForRqst+0xa4>)
 800ad46:	f017 fe13 	bl	8022970 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800ad4a:	79fb      	ldrb	r3, [r7, #7]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	2101      	movs	r1, #1
 800ad50:	4618      	mov	r0, r3
 800ad52:	f000 f933 	bl	800afbc <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800ad56:	f00a fd65 	bl	8015824 <HAL_GetTick>
 800ad5a:	4603      	mov	r3, r0
 800ad5c:	4a13      	ldr	r2, [pc, #76]	; (800adac <CheckForRqst+0xa8>)
 800ad5e:	6013      	str	r3, [r2, #0]
			return 0x01;
 800ad60:	2301      	movs	r3, #1
 800ad62:	e01c      	b.n	800ad9e <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800ad64:	7b7b      	ldrb	r3, [r7, #13]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d115      	bne.n	800ad96 <CheckForRqst+0x92>
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b02      	cmp	r3, #2
 800ad6e:	d112      	bne.n	800ad96 <CheckForRqst+0x92>
 800ad70:	7bfb      	ldrb	r3, [r7, #15]
 800ad72:	2b01      	cmp	r3, #1
 800ad74:	d10f      	bne.n	800ad96 <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800ad76:	480e      	ldr	r0, [pc, #56]	; (800adb0 <CheckForRqst+0xac>)
 800ad78:	f017 fdfa 	bl	8022970 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800ad7c:	79fb      	ldrb	r3, [r7, #7]
 800ad7e:	2202      	movs	r2, #2
 800ad80:	2102      	movs	r1, #2
 800ad82:	4618      	mov	r0, r3
 800ad84:	f000 f91a 	bl	800afbc <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800ad88:	f00a fd4c 	bl	8015824 <HAL_GetTick>
 800ad8c:	4603      	mov	r3, r0
 800ad8e:	4a07      	ldr	r2, [pc, #28]	; (800adac <CheckForRqst+0xa8>)
 800ad90:	6013      	str	r3, [r2, #0]
			return 0x02;
 800ad92:	2302      	movs	r3, #2
 800ad94:	e003      	b.n	800ad9e <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800ad96:	4807      	ldr	r0, [pc, #28]	; (800adb4 <CheckForRqst+0xb0>)
 800ad98:	f017 fdea 	bl	8022970 <puts>
	}
	return 0x00;
 800ad9c:	2300      	movs	r3, #0
}
 800ad9e:	4618      	mov	r0, r3
 800ada0:	3718      	adds	r7, #24
 800ada2:	46bd      	mov	sp, r7
 800ada4:	bd80      	pop	{r7, pc}
 800ada6:	bf00      	nop
 800ada8:	08025e10 	.word	0x08025e10
 800adac:	20000a4c 	.word	0x20000a4c
 800adb0:	08025e28 	.word	0x08025e28
 800adb4:	08025e40 	.word	0x08025e40

0800adb8 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800adb8:	b590      	push	{r4, r7, lr}
 800adba:	b087      	sub	sp, #28
 800adbc:	af02      	add	r7, sp, #8
 800adbe:	4603      	mov	r3, r0
 800adc0:	6039      	str	r1, [r7, #0]
 800adc2:	80fb      	strh	r3, [r7, #6]
 800adc4:	4613      	mov	r3, r2
 800adc6:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800adc8:	2300      	movs	r3, #0
 800adca:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800adcc:	2300      	movs	r3, #0
 800adce:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800add0:	2300      	movs	r3, #0
 800add2:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800add4:	e0d4      	b.n	800af80 <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800add6:	4b71      	ldr	r3, [pc, #452]	; (800af9c <ReadAndFormMsg+0x1e4>)
 800add8:	2201      	movs	r2, #1
 800adda:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800addc:	4870      	ldr	r0, [pc, #448]	; (800afa0 <ReadAndFormMsg+0x1e8>)
 800adde:	f00e f887 	bl	8018ef0 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800ade2:	88fb      	ldrh	r3, [r7, #6]
 800ade4:	b2db      	uxtb	r3, r3
 800ade6:	4618      	mov	r0, r3
 800ade8:	f00a f9f4 	bl	80151d4 <Com_Get_Byte>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800adf0:	f00a fb06 	bl	8015400 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800adf4:	4b6b      	ldr	r3, [pc, #428]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800adf6:	781b      	ldrb	r3, [r3, #0]
 800adf8:	2b03      	cmp	r3, #3
 800adfa:	f000 8099 	beq.w	800af30 <ReadAndFormMsg+0x178>
 800adfe:	2b03      	cmp	r3, #3
 800ae00:	f300 80b0 	bgt.w	800af64 <ReadAndFormMsg+0x1ac>
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d002      	beq.n	800ae0e <ReadAndFormMsg+0x56>
 800ae08:	2b02      	cmp	r3, #2
 800ae0a:	d00e      	beq.n	800ae2a <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800ae0c:	e0aa      	b.n	800af64 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	2b24      	cmp	r3, #36	; 0x24
 800ae12:	f040 80a9 	bne.w	800af68 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ae16:	683b      	ldr	r3, [r7, #0]
 800ae18:	7bfa      	ldrb	r2, [r7, #15]
 800ae1a:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800ae1c:	4b62      	ldr	r3, [pc, #392]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800ae1e:	2201      	movs	r2, #1
 800ae20:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ae22:	4b60      	ldr	r3, [pc, #384]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800ae24:	2202      	movs	r2, #2
 800ae26:	701a      	strb	r2, [r3, #0]
			break;
 800ae28:	e09e      	b.n	800af68 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800ae2a:	7bfb      	ldrb	r3, [r7, #15]
 800ae2c:	2b26      	cmp	r3, #38	; 0x26
 800ae2e:	d006      	beq.n	800ae3e <ReadAndFormMsg+0x86>
 800ae30:	2b26      	cmp	r3, #38	; 0x26
 800ae32:	dc6e      	bgt.n	800af12 <ReadAndFormMsg+0x15a>
 800ae34:	2b05      	cmp	r3, #5
 800ae36:	d068      	beq.n	800af0a <ReadAndFormMsg+0x152>
 800ae38:	2b24      	cmp	r3, #36	; 0x24
 800ae3a:	d05c      	beq.n	800aef6 <ReadAndFormMsg+0x13e>
 800ae3c:	e069      	b.n	800af12 <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800ae3e:	4b5a      	ldr	r3, [pc, #360]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800ae40:	881b      	ldrh	r3, [r3, #0]
 800ae42:	3b02      	subs	r3, #2
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800ae48:	4b57      	ldr	r3, [pc, #348]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800ae4a:	881b      	ldrh	r3, [r3, #0]
 800ae4c:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800ae4e:	4b56      	ldr	r3, [pc, #344]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800ae50:	2200      	movs	r2, #0
 800ae52:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800ae54:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da01      	bge.n	800ae60 <ReadAndFormMsg+0xa8>
					return 0;
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	e099      	b.n	800af94 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800ae60:	4b50      	ldr	r3, [pc, #320]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800ae62:	2201      	movs	r2, #1
 800ae64:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ae66:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800ae6a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae6e:	683a      	ldr	r2, [r7, #0]
 800ae70:	4413      	add	r3, r2
 800ae72:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ae74:	461c      	mov	r4, r3
 800ae76:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae7a:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800ae7c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae80:	3301      	adds	r3, #1
 800ae82:	683a      	ldr	r2, [r7, #0]
 800ae84:	4413      	add	r3, r2
 800ae86:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800ae88:	9300      	str	r3, [sp, #0]
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	4847      	ldr	r0, [pc, #284]	; (800afac <ReadAndFormMsg+0x1f4>)
 800ae90:	f017 fcd2 	bl	8022838 <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800ae94:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ae98:	4619      	mov	r1, r3
 800ae9a:	6838      	ldr	r0, [r7, #0]
 800ae9c:	f007 ffd8 	bl	8012e50 <CheckCRC>
 800aea0:	4603      	mov	r3, r0
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d012      	beq.n	800aecc <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800aea6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aeaa:	683a      	ldr	r2, [r7, #0]
 800aeac:	4413      	add	r3, r2
 800aeae:	781b      	ldrb	r3, [r3, #0]
 800aeb0:	4619      	mov	r1, r3
 800aeb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aeb6:	3301      	adds	r3, #1
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	4413      	add	r3, r2
 800aebc:	781b      	ldrb	r3, [r3, #0]
 800aebe:	461a      	mov	r2, r3
 800aec0:	483b      	ldr	r0, [pc, #236]	; (800afb0 <ReadAndFormMsg+0x1f8>)
 800aec2:	f017 fcb9 	bl	8022838 <iprintf>
					return us_ReturnBytes;
 800aec6:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aeca:	e063      	b.n	800af94 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800aecc:	4839      	ldr	r0, [pc, #228]	; (800afb4 <ReadAndFormMsg+0x1fc>)
 800aece:	f017 fcb3 	bl	8022838 <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800aed2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aed6:	683a      	ldr	r2, [r7, #0]
 800aed8:	4413      	add	r3, r2
 800aeda:	781b      	ldrb	r3, [r3, #0]
 800aedc:	4619      	mov	r1, r3
 800aede:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aee2:	3301      	adds	r3, #1
 800aee4:	683a      	ldr	r2, [r7, #0]
 800aee6:	4413      	add	r3, r2
 800aee8:	781b      	ldrb	r3, [r3, #0]
 800aeea:	461a      	mov	r2, r3
 800aeec:	4832      	ldr	r0, [pc, #200]	; (800afb8 <ReadAndFormMsg+0x200>)
 800aeee:	f017 fca3 	bl	8022838 <iprintf>
					return 0;
 800aef2:	2300      	movs	r3, #0
 800aef4:	e04e      	b.n	800af94 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800aef6:	683b      	ldr	r3, [r7, #0]
 800aef8:	7bfa      	ldrb	r2, [r7, #15]
 800aefa:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800aefc:	4b2a      	ldr	r3, [pc, #168]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800aefe:	2201      	movs	r2, #1
 800af00:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800af02:	4b28      	ldr	r3, [pc, #160]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800af04:	2202      	movs	r2, #2
 800af06:	701a      	strb	r2, [r3, #0]
				break;
 800af08:	e011      	b.n	800af2e <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800af0a:	4b26      	ldr	r3, [pc, #152]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800af0c:	2203      	movs	r2, #3
 800af0e:	701a      	strb	r2, [r3, #0]
				break;
 800af10:	e00d      	b.n	800af2e <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800af12:	4b25      	ldr	r3, [pc, #148]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af14:	881b      	ldrh	r3, [r3, #0]
 800af16:	461a      	mov	r2, r3
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	4413      	add	r3, r2
 800af1c:	7bfa      	ldrb	r2, [r7, #15]
 800af1e:	701a      	strb	r2, [r3, #0]
				j++;
 800af20:	4b21      	ldr	r3, [pc, #132]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af22:	881b      	ldrh	r3, [r3, #0]
 800af24:	3301      	adds	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	4b1f      	ldr	r3, [pc, #124]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af2a:	801a      	strh	r2, [r3, #0]
				break;
 800af2c:	bf00      	nop
			break;
 800af2e:	e01c      	b.n	800af6a <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800af30:	7bfb      	ldrb	r3, [r7, #15]
 800af32:	2b24      	cmp	r3, #36	; 0x24
 800af34:	d005      	beq.n	800af42 <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	2b26      	cmp	r3, #38	; 0x26
 800af3a:	d002      	beq.n	800af42 <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800af3c:	7bfb      	ldrb	r3, [r7, #15]
 800af3e:	2b05      	cmp	r3, #5
 800af40:	d10c      	bne.n	800af5c <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800af42:	4b19      	ldr	r3, [pc, #100]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af44:	881b      	ldrh	r3, [r3, #0]
 800af46:	461a      	mov	r2, r3
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	4413      	add	r3, r2
 800af4c:	7bfa      	ldrb	r2, [r7, #15]
 800af4e:	701a      	strb	r2, [r3, #0]
					j++;
 800af50:	4b15      	ldr	r3, [pc, #84]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af52:	881b      	ldrh	r3, [r3, #0]
 800af54:	3301      	adds	r3, #1
 800af56:	b29a      	uxth	r2, r3
 800af58:	4b13      	ldr	r3, [pc, #76]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af5a:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800af5c:	4b11      	ldr	r3, [pc, #68]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800af5e:	2202      	movs	r2, #2
 800af60:	701a      	strb	r2, [r3, #0]
				break;
 800af62:	e002      	b.n	800af6a <ReadAndFormMsg+0x1b2>
				break;
 800af64:	bf00      	nop
 800af66:	e000      	b.n	800af6a <ReadAndFormMsg+0x1b2>
			break;
 800af68:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800af6a:	4b0f      	ldr	r3, [pc, #60]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af6c:	881b      	ldrh	r3, [r3, #0]
 800af6e:	88ba      	ldrh	r2, [r7, #4]
 800af70:	429a      	cmp	r2, r3
 800af72:	d805      	bhi.n	800af80 <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800af74:	4b0b      	ldr	r3, [pc, #44]	; (800afa4 <ReadAndFormMsg+0x1ec>)
 800af76:	2201      	movs	r2, #1
 800af78:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800af7a:	4b0b      	ldr	r3, [pc, #44]	; (800afa8 <ReadAndFormMsg+0x1f0>)
 800af7c:	2200      	movs	r2, #0
 800af7e:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800af80:	88fb      	ldrh	r3, [r7, #6]
 800af82:	b2db      	uxtb	r3, r3
 800af84:	4618      	mov	r0, r3
 800af86:	f00a f8e5 	bl	8015154 <Com_DataReady>
 800af8a:	4603      	mov	r3, r0
 800af8c:	2b00      	cmp	r3, #0
 800af8e:	f47f af22 	bne.w	800add6 <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800af92:	2300      	movs	r3, #0
}
 800af94:	4618      	mov	r0, r3
 800af96:	3714      	adds	r7, #20
 800af98:	46bd      	mov	sp, r7
 800af9a:	bd90      	pop	{r4, r7, pc}
 800af9c:	20000a4a 	.word	0x20000a4a
 800afa0:	2000a04c 	.word	0x2000a04c
 800afa4:	20000117 	.word	0x20000117
 800afa8:	20002bb0 	.word	0x20002bb0
 800afac:	08025e50 	.word	0x08025e50
 800afb0:	08025e78 	.word	0x08025e78
 800afb4:	08025e8c 	.word	0x08025e8c
 800afb8:	08025e98 	.word	0x08025e98

0800afbc <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800afbc:	b580      	push	{r7, lr}
 800afbe:	b086      	sub	sp, #24
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	4603      	mov	r3, r0
 800afc4:	71fb      	strb	r3, [r7, #7]
 800afc6:	460b      	mov	r3, r1
 800afc8:	71bb      	strb	r3, [r7, #6]
 800afca:	4613      	mov	r3, r2
 800afcc:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800afce:	2300      	movs	r3, #0
 800afd0:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800afd2:	2300      	movs	r3, #0
 800afd4:	60bb      	str	r3, [r7, #8]
 800afd6:	f107 030c 	add.w	r3, r7, #12
 800afda:	2200      	movs	r2, #0
 800afdc:	601a      	str	r2, [r3, #0]
 800afde:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800afe0:	2324      	movs	r3, #36	; 0x24
 800afe2:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800afe4:	79bb      	ldrb	r3, [r7, #6]
 800afe6:	121b      	asrs	r3, r3, #8
 800afe8:	b2db      	uxtb	r3, r3
 800afea:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800afec:	79bb      	ldrb	r3, [r7, #6]
 800afee:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800aff0:	797b      	ldrb	r3, [r7, #5]
 800aff2:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800aff4:	f107 0308 	add.w	r3, r7, #8
 800aff8:	2104      	movs	r1, #4
 800affa:	4618      	mov	r0, r3
 800affc:	f007 ffd2 	bl	8012fa4 <ComputeCRC>
	puc_Message[6]= '&';
 800b000:	2326      	movs	r3, #38	; 0x26
 800b002:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800b004:	7b3b      	ldrb	r3, [r7, #12]
 800b006:	4619      	mov	r1, r3
 800b008:	7b7b      	ldrb	r3, [r7, #13]
 800b00a:	461a      	mov	r2, r3
 800b00c:	480f      	ldr	r0, [pc, #60]	; (800b04c <SendAck+0x90>)
 800b00e:	f017 fc13 	bl	8022838 <iprintf>

	AckTim=HAL_GetTick();
 800b012:	f00a fc07 	bl	8015824 <HAL_GetTick>
 800b016:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b018:	e002      	b.n	800b020 <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800b01a:	480d      	ldr	r0, [pc, #52]	; (800b050 <SendAck+0x94>)
 800b01c:	f00d ff68 	bl	8018ef0 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800b020:	6978      	ldr	r0, [r7, #20]
 800b022:	f003 fe71 	bl	800ed08 <HAL_Elaps_Ticks>
 800b026:	4603      	mov	r3, r0
 800b028:	f240 52db 	movw	r2, #1499	; 0x5db
 800b02c:	4293      	cmp	r3, r2
 800b02e:	d9f4      	bls.n	800b01a <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800b030:	f107 0108 	add.w	r1, r7, #8
 800b034:	79fb      	ldrb	r3, [r7, #7]
 800b036:	2206      	movs	r2, #6
 800b038:	4618      	mov	r0, r3
 800b03a:	f00a f94b 	bl	80152d4 <CommTransmitMessage>

	AckTim = 0;
 800b03e:	2300      	movs	r3, #0
 800b040:	617b      	str	r3, [r7, #20]
}
 800b042:	bf00      	nop
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
 800b04a:	bf00      	nop
 800b04c:	08025ea4 	.word	0x08025ea4
 800b050:	2000a04c 	.word	0x2000a04c

0800b054 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b084      	sub	sp, #16
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	6039      	str	r1, [r7, #0]
 800b05e:	80fb      	strh	r3, [r7, #6]
 800b060:	4613      	mov	r3, r2
 800b062:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800b064:	2300      	movs	r3, #0
 800b066:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800b068:	2300      	movs	r3, #0
 800b06a:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800b06c:	2300      	movs	r3, #0
 800b06e:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800b070:	e0ba      	b.n	800b1e8 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800b072:	88fb      	ldrh	r3, [r7, #6]
 800b074:	b2db      	uxtb	r3, r3
 800b076:	4618      	mov	r0, r3
 800b078:	f00a f8ac 	bl	80151d4 <Com_Get_Byte>
 800b07c:	4603      	mov	r3, r0
 800b07e:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800b080:	f00a f9be 	bl	8015400 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800b084:	485f      	ldr	r0, [pc, #380]	; (800b204 <ReadAndFormConfig+0x1b0>)
 800b086:	f00d ff33 	bl	8018ef0 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800b08a:	4b5f      	ldr	r3, [pc, #380]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b08c:	781b      	ldrb	r3, [r3, #0]
 800b08e:	2b03      	cmp	r3, #3
 800b090:	f000 8082 	beq.w	800b198 <ReadAndFormConfig+0x144>
 800b094:	2b03      	cmp	r3, #3
 800b096:	f300 8099 	bgt.w	800b1cc <ReadAndFormConfig+0x178>
 800b09a:	2b01      	cmp	r3, #1
 800b09c:	d002      	beq.n	800b0a4 <ReadAndFormConfig+0x50>
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	d00e      	beq.n	800b0c0 <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800b0a2:	e093      	b.n	800b1cc <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800b0a4:	7bfb      	ldrb	r3, [r7, #15]
 800b0a6:	2b24      	cmp	r3, #36	; 0x24
 800b0a8:	f040 8092 	bne.w	800b1d0 <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	7bfa      	ldrb	r2, [r7, #15]
 800b0b0:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b0b2:	4b56      	ldr	r3, [pc, #344]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b0b4:	2201      	movs	r2, #1
 800b0b6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b0b8:	4b53      	ldr	r3, [pc, #332]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b0ba:	2202      	movs	r2, #2
 800b0bc:	701a      	strb	r2, [r3, #0]
			break;
 800b0be:	e087      	b.n	800b1d0 <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800b0c0:	7bfb      	ldrb	r3, [r7, #15]
 800b0c2:	2b26      	cmp	r3, #38	; 0x26
 800b0c4:	d006      	beq.n	800b0d4 <ReadAndFormConfig+0x80>
 800b0c6:	2b26      	cmp	r3, #38	; 0x26
 800b0c8:	dc57      	bgt.n	800b17a <ReadAndFormConfig+0x126>
 800b0ca:	2b05      	cmp	r3, #5
 800b0cc:	d051      	beq.n	800b172 <ReadAndFormConfig+0x11e>
 800b0ce:	2b24      	cmp	r3, #36	; 0x24
 800b0d0:	d045      	beq.n	800b15e <ReadAndFormConfig+0x10a>
 800b0d2:	e052      	b.n	800b17a <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800b0d4:	4b4d      	ldr	r3, [pc, #308]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b0d6:	881b      	ldrh	r3, [r3, #0]
 800b0d8:	3b02      	subs	r3, #2
 800b0da:	b29b      	uxth	r3, r3
 800b0dc:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800b0de:	4b4b      	ldr	r3, [pc, #300]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b0e0:	881b      	ldrh	r3, [r3, #0]
 800b0e2:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800b0e4:	4b49      	ldr	r3, [pc, #292]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800b0ea:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b0ee:	2b00      	cmp	r3, #0
 800b0f0:	da01      	bge.n	800b0f6 <ReadAndFormConfig+0xa2>
					return 0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	e082      	b.n	800b1fc <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800b0f6:	4b44      	ldr	r3, [pc, #272]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b0f8:	2201      	movs	r2, #1
 800b0fa:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800b0fc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b100:	4619      	mov	r1, r3
 800b102:	6838      	ldr	r0, [r7, #0]
 800b104:	f007 fea4 	bl	8012e50 <CheckCRC>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d012      	beq.n	800b134 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b10e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b112:	683a      	ldr	r2, [r7, #0]
 800b114:	4413      	add	r3, r2
 800b116:	781b      	ldrb	r3, [r3, #0]
 800b118:	4619      	mov	r1, r3
 800b11a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b11e:	3301      	adds	r3, #1
 800b120:	683a      	ldr	r2, [r7, #0]
 800b122:	4413      	add	r3, r2
 800b124:	781b      	ldrb	r3, [r3, #0]
 800b126:	461a      	mov	r2, r3
 800b128:	4839      	ldr	r0, [pc, #228]	; (800b210 <ReadAndFormConfig+0x1bc>)
 800b12a:	f017 fb85 	bl	8022838 <iprintf>
					return us_ReturnBytes;
 800b12e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800b132:	e063      	b.n	800b1fc <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800b134:	4837      	ldr	r0, [pc, #220]	; (800b214 <ReadAndFormConfig+0x1c0>)
 800b136:	f017 fb7f 	bl	8022838 <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800b13a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b13e:	683a      	ldr	r2, [r7, #0]
 800b140:	4413      	add	r3, r2
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	4619      	mov	r1, r3
 800b146:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800b14a:	3301      	adds	r3, #1
 800b14c:	683a      	ldr	r2, [r7, #0]
 800b14e:	4413      	add	r3, r2
 800b150:	781b      	ldrb	r3, [r3, #0]
 800b152:	461a      	mov	r2, r3
 800b154:	4830      	ldr	r0, [pc, #192]	; (800b218 <ReadAndFormConfig+0x1c4>)
 800b156:	f017 fb6f 	bl	8022838 <iprintf>
					return 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	e04e      	b.n	800b1fc <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800b15e:	683b      	ldr	r3, [r7, #0]
 800b160:	7bfa      	ldrb	r2, [r7, #15]
 800b162:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800b164:	4b29      	ldr	r3, [pc, #164]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b166:	2201      	movs	r2, #1
 800b168:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b16a:	4b27      	ldr	r3, [pc, #156]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b16c:	2202      	movs	r2, #2
 800b16e:	701a      	strb	r2, [r3, #0]
				break;
 800b170:	e011      	b.n	800b196 <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800b172:	4b25      	ldr	r3, [pc, #148]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b174:	2203      	movs	r2, #3
 800b176:	701a      	strb	r2, [r3, #0]
				break;
 800b178:	e00d      	b.n	800b196 <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800b17a:	4b24      	ldr	r3, [pc, #144]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b17c:	881b      	ldrh	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	4413      	add	r3, r2
 800b184:	7bfa      	ldrb	r2, [r7, #15]
 800b186:	701a      	strb	r2, [r3, #0]
				i++;
 800b188:	4b20      	ldr	r3, [pc, #128]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b18a:	881b      	ldrh	r3, [r3, #0]
 800b18c:	3301      	adds	r3, #1
 800b18e:	b29a      	uxth	r2, r3
 800b190:	4b1e      	ldr	r3, [pc, #120]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b192:	801a      	strh	r2, [r3, #0]
				break;
 800b194:	bf00      	nop
			break;
 800b196:	e01c      	b.n	800b1d2 <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800b198:	7bfb      	ldrb	r3, [r7, #15]
 800b19a:	2b24      	cmp	r3, #36	; 0x24
 800b19c:	d005      	beq.n	800b1aa <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800b19e:	7bfb      	ldrb	r3, [r7, #15]
 800b1a0:	2b26      	cmp	r3, #38	; 0x26
 800b1a2:	d002      	beq.n	800b1aa <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800b1a4:	7bfb      	ldrb	r3, [r7, #15]
 800b1a6:	2b05      	cmp	r3, #5
 800b1a8:	d10c      	bne.n	800b1c4 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800b1aa:	4b18      	ldr	r3, [pc, #96]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	461a      	mov	r2, r3
 800b1b0:	683b      	ldr	r3, [r7, #0]
 800b1b2:	4413      	add	r3, r2
 800b1b4:	7bfa      	ldrb	r2, [r7, #15]
 800b1b6:	701a      	strb	r2, [r3, #0]
					i++;
 800b1b8:	4b14      	ldr	r3, [pc, #80]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b1ba:	881b      	ldrh	r3, [r3, #0]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	b29a      	uxth	r2, r3
 800b1c0:	4b12      	ldr	r3, [pc, #72]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b1c2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800b1c4:	4b10      	ldr	r3, [pc, #64]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b1c6:	2202      	movs	r2, #2
 800b1c8:	701a      	strb	r2, [r3, #0]
				break;
 800b1ca:	e002      	b.n	800b1d2 <ReadAndFormConfig+0x17e>
				break;
 800b1cc:	bf00      	nop
 800b1ce:	e000      	b.n	800b1d2 <ReadAndFormConfig+0x17e>
			break;
 800b1d0:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800b1d2:	4b0e      	ldr	r3, [pc, #56]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b1d4:	881b      	ldrh	r3, [r3, #0]
 800b1d6:	88ba      	ldrh	r2, [r7, #4]
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d805      	bhi.n	800b1e8 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800b1dc:	4b0a      	ldr	r3, [pc, #40]	; (800b208 <ReadAndFormConfig+0x1b4>)
 800b1de:	2201      	movs	r2, #1
 800b1e0:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800b1e2:	4b0a      	ldr	r3, [pc, #40]	; (800b20c <ReadAndFormConfig+0x1b8>)
 800b1e4:	2200      	movs	r2, #0
 800b1e6:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800b1e8:	88fb      	ldrh	r3, [r7, #6]
 800b1ea:	b2db      	uxtb	r3, r3
 800b1ec:	4618      	mov	r0, r3
 800b1ee:	f009 ffb1 	bl	8015154 <Com_DataReady>
 800b1f2:	4603      	mov	r3, r0
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	f47f af3c 	bne.w	800b072 <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800b1fa:	2300      	movs	r3, #0
}
 800b1fc:	4618      	mov	r0, r3
 800b1fe:	3710      	adds	r7, #16
 800b200:	46bd      	mov	sp, r7
 800b202:	bd80      	pop	{r7, pc}
 800b204:	2000a04c 	.word	0x2000a04c
 800b208:	20000118 	.word	0x20000118
 800b20c:	20002bb2 	.word	0x20002bb2
 800b210:	08025ec0 	.word	0x08025ec0
 800b214:	08025e8c 	.word	0x08025e8c
 800b218:	08025ed4 	.word	0x08025ed4

0800b21c <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	4603      	mov	r3, r0
 800b224:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800b226:	79fb      	ldrb	r3, [r7, #7]
 800b228:	091b      	lsrs	r3, r3, #4
 800b22a:	b2db      	uxtb	r3, r3
 800b22c:	461a      	mov	r2, r3
 800b22e:	0092      	lsls	r2, r2, #2
 800b230:	4413      	add	r3, r2
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	b2da      	uxtb	r2, r3
 800b236:	79fb      	ldrb	r3, [r7, #7]
 800b238:	f003 030f 	and.w	r3, r3, #15
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	4413      	add	r3, r2
 800b240:	b2db      	uxtb	r3, r3
}
 800b242:	4618      	mov	r0, r3
 800b244:	370c      	adds	r7, #12
 800b246:	46bd      	mov	sp, r7
 800b248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24c:	4770      	bx	lr
	...

0800b250 <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800b250:	b480      	push	{r7}
 800b252:	b083      	sub	sp, #12
 800b254:	af00      	add	r7, sp, #0
 800b256:	4603      	mov	r3, r0
 800b258:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800b25a:	79fb      	ldrb	r3, [r7, #7]
 800b25c:	4a0d      	ldr	r2, [pc, #52]	; (800b294 <Dec_to_BCD+0x44>)
 800b25e:	fba2 2303 	umull	r2, r3, r2, r3
 800b262:	08db      	lsrs	r3, r3, #3
 800b264:	b2db      	uxtb	r3, r3
 800b266:	011b      	lsls	r3, r3, #4
 800b268:	b2d8      	uxtb	r0, r3
 800b26a:	79fa      	ldrb	r2, [r7, #7]
 800b26c:	4b09      	ldr	r3, [pc, #36]	; (800b294 <Dec_to_BCD+0x44>)
 800b26e:	fba3 1302 	umull	r1, r3, r3, r2
 800b272:	08d9      	lsrs	r1, r3, #3
 800b274:	460b      	mov	r3, r1
 800b276:	009b      	lsls	r3, r3, #2
 800b278:	440b      	add	r3, r1
 800b27a:	005b      	lsls	r3, r3, #1
 800b27c:	1ad3      	subs	r3, r2, r3
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	4403      	add	r3, r0
 800b282:	71fb      	strb	r3, [r7, #7]
	return c;
 800b284:	79fb      	ldrb	r3, [r7, #7]
}
 800b286:	4618      	mov	r0, r3
 800b288:	370c      	adds	r7, #12
 800b28a:	46bd      	mov	sp, r7
 800b28c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b290:	4770      	bx	lr
 800b292:	bf00      	nop
 800b294:	cccccccd 	.word	0xcccccccd

0800b298 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800b298:	b480      	push	{r7}
 800b29a:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800b29c:	4b0b      	ldr	r3, [pc, #44]	; (800b2cc <Is_GPS_Valid+0x34>)
 800b29e:	795b      	ldrb	r3, [r3, #5]
 800b2a0:	2b09      	cmp	r3, #9
 800b2a2:	d801      	bhi.n	800b2a8 <Is_GPS_Valid+0x10>
	{
		return 0;
 800b2a4:	2300      	movs	r3, #0
 800b2a6:	e00c      	b.n	800b2c2 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800b2a8:	4b08      	ldr	r3, [pc, #32]	; (800b2cc <Is_GPS_Valid+0x34>)
 800b2aa:	791b      	ldrb	r3, [r3, #4]
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d101      	bne.n	800b2b4 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	e006      	b.n	800b2c2 <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800b2b4:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <Is_GPS_Valid+0x34>)
 800b2b6:	78db      	ldrb	r3, [r3, #3]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	d101      	bne.n	800b2c0 <Is_GPS_Valid+0x28>
	{
		return 0;
 800b2bc:	2300      	movs	r3, #0
 800b2be:	e000      	b.n	800b2c2 <Is_GPS_Valid+0x2a>
	}
	return 1;
 800b2c0:	2301      	movs	r3, #1
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	20002bb4 	.word	0x20002bb4

0800b2d0 <Write_RTC>:


void Write_RTC(void)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	603b      	str	r3, [r7, #0]
 800b2da:	1d3b      	adds	r3, r7, #4
 800b2dc:	2100      	movs	r1, #0
 800b2de:	460a      	mov	r2, r1
 800b2e0:	801a      	strh	r2, [r3, #0]
 800b2e2:	460a      	mov	r2, r1
 800b2e4:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800b2e6:	f7ff ffd7 	bl	800b298 <Is_GPS_Valid>
 800b2ea:	4603      	mov	r3, r0
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d103      	bne.n	800b2f8 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800b2f0:	4844      	ldr	r0, [pc, #272]	; (800b404 <Write_RTC+0x134>)
 800b2f2:	f017 fb3d 	bl	8022970 <puts>
 800b2f6:	e081      	b.n	800b3fc <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800b2f8:	4b43      	ldr	r3, [pc, #268]	; (800b408 <Write_RTC+0x138>)
 800b2fa:	2201      	movs	r2, #1
 800b2fc:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800b2fe:	4b43      	ldr	r3, [pc, #268]	; (800b40c <Write_RTC+0x13c>)
 800b300:	789b      	ldrb	r3, [r3, #2]
 800b302:	4618      	mov	r0, r3
 800b304:	f7ff ffa4 	bl	800b250 <Dec_to_BCD>
 800b308:	4603      	mov	r3, r0
 800b30a:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800b30c:	4b3f      	ldr	r3, [pc, #252]	; (800b40c <Write_RTC+0x13c>)
 800b30e:	785b      	ldrb	r3, [r3, #1]
 800b310:	4618      	mov	r0, r3
 800b312:	f7ff ff9d 	bl	800b250 <Dec_to_BCD>
 800b316:	4603      	mov	r3, r0
 800b318:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800b31a:	4b3c      	ldr	r3, [pc, #240]	; (800b40c <Write_RTC+0x13c>)
 800b31c:	781b      	ldrb	r3, [r3, #0]
 800b31e:	4618      	mov	r0, r3
 800b320:	f7ff ff96 	bl	800b250 <Dec_to_BCD>
 800b324:	4603      	mov	r3, r0
 800b326:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800b328:	4b38      	ldr	r3, [pc, #224]	; (800b40c <Write_RTC+0x13c>)
 800b32a:	78db      	ldrb	r3, [r3, #3]
 800b32c:	4618      	mov	r0, r3
 800b32e:	f7ff ff8f 	bl	800b250 <Dec_to_BCD>
 800b332:	4603      	mov	r3, r0
 800b334:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800b336:	4b35      	ldr	r3, [pc, #212]	; (800b40c <Write_RTC+0x13c>)
 800b338:	791b      	ldrb	r3, [r3, #4]
 800b33a:	4618      	mov	r0, r3
 800b33c:	f7ff ff88 	bl	800b250 <Dec_to_BCD>
 800b340:	4603      	mov	r3, r0
 800b342:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800b344:	4b31      	ldr	r3, [pc, #196]	; (800b40c <Write_RTC+0x13c>)
 800b346:	795b      	ldrb	r3, [r3, #5]
 800b348:	4618      	mov	r0, r3
 800b34a:	f7ff ff81 	bl	800b250 <Dec_to_BCD>
 800b34e:	4603      	mov	r3, r0
 800b350:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800b352:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b356:	9302      	str	r3, [sp, #8]
 800b358:	2301      	movs	r3, #1
 800b35a:	9301      	str	r3, [sp, #4]
 800b35c:	463b      	mov	r3, r7
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2301      	movs	r3, #1
 800b362:	2200      	movs	r2, #0
 800b364:	21d0      	movs	r1, #208	; 0xd0
 800b366:	482a      	ldr	r0, [pc, #168]	; (800b410 <Write_RTC+0x140>)
 800b368:	f00d f814 	bl	8018394 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800b36c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b370:	9302      	str	r3, [sp, #8]
 800b372:	2301      	movs	r3, #1
 800b374:	9301      	str	r3, [sp, #4]
 800b376:	463b      	mov	r3, r7
 800b378:	3301      	adds	r3, #1
 800b37a:	9300      	str	r3, [sp, #0]
 800b37c:	2301      	movs	r3, #1
 800b37e:	2201      	movs	r2, #1
 800b380:	21d0      	movs	r1, #208	; 0xd0
 800b382:	4823      	ldr	r0, [pc, #140]	; (800b410 <Write_RTC+0x140>)
 800b384:	f00d f806 	bl	8018394 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800b388:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b38c:	9302      	str	r3, [sp, #8]
 800b38e:	2301      	movs	r3, #1
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	463b      	mov	r3, r7
 800b394:	3302      	adds	r3, #2
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	2301      	movs	r3, #1
 800b39a:	2202      	movs	r2, #2
 800b39c:	21d0      	movs	r1, #208	; 0xd0
 800b39e:	481c      	ldr	r0, [pc, #112]	; (800b410 <Write_RTC+0x140>)
 800b3a0:	f00c fff8 	bl	8018394 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800b3a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3a8:	9302      	str	r3, [sp, #8]
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	9301      	str	r3, [sp, #4]
 800b3ae:	463b      	mov	r3, r7
 800b3b0:	3303      	adds	r3, #3
 800b3b2:	9300      	str	r3, [sp, #0]
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	2204      	movs	r2, #4
 800b3b8:	21d0      	movs	r1, #208	; 0xd0
 800b3ba:	4815      	ldr	r0, [pc, #84]	; (800b410 <Write_RTC+0x140>)
 800b3bc:	f00c ffea 	bl	8018394 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800b3c0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3c4:	9302      	str	r3, [sp, #8]
 800b3c6:	2301      	movs	r3, #1
 800b3c8:	9301      	str	r3, [sp, #4]
 800b3ca:	463b      	mov	r3, r7
 800b3cc:	3304      	adds	r3, #4
 800b3ce:	9300      	str	r3, [sp, #0]
 800b3d0:	2301      	movs	r3, #1
 800b3d2:	2205      	movs	r2, #5
 800b3d4:	21d0      	movs	r1, #208	; 0xd0
 800b3d6:	480e      	ldr	r0, [pc, #56]	; (800b410 <Write_RTC+0x140>)
 800b3d8:	f00c ffdc 	bl	8018394 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800b3dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b3e0:	9302      	str	r3, [sp, #8]
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	9301      	str	r3, [sp, #4]
 800b3e6:	463b      	mov	r3, r7
 800b3e8:	3305      	adds	r3, #5
 800b3ea:	9300      	str	r3, [sp, #0]
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	2206      	movs	r2, #6
 800b3f0:	21d0      	movs	r1, #208	; 0xd0
 800b3f2:	4807      	ldr	r0, [pc, #28]	; (800b410 <Write_RTC+0x140>)
 800b3f4:	f00c ffce 	bl	8018394 <HAL_I2C_Mem_Write>

	Get_time();
 800b3f8:	f000 f80c 	bl	800b414 <Get_time>

}
 800b3fc:	3708      	adds	r7, #8
 800b3fe:	46bd      	mov	sp, r7
 800b400:	bd80      	pop	{r7, pc}
 800b402:	bf00      	nop
 800b404:	08025f34 	.word	0x08025f34
 800b408:	20000e6c 	.word	0x20000e6c
 800b40c:	20002bb4 	.word	0x20002bb4
 800b410:	20009fa4 	.word	0x20009fa4

0800b414 <Get_time>:


void Get_time(void)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b086      	sub	sp, #24
 800b418:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800b41a:	463b      	mov	r3, r7
 800b41c:	2207      	movs	r2, #7
 800b41e:	2100      	movs	r1, #0
 800b420:	4618      	mov	r0, r3
 800b422:	f017 f921 	bl	8022668 <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800b426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800b42a:	9302      	str	r3, [sp, #8]
 800b42c:	2307      	movs	r3, #7
 800b42e:	9301      	str	r3, [sp, #4]
 800b430:	463b      	mov	r3, r7
 800b432:	9300      	str	r3, [sp, #0]
 800b434:	2301      	movs	r3, #1
 800b436:	2200      	movs	r2, #0
 800b438:	21d0      	movs	r1, #208	; 0xd0
 800b43a:	4824      	ldr	r0, [pc, #144]	; (800b4cc <Get_time+0xb8>)
 800b43c:	f00d f8be 	bl	80185bc <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800b440:	783b      	ldrb	r3, [r7, #0]
 800b442:	4618      	mov	r0, r3
 800b444:	f7ff feea 	bl	800b21c <bcdToDec>
 800b448:	4603      	mov	r3, r0
 800b44a:	461a      	mov	r2, r3
 800b44c:	4b20      	ldr	r3, [pc, #128]	; (800b4d0 <Get_time+0xbc>)
 800b44e:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800b450:	787b      	ldrb	r3, [r7, #1]
 800b452:	4618      	mov	r0, r3
 800b454:	f7ff fee2 	bl	800b21c <bcdToDec>
 800b458:	4603      	mov	r3, r0
 800b45a:	461a      	mov	r2, r3
 800b45c:	4b1c      	ldr	r3, [pc, #112]	; (800b4d0 <Get_time+0xbc>)
 800b45e:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800b460:	78bb      	ldrb	r3, [r7, #2]
 800b462:	4618      	mov	r0, r3
 800b464:	f7ff feda 	bl	800b21c <bcdToDec>
 800b468:	4603      	mov	r3, r0
 800b46a:	461a      	mov	r2, r3
 800b46c:	4b18      	ldr	r3, [pc, #96]	; (800b4d0 <Get_time+0xbc>)
 800b46e:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800b470:	793b      	ldrb	r3, [r7, #4]
 800b472:	4618      	mov	r0, r3
 800b474:	f7ff fed2 	bl	800b21c <bcdToDec>
 800b478:	4603      	mov	r3, r0
 800b47a:	461a      	mov	r2, r3
 800b47c:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <Get_time+0xbc>)
 800b47e:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800b480:	797b      	ldrb	r3, [r7, #5]
 800b482:	4618      	mov	r0, r3
 800b484:	f7ff feca 	bl	800b21c <bcdToDec>
 800b488:	4603      	mov	r3, r0
 800b48a:	461a      	mov	r2, r3
 800b48c:	4b10      	ldr	r3, [pc, #64]	; (800b4d0 <Get_time+0xbc>)
 800b48e:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800b490:	79bb      	ldrb	r3, [r7, #6]
 800b492:	4618      	mov	r0, r3
 800b494:	f7ff fec2 	bl	800b21c <bcdToDec>
 800b498:	4603      	mov	r3, r0
 800b49a:	461a      	mov	r2, r3
 800b49c:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <Get_time+0xbc>)
 800b49e:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b4a0:	783a      	ldrb	r2, [r7, #0]
 800b4a2:	4b0c      	ldr	r3, [pc, #48]	; (800b4d4 <Get_time+0xc0>)
 800b4a4:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b4a6:	787a      	ldrb	r2, [r7, #1]
 800b4a8:	4b0a      	ldr	r3, [pc, #40]	; (800b4d4 <Get_time+0xc0>)
 800b4aa:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b4ac:	78ba      	ldrb	r2, [r7, #2]
 800b4ae:	4b09      	ldr	r3, [pc, #36]	; (800b4d4 <Get_time+0xc0>)
 800b4b0:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b4b2:	793a      	ldrb	r2, [r7, #4]
 800b4b4:	4b07      	ldr	r3, [pc, #28]	; (800b4d4 <Get_time+0xc0>)
 800b4b6:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b4b8:	797a      	ldrb	r2, [r7, #5]
 800b4ba:	4b06      	ldr	r3, [pc, #24]	; (800b4d4 <Get_time+0xc0>)
 800b4bc:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b4be:	79ba      	ldrb	r2, [r7, #6]
 800b4c0:	4b04      	ldr	r3, [pc, #16]	; (800b4d4 <Get_time+0xc0>)
 800b4c2:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b4c4:	bf00      	nop
}
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	20009fa4 	.word	0x20009fa4
 800b4d0:	20002bc4 	.word	0x20002bc4
 800b4d4:	20002bcc 	.word	0x20002bcc

0800b4d8 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b4dc:	4b09      	ldr	r3, [pc, #36]	; (800b504 <Update_Time_Every_Sec+0x2c>)
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	4618      	mov	r0, r3
 800b4e2:	f003 fc11 	bl	800ed08 <HAL_Elaps_Ticks>
 800b4e6:	4603      	mov	r3, r0
 800b4e8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b4ec:	d307      	bcc.n	800b4fe <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b4ee:	f7ff ff91 	bl	800b414 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b4f2:	f00a f997 	bl	8015824 <HAL_GetTick>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	4a02      	ldr	r2, [pc, #8]	; (800b504 <Update_Time_Every_Sec+0x2c>)
 800b4fa:	6013      	str	r3, [r2, #0]
	}
	return;
 800b4fc:	bf00      	nop
 800b4fe:	bf00      	nop
}
 800b500:	bd80      	pop	{r7, pc}
 800b502:	bf00      	nop
 800b504:	20002bd4 	.word	0x20002bd4

0800b508 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b508:	b580      	push	{r7, lr}
 800b50a:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b50c:	f011 fc78 	bl	801ce00 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b510:	4813      	ldr	r0, [pc, #76]	; (800b560 <Process_SiemensEI+0x58>)
 800b512:	f00d fced 	bl	8018ef0 <HAL_IWDG_Refresh>

		Feed_wdt();
 800b516:	f008 f83d 	bl	8013594 <Feed_wdt>

		readCanToStructs();
 800b51a:	f004 fe2b 	bl	8010174 <readCanToStructs>

		Chech_forSiemensCMD();
 800b51e:	f001 fe27 	bl	800d170 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b522:	f001 fb85 	bl	800cc30 <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b526:	f001 fc6b 	bl	800ce00 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b52a:	f000 f81f 	bl	800b56c <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b52e:	f001 fc89 	bl	800ce44 <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b532:	f001 fccb 	bl	800cecc <SendRelays2Other>

		CheckRelayMisMatch();
 800b536:	f001 fce1 	bl	800cefc <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b53a:	f001 fd19 	bl	800cf70 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b53e:	f009 f93f 	bl	80147c0 <Print_BuildDat_Details>

		GetTimeStamp();
 800b542:	f002 fd9f 	bl	800e084 <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b546:	4b07      	ldr	r3, [pc, #28]	; (800b564 <Process_SiemensEI+0x5c>)
 800b548:	781b      	ldrb	r3, [r3, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d0de      	beq.n	800b50c <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b54e:	4b06      	ldr	r3, [pc, #24]	; (800b568 <Process_SiemensEI+0x60>)
 800b550:	2203      	movs	r2, #3
 800b552:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b554:	f009 f832 	bl	80145bc <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b558:	4801      	ldr	r0, [pc, #4]	; (800b560 <Process_SiemensEI+0x58>)
 800b55a:	f00d fcc9 	bl	8018ef0 <HAL_IWDG_Refresh>
		Data_Processing();
 800b55e:	e7f9      	b.n	800b554 <Process_SiemensEI+0x4c>
 800b560:	2000a04c 	.word	0x2000a04c
 800b564:	20000644 	.word	0x20000644
 800b568:	20000a49 	.word	0x20000a49

0800b56c <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b572:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b574:	2300      	movs	r3, #0
 800b576:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b57a:	2300      	movs	r3, #0
 800b57c:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b580:	2300      	movs	r3, #0
 800b582:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b586:	2300      	movs	r3, #0
 800b588:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b58c:	2300      	movs	r3, #0
 800b58e:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b592:	2300      	movs	r3, #0
 800b594:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b598:	2300      	movs	r3, #0
 800b59a:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b59e:	2300      	movs	r3, #0
 800b5a0:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b5a4:	2300      	movs	r3, #0
 800b5a6:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b5aa:	2300      	movs	r3, #0
 800b5ac:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b5b6:	2300      	movs	r3, #0
 800b5b8:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b5bc:	2300      	movs	r3, #0
 800b5be:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b5c2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5c6:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	601a      	str	r2, [r3, #0]
 800b5ce:	3304      	adds	r3, #4
 800b5d0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b5d4:	2100      	movs	r1, #0
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f017 f846 	bl	8022668 <memset>
	uint16_t Size = 0;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b5e8:	4b7c      	ldr	r3, [pc, #496]	; (800b7dc <Siemens_Data_Analyser+0x270>)
 800b5ea:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b5ee:	2b0a      	cmp	r3, #10
 800b5f0:	f240 86dc 	bls.w	800c3ac <Siemens_Data_Analyser+0xe40>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b5f4:	4b79      	ldr	r3, [pc, #484]	; (800b7dc <Siemens_Data_Analyser+0x270>)
 800b5f6:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f107 030c 	add.w	r3, r7, #12
 800b600:	4976      	ldr	r1, [pc, #472]	; (800b7dc <Siemens_Data_Analyser+0x270>)
 800b602:	4618      	mov	r0, r3
 800b604:	f017 f808 	bl	8022618 <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b608:	4b74      	ldr	r3, [pc, #464]	; (800b7dc <Siemens_Data_Analyser+0x270>)
 800b60a:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b60e:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b612:	f240 6204 	movw	r2, #1540	; 0x604
 800b616:	2100      	movs	r1, #0
 800b618:	4870      	ldr	r0, [pc, #448]	; (800b7dc <Siemens_Data_Analyser+0x270>)
 800b61a:	f017 f825 	bl	8022668 <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b61e:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b622:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b626:	2100      	movs	r1, #0
 800b628:	4618      	mov	r0, r3
 800b62a:	f017 f81d 	bl	8022668 <memset>


	BITSTUFFINIT(0,0);
 800b62e:	2300      	movs	r3, #0
 800b630:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b634:	2300      	movs	r3, #0
 800b636:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b63a:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b63e:	085b      	lsrs	r3, r3, #1
 800b640:	b29b      	uxth	r3, r3
 800b642:	3b02      	subs	r3, #2
 800b644:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b648:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b64c:	085b      	lsrs	r3, r3, #1
 800b64e:	b29b      	uxth	r3, r3
 800b650:	3b02      	subs	r3, #2
 800b652:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b656:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b65a:	3b02      	subs	r3, #2
 800b65c:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b660:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b664:	085b      	lsrs	r3, r3, #1
 800b666:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b66a:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b66e:	f107 030c 	add.w	r3, r7, #12
 800b672:	2200      	movs	r2, #0
 800b674:	4618      	mov	r0, r3
 800b676:	f002 fbeb 	bl	800de50 <Data_Compliment>
 800b67a:	4603      	mov	r3, r0
 800b67c:	2b01      	cmp	r3, #1
 800b67e:	d004      	beq.n	800b68a <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b680:	4857      	ldr	r0, [pc, #348]	; (800b7e0 <Siemens_Data_Analyser+0x274>)
 800b682:	f017 f975 	bl	8022970 <puts>
		return ;
 800b686:	f000 be94 	b.w	800c3b2 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b68a:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b68e:	f107 020c 	add.w	r2, r7, #12
 800b692:	4413      	add	r3, r2
 800b694:	461a      	mov	r2, r3
 800b696:	2110      	movs	r1, #16
 800b698:	2000      	movs	r0, #0
 800b69a:	f7f4 ffbb 	bl	8000614 <ExtractBits>
 800b69e:	4603      	mov	r3, r0
 800b6a0:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b6a4:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b6a8:	f107 030c 	add.w	r3, r7, #12
 800b6ac:	4611      	mov	r1, r2
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f002 f8d2 	bl	800d858 <Siemens_CRC>
 800b6b4:	4603      	mov	r3, r0
 800b6b6:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b6ba:	4b4a      	ldr	r3, [pc, #296]	; (800b7e4 <Siemens_Data_Analyser+0x278>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	095b      	lsrs	r3, r3, #5
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d01c      	beq.n	800b702 <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b6c8:	4847      	ldr	r0, [pc, #284]	; (800b7e8 <Siemens_Data_Analyser+0x27c>)
 800b6ca:	f017 f951 	bl	8022970 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b6ce:	4847      	ldr	r0, [pc, #284]	; (800b7ec <Siemens_Data_Analyser+0x280>)
 800b6d0:	f00e fd5a 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800b6d4:	4601      	mov	r1, r0
 800b6d6:	4b46      	ldr	r3, [pc, #280]	; (800b7f0 <Siemens_Data_Analyser+0x284>)
 800b6d8:	fba3 2301 	umull	r2, r3, r3, r1
 800b6dc:	0bda      	lsrs	r2, r3, #15
 800b6de:	4613      	mov	r3, r2
 800b6e0:	041b      	lsls	r3, r3, #16
 800b6e2:	1a9b      	subs	r3, r3, r2
 800b6e4:	1aca      	subs	r2, r1, r3
 800b6e6:	4613      	mov	r3, r2
 800b6e8:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b6ec:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b6f0:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d104      	bne.n	800b702 <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b6f8:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b6fc:	3304      	adds	r3, #4
 800b6fe:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b702:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b706:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b70a:	429a      	cmp	r2, r3
 800b70c:	d010      	beq.n	800b730 <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b70e:	4839      	ldr	r0, [pc, #228]	; (800b7f4 <Siemens_Data_Analyser+0x288>)
 800b710:	f017 f92e 	bl	8022970 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b714:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b718:	4619      	mov	r1, r3
 800b71a:	4837      	ldr	r0, [pc, #220]	; (800b7f8 <Siemens_Data_Analyser+0x28c>)
 800b71c:	f017 f88c 	bl	8022838 <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b720:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b724:	4619      	mov	r1, r3
 800b726:	4835      	ldr	r0, [pc, #212]	; (800b7fc <Siemens_Data_Analyser+0x290>)
 800b728:	f017 f886 	bl	8022838 <iprintf>
		return;
 800b72c:	f000 be41 	b.w	800c3b2 <Siemens_Data_Analyser+0xe46>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b730:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b734:	f107 020c 	add.w	r2, r7, #12
 800b738:	4413      	add	r3, r2
 800b73a:	461a      	mov	r2, r3
 800b73c:	2110      	movs	r1, #16
 800b73e:	2000      	movs	r0, #0
 800b740:	f7f4 ff68 	bl	8000614 <ExtractBits>
 800b744:	4603      	mov	r3, r0
 800b746:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b74a:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b74e:	f107 020c 	add.w	r2, r7, #12
 800b752:	4413      	add	r3, r2
 800b754:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b758:	4611      	mov	r1, r2
 800b75a:	4618      	mov	r0, r3
 800b75c:	f002 f87c 	bl	800d858 <Siemens_CRC>
 800b760:	4603      	mov	r3, r0
 800b762:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b766:	4b1f      	ldr	r3, [pc, #124]	; (800b7e4 <Siemens_Data_Analyser+0x278>)
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	0a1b      	lsrs	r3, r3, #8
 800b76c:	f003 0301 	and.w	r3, r3, #1
 800b770:	2b00      	cmp	r3, #0
 800b772:	d01c      	beq.n	800b7ae <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b774:	4822      	ldr	r0, [pc, #136]	; (800b800 <Siemens_Data_Analyser+0x294>)
 800b776:	f017 f8fb 	bl	8022970 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b77a:	481c      	ldr	r0, [pc, #112]	; (800b7ec <Siemens_Data_Analyser+0x280>)
 800b77c:	f00e fd04 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800b780:	4601      	mov	r1, r0
 800b782:	4b1b      	ldr	r3, [pc, #108]	; (800b7f0 <Siemens_Data_Analyser+0x284>)
 800b784:	fba3 2301 	umull	r2, r3, r3, r1
 800b788:	0bda      	lsrs	r2, r3, #15
 800b78a:	4613      	mov	r3, r2
 800b78c:	041b      	lsls	r3, r3, #16
 800b78e:	1a9b      	subs	r3, r3, r2
 800b790:	1aca      	subs	r2, r1, r3
 800b792:	4613      	mov	r3, r2
 800b794:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b798:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b79c:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d104      	bne.n	800b7ae <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b7a4:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b7ae:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b7b2:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d02a      	beq.n	800b810 <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b7ba:	4812      	ldr	r0, [pc, #72]	; (800b804 <Siemens_Data_Analyser+0x298>)
 800b7bc:	f017 f8d8 	bl	8022970 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b7c0:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b7c4:	4619      	mov	r1, r3
 800b7c6:	4810      	ldr	r0, [pc, #64]	; (800b808 <Siemens_Data_Analyser+0x29c>)
 800b7c8:	f017 f836 	bl	8022838 <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b7cc:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b7d0:	4619      	mov	r1, r3
 800b7d2:	480e      	ldr	r0, [pc, #56]	; (800b80c <Siemens_Data_Analyser+0x2a0>)
 800b7d4:	f017 f830 	bl	8022838 <iprintf>
		return;
 800b7d8:	f000 bdeb 	b.w	800c3b2 <Siemens_Data_Analyser+0xe46>
 800b7dc:	20004f90 	.word	0x20004f90
 800b7e0:	08025f54 	.word	0x08025f54
 800b7e4:	20003854 	.word	0x20003854
 800b7e8:	08025f74 	.word	0x08025f74
 800b7ec:	2000a05c 	.word	0x2000a05c
 800b7f0:	80008001 	.word	0x80008001
 800b7f4:	08025f9c 	.word	0x08025f9c
 800b7f8:	08025fac 	.word	0x08025fac
 800b7fc:	08025fc0 	.word	0x08025fc0
 800b800:	08025fd4 	.word	0x08025fd4
 800b804:	08026000 	.word	0x08026000
 800b808:	08026010 	.word	0x08026010
 800b80c:	0802602c 	.word	0x0802602c
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b810:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b814:	b2d8      	uxtb	r0, r3
 800b816:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b81a:	f107 020c 	add.w	r2, r7, #12
 800b81e:	441a      	add	r2, r3
 800b820:	2301      	movs	r3, #1
 800b822:	2108      	movs	r1, #8
 800b824:	f002 f86c 	bl	800d900 <Extract_Parity_Data>
 800b828:	4603      	mov	r3, r0
 800b82a:	b2da      	uxtb	r2, r3
 800b82c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b830:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b834:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b836:	4b56      	ldr	r3, [pc, #344]	; (800b990 <Siemens_Data_Analyser+0x424>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0301 	and.w	r3, r3, #1
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d02a      	beq.n	800b898 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800b842:	4854      	ldr	r0, [pc, #336]	; (800b994 <Siemens_Data_Analyser+0x428>)
 800b844:	f017 f894 	bl	8022970 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b848:	4853      	ldr	r0, [pc, #332]	; (800b998 <Siemens_Data_Analyser+0x42c>)
 800b84a:	f00e fc9d 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800b84e:	4601      	mov	r1, r0
 800b850:	4b52      	ldr	r3, [pc, #328]	; (800b99c <Siemens_Data_Analyser+0x430>)
 800b852:	fba3 2301 	umull	r2, r3, r3, r1
 800b856:	09da      	lsrs	r2, r3, #7
 800b858:	4613      	mov	r3, r2
 800b85a:	021b      	lsls	r3, r3, #8
 800b85c:	1a9b      	subs	r3, r3, r2
 800b85e:	1aca      	subs	r2, r1, r3
 800b860:	b2d2      	uxtb	r2, r2
 800b862:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b866:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b86a:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800b86c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b870:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b874:	781a      	ldrb	r2, [r3, #0]
 800b876:	4b4a      	ldr	r3, [pc, #296]	; (800b9a0 <Siemens_Data_Analyser+0x434>)
 800b878:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b87c:	429a      	cmp	r2, r3
 800b87e:	d10b      	bne.n	800b898 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800b880:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b884:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b888:	781b      	ldrb	r3, [r3, #0]
 800b88a:	3304      	adds	r3, #4
 800b88c:	b2da      	uxtb	r2, r3
 800b88e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b892:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b896:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800b898:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b89c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8a0:	781a      	ldrb	r2, [r3, #0]
 800b8a2:	4b3f      	ldr	r3, [pc, #252]	; (800b9a0 <Siemens_Data_Analyser+0x434>)
 800b8a4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	d015      	beq.n	800b8d8 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800b8ac:	483d      	ldr	r0, [pc, #244]	; (800b9a4 <Siemens_Data_Analyser+0x438>)
 800b8ae:	f017 f85f 	bl	8022970 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800b8b2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8b6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8ba:	781b      	ldrb	r3, [r3, #0]
 800b8bc:	4619      	mov	r1, r3
 800b8be:	483a      	ldr	r0, [pc, #232]	; (800b9a8 <Siemens_Data_Analyser+0x43c>)
 800b8c0:	f016 ffba 	bl	8022838 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800b8c4:	4b36      	ldr	r3, [pc, #216]	; (800b9a0 <Siemens_Data_Analyser+0x434>)
 800b8c6:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b8ca:	4619      	mov	r1, r3
 800b8cc:	4837      	ldr	r0, [pc, #220]	; (800b9ac <Siemens_Data_Analyser+0x440>)
 800b8ce:	f016 ffb3 	bl	8022838 <iprintf>
		RejectPacketFlag = 1;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800b8d8:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b8dc:	3308      	adds	r3, #8
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	da00      	bge.n	800b8e4 <Siemens_Data_Analyser+0x378>
 800b8e2:	3307      	adds	r3, #7
 800b8e4:	10db      	asrs	r3, r3, #3
 800b8e6:	b29a      	uxth	r2, r3
 800b8e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b8ec:	4413      	add	r3, r2
 800b8ee:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b8f2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b8f6:	3308      	adds	r3, #8
 800b8f8:	b29b      	uxth	r3, r3
 800b8fa:	b21b      	sxth	r3, r3
 800b8fc:	425a      	negs	r2, r3
 800b8fe:	f003 0307 	and.w	r3, r3, #7
 800b902:	f002 0207 	and.w	r2, r2, #7
 800b906:	bf58      	it	pl
 800b908:	4253      	negpl	r3, r2
 800b90a:	b21b      	sxth	r3, r3
 800b90c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b910:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b914:	b2d8      	uxtb	r0, r3
 800b916:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b91a:	f107 020c 	add.w	r2, r7, #12
 800b91e:	441a      	add	r2, r3
 800b920:	2300      	movs	r3, #0
 800b922:	2118      	movs	r1, #24
 800b924:	f001 ffec 	bl	800d900 <Extract_Parity_Data>
 800b928:	4603      	mov	r3, r0
 800b92a:	461a      	mov	r2, r3
 800b92c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b930:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b934:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800b936:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b93a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b93e:	685b      	ldr	r3, [r3, #4]
 800b940:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b944:	d036      	beq.n	800b9b4 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b946:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b94a:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800b94e:	4a18      	ldr	r2, [pc, #96]	; (800b9b0 <Siemens_Data_Analyser+0x444>)
 800b950:	8812      	ldrh	r2, [r2, #0]
 800b952:	801a      	strh	r2, [r3, #0]
 800b954:	2200      	movs	r2, #0
 800b956:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b958:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b95c:	f107 020c 	add.w	r2, r7, #12
 800b960:	4413      	add	r3, r2
 800b962:	f107 0208 	add.w	r2, r7, #8
 800b966:	2103      	movs	r1, #3
 800b968:	4618      	mov	r0, r3
 800b96a:	f000 fd4d 	bl	800c408 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800b96e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b972:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b976:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b97a:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800b97e:	3308      	adds	r3, #8
 800b980:	6812      	ldr	r2, [r2, #0]
 800b982:	4611      	mov	r1, r2
 800b984:	8019      	strh	r1, [r3, #0]
 800b986:	3302      	adds	r3, #2
 800b988:	0c12      	lsrs	r2, r2, #16
 800b98a:	701a      	strb	r2, [r3, #0]
 800b98c:	e015      	b.n	800b9ba <Siemens_Data_Analyser+0x44e>
 800b98e:	bf00      	nop
 800b990:	20003854 	.word	0x20003854
 800b994:	08026048 	.word	0x08026048
 800b998:	2000a05c 	.word	0x2000a05c
 800b99c:	80808081 	.word	0x80808081
 800b9a0:	20000304 	.word	0x20000304
 800b9a4:	08026068 	.word	0x08026068
 800b9a8:	0802608c 	.word	0x0802608c
 800b9ac:	0802609c 	.word	0x0802609c
 800b9b0:	08026220 	.word	0x08026220
	}
	else
	{
		RejectPacketFlag = 1;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800b9ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9c2:	689a      	ldr	r2, [r3, #8]
 800b9c4:	4bbf      	ldr	r3, [pc, #764]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800b9c6:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d015      	beq.n	800b9fa <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800b9ce:	48be      	ldr	r0, [pc, #760]	; (800bcc8 <Siemens_Data_Analyser+0x75c>)
 800b9d0:	f016 ffce 	bl	8022970 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800b9d4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b9d8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	4619      	mov	r1, r3
 800b9e0:	48ba      	ldr	r0, [pc, #744]	; (800bccc <Siemens_Data_Analyser+0x760>)
 800b9e2:	f016 ff29 	bl	8022838 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800b9e6:	4bb7      	ldr	r3, [pc, #732]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800b9e8:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b9ec:	4619      	mov	r1, r3
 800b9ee:	48b8      	ldr	r0, [pc, #736]	; (800bcd0 <Siemens_Data_Analyser+0x764>)
 800b9f0:	f016 ff22 	bl	8022838 <iprintf>
		RejectPacketFlag = 1;
 800b9f4:	2301      	movs	r3, #1
 800b9f6:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800b9fa:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b9fe:	3318      	adds	r3, #24
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	da00      	bge.n	800ba06 <Siemens_Data_Analyser+0x49a>
 800ba04:	3307      	adds	r3, #7
 800ba06:	10db      	asrs	r3, r3, #3
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba0e:	4413      	add	r3, r2
 800ba10:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800ba14:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba18:	3318      	adds	r3, #24
 800ba1a:	b29b      	uxth	r3, r3
 800ba1c:	b21b      	sxth	r3, r3
 800ba1e:	425a      	negs	r2, r3
 800ba20:	f003 0307 	and.w	r3, r3, #7
 800ba24:	f002 0207 	and.w	r2, r2, #7
 800ba28:	bf58      	it	pl
 800ba2a:	4253      	negpl	r3, r2
 800ba2c:	b21b      	sxth	r3, r3
 800ba2e:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800ba32:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800ba36:	b2d8      	uxtb	r0, r3
 800ba38:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800ba3c:	f107 020c 	add.w	r2, r7, #12
 800ba40:	441a      	add	r2, r3
 800ba42:	2301      	movs	r3, #1
 800ba44:	2108      	movs	r1, #8
 800ba46:	f001 ff5b 	bl	800d900 <Extract_Parity_Data>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	b2da      	uxtb	r2, r3
 800ba4e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba52:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba56:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ba58:	4b9e      	ldr	r3, [pc, #632]	; (800bcd4 <Siemens_Data_Analyser+0x768>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	085b      	lsrs	r3, r3, #1
 800ba5e:	f003 0301 	and.w	r3, r3, #1
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d02a      	beq.n	800babc <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800ba66:	489c      	ldr	r0, [pc, #624]	; (800bcd8 <Siemens_Data_Analyser+0x76c>)
 800ba68:	f016 ff82 	bl	8022970 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800ba6c:	489b      	ldr	r0, [pc, #620]	; (800bcdc <Siemens_Data_Analyser+0x770>)
 800ba6e:	f00e fb8b 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800ba72:	4601      	mov	r1, r0
 800ba74:	4b9a      	ldr	r3, [pc, #616]	; (800bce0 <Siemens_Data_Analyser+0x774>)
 800ba76:	fba3 2301 	umull	r2, r3, r3, r1
 800ba7a:	09da      	lsrs	r2, r3, #7
 800ba7c:	4613      	mov	r3, r2
 800ba7e:	021b      	lsls	r3, r3, #8
 800ba80:	1a9b      	subs	r3, r3, r2
 800ba82:	1aca      	subs	r2, r1, r3
 800ba84:	b2d2      	uxtb	r2, r2
 800ba86:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba8a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba8e:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800ba90:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba94:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba98:	7b1a      	ldrb	r2, [r3, #12]
 800ba9a:	4b8a      	ldr	r3, [pc, #552]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800ba9c:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800baa0:	429a      	cmp	r2, r3
 800baa2:	d10b      	bne.n	800babc <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800baa4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800baa8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baac:	7b1b      	ldrb	r3, [r3, #12]
 800baae:	3304      	adds	r3, #4
 800bab0:	b2da      	uxtb	r2, r3
 800bab2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bab6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baba:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800babc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bac0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bac4:	7b1a      	ldrb	r2, [r3, #12]
 800bac6:	4b7f      	ldr	r3, [pc, #508]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800bac8:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800bacc:	429a      	cmp	r2, r3
 800bace:	d015      	beq.n	800bafc <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800bad0:	4884      	ldr	r0, [pc, #528]	; (800bce4 <Siemens_Data_Analyser+0x778>)
 800bad2:	f016 ff4d 	bl	8022970 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800bad6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bada:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bade:	7b1b      	ldrb	r3, [r3, #12]
 800bae0:	4619      	mov	r1, r3
 800bae2:	4881      	ldr	r0, [pc, #516]	; (800bce8 <Siemens_Data_Analyser+0x77c>)
 800bae4:	f016 fea8 	bl	8022838 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800bae8:	4b76      	ldr	r3, [pc, #472]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800baea:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800baee:	4619      	mov	r1, r3
 800baf0:	487e      	ldr	r0, [pc, #504]	; (800bcec <Siemens_Data_Analyser+0x780>)
 800baf2:	f016 fea1 	bl	8022838 <iprintf>
		RejectPacketFlag = 1;
 800baf6:	2301      	movs	r3, #1
 800baf8:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800bafc:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bb00:	3308      	adds	r3, #8
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	da00      	bge.n	800bb08 <Siemens_Data_Analyser+0x59c>
 800bb06:	3307      	adds	r3, #7
 800bb08:	10db      	asrs	r3, r3, #3
 800bb0a:	b29a      	uxth	r2, r3
 800bb0c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb10:	4413      	add	r3, r2
 800bb12:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bb16:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb1a:	3308      	adds	r3, #8
 800bb1c:	b29b      	uxth	r3, r3
 800bb1e:	b21b      	sxth	r3, r3
 800bb20:	425a      	negs	r2, r3
 800bb22:	f003 0307 	and.w	r3, r3, #7
 800bb26:	f002 0207 	and.w	r2, r2, #7
 800bb2a:	bf58      	it	pl
 800bb2c:	4253      	negpl	r3, r2
 800bb2e:	b21b      	sxth	r3, r3
 800bb30:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800bb34:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb38:	b2d8      	uxtb	r0, r3
 800bb3a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb3e:	f107 020c 	add.w	r2, r7, #12
 800bb42:	441a      	add	r2, r3
 800bb44:	2300      	movs	r3, #0
 800bb46:	2118      	movs	r1, #24
 800bb48:	f001 feda 	bl	800d900 <Extract_Parity_Data>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	461a      	mov	r2, r3
 800bb50:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb54:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb58:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800bb5a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb5e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb62:	691b      	ldr	r3, [r3, #16]
 800bb64:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb68:	d021      	beq.n	800bbae <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800bb6a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb6e:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800bb72:	4a5f      	ldr	r2, [pc, #380]	; (800bcf0 <Siemens_Data_Analyser+0x784>)
 800bb74:	8812      	ldrh	r2, [r2, #0]
 800bb76:	801a      	strh	r2, [r3, #0]
 800bb78:	2200      	movs	r2, #0
 800bb7a:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800bb7c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb80:	f107 020c 	add.w	r2, r7, #12
 800bb84:	4413      	add	r3, r2
 800bb86:	1d3a      	adds	r2, r7, #4
 800bb88:	2103      	movs	r1, #3
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 fc3c 	bl	800c408 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800bb90:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb94:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb98:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800bb9c:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800bba0:	3314      	adds	r3, #20
 800bba2:	6812      	ldr	r2, [r2, #0]
 800bba4:	4611      	mov	r1, r2
 800bba6:	8019      	strh	r1, [r3, #0]
 800bba8:	3302      	adds	r3, #2
 800bbaa:	0c12      	lsrs	r2, r2, #16
 800bbac:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bbae:	4b49      	ldr	r3, [pc, #292]	; (800bcd4 <Siemens_Data_Analyser+0x768>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	089b      	lsrs	r3, r3, #2
 800bbb4:	f003 0301 	and.w	r3, r3, #1
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	d02c      	beq.n	800bc16 <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800bbbc:	484d      	ldr	r0, [pc, #308]	; (800bcf4 <Siemens_Data_Analyser+0x788>)
 800bbbe:	f016 fed7 	bl	8022970 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800bbc2:	4846      	ldr	r0, [pc, #280]	; (800bcdc <Siemens_Data_Analyser+0x770>)
 800bbc4:	f00e fae0 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800bbc8:	4601      	mov	r1, r0
 800bbca:	f240 1301 	movw	r3, #257	; 0x101
 800bbce:	fba3 2301 	umull	r2, r3, r3, r1
 800bbd2:	1aca      	subs	r2, r1, r3
 800bbd4:	0852      	lsrs	r2, r2, #1
 800bbd6:	4413      	add	r3, r2
 800bbd8:	0dda      	lsrs	r2, r3, #23
 800bbda:	4613      	mov	r3, r2
 800bbdc:	061b      	lsls	r3, r3, #24
 800bbde:	1a9b      	subs	r3, r3, r2
 800bbe0:	1aca      	subs	r2, r1, r3
 800bbe2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbe6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbea:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800bbec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bbf0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bbf4:	695a      	ldr	r2, [r3, #20]
 800bbf6:	4b33      	ldr	r3, [pc, #204]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800bbf8:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bbfc:	429a      	cmp	r2, r3
 800bbfe:	d10a      	bne.n	800bc16 <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800bc00:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc04:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc08:	695b      	ldr	r3, [r3, #20]
 800bc0a:	1d1a      	adds	r2, r3, #4
 800bc0c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc10:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc14:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800bc16:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc1a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc1e:	695a      	ldr	r2, [r3, #20]
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800bc22:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc26:	429a      	cmp	r2, r3
 800bc28:	d015      	beq.n	800bc56 <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800bc2a:	4833      	ldr	r0, [pc, #204]	; (800bcf8 <Siemens_Data_Analyser+0x78c>)
 800bc2c:	f016 fea0 	bl	8022970 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800bc30:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc34:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	4823      	ldr	r0, [pc, #140]	; (800bccc <Siemens_Data_Analyser+0x760>)
 800bc3e:	f016 fdfb 	bl	8022838 <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800bc42:	4b20      	ldr	r3, [pc, #128]	; (800bcc4 <Siemens_Data_Analyser+0x758>)
 800bc44:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800bc48:	4619      	mov	r1, r3
 800bc4a:	4821      	ldr	r0, [pc, #132]	; (800bcd0 <Siemens_Data_Analyser+0x764>)
 800bc4c:	f016 fdf4 	bl	8022838 <iprintf>
		RejectPacketFlag = 1;
 800bc50:	2301      	movs	r3, #1
 800bc52:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800bc56:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bc5a:	3318      	adds	r3, #24
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	da00      	bge.n	800bc62 <Siemens_Data_Analyser+0x6f6>
 800bc60:	3307      	adds	r3, #7
 800bc62:	10db      	asrs	r3, r3, #3
 800bc64:	b29a      	uxth	r2, r3
 800bc66:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc6a:	4413      	add	r3, r2
 800bc6c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bc70:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc74:	3318      	adds	r3, #24
 800bc76:	b29b      	uxth	r3, r3
 800bc78:	b21b      	sxth	r3, r3
 800bc7a:	425a      	negs	r2, r3
 800bc7c:	f003 0307 	and.w	r3, r3, #7
 800bc80:	f002 0207 	and.w	r2, r2, #7
 800bc84:	bf58      	it	pl
 800bc86:	4253      	negpl	r3, r2
 800bc88:	b21b      	sxth	r3, r3
 800bc8a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800bc8e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc92:	b2d8      	uxtb	r0, r3
 800bc94:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc98:	f107 020c 	add.w	r2, r7, #12
 800bc9c:	441a      	add	r2, r3
 800bc9e:	2300      	movs	r3, #0
 800bca0:	2108      	movs	r1, #8
 800bca2:	f001 fe2d 	bl	800d900 <Extract_Parity_Data>
 800bca6:	4603      	mov	r3, r0
 800bca8:	b2da      	uxtb	r2, r3
 800bcaa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcae:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcb2:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800bcb4:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bcb8:	3308      	adds	r3, #8
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	da1e      	bge.n	800bcfc <Siemens_Data_Analyser+0x790>
 800bcbe:	3307      	adds	r3, #7
 800bcc0:	e01c      	b.n	800bcfc <Siemens_Data_Analyser+0x790>
 800bcc2:	bf00      	nop
 800bcc4:	20000304 	.word	0x20000304
 800bcc8:	080260ac 	.word	0x080260ac
 800bccc:	080260cc 	.word	0x080260cc
 800bcd0:	080260dc 	.word	0x080260dc
 800bcd4:	20003854 	.word	0x20003854
 800bcd8:	080260ec 	.word	0x080260ec
 800bcdc:	2000a05c 	.word	0x2000a05c
 800bce0:	80808081 	.word	0x80808081
 800bce4:	0802610c 	.word	0x0802610c
 800bce8:	0802608c 	.word	0x0802608c
 800bcec:	0802609c 	.word	0x0802609c
 800bcf0:	08026220 	.word	0x08026220
 800bcf4:	0802612c 	.word	0x0802612c
 800bcf8:	08026148 	.word	0x08026148
 800bcfc:	10db      	asrs	r3, r3, #3
 800bcfe:	b29a      	uxth	r2, r3
 800bd00:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd04:	4413      	add	r3, r2
 800bd06:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bd0a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd0e:	3308      	adds	r3, #8
 800bd10:	b29b      	uxth	r3, r3
 800bd12:	b21b      	sxth	r3, r3
 800bd14:	425a      	negs	r2, r3
 800bd16:	f003 0307 	and.w	r3, r3, #7
 800bd1a:	f002 0207 	and.w	r2, r2, #7
 800bd1e:	bf58      	it	pl
 800bd20:	4253      	negpl	r3, r2
 800bd22:	b21b      	sxth	r3, r3
 800bd24:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800bd28:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd2c:	b2d8      	uxtb	r0, r3
 800bd2e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd32:	f107 020c 	add.w	r2, r7, #12
 800bd36:	441a      	add	r2, r3
 800bd38:	2301      	movs	r3, #1
 800bd3a:	2108      	movs	r1, #8
 800bd3c:	f001 fde0 	bl	800d900 <Extract_Parity_Data>
 800bd40:	4603      	mov	r3, r0
 800bd42:	b2da      	uxtb	r2, r3
 800bd44:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd48:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd4c:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800bd4e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bd52:	3308      	adds	r3, #8
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	da00      	bge.n	800bd5a <Siemens_Data_Analyser+0x7ee>
 800bd58:	3307      	adds	r3, #7
 800bd5a:	10db      	asrs	r3, r3, #3
 800bd5c:	b29a      	uxth	r2, r3
 800bd5e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd62:	4413      	add	r3, r2
 800bd64:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bd68:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd6c:	3308      	adds	r3, #8
 800bd6e:	b29b      	uxth	r3, r3
 800bd70:	b21b      	sxth	r3, r3
 800bd72:	425a      	negs	r2, r3
 800bd74:	f003 0307 	and.w	r3, r3, #7
 800bd78:	f002 0207 	and.w	r2, r2, #7
 800bd7c:	bf58      	it	pl
 800bd7e:	4253      	negpl	r3, r2
 800bd80:	b21b      	sxth	r3, r3
 800bd82:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800bd86:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bd8a:	b2d8      	uxtb	r0, r3
 800bd8c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd90:	f107 020c 	add.w	r2, r7, #12
 800bd94:	441a      	add	r2, r3
 800bd96:	2302      	movs	r3, #2
 800bd98:	2108      	movs	r1, #8
 800bd9a:	f001 fdb1 	bl	800d900 <Extract_Parity_Data>
 800bd9e:	4603      	mov	r3, r0
 800bda0:	b2da      	uxtb	r2, r3
 800bda2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bda6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdaa:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800bdac:	4bab      	ldr	r3, [pc, #684]	; (800c05c <Siemens_Data_Analyser+0xaf0>)
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	08db      	lsrs	r3, r3, #3
 800bdb2:	f003 0301 	and.w	r3, r3, #1
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d02a      	beq.n	800be10 <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800bdba:	48a9      	ldr	r0, [pc, #676]	; (800c060 <Siemens_Data_Analyser+0xaf4>)
 800bdbc:	f016 fdd8 	bl	8022970 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bdc0:	48a8      	ldr	r0, [pc, #672]	; (800c064 <Siemens_Data_Analyser+0xaf8>)
 800bdc2:	f00e f9e1 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800bdc6:	4601      	mov	r1, r0
 800bdc8:	4ba7      	ldr	r3, [pc, #668]	; (800c068 <Siemens_Data_Analyser+0xafc>)
 800bdca:	fba3 2301 	umull	r2, r3, r3, r1
 800bdce:	09da      	lsrs	r2, r3, #7
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	021b      	lsls	r3, r3, #8
 800bdd4:	1a9b      	subs	r3, r3, r2
 800bdd6:	1aca      	subs	r2, r1, r3
 800bdd8:	b2d2      	uxtb	r2, r2
 800bdda:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdde:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bde2:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800bde4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bde8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdec:	7e9a      	ldrb	r2, [r3, #26]
 800bdee:	4b9f      	ldr	r3, [pc, #636]	; (800c06c <Siemens_Data_Analyser+0xb00>)
 800bdf0:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d10b      	bne.n	800be10 <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800bdf8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdfc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be00:	7e9b      	ldrb	r3, [r3, #26]
 800be02:	3304      	adds	r3, #4
 800be04:	b2da      	uxtb	r2, r3
 800be06:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be0a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be0e:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800be10:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be14:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be18:	7e9a      	ldrb	r2, [r3, #26]
 800be1a:	4b94      	ldr	r3, [pc, #592]	; (800c06c <Siemens_Data_Analyser+0xb00>)
 800be1c:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800be20:	429a      	cmp	r2, r3
 800be22:	d015      	beq.n	800be50 <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800be24:	4892      	ldr	r0, [pc, #584]	; (800c070 <Siemens_Data_Analyser+0xb04>)
 800be26:	f016 fda3 	bl	8022970 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800be2a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800be2e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800be32:	7e9b      	ldrb	r3, [r3, #26]
 800be34:	4619      	mov	r1, r3
 800be36:	488f      	ldr	r0, [pc, #572]	; (800c074 <Siemens_Data_Analyser+0xb08>)
 800be38:	f016 fcfe 	bl	8022838 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800be3c:	4b8b      	ldr	r3, [pc, #556]	; (800c06c <Siemens_Data_Analyser+0xb00>)
 800be3e:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800be42:	4619      	mov	r1, r3
 800be44:	488c      	ldr	r0, [pc, #560]	; (800c078 <Siemens_Data_Analyser+0xb0c>)
 800be46:	f016 fcf7 	bl	8022838 <iprintf>
		RejectPacketFlag = 1;
 800be4a:	2301      	movs	r3, #1
 800be4c:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800be50:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800be54:	3308      	adds	r3, #8
 800be56:	2b00      	cmp	r3, #0
 800be58:	da00      	bge.n	800be5c <Siemens_Data_Analyser+0x8f0>
 800be5a:	3307      	adds	r3, #7
 800be5c:	10db      	asrs	r3, r3, #3
 800be5e:	b29a      	uxth	r2, r3
 800be60:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be64:	4413      	add	r3, r2
 800be66:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800be6a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be6e:	3308      	adds	r3, #8
 800be70:	b29b      	uxth	r3, r3
 800be72:	b21b      	sxth	r3, r3
 800be74:	425a      	negs	r2, r3
 800be76:	f003 0307 	and.w	r3, r3, #7
 800be7a:	f002 0207 	and.w	r2, r2, #7
 800be7e:	bf58      	it	pl
 800be80:	4253      	negpl	r3, r2
 800be82:	b21b      	sxth	r3, r3
 800be84:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800be88:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800be8c:	b2d8      	uxtb	r0, r3
 800be8e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800be92:	f107 020c 	add.w	r2, r7, #12
 800be96:	441a      	add	r2, r3
 800be98:	2302      	movs	r3, #2
 800be9a:	2108      	movs	r1, #8
 800be9c:	f001 fd30 	bl	800d900 <Extract_Parity_Data>
 800bea0:	4603      	mov	r3, r0
 800bea2:	b2da      	uxtb	r2, r3
 800bea4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bea8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beac:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800beae:	4b6b      	ldr	r3, [pc, #428]	; (800c05c <Siemens_Data_Analyser+0xaf0>)
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	091b      	lsrs	r3, r3, #4
 800beb4:	f003 0301 	and.w	r3, r3, #1
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d02a      	beq.n	800bf12 <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800bebc:	486f      	ldr	r0, [pc, #444]	; (800c07c <Siemens_Data_Analyser+0xb10>)
 800bebe:	f016 fd57 	bl	8022970 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800bec2:	4868      	ldr	r0, [pc, #416]	; (800c064 <Siemens_Data_Analyser+0xaf8>)
 800bec4:	f00e f960 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800bec8:	4601      	mov	r1, r0
 800beca:	4b67      	ldr	r3, [pc, #412]	; (800c068 <Siemens_Data_Analyser+0xafc>)
 800becc:	fba3 2301 	umull	r2, r3, r3, r1
 800bed0:	09da      	lsrs	r2, r3, #7
 800bed2:	4613      	mov	r3, r2
 800bed4:	021b      	lsls	r3, r3, #8
 800bed6:	1a9b      	subs	r3, r3, r2
 800bed8:	1aca      	subs	r2, r1, r3
 800beda:	b2d2      	uxtb	r2, r2
 800bedc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bee0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bee4:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800bee6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800beea:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800beee:	7eda      	ldrb	r2, [r3, #27]
 800bef0:	4b5e      	ldr	r3, [pc, #376]	; (800c06c <Siemens_Data_Analyser+0xb00>)
 800bef2:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bef6:	429a      	cmp	r2, r3
 800bef8:	d10b      	bne.n	800bf12 <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800befa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800befe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf02:	7edb      	ldrb	r3, [r3, #27]
 800bf04:	3304      	adds	r3, #4
 800bf06:	b2da      	uxtb	r2, r3
 800bf08:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf0c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf10:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800bf12:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf16:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf1a:	7eda      	ldrb	r2, [r3, #27]
 800bf1c:	4b53      	ldr	r3, [pc, #332]	; (800c06c <Siemens_Data_Analyser+0xb00>)
 800bf1e:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bf22:	429a      	cmp	r2, r3
 800bf24:	d015      	beq.n	800bf52 <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800bf26:	4856      	ldr	r0, [pc, #344]	; (800c080 <Siemens_Data_Analyser+0xb14>)
 800bf28:	f016 fd22 	bl	8022970 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800bf2c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bf30:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bf34:	7edb      	ldrb	r3, [r3, #27]
 800bf36:	4619      	mov	r1, r3
 800bf38:	484e      	ldr	r0, [pc, #312]	; (800c074 <Siemens_Data_Analyser+0xb08>)
 800bf3a:	f016 fc7d 	bl	8022838 <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800bf3e:	4b4b      	ldr	r3, [pc, #300]	; (800c06c <Siemens_Data_Analyser+0xb00>)
 800bf40:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bf44:	4619      	mov	r1, r3
 800bf46:	484c      	ldr	r0, [pc, #304]	; (800c078 <Siemens_Data_Analyser+0xb0c>)
 800bf48:	f016 fc76 	bl	8022838 <iprintf>
		RejectPacketFlag = 1;
 800bf4c:	2301      	movs	r3, #1
 800bf4e:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800bf52:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bf56:	3308      	adds	r3, #8
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	da00      	bge.n	800bf5e <Siemens_Data_Analyser+0x9f2>
 800bf5c:	3307      	adds	r3, #7
 800bf5e:	10db      	asrs	r3, r3, #3
 800bf60:	b29a      	uxth	r2, r3
 800bf62:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf66:	4413      	add	r3, r2
 800bf68:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bf6c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf70:	3308      	adds	r3, #8
 800bf72:	b29b      	uxth	r3, r3
 800bf74:	b21b      	sxth	r3, r3
 800bf76:	425a      	negs	r2, r3
 800bf78:	f003 0307 	and.w	r3, r3, #7
 800bf7c:	f002 0207 	and.w	r2, r2, #7
 800bf80:	bf58      	it	pl
 800bf82:	4253      	negpl	r3, r2
 800bf84:	b21b      	sxth	r3, r3
 800bf86:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bf8a:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bf8e:	b2d8      	uxtb	r0, r3
 800bf90:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bf94:	f107 020c 	add.w	r2, r7, #12
 800bf98:	441a      	add	r2, r3
 800bf9a:	2302      	movs	r3, #2
 800bf9c:	2120      	movs	r1, #32
 800bf9e:	f001 fcaf 	bl	800d900 <Extract_Parity_Data>
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bfaa:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bfae:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800bfb0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bfb4:	3320      	adds	r3, #32
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	da00      	bge.n	800bfbc <Siemens_Data_Analyser+0xa50>
 800bfba:	3307      	adds	r3, #7
 800bfbc:	10db      	asrs	r3, r3, #3
 800bfbe:	b29a      	uxth	r2, r3
 800bfc0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bfc4:	4413      	add	r3, r2
 800bfc6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bfca:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bfce:	3320      	adds	r3, #32
 800bfd0:	b29b      	uxth	r3, r3
 800bfd2:	b21b      	sxth	r3, r3
 800bfd4:	425a      	negs	r2, r3
 800bfd6:	f003 0307 	and.w	r3, r3, #7
 800bfda:	f002 0207 	and.w	r2, r2, #7
 800bfde:	bf58      	it	pl
 800bfe0:	4253      	negpl	r3, r2
 800bfe2:	b21b      	sxth	r3, r3
 800bfe4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bfe8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bfec:	b2d8      	uxtb	r0, r3
 800bfee:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bff2:	f107 020c 	add.w	r2, r7, #12
 800bff6:	441a      	add	r2, r3
 800bff8:	2302      	movs	r3, #2
 800bffa:	2120      	movs	r1, #32
 800bffc:	f001 fc80 	bl	800d900 <Extract_Parity_Data>
 800c000:	4603      	mov	r3, r0
 800c002:	461a      	mov	r2, r3
 800c004:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c008:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c00c:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800c00e:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c012:	3320      	adds	r3, #32
 800c014:	2b00      	cmp	r3, #0
 800c016:	da00      	bge.n	800c01a <Siemens_Data_Analyser+0xaae>
 800c018:	3307      	adds	r3, #7
 800c01a:	10db      	asrs	r3, r3, #3
 800c01c:	b29a      	uxth	r2, r3
 800c01e:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c022:	4413      	add	r3, r2
 800c024:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c028:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c02c:	3320      	adds	r3, #32
 800c02e:	b29b      	uxth	r3, r3
 800c030:	b21b      	sxth	r3, r3
 800c032:	425a      	negs	r2, r3
 800c034:	f003 0307 	and.w	r3, r3, #7
 800c038:	f002 0207 	and.w	r2, r2, #7
 800c03c:	bf58      	it	pl
 800c03e:	4253      	negpl	r3, r2
 800c040:	b21b      	sxth	r3, r3
 800c042:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800c04c:	200a      	movs	r0, #10
 800c04e:	f016 fc0b 	bl	8022868 <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c052:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c056:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c05a:	e052      	b.n	800c102 <Siemens_Data_Analyser+0xb96>
 800c05c:	20003854 	.word	0x20003854
 800c060:	08026164 	.word	0x08026164
 800c064:	2000a05c 	.word	0x2000a05c
 800c068:	80808081 	.word	0x80808081
 800c06c:	20000304 	.word	0x20000304
 800c070:	08026180 	.word	0x08026180
 800c074:	0802608c 	.word	0x0802608c
 800c078:	0802609c 	.word	0x0802609c
 800c07c:	080261a0 	.word	0x080261a0
 800c080:	080261bc 	.word	0x080261bc
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800c084:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c088:	b2d8      	uxtb	r0, r3
 800c08a:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c08e:	f107 020c 	add.w	r2, r7, #12
 800c092:	441a      	add	r2, r3
 800c094:	2300      	movs	r3, #0
 800c096:	2108      	movs	r1, #8
 800c098:	f001 fc32 	bl	800d900 <Extract_Parity_Data>
 800c09c:	4601      	mov	r1, r0
 800c09e:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800c0a2:	1c5a      	adds	r2, r3, #1
 800c0a4:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800c0a8:	461a      	mov	r2, r3
 800c0aa:	b2c9      	uxtb	r1, r1
 800c0ac:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c0b0:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800c0b4:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800c0b6:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800c0ba:	3301      	adds	r3, #1
 800c0bc:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800c0c0:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800c0c4:	3308      	adds	r3, #8
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	da00      	bge.n	800c0cc <Siemens_Data_Analyser+0xb60>
 800c0ca:	3307      	adds	r3, #7
 800c0cc:	10db      	asrs	r3, r3, #3
 800c0ce:	b29a      	uxth	r2, r3
 800c0d0:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c0d4:	4413      	add	r3, r2
 800c0d6:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800c0da:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800c0de:	3308      	adds	r3, #8
 800c0e0:	b29b      	uxth	r3, r3
 800c0e2:	b21b      	sxth	r3, r3
 800c0e4:	425a      	negs	r2, r3
 800c0e6:	f003 0307 	and.w	r3, r3, #7
 800c0ea:	f002 0207 	and.w	r2, r2, #7
 800c0ee:	bf58      	it	pl
 800c0f0:	4253      	negpl	r3, r2
 800c0f2:	b21b      	sxth	r3, r3
 800c0f4:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800c0f8:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c0fc:	3301      	adds	r3, #1
 800c0fe:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800c102:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800c106:	b29b      	uxth	r3, r3
 800c108:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d8b9      	bhi.n	800c084 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800c110:	200a      	movs	r0, #10
 800c112:	f016 fba9 	bl	8022868 <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800c116:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c11a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800c11e:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800c122:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800c126:	4618      	mov	r0, r3
 800c128:	f000 f96e 	bl	800c408 <ExtractAppData>
 800c12c:	4603      	mov	r3, r0
 800c12e:	461a      	mov	r2, r3
 800c130:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c134:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c138:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800c13a:	4ba0      	ldr	r3, [pc, #640]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c13c:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c140:	f003 0307 	and.w	r3, r3, #7
 800c144:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800c148:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d008      	beq.n	800c162 <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c150:	4b9a      	ldr	r3, [pc, #616]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c152:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c156:	08db      	lsrs	r3, r3, #3
 800c158:	b29b      	uxth	r3, r3
 800c15a:	3301      	adds	r3, #1
 800c15c:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800c160:	e005      	b.n	800c16e <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800c162:	4b96      	ldr	r3, [pc, #600]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c164:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c168:	08db      	lsrs	r3, r3, #3
 800c16a:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800c16e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c172:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c176:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c178:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800c17c:	429a      	cmp	r2, r3
 800c17e:	d02c      	beq.n	800c1da <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800c180:	488f      	ldr	r0, [pc, #572]	; (800c3c0 <Siemens_Data_Analyser+0xe54>)
 800c182:	f016 fbf5 	bl	8022970 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800c186:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c18a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c18e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c190:	4619      	mov	r1, r3
 800c192:	488c      	ldr	r0, [pc, #560]	; (800c3c4 <Siemens_Data_Analyser+0xe58>)
 800c194:	f016 fb50 	bl	8022838 <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800c198:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800c19c:	4619      	mov	r1, r3
 800c19e:	488a      	ldr	r0, [pc, #552]	; (800c3c8 <Siemens_Data_Analyser+0xe5c>)
 800c1a0:	f016 fb4a 	bl	8022838 <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800c1a4:	4989      	ldr	r1, [pc, #548]	; (800c3cc <Siemens_Data_Analyser+0xe60>)
 800c1a6:	488a      	ldr	r0, [pc, #552]	; (800c3d0 <Siemens_Data_Analyser+0xe64>)
 800c1a8:	f7f4 f84a 	bl	8000240 <strcmp>
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d002      	beq.n	800c1b8 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800c1b2:	2301      	movs	r3, #1
 800c1b4:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800c1b8:	4984      	ldr	r1, [pc, #528]	; (800c3cc <Siemens_Data_Analyser+0xe60>)
 800c1ba:	4885      	ldr	r0, [pc, #532]	; (800c3d0 <Siemens_Data_Analyser+0xe64>)
 800c1bc:	f7f4 f840 	bl	8000240 <strcmp>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d109      	bne.n	800c1da <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800c1c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c1ca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c1ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c1d0:	00db      	lsls	r3, r3, #3
 800c1d2:	b29a      	uxth	r2, r3
 800c1d4:	4b79      	ldr	r3, [pc, #484]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c1d6:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800c1da:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	f000 80e6 	beq.w	800c3b0 <Siemens_Data_Analyser+0xe44>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800c1e4:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800c1e8:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800c1ec:	3326      	adds	r3, #38	; 0x26
 800c1ee:	4619      	mov	r1, r3
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f006 fe81 	bl	8012ef8 <GetCRC16>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800c1fc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800c200:	f107 020c 	add.w	r2, r7, #12
 800c204:	4413      	add	r3, r2
 800c206:	461a      	mov	r2, r3
 800c208:	2110      	movs	r1, #16
 800c20a:	2000      	movs	r0, #0
 800c20c:	f7f4 fa02 	bl	8000614 <ExtractBits>
 800c210:	4603      	mov	r3, r0
 800c212:	b29a      	uxth	r2, r3
 800c214:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c218:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c21c:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800c220:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c224:	2100      	movs	r1, #0
 800c226:	486b      	ldr	r0, [pc, #428]	; (800c3d4 <Siemens_Data_Analyser+0xe68>)
 800c228:	f016 fa1e 	bl	8022668 <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800c22c:	4a69      	ldr	r2, [pc, #420]	; (800c3d4 <Siemens_Data_Analyser+0xe68>)
 800c22e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c232:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c236:	4610      	mov	r0, r2
 800c238:	4619      	mov	r1, r3
 800c23a:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c23e:	461a      	mov	r2, r3
 800c240:	f016 f9ea 	bl	8022618 <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800c244:	f000 f936 	bl	800c4b4 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c248:	4b63      	ldr	r3, [pc, #396]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c24a:	881b      	ldrh	r3, [r3, #0]
 800c24c:	461a      	mov	r2, r3
 800c24e:	4b5b      	ldr	r3, [pc, #364]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c250:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c254:	1ad3      	subs	r3, r2, r3
 800c256:	2b00      	cmp	r3, #0
 800c258:	bfb8      	it	lt
 800c25a:	425b      	neglt	r3, r3
 800c25c:	461a      	mov	r2, r3
 800c25e:	4b57      	ldr	r3, [pc, #348]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c260:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c264:	429a      	cmp	r2, r3
 800c266:	d871      	bhi.n	800c34c <Siemens_Data_Analyser+0xde0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800c268:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c26c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c270:	69da      	ldr	r2, [r3, #28]
 800c272:	4b5a      	ldr	r3, [pc, #360]	; (800c3dc <Siemens_Data_Analyser+0xe70>)
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	429a      	cmp	r2, r3
 800c278:	d04c      	beq.n	800c314 <Siemens_Data_Analyser+0xda8>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800c27a:	f009 fad3 	bl	8015824 <HAL_GetTick>
 800c27e:	4603      	mov	r3, r0
 800c280:	4a57      	ldr	r2, [pc, #348]	; (800c3e0 <Siemens_Data_Analyser+0xe74>)
 800c282:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800c284:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800c288:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800c28c:	69db      	ldr	r3, [r3, #28]
 800c28e:	4a53      	ldr	r2, [pc, #332]	; (800c3dc <Siemens_Data_Analyser+0xe70>)
 800c290:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800c292:	4b51      	ldr	r3, [pc, #324]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c294:	2200      	movs	r2, #0
 800c296:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800c298:	4b52      	ldr	r3, [pc, #328]	; (800c3e4 <Siemens_Data_Analyser+0xe78>)
 800c29a:	885b      	ldrh	r3, [r3, #2]
 800c29c:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d053      	beq.n	800c34c <Siemens_Data_Analyser+0xde0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800c2a4:	f44f 7201 	mov.w	r2, #516	; 0x204
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	484e      	ldr	r0, [pc, #312]	; (800c3e4 <Siemens_Data_Analyser+0xe78>)
 800c2ac:	f016 f9dc 	bl	8022668 <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800c2b0:	f240 2202 	movw	r2, #514	; 0x202
 800c2b4:	2100      	movs	r1, #0
 800c2b6:	484c      	ldr	r0, [pc, #304]	; (800c3e8 <Siemens_Data_Analyser+0xe7c>)
 800c2b8:	f016 f9d6 	bl	8022668 <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800c2bc:	4a49      	ldr	r2, [pc, #292]	; (800c3e4 <Siemens_Data_Analyser+0xe78>)
 800c2be:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800c2c2:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c2c4:	4b43      	ldr	r3, [pc, #268]	; (800c3d4 <Siemens_Data_Analyser+0xe68>)
 800c2c6:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c2c8:	4b46      	ldr	r3, [pc, #280]	; (800c3e4 <Siemens_Data_Analyser+0xe78>)
 800c2ca:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c2cc:	4b41      	ldr	r3, [pc, #260]	; (800c3d4 <Siemens_Data_Analyser+0xe68>)
 800c2ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2d0:	461a      	mov	r2, r3
 800c2d2:	4946      	ldr	r1, [pc, #280]	; (800c3ec <Siemens_Data_Analyser+0xe80>)
 800c2d4:	4846      	ldr	r0, [pc, #280]	; (800c3f0 <Siemens_Data_Analyser+0xe84>)
 800c2d6:	f016 f99f 	bl	8022618 <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800c2da:	4b3e      	ldr	r3, [pc, #248]	; (800c3d4 <Siemens_Data_Analyser+0xe68>)
 800c2dc:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800c2de:	4b42      	ldr	r3, [pc, #264]	; (800c3e8 <Siemens_Data_Analyser+0xe7c>)
 800c2e0:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800c2e2:	4b3c      	ldr	r3, [pc, #240]	; (800c3d4 <Siemens_Data_Analyser+0xe68>)
 800c2e4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800c2e6:	461a      	mov	r2, r3
 800c2e8:	4940      	ldr	r1, [pc, #256]	; (800c3ec <Siemens_Data_Analyser+0xe80>)
 800c2ea:	4842      	ldr	r0, [pc, #264]	; (800c3f4 <Siemens_Data_Analyser+0xe88>)
 800c2ec:	f016 f994 	bl	8022618 <memcpy>

				if(SiemensClocks_st.MisMatchFlag == CLEAR)
 800c2f0:	4b3b      	ldr	r3, [pc, #236]	; (800c3e0 <Siemens_Data_Analyser+0xe74>)
 800c2f2:	781b      	ldrb	r3, [r3, #0]
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d103      	bne.n	800c300 <Siemens_Data_Analyser+0xd94>
				{
#ifdef EI_1
					TransmitCanPkt(EI_PROCESS_DATA);
 800c2f8:	f240 1019 	movw	r0, #281	; 0x119
 800c2fc:	f003 fab8 	bl	800f870 <TransmitCanPkt>
#endif
				}

#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800c300:	f240 2007 	movw	r0, #519	; 0x207
 800c304:	f003 fab4 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c308:	f009 fa8c 	bl	8015824 <HAL_GetTick>
 800c30c:	4603      	mov	r3, r0
 800c30e:	4a34      	ldr	r2, [pc, #208]	; (800c3e0 <Siemens_Data_Analyser+0xe74>)
 800c310:	6113      	str	r3, [r2, #16]
 800c312:	e01b      	b.n	800c34c <Siemens_Data_Analyser+0xde0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800c314:	4b30      	ldr	r3, [pc, #192]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c316:	881b      	ldrh	r3, [r3, #0]
 800c318:	3301      	adds	r3, #1
 800c31a:	b29a      	uxth	r2, r3
 800c31c:	4b2e      	ldr	r3, [pc, #184]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c31e:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800c320:	4b2d      	ldr	r3, [pc, #180]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c322:	881b      	ldrh	r3, [r3, #0]
 800c324:	461a      	mov	r2, r3
 800c326:	4b25      	ldr	r3, [pc, #148]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c328:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c32c:	429a      	cmp	r2, r3
 800c32e:	d90d      	bls.n	800c34c <Siemens_Data_Analyser+0xde0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800c330:	4b29      	ldr	r3, [pc, #164]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c332:	881b      	ldrh	r3, [r3, #0]
 800c334:	4619      	mov	r1, r3
 800c336:	4830      	ldr	r0, [pc, #192]	; (800c3f8 <Siemens_Data_Analyser+0xe8c>)
 800c338:	f016 fa7e 	bl	8022838 <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800c33c:	4b1f      	ldr	r3, [pc, #124]	; (800c3bc <Siemens_Data_Analyser+0xe50>)
 800c33e:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c342:	b29b      	uxth	r3, r3
 800c344:	3301      	adds	r3, #1
 800c346:	b29a      	uxth	r2, r3
 800c348:	4b23      	ldr	r3, [pc, #140]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c34a:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800c34c:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800c350:	f107 010c 	add.w	r1, r7, #12
 800c354:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800c358:	2302      	movs	r3, #2
 800c35a:	f000 fe43 	bl	800cfe4 <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800c35e:	4b27      	ldr	r3, [pc, #156]	; (800c3fc <Siemens_Data_Analyser+0xe90>)
 800c360:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800c364:	2b00      	cmp	r3, #0
 800c366:	d00d      	beq.n	800c384 <Siemens_Data_Analyser+0xe18>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800c368:	4b24      	ldr	r3, [pc, #144]	; (800c3fc <Siemens_Data_Analyser+0xe90>)
 800c36a:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800c36e:	2301      	movs	r3, #1
 800c370:	4922      	ldr	r1, [pc, #136]	; (800c3fc <Siemens_Data_Analyser+0xe90>)
 800c372:	4823      	ldr	r0, [pc, #140]	; (800c400 <Siemens_Data_Analyser+0xe94>)
 800c374:	f000 fe36 	bl	800cfe4 <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800c378:	f240 6202 	movw	r2, #1538	; 0x602
 800c37c:	2100      	movs	r1, #0
 800c37e:	481f      	ldr	r0, [pc, #124]	; (800c3fc <Siemens_Data_Analyser+0xe90>)
 800c380:	f016 f972 	bl	8022668 <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800c384:	4b14      	ldr	r3, [pc, #80]	; (800c3d8 <Siemens_Data_Analyser+0xe6c>)
 800c386:	881a      	ldrh	r2, [r3, #0]
 800c388:	4b1e      	ldr	r3, [pc, #120]	; (800c404 <Siemens_Data_Analyser+0xe98>)
 800c38a:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800c38c:	4b1d      	ldr	r3, [pc, #116]	; (800c404 <Siemens_Data_Analyser+0xe98>)
 800c38e:	2201      	movs	r2, #1
 800c390:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800c392:	4b1c      	ldr	r3, [pc, #112]	; (800c404 <Siemens_Data_Analyser+0xe98>)
 800c394:	2201      	movs	r2, #1
 800c396:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
 800c398:	f240 2001 	movw	r0, #513	; 0x201
 800c39c:	f003 fa68 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c3a0:	f009 fa40 	bl	8015824 <HAL_GetTick>
 800c3a4:	4603      	mov	r3, r0
 800c3a6:	4a0e      	ldr	r2, [pc, #56]	; (800c3e0 <Siemens_Data_Analyser+0xe74>)
 800c3a8:	6093      	str	r3, [r2, #8]

	return;
 800c3aa:	e002      	b.n	800c3b2 <Siemens_Data_Analyser+0xe46>
		return;
 800c3ac:	bf00      	nop
 800c3ae:	e000      	b.n	800c3b2 <Siemens_Data_Analyser+0xe46>
		return;
 800c3b0:	bf00      	nop
}
 800c3b2:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	bd80      	pop	{r7, pc}
 800c3ba:	bf00      	nop
 800c3bc:	20000304 	.word	0x20000304
 800c3c0:	080261d4 	.word	0x080261d4
 800c3c4:	0802608c 	.word	0x0802608c
 800c3c8:	0802609c 	.word	0x0802609c
 800c3cc:	080261f4 	.word	0x080261f4
 800c3d0:	20000305 	.word	0x20000305
 800c3d4:	20002bd8 	.word	0x20002bd8
 800c3d8:	20004098 	.word	0x20004098
 800c3dc:	20004094 	.word	0x20004094
 800c3e0:	20003868 	.word	0x20003868
 800c3e4:	20003a88 	.word	0x20003a88
 800c3e8:	20003884 	.word	0x20003884
 800c3ec:	20002bfe 	.word	0x20002bfe
 800c3f0:	20003a8c 	.word	0x20003a8c
 800c3f4:	20003886 	.word	0x20003886
 800c3f8:	08026200 	.word	0x08026200
 800c3fc:	20003250 	.word	0x20003250
 800c400:	20003028 	.word	0x20003028
 800c404:	2000385c 	.word	0x2000385c

0800c408 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800c408:	b480      	push	{r7}
 800c40a:	b089      	sub	sp, #36	; 0x24
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	60f8      	str	r0, [r7, #12]
 800c410:	460b      	mov	r3, r1
 800c412:	607a      	str	r2, [r7, #4]
 800c414:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800c416:	2300      	movs	r3, #0
 800c418:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800c41a:	2300      	movs	r3, #0
 800c41c:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800c41e:	897b      	ldrh	r3, [r7, #10]
 800c420:	00db      	lsls	r3, r3, #3
 800c422:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c424:	2300      	movs	r3, #0
 800c426:	837b      	strh	r3, [r7, #26]
 800c428:	e039      	b.n	800c49e <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800c42a:	8b7b      	ldrh	r3, [r7, #26]
 800c42c:	08db      	lsrs	r3, r3, #3
 800c42e:	b29b      	uxth	r3, r3
 800c430:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800c432:	8b7b      	ldrh	r3, [r7, #26]
 800c434:	f003 0307 	and.w	r3, r3, #7
 800c438:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800c43a:	693b      	ldr	r3, [r7, #16]
 800c43c:	2b07      	cmp	r3, #7
 800c43e:	d02a      	beq.n	800c496 <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800c440:	697b      	ldr	r3, [r7, #20]
 800c442:	68fa      	ldr	r2, [r7, #12]
 800c444:	4413      	add	r3, r2
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	461a      	mov	r2, r3
 800c44a:	8b7b      	ldrh	r3, [r7, #26]
 800c44c:	f003 0307 	and.w	r3, r3, #7
 800c450:	fa42 f303 	asr.w	r3, r2, r3
 800c454:	f003 0301 	and.w	r3, r3, #1
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d010      	beq.n	800c47e <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800c45c:	8bfb      	ldrh	r3, [r7, #30]
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	4413      	add	r3, r2
 800c462:	781b      	ldrb	r3, [r3, #0]
 800c464:	b25a      	sxtb	r2, r3
 800c466:	7f7b      	ldrb	r3, [r7, #29]
 800c468:	2101      	movs	r1, #1
 800c46a:	fa01 f303 	lsl.w	r3, r1, r3
 800c46e:	b25b      	sxtb	r3, r3
 800c470:	4313      	orrs	r3, r2
 800c472:	b259      	sxtb	r1, r3
 800c474:	8bfb      	ldrh	r3, [r7, #30]
 800c476:	687a      	ldr	r2, [r7, #4]
 800c478:	4413      	add	r3, r2
 800c47a:	b2ca      	uxtb	r2, r1
 800c47c:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800c47e:	7f7b      	ldrb	r3, [r7, #29]
 800c480:	3301      	adds	r3, #1
 800c482:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800c484:	7f7b      	ldrb	r3, [r7, #29]
 800c486:	2b08      	cmp	r3, #8
 800c488:	d106      	bne.n	800c498 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800c48a:	2300      	movs	r3, #0
 800c48c:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800c48e:	8bfb      	ldrh	r3, [r7, #30]
 800c490:	3301      	adds	r3, #1
 800c492:	83fb      	strh	r3, [r7, #30]
 800c494:	e000      	b.n	800c498 <ExtractAppData+0x90>
			continue;
 800c496:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800c498:	8b7b      	ldrh	r3, [r7, #26]
 800c49a:	3301      	adds	r3, #1
 800c49c:	837b      	strh	r3, [r7, #26]
 800c49e:	8b7a      	ldrh	r2, [r7, #26]
 800c4a0:	8b3b      	ldrh	r3, [r7, #24]
 800c4a2:	429a      	cmp	r2, r3
 800c4a4:	d3c1      	bcc.n	800c42a <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c4a6:	8bfb      	ldrh	r3, [r7, #30]
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3724      	adds	r7, #36	; 0x24
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b2:	4770      	bx	lr

0800c4b4 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c4b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4b8:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c4bc:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c4be:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c4c2:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c4c6:	2300      	movs	r3, #0
 800c4c8:	6013      	str	r3, [r2, #0]
 800c4ca:	1d10      	adds	r0, r2, #4
 800c4cc:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c4d0:	461a      	mov	r2, r3
 800c4d2:	2100      	movs	r1, #0
 800c4d4:	f016 f8c8 	bl	8022668 <memset>
	uint16_t App_data_Traverser = 0;
 800c4d8:	2300      	movs	r3, #0
 800c4da:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c4de:	2300      	movs	r3, #0
 800c4e0:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c4e4:	2300      	movs	r3, #0
 800c4e6:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c4fc:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c500:	2100      	movs	r1, #0
 800c502:	48ba      	ldr	r0, [pc, #744]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c504:	f016 f8b0 	bl	8022668 <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c508:	4bb9      	ldr	r3, [pc, #740]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c50a:	7b1b      	ldrb	r3, [r3, #12]
 800c50c:	4ab7      	ldr	r2, [pc, #732]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c50e:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c510:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c514:	b2d8      	uxtb	r0, r3
 800c516:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c51a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c51e:	1899      	adds	r1, r3, r2
 800c520:	4bb2      	ldr	r3, [pc, #712]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c522:	781b      	ldrb	r3, [r3, #0]
 800c524:	b2db      	uxtb	r3, r3
 800c526:	2200      	movs	r2, #0
 800c528:	461c      	mov	r4, r3
 800c52a:	4615      	mov	r5, r2
 800c52c:	2301      	movs	r3, #1
 800c52e:	9302      	str	r3, [sp, #8]
 800c530:	e9cd 4500 	strd	r4, r5, [sp]
 800c534:	460a      	mov	r2, r1
 800c536:	2108      	movs	r1, #8
 800c538:	f001 fb24 	bl	800db84 <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c53c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c540:	3308      	adds	r3, #8
 800c542:	2b00      	cmp	r3, #0
 800c544:	da00      	bge.n	800c548 <Form_Siemens_Reply+0x94>
 800c546:	3307      	adds	r3, #7
 800c548:	10db      	asrs	r3, r3, #3
 800c54a:	b29a      	uxth	r2, r3
 800c54c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c550:	4413      	add	r3, r2
 800c552:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c556:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c55a:	3308      	adds	r3, #8
 800c55c:	b29b      	uxth	r3, r3
 800c55e:	b21b      	sxth	r3, r3
 800c560:	425a      	negs	r2, r3
 800c562:	f003 0107 	and.w	r1, r3, #7
 800c566:	f002 0307 	and.w	r3, r2, #7
 800c56a:	bf58      	it	pl
 800c56c:	4259      	negpl	r1, r3
 800c56e:	b20b      	sxth	r3, r1
 800c570:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c574:	4b9e      	ldr	r3, [pc, #632]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c576:	691a      	ldr	r2, [r3, #16]
 800c578:	4b9c      	ldr	r3, [pc, #624]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c57a:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c57c:	4b9c      	ldr	r3, [pc, #624]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c57e:	695a      	ldr	r2, [r3, #20]
 800c580:	4b9a      	ldr	r3, [pc, #616]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c582:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c584:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c588:	b2d8      	uxtb	r0, r3
 800c58a:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c58e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c592:	1899      	adds	r1, r3, r2
 800c594:	4b95      	ldr	r3, [pc, #596]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c596:	685b      	ldr	r3, [r3, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	4698      	mov	r8, r3
 800c59c:	4691      	mov	r9, r2
 800c59e:	2300      	movs	r3, #0
 800c5a0:	9302      	str	r3, [sp, #8]
 800c5a2:	e9cd 8900 	strd	r8, r9, [sp]
 800c5a6:	460a      	mov	r2, r1
 800c5a8:	2118      	movs	r1, #24
 800c5aa:	f001 faeb 	bl	800db84 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c5ae:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c5b2:	3318      	adds	r3, #24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	da00      	bge.n	800c5ba <Form_Siemens_Reply+0x106>
 800c5b8:	3307      	adds	r3, #7
 800c5ba:	10db      	asrs	r3, r3, #3
 800c5bc:	b29a      	uxth	r2, r3
 800c5be:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c5c2:	4413      	add	r3, r2
 800c5c4:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c5c8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c5cc:	3318      	adds	r3, #24
 800c5ce:	b29b      	uxth	r3, r3
 800c5d0:	b21b      	sxth	r3, r3
 800c5d2:	425a      	negs	r2, r3
 800c5d4:	f003 0107 	and.w	r1, r3, #7
 800c5d8:	f002 0307 	and.w	r3, r2, #7
 800c5dc:	bf58      	it	pl
 800c5de:	4259      	negpl	r1, r3
 800c5e0:	b20b      	sxth	r3, r1
 800c5e2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c5e6:	4b82      	ldr	r3, [pc, #520]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c5e8:	781b      	ldrb	r3, [r3, #0]
 800c5ea:	4a80      	ldr	r2, [pc, #512]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c5ec:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c5ee:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c5f2:	b2d8      	uxtb	r0, r3
 800c5f4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c5f8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c5fc:	1899      	adds	r1, r3, r2
 800c5fe:	4b7b      	ldr	r3, [pc, #492]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c600:	7b1b      	ldrb	r3, [r3, #12]
 800c602:	b2db      	uxtb	r3, r3
 800c604:	2200      	movs	r2, #0
 800c606:	469a      	mov	sl, r3
 800c608:	4693      	mov	fp, r2
 800c60a:	2301      	movs	r3, #1
 800c60c:	9302      	str	r3, [sp, #8]
 800c60e:	e9cd ab00 	strd	sl, fp, [sp]
 800c612:	460a      	mov	r2, r1
 800c614:	2108      	movs	r1, #8
 800c616:	f001 fab5 	bl	800db84 <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c61a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c61e:	3308      	adds	r3, #8
 800c620:	2b00      	cmp	r3, #0
 800c622:	da00      	bge.n	800c626 <Form_Siemens_Reply+0x172>
 800c624:	3307      	adds	r3, #7
 800c626:	10db      	asrs	r3, r3, #3
 800c628:	b29a      	uxth	r2, r3
 800c62a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c62e:	4413      	add	r3, r2
 800c630:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c634:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c638:	3308      	adds	r3, #8
 800c63a:	b29b      	uxth	r3, r3
 800c63c:	b21b      	sxth	r3, r3
 800c63e:	425a      	negs	r2, r3
 800c640:	f003 0107 	and.w	r1, r3, #7
 800c644:	f002 0307 	and.w	r3, r2, #7
 800c648:	bf58      	it	pl
 800c64a:	4259      	negpl	r1, r3
 800c64c:	b20b      	sxth	r3, r1
 800c64e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c652:	4b67      	ldr	r3, [pc, #412]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c654:	685a      	ldr	r2, [r3, #4]
 800c656:	4b65      	ldr	r3, [pc, #404]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c658:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c65a:	4b65      	ldr	r3, [pc, #404]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c65c:	689a      	ldr	r2, [r3, #8]
 800c65e:	4b63      	ldr	r3, [pc, #396]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c660:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c662:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c666:	b2d8      	uxtb	r0, r3
 800c668:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c66c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c670:	1899      	adds	r1, r3, r2
 800c672:	4b5e      	ldr	r3, [pc, #376]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c674:	691b      	ldr	r3, [r3, #16]
 800c676:	2200      	movs	r2, #0
 800c678:	643b      	str	r3, [r7, #64]	; 0x40
 800c67a:	647a      	str	r2, [r7, #68]	; 0x44
 800c67c:	2300      	movs	r3, #0
 800c67e:	9302      	str	r3, [sp, #8]
 800c680:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c684:	e9cd 3400 	strd	r3, r4, [sp]
 800c688:	460a      	mov	r2, r1
 800c68a:	2118      	movs	r1, #24
 800c68c:	f001 fa7a 	bl	800db84 <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c690:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c694:	3318      	adds	r3, #24
 800c696:	2b00      	cmp	r3, #0
 800c698:	da00      	bge.n	800c69c <Form_Siemens_Reply+0x1e8>
 800c69a:	3307      	adds	r3, #7
 800c69c:	10db      	asrs	r3, r3, #3
 800c69e:	b29a      	uxth	r2, r3
 800c6a0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c6aa:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6ae:	3318      	adds	r3, #24
 800c6b0:	b29b      	uxth	r3, r3
 800c6b2:	b21b      	sxth	r3, r3
 800c6b4:	425a      	negs	r2, r3
 800c6b6:	f003 0107 	and.w	r1, r3, #7
 800c6ba:	f002 0307 	and.w	r3, r2, #7
 800c6be:	bf58      	it	pl
 800c6c0:	4259      	negpl	r1, r3
 800c6c2:	b20b      	sxth	r3, r1
 800c6c4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c6c8:	4a48      	ldr	r2, [pc, #288]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c6ca:	230a      	movs	r3, #10
 800c6cc:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c6ce:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6d2:	b2d8      	uxtb	r0, r3
 800c6d4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c6d8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c6dc:	1899      	adds	r1, r3, r2
 800c6de:	4b43      	ldr	r3, [pc, #268]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c6e0:	7e1b      	ldrb	r3, [r3, #24]
 800c6e2:	b2db      	uxtb	r3, r3
 800c6e4:	2200      	movs	r2, #0
 800c6e6:	63bb      	str	r3, [r7, #56]	; 0x38
 800c6e8:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	9302      	str	r3, [sp, #8]
 800c6ee:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c6f2:	e9cd 3400 	strd	r3, r4, [sp]
 800c6f6:	460a      	mov	r2, r1
 800c6f8:	2108      	movs	r1, #8
 800c6fa:	f001 fa43 	bl	800db84 <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c6fe:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c702:	3308      	adds	r3, #8
 800c704:	2b00      	cmp	r3, #0
 800c706:	da00      	bge.n	800c70a <Form_Siemens_Reply+0x256>
 800c708:	3307      	adds	r3, #7
 800c70a:	10db      	asrs	r3, r3, #3
 800c70c:	b29a      	uxth	r2, r3
 800c70e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c712:	4413      	add	r3, r2
 800c714:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c718:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c71c:	3308      	adds	r3, #8
 800c71e:	b29b      	uxth	r3, r3
 800c720:	b21b      	sxth	r3, r3
 800c722:	425a      	negs	r2, r3
 800c724:	f003 0107 	and.w	r1, r3, #7
 800c728:	f002 0307 	and.w	r3, r2, #7
 800c72c:	bf58      	it	pl
 800c72e:	4259      	negpl	r1, r3
 800c730:	b20b      	sxth	r3, r1
 800c732:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c736:	4a2d      	ldr	r2, [pc, #180]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c738:	2301      	movs	r3, #1
 800c73a:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c73c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c740:	b2d8      	uxtb	r0, r3
 800c742:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c746:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c74a:	1899      	adds	r1, r3, r2
 800c74c:	4b27      	ldr	r3, [pc, #156]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c74e:	7e5b      	ldrb	r3, [r3, #25]
 800c750:	b2db      	uxtb	r3, r3
 800c752:	2200      	movs	r2, #0
 800c754:	633b      	str	r3, [r7, #48]	; 0x30
 800c756:	637a      	str	r2, [r7, #52]	; 0x34
 800c758:	2301      	movs	r3, #1
 800c75a:	9302      	str	r3, [sp, #8]
 800c75c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c760:	e9cd 3400 	strd	r3, r4, [sp]
 800c764:	460a      	mov	r2, r1
 800c766:	2108      	movs	r1, #8
 800c768:	f001 fa0c 	bl	800db84 <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c76c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c770:	3308      	adds	r3, #8
 800c772:	2b00      	cmp	r3, #0
 800c774:	da00      	bge.n	800c778 <Form_Siemens_Reply+0x2c4>
 800c776:	3307      	adds	r3, #7
 800c778:	10db      	asrs	r3, r3, #3
 800c77a:	b29a      	uxth	r2, r3
 800c77c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c780:	4413      	add	r3, r2
 800c782:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c786:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c78a:	3308      	adds	r3, #8
 800c78c:	b29b      	uxth	r3, r3
 800c78e:	b21b      	sxth	r3, r3
 800c790:	425a      	negs	r2, r3
 800c792:	f003 0307 	and.w	r3, r3, #7
 800c796:	f002 0207 	and.w	r2, r2, #7
 800c79a:	bf58      	it	pl
 800c79c:	4253      	negpl	r3, r2
 800c79e:	b21b      	sxth	r3, r3
 800c7a0:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c7a4:	4b12      	ldr	r3, [pc, #72]	; (800c7f0 <Form_Siemens_Reply+0x33c>)
 800c7a6:	7edb      	ldrb	r3, [r3, #27]
 800c7a8:	4a10      	ldr	r2, [pc, #64]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c7aa:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c7ac:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c7b0:	b2d8      	uxtb	r0, r3
 800c7b2:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c7b6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c7ba:	1899      	adds	r1, r3, r2
 800c7bc:	4b0b      	ldr	r3, [pc, #44]	; (800c7ec <Form_Siemens_Reply+0x338>)
 800c7be:	7e9b      	ldrb	r3, [r3, #26]
 800c7c0:	b2db      	uxtb	r3, r3
 800c7c2:	2200      	movs	r2, #0
 800c7c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800c7c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c7c8:	2302      	movs	r3, #2
 800c7ca:	9302      	str	r3, [sp, #8]
 800c7cc:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c7d0:	e9cd 3400 	strd	r3, r4, [sp]
 800c7d4:	460a      	mov	r2, r1
 800c7d6:	2108      	movs	r1, #8
 800c7d8:	f001 f9d4 	bl	800db84 <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c7dc:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c7e0:	3308      	adds	r3, #8
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	da06      	bge.n	800c7f4 <Form_Siemens_Reply+0x340>
 800c7e6:	3307      	adds	r3, #7
 800c7e8:	e004      	b.n	800c7f4 <Form_Siemens_Reply+0x340>
 800c7ea:	bf00      	nop
 800c7ec:	20002e00 	.word	0x20002e00
 800c7f0:	20002bd8 	.word	0x20002bd8
 800c7f4:	10db      	asrs	r3, r3, #3
 800c7f6:	b29a      	uxth	r2, r3
 800c7f8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c7fc:	4413      	add	r3, r2
 800c7fe:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c802:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c806:	3308      	adds	r3, #8
 800c808:	b29b      	uxth	r3, r3
 800c80a:	b21b      	sxth	r3, r3
 800c80c:	425a      	negs	r2, r3
 800c80e:	f003 0307 	and.w	r3, r3, #7
 800c812:	f002 0207 	and.w	r2, r2, #7
 800c816:	bf58      	it	pl
 800c818:	4253      	negpl	r3, r2
 800c81a:	b21b      	sxth	r3, r3
 800c81c:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800c820:	4bc4      	ldr	r3, [pc, #784]	; (800cb34 <Form_Siemens_Reply+0x680>)
 800c822:	7e9a      	ldrb	r2, [r3, #26]
 800c824:	4bc4      	ldr	r3, [pc, #784]	; (800cb38 <Form_Siemens_Reply+0x684>)
 800c826:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800c828:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c82c:	b2d8      	uxtb	r0, r3
 800c82e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c832:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c836:	441a      	add	r2, r3
 800c838:	4bbf      	ldr	r3, [pc, #764]	; (800cb38 <Form_Siemens_Reply+0x684>)
 800c83a:	7edb      	ldrb	r3, [r3, #27]
 800c83c:	b2db      	uxtb	r3, r3
 800c83e:	2100      	movs	r1, #0
 800c840:	623b      	str	r3, [r7, #32]
 800c842:	6279      	str	r1, [r7, #36]	; 0x24
 800c844:	2302      	movs	r3, #2
 800c846:	9302      	str	r3, [sp, #8]
 800c848:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c84c:	e9cd 3400 	strd	r3, r4, [sp]
 800c850:	2108      	movs	r1, #8
 800c852:	f001 f997 	bl	800db84 <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c856:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c85a:	3308      	adds	r3, #8
 800c85c:	2b00      	cmp	r3, #0
 800c85e:	da00      	bge.n	800c862 <Form_Siemens_Reply+0x3ae>
 800c860:	3307      	adds	r3, #7
 800c862:	10db      	asrs	r3, r3, #3
 800c864:	b29a      	uxth	r2, r3
 800c866:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c86a:	4413      	add	r3, r2
 800c86c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c870:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c874:	3308      	adds	r3, #8
 800c876:	b29b      	uxth	r3, r3
 800c878:	b21b      	sxth	r3, r3
 800c87a:	425a      	negs	r2, r3
 800c87c:	f003 0307 	and.w	r3, r3, #7
 800c880:	f002 0207 	and.w	r2, r2, #7
 800c884:	bf58      	it	pl
 800c886:	4253      	negpl	r3, r2
 800c888:	b21b      	sxth	r3, r3
 800c88a:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800c88e:	4ba9      	ldr	r3, [pc, #676]	; (800cb34 <Form_Siemens_Reply+0x680>)
 800c890:	6a1b      	ldr	r3, [r3, #32]
 800c892:	4aa9      	ldr	r2, [pc, #676]	; (800cb38 <Form_Siemens_Reply+0x684>)
 800c894:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800c896:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c89a:	b2d8      	uxtb	r0, r3
 800c89c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c8a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c8a4:	4413      	add	r3, r2
 800c8a6:	4aa4      	ldr	r2, [pc, #656]	; (800cb38 <Form_Siemens_Reply+0x684>)
 800c8a8:	69d2      	ldr	r2, [r2, #28]
 800c8aa:	2100      	movs	r1, #0
 800c8ac:	61ba      	str	r2, [r7, #24]
 800c8ae:	61f9      	str	r1, [r7, #28]
 800c8b0:	2202      	movs	r2, #2
 800c8b2:	9202      	str	r2, [sp, #8]
 800c8b4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c8b8:	e9cd 1200 	strd	r1, r2, [sp]
 800c8bc:	461a      	mov	r2, r3
 800c8be:	2120      	movs	r1, #32
 800c8c0:	f001 f960 	bl	800db84 <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800c8c4:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c8c8:	3320      	adds	r3, #32
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	da00      	bge.n	800c8d0 <Form_Siemens_Reply+0x41c>
 800c8ce:	3307      	adds	r3, #7
 800c8d0:	10db      	asrs	r3, r3, #3
 800c8d2:	b29a      	uxth	r2, r3
 800c8d4:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c8d8:	4413      	add	r3, r2
 800c8da:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c8de:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c8e2:	3320      	adds	r3, #32
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	b21b      	sxth	r3, r3
 800c8e8:	425a      	negs	r2, r3
 800c8ea:	f003 0307 	and.w	r3, r3, #7
 800c8ee:	f002 0207 	and.w	r2, r2, #7
 800c8f2:	bf58      	it	pl
 800c8f4:	4253      	negpl	r3, r2
 800c8f6:	b21b      	sxth	r3, r3
 800c8f8:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800c8fc:	4b8f      	ldr	r3, [pc, #572]	; (800cb3c <Form_Siemens_Reply+0x688>)
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	4a8d      	ldr	r2, [pc, #564]	; (800cb38 <Form_Siemens_Reply+0x684>)
 800c902:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800c904:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c908:	b2d8      	uxtb	r0, r3
 800c90a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c90e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c912:	4413      	add	r3, r2
 800c914:	4a88      	ldr	r2, [pc, #544]	; (800cb38 <Form_Siemens_Reply+0x684>)
 800c916:	6a12      	ldr	r2, [r2, #32]
 800c918:	2100      	movs	r1, #0
 800c91a:	613a      	str	r2, [r7, #16]
 800c91c:	6179      	str	r1, [r7, #20]
 800c91e:	2202      	movs	r2, #2
 800c920:	9202      	str	r2, [sp, #8]
 800c922:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c926:	e9cd 1200 	strd	r1, r2, [sp]
 800c92a:	461a      	mov	r2, r3
 800c92c:	2120      	movs	r1, #32
 800c92e:	f001 f929 	bl	800db84 <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800c932:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c936:	3320      	adds	r3, #32
 800c938:	2b00      	cmp	r3, #0
 800c93a:	da00      	bge.n	800c93e <Form_Siemens_Reply+0x48a>
 800c93c:	3307      	adds	r3, #7
 800c93e:	10db      	asrs	r3, r3, #3
 800c940:	b29a      	uxth	r2, r3
 800c942:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c946:	4413      	add	r3, r2
 800c948:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c94c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c950:	3320      	adds	r3, #32
 800c952:	b29b      	uxth	r3, r3
 800c954:	b21b      	sxth	r3, r3
 800c956:	425a      	negs	r2, r3
 800c958:	f003 0307 	and.w	r3, r3, #7
 800c95c:	f002 0207 	and.w	r2, r2, #7
 800c960:	bf58      	it	pl
 800c962:	4253      	negpl	r3, r2
 800c964:	b21b      	sxth	r3, r3
 800c966:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800c96a:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800c96e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c972:	2201      	movs	r2, #1
 800c974:	4618      	mov	r0, r3
 800c976:	f001 fa6b 	bl	800de50 <Data_Compliment>
 800c97a:	4603      	mov	r3, r0
 800c97c:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800c980:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c984:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c988:	4611      	mov	r1, r2
 800c98a:	4618      	mov	r0, r3
 800c98c:	f000 ff64 	bl	800d858 <Siemens_CRC>
 800c990:	4603      	mov	r3, r0
 800c992:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c996:	4b6a      	ldr	r3, [pc, #424]	; (800cb40 <Form_Siemens_Reply+0x68c>)
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	09db      	lsrs	r3, r3, #7
 800c99c:	f003 0301 	and.w	r3, r3, #1
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d02c      	beq.n	800c9fe <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800c9a4:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c9a8:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c9ac:	4865      	ldr	r0, [pc, #404]	; (800cb44 <Form_Siemens_Reply+0x690>)
 800c9ae:	f015 ffdf 	bl	8022970 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800c9b2:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c9b6:	4619      	mov	r1, r3
 800c9b8:	4863      	ldr	r0, [pc, #396]	; (800cb48 <Form_Siemens_Reply+0x694>)
 800c9ba:	f015 ff3d 	bl	8022838 <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c9be:	4863      	ldr	r0, [pc, #396]	; (800cb4c <Form_Siemens_Reply+0x698>)
 800c9c0:	f00d fbe2 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800c9c4:	4601      	mov	r1, r0
 800c9c6:	4b62      	ldr	r3, [pc, #392]	; (800cb50 <Form_Siemens_Reply+0x69c>)
 800c9c8:	fba3 2301 	umull	r2, r3, r3, r1
 800c9cc:	0bda      	lsrs	r2, r3, #15
 800c9ce:	4613      	mov	r3, r2
 800c9d0:	041b      	lsls	r3, r3, #16
 800c9d2:	1a9b      	subs	r3, r3, r2
 800c9d4:	1aca      	subs	r2, r1, r3
 800c9d6:	4613      	mov	r3, r2
 800c9d8:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800c9dc:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c9e0:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d104      	bne.n	800c9f2 <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800c9e8:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c9ec:	3304      	adds	r3, #4
 800c9ee:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800c9f2:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c9f6:	4619      	mov	r1, r3
 800c9f8:	4856      	ldr	r0, [pc, #344]	; (800cb54 <Form_Siemens_Reply+0x6a0>)
 800c9fa:	f015 ff1d 	bl	8022838 <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800c9fe:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca02:	b2d8      	uxtb	r0, r3
 800ca04:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca08:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca0c:	4413      	add	r3, r2
 800ca0e:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800ca12:	2100      	movs	r1, #0
 800ca14:	60ba      	str	r2, [r7, #8]
 800ca16:	60f9      	str	r1, [r7, #12]
 800ca18:	2202      	movs	r2, #2
 800ca1a:	9202      	str	r2, [sp, #8]
 800ca1c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800ca20:	e9cd 1200 	strd	r1, r2, [sp]
 800ca24:	461a      	mov	r2, r3
 800ca26:	2110      	movs	r1, #16
 800ca28:	f001 f8ac 	bl	800db84 <Insert_cal_parity>
	BITSTUFFINC(16);
 800ca2c:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800ca30:	3310      	adds	r3, #16
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	da00      	bge.n	800ca38 <Form_Siemens_Reply+0x584>
 800ca36:	3307      	adds	r3, #7
 800ca38:	10db      	asrs	r3, r3, #3
 800ca3a:	b29a      	uxth	r2, r3
 800ca3c:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca40:	4413      	add	r3, r2
 800ca42:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800ca46:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800ca4a:	3310      	adds	r3, #16
 800ca4c:	b29b      	uxth	r3, r3
 800ca4e:	b21b      	sxth	r3, r3
 800ca50:	425a      	negs	r2, r3
 800ca52:	f003 0307 	and.w	r3, r3, #7
 800ca56:	f002 0207 	and.w	r2, r2, #7
 800ca5a:	bf58      	it	pl
 800ca5c:	4253      	negpl	r3, r2
 800ca5e:	b21b      	sxth	r3, r3
 800ca60:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800ca64:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca68:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800ca6c:	441a      	add	r2, r3
 800ca6e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800ca72:	3b02      	subs	r3, #2
 800ca74:	b29b      	uxth	r3, r3
 800ca76:	4619      	mov	r1, r3
 800ca78:	4610      	mov	r0, r2
 800ca7a:	f000 feed 	bl	800d858 <Siemens_CRC>
 800ca7e:	4603      	mov	r3, r0
 800ca80:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ca84:	4b2e      	ldr	r3, [pc, #184]	; (800cb40 <Form_Siemens_Reply+0x68c>)
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	0a5b      	lsrs	r3, r3, #9
 800ca8a:	f003 0301 	and.w	r3, r3, #1
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d02c      	beq.n	800caec <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800ca92:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800ca96:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800ca9a:	482a      	ldr	r0, [pc, #168]	; (800cb44 <Form_Siemens_Reply+0x690>)
 800ca9c:	f015 ff68 	bl	8022970 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800caa0:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800caa4:	4619      	mov	r1, r3
 800caa6:	482c      	ldr	r0, [pc, #176]	; (800cb58 <Form_Siemens_Reply+0x6a4>)
 800caa8:	f015 fec6 	bl	8022838 <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800caac:	4827      	ldr	r0, [pc, #156]	; (800cb4c <Form_Siemens_Reply+0x698>)
 800caae:	f00d fb6b 	bl	801a188 <HAL_RNG_GetRandomNumber>
 800cab2:	4601      	mov	r1, r0
 800cab4:	4b26      	ldr	r3, [pc, #152]	; (800cb50 <Form_Siemens_Reply+0x69c>)
 800cab6:	fba3 2301 	umull	r2, r3, r3, r1
 800caba:	0bda      	lsrs	r2, r3, #15
 800cabc:	4613      	mov	r3, r2
 800cabe:	041b      	lsls	r3, r3, #16
 800cac0:	1a9b      	subs	r3, r3, r2
 800cac2:	1aca      	subs	r2, r1, r3
 800cac4:	4613      	mov	r3, r2
 800cac6:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800caca:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800cace:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d104      	bne.n	800cae0 <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800cad6:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cada:	3304      	adds	r3, #4
 800cadc:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800cae0:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800cae4:	4619      	mov	r1, r3
 800cae6:	481d      	ldr	r0, [pc, #116]	; (800cb5c <Form_Siemens_Reply+0x6a8>)
 800cae8:	f015 fea6 	bl	8022838 <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800caec:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800caf0:	005b      	lsls	r3, r3, #1
 800caf2:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800caf6:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cafa:	b2d8      	uxtb	r0, r3
 800cafc:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cb00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800cb04:	4413      	add	r3, r2
 800cb06:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800cb0a:	2100      	movs	r1, #0
 800cb0c:	603a      	str	r2, [r7, #0]
 800cb0e:	6079      	str	r1, [r7, #4]
 800cb10:	2202      	movs	r2, #2
 800cb12:	9202      	str	r2, [sp, #8]
 800cb14:	e9d7 1200 	ldrd	r1, r2, [r7]
 800cb18:	e9cd 1200 	strd	r1, r2, [sp]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	2110      	movs	r1, #16
 800cb20:	f001 f830 	bl	800db84 <Insert_cal_parity>
	BITSTUFFINC(16);
 800cb24:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800cb28:	3310      	adds	r3, #16
 800cb2a:	2b00      	cmp	r3, #0
 800cb2c:	da18      	bge.n	800cb60 <Form_Siemens_Reply+0x6ac>
 800cb2e:	3307      	adds	r3, #7
 800cb30:	e016      	b.n	800cb60 <Form_Siemens_Reply+0x6ac>
 800cb32:	bf00      	nop
 800cb34:	20002bd8 	.word	0x20002bd8
 800cb38:	20002e00 	.word	0x20002e00
 800cb3c:	2000409c 	.word	0x2000409c
 800cb40:	20003854 	.word	0x20003854
 800cb44:	08025f74 	.word	0x08025f74
 800cb48:	08026224 	.word	0x08026224
 800cb4c:	2000a05c 	.word	0x2000a05c
 800cb50:	80008001 	.word	0x80008001
 800cb54:	08026238 	.word	0x08026238
 800cb58:	0802624c 	.word	0x0802624c
 800cb5c:	08026268 	.word	0x08026268
 800cb60:	10db      	asrs	r3, r3, #3
 800cb62:	b29a      	uxth	r2, r3
 800cb64:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800cb68:	4413      	add	r3, r2
 800cb6a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800cb6e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800cb72:	3310      	adds	r3, #16
 800cb74:	b29b      	uxth	r3, r3
 800cb76:	b21b      	sxth	r3, r3
 800cb78:	425a      	negs	r2, r3
 800cb7a:	f003 0307 	and.w	r3, r3, #7
 800cb7e:	f002 0207 	and.w	r2, r2, #7
 800cb82:	bf58      	it	pl
 800cb84:	4253      	negpl	r3, r2
 800cb86:	b21b      	sxth	r3, r3
 800cb88:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800cb8c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cb90:	3302      	adds	r3, #2
 800cb92:	461a      	mov	r2, r3
 800cb94:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cb98:	4619      	mov	r1, r3
 800cb9a:	481e      	ldr	r0, [pc, #120]	; (800cc14 <Form_Siemens_Reply+0x760>)
 800cb9c:	f015 fd3c 	bl	8022618 <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800cba0:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cba4:	3302      	adds	r3, #2
 800cba6:	b29a      	uxth	r2, r3
 800cba8:	4b1a      	ldr	r3, [pc, #104]	; (800cc14 <Form_Siemens_Reply+0x760>)
 800cbaa:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800cbae:	f001 f9bb 	bl	800df28 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800cbb2:	4b19      	ldr	r3, [pc, #100]	; (800cc18 <Form_Siemens_Reply+0x764>)
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	099b      	lsrs	r3, r3, #6
 800cbb8:	f003 0301 	and.w	r3, r3, #1
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d003      	beq.n	800cbc8 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800cbc0:	4816      	ldr	r0, [pc, #88]	; (800cc1c <Form_Siemens_Reply+0x768>)
 800cbc2:	f015 fed5 	bl	8022970 <puts>
 800cbc6:	e00f      	b.n	800cbe8 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800cbc8:	4b15      	ldr	r3, [pc, #84]	; (800cc20 <Form_Siemens_Reply+0x76c>)
 800cbca:	781b      	ldrb	r3, [r3, #0]
 800cbcc:	2b01      	cmp	r3, #1
 800cbce:	d10b      	bne.n	800cbe8 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800cbd0:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800cbd4:	b2db      	uxtb	r3, r3
 800cbd6:	3302      	adds	r3, #2
 800cbd8:	b2d9      	uxtb	r1, r3
 800cbda:	4a12      	ldr	r2, [pc, #72]	; (800cc24 <Form_Siemens_Reply+0x770>)
 800cbdc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800cbe0:	6812      	ldr	r2, [r2, #0]
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	f002 fc00 	bl	800f3e8 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800cbe8:	f44f 720a 	mov.w	r2, #552	; 0x228
 800cbec:	2100      	movs	r1, #0
 800cbee:	480e      	ldr	r0, [pc, #56]	; (800cc28 <Form_Siemens_Reply+0x774>)
 800cbf0:	f015 fd3a 	bl	8022668 <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800cbf4:	4a0c      	ldr	r2, [pc, #48]	; (800cc28 <Form_Siemens_Reply+0x774>)
 800cbf6:	4b0d      	ldr	r3, [pc, #52]	; (800cc2c <Form_Siemens_Reply+0x778>)
 800cbf8:	4610      	mov	r0, r2
 800cbfa:	4619      	mov	r1, r3
 800cbfc:	f44f 730a 	mov.w	r3, #552	; 0x228
 800cc00:	461a      	mov	r2, r3
 800cc02:	f015 fd09 	bl	8022618 <memcpy>
	UNUSED(App_data_Traverser);
}
 800cc06:	bf00      	nop
 800cc08:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800cc0c:	46bd      	mov	sp, r7
 800cc0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800cc12:	bf00      	nop
 800cc14:	20003250 	.word	0x20003250
 800cc18:	20003854 	.word	0x20003854
 800cc1c:	08026288 	.word	0x08026288
 800cc20:	20004f7d 	.word	0x20004f7d
 800cc24:	200055e4 	.word	0x200055e4
 800cc28:	20003028 	.word	0x20003028
 800cc2c:	20002e00 	.word	0x20002e00

0800cc30 <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800cc30:	b580      	push	{r7, lr}
 800cc32:	b082      	sub	sp, #8
 800cc34:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800cc36:	4b64      	ldr	r3, [pc, #400]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f002 f864 	bl	800ed08 <HAL_Elaps_Ticks>
 800cc40:	4602      	mov	r2, r0
 800cc42:	4b62      	ldr	r3, [pc, #392]	; (800cdcc <ProcessSendingSignals2MIE+0x19c>)
 800cc44:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800cc48:	429a      	cmp	r2, r3
 800cc4a:	f240 80b9 	bls.w	800cdc0 <ProcessSendingSignals2MIE+0x190>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800cc4e:	4b5e      	ldr	r3, [pc, #376]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800cc50:	781b      	ldrb	r3, [r3, #0]
		if(
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d113      	bne.n	800cc7e <ProcessSendingSignals2MIE+0x4e>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800cc56:	4b5c      	ldr	r3, [pc, #368]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800cc58:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d10f      	bne.n	800cc7e <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cc5e:	4b5c      	ldr	r3, [pc, #368]	; (800cdd0 <ProcessSendingSignals2MIE+0x1a0>)
 800cc60:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800cc62:	2b01      	cmp	r3, #1
 800cc64:	d10b      	bne.n	800cc7e <ProcessSendingSignals2MIE+0x4e>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cc66:	4b5b      	ldr	r3, [pc, #364]	; (800cdd4 <ProcessSendingSignals2MIE+0x1a4>)
 800cc68:	781b      	ldrb	r3, [r3, #0]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d107      	bne.n	800cc7e <ProcessSendingSignals2MIE+0x4e>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cc6e:	4b5a      	ldr	r3, [pc, #360]	; (800cdd8 <ProcessSendingSignals2MIE+0x1a8>)
 800cc70:	881b      	ldrh	r3, [r3, #0]
 800cc72:	461a      	mov	r2, r3
 800cc74:	4959      	ldr	r1, [pc, #356]	; (800cddc <ProcessSendingSignals2MIE+0x1ac>)
 800cc76:	485a      	ldr	r0, [pc, #360]	; (800cde0 <ProcessSendingSignals2MIE+0x1b0>)
 800cc78:	f015 fcce 	bl	8022618 <memcpy>
 800cc7c:	e02d      	b.n	800ccda <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800cc7e:	4b54      	ldr	r3, [pc, #336]	; (800cdd0 <ProcessSendingSignals2MIE+0x1a0>)
 800cc80:	781b      	ldrb	r3, [r3, #0]
 800cc82:	2b01      	cmp	r3, #1
 800cc84:	d10f      	bne.n	800cca6 <ProcessSendingSignals2MIE+0x76>
 800cc86:	4b53      	ldr	r3, [pc, #332]	; (800cdd4 <ProcessSendingSignals2MIE+0x1a4>)
 800cc88:	781b      	ldrb	r3, [r3, #0]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d10b      	bne.n	800cca6 <ProcessSendingSignals2MIE+0x76>
 800cc8e:	4b4e      	ldr	r3, [pc, #312]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800cc90:	785b      	ldrb	r3, [r3, #1]
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d107      	bne.n	800cca6 <ProcessSendingSignals2MIE+0x76>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800cc96:	4b53      	ldr	r3, [pc, #332]	; (800cde4 <ProcessSendingSignals2MIE+0x1b4>)
 800cc98:	881b      	ldrh	r3, [r3, #0]
 800cc9a:	461a      	mov	r2, r3
 800cc9c:	4952      	ldr	r1, [pc, #328]	; (800cde8 <ProcessSendingSignals2MIE+0x1b8>)
 800cc9e:	4850      	ldr	r0, [pc, #320]	; (800cde0 <ProcessSendingSignals2MIE+0x1b0>)
 800cca0:	f015 fcba 	bl	8022618 <memcpy>
 800cca4:	e019      	b.n	800ccda <ProcessSendingSignals2MIE+0xaa>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800cca6:	4b4b      	ldr	r3, [pc, #300]	; (800cdd4 <ProcessSendingSignals2MIE+0x1a4>)
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	2b01      	cmp	r3, #1
 800ccac:	d10f      	bne.n	800ccce <ProcessSendingSignals2MIE+0x9e>
 800ccae:	4b48      	ldr	r3, [pc, #288]	; (800cdd0 <ProcessSendingSignals2MIE+0x1a0>)
 800ccb0:	781b      	ldrb	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d10b      	bne.n	800ccce <ProcessSendingSignals2MIE+0x9e>
 800ccb6:	4b44      	ldr	r3, [pc, #272]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800ccb8:	785b      	ldrb	r3, [r3, #1]
 800ccba:	2b01      	cmp	r3, #1
 800ccbc:	d107      	bne.n	800ccce <ProcessSendingSignals2MIE+0x9e>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800ccbe:	4b46      	ldr	r3, [pc, #280]	; (800cdd8 <ProcessSendingSignals2MIE+0x1a8>)
 800ccc0:	881b      	ldrh	r3, [r3, #0]
 800ccc2:	461a      	mov	r2, r3
 800ccc4:	4945      	ldr	r1, [pc, #276]	; (800cddc <ProcessSendingSignals2MIE+0x1ac>)
 800ccc6:	4846      	ldr	r0, [pc, #280]	; (800cde0 <ProcessSendingSignals2MIE+0x1b0>)
 800ccc8:	f015 fca6 	bl	8022618 <memcpy>
 800cccc:	e005      	b.n	800ccda <ProcessSendingSignals2MIE+0xaa>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ccce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	4842      	ldr	r0, [pc, #264]	; (800cde0 <ProcessSendingSignals2MIE+0x1b0>)
 800ccd6:	f015 fcc7 	bl	8022668 <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800ccda:	4b3e      	ldr	r3, [pc, #248]	; (800cdd4 <ProcessSendingSignals2MIE+0x1a4>)
 800ccdc:	885b      	ldrh	r3, [r3, #2]
 800ccde:	461a      	mov	r2, r3
 800cce0:	4b3a      	ldr	r3, [pc, #232]	; (800cdcc <ProcessSendingSignals2MIE+0x19c>)
 800cce2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d30d      	bcc.n	800cd06 <ProcessSendingSignals2MIE+0xd6>
 800ccea:	4b39      	ldr	r3, [pc, #228]	; (800cdd0 <ProcessSendingSignals2MIE+0x1a0>)
 800ccec:	885b      	ldrh	r3, [r3, #2]
 800ccee:	461a      	mov	r2, r3
 800ccf0:	4b36      	ldr	r3, [pc, #216]	; (800cdcc <ProcessSendingSignals2MIE+0x19c>)
 800ccf2:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d305      	bcc.n	800cd06 <ProcessSendingSignals2MIE+0xd6>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800ccfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ccfe:	2100      	movs	r1, #0
 800cd00:	4837      	ldr	r0, [pc, #220]	; (800cde0 <ProcessSendingSignals2MIE+0x1b0>)
 800cd02:	f015 fcb1 	bl	8022668 <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800cd06:	4b31      	ldr	r3, [pc, #196]	; (800cdcc <ProcessSendingSignals2MIE+0x19c>)
 800cd08:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cd0c:	f003 0307 	and.w	r3, r3, #7
 800cd10:	b29a      	uxth	r2, r3
 800cd12:	4b36      	ldr	r3, [pc, #216]	; (800cdec <ProcessSendingSignals2MIE+0x1bc>)
 800cd14:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800cd16:	4b35      	ldr	r3, [pc, #212]	; (800cdec <ProcessSendingSignals2MIE+0x1bc>)
 800cd18:	881b      	ldrh	r3, [r3, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d009      	beq.n	800cd32 <ProcessSendingSignals2MIE+0x102>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800cd1e:	4b2b      	ldr	r3, [pc, #172]	; (800cdcc <ProcessSendingSignals2MIE+0x19c>)
 800cd20:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cd24:	08db      	lsrs	r3, r3, #3
 800cd26:	b29b      	uxth	r3, r3
 800cd28:	3301      	adds	r3, #1
 800cd2a:	b29a      	uxth	r2, r3
 800cd2c:	4b2f      	ldr	r3, [pc, #188]	; (800cdec <ProcessSendingSignals2MIE+0x1bc>)
 800cd2e:	801a      	strh	r2, [r3, #0]
 800cd30:	e006      	b.n	800cd40 <ProcessSendingSignals2MIE+0x110>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800cd32:	4b26      	ldr	r3, [pc, #152]	; (800cdcc <ProcessSendingSignals2MIE+0x19c>)
 800cd34:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800cd38:	08db      	lsrs	r3, r3, #3
 800cd3a:	b29a      	uxth	r2, r3
 800cd3c:	4b2b      	ldr	r3, [pc, #172]	; (800cdec <ProcessSendingSignals2MIE+0x1bc>)
 800cd3e:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800cd40:	492b      	ldr	r1, [pc, #172]	; (800cdf0 <ProcessSendingSignals2MIE+0x1c0>)
 800cd42:	482c      	ldr	r0, [pc, #176]	; (800cdf4 <ProcessSendingSignals2MIE+0x1c4>)
 800cd44:	f7f3 fa7c 	bl	8000240 <strcmp>
 800cd48:	4603      	mov	r3, r0
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d008      	beq.n	800cd60 <ProcessSendingSignals2MIE+0x130>
 800cd4e:	4b1e      	ldr	r3, [pc, #120]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800cd50:	785b      	ldrb	r3, [r3, #1]
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d104      	bne.n	800cd60 <ProcessSendingSignals2MIE+0x130>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800cd56:	f240 1019 	movw	r0, #281	; 0x119
 800cd5a:	f002 fd89 	bl	800f870 <TransmitCanPkt>
 800cd5e:	e011      	b.n	800cd84 <ProcessSendingSignals2MIE+0x154>
		}
#ifdef EI_1
		else
		{
			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800cd60:	4923      	ldr	r1, [pc, #140]	; (800cdf0 <ProcessSendingSignals2MIE+0x1c0>)
 800cd62:	4824      	ldr	r0, [pc, #144]	; (800cdf4 <ProcessSendingSignals2MIE+0x1c4>)
 800cd64:	f7f3 fa6c 	bl	8000240 <strcmp>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d106      	bne.n	800cd7c <ProcessSendingSignals2MIE+0x14c>
			{
				memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800cd6e:	4b1a      	ldr	r3, [pc, #104]	; (800cdd8 <ProcessSendingSignals2MIE+0x1a8>)
 800cd70:	881b      	ldrh	r3, [r3, #0]
 800cd72:	461a      	mov	r2, r3
 800cd74:	4919      	ldr	r1, [pc, #100]	; (800cddc <ProcessSendingSignals2MIE+0x1ac>)
 800cd76:	481a      	ldr	r0, [pc, #104]	; (800cde0 <ProcessSendingSignals2MIE+0x1b0>)
 800cd78:	f015 fc4e 	bl	8022618 <memcpy>
			}
			TransmitCanPkt(EI_PROCESS_DATA);
 800cd7c:	f240 1019 	movw	r0, #281	; 0x119
 800cd80:	f002 fd76 	bl	800f870 <TransmitCanPkt>




#ifdef EI_1
		printf("\nSendingRelaysToMIE:");
 800cd84:	481c      	ldr	r0, [pc, #112]	; (800cdf8 <ProcessSendingSignals2MIE+0x1c8>)
 800cd86:	f015 fd57 	bl	8022838 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	80fb      	strh	r3, [r7, #6]
 800cd8e:	e00a      	b.n	800cda6 <ProcessSendingSignals2MIE+0x176>
		{
			printf("%02X ",VitalData2MIE_st.Relays[Traverser]);
 800cd90:	88fb      	ldrh	r3, [r7, #6]
 800cd92:	4a16      	ldr	r2, [pc, #88]	; (800cdec <ProcessSendingSignals2MIE+0x1bc>)
 800cd94:	4413      	add	r3, r2
 800cd96:	789b      	ldrb	r3, [r3, #2]
 800cd98:	4619      	mov	r1, r3
 800cd9a:	4818      	ldr	r0, [pc, #96]	; (800cdfc <ProcessSendingSignals2MIE+0x1cc>)
 800cd9c:	f015 fd4c 	bl	8022838 <iprintf>
		for(uint16_t Traverser = 0;Traverser<VitalData2MIE_st.NoofDataBytes;++Traverser)
 800cda0:	88fb      	ldrh	r3, [r7, #6]
 800cda2:	3301      	adds	r3, #1
 800cda4:	80fb      	strh	r3, [r7, #6]
 800cda6:	4b11      	ldr	r3, [pc, #68]	; (800cdec <ProcessSendingSignals2MIE+0x1bc>)
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	88fa      	ldrh	r2, [r7, #6]
 800cdac:	429a      	cmp	r2, r3
 800cdae:	d3ef      	bcc.n	800cd90 <ProcessSendingSignals2MIE+0x160>
		}
		printf("\n");
 800cdb0:	200a      	movs	r0, #10
 800cdb2:	f015 fd59 	bl	8022868 <putchar>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800cdb6:	f008 fd35 	bl	8015824 <HAL_GetTick>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	4a02      	ldr	r2, [pc, #8]	; (800cdc8 <ProcessSendingSignals2MIE+0x198>)
 800cdbe:	6053      	str	r3, [r2, #4]
	}
}
 800cdc0:	bf00      	nop
 800cdc2:	3708      	adds	r7, #8
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}
 800cdc8:	20003868 	.word	0x20003868
 800cdcc:	20000304 	.word	0x20000304
 800cdd0:	20003860 	.word	0x20003860
 800cdd4:	2000385c 	.word	0x2000385c
 800cdd8:	20003a88 	.word	0x20003a88
 800cddc:	20003a8c 	.word	0x20003a8c
 800cde0:	20003886 	.word	0x20003886
 800cde4:	20003c8c 	.word	0x20003c8c
 800cde8:	20003c90 	.word	0x20003c90
 800cdec:	20003884 	.word	0x20003884
 800cdf0:	080261f4 	.word	0x080261f4
 800cdf4:	20000305 	.word	0x20000305
 800cdf8:	080262b0 	.word	0x080262b0
 800cdfc:	080262c8 	.word	0x080262c8

0800ce00 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800ce00:	b580      	push	{r7, lr}
 800ce02:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800ce04:	4b0c      	ldr	r3, [pc, #48]	; (800ce38 <ProcessSelfSharing+0x38>)
 800ce06:	689b      	ldr	r3, [r3, #8]
 800ce08:	4618      	mov	r0, r3
 800ce0a:	f001 ff7d 	bl	800ed08 <HAL_Elaps_Ticks>
 800ce0e:	4602      	mov	r2, r0
 800ce10:	4b0a      	ldr	r3, [pc, #40]	; (800ce3c <ProcessSelfSharing+0x3c>)
 800ce12:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800ce16:	429a      	cmp	r2, r3
 800ce18:	d90b      	bls.n	800ce32 <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800ce1a:	4b09      	ldr	r3, [pc, #36]	; (800ce40 <ProcessSelfSharing+0x40>)
 800ce1c:	2200      	movs	r2, #0
 800ce1e:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
 800ce20:	f240 2001 	movw	r0, #513	; 0x201
 800ce24:	f002 fd24 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800ce28:	f008 fcfc 	bl	8015824 <HAL_GetTick>
 800ce2c:	4603      	mov	r3, r0
 800ce2e:	4a02      	ldr	r2, [pc, #8]	; (800ce38 <ProcessSelfSharing+0x38>)
 800ce30:	6093      	str	r3, [r2, #8]
	}
}
 800ce32:	bf00      	nop
 800ce34:	bd80      	pop	{r7, pc}
 800ce36:	bf00      	nop
 800ce38:	20003868 	.word	0x20003868
 800ce3c:	20000304 	.word	0x20000304
 800ce40:	2000385c 	.word	0x2000385c

0800ce44 <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800ce48:	4b1a      	ldr	r3, [pc, #104]	; (800ceb4 <ProcessDetectNoValidDataReceive+0x70>)
 800ce4a:	68db      	ldr	r3, [r3, #12]
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d014      	beq.n	800ce7a <ProcessDetectNoValidDataReceive+0x36>
 800ce50:	4b18      	ldr	r3, [pc, #96]	; (800ceb4 <ProcessDetectNoValidDataReceive+0x70>)
 800ce52:	68db      	ldr	r3, [r3, #12]
 800ce54:	4618      	mov	r0, r3
 800ce56:	f001 ff57 	bl	800ed08 <HAL_Elaps_Ticks>
 800ce5a:	4602      	mov	r2, r0
 800ce5c:	4b16      	ldr	r3, [pc, #88]	; (800ceb8 <ProcessDetectNoValidDataReceive+0x74>)
 800ce5e:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800ce62:	429a      	cmp	r2, r3
 800ce64:	d909      	bls.n	800ce7a <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800ce66:	4b15      	ldr	r3, [pc, #84]	; (800cebc <ProcessDetectNoValidDataReceive+0x78>)
 800ce68:	781b      	ldrb	r3, [r3, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d005      	beq.n	800ce7a <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800ce6e:	4814      	ldr	r0, [pc, #80]	; (800cec0 <ProcessDetectNoValidDataReceive+0x7c>)
 800ce70:	f015 fd7e 	bl	8022970 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800ce74:	4b11      	ldr	r3, [pc, #68]	; (800cebc <ProcessDetectNoValidDataReceive+0x78>)
 800ce76:	2200      	movs	r2, #0
 800ce78:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800ce7a:	4b10      	ldr	r3, [pc, #64]	; (800cebc <ProcessDetectNoValidDataReceive+0x78>)
 800ce7c:	885b      	ldrh	r3, [r3, #2]
 800ce7e:	461a      	mov	r2, r3
 800ce80:	4b0d      	ldr	r3, [pc, #52]	; (800ceb8 <ProcessDetectNoValidDataReceive+0x74>)
 800ce82:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ce86:	429a      	cmp	r2, r3
 800ce88:	d911      	bls.n	800ceae <ProcessDetectNoValidDataReceive+0x6a>
 800ce8a:	4b0e      	ldr	r3, [pc, #56]	; (800cec4 <ProcessDetectNoValidDataReceive+0x80>)
 800ce8c:	885b      	ldrh	r3, [r3, #2]
 800ce8e:	461a      	mov	r2, r3
 800ce90:	4b09      	ldr	r3, [pc, #36]	; (800ceb8 <ProcessDetectNoValidDataReceive+0x74>)
 800ce92:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800ce96:	429a      	cmp	r2, r3
 800ce98:	d909      	bls.n	800ceae <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800ce9a:	4b08      	ldr	r3, [pc, #32]	; (800cebc <ProcessDetectNoValidDataReceive+0x78>)
 800ce9c:	781b      	ldrb	r3, [r3, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d005      	beq.n	800ceae <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800cea2:	4809      	ldr	r0, [pc, #36]	; (800cec8 <ProcessDetectNoValidDataReceive+0x84>)
 800cea4:	f015 fd64 	bl	8022970 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800cea8:	4b04      	ldr	r3, [pc, #16]	; (800cebc <ProcessDetectNoValidDataReceive+0x78>)
 800ceaa:	2200      	movs	r2, #0
 800ceac:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800ceae:	bf00      	nop
 800ceb0:	bd80      	pop	{r7, pc}
 800ceb2:	bf00      	nop
 800ceb4:	20003868 	.word	0x20003868
 800ceb8:	20000304 	.word	0x20000304
 800cebc:	2000385c 	.word	0x2000385c
 800cec0:	080262d0 	.word	0x080262d0
 800cec4:	20003860 	.word	0x20003860
 800cec8:	080262f0 	.word	0x080262f0

0800cecc <SendRelays2Other>:

void SendRelays2Other(void)
{
 800cecc:	b580      	push	{r7, lr}
 800cece:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800ced0:	4b09      	ldr	r3, [pc, #36]	; (800cef8 <SendRelays2Other+0x2c>)
 800ced2:	691b      	ldr	r3, [r3, #16]
 800ced4:	4618      	mov	r0, r3
 800ced6:	f001 ff17 	bl	800ed08 <HAL_Elaps_Ticks>
 800ceda:	4603      	mov	r3, r0
 800cedc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cee0:	d908      	bls.n	800cef4 <SendRelays2Other+0x28>
	{

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
 800cee2:	f240 2007 	movw	r0, #519	; 0x207
 800cee6:	f002 fcc3 	bl	800f870 <TransmitCanPkt>
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800ceea:	f008 fc9b 	bl	8015824 <HAL_GetTick>
 800ceee:	4603      	mov	r3, r0
 800cef0:	4a01      	ldr	r2, [pc, #4]	; (800cef8 <SendRelays2Other+0x2c>)
 800cef2:	6113      	str	r3, [r2, #16]

	}
}
 800cef4:	bf00      	nop
 800cef6:	bd80      	pop	{r7, pc}
 800cef8:	20003868 	.word	0x20003868

0800cefc <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800cf00:	4b16      	ldr	r3, [pc, #88]	; (800cf5c <CheckRelayMisMatch+0x60>)
 800cf02:	695b      	ldr	r3, [r3, #20]
 800cf04:	4618      	mov	r0, r3
 800cf06:	f001 feff 	bl	800ed08 <HAL_Elaps_Ticks>
 800cf0a:	4603      	mov	r3, r0
 800cf0c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800cf10:	d922      	bls.n	800cf58 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800cf12:	4b13      	ldr	r3, [pc, #76]	; (800cf60 <CheckRelayMisMatch+0x64>)
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d10c      	bne.n	800cf34 <CheckRelayMisMatch+0x38>
 800cf1a:	4b12      	ldr	r3, [pc, #72]	; (800cf64 <CheckRelayMisMatch+0x68>)
 800cf1c:	781b      	ldrb	r3, [r3, #0]
 800cf1e:	2b01      	cmp	r3, #1
 800cf20:	d108      	bne.n	800cf34 <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800cf22:	4a11      	ldr	r2, [pc, #68]	; (800cf68 <CheckRelayMisMatch+0x6c>)
 800cf24:	4b11      	ldr	r3, [pc, #68]	; (800cf6c <CheckRelayMisMatch+0x70>)
 800cf26:	4610      	mov	r0, r2
 800cf28:	4619      	mov	r1, r3
 800cf2a:	f44f 7301 	mov.w	r3, #516	; 0x204
 800cf2e:	461a      	mov	r2, r3
 800cf30:	f015 fb72 	bl	8022618 <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800cf34:	4b0d      	ldr	r3, [pc, #52]	; (800cf6c <CheckRelayMisMatch+0x70>)
 800cf36:	885a      	ldrh	r2, [r3, #2]
 800cf38:	4b0b      	ldr	r3, [pc, #44]	; (800cf68 <CheckRelayMisMatch+0x6c>)
 800cf3a:	885b      	ldrh	r3, [r3, #2]
 800cf3c:	429a      	cmp	r2, r3
 800cf3e:	d003      	beq.n	800cf48 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800cf40:	4b06      	ldr	r3, [pc, #24]	; (800cf5c <CheckRelayMisMatch+0x60>)
 800cf42:	2201      	movs	r2, #1
 800cf44:	701a      	strb	r2, [r3, #0]
 800cf46:	e002      	b.n	800cf4e <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800cf48:	4b04      	ldr	r3, [pc, #16]	; (800cf5c <CheckRelayMisMatch+0x60>)
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800cf4e:	f008 fc69 	bl	8015824 <HAL_GetTick>
 800cf52:	4603      	mov	r3, r0
 800cf54:	4a01      	ldr	r2, [pc, #4]	; (800cf5c <CheckRelayMisMatch+0x60>)
 800cf56:	6153      	str	r3, [r2, #20]
	}
}
 800cf58:	bf00      	nop
 800cf5a:	bd80      	pop	{r7, pc}
 800cf5c:	20003868 	.word	0x20003868
 800cf60:	2000385c 	.word	0x2000385c
 800cf64:	20003860 	.word	0x20003860
 800cf68:	20003a88 	.word	0x20003a88
 800cf6c:	20003c8c 	.word	0x20003c8c

0800cf70 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800cf70:	b580      	push	{r7, lr}
 800cf72:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800cf74:	4b16      	ldr	r3, [pc, #88]	; (800cfd0 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cf76:	785b      	ldrb	r3, [r3, #1]
 800cf78:	2b01      	cmp	r3, #1
 800cf7a:	d101      	bne.n	800cf80 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800cf7c:	f006 fb26 	bl	80135cc <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800cf80:	4b13      	ldr	r3, [pc, #76]	; (800cfd0 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cf82:	699b      	ldr	r3, [r3, #24]
 800cf84:	4618      	mov	r0, r3
 800cf86:	f001 febf 	bl	800ed08 <HAL_Elaps_Ticks>
 800cf8a:	4602      	mov	r2, r0
 800cf8c:	4b11      	ldr	r3, [pc, #68]	; (800cfd4 <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800cf8e:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800cf92:	429a      	cmp	r2, r3
 800cf94:	d31a      	bcc.n	800cfcc <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800cf96:	4b0e      	ldr	r3, [pc, #56]	; (800cfd0 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cf98:	699a      	ldr	r2, [r3, #24]
 800cf9a:	4b0f      	ldr	r3, [pc, #60]	; (800cfd8 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d014      	beq.n	800cfcc <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800cfa2:	4b0b      	ldr	r3, [pc, #44]	; (800cfd0 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cfa4:	2200      	movs	r2, #0
 800cfa6:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800cfa8:	4b09      	ldr	r3, [pc, #36]	; (800cfd0 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cfaa:	699b      	ldr	r3, [r3, #24]
 800cfac:	4a0a      	ldr	r2, [pc, #40]	; (800cfd8 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800cfae:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800cfb0:	4b07      	ldr	r3, [pc, #28]	; (800cfd0 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800cfb2:	699b      	ldr	r3, [r3, #24]
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	f001 fea7 	bl	800ed08 <HAL_Elaps_Ticks>
 800cfba:	4603      	mov	r3, r0
 800cfbc:	4a07      	ldr	r2, [pc, #28]	; (800cfdc <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800cfbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cfc2:	099b      	lsrs	r3, r3, #6
 800cfc4:	4619      	mov	r1, r3
 800cfc6:	4806      	ldr	r0, [pc, #24]	; (800cfe0 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800cfc8:	f015 fc36 	bl	8022838 <iprintf>
		}
	}
}
 800cfcc:	bf00      	nop
 800cfce:	bd80      	pop	{r7, pc}
 800cfd0:	20003868 	.word	0x20003868
 800cfd4:	20000304 	.word	0x20000304
 800cfd8:	20004f80 	.word	0x20004f80
 800cfdc:	10624dd3 	.word	0x10624dd3
 800cfe0:	08026314 	.word	0x08026314

0800cfe4 <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b086      	sub	sp, #24
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	60f8      	str	r0, [r7, #12]
 800cfec:	60b9      	str	r1, [r7, #8]
 800cfee:	4611      	mov	r1, r2
 800cff0:	461a      	mov	r2, r3
 800cff2:	460b      	mov	r3, r1
 800cff4:	80fb      	strh	r3, [r7, #6]
 800cff6:	4613      	mov	r3, r2
 800cff8:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800cffa:	484d      	ldr	r0, [pc, #308]	; (800d130 <Print_Siemens_MSG+0x14c>)
 800cffc:	f015 fc1c 	bl	8022838 <iprintf>
	if(TX_RX == TX)
 800d000:	797b      	ldrb	r3, [r7, #5]
 800d002:	2b01      	cmp	r3, #1
 800d004:	d103      	bne.n	800d00e <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800d006:	484b      	ldr	r0, [pc, #300]	; (800d134 <Print_Siemens_MSG+0x150>)
 800d008:	f015 fc16 	bl	8022838 <iprintf>
 800d00c:	e005      	b.n	800d01a <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800d00e:	797b      	ldrb	r3, [r7, #5]
 800d010:	2b02      	cmp	r3, #2
 800d012:	d102      	bne.n	800d01a <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800d014:	4848      	ldr	r0, [pc, #288]	; (800d138 <Print_Siemens_MSG+0x154>)
 800d016:	f015 fc0f 	bl	8022838 <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	781b      	ldrb	r3, [r3, #0]
 800d01e:	4619      	mov	r1, r3
 800d020:	4846      	ldr	r0, [pc, #280]	; (800d13c <Print_Siemens_MSG+0x158>)
 800d022:	f015 fc09 	bl	8022838 <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800d026:	68fb      	ldr	r3, [r7, #12]
 800d028:	689b      	ldr	r3, [r3, #8]
 800d02a:	4619      	mov	r1, r3
 800d02c:	4844      	ldr	r0, [pc, #272]	; (800d140 <Print_Siemens_MSG+0x15c>)
 800d02e:	f015 fc03 	bl	8022838 <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	7b1b      	ldrb	r3, [r3, #12]
 800d036:	4619      	mov	r1, r3
 800d038:	4842      	ldr	r0, [pc, #264]	; (800d144 <Print_Siemens_MSG+0x160>)
 800d03a:	f015 fbfd 	bl	8022838 <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	695b      	ldr	r3, [r3, #20]
 800d042:	4619      	mov	r1, r3
 800d044:	4840      	ldr	r0, [pc, #256]	; (800d148 <Print_Siemens_MSG+0x164>)
 800d046:	f015 fbf7 	bl	8022838 <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	7e1b      	ldrb	r3, [r3, #24]
 800d04e:	4619      	mov	r1, r3
 800d050:	483e      	ldr	r0, [pc, #248]	; (800d14c <Print_Siemens_MSG+0x168>)
 800d052:	f015 fbf1 	bl	8022838 <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	7e5b      	ldrb	r3, [r3, #25]
 800d05a:	4619      	mov	r1, r3
 800d05c:	483c      	ldr	r0, [pc, #240]	; (800d150 <Print_Siemens_MSG+0x16c>)
 800d05e:	f015 fbeb 	bl	8022838 <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	7e9b      	ldrb	r3, [r3, #26]
 800d066:	4619      	mov	r1, r3
 800d068:	483a      	ldr	r0, [pc, #232]	; (800d154 <Print_Siemens_MSG+0x170>)
 800d06a:	f015 fbe5 	bl	8022838 <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	7edb      	ldrb	r3, [r3, #27]
 800d072:	4619      	mov	r1, r3
 800d074:	4838      	ldr	r0, [pc, #224]	; (800d158 <Print_Siemens_MSG+0x174>)
 800d076:	f015 fbdf 	bl	8022838 <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	69db      	ldr	r3, [r3, #28]
 800d07e:	4619      	mov	r1, r3
 800d080:	4836      	ldr	r0, [pc, #216]	; (800d15c <Print_Siemens_MSG+0x178>)
 800d082:	f015 fbd9 	bl	8022838 <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	6a1b      	ldr	r3, [r3, #32]
 800d08a:	4619      	mov	r1, r3
 800d08c:	4834      	ldr	r0, [pc, #208]	; (800d160 <Print_Siemens_MSG+0x17c>)
 800d08e:	f015 fbd3 	bl	8022838 <iprintf>
	if(TX_RX == RX)
 800d092:	797b      	ldrb	r3, [r7, #5]
 800d094:	2b02      	cmp	r3, #2
 800d096:	d122      	bne.n	800d0de <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d09c:	4619      	mov	r1, r3
 800d09e:	4831      	ldr	r0, [pc, #196]	; (800d164 <Print_Siemens_MSG+0x180>)
 800d0a0:	f015 fbca 	bl	8022838 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d0a4:	2300      	movs	r3, #0
 800d0a6:	82fb      	strh	r3, [r7, #22]
 800d0a8:	e00b      	b.n	800d0c2 <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800d0aa:	8afb      	ldrh	r3, [r7, #22]
 800d0ac:	68fa      	ldr	r2, [r7, #12]
 800d0ae:	4413      	add	r3, r2
 800d0b0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800d0b4:	4619      	mov	r1, r3
 800d0b6:	482c      	ldr	r0, [pc, #176]	; (800d168 <Print_Siemens_MSG+0x184>)
 800d0b8:	f015 fbbe 	bl	8022838 <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800d0bc:	8afb      	ldrh	r3, [r7, #22]
 800d0be:	3301      	adds	r3, #1
 800d0c0:	82fb      	strh	r3, [r7, #22]
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800d0c6:	8afa      	ldrh	r2, [r7, #22]
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d3ee      	bcc.n	800d0aa <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800d0cc:	200a      	movs	r0, #10
 800d0ce:	f015 fbcb 	bl	8022868 <putchar>

		if(Debug_flag == 2)
 800d0d2:	4b26      	ldr	r3, [pc, #152]	; (800d16c <Print_Siemens_MSG+0x188>)
 800d0d4:	781b      	ldrb	r3, [r3, #0]
 800d0d6:	2b02      	cmp	r3, #2
 800d0d8:	d101      	bne.n	800d0de <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800d0da:	f000 ff65 	bl	800dfa8 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800d0de:	4b23      	ldr	r3, [pc, #140]	; (800d16c <Print_Siemens_MSG+0x188>)
 800d0e0:	781b      	ldrb	r3, [r3, #0]
 800d0e2:	2b01      	cmp	r3, #1
 800d0e4:	d120      	bne.n	800d128 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d0e6:	2300      	movs	r3, #0
 800d0e8:	82bb      	strh	r3, [r7, #20]
 800d0ea:	e016      	b.n	800d11a <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800d0ec:	8abb      	ldrh	r3, [r7, #20]
 800d0ee:	2b00      	cmp	r3, #0
 800d0f0:	d008      	beq.n	800d104 <Print_Siemens_MSG+0x120>
 800d0f2:	8abb      	ldrh	r3, [r7, #20]
 800d0f4:	f003 031f 	and.w	r3, r3, #31
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d102      	bne.n	800d104 <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800d0fe:	200a      	movs	r0, #10
 800d100:	f015 fbb2 	bl	8022868 <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800d104:	8abb      	ldrh	r3, [r7, #20]
 800d106:	68ba      	ldr	r2, [r7, #8]
 800d108:	4413      	add	r3, r2
 800d10a:	781b      	ldrb	r3, [r3, #0]
 800d10c:	4619      	mov	r1, r3
 800d10e:	4816      	ldr	r0, [pc, #88]	; (800d168 <Print_Siemens_MSG+0x184>)
 800d110:	f015 fb92 	bl	8022838 <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800d114:	8abb      	ldrh	r3, [r7, #20]
 800d116:	3301      	adds	r3, #1
 800d118:	82bb      	strh	r3, [r7, #20]
 800d11a:	8aba      	ldrh	r2, [r7, #20]
 800d11c:	88fb      	ldrh	r3, [r7, #6]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d3e4      	bcc.n	800d0ec <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800d122:	200a      	movs	r0, #10
 800d124:	f015 fba0 	bl	8022868 <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800d128:	bf00      	nop
 800d12a:	3718      	adds	r7, #24
 800d12c:	46bd      	mov	sp, r7
 800d12e:	bd80      	pop	{r7, pc}
 800d130:	08026344 	.word	0x08026344
 800d134:	0802634c 	.word	0x0802634c
 800d138:	08026350 	.word	0x08026350
 800d13c:	08026354 	.word	0x08026354
 800d140:	0802635c 	.word	0x0802635c
 800d144:	08026364 	.word	0x08026364
 800d148:	0802636c 	.word	0x0802636c
 800d14c:	08026374 	.word	0x08026374
 800d150:	08026380 	.word	0x08026380
 800d154:	08026388 	.word	0x08026388
 800d158:	08026390 	.word	0x08026390
 800d15c:	08026398 	.word	0x08026398
 800d160:	080263a4 	.word	0x080263a4
 800d164:	080263b0 	.word	0x080263b0
 800d168:	080262c8 	.word	0x080262c8
 800d16c:	20000645 	.word	0x20000645

0800d170 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800d170:	b580      	push	{r7, lr}
 800d172:	b09a      	sub	sp, #104	; 0x68
 800d174:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800d176:	2300      	movs	r3, #0
 800d178:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800d17c:	2300      	movs	r3, #0
 800d17e:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800d182:	2300      	movs	r3, #0
 800d184:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800d188:	2300      	movs	r3, #0
 800d18a:	603b      	str	r3, [r7, #0]
 800d18c:	1d3b      	adds	r3, r7, #4
 800d18e:	2260      	movs	r2, #96	; 0x60
 800d190:	2100      	movs	r1, #0
 800d192:	4618      	mov	r0, r3
 800d194:	f015 fa68 	bl	8022668 <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800d198:	4bb9      	ldr	r3, [pc, #740]	; (800d480 <Chech_forSiemensCMD+0x310>)
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	4618      	mov	r0, r3
 800d19e:	f001 fdb3 	bl	800ed08 <HAL_Elaps_Ticks>
 800d1a2:	4603      	mov	r3, r0
 800d1a4:	2b09      	cmp	r3, #9
 800d1a6:	f240 81ad 	bls.w	800d504 <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800d1aa:	e010      	b.n	800d1ce <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800d1ac:	2000      	movs	r0, #0
 800d1ae:	f008 f811 	bl	80151d4 <Com_Get_Byte>
 800d1b2:	4603      	mov	r3, r0
 800d1b4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800d1b8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d1bc:	1c5a      	adds	r2, r3, #1
 800d1be:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800d1c2:	3368      	adds	r3, #104	; 0x68
 800d1c4:	443b      	add	r3, r7
 800d1c6:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800d1ca:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800d1ce:	2000      	movs	r0, #0
 800d1d0:	f007 ffc0 	bl	8015154 <Com_DataReady>
 800d1d4:	4603      	mov	r3, r0
 800d1d6:	2b00      	cmp	r3, #0
 800d1d8:	d1e8      	bne.n	800d1ac <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800d1da:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f000 8144 	beq.w	800d46c <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800d1e4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d1e8:	3368      	adds	r3, #104	; 0x68
 800d1ea:	443b      	add	r3, r7
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800d1f2:	463b      	mov	r3, r7
 800d1f4:	4619      	mov	r1, r3
 800d1f6:	48a3      	ldr	r0, [pc, #652]	; (800d484 <Chech_forSiemensCMD+0x314>)
 800d1f8:	f015 fb1e 	bl	8022838 <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800d1fc:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800d200:	463b      	mov	r3, r7
 800d202:	4611      	mov	r1, r2
 800d204:	4618      	mov	r0, r3
 800d206:	f000 faf3 	bl	800d7f0 <Is_SiemensCommand_Valid>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b0c      	cmp	r3, #12
 800d20e:	f200 8129 	bhi.w	800d464 <Chech_forSiemensCMD+0x2f4>
 800d212:	a201      	add	r2, pc, #4	; (adr r2, 800d218 <Chech_forSiemensCMD+0xa8>)
 800d214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d218:	0800d24d 	.word	0x0800d24d
 800d21c:	0800d25b 	.word	0x0800d25b
 800d220:	0800d2bf 	.word	0x0800d2bf
 800d224:	0800d2e1 	.word	0x0800d2e1
 800d228:	0800d309 	.word	0x0800d309
 800d22c:	0800d331 	.word	0x0800d331
 800d230:	0800d359 	.word	0x0800d359
 800d234:	0800d381 	.word	0x0800d381
 800d238:	0800d3a9 	.word	0x0800d3a9
 800d23c:	0800d3d1 	.word	0x0800d3d1
 800d240:	0800d3f9 	.word	0x0800d3f9
 800d244:	0800d421 	.word	0x0800d421
 800d248:	0800d449 	.word	0x0800d449
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800d24c:	4b8e      	ldr	r3, [pc, #568]	; (800d488 <Chech_forSiemensCMD+0x318>)
 800d24e:	2201      	movs	r2, #1
 800d250:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800d252:	488e      	ldr	r0, [pc, #568]	; (800d48c <Chech_forSiemensCMD+0x31c>)
 800d254:	f015 fb8c 	bl	8022970 <puts>
				break;
 800d258:	e109      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800d25a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d25e:	3b01      	subs	r3, #1
 800d260:	3368      	adds	r3, #104	; 0x68
 800d262:	443b      	add	r3, r7
 800d264:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d268:	3b30      	subs	r3, #48	; 0x30
 800d26a:	461a      	mov	r2, r3
 800d26c:	4988      	ldr	r1, [pc, #544]	; (800d490 <Chech_forSiemensCMD+0x320>)
 800d26e:	4889      	ldr	r0, [pc, #548]	; (800d494 <Chech_forSiemensCMD+0x324>)
 800d270:	f015 fae2 	bl	8022838 <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800d274:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d278:	3b01      	subs	r3, #1
 800d27a:	3368      	adds	r3, #104	; 0x68
 800d27c:	443b      	add	r3, r7
 800d27e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d282:	2b2f      	cmp	r3, #47	; 0x2f
 800d284:	d914      	bls.n	800d2b0 <Chech_forSiemensCMD+0x140>
 800d286:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d28a:	3b01      	subs	r3, #1
 800d28c:	3368      	adds	r3, #104	; 0x68
 800d28e:	443b      	add	r3, r7
 800d290:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d294:	2b32      	cmp	r3, #50	; 0x32
 800d296:	d80b      	bhi.n	800d2b0 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800d298:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800d29c:	3b01      	subs	r3, #1
 800d29e:	3368      	adds	r3, #104	; 0x68
 800d2a0:	443b      	add	r3, r7
 800d2a2:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800d2a6:	3b30      	subs	r3, #48	; 0x30
 800d2a8:	b2da      	uxtb	r2, r3
 800d2aa:	4b7b      	ldr	r3, [pc, #492]	; (800d498 <Chech_forSiemensCMD+0x328>)
 800d2ac:	701a      	strb	r2, [r3, #0]
 800d2ae:	e002      	b.n	800d2b6 <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800d2b0:	487a      	ldr	r0, [pc, #488]	; (800d49c <Chech_forSiemensCMD+0x32c>)
 800d2b2:	f015 fb5d 	bl	8022970 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d2bc:	e0d7      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800d2be:	4978      	ldr	r1, [pc, #480]	; (800d4a0 <Chech_forSiemensCMD+0x330>)
 800d2c0:	4878      	ldr	r0, [pc, #480]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d2c2:	f015 fab9 	bl	8022838 <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800d2c6:	4878      	ldr	r0, [pc, #480]	; (800d4a8 <Chech_forSiemensCMD+0x338>)
 800d2c8:	f015 fb52 	bl	8022970 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d2cc:	4b77      	ldr	r3, [pc, #476]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f043 0301 	orr.w	r3, r3, #1
 800d2d4:	4a75      	ldr	r2, [pc, #468]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d2d6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d2d8:	2301      	movs	r3, #1
 800d2da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d2de:	e0c6      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800d2e0:	4973      	ldr	r1, [pc, #460]	; (800d4b0 <Chech_forSiemensCMD+0x340>)
 800d2e2:	4870      	ldr	r0, [pc, #448]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d2e4:	f015 faa8 	bl	8022838 <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800d2e8:	4872      	ldr	r0, [pc, #456]	; (800d4b4 <Chech_forSiemensCMD+0x344>)
 800d2ea:	f015 fb41 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d2ee:	4b6f      	ldr	r3, [pc, #444]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d2f0:	2200      	movs	r2, #0
 800d2f2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d2f4:	4b6d      	ldr	r3, [pc, #436]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	f043 0302 	orr.w	r3, r3, #2
 800d2fc:	4a6b      	ldr	r2, [pc, #428]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d2fe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d300:	2301      	movs	r3, #1
 800d302:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d306:	e0b2      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800d308:	496b      	ldr	r1, [pc, #428]	; (800d4b8 <Chech_forSiemensCMD+0x348>)
 800d30a:	4866      	ldr	r0, [pc, #408]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d30c:	f015 fa94 	bl	8022838 <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800d310:	486a      	ldr	r0, [pc, #424]	; (800d4bc <Chech_forSiemensCMD+0x34c>)
 800d312:	f015 fb2d 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d316:	4b65      	ldr	r3, [pc, #404]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d318:	2200      	movs	r2, #0
 800d31a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d31c:	4b63      	ldr	r3, [pc, #396]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d31e:	681b      	ldr	r3, [r3, #0]
 800d320:	f043 0304 	orr.w	r3, r3, #4
 800d324:	4a61      	ldr	r2, [pc, #388]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d326:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d328:	2301      	movs	r3, #1
 800d32a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d32e:	e09e      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800d330:	4963      	ldr	r1, [pc, #396]	; (800d4c0 <Chech_forSiemensCMD+0x350>)
 800d332:	485c      	ldr	r0, [pc, #368]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d334:	f015 fa80 	bl	8022838 <iprintf>
				printf("INVALID_DES_PORT\n");
 800d338:	4862      	ldr	r0, [pc, #392]	; (800d4c4 <Chech_forSiemensCMD+0x354>)
 800d33a:	f015 fb19 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d33e:	4b5b      	ldr	r3, [pc, #364]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d340:	2200      	movs	r2, #0
 800d342:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d344:	4b59      	ldr	r3, [pc, #356]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d346:	681b      	ldr	r3, [r3, #0]
 800d348:	f043 0308 	orr.w	r3, r3, #8
 800d34c:	4a57      	ldr	r2, [pc, #348]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d34e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d350:	2301      	movs	r3, #1
 800d352:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d356:	e08a      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800d358:	495b      	ldr	r1, [pc, #364]	; (800d4c8 <Chech_forSiemensCMD+0x358>)
 800d35a:	4852      	ldr	r0, [pc, #328]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d35c:	f015 fa6c 	bl	8022838 <iprintf>
				printf("INVALID_SRC_PORT\n");
 800d360:	485a      	ldr	r0, [pc, #360]	; (800d4cc <Chech_forSiemensCMD+0x35c>)
 800d362:	f015 fb05 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d366:	4b51      	ldr	r3, [pc, #324]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d368:	2200      	movs	r2, #0
 800d36a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d36c:	4b4f      	ldr	r3, [pc, #316]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	f043 0310 	orr.w	r3, r3, #16
 800d374:	4a4d      	ldr	r2, [pc, #308]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d376:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d378:	2301      	movs	r3, #1
 800d37a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d37e:	e076      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800d380:	4953      	ldr	r1, [pc, #332]	; (800d4d0 <Chech_forSiemensCMD+0x360>)
 800d382:	4848      	ldr	r0, [pc, #288]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d384:	f015 fa58 	bl	8022838 <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800d388:	4852      	ldr	r0, [pc, #328]	; (800d4d4 <Chech_forSiemensCMD+0x364>)
 800d38a:	f015 faf1 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d38e:	4b47      	ldr	r3, [pc, #284]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d390:	2200      	movs	r2, #0
 800d392:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d394:	4b45      	ldr	r3, [pc, #276]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f043 0320 	orr.w	r3, r3, #32
 800d39c:	4a43      	ldr	r2, [pc, #268]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d39e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d3a0:	2301      	movs	r3, #1
 800d3a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d3a6:	e062      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800d3a8:	494b      	ldr	r1, [pc, #300]	; (800d4d8 <Chech_forSiemensCMD+0x368>)
 800d3aa:	484c      	ldr	r0, [pc, #304]	; (800d4dc <Chech_forSiemensCMD+0x36c>)
 800d3ac:	f015 fa44 	bl	8022838 <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800d3b0:	484b      	ldr	r0, [pc, #300]	; (800d4e0 <Chech_forSiemensCMD+0x370>)
 800d3b2:	f015 fadd 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d3b6:	4b3d      	ldr	r3, [pc, #244]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d3b8:	2200      	movs	r2, #0
 800d3ba:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d3bc:	4b3b      	ldr	r3, [pc, #236]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3c4:	4a39      	ldr	r2, [pc, #228]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d3c6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d3c8:	2301      	movs	r3, #1
 800d3ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d3ce:	e04e      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800d3d0:	4944      	ldr	r1, [pc, #272]	; (800d4e4 <Chech_forSiemensCMD+0x374>)
 800d3d2:	4834      	ldr	r0, [pc, #208]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d3d4:	f015 fa30 	bl	8022838 <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800d3d8:	4843      	ldr	r0, [pc, #268]	; (800d4e8 <Chech_forSiemensCMD+0x378>)
 800d3da:	f015 fac9 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d3de:	4b33      	ldr	r3, [pc, #204]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d3e0:	2200      	movs	r2, #0
 800d3e2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d3e4:	4b31      	ldr	r3, [pc, #196]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3ec:	4a2f      	ldr	r2, [pc, #188]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d3ee:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d3f0:	2301      	movs	r3, #1
 800d3f2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d3f6:	e03a      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800d3f8:	493c      	ldr	r1, [pc, #240]	; (800d4ec <Chech_forSiemensCMD+0x37c>)
 800d3fa:	482a      	ldr	r0, [pc, #168]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d3fc:	f015 fa1c 	bl	8022838 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800d400:	483b      	ldr	r0, [pc, #236]	; (800d4f0 <Chech_forSiemensCMD+0x380>)
 800d402:	f015 fab5 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d406:	4b29      	ldr	r3, [pc, #164]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d40c:	4b27      	ldr	r3, [pc, #156]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d414:	4a25      	ldr	r2, [pc, #148]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d416:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d418:	2301      	movs	r3, #1
 800d41a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d41e:	e026      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800d420:	4934      	ldr	r1, [pc, #208]	; (800d4f4 <Chech_forSiemensCMD+0x384>)
 800d422:	4820      	ldr	r0, [pc, #128]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d424:	f015 fa08 	bl	8022838 <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800d428:	4833      	ldr	r0, [pc, #204]	; (800d4f8 <Chech_forSiemensCMD+0x388>)
 800d42a:	f015 faa1 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d42e:	4b1f      	ldr	r3, [pc, #124]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d430:	2200      	movs	r2, #0
 800d432:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800d434:	4b1d      	ldr	r3, [pc, #116]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d43c:	4a1b      	ldr	r2, [pc, #108]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d43e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800d440:	2301      	movs	r3, #1
 800d442:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d446:	e012      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800d448:	492c      	ldr	r1, [pc, #176]	; (800d4fc <Chech_forSiemensCMD+0x38c>)
 800d44a:	4816      	ldr	r0, [pc, #88]	; (800d4a4 <Chech_forSiemensCMD+0x334>)
 800d44c:	f015 f9f4 	bl	8022838 <iprintf>
				printf("CLEAR ALL\n");
 800d450:	482b      	ldr	r0, [pc, #172]	; (800d500 <Chech_forSiemensCMD+0x390>)
 800d452:	f015 fa8d 	bl	8022970 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800d456:	4b15      	ldr	r3, [pc, #84]	; (800d4ac <Chech_forSiemensCMD+0x33c>)
 800d458:	2200      	movs	r2, #0
 800d45a:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800d45c:	2301      	movs	r3, #1
 800d45e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800d462:	e004      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800d464:	480d      	ldr	r0, [pc, #52]	; (800d49c <Chech_forSiemensCMD+0x32c>)
 800d466:	f015 fa83 	bl	8022970 <puts>
 800d46a:	e000      	b.n	800d46e <Chech_forSiemensCMD+0x2fe>
			}
		}
 800d46c:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800d46e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800d472:	2b01      	cmp	r3, #1
 800d474:	d147      	bne.n	800d506 <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800d476:	f240 2005 	movw	r0, #517	; 0x205
 800d47a:	f002 f9f9 	bl	800f870 <TransmitCanPkt>
 800d47e:	e042      	b.n	800d506 <Chech_forSiemensCMD+0x396>
 800d480:	2000a3e4 	.word	0x2000a3e4
 800d484:	080263b8 	.word	0x080263b8
 800d488:	20000644 	.word	0x20000644
 800d48c:	080263d0 	.word	0x080263d0
 800d490:	20004bc6 	.word	0x20004bc6
 800d494:	08026410 	.word	0x08026410
 800d498:	20000645 	.word	0x20000645
 800d49c:	08026424 	.word	0x08026424
 800d4a0:	20004bf8 	.word	0x20004bf8
 800d4a4:	08026440 	.word	0x08026440
 800d4a8:	08026450 	.word	0x08026450
 800d4ac:	20003854 	.word	0x20003854
 800d4b0:	20004c2a 	.word	0x20004c2a
 800d4b4:	08026468 	.word	0x08026468
 800d4b8:	20004c5c 	.word	0x20004c5c
 800d4bc:	08026480 	.word	0x08026480
 800d4c0:	20004c8e 	.word	0x20004c8e
 800d4c4:	08026494 	.word	0x08026494
 800d4c8:	20004cc0 	.word	0x20004cc0
 800d4cc:	080264a8 	.word	0x080264a8
 800d4d0:	20004cf2 	.word	0x20004cf2
 800d4d4:	080264bc 	.word	0x080264bc
 800d4d8:	20004d24 	.word	0x20004d24
 800d4dc:	080264d8 	.word	0x080264d8
 800d4e0:	080264f0 	.word	0x080264f0
 800d4e4:	20004d56 	.word	0x20004d56
 800d4e8:	08026504 	.word	0x08026504
 800d4ec:	20004d88 	.word	0x20004d88
 800d4f0:	0802651c 	.word	0x0802651c
 800d4f4:	20004dba 	.word	0x20004dba
 800d4f8:	0802653c 	.word	0x0802653c
 800d4fc:	20004dec 	.word	0x20004dec
 800d500:	0802655c 	.word	0x0802655c
		return;
 800d504:	bf00      	nop
		}
	}
}
 800d506:	3768      	adds	r7, #104	; 0x68
 800d508:	46bd      	mov	sp, r7
 800d50a:	bd80      	pop	{r7, pc}

0800d50c <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d50c:	b4b0      	push	{r4, r5, r7}
 800d50e:	b083      	sub	sp, #12
 800d510:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d512:	2300      	movs	r3, #0
 800d514:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d516:	79fb      	ldrb	r3, [r7, #7]
 800d518:	4aa6      	ldr	r2, [pc, #664]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d51a:	2132      	movs	r1, #50	; 0x32
 800d51c:	fb01 f303 	mul.w	r3, r1, r3
 800d520:	4413      	add	r3, r2
 800d522:	2224      	movs	r2, #36	; 0x24
 800d524:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d526:	79fb      	ldrb	r3, [r7, #7]
 800d528:	4aa2      	ldr	r2, [pc, #648]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d52a:	2132      	movs	r1, #50	; 0x32
 800d52c:	fb01 f303 	mul.w	r3, r1, r3
 800d530:	4413      	add	r3, r2
 800d532:	3301      	adds	r3, #1
 800d534:	2201      	movs	r2, #1
 800d536:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d538:	79fb      	ldrb	r3, [r7, #7]
 800d53a:	4a9e      	ldr	r2, [pc, #632]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d53c:	2132      	movs	r1, #50	; 0x32
 800d53e:	fb01 f303 	mul.w	r3, r1, r3
 800d542:	4413      	add	r3, r2
 800d544:	3302      	adds	r3, #2
 800d546:	2230      	movs	r2, #48	; 0x30
 800d548:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d54a:	79fb      	ldrb	r3, [r7, #7]
 800d54c:	4a99      	ldr	r2, [pc, #612]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d54e:	2132      	movs	r1, #50	; 0x32
 800d550:	fb01 f303 	mul.w	r3, r1, r3
 800d554:	4413      	add	r3, r2
 800d556:	3303      	adds	r3, #3
 800d558:	2240      	movs	r2, #64	; 0x40
 800d55a:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d55c:	79fb      	ldrb	r3, [r7, #7]
 800d55e:	4a95      	ldr	r2, [pc, #596]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d560:	2132      	movs	r1, #50	; 0x32
 800d562:	fb01 f303 	mul.w	r3, r1, r3
 800d566:	4413      	add	r3, r2
 800d568:	3304      	adds	r3, #4
 800d56a:	22c0      	movs	r2, #192	; 0xc0
 800d56c:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d56e:	79fb      	ldrb	r3, [r7, #7]
 800d570:	4a90      	ldr	r2, [pc, #576]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d572:	2132      	movs	r1, #50	; 0x32
 800d574:	fb01 f303 	mul.w	r3, r1, r3
 800d578:	4413      	add	r3, r2
 800d57a:	3305      	adds	r3, #5
 800d57c:	224e      	movs	r2, #78	; 0x4e
 800d57e:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d580:	79fb      	ldrb	r3, [r7, #7]
 800d582:	4a8c      	ldr	r2, [pc, #560]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d584:	2132      	movs	r1, #50	; 0x32
 800d586:	fb01 f303 	mul.w	r3, r1, r3
 800d58a:	4413      	add	r3, r2
 800d58c:	3306      	adds	r3, #6
 800d58e:	2226      	movs	r2, #38	; 0x26
 800d590:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d592:	79fb      	ldrb	r3, [r7, #7]
 800d594:	3301      	adds	r3, #1
 800d596:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d598:	79fb      	ldrb	r3, [r7, #7]
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	71fa      	strb	r2, [r7, #7]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	2332      	movs	r3, #50	; 0x32
 800d5a2:	fb02 f303 	mul.w	r3, r2, r3
 800d5a6:	4a83      	ldr	r2, [pc, #524]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d5a8:	4413      	add	r3, r2
 800d5aa:	4983      	ldr	r1, [pc, #524]	; (800d7b8 <Update_SiemensCommands+0x2ac>)
 800d5ac:	461a      	mov	r2, r3
 800d5ae:	460b      	mov	r3, r1
 800d5b0:	cb03      	ldmia	r3!, {r0, r1}
 800d5b2:	6010      	str	r0, [r2, #0]
 800d5b4:	6051      	str	r1, [r2, #4]
 800d5b6:	8819      	ldrh	r1, [r3, #0]
 800d5b8:	789b      	ldrb	r3, [r3, #2]
 800d5ba:	8111      	strh	r1, [r2, #8]
 800d5bc:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d5be:	79fb      	ldrb	r3, [r7, #7]
 800d5c0:	1c5a      	adds	r2, r3, #1
 800d5c2:	71fa      	strb	r2, [r7, #7]
 800d5c4:	461a      	mov	r2, r3
 800d5c6:	2332      	movs	r3, #50	; 0x32
 800d5c8:	fb02 f303 	mul.w	r3, r2, r3
 800d5cc:	4a79      	ldr	r2, [pc, #484]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d5ce:	4413      	add	r3, r2
 800d5d0:	4a7a      	ldr	r2, [pc, #488]	; (800d7bc <Update_SiemensCommands+0x2b0>)
 800d5d2:	461d      	mov	r5, r3
 800d5d4:	4614      	mov	r4, r2
 800d5d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d5d8:	6028      	str	r0, [r5, #0]
 800d5da:	6069      	str	r1, [r5, #4]
 800d5dc:	60aa      	str	r2, [r5, #8]
 800d5de:	60eb      	str	r3, [r5, #12]
 800d5e0:	6820      	ldr	r0, [r4, #0]
 800d5e2:	6128      	str	r0, [r5, #16]
 800d5e4:	7923      	ldrb	r3, [r4, #4]
 800d5e6:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d5e8:	79fb      	ldrb	r3, [r7, #7]
 800d5ea:	1c5a      	adds	r2, r3, #1
 800d5ec:	71fa      	strb	r2, [r7, #7]
 800d5ee:	461a      	mov	r2, r3
 800d5f0:	2332      	movs	r3, #50	; 0x32
 800d5f2:	fb02 f303 	mul.w	r3, r2, r3
 800d5f6:	4a6f      	ldr	r2, [pc, #444]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d5f8:	4413      	add	r3, r2
 800d5fa:	4a71      	ldr	r2, [pc, #452]	; (800d7c0 <Update_SiemensCommands+0x2b4>)
 800d5fc:	461d      	mov	r5, r3
 800d5fe:	4614      	mov	r4, r2
 800d600:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d602:	6028      	str	r0, [r5, #0]
 800d604:	6069      	str	r1, [r5, #4]
 800d606:	60aa      	str	r2, [r5, #8]
 800d608:	60eb      	str	r3, [r5, #12]
 800d60a:	6820      	ldr	r0, [r4, #0]
 800d60c:	6128      	str	r0, [r5, #16]
 800d60e:	7923      	ldrb	r3, [r4, #4]
 800d610:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d612:	79fb      	ldrb	r3, [r7, #7]
 800d614:	1c5a      	adds	r2, r3, #1
 800d616:	71fa      	strb	r2, [r7, #7]
 800d618:	461a      	mov	r2, r3
 800d61a:	2332      	movs	r3, #50	; 0x32
 800d61c:	fb02 f303 	mul.w	r3, r2, r3
 800d620:	4a64      	ldr	r2, [pc, #400]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d622:	4413      	add	r3, r2
 800d624:	4a67      	ldr	r2, [pc, #412]	; (800d7c4 <Update_SiemensCommands+0x2b8>)
 800d626:	461d      	mov	r5, r3
 800d628:	4614      	mov	r4, r2
 800d62a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d62c:	6028      	str	r0, [r5, #0]
 800d62e:	6069      	str	r1, [r5, #4]
 800d630:	60aa      	str	r2, [r5, #8]
 800d632:	60eb      	str	r3, [r5, #12]
 800d634:	7823      	ldrb	r3, [r4, #0]
 800d636:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d638:	79fb      	ldrb	r3, [r7, #7]
 800d63a:	1c5a      	adds	r2, r3, #1
 800d63c:	71fa      	strb	r2, [r7, #7]
 800d63e:	461a      	mov	r2, r3
 800d640:	2332      	movs	r3, #50	; 0x32
 800d642:	fb02 f303 	mul.w	r3, r2, r3
 800d646:	4a5b      	ldr	r2, [pc, #364]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d648:	4413      	add	r3, r2
 800d64a:	4a5f      	ldr	r2, [pc, #380]	; (800d7c8 <Update_SiemensCommands+0x2bc>)
 800d64c:	461d      	mov	r5, r3
 800d64e:	4614      	mov	r4, r2
 800d650:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d652:	6028      	str	r0, [r5, #0]
 800d654:	6069      	str	r1, [r5, #4]
 800d656:	60aa      	str	r2, [r5, #8]
 800d658:	60eb      	str	r3, [r5, #12]
 800d65a:	7823      	ldrb	r3, [r4, #0]
 800d65c:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d65e:	79fb      	ldrb	r3, [r7, #7]
 800d660:	1c5a      	adds	r2, r3, #1
 800d662:	71fa      	strb	r2, [r7, #7]
 800d664:	461a      	mov	r2, r3
 800d666:	2332      	movs	r3, #50	; 0x32
 800d668:	fb02 f303 	mul.w	r3, r2, r3
 800d66c:	4a51      	ldr	r2, [pc, #324]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d66e:	4413      	add	r3, r2
 800d670:	4a56      	ldr	r2, [pc, #344]	; (800d7cc <Update_SiemensCommands+0x2c0>)
 800d672:	461d      	mov	r5, r3
 800d674:	4614      	mov	r4, r2
 800d676:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d678:	6028      	str	r0, [r5, #0]
 800d67a:	6069      	str	r1, [r5, #4]
 800d67c:	60aa      	str	r2, [r5, #8]
 800d67e:	60eb      	str	r3, [r5, #12]
 800d680:	7823      	ldrb	r3, [r4, #0]
 800d682:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d684:	79fb      	ldrb	r3, [r7, #7]
 800d686:	1c5a      	adds	r2, r3, #1
 800d688:	71fa      	strb	r2, [r7, #7]
 800d68a:	461a      	mov	r2, r3
 800d68c:	2332      	movs	r3, #50	; 0x32
 800d68e:	fb02 f303 	mul.w	r3, r2, r3
 800d692:	4a48      	ldr	r2, [pc, #288]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d694:	4413      	add	r3, r2
 800d696:	4a4e      	ldr	r2, [pc, #312]	; (800d7d0 <Update_SiemensCommands+0x2c4>)
 800d698:	461d      	mov	r5, r3
 800d69a:	4614      	mov	r4, r2
 800d69c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d69e:	6028      	str	r0, [r5, #0]
 800d6a0:	6069      	str	r1, [r5, #4]
 800d6a2:	60aa      	str	r2, [r5, #8]
 800d6a4:	60eb      	str	r3, [r5, #12]
 800d6a6:	cc03      	ldmia	r4!, {r0, r1}
 800d6a8:	6128      	str	r0, [r5, #16]
 800d6aa:	6169      	str	r1, [r5, #20]
 800d6ac:	8823      	ldrh	r3, [r4, #0]
 800d6ae:	78a2      	ldrb	r2, [r4, #2]
 800d6b0:	832b      	strh	r3, [r5, #24]
 800d6b2:	4613      	mov	r3, r2
 800d6b4:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d6b6:	79fb      	ldrb	r3, [r7, #7]
 800d6b8:	1c5a      	adds	r2, r3, #1
 800d6ba:	71fa      	strb	r2, [r7, #7]
 800d6bc:	461a      	mov	r2, r3
 800d6be:	2332      	movs	r3, #50	; 0x32
 800d6c0:	fb02 f303 	mul.w	r3, r2, r3
 800d6c4:	4a3b      	ldr	r2, [pc, #236]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d6c6:	4413      	add	r3, r2
 800d6c8:	4a42      	ldr	r2, [pc, #264]	; (800d7d4 <Update_SiemensCommands+0x2c8>)
 800d6ca:	461d      	mov	r5, r3
 800d6cc:	4614      	mov	r4, r2
 800d6ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6d0:	6028      	str	r0, [r5, #0]
 800d6d2:	6069      	str	r1, [r5, #4]
 800d6d4:	60aa      	str	r2, [r5, #8]
 800d6d6:	60eb      	str	r3, [r5, #12]
 800d6d8:	8823      	ldrh	r3, [r4, #0]
 800d6da:	78a2      	ldrb	r2, [r4, #2]
 800d6dc:	822b      	strh	r3, [r5, #16]
 800d6de:	4613      	mov	r3, r2
 800d6e0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d6e2:	79fb      	ldrb	r3, [r7, #7]
 800d6e4:	1c5a      	adds	r2, r3, #1
 800d6e6:	71fa      	strb	r2, [r7, #7]
 800d6e8:	461a      	mov	r2, r3
 800d6ea:	2332      	movs	r3, #50	; 0x32
 800d6ec:	fb02 f303 	mul.w	r3, r2, r3
 800d6f0:	4a30      	ldr	r2, [pc, #192]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d6f2:	4413      	add	r3, r2
 800d6f4:	4a38      	ldr	r2, [pc, #224]	; (800d7d8 <Update_SiemensCommands+0x2cc>)
 800d6f6:	461d      	mov	r5, r3
 800d6f8:	4614      	mov	r4, r2
 800d6fa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d6fc:	6028      	str	r0, [r5, #0]
 800d6fe:	6069      	str	r1, [r5, #4]
 800d700:	60aa      	str	r2, [r5, #8]
 800d702:	60eb      	str	r3, [r5, #12]
 800d704:	cc03      	ldmia	r4!, {r0, r1}
 800d706:	6128      	str	r0, [r5, #16]
 800d708:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d70a:	79fb      	ldrb	r3, [r7, #7]
 800d70c:	1c5a      	adds	r2, r3, #1
 800d70e:	71fa      	strb	r2, [r7, #7]
 800d710:	461a      	mov	r2, r3
 800d712:	2332      	movs	r3, #50	; 0x32
 800d714:	fb02 f303 	mul.w	r3, r2, r3
 800d718:	4a26      	ldr	r2, [pc, #152]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d71a:	4413      	add	r3, r2
 800d71c:	4a2f      	ldr	r2, [pc, #188]	; (800d7dc <Update_SiemensCommands+0x2d0>)
 800d71e:	461c      	mov	r4, r3
 800d720:	4615      	mov	r5, r2
 800d722:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d724:	6020      	str	r0, [r4, #0]
 800d726:	6061      	str	r1, [r4, #4]
 800d728:	60a2      	str	r2, [r4, #8]
 800d72a:	60e3      	str	r3, [r4, #12]
 800d72c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d72e:	6120      	str	r0, [r4, #16]
 800d730:	6161      	str	r1, [r4, #20]
 800d732:	61a2      	str	r2, [r4, #24]
 800d734:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d736:	79fb      	ldrb	r3, [r7, #7]
 800d738:	1c5a      	adds	r2, r3, #1
 800d73a:	71fa      	strb	r2, [r7, #7]
 800d73c:	461a      	mov	r2, r3
 800d73e:	2332      	movs	r3, #50	; 0x32
 800d740:	fb02 f303 	mul.w	r3, r2, r3
 800d744:	4a1b      	ldr	r2, [pc, #108]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d746:	4413      	add	r3, r2
 800d748:	4a25      	ldr	r2, [pc, #148]	; (800d7e0 <Update_SiemensCommands+0x2d4>)
 800d74a:	461d      	mov	r5, r3
 800d74c:	4614      	mov	r4, r2
 800d74e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d750:	6028      	str	r0, [r5, #0]
 800d752:	6069      	str	r1, [r5, #4]
 800d754:	60aa      	str	r2, [r5, #8]
 800d756:	60eb      	str	r3, [r5, #12]
 800d758:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d75a:	6128      	str	r0, [r5, #16]
 800d75c:	6169      	str	r1, [r5, #20]
 800d75e:	61aa      	str	r2, [r5, #24]
 800d760:	7823      	ldrb	r3, [r4, #0]
 800d762:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d764:	79fb      	ldrb	r3, [r7, #7]
 800d766:	1c5a      	adds	r2, r3, #1
 800d768:	71fa      	strb	r2, [r7, #7]
 800d76a:	461a      	mov	r2, r3
 800d76c:	2332      	movs	r3, #50	; 0x32
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
 800d772:	4a10      	ldr	r2, [pc, #64]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d774:	4413      	add	r3, r2
 800d776:	491b      	ldr	r1, [pc, #108]	; (800d7e4 <Update_SiemensCommands+0x2d8>)
 800d778:	461a      	mov	r2, r3
 800d77a:	460b      	mov	r3, r1
 800d77c:	cb03      	ldmia	r3!, {r0, r1}
 800d77e:	6010      	str	r0, [r2, #0]
 800d780:	6051      	str	r1, [r2, #4]
 800d782:	881b      	ldrh	r3, [r3, #0]
 800d784:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d786:	79fb      	ldrb	r3, [r7, #7]
 800d788:	1c5a      	adds	r2, r3, #1
 800d78a:	71fa      	strb	r2, [r7, #7]
 800d78c:	461a      	mov	r2, r3
 800d78e:	2332      	movs	r3, #50	; 0x32
 800d790:	fb02 f303 	mul.w	r3, r2, r3
 800d794:	4a07      	ldr	r2, [pc, #28]	; (800d7b4 <Update_SiemensCommands+0x2a8>)
 800d796:	4413      	add	r3, r2
 800d798:	4a13      	ldr	r2, [pc, #76]	; (800d7e8 <Update_SiemensCommands+0x2dc>)
 800d79a:	6810      	ldr	r0, [r2, #0]
 800d79c:	6018      	str	r0, [r3, #0]
 800d79e:	7912      	ldrb	r2, [r2, #4]
 800d7a0:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d7a2:	4a12      	ldr	r2, [pc, #72]	; (800d7ec <Update_SiemensCommands+0x2e0>)
 800d7a4:	79fb      	ldrb	r3, [r7, #7]
 800d7a6:	7013      	strb	r3, [r2, #0]
}
 800d7a8:	bf00      	nop
 800d7aa:	370c      	adds	r7, #12
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bcb0      	pop	{r4, r5, r7}
 800d7b0:	4770      	bx	lr
 800d7b2:	bf00      	nop
 800d7b4:	20004b94 	.word	0x20004b94
 800d7b8:	08026568 	.word	0x08026568
 800d7bc:	08026450 	.word	0x08026450
 800d7c0:	08026468 	.word	0x08026468
 800d7c4:	08026480 	.word	0x08026480
 800d7c8:	08026494 	.word	0x08026494
 800d7cc:	080264a8 	.word	0x080264a8
 800d7d0:	08026574 	.word	0x08026574
 800d7d4:	080264f0 	.word	0x080264f0
 800d7d8:	08026504 	.word	0x08026504
 800d7dc:	0802651c 	.word	0x0802651c
 800d7e0:	0802653c 	.word	0x0802653c
 800d7e4:	08026590 	.word	0x08026590
 800d7e8:	0802659c 	.word	0x0802659c
 800d7ec:	20004f7c 	.word	0x20004f7c

0800d7f0 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d7f0:	b590      	push	{r4, r7, lr}
 800d7f2:	b085      	sub	sp, #20
 800d7f4:	af00      	add	r7, sp, #0
 800d7f6:	6078      	str	r0, [r7, #4]
 800d7f8:	460b      	mov	r3, r1
 800d7fa:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d7fc:	2300      	movs	r3, #0
 800d7fe:	73fb      	strb	r3, [r7, #15]
 800d800:	e01c      	b.n	800d83c <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800d802:	7bfb      	ldrb	r3, [r7, #15]
 800d804:	2232      	movs	r2, #50	; 0x32
 800d806:	fb02 f303 	mul.w	r3, r2, r3
 800d80a:	4a11      	ldr	r2, [pc, #68]	; (800d850 <Is_SiemensCommand_Valid+0x60>)
 800d80c:	189c      	adds	r4, r3, r2
 800d80e:	7bfb      	ldrb	r3, [r7, #15]
 800d810:	2232      	movs	r2, #50	; 0x32
 800d812:	fb02 f303 	mul.w	r3, r2, r3
 800d816:	4a0e      	ldr	r2, [pc, #56]	; (800d850 <Is_SiemensCommand_Valid+0x60>)
 800d818:	4413      	add	r3, r2
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7f2 fd1a 	bl	8000254 <strlen>
 800d820:	4603      	mov	r3, r0
 800d822:	461a      	mov	r2, r3
 800d824:	4621      	mov	r1, r4
 800d826:	6878      	ldr	r0, [r7, #4]
 800d828:	f014 fee6 	bl	80225f8 <memcmp>
 800d82c:	4603      	mov	r3, r0
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800d832:	7bfb      	ldrb	r3, [r7, #15]
 800d834:	e008      	b.n	800d848 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d836:	7bfb      	ldrb	r3, [r7, #15]
 800d838:	3301      	adds	r3, #1
 800d83a:	73fb      	strb	r3, [r7, #15]
 800d83c:	4b05      	ldr	r3, [pc, #20]	; (800d854 <Is_SiemensCommand_Valid+0x64>)
 800d83e:	781b      	ldrb	r3, [r3, #0]
 800d840:	7bfa      	ldrb	r2, [r7, #15]
 800d842:	429a      	cmp	r2, r3
 800d844:	d3dd      	bcc.n	800d802 <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800d846:	23ff      	movs	r3, #255	; 0xff
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd90      	pop	{r4, r7, pc}
 800d850:	20004b94 	.word	0x20004b94
 800d854:	20004f7c 	.word	0x20004f7c

0800d858 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800d858:	b480      	push	{r7}
 800d85a:	b087      	sub	sp, #28
 800d85c:	af00      	add	r7, sp, #0
 800d85e:	6078      	str	r0, [r7, #4]
 800d860:	460b      	mov	r3, r1
 800d862:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800d864:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d868:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800d86a:	2300      	movs	r3, #0
 800d86c:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800d86e:	2300      	movs	r3, #0
 800d870:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800d872:	2300      	movs	r3, #0
 800d874:	82bb      	strh	r3, [r7, #20]
 800d876:	e022      	b.n	800d8be <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800d878:	8abb      	ldrh	r3, [r7, #20]
 800d87a:	687a      	ldr	r2, [r7, #4]
 800d87c:	4413      	add	r3, r2
 800d87e:	781b      	ldrb	r3, [r3, #0]
 800d880:	b29a      	uxth	r2, r3
 800d882:	8afb      	ldrh	r3, [r7, #22]
 800d884:	4053      	eors	r3, r2
 800d886:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d888:	2300      	movs	r3, #0
 800d88a:	613b      	str	r3, [r7, #16]
 800d88c:	e011      	b.n	800d8b2 <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800d88e:	8afb      	ldrh	r3, [r7, #22]
 800d890:	f003 0301 	and.w	r3, r3, #1
 800d894:	2b00      	cmp	r3, #0
 800d896:	d006      	beq.n	800d8a6 <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800d898:	8afb      	ldrh	r3, [r7, #22]
 800d89a:	085b      	lsrs	r3, r3, #1
 800d89c:	b29a      	uxth	r2, r3
 800d89e:	4b17      	ldr	r3, [pc, #92]	; (800d8fc <Siemens_CRC+0xa4>)
 800d8a0:	4053      	eors	r3, r2
 800d8a2:	82fb      	strh	r3, [r7, #22]
 800d8a4:	e002      	b.n	800d8ac <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800d8a6:	8afb      	ldrh	r3, [r7, #22]
 800d8a8:	085b      	lsrs	r3, r3, #1
 800d8aa:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	3301      	adds	r3, #1
 800d8b0:	613b      	str	r3, [r7, #16]
 800d8b2:	693b      	ldr	r3, [r7, #16]
 800d8b4:	2b07      	cmp	r3, #7
 800d8b6:	ddea      	ble.n	800d88e <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800d8b8:	8abb      	ldrh	r3, [r7, #20]
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	82bb      	strh	r3, [r7, #20]
 800d8be:	8aba      	ldrh	r2, [r7, #20]
 800d8c0:	887b      	ldrh	r3, [r7, #2]
 800d8c2:	429a      	cmp	r2, r3
 800d8c4:	d3d8      	bcc.n	800d878 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800d8c6:	8afb      	ldrh	r3, [r7, #22]
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800d8cc:	8afb      	ldrh	r3, [r7, #22]
 800d8ce:	0a1b      	lsrs	r3, r3, #8
 800d8d0:	b29b      	uxth	r3, r3
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800d8d6:	7b3b      	ldrb	r3, [r7, #12]
 800d8d8:	021b      	lsls	r3, r3, #8
 800d8da:	b21a      	sxth	r2, r3
 800d8dc:	7b7b      	ldrb	r3, [r7, #13]
 800d8de:	b21b      	sxth	r3, r3
 800d8e0:	4313      	orrs	r3, r2
 800d8e2:	b21b      	sxth	r3, r3
 800d8e4:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800d8e6:	8afb      	ldrh	r3, [r7, #22]
 800d8e8:	43db      	mvns	r3, r3
 800d8ea:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800d8ec:	8afb      	ldrh	r3, [r7, #22]
}
 800d8ee:	4618      	mov	r0, r3
 800d8f0:	371c      	adds	r7, #28
 800d8f2:	46bd      	mov	sp, r7
 800d8f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f8:	4770      	bx	lr
 800d8fa:	bf00      	nop
 800d8fc:	ffff8408 	.word	0xffff8408

0800d900 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800d900:	b580      	push	{r7, lr}
 800d902:	b086      	sub	sp, #24
 800d904:	af00      	add	r7, sp, #0
 800d906:	603a      	str	r2, [r7, #0]
 800d908:	461a      	mov	r2, r3
 800d90a:	4603      	mov	r3, r0
 800d90c:	71fb      	strb	r3, [r7, #7]
 800d90e:	460b      	mov	r3, r1
 800d910:	71bb      	strb	r3, [r7, #6]
 800d912:	4613      	mov	r3, r2
 800d914:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800d916:	2300      	movs	r3, #0
 800d918:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800d91a:	2300      	movs	r3, #0
 800d91c:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800d91e:	797b      	ldrb	r3, [r7, #5]
 800d920:	2b02      	cmp	r3, #2
 800d922:	d010      	beq.n	800d946 <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800d924:	79bb      	ldrb	r3, [r7, #6]
 800d926:	08db      	lsrs	r3, r3, #3
 800d928:	b2db      	uxtb	r3, r3
 800d92a:	797a      	ldrb	r2, [r7, #5]
 800d92c:	4619      	mov	r1, r3
 800d92e:	6838      	ldr	r0, [r7, #0]
 800d930:	f000 f8d0 	bl	800dad4 <Verify_parity>
 800d934:	4603      	mov	r3, r0
 800d936:	2b00      	cmp	r3, #0
 800d938:	d110      	bne.n	800d95c <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800d93a:	4840      	ldr	r0, [pc, #256]	; (800da3c <Extract_Parity_Data+0x13c>)
 800d93c:	f015 f818 	bl	8022970 <puts>
			return -1;
 800d940:	f04f 33ff 	mov.w	r3, #4294967295
 800d944:	e075      	b.n	800da32 <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800d946:	79fb      	ldrb	r3, [r7, #7]
 800d948:	b29b      	uxth	r3, r3
 800d94a:	79ba      	ldrb	r2, [r7, #6]
 800d94c:	b291      	uxth	r1, r2
 800d94e:	683a      	ldr	r2, [r7, #0]
 800d950:	4618      	mov	r0, r3
 800d952:	f7f2 fe5f 	bl	8000614 <ExtractBits>
 800d956:	6138      	str	r0, [r7, #16]
		return Return_value;
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	e06a      	b.n	800da32 <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800d95c:	79bb      	ldrb	r3, [r7, #6]
 800d95e:	2b08      	cmp	r3, #8
 800d960:	d108      	bne.n	800d974 <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800d968:	7dfb      	ldrb	r3, [r7, #23]
 800d96a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d96e:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800d970:	7dfb      	ldrb	r3, [r7, #23]
 800d972:	e05e      	b.n	800da32 <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800d974:	79bb      	ldrb	r3, [r7, #6]
 800d976:	2b18      	cmp	r3, #24
 800d978:	d15a      	bne.n	800da30 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	781b      	ldrb	r3, [r3, #0]
 800d97e:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800d980:	7dfb      	ldrb	r3, [r7, #23]
 800d982:	f003 0301 	and.w	r3, r3, #1
 800d986:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800d988:	7dfb      	ldrb	r3, [r7, #23]
 800d98a:	085b      	lsrs	r3, r3, #1
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	f003 0301 	and.w	r3, r3, #1
 800d992:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800d994:	7dfb      	ldrb	r3, [r7, #23]
 800d996:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d99a:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800d99c:	7dfb      	ldrb	r3, [r7, #23]
 800d99e:	089b      	lsrs	r3, r3, #2
 800d9a0:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800d9a2:	7dfb      	ldrb	r3, [r7, #23]
 800d9a4:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800d9a6:	683b      	ldr	r3, [r7, #0]
 800d9a8:	785b      	ldrb	r3, [r3, #1]
 800d9aa:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800d9ac:	7dfb      	ldrb	r3, [r7, #23]
 800d9ae:	f003 0301 	and.w	r3, r3, #1
 800d9b2:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800d9b4:	7dfb      	ldrb	r3, [r7, #23]
 800d9b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ba:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800d9bc:	7dfb      	ldrb	r3, [r7, #23]
 800d9be:	085b      	lsrs	r3, r3, #1
 800d9c0:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d9c2:	7bbb      	ldrb	r3, [r7, #14]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <Extract_Parity_Data+0xd2>
 800d9c8:	7dfb      	ldrb	r3, [r7, #23]
 800d9ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ce:	75fb      	strb	r3, [r7, #23]
 800d9d0:	e003      	b.n	800d9da <Extract_Parity_Data+0xda>
 800d9d2:	7dfb      	ldrb	r3, [r7, #23]
 800d9d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d9d8:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800d9da:	7bfb      	ldrb	r3, [r7, #15]
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d104      	bne.n	800d9ea <Extract_Parity_Data+0xea>
 800d9e0:	7dfb      	ldrb	r3, [r7, #23]
 800d9e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d9e6:	75fb      	strb	r3, [r7, #23]
 800d9e8:	e003      	b.n	800d9f2 <Extract_Parity_Data+0xf2>
 800d9ea:	7dfb      	ldrb	r3, [r7, #23]
 800d9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f0:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d9f2:	693b      	ldr	r3, [r7, #16]
 800d9f4:	021b      	lsls	r3, r3, #8
 800d9f6:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d9f8:	7dfb      	ldrb	r3, [r7, #23]
 800d9fa:	693a      	ldr	r2, [r7, #16]
 800d9fc:	4413      	add	r3, r2
 800d9fe:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800da00:	683b      	ldr	r3, [r7, #0]
 800da02:	789b      	ldrb	r3, [r3, #2]
 800da04:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800da06:	7b7b      	ldrb	r3, [r7, #13]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d104      	bne.n	800da16 <Extract_Parity_Data+0x116>
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
 800da0e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da12:	75fb      	strb	r3, [r7, #23]
 800da14:	e003      	b.n	800da1e <Extract_Parity_Data+0x11e>
 800da16:	7dfb      	ldrb	r3, [r7, #23]
 800da18:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da1c:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800da1e:	693b      	ldr	r3, [r7, #16]
 800da20:	021b      	lsls	r3, r3, #8
 800da22:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	693a      	ldr	r2, [r7, #16]
 800da28:	4413      	add	r3, r2
 800da2a:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	e000      	b.n	800da32 <Extract_Parity_Data+0x132>
	}
	return 0;
 800da30:	2300      	movs	r3, #0
}
 800da32:	4618      	mov	r0, r3
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	080265a4 	.word	0x080265a4

0800da40 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800da40:	b480      	push	{r7}
 800da42:	b085      	sub	sp, #20
 800da44:	af00      	add	r7, sp, #0
 800da46:	4603      	mov	r3, r0
 800da48:	460a      	mov	r2, r1
 800da4a:	71fb      	strb	r3, [r7, #7]
 800da4c:	4613      	mov	r3, r2
 800da4e:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800da54:	2300      	movs	r3, #0
 800da56:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800da58:	2306      	movs	r3, #6
 800da5a:	73fb      	strb	r3, [r7, #15]
 800da5c:	e014      	b.n	800da88 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800da5e:	79fa      	ldrb	r2, [r7, #7]
 800da60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da64:	fa42 f303 	asr.w	r3, r2, r3
 800da68:	f003 0301 	and.w	r3, r3, #1
 800da6c:	2b00      	cmp	r3, #0
 800da6e:	d005      	beq.n	800da7c <Calculate_Parity+0x3c>
		{
			count++;
 800da70:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800da74:	b2db      	uxtb	r3, r3
 800da76:	3301      	adds	r3, #1
 800da78:	b2db      	uxtb	r3, r3
 800da7a:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800da7c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da80:	b2db      	uxtb	r3, r3
 800da82:	3b01      	subs	r3, #1
 800da84:	b2db      	uxtb	r3, r3
 800da86:	73fb      	strb	r3, [r7, #15]
 800da88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	dae6      	bge.n	800da5e <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800da90:	79bb      	ldrb	r3, [r7, #6]
 800da92:	2b00      	cmp	r3, #0
 800da94:	d109      	bne.n	800daaa <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800da96:	7bbb      	ldrb	r3, [r7, #14]
 800da98:	f003 0301 	and.w	r3, r3, #1
 800da9c:	b2db      	uxtb	r3, r3
 800da9e:	2b00      	cmp	r3, #0
 800daa0:	d101      	bne.n	800daa6 <Calculate_Parity+0x66>
		{
			return 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	e00f      	b.n	800dac6 <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800daa6:	2301      	movs	r3, #1
 800daa8:	e00d      	b.n	800dac6 <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800daaa:	79bb      	ldrb	r3, [r7, #6]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d109      	bne.n	800dac4 <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800dab0:	7bbb      	ldrb	r3, [r7, #14]
 800dab2:	f003 0301 	and.w	r3, r3, #1
 800dab6:	b2db      	uxtb	r3, r3
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d101      	bne.n	800dac0 <Calculate_Parity+0x80>
		{
			return 1;
 800dabc:	2301      	movs	r3, #1
 800dabe:	e002      	b.n	800dac6 <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800dac0:	2300      	movs	r3, #0
 800dac2:	e000      	b.n	800dac6 <Calculate_Parity+0x86>
		}
	}
	return 0;
 800dac4:	2300      	movs	r3, #0
}
 800dac6:	4618      	mov	r0, r3
 800dac8:	3714      	adds	r7, #20
 800daca:	46bd      	mov	sp, r7
 800dacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dad0:	4770      	bx	lr
	...

0800dad4 <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b084      	sub	sp, #16
 800dad8:	af00      	add	r7, sp, #0
 800dada:	6078      	str	r0, [r7, #4]
 800dadc:	460b      	mov	r3, r1
 800dade:	70fb      	strb	r3, [r7, #3]
 800dae0:	4613      	mov	r3, r2
 800dae2:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800dae4:	2300      	movs	r3, #0
 800dae6:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800dae8:	2300      	movs	r3, #0
 800daea:	73fb      	strb	r3, [r7, #15]
 800daec:	e03b      	b.n	800db66 <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800daee:	7bfb      	ldrb	r3, [r7, #15]
 800daf0:	687a      	ldr	r2, [r7, #4]
 800daf2:	4413      	add	r3, r2
 800daf4:	781b      	ldrb	r3, [r3, #0]
 800daf6:	78ba      	ldrb	r2, [r7, #2]
 800daf8:	4611      	mov	r1, r2
 800dafa:	4618      	mov	r0, r3
 800dafc:	f7ff ffa0 	bl	800da40 <Calculate_Parity>
 800db00:	4603      	mov	r3, r0
 800db02:	4619      	mov	r1, r3
 800db04:	7bfb      	ldrb	r3, [r7, #15]
 800db06:	687a      	ldr	r2, [r7, #4]
 800db08:	4413      	add	r3, r2
 800db0a:	781b      	ldrb	r3, [r3, #0]
 800db0c:	09db      	lsrs	r3, r3, #7
 800db0e:	b2db      	uxtb	r3, r3
 800db10:	f003 0301 	and.w	r3, r3, #1
 800db14:	4299      	cmp	r1, r3
 800db16:	d023      	beq.n	800db60 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800db18:	7bfb      	ldrb	r3, [r7, #15]
 800db1a:	687a      	ldr	r2, [r7, #4]
 800db1c:	4413      	add	r3, r2
 800db1e:	781b      	ldrb	r3, [r3, #0]
 800db20:	4619      	mov	r1, r3
 800db22:	4815      	ldr	r0, [pc, #84]	; (800db78 <Verify_parity+0xa4>)
 800db24:	f014 fe88 	bl	8022838 <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800db28:	7bfb      	ldrb	r3, [r7, #15]
 800db2a:	687a      	ldr	r2, [r7, #4]
 800db2c:	4413      	add	r3, r2
 800db2e:	781b      	ldrb	r3, [r3, #0]
 800db30:	78ba      	ldrb	r2, [r7, #2]
 800db32:	4611      	mov	r1, r2
 800db34:	4618      	mov	r0, r3
 800db36:	f7ff ff83 	bl	800da40 <Calculate_Parity>
 800db3a:	4603      	mov	r3, r0
 800db3c:	4619      	mov	r1, r3
 800db3e:	480f      	ldr	r0, [pc, #60]	; (800db7c <Verify_parity+0xa8>)
 800db40:	f014 fe7a 	bl	8022838 <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800db44:	7bfb      	ldrb	r3, [r7, #15]
 800db46:	687a      	ldr	r2, [r7, #4]
 800db48:	4413      	add	r3, r2
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	09db      	lsrs	r3, r3, #7
 800db4e:	b2db      	uxtb	r3, r3
 800db50:	f003 0301 	and.w	r3, r3, #1
 800db54:	4619      	mov	r1, r3
 800db56:	480a      	ldr	r0, [pc, #40]	; (800db80 <Verify_parity+0xac>)
 800db58:	f014 fe6e 	bl	8022838 <iprintf>
			return 0;
 800db5c:	2300      	movs	r3, #0
 800db5e:	e007      	b.n	800db70 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800db60:	7bfb      	ldrb	r3, [r7, #15]
 800db62:	3301      	adds	r3, #1
 800db64:	73fb      	strb	r3, [r7, #15]
 800db66:	7bfa      	ldrb	r2, [r7, #15]
 800db68:	78fb      	ldrb	r3, [r7, #3]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d3bf      	bcc.n	800daee <Verify_parity+0x1a>
		}
	}
	return 1;
 800db6e:	2301      	movs	r3, #1
}
 800db70:	4618      	mov	r0, r3
 800db72:	3710      	adds	r7, #16
 800db74:	46bd      	mov	sp, r7
 800db76:	bd80      	pop	{r7, pc}
 800db78:	080265c0 	.word	0x080265c0
 800db7c:	080265d8 	.word	0x080265d8
 800db80:	080265ec 	.word	0x080265ec

0800db84 <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800db84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db88:	b089      	sub	sp, #36	; 0x24
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	4603      	mov	r3, r0
 800db8e:	60ba      	str	r2, [r7, #8]
 800db90:	73fb      	strb	r3, [r7, #15]
 800db92:	460b      	mov	r3, r1
 800db94:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	83fb      	strh	r3, [r7, #30]
 800db9a:	2300      	movs	r3, #0
 800db9c:	83bb      	strh	r3, [r7, #28]
 800db9e:	2300      	movs	r3, #0
 800dba0:	833b      	strh	r3, [r7, #24]
 800dba2:	2300      	movs	r3, #0
 800dba4:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800dba6:	2300      	movs	r3, #0
 800dba8:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800dbaa:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800dbae:	2b02      	cmp	r3, #2
 800dbb0:	d108      	bne.n	800dbc4 <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800dbb2:	7bfb      	ldrb	r3, [r7, #15]
 800dbb4:	b298      	uxth	r0, r3
 800dbb6:	7bbb      	ldrb	r3, [r7, #14]
 800dbb8:	b299      	uxth	r1, r3
 800dbba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dbbc:	68ba      	ldr	r2, [r7, #8]
 800dbbe:	f7f2 fdb5 	bl	800072c <InsertBits>
		return;
 800dbc2:	e13b      	b.n	800de3c <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800dbc4:	7bbb      	ldrb	r3, [r7, #14]
 800dbc6:	2b08      	cmp	r3, #8
 800dbc8:	d12c      	bne.n	800dc24 <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800dbca:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dbce:	2a80      	cmp	r2, #128	; 0x80
 800dbd0:	f173 0300 	sbcs.w	r3, r3, #0
 800dbd4:	d303      	bcc.n	800dbde <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800dbd6:	489b      	ldr	r0, [pc, #620]	; (800de44 <Insert_cal_parity+0x2c0>)
 800dbd8:	f014 feca 	bl	8022970 <puts>
			return;
 800dbdc:	e12e      	b.n	800de3c <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800dbde:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dbe2:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800dbe6:	4611      	mov	r1, r2
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7ff ff29 	bl	800da40 <Calculate_Parity>
 800dbee:	4603      	mov	r3, r0
 800dbf0:	2b01      	cmp	r3, #1
 800dbf2:	d10b      	bne.n	800dc0c <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800dbf4:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	781b      	ldrb	r3, [r3, #0]
 800dc00:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800dc04:	b2da      	uxtb	r2, r3
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	701a      	strb	r2, [r3, #0]
 800dc0a:	e117      	b.n	800de3c <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800dc0c:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	781b      	ldrb	r3, [r3, #0]
 800dc18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc1c:	b2da      	uxtb	r2, r3
 800dc1e:	68bb      	ldr	r3, [r7, #8]
 800dc20:	701a      	strb	r2, [r3, #0]
 800dc22:	e10b      	b.n	800de3c <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800dc24:	7bbb      	ldrb	r3, [r7, #14]
 800dc26:	2b18      	cmp	r3, #24
 800dc28:	f040 8104 	bne.w	800de34 <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800dc2c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc30:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800dc34:	f173 0300 	sbcs.w	r3, r3, #0
 800dc38:	d303      	bcc.n	800dc42 <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800dc3a:	4883      	ldr	r0, [pc, #524]	; (800de48 <Insert_cal_parity+0x2c4>)
 800dc3c:	f014 fe98 	bl	8022970 <puts>
			return;
 800dc40:	e0fc      	b.n	800de3c <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800dc42:	2300      	movs	r3, #0
 800dc44:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800dc46:	2300      	movs	r3, #0
 800dc48:	76bb      	strb	r3, [r7, #26]
 800dc4a:	e0ee      	b.n	800de2a <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800dc4c:	7ebb      	ldrb	r3, [r7, #26]
 800dc4e:	00d9      	lsls	r1, r3, #3
 800dc50:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc54:	f1c1 0620 	rsb	r6, r1, #32
 800dc58:	f1a1 0c20 	sub.w	ip, r1, #32
 800dc5c:	fa22 f001 	lsr.w	r0, r2, r1
 800dc60:	6038      	str	r0, [r7, #0]
 800dc62:	fa03 f606 	lsl.w	r6, r3, r6
 800dc66:	6838      	ldr	r0, [r7, #0]
 800dc68:	4330      	orrs	r0, r6
 800dc6a:	6038      	str	r0, [r7, #0]
 800dc6c:	fa23 fc0c 	lsr.w	ip, r3, ip
 800dc70:	6838      	ldr	r0, [r7, #0]
 800dc72:	ea40 000c 	orr.w	r0, r0, ip
 800dc76:	6038      	str	r0, [r7, #0]
 800dc78:	40cb      	lsrs	r3, r1
 800dc7a:	607b      	str	r3, [r7, #4]
 800dc7c:	783b      	ldrb	r3, [r7, #0]
 800dc7e:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800dc80:	7ebb      	ldrb	r3, [r7, #26]
 800dc82:	2b02      	cmp	r3, #2
 800dc84:	d07a      	beq.n	800dd7c <Insert_cal_parity+0x1f8>
 800dc86:	2b02      	cmp	r3, #2
 800dc88:	f300 8094 	bgt.w	800ddb4 <Insert_cal_parity+0x230>
 800dc8c:	2b00      	cmp	r3, #0
 800dc8e:	d002      	beq.n	800dc96 <Insert_cal_parity+0x112>
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d01f      	beq.n	800dcd4 <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800dc94:	e08e      	b.n	800ddb4 <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800dc96:	7ebb      	ldrb	r3, [r7, #26]
 800dc98:	00d9      	lsls	r1, r3, #3
 800dc9a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dc9e:	f1c1 0620 	rsb	r6, r1, #32
 800dca2:	f1a1 0020 	sub.w	r0, r1, #32
 800dca6:	fa22 f401 	lsr.w	r4, r2, r1
 800dcaa:	fa03 f606 	lsl.w	r6, r3, r6
 800dcae:	4334      	orrs	r4, r6
 800dcb0:	fa23 f000 	lsr.w	r0, r3, r0
 800dcb4:	4304      	orrs	r4, r0
 800dcb6:	fa23 f501 	lsr.w	r5, r3, r1
 800dcba:	f04f 0200 	mov.w	r2, #0
 800dcbe:	f04f 0300 	mov.w	r3, #0
 800dcc2:	09e2      	lsrs	r2, r4, #7
 800dcc4:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800dcc8:	09eb      	lsrs	r3, r5, #7
 800dcca:	b293      	uxth	r3, r2
 800dccc:	f003 0301 	and.w	r3, r3, #1
 800dcd0:	83fb      	strh	r3, [r7, #30]
					break;
 800dcd2:	e070      	b.n	800ddb6 <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800dcd4:	7efb      	ldrb	r3, [r7, #27]
 800dcd6:	005b      	lsls	r3, r3, #1
 800dcd8:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800dcda:	8bfb      	ldrh	r3, [r7, #30]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d104      	bne.n	800dcea <Insert_cal_parity+0x166>
 800dce0:	7efb      	ldrb	r3, [r7, #27]
 800dce2:	f023 0301 	bic.w	r3, r3, #1
 800dce6:	76fb      	strb	r3, [r7, #27]
 800dce8:	e003      	b.n	800dcf2 <Insert_cal_parity+0x16e>
 800dcea:	7efb      	ldrb	r3, [r7, #27]
 800dcec:	f043 0301 	orr.w	r3, r3, #1
 800dcf0:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800dcf2:	7ebb      	ldrb	r3, [r7, #26]
 800dcf4:	00d9      	lsls	r1, r3, #3
 800dcf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dcfa:	f1c1 0620 	rsb	r6, r1, #32
 800dcfe:	f1a1 0020 	sub.w	r0, r1, #32
 800dd02:	fa22 f801 	lsr.w	r8, r2, r1
 800dd06:	fa03 f606 	lsl.w	r6, r3, r6
 800dd0a:	ea48 0806 	orr.w	r8, r8, r6
 800dd0e:	fa23 f000 	lsr.w	r0, r3, r0
 800dd12:	ea48 0800 	orr.w	r8, r8, r0
 800dd16:	fa23 f901 	lsr.w	r9, r3, r1
 800dd1a:	f04f 0200 	mov.w	r2, #0
 800dd1e:	f04f 0300 	mov.w	r3, #0
 800dd22:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800dd26:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800dd2a:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800dd2e:	b293      	uxth	r3, r2
 800dd30:	f003 0301 	and.w	r3, r3, #1
 800dd34:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800dd36:	7ebb      	ldrb	r3, [r7, #26]
 800dd38:	00d9      	lsls	r1, r3, #3
 800dd3a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800dd3e:	f1c1 0620 	rsb	r6, r1, #32
 800dd42:	f1a1 0020 	sub.w	r0, r1, #32
 800dd46:	fa22 fa01 	lsr.w	sl, r2, r1
 800dd4a:	fa03 f606 	lsl.w	r6, r3, r6
 800dd4e:	ea4a 0a06 	orr.w	sl, sl, r6
 800dd52:	fa23 f000 	lsr.w	r0, r3, r0
 800dd56:	ea4a 0a00 	orr.w	sl, sl, r0
 800dd5a:	fa23 fb01 	lsr.w	fp, r3, r1
 800dd5e:	f04f 0200 	mov.w	r2, #0
 800dd62:	f04f 0300 	mov.w	r3, #0
 800dd66:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800dd6a:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800dd6e:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800dd72:	b293      	uxth	r3, r2
 800dd74:	f003 0301 	and.w	r3, r3, #1
 800dd78:	83bb      	strh	r3, [r7, #28]
					break;
 800dd7a:	e01c      	b.n	800ddb6 <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800dd7c:	7efb      	ldrb	r3, [r7, #27]
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800dd82:	8bbb      	ldrh	r3, [r7, #28]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d104      	bne.n	800dd92 <Insert_cal_parity+0x20e>
 800dd88:	7efb      	ldrb	r3, [r7, #27]
 800dd8a:	f023 0301 	bic.w	r3, r3, #1
 800dd8e:	76fb      	strb	r3, [r7, #27]
 800dd90:	e003      	b.n	800dd9a <Insert_cal_parity+0x216>
 800dd92:	7efb      	ldrb	r3, [r7, #27]
 800dd94:	f043 0301 	orr.w	r3, r3, #1
 800dd98:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800dd9a:	8bfb      	ldrh	r3, [r7, #30]
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d104      	bne.n	800ddaa <Insert_cal_parity+0x226>
 800dda0:	7efb      	ldrb	r3, [r7, #27]
 800dda2:	f023 0302 	bic.w	r3, r3, #2
 800dda6:	76fb      	strb	r3, [r7, #27]
					break;
 800dda8:	e005      	b.n	800ddb6 <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800ddaa:	7efb      	ldrb	r3, [r7, #27]
 800ddac:	f043 0302 	orr.w	r3, r3, #2
 800ddb0:	76fb      	strb	r3, [r7, #27]
					break;
 800ddb2:	e000      	b.n	800ddb6 <Insert_cal_parity+0x232>
					break;
 800ddb4:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800ddb6:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800ddba:	7efb      	ldrb	r3, [r7, #27]
 800ddbc:	4611      	mov	r1, r2
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f7ff fe3e 	bl	800da40 <Calculate_Parity>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	2b01      	cmp	r3, #1
 800ddc8:	d116      	bne.n	800ddf8 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800ddca:	7ebb      	ldrb	r3, [r7, #26]
 800ddcc:	f1c3 0302 	rsb	r3, r3, #2
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	4413      	add	r3, r2
 800ddd4:	7efa      	ldrb	r2, [r7, #27]
 800ddd6:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800ddd8:	7ebb      	ldrb	r3, [r7, #26]
 800ddda:	f1c3 0302 	rsb	r3, r3, #2
 800ddde:	68ba      	ldr	r2, [r7, #8]
 800dde0:	4413      	add	r3, r2
 800dde2:	781a      	ldrb	r2, [r3, #0]
 800dde4:	7ebb      	ldrb	r3, [r7, #26]
 800dde6:	f1c3 0302 	rsb	r3, r3, #2
 800ddea:	68b9      	ldr	r1, [r7, #8]
 800ddec:	440b      	add	r3, r1
 800ddee:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800ddf2:	b2d2      	uxtb	r2, r2
 800ddf4:	701a      	strb	r2, [r3, #0]
 800ddf6:	e015      	b.n	800de24 <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800ddf8:	7ebb      	ldrb	r3, [r7, #26]
 800ddfa:	f1c3 0302 	rsb	r3, r3, #2
 800ddfe:	68ba      	ldr	r2, [r7, #8]
 800de00:	4413      	add	r3, r2
 800de02:	7efa      	ldrb	r2, [r7, #27]
 800de04:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800de06:	7ebb      	ldrb	r3, [r7, #26]
 800de08:	f1c3 0302 	rsb	r3, r3, #2
 800de0c:	68ba      	ldr	r2, [r7, #8]
 800de0e:	4413      	add	r3, r2
 800de10:	781a      	ldrb	r2, [r3, #0]
 800de12:	7ebb      	ldrb	r3, [r7, #26]
 800de14:	f1c3 0302 	rsb	r3, r3, #2
 800de18:	68b9      	ldr	r1, [r7, #8]
 800de1a:	440b      	add	r3, r1
 800de1c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800de20:	b2d2      	uxtb	r2, r2
 800de22:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800de24:	7ebb      	ldrb	r3, [r7, #26]
 800de26:	3301      	adds	r3, #1
 800de28:	76bb      	strb	r3, [r7, #26]
 800de2a:	7ebb      	ldrb	r3, [r7, #26]
 800de2c:	2b02      	cmp	r3, #2
 800de2e:	f67f af0d 	bls.w	800dc4c <Insert_cal_parity+0xc8>
 800de32:	e003      	b.n	800de3c <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800de34:	4805      	ldr	r0, [pc, #20]	; (800de4c <Insert_cal_parity+0x2c8>)
 800de36:	f014 fd9b 	bl	8022970 <puts>
		return;
 800de3a:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800de3c:	3724      	adds	r7, #36	; 0x24
 800de3e:	46bd      	mov	sp, r7
 800de40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de44:	08026604 	.word	0x08026604
 800de48:	08026638 	.word	0x08026638
 800de4c:	0802666c 	.word	0x0802666c

0800de50 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b084      	sub	sp, #16
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
 800de58:	460b      	mov	r3, r1
 800de5a:	807b      	strh	r3, [r7, #2]
 800de5c:	4613      	mov	r3, r2
 800de5e:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800de60:	2300      	movs	r3, #0
 800de62:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800de64:	2300      	movs	r3, #0
 800de66:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800de68:	787b      	ldrb	r3, [r7, #1]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	d133      	bne.n	800ded6 <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800de6e:	887b      	ldrh	r3, [r7, #2]
 800de70:	085b      	lsrs	r3, r3, #1
 800de72:	b29b      	uxth	r3, r3
 800de74:	3b02      	subs	r3, #2
 800de76:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800de78:	2300      	movs	r3, #0
 800de7a:	81fb      	strh	r3, [r7, #14]
 800de7c:	e025      	b.n	800deca <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800de7e:	89fb      	ldrh	r3, [r7, #14]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	4413      	add	r3, r2
 800de84:	781a      	ldrb	r2, [r3, #0]
 800de86:	89f9      	ldrh	r1, [r7, #14]
 800de88:	89bb      	ldrh	r3, [r7, #12]
 800de8a:	440b      	add	r3, r1
 800de8c:	3302      	adds	r3, #2
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	440b      	add	r3, r1
 800de92:	781b      	ldrb	r3, [r3, #0]
 800de94:	43db      	mvns	r3, r3
 800de96:	b2db      	uxtb	r3, r3
 800de98:	429a      	cmp	r2, r3
 800de9a:	d013      	beq.n	800dec4 <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800de9c:	89fb      	ldrh	r3, [r7, #14]
 800de9e:	687a      	ldr	r2, [r7, #4]
 800dea0:	4413      	add	r3, r2
 800dea2:	781b      	ldrb	r3, [r3, #0]
 800dea4:	4619      	mov	r1, r3
 800dea6:	89fa      	ldrh	r2, [r7, #14]
 800dea8:	89bb      	ldrh	r3, [r7, #12]
 800deaa:	4413      	add	r3, r2
 800deac:	3302      	adds	r3, #2
 800deae:	687a      	ldr	r2, [r7, #4]
 800deb0:	4413      	add	r3, r2
 800deb2:	781b      	ldrb	r3, [r3, #0]
 800deb4:	43db      	mvns	r3, r3
 800deb6:	b2db      	uxtb	r3, r3
 800deb8:	461a      	mov	r2, r3
 800deba:	481a      	ldr	r0, [pc, #104]	; (800df24 <Data_Compliment+0xd4>)
 800debc:	f014 fcbc 	bl	8022838 <iprintf>
				return 0;
 800dec0:	2300      	movs	r3, #0
 800dec2:	e02b      	b.n	800df1c <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800dec4:	89fb      	ldrh	r3, [r7, #14]
 800dec6:	3301      	adds	r3, #1
 800dec8:	81fb      	strh	r3, [r7, #14]
 800deca:	89fa      	ldrh	r2, [r7, #14]
 800decc:	89bb      	ldrh	r3, [r7, #12]
 800dece:	429a      	cmp	r2, r3
 800ded0:	d3d5      	bcc.n	800de7e <Data_Compliment+0x2e>
			}
		}
		return 1;
 800ded2:	2301      	movs	r3, #1
 800ded4:	e022      	b.n	800df1c <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800ded6:	787b      	ldrb	r3, [r7, #1]
 800ded8:	2b01      	cmp	r3, #1
 800deda:	d11e      	bne.n	800df1a <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800dedc:	2300      	movs	r3, #0
 800dede:	81fb      	strh	r3, [r7, #14]
 800dee0:	e010      	b.n	800df04 <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800dee2:	89fb      	ldrh	r3, [r7, #14]
 800dee4:	687a      	ldr	r2, [r7, #4]
 800dee6:	4413      	add	r3, r2
 800dee8:	781a      	ldrb	r2, [r3, #0]
 800deea:	89fb      	ldrh	r3, [r7, #14]
 800deec:	1c99      	adds	r1, r3, #2
 800deee:	887b      	ldrh	r3, [r7, #2]
 800def0:	440b      	add	r3, r1
 800def2:	4619      	mov	r1, r3
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	440b      	add	r3, r1
 800def8:	43d2      	mvns	r2, r2
 800defa:	b2d2      	uxtb	r2, r2
 800defc:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800defe:	89fb      	ldrh	r3, [r7, #14]
 800df00:	3301      	adds	r3, #1
 800df02:	81fb      	strh	r3, [r7, #14]
 800df04:	89fa      	ldrh	r2, [r7, #14]
 800df06:	887b      	ldrh	r3, [r7, #2]
 800df08:	429a      	cmp	r2, r3
 800df0a:	d3ea      	bcc.n	800dee2 <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800df0c:	89fa      	ldrh	r2, [r7, #14]
 800df0e:	887b      	ldrh	r3, [r7, #2]
 800df10:	4413      	add	r3, r2
 800df12:	b29b      	uxth	r3, r3
 800df14:	3302      	adds	r3, #2
 800df16:	b29b      	uxth	r3, r3
 800df18:	e000      	b.n	800df1c <Data_Compliment+0xcc>
	}
	return 0;
 800df1a:	2300      	movs	r3, #0
}
 800df1c:	4618      	mov	r0, r3
 800df1e:	3710      	adds	r7, #16
 800df20:	46bd      	mov	sp, r7
 800df22:	bd80      	pop	{r7, pc}
 800df24:	0802667c 	.word	0x0802667c

0800df28 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800df28:	b480      	push	{r7}
 800df2a:	b083      	sub	sp, #12
 800df2c:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800df2e:	2300      	movs	r3, #0
 800df30:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800df32:	4b1a      	ldr	r3, [pc, #104]	; (800df9c <CheckToSendReplyorNot+0x74>)
 800df34:	785b      	ldrb	r3, [r3, #1]
 800df36:	2b01      	cmp	r3, #1
 800df38:	d104      	bne.n	800df44 <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800df3a:	79fb      	ldrb	r3, [r7, #7]
 800df3c:	f043 0301 	orr.w	r3, r3, #1
 800df40:	71fb      	strb	r3, [r7, #7]
 800df42:	e003      	b.n	800df4c <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800df44:	79fb      	ldrb	r3, [r7, #7]
 800df46:	f023 0301 	bic.w	r3, r3, #1
 800df4a:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800df4c:	4b14      	ldr	r3, [pc, #80]	; (800dfa0 <CheckToSendReplyorNot+0x78>)
 800df4e:	785b      	ldrb	r3, [r3, #1]
 800df50:	2b01      	cmp	r3, #1
 800df52:	d104      	bne.n	800df5e <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800df54:	79fb      	ldrb	r3, [r7, #7]
 800df56:	f043 0302 	orr.w	r3, r3, #2
 800df5a:	71fb      	strb	r3, [r7, #7]
 800df5c:	e003      	b.n	800df66 <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800df5e:	79fb      	ldrb	r3, [r7, #7]
 800df60:	f023 0302 	bic.w	r3, r3, #2
 800df64:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800df66:	79fb      	ldrb	r3, [r7, #7]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	dc02      	bgt.n	800df72 <CheckToSendReplyorNot+0x4a>
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	da03      	bge.n	800df78 <CheckToSendReplyorNot+0x50>
 800df70:	e00a      	b.n	800df88 <CheckToSendReplyorNot+0x60>
 800df72:	2b03      	cmp	r3, #3
 800df74:	d004      	beq.n	800df80 <CheckToSendReplyorNot+0x58>
 800df76:	e007      	b.n	800df88 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800df78:	4b0a      	ldr	r3, [pc, #40]	; (800dfa4 <CheckToSendReplyorNot+0x7c>)
 800df7a:	2201      	movs	r2, #1
 800df7c:	701a      	strb	r2, [r3, #0]
		break;
 800df7e:	e007      	b.n	800df90 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
 800df80:	4b08      	ldr	r3, [pc, #32]	; (800dfa4 <CheckToSendReplyorNot+0x7c>)
 800df82:	2201      	movs	r2, #1
 800df84:	701a      	strb	r2, [r3, #0]
#endif
#ifdef EI_2
		SendReply = 0;
#endif
		break;
 800df86:	e003      	b.n	800df90 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800df88:	4b06      	ldr	r3, [pc, #24]	; (800dfa4 <CheckToSendReplyorNot+0x7c>)
 800df8a:	2201      	movs	r2, #1
 800df8c:	701a      	strb	r2, [r3, #0]
		break;
 800df8e:	bf00      	nop
	}

}
 800df90:	bf00      	nop
 800df92:	370c      	adds	r7, #12
 800df94:	46bd      	mov	sp, r7
 800df96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df9a:	4770      	bx	lr
 800df9c:	2000385c 	.word	0x2000385c
 800dfa0:	20003860 	.word	0x20003860
 800dfa4:	20004f7d 	.word	0x20004f7d

0800dfa8 <PrintSignals>:



void PrintSignals(void)
{
 800dfa8:	b580      	push	{r7, lr}
 800dfaa:	b082      	sub	sp, #8
 800dfac:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800dfae:	4b2d      	ldr	r3, [pc, #180]	; (800e064 <PrintSignals+0xbc>)
 800dfb0:	881b      	ldrh	r3, [r3, #0]
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	492c      	ldr	r1, [pc, #176]	; (800e068 <PrintSignals+0xc0>)
 800dfb6:	482d      	ldr	r0, [pc, #180]	; (800e06c <PrintSignals+0xc4>)
 800dfb8:	f014 fb2e 	bl	8022618 <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	80fb      	strh	r3, [r7, #6]
 800dfc0:	e045      	b.n	800e04e <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800dfc2:	4b2b      	ldr	r3, [pc, #172]	; (800e070 <PrintSignals+0xc8>)
 800dfc4:	881b      	ldrh	r3, [r3, #0]
 800dfc6:	88fa      	ldrh	r2, [r7, #6]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d83c      	bhi.n	800e046 <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800dfcc:	88fb      	ldrh	r3, [r7, #6]
 800dfce:	3b01      	subs	r3, #1
 800dfd0:	2b00      	cmp	r3, #0
 800dfd2:	da00      	bge.n	800dfd6 <PrintSignals+0x2e>
 800dfd4:	3307      	adds	r3, #7
 800dfd6:	10db      	asrs	r3, r3, #3
 800dfd8:	461a      	mov	r2, r3
 800dfda:	4b26      	ldr	r3, [pc, #152]	; (800e074 <PrintSignals+0xcc>)
 800dfdc:	4413      	add	r3, r2
 800dfde:	789b      	ldrb	r3, [r3, #2]
 800dfe0:	4619      	mov	r1, r3
 800dfe2:	88fb      	ldrh	r3, [r7, #6]
 800dfe4:	3b01      	subs	r3, #1
 800dfe6:	425a      	negs	r2, r3
 800dfe8:	f003 0307 	and.w	r3, r3, #7
 800dfec:	f002 0207 	and.w	r2, r2, #7
 800dff0:	bf58      	it	pl
 800dff2:	4253      	negpl	r3, r2
 800dff4:	2201      	movs	r2, #1
 800dff6:	fa02 f303 	lsl.w	r3, r2, r3
 800dffa:	400b      	ands	r3, r1
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	dd0c      	ble.n	800e01a <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800e000:	88fb      	ldrh	r3, [r7, #6]
 800e002:	1e5a      	subs	r2, r3, #1
 800e004:	4613      	mov	r3, r2
 800e006:	009b      	lsls	r3, r3, #2
 800e008:	4413      	add	r3, r2
 800e00a:	00db      	lsls	r3, r3, #3
 800e00c:	4a1a      	ldr	r2, [pc, #104]	; (800e078 <PrintSignals+0xd0>)
 800e00e:	4413      	add	r3, r2
 800e010:	4619      	mov	r1, r3
 800e012:	481a      	ldr	r0, [pc, #104]	; (800e07c <PrintSignals+0xd4>)
 800e014:	f014 fc10 	bl	8022838 <iprintf>
 800e018:	e00b      	b.n	800e032 <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800e01a:	88fb      	ldrh	r3, [r7, #6]
 800e01c:	1e5a      	subs	r2, r3, #1
 800e01e:	4613      	mov	r3, r2
 800e020:	009b      	lsls	r3, r3, #2
 800e022:	4413      	add	r3, r2
 800e024:	00db      	lsls	r3, r3, #3
 800e026:	4a14      	ldr	r2, [pc, #80]	; (800e078 <PrintSignals+0xd0>)
 800e028:	4413      	add	r3, r2
 800e02a:	4619      	mov	r1, r3
 800e02c:	4814      	ldr	r0, [pc, #80]	; (800e080 <PrintSignals+0xd8>)
 800e02e:	f014 fc03 	bl	8022838 <iprintf>
		}

		if( (Traverser%2) == 0)
 800e032:	88fb      	ldrh	r3, [r7, #6]
 800e034:	f003 0301 	and.w	r3, r3, #1
 800e038:	b29b      	uxth	r3, r3
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d104      	bne.n	800e048 <PrintSignals+0xa0>
		{
			printf("\n");
 800e03e:	200a      	movs	r0, #10
 800e040:	f014 fc12 	bl	8022868 <putchar>
 800e044:	e000      	b.n	800e048 <PrintSignals+0xa0>
			continue;
 800e046:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800e048:	88fb      	ldrh	r3, [r7, #6]
 800e04a:	3301      	adds	r3, #1
 800e04c:	80fb      	strh	r3, [r7, #6]
 800e04e:	88fa      	ldrh	r2, [r7, #6]
 800e050:	4b08      	ldr	r3, [pc, #32]	; (800e074 <PrintSignals+0xcc>)
 800e052:	881b      	ldrh	r3, [r3, #0]
 800e054:	00db      	lsls	r3, r3, #3
 800e056:	429a      	cmp	r2, r3
 800e058:	ddb3      	ble.n	800dfc2 <PrintSignals+0x1a>
		}
	}
}
 800e05a:	bf00      	nop
 800e05c:	bf00      	nop
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20003a88 	.word	0x20003a88
 800e068:	20003a8c 	.word	0x20003a8c
 800e06c:	20003886 	.word	0x20003886
 800e070:	20004b90 	.word	0x20004b90
 800e074:	20003884 	.word	0x20003884
 800e078:	200040a0 	.word	0x200040a0
 800e07c:	080266b4 	.word	0x080266b4
 800e080:	080266c4 	.word	0x080266c4

0800e084 <GetTimeStamp>:

void GetTimeStamp(void)
{
 800e084:	b580      	push	{r7, lr}
 800e086:	b084      	sub	sp, #16
 800e088:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800e08a:	2300      	movs	r3, #0
 800e08c:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800e08e:	2300      	movs	r3, #0
 800e090:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800e092:	2300      	movs	r3, #0
 800e094:	607b      	str	r3, [r7, #4]

	Get_time();
 800e096:	f7fd f9bd 	bl	800b414 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800e09a:	4b21      	ldr	r3, [pc, #132]	; (800e120 <GetTimeStamp+0x9c>)
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800e0a4:	fb03 f202 	mul.w	r2, r3, r2
 800e0a8:	4b1d      	ldr	r3, [pc, #116]	; (800e120 <GetTimeStamp+0x9c>)
 800e0aa:	785b      	ldrb	r3, [r3, #1]
 800e0ac:	4619      	mov	r1, r3
 800e0ae:	460b      	mov	r3, r1
 800e0b0:	011b      	lsls	r3, r3, #4
 800e0b2:	1a5b      	subs	r3, r3, r1
 800e0b4:	009b      	lsls	r3, r3, #2
 800e0b6:	4413      	add	r3, r2
 800e0b8:	4a19      	ldr	r2, [pc, #100]	; (800e120 <GetTimeStamp+0x9c>)
 800e0ba:	7892      	ldrb	r2, [r2, #2]
 800e0bc:	4413      	add	r3, r2
 800e0be:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800e0c0:	4b18      	ldr	r3, [pc, #96]	; (800e124 <GetTimeStamp+0xa0>)
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	68fa      	ldr	r2, [r7, #12]
 800e0c6:	429a      	cmp	r2, r3
 800e0c8:	d007      	beq.n	800e0da <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800e0ca:	4a16      	ldr	r2, [pc, #88]	; (800e124 <GetTimeStamp+0xa0>)
 800e0cc:	68fb      	ldr	r3, [r7, #12]
 800e0ce:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800e0d0:	f007 fba8 	bl	8015824 <HAL_GetTick>
 800e0d4:	4603      	mov	r3, r0
 800e0d6:	4a14      	ldr	r2, [pc, #80]	; (800e128 <GetTimeStamp+0xa4>)
 800e0d8:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800e0da:	4b13      	ldr	r3, [pc, #76]	; (800e128 <GetTimeStamp+0xa4>)
 800e0dc:	681b      	ldr	r3, [r3, #0]
 800e0de:	4618      	mov	r0, r3
 800e0e0:	f000 fe12 	bl	800ed08 <HAL_Elaps_Ticks>
 800e0e4:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	4613      	mov	r3, r2
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	4413      	add	r3, r2
 800e0ee:	005b      	lsls	r3, r3, #1
 800e0f0:	4619      	mov	r1, r3
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	4a0d      	ldr	r2, [pc, #52]	; (800e12c <GetTimeStamp+0xa8>)
 800e0f6:	fba2 2303 	umull	r2, r3, r2, r3
 800e0fa:	095b      	lsrs	r3, r3, #5
 800e0fc:	440b      	add	r3, r1
 800e0fe:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800e100:	4b0b      	ldr	r3, [pc, #44]	; (800e130 <GetTimeStamp+0xac>)
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	68ba      	ldr	r2, [r7, #8]
 800e106:	429a      	cmp	r2, r3
 800e108:	d005      	beq.n	800e116 <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800e10a:	4a09      	ldr	r2, [pc, #36]	; (800e130 <GetTimeStamp+0xac>)
 800e10c:	68bb      	ldr	r3, [r7, #8]
 800e10e:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800e110:	4a08      	ldr	r2, [pc, #32]	; (800e134 <GetTimeStamp+0xb0>)
 800e112:	68bb      	ldr	r3, [r7, #8]
 800e114:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800e116:	bf00      	nop
 800e118:	3710      	adds	r7, #16
 800e11a:	46bd      	mov	sp, r7
 800e11c:	bd80      	pop	{r7, pc}
 800e11e:	bf00      	nop
 800e120:	20002bc4 	.word	0x20002bc4
 800e124:	20004f84 	.word	0x20004f84
 800e128:	20004f88 	.word	0x20004f88
 800e12c:	51eb851f 	.word	0x51eb851f
 800e130:	20004f8c 	.word	0x20004f8c
 800e134:	2000409c 	.word	0x2000409c

0800e138 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800e138:	b490      	push	{r4, r7}
 800e13a:	b082      	sub	sp, #8
 800e13c:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800e13e:	2300      	movs	r3, #0
 800e140:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800e142:	79fb      	ldrb	r3, [r7, #7]
 800e144:	1c5a      	adds	r2, r3, #1
 800e146:	71fa      	strb	r2, [r7, #7]
 800e148:	461a      	mov	r2, r3
 800e14a:	4613      	mov	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	00db      	lsls	r3, r3, #3
 800e152:	4acd      	ldr	r2, [pc, #820]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e154:	4413      	add	r3, r2
 800e156:	4acd      	ldr	r2, [pc, #820]	; (800e48c <UpdateSIGNALSNames+0x354>)
 800e158:	6810      	ldr	r0, [r2, #0]
 800e15a:	6018      	str	r0, [r3, #0]
 800e15c:	8892      	ldrh	r2, [r2, #4]
 800e15e:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800e160:	79fb      	ldrb	r3, [r7, #7]
 800e162:	1c5a      	adds	r2, r3, #1
 800e164:	71fa      	strb	r2, [r7, #7]
 800e166:	461a      	mov	r2, r3
 800e168:	4613      	mov	r3, r2
 800e16a:	009b      	lsls	r3, r3, #2
 800e16c:	4413      	add	r3, r2
 800e16e:	00db      	lsls	r3, r3, #3
 800e170:	4ac5      	ldr	r2, [pc, #788]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e172:	4413      	add	r3, r2
 800e174:	4ac6      	ldr	r2, [pc, #792]	; (800e490 <UpdateSIGNALSNames+0x358>)
 800e176:	6810      	ldr	r0, [r2, #0]
 800e178:	6018      	str	r0, [r3, #0]
 800e17a:	8892      	ldrh	r2, [r2, #4]
 800e17c:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800e17e:	79fb      	ldrb	r3, [r7, #7]
 800e180:	1c5a      	adds	r2, r3, #1
 800e182:	71fa      	strb	r2, [r7, #7]
 800e184:	461a      	mov	r2, r3
 800e186:	4613      	mov	r3, r2
 800e188:	009b      	lsls	r3, r3, #2
 800e18a:	4413      	add	r3, r2
 800e18c:	00db      	lsls	r3, r3, #3
 800e18e:	4abe      	ldr	r2, [pc, #760]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e190:	4413      	add	r3, r2
 800e192:	4ac0      	ldr	r2, [pc, #768]	; (800e494 <UpdateSIGNALSNames+0x35c>)
 800e194:	6810      	ldr	r0, [r2, #0]
 800e196:	6018      	str	r0, [r3, #0]
 800e198:	8892      	ldrh	r2, [r2, #4]
 800e19a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800e19c:	79fb      	ldrb	r3, [r7, #7]
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	71fa      	strb	r2, [r7, #7]
 800e1a2:	461a      	mov	r2, r3
 800e1a4:	4613      	mov	r3, r2
 800e1a6:	009b      	lsls	r3, r3, #2
 800e1a8:	4413      	add	r3, r2
 800e1aa:	00db      	lsls	r3, r3, #3
 800e1ac:	4ab6      	ldr	r2, [pc, #728]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e1ae:	4413      	add	r3, r2
 800e1b0:	4ab9      	ldr	r2, [pc, #740]	; (800e498 <UpdateSIGNALSNames+0x360>)
 800e1b2:	6810      	ldr	r0, [r2, #0]
 800e1b4:	6018      	str	r0, [r3, #0]
 800e1b6:	8892      	ldrh	r2, [r2, #4]
 800e1b8:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	1c5a      	adds	r2, r3, #1
 800e1be:	71fa      	strb	r2, [r7, #7]
 800e1c0:	461a      	mov	r2, r3
 800e1c2:	4613      	mov	r3, r2
 800e1c4:	009b      	lsls	r3, r3, #2
 800e1c6:	4413      	add	r3, r2
 800e1c8:	00db      	lsls	r3, r3, #3
 800e1ca:	4aaf      	ldr	r2, [pc, #700]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e1cc:	4413      	add	r3, r2
 800e1ce:	4ab3      	ldr	r2, [pc, #716]	; (800e49c <UpdateSIGNALSNames+0x364>)
 800e1d0:	6810      	ldr	r0, [r2, #0]
 800e1d2:	6018      	str	r0, [r3, #0]
 800e1d4:	8892      	ldrh	r2, [r2, #4]
 800e1d6:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800e1d8:	79fb      	ldrb	r3, [r7, #7]
 800e1da:	1c5a      	adds	r2, r3, #1
 800e1dc:	71fa      	strb	r2, [r7, #7]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	4aa7      	ldr	r2, [pc, #668]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e1ea:	4413      	add	r3, r2
 800e1ec:	4aac      	ldr	r2, [pc, #688]	; (800e4a0 <UpdateSIGNALSNames+0x368>)
 800e1ee:	6810      	ldr	r0, [r2, #0]
 800e1f0:	6018      	str	r0, [r3, #0]
 800e1f2:	8891      	ldrh	r1, [r2, #4]
 800e1f4:	7992      	ldrb	r2, [r2, #6]
 800e1f6:	8099      	strh	r1, [r3, #4]
 800e1f8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800e1fa:	79fb      	ldrb	r3, [r7, #7]
 800e1fc:	1c5a      	adds	r2, r3, #1
 800e1fe:	71fa      	strb	r2, [r7, #7]
 800e200:	461a      	mov	r2, r3
 800e202:	4613      	mov	r3, r2
 800e204:	009b      	lsls	r3, r3, #2
 800e206:	4413      	add	r3, r2
 800e208:	00db      	lsls	r3, r3, #3
 800e20a:	4a9f      	ldr	r2, [pc, #636]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e20c:	4413      	add	r3, r2
 800e20e:	4aa5      	ldr	r2, [pc, #660]	; (800e4a4 <UpdateSIGNALSNames+0x36c>)
 800e210:	6810      	ldr	r0, [r2, #0]
 800e212:	6018      	str	r0, [r3, #0]
 800e214:	8891      	ldrh	r1, [r2, #4]
 800e216:	7992      	ldrb	r2, [r2, #6]
 800e218:	8099      	strh	r1, [r3, #4]
 800e21a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800e21c:	79fb      	ldrb	r3, [r7, #7]
 800e21e:	1c5a      	adds	r2, r3, #1
 800e220:	71fa      	strb	r2, [r7, #7]
 800e222:	461a      	mov	r2, r3
 800e224:	4613      	mov	r3, r2
 800e226:	009b      	lsls	r3, r3, #2
 800e228:	4413      	add	r3, r2
 800e22a:	00db      	lsls	r3, r3, #3
 800e22c:	4a96      	ldr	r2, [pc, #600]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e22e:	4413      	add	r3, r2
 800e230:	4a9d      	ldr	r2, [pc, #628]	; (800e4a8 <UpdateSIGNALSNames+0x370>)
 800e232:	6810      	ldr	r0, [r2, #0]
 800e234:	6018      	str	r0, [r3, #0]
 800e236:	7912      	ldrb	r2, [r2, #4]
 800e238:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800e23a:	79fb      	ldrb	r3, [r7, #7]
 800e23c:	1c5a      	adds	r2, r3, #1
 800e23e:	71fa      	strb	r2, [r7, #7]
 800e240:	461a      	mov	r2, r3
 800e242:	4613      	mov	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4413      	add	r3, r2
 800e248:	00db      	lsls	r3, r3, #3
 800e24a:	4a8f      	ldr	r2, [pc, #572]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e24c:	4413      	add	r3, r2
 800e24e:	4997      	ldr	r1, [pc, #604]	; (800e4ac <UpdateSIGNALSNames+0x374>)
 800e250:	461a      	mov	r2, r3
 800e252:	460b      	mov	r3, r1
 800e254:	cb03      	ldmia	r3!, {r0, r1}
 800e256:	6010      	str	r0, [r2, #0]
 800e258:	6051      	str	r1, [r2, #4]
 800e25a:	781b      	ldrb	r3, [r3, #0]
 800e25c:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800e25e:	79fb      	ldrb	r3, [r7, #7]
 800e260:	1c5a      	adds	r2, r3, #1
 800e262:	71fa      	strb	r2, [r7, #7]
 800e264:	461a      	mov	r2, r3
 800e266:	4613      	mov	r3, r2
 800e268:	009b      	lsls	r3, r3, #2
 800e26a:	4413      	add	r3, r2
 800e26c:	00db      	lsls	r3, r3, #3
 800e26e:	4a86      	ldr	r2, [pc, #536]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e270:	4413      	add	r3, r2
 800e272:	4a8f      	ldr	r2, [pc, #572]	; (800e4b0 <UpdateSIGNALSNames+0x378>)
 800e274:	6810      	ldr	r0, [r2, #0]
 800e276:	6018      	str	r0, [r3, #0]
 800e278:	8892      	ldrh	r2, [r2, #4]
 800e27a:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800e27c:	79fb      	ldrb	r3, [r7, #7]
 800e27e:	1c5a      	adds	r2, r3, #1
 800e280:	71fa      	strb	r2, [r7, #7]
 800e282:	461a      	mov	r2, r3
 800e284:	4613      	mov	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	4413      	add	r3, r2
 800e28a:	00db      	lsls	r3, r3, #3
 800e28c:	4a7e      	ldr	r2, [pc, #504]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e28e:	4413      	add	r3, r2
 800e290:	4988      	ldr	r1, [pc, #544]	; (800e4b4 <UpdateSIGNALSNames+0x37c>)
 800e292:	461a      	mov	r2, r3
 800e294:	460b      	mov	r3, r1
 800e296:	cb03      	ldmia	r3!, {r0, r1}
 800e298:	6010      	str	r0, [r2, #0]
 800e29a:	6051      	str	r1, [r2, #4]
 800e29c:	881b      	ldrh	r3, [r3, #0]
 800e29e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800e2a0:	79fb      	ldrb	r3, [r7, #7]
 800e2a2:	1c5a      	adds	r2, r3, #1
 800e2a4:	71fa      	strb	r2, [r7, #7]
 800e2a6:	461a      	mov	r2, r3
 800e2a8:	4613      	mov	r3, r2
 800e2aa:	009b      	lsls	r3, r3, #2
 800e2ac:	4413      	add	r3, r2
 800e2ae:	00db      	lsls	r3, r3, #3
 800e2b0:	4a75      	ldr	r2, [pc, #468]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e2b2:	4413      	add	r3, r2
 800e2b4:	4980      	ldr	r1, [pc, #512]	; (800e4b8 <UpdateSIGNALSNames+0x380>)
 800e2b6:	461a      	mov	r2, r3
 800e2b8:	460b      	mov	r3, r1
 800e2ba:	cb03      	ldmia	r3!, {r0, r1}
 800e2bc:	6010      	str	r0, [r2, #0]
 800e2be:	6051      	str	r1, [r2, #4]
 800e2c0:	8819      	ldrh	r1, [r3, #0]
 800e2c2:	789b      	ldrb	r3, [r3, #2]
 800e2c4:	8111      	strh	r1, [r2, #8]
 800e2c6:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800e2c8:	79fb      	ldrb	r3, [r7, #7]
 800e2ca:	1c5a      	adds	r2, r3, #1
 800e2cc:	71fa      	strb	r2, [r7, #7]
 800e2ce:	461a      	mov	r2, r3
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	009b      	lsls	r3, r3, #2
 800e2d4:	4413      	add	r3, r2
 800e2d6:	00db      	lsls	r3, r3, #3
 800e2d8:	4a6b      	ldr	r2, [pc, #428]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e2da:	4413      	add	r3, r2
 800e2dc:	4977      	ldr	r1, [pc, #476]	; (800e4bc <UpdateSIGNALSNames+0x384>)
 800e2de:	461a      	mov	r2, r3
 800e2e0:	460b      	mov	r3, r1
 800e2e2:	cb03      	ldmia	r3!, {r0, r1}
 800e2e4:	6010      	str	r0, [r2, #0]
 800e2e6:	6051      	str	r1, [r2, #4]
 800e2e8:	881b      	ldrh	r3, [r3, #0]
 800e2ea:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800e2ec:	79fb      	ldrb	r3, [r7, #7]
 800e2ee:	1c5a      	adds	r2, r3, #1
 800e2f0:	71fa      	strb	r2, [r7, #7]
 800e2f2:	461a      	mov	r2, r3
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	00db      	lsls	r3, r3, #3
 800e2fc:	4a62      	ldr	r2, [pc, #392]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e2fe:	4413      	add	r3, r2
 800e300:	496f      	ldr	r1, [pc, #444]	; (800e4c0 <UpdateSIGNALSNames+0x388>)
 800e302:	461a      	mov	r2, r3
 800e304:	460b      	mov	r3, r1
 800e306:	cb03      	ldmia	r3!, {r0, r1}
 800e308:	6010      	str	r0, [r2, #0]
 800e30a:	6051      	str	r1, [r2, #4]
 800e30c:	881b      	ldrh	r3, [r3, #0]
 800e30e:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800e310:	79fb      	ldrb	r3, [r7, #7]
 800e312:	1c5a      	adds	r2, r3, #1
 800e314:	71fa      	strb	r2, [r7, #7]
 800e316:	461a      	mov	r2, r3
 800e318:	4613      	mov	r3, r2
 800e31a:	009b      	lsls	r3, r3, #2
 800e31c:	4413      	add	r3, r2
 800e31e:	00db      	lsls	r3, r3, #3
 800e320:	4a59      	ldr	r2, [pc, #356]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e322:	4413      	add	r3, r2
 800e324:	4967      	ldr	r1, [pc, #412]	; (800e4c4 <UpdateSIGNALSNames+0x38c>)
 800e326:	461a      	mov	r2, r3
 800e328:	460b      	mov	r3, r1
 800e32a:	cb03      	ldmia	r3!, {r0, r1}
 800e32c:	6010      	str	r0, [r2, #0]
 800e32e:	6051      	str	r1, [r2, #4]
 800e330:	8819      	ldrh	r1, [r3, #0]
 800e332:	789b      	ldrb	r3, [r3, #2]
 800e334:	8111      	strh	r1, [r2, #8]
 800e336:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800e338:	79fb      	ldrb	r3, [r7, #7]
 800e33a:	1c5a      	adds	r2, r3, #1
 800e33c:	71fa      	strb	r2, [r7, #7]
 800e33e:	461a      	mov	r2, r3
 800e340:	4613      	mov	r3, r2
 800e342:	009b      	lsls	r3, r3, #2
 800e344:	4413      	add	r3, r2
 800e346:	00db      	lsls	r3, r3, #3
 800e348:	4a4f      	ldr	r2, [pc, #316]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e34a:	4413      	add	r3, r2
 800e34c:	495e      	ldr	r1, [pc, #376]	; (800e4c8 <UpdateSIGNALSNames+0x390>)
 800e34e:	461a      	mov	r2, r3
 800e350:	460b      	mov	r3, r1
 800e352:	cb03      	ldmia	r3!, {r0, r1}
 800e354:	6010      	str	r0, [r2, #0]
 800e356:	6051      	str	r1, [r2, #4]
 800e358:	881b      	ldrh	r3, [r3, #0]
 800e35a:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800e35c:	79fb      	ldrb	r3, [r7, #7]
 800e35e:	1c5a      	adds	r2, r3, #1
 800e360:	71fa      	strb	r2, [r7, #7]
 800e362:	461a      	mov	r2, r3
 800e364:	4613      	mov	r3, r2
 800e366:	009b      	lsls	r3, r3, #2
 800e368:	4413      	add	r3, r2
 800e36a:	00db      	lsls	r3, r3, #3
 800e36c:	4a46      	ldr	r2, [pc, #280]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e36e:	4413      	add	r3, r2
 800e370:	4a56      	ldr	r2, [pc, #344]	; (800e4cc <UpdateSIGNALSNames+0x394>)
 800e372:	6810      	ldr	r0, [r2, #0]
 800e374:	6018      	str	r0, [r3, #0]
 800e376:	8891      	ldrh	r1, [r2, #4]
 800e378:	7992      	ldrb	r2, [r2, #6]
 800e37a:	8099      	strh	r1, [r3, #4]
 800e37c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800e37e:	79fb      	ldrb	r3, [r7, #7]
 800e380:	1c5a      	adds	r2, r3, #1
 800e382:	71fa      	strb	r2, [r7, #7]
 800e384:	461a      	mov	r2, r3
 800e386:	4613      	mov	r3, r2
 800e388:	009b      	lsls	r3, r3, #2
 800e38a:	4413      	add	r3, r2
 800e38c:	00db      	lsls	r3, r3, #3
 800e38e:	4a3e      	ldr	r2, [pc, #248]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e390:	4413      	add	r3, r2
 800e392:	4a4f      	ldr	r2, [pc, #316]	; (800e4d0 <UpdateSIGNALSNames+0x398>)
 800e394:	6810      	ldr	r0, [r2, #0]
 800e396:	6018      	str	r0, [r3, #0]
 800e398:	8891      	ldrh	r1, [r2, #4]
 800e39a:	7992      	ldrb	r2, [r2, #6]
 800e39c:	8099      	strh	r1, [r3, #4]
 800e39e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800e3a0:	79fb      	ldrb	r3, [r7, #7]
 800e3a2:	1c5a      	adds	r2, r3, #1
 800e3a4:	71fa      	strb	r2, [r7, #7]
 800e3a6:	461a      	mov	r2, r3
 800e3a8:	4613      	mov	r3, r2
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	4413      	add	r3, r2
 800e3ae:	00db      	lsls	r3, r3, #3
 800e3b0:	4a35      	ldr	r2, [pc, #212]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e3b2:	4413      	add	r3, r2
 800e3b4:	4a47      	ldr	r2, [pc, #284]	; (800e4d4 <UpdateSIGNALSNames+0x39c>)
 800e3b6:	6810      	ldr	r0, [r2, #0]
 800e3b8:	6018      	str	r0, [r3, #0]
 800e3ba:	8891      	ldrh	r1, [r2, #4]
 800e3bc:	7992      	ldrb	r2, [r2, #6]
 800e3be:	8099      	strh	r1, [r3, #4]
 800e3c0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800e3c2:	79fb      	ldrb	r3, [r7, #7]
 800e3c4:	1c5a      	adds	r2, r3, #1
 800e3c6:	71fa      	strb	r2, [r7, #7]
 800e3c8:	461a      	mov	r2, r3
 800e3ca:	4613      	mov	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4413      	add	r3, r2
 800e3d0:	00db      	lsls	r3, r3, #3
 800e3d2:	4a2d      	ldr	r2, [pc, #180]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e3d4:	4413      	add	r3, r2
 800e3d6:	4a40      	ldr	r2, [pc, #256]	; (800e4d8 <UpdateSIGNALSNames+0x3a0>)
 800e3d8:	6810      	ldr	r0, [r2, #0]
 800e3da:	6018      	str	r0, [r3, #0]
 800e3dc:	8891      	ldrh	r1, [r2, #4]
 800e3de:	7992      	ldrb	r2, [r2, #6]
 800e3e0:	8099      	strh	r1, [r3, #4]
 800e3e2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800e3e4:	79fb      	ldrb	r3, [r7, #7]
 800e3e6:	1c5a      	adds	r2, r3, #1
 800e3e8:	71fa      	strb	r2, [r7, #7]
 800e3ea:	461a      	mov	r2, r3
 800e3ec:	4613      	mov	r3, r2
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	4413      	add	r3, r2
 800e3f2:	00db      	lsls	r3, r3, #3
 800e3f4:	4a24      	ldr	r2, [pc, #144]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e3f6:	4413      	add	r3, r2
 800e3f8:	4938      	ldr	r1, [pc, #224]	; (800e4dc <UpdateSIGNALSNames+0x3a4>)
 800e3fa:	461a      	mov	r2, r3
 800e3fc:	460b      	mov	r3, r1
 800e3fe:	cb03      	ldmia	r3!, {r0, r1}
 800e400:	6010      	str	r0, [r2, #0]
 800e402:	6051      	str	r1, [r2, #4]
 800e404:	8819      	ldrh	r1, [r3, #0]
 800e406:	789b      	ldrb	r3, [r3, #2]
 800e408:	8111      	strh	r1, [r2, #8]
 800e40a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800e40c:	79fb      	ldrb	r3, [r7, #7]
 800e40e:	1c5a      	adds	r2, r3, #1
 800e410:	71fa      	strb	r2, [r7, #7]
 800e412:	461a      	mov	r2, r3
 800e414:	4613      	mov	r3, r2
 800e416:	009b      	lsls	r3, r3, #2
 800e418:	4413      	add	r3, r2
 800e41a:	00db      	lsls	r3, r3, #3
 800e41c:	4a1a      	ldr	r2, [pc, #104]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e41e:	4413      	add	r3, r2
 800e420:	4a2f      	ldr	r2, [pc, #188]	; (800e4e0 <UpdateSIGNALSNames+0x3a8>)
 800e422:	6810      	ldr	r0, [r2, #0]
 800e424:	6018      	str	r0, [r3, #0]
 800e426:	8891      	ldrh	r1, [r2, #4]
 800e428:	7992      	ldrb	r2, [r2, #6]
 800e42a:	8099      	strh	r1, [r3, #4]
 800e42c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800e42e:	79fb      	ldrb	r3, [r7, #7]
 800e430:	1c5a      	adds	r2, r3, #1
 800e432:	71fa      	strb	r2, [r7, #7]
 800e434:	461a      	mov	r2, r3
 800e436:	4613      	mov	r3, r2
 800e438:	009b      	lsls	r3, r3, #2
 800e43a:	4413      	add	r3, r2
 800e43c:	00db      	lsls	r3, r3, #3
 800e43e:	4a12      	ldr	r2, [pc, #72]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e440:	4413      	add	r3, r2
 800e442:	4a28      	ldr	r2, [pc, #160]	; (800e4e4 <UpdateSIGNALSNames+0x3ac>)
 800e444:	6810      	ldr	r0, [r2, #0]
 800e446:	6018      	str	r0, [r3, #0]
 800e448:	8891      	ldrh	r1, [r2, #4]
 800e44a:	7992      	ldrb	r2, [r2, #6]
 800e44c:	8099      	strh	r1, [r3, #4]
 800e44e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800e450:	79fb      	ldrb	r3, [r7, #7]
 800e452:	1c5a      	adds	r2, r3, #1
 800e454:	71fa      	strb	r2, [r7, #7]
 800e456:	461a      	mov	r2, r3
 800e458:	4613      	mov	r3, r2
 800e45a:	009b      	lsls	r3, r3, #2
 800e45c:	4413      	add	r3, r2
 800e45e:	00db      	lsls	r3, r3, #3
 800e460:	4a09      	ldr	r2, [pc, #36]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e462:	4413      	add	r3, r2
 800e464:	4a20      	ldr	r2, [pc, #128]	; (800e4e8 <UpdateSIGNALSNames+0x3b0>)
 800e466:	6810      	ldr	r0, [r2, #0]
 800e468:	6018      	str	r0, [r3, #0]
 800e46a:	8891      	ldrh	r1, [r2, #4]
 800e46c:	7992      	ldrb	r2, [r2, #6]
 800e46e:	8099      	strh	r1, [r3, #4]
 800e470:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800e472:	79fb      	ldrb	r3, [r7, #7]
 800e474:	1c5a      	adds	r2, r3, #1
 800e476:	71fa      	strb	r2, [r7, #7]
 800e478:	461a      	mov	r2, r3
 800e47a:	4613      	mov	r3, r2
 800e47c:	009b      	lsls	r3, r3, #2
 800e47e:	4413      	add	r3, r2
 800e480:	00db      	lsls	r3, r3, #3
 800e482:	4a01      	ldr	r2, [pc, #4]	; (800e488 <UpdateSIGNALSNames+0x350>)
 800e484:	4413      	add	r3, r2
 800e486:	e031      	b.n	800e4ec <UpdateSIGNALSNames+0x3b4>
 800e488:	200040a0 	.word	0x200040a0
 800e48c:	080266d4 	.word	0x080266d4
 800e490:	080266dc 	.word	0x080266dc
 800e494:	080266e4 	.word	0x080266e4
 800e498:	080266ec 	.word	0x080266ec
 800e49c:	080266f4 	.word	0x080266f4
 800e4a0:	080266fc 	.word	0x080266fc
 800e4a4:	08026704 	.word	0x08026704
 800e4a8:	0802670c 	.word	0x0802670c
 800e4ac:	08026714 	.word	0x08026714
 800e4b0:	08026720 	.word	0x08026720
 800e4b4:	08026728 	.word	0x08026728
 800e4b8:	08026734 	.word	0x08026734
 800e4bc:	08026740 	.word	0x08026740
 800e4c0:	0802674c 	.word	0x0802674c
 800e4c4:	08026758 	.word	0x08026758
 800e4c8:	08026764 	.word	0x08026764
 800e4cc:	08026770 	.word	0x08026770
 800e4d0:	08026778 	.word	0x08026778
 800e4d4:	08026780 	.word	0x08026780
 800e4d8:	08026788 	.word	0x08026788
 800e4dc:	08026790 	.word	0x08026790
 800e4e0:	0802679c 	.word	0x0802679c
 800e4e4:	080267a4 	.word	0x080267a4
 800e4e8:	080267ac 	.word	0x080267ac
 800e4ec:	4acd      	ldr	r2, [pc, #820]	; (800e824 <UpdateSIGNALSNames+0x6ec>)
 800e4ee:	6810      	ldr	r0, [r2, #0]
 800e4f0:	6018      	str	r0, [r3, #0]
 800e4f2:	8891      	ldrh	r1, [r2, #4]
 800e4f4:	7992      	ldrb	r2, [r2, #6]
 800e4f6:	8099      	strh	r1, [r3, #4]
 800e4f8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800e4fa:	79fb      	ldrb	r3, [r7, #7]
 800e4fc:	1c5a      	adds	r2, r3, #1
 800e4fe:	71fa      	strb	r2, [r7, #7]
 800e500:	461a      	mov	r2, r3
 800e502:	4613      	mov	r3, r2
 800e504:	009b      	lsls	r3, r3, #2
 800e506:	4413      	add	r3, r2
 800e508:	00db      	lsls	r3, r3, #3
 800e50a:	4ac7      	ldr	r2, [pc, #796]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e50c:	4413      	add	r3, r2
 800e50e:	4ac7      	ldr	r2, [pc, #796]	; (800e82c <UpdateSIGNALSNames+0x6f4>)
 800e510:	6810      	ldr	r0, [r2, #0]
 800e512:	6018      	str	r0, [r3, #0]
 800e514:	8891      	ldrh	r1, [r2, #4]
 800e516:	7992      	ldrb	r2, [r2, #6]
 800e518:	8099      	strh	r1, [r3, #4]
 800e51a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e51c:	79fb      	ldrb	r3, [r7, #7]
 800e51e:	1c5a      	adds	r2, r3, #1
 800e520:	71fa      	strb	r2, [r7, #7]
 800e522:	461a      	mov	r2, r3
 800e524:	4613      	mov	r3, r2
 800e526:	009b      	lsls	r3, r3, #2
 800e528:	4413      	add	r3, r2
 800e52a:	00db      	lsls	r3, r3, #3
 800e52c:	4abe      	ldr	r2, [pc, #760]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e52e:	4413      	add	r3, r2
 800e530:	4abf      	ldr	r2, [pc, #764]	; (800e830 <UpdateSIGNALSNames+0x6f8>)
 800e532:	6810      	ldr	r0, [r2, #0]
 800e534:	6018      	str	r0, [r3, #0]
 800e536:	8891      	ldrh	r1, [r2, #4]
 800e538:	7992      	ldrb	r2, [r2, #6]
 800e53a:	8099      	strh	r1, [r3, #4]
 800e53c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e53e:	79fb      	ldrb	r3, [r7, #7]
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	71fa      	strb	r2, [r7, #7]
 800e544:	461a      	mov	r2, r3
 800e546:	4613      	mov	r3, r2
 800e548:	009b      	lsls	r3, r3, #2
 800e54a:	4413      	add	r3, r2
 800e54c:	00db      	lsls	r3, r3, #3
 800e54e:	4ab6      	ldr	r2, [pc, #728]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e550:	4413      	add	r3, r2
 800e552:	4ab8      	ldr	r2, [pc, #736]	; (800e834 <UpdateSIGNALSNames+0x6fc>)
 800e554:	6810      	ldr	r0, [r2, #0]
 800e556:	6018      	str	r0, [r3, #0]
 800e558:	8891      	ldrh	r1, [r2, #4]
 800e55a:	7992      	ldrb	r2, [r2, #6]
 800e55c:	8099      	strh	r1, [r3, #4]
 800e55e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e560:	79fb      	ldrb	r3, [r7, #7]
 800e562:	1c5a      	adds	r2, r3, #1
 800e564:	71fa      	strb	r2, [r7, #7]
 800e566:	461a      	mov	r2, r3
 800e568:	4613      	mov	r3, r2
 800e56a:	009b      	lsls	r3, r3, #2
 800e56c:	4413      	add	r3, r2
 800e56e:	00db      	lsls	r3, r3, #3
 800e570:	4aad      	ldr	r2, [pc, #692]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e572:	4413      	add	r3, r2
 800e574:	49b0      	ldr	r1, [pc, #704]	; (800e838 <UpdateSIGNALSNames+0x700>)
 800e576:	461a      	mov	r2, r3
 800e578:	460b      	mov	r3, r1
 800e57a:	cb03      	ldmia	r3!, {r0, r1}
 800e57c:	6010      	str	r0, [r2, #0]
 800e57e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e580:	79fb      	ldrb	r3, [r7, #7]
 800e582:	1c5a      	adds	r2, r3, #1
 800e584:	71fa      	strb	r2, [r7, #7]
 800e586:	461a      	mov	r2, r3
 800e588:	4613      	mov	r3, r2
 800e58a:	009b      	lsls	r3, r3, #2
 800e58c:	4413      	add	r3, r2
 800e58e:	00db      	lsls	r3, r3, #3
 800e590:	4aa5      	ldr	r2, [pc, #660]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e592:	4413      	add	r3, r2
 800e594:	49a9      	ldr	r1, [pc, #676]	; (800e83c <UpdateSIGNALSNames+0x704>)
 800e596:	461a      	mov	r2, r3
 800e598:	460b      	mov	r3, r1
 800e59a:	cb03      	ldmia	r3!, {r0, r1}
 800e59c:	6010      	str	r0, [r2, #0]
 800e59e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e5a0:	79fb      	ldrb	r3, [r7, #7]
 800e5a2:	1c5a      	adds	r2, r3, #1
 800e5a4:	71fa      	strb	r2, [r7, #7]
 800e5a6:	461a      	mov	r2, r3
 800e5a8:	4613      	mov	r3, r2
 800e5aa:	009b      	lsls	r3, r3, #2
 800e5ac:	4413      	add	r3, r2
 800e5ae:	00db      	lsls	r3, r3, #3
 800e5b0:	4a9d      	ldr	r2, [pc, #628]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e5b2:	4413      	add	r3, r2
 800e5b4:	49a2      	ldr	r1, [pc, #648]	; (800e840 <UpdateSIGNALSNames+0x708>)
 800e5b6:	461a      	mov	r2, r3
 800e5b8:	460b      	mov	r3, r1
 800e5ba:	cb03      	ldmia	r3!, {r0, r1}
 800e5bc:	6010      	str	r0, [r2, #0]
 800e5be:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e5c0:	79fb      	ldrb	r3, [r7, #7]
 800e5c2:	1c5a      	adds	r2, r3, #1
 800e5c4:	71fa      	strb	r2, [r7, #7]
 800e5c6:	461a      	mov	r2, r3
 800e5c8:	4613      	mov	r3, r2
 800e5ca:	009b      	lsls	r3, r3, #2
 800e5cc:	4413      	add	r3, r2
 800e5ce:	00db      	lsls	r3, r3, #3
 800e5d0:	4a95      	ldr	r2, [pc, #596]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e5d2:	4413      	add	r3, r2
 800e5d4:	499b      	ldr	r1, [pc, #620]	; (800e844 <UpdateSIGNALSNames+0x70c>)
 800e5d6:	461a      	mov	r2, r3
 800e5d8:	460b      	mov	r3, r1
 800e5da:	cb03      	ldmia	r3!, {r0, r1}
 800e5dc:	6010      	str	r0, [r2, #0]
 800e5de:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e5e0:	79fb      	ldrb	r3, [r7, #7]
 800e5e2:	1c5a      	adds	r2, r3, #1
 800e5e4:	71fa      	strb	r2, [r7, #7]
 800e5e6:	461a      	mov	r2, r3
 800e5e8:	4613      	mov	r3, r2
 800e5ea:	009b      	lsls	r3, r3, #2
 800e5ec:	4413      	add	r3, r2
 800e5ee:	00db      	lsls	r3, r3, #3
 800e5f0:	4a8d      	ldr	r2, [pc, #564]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e5f2:	4413      	add	r3, r2
 800e5f4:	4994      	ldr	r1, [pc, #592]	; (800e848 <UpdateSIGNALSNames+0x710>)
 800e5f6:	461a      	mov	r2, r3
 800e5f8:	460b      	mov	r3, r1
 800e5fa:	cb03      	ldmia	r3!, {r0, r1}
 800e5fc:	6010      	str	r0, [r2, #0]
 800e5fe:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e600:	79fb      	ldrb	r3, [r7, #7]
 800e602:	1c5a      	adds	r2, r3, #1
 800e604:	71fa      	strb	r2, [r7, #7]
 800e606:	461a      	mov	r2, r3
 800e608:	4613      	mov	r3, r2
 800e60a:	009b      	lsls	r3, r3, #2
 800e60c:	4413      	add	r3, r2
 800e60e:	00db      	lsls	r3, r3, #3
 800e610:	4a85      	ldr	r2, [pc, #532]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e612:	4413      	add	r3, r2
 800e614:	498d      	ldr	r1, [pc, #564]	; (800e84c <UpdateSIGNALSNames+0x714>)
 800e616:	461a      	mov	r2, r3
 800e618:	460b      	mov	r3, r1
 800e61a:	cb03      	ldmia	r3!, {r0, r1}
 800e61c:	6010      	str	r0, [r2, #0]
 800e61e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e620:	79fb      	ldrb	r3, [r7, #7]
 800e622:	1c5a      	adds	r2, r3, #1
 800e624:	71fa      	strb	r2, [r7, #7]
 800e626:	461a      	mov	r2, r3
 800e628:	4613      	mov	r3, r2
 800e62a:	009b      	lsls	r3, r3, #2
 800e62c:	4413      	add	r3, r2
 800e62e:	00db      	lsls	r3, r3, #3
 800e630:	4a7d      	ldr	r2, [pc, #500]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e632:	4413      	add	r3, r2
 800e634:	4986      	ldr	r1, [pc, #536]	; (800e850 <UpdateSIGNALSNames+0x718>)
 800e636:	461a      	mov	r2, r3
 800e638:	460b      	mov	r3, r1
 800e63a:	cb03      	ldmia	r3!, {r0, r1}
 800e63c:	6010      	str	r0, [r2, #0]
 800e63e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e640:	79fb      	ldrb	r3, [r7, #7]
 800e642:	1c5a      	adds	r2, r3, #1
 800e644:	71fa      	strb	r2, [r7, #7]
 800e646:	461a      	mov	r2, r3
 800e648:	4613      	mov	r3, r2
 800e64a:	009b      	lsls	r3, r3, #2
 800e64c:	4413      	add	r3, r2
 800e64e:	00db      	lsls	r3, r3, #3
 800e650:	4a75      	ldr	r2, [pc, #468]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e652:	4413      	add	r3, r2
 800e654:	497f      	ldr	r1, [pc, #508]	; (800e854 <UpdateSIGNALSNames+0x71c>)
 800e656:	461a      	mov	r2, r3
 800e658:	460b      	mov	r3, r1
 800e65a:	cb03      	ldmia	r3!, {r0, r1}
 800e65c:	6010      	str	r0, [r2, #0]
 800e65e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e660:	79fb      	ldrb	r3, [r7, #7]
 800e662:	1c5a      	adds	r2, r3, #1
 800e664:	71fa      	strb	r2, [r7, #7]
 800e666:	461a      	mov	r2, r3
 800e668:	4613      	mov	r3, r2
 800e66a:	009b      	lsls	r3, r3, #2
 800e66c:	4413      	add	r3, r2
 800e66e:	00db      	lsls	r3, r3, #3
 800e670:	4a6d      	ldr	r2, [pc, #436]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e672:	4413      	add	r3, r2
 800e674:	4978      	ldr	r1, [pc, #480]	; (800e858 <UpdateSIGNALSNames+0x720>)
 800e676:	461a      	mov	r2, r3
 800e678:	460b      	mov	r3, r1
 800e67a:	cb03      	ldmia	r3!, {r0, r1}
 800e67c:	6010      	str	r0, [r2, #0]
 800e67e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e680:	79fb      	ldrb	r3, [r7, #7]
 800e682:	1c5a      	adds	r2, r3, #1
 800e684:	71fa      	strb	r2, [r7, #7]
 800e686:	461a      	mov	r2, r3
 800e688:	4613      	mov	r3, r2
 800e68a:	009b      	lsls	r3, r3, #2
 800e68c:	4413      	add	r3, r2
 800e68e:	00db      	lsls	r3, r3, #3
 800e690:	4a65      	ldr	r2, [pc, #404]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e692:	4413      	add	r3, r2
 800e694:	4971      	ldr	r1, [pc, #452]	; (800e85c <UpdateSIGNALSNames+0x724>)
 800e696:	461a      	mov	r2, r3
 800e698:	460b      	mov	r3, r1
 800e69a:	cb03      	ldmia	r3!, {r0, r1}
 800e69c:	6010      	str	r0, [r2, #0]
 800e69e:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e6a0:	79fb      	ldrb	r3, [r7, #7]
 800e6a2:	1c5a      	adds	r2, r3, #1
 800e6a4:	71fa      	strb	r2, [r7, #7]
 800e6a6:	461a      	mov	r2, r3
 800e6a8:	4613      	mov	r3, r2
 800e6aa:	009b      	lsls	r3, r3, #2
 800e6ac:	4413      	add	r3, r2
 800e6ae:	00db      	lsls	r3, r3, #3
 800e6b0:	4a5d      	ldr	r2, [pc, #372]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e6b2:	4413      	add	r3, r2
 800e6b4:	496a      	ldr	r1, [pc, #424]	; (800e860 <UpdateSIGNALSNames+0x728>)
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	cb03      	ldmia	r3!, {r0, r1}
 800e6bc:	6010      	str	r0, [r2, #0]
 800e6be:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e6c0:	79fb      	ldrb	r3, [r7, #7]
 800e6c2:	1c5a      	adds	r2, r3, #1
 800e6c4:	71fa      	strb	r2, [r7, #7]
 800e6c6:	461a      	mov	r2, r3
 800e6c8:	4613      	mov	r3, r2
 800e6ca:	009b      	lsls	r3, r3, #2
 800e6cc:	4413      	add	r3, r2
 800e6ce:	00db      	lsls	r3, r3, #3
 800e6d0:	4a55      	ldr	r2, [pc, #340]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e6d2:	4413      	add	r3, r2
 800e6d4:	4963      	ldr	r1, [pc, #396]	; (800e864 <UpdateSIGNALSNames+0x72c>)
 800e6d6:	461a      	mov	r2, r3
 800e6d8:	460b      	mov	r3, r1
 800e6da:	cb03      	ldmia	r3!, {r0, r1}
 800e6dc:	6010      	str	r0, [r2, #0]
 800e6de:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e6e0:	79fb      	ldrb	r3, [r7, #7]
 800e6e2:	1c5a      	adds	r2, r3, #1
 800e6e4:	71fa      	strb	r2, [r7, #7]
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	4613      	mov	r3, r2
 800e6ea:	009b      	lsls	r3, r3, #2
 800e6ec:	4413      	add	r3, r2
 800e6ee:	00db      	lsls	r3, r3, #3
 800e6f0:	4a4d      	ldr	r2, [pc, #308]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e6f2:	4413      	add	r3, r2
 800e6f4:	495c      	ldr	r1, [pc, #368]	; (800e868 <UpdateSIGNALSNames+0x730>)
 800e6f6:	461a      	mov	r2, r3
 800e6f8:	460b      	mov	r3, r1
 800e6fa:	cb03      	ldmia	r3!, {r0, r1}
 800e6fc:	6010      	str	r0, [r2, #0]
 800e6fe:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e700:	79fb      	ldrb	r3, [r7, #7]
 800e702:	1c5a      	adds	r2, r3, #1
 800e704:	71fa      	strb	r2, [r7, #7]
 800e706:	461a      	mov	r2, r3
 800e708:	4613      	mov	r3, r2
 800e70a:	009b      	lsls	r3, r3, #2
 800e70c:	4413      	add	r3, r2
 800e70e:	00db      	lsls	r3, r3, #3
 800e710:	4a45      	ldr	r2, [pc, #276]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e712:	4413      	add	r3, r2
 800e714:	4a55      	ldr	r2, [pc, #340]	; (800e86c <UpdateSIGNALSNames+0x734>)
 800e716:	461c      	mov	r4, r3
 800e718:	4613      	mov	r3, r2
 800e71a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e71c:	6020      	str	r0, [r4, #0]
 800e71e:	6061      	str	r1, [r4, #4]
 800e720:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e722:	79fb      	ldrb	r3, [r7, #7]
 800e724:	1c5a      	adds	r2, r3, #1
 800e726:	71fa      	strb	r2, [r7, #7]
 800e728:	461a      	mov	r2, r3
 800e72a:	4613      	mov	r3, r2
 800e72c:	009b      	lsls	r3, r3, #2
 800e72e:	4413      	add	r3, r2
 800e730:	00db      	lsls	r3, r3, #3
 800e732:	4a3d      	ldr	r2, [pc, #244]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e734:	4413      	add	r3, r2
 800e736:	494e      	ldr	r1, [pc, #312]	; (800e870 <UpdateSIGNALSNames+0x738>)
 800e738:	461a      	mov	r2, r3
 800e73a:	460b      	mov	r3, r1
 800e73c:	cb03      	ldmia	r3!, {r0, r1}
 800e73e:	6010      	str	r0, [r2, #0]
 800e740:	6051      	str	r1, [r2, #4]
 800e742:	8819      	ldrh	r1, [r3, #0]
 800e744:	789b      	ldrb	r3, [r3, #2]
 800e746:	8111      	strh	r1, [r2, #8]
 800e748:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e74a:	79fb      	ldrb	r3, [r7, #7]
 800e74c:	1c5a      	adds	r2, r3, #1
 800e74e:	71fa      	strb	r2, [r7, #7]
 800e750:	461a      	mov	r2, r3
 800e752:	4613      	mov	r3, r2
 800e754:	009b      	lsls	r3, r3, #2
 800e756:	4413      	add	r3, r2
 800e758:	00db      	lsls	r3, r3, #3
 800e75a:	4a33      	ldr	r2, [pc, #204]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e75c:	4413      	add	r3, r2
 800e75e:	4a45      	ldr	r2, [pc, #276]	; (800e874 <UpdateSIGNALSNames+0x73c>)
 800e760:	461c      	mov	r4, r3
 800e762:	4613      	mov	r3, r2
 800e764:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e766:	6020      	str	r0, [r4, #0]
 800e768:	6061      	str	r1, [r4, #4]
 800e76a:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e76c:	79fb      	ldrb	r3, [r7, #7]
 800e76e:	1c5a      	adds	r2, r3, #1
 800e770:	71fa      	strb	r2, [r7, #7]
 800e772:	461a      	mov	r2, r3
 800e774:	4613      	mov	r3, r2
 800e776:	009b      	lsls	r3, r3, #2
 800e778:	4413      	add	r3, r2
 800e77a:	00db      	lsls	r3, r3, #3
 800e77c:	4a2a      	ldr	r2, [pc, #168]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e77e:	4413      	add	r3, r2
 800e780:	493d      	ldr	r1, [pc, #244]	; (800e878 <UpdateSIGNALSNames+0x740>)
 800e782:	461a      	mov	r2, r3
 800e784:	460b      	mov	r3, r1
 800e786:	cb03      	ldmia	r3!, {r0, r1}
 800e788:	6010      	str	r0, [r2, #0]
 800e78a:	6051      	str	r1, [r2, #4]
 800e78c:	8819      	ldrh	r1, [r3, #0]
 800e78e:	789b      	ldrb	r3, [r3, #2]
 800e790:	8111      	strh	r1, [r2, #8]
 800e792:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e794:	79fb      	ldrb	r3, [r7, #7]
 800e796:	1c5a      	adds	r2, r3, #1
 800e798:	71fa      	strb	r2, [r7, #7]
 800e79a:	461a      	mov	r2, r3
 800e79c:	4613      	mov	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	4413      	add	r3, r2
 800e7a2:	00db      	lsls	r3, r3, #3
 800e7a4:	4a20      	ldr	r2, [pc, #128]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e7a6:	4413      	add	r3, r2
 800e7a8:	4934      	ldr	r1, [pc, #208]	; (800e87c <UpdateSIGNALSNames+0x744>)
 800e7aa:	461a      	mov	r2, r3
 800e7ac:	460b      	mov	r3, r1
 800e7ae:	cb03      	ldmia	r3!, {r0, r1}
 800e7b0:	6010      	str	r0, [r2, #0]
 800e7b2:	6051      	str	r1, [r2, #4]
 800e7b4:	8819      	ldrh	r1, [r3, #0]
 800e7b6:	789b      	ldrb	r3, [r3, #2]
 800e7b8:	8111      	strh	r1, [r2, #8]
 800e7ba:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e7bc:	79fb      	ldrb	r3, [r7, #7]
 800e7be:	1c5a      	adds	r2, r3, #1
 800e7c0:	71fa      	strb	r2, [r7, #7]
 800e7c2:	461a      	mov	r2, r3
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	00db      	lsls	r3, r3, #3
 800e7cc:	4a16      	ldr	r2, [pc, #88]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e7ce:	4413      	add	r3, r2
 800e7d0:	4a2b      	ldr	r2, [pc, #172]	; (800e880 <UpdateSIGNALSNames+0x748>)
 800e7d2:	461c      	mov	r4, r3
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e7d8:	6020      	str	r0, [r4, #0]
 800e7da:	6061      	str	r1, [r4, #4]
 800e7dc:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e7de:	79fb      	ldrb	r3, [r7, #7]
 800e7e0:	1c5a      	adds	r2, r3, #1
 800e7e2:	71fa      	strb	r2, [r7, #7]
 800e7e4:	461a      	mov	r2, r3
 800e7e6:	4613      	mov	r3, r2
 800e7e8:	009b      	lsls	r3, r3, #2
 800e7ea:	4413      	add	r3, r2
 800e7ec:	00db      	lsls	r3, r3, #3
 800e7ee:	4a0e      	ldr	r2, [pc, #56]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e7f0:	4413      	add	r3, r2
 800e7f2:	4924      	ldr	r1, [pc, #144]	; (800e884 <UpdateSIGNALSNames+0x74c>)
 800e7f4:	461a      	mov	r2, r3
 800e7f6:	460b      	mov	r3, r1
 800e7f8:	cb03      	ldmia	r3!, {r0, r1}
 800e7fa:	6010      	str	r0, [r2, #0]
 800e7fc:	6051      	str	r1, [r2, #4]
 800e7fe:	8819      	ldrh	r1, [r3, #0]
 800e800:	789b      	ldrb	r3, [r3, #2]
 800e802:	8111      	strh	r1, [r2, #8]
 800e804:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800e806:	79fb      	ldrb	r3, [r7, #7]
 800e808:	1c5a      	adds	r2, r3, #1
 800e80a:	71fa      	strb	r2, [r7, #7]
 800e80c:	461a      	mov	r2, r3
 800e80e:	4613      	mov	r3, r2
 800e810:	009b      	lsls	r3, r3, #2
 800e812:	4413      	add	r3, r2
 800e814:	00db      	lsls	r3, r3, #3
 800e816:	4a04      	ldr	r2, [pc, #16]	; (800e828 <UpdateSIGNALSNames+0x6f0>)
 800e818:	4413      	add	r3, r2
 800e81a:	4a1b      	ldr	r2, [pc, #108]	; (800e888 <UpdateSIGNALSNames+0x750>)
 800e81c:	6810      	ldr	r0, [r2, #0]
 800e81e:	6018      	str	r0, [r3, #0]
 800e820:	e034      	b.n	800e88c <UpdateSIGNALSNames+0x754>
 800e822:	bf00      	nop
 800e824:	080267b4 	.word	0x080267b4
 800e828:	200040a0 	.word	0x200040a0
 800e82c:	080267bc 	.word	0x080267bc
 800e830:	080267c4 	.word	0x080267c4
 800e834:	080267cc 	.word	0x080267cc
 800e838:	080267d4 	.word	0x080267d4
 800e83c:	080267dc 	.word	0x080267dc
 800e840:	080267e4 	.word	0x080267e4
 800e844:	080267ec 	.word	0x080267ec
 800e848:	080267f4 	.word	0x080267f4
 800e84c:	080267fc 	.word	0x080267fc
 800e850:	08026804 	.word	0x08026804
 800e854:	0802680c 	.word	0x0802680c
 800e858:	08026814 	.word	0x08026814
 800e85c:	0802681c 	.word	0x0802681c
 800e860:	08026824 	.word	0x08026824
 800e864:	0802682c 	.word	0x0802682c
 800e868:	08026834 	.word	0x08026834
 800e86c:	0802683c 	.word	0x0802683c
 800e870:	08026848 	.word	0x08026848
 800e874:	08026854 	.word	0x08026854
 800e878:	08026860 	.word	0x08026860
 800e87c:	0802686c 	.word	0x0802686c
 800e880:	08026878 	.word	0x08026878
 800e884:	08026884 	.word	0x08026884
 800e888:	08026890 	.word	0x08026890
 800e88c:	8891      	ldrh	r1, [r2, #4]
 800e88e:	7992      	ldrb	r2, [r2, #6]
 800e890:	8099      	strh	r1, [r3, #4]
 800e892:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800e894:	79fb      	ldrb	r3, [r7, #7]
 800e896:	1c5a      	adds	r2, r3, #1
 800e898:	71fa      	strb	r2, [r7, #7]
 800e89a:	461a      	mov	r2, r3
 800e89c:	4613      	mov	r3, r2
 800e89e:	009b      	lsls	r3, r3, #2
 800e8a0:	4413      	add	r3, r2
 800e8a2:	00db      	lsls	r3, r3, #3
 800e8a4:	4a82      	ldr	r2, [pc, #520]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e8a6:	4413      	add	r3, r2
 800e8a8:	4a82      	ldr	r2, [pc, #520]	; (800eab4 <UpdateSIGNALSNames+0x97c>)
 800e8aa:	6810      	ldr	r0, [r2, #0]
 800e8ac:	6018      	str	r0, [r3, #0]
 800e8ae:	8891      	ldrh	r1, [r2, #4]
 800e8b0:	7992      	ldrb	r2, [r2, #6]
 800e8b2:	8099      	strh	r1, [r3, #4]
 800e8b4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800e8b6:	79fb      	ldrb	r3, [r7, #7]
 800e8b8:	1c5a      	adds	r2, r3, #1
 800e8ba:	71fa      	strb	r2, [r7, #7]
 800e8bc:	461a      	mov	r2, r3
 800e8be:	4613      	mov	r3, r2
 800e8c0:	009b      	lsls	r3, r3, #2
 800e8c2:	4413      	add	r3, r2
 800e8c4:	00db      	lsls	r3, r3, #3
 800e8c6:	4a7a      	ldr	r2, [pc, #488]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e8c8:	4413      	add	r3, r2
 800e8ca:	4a7b      	ldr	r2, [pc, #492]	; (800eab8 <UpdateSIGNALSNames+0x980>)
 800e8cc:	6810      	ldr	r0, [r2, #0]
 800e8ce:	6018      	str	r0, [r3, #0]
 800e8d0:	8891      	ldrh	r1, [r2, #4]
 800e8d2:	7992      	ldrb	r2, [r2, #6]
 800e8d4:	8099      	strh	r1, [r3, #4]
 800e8d6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800e8d8:	79fb      	ldrb	r3, [r7, #7]
 800e8da:	1c5a      	adds	r2, r3, #1
 800e8dc:	71fa      	strb	r2, [r7, #7]
 800e8de:	461a      	mov	r2, r3
 800e8e0:	4613      	mov	r3, r2
 800e8e2:	009b      	lsls	r3, r3, #2
 800e8e4:	4413      	add	r3, r2
 800e8e6:	00db      	lsls	r3, r3, #3
 800e8e8:	4a71      	ldr	r2, [pc, #452]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e8ea:	4413      	add	r3, r2
 800e8ec:	4a73      	ldr	r2, [pc, #460]	; (800eabc <UpdateSIGNALSNames+0x984>)
 800e8ee:	6810      	ldr	r0, [r2, #0]
 800e8f0:	6018      	str	r0, [r3, #0]
 800e8f2:	8891      	ldrh	r1, [r2, #4]
 800e8f4:	7992      	ldrb	r2, [r2, #6]
 800e8f6:	8099      	strh	r1, [r3, #4]
 800e8f8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800e8fa:	79fb      	ldrb	r3, [r7, #7]
 800e8fc:	1c5a      	adds	r2, r3, #1
 800e8fe:	71fa      	strb	r2, [r7, #7]
 800e900:	461a      	mov	r2, r3
 800e902:	4613      	mov	r3, r2
 800e904:	009b      	lsls	r3, r3, #2
 800e906:	4413      	add	r3, r2
 800e908:	00db      	lsls	r3, r3, #3
 800e90a:	4a69      	ldr	r2, [pc, #420]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e90c:	4413      	add	r3, r2
 800e90e:	4a6c      	ldr	r2, [pc, #432]	; (800eac0 <UpdateSIGNALSNames+0x988>)
 800e910:	6810      	ldr	r0, [r2, #0]
 800e912:	6018      	str	r0, [r3, #0]
 800e914:	8891      	ldrh	r1, [r2, #4]
 800e916:	7992      	ldrb	r2, [r2, #6]
 800e918:	8099      	strh	r1, [r3, #4]
 800e91a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800e91c:	79fb      	ldrb	r3, [r7, #7]
 800e91e:	1c5a      	adds	r2, r3, #1
 800e920:	71fa      	strb	r2, [r7, #7]
 800e922:	461a      	mov	r2, r3
 800e924:	4613      	mov	r3, r2
 800e926:	009b      	lsls	r3, r3, #2
 800e928:	4413      	add	r3, r2
 800e92a:	00db      	lsls	r3, r3, #3
 800e92c:	4a60      	ldr	r2, [pc, #384]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e92e:	4413      	add	r3, r2
 800e930:	4a64      	ldr	r2, [pc, #400]	; (800eac4 <UpdateSIGNALSNames+0x98c>)
 800e932:	6810      	ldr	r0, [r2, #0]
 800e934:	6018      	str	r0, [r3, #0]
 800e936:	8891      	ldrh	r1, [r2, #4]
 800e938:	7992      	ldrb	r2, [r2, #6]
 800e93a:	8099      	strh	r1, [r3, #4]
 800e93c:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800e93e:	79fb      	ldrb	r3, [r7, #7]
 800e940:	1c5a      	adds	r2, r3, #1
 800e942:	71fa      	strb	r2, [r7, #7]
 800e944:	461a      	mov	r2, r3
 800e946:	4613      	mov	r3, r2
 800e948:	009b      	lsls	r3, r3, #2
 800e94a:	4413      	add	r3, r2
 800e94c:	00db      	lsls	r3, r3, #3
 800e94e:	4a58      	ldr	r2, [pc, #352]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e950:	4413      	add	r3, r2
 800e952:	4a5d      	ldr	r2, [pc, #372]	; (800eac8 <UpdateSIGNALSNames+0x990>)
 800e954:	6810      	ldr	r0, [r2, #0]
 800e956:	6018      	str	r0, [r3, #0]
 800e958:	8891      	ldrh	r1, [r2, #4]
 800e95a:	7992      	ldrb	r2, [r2, #6]
 800e95c:	8099      	strh	r1, [r3, #4]
 800e95e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800e960:	79fb      	ldrb	r3, [r7, #7]
 800e962:	1c5a      	adds	r2, r3, #1
 800e964:	71fa      	strb	r2, [r7, #7]
 800e966:	461a      	mov	r2, r3
 800e968:	4613      	mov	r3, r2
 800e96a:	009b      	lsls	r3, r3, #2
 800e96c:	4413      	add	r3, r2
 800e96e:	00db      	lsls	r3, r3, #3
 800e970:	4a4f      	ldr	r2, [pc, #316]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e972:	4413      	add	r3, r2
 800e974:	4a55      	ldr	r2, [pc, #340]	; (800eacc <UpdateSIGNALSNames+0x994>)
 800e976:	6810      	ldr	r0, [r2, #0]
 800e978:	6018      	str	r0, [r3, #0]
 800e97a:	8891      	ldrh	r1, [r2, #4]
 800e97c:	7992      	ldrb	r2, [r2, #6]
 800e97e:	8099      	strh	r1, [r3, #4]
 800e980:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800e982:	79fb      	ldrb	r3, [r7, #7]
 800e984:	1c5a      	adds	r2, r3, #1
 800e986:	71fa      	strb	r2, [r7, #7]
 800e988:	461a      	mov	r2, r3
 800e98a:	4613      	mov	r3, r2
 800e98c:	009b      	lsls	r3, r3, #2
 800e98e:	4413      	add	r3, r2
 800e990:	00db      	lsls	r3, r3, #3
 800e992:	4a47      	ldr	r2, [pc, #284]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e994:	4413      	add	r3, r2
 800e996:	4a4e      	ldr	r2, [pc, #312]	; (800ead0 <UpdateSIGNALSNames+0x998>)
 800e998:	6810      	ldr	r0, [r2, #0]
 800e99a:	6018      	str	r0, [r3, #0]
 800e99c:	8891      	ldrh	r1, [r2, #4]
 800e99e:	7992      	ldrb	r2, [r2, #6]
 800e9a0:	8099      	strh	r1, [r3, #4]
 800e9a2:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800e9a4:	79fb      	ldrb	r3, [r7, #7]
 800e9a6:	1c5a      	adds	r2, r3, #1
 800e9a8:	71fa      	strb	r2, [r7, #7]
 800e9aa:	461a      	mov	r2, r3
 800e9ac:	4613      	mov	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4413      	add	r3, r2
 800e9b2:	00db      	lsls	r3, r3, #3
 800e9b4:	4a3e      	ldr	r2, [pc, #248]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e9b6:	4413      	add	r3, r2
 800e9b8:	4a46      	ldr	r2, [pc, #280]	; (800ead4 <UpdateSIGNALSNames+0x99c>)
 800e9ba:	6810      	ldr	r0, [r2, #0]
 800e9bc:	6018      	str	r0, [r3, #0]
 800e9be:	8891      	ldrh	r1, [r2, #4]
 800e9c0:	7992      	ldrb	r2, [r2, #6]
 800e9c2:	8099      	strh	r1, [r3, #4]
 800e9c4:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800e9c6:	79fb      	ldrb	r3, [r7, #7]
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	71fa      	strb	r2, [r7, #7]
 800e9cc:	461a      	mov	r2, r3
 800e9ce:	4613      	mov	r3, r2
 800e9d0:	009b      	lsls	r3, r3, #2
 800e9d2:	4413      	add	r3, r2
 800e9d4:	00db      	lsls	r3, r3, #3
 800e9d6:	4a36      	ldr	r2, [pc, #216]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e9d8:	4413      	add	r3, r2
 800e9da:	4a3f      	ldr	r2, [pc, #252]	; (800ead8 <UpdateSIGNALSNames+0x9a0>)
 800e9dc:	6810      	ldr	r0, [r2, #0]
 800e9de:	6018      	str	r0, [r3, #0]
 800e9e0:	8891      	ldrh	r1, [r2, #4]
 800e9e2:	7992      	ldrb	r2, [r2, #6]
 800e9e4:	8099      	strh	r1, [r3, #4]
 800e9e6:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800e9e8:	79fb      	ldrb	r3, [r7, #7]
 800e9ea:	1c5a      	adds	r2, r3, #1
 800e9ec:	71fa      	strb	r2, [r7, #7]
 800e9ee:	461a      	mov	r2, r3
 800e9f0:	4613      	mov	r3, r2
 800e9f2:	009b      	lsls	r3, r3, #2
 800e9f4:	4413      	add	r3, r2
 800e9f6:	00db      	lsls	r3, r3, #3
 800e9f8:	4a2d      	ldr	r2, [pc, #180]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800e9fa:	4413      	add	r3, r2
 800e9fc:	4a37      	ldr	r2, [pc, #220]	; (800eadc <UpdateSIGNALSNames+0x9a4>)
 800e9fe:	6810      	ldr	r0, [r2, #0]
 800ea00:	6018      	str	r0, [r3, #0]
 800ea02:	8891      	ldrh	r1, [r2, #4]
 800ea04:	7992      	ldrb	r2, [r2, #6]
 800ea06:	8099      	strh	r1, [r3, #4]
 800ea08:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800ea0a:	79fb      	ldrb	r3, [r7, #7]
 800ea0c:	1c5a      	adds	r2, r3, #1
 800ea0e:	71fa      	strb	r2, [r7, #7]
 800ea10:	461a      	mov	r2, r3
 800ea12:	4613      	mov	r3, r2
 800ea14:	009b      	lsls	r3, r3, #2
 800ea16:	4413      	add	r3, r2
 800ea18:	00db      	lsls	r3, r3, #3
 800ea1a:	4a25      	ldr	r2, [pc, #148]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800ea1c:	4413      	add	r3, r2
 800ea1e:	4930      	ldr	r1, [pc, #192]	; (800eae0 <UpdateSIGNALSNames+0x9a8>)
 800ea20:	461a      	mov	r2, r3
 800ea22:	460b      	mov	r3, r1
 800ea24:	cb03      	ldmia	r3!, {r0, r1}
 800ea26:	6010      	str	r0, [r2, #0]
 800ea28:	6051      	str	r1, [r2, #4]
 800ea2a:	881b      	ldrh	r3, [r3, #0]
 800ea2c:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800ea2e:	79fb      	ldrb	r3, [r7, #7]
 800ea30:	1c5a      	adds	r2, r3, #1
 800ea32:	71fa      	strb	r2, [r7, #7]
 800ea34:	461a      	mov	r2, r3
 800ea36:	4613      	mov	r3, r2
 800ea38:	009b      	lsls	r3, r3, #2
 800ea3a:	4413      	add	r3, r2
 800ea3c:	00db      	lsls	r3, r3, #3
 800ea3e:	4a1c      	ldr	r2, [pc, #112]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800ea40:	4413      	add	r3, r2
 800ea42:	4a28      	ldr	r2, [pc, #160]	; (800eae4 <UpdateSIGNALSNames+0x9ac>)
 800ea44:	6810      	ldr	r0, [r2, #0]
 800ea46:	6018      	str	r0, [r3, #0]
 800ea48:	8891      	ldrh	r1, [r2, #4]
 800ea4a:	7992      	ldrb	r2, [r2, #6]
 800ea4c:	8099      	strh	r1, [r3, #4]
 800ea4e:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800ea50:	79fb      	ldrb	r3, [r7, #7]
 800ea52:	1c5a      	adds	r2, r3, #1
 800ea54:	71fa      	strb	r2, [r7, #7]
 800ea56:	461a      	mov	r2, r3
 800ea58:	4613      	mov	r3, r2
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	00db      	lsls	r3, r3, #3
 800ea60:	4a13      	ldr	r2, [pc, #76]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800ea62:	4413      	add	r3, r2
 800ea64:	4a20      	ldr	r2, [pc, #128]	; (800eae8 <UpdateSIGNALSNames+0x9b0>)
 800ea66:	461c      	mov	r4, r3
 800ea68:	4613      	mov	r3, r2
 800ea6a:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea6c:	6020      	str	r0, [r4, #0]
 800ea6e:	6061      	str	r1, [r4, #4]
 800ea70:	60a2      	str	r2, [r4, #8]
 800ea72:	781b      	ldrb	r3, [r3, #0]
 800ea74:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800ea76:	79fb      	ldrb	r3, [r7, #7]
 800ea78:	1c5a      	adds	r2, r3, #1
 800ea7a:	71fa      	strb	r2, [r7, #7]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	4613      	mov	r3, r2
 800ea80:	009b      	lsls	r3, r3, #2
 800ea82:	4413      	add	r3, r2
 800ea84:	00db      	lsls	r3, r3, #3
 800ea86:	4a0a      	ldr	r2, [pc, #40]	; (800eab0 <UpdateSIGNALSNames+0x978>)
 800ea88:	4413      	add	r3, r2
 800ea8a:	4a18      	ldr	r2, [pc, #96]	; (800eaec <UpdateSIGNALSNames+0x9b4>)
 800ea8c:	461c      	mov	r4, r3
 800ea8e:	4613      	mov	r3, r2
 800ea90:	cb07      	ldmia	r3!, {r0, r1, r2}
 800ea92:	6020      	str	r0, [r4, #0]
 800ea94:	6061      	str	r1, [r4, #4]
 800ea96:	60a2      	str	r2, [r4, #8]
 800ea98:	781b      	ldrb	r3, [r3, #0]
 800ea9a:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800ea9c:	79fb      	ldrb	r3, [r7, #7]
 800ea9e:	b29a      	uxth	r2, r3
 800eaa0:	4b13      	ldr	r3, [pc, #76]	; (800eaf0 <UpdateSIGNALSNames+0x9b8>)
 800eaa2:	801a      	strh	r2, [r3, #0]


}
 800eaa4:	bf00      	nop
 800eaa6:	3708      	adds	r7, #8
 800eaa8:	46bd      	mov	sp, r7
 800eaaa:	bc90      	pop	{r4, r7}
 800eaac:	4770      	bx	lr
 800eaae:	bf00      	nop
 800eab0:	200040a0 	.word	0x200040a0
 800eab4:	08026898 	.word	0x08026898
 800eab8:	080268a0 	.word	0x080268a0
 800eabc:	080268a8 	.word	0x080268a8
 800eac0:	080268b0 	.word	0x080268b0
 800eac4:	080268b8 	.word	0x080268b8
 800eac8:	080268c0 	.word	0x080268c0
 800eacc:	080268c8 	.word	0x080268c8
 800ead0:	080268d0 	.word	0x080268d0
 800ead4:	080268d8 	.word	0x080268d8
 800ead8:	080268e0 	.word	0x080268e0
 800eadc:	080268e8 	.word	0x080268e8
 800eae0:	080268f0 	.word	0x080268f0
 800eae4:	080268fc 	.word	0x080268fc
 800eae8:	08026904 	.word	0x08026904
 800eaec:	08026914 	.word	0x08026914
 800eaf0:	20004b90 	.word	0x20004b90

0800eaf4 <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800eaf4:	b5b0      	push	{r4, r5, r7, lr}
 800eaf6:	b086      	sub	sp, #24
 800eaf8:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800eafa:	496f      	ldr	r1, [pc, #444]	; (800ecb8 <print_self_DetailsSiemens+0x1c4>)
 800eafc:	486f      	ldr	r0, [pc, #444]	; (800ecbc <print_self_DetailsSiemens+0x1c8>)
 800eafe:	f013 fe9b 	bl	8022838 <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800eb02:	4b6f      	ldr	r3, [pc, #444]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb04:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb08:	4619      	mov	r1, r3
 800eb0a:	486e      	ldr	r0, [pc, #440]	; (800ecc4 <print_self_DetailsSiemens+0x1d0>)
 800eb0c:	f013 fe94 	bl	8022838 <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800eb10:	4b6b      	ldr	r3, [pc, #428]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb12:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800eb16:	4619      	mov	r1, r3
 800eb18:	4b69      	ldr	r3, [pc, #420]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb1a:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800eb1e:	461a      	mov	r2, r3
 800eb20:	4b67      	ldr	r3, [pc, #412]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb22:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800eb26:	4618      	mov	r0, r3
 800eb28:	4b65      	ldr	r3, [pc, #404]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb2a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	4603      	mov	r3, r0
 800eb32:	4865      	ldr	r0, [pc, #404]	; (800ecc8 <print_self_DetailsSiemens+0x1d4>)
 800eb34:	f013 fe80 	bl	8022838 <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800eb38:	4b61      	ldr	r3, [pc, #388]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb3a:	f893 32ad 	ldrb.w	r3, [r3, #685]	; 0x2ad
 800eb3e:	4618      	mov	r0, r3
 800eb40:	4b5f      	ldr	r3, [pc, #380]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb42:	f893 32ae 	ldrb.w	r3, [r3, #686]	; 0x2ae
 800eb46:	461c      	mov	r4, r3
 800eb48:	4b5d      	ldr	r3, [pc, #372]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb4a:	f893 32af 	ldrb.w	r3, [r3, #687]	; 0x2af
 800eb4e:	461d      	mov	r5, r3
 800eb50:	4b5b      	ldr	r3, [pc, #364]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb52:	f893 32b0 	ldrb.w	r3, [r3, #688]	; 0x2b0
 800eb56:	461a      	mov	r2, r3
 800eb58:	4b59      	ldr	r3, [pc, #356]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb5a:	f893 32b1 	ldrb.w	r3, [r3, #689]	; 0x2b1
 800eb5e:	4619      	mov	r1, r3
 800eb60:	4b57      	ldr	r3, [pc, #348]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb62:	f893 32b2 	ldrb.w	r3, [r3, #690]	; 0x2b2
 800eb66:	9302      	str	r3, [sp, #8]
 800eb68:	9101      	str	r1, [sp, #4]
 800eb6a:	9200      	str	r2, [sp, #0]
 800eb6c:	462b      	mov	r3, r5
 800eb6e:	4622      	mov	r2, r4
 800eb70:	4601      	mov	r1, r0
 800eb72:	4856      	ldr	r0, [pc, #344]	; (800eccc <print_self_DetailsSiemens+0x1d8>)
 800eb74:	f013 fe60 	bl	8022838 <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800eb78:	4b51      	ldr	r3, [pc, #324]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb7a:	f8b3 32da 	ldrh.w	r3, [r3, #730]	; 0x2da
 800eb7e:	4619      	mov	r1, r3
 800eb80:	4853      	ldr	r0, [pc, #332]	; (800ecd0 <print_self_DetailsSiemens+0x1dc>)
 800eb82:	f013 fe59 	bl	8022838 <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800eb86:	2300      	movs	r3, #0
 800eb88:	71fb      	strb	r3, [r7, #7]
 800eb8a:	e037      	b.n	800ebfc <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800eb8c:	79fb      	ldrb	r3, [r7, #7]
 800eb8e:	1c59      	adds	r1, r3, #1
 800eb90:	79fb      	ldrb	r3, [r7, #7]
 800eb92:	4a4b      	ldr	r2, [pc, #300]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eb94:	33ae      	adds	r3, #174	; 0xae
 800eb96:	009b      	lsls	r3, r3, #2
 800eb98:	4413      	add	r3, r2
 800eb9a:	785b      	ldrb	r3, [r3, #1]
 800eb9c:	461c      	mov	r4, r3
 800eb9e:	79fb      	ldrb	r3, [r7, #7]
 800eba0:	4a47      	ldr	r2, [pc, #284]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eba2:	009b      	lsls	r3, r3, #2
 800eba4:	4413      	add	r3, r2
 800eba6:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800ebaa:	461d      	mov	r5, r3
 800ebac:	79fb      	ldrb	r3, [r7, #7]
 800ebae:	4a44      	ldr	r2, [pc, #272]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ebb0:	009b      	lsls	r3, r3, #2
 800ebb2:	4413      	add	r3, r2
 800ebb4:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800ebb8:	4618      	mov	r0, r3
 800ebba:	79fb      	ldrb	r3, [r7, #7]
 800ebbc:	4a40      	ldr	r2, [pc, #256]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ebbe:	009b      	lsls	r3, r3, #2
 800ebc0:	4413      	add	r3, r2
 800ebc2:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800ebc6:	9301      	str	r3, [sp, #4]
 800ebc8:	9000      	str	r0, [sp, #0]
 800ebca:	462b      	mov	r3, r5
 800ebcc:	4622      	mov	r2, r4
 800ebce:	4841      	ldr	r0, [pc, #260]	; (800ecd4 <print_self_DetailsSiemens+0x1e0>)
 800ebd0:	f013 fe32 	bl	8022838 <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800ebd4:	79fb      	ldrb	r3, [r7, #7]
 800ebd6:	4a3a      	ldr	r2, [pc, #232]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ebd8:	33b6      	adds	r3, #182	; 0xb6
 800ebda:	009b      	lsls	r3, r3, #2
 800ebdc:	4413      	add	r3, r2
 800ebde:	88db      	ldrh	r3, [r3, #6]
 800ebe0:	4619      	mov	r1, r3
 800ebe2:	79fb      	ldrb	r3, [r7, #7]
 800ebe4:	4a36      	ldr	r2, [pc, #216]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ebe6:	009b      	lsls	r3, r3, #2
 800ebe8:	4413      	add	r3, r2
 800ebea:	f8b3 32e0 	ldrh.w	r3, [r3, #736]	; 0x2e0
 800ebee:	461a      	mov	r2, r3
 800ebf0:	4839      	ldr	r0, [pc, #228]	; (800ecd8 <print_self_DetailsSiemens+0x1e4>)
 800ebf2:	f013 fe21 	bl	8022838 <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800ebf6:	79fb      	ldrb	r3, [r7, #7]
 800ebf8:	3301      	adds	r3, #1
 800ebfa:	71fb      	strb	r3, [r7, #7]
 800ebfc:	4b30      	ldr	r3, [pc, #192]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ebfe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ec02:	79fa      	ldrb	r2, [r7, #7]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d3c1      	bcc.n	800eb8c <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800ec08:	4b2d      	ldr	r3, [pc, #180]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec0a:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800ec0e:	4619      	mov	r1, r3
 800ec10:	4832      	ldr	r0, [pc, #200]	; (800ecdc <print_self_DetailsSiemens+0x1e8>)
 800ec12:	f013 fe11 	bl	8022838 <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800ec16:	4b2a      	ldr	r3, [pc, #168]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec18:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800ec1c:	4619      	mov	r1, r3
 800ec1e:	4830      	ldr	r0, [pc, #192]	; (800ece0 <print_self_DetailsSiemens+0x1ec>)
 800ec20:	f013 fe0a 	bl	8022838 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800ec24:	4b26      	ldr	r3, [pc, #152]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec26:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800ec2a:	4619      	mov	r1, r3
 800ec2c:	482d      	ldr	r0, [pc, #180]	; (800ece4 <print_self_DetailsSiemens+0x1f0>)
 800ec2e:	f013 fe03 	bl	8022838 <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800ec32:	4b23      	ldr	r3, [pc, #140]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec34:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800ec38:	4619      	mov	r1, r3
 800ec3a:	482a      	ldr	r0, [pc, #168]	; (800ece4 <print_self_DetailsSiemens+0x1f0>)
 800ec3c:	f013 fdfc 	bl	8022838 <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800ec40:	4b1f      	ldr	r3, [pc, #124]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec42:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800ec46:	4619      	mov	r1, r3
 800ec48:	4827      	ldr	r0, [pc, #156]	; (800ece8 <print_self_DetailsSiemens+0x1f4>)
 800ec4a:	f013 fdf5 	bl	8022838 <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800ec4e:	4b1c      	ldr	r3, [pc, #112]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec50:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800ec54:	4619      	mov	r1, r3
 800ec56:	4825      	ldr	r0, [pc, #148]	; (800ecec <print_self_DetailsSiemens+0x1f8>)
 800ec58:	f013 fdee 	bl	8022838 <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800ec5c:	4b18      	ldr	r3, [pc, #96]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec5e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800ec62:	4619      	mov	r1, r3
 800ec64:	4822      	ldr	r0, [pc, #136]	; (800ecf0 <print_self_DetailsSiemens+0x1fc>)
 800ec66:	f013 fde7 	bl	8022838 <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800ec6a:	4b15      	ldr	r3, [pc, #84]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec6c:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800ec70:	4619      	mov	r1, r3
 800ec72:	4820      	ldr	r0, [pc, #128]	; (800ecf4 <print_self_DetailsSiemens+0x200>)
 800ec74:	f013 fde0 	bl	8022838 <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800ec78:	4b11      	ldr	r3, [pc, #68]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec7a:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800ec7e:	4619      	mov	r1, r3
 800ec80:	481d      	ldr	r0, [pc, #116]	; (800ecf8 <print_self_DetailsSiemens+0x204>)
 800ec82:	f013 fdd9 	bl	8022838 <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800ec86:	4b0e      	ldr	r3, [pc, #56]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec88:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800ec8c:	4619      	mov	r1, r3
 800ec8e:	481b      	ldr	r0, [pc, #108]	; (800ecfc <print_self_DetailsSiemens+0x208>)
 800ec90:	f013 fdd2 	bl	8022838 <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800ec94:	4b0a      	ldr	r3, [pc, #40]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800ec96:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800ec9a:	4619      	mov	r1, r3
 800ec9c:	4818      	ldr	r0, [pc, #96]	; (800ed00 <print_self_DetailsSiemens+0x20c>)
 800ec9e:	f013 fdcb 	bl	8022838 <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800eca2:	4b07      	ldr	r3, [pc, #28]	; (800ecc0 <print_self_DetailsSiemens+0x1cc>)
 800eca4:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800eca8:	4619      	mov	r1, r3
 800ecaa:	4816      	ldr	r0, [pc, #88]	; (800ed04 <print_self_DetailsSiemens+0x210>)
 800ecac:	f013 fdc4 	bl	8022838 <iprintf>

}
 800ecb0:	bf00      	nop
 800ecb2:	3708      	adds	r7, #8
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bdb0      	pop	{r4, r5, r7, pc}
 800ecb8:	20000305 	.word	0x20000305
 800ecbc:	08026924 	.word	0x08026924
 800ecc0:	20000304 	.word	0x20000304
 800ecc4:	08026938 	.word	0x08026938
 800ecc8:	08026948 	.word	0x08026948
 800eccc:	08026960 	.word	0x08026960
 800ecd0:	08026988 	.word	0x08026988
 800ecd4:	080269a0 	.word	0x080269a0
 800ecd8:	080269b4 	.word	0x080269b4
 800ecdc:	080269cc 	.word	0x080269cc
 800ece0:	080269dc 	.word	0x080269dc
 800ece4:	080269f0 	.word	0x080269f0
 800ece8:	08026a04 	.word	0x08026a04
 800ecec:	08026a14 	.word	0x08026a14
 800ecf0:	08026a24 	.word	0x08026a24
 800ecf4:	08026a38 	.word	0x08026a38
 800ecf8:	08026a50 	.word	0x08026a50
 800ecfc:	08026a68 	.word	0x08026a68
 800ed00:	08026a84 	.word	0x08026a84
 800ed04:	08026aa0 	.word	0x08026aa0

0800ed08 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b082      	sub	sp, #8
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800ed10:	f006 fd88 	bl	8015824 <HAL_GetTick>
 800ed14:	4602      	mov	r2, r0
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	1ad3      	subs	r3, r2, r3
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	bfb8      	it	lt
 800ed1e:	425b      	neglt	r3, r3
}
 800ed20:	4618      	mov	r0, r3
 800ed22:	3708      	adds	r7, #8
 800ed24:	46bd      	mov	sp, r7
 800ed26:	bd80      	pop	{r7, pc}

0800ed28 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800ed28:	b580      	push	{r7, lr}
 800ed2a:	b082      	sub	sp, #8
 800ed2c:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800ed2e:	23f3      	movs	r3, #243	; 0xf3
 800ed30:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800ed32:	f011 f88b 	bl	801fe4c <udp_new>
 800ed36:	4603      	mov	r3, r0
 800ed38:	4a7a      	ldr	r2, [pc, #488]	; (800ef24 <udpServer_init+0x1fc>)
 800ed3a:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800ed3c:	4b7a      	ldr	r3, [pc, #488]	; (800ef28 <udpServer_init+0x200>)
 800ed3e:	781b      	ldrb	r3, [r3, #0]
 800ed40:	2b01      	cmp	r3, #1
 800ed42:	d002      	beq.n	800ed4a <udpServer_init+0x22>
 800ed44:	2b02      	cmp	r3, #2
 800ed46:	d074      	beq.n	800ee32 <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800ed48:	e0e9      	b.n	800ef1e <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800ed4a:	4b77      	ldr	r3, [pc, #476]	; (800ef28 <udpServer_init+0x200>)
 800ed4c:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ed50:	061a      	lsls	r2, r3, #24
 800ed52:	4b75      	ldr	r3, [pc, #468]	; (800ef28 <udpServer_init+0x200>)
 800ed54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ed58:	041b      	lsls	r3, r3, #16
 800ed5a:	431a      	orrs	r2, r3
 800ed5c:	4b72      	ldr	r3, [pc, #456]	; (800ef28 <udpServer_init+0x200>)
 800ed5e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ed62:	021b      	lsls	r3, r3, #8
 800ed64:	4313      	orrs	r3, r2
 800ed66:	4a70      	ldr	r2, [pc, #448]	; (800ef28 <udpServer_init+0x200>)
 800ed68:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
 800ed6c:	4313      	orrs	r3, r2
 800ed6e:	061a      	lsls	r2, r3, #24
 800ed70:	4b6d      	ldr	r3, [pc, #436]	; (800ef28 <udpServer_init+0x200>)
 800ed72:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800ed76:	0619      	lsls	r1, r3, #24
 800ed78:	4b6b      	ldr	r3, [pc, #428]	; (800ef28 <udpServer_init+0x200>)
 800ed7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ed7e:	041b      	lsls	r3, r3, #16
 800ed80:	4319      	orrs	r1, r3
 800ed82:	4b69      	ldr	r3, [pc, #420]	; (800ef28 <udpServer_init+0x200>)
 800ed84:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ed88:	021b      	lsls	r3, r3, #8
 800ed8a:	430b      	orrs	r3, r1
 800ed8c:	4966      	ldr	r1, [pc, #408]	; (800ef28 <udpServer_init+0x200>)
 800ed8e:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800ed92:	430b      	orrs	r3, r1
 800ed94:	021b      	lsls	r3, r3, #8
 800ed96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ed9a:	431a      	orrs	r2, r3
 800ed9c:	4b62      	ldr	r3, [pc, #392]	; (800ef28 <udpServer_init+0x200>)
 800ed9e:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800eda2:	0619      	lsls	r1, r3, #24
 800eda4:	4b60      	ldr	r3, [pc, #384]	; (800ef28 <udpServer_init+0x200>)
 800eda6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800edaa:	041b      	lsls	r3, r3, #16
 800edac:	4319      	orrs	r1, r3
 800edae:	4b5e      	ldr	r3, [pc, #376]	; (800ef28 <udpServer_init+0x200>)
 800edb0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800edb4:	021b      	lsls	r3, r3, #8
 800edb6:	430b      	orrs	r3, r1
 800edb8:	495b      	ldr	r1, [pc, #364]	; (800ef28 <udpServer_init+0x200>)
 800edba:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800edbe:	430b      	orrs	r3, r1
 800edc0:	0a1b      	lsrs	r3, r3, #8
 800edc2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800edc6:	431a      	orrs	r2, r3
 800edc8:	4b57      	ldr	r3, [pc, #348]	; (800ef28 <udpServer_init+0x200>)
 800edca:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 800edce:	0619      	lsls	r1, r3, #24
 800edd0:	4b55      	ldr	r3, [pc, #340]	; (800ef28 <udpServer_init+0x200>)
 800edd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800edd6:	041b      	lsls	r3, r3, #16
 800edd8:	4319      	orrs	r1, r3
 800edda:	4b53      	ldr	r3, [pc, #332]	; (800ef28 <udpServer_init+0x200>)
 800eddc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ede0:	021b      	lsls	r3, r3, #8
 800ede2:	430b      	orrs	r3, r1
 800ede4:	4950      	ldr	r1, [pc, #320]	; (800ef28 <udpServer_init+0x200>)
 800ede6:	f891 103a 	ldrb.w	r1, [r1, #58]	; 0x3a
 800edea:	430b      	orrs	r3, r1
 800edec:	0e1b      	lsrs	r3, r3, #24
 800edee:	4313      	orrs	r3, r2
 800edf0:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800edf2:	4b4c      	ldr	r3, [pc, #304]	; (800ef24 <udpServer_init+0x1fc>)
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	4a4c      	ldr	r2, [pc, #304]	; (800ef28 <udpServer_init+0x200>)
 800edf8:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	; 0xf6
 800edfc:	4639      	mov	r1, r7
 800edfe:	4618      	mov	r0, r3
 800ee00:	f010 ff3a 	bl	801fc78 <udp_bind>
 800ee04:	4603      	mov	r3, r0
 800ee06:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800ee08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ee0c:	2b00      	cmp	r3, #0
 800ee0e:	d107      	bne.n	800ee20 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800ee10:	4b44      	ldr	r3, [pc, #272]	; (800ef24 <udpServer_init+0x1fc>)
 800ee12:	681b      	ldr	r3, [r3, #0]
 800ee14:	2200      	movs	r2, #0
 800ee16:	4945      	ldr	r1, [pc, #276]	; (800ef2c <udpServer_init+0x204>)
 800ee18:	4618      	mov	r0, r3
 800ee1a:	f010 ffb5 	bl	801fd88 <udp_recv>
		break;
 800ee1e:	e07c      	b.n	800ef1a <udpServer_init+0x1f2>
			printf("N-OK\n");
 800ee20:	4843      	ldr	r0, [pc, #268]	; (800ef30 <udpServer_init+0x208>)
 800ee22:	f013 fda5 	bl	8022970 <puts>
			udp_remove(upcb);
 800ee26:	4b3f      	ldr	r3, [pc, #252]	; (800ef24 <udpServer_init+0x1fc>)
 800ee28:	681b      	ldr	r3, [r3, #0]
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f010 ffcc 	bl	801fdc8 <udp_remove>
		break;
 800ee30:	e073      	b.n	800ef1a <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800ee32:	4b3d      	ldr	r3, [pc, #244]	; (800ef28 <udpServer_init+0x200>)
 800ee34:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ee38:	061a      	lsls	r2, r3, #24
 800ee3a:	4b3b      	ldr	r3, [pc, #236]	; (800ef28 <udpServer_init+0x200>)
 800ee3c:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ee40:	041b      	lsls	r3, r3, #16
 800ee42:	431a      	orrs	r2, r3
 800ee44:	4b38      	ldr	r3, [pc, #224]	; (800ef28 <udpServer_init+0x200>)
 800ee46:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800ee4a:	021b      	lsls	r3, r3, #8
 800ee4c:	4313      	orrs	r3, r2
 800ee4e:	4a36      	ldr	r2, [pc, #216]	; (800ef28 <udpServer_init+0x200>)
 800ee50:	f892 22a8 	ldrb.w	r2, [r2, #680]	; 0x2a8
 800ee54:	4313      	orrs	r3, r2
 800ee56:	061a      	lsls	r2, r3, #24
 800ee58:	4b33      	ldr	r3, [pc, #204]	; (800ef28 <udpServer_init+0x200>)
 800ee5a:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ee5e:	0619      	lsls	r1, r3, #24
 800ee60:	4b31      	ldr	r3, [pc, #196]	; (800ef28 <udpServer_init+0x200>)
 800ee62:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ee66:	041b      	lsls	r3, r3, #16
 800ee68:	4319      	orrs	r1, r3
 800ee6a:	4b2f      	ldr	r3, [pc, #188]	; (800ef28 <udpServer_init+0x200>)
 800ee6c:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800ee70:	021b      	lsls	r3, r3, #8
 800ee72:	430b      	orrs	r3, r1
 800ee74:	492c      	ldr	r1, [pc, #176]	; (800ef28 <udpServer_init+0x200>)
 800ee76:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800ee7a:	430b      	orrs	r3, r1
 800ee7c:	021b      	lsls	r3, r3, #8
 800ee7e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee82:	431a      	orrs	r2, r3
 800ee84:	4b28      	ldr	r3, [pc, #160]	; (800ef28 <udpServer_init+0x200>)
 800ee86:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800ee8a:	0619      	lsls	r1, r3, #24
 800ee8c:	4b26      	ldr	r3, [pc, #152]	; (800ef28 <udpServer_init+0x200>)
 800ee8e:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800ee92:	041b      	lsls	r3, r3, #16
 800ee94:	4319      	orrs	r1, r3
 800ee96:	4b24      	ldr	r3, [pc, #144]	; (800ef28 <udpServer_init+0x200>)
 800ee98:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800ee9c:	021b      	lsls	r3, r3, #8
 800ee9e:	430b      	orrs	r3, r1
 800eea0:	4921      	ldr	r1, [pc, #132]	; (800ef28 <udpServer_init+0x200>)
 800eea2:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800eea6:	430b      	orrs	r3, r1
 800eea8:	0a1b      	lsrs	r3, r3, #8
 800eeaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800eeae:	431a      	orrs	r2, r3
 800eeb0:	4b1d      	ldr	r3, [pc, #116]	; (800ef28 <udpServer_init+0x200>)
 800eeb2:	f893 32a5 	ldrb.w	r3, [r3, #677]	; 0x2a5
 800eeb6:	0619      	lsls	r1, r3, #24
 800eeb8:	4b1b      	ldr	r3, [pc, #108]	; (800ef28 <udpServer_init+0x200>)
 800eeba:	f893 32a6 	ldrb.w	r3, [r3, #678]	; 0x2a6
 800eebe:	041b      	lsls	r3, r3, #16
 800eec0:	4319      	orrs	r1, r3
 800eec2:	4b19      	ldr	r3, [pc, #100]	; (800ef28 <udpServer_init+0x200>)
 800eec4:	f893 32a7 	ldrb.w	r3, [r3, #679]	; 0x2a7
 800eec8:	021b      	lsls	r3, r3, #8
 800eeca:	430b      	orrs	r3, r1
 800eecc:	4916      	ldr	r1, [pc, #88]	; (800ef28 <udpServer_init+0x200>)
 800eece:	f891 12a8 	ldrb.w	r1, [r1, #680]	; 0x2a8
 800eed2:	430b      	orrs	r3, r1
 800eed4:	0e1b      	lsrs	r3, r3, #24
 800eed6:	4313      	orrs	r3, r2
 800eed8:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800eeda:	4b12      	ldr	r3, [pc, #72]	; (800ef24 <udpServer_init+0x1fc>)
 800eedc:	681b      	ldr	r3, [r3, #0]
 800eede:	4a12      	ldr	r2, [pc, #72]	; (800ef28 <udpServer_init+0x200>)
 800eee0:	f8b2 22da 	ldrh.w	r2, [r2, #730]	; 0x2da
 800eee4:	4639      	mov	r1, r7
 800eee6:	4618      	mov	r0, r3
 800eee8:	f010 fec6 	bl	801fc78 <udp_bind>
 800eeec:	4603      	mov	r3, r0
 800eeee:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800eef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d107      	bne.n	800ef08 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800eef8:	4b0a      	ldr	r3, [pc, #40]	; (800ef24 <udpServer_init+0x1fc>)
 800eefa:	681b      	ldr	r3, [r3, #0]
 800eefc:	2200      	movs	r2, #0
 800eefe:	490b      	ldr	r1, [pc, #44]	; (800ef2c <udpServer_init+0x204>)
 800ef00:	4618      	mov	r0, r3
 800ef02:	f010 ff41 	bl	801fd88 <udp_recv>
		break;
 800ef06:	e007      	b.n	800ef18 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800ef08:	4809      	ldr	r0, [pc, #36]	; (800ef30 <udpServer_init+0x208>)
 800ef0a:	f013 fd31 	bl	8022970 <puts>
			udp_remove(upcb);
 800ef0e:	4b05      	ldr	r3, [pc, #20]	; (800ef24 <udpServer_init+0x1fc>)
 800ef10:	681b      	ldr	r3, [r3, #0]
 800ef12:	4618      	mov	r0, r3
 800ef14:	f010 ff58 	bl	801fdc8 <udp_remove>
		break;
 800ef18:	bf00      	nop
	}

	udpClient_connect();
 800ef1a:	f000 f90d 	bl	800f138 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	20005610 	.word	0x20005610
 800ef28:	20000304 	.word	0x20000304
 800ef2c:	0800ef35 	.word	0x0800ef35
 800ef30:	08026ac0 	.word	0x08026ac0

0800ef34 <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b086      	sub	sp, #24
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	60f8      	str	r0, [r7, #12]
 800ef3c:	60b9      	str	r1, [r7, #8]
 800ef3e:	607a      	str	r2, [r7, #4]
 800ef40:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800ef42:	2300      	movs	r3, #0
 800ef44:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800ef46:	2300      	movs	r3, #0
 800ef48:	82bb      	strh	r3, [r7, #20]
	uint8_t IpMatched = 0;
 800ef4a:	2300      	movs	r3, #0
 800ef4c:	75bb      	strb	r3, [r7, #22]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800ef4e:	4a70      	ldr	r2, [pc, #448]	; (800f110 <UDP_Receive_Callback+0x1dc>)
 800ef50:	683b      	ldr	r3, [r7, #0]
 800ef52:	681b      	ldr	r3, [r3, #0]
 800ef54:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	895b      	ldrh	r3, [r3, #10]
 800ef5a:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800ef5c:	4b6d      	ldr	r3, [pc, #436]	; (800f114 <UDP_Receive_Callback+0x1e0>)
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	2b01      	cmp	r3, #1
 800ef62:	d02e      	beq.n	800efc2 <UDP_Receive_Callback+0x8e>
 800ef64:	2b02      	cmp	r3, #2
 800ef66:	d045      	beq.n	800eff4 <UDP_Receive_Callback+0xc0>
 800ef68:	e069      	b.n	800f03e <UDP_Receive_Callback+0x10a>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ef6a:	4b69      	ldr	r3, [pc, #420]	; (800f110 <UDP_Receive_Callback+0x1dc>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	4969      	ldr	r1, [pc, #420]	; (800f118 <UDP_Receive_Callback+0x1e4>)
 800ef72:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d120      	bne.n	800efbc <UDP_Receive_Callback+0x88>
			{
				if(IpMatched == 0)
 800ef7a:	7dbb      	ldrb	r3, [r7, #22]
 800ef7c:	2b00      	cmp	r3, #0
 800ef7e:	d109      	bne.n	800ef94 <UDP_Receive_Callback+0x60>
				{
					printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800ef80:	6838      	ldr	r0, [r7, #0]
 800ef82:	f012 fb61 	bl	8021648 <ip4addr_ntoa>
 800ef86:	4603      	mov	r3, r0
 800ef88:	4619      	mov	r1, r3
 800ef8a:	4864      	ldr	r0, [pc, #400]	; (800f11c <UDP_Receive_Callback+0x1e8>)
 800ef8c:	f013 fc54 	bl	8022838 <iprintf>
					IpMatched = 1;
 800ef90:	2301      	movs	r3, #1
 800ef92:	75bb      	strb	r3, [r7, #22]
				}
				Recv_IP_List[Traverser/2] = *addr;
 800ef94:	7dfb      	ldrb	r3, [r7, #23]
 800ef96:	085b      	lsrs	r3, r3, #1
 800ef98:	b2db      	uxtb	r3, r3
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4a60      	ldr	r2, [pc, #384]	; (800f120 <UDP_Receive_Callback+0x1ec>)
 800ef9e:	683b      	ldr	r3, [r7, #0]
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800efa6:	7dfb      	ldrb	r3, [r7, #23]
 800efa8:	f003 0301 	and.w	r3, r3, #1
 800efac:	b2db      	uxtb	r3, r3
 800efae:	7dfa      	ldrb	r2, [r7, #23]
 800efb0:	0852      	lsrs	r2, r2, #1
 800efb2:	b2d2      	uxtb	r2, r2
 800efb4:	3301      	adds	r3, #1
 800efb6:	b2d9      	uxtb	r1, r3
 800efb8:	4b5a      	ldr	r3, [pc, #360]	; (800f124 <UDP_Receive_Callback+0x1f0>)
 800efba:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
 800efbe:	3301      	adds	r3, #1
 800efc0:	75fb      	strb	r3, [r7, #23]
 800efc2:	4b54      	ldr	r3, [pc, #336]	; (800f114 <UDP_Receive_Callback+0x1e0>)
 800efc4:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800efc8:	7dfa      	ldrb	r2, [r7, #23]
 800efca:	429a      	cmp	r2, r3
 800efcc:	d3cd      	bcc.n	800ef6a <UDP_Receive_Callback+0x36>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800efce:	4b51      	ldr	r3, [pc, #324]	; (800f114 <UDP_Receive_Callback+0x1e0>)
 800efd0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800efd4:	7dfa      	ldrb	r2, [r7, #23]
 800efd6:	429a      	cmp	r2, r3
 800efd8:	d935      	bls.n	800f046 <UDP_Receive_Callback+0x112>
		{
			pbuf_free(p);
 800efda:	6878      	ldr	r0, [r7, #4]
 800efdc:	f00f fef4 	bl	801edc8 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800efe0:	6838      	ldr	r0, [r7, #0]
 800efe2:	f012 fb31 	bl	8021648 <ip4addr_ntoa>
 800efe6:	4601      	mov	r1, r0
 800efe8:	7dfb      	ldrb	r3, [r7, #23]
 800efea:	461a      	mov	r2, r3
 800efec:	484e      	ldr	r0, [pc, #312]	; (800f128 <UDP_Receive_Callback+0x1f4>)
 800efee:	f013 fc23 	bl	8022838 <iprintf>
			return;
 800eff2:	e08a      	b.n	800f10a <UDP_Receive_Callback+0x1d6>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800eff4:	2300      	movs	r3, #0
 800eff6:	75fb      	strb	r3, [r7, #23]
 800eff8:	e00a      	b.n	800f010 <UDP_Receive_Callback+0xdc>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800effa:	4b45      	ldr	r3, [pc, #276]	; (800f110 <UDP_Receive_Callback+0x1dc>)
 800effc:	681a      	ldr	r2, [r3, #0]
 800effe:	7dfb      	ldrb	r3, [r7, #23]
 800f000:	4945      	ldr	r1, [pc, #276]	; (800f118 <UDP_Receive_Callback+0x1e4>)
 800f002:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800f006:	429a      	cmp	r2, r3
 800f008:	d009      	beq.n	800f01e <UDP_Receive_Callback+0xea>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f00a:	7dfb      	ldrb	r3, [r7, #23]
 800f00c:	3301      	adds	r3, #1
 800f00e:	75fb      	strb	r3, [r7, #23]
 800f010:	4b40      	ldr	r3, [pc, #256]	; (800f114 <UDP_Receive_Callback+0x1e0>)
 800f012:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f016:	7dfa      	ldrb	r2, [r7, #23]
 800f018:	429a      	cmp	r2, r3
 800f01a:	d3ee      	bcc.n	800effa <UDP_Receive_Callback+0xc6>
 800f01c:	e000      	b.n	800f020 <UDP_Receive_Callback+0xec>
			{
				break;
 800f01e:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800f020:	4b3c      	ldr	r3, [pc, #240]	; (800f114 <UDP_Receive_Callback+0x1e0>)
 800f022:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f026:	7dfa      	ldrb	r2, [r7, #23]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d90e      	bls.n	800f04a <UDP_Receive_Callback+0x116>
		{
			pbuf_free(p);
 800f02c:	6878      	ldr	r0, [r7, #4]
 800f02e:	f00f fecb 	bl	801edc8 <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800f032:	7dfb      	ldrb	r3, [r7, #23]
 800f034:	4619      	mov	r1, r3
 800f036:	483d      	ldr	r0, [pc, #244]	; (800f12c <UDP_Receive_Callback+0x1f8>)
 800f038:	f013 fbfe 	bl	8022838 <iprintf>
			return;
 800f03c:	e065      	b.n	800f10a <UDP_Receive_Callback+0x1d6>
		}
		break;
	default:
		pbuf_free(p);
 800f03e:	6878      	ldr	r0, [r7, #4]
 800f040:	f00f fec2 	bl	801edc8 <pbuf_free>
		return;
 800f044:	e061      	b.n	800f10a <UDP_Receive_Callback+0x1d6>
		break;
 800f046:	bf00      	nop
 800f048:	e000      	b.n	800f04c <UDP_Receive_Callback+0x118>
		break;
 800f04a:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800f04c:	4b31      	ldr	r3, [pc, #196]	; (800f114 <UDP_Receive_Callback+0x1e0>)
 800f04e:	781b      	ldrb	r3, [r3, #0]
 800f050:	2b01      	cmp	r3, #1
 800f052:	d002      	beq.n	800f05a <UDP_Receive_Callback+0x126>
 800f054:	2b02      	cmp	r3, #2
 800f056:	d049      	beq.n	800f0ec <UDP_Receive_Callback+0x1b8>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800f058:	e054      	b.n	800f104 <UDP_Receive_Callback+0x1d0>
		Interrupt_clock = HAL_GetTick();
 800f05a:	f006 fbe3 	bl	8015824 <HAL_GetTick>
 800f05e:	4603      	mov	r3, r0
 800f060:	4a33      	ldr	r2, [pc, #204]	; (800f130 <UDP_Receive_Callback+0x1fc>)
 800f062:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800f064:	4b33      	ldr	r3, [pc, #204]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f066:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f06a:	461a      	mov	r2, r3
 800f06c:	8abb      	ldrh	r3, [r7, #20]
 800f06e:	4413      	add	r3, r2
 800f070:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f074:	dd24      	ble.n	800f0c0 <UDP_Receive_Callback+0x18c>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800f076:	4b2f      	ldr	r3, [pc, #188]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f078:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f07c:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800f080:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800f082:	4b2c      	ldr	r3, [pc, #176]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f084:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f088:	461a      	mov	r2, r3
 800f08a:	4b2a      	ldr	r3, [pc, #168]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f08c:	18d0      	adds	r0, r2, r3
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	685b      	ldr	r3, [r3, #4]
 800f092:	8a7a      	ldrh	r2, [r7, #18]
 800f094:	4619      	mov	r1, r3
 800f096:	f013 fabf 	bl	8022618 <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800f09a:	687b      	ldr	r3, [r7, #4]
 800f09c:	685a      	ldr	r2, [r3, #4]
 800f09e:	8a7b      	ldrh	r3, [r7, #18]
 800f0a0:	18d1      	adds	r1, r2, r3
 800f0a2:	8aba      	ldrh	r2, [r7, #20]
 800f0a4:	8a7b      	ldrh	r3, [r7, #18]
 800f0a6:	1ad3      	subs	r3, r2, r3
 800f0a8:	461a      	mov	r2, r3
 800f0aa:	4822      	ldr	r0, [pc, #136]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0ac:	f013 fab4 	bl	8022618 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800f0b0:	8aba      	ldrh	r2, [r7, #20]
 800f0b2:	8a7b      	ldrh	r3, [r7, #18]
 800f0b4:	1ad3      	subs	r3, r2, r3
 800f0b6:	b29a      	uxth	r2, r3
 800f0b8:	4b1e      	ldr	r3, [pc, #120]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0ba:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f0be:	e021      	b.n	800f104 <UDP_Receive_Callback+0x1d0>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800f0c0:	4b1c      	ldr	r3, [pc, #112]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0c2:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f0c6:	461a      	mov	r2, r3
 800f0c8:	4b1a      	ldr	r3, [pc, #104]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0ca:	18d0      	adds	r0, r2, r3
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	685b      	ldr	r3, [r3, #4]
 800f0d0:	8aba      	ldrh	r2, [r7, #20]
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	f013 faa0 	bl	8022618 <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800f0d8:	4b16      	ldr	r3, [pc, #88]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0da:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800f0de:	8abb      	ldrh	r3, [r7, #20]
 800f0e0:	4413      	add	r3, r2
 800f0e2:	b29a      	uxth	r2, r3
 800f0e4:	4b13      	ldr	r3, [pc, #76]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0e6:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800f0ea:	e00b      	b.n	800f104 <UDP_Receive_Callback+0x1d0>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800f0ec:	687b      	ldr	r3, [r7, #4]
 800f0ee:	685b      	ldr	r3, [r3, #4]
 800f0f0:	8aba      	ldrh	r2, [r7, #20]
 800f0f2:	4619      	mov	r1, r3
 800f0f4:	480f      	ldr	r0, [pc, #60]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0f6:	f013 fa8f 	bl	8022618 <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800f0fa:	4a0e      	ldr	r2, [pc, #56]	; (800f134 <UDP_Receive_Callback+0x200>)
 800f0fc:	8abb      	ldrh	r3, [r7, #20]
 800f0fe:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800f102:	bf00      	nop
	}


	pbuf_free(p);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f00f fe5f 	bl	801edc8 <pbuf_free>
}
 800f10a:	3718      	adds	r7, #24
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}
 800f110:	200055e4 	.word	0x200055e4
 800f114:	20000304 	.word	0x20000304
 800f118:	20005594 	.word	0x20005594
 800f11c:	08026ac8 	.word	0x08026ac8
 800f120:	20001058 	.word	0x20001058
 800f124:	20001080 	.word	0x20001080
 800f128:	08026ad4 	.word	0x08026ad4
 800f12c:	08026b00 	.word	0x08026b00
 800f130:	20000e3c 	.word	0x20000e3c
 800f134:	20004f90 	.word	0x20004f90

0800f138 <udpClient_connect>:
void udpClient_connect(void)
{
 800f138:	b480      	push	{r7}
 800f13a:	b083      	sub	sp, #12
 800f13c:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800f13e:	2300      	movs	r3, #0
 800f140:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800f142:	4ba6      	ldr	r3, [pc, #664]	; (800f3dc <udpClient_connect+0x2a4>)
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	2b01      	cmp	r3, #1
 800f148:	d003      	beq.n	800f152 <udpClient_connect+0x1a>
 800f14a:	2b02      	cmp	r3, #2
 800f14c:	f000 80a1 	beq.w	800f292 <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800f150:	e13f      	b.n	800f3d2 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f152:	2300      	movs	r3, #0
 800f154:	71fb      	strb	r3, [r7, #7]
 800f156:	e094      	b.n	800f282 <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f158:	79fb      	ldrb	r3, [r7, #7]
 800f15a:	4aa0      	ldr	r2, [pc, #640]	; (800f3dc <udpClient_connect+0x2a4>)
 800f15c:	3312      	adds	r3, #18
 800f15e:	009b      	lsls	r3, r3, #2
 800f160:	4413      	add	r3, r2
 800f162:	78db      	ldrb	r3, [r3, #3]
 800f164:	061a      	lsls	r2, r3, #24
 800f166:	79fb      	ldrb	r3, [r7, #7]
 800f168:	499c      	ldr	r1, [pc, #624]	; (800f3dc <udpClient_connect+0x2a4>)
 800f16a:	009b      	lsls	r3, r3, #2
 800f16c:	440b      	add	r3, r1
 800f16e:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f172:	041b      	lsls	r3, r3, #16
 800f174:	431a      	orrs	r2, r3
 800f176:	79fb      	ldrb	r3, [r7, #7]
 800f178:	4998      	ldr	r1, [pc, #608]	; (800f3dc <udpClient_connect+0x2a4>)
 800f17a:	009b      	lsls	r3, r3, #2
 800f17c:	440b      	add	r3, r1
 800f17e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f182:	021b      	lsls	r3, r3, #8
 800f184:	431a      	orrs	r2, r3
 800f186:	79fb      	ldrb	r3, [r7, #7]
 800f188:	4994      	ldr	r1, [pc, #592]	; (800f3dc <udpClient_connect+0x2a4>)
 800f18a:	009b      	lsls	r3, r3, #2
 800f18c:	440b      	add	r3, r1
 800f18e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f192:	4313      	orrs	r3, r2
 800f194:	061a      	lsls	r2, r3, #24
 800f196:	79fb      	ldrb	r3, [r7, #7]
 800f198:	4990      	ldr	r1, [pc, #576]	; (800f3dc <udpClient_connect+0x2a4>)
 800f19a:	3312      	adds	r3, #18
 800f19c:	009b      	lsls	r3, r3, #2
 800f19e:	440b      	add	r3, r1
 800f1a0:	78db      	ldrb	r3, [r3, #3]
 800f1a2:	0619      	lsls	r1, r3, #24
 800f1a4:	79fb      	ldrb	r3, [r7, #7]
 800f1a6:	488d      	ldr	r0, [pc, #564]	; (800f3dc <udpClient_connect+0x2a4>)
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	4403      	add	r3, r0
 800f1ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f1b0:	041b      	lsls	r3, r3, #16
 800f1b2:	4319      	orrs	r1, r3
 800f1b4:	79fb      	ldrb	r3, [r7, #7]
 800f1b6:	4889      	ldr	r0, [pc, #548]	; (800f3dc <udpClient_connect+0x2a4>)
 800f1b8:	009b      	lsls	r3, r3, #2
 800f1ba:	4403      	add	r3, r0
 800f1bc:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f1c0:	021b      	lsls	r3, r3, #8
 800f1c2:	4319      	orrs	r1, r3
 800f1c4:	79fb      	ldrb	r3, [r7, #7]
 800f1c6:	4885      	ldr	r0, [pc, #532]	; (800f3dc <udpClient_connect+0x2a4>)
 800f1c8:	009b      	lsls	r3, r3, #2
 800f1ca:	4403      	add	r3, r0
 800f1cc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f1d0:	430b      	orrs	r3, r1
 800f1d2:	021b      	lsls	r3, r3, #8
 800f1d4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1d8:	431a      	orrs	r2, r3
 800f1da:	79fb      	ldrb	r3, [r7, #7]
 800f1dc:	497f      	ldr	r1, [pc, #508]	; (800f3dc <udpClient_connect+0x2a4>)
 800f1de:	3312      	adds	r3, #18
 800f1e0:	009b      	lsls	r3, r3, #2
 800f1e2:	440b      	add	r3, r1
 800f1e4:	78db      	ldrb	r3, [r3, #3]
 800f1e6:	0619      	lsls	r1, r3, #24
 800f1e8:	79fb      	ldrb	r3, [r7, #7]
 800f1ea:	487c      	ldr	r0, [pc, #496]	; (800f3dc <udpClient_connect+0x2a4>)
 800f1ec:	009b      	lsls	r3, r3, #2
 800f1ee:	4403      	add	r3, r0
 800f1f0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f1f4:	041b      	lsls	r3, r3, #16
 800f1f6:	4319      	orrs	r1, r3
 800f1f8:	79fb      	ldrb	r3, [r7, #7]
 800f1fa:	4878      	ldr	r0, [pc, #480]	; (800f3dc <udpClient_connect+0x2a4>)
 800f1fc:	009b      	lsls	r3, r3, #2
 800f1fe:	4403      	add	r3, r0
 800f200:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f204:	021b      	lsls	r3, r3, #8
 800f206:	4319      	orrs	r1, r3
 800f208:	79fb      	ldrb	r3, [r7, #7]
 800f20a:	4874      	ldr	r0, [pc, #464]	; (800f3dc <udpClient_connect+0x2a4>)
 800f20c:	009b      	lsls	r3, r3, #2
 800f20e:	4403      	add	r3, r0
 800f210:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f214:	430b      	orrs	r3, r1
 800f216:	0a1b      	lsrs	r3, r3, #8
 800f218:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f21c:	ea42 0103 	orr.w	r1, r2, r3
 800f220:	79fb      	ldrb	r3, [r7, #7]
 800f222:	4a6e      	ldr	r2, [pc, #440]	; (800f3dc <udpClient_connect+0x2a4>)
 800f224:	3312      	adds	r3, #18
 800f226:	009b      	lsls	r3, r3, #2
 800f228:	4413      	add	r3, r2
 800f22a:	78db      	ldrb	r3, [r3, #3]
 800f22c:	061a      	lsls	r2, r3, #24
 800f22e:	79fb      	ldrb	r3, [r7, #7]
 800f230:	486a      	ldr	r0, [pc, #424]	; (800f3dc <udpClient_connect+0x2a4>)
 800f232:	009b      	lsls	r3, r3, #2
 800f234:	4403      	add	r3, r0
 800f236:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f23a:	041b      	lsls	r3, r3, #16
 800f23c:	431a      	orrs	r2, r3
 800f23e:	79fb      	ldrb	r3, [r7, #7]
 800f240:	4866      	ldr	r0, [pc, #408]	; (800f3dc <udpClient_connect+0x2a4>)
 800f242:	009b      	lsls	r3, r3, #2
 800f244:	4403      	add	r3, r0
 800f246:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f24a:	021b      	lsls	r3, r3, #8
 800f24c:	431a      	orrs	r2, r3
 800f24e:	79fb      	ldrb	r3, [r7, #7]
 800f250:	4862      	ldr	r0, [pc, #392]	; (800f3dc <udpClient_connect+0x2a4>)
 800f252:	009b      	lsls	r3, r3, #2
 800f254:	4403      	add	r3, r0
 800f256:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f25a:	4313      	orrs	r3, r2
 800f25c:	0e1a      	lsrs	r2, r3, #24
 800f25e:	79fb      	ldrb	r3, [r7, #7]
 800f260:	430a      	orrs	r2, r1
 800f262:	495f      	ldr	r1, [pc, #380]	; (800f3e0 <udpClient_connect+0x2a8>)
 800f264:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f268:	79fb      	ldrb	r3, [r7, #7]
 800f26a:	79fa      	ldrb	r2, [r7, #7]
 800f26c:	495b      	ldr	r1, [pc, #364]	; (800f3dc <udpClient_connect+0x2a4>)
 800f26e:	009b      	lsls	r3, r3, #2
 800f270:	440b      	add	r3, r1
 800f272:	f8b3 10fc 	ldrh.w	r1, [r3, #252]	; 0xfc
 800f276:	4b5b      	ldr	r3, [pc, #364]	; (800f3e4 <udpClient_connect+0x2ac>)
 800f278:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800f27c:	79fb      	ldrb	r3, [r7, #7]
 800f27e:	3301      	adds	r3, #1
 800f280:	71fb      	strb	r3, [r7, #7]
 800f282:	4b56      	ldr	r3, [pc, #344]	; (800f3dc <udpClient_connect+0x2a4>)
 800f284:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800f288:	79fa      	ldrb	r2, [r7, #7]
 800f28a:	429a      	cmp	r2, r3
 800f28c:	f4ff af64 	bcc.w	800f158 <udpClient_connect+0x20>
		break;
 800f290:	e09f      	b.n	800f3d2 <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f292:	2300      	movs	r3, #0
 800f294:	71fb      	strb	r3, [r7, #7]
 800f296:	e094      	b.n	800f3c2 <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800f298:	79fb      	ldrb	r3, [r7, #7]
 800f29a:	4a50      	ldr	r2, [pc, #320]	; (800f3dc <udpClient_connect+0x2a4>)
 800f29c:	33ae      	adds	r3, #174	; 0xae
 800f29e:	009b      	lsls	r3, r3, #2
 800f2a0:	4413      	add	r3, r2
 800f2a2:	785b      	ldrb	r3, [r3, #1]
 800f2a4:	061a      	lsls	r2, r3, #24
 800f2a6:	79fb      	ldrb	r3, [r7, #7]
 800f2a8:	494c      	ldr	r1, [pc, #304]	; (800f3dc <udpClient_connect+0x2a4>)
 800f2aa:	009b      	lsls	r3, r3, #2
 800f2ac:	440b      	add	r3, r1
 800f2ae:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f2b2:	041b      	lsls	r3, r3, #16
 800f2b4:	431a      	orrs	r2, r3
 800f2b6:	79fb      	ldrb	r3, [r7, #7]
 800f2b8:	4948      	ldr	r1, [pc, #288]	; (800f3dc <udpClient_connect+0x2a4>)
 800f2ba:	009b      	lsls	r3, r3, #2
 800f2bc:	440b      	add	r3, r1
 800f2be:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f2c2:	021b      	lsls	r3, r3, #8
 800f2c4:	431a      	orrs	r2, r3
 800f2c6:	79fb      	ldrb	r3, [r7, #7]
 800f2c8:	4944      	ldr	r1, [pc, #272]	; (800f3dc <udpClient_connect+0x2a4>)
 800f2ca:	009b      	lsls	r3, r3, #2
 800f2cc:	440b      	add	r3, r1
 800f2ce:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f2d2:	4313      	orrs	r3, r2
 800f2d4:	061a      	lsls	r2, r3, #24
 800f2d6:	79fb      	ldrb	r3, [r7, #7]
 800f2d8:	4940      	ldr	r1, [pc, #256]	; (800f3dc <udpClient_connect+0x2a4>)
 800f2da:	33ae      	adds	r3, #174	; 0xae
 800f2dc:	009b      	lsls	r3, r3, #2
 800f2de:	440b      	add	r3, r1
 800f2e0:	785b      	ldrb	r3, [r3, #1]
 800f2e2:	0619      	lsls	r1, r3, #24
 800f2e4:	79fb      	ldrb	r3, [r7, #7]
 800f2e6:	483d      	ldr	r0, [pc, #244]	; (800f3dc <udpClient_connect+0x2a4>)
 800f2e8:	009b      	lsls	r3, r3, #2
 800f2ea:	4403      	add	r3, r0
 800f2ec:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f2f0:	041b      	lsls	r3, r3, #16
 800f2f2:	4319      	orrs	r1, r3
 800f2f4:	79fb      	ldrb	r3, [r7, #7]
 800f2f6:	4839      	ldr	r0, [pc, #228]	; (800f3dc <udpClient_connect+0x2a4>)
 800f2f8:	009b      	lsls	r3, r3, #2
 800f2fa:	4403      	add	r3, r0
 800f2fc:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f300:	021b      	lsls	r3, r3, #8
 800f302:	4319      	orrs	r1, r3
 800f304:	79fb      	ldrb	r3, [r7, #7]
 800f306:	4835      	ldr	r0, [pc, #212]	; (800f3dc <udpClient_connect+0x2a4>)
 800f308:	009b      	lsls	r3, r3, #2
 800f30a:	4403      	add	r3, r0
 800f30c:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f310:	430b      	orrs	r3, r1
 800f312:	021b      	lsls	r3, r3, #8
 800f314:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f318:	431a      	orrs	r2, r3
 800f31a:	79fb      	ldrb	r3, [r7, #7]
 800f31c:	492f      	ldr	r1, [pc, #188]	; (800f3dc <udpClient_connect+0x2a4>)
 800f31e:	33ae      	adds	r3, #174	; 0xae
 800f320:	009b      	lsls	r3, r3, #2
 800f322:	440b      	add	r3, r1
 800f324:	785b      	ldrb	r3, [r3, #1]
 800f326:	0619      	lsls	r1, r3, #24
 800f328:	79fb      	ldrb	r3, [r7, #7]
 800f32a:	482c      	ldr	r0, [pc, #176]	; (800f3dc <udpClient_connect+0x2a4>)
 800f32c:	009b      	lsls	r3, r3, #2
 800f32e:	4403      	add	r3, r0
 800f330:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f334:	041b      	lsls	r3, r3, #16
 800f336:	4319      	orrs	r1, r3
 800f338:	79fb      	ldrb	r3, [r7, #7]
 800f33a:	4828      	ldr	r0, [pc, #160]	; (800f3dc <udpClient_connect+0x2a4>)
 800f33c:	009b      	lsls	r3, r3, #2
 800f33e:	4403      	add	r3, r0
 800f340:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f344:	021b      	lsls	r3, r3, #8
 800f346:	4319      	orrs	r1, r3
 800f348:	79fb      	ldrb	r3, [r7, #7]
 800f34a:	4824      	ldr	r0, [pc, #144]	; (800f3dc <udpClient_connect+0x2a4>)
 800f34c:	009b      	lsls	r3, r3, #2
 800f34e:	4403      	add	r3, r0
 800f350:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f354:	430b      	orrs	r3, r1
 800f356:	0a1b      	lsrs	r3, r3, #8
 800f358:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f35c:	ea42 0103 	orr.w	r1, r2, r3
 800f360:	79fb      	ldrb	r3, [r7, #7]
 800f362:	4a1e      	ldr	r2, [pc, #120]	; (800f3dc <udpClient_connect+0x2a4>)
 800f364:	33ae      	adds	r3, #174	; 0xae
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	4413      	add	r3, r2
 800f36a:	785b      	ldrb	r3, [r3, #1]
 800f36c:	061a      	lsls	r2, r3, #24
 800f36e:	79fb      	ldrb	r3, [r7, #7]
 800f370:	481a      	ldr	r0, [pc, #104]	; (800f3dc <udpClient_connect+0x2a4>)
 800f372:	009b      	lsls	r3, r3, #2
 800f374:	4403      	add	r3, r0
 800f376:	f893 32ba 	ldrb.w	r3, [r3, #698]	; 0x2ba
 800f37a:	041b      	lsls	r3, r3, #16
 800f37c:	431a      	orrs	r2, r3
 800f37e:	79fb      	ldrb	r3, [r7, #7]
 800f380:	4816      	ldr	r0, [pc, #88]	; (800f3dc <udpClient_connect+0x2a4>)
 800f382:	009b      	lsls	r3, r3, #2
 800f384:	4403      	add	r3, r0
 800f386:	f893 32bb 	ldrb.w	r3, [r3, #699]	; 0x2bb
 800f38a:	021b      	lsls	r3, r3, #8
 800f38c:	431a      	orrs	r2, r3
 800f38e:	79fb      	ldrb	r3, [r7, #7]
 800f390:	4812      	ldr	r0, [pc, #72]	; (800f3dc <udpClient_connect+0x2a4>)
 800f392:	009b      	lsls	r3, r3, #2
 800f394:	4403      	add	r3, r0
 800f396:	f893 32bc 	ldrb.w	r3, [r3, #700]	; 0x2bc
 800f39a:	4313      	orrs	r3, r2
 800f39c:	0e1a      	lsrs	r2, r3, #24
 800f39e:	79fb      	ldrb	r3, [r7, #7]
 800f3a0:	430a      	orrs	r2, r1
 800f3a2:	490f      	ldr	r1, [pc, #60]	; (800f3e0 <udpClient_connect+0x2a8>)
 800f3a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800f3a8:	79fb      	ldrb	r3, [r7, #7]
 800f3aa:	79fa      	ldrb	r2, [r7, #7]
 800f3ac:	490b      	ldr	r1, [pc, #44]	; (800f3dc <udpClient_connect+0x2a4>)
 800f3ae:	009b      	lsls	r3, r3, #2
 800f3b0:	440b      	add	r3, r1
 800f3b2:	f8b3 12e0 	ldrh.w	r1, [r3, #736]	; 0x2e0
 800f3b6:	4b0b      	ldr	r3, [pc, #44]	; (800f3e4 <udpClient_connect+0x2ac>)
 800f3b8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800f3bc:	79fb      	ldrb	r3, [r7, #7]
 800f3be:	3301      	adds	r3, #1
 800f3c0:	71fb      	strb	r3, [r7, #7]
 800f3c2:	4b06      	ldr	r3, [pc, #24]	; (800f3dc <udpClient_connect+0x2a4>)
 800f3c4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800f3c8:	79fa      	ldrb	r2, [r7, #7]
 800f3ca:	429a      	cmp	r2, r3
 800f3cc:	f4ff af64 	bcc.w	800f298 <udpClient_connect+0x160>
		break;
 800f3d0:	bf00      	nop
	}
}
 800f3d2:	370c      	adds	r7, #12
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3da:	4770      	bx	lr
 800f3dc:	20000304 	.word	0x20000304
 800f3e0:	20005594 	.word	0x20005594
 800f3e4:	200055e8 	.word	0x200055e8

0800f3e8 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f3e8:	b580      	push	{r7, lr}
 800f3ea:	b086      	sub	sp, #24
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	60f8      	str	r0, [r7, #12]
 800f3f0:	460b      	mov	r3, r1
 800f3f2:	607a      	str	r2, [r7, #4]
 800f3f4:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f3f6:	2300      	movs	r3, #0
 800f3f8:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f3fa:	7afb      	ldrb	r3, [r7, #11]
 800f3fc:	b29b      	uxth	r3, r3
 800f3fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f402:	4619      	mov	r1, r3
 800f404:	2036      	movs	r0, #54	; 0x36
 800f406:	f00f f9fd 	bl	801e804 <pbuf_alloc>
 800f40a:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800f40c:	693b      	ldr	r3, [r7, #16]
 800f40e:	2b00      	cmp	r3, #0
 800f410:	d01d      	beq.n	800f44e <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800f412:	7afb      	ldrb	r3, [r7, #11]
 800f414:	b29b      	uxth	r3, r3
 800f416:	461a      	mov	r2, r3
 800f418:	68f9      	ldr	r1, [r7, #12]
 800f41a:	6938      	ldr	r0, [r7, #16]
 800f41c:	f00f fece 	bl	801f1bc <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800f420:	4b0d      	ldr	r3, [pc, #52]	; (800f458 <udpClient_send+0x70>)
 800f422:	6818      	ldr	r0, [r3, #0]
 800f424:	4b0d      	ldr	r3, [pc, #52]	; (800f45c <udpClient_send+0x74>)
 800f426:	881b      	ldrh	r3, [r3, #0]
 800f428:	1d3a      	adds	r2, r7, #4
 800f42a:	6939      	ldr	r1, [r7, #16]
 800f42c:	f010 fa6e 	bl	801f90c <udp_sendto>
 800f430:	4603      	mov	r3, r0
 800f432:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f434:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f438:	2b00      	cmp	r3, #0
 800f43a:	d005      	beq.n	800f448 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800f43c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f440:	4619      	mov	r1, r3
 800f442:	4807      	ldr	r0, [pc, #28]	; (800f460 <udpClient_send+0x78>)
 800f444:	f013 f9f8 	bl	8022838 <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800f448:	6938      	ldr	r0, [r7, #16]
 800f44a:	f00f fcbd 	bl	801edc8 <pbuf_free>
	}
}
 800f44e:	bf00      	nop
 800f450:	3718      	adds	r7, #24
 800f452:	46bd      	mov	sp, r7
 800f454:	bd80      	pop	{r7, pc}
 800f456:	bf00      	nop
 800f458:	20005610 	.word	0x20005610
 800f45c:	200055e8 	.word	0x200055e8
 800f460:	08026b28 	.word	0x08026b28

0800f464 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800f464:	b480      	push	{r7}
 800f466:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800f468:	4b07      	ldr	r3, [pc, #28]	; (800f488 <Is_There_EI_Data+0x24>)
 800f46a:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800f46e:	4b06      	ldr	r3, [pc, #24]	; (800f488 <Is_There_EI_Data+0x24>)
 800f470:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f474:	429a      	cmp	r2, r3
 800f476:	d001      	beq.n	800f47c <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800f478:	2301      	movs	r3, #1
 800f47a:	e000      	b.n	800f47e <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800f47c:	2300      	movs	r3, #0
	}
}
 800f47e:	4618      	mov	r0, r3
 800f480:	46bd      	mov	sp, r7
 800f482:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f486:	4770      	bx	lr
 800f488:	20004f90 	.word	0x20004f90

0800f48c <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800f492:	4b15      	ldr	r3, [pc, #84]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f494:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	b291      	uxth	r1, r2
 800f49c:	4a12      	ldr	r2, [pc, #72]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f49e:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800f4a2:	461a      	mov	r2, r3
 800f4a4:	4b10      	ldr	r3, [pc, #64]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f4a6:	5c9b      	ldrb	r3, [r3, r2]
 800f4a8:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800f4aa:	4b0f      	ldr	r3, [pc, #60]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f4ac:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800f4b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f4b4:	d313      	bcc.n	800f4de <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800f4b6:	4b0c      	ldr	r3, [pc, #48]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f4b8:	2200      	movs	r2, #0
 800f4ba:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800f4be:	4b0a      	ldr	r3, [pc, #40]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f4c0:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800f4c4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800f4c8:	d109      	bne.n	800f4de <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800f4ca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f4ce:	2100      	movs	r1, #0
 800f4d0:	4805      	ldr	r0, [pc, #20]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f4d2:	f013 f8c9 	bl	8022668 <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800f4d6:	4b04      	ldr	r3, [pc, #16]	; (800f4e8 <Get_Eth_Byte+0x5c>)
 800f4d8:	2200      	movs	r2, #0
 800f4da:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800f4de:	79fb      	ldrb	r3, [r7, #7]
}
 800f4e0:	4618      	mov	r0, r3
 800f4e2:	3708      	adds	r7, #8
 800f4e4:	46bd      	mov	sp, r7
 800f4e6:	bd80      	pop	{r7, pc}
 800f4e8:	20004f90 	.word	0x20004f90

0800f4ec <Udp_Send_SigInfo>:

void Udp_Send_SigInfo(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800f4ec:	b580      	push	{r7, lr}
 800f4ee:	b086      	sub	sp, #24
 800f4f0:	af00      	add	r7, sp, #0
 800f4f2:	60f8      	str	r0, [r7, #12]
 800f4f4:	460b      	mov	r3, r1
 800f4f6:	607a      	str	r2, [r7, #4]
 800f4f8:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800f4fe:	7afb      	ldrb	r3, [r7, #11]
 800f500:	b29b      	uxth	r3, r3
 800f502:	f44f 7220 	mov.w	r2, #640	; 0x280
 800f506:	4619      	mov	r1, r3
 800f508:	2036      	movs	r0, #54	; 0x36
 800f50a:	f00f f97b 	bl	801e804 <pbuf_alloc>
 800f50e:	6138      	str	r0, [r7, #16]

	if (txBuf != NULL)
 800f510:	693b      	ldr	r3, [r7, #16]
 800f512:	2b00      	cmp	r3, #0
 800f514:	d01a      	beq.n	800f54c <Udp_Send_SigInfo+0x60>
	{
		pbuf_take(txBuf, data, len);
 800f516:	7afb      	ldrb	r3, [r7, #11]
 800f518:	b29b      	uxth	r3, r3
 800f51a:	461a      	mov	r2, r3
 800f51c:	68f9      	ldr	r1, [r7, #12]
 800f51e:	6938      	ldr	r0, [r7, #16]
 800f520:	f00f fe4c 	bl	801f1bc <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,12345);
 800f524:	4b0b      	ldr	r3, [pc, #44]	; (800f554 <Udp_Send_SigInfo+0x68>)
 800f526:	6818      	ldr	r0, [r3, #0]
 800f528:	1d3a      	adds	r2, r7, #4
 800f52a:	f243 0339 	movw	r3, #12345	; 0x3039
 800f52e:	6939      	ldr	r1, [r7, #16]
 800f530:	f010 f9ec 	bl	801f90c <udp_sendto>
 800f534:	4603      	mov	r3, r0
 800f536:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800f538:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d002      	beq.n	800f546 <Udp_Send_SigInfo+0x5a>
		{
			printf("Packet Sent Failure\n");
 800f540:	4805      	ldr	r0, [pc, #20]	; (800f558 <Udp_Send_SigInfo+0x6c>)
 800f542:	f013 fa15 	bl	8022970 <puts>
		}
		pbuf_free(txBuf);
 800f546:	6938      	ldr	r0, [r7, #16]
 800f548:	f00f fc3e 	bl	801edc8 <pbuf_free>
	}
}
 800f54c:	bf00      	nop
 800f54e:	3718      	adds	r7, #24
 800f550:	46bd      	mov	sp, r7
 800f552:	bd80      	pop	{r7, pc}
 800f554:	20005610 	.word	0x20005610
 800f558:	08026b50 	.word	0x08026b50

0800f55c <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b094      	sub	sp, #80	; 0x50
 800f560:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800f562:	4b38      	ldr	r3, [pc, #224]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f564:	4a38      	ldr	r2, [pc, #224]	; (800f648 <MX_CAN2_Init+0xec>)
 800f566:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800f568:	4b36      	ldr	r3, [pc, #216]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f56a:	2212      	movs	r2, #18
 800f56c:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800f56e:	4b35      	ldr	r3, [pc, #212]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f570:	2200      	movs	r2, #0
 800f572:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f574:	4b33      	ldr	r3, [pc, #204]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f576:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f57a:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f57c:	4b31      	ldr	r3, [pc, #196]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f57e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f582:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f584:	4b2f      	ldr	r3, [pc, #188]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f586:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f58a:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f58c:	4b2d      	ldr	r3, [pc, #180]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f58e:	2200      	movs	r2, #0
 800f590:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f592:	4b2c      	ldr	r3, [pc, #176]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f594:	2200      	movs	r2, #0
 800f596:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f598:	4b2a      	ldr	r3, [pc, #168]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f59a:	2200      	movs	r2, #0
 800f59c:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f59e:	4b29      	ldr	r3, [pc, #164]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f5a0:	2201      	movs	r2, #1
 800f5a2:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f5a4:	4b27      	ldr	r3, [pc, #156]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f5a6:	2200      	movs	r2, #0
 800f5a8:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f5aa:	4b26      	ldr	r3, [pc, #152]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f5b0:	4824      	ldr	r0, [pc, #144]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f5b2:	f006 f967 	bl	8015884 <HAL_CAN_Init>
 800f5b6:	4603      	mov	r3, r0
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d001      	beq.n	800f5c0 <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f5bc:	f004 fba6 	bl	8013d0c <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f5c4:	2304      	movs	r3, #4
 800f5c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f5c8:	2301      	movs	r3, #1
 800f5ca:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f5cc:	f242 0360 	movw	r3, #8288	; 0x2060
 800f5d0:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f5d6:	f242 0360 	movw	r3, #8288	; 0x2060
 800f5da:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f5e0:	2301      	movs	r3, #1
 800f5e2:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f5e4:	2301      	movs	r3, #1
 800f5e6:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f5e8:	2302      	movs	r3, #2
 800f5ea:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f5ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f5f0:	4619      	mov	r1, r3
 800f5f2:	4814      	ldr	r0, [pc, #80]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f5f4:	f006 fa8c 	bl	8015b10 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f5f8:	2301      	movs	r3, #1
 800f5fa:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f5fc:	2305      	movs	r3, #5
 800f5fe:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f600:	2301      	movs	r3, #1
 800f602:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f604:	f242 1320 	movw	r3, #8480	; 0x2120
 800f608:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f60a:	2300      	movs	r3, #0
 800f60c:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f60e:	f242 1320 	movw	r3, #8480	; 0x2120
 800f612:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f614:	2300      	movs	r3, #0
 800f616:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f618:	2301      	movs	r3, #1
 800f61a:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f61c:	2301      	movs	r3, #1
 800f61e:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f620:	2302      	movs	r3, #2
 800f622:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f624:	463b      	mov	r3, r7
 800f626:	4619      	mov	r1, r3
 800f628:	4806      	ldr	r0, [pc, #24]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f62a:	f006 fa71 	bl	8015b10 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f62e:	4805      	ldr	r0, [pc, #20]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f630:	f006 fb5a 	bl	8015ce8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f634:	2110      	movs	r1, #16
 800f636:	4803      	ldr	r0, [pc, #12]	; (800f644 <MX_CAN2_Init+0xe8>)
 800f638:	f006 fda0 	bl	801617c <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f63c:	bf00      	nop
 800f63e:	3750      	adds	r7, #80	; 0x50
 800f640:	46bd      	mov	sp, r7
 800f642:	bd80      	pop	{r7, pc}
 800f644:	20009ec8 	.word	0x20009ec8
 800f648:	40006800 	.word	0x40006800

0800f64c <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f64c:	b580      	push	{r7, lr}
 800f64e:	b08a      	sub	sp, #40	; 0x28
 800f650:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f652:	4b34      	ldr	r3, [pc, #208]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f654:	4a34      	ldr	r2, [pc, #208]	; (800f728 <MX_CAN3_Init+0xdc>)
 800f656:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f658:	4b32      	ldr	r3, [pc, #200]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f65a:	2205      	movs	r2, #5
 800f65c:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f65e:	4b31      	ldr	r3, [pc, #196]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f660:	2200      	movs	r2, #0
 800f662:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f664:	4b2f      	ldr	r3, [pc, #188]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f666:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f66a:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f66c:	4b2d      	ldr	r3, [pc, #180]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f66e:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f672:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f674:	4b2b      	ldr	r3, [pc, #172]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f676:	2200      	movs	r2, #0
 800f678:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f67a:	4b2a      	ldr	r3, [pc, #168]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f67c:	4a2a      	ldr	r2, [pc, #168]	; (800f728 <MX_CAN3_Init+0xdc>)
 800f67e:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f680:	4b28      	ldr	r3, [pc, #160]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f682:	2212      	movs	r2, #18
 800f684:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f686:	4b27      	ldr	r3, [pc, #156]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f688:	2200      	movs	r2, #0
 800f68a:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f68c:	4b25      	ldr	r3, [pc, #148]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f68e:	2200      	movs	r2, #0
 800f690:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f692:	4b24      	ldr	r3, [pc, #144]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f694:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f698:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f69a:	4b22      	ldr	r3, [pc, #136]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f69c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f6a0:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f6a2:	4b20      	ldr	r3, [pc, #128]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f6a8:	4b1e      	ldr	r3, [pc, #120]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6aa:	2200      	movs	r2, #0
 800f6ac:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f6ae:	4b1d      	ldr	r3, [pc, #116]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6b0:	2200      	movs	r2, #0
 800f6b2:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f6b4:	4b1b      	ldr	r3, [pc, #108]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6b6:	2201      	movs	r2, #1
 800f6b8:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f6ba:	4b1a      	ldr	r3, [pc, #104]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6bc:	2200      	movs	r2, #0
 800f6be:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f6c0:	4b18      	ldr	r3, [pc, #96]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6c2:	2200      	movs	r2, #0
 800f6c4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f6c6:	4817      	ldr	r0, [pc, #92]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f6c8:	f006 f8dc 	bl	8015884 <HAL_CAN_Init>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	2b00      	cmp	r3, #0
 800f6d0:	d001      	beq.n	800f6d6 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f6d2:	f004 fb1b 	bl	8013d0c <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f6d6:	2301      	movs	r3, #1
 800f6d8:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f6da:	2301      	movs	r3, #1
 800f6dc:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f6e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f6e6:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f6e8:	2300      	movs	r3, #0
 800f6ea:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f6ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f6f0:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f6fa:	2301      	movs	r3, #1
 800f6fc:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f6fe:	2306      	movs	r3, #6
 800f700:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f702:	463b      	mov	r3, r7
 800f704:	4619      	mov	r1, r3
 800f706:	4807      	ldr	r0, [pc, #28]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f708:	f006 fa02 	bl	8015b10 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f70c:	4805      	ldr	r0, [pc, #20]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f70e:	f006 faeb 	bl	8015ce8 <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f712:	2102      	movs	r1, #2
 800f714:	4803      	ldr	r0, [pc, #12]	; (800f724 <MX_CAN3_Init+0xd8>)
 800f716:	f006 fd31 	bl	801617c <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f71a:	bf00      	nop
 800f71c:	3728      	adds	r7, #40	; 0x28
 800f71e:	46bd      	mov	sp, r7
 800f720:	bd80      	pop	{r7, pc}
 800f722:	bf00      	nop
 800f724:	20009f2c 	.word	0x20009f2c
 800f728:	40003400 	.word	0x40003400

0800f72c <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f72c:	b580      	push	{r7, lr}
 800f72e:	b08c      	sub	sp, #48	; 0x30
 800f730:	af00      	add	r7, sp, #0
 800f732:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f734:	f107 031c 	add.w	r3, r7, #28
 800f738:	2200      	movs	r2, #0
 800f73a:	601a      	str	r2, [r3, #0]
 800f73c:	605a      	str	r2, [r3, #4]
 800f73e:	609a      	str	r2, [r3, #8]
 800f740:	60da      	str	r2, [r3, #12]
 800f742:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	4a44      	ldr	r2, [pc, #272]	; (800f85c <HAL_CAN_MspInit+0x130>)
 800f74a:	4293      	cmp	r3, r2
 800f74c:	d144      	bne.n	800f7d8 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f74e:	4b44      	ldr	r3, [pc, #272]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f752:	4a43      	ldr	r2, [pc, #268]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f754:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f758:	6413      	str	r3, [r2, #64]	; 0x40
 800f75a:	4b41      	ldr	r3, [pc, #260]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f75c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f75e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f762:	61bb      	str	r3, [r7, #24]
 800f764:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f766:	4b3e      	ldr	r3, [pc, #248]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f76a:	4a3d      	ldr	r2, [pc, #244]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f76c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f770:	6413      	str	r3, [r2, #64]	; 0x40
 800f772:	4b3b      	ldr	r3, [pc, #236]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f77a:	617b      	str	r3, [r7, #20]
 800f77c:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f77e:	4b38      	ldr	r3, [pc, #224]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f782:	4a37      	ldr	r2, [pc, #220]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f784:	f043 0302 	orr.w	r3, r3, #2
 800f788:	6313      	str	r3, [r2, #48]	; 0x30
 800f78a:	4b35      	ldr	r3, [pc, #212]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f78c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f78e:	f003 0302 	and.w	r3, r3, #2
 800f792:	613b      	str	r3, [r7, #16]
 800f794:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f796:	2360      	movs	r3, #96	; 0x60
 800f798:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f79a:	2302      	movs	r3, #2
 800f79c:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f79e:	2300      	movs	r3, #0
 800f7a0:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f7a2:	2303      	movs	r3, #3
 800f7a4:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f7a6:	2309      	movs	r3, #9
 800f7a8:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f7aa:	f107 031c 	add.w	r3, r7, #28
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	482c      	ldr	r0, [pc, #176]	; (800f864 <HAL_CAN_MspInit+0x138>)
 800f7b2:	f008 fb43 	bl	8017e3c <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f7b6:	2200      	movs	r2, #0
 800f7b8:	2104      	movs	r1, #4
 800f7ba:	2040      	movs	r0, #64	; 0x40
 800f7bc:	f007 f813 	bl	80167e6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f7c0:	2040      	movs	r0, #64	; 0x40
 800f7c2:	f007 f82c 	bl	801681e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f7c6:	2201      	movs	r2, #1
 800f7c8:	2104      	movs	r1, #4
 800f7ca:	2041      	movs	r0, #65	; 0x41
 800f7cc:	f007 f80b 	bl	80167e6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f7d0:	2041      	movs	r0, #65	; 0x41
 800f7d2:	f007 f824 	bl	801681e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f7d6:	e03d      	b.n	800f854 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	681b      	ldr	r3, [r3, #0]
 800f7dc:	4a22      	ldr	r2, [pc, #136]	; (800f868 <HAL_CAN_MspInit+0x13c>)
 800f7de:	4293      	cmp	r3, r2
 800f7e0:	d138      	bne.n	800f854 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f7e2:	4b1f      	ldr	r3, [pc, #124]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f7e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7e6:	4a1e      	ldr	r2, [pc, #120]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f7e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f7ec:	6413      	str	r3, [r2, #64]	; 0x40
 800f7ee:	4b1c      	ldr	r3, [pc, #112]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f7f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f7f6:	60fb      	str	r3, [r7, #12]
 800f7f8:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800f7fa:	4b19      	ldr	r3, [pc, #100]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f7fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f7fe:	4a18      	ldr	r2, [pc, #96]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f800:	f043 0301 	orr.w	r3, r3, #1
 800f804:	6313      	str	r3, [r2, #48]	; 0x30
 800f806:	4b16      	ldr	r3, [pc, #88]	; (800f860 <HAL_CAN_MspInit+0x134>)
 800f808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f80a:	f003 0301 	and.w	r3, r3, #1
 800f80e:	60bb      	str	r3, [r7, #8]
 800f810:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800f812:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800f816:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f818:	2302      	movs	r3, #2
 800f81a:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f81c:	2300      	movs	r3, #0
 800f81e:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f820:	2303      	movs	r3, #3
 800f822:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800f824:	230b      	movs	r3, #11
 800f826:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f828:	f107 031c 	add.w	r3, r7, #28
 800f82c:	4619      	mov	r1, r3
 800f82e:	480f      	ldr	r0, [pc, #60]	; (800f86c <HAL_CAN_MspInit+0x140>)
 800f830:	f008 fb04 	bl	8017e3c <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800f834:	2200      	movs	r2, #0
 800f836:	2100      	movs	r1, #0
 800f838:	2069      	movs	r0, #105	; 0x69
 800f83a:	f006 ffd4 	bl	80167e6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800f83e:	2069      	movs	r0, #105	; 0x69
 800f840:	f006 ffed 	bl	801681e <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800f844:	2200      	movs	r2, #0
 800f846:	2100      	movs	r1, #0
 800f848:	206a      	movs	r0, #106	; 0x6a
 800f84a:	f006 ffcc 	bl	80167e6 <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800f84e:	206a      	movs	r0, #106	; 0x6a
 800f850:	f006 ffe5 	bl	801681e <HAL_NVIC_EnableIRQ>
}
 800f854:	bf00      	nop
 800f856:	3730      	adds	r7, #48	; 0x30
 800f858:	46bd      	mov	sp, r7
 800f85a:	bd80      	pop	{r7, pc}
 800f85c:	40006800 	.word	0x40006800
 800f860:	40023800 	.word	0x40023800
 800f864:	40020400 	.word	0x40020400
 800f868:	40003400 	.word	0x40003400
 800f86c:	40020000 	.word	0x40020000

0800f870 <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800f870:	b580      	push	{r7, lr}
 800f872:	b084      	sub	sp, #16
 800f874:	af00      	add	r7, sp, #0
 800f876:	4603      	mov	r3, r0
 800f878:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800f87a:	2300      	movs	r3, #0
 800f87c:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 800f87e:	2300      	movs	r3, #0
 800f880:	81fb      	strh	r3, [r7, #14]



	switch(EI_data.ProtocolType)
 800f882:	4b9c      	ldr	r3, [pc, #624]	; (800faf4 <TransmitCanPkt+0x284>)
 800f884:	781b      	ldrb	r3, [r3, #0]
 800f886:	2b03      	cmp	r3, #3
 800f888:	f000 816b 	beq.w	800fb62 <TransmitCanPkt+0x2f2>
 800f88c:	2b03      	cmp	r3, #3
 800f88e:	f300 81e9 	bgt.w	800fc64 <TransmitCanPkt+0x3f4>
 800f892:	2b01      	cmp	r3, #1
 800f894:	d003      	beq.n	800f89e <TransmitCanPkt+0x2e>
 800f896:	2b02      	cmp	r3, #2
 800f898:	f000 80b9 	beq.w	800fa0e <TransmitCanPkt+0x19e>
 800f89c:	e1e2      	b.n	800fc64 <TransmitCanPkt+0x3f4>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800f89e:	4b96      	ldr	r3, [pc, #600]	; (800faf8 <TransmitCanPkt+0x288>)
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	0a1b      	lsrs	r3, r3, #8
 800f8a4:	f003 0301 	and.w	r3, r3, #1
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	d003      	beq.n	800f8b4 <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800f8ac:	4893      	ldr	r0, [pc, #588]	; (800fafc <TransmitCanPkt+0x28c>)
 800f8ae:	f013 f85f 	bl	8022970 <puts>
			return;
 800f8b2:	e1d7      	b.n	800fc64 <TransmitCanPkt+0x3f4>
		}

		switch((int)Ken_idetifier)
 800f8b4:	88fb      	ldrh	r3, [r7, #6]
 800f8b6:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f8ba:	f300 80a2 	bgt.w	800fa02 <TransmitCanPkt+0x192>
 800f8be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f8c2:	dc0d      	bgt.n	800f8e0 <TransmitCanPkt+0x70>
 800f8c4:	f240 1219 	movw	r2, #281	; 0x119
 800f8c8:	4293      	cmp	r3, r2
 800f8ca:	d021      	beq.n	800f910 <TransmitCanPkt+0xa0>
 800f8cc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f8d0:	f340 8097 	ble.w	800fa02 <TransmitCanPkt+0x192>
 800f8d4:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800f8d8:	2b01      	cmp	r3, #1
 800f8da:	f200 8092 	bhi.w	800fa02 <TransmitCanPkt+0x192>
 800f8de:	e033      	b.n	800f948 <TransmitCanPkt+0xd8>
 800f8e0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f8e4:	2b07      	cmp	r3, #7
 800f8e6:	f200 808c 	bhi.w	800fa02 <TransmitCanPkt+0x192>
 800f8ea:	a201      	add	r2, pc, #4	; (adr r2, 800f8f0 <TransmitCanPkt+0x80>)
 800f8ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8f0:	0800f96d 	.word	0x0800f96d
 800f8f4:	0800f96d 	.word	0x0800f96d
 800f8f8:	0800f997 	.word	0x0800f997
 800f8fc:	0800f997 	.word	0x0800f997
 800f900:	0800f9bb 	.word	0x0800f9bb
 800f904:	0800fa03 	.word	0x0800fa03
 800f908:	0800f9df 	.word	0x0800f9df
 800f90c:	0800f9df 	.word	0x0800f9df
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800f910:	4b78      	ldr	r3, [pc, #480]	; (800faf4 <TransmitCanPkt+0x284>)
 800f912:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f916:	b29b      	uxth	r3, r3
 800f918:	011b      	lsls	r3, r3, #4
 800f91a:	b29a      	uxth	r2, r3
 800f91c:	4b78      	ldr	r3, [pc, #480]	; (800fb00 <TransmitCanPkt+0x290>)
 800f91e:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800f920:	4b77      	ldr	r3, [pc, #476]	; (800fb00 <TransmitCanPkt+0x290>)
 800f922:	60bb      	str	r3, [r7, #8]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800f924:	4b76      	ldr	r3, [pc, #472]	; (800fb00 <TransmitCanPkt+0x290>)
 800f926:	881b      	ldrh	r3, [r3, #0]
 800f928:	3302      	adds	r3, #2
 800f92a:	81fb      	strh	r3, [r7, #14]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f92c:	89fb      	ldrh	r3, [r7, #14]
 800f92e:	88fa      	ldrh	r2, [r7, #6]
 800f930:	4619      	mov	r1, r3
 800f932:	68b8      	ldr	r0, [r7, #8]
 800f934:	f000 f9b2 	bl	800fc9c <sendCanPkts>
			if(Debug_flag == 1)
 800f938:	4b72      	ldr	r3, [pc, #456]	; (800fb04 <TransmitCanPkt+0x294>)
 800f93a:	781b      	ldrb	r3, [r3, #0]
 800f93c:	2b01      	cmp	r3, #1
 800f93e:	d162      	bne.n	800fa06 <TransmitCanPkt+0x196>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800f940:	4871      	ldr	r0, [pc, #452]	; (800fb08 <TransmitCanPkt+0x298>)
 800f942:	f013 f815 	bl	8022970 <puts>
			}
			break;
 800f946:	e05e      	b.n	800fa06 <TransmitCanPkt+0x196>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f948:	4b70      	ldr	r3, [pc, #448]	; (800fb0c <TransmitCanPkt+0x29c>)
 800f94a:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f94c:	2316      	movs	r3, #22
 800f94e:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f950:	4b6c      	ldr	r3, [pc, #432]	; (800fb04 <TransmitCanPkt+0x294>)
 800f952:	781b      	ldrb	r3, [r3, #0]
 800f954:	2b01      	cmp	r3, #1
 800f956:	d102      	bne.n	800f95e <TransmitCanPkt+0xee>
			{
				printf("\nHealth 2 MIE\n");
 800f958:	486d      	ldr	r0, [pc, #436]	; (800fb10 <TransmitCanPkt+0x2a0>)
 800f95a:	f013 f809 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f95e:	89fb      	ldrh	r3, [r7, #14]
 800f960:	88fa      	ldrh	r2, [r7, #6]
 800f962:	4619      	mov	r1, r3
 800f964:	68b8      	ldr	r0, [r7, #8]
 800f966:	f000 f999 	bl	800fc9c <sendCanPkts>
			break;
 800f96a:	e04f      	b.n	800fa0c <TransmitCanPkt+0x19c>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800f96c:	4b69      	ldr	r3, [pc, #420]	; (800fb14 <TransmitCanPkt+0x2a4>)
 800f96e:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800f970:	2318      	movs	r3, #24
 800f972:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f974:	89fb      	ldrh	r3, [r7, #14]
 800f976:	88fa      	ldrh	r2, [r7, #6]
 800f978:	4619      	mov	r1, r3
 800f97a:	68b8      	ldr	r0, [r7, #8]
 800f97c:	f000 f98e 	bl	800fc9c <sendCanPkts>
			if(Debug_flag == 1)
 800f980:	4b60      	ldr	r3, [pc, #384]	; (800fb04 <TransmitCanPkt+0x294>)
 800f982:	781b      	ldrb	r3, [r3, #0]
 800f984:	2b01      	cmp	r3, #1
 800f986:	d140      	bne.n	800fa0a <TransmitCanPkt+0x19a>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800f988:	4b62      	ldr	r3, [pc, #392]	; (800fb14 <TransmitCanPkt+0x2a4>)
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	4619      	mov	r1, r3
 800f98e:	4862      	ldr	r0, [pc, #392]	; (800fb18 <TransmitCanPkt+0x2a8>)
 800f990:	f012 ff52 	bl	8022838 <iprintf>
			}
			break;
 800f994:	e039      	b.n	800fa0a <TransmitCanPkt+0x19a>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800f996:	4b61      	ldr	r3, [pc, #388]	; (800fb1c <TransmitCanPkt+0x2ac>)
 800f998:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800f99a:	2386      	movs	r3, #134	; 0x86
 800f99c:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f99e:	4b59      	ldr	r3, [pc, #356]	; (800fb04 <TransmitCanPkt+0x294>)
 800f9a0:	781b      	ldrb	r3, [r3, #0]
 800f9a2:	2b01      	cmp	r3, #1
 800f9a4:	d102      	bne.n	800f9ac <TransmitCanPkt+0x13c>
			{
				printf("\nSending V-Message 2-O\n");
 800f9a6:	485e      	ldr	r0, [pc, #376]	; (800fb20 <TransmitCanPkt+0x2b0>)
 800f9a8:	f012 ffe2 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f9ac:	89fb      	ldrh	r3, [r7, #14]
 800f9ae:	88fa      	ldrh	r2, [r7, #6]
 800f9b0:	4619      	mov	r1, r3
 800f9b2:	68b8      	ldr	r0, [r7, #8]
 800f9b4:	f000 f972 	bl	800fc9c <sendCanPkts>
			break;
 800f9b8:	e028      	b.n	800fa0c <TransmitCanPkt+0x19c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800f9ba:	4b4f      	ldr	r3, [pc, #316]	; (800faf8 <TransmitCanPkt+0x288>)
 800f9bc:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800f9be:	2308      	movs	r3, #8
 800f9c0:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f9c2:	4b50      	ldr	r3, [pc, #320]	; (800fb04 <TransmitCanPkt+0x294>)
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b01      	cmp	r3, #1
 800f9c8:	d102      	bne.n	800f9d0 <TransmitCanPkt+0x160>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800f9ca:	4856      	ldr	r0, [pc, #344]	; (800fb24 <TransmitCanPkt+0x2b4>)
 800f9cc:	f012 ffd0 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f9d0:	89fb      	ldrh	r3, [r7, #14]
 800f9d2:	88fa      	ldrh	r2, [r7, #6]
 800f9d4:	4619      	mov	r1, r3
 800f9d6:	68b8      	ldr	r0, [r7, #8]
 800f9d8:	f000 f960 	bl	800fc9c <sendCanPkts>
			break;
 800f9dc:	e016      	b.n	800fa0c <TransmitCanPkt+0x19c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800f9de:	4b52      	ldr	r3, [pc, #328]	; (800fb28 <TransmitCanPkt+0x2b8>)
 800f9e0:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(RELAYS_t);
 800f9e2:	2314      	movs	r3, #20
 800f9e4:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f9e6:	4b47      	ldr	r3, [pc, #284]	; (800fb04 <TransmitCanPkt+0x294>)
 800f9e8:	781b      	ldrb	r3, [r3, #0]
 800f9ea:	2b01      	cmp	r3, #1
 800f9ec:	d102      	bne.n	800f9f4 <TransmitCanPkt+0x184>
			{
				printf("Sending Relays-O\n");
 800f9ee:	484f      	ldr	r0, [pc, #316]	; (800fb2c <TransmitCanPkt+0x2bc>)
 800f9f0:	f012 ffbe 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f9f4:	89fb      	ldrh	r3, [r7, #14]
 800f9f6:	88fa      	ldrh	r2, [r7, #6]
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	68b8      	ldr	r0, [r7, #8]
 800f9fc:	f000 f94e 	bl	800fc9c <sendCanPkts>
			break;
 800fa00:	e004      	b.n	800fa0c <TransmitCanPkt+0x19c>
		default:
			break;
 800fa02:	bf00      	nop
 800fa04:	e12e      	b.n	800fc64 <TransmitCanPkt+0x3f4>
			break;
 800fa06:	bf00      	nop
 800fa08:	e12c      	b.n	800fc64 <TransmitCanPkt+0x3f4>
			break;
 800fa0a:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800fa0c:	e12a      	b.n	800fc64 <TransmitCanPkt+0x3f4>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800fa0e:	88fb      	ldrh	r3, [r7, #6]
 800fa10:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fa14:	f300 8123 	bgt.w	800fc5e <TransmitCanPkt+0x3ee>
 800fa18:	f240 2207 	movw	r2, #519	; 0x207
 800fa1c:	4293      	cmp	r3, r2
 800fa1e:	da3d      	bge.n	800fa9c <TransmitCanPkt+0x22c>
 800fa20:	f240 2205 	movw	r2, #517	; 0x205
 800fa24:	4293      	cmp	r3, r2
 800fa26:	f000 808d 	beq.w	800fb44 <TransmitCanPkt+0x2d4>
 800fa2a:	f240 2205 	movw	r2, #517	; 0x205
 800fa2e:	4293      	cmp	r3, r2
 800fa30:	f300 8115 	bgt.w	800fc5e <TransmitCanPkt+0x3ee>
 800fa34:	f240 1219 	movw	r2, #281	; 0x119
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d009      	beq.n	800fa50 <TransmitCanPkt+0x1e0>
 800fa3c:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fa40:	f340 810d 	ble.w	800fc5e <TransmitCanPkt+0x3ee>
 800fa44:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fa48:	2b01      	cmp	r3, #1
 800fa4a:	f200 8108 	bhi.w	800fc5e <TransmitCanPkt+0x3ee>
 800fa4e:	e013      	b.n	800fa78 <TransmitCanPkt+0x208>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800fa50:	4b37      	ldr	r3, [pc, #220]	; (800fb30 <TransmitCanPkt+0x2c0>)
 800fa52:	60bb      	str	r3, [r7, #8]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800fa54:	4b36      	ldr	r3, [pc, #216]	; (800fb30 <TransmitCanPkt+0x2c0>)
 800fa56:	881b      	ldrh	r3, [r3, #0]
 800fa58:	3302      	adds	r3, #2
 800fa5a:	81fb      	strh	r3, [r7, #14]

			if(Debug_flag == 1)
 800fa5c:	4b29      	ldr	r3, [pc, #164]	; (800fb04 <TransmitCanPkt+0x294>)
 800fa5e:	781b      	ldrb	r3, [r3, #0]
 800fa60:	2b01      	cmp	r3, #1
 800fa62:	d102      	bne.n	800fa6a <TransmitCanPkt+0x1fa>
			{
				printf("Sending Signals 2 MIE\n");
 800fa64:	4833      	ldr	r0, [pc, #204]	; (800fb34 <TransmitCanPkt+0x2c4>)
 800fa66:	f012 ff83 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fa6a:	89fb      	ldrh	r3, [r7, #14]
 800fa6c:	88fa      	ldrh	r2, [r7, #6]
 800fa6e:	4619      	mov	r1, r3
 800fa70:	68b8      	ldr	r0, [r7, #8]
 800fa72:	f000 f913 	bl	800fc9c <sendCanPkts>
			break;
 800fa76:	e073      	b.n	800fb60 <TransmitCanPkt+0x2f0>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800fa78:	4b2f      	ldr	r3, [pc, #188]	; (800fb38 <TransmitCanPkt+0x2c8>)
 800fa7a:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fa80:	4b20      	ldr	r3, [pc, #128]	; (800fb04 <TransmitCanPkt+0x294>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	2b01      	cmp	r3, #1
 800fa86:	d102      	bne.n	800fa8e <TransmitCanPkt+0x21e>
			{
				printf("Sending Signals 2 MIE\n");
 800fa88:	482a      	ldr	r0, [pc, #168]	; (800fb34 <TransmitCanPkt+0x2c4>)
 800fa8a:	f012 ff71 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fa8e:	89fb      	ldrh	r3, [r7, #14]
 800fa90:	88fa      	ldrh	r2, [r7, #6]
 800fa92:	4619      	mov	r1, r3
 800fa94:	68b8      	ldr	r0, [r7, #8]
 800fa96:	f000 f901 	bl	800fc9c <sendCanPkts>
			break;
 800fa9a:	e061      	b.n	800fb60 <TransmitCanPkt+0x2f0>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800fa9c:	4b27      	ldr	r3, [pc, #156]	; (800fb3c <TransmitCanPkt+0x2cc>)
 800fa9e:	60bb      	str	r3, [r7, #8]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800faa0:	4b14      	ldr	r3, [pc, #80]	; (800faf4 <TransmitCanPkt+0x284>)
 800faa2:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800faa6:	f003 0307 	and.w	r3, r3, #7
 800faaa:	81fb      	strh	r3, [r7, #14]
			if (uc_size != 0)
 800faac:	89fb      	ldrh	r3, [r7, #14]
 800faae:	2b00      	cmp	r3, #0
 800fab0:	d007      	beq.n	800fac2 <TransmitCanPkt+0x252>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800fab2:	4b10      	ldr	r3, [pc, #64]	; (800faf4 <TransmitCanPkt+0x284>)
 800fab4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fab8:	08db      	lsrs	r3, r3, #3
 800faba:	b29b      	uxth	r3, r3
 800fabc:	3301      	adds	r3, #1
 800fabe:	81fb      	strh	r3, [r7, #14]
 800fac0:	e004      	b.n	800facc <TransmitCanPkt+0x25c>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800fac2:	4b0c      	ldr	r3, [pc, #48]	; (800faf4 <TransmitCanPkt+0x284>)
 800fac4:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800fac8:	08db      	lsrs	r3, r3, #3
 800faca:	81fb      	strh	r3, [r7, #14]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800facc:	4a1b      	ldr	r2, [pc, #108]	; (800fb3c <TransmitCanPkt+0x2cc>)
 800face:	89fb      	ldrh	r3, [r7, #14]
 800fad0:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800fad2:	89fb      	ldrh	r3, [r7, #14]
 800fad4:	3304      	adds	r3, #4
 800fad6:	81fb      	strh	r3, [r7, #14]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800fad8:	4b0a      	ldr	r3, [pc, #40]	; (800fb04 <TransmitCanPkt+0x294>)
 800fada:	781b      	ldrb	r3, [r3, #0]
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d102      	bne.n	800fae6 <TransmitCanPkt+0x276>
			{
				printf("Sending Relays 2 Other\n");
 800fae0:	4817      	ldr	r0, [pc, #92]	; (800fb40 <TransmitCanPkt+0x2d0>)
 800fae2:	f012 ff45 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fae6:	89fb      	ldrh	r3, [r7, #14]
 800fae8:	88fa      	ldrh	r2, [r7, #6]
 800faea:	4619      	mov	r1, r3
 800faec:	68b8      	ldr	r0, [r7, #8]
 800faee:	f000 f8d5 	bl	800fc9c <sendCanPkts>
			break;
 800faf2:	e035      	b.n	800fb60 <TransmitCanPkt+0x2f0>
 800faf4:	20000304 	.word	0x20000304
 800faf8:	20001a1c 	.word	0x20001a1c
 800fafc:	08026b64 	.word	0x08026b64
 800fb00:	200010e4 	.word	0x200010e4
 800fb04:	20000645 	.word	0x20000645
 800fb08:	08026b80 	.word	0x08026b80
 800fb0c:	20001a24 	.word	0x20001a24
 800fb10:	08026b98 	.word	0x08026b98
 800fb14:	20001854 	.word	0x20001854
 800fb18:	08026ba8 	.word	0x08026ba8
 800fb1c:	20001884 	.word	0x20001884
 800fb20:	08026bb4 	.word	0x08026bb4
 800fb24:	08026bcc 	.word	0x08026bcc
 800fb28:	20002350 	.word	0x20002350
 800fb2c:	08026bf0 	.word	0x08026bf0
 800fb30:	20003884 	.word	0x20003884
 800fb34:	08026c04 	.word	0x08026c04
 800fb38:	2000385c 	.word	0x2000385c
 800fb3c:	20003a88 	.word	0x20003a88
 800fb40:	08026c1c 	.word	0x08026c1c

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800fb44:	4b49      	ldr	r3, [pc, #292]	; (800fc6c <TransmitCanPkt+0x3fc>)
 800fb46:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800fb48:	2308      	movs	r3, #8
 800fb4a:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800fb4c:	4848      	ldr	r0, [pc, #288]	; (800fc70 <TransmitCanPkt+0x400>)
 800fb4e:	f012 ff0f 	bl	8022970 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800fb52:	89fb      	ldrh	r3, [r7, #14]
 800fb54:	88fa      	ldrh	r2, [r7, #6]
 800fb56:	4619      	mov	r1, r3
 800fb58:	68b8      	ldr	r0, [r7, #8]
 800fb5a:	f000 f89f 	bl	800fc9c <sendCanPkts>
			break;
 800fb5e:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800fb60:	e07d      	b.n	800fc5e <TransmitCanPkt+0x3ee>


	case MEDHA:
	{
		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800fb62:	88fb      	ldrh	r3, [r7, #6]
 800fb64:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fb68:	dc7b      	bgt.n	800fc62 <TransmitCanPkt+0x3f2>
 800fb6a:	f240 2207 	movw	r2, #519	; 0x207
 800fb6e:	4293      	cmp	r3, r2
 800fb70:	da61      	bge.n	800fc36 <TransmitCanPkt+0x3c6>
 800fb72:	f240 2205 	movw	r2, #517	; 0x205
 800fb76:	4293      	cmp	r3, r2
 800fb78:	d04f      	beq.n	800fc1a <TransmitCanPkt+0x3aa>
 800fb7a:	f240 2205 	movw	r2, #517	; 0x205
 800fb7e:	4293      	cmp	r3, r2
 800fb80:	dc6f      	bgt.n	800fc62 <TransmitCanPkt+0x3f2>
 800fb82:	f240 2202 	movw	r2, #514	; 0x202
 800fb86:	4293      	cmp	r3, r2
 800fb88:	dc6b      	bgt.n	800fc62 <TransmitCanPkt+0x3f2>
 800fb8a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fb8e:	dc21      	bgt.n	800fbd4 <TransmitCanPkt+0x364>
 800fb90:	f240 1219 	movw	r2, #281	; 0x119
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d007      	beq.n	800fba8 <TransmitCanPkt+0x338>
 800fb98:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800fb9c:	dd61      	ble.n	800fc62 <TransmitCanPkt+0x3f2>
 800fb9e:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800fba2:	2b01      	cmp	r3, #1
 800fba4:	d85d      	bhi.n	800fc62 <TransmitCanPkt+0x3f2>
 800fba6:	e026      	b.n	800fbf6 <TransmitCanPkt+0x386>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800fba8:	4b32      	ldr	r3, [pc, #200]	; (800fc74 <TransmitCanPkt+0x404>)
 800fbaa:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_RELAY_STS_t);
 800fbac:	2330      	movs	r3, #48	; 0x30
 800fbae:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fbb0:	89fb      	ldrh	r3, [r7, #14]
 800fbb2:	88fa      	ldrh	r2, [r7, #6]
 800fbb4:	4619      	mov	r1, r3
 800fbb6:	68b8      	ldr	r0, [r7, #8]
 800fbb8:	f000 f870 	bl	800fc9c <sendCanPkts>
			if(Debug_flag == 1)
 800fbbc:	4b2e      	ldr	r3, [pc, #184]	; (800fc78 <TransmitCanPkt+0x408>)
 800fbbe:	781b      	ldrb	r3, [r3, #0]
 800fbc0:	2b01      	cmp	r3, #1
 800fbc2:	d14a      	bne.n	800fc5a <TransmitCanPkt+0x3ea>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800fbc4:	f005 fe2e 	bl	8015824 <HAL_GetTick>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	4619      	mov	r1, r3
 800fbcc:	482b      	ldr	r0, [pc, #172]	; (800fc7c <TransmitCanPkt+0x40c>)
 800fbce:	f012 fe33 	bl	8022838 <iprintf>
			}
			break;
 800fbd2:	e042      	b.n	800fc5a <TransmitCanPkt+0x3ea>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800fbd4:	4b2a      	ldr	r3, [pc, #168]	; (800fc80 <TransmitCanPkt+0x410>)
 800fbd6:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800fbd8:	2308      	movs	r3, #8
 800fbda:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fbdc:	4b26      	ldr	r3, [pc, #152]	; (800fc78 <TransmitCanPkt+0x408>)
 800fbde:	781b      	ldrb	r3, [r3, #0]
 800fbe0:	2b01      	cmp	r3, #1
 800fbe2:	d102      	bne.n	800fbea <TransmitCanPkt+0x37a>
			{
				printf("\nSending_2_O\n");
 800fbe4:	4827      	ldr	r0, [pc, #156]	; (800fc84 <TransmitCanPkt+0x414>)
 800fbe6:	f012 fec3 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fbea:	89fb      	ldrh	r3, [r7, #14]
 800fbec:	88fa      	ldrh	r2, [r7, #6]
 800fbee:	4619      	mov	r1, r3
 800fbf0:	68b8      	ldr	r0, [r7, #8]
 800fbf2:	f000 f853 	bl	800fc9c <sendCanPkts>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800fbf6:	4b24      	ldr	r3, [pc, #144]	; (800fc88 <TransmitCanPkt+0x418>)
 800fbf8:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800fbfa:	2316      	movs	r3, #22
 800fbfc:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fbfe:	4b1e      	ldr	r3, [pc, #120]	; (800fc78 <TransmitCanPkt+0x408>)
 800fc00:	781b      	ldrb	r3, [r3, #0]
 800fc02:	2b01      	cmp	r3, #1
 800fc04:	d102      	bne.n	800fc0c <TransmitCanPkt+0x39c>
			{
				printf("\nHealth 2 MIE\n");
 800fc06:	4821      	ldr	r0, [pc, #132]	; (800fc8c <TransmitCanPkt+0x41c>)
 800fc08:	f012 feb2 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fc0c:	89fb      	ldrh	r3, [r7, #14]
 800fc0e:	88fa      	ldrh	r2, [r7, #6]
 800fc10:	4619      	mov	r1, r3
 800fc12:	68b8      	ldr	r0, [r7, #8]
 800fc14:	f000 f842 	bl	800fc9c <sendCanPkts>
			break;
 800fc18:	e020      	b.n	800fc5c <TransmitCanPkt+0x3ec>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800fc1a:	4b1d      	ldr	r3, [pc, #116]	; (800fc90 <TransmitCanPkt+0x420>)
 800fc1c:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800fc1e:	2304      	movs	r3, #4
 800fc20:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800fc22:	4813      	ldr	r0, [pc, #76]	; (800fc70 <TransmitCanPkt+0x400>)
 800fc24:	f012 fea4 	bl	8022970 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fc28:	89fb      	ldrh	r3, [r7, #14]
 800fc2a:	88fa      	ldrh	r2, [r7, #6]
 800fc2c:	4619      	mov	r1, r3
 800fc2e:	68b8      	ldr	r0, [r7, #8]
 800fc30:	f000 f834 	bl	800fc9c <sendCanPkts>
			break;
 800fc34:	e012      	b.n	800fc5c <TransmitCanPkt+0x3ec>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800fc36:	4b17      	ldr	r3, [pc, #92]	; (800fc94 <TransmitCanPkt+0x424>)
 800fc38:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800fc3a:	2384      	movs	r3, #132	; 0x84
 800fc3c:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800fc3e:	4b0e      	ldr	r3, [pc, #56]	; (800fc78 <TransmitCanPkt+0x408>)
 800fc40:	781b      	ldrb	r3, [r3, #0]
 800fc42:	2b01      	cmp	r3, #1
 800fc44:	d102      	bne.n	800fc4c <TransmitCanPkt+0x3dc>
			{
				printf("\nRelay Data 2-O\n");
 800fc46:	4814      	ldr	r0, [pc, #80]	; (800fc98 <TransmitCanPkt+0x428>)
 800fc48:	f012 fe92 	bl	8022970 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800fc4c:	89fb      	ldrh	r3, [r7, #14]
 800fc4e:	88fa      	ldrh	r2, [r7, #6]
 800fc50:	4619      	mov	r1, r3
 800fc52:	68b8      	ldr	r0, [r7, #8]
 800fc54:	f000 f822 	bl	800fc9c <sendCanPkts>
			break;
 800fc58:	e000      	b.n	800fc5c <TransmitCanPkt+0x3ec>
			break;
 800fc5a:	bf00      	nop
		}

		break;
 800fc5c:	e001      	b.n	800fc62 <TransmitCanPkt+0x3f2>
		break; /* case SIEMENS: break */
 800fc5e:	bf00      	nop
 800fc60:	e000      	b.n	800fc64 <TransmitCanPkt+0x3f4>
		break;
 800fc62:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800fc64:	3710      	adds	r7, #16
 800fc66:	46bd      	mov	sp, r7
 800fc68:	bd80      	pop	{r7, pc}
 800fc6a:	bf00      	nop
 800fc6c:	20003854 	.word	0x20003854
 800fc70:	08026bcc 	.word	0x08026bcc
 800fc74:	200029ac 	.word	0x200029ac
 800fc78:	20000645 	.word	0x20000645
 800fc7c:	08026c34 	.word	0x08026c34
 800fc80:	200029ec 	.word	0x200029ec
 800fc84:	08026c58 	.word	0x08026c58
 800fc88:	20001a24 	.word	0x20001a24
 800fc8c:	08026b98 	.word	0x08026b98
 800fc90:	200029e8 	.word	0x200029e8
 800fc94:	20002a04 	.word	0x20002a04
 800fc98:	08026c68 	.word	0x08026c68

0800fc9c <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800fc9c:	b580      	push	{r7, lr}
 800fc9e:	b088      	sub	sp, #32
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	4613      	mov	r3, r2
 800fca8:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800fcaa:	68bb      	ldr	r3, [r7, #8]
 800fcac:	61fb      	str	r3, [r7, #28]
 800fcae:	2300      	movs	r3, #0
 800fcb0:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800fcb2:	68fb      	ldr	r3, [r7, #12]
 800fcb4:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800fcb6:	e019      	b.n	800fcec <sendCanPkts+0x50>
	{
		//printf("J=%u\n",j);
		if(j < 7)
 800fcb8:	69fb      	ldr	r3, [r7, #28]
 800fcba:	2b06      	cmp	r3, #6
 800fcbc:	dc07      	bgt.n	800fcce <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800fcbe:	88f8      	ldrh	r0, [r7, #6]
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	1c5a      	adds	r2, r3, #1
 800fcc4:	69bb      	ldr	r3, [r7, #24]
 800fcc6:	6979      	ldr	r1, [r7, #20]
 800fcc8:	f000 f818 	bl	800fcfc <CAN_transmit>
 800fccc:	e005      	b.n	800fcda <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800fcce:	88f8      	ldrh	r0, [r7, #6]
 800fcd0:	69bb      	ldr	r3, [r7, #24]
 800fcd2:	2208      	movs	r2, #8
 800fcd4:	6979      	ldr	r1, [r7, #20]
 800fcd6:	f000 f811 	bl	800fcfc <CAN_transmit>
		}
		cptr += 7;
 800fcda:	697b      	ldr	r3, [r7, #20]
 800fcdc:	3307      	adds	r3, #7
 800fcde:	617b      	str	r3, [r7, #20]
		j-=7;
 800fce0:	69fb      	ldr	r3, [r7, #28]
 800fce2:	3b07      	subs	r3, #7
 800fce4:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800fce6:	69bb      	ldr	r3, [r7, #24]
 800fce8:	3301      	adds	r3, #1
 800fcea:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800fcec:	69fb      	ldr	r3, [r7, #28]
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	dce2      	bgt.n	800fcb8 <sendCanPkts+0x1c>
	}
}
 800fcf2:	bf00      	nop
 800fcf4:	bf00      	nop
 800fcf6:	3720      	adds	r7, #32
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b088      	sub	sp, #32
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	60f8      	str	r0, [r7, #12]
 800fd04:	60b9      	str	r1, [r7, #8]
 800fd06:	607a      	str	r2, [r7, #4]
 800fd08:	603b      	str	r3, [r7, #0]
	char i=0;
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800fd0e:	f005 fd89 	bl	8015824 <HAL_GetTick>
 800fd12:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800fd14:	683b      	ldr	r3, [r7, #0]
 800fd16:	b2da      	uxtb	r2, r3
 800fd18:	4b4d      	ldr	r3, [pc, #308]	; (800fe50 <CAN_transmit+0x154>)
 800fd1a:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800fd1c:	2300      	movs	r3, #0
 800fd1e:	77fb      	strb	r3, [r7, #31]
 800fd20:	e00a      	b.n	800fd38 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800fd22:	7ffb      	ldrb	r3, [r7, #31]
 800fd24:	68ba      	ldr	r2, [r7, #8]
 800fd26:	441a      	add	r2, r3
 800fd28:	7ffb      	ldrb	r3, [r7, #31]
 800fd2a:	3301      	adds	r3, #1
 800fd2c:	7811      	ldrb	r1, [r2, #0]
 800fd2e:	4a48      	ldr	r2, [pc, #288]	; (800fe50 <CAN_transmit+0x154>)
 800fd30:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800fd32:	7ffb      	ldrb	r3, [r7, #31]
 800fd34:	3301      	adds	r3, #1
 800fd36:	77fb      	strb	r3, [r7, #31]
 800fd38:	7ffa      	ldrb	r2, [r7, #31]
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	3b01      	subs	r3, #1
 800fd3e:	429a      	cmp	r2, r3
 800fd40:	dbef      	blt.n	800fd22 <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 800fd42:	68fb      	ldr	r3, [r7, #12]
 800fd44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fd48:	da3b      	bge.n	800fdc2 <CAN_transmit+0xc6>
	{
		while(len!=0)
 800fd4a:	e036      	b.n	800fdba <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 800fd4c:	4b41      	ldr	r3, [pc, #260]	; (800fe54 <CAN_transmit+0x158>)
 800fd4e:	2200      	movs	r2, #0
 800fd50:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 800fd52:	68fb      	ldr	r3, [r7, #12]
 800fd54:	4a3f      	ldr	r2, [pc, #252]	; (800fe54 <CAN_transmit+0x158>)
 800fd56:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 800fd58:	4b3e      	ldr	r3, [pc, #248]	; (800fe54 <CAN_transmit+0x158>)
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 800fd5e:	687b      	ldr	r3, [r7, #4]
 800fd60:	4a3c      	ldr	r2, [pc, #240]	; (800fe54 <CAN_transmit+0x158>)
 800fd62:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800fd64:	2300      	movs	r3, #0
 800fd66:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 800fd68:	4b3b      	ldr	r3, [pc, #236]	; (800fe58 <CAN_transmit+0x15c>)
 800fd6a:	4a39      	ldr	r2, [pc, #228]	; (800fe50 <CAN_transmit+0x154>)
 800fd6c:	4939      	ldr	r1, [pc, #228]	; (800fe54 <CAN_transmit+0x158>)
 800fd6e:	483b      	ldr	r0, [pc, #236]	; (800fe5c <CAN_transmit+0x160>)
 800fd70:	f005 fffe 	bl	8015d70 <HAL_CAN_AddTxMessage>
 800fd74:	4603      	mov	r3, r0
 800fd76:	461a      	mov	r2, r3
 800fd78:	4b39      	ldr	r3, [pc, #228]	; (800fe60 <CAN_transmit+0x164>)
 800fd7a:	701a      	strb	r2, [r3, #0]
 800fd7c:	4b38      	ldr	r3, [pc, #224]	; (800fe60 <CAN_transmit+0x164>)
 800fd7e:	781b      	ldrb	r3, [r3, #0]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d00d      	beq.n	800fda0 <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 800fd84:	4837      	ldr	r0, [pc, #220]	; (800fe64 <CAN_transmit+0x168>)
 800fd86:	f012 fdf3 	bl	8022970 <puts>
				return;
 800fd8a:	e05e      	b.n	800fe4a <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800fd8c:	69b8      	ldr	r0, [r7, #24]
 800fd8e:	f7fe ffbb 	bl	800ed08 <HAL_Elaps_Ticks>
 800fd92:	4603      	mov	r3, r0
 800fd94:	2b64      	cmp	r3, #100	; 0x64
 800fd96:	d903      	bls.n	800fda0 <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 800fd98:	4832      	ldr	r0, [pc, #200]	; (800fe64 <CAN_transmit+0x168>)
 800fd9a:	f012 fde9 	bl	8022970 <puts>
					return;
 800fd9e:	e054      	b.n	800fe4a <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 800fda0:	4b2d      	ldr	r3, [pc, #180]	; (800fe58 <CAN_transmit+0x15c>)
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4619      	mov	r1, r3
 800fda6:	482d      	ldr	r0, [pc, #180]	; (800fe5c <CAN_transmit+0x160>)
 800fda8:	f006 f8b2 	bl	8015f10 <HAL_CAN_IsTxMessagePending>
 800fdac:	4603      	mov	r3, r0
 800fdae:	75bb      	strb	r3, [r7, #22]
 800fdb0:	7dbb      	ldrb	r3, [r7, #22]
 800fdb2:	2b00      	cmp	r3, #0
 800fdb4:	d1ea      	bne.n	800fd8c <CAN_transmit+0x90>
				}
			}

			len=0;
 800fdb6:	2300      	movs	r3, #0
 800fdb8:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d1c5      	bne.n	800fd4c <CAN_transmit+0x50>
 800fdc0:	e043      	b.n	800fe4a <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800fdc2:	4929      	ldr	r1, [pc, #164]	; (800fe68 <CAN_transmit+0x16c>)
 800fdc4:	4829      	ldr	r0, [pc, #164]	; (800fe6c <CAN_transmit+0x170>)
 800fdc6:	f7f0 fa3b 	bl	8000240 <strcmp>
 800fdca:	4603      	mov	r3, r0
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d03b      	beq.n	800fe48 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 800fdd0:	e036      	b.n	800fe40 <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 800fdd2:	4b27      	ldr	r3, [pc, #156]	; (800fe70 <CAN_transmit+0x174>)
 800fdd4:	2200      	movs	r2, #0
 800fdd6:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 800fdd8:	68fb      	ldr	r3, [r7, #12]
 800fdda:	4a25      	ldr	r2, [pc, #148]	; (800fe70 <CAN_transmit+0x174>)
 800fddc:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 800fdde:	4b24      	ldr	r3, [pc, #144]	; (800fe70 <CAN_transmit+0x174>)
 800fde0:	2200      	movs	r2, #0
 800fde2:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	4a22      	ldr	r2, [pc, #136]	; (800fe70 <CAN_transmit+0x174>)
 800fde8:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800fdea:	2300      	movs	r3, #0
 800fdec:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 800fdee:	4b21      	ldr	r3, [pc, #132]	; (800fe74 <CAN_transmit+0x178>)
 800fdf0:	4a17      	ldr	r2, [pc, #92]	; (800fe50 <CAN_transmit+0x154>)
 800fdf2:	491f      	ldr	r1, [pc, #124]	; (800fe70 <CAN_transmit+0x174>)
 800fdf4:	4820      	ldr	r0, [pc, #128]	; (800fe78 <CAN_transmit+0x17c>)
 800fdf6:	f005 ffbb 	bl	8015d70 <HAL_CAN_AddTxMessage>
 800fdfa:	4603      	mov	r3, r0
 800fdfc:	461a      	mov	r2, r3
 800fdfe:	4b18      	ldr	r3, [pc, #96]	; (800fe60 <CAN_transmit+0x164>)
 800fe00:	701a      	strb	r2, [r3, #0]
 800fe02:	4b17      	ldr	r3, [pc, #92]	; (800fe60 <CAN_transmit+0x164>)
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	2b00      	cmp	r3, #0
 800fe08:	d00d      	beq.n	800fe26 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 800fe0a:	481c      	ldr	r0, [pc, #112]	; (800fe7c <CAN_transmit+0x180>)
 800fe0c:	f012 fdb0 	bl	8022970 <puts>
				return;
 800fe10:	e01b      	b.n	800fe4a <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800fe12:	69b8      	ldr	r0, [r7, #24]
 800fe14:	f7fe ff78 	bl	800ed08 <HAL_Elaps_Ticks>
 800fe18:	4603      	mov	r3, r0
 800fe1a:	2b64      	cmp	r3, #100	; 0x64
 800fe1c:	d903      	bls.n	800fe26 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 800fe1e:	4817      	ldr	r0, [pc, #92]	; (800fe7c <CAN_transmit+0x180>)
 800fe20:	f012 fda6 	bl	8022970 <puts>
					return;
 800fe24:	e011      	b.n	800fe4a <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 800fe26:	4b13      	ldr	r3, [pc, #76]	; (800fe74 <CAN_transmit+0x178>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	4812      	ldr	r0, [pc, #72]	; (800fe78 <CAN_transmit+0x17c>)
 800fe2e:	f006 f86f 	bl	8015f10 <HAL_CAN_IsTxMessagePending>
 800fe32:	4603      	mov	r3, r0
 800fe34:	75fb      	strb	r3, [r7, #23]
 800fe36:	7dfb      	ldrb	r3, [r7, #23]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d1ea      	bne.n	800fe12 <CAN_transmit+0x116>
				}
			}
			len=0;
 800fe3c:	2300      	movs	r3, #0
 800fe3e:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d1c5      	bne.n	800fdd2 <CAN_transmit+0xd6>
 800fe46:	e000      	b.n	800fe4a <CAN_transmit+0x14e>
			return;
 800fe48:	bf00      	nop
		}
	}
}
 800fe4a:	3720      	adds	r7, #32
 800fe4c:	46bd      	mov	sp, r7
 800fe4e:	bd80      	pop	{r7, pc}
 800fe50:	20009ebc 	.word	0x20009ebc
 800fe54:	20009e3c 	.word	0x20009e3c
 800fe58:	20009e6c 	.word	0x20009e6c
 800fe5c:	20009ec8 	.word	0x20009ec8
 800fe60:	20009ec4 	.word	0x20009ec4
 800fe64:	08026c78 	.word	0x08026c78
 800fe68:	08026c88 	.word	0x08026c88
 800fe6c:	20000305 	.word	0x20000305
 800fe70:	20009e54 	.word	0x20009e54
 800fe74:	20009e70 	.word	0x20009e70
 800fe78:	20009f2c 	.word	0x20009f2c
 800fe7c:	08026c94 	.word	0x08026c94

0800fe80 <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fe80:	b580      	push	{r7, lr}
 800fe82:	b082      	sub	sp, #8
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	4a3e      	ldr	r2, [pc, #248]	; (800ff88 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800fe8e:	4293      	cmp	r3, r2
 800fe90:	d175      	bne.n	800ff7e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800fe92:	4b3e      	ldr	r3, [pc, #248]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fe94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe98:	881b      	ldrh	r3, [r3, #0]
 800fe9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fe9e:	d104      	bne.n	800feaa <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800fea0:	4b3a      	ldr	r3, [pc, #232]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fea2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fea6:	2200      	movs	r2, #0
 800fea8:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 800feaa:	4b39      	ldr	r3, [pc, #228]	; (800ff90 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800feac:	4a39      	ldr	r2, [pc, #228]	; (800ff94 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800feae:	2100      	movs	r1, #0
 800feb0:	4839      	ldr	r0, [pc, #228]	; (800ff98 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800feb2:	f006 f851 	bl	8015f58 <HAL_CAN_GetRxMessage>
 800feb6:	4603      	mov	r3, r0
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d001      	beq.n	800fec0 <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 800febc:	f003 ff26 	bl	8013d0c <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 800fec0:	4b32      	ldr	r3, [pc, #200]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fec2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fec6:	881b      	ldrh	r3, [r3, #0]
 800fec8:	4a30      	ldr	r2, [pc, #192]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800feca:	011b      	lsls	r3, r3, #4
 800fecc:	4413      	add	r3, r2
 800fece:	330f      	adds	r3, #15
 800fed0:	2203      	movs	r2, #3
 800fed2:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 800fed4:	4b2f      	ldr	r3, [pc, #188]	; (800ff94 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fed6:	691a      	ldr	r2, [r3, #16]
 800fed8:	4b2c      	ldr	r3, [pc, #176]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800feda:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fede:	881b      	ldrh	r3, [r3, #0]
 800fee0:	b2d1      	uxtb	r1, r2
 800fee2:	4a2a      	ldr	r2, [pc, #168]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fee4:	011b      	lsls	r3, r3, #4
 800fee6:	4413      	add	r3, r2
 800fee8:	330c      	adds	r3, #12
 800feea:	460a      	mov	r2, r1
 800feec:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 800feee:	4b29      	ldr	r3, [pc, #164]	; (800ff94 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800fef0:	689a      	ldr	r2, [r3, #8]
 800fef2:	4b26      	ldr	r3, [pc, #152]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fef4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fef8:	881b      	ldrh	r3, [r3, #0]
 800fefa:	b2d1      	uxtb	r1, r2
 800fefc:	4a23      	ldr	r2, [pc, #140]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800fefe:	011b      	lsls	r3, r3, #4
 800ff00:	4413      	add	r3, r2
 800ff02:	330d      	adds	r3, #13
 800ff04:	460a      	mov	r2, r1
 800ff06:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 800ff08:	4b22      	ldr	r3, [pc, #136]	; (800ff94 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800ff0a:	68da      	ldr	r2, [r3, #12]
 800ff0c:	4b1f      	ldr	r3, [pc, #124]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff0e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff12:	881b      	ldrh	r3, [r3, #0]
 800ff14:	b2d1      	uxtb	r1, r2
 800ff16:	4a1d      	ldr	r2, [pc, #116]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff18:	011b      	lsls	r3, r3, #4
 800ff1a:	4413      	add	r3, r2
 800ff1c:	330e      	adds	r3, #14
 800ff1e:	460a      	mov	r2, r1
 800ff20:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 800ff22:	4b1a      	ldr	r3, [pc, #104]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff24:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff28:	881b      	ldrh	r3, [r3, #0]
 800ff2a:	4618      	mov	r0, r3
 800ff2c:	4b19      	ldr	r3, [pc, #100]	; (800ff94 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800ff2e:	681a      	ldr	r2, [r3, #0]
 800ff30:	4916      	ldr	r1, [pc, #88]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff32:	0103      	lsls	r3, r0, #4
 800ff34:	440b      	add	r3, r1
 800ff36:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 800ff38:	4b14      	ldr	r3, [pc, #80]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff3e:	881b      	ldrh	r3, [r3, #0]
 800ff40:	4a12      	ldr	r2, [pc, #72]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff42:	011b      	lsls	r3, r3, #4
 800ff44:	4413      	add	r3, r2
 800ff46:	330e      	adds	r3, #14
 800ff48:	781b      	ldrb	r3, [r3, #0]
 800ff4a:	2b00      	cmp	r3, #0
 800ff4c:	d117      	bne.n	800ff7e <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 800ff4e:	4b0f      	ldr	r3, [pc, #60]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff54:	881b      	ldrh	r3, [r3, #0]
 800ff56:	011b      	lsls	r3, r3, #4
 800ff58:	4a0c      	ldr	r2, [pc, #48]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff5a:	4413      	add	r3, r2
 800ff5c:	3304      	adds	r3, #4
 800ff5e:	490c      	ldr	r1, [pc, #48]	; (800ff90 <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800ff60:	461a      	mov	r2, r3
 800ff62:	460b      	mov	r3, r1
 800ff64:	cb03      	ldmia	r3!, {r0, r1}
 800ff66:	6010      	str	r0, [r2, #0]
 800ff68:	6051      	str	r1, [r2, #4]
			canRead.In++;
 800ff6a:	4b08      	ldr	r3, [pc, #32]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff6c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff70:	881b      	ldrh	r3, [r3, #0]
 800ff72:	3301      	adds	r3, #1
 800ff74:	b29a      	uxth	r2, r3
 800ff76:	4b05      	ldr	r3, [pc, #20]	; (800ff8c <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800ff78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff7c:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800ff7e:	bf00      	nop
 800ff80:	3708      	adds	r7, #8
 800ff82:	46bd      	mov	sp, r7
 800ff84:	bd80      	pop	{r7, pc}
 800ff86:	bf00      	nop
 800ff88:	40003400 	.word	0x40003400
 800ff8c:	20005e38 	.word	0x20005e38
 800ff90:	20009eb4 	.word	0x20009eb4
 800ff94:	20009e90 	.word	0x20009e90
 800ff98:	20009f2c 	.word	0x20009f2c

0800ff9c <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800ff9c:	b580      	push	{r7, lr}
 800ff9e:	b082      	sub	sp, #8
 800ffa0:	af00      	add	r7, sp, #0
 800ffa2:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 800ffa4:	4b42      	ldr	r3, [pc, #264]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800ffa6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ffaa:	881b      	ldrh	r3, [r3, #0]
 800ffac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ffb0:	d104      	bne.n	800ffbc <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 800ffb2:	4b3f      	ldr	r3, [pc, #252]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800ffb4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ffb8:	2200      	movs	r2, #0
 800ffba:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 800ffbc:	4b3d      	ldr	r3, [pc, #244]	; (80100b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800ffbe:	4a3e      	ldr	r2, [pc, #248]	; (80100b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800ffc0:	2101      	movs	r1, #1
 800ffc2:	483e      	ldr	r0, [pc, #248]	; (80100bc <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 800ffc4:	f005 ffc8 	bl	8015f58 <HAL_CAN_GetRxMessage>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4b3c      	ldr	r3, [pc, #240]	; (80100c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800ffce:	701a      	strb	r2, [r3, #0]
 800ffd0:	4b3b      	ldr	r3, [pc, #236]	; (80100c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d007      	beq.n	800ffe8 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 800ffd8:	4b39      	ldr	r3, [pc, #228]	; (80100c0 <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800ffda:	781b      	ldrb	r3, [r3, #0]
 800ffdc:	4619      	mov	r1, r3
 800ffde:	4839      	ldr	r0, [pc, #228]	; (80100c4 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800ffe0:	f012 fc2a 	bl	8022838 <iprintf>
		Error_Handler();
 800ffe4:	f003 fe92 	bl	8013d0c <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 800ffe8:	4b31      	ldr	r3, [pc, #196]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800ffea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ffee:	881b      	ldrh	r3, [r3, #0]
 800fff0:	4a2f      	ldr	r2, [pc, #188]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fff2:	011b      	lsls	r3, r3, #4
 800fff4:	4413      	add	r3, r2
 800fff6:	330f      	adds	r3, #15
 800fff8:	2202      	movs	r2, #2
 800fffa:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 800fffc:	4b2e      	ldr	r3, [pc, #184]	; (80100b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fffe:	691a      	ldr	r2, [r3, #16]
 8010000:	4b2b      	ldr	r3, [pc, #172]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010002:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010006:	881b      	ldrh	r3, [r3, #0]
 8010008:	b2d1      	uxtb	r1, r2
 801000a:	4a29      	ldr	r2, [pc, #164]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801000c:	011b      	lsls	r3, r3, #4
 801000e:	4413      	add	r3, r2
 8010010:	330c      	adds	r3, #12
 8010012:	460a      	mov	r2, r1
 8010014:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 8010016:	4b28      	ldr	r3, [pc, #160]	; (80100b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010018:	689a      	ldr	r2, [r3, #8]
 801001a:	4b25      	ldr	r3, [pc, #148]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801001c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010020:	881b      	ldrh	r3, [r3, #0]
 8010022:	b2d1      	uxtb	r1, r2
 8010024:	4a22      	ldr	r2, [pc, #136]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010026:	011b      	lsls	r3, r3, #4
 8010028:	4413      	add	r3, r2
 801002a:	330d      	adds	r3, #13
 801002c:	460a      	mov	r2, r1
 801002e:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 8010030:	4b21      	ldr	r3, [pc, #132]	; (80100b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010032:	68da      	ldr	r2, [r3, #12]
 8010034:	4b1e      	ldr	r3, [pc, #120]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010036:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801003a:	881b      	ldrh	r3, [r3, #0]
 801003c:	b2d1      	uxtb	r1, r2
 801003e:	4a1c      	ldr	r2, [pc, #112]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010040:	011b      	lsls	r3, r3, #4
 8010042:	4413      	add	r3, r2
 8010044:	330e      	adds	r3, #14
 8010046:	460a      	mov	r2, r1
 8010048:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 801004a:	4b19      	ldr	r3, [pc, #100]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801004c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010050:	881b      	ldrh	r3, [r3, #0]
 8010052:	4618      	mov	r0, r3
 8010054:	4b18      	ldr	r3, [pc, #96]	; (80100b8 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	4915      	ldr	r1, [pc, #84]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801005a:	0103      	lsls	r3, r0, #4
 801005c:	440b      	add	r3, r1
 801005e:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 8010060:	4b13      	ldr	r3, [pc, #76]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010062:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010066:	881b      	ldrh	r3, [r3, #0]
 8010068:	4a11      	ldr	r2, [pc, #68]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 801006a:	011b      	lsls	r3, r3, #4
 801006c:	4413      	add	r3, r2
 801006e:	330e      	adds	r3, #14
 8010070:	781b      	ldrb	r3, [r3, #0]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d117      	bne.n	80100a6 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 8010076:	4b0e      	ldr	r3, [pc, #56]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010078:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801007c:	881b      	ldrh	r3, [r3, #0]
 801007e:	011b      	lsls	r3, r3, #4
 8010080:	4a0b      	ldr	r2, [pc, #44]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010082:	4413      	add	r3, r2
 8010084:	3304      	adds	r3, #4
 8010086:	490b      	ldr	r1, [pc, #44]	; (80100b4 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 8010088:	461a      	mov	r2, r3
 801008a:	460b      	mov	r3, r1
 801008c:	cb03      	ldmia	r3!, {r0, r1}
 801008e:	6010      	str	r0, [r2, #0]
 8010090:	6051      	str	r1, [r2, #4]
		canRead.In++;
 8010092:	4b07      	ldr	r3, [pc, #28]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 8010094:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010098:	881b      	ldrh	r3, [r3, #0]
 801009a:	3301      	adds	r3, #1
 801009c:	b29a      	uxth	r2, r3
 801009e:	4b04      	ldr	r3, [pc, #16]	; (80100b0 <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 80100a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100a4:	801a      	strh	r2, [r3, #0]
	}
}
 80100a6:	bf00      	nop
 80100a8:	3708      	adds	r7, #8
 80100aa:	46bd      	mov	sp, r7
 80100ac:	bd80      	pop	{r7, pc}
 80100ae:	bf00      	nop
 80100b0:	20005e38 	.word	0x20005e38
 80100b4:	20009eac 	.word	0x20009eac
 80100b8:	20009e74 	.word	0x20009e74
 80100bc:	20009ec8 	.word	0x20009ec8
 80100c0:	20009ec4 	.word	0x20009ec4
 80100c4:	08026ca4 	.word	0x08026ca4

080100c8 <canDataReady>:


unsigned char canDataReady()
{
 80100c8:	b580      	push	{r7, lr}
 80100ca:	b082      	sub	sp, #8
 80100cc:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 80100ce:	2300      	movs	r3, #0
 80100d0:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 80100d2:	4b27      	ldr	r3, [pc, #156]	; (8010170 <canDataReady+0xa8>)
 80100d4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100d8:	881a      	ldrh	r2, [r3, #0]
 80100da:	4b25      	ldr	r3, [pc, #148]	; (8010170 <canDataReady+0xa8>)
 80100dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100e0:	885b      	ldrh	r3, [r3, #2]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d101      	bne.n	80100ea <canDataReady+0x22>
	{
		return 0;
 80100e6:	2300      	movs	r3, #0
 80100e8:	e03e      	b.n	8010168 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 80100ea:	4b21      	ldr	r3, [pc, #132]	; (8010170 <canDataReady+0xa8>)
 80100ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100f0:	885b      	ldrh	r3, [r3, #2]
 80100f2:	3301      	adds	r3, #1
 80100f4:	607b      	str	r3, [r7, #4]
 80100f6:	e02e      	b.n	8010156 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 80100f8:	4b1d      	ldr	r3, [pc, #116]	; (8010170 <canDataReady+0xa8>)
 80100fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100fe:	885b      	ldrh	r3, [r3, #2]
 8010100:	011b      	lsls	r3, r3, #4
 8010102:	4a1b      	ldr	r2, [pc, #108]	; (8010170 <canDataReady+0xa8>)
 8010104:	1898      	adds	r0, r3, r2
 8010106:	4b1a      	ldr	r3, [pc, #104]	; (8010170 <canDataReady+0xa8>)
 8010108:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801010c:	881b      	ldrh	r3, [r3, #0]
 801010e:	011b      	lsls	r3, r3, #4
 8010110:	4a17      	ldr	r2, [pc, #92]	; (8010170 <canDataReady+0xa8>)
 8010112:	4413      	add	r3, r2
 8010114:	2210      	movs	r2, #16
 8010116:	4619      	mov	r1, r3
 8010118:	f012 fa6e 	bl	80225f8 <memcmp>
 801011c:	4603      	mov	r3, r0
 801011e:	2b00      	cmp	r3, #0
 8010120:	d116      	bne.n	8010150 <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8010122:	4b13      	ldr	r3, [pc, #76]	; (8010170 <canDataReady+0xa8>)
 8010124:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010128:	885b      	ldrh	r3, [r3, #2]
 801012a:	011b      	lsls	r3, r3, #4
 801012c:	4a10      	ldr	r2, [pc, #64]	; (8010170 <canDataReady+0xa8>)
 801012e:	4413      	add	r3, r2
 8010130:	2210      	movs	r2, #16
 8010132:	2100      	movs	r1, #0
 8010134:	4618      	mov	r0, r3
 8010136:	f012 fa97 	bl	8022668 <memset>
			canRead.Out++;
 801013a:	4b0d      	ldr	r3, [pc, #52]	; (8010170 <canDataReady+0xa8>)
 801013c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010140:	885b      	ldrh	r3, [r3, #2]
 8010142:	3301      	adds	r3, #1
 8010144:	b29a      	uxth	r2, r3
 8010146:	4b0a      	ldr	r3, [pc, #40]	; (8010170 <canDataReady+0xa8>)
 8010148:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801014c:	805a      	strh	r2, [r3, #2]
			break;
 801014e:	e00a      	b.n	8010166 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 8010150:	687b      	ldr	r3, [r7, #4]
 8010152:	3301      	adds	r3, #1
 8010154:	607b      	str	r3, [r7, #4]
 8010156:	4b06      	ldr	r3, [pc, #24]	; (8010170 <canDataReady+0xa8>)
 8010158:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801015c:	881b      	ldrh	r3, [r3, #0]
 801015e:	461a      	mov	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	4293      	cmp	r3, r2
 8010164:	d3c8      	bcc.n	80100f8 <canDataReady+0x30>
		}
	}
	return 1;
 8010166:	2301      	movs	r3, #1
}
 8010168:	4618      	mov	r0, r3
 801016a:	3708      	adds	r7, #8
 801016c:	46bd      	mov	sp, r7
 801016e:	bd80      	pop	{r7, pc}
 8010170:	20005e38 	.word	0x20005e38

08010174 <readCanToStructs>:

void readCanToStructs(void)
{
 8010174:	b580      	push	{r7, lr}
 8010176:	b08e      	sub	sp, #56	; 0x38
 8010178:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 801017a:	2300      	movs	r3, #0
 801017c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010180:	2300      	movs	r3, #0
 8010182:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8010186:	2300      	movs	r3, #0
 8010188:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 801018c:	2300      	movs	r3, #0
 801018e:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 8010190:	4bc0      	ldr	r3, [pc, #768]	; (8010494 <readCanToStructs+0x320>)
 8010192:	781b      	ldrb	r3, [r3, #0]
 8010194:	2b03      	cmp	r3, #3
 8010196:	f002 8640 	beq.w	8012e1a <readCanToStructs+0x2ca6>
 801019a:	2b03      	cmp	r3, #3
 801019c:	f302 8644 	bgt.w	8012e28 <readCanToStructs+0x2cb4>
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d004      	beq.n	80101ae <readCanToStructs+0x3a>
 80101a4:	2b02      	cmp	r3, #2
 80101a6:	f001 87f4 	beq.w	8012192 <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 80101aa:	f002 be3d 	b.w	8012e28 <readCanToStructs+0x2cb4>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80101ae:	4bba      	ldr	r3, [pc, #744]	; (8010498 <readCanToStructs+0x324>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	09db      	lsrs	r3, r3, #7
 80101b4:	f003 0301 	and.w	r3, r3, #1
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	f042 8637 	bne.w	8012e2c <readCanToStructs+0x2cb8>
		while(canDataReady())
 80101be:	f001 b92f 	b.w	8011420 <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80101c2:	4bb6      	ldr	r3, [pc, #728]	; (801049c <readCanToStructs+0x328>)
 80101c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101c8:	885b      	ldrh	r3, [r3, #2]
 80101ca:	4ab4      	ldr	r2, [pc, #720]	; (801049c <readCanToStructs+0x328>)
 80101cc:	011b      	lsls	r3, r3, #4
 80101ce:	4413      	add	r3, r2
 80101d0:	330f      	adds	r3, #15
 80101d2:	781b      	ldrb	r3, [r3, #0]
 80101d4:	3b01      	subs	r3, #1
 80101d6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80101da:	4bb0      	ldr	r3, [pc, #704]	; (801049c <readCanToStructs+0x328>)
 80101dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80101e0:	885b      	ldrh	r3, [r3, #2]
 80101e2:	4aae      	ldr	r2, [pc, #696]	; (801049c <readCanToStructs+0x328>)
 80101e4:	011b      	lsls	r3, r3, #4
 80101e6:	4413      	add	r3, r2
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80101ee:	f201 80f4 	bhi.w	80113da <readCanToStructs+0x1266>
 80101f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101f6:	d80a      	bhi.n	801020e <readCanToStructs+0x9a>
 80101f8:	f240 1203 	movw	r2, #259	; 0x103
 80101fc:	4293      	cmp	r3, r2
 80101fe:	d01f      	beq.n	8010240 <readCanToStructs+0xcc>
 8010200:	f240 1209 	movw	r2, #265	; 0x109
 8010204:	4293      	cmp	r3, r2
 8010206:	f000 80f1 	beq.w	80103ec <readCanToStructs+0x278>
				break;
 801020a:	f001 b8e6 	b.w	80113da <readCanToStructs+0x1266>
 801020e:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010212:	2b07      	cmp	r3, #7
 8010214:	f201 80e1 	bhi.w	80113da <readCanToStructs+0x1266>
 8010218:	a201      	add	r2, pc, #4	; (adr r2, 8010220 <readCanToStructs+0xac>)
 801021a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801021e:	bf00      	nop
 8010220:	080105c1 	.word	0x080105c1
 8010224:	080107c9 	.word	0x080107c9
 8010228:	080109a1 	.word	0x080109a1
 801022c:	08010bbb 	.word	0x08010bbb
 8010230:	08010dd1 	.word	0x08010dd1
 8010234:	080113db 	.word	0x080113db
 8010238:	08010f65 	.word	0x08010f65
 801023c:	0801119f 	.word	0x0801119f
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010240:	4b97      	ldr	r3, [pc, #604]	; (80104a0 <readCanToStructs+0x32c>)
 8010242:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010244:	4b95      	ldr	r3, [pc, #596]	; (801049c <readCanToStructs+0x328>)
 8010246:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801024a:	885b      	ldrh	r3, [r3, #2]
 801024c:	4a93      	ldr	r2, [pc, #588]	; (801049c <readCanToStructs+0x328>)
 801024e:	011b      	lsls	r3, r3, #4
 8010250:	4413      	add	r3, r2
 8010252:	3304      	adds	r3, #4
 8010254:	781b      	ldrb	r3, [r3, #0]
 8010256:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801025a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801025e:	2b00      	cmp	r3, #0
 8010260:	d110      	bne.n	8010284 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010262:	2206      	movs	r2, #6
 8010264:	2100      	movs	r1, #0
 8010266:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010268:	f012 f9fe 	bl	8022668 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801026c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010270:	4a8c      	ldr	r2, [pc, #560]	; (80104a4 <readCanToStructs+0x330>)
 8010272:	f240 4112 	movw	r1, #1042	; 0x412
 8010276:	fb01 f303 	mul.w	r3, r1, r3
 801027a:	4413      	add	r3, r2
 801027c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010280:	2200      	movs	r2, #0
 8010282:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8010284:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010288:	4a86      	ldr	r2, [pc, #536]	; (80104a4 <readCanToStructs+0x330>)
 801028a:	f240 4112 	movw	r1, #1042	; 0x412
 801028e:	fb01 f303 	mul.w	r3, r1, r3
 8010292:	4413      	add	r3, r2
 8010294:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801029e:	429a      	cmp	r2, r3
 80102a0:	d015      	beq.n	80102ce <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 80102a2:	4881      	ldr	r0, [pc, #516]	; (80104a8 <readCanToStructs+0x334>)
 80102a4:	f012 fb64 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80102a8:	2206      	movs	r2, #6
 80102aa:	2100      	movs	r1, #0
 80102ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102ae:	f012 f9db 	bl	8022668 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80102b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102b6:	4a7b      	ldr	r2, [pc, #492]	; (80104a4 <readCanToStructs+0x330>)
 80102b8:	f240 4112 	movw	r1, #1042	; 0x412
 80102bc:	fb01 f303 	mul.w	r3, r1, r3
 80102c0:	4413      	add	r3, r2
 80102c2:	f203 2307 	addw	r3, r3, #519	; 0x207
 80102c6:	2200      	movs	r2, #0
 80102c8:	701a      	strb	r2, [r3, #0]
					break;
 80102ca:	f001 b887 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80102ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80102d2:	4613      	mov	r3, r2
 80102d4:	00db      	lsls	r3, r3, #3
 80102d6:	1a9b      	subs	r3, r3, r2
 80102d8:	461a      	mov	r2, r3
 80102da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102dc:	4413      	add	r3, r2
 80102de:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80102e0:	2301      	movs	r3, #1
 80102e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102e6:	e016      	b.n	8010316 <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80102e8:	4b6c      	ldr	r3, [pc, #432]	; (801049c <readCanToStructs+0x328>)
 80102ea:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102ee:	885b      	ldrh	r3, [r3, #2]
 80102f0:	461a      	mov	r2, r3
 80102f2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102f6:	4969      	ldr	r1, [pc, #420]	; (801049c <readCanToStructs+0x328>)
 80102f8:	0112      	lsls	r2, r2, #4
 80102fa:	440a      	add	r2, r1
 80102fc:	4413      	add	r3, r2
 80102fe:	3304      	adds	r3, #4
 8010300:	781a      	ldrb	r2, [r3, #0]
 8010302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010304:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010308:	3301      	adds	r3, #1
 801030a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801030c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010310:	3301      	adds	r3, #1
 8010312:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010316:	4b61      	ldr	r3, [pc, #388]	; (801049c <readCanToStructs+0x328>)
 8010318:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801031c:	885b      	ldrh	r3, [r3, #2]
 801031e:	4a5f      	ldr	r2, [pc, #380]	; (801049c <readCanToStructs+0x328>)
 8010320:	011b      	lsls	r3, r3, #4
 8010322:	4413      	add	r3, r2
 8010324:	330c      	adds	r3, #12
 8010326:	781b      	ldrb	r3, [r3, #0]
 8010328:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801032c:	429a      	cmp	r2, r3
 801032e:	d3db      	bcc.n	80102e8 <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010330:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010334:	4a5b      	ldr	r2, [pc, #364]	; (80104a4 <readCanToStructs+0x330>)
 8010336:	f240 4112 	movw	r1, #1042	; 0x412
 801033a:	fb01 f303 	mul.w	r3, r1, r3
 801033e:	4413      	add	r3, r2
 8010340:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010344:	781b      	ldrb	r3, [r3, #0]
 8010346:	461a      	mov	r2, r3
 8010348:	4613      	mov	r3, r2
 801034a:	00db      	lsls	r3, r3, #3
 801034c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801034e:	4b53      	ldr	r3, [pc, #332]	; (801049c <readCanToStructs+0x328>)
 8010350:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010354:	885b      	ldrh	r3, [r3, #2]
 8010356:	4951      	ldr	r1, [pc, #324]	; (801049c <readCanToStructs+0x328>)
 8010358:	011b      	lsls	r3, r3, #4
 801035a:	440b      	add	r3, r1
 801035c:	330c      	adds	r3, #12
 801035e:	781b      	ldrb	r3, [r3, #0]
 8010360:	3b01      	subs	r3, #1
 8010362:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8010364:	2b05      	cmp	r3, #5
 8010366:	d91c      	bls.n	80103a2 <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8010368:	4b50      	ldr	r3, [pc, #320]	; (80104ac <readCanToStructs+0x338>)
 801036a:	4a4d      	ldr	r2, [pc, #308]	; (80104a0 <readCanToStructs+0x32c>)
 801036c:	6811      	ldr	r1, [r2, #0]
 801036e:	6019      	str	r1, [r3, #0]
 8010370:	8892      	ldrh	r2, [r2, #4]
 8010372:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010374:	4b4e      	ldr	r3, [pc, #312]	; (80104b0 <readCanToStructs+0x33c>)
 8010376:	781b      	ldrb	r3, [r3, #0]
 8010378:	2b01      	cmp	r3, #1
 801037a:	d102      	bne.n	8010382 <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 801037c:	484d      	ldr	r0, [pc, #308]	; (80104b4 <readCanToStructs+0x340>)
 801037e:	f012 faf7 	bl	8022970 <puts>
					Write_RTC();
 8010382:	f7fa ffa5 	bl	800b2d0 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010386:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801038a:	4a46      	ldr	r2, [pc, #280]	; (80104a4 <readCanToStructs+0x330>)
 801038c:	f240 4112 	movw	r1, #1042	; 0x412
 8010390:	fb01 f303 	mul.w	r3, r1, r3
 8010394:	4413      	add	r3, r2
 8010396:	f203 2307 	addw	r3, r3, #519	; 0x207
 801039a:	2200      	movs	r2, #0
 801039c:	701a      	strb	r2, [r3, #0]
				break;
 801039e:	f001 b81d 	b.w	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80103a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103a6:	4a3f      	ldr	r2, [pc, #252]	; (80104a4 <readCanToStructs+0x330>)
 80103a8:	f240 4112 	movw	r1, #1042	; 0x412
 80103ac:	fb01 f303 	mul.w	r3, r1, r3
 80103b0:	4413      	add	r3, r2
 80103b2:	f203 2306 	addw	r3, r3, #518	; 0x206
 80103b6:	2201      	movs	r2, #1
 80103b8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 80103ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103be:	4939      	ldr	r1, [pc, #228]	; (80104a4 <readCanToStructs+0x330>)
 80103c0:	f240 4212 	movw	r2, #1042	; 0x412
 80103c4:	fb03 f202 	mul.w	r2, r3, r2
 80103c8:	440a      	add	r2, r1
 80103ca:	f202 2207 	addw	r2, r2, #519	; 0x207
 80103ce:	7812      	ldrb	r2, [r2, #0]
 80103d0:	3201      	adds	r2, #1
 80103d2:	b2d0      	uxtb	r0, r2
 80103d4:	4a33      	ldr	r2, [pc, #204]	; (80104a4 <readCanToStructs+0x330>)
 80103d6:	f240 4112 	movw	r1, #1042	; 0x412
 80103da:	fb01 f303 	mul.w	r3, r1, r3
 80103de:	4413      	add	r3, r2
 80103e0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80103e4:	4602      	mov	r2, r0
 80103e6:	701a      	strb	r2, [r3, #0]
				break;
 80103e8:	f000 bff8 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80103ec:	4b2c      	ldr	r3, [pc, #176]	; (80104a0 <readCanToStructs+0x32c>)
 80103ee:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80103f0:	4b2a      	ldr	r3, [pc, #168]	; (801049c <readCanToStructs+0x328>)
 80103f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80103f6:	885b      	ldrh	r3, [r3, #2]
 80103f8:	4a28      	ldr	r2, [pc, #160]	; (801049c <readCanToStructs+0x328>)
 80103fa:	011b      	lsls	r3, r3, #4
 80103fc:	4413      	add	r3, r2
 80103fe:	3304      	adds	r3, #4
 8010400:	781b      	ldrb	r3, [r3, #0]
 8010402:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010406:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801040a:	2b00      	cmp	r3, #0
 801040c:	d110      	bne.n	8010430 <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801040e:	2206      	movs	r2, #6
 8010410:	2100      	movs	r1, #0
 8010412:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010414:	f012 f928 	bl	8022668 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8010418:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801041c:	4a21      	ldr	r2, [pc, #132]	; (80104a4 <readCanToStructs+0x330>)
 801041e:	f240 4112 	movw	r1, #1042	; 0x412
 8010422:	fb01 f303 	mul.w	r3, r1, r3
 8010426:	4413      	add	r3, r2
 8010428:	f203 2313 	addw	r3, r3, #531	; 0x213
 801042c:	2200      	movs	r2, #0
 801042e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8010430:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010434:	4a1b      	ldr	r2, [pc, #108]	; (80104a4 <readCanToStructs+0x330>)
 8010436:	f240 4112 	movw	r1, #1042	; 0x412
 801043a:	fb01 f303 	mul.w	r3, r1, r3
 801043e:	4413      	add	r3, r2
 8010440:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801044a:	429a      	cmp	r2, r3
 801044c:	d015      	beq.n	801047a <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 801044e:	481a      	ldr	r0, [pc, #104]	; (80104b8 <readCanToStructs+0x344>)
 8010450:	f012 fa8e 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010454:	2206      	movs	r2, #6
 8010456:	2100      	movs	r1, #0
 8010458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801045a:	f012 f905 	bl	8022668 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801045e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010462:	4a10      	ldr	r2, [pc, #64]	; (80104a4 <readCanToStructs+0x330>)
 8010464:	f240 4112 	movw	r1, #1042	; 0x412
 8010468:	fb01 f303 	mul.w	r3, r1, r3
 801046c:	4413      	add	r3, r2
 801046e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010472:	2200      	movs	r2, #0
 8010474:	701a      	strb	r2, [r3, #0]
					break;
 8010476:	f000 bfb1 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801047a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801047e:	4613      	mov	r3, r2
 8010480:	00db      	lsls	r3, r3, #3
 8010482:	1a9b      	subs	r3, r3, r2
 8010484:	461a      	mov	r2, r3
 8010486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010488:	4413      	add	r3, r2
 801048a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801048c:	2301      	movs	r3, #1
 801048e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010492:	e02a      	b.n	80104ea <readCanToStructs+0x376>
 8010494:	20000304 	.word	0x20000304
 8010498:	20001a1c 	.word	0x20001a1c
 801049c:	20005e38 	.word	0x20005e38
 80104a0:	20002bbc 	.word	0x20002bbc
 80104a4:	20005614 	.word	0x20005614
 80104a8:	08026ccc 	.word	0x08026ccc
 80104ac:	20002bb4 	.word	0x20002bb4
 80104b0:	20000645 	.word	0x20000645
 80104b4:	08026ce8 	.word	0x08026ce8
 80104b8:	08026cfc 	.word	0x08026cfc
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80104bc:	4bb6      	ldr	r3, [pc, #728]	; (8010798 <readCanToStructs+0x624>)
 80104be:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104c2:	885b      	ldrh	r3, [r3, #2]
 80104c4:	461a      	mov	r2, r3
 80104c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104ca:	49b3      	ldr	r1, [pc, #716]	; (8010798 <readCanToStructs+0x624>)
 80104cc:	0112      	lsls	r2, r2, #4
 80104ce:	440a      	add	r2, r1
 80104d0:	4413      	add	r3, r2
 80104d2:	3304      	adds	r3, #4
 80104d4:	781a      	ldrb	r2, [r3, #0]
 80104d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104d8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80104da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104dc:	3301      	adds	r3, #1
 80104de:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80104e0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104e4:	3301      	adds	r3, #1
 80104e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104ea:	4bab      	ldr	r3, [pc, #684]	; (8010798 <readCanToStructs+0x624>)
 80104ec:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104f0:	885b      	ldrh	r3, [r3, #2]
 80104f2:	4aa9      	ldr	r2, [pc, #676]	; (8010798 <readCanToStructs+0x624>)
 80104f4:	011b      	lsls	r3, r3, #4
 80104f6:	4413      	add	r3, r2
 80104f8:	330c      	adds	r3, #12
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010500:	429a      	cmp	r2, r3
 8010502:	d3db      	bcc.n	80104bc <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010504:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010508:	4aa4      	ldr	r2, [pc, #656]	; (801079c <readCanToStructs+0x628>)
 801050a:	f240 4112 	movw	r1, #1042	; 0x412
 801050e:	fb01 f303 	mul.w	r3, r1, r3
 8010512:	4413      	add	r3, r2
 8010514:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010518:	781b      	ldrb	r3, [r3, #0]
 801051a:	461a      	mov	r2, r3
 801051c:	4613      	mov	r3, r2
 801051e:	00db      	lsls	r3, r3, #3
 8010520:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8010522:	4b9d      	ldr	r3, [pc, #628]	; (8010798 <readCanToStructs+0x624>)
 8010524:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010528:	885b      	ldrh	r3, [r3, #2]
 801052a:	499b      	ldr	r1, [pc, #620]	; (8010798 <readCanToStructs+0x624>)
 801052c:	011b      	lsls	r3, r3, #4
 801052e:	440b      	add	r3, r1
 8010530:	330c      	adds	r3, #12
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	3b01      	subs	r3, #1
 8010536:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8010538:	2b05      	cmp	r3, #5
 801053a:	d91c      	bls.n	8010576 <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 801053c:	4b98      	ldr	r3, [pc, #608]	; (80107a0 <readCanToStructs+0x62c>)
 801053e:	4a99      	ldr	r2, [pc, #612]	; (80107a4 <readCanToStructs+0x630>)
 8010540:	6811      	ldr	r1, [r2, #0]
 8010542:	6019      	str	r1, [r3, #0]
 8010544:	8892      	ldrh	r2, [r2, #4]
 8010546:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8010548:	4b97      	ldr	r3, [pc, #604]	; (80107a8 <readCanToStructs+0x634>)
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	2b01      	cmp	r3, #1
 801054e:	d102      	bne.n	8010556 <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 8010550:	4896      	ldr	r0, [pc, #600]	; (80107ac <readCanToStructs+0x638>)
 8010552:	f012 fa0d 	bl	8022970 <puts>
					Write_RTC();
 8010556:	f7fa febb 	bl	800b2d0 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801055a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801055e:	4a8f      	ldr	r2, [pc, #572]	; (801079c <readCanToStructs+0x628>)
 8010560:	f240 4112 	movw	r1, #1042	; 0x412
 8010564:	fb01 f303 	mul.w	r3, r1, r3
 8010568:	4413      	add	r3, r2
 801056a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801056e:	2200      	movs	r2, #0
 8010570:	701a      	strb	r2, [r3, #0]
				break;
 8010572:	f000 bf33 	b.w	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8010576:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801057a:	4a88      	ldr	r2, [pc, #544]	; (801079c <readCanToStructs+0x628>)
 801057c:	f240 4112 	movw	r1, #1042	; 0x412
 8010580:	fb01 f303 	mul.w	r3, r1, r3
 8010584:	4413      	add	r3, r2
 8010586:	f203 2312 	addw	r3, r3, #530	; 0x212
 801058a:	2201      	movs	r2, #1
 801058c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801058e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010592:	4982      	ldr	r1, [pc, #520]	; (801079c <readCanToStructs+0x628>)
 8010594:	f240 4212 	movw	r2, #1042	; 0x412
 8010598:	fb03 f202 	mul.w	r2, r3, r2
 801059c:	440a      	add	r2, r1
 801059e:	f202 2213 	addw	r2, r2, #531	; 0x213
 80105a2:	7812      	ldrb	r2, [r2, #0]
 80105a4:	3201      	adds	r2, #1
 80105a6:	b2d0      	uxtb	r0, r2
 80105a8:	4a7c      	ldr	r2, [pc, #496]	; (801079c <readCanToStructs+0x628>)
 80105aa:	f240 4112 	movw	r1, #1042	; 0x412
 80105ae:	fb01 f303 	mul.w	r3, r1, r3
 80105b2:	4413      	add	r3, r2
 80105b4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80105b8:	4602      	mov	r2, r0
 80105ba:	701a      	strb	r2, [r3, #0]
				break;
 80105bc:	f000 bf0e 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80105c0:	4b7b      	ldr	r3, [pc, #492]	; (80107b0 <readCanToStructs+0x63c>)
 80105c2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80105c4:	4b74      	ldr	r3, [pc, #464]	; (8010798 <readCanToStructs+0x624>)
 80105c6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80105ca:	885b      	ldrh	r3, [r3, #2]
 80105cc:	4a72      	ldr	r2, [pc, #456]	; (8010798 <readCanToStructs+0x624>)
 80105ce:	011b      	lsls	r3, r3, #4
 80105d0:	4413      	add	r3, r2
 80105d2:	3304      	adds	r3, #4
 80105d4:	781b      	ldrb	r3, [r3, #0]
 80105d6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80105da:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d110      	bne.n	8010604 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80105e2:	2218      	movs	r2, #24
 80105e4:	2100      	movs	r1, #0
 80105e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80105e8:	f012 f83e 	bl	8022668 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80105ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105f0:	4a6a      	ldr	r2, [pc, #424]	; (801079c <readCanToStructs+0x628>)
 80105f2:	f240 4112 	movw	r1, #1042	; 0x412
 80105f6:	fb01 f303 	mul.w	r3, r1, r3
 80105fa:	4413      	add	r3, r2
 80105fc:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010600:	2200      	movs	r2, #0
 8010602:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8010604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010608:	4a64      	ldr	r2, [pc, #400]	; (801079c <readCanToStructs+0x628>)
 801060a:	f240 4112 	movw	r1, #1042	; 0x412
 801060e:	fb01 f303 	mul.w	r3, r1, r3
 8010612:	4413      	add	r3, r2
 8010614:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010618:	781b      	ldrb	r3, [r3, #0]
 801061a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801061e:	429a      	cmp	r2, r3
 8010620:	d015      	beq.n	801064e <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8010622:	4864      	ldr	r0, [pc, #400]	; (80107b4 <readCanToStructs+0x640>)
 8010624:	f012 f9a4 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010628:	2218      	movs	r2, #24
 801062a:	2100      	movs	r1, #0
 801062c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801062e:	f012 f81b 	bl	8022668 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010632:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010636:	4a59      	ldr	r2, [pc, #356]	; (801079c <readCanToStructs+0x628>)
 8010638:	f240 4112 	movw	r1, #1042	; 0x412
 801063c:	fb01 f303 	mul.w	r3, r1, r3
 8010640:	4413      	add	r3, r2
 8010642:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010646:	2200      	movs	r2, #0
 8010648:	701a      	strb	r2, [r3, #0]
					break;
 801064a:	f000 bec7 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801064e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010652:	4613      	mov	r3, r2
 8010654:	00db      	lsls	r3, r3, #3
 8010656:	1a9b      	subs	r3, r3, r2
 8010658:	461a      	mov	r2, r3
 801065a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801065c:	4413      	add	r3, r2
 801065e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010660:	2301      	movs	r3, #1
 8010662:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010666:	e016      	b.n	8010696 <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010668:	4b4b      	ldr	r3, [pc, #300]	; (8010798 <readCanToStructs+0x624>)
 801066a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801066e:	885b      	ldrh	r3, [r3, #2]
 8010670:	461a      	mov	r2, r3
 8010672:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010676:	4948      	ldr	r1, [pc, #288]	; (8010798 <readCanToStructs+0x624>)
 8010678:	0112      	lsls	r2, r2, #4
 801067a:	440a      	add	r2, r1
 801067c:	4413      	add	r3, r2
 801067e:	3304      	adds	r3, #4
 8010680:	781a      	ldrb	r2, [r3, #0]
 8010682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010684:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010688:	3301      	adds	r3, #1
 801068a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801068c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010690:	3301      	adds	r3, #1
 8010692:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010696:	4b40      	ldr	r3, [pc, #256]	; (8010798 <readCanToStructs+0x624>)
 8010698:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801069c:	885b      	ldrh	r3, [r3, #2]
 801069e:	4a3e      	ldr	r2, [pc, #248]	; (8010798 <readCanToStructs+0x624>)
 80106a0:	011b      	lsls	r3, r3, #4
 80106a2:	4413      	add	r3, r2
 80106a4:	330c      	adds	r3, #12
 80106a6:	781b      	ldrb	r3, [r3, #0]
 80106a8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80106ac:	429a      	cmp	r2, r3
 80106ae:	d3db      	bcc.n	8010668 <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80106b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106b4:	4a39      	ldr	r2, [pc, #228]	; (801079c <readCanToStructs+0x628>)
 80106b6:	f240 4112 	movw	r1, #1042	; 0x412
 80106ba:	fb01 f303 	mul.w	r3, r1, r3
 80106be:	4413      	add	r3, r2
 80106c0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80106c4:	781b      	ldrb	r3, [r3, #0]
 80106c6:	461a      	mov	r2, r3
 80106c8:	4613      	mov	r3, r2
 80106ca:	00db      	lsls	r3, r3, #3
 80106cc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80106ce:	4b32      	ldr	r3, [pc, #200]	; (8010798 <readCanToStructs+0x624>)
 80106d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106d4:	885b      	ldrh	r3, [r3, #2]
 80106d6:	4930      	ldr	r1, [pc, #192]	; (8010798 <readCanToStructs+0x624>)
 80106d8:	011b      	lsls	r3, r3, #4
 80106da:	440b      	add	r3, r1
 80106dc:	330c      	adds	r3, #12
 80106de:	781b      	ldrb	r3, [r3, #0]
 80106e0:	3b01      	subs	r3, #1
 80106e2:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80106e4:	2b17      	cmp	r3, #23
 80106e6:	d932      	bls.n	801074e <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 80106e8:	4b31      	ldr	r3, [pc, #196]	; (80107b0 <readCanToStructs+0x63c>)
 80106ea:	781b      	ldrb	r3, [r3, #0]
 80106ec:	461a      	mov	r2, r3
 80106ee:	4613      	mov	r3, r2
 80106f0:	005b      	lsls	r3, r3, #1
 80106f2:	4413      	add	r3, r2
 80106f4:	00db      	lsls	r3, r3, #3
 80106f6:	4a30      	ldr	r2, [pc, #192]	; (80107b8 <readCanToStructs+0x644>)
 80106f8:	4413      	add	r3, r2
 80106fa:	2218      	movs	r2, #24
 80106fc:	492c      	ldr	r1, [pc, #176]	; (80107b0 <readCanToStructs+0x63c>)
 80106fe:	4618      	mov	r0, r3
 8010700:	f011 ff8a 	bl	8022618 <memcpy>
					if(Debug_flag == 1)
 8010704:	4b28      	ldr	r3, [pc, #160]	; (80107a8 <readCanToStructs+0x634>)
 8010706:	781b      	ldrb	r3, [r3, #0]
 8010708:	2b01      	cmp	r3, #1
 801070a:	d105      	bne.n	8010718 <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 801070c:	4b28      	ldr	r3, [pc, #160]	; (80107b0 <readCanToStructs+0x63c>)
 801070e:	781b      	ldrb	r3, [r3, #0]
 8010710:	4619      	mov	r1, r3
 8010712:	482a      	ldr	r0, [pc, #168]	; (80107bc <readCanToStructs+0x648>)
 8010714:	f012 f890 	bl	8022838 <iprintf>
					Is_CAN_Exchange_happening = YES;
 8010718:	4b29      	ldr	r3, [pc, #164]	; (80107c0 <readCanToStructs+0x64c>)
 801071a:	2201      	movs	r2, #1
 801071c:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 801071e:	f005 f881 	bl	8015824 <HAL_GetTick>
 8010722:	4603      	mov	r3, r0
 8010724:	4a27      	ldr	r2, [pc, #156]	; (80107c4 <readCanToStructs+0x650>)
 8010726:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010728:	4b21      	ldr	r3, [pc, #132]	; (80107b0 <readCanToStructs+0x63c>)
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	4618      	mov	r0, r3
 801072e:	f7f7 fadf 	bl	8007cf0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010732:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010736:	4a19      	ldr	r2, [pc, #100]	; (801079c <readCanToStructs+0x628>)
 8010738:	f240 4112 	movw	r1, #1042	; 0x412
 801073c:	fb01 f303 	mul.w	r3, r1, r3
 8010740:	4413      	add	r3, r2
 8010742:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010746:	2200      	movs	r2, #0
 8010748:	701a      	strb	r2, [r3, #0]
				break;
 801074a:	f000 be47 	b.w	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801074e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010752:	4a12      	ldr	r2, [pc, #72]	; (801079c <readCanToStructs+0x628>)
 8010754:	f240 4112 	movw	r1, #1042	; 0x412
 8010758:	fb01 f303 	mul.w	r3, r1, r3
 801075c:	4413      	add	r3, r2
 801075e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8010762:	2201      	movs	r2, #1
 8010764:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8010766:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801076a:	490c      	ldr	r1, [pc, #48]	; (801079c <readCanToStructs+0x628>)
 801076c:	f240 4212 	movw	r2, #1042	; 0x412
 8010770:	fb03 f202 	mul.w	r2, r3, r2
 8010774:	440a      	add	r2, r1
 8010776:	f202 4203 	addw	r2, r2, #1027	; 0x403
 801077a:	7812      	ldrb	r2, [r2, #0]
 801077c:	3201      	adds	r2, #1
 801077e:	b2d0      	uxtb	r0, r2
 8010780:	4a06      	ldr	r2, [pc, #24]	; (801079c <readCanToStructs+0x628>)
 8010782:	f240 4112 	movw	r1, #1042	; 0x412
 8010786:	fb01 f303 	mul.w	r3, r1, r3
 801078a:	4413      	add	r3, r2
 801078c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010790:	4602      	mov	r2, r0
 8010792:	701a      	strb	r2, [r3, #0]
				break;
 8010794:	f000 be22 	b.w	80113dc <readCanToStructs+0x1268>
 8010798:	20005e38 	.word	0x20005e38
 801079c:	20005614 	.word	0x20005614
 80107a0:	20002bb4 	.word	0x20002bb4
 80107a4:	20002bbc 	.word	0x20002bbc
 80107a8:	20000645 	.word	0x20000645
 80107ac:	08026d18 	.word	0x08026d18
 80107b0:	2000186c 	.word	0x2000186c
 80107b4:	08026d30 	.word	0x08026d30
 80107b8:	20001764 	.word	0x20001764
 80107bc:	08026d54 	.word	0x08026d54
 80107c0:	20000108 	.word	0x20000108
 80107c4:	20000e40 	.word	0x20000e40
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 80107c8:	4b9f      	ldr	r3, [pc, #636]	; (8010a48 <readCanToStructs+0x8d4>)
 80107ca:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80107cc:	4b9f      	ldr	r3, [pc, #636]	; (8010a4c <readCanToStructs+0x8d8>)
 80107ce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80107d2:	885b      	ldrh	r3, [r3, #2]
 80107d4:	4a9d      	ldr	r2, [pc, #628]	; (8010a4c <readCanToStructs+0x8d8>)
 80107d6:	011b      	lsls	r3, r3, #4
 80107d8:	4413      	add	r3, r2
 80107da:	3304      	adds	r3, #4
 80107dc:	781b      	ldrb	r3, [r3, #0]
 80107de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80107e2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d110      	bne.n	801080c <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80107ea:	2218      	movs	r2, #24
 80107ec:	2100      	movs	r1, #0
 80107ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80107f0:	f011 ff3a 	bl	8022668 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80107f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107f8:	4a95      	ldr	r2, [pc, #596]	; (8010a50 <readCanToStructs+0x8dc>)
 80107fa:	f240 4112 	movw	r1, #1042	; 0x412
 80107fe:	fb01 f303 	mul.w	r3, r1, r3
 8010802:	4413      	add	r3, r2
 8010804:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010808:	2200      	movs	r2, #0
 801080a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 801080c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010810:	4a8f      	ldr	r2, [pc, #572]	; (8010a50 <readCanToStructs+0x8dc>)
 8010812:	f240 4112 	movw	r1, #1042	; 0x412
 8010816:	fb01 f303 	mul.w	r3, r1, r3
 801081a:	4413      	add	r3, r2
 801081c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010820:	781b      	ldrb	r3, [r3, #0]
 8010822:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010826:	429a      	cmp	r2, r3
 8010828:	d015      	beq.n	8010856 <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 801082a:	488a      	ldr	r0, [pc, #552]	; (8010a54 <readCanToStructs+0x8e0>)
 801082c:	f012 f8a0 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010830:	2218      	movs	r2, #24
 8010832:	2100      	movs	r1, #0
 8010834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010836:	f011 ff17 	bl	8022668 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801083a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801083e:	4a84      	ldr	r2, [pc, #528]	; (8010a50 <readCanToStructs+0x8dc>)
 8010840:	f240 4112 	movw	r1, #1042	; 0x412
 8010844:	fb01 f303 	mul.w	r3, r1, r3
 8010848:	4413      	add	r3, r2
 801084a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801084e:	2200      	movs	r2, #0
 8010850:	701a      	strb	r2, [r3, #0]
					break;
 8010852:	f000 bdc3 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010856:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801085a:	4613      	mov	r3, r2
 801085c:	00db      	lsls	r3, r3, #3
 801085e:	1a9b      	subs	r3, r3, r2
 8010860:	461a      	mov	r2, r3
 8010862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010864:	4413      	add	r3, r2
 8010866:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010868:	2301      	movs	r3, #1
 801086a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801086e:	e016      	b.n	801089e <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010870:	4b76      	ldr	r3, [pc, #472]	; (8010a4c <readCanToStructs+0x8d8>)
 8010872:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010876:	885b      	ldrh	r3, [r3, #2]
 8010878:	461a      	mov	r2, r3
 801087a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801087e:	4973      	ldr	r1, [pc, #460]	; (8010a4c <readCanToStructs+0x8d8>)
 8010880:	0112      	lsls	r2, r2, #4
 8010882:	440a      	add	r2, r1
 8010884:	4413      	add	r3, r2
 8010886:	3304      	adds	r3, #4
 8010888:	781a      	ldrb	r2, [r3, #0]
 801088a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801088c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801088e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010890:	3301      	adds	r3, #1
 8010892:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010894:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010898:	3301      	adds	r3, #1
 801089a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801089e:	4b6b      	ldr	r3, [pc, #428]	; (8010a4c <readCanToStructs+0x8d8>)
 80108a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108a4:	885b      	ldrh	r3, [r3, #2]
 80108a6:	4a69      	ldr	r2, [pc, #420]	; (8010a4c <readCanToStructs+0x8d8>)
 80108a8:	011b      	lsls	r3, r3, #4
 80108aa:	4413      	add	r3, r2
 80108ac:	330c      	adds	r3, #12
 80108ae:	781b      	ldrb	r3, [r3, #0]
 80108b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d3db      	bcc.n	8010870 <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80108b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108bc:	4a64      	ldr	r2, [pc, #400]	; (8010a50 <readCanToStructs+0x8dc>)
 80108be:	f240 4112 	movw	r1, #1042	; 0x412
 80108c2:	fb01 f303 	mul.w	r3, r1, r3
 80108c6:	4413      	add	r3, r2
 80108c8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80108cc:	781b      	ldrb	r3, [r3, #0]
 80108ce:	461a      	mov	r2, r3
 80108d0:	4613      	mov	r3, r2
 80108d2:	00db      	lsls	r3, r3, #3
 80108d4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 80108d6:	4b5d      	ldr	r3, [pc, #372]	; (8010a4c <readCanToStructs+0x8d8>)
 80108d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108dc:	885b      	ldrh	r3, [r3, #2]
 80108de:	495b      	ldr	r1, [pc, #364]	; (8010a4c <readCanToStructs+0x8d8>)
 80108e0:	011b      	lsls	r3, r3, #4
 80108e2:	440b      	add	r3, r1
 80108e4:	330c      	adds	r3, #12
 80108e6:	781b      	ldrb	r3, [r3, #0]
 80108e8:	3b01      	subs	r3, #1
 80108ea:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80108ec:	2b17      	cmp	r3, #23
 80108ee:	d932      	bls.n	8010956 <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 80108f0:	4b55      	ldr	r3, [pc, #340]	; (8010a48 <readCanToStructs+0x8d4>)
 80108f2:	781b      	ldrb	r3, [r3, #0]
 80108f4:	461a      	mov	r2, r3
 80108f6:	4613      	mov	r3, r2
 80108f8:	005b      	lsls	r3, r3, #1
 80108fa:	4413      	add	r3, r2
 80108fc:	00db      	lsls	r3, r3, #3
 80108fe:	4a56      	ldr	r2, [pc, #344]	; (8010a58 <readCanToStructs+0x8e4>)
 8010900:	4413      	add	r3, r2
 8010902:	2218      	movs	r2, #24
 8010904:	4950      	ldr	r1, [pc, #320]	; (8010a48 <readCanToStructs+0x8d4>)
 8010906:	4618      	mov	r0, r3
 8010908:	f011 fe86 	bl	8022618 <memcpy>
					if(Debug_flag == 1)
 801090c:	4b53      	ldr	r3, [pc, #332]	; (8010a5c <readCanToStructs+0x8e8>)
 801090e:	781b      	ldrb	r3, [r3, #0]
 8010910:	2b01      	cmp	r3, #1
 8010912:	d105      	bne.n	8010920 <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010914:	4b4c      	ldr	r3, [pc, #304]	; (8010a48 <readCanToStructs+0x8d4>)
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	4619      	mov	r1, r3
 801091a:	4851      	ldr	r0, [pc, #324]	; (8010a60 <readCanToStructs+0x8ec>)
 801091c:	f011 ff8c 	bl	8022838 <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 8010920:	f004 ff80 	bl	8015824 <HAL_GetTick>
 8010924:	4603      	mov	r3, r0
 8010926:	4a4f      	ldr	r2, [pc, #316]	; (8010a64 <readCanToStructs+0x8f0>)
 8010928:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 801092a:	4b4f      	ldr	r3, [pc, #316]	; (8010a68 <readCanToStructs+0x8f4>)
 801092c:	2201      	movs	r2, #1
 801092e:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010930:	4b45      	ldr	r3, [pc, #276]	; (8010a48 <readCanToStructs+0x8d4>)
 8010932:	781b      	ldrb	r3, [r3, #0]
 8010934:	4618      	mov	r0, r3
 8010936:	f7f7 f9db 	bl	8007cf0 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801093a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801093e:	4a44      	ldr	r2, [pc, #272]	; (8010a50 <readCanToStructs+0x8dc>)
 8010940:	f240 4112 	movw	r1, #1042	; 0x412
 8010944:	fb01 f303 	mul.w	r3, r1, r3
 8010948:	4413      	add	r3, r2
 801094a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801094e:	2200      	movs	r2, #0
 8010950:	701a      	strb	r2, [r3, #0]
				break;
 8010952:	f000 bd43 	b.w	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8010956:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801095a:	4a3d      	ldr	r2, [pc, #244]	; (8010a50 <readCanToStructs+0x8dc>)
 801095c:	f240 4112 	movw	r1, #1042	; 0x412
 8010960:	fb01 f303 	mul.w	r3, r1, r3
 8010964:	4413      	add	r3, r2
 8010966:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801096a:	2201      	movs	r2, #1
 801096c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 801096e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010972:	4937      	ldr	r1, [pc, #220]	; (8010a50 <readCanToStructs+0x8dc>)
 8010974:	f240 4212 	movw	r2, #1042	; 0x412
 8010978:	fb03 f202 	mul.w	r2, r3, r2
 801097c:	440a      	add	r2, r1
 801097e:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8010982:	7812      	ldrb	r2, [r2, #0]
 8010984:	3201      	adds	r2, #1
 8010986:	b2d0      	uxtb	r0, r2
 8010988:	4a31      	ldr	r2, [pc, #196]	; (8010a50 <readCanToStructs+0x8dc>)
 801098a:	f240 4112 	movw	r1, #1042	; 0x412
 801098e:	fb01 f303 	mul.w	r3, r1, r3
 8010992:	4413      	add	r3, r2
 8010994:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010998:	4602      	mov	r2, r0
 801099a:	701a      	strb	r2, [r3, #0]
				break;
 801099c:	f000 bd1e 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 80109a0:	4b32      	ldr	r3, [pc, #200]	; (8010a6c <readCanToStructs+0x8f8>)
 80109a2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80109a4:	4b29      	ldr	r3, [pc, #164]	; (8010a4c <readCanToStructs+0x8d8>)
 80109a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109aa:	885b      	ldrh	r3, [r3, #2]
 80109ac:	4a27      	ldr	r2, [pc, #156]	; (8010a4c <readCanToStructs+0x8d8>)
 80109ae:	011b      	lsls	r3, r3, #4
 80109b0:	4413      	add	r3, r2
 80109b2:	3304      	adds	r3, #4
 80109b4:	781b      	ldrb	r3, [r3, #0]
 80109b6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80109ba:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d110      	bne.n	80109e4 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80109c2:	2286      	movs	r2, #134	; 0x86
 80109c4:	2100      	movs	r1, #0
 80109c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80109c8:	f011 fe4e 	bl	8022668 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80109cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109d0:	4a1f      	ldr	r2, [pc, #124]	; (8010a50 <readCanToStructs+0x8dc>)
 80109d2:	f240 4112 	movw	r1, #1042	; 0x412
 80109d6:	fb01 f303 	mul.w	r3, r1, r3
 80109da:	4413      	add	r3, r2
 80109dc:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80109e0:	2200      	movs	r2, #0
 80109e2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 80109e4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109e8:	4a19      	ldr	r2, [pc, #100]	; (8010a50 <readCanToStructs+0x8dc>)
 80109ea:	f240 4112 	movw	r1, #1042	; 0x412
 80109ee:	fb01 f303 	mul.w	r3, r1, r3
 80109f2:	4413      	add	r3, r2
 80109f4:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80109f8:	781b      	ldrb	r3, [r3, #0]
 80109fa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80109fe:	429a      	cmp	r2, r3
 8010a00:	d015      	beq.n	8010a2e <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 8010a02:	481b      	ldr	r0, [pc, #108]	; (8010a70 <readCanToStructs+0x8fc>)
 8010a04:	f011 ffb4 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010a08:	2286      	movs	r2, #134	; 0x86
 8010a0a:	2100      	movs	r1, #0
 8010a0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a0e:	f011 fe2b 	bl	8022668 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010a12:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a16:	4a0e      	ldr	r2, [pc, #56]	; (8010a50 <readCanToStructs+0x8dc>)
 8010a18:	f240 4112 	movw	r1, #1042	; 0x412
 8010a1c:	fb01 f303 	mul.w	r3, r1, r3
 8010a20:	4413      	add	r3, r2
 8010a22:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010a26:	2200      	movs	r2, #0
 8010a28:	701a      	strb	r2, [r3, #0]
					break;
 8010a2a:	f000 bcd7 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010a2e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a32:	4613      	mov	r3, r2
 8010a34:	00db      	lsls	r3, r3, #3
 8010a36:	1a9b      	subs	r3, r3, r2
 8010a38:	461a      	mov	r2, r3
 8010a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a3c:	4413      	add	r3, r2
 8010a3e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010a40:	2301      	movs	r3, #1
 8010a42:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a46:	e02c      	b.n	8010aa2 <readCanToStructs+0x92e>
 8010a48:	2000186c 	.word	0x2000186c
 8010a4c:	20005e38 	.word	0x20005e38
 8010a50:	20005614 	.word	0x20005614
 8010a54:	08026d64 	.word	0x08026d64
 8010a58:	20001764 	.word	0x20001764
 8010a5c:	20000645 	.word	0x20000645
 8010a60:	08026d88 	.word	0x08026d88
 8010a64:	20000e40 	.word	0x20000e40
 8010a68:	20000108 	.word	0x20000108
 8010a6c:	20001994 	.word	0x20001994
 8010a70:	08026d98 	.word	0x08026d98
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010a74:	4bb9      	ldr	r3, [pc, #740]	; (8010d5c <readCanToStructs+0xbe8>)
 8010a76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010a7a:	885b      	ldrh	r3, [r3, #2]
 8010a7c:	461a      	mov	r2, r3
 8010a7e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a82:	49b6      	ldr	r1, [pc, #728]	; (8010d5c <readCanToStructs+0xbe8>)
 8010a84:	0112      	lsls	r2, r2, #4
 8010a86:	440a      	add	r2, r1
 8010a88:	4413      	add	r3, r2
 8010a8a:	3304      	adds	r3, #4
 8010a8c:	781a      	ldrb	r2, [r3, #0]
 8010a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a90:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a94:	3301      	adds	r3, #1
 8010a96:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010a98:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010a9c:	3301      	adds	r3, #1
 8010a9e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010aa2:	4bae      	ldr	r3, [pc, #696]	; (8010d5c <readCanToStructs+0xbe8>)
 8010aa4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010aa8:	885b      	ldrh	r3, [r3, #2]
 8010aaa:	4aac      	ldr	r2, [pc, #688]	; (8010d5c <readCanToStructs+0xbe8>)
 8010aac:	011b      	lsls	r3, r3, #4
 8010aae:	4413      	add	r3, r2
 8010ab0:	330c      	adds	r3, #12
 8010ab2:	781b      	ldrb	r3, [r3, #0]
 8010ab4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ab8:	429a      	cmp	r2, r3
 8010aba:	d3db      	bcc.n	8010a74 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010abc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ac0:	4aa7      	ldr	r2, [pc, #668]	; (8010d60 <readCanToStructs+0xbec>)
 8010ac2:	f240 4112 	movw	r1, #1042	; 0x412
 8010ac6:	fb01 f303 	mul.w	r3, r1, r3
 8010aca:	4413      	add	r3, r2
 8010acc:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010ad0:	781b      	ldrb	r3, [r3, #0]
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	4613      	mov	r3, r2
 8010ad6:	00db      	lsls	r3, r3, #3
 8010ad8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010ada:	4ba0      	ldr	r3, [pc, #640]	; (8010d5c <readCanToStructs+0xbe8>)
 8010adc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ae0:	885b      	ldrh	r3, [r3, #2]
 8010ae2:	499e      	ldr	r1, [pc, #632]	; (8010d5c <readCanToStructs+0xbe8>)
 8010ae4:	011b      	lsls	r3, r3, #4
 8010ae6:	440b      	add	r3, r1
 8010ae8:	330c      	adds	r3, #12
 8010aea:	781b      	ldrb	r3, [r3, #0]
 8010aec:	3b01      	subs	r3, #1
 8010aee:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010af0:	2b85      	cmp	r3, #133	; 0x85
 8010af2:	d93d      	bls.n	8010b70 <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010af4:	4b9b      	ldr	r3, [pc, #620]	; (8010d64 <readCanToStructs+0xbf0>)
 8010af6:	781b      	ldrb	r3, [r3, #0]
 8010af8:	2b01      	cmp	r3, #1
 8010afa:	d102      	bne.n	8010b02 <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010afc:	489a      	ldr	r0, [pc, #616]	; (8010d68 <readCanToStructs+0xbf4>)
 8010afe:	f011 ff37 	bl	8022970 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010b02:	2286      	movs	r2, #134	; 0x86
 8010b04:	2100      	movs	r1, #0
 8010b06:	4899      	ldr	r0, [pc, #612]	; (8010d6c <readCanToStructs+0xbf8>)
 8010b08:	f011 fdae 	bl	8022668 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010b0c:	4a97      	ldr	r2, [pc, #604]	; (8010d6c <readCanToStructs+0xbf8>)
 8010b0e:	4b98      	ldr	r3, [pc, #608]	; (8010d70 <readCanToStructs+0xbfc>)
 8010b10:	4610      	mov	r0, r2
 8010b12:	4619      	mov	r1, r3
 8010b14:	2386      	movs	r3, #134	; 0x86
 8010b16:	461a      	mov	r2, r3
 8010b18:	f011 fd7e 	bl	8022618 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010b1c:	4b95      	ldr	r3, [pc, #596]	; (8010d74 <readCanToStructs+0xc00>)
 8010b1e:	2201      	movs	r2, #1
 8010b20:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 8010b22:	4b92      	ldr	r3, [pc, #584]	; (8010d6c <readCanToStructs+0xbf8>)
 8010b24:	881b      	ldrh	r3, [r3, #0]
 8010b26:	4619      	mov	r1, r3
 8010b28:	4a93      	ldr	r2, [pc, #588]	; (8010d78 <readCanToStructs+0xc04>)
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	005b      	lsls	r3, r3, #1
 8010b2e:	440b      	add	r3, r1
 8010b30:	00db      	lsls	r3, r3, #3
 8010b32:	4413      	add	r3, r2
 8010b34:	3304      	adds	r3, #4
 8010b36:	781b      	ldrb	r3, [r3, #0]
 8010b38:	2b01      	cmp	r3, #1
 8010b3a:	d00b      	beq.n	8010b54 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010b3c:	4b8b      	ldr	r3, [pc, #556]	; (8010d6c <readCanToStructs+0xbf8>)
 8010b3e:	889b      	ldrh	r3, [r3, #4]
 8010b40:	b2d9      	uxtb	r1, r3
 8010b42:	4b8a      	ldr	r3, [pc, #552]	; (8010d6c <readCanToStructs+0xbf8>)
 8010b44:	881b      	ldrh	r3, [r3, #0]
 8010b46:	b2da      	uxtb	r2, r3
 8010b48:	4b88      	ldr	r3, [pc, #544]	; (8010d6c <readCanToStructs+0xbf8>)
 8010b4a:	885b      	ldrh	r3, [r3, #2]
 8010b4c:	b2db      	uxtb	r3, r3
 8010b4e:	488b      	ldr	r0, [pc, #556]	; (8010d7c <readCanToStructs+0xc08>)
 8010b50:	f7f3 fd72 	bl	8004638 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010b54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b58:	4a81      	ldr	r2, [pc, #516]	; (8010d60 <readCanToStructs+0xbec>)
 8010b5a:	f240 4112 	movw	r1, #1042	; 0x412
 8010b5e:	fb01 f303 	mul.w	r3, r1, r3
 8010b62:	4413      	add	r3, r2
 8010b64:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010b68:	2200      	movs	r2, #0
 8010b6a:	701a      	strb	r2, [r3, #0]
				break;
 8010b6c:	f000 bc36 	b.w	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 8010b70:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b74:	4a7a      	ldr	r2, [pc, #488]	; (8010d60 <readCanToStructs+0xbec>)
 8010b76:	f240 4112 	movw	r1, #1042	; 0x412
 8010b7a:	fb01 f303 	mul.w	r3, r1, r3
 8010b7e:	4413      	add	r3, r2
 8010b80:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010b84:	2201      	movs	r2, #1
 8010b86:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8010b88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b8c:	4974      	ldr	r1, [pc, #464]	; (8010d60 <readCanToStructs+0xbec>)
 8010b8e:	f240 4212 	movw	r2, #1042	; 0x412
 8010b92:	fb03 f202 	mul.w	r2, r3, r2
 8010b96:	440a      	add	r2, r1
 8010b98:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8010b9c:	7812      	ldrb	r2, [r2, #0]
 8010b9e:	3201      	adds	r2, #1
 8010ba0:	b2d0      	uxtb	r0, r2
 8010ba2:	4a6f      	ldr	r2, [pc, #444]	; (8010d60 <readCanToStructs+0xbec>)
 8010ba4:	f240 4112 	movw	r1, #1042	; 0x412
 8010ba8:	fb01 f303 	mul.w	r3, r1, r3
 8010bac:	4413      	add	r3, r2
 8010bae:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010bb2:	4602      	mov	r2, r0
 8010bb4:	701a      	strb	r2, [r3, #0]
				break;
 8010bb6:	f000 bc11 	b.w	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010bba:	4b6d      	ldr	r3, [pc, #436]	; (8010d70 <readCanToStructs+0xbfc>)
 8010bbc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010bbe:	4b67      	ldr	r3, [pc, #412]	; (8010d5c <readCanToStructs+0xbe8>)
 8010bc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010bc4:	885b      	ldrh	r3, [r3, #2]
 8010bc6:	4a65      	ldr	r2, [pc, #404]	; (8010d5c <readCanToStructs+0xbe8>)
 8010bc8:	011b      	lsls	r3, r3, #4
 8010bca:	4413      	add	r3, r2
 8010bcc:	3304      	adds	r3, #4
 8010bce:	781b      	ldrb	r3, [r3, #0]
 8010bd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010bd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010bd8:	2b00      	cmp	r3, #0
 8010bda:	d110      	bne.n	8010bfe <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010bdc:	2286      	movs	r2, #134	; 0x86
 8010bde:	2100      	movs	r1, #0
 8010be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010be2:	f011 fd41 	bl	8022668 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010be6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bea:	4a5d      	ldr	r2, [pc, #372]	; (8010d60 <readCanToStructs+0xbec>)
 8010bec:	f240 4112 	movw	r1, #1042	; 0x412
 8010bf0:	fb01 f303 	mul.w	r3, r1, r3
 8010bf4:	4413      	add	r3, r2
 8010bf6:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010bfa:	2200      	movs	r2, #0
 8010bfc:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 8010bfe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c02:	4a57      	ldr	r2, [pc, #348]	; (8010d60 <readCanToStructs+0xbec>)
 8010c04:	f240 4112 	movw	r1, #1042	; 0x412
 8010c08:	fb01 f303 	mul.w	r3, r1, r3
 8010c0c:	4413      	add	r3, r2
 8010c0e:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010c12:	781b      	ldrb	r3, [r3, #0]
 8010c14:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010c18:	429a      	cmp	r2, r3
 8010c1a:	d014      	beq.n	8010c46 <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010c1c:	4858      	ldr	r0, [pc, #352]	; (8010d80 <readCanToStructs+0xc0c>)
 8010c1e:	f011 fea7 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010c22:	2286      	movs	r2, #134	; 0x86
 8010c24:	2100      	movs	r1, #0
 8010c26:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c28:	f011 fd1e 	bl	8022668 <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010c2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c30:	4a4b      	ldr	r2, [pc, #300]	; (8010d60 <readCanToStructs+0xbec>)
 8010c32:	f240 4112 	movw	r1, #1042	; 0x412
 8010c36:	fb01 f303 	mul.w	r3, r1, r3
 8010c3a:	4413      	add	r3, r2
 8010c3c:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010c40:	2200      	movs	r2, #0
 8010c42:	701a      	strb	r2, [r3, #0]
					break;
 8010c44:	e3ca      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010c46:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010c4a:	4613      	mov	r3, r2
 8010c4c:	00db      	lsls	r3, r3, #3
 8010c4e:	1a9b      	subs	r3, r3, r2
 8010c50:	461a      	mov	r2, r3
 8010c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c54:	4413      	add	r3, r2
 8010c56:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010c58:	2301      	movs	r3, #1
 8010c5a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c5e:	e016      	b.n	8010c8e <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010c60:	4b3e      	ldr	r3, [pc, #248]	; (8010d5c <readCanToStructs+0xbe8>)
 8010c62:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c66:	885b      	ldrh	r3, [r3, #2]
 8010c68:	461a      	mov	r2, r3
 8010c6a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c6e:	493b      	ldr	r1, [pc, #236]	; (8010d5c <readCanToStructs+0xbe8>)
 8010c70:	0112      	lsls	r2, r2, #4
 8010c72:	440a      	add	r2, r1
 8010c74:	4413      	add	r3, r2
 8010c76:	3304      	adds	r3, #4
 8010c78:	781a      	ldrb	r2, [r3, #0]
 8010c7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c7c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c80:	3301      	adds	r3, #1
 8010c82:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010c84:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010c88:	3301      	adds	r3, #1
 8010c8a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010c8e:	4b33      	ldr	r3, [pc, #204]	; (8010d5c <readCanToStructs+0xbe8>)
 8010c90:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c94:	885b      	ldrh	r3, [r3, #2]
 8010c96:	4a31      	ldr	r2, [pc, #196]	; (8010d5c <readCanToStructs+0xbe8>)
 8010c98:	011b      	lsls	r3, r3, #4
 8010c9a:	4413      	add	r3, r2
 8010c9c:	330c      	adds	r3, #12
 8010c9e:	781b      	ldrb	r3, [r3, #0]
 8010ca0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010ca4:	429a      	cmp	r2, r3
 8010ca6:	d3db      	bcc.n	8010c60 <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010ca8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010cac:	4a2c      	ldr	r2, [pc, #176]	; (8010d60 <readCanToStructs+0xbec>)
 8010cae:	f240 4112 	movw	r1, #1042	; 0x412
 8010cb2:	fb01 f303 	mul.w	r3, r1, r3
 8010cb6:	4413      	add	r3, r2
 8010cb8:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010cbc:	781b      	ldrb	r3, [r3, #0]
 8010cbe:	461a      	mov	r2, r3
 8010cc0:	4613      	mov	r3, r2
 8010cc2:	00db      	lsls	r3, r3, #3
 8010cc4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010cc6:	4b25      	ldr	r3, [pc, #148]	; (8010d5c <readCanToStructs+0xbe8>)
 8010cc8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ccc:	885b      	ldrh	r3, [r3, #2]
 8010cce:	4923      	ldr	r1, [pc, #140]	; (8010d5c <readCanToStructs+0xbe8>)
 8010cd0:	011b      	lsls	r3, r3, #4
 8010cd2:	440b      	add	r3, r1
 8010cd4:	330c      	adds	r3, #12
 8010cd6:	781b      	ldrb	r3, [r3, #0]
 8010cd8:	3b01      	subs	r3, #1
 8010cda:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010cdc:	2b85      	cmp	r3, #133	; 0x85
 8010cde:	d953      	bls.n	8010d88 <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 8010ce0:	4b20      	ldr	r3, [pc, #128]	; (8010d64 <readCanToStructs+0xbf0>)
 8010ce2:	781b      	ldrb	r3, [r3, #0]
 8010ce4:	2b01      	cmp	r3, #1
 8010ce6:	d102      	bne.n	8010cee <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 8010ce8:	4826      	ldr	r0, [pc, #152]	; (8010d84 <readCanToStructs+0xc10>)
 8010cea:	f011 fe41 	bl	8022970 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010cee:	2286      	movs	r2, #134	; 0x86
 8010cf0:	2100      	movs	r1, #0
 8010cf2:	481e      	ldr	r0, [pc, #120]	; (8010d6c <readCanToStructs+0xbf8>)
 8010cf4:	f011 fcb8 	bl	8022668 <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010cf8:	4a1c      	ldr	r2, [pc, #112]	; (8010d6c <readCanToStructs+0xbf8>)
 8010cfa:	4b1d      	ldr	r3, [pc, #116]	; (8010d70 <readCanToStructs+0xbfc>)
 8010cfc:	4610      	mov	r0, r2
 8010cfe:	4619      	mov	r1, r3
 8010d00:	2386      	movs	r3, #134	; 0x86
 8010d02:	461a      	mov	r2, r3
 8010d04:	f011 fc88 	bl	8022618 <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010d08:	4b1a      	ldr	r3, [pc, #104]	; (8010d74 <readCanToStructs+0xc00>)
 8010d0a:	2201      	movs	r2, #1
 8010d0c:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 8010d0e:	4b17      	ldr	r3, [pc, #92]	; (8010d6c <readCanToStructs+0xbf8>)
 8010d10:	881b      	ldrh	r3, [r3, #0]
 8010d12:	4619      	mov	r1, r3
 8010d14:	4a18      	ldr	r2, [pc, #96]	; (8010d78 <readCanToStructs+0xc04>)
 8010d16:	460b      	mov	r3, r1
 8010d18:	005b      	lsls	r3, r3, #1
 8010d1a:	440b      	add	r3, r1
 8010d1c:	00db      	lsls	r3, r3, #3
 8010d1e:	4413      	add	r3, r2
 8010d20:	3303      	adds	r3, #3
 8010d22:	781b      	ldrb	r3, [r3, #0]
 8010d24:	2b01      	cmp	r3, #1
 8010d26:	d00b      	beq.n	8010d40 <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 8010d28:	4b10      	ldr	r3, [pc, #64]	; (8010d6c <readCanToStructs+0xbf8>)
 8010d2a:	889b      	ldrh	r3, [r3, #4]
 8010d2c:	b2d9      	uxtb	r1, r3
 8010d2e:	4b0f      	ldr	r3, [pc, #60]	; (8010d6c <readCanToStructs+0xbf8>)
 8010d30:	881b      	ldrh	r3, [r3, #0]
 8010d32:	b2da      	uxtb	r2, r3
 8010d34:	4b0d      	ldr	r3, [pc, #52]	; (8010d6c <readCanToStructs+0xbf8>)
 8010d36:	885b      	ldrh	r3, [r3, #2]
 8010d38:	b2db      	uxtb	r3, r3
 8010d3a:	4810      	ldr	r0, [pc, #64]	; (8010d7c <readCanToStructs+0xc08>)
 8010d3c:	f7f3 fc7c 	bl	8004638 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010d40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d44:	4a06      	ldr	r2, [pc, #24]	; (8010d60 <readCanToStructs+0xbec>)
 8010d46:	f240 4112 	movw	r1, #1042	; 0x412
 8010d4a:	fb01 f303 	mul.w	r3, r1, r3
 8010d4e:	4413      	add	r3, r2
 8010d50:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010d54:	2200      	movs	r2, #0
 8010d56:	701a      	strb	r2, [r3, #0]
				break;
 8010d58:	e340      	b.n	80113dc <readCanToStructs+0x1268>
 8010d5a:	bf00      	nop
 8010d5c:	20005e38 	.word	0x20005e38
 8010d60:	20005614 	.word	0x20005614
 8010d64:	20000645 	.word	0x20000645
 8010d68:	08026dbc 	.word	0x08026dbc
 8010d6c:	2000190c 	.word	0x2000190c
 8010d70:	20001994 	.word	0x20001994
 8010d74:	20000108 	.word	0x20000108
 8010d78:	20001674 	.word	0x20001674
 8010d7c:	20001912 	.word	0x20001912
 8010d80:	08026dcc 	.word	0x08026dcc
 8010d84:	08026df0 	.word	0x08026df0
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8010d88:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d8c:	4a9f      	ldr	r2, [pc, #636]	; (801100c <readCanToStructs+0xe98>)
 8010d8e:	f240 4112 	movw	r1, #1042	; 0x412
 8010d92:	fb01 f303 	mul.w	r3, r1, r3
 8010d96:	4413      	add	r3, r2
 8010d98:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010d9c:	2201      	movs	r2, #1
 8010d9e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 8010da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010da4:	4999      	ldr	r1, [pc, #612]	; (801100c <readCanToStructs+0xe98>)
 8010da6:	f240 4212 	movw	r2, #1042	; 0x412
 8010daa:	fb03 f202 	mul.w	r2, r3, r2
 8010dae:	440a      	add	r2, r1
 8010db0:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8010db4:	7812      	ldrb	r2, [r2, #0]
 8010db6:	3201      	adds	r2, #1
 8010db8:	b2d0      	uxtb	r0, r2
 8010dba:	4a94      	ldr	r2, [pc, #592]	; (801100c <readCanToStructs+0xe98>)
 8010dbc:	f240 4112 	movw	r1, #1042	; 0x412
 8010dc0:	fb01 f303 	mul.w	r3, r1, r3
 8010dc4:	4413      	add	r3, r2
 8010dc6:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010dca:	4602      	mov	r2, r0
 8010dcc:	701a      	strb	r2, [r3, #0]
				break;
 8010dce:	e305      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 8010dd0:	4b8f      	ldr	r3, [pc, #572]	; (8011010 <readCanToStructs+0xe9c>)
 8010dd2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010dd4:	4b8f      	ldr	r3, [pc, #572]	; (8011014 <readCanToStructs+0xea0>)
 8010dd6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010dda:	885b      	ldrh	r3, [r3, #2]
 8010ddc:	4a8d      	ldr	r2, [pc, #564]	; (8011014 <readCanToStructs+0xea0>)
 8010dde:	011b      	lsls	r3, r3, #4
 8010de0:	4413      	add	r3, r2
 8010de2:	3304      	adds	r3, #4
 8010de4:	781b      	ldrb	r3, [r3, #0]
 8010de6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010dea:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010dee:	2b00      	cmp	r3, #0
 8010df0:	d110      	bne.n	8010e14 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010df2:	2208      	movs	r2, #8
 8010df4:	2100      	movs	r1, #0
 8010df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010df8:	f011 fc36 	bl	8022668 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e00:	4a82      	ldr	r2, [pc, #520]	; (801100c <readCanToStructs+0xe98>)
 8010e02:	f240 4112 	movw	r1, #1042	; 0x412
 8010e06:	fb01 f303 	mul.w	r3, r1, r3
 8010e0a:	4413      	add	r3, r2
 8010e0c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010e10:	2200      	movs	r2, #0
 8010e12:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e18:	4a7c      	ldr	r2, [pc, #496]	; (801100c <readCanToStructs+0xe98>)
 8010e1a:	f240 4112 	movw	r1, #1042	; 0x412
 8010e1e:	fb01 f303 	mul.w	r3, r1, r3
 8010e22:	4413      	add	r3, r2
 8010e24:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010e28:	781b      	ldrb	r3, [r3, #0]
 8010e2a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010e2e:	429a      	cmp	r2, r3
 8010e30:	d014      	beq.n	8010e5c <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8010e32:	4879      	ldr	r0, [pc, #484]	; (8011018 <readCanToStructs+0xea4>)
 8010e34:	f011 fd9c 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8010e38:	2208      	movs	r2, #8
 8010e3a:	2100      	movs	r1, #0
 8010e3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010e3e:	f011 fc13 	bl	8022668 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e46:	4a71      	ldr	r2, [pc, #452]	; (801100c <readCanToStructs+0xe98>)
 8010e48:	f240 4112 	movw	r1, #1042	; 0x412
 8010e4c:	fb01 f303 	mul.w	r3, r1, r3
 8010e50:	4413      	add	r3, r2
 8010e52:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010e56:	2200      	movs	r2, #0
 8010e58:	701a      	strb	r2, [r3, #0]
					break;
 8010e5a:	e2bf      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010e5c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010e60:	4613      	mov	r3, r2
 8010e62:	00db      	lsls	r3, r3, #3
 8010e64:	1a9b      	subs	r3, r3, r2
 8010e66:	461a      	mov	r2, r3
 8010e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e6a:	4413      	add	r3, r2
 8010e6c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010e6e:	2301      	movs	r3, #1
 8010e70:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010e74:	e016      	b.n	8010ea4 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010e76:	4b67      	ldr	r3, [pc, #412]	; (8011014 <readCanToStructs+0xea0>)
 8010e78:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e7c:	885b      	ldrh	r3, [r3, #2]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e84:	4963      	ldr	r1, [pc, #396]	; (8011014 <readCanToStructs+0xea0>)
 8010e86:	0112      	lsls	r2, r2, #4
 8010e88:	440a      	add	r2, r1
 8010e8a:	4413      	add	r3, r2
 8010e8c:	3304      	adds	r3, #4
 8010e8e:	781a      	ldrb	r2, [r3, #0]
 8010e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e92:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e96:	3301      	adds	r3, #1
 8010e98:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010e9a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010e9e:	3301      	adds	r3, #1
 8010ea0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ea4:	4b5b      	ldr	r3, [pc, #364]	; (8011014 <readCanToStructs+0xea0>)
 8010ea6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010eaa:	885b      	ldrh	r3, [r3, #2]
 8010eac:	4a59      	ldr	r2, [pc, #356]	; (8011014 <readCanToStructs+0xea0>)
 8010eae:	011b      	lsls	r3, r3, #4
 8010eb0:	4413      	add	r3, r2
 8010eb2:	330c      	adds	r3, #12
 8010eb4:	781b      	ldrb	r3, [r3, #0]
 8010eb6:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d3db      	bcc.n	8010e76 <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 8010ebe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010ec2:	4a52      	ldr	r2, [pc, #328]	; (801100c <readCanToStructs+0xe98>)
 8010ec4:	f240 4112 	movw	r1, #1042	; 0x412
 8010ec8:	fb01 f303 	mul.w	r3, r1, r3
 8010ecc:	4413      	add	r3, r2
 8010ece:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010ed2:	781b      	ldrb	r3, [r3, #0]
 8010ed4:	461a      	mov	r2, r3
 8010ed6:	4613      	mov	r3, r2
 8010ed8:	00db      	lsls	r3, r3, #3
 8010eda:	1a9a      	subs	r2, r3, r2
 8010edc:	4b4d      	ldr	r3, [pc, #308]	; (8011014 <readCanToStructs+0xea0>)
 8010ede:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010ee2:	885b      	ldrh	r3, [r3, #2]
 8010ee4:	494b      	ldr	r1, [pc, #300]	; (8011014 <readCanToStructs+0xea0>)
 8010ee6:	011b      	lsls	r3, r3, #4
 8010ee8:	440b      	add	r3, r1
 8010eea:	330c      	adds	r3, #12
 8010eec:	781b      	ldrb	r3, [r3, #0]
 8010eee:	3b01      	subs	r3, #1
 8010ef0:	4413      	add	r3, r2
 8010ef2:	2b07      	cmp	r3, #7
 8010ef4:	d912      	bls.n	8010f1c <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 8010ef6:	4849      	ldr	r0, [pc, #292]	; (801101c <readCanToStructs+0xea8>)
 8010ef8:	f011 fd3a 	bl	8022970 <puts>
					Is_CAN_Exchange_happening = YES;
 8010efc:	4b48      	ldr	r3, [pc, #288]	; (8011020 <readCanToStructs+0xeac>)
 8010efe:	2201      	movs	r2, #1
 8010f00:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010f02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f06:	4a41      	ldr	r2, [pc, #260]	; (801100c <readCanToStructs+0xe98>)
 8010f08:	f240 4112 	movw	r1, #1042	; 0x412
 8010f0c:	fb01 f303 	mul.w	r3, r1, r3
 8010f10:	4413      	add	r3, r2
 8010f12:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010f16:	2200      	movs	r2, #0
 8010f18:	701a      	strb	r2, [r3, #0]
				break;
 8010f1a:	e25f      	b.n	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8010f1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f20:	4a3a      	ldr	r2, [pc, #232]	; (801100c <readCanToStructs+0xe98>)
 8010f22:	f240 4112 	movw	r1, #1042	; 0x412
 8010f26:	fb01 f303 	mul.w	r3, r1, r3
 8010f2a:	4413      	add	r3, r2
 8010f2c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8010f30:	2201      	movs	r2, #1
 8010f32:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8010f34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f38:	4934      	ldr	r1, [pc, #208]	; (801100c <readCanToStructs+0xe98>)
 8010f3a:	f240 4212 	movw	r2, #1042	; 0x412
 8010f3e:	fb03 f202 	mul.w	r2, r3, r2
 8010f42:	440a      	add	r2, r1
 8010f44:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8010f48:	7812      	ldrb	r2, [r2, #0]
 8010f4a:	3201      	adds	r2, #1
 8010f4c:	b2d0      	uxtb	r0, r2
 8010f4e:	4a2f      	ldr	r2, [pc, #188]	; (801100c <readCanToStructs+0xe98>)
 8010f50:	f240 4112 	movw	r1, #1042	; 0x412
 8010f54:	fb01 f303 	mul.w	r3, r1, r3
 8010f58:	4413      	add	r3, r2
 8010f5a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010f5e:	4602      	mov	r2, r0
 8010f60:	701a      	strb	r2, [r3, #0]
				break;
 8010f62:	e23b      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010f64:	4b2f      	ldr	r3, [pc, #188]	; (8011024 <readCanToStructs+0xeb0>)
 8010f66:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010f68:	4b2a      	ldr	r3, [pc, #168]	; (8011014 <readCanToStructs+0xea0>)
 8010f6a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f6e:	885b      	ldrh	r3, [r3, #2]
 8010f70:	4a28      	ldr	r2, [pc, #160]	; (8011014 <readCanToStructs+0xea0>)
 8010f72:	011b      	lsls	r3, r3, #4
 8010f74:	4413      	add	r3, r2
 8010f76:	3304      	adds	r3, #4
 8010f78:	781b      	ldrb	r3, [r3, #0]
 8010f7a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010f7e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010f82:	2b00      	cmp	r3, #0
 8010f84:	d110      	bne.n	8010fa8 <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010f86:	2214      	movs	r2, #20
 8010f88:	2100      	movs	r1, #0
 8010f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f8c:	f011 fb6c 	bl	8022668 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010f90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f94:	4a1d      	ldr	r2, [pc, #116]	; (801100c <readCanToStructs+0xe98>)
 8010f96:	f240 4112 	movw	r1, #1042	; 0x412
 8010f9a:	fb01 f303 	mul.w	r3, r1, r3
 8010f9e:	4413      	add	r3, r2
 8010fa0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010fa4:	2200      	movs	r2, #0
 8010fa6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8010fa8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fac:	4a17      	ldr	r2, [pc, #92]	; (801100c <readCanToStructs+0xe98>)
 8010fae:	f240 4112 	movw	r1, #1042	; 0x412
 8010fb2:	fb01 f303 	mul.w	r3, r1, r3
 8010fb6:	4413      	add	r3, r2
 8010fb8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010fbc:	781b      	ldrb	r3, [r3, #0]
 8010fbe:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d014      	beq.n	8010ff0 <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8010fc6:	4818      	ldr	r0, [pc, #96]	; (8011028 <readCanToStructs+0xeb4>)
 8010fc8:	f011 fcd2 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010fcc:	2214      	movs	r2, #20
 8010fce:	2100      	movs	r1, #0
 8010fd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010fd2:	f011 fb49 	bl	8022668 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010fd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010fda:	4a0c      	ldr	r2, [pc, #48]	; (801100c <readCanToStructs+0xe98>)
 8010fdc:	f240 4112 	movw	r1, #1042	; 0x412
 8010fe0:	fb01 f303 	mul.w	r3, r1, r3
 8010fe4:	4413      	add	r3, r2
 8010fe6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010fea:	2200      	movs	r2, #0
 8010fec:	701a      	strb	r2, [r3, #0]
					break;
 8010fee:	e1f5      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010ff0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010ff4:	4613      	mov	r3, r2
 8010ff6:	00db      	lsls	r3, r3, #3
 8010ff8:	1a9b      	subs	r3, r3, r2
 8010ffa:	461a      	mov	r2, r3
 8010ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ffe:	4413      	add	r3, r2
 8011000:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011002:	2301      	movs	r3, #1
 8011004:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011008:	e027      	b.n	801105a <readCanToStructs+0xee6>
 801100a:	bf00      	nop
 801100c:	20005614 	.word	0x20005614
 8011010:	20001a1c 	.word	0x20001a1c
 8011014:	20005e38 	.word	0x20005e38
 8011018:	08026e00 	.word	0x08026e00
 801101c:	08026e20 	.word	0x08026e20
 8011020:	20000108 	.word	0x20000108
 8011024:	20002364 	.word	0x20002364
 8011028:	08026e40 	.word	0x08026e40
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801102c:	4bb9      	ldr	r3, [pc, #740]	; (8011314 <readCanToStructs+0x11a0>)
 801102e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011032:	885b      	ldrh	r3, [r3, #2]
 8011034:	461a      	mov	r2, r3
 8011036:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801103a:	49b6      	ldr	r1, [pc, #728]	; (8011314 <readCanToStructs+0x11a0>)
 801103c:	0112      	lsls	r2, r2, #4
 801103e:	440a      	add	r2, r1
 8011040:	4413      	add	r3, r2
 8011042:	3304      	adds	r3, #4
 8011044:	781a      	ldrb	r2, [r3, #0]
 8011046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011048:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801104a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801104c:	3301      	adds	r3, #1
 801104e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011050:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011054:	3301      	adds	r3, #1
 8011056:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801105a:	4bae      	ldr	r3, [pc, #696]	; (8011314 <readCanToStructs+0x11a0>)
 801105c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011060:	885b      	ldrh	r3, [r3, #2]
 8011062:	4aac      	ldr	r2, [pc, #688]	; (8011314 <readCanToStructs+0x11a0>)
 8011064:	011b      	lsls	r3, r3, #4
 8011066:	4413      	add	r3, r2
 8011068:	330c      	adds	r3, #12
 801106a:	781b      	ldrb	r3, [r3, #0]
 801106c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011070:	429a      	cmp	r2, r3
 8011072:	d3db      	bcc.n	801102c <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8011074:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011078:	4aa7      	ldr	r2, [pc, #668]	; (8011318 <readCanToStructs+0x11a4>)
 801107a:	f240 4112 	movw	r1, #1042	; 0x412
 801107e:	fb01 f303 	mul.w	r3, r1, r3
 8011082:	4413      	add	r3, r2
 8011084:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011088:	781b      	ldrb	r3, [r3, #0]
 801108a:	461a      	mov	r2, r3
 801108c:	4613      	mov	r3, r2
 801108e:	00db      	lsls	r3, r3, #3
 8011090:	1a9a      	subs	r2, r3, r2
 8011092:	4ba0      	ldr	r3, [pc, #640]	; (8011314 <readCanToStructs+0x11a0>)
 8011094:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011098:	885b      	ldrh	r3, [r3, #2]
 801109a:	499e      	ldr	r1, [pc, #632]	; (8011314 <readCanToStructs+0x11a0>)
 801109c:	011b      	lsls	r3, r3, #4
 801109e:	440b      	add	r3, r1
 80110a0:	330c      	adds	r3, #12
 80110a2:	781b      	ldrb	r3, [r3, #0]
 80110a4:	3b01      	subs	r3, #1
 80110a6:	4413      	add	r3, r2
 80110a8:	2b13      	cmp	r3, #19
 80110aa:	d954      	bls.n	8011156 <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 80110ac:	2300      	movs	r3, #0
 80110ae:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 80110b0:	2300      	movs	r3, #0
 80110b2:	603b      	str	r3, [r7, #0]
 80110b4:	1d3b      	adds	r3, r7, #4
 80110b6:	2224      	movs	r2, #36	; 0x24
 80110b8:	2100      	movs	r1, #0
 80110ba:	4618      	mov	r0, r3
 80110bc:	f011 fad4 	bl	8022668 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80110c0:	463b      	mov	r3, r7
 80110c2:	2214      	movs	r2, #20
 80110c4:	4995      	ldr	r1, [pc, #596]	; (801131c <readCanToStructs+0x11a8>)
 80110c6:	4618      	mov	r0, r3
 80110c8:	f011 faa6 	bl	8022618 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80110cc:	463b      	mov	r3, r7
 80110ce:	2214      	movs	r2, #20
 80110d0:	4619      	mov	r1, r3
 80110d2:	2000      	movs	r0, #0
 80110d4:	f001 ff10 	bl	8012ef8 <GetCRC16>
 80110d8:	4603      	mov	r3, r0
 80110da:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 80110dc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d10c      	bne.n	80110fc <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80110e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110e6:	4a8c      	ldr	r2, [pc, #560]	; (8011318 <readCanToStructs+0x11a4>)
 80110e8:	f240 4112 	movw	r1, #1042	; 0x412
 80110ec:	fb01 f303 	mul.w	r3, r1, r3
 80110f0:	4413      	add	r3, r2
 80110f2:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80110f6:	2200      	movs	r2, #0
 80110f8:	701a      	strb	r2, [r3, #0]
				break;
 80110fa:	e16f      	b.n	80113dc <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 80110fc:	4b88      	ldr	r3, [pc, #544]	; (8011320 <readCanToStructs+0x11ac>)
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	2b01      	cmp	r3, #1
 8011102:	d10a      	bne.n	801111a <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011104:	4b85      	ldr	r3, [pc, #532]	; (801131c <readCanToStructs+0x11a8>)
 8011106:	781b      	ldrb	r3, [r3, #0]
 8011108:	4a86      	ldr	r2, [pc, #536]	; (8011324 <readCanToStructs+0x11b0>)
 801110a:	3366      	adds	r3, #102	; 0x66
 801110c:	009b      	lsls	r3, r3, #2
 801110e:	4413      	add	r3, r2
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	4619      	mov	r1, r3
 8011114:	4884      	ldr	r0, [pc, #528]	; (8011328 <readCanToStructs+0x11b4>)
 8011116:	f011 fb8f 	bl	8022838 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 801111a:	4b80      	ldr	r3, [pc, #512]	; (801131c <readCanToStructs+0x11a8>)
 801111c:	781b      	ldrb	r3, [r3, #0]
 801111e:	461a      	mov	r2, r3
 8011120:	4613      	mov	r3, r2
 8011122:	009b      	lsls	r3, r3, #2
 8011124:	4413      	add	r3, r2
 8011126:	009b      	lsls	r3, r3, #2
 8011128:	4a80      	ldr	r2, [pc, #512]	; (801132c <readCanToStructs+0x11b8>)
 801112a:	4413      	add	r3, r2
 801112c:	2214      	movs	r2, #20
 801112e:	497b      	ldr	r1, [pc, #492]	; (801131c <readCanToStructs+0x11a8>)
 8011130:	4618      	mov	r0, r3
 8011132:	f011 fa71 	bl	8022618 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8011136:	4b7e      	ldr	r3, [pc, #504]	; (8011330 <readCanToStructs+0x11bc>)
 8011138:	2201      	movs	r2, #1
 801113a:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801113c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011140:	4a75      	ldr	r2, [pc, #468]	; (8011318 <readCanToStructs+0x11a4>)
 8011142:	f240 4112 	movw	r1, #1042	; 0x412
 8011146:	fb01 f303 	mul.w	r3, r1, r3
 801114a:	4413      	add	r3, r2
 801114c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011150:	2200      	movs	r2, #0
 8011152:	701a      	strb	r2, [r3, #0]
				break;
 8011154:	e142      	b.n	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8011156:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801115a:	4a6f      	ldr	r2, [pc, #444]	; (8011318 <readCanToStructs+0x11a4>)
 801115c:	f240 4112 	movw	r1, #1042	; 0x412
 8011160:	fb01 f303 	mul.w	r3, r1, r3
 8011164:	4413      	add	r3, r2
 8011166:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 801116a:	2201      	movs	r2, #1
 801116c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 801116e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011172:	4969      	ldr	r1, [pc, #420]	; (8011318 <readCanToStructs+0x11a4>)
 8011174:	f240 4212 	movw	r2, #1042	; 0x412
 8011178:	fb03 f202 	mul.w	r2, r3, r2
 801117c:	440a      	add	r2, r1
 801117e:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8011182:	7812      	ldrb	r2, [r2, #0]
 8011184:	3201      	adds	r2, #1
 8011186:	b2d0      	uxtb	r0, r2
 8011188:	4a63      	ldr	r2, [pc, #396]	; (8011318 <readCanToStructs+0x11a4>)
 801118a:	f240 4112 	movw	r1, #1042	; 0x412
 801118e:	fb01 f303 	mul.w	r3, r1, r3
 8011192:	4413      	add	r3, r2
 8011194:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011198:	4602      	mov	r2, r0
 801119a:	701a      	strb	r2, [r3, #0]
				break;
 801119c:	e11e      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 801119e:	4b5f      	ldr	r3, [pc, #380]	; (801131c <readCanToStructs+0x11a8>)
 80111a0:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80111a2:	4b5c      	ldr	r3, [pc, #368]	; (8011314 <readCanToStructs+0x11a0>)
 80111a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111a8:	885b      	ldrh	r3, [r3, #2]
 80111aa:	4a5a      	ldr	r2, [pc, #360]	; (8011314 <readCanToStructs+0x11a0>)
 80111ac:	011b      	lsls	r3, r3, #4
 80111ae:	4413      	add	r3, r2
 80111b0:	3304      	adds	r3, #4
 80111b2:	781b      	ldrb	r3, [r3, #0]
 80111b4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80111b8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80111bc:	2b00      	cmp	r3, #0
 80111be:	d110      	bne.n	80111e2 <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 80111c0:	2214      	movs	r2, #20
 80111c2:	2100      	movs	r1, #0
 80111c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80111c6:	f011 fa4f 	bl	8022668 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80111ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111ce:	4a52      	ldr	r2, [pc, #328]	; (8011318 <readCanToStructs+0x11a4>)
 80111d0:	f240 4112 	movw	r1, #1042	; 0x412
 80111d4:	fb01 f303 	mul.w	r3, r1, r3
 80111d8:	4413      	add	r3, r2
 80111da:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80111de:	2200      	movs	r2, #0
 80111e0:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80111e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111e6:	4a4c      	ldr	r2, [pc, #304]	; (8011318 <readCanToStructs+0x11a4>)
 80111e8:	f240 4112 	movw	r1, #1042	; 0x412
 80111ec:	fb01 f303 	mul.w	r3, r1, r3
 80111f0:	4413      	add	r3, r2
 80111f2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80111fc:	429a      	cmp	r2, r3
 80111fe:	d014      	beq.n	801122a <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8011200:	484c      	ldr	r0, [pc, #304]	; (8011334 <readCanToStructs+0x11c0>)
 8011202:	f011 fbb5 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8011206:	2214      	movs	r2, #20
 8011208:	2100      	movs	r1, #0
 801120a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801120c:	f011 fa2c 	bl	8022668 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011210:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011214:	4a40      	ldr	r2, [pc, #256]	; (8011318 <readCanToStructs+0x11a4>)
 8011216:	f240 4112 	movw	r1, #1042	; 0x412
 801121a:	fb01 f303 	mul.w	r3, r1, r3
 801121e:	4413      	add	r3, r2
 8011220:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011224:	2200      	movs	r2, #0
 8011226:	701a      	strb	r2, [r3, #0]
					break;
 8011228:	e0d8      	b.n	80113dc <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 801122a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801122e:	4613      	mov	r3, r2
 8011230:	00db      	lsls	r3, r3, #3
 8011232:	1a9b      	subs	r3, r3, r2
 8011234:	461a      	mov	r2, r3
 8011236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011238:	4413      	add	r3, r2
 801123a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801123c:	2301      	movs	r3, #1
 801123e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011242:	e016      	b.n	8011272 <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011244:	4b33      	ldr	r3, [pc, #204]	; (8011314 <readCanToStructs+0x11a0>)
 8011246:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801124a:	885b      	ldrh	r3, [r3, #2]
 801124c:	461a      	mov	r2, r3
 801124e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011252:	4930      	ldr	r1, [pc, #192]	; (8011314 <readCanToStructs+0x11a0>)
 8011254:	0112      	lsls	r2, r2, #4
 8011256:	440a      	add	r2, r1
 8011258:	4413      	add	r3, r2
 801125a:	3304      	adds	r3, #4
 801125c:	781a      	ldrb	r2, [r3, #0]
 801125e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011260:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011264:	3301      	adds	r3, #1
 8011266:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011268:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801126c:	3301      	adds	r3, #1
 801126e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011272:	4b28      	ldr	r3, [pc, #160]	; (8011314 <readCanToStructs+0x11a0>)
 8011274:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011278:	885b      	ldrh	r3, [r3, #2]
 801127a:	4a26      	ldr	r2, [pc, #152]	; (8011314 <readCanToStructs+0x11a0>)
 801127c:	011b      	lsls	r3, r3, #4
 801127e:	4413      	add	r3, r2
 8011280:	330c      	adds	r3, #12
 8011282:	781b      	ldrb	r3, [r3, #0]
 8011284:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011288:	429a      	cmp	r2, r3
 801128a:	d3db      	bcc.n	8011244 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 801128c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011290:	4a21      	ldr	r2, [pc, #132]	; (8011318 <readCanToStructs+0x11a4>)
 8011292:	f240 4112 	movw	r1, #1042	; 0x412
 8011296:	fb01 f303 	mul.w	r3, r1, r3
 801129a:	4413      	add	r3, r2
 801129c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80112a0:	781b      	ldrb	r3, [r3, #0]
 80112a2:	461a      	mov	r2, r3
 80112a4:	4613      	mov	r3, r2
 80112a6:	00db      	lsls	r3, r3, #3
 80112a8:	1a9a      	subs	r2, r3, r2
 80112aa:	4b1a      	ldr	r3, [pc, #104]	; (8011314 <readCanToStructs+0x11a0>)
 80112ac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112b0:	885b      	ldrh	r3, [r3, #2]
 80112b2:	4918      	ldr	r1, [pc, #96]	; (8011314 <readCanToStructs+0x11a0>)
 80112b4:	011b      	lsls	r3, r3, #4
 80112b6:	440b      	add	r3, r1
 80112b8:	330c      	adds	r3, #12
 80112ba:	781b      	ldrb	r3, [r3, #0]
 80112bc:	3b01      	subs	r3, #1
 80112be:	4413      	add	r3, r2
 80112c0:	2b13      	cmp	r3, #19
 80112c2:	d966      	bls.n	8011392 <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 80112c4:	2300      	movs	r3, #0
 80112c6:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 80112c8:	2300      	movs	r3, #0
 80112ca:	603b      	str	r3, [r7, #0]
 80112cc:	1d3b      	adds	r3, r7, #4
 80112ce:	2224      	movs	r2, #36	; 0x24
 80112d0:	2100      	movs	r1, #0
 80112d2:	4618      	mov	r0, r3
 80112d4:	f011 f9c8 	bl	8022668 <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 80112d8:	463b      	mov	r3, r7
 80112da:	2214      	movs	r2, #20
 80112dc:	490f      	ldr	r1, [pc, #60]	; (801131c <readCanToStructs+0x11a8>)
 80112de:	4618      	mov	r0, r3
 80112e0:	f011 f99a 	bl	8022618 <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 80112e4:	463b      	mov	r3, r7
 80112e6:	2214      	movs	r2, #20
 80112e8:	4619      	mov	r1, r3
 80112ea:	2000      	movs	r0, #0
 80112ec:	f001 fe04 	bl	8012ef8 <GetCRC16>
 80112f0:	4603      	mov	r3, r0
 80112f2:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 80112f4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80112f6:	2b00      	cmp	r3, #0
 80112f8:	d11e      	bne.n	8011338 <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 80112fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112fe:	4a06      	ldr	r2, [pc, #24]	; (8011318 <readCanToStructs+0x11a4>)
 8011300:	f240 4112 	movw	r1, #1042	; 0x412
 8011304:	fb01 f303 	mul.w	r3, r1, r3
 8011308:	4413      	add	r3, r2
 801130a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801130e:	2200      	movs	r2, #0
 8011310:	701a      	strb	r2, [r3, #0]
				break;
 8011312:	e063      	b.n	80113dc <readCanToStructs+0x1268>
 8011314:	20005e38 	.word	0x20005e38
 8011318:	20005614 	.word	0x20005614
 801131c:	20002364 	.word	0x20002364
 8011320:	20000645 	.word	0x20000645
 8011324:	20000304 	.word	0x20000304
 8011328:	08026e5c 	.word	0x08026e5c
 801132c:	20002288 	.word	0x20002288
 8011330:	20000108 	.word	0x20000108
 8011334:	08026e70 	.word	0x08026e70
						if(Debug_flag == 1)
 8011338:	4bc7      	ldr	r3, [pc, #796]	; (8011658 <readCanToStructs+0x14e4>)
 801133a:	781b      	ldrb	r3, [r3, #0]
 801133c:	2b01      	cmp	r3, #1
 801133e:	d10a      	bne.n	8011356 <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8011340:	4bc6      	ldr	r3, [pc, #792]	; (801165c <readCanToStructs+0x14e8>)
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	4ac6      	ldr	r2, [pc, #792]	; (8011660 <readCanToStructs+0x14ec>)
 8011346:	3366      	adds	r3, #102	; 0x66
 8011348:	009b      	lsls	r3, r3, #2
 801134a:	4413      	add	r3, r2
 801134c:	685b      	ldr	r3, [r3, #4]
 801134e:	4619      	mov	r1, r3
 8011350:	48c4      	ldr	r0, [pc, #784]	; (8011664 <readCanToStructs+0x14f0>)
 8011352:	f011 fa71 	bl	8022838 <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8011356:	4bc1      	ldr	r3, [pc, #772]	; (801165c <readCanToStructs+0x14e8>)
 8011358:	781b      	ldrb	r3, [r3, #0]
 801135a:	461a      	mov	r2, r3
 801135c:	4613      	mov	r3, r2
 801135e:	009b      	lsls	r3, r3, #2
 8011360:	4413      	add	r3, r2
 8011362:	009b      	lsls	r3, r3, #2
 8011364:	4ac0      	ldr	r2, [pc, #768]	; (8011668 <readCanToStructs+0x14f4>)
 8011366:	4413      	add	r3, r2
 8011368:	2214      	movs	r2, #20
 801136a:	49bc      	ldr	r1, [pc, #752]	; (801165c <readCanToStructs+0x14e8>)
 801136c:	4618      	mov	r0, r3
 801136e:	f011 f953 	bl	8022618 <memcpy>
						Is_CAN_Exchange_happening = YES;
 8011372:	4bbe      	ldr	r3, [pc, #760]	; (801166c <readCanToStructs+0x14f8>)
 8011374:	2201      	movs	r2, #1
 8011376:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011378:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801137c:	4abc      	ldr	r2, [pc, #752]	; (8011670 <readCanToStructs+0x14fc>)
 801137e:	f240 4112 	movw	r1, #1042	; 0x412
 8011382:	fb01 f303 	mul.w	r3, r1, r3
 8011386:	4413      	add	r3, r2
 8011388:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801138c:	2200      	movs	r2, #0
 801138e:	701a      	strb	r2, [r3, #0]
				break;
 8011390:	e024      	b.n	80113dc <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8011392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011396:	4ab6      	ldr	r2, [pc, #728]	; (8011670 <readCanToStructs+0x14fc>)
 8011398:	f240 4112 	movw	r1, #1042	; 0x412
 801139c:	fb01 f303 	mul.w	r3, r1, r3
 80113a0:	4413      	add	r3, r2
 80113a2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 80113a6:	2201      	movs	r2, #1
 80113a8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 80113aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113ae:	49b0      	ldr	r1, [pc, #704]	; (8011670 <readCanToStructs+0x14fc>)
 80113b0:	f240 4212 	movw	r2, #1042	; 0x412
 80113b4:	fb03 f202 	mul.w	r2, r3, r2
 80113b8:	440a      	add	r2, r1
 80113ba:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80113be:	7812      	ldrb	r2, [r2, #0]
 80113c0:	3201      	adds	r2, #1
 80113c2:	b2d0      	uxtb	r0, r2
 80113c4:	4aaa      	ldr	r2, [pc, #680]	; (8011670 <readCanToStructs+0x14fc>)
 80113c6:	f240 4112 	movw	r1, #1042	; 0x412
 80113ca:	fb01 f303 	mul.w	r3, r1, r3
 80113ce:	4413      	add	r3, r2
 80113d0:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80113d4:	4602      	mov	r2, r0
 80113d6:	701a      	strb	r2, [r3, #0]
				break;
 80113d8:	e000      	b.n	80113dc <readCanToStructs+0x1268>
				break;
 80113da:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 80113dc:	4ba5      	ldr	r3, [pc, #660]	; (8011674 <readCanToStructs+0x1500>)
 80113de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113e2:	885b      	ldrh	r3, [r3, #2]
 80113e4:	011b      	lsls	r3, r3, #4
 80113e6:	4aa3      	ldr	r2, [pc, #652]	; (8011674 <readCanToStructs+0x1500>)
 80113e8:	4413      	add	r3, r2
 80113ea:	2210      	movs	r2, #16
 80113ec:	2100      	movs	r1, #0
 80113ee:	4618      	mov	r0, r3
 80113f0:	f011 f93a 	bl	8022668 <memset>
			canRead.Out++;
 80113f4:	4b9f      	ldr	r3, [pc, #636]	; (8011674 <readCanToStructs+0x1500>)
 80113f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113fa:	885b      	ldrh	r3, [r3, #2]
 80113fc:	3301      	adds	r3, #1
 80113fe:	b29a      	uxth	r2, r3
 8011400:	4b9c      	ldr	r3, [pc, #624]	; (8011674 <readCanToStructs+0x1500>)
 8011402:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011406:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011408:	4b9a      	ldr	r3, [pc, #616]	; (8011674 <readCanToStructs+0x1500>)
 801140a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801140e:	885b      	ldrh	r3, [r3, #2]
 8011410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011414:	d104      	bne.n	8011420 <readCanToStructs+0x12ac>
				canRead.Out = 0;
 8011416:	4b97      	ldr	r3, [pc, #604]	; (8011674 <readCanToStructs+0x1500>)
 8011418:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801141c:	2200      	movs	r2, #0
 801141e:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011420:	f7fe fe52 	bl	80100c8 <canDataReady>
 8011424:	4603      	mov	r3, r0
 8011426:	2b00      	cmp	r3, #0
 8011428:	f47e aecb 	bne.w	80101c2 <readCanToStructs+0x4e>
	break;
 801142c:	f001 bcff 	b.w	8012e2e <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011430:	4b90      	ldr	r3, [pc, #576]	; (8011674 <readCanToStructs+0x1500>)
 8011432:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011436:	885b      	ldrh	r3, [r3, #2]
 8011438:	4a8e      	ldr	r2, [pc, #568]	; (8011674 <readCanToStructs+0x1500>)
 801143a:	011b      	lsls	r3, r3, #4
 801143c:	4413      	add	r3, r2
 801143e:	330f      	adds	r3, #15
 8011440:	781b      	ldrb	r3, [r3, #0]
 8011442:	3b01      	subs	r3, #1
 8011444:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011448:	4b8a      	ldr	r3, [pc, #552]	; (8011674 <readCanToStructs+0x1500>)
 801144a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801144e:	885b      	ldrh	r3, [r3, #2]
 8011450:	4a88      	ldr	r2, [pc, #544]	; (8011674 <readCanToStructs+0x1500>)
 8011452:	011b      	lsls	r3, r3, #4
 8011454:	4413      	add	r3, r2
 8011456:	681b      	ldr	r3, [r3, #0]
 8011458:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 801145c:	f200 8672 	bhi.w	8012144 <readCanToStructs+0x1fd0>
 8011460:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011464:	d80a      	bhi.n	801147c <readCanToStructs+0x1308>
 8011466:	f240 1203 	movw	r2, #259	; 0x103
 801146a:	4293      	cmp	r3, r2
 801146c:	d01e      	beq.n	80114ac <readCanToStructs+0x1338>
 801146e:	f240 1209 	movw	r2, #265	; 0x109
 8011472:	4293      	cmp	r3, r2
 8011474:	f000 8108 	beq.w	8011688 <readCanToStructs+0x1514>
				break;
 8011478:	f000 be64 	b.w	8012144 <readCanToStructs+0x1fd0>
 801147c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011480:	2b07      	cmp	r3, #7
 8011482:	f200 865f 	bhi.w	8012144 <readCanToStructs+0x1fd0>
 8011486:	a201      	add	r2, pc, #4	; (adr r2, 801148c <readCanToStructs+0x1318>)
 8011488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801148c:	08011835 	.word	0x08011835
 8011490:	08011a19 	.word	0x08011a19
 8011494:	08012145 	.word	0x08012145
 8011498:	08012145 	.word	0x08012145
 801149c:	08011fa7 	.word	0x08011fa7
 80114a0:	08012145 	.word	0x08012145
 80114a4:	08011bc9 	.word	0x08011bc9
 80114a8:	08011dbb 	.word	0x08011dbb
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80114ac:	4b72      	ldr	r3, [pc, #456]	; (8011678 <readCanToStructs+0x1504>)
 80114ae:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80114b0:	4b70      	ldr	r3, [pc, #448]	; (8011674 <readCanToStructs+0x1500>)
 80114b2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80114b6:	885b      	ldrh	r3, [r3, #2]
 80114b8:	4a6e      	ldr	r2, [pc, #440]	; (8011674 <readCanToStructs+0x1500>)
 80114ba:	011b      	lsls	r3, r3, #4
 80114bc:	4413      	add	r3, r2
 80114be:	3304      	adds	r3, #4
 80114c0:	781b      	ldrb	r3, [r3, #0]
 80114c2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80114c6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80114ca:	2b00      	cmp	r3, #0
 80114cc:	d110      	bne.n	80114f0 <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80114ce:	2206      	movs	r2, #6
 80114d0:	2100      	movs	r1, #0
 80114d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114d4:	f011 f8c8 	bl	8022668 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80114d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114dc:	4a64      	ldr	r2, [pc, #400]	; (8011670 <readCanToStructs+0x14fc>)
 80114de:	f240 4112 	movw	r1, #1042	; 0x412
 80114e2:	fb01 f303 	mul.w	r3, r1, r3
 80114e6:	4413      	add	r3, r2
 80114e8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80114ec:	2200      	movs	r2, #0
 80114ee:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 80114f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114f4:	4a5e      	ldr	r2, [pc, #376]	; (8011670 <readCanToStructs+0x14fc>)
 80114f6:	f240 4112 	movw	r1, #1042	; 0x412
 80114fa:	fb01 f303 	mul.w	r3, r1, r3
 80114fe:	4413      	add	r3, r2
 8011500:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011504:	781b      	ldrb	r3, [r3, #0]
 8011506:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801150a:	429a      	cmp	r2, r3
 801150c:	d015      	beq.n	801153a <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 801150e:	485b      	ldr	r0, [pc, #364]	; (801167c <readCanToStructs+0x1508>)
 8011510:	f011 fa2e 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011514:	2206      	movs	r2, #6
 8011516:	2100      	movs	r1, #0
 8011518:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801151a:	f011 f8a5 	bl	8022668 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801151e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011522:	4a53      	ldr	r2, [pc, #332]	; (8011670 <readCanToStructs+0x14fc>)
 8011524:	f240 4112 	movw	r1, #1042	; 0x412
 8011528:	fb01 f303 	mul.w	r3, r1, r3
 801152c:	4413      	add	r3, r2
 801152e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011532:	2200      	movs	r2, #0
 8011534:	701a      	strb	r2, [r3, #0]
					break;
 8011536:	f000 be0a 	b.w	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801153a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801153e:	4613      	mov	r3, r2
 8011540:	00db      	lsls	r3, r3, #3
 8011542:	1a9b      	subs	r3, r3, r2
 8011544:	461a      	mov	r2, r3
 8011546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011548:	4413      	add	r3, r2
 801154a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801154c:	2301      	movs	r3, #1
 801154e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011552:	e016      	b.n	8011582 <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011554:	4b47      	ldr	r3, [pc, #284]	; (8011674 <readCanToStructs+0x1500>)
 8011556:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801155a:	885b      	ldrh	r3, [r3, #2]
 801155c:	461a      	mov	r2, r3
 801155e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011562:	4944      	ldr	r1, [pc, #272]	; (8011674 <readCanToStructs+0x1500>)
 8011564:	0112      	lsls	r2, r2, #4
 8011566:	440a      	add	r2, r1
 8011568:	4413      	add	r3, r2
 801156a:	3304      	adds	r3, #4
 801156c:	781a      	ldrb	r2, [r3, #0]
 801156e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011570:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011574:	3301      	adds	r3, #1
 8011576:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011578:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801157c:	3301      	adds	r3, #1
 801157e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011582:	4b3c      	ldr	r3, [pc, #240]	; (8011674 <readCanToStructs+0x1500>)
 8011584:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011588:	885b      	ldrh	r3, [r3, #2]
 801158a:	4a3a      	ldr	r2, [pc, #232]	; (8011674 <readCanToStructs+0x1500>)
 801158c:	011b      	lsls	r3, r3, #4
 801158e:	4413      	add	r3, r2
 8011590:	330c      	adds	r3, #12
 8011592:	781b      	ldrb	r3, [r3, #0]
 8011594:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011598:	429a      	cmp	r2, r3
 801159a:	d3db      	bcc.n	8011554 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 801159c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115a0:	4a33      	ldr	r2, [pc, #204]	; (8011670 <readCanToStructs+0x14fc>)
 80115a2:	f240 4112 	movw	r1, #1042	; 0x412
 80115a6:	fb01 f303 	mul.w	r3, r1, r3
 80115aa:	4413      	add	r3, r2
 80115ac:	f203 2307 	addw	r3, r3, #519	; 0x207
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	461a      	mov	r2, r3
 80115b4:	4613      	mov	r3, r2
 80115b6:	00db      	lsls	r3, r3, #3
 80115b8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 80115ba:	4b2e      	ldr	r3, [pc, #184]	; (8011674 <readCanToStructs+0x1500>)
 80115bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115c0:	885b      	ldrh	r3, [r3, #2]
 80115c2:	492c      	ldr	r1, [pc, #176]	; (8011674 <readCanToStructs+0x1500>)
 80115c4:	011b      	lsls	r3, r3, #4
 80115c6:	440b      	add	r3, r1
 80115c8:	330c      	adds	r3, #12
 80115ca:	781b      	ldrb	r3, [r3, #0]
 80115cc:	3b01      	subs	r3, #1
 80115ce:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 80115d0:	2b05      	cmp	r3, #5
 80115d2:	d91c      	bls.n	801160e <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80115d4:	4b2a      	ldr	r3, [pc, #168]	; (8011680 <readCanToStructs+0x150c>)
 80115d6:	4a28      	ldr	r2, [pc, #160]	; (8011678 <readCanToStructs+0x1504>)
 80115d8:	6811      	ldr	r1, [r2, #0]
 80115da:	6019      	str	r1, [r3, #0]
 80115dc:	8892      	ldrh	r2, [r2, #4]
 80115de:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80115e0:	4b1d      	ldr	r3, [pc, #116]	; (8011658 <readCanToStructs+0x14e4>)
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	2b01      	cmp	r3, #1
 80115e6:	d102      	bne.n	80115ee <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 80115e8:	4826      	ldr	r0, [pc, #152]	; (8011684 <readCanToStructs+0x1510>)
 80115ea:	f011 f9c1 	bl	8022970 <puts>
					Write_RTC();
 80115ee:	f7f9 fe6f 	bl	800b2d0 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80115f2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115f6:	4a1e      	ldr	r2, [pc, #120]	; (8011670 <readCanToStructs+0x14fc>)
 80115f8:	f240 4112 	movw	r1, #1042	; 0x412
 80115fc:	fb01 f303 	mul.w	r3, r1, r3
 8011600:	4413      	add	r3, r2
 8011602:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011606:	2200      	movs	r2, #0
 8011608:	701a      	strb	r2, [r3, #0]
				break;
 801160a:	f000 bda0 	b.w	801214e <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801160e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011612:	4a17      	ldr	r2, [pc, #92]	; (8011670 <readCanToStructs+0x14fc>)
 8011614:	f240 4112 	movw	r1, #1042	; 0x412
 8011618:	fb01 f303 	mul.w	r3, r1, r3
 801161c:	4413      	add	r3, r2
 801161e:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011622:	2201      	movs	r2, #1
 8011624:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801162a:	4911      	ldr	r1, [pc, #68]	; (8011670 <readCanToStructs+0x14fc>)
 801162c:	f240 4212 	movw	r2, #1042	; 0x412
 8011630:	fb03 f202 	mul.w	r2, r3, r2
 8011634:	440a      	add	r2, r1
 8011636:	f202 2207 	addw	r2, r2, #519	; 0x207
 801163a:	7812      	ldrb	r2, [r2, #0]
 801163c:	3201      	adds	r2, #1
 801163e:	b2d0      	uxtb	r0, r2
 8011640:	4a0b      	ldr	r2, [pc, #44]	; (8011670 <readCanToStructs+0x14fc>)
 8011642:	f240 4112 	movw	r1, #1042	; 0x412
 8011646:	fb01 f303 	mul.w	r3, r1, r3
 801164a:	4413      	add	r3, r2
 801164c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011650:	4602      	mov	r2, r0
 8011652:	701a      	strb	r2, [r3, #0]
				break;
 8011654:	f000 bd7b 	b.w	801214e <readCanToStructs+0x1fda>
 8011658:	20000645 	.word	0x20000645
 801165c:	20002364 	.word	0x20002364
 8011660:	20000304 	.word	0x20000304
 8011664:	08026e90 	.word	0x08026e90
 8011668:	20002288 	.word	0x20002288
 801166c:	20000108 	.word	0x20000108
 8011670:	20005614 	.word	0x20005614
 8011674:	20005e38 	.word	0x20005e38
 8011678:	20002bbc 	.word	0x20002bbc
 801167c:	08026ccc 	.word	0x08026ccc
 8011680:	20002bb4 	.word	0x20002bb4
 8011684:	08026ce8 	.word	0x08026ce8
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011688:	4bc5      	ldr	r3, [pc, #788]	; (80119a0 <readCanToStructs+0x182c>)
 801168a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801168c:	4bc5      	ldr	r3, [pc, #788]	; (80119a4 <readCanToStructs+0x1830>)
 801168e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011692:	885b      	ldrh	r3, [r3, #2]
 8011694:	4ac3      	ldr	r2, [pc, #780]	; (80119a4 <readCanToStructs+0x1830>)
 8011696:	011b      	lsls	r3, r3, #4
 8011698:	4413      	add	r3, r2
 801169a:	3304      	adds	r3, #4
 801169c:	781b      	ldrb	r3, [r3, #0]
 801169e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80116a2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	d110      	bne.n	80116cc <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80116aa:	2206      	movs	r2, #6
 80116ac:	2100      	movs	r1, #0
 80116ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116b0:	f010 ffda 	bl	8022668 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80116b4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116b8:	4abb      	ldr	r2, [pc, #748]	; (80119a8 <readCanToStructs+0x1834>)
 80116ba:	f240 4112 	movw	r1, #1042	; 0x412
 80116be:	fb01 f303 	mul.w	r3, r1, r3
 80116c2:	4413      	add	r3, r2
 80116c4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80116c8:	2200      	movs	r2, #0
 80116ca:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 80116cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116d0:	4ab5      	ldr	r2, [pc, #724]	; (80119a8 <readCanToStructs+0x1834>)
 80116d2:	f240 4112 	movw	r1, #1042	; 0x412
 80116d6:	fb01 f303 	mul.w	r3, r1, r3
 80116da:	4413      	add	r3, r2
 80116dc:	f203 2313 	addw	r3, r3, #531	; 0x213
 80116e0:	781b      	ldrb	r3, [r3, #0]
 80116e2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80116e6:	429a      	cmp	r2, r3
 80116e8:	d015      	beq.n	8011716 <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 80116ea:	48b0      	ldr	r0, [pc, #704]	; (80119ac <readCanToStructs+0x1838>)
 80116ec:	f011 f940 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80116f0:	2206      	movs	r2, #6
 80116f2:	2100      	movs	r1, #0
 80116f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80116f6:	f010 ffb7 	bl	8022668 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80116fa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80116fe:	4aaa      	ldr	r2, [pc, #680]	; (80119a8 <readCanToStructs+0x1834>)
 8011700:	f240 4112 	movw	r1, #1042	; 0x412
 8011704:	fb01 f303 	mul.w	r3, r1, r3
 8011708:	4413      	add	r3, r2
 801170a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801170e:	2200      	movs	r2, #0
 8011710:	701a      	strb	r2, [r3, #0]
					break;
 8011712:	f000 bd1c 	b.w	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011716:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801171a:	4613      	mov	r3, r2
 801171c:	00db      	lsls	r3, r3, #3
 801171e:	1a9b      	subs	r3, r3, r2
 8011720:	461a      	mov	r2, r3
 8011722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011724:	4413      	add	r3, r2
 8011726:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011728:	2301      	movs	r3, #1
 801172a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801172e:	e016      	b.n	801175e <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011730:	4b9c      	ldr	r3, [pc, #624]	; (80119a4 <readCanToStructs+0x1830>)
 8011732:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011736:	885b      	ldrh	r3, [r3, #2]
 8011738:	461a      	mov	r2, r3
 801173a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801173e:	4999      	ldr	r1, [pc, #612]	; (80119a4 <readCanToStructs+0x1830>)
 8011740:	0112      	lsls	r2, r2, #4
 8011742:	440a      	add	r2, r1
 8011744:	4413      	add	r3, r2
 8011746:	3304      	adds	r3, #4
 8011748:	781a      	ldrb	r2, [r3, #0]
 801174a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801174c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801174e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011750:	3301      	adds	r3, #1
 8011752:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011758:	3301      	adds	r3, #1
 801175a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801175e:	4b91      	ldr	r3, [pc, #580]	; (80119a4 <readCanToStructs+0x1830>)
 8011760:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011764:	885b      	ldrh	r3, [r3, #2]
 8011766:	4a8f      	ldr	r2, [pc, #572]	; (80119a4 <readCanToStructs+0x1830>)
 8011768:	011b      	lsls	r3, r3, #4
 801176a:	4413      	add	r3, r2
 801176c:	330c      	adds	r3, #12
 801176e:	781b      	ldrb	r3, [r3, #0]
 8011770:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011774:	429a      	cmp	r2, r3
 8011776:	d3db      	bcc.n	8011730 <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011778:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801177c:	4a8a      	ldr	r2, [pc, #552]	; (80119a8 <readCanToStructs+0x1834>)
 801177e:	f240 4112 	movw	r1, #1042	; 0x412
 8011782:	fb01 f303 	mul.w	r3, r1, r3
 8011786:	4413      	add	r3, r2
 8011788:	f203 2313 	addw	r3, r3, #531	; 0x213
 801178c:	781b      	ldrb	r3, [r3, #0]
 801178e:	461a      	mov	r2, r3
 8011790:	4613      	mov	r3, r2
 8011792:	00db      	lsls	r3, r3, #3
 8011794:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011796:	4b83      	ldr	r3, [pc, #524]	; (80119a4 <readCanToStructs+0x1830>)
 8011798:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801179c:	885b      	ldrh	r3, [r3, #2]
 801179e:	4981      	ldr	r1, [pc, #516]	; (80119a4 <readCanToStructs+0x1830>)
 80117a0:	011b      	lsls	r3, r3, #4
 80117a2:	440b      	add	r3, r1
 80117a4:	330c      	adds	r3, #12
 80117a6:	781b      	ldrb	r3, [r3, #0]
 80117a8:	3b01      	subs	r3, #1
 80117aa:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80117ac:	2b05      	cmp	r3, #5
 80117ae:	d91c      	bls.n	80117ea <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 80117b0:	4b7f      	ldr	r3, [pc, #508]	; (80119b0 <readCanToStructs+0x183c>)
 80117b2:	4a7b      	ldr	r2, [pc, #492]	; (80119a0 <readCanToStructs+0x182c>)
 80117b4:	6811      	ldr	r1, [r2, #0]
 80117b6:	6019      	str	r1, [r3, #0]
 80117b8:	8892      	ldrh	r2, [r2, #4]
 80117ba:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 80117bc:	4b7d      	ldr	r3, [pc, #500]	; (80119b4 <readCanToStructs+0x1840>)
 80117be:	781b      	ldrb	r3, [r3, #0]
 80117c0:	2b01      	cmp	r3, #1
 80117c2:	d102      	bne.n	80117ca <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 80117c4:	487c      	ldr	r0, [pc, #496]	; (80119b8 <readCanToStructs+0x1844>)
 80117c6:	f011 f8d3 	bl	8022970 <puts>
					Write_RTC();
 80117ca:	f7f9 fd81 	bl	800b2d0 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 80117ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117d2:	4a75      	ldr	r2, [pc, #468]	; (80119a8 <readCanToStructs+0x1834>)
 80117d4:	f240 4112 	movw	r1, #1042	; 0x412
 80117d8:	fb01 f303 	mul.w	r3, r1, r3
 80117dc:	4413      	add	r3, r2
 80117de:	f203 2313 	addw	r3, r3, #531	; 0x213
 80117e2:	2200      	movs	r2, #0
 80117e4:	701a      	strb	r2, [r3, #0]
				break;
 80117e6:	f000 bcb2 	b.w	801214e <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 80117ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117ee:	4a6e      	ldr	r2, [pc, #440]	; (80119a8 <readCanToStructs+0x1834>)
 80117f0:	f240 4112 	movw	r1, #1042	; 0x412
 80117f4:	fb01 f303 	mul.w	r3, r1, r3
 80117f8:	4413      	add	r3, r2
 80117fa:	f203 2312 	addw	r3, r3, #530	; 0x212
 80117fe:	2201      	movs	r2, #1
 8011800:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8011802:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011806:	4968      	ldr	r1, [pc, #416]	; (80119a8 <readCanToStructs+0x1834>)
 8011808:	f240 4212 	movw	r2, #1042	; 0x412
 801180c:	fb03 f202 	mul.w	r2, r3, r2
 8011810:	440a      	add	r2, r1
 8011812:	f202 2213 	addw	r2, r2, #531	; 0x213
 8011816:	7812      	ldrb	r2, [r2, #0]
 8011818:	3201      	adds	r2, #1
 801181a:	b2d0      	uxtb	r0, r2
 801181c:	4a62      	ldr	r2, [pc, #392]	; (80119a8 <readCanToStructs+0x1834>)
 801181e:	f240 4112 	movw	r1, #1042	; 0x412
 8011822:	fb01 f303 	mul.w	r3, r1, r3
 8011826:	4413      	add	r3, r2
 8011828:	f203 2313 	addw	r3, r3, #531	; 0x213
 801182c:	4602      	mov	r2, r0
 801182e:	701a      	strb	r2, [r3, #0]
				break;
 8011830:	f000 bc8d 	b.w	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011834:	4b61      	ldr	r3, [pc, #388]	; (80119bc <readCanToStructs+0x1848>)
 8011836:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011838:	4b5a      	ldr	r3, [pc, #360]	; (80119a4 <readCanToStructs+0x1830>)
 801183a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801183e:	885b      	ldrh	r3, [r3, #2]
 8011840:	4a58      	ldr	r2, [pc, #352]	; (80119a4 <readCanToStructs+0x1830>)
 8011842:	011b      	lsls	r3, r3, #4
 8011844:	4413      	add	r3, r2
 8011846:	3304      	adds	r3, #4
 8011848:	781b      	ldrb	r3, [r3, #0]
 801184a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801184e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011852:	2b00      	cmp	r3, #0
 8011854:	d110      	bne.n	8011878 <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011856:	2204      	movs	r2, #4
 8011858:	2100      	movs	r1, #0
 801185a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801185c:	f010 ff04 	bl	8022668 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011860:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011864:	4a50      	ldr	r2, [pc, #320]	; (80119a8 <readCanToStructs+0x1834>)
 8011866:	f240 4112 	movw	r1, #1042	; 0x412
 801186a:	fb01 f303 	mul.w	r3, r1, r3
 801186e:	4413      	add	r3, r2
 8011870:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011874:	2200      	movs	r2, #0
 8011876:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8011878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187c:	4a4a      	ldr	r2, [pc, #296]	; (80119a8 <readCanToStructs+0x1834>)
 801187e:	f240 4112 	movw	r1, #1042	; 0x412
 8011882:	fb01 f303 	mul.w	r3, r1, r3
 8011886:	4413      	add	r3, r2
 8011888:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801188c:	781b      	ldrb	r3, [r3, #0]
 801188e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011892:	429a      	cmp	r2, r3
 8011894:	d015      	beq.n	80118c2 <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011896:	484a      	ldr	r0, [pc, #296]	; (80119c0 <readCanToStructs+0x184c>)
 8011898:	f011 f86a 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 801189c:	2204      	movs	r2, #4
 801189e:	2100      	movs	r1, #0
 80118a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80118a2:	f010 fee1 	bl	8022668 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80118a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118aa:	4a3f      	ldr	r2, [pc, #252]	; (80119a8 <readCanToStructs+0x1834>)
 80118ac:	f240 4112 	movw	r1, #1042	; 0x412
 80118b0:	fb01 f303 	mul.w	r3, r1, r3
 80118b4:	4413      	add	r3, r2
 80118b6:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80118ba:	2200      	movs	r2, #0
 80118bc:	701a      	strb	r2, [r3, #0]
					break;
 80118be:	f000 bc46 	b.w	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 80118c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80118c6:	4613      	mov	r3, r2
 80118c8:	00db      	lsls	r3, r3, #3
 80118ca:	1a9b      	subs	r3, r3, r2
 80118cc:	461a      	mov	r2, r3
 80118ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118d0:	4413      	add	r3, r2
 80118d2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118d4:	2301      	movs	r3, #1
 80118d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118da:	e016      	b.n	801190a <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80118dc:	4b31      	ldr	r3, [pc, #196]	; (80119a4 <readCanToStructs+0x1830>)
 80118de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118e2:	885b      	ldrh	r3, [r3, #2]
 80118e4:	461a      	mov	r2, r3
 80118e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118ea:	492e      	ldr	r1, [pc, #184]	; (80119a4 <readCanToStructs+0x1830>)
 80118ec:	0112      	lsls	r2, r2, #4
 80118ee:	440a      	add	r2, r1
 80118f0:	4413      	add	r3, r2
 80118f2:	3304      	adds	r3, #4
 80118f4:	781a      	ldrb	r2, [r3, #0]
 80118f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118f8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80118fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118fc:	3301      	adds	r3, #1
 80118fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011900:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011904:	3301      	adds	r3, #1
 8011906:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801190a:	4b26      	ldr	r3, [pc, #152]	; (80119a4 <readCanToStructs+0x1830>)
 801190c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011910:	885b      	ldrh	r3, [r3, #2]
 8011912:	4a24      	ldr	r2, [pc, #144]	; (80119a4 <readCanToStructs+0x1830>)
 8011914:	011b      	lsls	r3, r3, #4
 8011916:	4413      	add	r3, r2
 8011918:	330c      	adds	r3, #12
 801191a:	781b      	ldrb	r3, [r3, #0]
 801191c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011920:	429a      	cmp	r2, r3
 8011922:	d3db      	bcc.n	80118dc <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011928:	4a1f      	ldr	r2, [pc, #124]	; (80119a8 <readCanToStructs+0x1834>)
 801192a:	f240 4112 	movw	r1, #1042	; 0x412
 801192e:	fb01 f303 	mul.w	r3, r1, r3
 8011932:	4413      	add	r3, r2
 8011934:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011938:	781b      	ldrb	r3, [r3, #0]
 801193a:	461a      	mov	r2, r3
 801193c:	4613      	mov	r3, r2
 801193e:	00db      	lsls	r3, r3, #3
 8011940:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011942:	4b18      	ldr	r3, [pc, #96]	; (80119a4 <readCanToStructs+0x1830>)
 8011944:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011948:	885b      	ldrh	r3, [r3, #2]
 801194a:	4916      	ldr	r1, [pc, #88]	; (80119a4 <readCanToStructs+0x1830>)
 801194c:	011b      	lsls	r3, r3, #4
 801194e:	440b      	add	r3, r1
 8011950:	330c      	adds	r3, #12
 8011952:	781b      	ldrb	r3, [r3, #0]
 8011954:	3b01      	subs	r3, #1
 8011956:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8011958:	2b03      	cmp	r3, #3
 801195a:	d939      	bls.n	80119d0 <readCanToStructs+0x185c>
 801195c:	4b17      	ldr	r3, [pc, #92]	; (80119bc <readCanToStructs+0x1848>)
 801195e:	681b      	ldr	r3, [r3, #0]
 8011960:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011962:	4b18      	ldr	r3, [pc, #96]	; (80119c4 <readCanToStructs+0x1850>)
 8011964:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8011966:	4b13      	ldr	r3, [pc, #76]	; (80119b4 <readCanToStructs+0x1840>)
 8011968:	781b      	ldrb	r3, [r3, #0]
 801196a:	2b01      	cmp	r3, #1
 801196c:	d102      	bne.n	8011974 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 801196e:	4816      	ldr	r0, [pc, #88]	; (80119c8 <readCanToStructs+0x1854>)
 8011970:	f010 fffe 	bl	8022970 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011974:	4b15      	ldr	r3, [pc, #84]	; (80119cc <readCanToStructs+0x1858>)
 8011976:	2201      	movs	r2, #1
 8011978:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 801197a:	f003 ff53 	bl	8015824 <HAL_GetTick>
 801197e:	4603      	mov	r3, r0
 8011980:	4a12      	ldr	r2, [pc, #72]	; (80119cc <readCanToStructs+0x1858>)
 8011982:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011988:	4a07      	ldr	r2, [pc, #28]	; (80119a8 <readCanToStructs+0x1834>)
 801198a:	f240 4112 	movw	r1, #1042	; 0x412
 801198e:	fb01 f303 	mul.w	r3, r1, r3
 8011992:	4413      	add	r3, r2
 8011994:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011998:	2200      	movs	r2, #0
 801199a:	701a      	strb	r2, [r3, #0]
				break;
 801199c:	e3d7      	b.n	801214e <readCanToStructs+0x1fda>
 801199e:	bf00      	nop
 80119a0:	20002bbc 	.word	0x20002bbc
 80119a4:	20005e38 	.word	0x20005e38
 80119a8:	20005614 	.word	0x20005614
 80119ac:	08026cfc 	.word	0x08026cfc
 80119b0:	20002bb4 	.word	0x20002bb4
 80119b4:	20000645 	.word	0x20000645
 80119b8:	08026d18 	.word	0x08026d18
 80119bc:	20003864 	.word	0x20003864
 80119c0:	08026d30 	.word	0x08026d30
 80119c4:	20003860 	.word	0x20003860
 80119c8:	08026ea4 	.word	0x08026ea4
 80119cc:	20003868 	.word	0x20003868
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80119d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119d4:	4a98      	ldr	r2, [pc, #608]	; (8011c38 <readCanToStructs+0x1ac4>)
 80119d6:	f240 4112 	movw	r1, #1042	; 0x412
 80119da:	fb01 f303 	mul.w	r3, r1, r3
 80119de:	4413      	add	r3, r2
 80119e0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80119e4:	2201      	movs	r2, #1
 80119e6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80119e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80119ec:	4992      	ldr	r1, [pc, #584]	; (8011c38 <readCanToStructs+0x1ac4>)
 80119ee:	f240 4212 	movw	r2, #1042	; 0x412
 80119f2:	fb03 f202 	mul.w	r2, r3, r2
 80119f6:	440a      	add	r2, r1
 80119f8:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80119fc:	7812      	ldrb	r2, [r2, #0]
 80119fe:	3201      	adds	r2, #1
 8011a00:	b2d0      	uxtb	r0, r2
 8011a02:	4a8d      	ldr	r2, [pc, #564]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011a04:	f240 4112 	movw	r1, #1042	; 0x412
 8011a08:	fb01 f303 	mul.w	r3, r1, r3
 8011a0c:	4413      	add	r3, r2
 8011a0e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011a12:	4602      	mov	r2, r0
 8011a14:	701a      	strb	r2, [r3, #0]
				break;
 8011a16:	e39a      	b.n	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011a18:	4b88      	ldr	r3, [pc, #544]	; (8011c3c <readCanToStructs+0x1ac8>)
 8011a1a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011a1c:	4b88      	ldr	r3, [pc, #544]	; (8011c40 <readCanToStructs+0x1acc>)
 8011a1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a22:	885b      	ldrh	r3, [r3, #2]
 8011a24:	4a86      	ldr	r2, [pc, #536]	; (8011c40 <readCanToStructs+0x1acc>)
 8011a26:	011b      	lsls	r3, r3, #4
 8011a28:	4413      	add	r3, r2
 8011a2a:	3304      	adds	r3, #4
 8011a2c:	781b      	ldrb	r3, [r3, #0]
 8011a2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011a32:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d110      	bne.n	8011a5c <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011a3a:	2204      	movs	r2, #4
 8011a3c:	2100      	movs	r1, #0
 8011a3e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a40:	f010 fe12 	bl	8022668 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011a44:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a48:	4a7b      	ldr	r2, [pc, #492]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011a4a:	f240 4112 	movw	r1, #1042	; 0x412
 8011a4e:	fb01 f303 	mul.w	r3, r1, r3
 8011a52:	4413      	add	r3, r2
 8011a54:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011a58:	2200      	movs	r2, #0
 8011a5a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8011a5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a60:	4a75      	ldr	r2, [pc, #468]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011a62:	f240 4112 	movw	r1, #1042	; 0x412
 8011a66:	fb01 f303 	mul.w	r3, r1, r3
 8011a6a:	4413      	add	r3, r2
 8011a6c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011a70:	781b      	ldrb	r3, [r3, #0]
 8011a72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011a76:	429a      	cmp	r2, r3
 8011a78:	d014      	beq.n	8011aa4 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 8011a7a:	4872      	ldr	r0, [pc, #456]	; (8011c44 <readCanToStructs+0x1ad0>)
 8011a7c:	f010 ff78 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011a80:	2204      	movs	r2, #4
 8011a82:	2100      	movs	r1, #0
 8011a84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a86:	f010 fdef 	bl	8022668 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a8e:	4a6a      	ldr	r2, [pc, #424]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011a90:	f240 4112 	movw	r1, #1042	; 0x412
 8011a94:	fb01 f303 	mul.w	r3, r1, r3
 8011a98:	4413      	add	r3, r2
 8011a9a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	701a      	strb	r2, [r3, #0]
					break;
 8011aa2:	e354      	b.n	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011aa4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011aa8:	4613      	mov	r3, r2
 8011aaa:	00db      	lsls	r3, r3, #3
 8011aac:	1a9b      	subs	r3, r3, r2
 8011aae:	461a      	mov	r2, r3
 8011ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ab2:	4413      	add	r3, r2
 8011ab4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ab6:	2301      	movs	r3, #1
 8011ab8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011abc:	e016      	b.n	8011aec <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011abe:	4b60      	ldr	r3, [pc, #384]	; (8011c40 <readCanToStructs+0x1acc>)
 8011ac0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ac4:	885b      	ldrh	r3, [r3, #2]
 8011ac6:	461a      	mov	r2, r3
 8011ac8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011acc:	495c      	ldr	r1, [pc, #368]	; (8011c40 <readCanToStructs+0x1acc>)
 8011ace:	0112      	lsls	r2, r2, #4
 8011ad0:	440a      	add	r2, r1
 8011ad2:	4413      	add	r3, r2
 8011ad4:	3304      	adds	r3, #4
 8011ad6:	781a      	ldrb	r2, [r3, #0]
 8011ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ada:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ade:	3301      	adds	r3, #1
 8011ae0:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ae2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ae6:	3301      	adds	r3, #1
 8011ae8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011aec:	4b54      	ldr	r3, [pc, #336]	; (8011c40 <readCanToStructs+0x1acc>)
 8011aee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011af2:	885b      	ldrh	r3, [r3, #2]
 8011af4:	4a52      	ldr	r2, [pc, #328]	; (8011c40 <readCanToStructs+0x1acc>)
 8011af6:	011b      	lsls	r3, r3, #4
 8011af8:	4413      	add	r3, r2
 8011afa:	330c      	adds	r3, #12
 8011afc:	781b      	ldrb	r3, [r3, #0]
 8011afe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b02:	429a      	cmp	r2, r3
 8011b04:	d3db      	bcc.n	8011abe <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011b06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b0a:	4a4b      	ldr	r2, [pc, #300]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011b0c:	f240 4112 	movw	r1, #1042	; 0x412
 8011b10:	fb01 f303 	mul.w	r3, r1, r3
 8011b14:	4413      	add	r3, r2
 8011b16:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011b1a:	781b      	ldrb	r3, [r3, #0]
 8011b1c:	461a      	mov	r2, r3
 8011b1e:	4613      	mov	r3, r2
 8011b20:	00db      	lsls	r3, r3, #3
 8011b22:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 8011b24:	4b46      	ldr	r3, [pc, #280]	; (8011c40 <readCanToStructs+0x1acc>)
 8011b26:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b2a:	885b      	ldrh	r3, [r3, #2]
 8011b2c:	4944      	ldr	r1, [pc, #272]	; (8011c40 <readCanToStructs+0x1acc>)
 8011b2e:	011b      	lsls	r3, r3, #4
 8011b30:	440b      	add	r3, r1
 8011b32:	330c      	adds	r3, #12
 8011b34:	781b      	ldrb	r3, [r3, #0]
 8011b36:	3b01      	subs	r3, #1
 8011b38:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011b3a:	2b03      	cmp	r3, #3
 8011b3c:	d920      	bls.n	8011b80 <readCanToStructs+0x1a0c>
 8011b3e:	4b3f      	ldr	r3, [pc, #252]	; (8011c3c <readCanToStructs+0x1ac8>)
 8011b40:	681b      	ldr	r3, [r3, #0]
 8011b42:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 8011b44:	4b40      	ldr	r3, [pc, #256]	; (8011c48 <readCanToStructs+0x1ad4>)
 8011b46:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 8011b48:	4b40      	ldr	r3, [pc, #256]	; (8011c4c <readCanToStructs+0x1ad8>)
 8011b4a:	781b      	ldrb	r3, [r3, #0]
 8011b4c:	2b01      	cmp	r3, #1
 8011b4e:	d102      	bne.n	8011b56 <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 8011b50:	483f      	ldr	r0, [pc, #252]	; (8011c50 <readCanToStructs+0x1adc>)
 8011b52:	f010 ff0d 	bl	8022970 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011b56:	4b3f      	ldr	r3, [pc, #252]	; (8011c54 <readCanToStructs+0x1ae0>)
 8011b58:	2201      	movs	r2, #1
 8011b5a:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011b5c:	f003 fe62 	bl	8015824 <HAL_GetTick>
 8011b60:	4603      	mov	r3, r0
 8011b62:	4a3c      	ldr	r2, [pc, #240]	; (8011c54 <readCanToStructs+0x1ae0>)
 8011b64:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011b66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b6a:	4a33      	ldr	r2, [pc, #204]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011b6c:	f240 4112 	movw	r1, #1042	; 0x412
 8011b70:	fb01 f303 	mul.w	r3, r1, r3
 8011b74:	4413      	add	r3, r2
 8011b76:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011b7a:	2200      	movs	r2, #0
 8011b7c:	701a      	strb	r2, [r3, #0]
				break;
 8011b7e:	e2e6      	b.n	801214e <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8011b80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b84:	4a2c      	ldr	r2, [pc, #176]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011b86:	f240 4112 	movw	r1, #1042	; 0x412
 8011b8a:	fb01 f303 	mul.w	r3, r1, r3
 8011b8e:	4413      	add	r3, r2
 8011b90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011b94:	2201      	movs	r2, #1
 8011b96:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b9c:	4926      	ldr	r1, [pc, #152]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011b9e:	f240 4212 	movw	r2, #1042	; 0x412
 8011ba2:	fb03 f202 	mul.w	r2, r3, r2
 8011ba6:	440a      	add	r2, r1
 8011ba8:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011bac:	7812      	ldrb	r2, [r2, #0]
 8011bae:	3201      	adds	r2, #1
 8011bb0:	b2d0      	uxtb	r0, r2
 8011bb2:	4a21      	ldr	r2, [pc, #132]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011bb4:	f240 4112 	movw	r1, #1042	; 0x412
 8011bb8:	fb01 f303 	mul.w	r3, r1, r3
 8011bbc:	4413      	add	r3, r2
 8011bbe:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011bc2:	4602      	mov	r2, r0
 8011bc4:	701a      	strb	r2, [r3, #0]
				break;
 8011bc6:	e2c2      	b.n	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011bc8:	4b23      	ldr	r3, [pc, #140]	; (8011c58 <readCanToStructs+0x1ae4>)
 8011bca:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011bcc:	4b1c      	ldr	r3, [pc, #112]	; (8011c40 <readCanToStructs+0x1acc>)
 8011bce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bd2:	885b      	ldrh	r3, [r3, #2]
 8011bd4:	4a1a      	ldr	r2, [pc, #104]	; (8011c40 <readCanToStructs+0x1acc>)
 8011bd6:	011b      	lsls	r3, r3, #4
 8011bd8:	4413      	add	r3, r2
 8011bda:	3304      	adds	r3, #4
 8011bdc:	781b      	ldrb	r3, [r3, #0]
 8011bde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011be2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d005      	beq.n	8011bf6 <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011bea:	4b1c      	ldr	r3, [pc, #112]	; (8011c5c <readCanToStructs+0x1ae8>)
 8011bec:	881b      	ldrh	r3, [r3, #0]
 8011bee:	461a      	mov	r2, r3
 8011bf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011bf2:	4413      	add	r3, r2
 8011bf4:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011bf6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011bfa:	2b00      	cmp	r3, #0
 8011bfc:	d117      	bne.n	8011c2e <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011bfe:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011c02:	2100      	movs	r1, #0
 8011c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011c06:	f010 fd2f 	bl	8022668 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011c0a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011c0e:	4a0a      	ldr	r2, [pc, #40]	; (8011c38 <readCanToStructs+0x1ac4>)
 8011c10:	f240 4112 	movw	r1, #1042	; 0x412
 8011c14:	fb01 f303 	mul.w	r3, r1, r3
 8011c18:	4413      	add	r3, r2
 8011c1a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011c1e:	2200      	movs	r2, #0
 8011c20:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011c22:	4b0e      	ldr	r3, [pc, #56]	; (8011c5c <readCanToStructs+0x1ae8>)
 8011c24:	2200      	movs	r2, #0
 8011c26:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011c28:	4b0d      	ldr	r3, [pc, #52]	; (8011c60 <readCanToStructs+0x1aec>)
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c2e:	2301      	movs	r3, #1
 8011c30:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c34:	e033      	b.n	8011c9e <readCanToStructs+0x1b2a>
 8011c36:	bf00      	nop
 8011c38:	20005614 	.word	0x20005614
 8011c3c:	20003864 	.word	0x20003864
 8011c40:	20005e38 	.word	0x20005e38
 8011c44:	08026d64 	.word	0x08026d64
 8011c48:	20003860 	.word	0x20003860
 8011c4c:	20000645 	.word	0x20000645
 8011c50:	08026eb0 	.word	0x08026eb0
 8011c54:	20003868 	.word	0x20003868
 8011c58:	20003e90 	.word	0x20003e90
 8011c5c:	20009f90 	.word	0x20009f90
 8011c60:	20009f92 	.word	0x20009f92
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011c64:	4ba0      	ldr	r3, [pc, #640]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011c66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c6a:	885b      	ldrh	r3, [r3, #2]
 8011c6c:	461a      	mov	r2, r3
 8011c6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c72:	499d      	ldr	r1, [pc, #628]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011c74:	0112      	lsls	r2, r2, #4
 8011c76:	440a      	add	r2, r1
 8011c78:	4413      	add	r3, r2
 8011c7a:	3304      	adds	r3, #4
 8011c7c:	781a      	ldrb	r2, [r3, #0]
 8011c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c80:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011c84:	3301      	adds	r3, #1
 8011c86:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011c88:	4b98      	ldr	r3, [pc, #608]	; (8011eec <readCanToStructs+0x1d78>)
 8011c8a:	881b      	ldrh	r3, [r3, #0]
 8011c8c:	3301      	adds	r3, #1
 8011c8e:	b29a      	uxth	r2, r3
 8011c90:	4b96      	ldr	r3, [pc, #600]	; (8011eec <readCanToStructs+0x1d78>)
 8011c92:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011c94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011c98:	3301      	adds	r3, #1
 8011c9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011c9e:	4b92      	ldr	r3, [pc, #584]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011ca0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ca4:	885b      	ldrh	r3, [r3, #2]
 8011ca6:	4a90      	ldr	r2, [pc, #576]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011ca8:	011b      	lsls	r3, r3, #4
 8011caa:	4413      	add	r3, r2
 8011cac:	330c      	adds	r3, #12
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011cb4:	429a      	cmp	r2, r3
 8011cb6:	d3d5      	bcc.n	8011c64 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011cb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cbc:	4a8c      	ldr	r2, [pc, #560]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011cbe:	f240 4112 	movw	r1, #1042	; 0x412
 8011cc2:	fb01 f303 	mul.w	r3, r1, r3
 8011cc6:	4413      	add	r3, r2
 8011cc8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011ccc:	781b      	ldrb	r3, [r3, #0]
 8011cce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d026      	beq.n	8011d24 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8011cd6:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cde:	4a84      	ldr	r2, [pc, #528]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011ce0:	f240 4012 	movw	r0, #1042	; 0x412
 8011ce4:	fb00 f303 	mul.w	r3, r0, r3
 8011ce8:	4413      	add	r3, r2
 8011cea:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011cee:	781b      	ldrb	r3, [r3, #0]
 8011cf0:	461a      	mov	r2, r3
 8011cf2:	4880      	ldr	r0, [pc, #512]	; (8011ef4 <readCanToStructs+0x1d80>)
 8011cf4:	f010 fda0 	bl	8022838 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011cf8:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011cfc:	2100      	movs	r1, #0
 8011cfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d00:	f010 fcb2 	bl	8022668 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011d04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d08:	4a79      	ldr	r2, [pc, #484]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011d0a:	f240 4112 	movw	r1, #1042	; 0x412
 8011d0e:	fb01 f303 	mul.w	r3, r1, r3
 8011d12:	4413      	add	r3, r2
 8011d14:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011d18:	2200      	movs	r2, #0
 8011d1a:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011d1c:	4b73      	ldr	r3, [pc, #460]	; (8011eec <readCanToStructs+0x1d78>)
 8011d1e:	2200      	movs	r2, #0
 8011d20:	801a      	strh	r2, [r3, #0]
					break;
 8011d22:	e214      	b.n	801214e <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8011d24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d28:	4971      	ldr	r1, [pc, #452]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011d2a:	f240 4212 	movw	r2, #1042	; 0x412
 8011d2e:	fb03 f202 	mul.w	r2, r3, r2
 8011d32:	440a      	add	r2, r1
 8011d34:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8011d38:	7812      	ldrb	r2, [r2, #0]
 8011d3a:	3201      	adds	r2, #1
 8011d3c:	b2d0      	uxtb	r0, r2
 8011d3e:	4a6c      	ldr	r2, [pc, #432]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011d40:	f240 4112 	movw	r1, #1042	; 0x412
 8011d44:	fb01 f303 	mul.w	r3, r1, r3
 8011d48:	4413      	add	r3, r2
 8011d4a:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011d4e:	4602      	mov	r2, r0
 8011d50:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011d52:	4b69      	ldr	r3, [pc, #420]	; (8011ef8 <readCanToStructs+0x1d84>)
 8011d54:	881b      	ldrh	r3, [r3, #0]
 8011d56:	3304      	adds	r3, #4
 8011d58:	b29a      	uxth	r2, r3
 8011d5a:	4b68      	ldr	r3, [pc, #416]	; (8011efc <readCanToStructs+0x1d88>)
 8011d5c:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011d5e:	4b63      	ldr	r3, [pc, #396]	; (8011eec <readCanToStructs+0x1d78>)
 8011d60:	881a      	ldrh	r2, [r3, #0]
 8011d62:	4b66      	ldr	r3, [pc, #408]	; (8011efc <readCanToStructs+0x1d88>)
 8011d64:	881b      	ldrh	r3, [r3, #0]
 8011d66:	429a      	cmp	r2, r3
 8011d68:	f0c0 81ee 	bcc.w	8012148 <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 8011d6c:	4864      	ldr	r0, [pc, #400]	; (8011f00 <readCanToStructs+0x1d8c>)
 8011d6e:	f010 fdff 	bl	8022970 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011d72:	4a64      	ldr	r2, [pc, #400]	; (8011f04 <readCanToStructs+0x1d90>)
 8011d74:	4b60      	ldr	r3, [pc, #384]	; (8011ef8 <readCanToStructs+0x1d84>)
 8011d76:	4610      	mov	r0, r2
 8011d78:	4619      	mov	r1, r3
 8011d7a:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011d7e:	461a      	mov	r2, r3
 8011d80:	f010 fc4a 	bl	8022618 <memcpy>
					DataTraverser = 0;
 8011d84:	4b59      	ldr	r3, [pc, #356]	; (8011eec <readCanToStructs+0x1d78>)
 8011d86:	2200      	movs	r2, #0
 8011d88:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011d8a:	4b5c      	ldr	r3, [pc, #368]	; (8011efc <readCanToStructs+0x1d88>)
 8011d8c:	2200      	movs	r2, #0
 8011d8e:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011d90:	4b5d      	ldr	r3, [pc, #372]	; (8011f08 <readCanToStructs+0x1d94>)
 8011d92:	2201      	movs	r2, #1
 8011d94:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011d96:	f003 fd45 	bl	8015824 <HAL_GetTick>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	4a5a      	ldr	r2, [pc, #360]	; (8011f08 <readCanToStructs+0x1d94>)
 8011d9e:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011da4:	4a52      	ldr	r2, [pc, #328]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011da6:	f240 4112 	movw	r1, #1042	; 0x412
 8011daa:	fb01 f303 	mul.w	r3, r1, r3
 8011dae:	4413      	add	r3, r2
 8011db0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011db4:	2200      	movs	r2, #0
 8011db6:	701a      	strb	r2, [r3, #0]
				break;
 8011db8:	e1c6      	b.n	8012148 <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011dba:	4b4f      	ldr	r3, [pc, #316]	; (8011ef8 <readCanToStructs+0x1d84>)
 8011dbc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011dbe:	4b4a      	ldr	r3, [pc, #296]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011dc0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011dc4:	885b      	ldrh	r3, [r3, #2]
 8011dc6:	4a48      	ldr	r2, [pc, #288]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011dc8:	011b      	lsls	r3, r3, #4
 8011dca:	4413      	add	r3, r2
 8011dcc:	3304      	adds	r3, #4
 8011dce:	781b      	ldrb	r3, [r3, #0]
 8011dd0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011dd4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d005      	beq.n	8011de8 <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011ddc:	4b43      	ldr	r3, [pc, #268]	; (8011eec <readCanToStructs+0x1d78>)
 8011dde:	881b      	ldrh	r3, [r3, #0]
 8011de0:	461a      	mov	r2, r3
 8011de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011de4:	4413      	add	r3, r2
 8011de6:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011de8:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d117      	bne.n	8011e20 <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011df0:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011df4:	2100      	movs	r1, #0
 8011df6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011df8:	f010 fc36 	bl	8022668 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011dfc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e00:	4a3b      	ldr	r2, [pc, #236]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011e02:	f240 4112 	movw	r1, #1042	; 0x412
 8011e06:	fb01 f303 	mul.w	r3, r1, r3
 8011e0a:	4413      	add	r3, r2
 8011e0c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011e10:	2200      	movs	r2, #0
 8011e12:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011e14:	4b35      	ldr	r3, [pc, #212]	; (8011eec <readCanToStructs+0x1d78>)
 8011e16:	2200      	movs	r2, #0
 8011e18:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011e1a:	4b38      	ldr	r3, [pc, #224]	; (8011efc <readCanToStructs+0x1d88>)
 8011e1c:	2200      	movs	r2, #0
 8011e1e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e20:	2301      	movs	r3, #1
 8011e22:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e26:	e01c      	b.n	8011e62 <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011e28:	4b2f      	ldr	r3, [pc, #188]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011e2a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e2e:	885b      	ldrh	r3, [r3, #2]
 8011e30:	461a      	mov	r2, r3
 8011e32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e36:	492c      	ldr	r1, [pc, #176]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011e38:	0112      	lsls	r2, r2, #4
 8011e3a:	440a      	add	r2, r1
 8011e3c:	4413      	add	r3, r2
 8011e3e:	3304      	adds	r3, #4
 8011e40:	781a      	ldrb	r2, [r3, #0]
 8011e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e44:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e48:	3301      	adds	r3, #1
 8011e4a:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011e4c:	4b27      	ldr	r3, [pc, #156]	; (8011eec <readCanToStructs+0x1d78>)
 8011e4e:	881b      	ldrh	r3, [r3, #0]
 8011e50:	3301      	adds	r3, #1
 8011e52:	b29a      	uxth	r2, r3
 8011e54:	4b25      	ldr	r3, [pc, #148]	; (8011eec <readCanToStructs+0x1d78>)
 8011e56:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011e58:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011e5c:	3301      	adds	r3, #1
 8011e5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011e62:	4b21      	ldr	r3, [pc, #132]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011e64:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e68:	885b      	ldrh	r3, [r3, #2]
 8011e6a:	4a1f      	ldr	r2, [pc, #124]	; (8011ee8 <readCanToStructs+0x1d74>)
 8011e6c:	011b      	lsls	r3, r3, #4
 8011e6e:	4413      	add	r3, r2
 8011e70:	330c      	adds	r3, #12
 8011e72:	781b      	ldrb	r3, [r3, #0]
 8011e74:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011e78:	429a      	cmp	r2, r3
 8011e7a:	d3d5      	bcc.n	8011e28 <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8011e7c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e80:	4a1b      	ldr	r2, [pc, #108]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011e82:	f240 4112 	movw	r1, #1042	; 0x412
 8011e86:	fb01 f303 	mul.w	r3, r1, r3
 8011e8a:	4413      	add	r3, r2
 8011e8c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011e96:	429a      	cmp	r2, r3
 8011e98:	d03a      	beq.n	8011f10 <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8011e9a:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011e9e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ea2:	4a13      	ldr	r2, [pc, #76]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011ea4:	f240 4012 	movw	r0, #1042	; 0x412
 8011ea8:	fb00 f303 	mul.w	r3, r0, r3
 8011eac:	4413      	add	r3, r2
 8011eae:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011eb2:	781b      	ldrb	r3, [r3, #0]
 8011eb4:	461a      	mov	r2, r3
 8011eb6:	4815      	ldr	r0, [pc, #84]	; (8011f0c <readCanToStructs+0x1d98>)
 8011eb8:	f010 fcbe 	bl	8022838 <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011ebc:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011ec0:	2100      	movs	r1, #0
 8011ec2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ec4:	f010 fbd0 	bl	8022668 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011ec8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ecc:	4a08      	ldr	r2, [pc, #32]	; (8011ef0 <readCanToStructs+0x1d7c>)
 8011ece:	f240 4112 	movw	r1, #1042	; 0x412
 8011ed2:	fb01 f303 	mul.w	r3, r1, r3
 8011ed6:	4413      	add	r3, r2
 8011ed8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011edc:	2200      	movs	r2, #0
 8011ede:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011ee0:	4b02      	ldr	r3, [pc, #8]	; (8011eec <readCanToStructs+0x1d78>)
 8011ee2:	2200      	movs	r2, #0
 8011ee4:	801a      	strh	r2, [r3, #0]
					break;
 8011ee6:	e132      	b.n	801214e <readCanToStructs+0x1fda>
 8011ee8:	20005e38 	.word	0x20005e38
 8011eec:	20009f90 	.word	0x20009f90
 8011ef0:	20005614 	.word	0x20005614
 8011ef4:	08026ebc 	.word	0x08026ebc
 8011ef8:	20003e90 	.word	0x20003e90
 8011efc:	20009f92 	.word	0x20009f92
 8011f00:	08026ee8 	.word	0x08026ee8
 8011f04:	20003c8c 	.word	0x20003c8c
 8011f08:	20003868 	.word	0x20003868
 8011f0c:	08026f00 	.word	0x08026f00
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8011f10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f14:	49c2      	ldr	r1, [pc, #776]	; (8012220 <readCanToStructs+0x20ac>)
 8011f16:	f240 4212 	movw	r2, #1042	; 0x412
 8011f1a:	fb03 f202 	mul.w	r2, r3, r2
 8011f1e:	440a      	add	r2, r1
 8011f20:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8011f24:	7812      	ldrb	r2, [r2, #0]
 8011f26:	3201      	adds	r2, #1
 8011f28:	b2d0      	uxtb	r0, r2
 8011f2a:	4abd      	ldr	r2, [pc, #756]	; (8012220 <readCanToStructs+0x20ac>)
 8011f2c:	f240 4112 	movw	r1, #1042	; 0x412
 8011f30:	fb01 f303 	mul.w	r3, r1, r3
 8011f34:	4413      	add	r3, r2
 8011f36:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011f3a:	4602      	mov	r2, r0
 8011f3c:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 8011f3e:	4bb9      	ldr	r3, [pc, #740]	; (8012224 <readCanToStructs+0x20b0>)
 8011f40:	881b      	ldrh	r3, [r3, #0]
 8011f42:	3304      	adds	r3, #4
 8011f44:	b29a      	uxth	r2, r3
 8011f46:	4bb8      	ldr	r3, [pc, #736]	; (8012228 <readCanToStructs+0x20b4>)
 8011f48:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 8011f4a:	4bb8      	ldr	r3, [pc, #736]	; (801222c <readCanToStructs+0x20b8>)
 8011f4c:	881a      	ldrh	r2, [r3, #0]
 8011f4e:	4bb6      	ldr	r3, [pc, #728]	; (8012228 <readCanToStructs+0x20b4>)
 8011f50:	881b      	ldrh	r3, [r3, #0]
 8011f52:	429a      	cmp	r2, r3
 8011f54:	f0c0 80fa 	bcc.w	801214c <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 8011f58:	48b5      	ldr	r0, [pc, #724]	; (8012230 <readCanToStructs+0x20bc>)
 8011f5a:	f010 fd09 	bl	8022970 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 8011f5e:	4ab5      	ldr	r2, [pc, #724]	; (8012234 <readCanToStructs+0x20c0>)
 8011f60:	4bb0      	ldr	r3, [pc, #704]	; (8012224 <readCanToStructs+0x20b0>)
 8011f62:	4610      	mov	r0, r2
 8011f64:	4619      	mov	r1, r3
 8011f66:	f44f 7301 	mov.w	r3, #516	; 0x204
 8011f6a:	461a      	mov	r2, r3
 8011f6c:	f010 fb54 	bl	8022618 <memcpy>
					DataTraverser = 0;
 8011f70:	4bae      	ldr	r3, [pc, #696]	; (801222c <readCanToStructs+0x20b8>)
 8011f72:	2200      	movs	r2, #0
 8011f74:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011f76:	4bac      	ldr	r3, [pc, #688]	; (8012228 <readCanToStructs+0x20b4>)
 8011f78:	2200      	movs	r2, #0
 8011f7a:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011f7c:	4bae      	ldr	r3, [pc, #696]	; (8012238 <readCanToStructs+0x20c4>)
 8011f7e:	2201      	movs	r2, #1
 8011f80:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011f82:	f003 fc4f 	bl	8015824 <HAL_GetTick>
 8011f86:	4603      	mov	r3, r0
 8011f88:	4aab      	ldr	r2, [pc, #684]	; (8012238 <readCanToStructs+0x20c4>)
 8011f8a:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011f8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f90:	4aa3      	ldr	r2, [pc, #652]	; (8012220 <readCanToStructs+0x20ac>)
 8011f92:	f240 4112 	movw	r1, #1042	; 0x412
 8011f96:	fb01 f303 	mul.w	r3, r1, r3
 8011f9a:	4413      	add	r3, r2
 8011f9c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011fa0:	2200      	movs	r2, #0
 8011fa2:	701a      	strb	r2, [r3, #0]
				break;
 8011fa4:	e0d2      	b.n	801214c <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8011fa6:	4ba5      	ldr	r3, [pc, #660]	; (801223c <readCanToStructs+0x20c8>)
 8011fa8:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011faa:	4ba5      	ldr	r3, [pc, #660]	; (8012240 <readCanToStructs+0x20cc>)
 8011fac:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011fb0:	885b      	ldrh	r3, [r3, #2]
 8011fb2:	4aa3      	ldr	r2, [pc, #652]	; (8012240 <readCanToStructs+0x20cc>)
 8011fb4:	011b      	lsls	r3, r3, #4
 8011fb6:	4413      	add	r3, r2
 8011fb8:	3304      	adds	r3, #4
 8011fba:	781b      	ldrb	r3, [r3, #0]
 8011fbc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011fc0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d110      	bne.n	8011fea <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011fc8:	2208      	movs	r2, #8
 8011fca:	2100      	movs	r1, #0
 8011fcc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011fce:	f010 fb4b 	bl	8022668 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011fd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fd6:	4a92      	ldr	r2, [pc, #584]	; (8012220 <readCanToStructs+0x20ac>)
 8011fd8:	f240 4112 	movw	r1, #1042	; 0x412
 8011fdc:	fb01 f303 	mul.w	r3, r1, r3
 8011fe0:	4413      	add	r3, r2
 8011fe2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fee:	4a8c      	ldr	r2, [pc, #560]	; (8012220 <readCanToStructs+0x20ac>)
 8011ff0:	f240 4112 	movw	r1, #1042	; 0x412
 8011ff4:	fb01 f303 	mul.w	r3, r1, r3
 8011ff8:	4413      	add	r3, r2
 8011ffa:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011ffe:	781b      	ldrb	r3, [r3, #0]
 8012000:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012004:	429a      	cmp	r2, r3
 8012006:	d014      	beq.n	8012032 <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8012008:	488e      	ldr	r0, [pc, #568]	; (8012244 <readCanToStructs+0x20d0>)
 801200a:	f010 fcb1 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 801200e:	2208      	movs	r2, #8
 8012010:	2100      	movs	r1, #0
 8012012:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012014:	f010 fb28 	bl	8022668 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801201c:	4a80      	ldr	r2, [pc, #512]	; (8012220 <readCanToStructs+0x20ac>)
 801201e:	f240 4112 	movw	r1, #1042	; 0x412
 8012022:	fb01 f303 	mul.w	r3, r1, r3
 8012026:	4413      	add	r3, r2
 8012028:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801202c:	2200      	movs	r2, #0
 801202e:	701a      	strb	r2, [r3, #0]
					break;
 8012030:	e08d      	b.n	801214e <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012032:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012036:	4613      	mov	r3, r2
 8012038:	00db      	lsls	r3, r3, #3
 801203a:	1a9b      	subs	r3, r3, r2
 801203c:	461a      	mov	r2, r3
 801203e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012040:	4413      	add	r3, r2
 8012042:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012044:	2301      	movs	r3, #1
 8012046:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801204a:	e016      	b.n	801207a <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801204c:	4b7c      	ldr	r3, [pc, #496]	; (8012240 <readCanToStructs+0x20cc>)
 801204e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012052:	885b      	ldrh	r3, [r3, #2]
 8012054:	461a      	mov	r2, r3
 8012056:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801205a:	4979      	ldr	r1, [pc, #484]	; (8012240 <readCanToStructs+0x20cc>)
 801205c:	0112      	lsls	r2, r2, #4
 801205e:	440a      	add	r2, r1
 8012060:	4413      	add	r3, r2
 8012062:	3304      	adds	r3, #4
 8012064:	781a      	ldrb	r2, [r3, #0]
 8012066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012068:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801206a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801206c:	3301      	adds	r3, #1
 801206e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012070:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012074:	3301      	adds	r3, #1
 8012076:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801207a:	4b71      	ldr	r3, [pc, #452]	; (8012240 <readCanToStructs+0x20cc>)
 801207c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012080:	885b      	ldrh	r3, [r3, #2]
 8012082:	4a6f      	ldr	r2, [pc, #444]	; (8012240 <readCanToStructs+0x20cc>)
 8012084:	011b      	lsls	r3, r3, #4
 8012086:	4413      	add	r3, r2
 8012088:	330c      	adds	r3, #12
 801208a:	781b      	ldrb	r3, [r3, #0]
 801208c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012090:	429a      	cmp	r2, r3
 8012092:	d3db      	bcc.n	801204c <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8012094:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012098:	4a61      	ldr	r2, [pc, #388]	; (8012220 <readCanToStructs+0x20ac>)
 801209a:	f240 4112 	movw	r1, #1042	; 0x412
 801209e:	fb01 f303 	mul.w	r3, r1, r3
 80120a2:	4413      	add	r3, r2
 80120a4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80120a8:	781b      	ldrb	r3, [r3, #0]
 80120aa:	461a      	mov	r2, r3
 80120ac:	4613      	mov	r3, r2
 80120ae:	00db      	lsls	r3, r3, #3
 80120b0:	1a9a      	subs	r2, r3, r2
 80120b2:	4b63      	ldr	r3, [pc, #396]	; (8012240 <readCanToStructs+0x20cc>)
 80120b4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120b8:	885b      	ldrh	r3, [r3, #2]
 80120ba:	4961      	ldr	r1, [pc, #388]	; (8012240 <readCanToStructs+0x20cc>)
 80120bc:	011b      	lsls	r3, r3, #4
 80120be:	440b      	add	r3, r1
 80120c0:	330c      	adds	r3, #12
 80120c2:	781b      	ldrb	r3, [r3, #0]
 80120c4:	3b01      	subs	r3, #1
 80120c6:	4413      	add	r3, r2
 80120c8:	2b07      	cmp	r3, #7
 80120ca:	d917      	bls.n	80120fc <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 80120cc:	485e      	ldr	r0, [pc, #376]	; (8012248 <readCanToStructs+0x20d4>)
 80120ce:	f010 fc4f 	bl	8022970 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80120d2:	4b59      	ldr	r3, [pc, #356]	; (8012238 <readCanToStructs+0x20c4>)
 80120d4:	2201      	movs	r2, #1
 80120d6:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80120d8:	f003 fba4 	bl	8015824 <HAL_GetTick>
 80120dc:	4603      	mov	r3, r0
 80120de:	4a56      	ldr	r2, [pc, #344]	; (8012238 <readCanToStructs+0x20c4>)
 80120e0:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80120e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120e6:	4a4e      	ldr	r2, [pc, #312]	; (8012220 <readCanToStructs+0x20ac>)
 80120e8:	f240 4112 	movw	r1, #1042	; 0x412
 80120ec:	fb01 f303 	mul.w	r3, r1, r3
 80120f0:	4413      	add	r3, r2
 80120f2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80120f6:	2200      	movs	r2, #0
 80120f8:	701a      	strb	r2, [r3, #0]
				break;
 80120fa:	e028      	b.n	801214e <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80120fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012100:	4a47      	ldr	r2, [pc, #284]	; (8012220 <readCanToStructs+0x20ac>)
 8012102:	f240 4112 	movw	r1, #1042	; 0x412
 8012106:	fb01 f303 	mul.w	r3, r1, r3
 801210a:	4413      	add	r3, r2
 801210c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012110:	2201      	movs	r2, #1
 8012112:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012114:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012118:	4941      	ldr	r1, [pc, #260]	; (8012220 <readCanToStructs+0x20ac>)
 801211a:	f240 4212 	movw	r2, #1042	; 0x412
 801211e:	fb03 f202 	mul.w	r2, r3, r2
 8012122:	440a      	add	r2, r1
 8012124:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012128:	7812      	ldrb	r2, [r2, #0]
 801212a:	3201      	adds	r2, #1
 801212c:	b2d0      	uxtb	r0, r2
 801212e:	4a3c      	ldr	r2, [pc, #240]	; (8012220 <readCanToStructs+0x20ac>)
 8012130:	f240 4112 	movw	r1, #1042	; 0x412
 8012134:	fb01 f303 	mul.w	r3, r1, r3
 8012138:	4413      	add	r3, r2
 801213a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801213e:	4602      	mov	r2, r0
 8012140:	701a      	strb	r2, [r3, #0]
				break;
 8012142:	e004      	b.n	801214e <readCanToStructs+0x1fda>
				break;
 8012144:	bf00      	nop
 8012146:	e002      	b.n	801214e <readCanToStructs+0x1fda>
				break;
 8012148:	bf00      	nop
 801214a:	e000      	b.n	801214e <readCanToStructs+0x1fda>
				break;
 801214c:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 801214e:	4b3c      	ldr	r3, [pc, #240]	; (8012240 <readCanToStructs+0x20cc>)
 8012150:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012154:	885b      	ldrh	r3, [r3, #2]
 8012156:	011b      	lsls	r3, r3, #4
 8012158:	4a39      	ldr	r2, [pc, #228]	; (8012240 <readCanToStructs+0x20cc>)
 801215a:	4413      	add	r3, r2
 801215c:	2210      	movs	r2, #16
 801215e:	2100      	movs	r1, #0
 8012160:	4618      	mov	r0, r3
 8012162:	f010 fa81 	bl	8022668 <memset>
			canRead.Out++;
 8012166:	4b36      	ldr	r3, [pc, #216]	; (8012240 <readCanToStructs+0x20cc>)
 8012168:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801216c:	885b      	ldrh	r3, [r3, #2]
 801216e:	3301      	adds	r3, #1
 8012170:	b29a      	uxth	r2, r3
 8012172:	4b33      	ldr	r3, [pc, #204]	; (8012240 <readCanToStructs+0x20cc>)
 8012174:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012178:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 801217a:	4b31      	ldr	r3, [pc, #196]	; (8012240 <readCanToStructs+0x20cc>)
 801217c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012180:	885b      	ldrh	r3, [r3, #2]
 8012182:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8012186:	d104      	bne.n	8012192 <readCanToStructs+0x201e>
				canRead.Out = 0;
 8012188:	4b2d      	ldr	r3, [pc, #180]	; (8012240 <readCanToStructs+0x20cc>)
 801218a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801218e:	2200      	movs	r2, #0
 8012190:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8012192:	f7fd ff99 	bl	80100c8 <canDataReady>
 8012196:	4603      	mov	r3, r0
 8012198:	2b00      	cmp	r3, #0
 801219a:	f47f a949 	bne.w	8011430 <readCanToStructs+0x12bc>
	break;
 801219e:	f000 be46 	b.w	8012e2e <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 80121a2:	4b27      	ldr	r3, [pc, #156]	; (8012240 <readCanToStructs+0x20cc>)
 80121a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121a8:	885b      	ldrh	r3, [r3, #2]
 80121aa:	4a25      	ldr	r2, [pc, #148]	; (8012240 <readCanToStructs+0x20cc>)
 80121ac:	011b      	lsls	r3, r3, #4
 80121ae:	4413      	add	r3, r2
 80121b0:	330f      	adds	r3, #15
 80121b2:	781b      	ldrb	r3, [r3, #0]
 80121b4:	3b01      	subs	r3, #1
 80121b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 80121ba:	4b21      	ldr	r3, [pc, #132]	; (8012240 <readCanToStructs+0x20cc>)
 80121bc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121c0:	885b      	ldrh	r3, [r3, #2]
 80121c2:	4a1f      	ldr	r2, [pc, #124]	; (8012240 <readCanToStructs+0x20cc>)
 80121c4:	011b      	lsls	r3, r3, #4
 80121c6:	4413      	add	r3, r2
 80121c8:	681b      	ldr	r3, [r3, #0]
 80121ca:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 80121ce:	f200 8624 	bhi.w	8012e1a <readCanToStructs+0x2ca6>
 80121d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80121d6:	d80a      	bhi.n	80121ee <readCanToStructs+0x207a>
 80121d8:	f240 1203 	movw	r2, #259	; 0x103
 80121dc:	4293      	cmp	r3, r2
 80121de:	d035      	beq.n	801224c <readCanToStructs+0x20d8>
 80121e0:	f240 1209 	movw	r2, #265	; 0x109
 80121e4:	4293      	cmp	r3, r2
 80121e6:	f000 8107 	beq.w	80123f8 <readCanToStructs+0x2284>
 80121ea:	f000 be16 	b.w	8012e1a <readCanToStructs+0x2ca6>
 80121ee:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 80121f2:	2b07      	cmp	r3, #7
 80121f4:	f200 8611 	bhi.w	8012e1a <readCanToStructs+0x2ca6>
 80121f8:	a201      	add	r2, pc, #4	; (adr r2, 8012200 <readCanToStructs+0x208c>)
 80121fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121fe:	bf00      	nop
 8012200:	080125cb 	.word	0x080125cb
 8012204:	08012775 	.word	0x08012775
 8012208:	08012e1b 	.word	0x08012e1b
 801220c:	08012e1b 	.word	0x08012e1b
 8012210:	08012941 	.word	0x08012941
 8012214:	08012e1b 	.word	0x08012e1b
 8012218:	08012ac9 	.word	0x08012ac9
 801221c:	08012c87 	.word	0x08012c87
 8012220:	20005614 	.word	0x20005614
 8012224:	20003e90 	.word	0x20003e90
 8012228:	20009f92 	.word	0x20009f92
 801222c:	20009f90 	.word	0x20009f90
 8012230:	08026f2c 	.word	0x08026f2c
 8012234:	20003c8c 	.word	0x20003c8c
 8012238:	20003868 	.word	0x20003868
 801223c:	20003854 	.word	0x20003854
 8012240:	20005e38 	.word	0x20005e38
 8012244:	08026e00 	.word	0x08026e00
 8012248:	08026e20 	.word	0x08026e20
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 801224c:	4bc3      	ldr	r3, [pc, #780]	; (801255c <readCanToStructs+0x23e8>)
 801224e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012250:	4bc3      	ldr	r3, [pc, #780]	; (8012560 <readCanToStructs+0x23ec>)
 8012252:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012256:	885b      	ldrh	r3, [r3, #2]
 8012258:	4ac1      	ldr	r2, [pc, #772]	; (8012560 <readCanToStructs+0x23ec>)
 801225a:	011b      	lsls	r3, r3, #4
 801225c:	4413      	add	r3, r2
 801225e:	3304      	adds	r3, #4
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012266:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801226a:	2b00      	cmp	r3, #0
 801226c:	d110      	bne.n	8012290 <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801226e:	2206      	movs	r2, #6
 8012270:	2100      	movs	r1, #0
 8012272:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012274:	f010 f9f8 	bl	8022668 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012278:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801227c:	4ab9      	ldr	r2, [pc, #740]	; (8012564 <readCanToStructs+0x23f0>)
 801227e:	f240 4112 	movw	r1, #1042	; 0x412
 8012282:	fb01 f303 	mul.w	r3, r1, r3
 8012286:	4413      	add	r3, r2
 8012288:	f203 2307 	addw	r3, r3, #519	; 0x207
 801228c:	2200      	movs	r2, #0
 801228e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8012290:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012294:	4ab3      	ldr	r2, [pc, #716]	; (8012564 <readCanToStructs+0x23f0>)
 8012296:	f240 4112 	movw	r1, #1042	; 0x412
 801229a:	fb01 f303 	mul.w	r3, r1, r3
 801229e:	4413      	add	r3, r2
 80122a0:	f203 2307 	addw	r3, r3, #519	; 0x207
 80122a4:	781b      	ldrb	r3, [r3, #0]
 80122a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80122aa:	429a      	cmp	r2, r3
 80122ac:	d015      	beq.n	80122da <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 80122ae:	48ae      	ldr	r0, [pc, #696]	; (8012568 <readCanToStructs+0x23f4>)
 80122b0:	f010 fb5e 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 80122b4:	2206      	movs	r2, #6
 80122b6:	2100      	movs	r1, #0
 80122b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122ba:	f010 f9d5 	bl	8022668 <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 80122be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80122c2:	4aa8      	ldr	r2, [pc, #672]	; (8012564 <readCanToStructs+0x23f0>)
 80122c4:	f240 4112 	movw	r1, #1042	; 0x412
 80122c8:	fb01 f303 	mul.w	r3, r1, r3
 80122cc:	4413      	add	r3, r2
 80122ce:	f203 2307 	addw	r3, r3, #519	; 0x207
 80122d2:	2200      	movs	r2, #0
 80122d4:	701a      	strb	r2, [r3, #0]
					break;
 80122d6:	f000 bda0 	b.w	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80122da:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80122de:	4613      	mov	r3, r2
 80122e0:	00db      	lsls	r3, r3, #3
 80122e2:	1a9b      	subs	r3, r3, r2
 80122e4:	461a      	mov	r2, r3
 80122e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122e8:	4413      	add	r3, r2
 80122ea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80122ec:	2301      	movs	r3, #1
 80122ee:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80122f2:	e016      	b.n	8012322 <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80122f4:	4b9a      	ldr	r3, [pc, #616]	; (8012560 <readCanToStructs+0x23ec>)
 80122f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122fa:	885b      	ldrh	r3, [r3, #2]
 80122fc:	461a      	mov	r2, r3
 80122fe:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012302:	4997      	ldr	r1, [pc, #604]	; (8012560 <readCanToStructs+0x23ec>)
 8012304:	0112      	lsls	r2, r2, #4
 8012306:	440a      	add	r2, r1
 8012308:	4413      	add	r3, r2
 801230a:	3304      	adds	r3, #4
 801230c:	781a      	ldrb	r2, [r3, #0]
 801230e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012310:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012314:	3301      	adds	r3, #1
 8012316:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012318:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801231c:	3301      	adds	r3, #1
 801231e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012322:	4b8f      	ldr	r3, [pc, #572]	; (8012560 <readCanToStructs+0x23ec>)
 8012324:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012328:	885b      	ldrh	r3, [r3, #2]
 801232a:	4a8d      	ldr	r2, [pc, #564]	; (8012560 <readCanToStructs+0x23ec>)
 801232c:	011b      	lsls	r3, r3, #4
 801232e:	4413      	add	r3, r2
 8012330:	330c      	adds	r3, #12
 8012332:	781b      	ldrb	r3, [r3, #0]
 8012334:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012338:	429a      	cmp	r2, r3
 801233a:	d3db      	bcc.n	80122f4 <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 801233c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012340:	4a88      	ldr	r2, [pc, #544]	; (8012564 <readCanToStructs+0x23f0>)
 8012342:	f240 4112 	movw	r1, #1042	; 0x412
 8012346:	fb01 f303 	mul.w	r3, r1, r3
 801234a:	4413      	add	r3, r2
 801234c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8012350:	781b      	ldrb	r3, [r3, #0]
 8012352:	461a      	mov	r2, r3
 8012354:	4613      	mov	r3, r2
 8012356:	00db      	lsls	r3, r3, #3
 8012358:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 801235a:	4b81      	ldr	r3, [pc, #516]	; (8012560 <readCanToStructs+0x23ec>)
 801235c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012360:	885b      	ldrh	r3, [r3, #2]
 8012362:	497f      	ldr	r1, [pc, #508]	; (8012560 <readCanToStructs+0x23ec>)
 8012364:	011b      	lsls	r3, r3, #4
 8012366:	440b      	add	r3, r1
 8012368:	330c      	adds	r3, #12
 801236a:	781b      	ldrb	r3, [r3, #0]
 801236c:	3b01      	subs	r3, #1
 801236e:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8012370:	2b05      	cmp	r3, #5
 8012372:	d91c      	bls.n	80123ae <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012374:	4b7d      	ldr	r3, [pc, #500]	; (801256c <readCanToStructs+0x23f8>)
 8012376:	4a79      	ldr	r2, [pc, #484]	; (801255c <readCanToStructs+0x23e8>)
 8012378:	6811      	ldr	r1, [r2, #0]
 801237a:	6019      	str	r1, [r3, #0]
 801237c:	8892      	ldrh	r2, [r2, #4]
 801237e:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8012380:	4b7b      	ldr	r3, [pc, #492]	; (8012570 <readCanToStructs+0x23fc>)
 8012382:	781b      	ldrb	r3, [r3, #0]
 8012384:	2b01      	cmp	r3, #1
 8012386:	d102      	bne.n	801238e <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 8012388:	487a      	ldr	r0, [pc, #488]	; (8012574 <readCanToStructs+0x2400>)
 801238a:	f010 faf1 	bl	8022970 <puts>
					Write_RTC();
 801238e:	f7f8 ff9f 	bl	800b2d0 <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8012392:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012396:	4a73      	ldr	r2, [pc, #460]	; (8012564 <readCanToStructs+0x23f0>)
 8012398:	f240 4112 	movw	r1, #1042	; 0x412
 801239c:	fb01 f303 	mul.w	r3, r1, r3
 80123a0:	4413      	add	r3, r2
 80123a2:	f203 2307 	addw	r3, r3, #519	; 0x207
 80123a6:	2200      	movs	r2, #0
 80123a8:	701a      	strb	r2, [r3, #0]
 80123aa:	f000 bd36 	b.w	8012e1a <readCanToStructs+0x2ca6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 80123ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123b2:	4a6c      	ldr	r2, [pc, #432]	; (8012564 <readCanToStructs+0x23f0>)
 80123b4:	f240 4112 	movw	r1, #1042	; 0x412
 80123b8:	fb01 f303 	mul.w	r3, r1, r3
 80123bc:	4413      	add	r3, r2
 80123be:	f203 2306 	addw	r3, r3, #518	; 0x206
 80123c2:	2201      	movs	r2, #1
 80123c4:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 80123c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123ca:	4966      	ldr	r1, [pc, #408]	; (8012564 <readCanToStructs+0x23f0>)
 80123cc:	f240 4212 	movw	r2, #1042	; 0x412
 80123d0:	fb03 f202 	mul.w	r2, r3, r2
 80123d4:	440a      	add	r2, r1
 80123d6:	f202 2207 	addw	r2, r2, #519	; 0x207
 80123da:	7812      	ldrb	r2, [r2, #0]
 80123dc:	3201      	adds	r2, #1
 80123de:	b2d0      	uxtb	r0, r2
 80123e0:	4a60      	ldr	r2, [pc, #384]	; (8012564 <readCanToStructs+0x23f0>)
 80123e2:	f240 4112 	movw	r1, #1042	; 0x412
 80123e6:	fb01 f303 	mul.w	r3, r1, r3
 80123ea:	4413      	add	r3, r2
 80123ec:	f203 2307 	addw	r3, r3, #519	; 0x207
 80123f0:	4602      	mov	r2, r0
 80123f2:	701a      	strb	r2, [r3, #0]
				break;
 80123f4:	f000 bd11 	b.w	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 80123f8:	4b58      	ldr	r3, [pc, #352]	; (801255c <readCanToStructs+0x23e8>)
 80123fa:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80123fc:	4b58      	ldr	r3, [pc, #352]	; (8012560 <readCanToStructs+0x23ec>)
 80123fe:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012402:	885b      	ldrh	r3, [r3, #2]
 8012404:	4a56      	ldr	r2, [pc, #344]	; (8012560 <readCanToStructs+0x23ec>)
 8012406:	011b      	lsls	r3, r3, #4
 8012408:	4413      	add	r3, r2
 801240a:	3304      	adds	r3, #4
 801240c:	781b      	ldrb	r3, [r3, #0]
 801240e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8012412:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012416:	2b00      	cmp	r3, #0
 8012418:	d110      	bne.n	801243c <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801241a:	2206      	movs	r2, #6
 801241c:	2100      	movs	r1, #0
 801241e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012420:	f010 f922 	bl	8022668 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8012424:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012428:	4a4e      	ldr	r2, [pc, #312]	; (8012564 <readCanToStructs+0x23f0>)
 801242a:	f240 4112 	movw	r1, #1042	; 0x412
 801242e:	fb01 f303 	mul.w	r3, r1, r3
 8012432:	4413      	add	r3, r2
 8012434:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012438:	2200      	movs	r2, #0
 801243a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 801243c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012440:	4a48      	ldr	r2, [pc, #288]	; (8012564 <readCanToStructs+0x23f0>)
 8012442:	f240 4112 	movw	r1, #1042	; 0x412
 8012446:	fb01 f303 	mul.w	r3, r1, r3
 801244a:	4413      	add	r3, r2
 801244c:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012450:	781b      	ldrb	r3, [r3, #0]
 8012452:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012456:	429a      	cmp	r2, r3
 8012458:	d015      	beq.n	8012486 <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 801245a:	4847      	ldr	r0, [pc, #284]	; (8012578 <readCanToStructs+0x2404>)
 801245c:	f010 fa88 	bl	8022970 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8012460:	2206      	movs	r2, #6
 8012462:	2100      	movs	r1, #0
 8012464:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012466:	f010 f8ff 	bl	8022668 <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801246a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801246e:	4a3d      	ldr	r2, [pc, #244]	; (8012564 <readCanToStructs+0x23f0>)
 8012470:	f240 4112 	movw	r1, #1042	; 0x412
 8012474:	fb01 f303 	mul.w	r3, r1, r3
 8012478:	4413      	add	r3, r2
 801247a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801247e:	2200      	movs	r2, #0
 8012480:	701a      	strb	r2, [r3, #0]
					break;
 8012482:	f000 bcca 	b.w	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012486:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801248a:	4613      	mov	r3, r2
 801248c:	00db      	lsls	r3, r3, #3
 801248e:	1a9b      	subs	r3, r3, r2
 8012490:	461a      	mov	r2, r3
 8012492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012494:	4413      	add	r3, r2
 8012496:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012498:	2301      	movs	r3, #1
 801249a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801249e:	e016      	b.n	80124ce <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80124a0:	4b2f      	ldr	r3, [pc, #188]	; (8012560 <readCanToStructs+0x23ec>)
 80124a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124a6:	885b      	ldrh	r3, [r3, #2]
 80124a8:	461a      	mov	r2, r3
 80124aa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124ae:	492c      	ldr	r1, [pc, #176]	; (8012560 <readCanToStructs+0x23ec>)
 80124b0:	0112      	lsls	r2, r2, #4
 80124b2:	440a      	add	r2, r1
 80124b4:	4413      	add	r3, r2
 80124b6:	3304      	adds	r3, #4
 80124b8:	781a      	ldrb	r2, [r3, #0]
 80124ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124bc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80124be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80124c0:	3301      	adds	r3, #1
 80124c2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80124c4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80124c8:	3301      	adds	r3, #1
 80124ca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80124ce:	4b24      	ldr	r3, [pc, #144]	; (8012560 <readCanToStructs+0x23ec>)
 80124d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124d4:	885b      	ldrh	r3, [r3, #2]
 80124d6:	4a22      	ldr	r2, [pc, #136]	; (8012560 <readCanToStructs+0x23ec>)
 80124d8:	011b      	lsls	r3, r3, #4
 80124da:	4413      	add	r3, r2
 80124dc:	330c      	adds	r3, #12
 80124de:	781b      	ldrb	r3, [r3, #0]
 80124e0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80124e4:	429a      	cmp	r2, r3
 80124e6:	d3db      	bcc.n	80124a0 <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80124e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124ec:	4a1d      	ldr	r2, [pc, #116]	; (8012564 <readCanToStructs+0x23f0>)
 80124ee:	f240 4112 	movw	r1, #1042	; 0x412
 80124f2:	fb01 f303 	mul.w	r3, r1, r3
 80124f6:	4413      	add	r3, r2
 80124f8:	f203 2313 	addw	r3, r3, #531	; 0x213
 80124fc:	781b      	ldrb	r3, [r3, #0]
 80124fe:	461a      	mov	r2, r3
 8012500:	4613      	mov	r3, r2
 8012502:	00db      	lsls	r3, r3, #3
 8012504:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8012506:	4b16      	ldr	r3, [pc, #88]	; (8012560 <readCanToStructs+0x23ec>)
 8012508:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801250c:	885b      	ldrh	r3, [r3, #2]
 801250e:	4914      	ldr	r1, [pc, #80]	; (8012560 <readCanToStructs+0x23ec>)
 8012510:	011b      	lsls	r3, r3, #4
 8012512:	440b      	add	r3, r1
 8012514:	330c      	adds	r3, #12
 8012516:	781b      	ldrb	r3, [r3, #0]
 8012518:	3b01      	subs	r3, #1
 801251a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 801251c:	2b05      	cmp	r3, #5
 801251e:	d92f      	bls.n	8012580 <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8012520:	4b12      	ldr	r3, [pc, #72]	; (801256c <readCanToStructs+0x23f8>)
 8012522:	4a0e      	ldr	r2, [pc, #56]	; (801255c <readCanToStructs+0x23e8>)
 8012524:	6811      	ldr	r1, [r2, #0]
 8012526:	6019      	str	r1, [r3, #0]
 8012528:	8892      	ldrh	r2, [r2, #4]
 801252a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801252c:	4b10      	ldr	r3, [pc, #64]	; (8012570 <readCanToStructs+0x23fc>)
 801252e:	781b      	ldrb	r3, [r3, #0]
 8012530:	2b01      	cmp	r3, #1
 8012532:	d102      	bne.n	801253a <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 8012534:	4811      	ldr	r0, [pc, #68]	; (801257c <readCanToStructs+0x2408>)
 8012536:	f010 fa1b 	bl	8022970 <puts>
					Write_RTC();
 801253a:	f7f8 fec9 	bl	800b2d0 <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801253e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012542:	4a08      	ldr	r2, [pc, #32]	; (8012564 <readCanToStructs+0x23f0>)
 8012544:	f240 4112 	movw	r1, #1042	; 0x412
 8012548:	fb01 f303 	mul.w	r3, r1, r3
 801254c:	4413      	add	r3, r2
 801254e:	f203 2313 	addw	r3, r3, #531	; 0x213
 8012552:	2200      	movs	r2, #0
 8012554:	701a      	strb	r2, [r3, #0]
 8012556:	f000 bc60 	b.w	8012e1a <readCanToStructs+0x2ca6>
 801255a:	bf00      	nop
 801255c:	20002bbc 	.word	0x20002bbc
 8012560:	20005e38 	.word	0x20005e38
 8012564:	20005614 	.word	0x20005614
 8012568:	08026ccc 	.word	0x08026ccc
 801256c:	20002bb4 	.word	0x20002bb4
 8012570:	20000645 	.word	0x20000645
 8012574:	08026ce8 	.word	0x08026ce8
 8012578:	08026cfc 	.word	0x08026cfc
 801257c:	08026d18 	.word	0x08026d18
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8012580:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012584:	4aa5      	ldr	r2, [pc, #660]	; (801281c <readCanToStructs+0x26a8>)
 8012586:	f240 4112 	movw	r1, #1042	; 0x412
 801258a:	fb01 f303 	mul.w	r3, r1, r3
 801258e:	4413      	add	r3, r2
 8012590:	f203 2312 	addw	r3, r3, #530	; 0x212
 8012594:	2201      	movs	r2, #1
 8012596:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8012598:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801259c:	499f      	ldr	r1, [pc, #636]	; (801281c <readCanToStructs+0x26a8>)
 801259e:	f240 4212 	movw	r2, #1042	; 0x412
 80125a2:	fb03 f202 	mul.w	r2, r3, r2
 80125a6:	440a      	add	r2, r1
 80125a8:	f202 2213 	addw	r2, r2, #531	; 0x213
 80125ac:	7812      	ldrb	r2, [r2, #0]
 80125ae:	3201      	adds	r2, #1
 80125b0:	b2d0      	uxtb	r0, r2
 80125b2:	4a9a      	ldr	r2, [pc, #616]	; (801281c <readCanToStructs+0x26a8>)
 80125b4:	f240 4112 	movw	r1, #1042	; 0x412
 80125b8:	fb01 f303 	mul.w	r3, r1, r3
 80125bc:	4413      	add	r3, r2
 80125be:	f203 2313 	addw	r3, r3, #531	; 0x213
 80125c2:	4602      	mov	r2, r0
 80125c4:	701a      	strb	r2, [r3, #0]
				break;
 80125c6:	f000 bc28 	b.w	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80125ca:	4b95      	ldr	r3, [pc, #596]	; (8012820 <readCanToStructs+0x26ac>)
 80125cc:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80125ce:	4b95      	ldr	r3, [pc, #596]	; (8012824 <readCanToStructs+0x26b0>)
 80125d0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80125d4:	885b      	ldrh	r3, [r3, #2]
 80125d6:	4a93      	ldr	r2, [pc, #588]	; (8012824 <readCanToStructs+0x26b0>)
 80125d8:	011b      	lsls	r3, r3, #4
 80125da:	4413      	add	r3, r2
 80125dc:	3304      	adds	r3, #4
 80125de:	781b      	ldrb	r3, [r3, #0]
 80125e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80125e4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d110      	bne.n	801260e <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80125ec:	2208      	movs	r2, #8
 80125ee:	2100      	movs	r1, #0
 80125f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125f2:	f010 f839 	bl	8022668 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80125f6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125fa:	4a88      	ldr	r2, [pc, #544]	; (801281c <readCanToStructs+0x26a8>)
 80125fc:	f240 4112 	movw	r1, #1042	; 0x412
 8012600:	fb01 f303 	mul.w	r3, r1, r3
 8012604:	4413      	add	r3, r2
 8012606:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801260a:	2200      	movs	r2, #0
 801260c:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 801260e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012612:	4a82      	ldr	r2, [pc, #520]	; (801281c <readCanToStructs+0x26a8>)
 8012614:	f240 4112 	movw	r1, #1042	; 0x412
 8012618:	fb01 f303 	mul.w	r3, r1, r3
 801261c:	4413      	add	r3, r2
 801261e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012622:	781b      	ldrb	r3, [r3, #0]
 8012624:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012628:	429a      	cmp	r2, r3
 801262a:	d014      	beq.n	8012656 <readCanToStructs+0x24e2>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 801262c:	487e      	ldr	r0, [pc, #504]	; (8012828 <readCanToStructs+0x26b4>)
 801262e:	f010 f99f 	bl	8022970 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012632:	2208      	movs	r2, #8
 8012634:	2100      	movs	r1, #0
 8012636:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012638:	f010 f816 	bl	8022668 <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801263c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012640:	4a76      	ldr	r2, [pc, #472]	; (801281c <readCanToStructs+0x26a8>)
 8012642:	f240 4112 	movw	r1, #1042	; 0x412
 8012646:	fb01 f303 	mul.w	r3, r1, r3
 801264a:	4413      	add	r3, r2
 801264c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012650:	2200      	movs	r2, #0
 8012652:	701a      	strb	r2, [r3, #0]
					break;
 8012654:	e3e1      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012656:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801265a:	4613      	mov	r3, r2
 801265c:	00db      	lsls	r3, r3, #3
 801265e:	1a9b      	subs	r3, r3, r2
 8012660:	461a      	mov	r2, r3
 8012662:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012664:	4413      	add	r3, r2
 8012666:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012668:	2301      	movs	r3, #1
 801266a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801266e:	e016      	b.n	801269e <readCanToStructs+0x252a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012670:	4b6c      	ldr	r3, [pc, #432]	; (8012824 <readCanToStructs+0x26b0>)
 8012672:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012676:	885b      	ldrh	r3, [r3, #2]
 8012678:	461a      	mov	r2, r3
 801267a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801267e:	4969      	ldr	r1, [pc, #420]	; (8012824 <readCanToStructs+0x26b0>)
 8012680:	0112      	lsls	r2, r2, #4
 8012682:	440a      	add	r2, r1
 8012684:	4413      	add	r3, r2
 8012686:	3304      	adds	r3, #4
 8012688:	781a      	ldrb	r2, [r3, #0]
 801268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801268c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012690:	3301      	adds	r3, #1
 8012692:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012694:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012698:	3301      	adds	r3, #1
 801269a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801269e:	4b61      	ldr	r3, [pc, #388]	; (8012824 <readCanToStructs+0x26b0>)
 80126a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126a4:	885b      	ldrh	r3, [r3, #2]
 80126a6:	4a5f      	ldr	r2, [pc, #380]	; (8012824 <readCanToStructs+0x26b0>)
 80126a8:	011b      	lsls	r3, r3, #4
 80126aa:	4413      	add	r3, r2
 80126ac:	330c      	adds	r3, #12
 80126ae:	781b      	ldrb	r3, [r3, #0]
 80126b0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80126b4:	429a      	cmp	r2, r3
 80126b6:	d3db      	bcc.n	8012670 <readCanToStructs+0x24fc>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 80126b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126bc:	4a57      	ldr	r2, [pc, #348]	; (801281c <readCanToStructs+0x26a8>)
 80126be:	f240 4112 	movw	r1, #1042	; 0x412
 80126c2:	fb01 f303 	mul.w	r3, r1, r3
 80126c6:	4413      	add	r3, r2
 80126c8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80126cc:	781b      	ldrb	r3, [r3, #0]
 80126ce:	461a      	mov	r2, r3
 80126d0:	4613      	mov	r3, r2
 80126d2:	00db      	lsls	r3, r3, #3
 80126d4:	1a9a      	subs	r2, r3, r2
 80126d6:	4b53      	ldr	r3, [pc, #332]	; (8012824 <readCanToStructs+0x26b0>)
 80126d8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80126dc:	885b      	ldrh	r3, [r3, #2]
 80126de:	4951      	ldr	r1, [pc, #324]	; (8012824 <readCanToStructs+0x26b0>)
 80126e0:	011b      	lsls	r3, r3, #4
 80126e2:	440b      	add	r3, r1
 80126e4:	330c      	adds	r3, #12
 80126e6:	781b      	ldrb	r3, [r3, #0]
 80126e8:	3b01      	subs	r3, #1
 80126ea:	4413      	add	r3, r2
 80126ec:	2b07      	cmp	r3, #7
 80126ee:	d91d      	bls.n	801272c <readCanToStructs+0x25b8>
					printf("\nRCV OTH_INFO1\n");
 80126f0:	484e      	ldr	r0, [pc, #312]	; (801282c <readCanToStructs+0x26b8>)
 80126f2:	f010 f93d 	bl	8022970 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80126f6:	4b4e      	ldr	r3, [pc, #312]	; (8012830 <readCanToStructs+0x26bc>)
 80126f8:	4a49      	ldr	r2, [pc, #292]	; (8012820 <readCanToStructs+0x26ac>)
 80126fa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80126fe:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 8012702:	4b4c      	ldr	r3, [pc, #304]	; (8012834 <readCanToStructs+0x26c0>)
 8012704:	2201      	movs	r2, #1
 8012706:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012708:	f003 f88c 	bl	8015824 <HAL_GetTick>
 801270c:	4603      	mov	r3, r0
 801270e:	4a4a      	ldr	r2, [pc, #296]	; (8012838 <readCanToStructs+0x26c4>)
 8012710:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012712:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012716:	4a41      	ldr	r2, [pc, #260]	; (801281c <readCanToStructs+0x26a8>)
 8012718:	f240 4112 	movw	r1, #1042	; 0x412
 801271c:	fb01 f303 	mul.w	r3, r1, r3
 8012720:	4413      	add	r3, r2
 8012722:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012726:	2200      	movs	r2, #0
 8012728:	701a      	strb	r2, [r3, #0]
 801272a:	e376      	b.n	8012e1a <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801272c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012730:	4a3a      	ldr	r2, [pc, #232]	; (801281c <readCanToStructs+0x26a8>)
 8012732:	f240 4112 	movw	r1, #1042	; 0x412
 8012736:	fb01 f303 	mul.w	r3, r1, r3
 801273a:	4413      	add	r3, r2
 801273c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8012740:	2201      	movs	r2, #1
 8012742:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8012744:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012748:	4934      	ldr	r1, [pc, #208]	; (801281c <readCanToStructs+0x26a8>)
 801274a:	f240 4212 	movw	r2, #1042	; 0x412
 801274e:	fb03 f202 	mul.w	r2, r3, r2
 8012752:	440a      	add	r2, r1
 8012754:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8012758:	7812      	ldrb	r2, [r2, #0]
 801275a:	3201      	adds	r2, #1
 801275c:	b2d0      	uxtb	r0, r2
 801275e:	4a2f      	ldr	r2, [pc, #188]	; (801281c <readCanToStructs+0x26a8>)
 8012760:	f240 4112 	movw	r1, #1042	; 0x412
 8012764:	fb01 f303 	mul.w	r3, r1, r3
 8012768:	4413      	add	r3, r2
 801276a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801276e:	4602      	mov	r2, r0
 8012770:	701a      	strb	r2, [r3, #0]
				break;
 8012772:	e352      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012774:	4b2a      	ldr	r3, [pc, #168]	; (8012820 <readCanToStructs+0x26ac>)
 8012776:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012778:	4b2a      	ldr	r3, [pc, #168]	; (8012824 <readCanToStructs+0x26b0>)
 801277a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801277e:	885b      	ldrh	r3, [r3, #2]
 8012780:	4a28      	ldr	r2, [pc, #160]	; (8012824 <readCanToStructs+0x26b0>)
 8012782:	011b      	lsls	r3, r3, #4
 8012784:	4413      	add	r3, r2
 8012786:	3304      	adds	r3, #4
 8012788:	781b      	ldrb	r3, [r3, #0]
 801278a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801278e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012792:	2b00      	cmp	r3, #0
 8012794:	d110      	bne.n	80127b8 <readCanToStructs+0x2644>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012796:	2208      	movs	r2, #8
 8012798:	2100      	movs	r1, #0
 801279a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801279c:	f00f ff64 	bl	8022668 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80127a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127a4:	4a1d      	ldr	r2, [pc, #116]	; (801281c <readCanToStructs+0x26a8>)
 80127a6:	f240 4112 	movw	r1, #1042	; 0x412
 80127aa:	fb01 f303 	mul.w	r3, r1, r3
 80127ae:	4413      	add	r3, r2
 80127b0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80127b4:	2200      	movs	r2, #0
 80127b6:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80127b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127bc:	4a17      	ldr	r2, [pc, #92]	; (801281c <readCanToStructs+0x26a8>)
 80127be:	f240 4112 	movw	r1, #1042	; 0x412
 80127c2:	fb01 f303 	mul.w	r3, r1, r3
 80127c6:	4413      	add	r3, r2
 80127c8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80127cc:	781b      	ldrb	r3, [r3, #0]
 80127ce:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80127d2:	429a      	cmp	r2, r3
 80127d4:	d014      	beq.n	8012800 <readCanToStructs+0x268c>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80127d6:	4814      	ldr	r0, [pc, #80]	; (8012828 <readCanToStructs+0x26b4>)
 80127d8:	f010 f8ca 	bl	8022970 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80127dc:	2208      	movs	r2, #8
 80127de:	2100      	movs	r1, #0
 80127e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80127e2:	f00f ff41 	bl	8022668 <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80127e6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127ea:	4a0c      	ldr	r2, [pc, #48]	; (801281c <readCanToStructs+0x26a8>)
 80127ec:	f240 4112 	movw	r1, #1042	; 0x412
 80127f0:	fb01 f303 	mul.w	r3, r1, r3
 80127f4:	4413      	add	r3, r2
 80127f6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80127fa:	2200      	movs	r2, #0
 80127fc:	701a      	strb	r2, [r3, #0]
					break;
 80127fe:	e30c      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012800:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012804:	4613      	mov	r3, r2
 8012806:	00db      	lsls	r3, r3, #3
 8012808:	1a9b      	subs	r3, r3, r2
 801280a:	461a      	mov	r2, r3
 801280c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801280e:	4413      	add	r3, r2
 8012810:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012812:	2301      	movs	r3, #1
 8012814:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012818:	e027      	b.n	801286a <readCanToStructs+0x26f6>
 801281a:	bf00      	nop
 801281c:	20005614 	.word	0x20005614
 8012820:	200029fc 	.word	0x200029fc
 8012824:	20005e38 	.word	0x20005e38
 8012828:	08026f44 	.word	0x08026f44
 801282c:	08026f6c 	.word	0x08026f6c
 8012830:	200029f4 	.word	0x200029f4
 8012834:	20002494 	.word	0x20002494
 8012838:	20002498 	.word	0x20002498
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801283c:	4bc4      	ldr	r3, [pc, #784]	; (8012b50 <readCanToStructs+0x29dc>)
 801283e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012842:	885b      	ldrh	r3, [r3, #2]
 8012844:	461a      	mov	r2, r3
 8012846:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801284a:	49c1      	ldr	r1, [pc, #772]	; (8012b50 <readCanToStructs+0x29dc>)
 801284c:	0112      	lsls	r2, r2, #4
 801284e:	440a      	add	r2, r1
 8012850:	4413      	add	r3, r2
 8012852:	3304      	adds	r3, #4
 8012854:	781a      	ldrb	r2, [r3, #0]
 8012856:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012858:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801285a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801285c:	3301      	adds	r3, #1
 801285e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012860:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012864:	3301      	adds	r3, #1
 8012866:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801286a:	4bb9      	ldr	r3, [pc, #740]	; (8012b50 <readCanToStructs+0x29dc>)
 801286c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012870:	885b      	ldrh	r3, [r3, #2]
 8012872:	4ab7      	ldr	r2, [pc, #732]	; (8012b50 <readCanToStructs+0x29dc>)
 8012874:	011b      	lsls	r3, r3, #4
 8012876:	4413      	add	r3, r2
 8012878:	330c      	adds	r3, #12
 801287a:	781b      	ldrb	r3, [r3, #0]
 801287c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012880:	429a      	cmp	r2, r3
 8012882:	d3db      	bcc.n	801283c <readCanToStructs+0x26c8>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012884:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012888:	4ab2      	ldr	r2, [pc, #712]	; (8012b54 <readCanToStructs+0x29e0>)
 801288a:	f240 4112 	movw	r1, #1042	; 0x412
 801288e:	fb01 f303 	mul.w	r3, r1, r3
 8012892:	4413      	add	r3, r2
 8012894:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012898:	781b      	ldrb	r3, [r3, #0]
 801289a:	461a      	mov	r2, r3
 801289c:	4613      	mov	r3, r2
 801289e:	00db      	lsls	r3, r3, #3
 80128a0:	1a9a      	subs	r2, r3, r2
 80128a2:	4bab      	ldr	r3, [pc, #684]	; (8012b50 <readCanToStructs+0x29dc>)
 80128a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80128a8:	885b      	ldrh	r3, [r3, #2]
 80128aa:	49a9      	ldr	r1, [pc, #676]	; (8012b50 <readCanToStructs+0x29dc>)
 80128ac:	011b      	lsls	r3, r3, #4
 80128ae:	440b      	add	r3, r1
 80128b0:	330c      	adds	r3, #12
 80128b2:	781b      	ldrb	r3, [r3, #0]
 80128b4:	3b01      	subs	r3, #1
 80128b6:	4413      	add	r3, r2
 80128b8:	2b07      	cmp	r3, #7
 80128ba:	d91d      	bls.n	80128f8 <readCanToStructs+0x2784>
					printf("\nRCV OTH_INFO2\n");
 80128bc:	48a6      	ldr	r0, [pc, #664]	; (8012b58 <readCanToStructs+0x29e4>)
 80128be:	f010 f857 	bl	8022970 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 80128c2:	4ba6      	ldr	r3, [pc, #664]	; (8012b5c <readCanToStructs+0x29e8>)
 80128c4:	4aa6      	ldr	r2, [pc, #664]	; (8012b60 <readCanToStructs+0x29ec>)
 80128c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80128ca:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 80128ce:	4ba5      	ldr	r3, [pc, #660]	; (8012b64 <readCanToStructs+0x29f0>)
 80128d0:	2201      	movs	r2, #1
 80128d2:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 80128d4:	f002 ffa6 	bl	8015824 <HAL_GetTick>
 80128d8:	4603      	mov	r3, r0
 80128da:	4aa3      	ldr	r2, [pc, #652]	; (8012b68 <readCanToStructs+0x29f4>)
 80128dc:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80128de:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128e2:	4a9c      	ldr	r2, [pc, #624]	; (8012b54 <readCanToStructs+0x29e0>)
 80128e4:	f240 4112 	movw	r1, #1042	; 0x412
 80128e8:	fb01 f303 	mul.w	r3, r1, r3
 80128ec:	4413      	add	r3, r2
 80128ee:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80128f2:	2200      	movs	r2, #0
 80128f4:	701a      	strb	r2, [r3, #0]
 80128f6:	e290      	b.n	8012e1a <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80128f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80128fc:	4a95      	ldr	r2, [pc, #596]	; (8012b54 <readCanToStructs+0x29e0>)
 80128fe:	f240 4112 	movw	r1, #1042	; 0x412
 8012902:	fb01 f303 	mul.w	r3, r1, r3
 8012906:	4413      	add	r3, r2
 8012908:	f203 4304 	addw	r3, r3, #1028	; 0x404
 801290c:	2201      	movs	r2, #1
 801290e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8012910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012914:	498f      	ldr	r1, [pc, #572]	; (8012b54 <readCanToStructs+0x29e0>)
 8012916:	f240 4212 	movw	r2, #1042	; 0x412
 801291a:	fb03 f202 	mul.w	r2, r3, r2
 801291e:	440a      	add	r2, r1
 8012920:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8012924:	7812      	ldrb	r2, [r2, #0]
 8012926:	3201      	adds	r2, #1
 8012928:	b2d0      	uxtb	r0, r2
 801292a:	4a8a      	ldr	r2, [pc, #552]	; (8012b54 <readCanToStructs+0x29e0>)
 801292c:	f240 4112 	movw	r1, #1042	; 0x412
 8012930:	fb01 f303 	mul.w	r3, r1, r3
 8012934:	4413      	add	r3, r2
 8012936:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801293a:	4602      	mov	r2, r0
 801293c:	701a      	strb	r2, [r3, #0]
				break;
 801293e:	e26c      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 8012940:	4b8a      	ldr	r3, [pc, #552]	; (8012b6c <readCanToStructs+0x29f8>)
 8012942:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012944:	4b82      	ldr	r3, [pc, #520]	; (8012b50 <readCanToStructs+0x29dc>)
 8012946:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801294a:	885b      	ldrh	r3, [r3, #2]
 801294c:	4a80      	ldr	r2, [pc, #512]	; (8012b50 <readCanToStructs+0x29dc>)
 801294e:	011b      	lsls	r3, r3, #4
 8012950:	4413      	add	r3, r2
 8012952:	3304      	adds	r3, #4
 8012954:	781b      	ldrb	r3, [r3, #0]
 8012956:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801295a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801295e:	2b00      	cmp	r3, #0
 8012960:	d110      	bne.n	8012984 <readCanToStructs+0x2810>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 8012962:	2204      	movs	r2, #4
 8012964:	2100      	movs	r1, #0
 8012966:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012968:	f00f fe7e 	bl	8022668 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801296c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012970:	4a78      	ldr	r2, [pc, #480]	; (8012b54 <readCanToStructs+0x29e0>)
 8012972:	f240 4112 	movw	r1, #1042	; 0x412
 8012976:	fb01 f303 	mul.w	r3, r1, r3
 801297a:	4413      	add	r3, r2
 801297c:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012980:	2200      	movs	r2, #0
 8012982:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012984:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012988:	4a72      	ldr	r2, [pc, #456]	; (8012b54 <readCanToStructs+0x29e0>)
 801298a:	f240 4112 	movw	r1, #1042	; 0x412
 801298e:	fb01 f303 	mul.w	r3, r1, r3
 8012992:	4413      	add	r3, r2
 8012994:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012998:	781b      	ldrb	r3, [r3, #0]
 801299a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801299e:	429a      	cmp	r2, r3
 80129a0:	d011      	beq.n	80129c6 <readCanToStructs+0x2852>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80129a2:	2204      	movs	r2, #4
 80129a4:	2100      	movs	r1, #0
 80129a6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80129a8:	f00f fe5e 	bl	8022668 <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80129ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80129b0:	4a68      	ldr	r2, [pc, #416]	; (8012b54 <readCanToStructs+0x29e0>)
 80129b2:	f240 4112 	movw	r1, #1042	; 0x412
 80129b6:	fb01 f303 	mul.w	r3, r1, r3
 80129ba:	4413      	add	r3, r2
 80129bc:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80129c0:	2200      	movs	r2, #0
 80129c2:	701a      	strb	r2, [r3, #0]
					break;
 80129c4:	e229      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80129c6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80129ca:	4613      	mov	r3, r2
 80129cc:	00db      	lsls	r3, r3, #3
 80129ce:	1a9b      	subs	r3, r3, r2
 80129d0:	461a      	mov	r2, r3
 80129d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d4:	4413      	add	r3, r2
 80129d6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80129d8:	2301      	movs	r3, #1
 80129da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80129de:	e016      	b.n	8012a0e <readCanToStructs+0x289a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80129e0:	4b5b      	ldr	r3, [pc, #364]	; (8012b50 <readCanToStructs+0x29dc>)
 80129e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80129e6:	885b      	ldrh	r3, [r3, #2]
 80129e8:	461a      	mov	r2, r3
 80129ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80129ee:	4958      	ldr	r1, [pc, #352]	; (8012b50 <readCanToStructs+0x29dc>)
 80129f0:	0112      	lsls	r2, r2, #4
 80129f2:	440a      	add	r2, r1
 80129f4:	4413      	add	r3, r2
 80129f6:	3304      	adds	r3, #4
 80129f8:	781a      	ldrb	r2, [r3, #0]
 80129fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129fc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80129fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a00:	3301      	adds	r3, #1
 8012a02:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012a04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012a08:	3301      	adds	r3, #1
 8012a0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012a0e:	4b50      	ldr	r3, [pc, #320]	; (8012b50 <readCanToStructs+0x29dc>)
 8012a10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a14:	885b      	ldrh	r3, [r3, #2]
 8012a16:	4a4e      	ldr	r2, [pc, #312]	; (8012b50 <readCanToStructs+0x29dc>)
 8012a18:	011b      	lsls	r3, r3, #4
 8012a1a:	4413      	add	r3, r2
 8012a1c:	330c      	adds	r3, #12
 8012a1e:	781b      	ldrb	r3, [r3, #0]
 8012a20:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012a24:	429a      	cmp	r2, r3
 8012a26:	d3db      	bcc.n	80129e0 <readCanToStructs+0x286c>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 8012a28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a2c:	4a49      	ldr	r2, [pc, #292]	; (8012b54 <readCanToStructs+0x29e0>)
 8012a2e:	f240 4112 	movw	r1, #1042	; 0x412
 8012a32:	fb01 f303 	mul.w	r3, r1, r3
 8012a36:	4413      	add	r3, r2
 8012a38:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012a3c:	781b      	ldrb	r3, [r3, #0]
 8012a3e:	461a      	mov	r2, r3
 8012a40:	4613      	mov	r3, r2
 8012a42:	00db      	lsls	r3, r3, #3
 8012a44:	1a9a      	subs	r2, r3, r2
 8012a46:	4b42      	ldr	r3, [pc, #264]	; (8012b50 <readCanToStructs+0x29dc>)
 8012a48:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012a4c:	885b      	ldrh	r3, [r3, #2]
 8012a4e:	4940      	ldr	r1, [pc, #256]	; (8012b50 <readCanToStructs+0x29dc>)
 8012a50:	011b      	lsls	r3, r3, #4
 8012a52:	440b      	add	r3, r1
 8012a54:	330c      	adds	r3, #12
 8012a56:	781b      	ldrb	r3, [r3, #0]
 8012a58:	3b01      	subs	r3, #1
 8012a5a:	4413      	add	r3, r2
 8012a5c:	2b03      	cmp	r3, #3
 8012a5e:	d90f      	bls.n	8012a80 <readCanToStructs+0x290c>
					printf("Received CAN_FAULT_INJECTION\n");
 8012a60:	4843      	ldr	r0, [pc, #268]	; (8012b70 <readCanToStructs+0x29fc>)
 8012a62:	f00f ff85 	bl	8022970 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a6a:	4a3a      	ldr	r2, [pc, #232]	; (8012b54 <readCanToStructs+0x29e0>)
 8012a6c:	f240 4112 	movw	r1, #1042	; 0x412
 8012a70:	fb01 f303 	mul.w	r3, r1, r3
 8012a74:	4413      	add	r3, r2
 8012a76:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012a7a:	2200      	movs	r2, #0
 8012a7c:	701a      	strb	r2, [r3, #0]
 8012a7e:	e1cc      	b.n	8012e1a <readCanToStructs+0x2ca6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8012a80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a84:	4a33      	ldr	r2, [pc, #204]	; (8012b54 <readCanToStructs+0x29e0>)
 8012a86:	f240 4112 	movw	r1, #1042	; 0x412
 8012a8a:	fb01 f303 	mul.w	r3, r1, r3
 8012a8e:	4413      	add	r3, r2
 8012a90:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012a94:	2201      	movs	r2, #1
 8012a96:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012a98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012a9c:	492d      	ldr	r1, [pc, #180]	; (8012b54 <readCanToStructs+0x29e0>)
 8012a9e:	f240 4212 	movw	r2, #1042	; 0x412
 8012aa2:	fb03 f202 	mul.w	r2, r3, r2
 8012aa6:	440a      	add	r2, r1
 8012aa8:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012aac:	7812      	ldrb	r2, [r2, #0]
 8012aae:	3201      	adds	r2, #1
 8012ab0:	b2d0      	uxtb	r0, r2
 8012ab2:	4a28      	ldr	r2, [pc, #160]	; (8012b54 <readCanToStructs+0x29e0>)
 8012ab4:	f240 4112 	movw	r1, #1042	; 0x412
 8012ab8:	fb01 f303 	mul.w	r3, r1, r3
 8012abc:	4413      	add	r3, r2
 8012abe:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012ac2:	4602      	mov	r2, r0
 8012ac4:	701a      	strb	r2, [r3, #0]
				break;
 8012ac6:	e1a8      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012ac8:	4b2a      	ldr	r3, [pc, #168]	; (8012b74 <readCanToStructs+0x2a00>)
 8012aca:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012acc:	4b20      	ldr	r3, [pc, #128]	; (8012b50 <readCanToStructs+0x29dc>)
 8012ace:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012ad2:	885b      	ldrh	r3, [r3, #2]
 8012ad4:	4a1e      	ldr	r2, [pc, #120]	; (8012b50 <readCanToStructs+0x29dc>)
 8012ad6:	011b      	lsls	r3, r3, #4
 8012ad8:	4413      	add	r3, r2
 8012ada:	3304      	adds	r3, #4
 8012adc:	781b      	ldrb	r3, [r3, #0]
 8012ade:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012ae2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d110      	bne.n	8012b0c <readCanToStructs+0x2998>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012aea:	2284      	movs	r2, #132	; 0x84
 8012aec:	2100      	movs	r1, #0
 8012aee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012af0:	f00f fdba 	bl	8022668 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012af4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012af8:	4a16      	ldr	r2, [pc, #88]	; (8012b54 <readCanToStructs+0x29e0>)
 8012afa:	f240 4112 	movw	r1, #1042	; 0x412
 8012afe:	fb01 f303 	mul.w	r3, r1, r3
 8012b02:	4413      	add	r3, r2
 8012b04:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b08:	2200      	movs	r2, #0
 8012b0a:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b10:	4a10      	ldr	r2, [pc, #64]	; (8012b54 <readCanToStructs+0x29e0>)
 8012b12:	f240 4112 	movw	r1, #1042	; 0x412
 8012b16:	fb01 f303 	mul.w	r3, r1, r3
 8012b1a:	4413      	add	r3, r2
 8012b1c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b20:	781b      	ldrb	r3, [r3, #0]
 8012b22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b26:	429a      	cmp	r2, r3
 8012b28:	d026      	beq.n	8012b78 <readCanToStructs+0x2a04>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012b2a:	2284      	movs	r2, #132	; 0x84
 8012b2c:	2100      	movs	r1, #0
 8012b2e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012b30:	f00f fd9a 	bl	8022668 <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012b34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012b38:	4a06      	ldr	r2, [pc, #24]	; (8012b54 <readCanToStructs+0x29e0>)
 8012b3a:	f240 4112 	movw	r1, #1042	; 0x412
 8012b3e:	fb01 f303 	mul.w	r3, r1, r3
 8012b42:	4413      	add	r3, r2
 8012b44:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012b48:	2200      	movs	r2, #0
 8012b4a:	701a      	strb	r2, [r3, #0]
					break;
 8012b4c:	e165      	b.n	8012e1a <readCanToStructs+0x2ca6>
 8012b4e:	bf00      	nop
 8012b50:	20005e38 	.word	0x20005e38
 8012b54:	20005614 	.word	0x20005614
 8012b58:	08026f7c 	.word	0x08026f7c
 8012b5c:	200029f4 	.word	0x200029f4
 8012b60:	200029fc 	.word	0x200029fc
 8012b64:	20002494 	.word	0x20002494
 8012b68:	20002498 	.word	0x20002498
 8012b6c:	200029e8 	.word	0x200029e8
 8012b70:	08026f8c 	.word	0x08026f8c
 8012b74:	20002a88 	.word	0x20002a88
				uc_pp_charPtr += (7 * uc_seqNo);
 8012b78:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012b7c:	4613      	mov	r3, r2
 8012b7e:	00db      	lsls	r3, r3, #3
 8012b80:	1a9b      	subs	r3, r3, r2
 8012b82:	461a      	mov	r2, r3
 8012b84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b86:	4413      	add	r3, r2
 8012b88:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012b8a:	2301      	movs	r3, #1
 8012b8c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012b90:	e016      	b.n	8012bc0 <readCanToStructs+0x2a4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012b92:	4ba8      	ldr	r3, [pc, #672]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012b94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012b98:	885b      	ldrh	r3, [r3, #2]
 8012b9a:	461a      	mov	r2, r3
 8012b9c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012ba0:	49a4      	ldr	r1, [pc, #656]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012ba2:	0112      	lsls	r2, r2, #4
 8012ba4:	440a      	add	r2, r1
 8012ba6:	4413      	add	r3, r2
 8012ba8:	3304      	adds	r3, #4
 8012baa:	781a      	ldrb	r2, [r3, #0]
 8012bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bae:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb2:	3301      	adds	r3, #1
 8012bb4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012bb6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012bba:	3301      	adds	r3, #1
 8012bbc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012bc0:	4b9c      	ldr	r3, [pc, #624]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012bc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bc6:	885b      	ldrh	r3, [r3, #2]
 8012bc8:	4a9a      	ldr	r2, [pc, #616]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012bca:	011b      	lsls	r3, r3, #4
 8012bcc:	4413      	add	r3, r2
 8012bce:	330c      	adds	r3, #12
 8012bd0:	781b      	ldrb	r3, [r3, #0]
 8012bd2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012bd6:	429a      	cmp	r2, r3
 8012bd8:	d3db      	bcc.n	8012b92 <readCanToStructs+0x2a1e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012bda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012bde:	4a96      	ldr	r2, [pc, #600]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012be0:	f240 4112 	movw	r1, #1042	; 0x412
 8012be4:	fb01 f303 	mul.w	r3, r1, r3
 8012be8:	4413      	add	r3, r2
 8012bea:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	461a      	mov	r2, r3
 8012bf2:	4613      	mov	r3, r2
 8012bf4:	00db      	lsls	r3, r3, #3
 8012bf6:	1a9a      	subs	r2, r3, r2
 8012bf8:	4b8e      	ldr	r3, [pc, #568]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012bfa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012bfe:	885b      	ldrh	r3, [r3, #2]
 8012c00:	498c      	ldr	r1, [pc, #560]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012c02:	011b      	lsls	r3, r3, #4
 8012c04:	440b      	add	r3, r1
 8012c06:	330c      	adds	r3, #12
 8012c08:	781b      	ldrb	r3, [r3, #0]
 8012c0a:	3b01      	subs	r3, #1
 8012c0c:	4413      	add	r3, r2
 8012c0e:	2b83      	cmp	r3, #131	; 0x83
 8012c10:	d915      	bls.n	8012c3e <readCanToStructs+0x2aca>
					printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 8012c12:	488a      	ldr	r0, [pc, #552]	; (8012e3c <readCanToStructs+0x2cc8>)
 8012c14:	f00f feac 	bl	8022970 <puts>
					Received_CAN_Relay_Status = YES;
 8012c18:	4b89      	ldr	r3, [pc, #548]	; (8012e40 <readCanToStructs+0x2ccc>)
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = YES;
 8012c1e:	4b89      	ldr	r3, [pc, #548]	; (8012e44 <readCanToStructs+0x2cd0>)
 8012c20:	2201      	movs	r2, #1
 8012c22:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012c24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c28:	4a83      	ldr	r2, [pc, #524]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012c2a:	f240 4112 	movw	r1, #1042	; 0x412
 8012c2e:	fb01 f303 	mul.w	r3, r1, r3
 8012c32:	4413      	add	r3, r2
 8012c34:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012c38:	2200      	movs	r2, #0
 8012c3a:	701a      	strb	r2, [r3, #0]
 8012c3c:	e0ed      	b.n	8012e1a <readCanToStructs+0x2ca6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8012c3e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c42:	4a7d      	ldr	r2, [pc, #500]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012c44:	f240 4112 	movw	r1, #1042	; 0x412
 8012c48:	fb01 f303 	mul.w	r3, r1, r3
 8012c4c:	4413      	add	r3, r2
 8012c4e:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8012c52:	2201      	movs	r2, #1
 8012c54:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8012c56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012c5a:	4977      	ldr	r1, [pc, #476]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012c5c:	f240 4212 	movw	r2, #1042	; 0x412
 8012c60:	fb03 f202 	mul.w	r2, r3, r2
 8012c64:	440a      	add	r2, r1
 8012c66:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8012c6a:	7812      	ldrb	r2, [r2, #0]
 8012c6c:	3201      	adds	r2, #1
 8012c6e:	b2d0      	uxtb	r0, r2
 8012c70:	4a71      	ldr	r2, [pc, #452]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012c72:	f240 4112 	movw	r1, #1042	; 0x412
 8012c76:	fb01 f303 	mul.w	r3, r1, r3
 8012c7a:	4413      	add	r3, r2
 8012c7c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012c80:	4602      	mov	r2, r0
 8012c82:	701a      	strb	r2, [r3, #0]
				break;
 8012c84:	e0c9      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012c86:	4b70      	ldr	r3, [pc, #448]	; (8012e48 <readCanToStructs+0x2cd4>)
 8012c88:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012c8a:	4b6a      	ldr	r3, [pc, #424]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012c8c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012c90:	885b      	ldrh	r3, [r3, #2]
 8012c92:	4a68      	ldr	r2, [pc, #416]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012c94:	011b      	lsls	r3, r3, #4
 8012c96:	4413      	add	r3, r2
 8012c98:	3304      	adds	r3, #4
 8012c9a:	781b      	ldrb	r3, [r3, #0]
 8012c9c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012ca0:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d110      	bne.n	8012cca <readCanToStructs+0x2b56>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012ca8:	2284      	movs	r2, #132	; 0x84
 8012caa:	2100      	movs	r1, #0
 8012cac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cae:	f00f fcdb 	bl	8022668 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cb6:	4a60      	ldr	r2, [pc, #384]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012cb8:	f240 4112 	movw	r1, #1042	; 0x412
 8012cbc:	fb01 f303 	mul.w	r3, r1, r3
 8012cc0:	4413      	add	r3, r2
 8012cc2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012cc6:	2200      	movs	r2, #0
 8012cc8:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012cca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cce:	4a5a      	ldr	r2, [pc, #360]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012cd0:	f240 4112 	movw	r1, #1042	; 0x412
 8012cd4:	fb01 f303 	mul.w	r3, r1, r3
 8012cd8:	4413      	add	r3, r2
 8012cda:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012cde:	781b      	ldrb	r3, [r3, #0]
 8012ce0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012ce4:	429a      	cmp	r2, r3
 8012ce6:	d011      	beq.n	8012d0c <readCanToStructs+0x2b98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012ce8:	2284      	movs	r2, #132	; 0x84
 8012cea:	2100      	movs	r1, #0
 8012cec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012cee:	f00f fcbb 	bl	8022668 <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012cf2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012cf6:	4a50      	ldr	r2, [pc, #320]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012cf8:	f240 4112 	movw	r1, #1042	; 0x412
 8012cfc:	fb01 f303 	mul.w	r3, r1, r3
 8012d00:	4413      	add	r3, r2
 8012d02:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d06:	2200      	movs	r2, #0
 8012d08:	701a      	strb	r2, [r3, #0]
					break;
 8012d0a:	e086      	b.n	8012e1a <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012d0c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012d10:	4613      	mov	r3, r2
 8012d12:	00db      	lsls	r3, r3, #3
 8012d14:	1a9b      	subs	r3, r3, r2
 8012d16:	461a      	mov	r2, r3
 8012d18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d1a:	4413      	add	r3, r2
 8012d1c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d1e:	2301      	movs	r3, #1
 8012d20:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d24:	e016      	b.n	8012d54 <readCanToStructs+0x2be0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8012d26:	4b43      	ldr	r3, [pc, #268]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012d28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d2c:	885b      	ldrh	r3, [r3, #2]
 8012d2e:	461a      	mov	r2, r3
 8012d30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d34:	493f      	ldr	r1, [pc, #252]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012d36:	0112      	lsls	r2, r2, #4
 8012d38:	440a      	add	r2, r1
 8012d3a:	4413      	add	r3, r2
 8012d3c:	3304      	adds	r3, #4
 8012d3e:	781a      	ldrb	r2, [r3, #0]
 8012d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d42:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8012d44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d46:	3301      	adds	r3, #1
 8012d48:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012d4a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012d4e:	3301      	adds	r3, #1
 8012d50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012d54:	4b37      	ldr	r3, [pc, #220]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012d56:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d5a:	885b      	ldrh	r3, [r3, #2]
 8012d5c:	4a35      	ldr	r2, [pc, #212]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012d5e:	011b      	lsls	r3, r3, #4
 8012d60:	4413      	add	r3, r2
 8012d62:	330c      	adds	r3, #12
 8012d64:	781b      	ldrb	r3, [r3, #0]
 8012d66:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012d6a:	429a      	cmp	r2, r3
 8012d6c:	d3db      	bcc.n	8012d26 <readCanToStructs+0x2bb2>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012d6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012d72:	4a31      	ldr	r2, [pc, #196]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012d74:	f240 4112 	movw	r1, #1042	; 0x412
 8012d78:	fb01 f303 	mul.w	r3, r1, r3
 8012d7c:	4413      	add	r3, r2
 8012d7e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012d82:	781b      	ldrb	r3, [r3, #0]
 8012d84:	461a      	mov	r2, r3
 8012d86:	4613      	mov	r3, r2
 8012d88:	00db      	lsls	r3, r3, #3
 8012d8a:	1a9a      	subs	r2, r3, r2
 8012d8c:	4b29      	ldr	r3, [pc, #164]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012d8e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012d92:	885b      	ldrh	r3, [r3, #2]
 8012d94:	4927      	ldr	r1, [pc, #156]	; (8012e34 <readCanToStructs+0x2cc0>)
 8012d96:	011b      	lsls	r3, r3, #4
 8012d98:	440b      	add	r3, r1
 8012d9a:	330c      	adds	r3, #12
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	3b01      	subs	r3, #1
 8012da0:	4413      	add	r3, r2
 8012da2:	2b83      	cmp	r3, #131	; 0x83
 8012da4:	d915      	bls.n	8012dd2 <readCanToStructs+0x2c5e>
					printf("\nRCV RELAY_DATA_EI2\n");
 8012da6:	4829      	ldr	r0, [pc, #164]	; (8012e4c <readCanToStructs+0x2cd8>)
 8012da8:	f00f fde2 	bl	8022970 <puts>
					Medha_CAN_Xchanging_Happening = YES;
 8012dac:	4b25      	ldr	r3, [pc, #148]	; (8012e44 <readCanToStructs+0x2cd0>)
 8012dae:	2201      	movs	r2, #1
 8012db0:	701a      	strb	r2, [r3, #0]
					Received_CAN_Relay_Status = YES;
 8012db2:	4b23      	ldr	r3, [pc, #140]	; (8012e40 <readCanToStructs+0x2ccc>)
 8012db4:	2201      	movs	r2, #1
 8012db6:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dbc:	4a1e      	ldr	r2, [pc, #120]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012dbe:	f240 4112 	movw	r1, #1042	; 0x412
 8012dc2:	fb01 f303 	mul.w	r3, r1, r3
 8012dc6:	4413      	add	r3, r2
 8012dc8:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012dcc:	2200      	movs	r2, #0
 8012dce:	701a      	strb	r2, [r3, #0]
 8012dd0:	e022      	b.n	8012e18 <readCanToStructs+0x2ca4>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8012dd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dd6:	4a18      	ldr	r2, [pc, #96]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012dd8:	f240 4112 	movw	r1, #1042	; 0x412
 8012ddc:	fb01 f303 	mul.w	r3, r1, r3
 8012de0:	4413      	add	r3, r2
 8012de2:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012de6:	2201      	movs	r2, #1
 8012de8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012dea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012dee:	4912      	ldr	r1, [pc, #72]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012df0:	f240 4212 	movw	r2, #1042	; 0x412
 8012df4:	fb03 f202 	mul.w	r2, r3, r2
 8012df8:	440a      	add	r2, r1
 8012dfa:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8012dfe:	7812      	ldrb	r2, [r2, #0]
 8012e00:	3201      	adds	r2, #1
 8012e02:	b2d0      	uxtb	r0, r2
 8012e04:	4a0c      	ldr	r2, [pc, #48]	; (8012e38 <readCanToStructs+0x2cc4>)
 8012e06:	f240 4112 	movw	r1, #1042	; 0x412
 8012e0a:	fb01 f303 	mul.w	r3, r1, r3
 8012e0e:	4413      	add	r3, r2
 8012e10:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012e14:	4602      	mov	r2, r0
 8012e16:	701a      	strb	r2, [r3, #0]
				break;
 8012e18:	bf00      	nop
		while(canDataReady())
 8012e1a:	f7fd f955 	bl	80100c8 <canDataReady>
 8012e1e:	4603      	mov	r3, r0
 8012e20:	2b00      	cmp	r3, #0
 8012e22:	f47f a9be 	bne.w	80121a2 <readCanToStructs+0x202e>
	break;
 8012e26:	e002      	b.n	8012e2e <readCanToStructs+0x2cba>
		break;
 8012e28:	bf00      	nop
 8012e2a:	e000      	b.n	8012e2e <readCanToStructs+0x2cba>
			return;
 8012e2c:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 8012e2e:	3738      	adds	r7, #56	; 0x38
 8012e30:	46bd      	mov	sp, r7
 8012e32:	bd80      	pop	{r7, pc}
 8012e34:	20005e38 	.word	0x20005e38
 8012e38:	20005614 	.word	0x20005614
 8012e3c:	08026fac 	.word	0x08026fac
 8012e40:	20002495 	.word	0x20002495
 8012e44:	20002494 	.word	0x20002494
 8012e48:	20002a88 	.word	0x20002a88
 8012e4c:	08026fc8 	.word	0x08026fc8

08012e50 <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 8012e50:	b580      	push	{r7, lr}
 8012e52:	b084      	sub	sp, #16
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
 8012e58:	460b      	mov	r3, r1
 8012e5a:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 8012e5c:	2300      	movs	r3, #0
 8012e5e:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 8012e60:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012e64:	461a      	mov	r2, r3
 8012e66:	6879      	ldr	r1, [r7, #4]
 8012e68:	2000      	movs	r0, #0
 8012e6a:	f000 f845 	bl	8012ef8 <GetCRC16>
 8012e6e:	4603      	mov	r3, r0
 8012e70:	461a      	mov	r2, r3
 8012e72:	4b1d      	ldr	r3, [pc, #116]	; (8012ee8 <CheckCRC+0x98>)
 8012e74:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 8012e76:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012e7a:	687a      	ldr	r2, [r7, #4]
 8012e7c:	4413      	add	r3, r2
 8012e7e:	781b      	ldrb	r3, [r3, #0]
 8012e80:	b29a      	uxth	r2, r3
 8012e82:	4b1a      	ldr	r3, [pc, #104]	; (8012eec <CheckCRC+0x9c>)
 8012e84:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8012e86:	4b19      	ldr	r3, [pc, #100]	; (8012eec <CheckCRC+0x9c>)
 8012e88:	881b      	ldrh	r3, [r3, #0]
 8012e8a:	021b      	lsls	r3, r3, #8
 8012e8c:	b29a      	uxth	r2, r3
 8012e8e:	4b17      	ldr	r3, [pc, #92]	; (8012eec <CheckCRC+0x9c>)
 8012e90:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 8012e92:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012e96:	3301      	adds	r3, #1
 8012e98:	687a      	ldr	r2, [r7, #4]
 8012e9a:	4413      	add	r3, r2
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	b29a      	uxth	r2, r3
 8012ea0:	4b12      	ldr	r3, [pc, #72]	; (8012eec <CheckCRC+0x9c>)
 8012ea2:	881b      	ldrh	r3, [r3, #0]
 8012ea4:	4313      	orrs	r3, r2
 8012ea6:	b29a      	uxth	r2, r3
 8012ea8:	4b10      	ldr	r3, [pc, #64]	; (8012eec <CheckCRC+0x9c>)
 8012eaa:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8012eac:	4b0f      	ldr	r3, [pc, #60]	; (8012eec <CheckCRC+0x9c>)
 8012eae:	881a      	ldrh	r2, [r3, #0]
 8012eb0:	4b0d      	ldr	r3, [pc, #52]	; (8012ee8 <CheckCRC+0x98>)
 8012eb2:	881b      	ldrh	r3, [r3, #0]
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	d105      	bne.n	8012ec4 <CheckCRC+0x74>
	{
		retVal = 1;
 8012eb8:	2301      	movs	r3, #1
 8012eba:	81fb      	strh	r3, [r7, #14]
		return k;
 8012ebc:	4b0b      	ldr	r3, [pc, #44]	; (8012eec <CheckCRC+0x9c>)
 8012ebe:	881b      	ldrh	r3, [r3, #0]
 8012ec0:	b21b      	sxth	r3, r3
 8012ec2:	e00d      	b.n	8012ee0 <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8012ec4:	4b08      	ldr	r3, [pc, #32]	; (8012ee8 <CheckCRC+0x98>)
 8012ec6:	881b      	ldrh	r3, [r3, #0]
 8012ec8:	4619      	mov	r1, r3
 8012eca:	4809      	ldr	r0, [pc, #36]	; (8012ef0 <CheckCRC+0xa0>)
 8012ecc:	f00f fcb4 	bl	8022838 <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 8012ed0:	4b06      	ldr	r3, [pc, #24]	; (8012eec <CheckCRC+0x9c>)
 8012ed2:	881b      	ldrh	r3, [r3, #0]
 8012ed4:	4619      	mov	r1, r3
 8012ed6:	4807      	ldr	r0, [pc, #28]	; (8012ef4 <CheckCRC+0xa4>)
 8012ed8:	f00f fcae 	bl	8022838 <iprintf>
	return retVal;
 8012edc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	3710      	adds	r7, #16
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	bd80      	pop	{r7, pc}
 8012ee8:	20009f94 	.word	0x20009f94
 8012eec:	20009f96 	.word	0x20009f96
 8012ef0:	08026fdc 	.word	0x08026fdc
 8012ef4:	08026ff4 	.word	0x08026ff4

08012ef8 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8012ef8:	b480      	push	{r7}
 8012efa:	b085      	sub	sp, #20
 8012efc:	af00      	add	r7, sp, #0
 8012efe:	4603      	mov	r3, r0
 8012f00:	6039      	str	r1, [r7, #0]
 8012f02:	80fb      	strh	r3, [r7, #6]
 8012f04:	4613      	mov	r3, r2
 8012f06:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8012f08:	88fb      	ldrh	r3, [r7, #6]
 8012f0a:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8012f0c:	e038      	b.n	8012f80 <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012f0e:	89fb      	ldrh	r3, [r7, #14]
 8012f10:	f003 030f 	and.w	r3, r3, #15
 8012f14:	4a22      	ldr	r2, [pc, #136]	; (8012fa0 <GetCRC16+0xa8>)
 8012f16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f1a:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012f1c:	89fb      	ldrh	r3, [r7, #14]
 8012f1e:	091b      	lsrs	r3, r3, #4
 8012f20:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 8012f22:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012f26:	89bb      	ldrh	r3, [r7, #12]
 8012f28:	4053      	eors	r3, r2
 8012f2a:	b21a      	sxth	r2, r3
 8012f2c:	683b      	ldr	r3, [r7, #0]
 8012f2e:	781b      	ldrb	r3, [r3, #0]
 8012f30:	f003 030f 	and.w	r3, r3, #15
 8012f34:	491a      	ldr	r1, [pc, #104]	; (8012fa0 <GetCRC16+0xa8>)
 8012f36:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012f3a:	b21b      	sxth	r3, r3
 8012f3c:	4053      	eors	r3, r2
 8012f3e:	b21b      	sxth	r3, r3
 8012f40:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 8012f42:	89fb      	ldrh	r3, [r7, #14]
 8012f44:	f003 030f 	and.w	r3, r3, #15
 8012f48:	4a15      	ldr	r2, [pc, #84]	; (8012fa0 <GetCRC16+0xa8>)
 8012f4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012f4e:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012f50:	89fb      	ldrh	r3, [r7, #14]
 8012f52:	091b      	lsrs	r3, r3, #4
 8012f54:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 8012f56:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8012f5a:	89bb      	ldrh	r3, [r7, #12]
 8012f5c:	4053      	eors	r3, r2
 8012f5e:	b21a      	sxth	r2, r3
 8012f60:	683b      	ldr	r3, [r7, #0]
 8012f62:	781b      	ldrb	r3, [r3, #0]
 8012f64:	091b      	lsrs	r3, r3, #4
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	f003 030f 	and.w	r3, r3, #15
 8012f6c:	490c      	ldr	r1, [pc, #48]	; (8012fa0 <GetCRC16+0xa8>)
 8012f6e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8012f72:	b21b      	sxth	r3, r3
 8012f74:	4053      	eors	r3, r2
 8012f76:	b21b      	sxth	r3, r3
 8012f78:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 8012f7a:	683b      	ldr	r3, [r7, #0]
 8012f7c:	3301      	adds	r3, #1
 8012f7e:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 8012f80:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012f84:	b29a      	uxth	r2, r3
 8012f86:	3a01      	subs	r2, #1
 8012f88:	b292      	uxth	r2, r2
 8012f8a:	80ba      	strh	r2, [r7, #4]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	dcbe      	bgt.n	8012f0e <GetCRC16+0x16>
	}
	return(uiCrc);
 8012f90:	89fb      	ldrh	r3, [r7, #14]
}
 8012f92:	4618      	mov	r0, r3
 8012f94:	3714      	adds	r7, #20
 8012f96:	46bd      	mov	sp, r7
 8012f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f9c:	4770      	bx	lr
 8012f9e:	bf00      	nop
 8012fa0:	08028ea4 	.word	0x08028ea4

08012fa4 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8012fa4:	b580      	push	{r7, lr}
 8012fa6:	b082      	sub	sp, #8
 8012fa8:	af00      	add	r7, sp, #0
 8012faa:	6078      	str	r0, [r7, #4]
 8012fac:	460b      	mov	r3, r1
 8012fae:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8012fb0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fb4:	461a      	mov	r2, r3
 8012fb6:	6879      	ldr	r1, [r7, #4]
 8012fb8:	2000      	movs	r0, #0
 8012fba:	f7ff ff9d 	bl	8012ef8 <GetCRC16>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	461a      	mov	r2, r3
 8012fc2:	4b11      	ldr	r3, [pc, #68]	; (8013008 <ComputeCRC+0x64>)
 8012fc4:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8012fc6:	4b10      	ldr	r3, [pc, #64]	; (8013008 <ComputeCRC+0x64>)
 8012fc8:	881a      	ldrh	r2, [r3, #0]
 8012fca:	4b10      	ldr	r3, [pc, #64]	; (801300c <ComputeCRC+0x68>)
 8012fcc:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8012fce:	4b0e      	ldr	r3, [pc, #56]	; (8013008 <ComputeCRC+0x64>)
 8012fd0:	8819      	ldrh	r1, [r3, #0]
 8012fd2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012fd6:	3301      	adds	r3, #1
 8012fd8:	687a      	ldr	r2, [r7, #4]
 8012fda:	4413      	add	r3, r2
 8012fdc:	b2ca      	uxtb	r2, r1
 8012fde:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8012fe0:	4b09      	ldr	r3, [pc, #36]	; (8013008 <ComputeCRC+0x64>)
 8012fe2:	881b      	ldrh	r3, [r3, #0]
 8012fe4:	0a1b      	lsrs	r3, r3, #8
 8012fe6:	b29a      	uxth	r2, r3
 8012fe8:	4b07      	ldr	r3, [pc, #28]	; (8013008 <ComputeCRC+0x64>)
 8012fea:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8012fec:	4b06      	ldr	r3, [pc, #24]	; (8013008 <ComputeCRC+0x64>)
 8012fee:	8819      	ldrh	r1, [r3, #0]
 8012ff0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012ff4:	687a      	ldr	r2, [r7, #4]
 8012ff6:	4413      	add	r3, r2
 8012ff8:	b2ca      	uxtb	r2, r1
 8012ffa:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8012ffc:	4b03      	ldr	r3, [pc, #12]	; (801300c <ComputeCRC+0x68>)
 8012ffe:	881b      	ldrh	r3, [r3, #0]
}
 8013000:	4618      	mov	r0, r3
 8013002:	3708      	adds	r7, #8
 8013004:	46bd      	mov	sp, r7
 8013006:	bd80      	pop	{r7, pc}
 8013008:	20009f98 	.word	0x20009f98
 801300c:	20009f9a 	.word	0x20009f9a

08013010 <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8013010:	b480      	push	{r7}
 8013012:	b087      	sub	sp, #28
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8013018:	2300      	movs	r3, #0
 801301a:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 801301c:	2300      	movs	r3, #0
 801301e:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8013020:	2300      	movs	r3, #0
 8013022:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	005b      	lsls	r3, r3, #1
 8013028:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 801302a:	2300      	movs	r3, #0
 801302c:	60fb      	str	r3, [r7, #12]
 801302e:	e012      	b.n	8013056 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8013030:	693b      	ldr	r3, [r7, #16]
 8013032:	f003 0301 	and.w	r3, r3, #1
 8013036:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8013038:	68fb      	ldr	r3, [r7, #12]
 801303a:	f1c3 031f 	rsb	r3, r3, #31
 801303e:	68ba      	ldr	r2, [r7, #8]
 8013040:	fa02 f303 	lsl.w	r3, r2, r3
 8013044:	697a      	ldr	r2, [r7, #20]
 8013046:	4313      	orrs	r3, r2
 8013048:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 801304a:	693b      	ldr	r3, [r7, #16]
 801304c:	085b      	lsrs	r3, r3, #1
 801304e:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	3301      	adds	r3, #1
 8013054:	60fb      	str	r3, [r7, #12]
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2b1f      	cmp	r3, #31
 801305a:	dde9      	ble.n	8013030 <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 801305c:	697b      	ldr	r3, [r7, #20]
}
 801305e:	4618      	mov	r0, r3
 8013060:	371c      	adds	r7, #28
 8013062:	46bd      	mov	sp, r7
 8013064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013068:	4770      	bx	lr
	...

0801306c <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 801306c:	b580      	push	{r7, lr}
 801306e:	b088      	sub	sp, #32
 8013070:	af00      	add	r7, sp, #0
 8013072:	6078      	str	r0, [r7, #4]
 8013074:	460b      	mov	r3, r1
 8013076:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8013078:	2300      	movs	r3, #0
 801307a:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 801307c:	2300      	movs	r3, #0
 801307e:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8013080:	2300      	movs	r3, #0
 8013082:	613b      	str	r3, [r7, #16]
	int i=0;
 8013084:	2300      	movs	r3, #0
 8013086:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8013088:	4b26      	ldr	r3, [pc, #152]	; (8013124 <CalculateDirectReverseCrc+0xb8>)
 801308a:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 801308c:	68f8      	ldr	r0, [r7, #12]
 801308e:	f7ff ffbf 	bl	8013010 <ReverseCRCPolynomial>
 8013092:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8013094:	2300      	movs	r3, #0
 8013096:	61bb      	str	r3, [r7, #24]
 8013098:	e00d      	b.n	80130b6 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 801309a:	69f8      	ldr	r0, [r7, #28]
 801309c:	69bb      	ldr	r3, [r7, #24]
 801309e:	687a      	ldr	r2, [r7, #4]
 80130a0:	4413      	add	r3, r2
 80130a2:	781b      	ldrb	r3, [r3, #0]
 80130a4:	697a      	ldr	r2, [r7, #20]
 80130a6:	4619      	mov	r1, r3
 80130a8:	f000 f844 	bl	8013134 <AnsoldoCrc>
 80130ac:	4603      	mov	r3, r0
 80130ae:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 80130b0:	69bb      	ldr	r3, [r7, #24]
 80130b2:	3301      	adds	r3, #1
 80130b4:	61bb      	str	r3, [r7, #24]
 80130b6:	887b      	ldrh	r3, [r7, #2]
 80130b8:	69ba      	ldr	r2, [r7, #24]
 80130ba:	429a      	cmp	r2, r3
 80130bc:	dbed      	blt.n	801309a <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 80130be:	69fb      	ldr	r3, [r7, #28]
 80130c0:	061b      	lsls	r3, r3, #24
 80130c2:	693a      	ldr	r2, [r7, #16]
 80130c4:	4313      	orrs	r3, r2
 80130c6:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 80130c8:	69fb      	ldr	r3, [r7, #28]
 80130ca:	021b      	lsls	r3, r3, #8
 80130cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80130d0:	693a      	ldr	r2, [r7, #16]
 80130d2:	4313      	orrs	r3, r2
 80130d4:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 80130d6:	69fb      	ldr	r3, [r7, #28]
 80130d8:	121b      	asrs	r3, r3, #8
 80130da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80130de:	693a      	ldr	r2, [r7, #16]
 80130e0:	4313      	orrs	r3, r2
 80130e2:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 80130e4:	69fb      	ldr	r3, [r7, #28]
 80130e6:	0e1a      	lsrs	r2, r3, #24
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	4313      	orrs	r3, r2
 80130ec:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 80130ee:	4b0e      	ldr	r3, [pc, #56]	; (8013128 <CalculateDirectReverseCrc+0xbc>)
 80130f0:	781b      	ldrb	r3, [r3, #0]
 80130f2:	2b01      	cmp	r3, #1
 80130f4:	d110      	bne.n	8013118 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 80130f6:	480d      	ldr	r0, [pc, #52]	; (801312c <CalculateDirectReverseCrc+0xc0>)
 80130f8:	f007 f846 	bl	801a188 <HAL_RNG_GetRandomNumber>
 80130fc:	4601      	mov	r1, r0
 80130fe:	4b0c      	ldr	r3, [pc, #48]	; (8013130 <CalculateDirectReverseCrc+0xc4>)
 8013100:	fba3 2301 	umull	r2, r3, r3, r1
 8013104:	08da      	lsrs	r2, r3, #3
 8013106:	4613      	mov	r3, r2
 8013108:	009b      	lsls	r3, r3, #2
 801310a:	4413      	add	r3, r2
 801310c:	005b      	lsls	r3, r3, #1
 801310e:	1aca      	subs	r2, r1, r3
 8013110:	693b      	ldr	r3, [r7, #16]
 8013112:	4413      	add	r3, r2
 8013114:	3301      	adds	r3, #1
 8013116:	e000      	b.n	801311a <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8013118:	693b      	ldr	r3, [r7, #16]
}
 801311a:	4618      	mov	r0, r3
 801311c:	3720      	adds	r7, #32
 801311e:	46bd      	mov	sp, r7
 8013120:	bd80      	pop	{r7, pc}
 8013122:	bf00      	nop
 8013124:	d20d8a81 	.word	0xd20d8a81
 8013128:	20000e39 	.word	0x20000e39
 801312c:	2000a05c 	.word	0x2000a05c
 8013130:	cccccccd 	.word	0xcccccccd

08013134 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8013134:	b480      	push	{r7}
 8013136:	b08b      	sub	sp, #44	; 0x2c
 8013138:	af00      	add	r7, sp, #0
 801313a:	60f8      	str	r0, [r7, #12]
 801313c:	460b      	mov	r3, r1
 801313e:	607a      	str	r2, [r7, #4]
 8013140:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8013142:	7afb      	ldrb	r3, [r7, #11]
 8013144:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8013146:	2301      	movs	r3, #1
 8013148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801314c:	e01d      	b.n	801318a <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f003 0301 	and.w	r3, r3, #1
 8013154:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8013156:	6a3b      	ldr	r3, [r7, #32]
 8013158:	f003 0301 	and.w	r3, r3, #1
 801315c:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 801315e:	68fb      	ldr	r3, [r7, #12]
 8013160:	085b      	lsrs	r3, r3, #1
 8013162:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8013164:	69fa      	ldr	r2, [r7, #28]
 8013166:	69bb      	ldr	r3, [r7, #24]
 8013168:	4053      	eors	r3, r2
 801316a:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 801316c:	697b      	ldr	r3, [r7, #20]
 801316e:	2b01      	cmp	r3, #1
 8013170:	d103      	bne.n	801317a <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8013172:	68fa      	ldr	r2, [r7, #12]
 8013174:	687b      	ldr	r3, [r7, #4]
 8013176:	4053      	eors	r3, r2
 8013178:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 801317a:	6a3b      	ldr	r3, [r7, #32]
 801317c:	085b      	lsrs	r3, r3, #1
 801317e:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8013180:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013184:	3301      	adds	r3, #1
 8013186:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801318a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801318e:	2b08      	cmp	r3, #8
 8013190:	d9dd      	bls.n	801314e <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8013192:	68fb      	ldr	r3, [r7, #12]
}
 8013194:	4618      	mov	r0, r3
 8013196:	372c      	adds	r7, #44	; 0x2c
 8013198:	46bd      	mov	sp, r7
 801319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801319e:	4770      	bx	lr

080131a0 <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 80131a0:	b580      	push	{r7, lr}
 80131a2:	b090      	sub	sp, #64	; 0x40
 80131a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80131a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80131aa:	2200      	movs	r2, #0
 80131ac:	601a      	str	r2, [r3, #0]
 80131ae:	605a      	str	r2, [r3, #4]
 80131b0:	609a      	str	r2, [r3, #8]
 80131b2:	60da      	str	r2, [r3, #12]
 80131b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80131b6:	4bb2      	ldr	r3, [pc, #712]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ba:	4ab1      	ldr	r2, [pc, #708]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80131c0:	6313      	str	r3, [r2, #48]	; 0x30
 80131c2:	4baf      	ldr	r3, [pc, #700]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80131ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80131cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80131ce:	4bac      	ldr	r3, [pc, #688]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d2:	4aab      	ldr	r2, [pc, #684]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131d4:	f043 0320 	orr.w	r3, r3, #32
 80131d8:	6313      	str	r3, [r2, #48]	; 0x30
 80131da:	4ba9      	ldr	r3, [pc, #676]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131de:	f003 0320 	and.w	r3, r3, #32
 80131e2:	627b      	str	r3, [r7, #36]	; 0x24
 80131e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80131e6:	4ba6      	ldr	r3, [pc, #664]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131ea:	4aa5      	ldr	r2, [pc, #660]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80131f0:	6313      	str	r3, [r2, #48]	; 0x30
 80131f2:	4ba3      	ldr	r3, [pc, #652]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80131f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80131fa:	623b      	str	r3, [r7, #32]
 80131fc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80131fe:	4ba0      	ldr	r3, [pc, #640]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013202:	4a9f      	ldr	r2, [pc, #636]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013204:	f043 0304 	orr.w	r3, r3, #4
 8013208:	6313      	str	r3, [r2, #48]	; 0x30
 801320a:	4b9d      	ldr	r3, [pc, #628]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801320e:	f003 0304 	and.w	r3, r3, #4
 8013212:	61fb      	str	r3, [r7, #28]
 8013214:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013216:	4b9a      	ldr	r3, [pc, #616]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801321a:	4a99      	ldr	r2, [pc, #612]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801321c:	f043 0301 	orr.w	r3, r3, #1
 8013220:	6313      	str	r3, [r2, #48]	; 0x30
 8013222:	4b97      	ldr	r3, [pc, #604]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013226:	f003 0301 	and.w	r3, r3, #1
 801322a:	61bb      	str	r3, [r7, #24]
 801322c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 801322e:	4b94      	ldr	r3, [pc, #592]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013232:	4a93      	ldr	r2, [pc, #588]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013238:	6313      	str	r3, [r2, #48]	; 0x30
 801323a:	4b91      	ldr	r3, [pc, #580]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801323e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013242:	617b      	str	r3, [r7, #20]
 8013244:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013246:	4b8e      	ldr	r3, [pc, #568]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801324a:	4a8d      	ldr	r2, [pc, #564]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801324c:	f043 0310 	orr.w	r3, r3, #16
 8013250:	6313      	str	r3, [r2, #48]	; 0x30
 8013252:	4b8b      	ldr	r3, [pc, #556]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013256:	f003 0310 	and.w	r3, r3, #16
 801325a:	613b      	str	r3, [r7, #16]
 801325c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801325e:	4b88      	ldr	r3, [pc, #544]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013262:	4a87      	ldr	r2, [pc, #540]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013264:	f043 0302 	orr.w	r3, r3, #2
 8013268:	6313      	str	r3, [r2, #48]	; 0x30
 801326a:	4b85      	ldr	r3, [pc, #532]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801326c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801326e:	f003 0302 	and.w	r3, r3, #2
 8013272:	60fb      	str	r3, [r7, #12]
 8013274:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8013276:	4b82      	ldr	r3, [pc, #520]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801327a:	4a81      	ldr	r2, [pc, #516]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801327c:	f043 0308 	orr.w	r3, r3, #8
 8013280:	6313      	str	r3, [r2, #48]	; 0x30
 8013282:	4b7f      	ldr	r3, [pc, #508]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013286:	f003 0308 	and.w	r3, r3, #8
 801328a:	60bb      	str	r3, [r7, #8]
 801328c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 801328e:	4b7c      	ldr	r3, [pc, #496]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013292:	4a7b      	ldr	r2, [pc, #492]	; (8013480 <MX_GPIO_Init+0x2e0>)
 8013294:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8013298:	6313      	str	r3, [r2, #48]	; 0x30
 801329a:	4b79      	ldr	r3, [pc, #484]	; (8013480 <MX_GPIO_Init+0x2e0>)
 801329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801329e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80132a2:	607b      	str	r3, [r7, #4]
 80132a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80132a6:	4b76      	ldr	r3, [pc, #472]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80132a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132aa:	4a75      	ldr	r2, [pc, #468]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80132ac:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80132b0:	6313      	str	r3, [r2, #48]	; 0x30
 80132b2:	4b73      	ldr	r3, [pc, #460]	; (8013480 <MX_GPIO_Init+0x2e0>)
 80132b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80132b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80132ba:	603b      	str	r3, [r7, #0]
 80132bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 80132be:	2200      	movs	r2, #0
 80132c0:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 80132c4:	486f      	ldr	r0, [pc, #444]	; (8013484 <MX_GPIO_Init+0x2e4>)
 80132c6:	f004 ff7d 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 80132ca:	2200      	movs	r2, #0
 80132cc:	f44f 6184 	mov.w	r1, #1056	; 0x420
 80132d0:	486d      	ldr	r0, [pc, #436]	; (8013488 <MX_GPIO_Init+0x2e8>)
 80132d2:	f004 ff77 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 80132d6:	2200      	movs	r2, #0
 80132d8:	f240 7104 	movw	r1, #1796	; 0x704
 80132dc:	486b      	ldr	r0, [pc, #428]	; (801348c <MX_GPIO_Init+0x2ec>)
 80132de:	f004 ff71 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 80132e2:	2201      	movs	r2, #1
 80132e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80132e8:	4869      	ldr	r0, [pc, #420]	; (8013490 <MX_GPIO_Init+0x2f0>)
 80132ea:	f004 ff6b 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 80132ee:	2200      	movs	r2, #0
 80132f0:	f241 0104 	movw	r1, #4100	; 0x1004
 80132f4:	4867      	ldr	r0, [pc, #412]	; (8013494 <MX_GPIO_Init+0x2f4>)
 80132f6:	f004 ff65 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 80132fa:	2201      	movs	r2, #1
 80132fc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8013300:	4865      	ldr	r0, [pc, #404]	; (8013498 <MX_GPIO_Init+0x2f8>)
 8013302:	f004 ff5f 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8013306:	2200      	movs	r2, #0
 8013308:	2108      	movs	r1, #8
 801330a:	4864      	ldr	r0, [pc, #400]	; (801349c <MX_GPIO_Init+0x2fc>)
 801330c:	f004 ff5a 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8013310:	2201      	movs	r2, #1
 8013312:	2160      	movs	r1, #96	; 0x60
 8013314:	4861      	ldr	r0, [pc, #388]	; (801349c <MX_GPIO_Init+0x2fc>)
 8013316:	f004 ff55 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 801331a:	2200      	movs	r2, #0
 801331c:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8013320:	485f      	ldr	r0, [pc, #380]	; (80134a0 <MX_GPIO_Init+0x300>)
 8013322:	f004 ff4f 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8013326:	2201      	movs	r2, #1
 8013328:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 801332c:	485c      	ldr	r0, [pc, #368]	; (80134a0 <MX_GPIO_Init+0x300>)
 801332e:	f004 ff49 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8013332:	2201      	movs	r2, #1
 8013334:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8013338:	4856      	ldr	r0, [pc, #344]	; (8013494 <MX_GPIO_Init+0x2f4>)
 801333a:	f004 ff43 	bl	80181c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 801333e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8013342:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013344:	2301      	movs	r3, #1
 8013346:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013348:	2300      	movs	r3, #0
 801334a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801334c:	2303      	movs	r3, #3
 801334e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8013350:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013354:	4619      	mov	r1, r3
 8013356:	484b      	ldr	r0, [pc, #300]	; (8013484 <MX_GPIO_Init+0x2e4>)
 8013358:	f004 fd70 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 801335c:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8013360:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013362:	2300      	movs	r3, #0
 8013364:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013366:	2300      	movs	r3, #0
 8013368:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 801336a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801336e:	4619      	mov	r1, r3
 8013370:	4844      	ldr	r0, [pc, #272]	; (8013484 <MX_GPIO_Init+0x2e4>)
 8013372:	f004 fd63 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8013376:	f44f 6384 	mov.w	r3, #1056	; 0x420
 801337a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801337c:	2301      	movs	r3, #1
 801337e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013380:	2300      	movs	r3, #0
 8013382:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013384:	2303      	movs	r3, #3
 8013386:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013388:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801338c:	4619      	mov	r1, r3
 801338e:	483e      	ldr	r0, [pc, #248]	; (8013488 <MX_GPIO_Init+0x2e8>)
 8013390:	f004 fd54 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8013394:	2304      	movs	r3, #4
 8013396:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013398:	2300      	movs	r3, #0
 801339a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801339c:	2300      	movs	r3, #0
 801339e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 80133a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133a4:	4619      	mov	r1, r3
 80133a6:	483c      	ldr	r0, [pc, #240]	; (8013498 <MX_GPIO_Init+0x2f8>)
 80133a8:	f004 fd48 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 80133ac:	f240 7304 	movw	r3, #1796	; 0x704
 80133b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80133b2:	2301      	movs	r3, #1
 80133b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133b6:	2300      	movs	r3, #0
 80133b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80133ba:	2303      	movs	r3, #3
 80133bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80133be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133c2:	4619      	mov	r1, r3
 80133c4:	4831      	ldr	r0, [pc, #196]	; (801348c <MX_GPIO_Init+0x2ec>)
 80133c6:	f004 fd39 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 80133ca:	2303      	movs	r3, #3
 80133cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80133ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80133d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133d4:	2300      	movs	r3, #0
 80133d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80133d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133dc:	4619      	mov	r1, r3
 80133de:	482d      	ldr	r0, [pc, #180]	; (8013494 <MX_GPIO_Init+0x2f4>)
 80133e0:	f004 fd2c 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 80133e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80133e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80133ea:	2300      	movs	r3, #0
 80133ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80133ee:	2300      	movs	r3, #0
 80133f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 80133f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80133f6:	4619      	mov	r1, r3
 80133f8:	4825      	ldr	r0, [pc, #148]	; (8013490 <MX_GPIO_Init+0x2f0>)
 80133fa:	f004 fd1f 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 80133fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013402:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013404:	2301      	movs	r3, #1
 8013406:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013408:	2300      	movs	r3, #0
 801340a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801340c:	2303      	movs	r3, #3
 801340e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8013410:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013414:	4619      	mov	r1, r3
 8013416:	481e      	ldr	r0, [pc, #120]	; (8013490 <MX_GPIO_Init+0x2f0>)
 8013418:	f004 fd10 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 801341c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8013420:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013422:	2300      	movs	r3, #0
 8013424:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013426:	2300      	movs	r3, #0
 8013428:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 801342a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801342e:	4619      	mov	r1, r3
 8013430:	481a      	ldr	r0, [pc, #104]	; (801349c <MX_GPIO_Init+0x2fc>)
 8013432:	f004 fd03 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8013436:	f241 4304 	movw	r3, #5124	; 0x1404
 801343a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801343c:	2301      	movs	r3, #1
 801343e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013440:	2300      	movs	r3, #0
 8013442:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013444:	2303      	movs	r3, #3
 8013446:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013448:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801344c:	4619      	mov	r1, r3
 801344e:	4811      	ldr	r0, [pc, #68]	; (8013494 <MX_GPIO_Init+0x2f4>)
 8013450:	f004 fcf4 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8013454:	2308      	movs	r3, #8
 8013456:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013458:	2300      	movs	r3, #0
 801345a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801345c:	2300      	movs	r3, #0
 801345e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8013460:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013464:	4619      	mov	r1, r3
 8013466:	480b      	ldr	r0, [pc, #44]	; (8013494 <MX_GPIO_Init+0x2f4>)
 8013468:	f004 fce8 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 801346c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013470:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013472:	2301      	movs	r3, #1
 8013474:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013476:	2300      	movs	r3, #0
 8013478:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801347a:	2300      	movs	r3, #0
 801347c:	63bb      	str	r3, [r7, #56]	; 0x38
 801347e:	e011      	b.n	80134a4 <MX_GPIO_Init+0x304>
 8013480:	40023800 	.word	0x40023800
 8013484:	40022000 	.word	0x40022000
 8013488:	40021400 	.word	0x40021400
 801348c:	40021c00 	.word	0x40021c00
 8013490:	40021000 	.word	0x40021000
 8013494:	40021800 	.word	0x40021800
 8013498:	40020800 	.word	0x40020800
 801349c:	40020c00 	.word	0x40020c00
 80134a0:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 80134a4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134a8:	4619      	mov	r1, r3
 80134aa:	4836      	ldr	r0, [pc, #216]	; (8013584 <MX_GPIO_Init+0x3e4>)
 80134ac:	f004 fcc6 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 80134b0:	2303      	movs	r3, #3
 80134b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80134b4:	2302      	movs	r3, #2
 80134b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134b8:	2300      	movs	r3, #0
 80134ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134bc:	2303      	movs	r3, #3
 80134be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80134c0:	2309      	movs	r3, #9
 80134c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134c8:	4619      	mov	r1, r3
 80134ca:	482f      	ldr	r0, [pc, #188]	; (8013588 <MX_GPIO_Init+0x3e8>)
 80134cc:	f004 fcb6 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 80134d0:	2368      	movs	r3, #104	; 0x68
 80134d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80134d4:	2301      	movs	r3, #1
 80134d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134d8:	2300      	movs	r3, #0
 80134da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80134dc:	2303      	movs	r3, #3
 80134de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80134e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134e4:	4619      	mov	r1, r3
 80134e6:	4828      	ldr	r0, [pc, #160]	; (8013588 <MX_GPIO_Init+0x3e8>)
 80134e8:	f004 fca8 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 80134ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80134f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80134f2:	2300      	movs	r3, #0
 80134f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80134f6:	2300      	movs	r3, #0
 80134f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 80134fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80134fe:	4619      	mov	r1, r3
 8013500:	4822      	ldr	r0, [pc, #136]	; (801358c <MX_GPIO_Init+0x3ec>)
 8013502:	f004 fc9b 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8013506:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801350a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801350c:	2301      	movs	r3, #1
 801350e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013510:	2300      	movs	r3, #0
 8013512:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013514:	2300      	movs	r3, #0
 8013516:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8013518:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801351c:	4619      	mov	r1, r3
 801351e:	481b      	ldr	r0, [pc, #108]	; (801358c <MX_GPIO_Init+0x3ec>)
 8013520:	f004 fc8c 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8013524:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013528:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 801352a:	2301      	movs	r3, #1
 801352c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801352e:	2300      	movs	r3, #0
 8013530:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013532:	2303      	movs	r3, #3
 8013534:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8013536:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 801353a:	4619      	mov	r1, r3
 801353c:	4813      	ldr	r0, [pc, #76]	; (801358c <MX_GPIO_Init+0x3ec>)
 801353e:	f004 fc7d 	bl	8017e3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8013542:	2318      	movs	r3, #24
 8013544:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013546:	2300      	movs	r3, #0
 8013548:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 801354a:	2300      	movs	r3, #0
 801354c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 801354e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8013552:	4619      	mov	r1, r3
 8013554:	480e      	ldr	r0, [pc, #56]	; (8013590 <MX_GPIO_Init+0x3f0>)
 8013556:	f004 fc71 	bl	8017e3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 801355a:	2200      	movs	r2, #0
 801355c:	2101      	movs	r1, #1
 801355e:	2006      	movs	r0, #6
 8013560:	f003 f941 	bl	80167e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8013564:	2006      	movs	r0, #6
 8013566:	f003 f95a 	bl	801681e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 801356a:	2201      	movs	r2, #1
 801356c:	2101      	movs	r1, #1
 801356e:	2007      	movs	r0, #7
 8013570:	f003 f939 	bl	80167e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8013574:	2007      	movs	r0, #7
 8013576:	f003 f952 	bl	801681e <HAL_NVIC_EnableIRQ>

}
 801357a:	bf00      	nop
 801357c:	3740      	adds	r7, #64	; 0x40
 801357e:	46bd      	mov	sp, r7
 8013580:	bd80      	pop	{r7, pc}
 8013582:	bf00      	nop
 8013584:	40020800 	.word	0x40020800
 8013588:	40020c00 	.word	0x40020c00
 801358c:	40022400 	.word	0x40022400
 8013590:	40022800 	.word	0x40022800

08013594 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8013598:	4b0a      	ldr	r3, [pc, #40]	; (80135c4 <Feed_wdt+0x30>)
 801359a:	681b      	ldr	r3, [r3, #0]
 801359c:	4618      	mov	r0, r3
 801359e:	f7fb fbb3 	bl	800ed08 <HAL_Elaps_Ticks>
 80135a2:	4603      	mov	r3, r0
 80135a4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80135a8:	d309      	bcc.n	80135be <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 80135aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80135ae:	4806      	ldr	r0, [pc, #24]	; (80135c8 <Feed_wdt+0x34>)
 80135b0:	f004 fe21 	bl	80181f6 <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 80135b4:	f002 f936 	bl	8015824 <HAL_GetTick>
 80135b8:	4603      	mov	r3, r0
 80135ba:	4a02      	ldr	r2, [pc, #8]	; (80135c4 <Feed_wdt+0x30>)
 80135bc:	6013      	str	r3, [r2, #0]
	}

}
 80135be:	bf00      	nop
 80135c0:	bd80      	pop	{r7, pc}
 80135c2:	bf00      	nop
 80135c4:	20009f9c 	.word	0x20009f9c
 80135c8:	40022400 	.word	0x40022400

080135cc <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 80135cc:	b580      	push	{r7, lr}
 80135ce:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 80135d0:	4b09      	ldr	r3, [pc, #36]	; (80135f8 <Blink_S2+0x2c>)
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	4618      	mov	r0, r3
 80135d6:	f7fb fb97 	bl	800ed08 <HAL_Elaps_Ticks>
 80135da:	4603      	mov	r3, r0
 80135dc:	2b64      	cmp	r3, #100	; 0x64
 80135de:	d909      	bls.n	80135f4 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 80135e0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80135e4:	4805      	ldr	r0, [pc, #20]	; (80135fc <Blink_S2+0x30>)
 80135e6:	f004 fe06 	bl	80181f6 <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 80135ea:	f002 f91b 	bl	8015824 <HAL_GetTick>
 80135ee:	4603      	mov	r3, r0
 80135f0:	4a01      	ldr	r2, [pc, #4]	; (80135f8 <Blink_S2+0x2c>)
 80135f2:	6013      	str	r3, [r2, #0]
	}
}
 80135f4:	bf00      	nop
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	20009fa0 	.word	0x20009fa0
 80135fc:	40021c00 	.word	0x40021c00

08013600 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8013600:	b580      	push	{r7, lr}
 8013602:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8013604:	4b1b      	ldr	r3, [pc, #108]	; (8013674 <MX_I2C1_Init+0x74>)
 8013606:	4a1c      	ldr	r2, [pc, #112]	; (8013678 <MX_I2C1_Init+0x78>)
 8013608:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 801360a:	4b1a      	ldr	r3, [pc, #104]	; (8013674 <MX_I2C1_Init+0x74>)
 801360c:	4a1b      	ldr	r2, [pc, #108]	; (801367c <MX_I2C1_Init+0x7c>)
 801360e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8013610:	4b18      	ldr	r3, [pc, #96]	; (8013674 <MX_I2C1_Init+0x74>)
 8013612:	2200      	movs	r2, #0
 8013614:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013616:	4b17      	ldr	r3, [pc, #92]	; (8013674 <MX_I2C1_Init+0x74>)
 8013618:	2201      	movs	r2, #1
 801361a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801361c:	4b15      	ldr	r3, [pc, #84]	; (8013674 <MX_I2C1_Init+0x74>)
 801361e:	2200      	movs	r2, #0
 8013620:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8013622:	4b14      	ldr	r3, [pc, #80]	; (8013674 <MX_I2C1_Init+0x74>)
 8013624:	2200      	movs	r2, #0
 8013626:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013628:	4b12      	ldr	r3, [pc, #72]	; (8013674 <MX_I2C1_Init+0x74>)
 801362a:	2200      	movs	r2, #0
 801362c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801362e:	4b11      	ldr	r3, [pc, #68]	; (8013674 <MX_I2C1_Init+0x74>)
 8013630:	2200      	movs	r2, #0
 8013632:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013634:	4b0f      	ldr	r3, [pc, #60]	; (8013674 <MX_I2C1_Init+0x74>)
 8013636:	2200      	movs	r2, #0
 8013638:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 801363a:	480e      	ldr	r0, [pc, #56]	; (8013674 <MX_I2C1_Init+0x74>)
 801363c:	f004 fe1a 	bl	8018274 <HAL_I2C_Init>
 8013640:	4603      	mov	r3, r0
 8013642:	2b00      	cmp	r3, #0
 8013644:	d001      	beq.n	801364a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8013646:	f000 fb61 	bl	8013d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 801364a:	2100      	movs	r1, #0
 801364c:	4809      	ldr	r0, [pc, #36]	; (8013674 <MX_I2C1_Init+0x74>)
 801364e:	f005 fb69 	bl	8018d24 <HAL_I2CEx_ConfigAnalogFilter>
 8013652:	4603      	mov	r3, r0
 8013654:	2b00      	cmp	r3, #0
 8013656:	d001      	beq.n	801365c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8013658:	f000 fb58 	bl	8013d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 801365c:	2100      	movs	r1, #0
 801365e:	4805      	ldr	r0, [pc, #20]	; (8013674 <MX_I2C1_Init+0x74>)
 8013660:	f005 fbab 	bl	8018dba <HAL_I2CEx_ConfigDigitalFilter>
 8013664:	4603      	mov	r3, r0
 8013666:	2b00      	cmp	r3, #0
 8013668:	d001      	beq.n	801366e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 801366a:	f000 fb4f 	bl	8013d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 801366e:	bf00      	nop
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	20009fa4 	.word	0x20009fa4
 8013678:	40005400 	.word	0x40005400
 801367c:	c0000e12 	.word	0xc0000e12

08013680 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8013684:	4b1b      	ldr	r3, [pc, #108]	; (80136f4 <MX_I2C2_Init+0x74>)
 8013686:	4a1c      	ldr	r2, [pc, #112]	; (80136f8 <MX_I2C2_Init+0x78>)
 8013688:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 801368a:	4b1a      	ldr	r3, [pc, #104]	; (80136f4 <MX_I2C2_Init+0x74>)
 801368c:	4a1b      	ldr	r2, [pc, #108]	; (80136fc <MX_I2C2_Init+0x7c>)
 801368e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8013690:	4b18      	ldr	r3, [pc, #96]	; (80136f4 <MX_I2C2_Init+0x74>)
 8013692:	2200      	movs	r2, #0
 8013694:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013696:	4b17      	ldr	r3, [pc, #92]	; (80136f4 <MX_I2C2_Init+0x74>)
 8013698:	2201      	movs	r2, #1
 801369a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801369c:	4b15      	ldr	r3, [pc, #84]	; (80136f4 <MX_I2C2_Init+0x74>)
 801369e:	2200      	movs	r2, #0
 80136a0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 80136a2:	4b14      	ldr	r3, [pc, #80]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136a4:	2200      	movs	r2, #0
 80136a6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80136a8:	4b12      	ldr	r3, [pc, #72]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136aa:	2200      	movs	r2, #0
 80136ac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80136ae:	4b11      	ldr	r3, [pc, #68]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136b0:	2200      	movs	r2, #0
 80136b2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80136b4:	4b0f      	ldr	r3, [pc, #60]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136b6:	2200      	movs	r2, #0
 80136b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80136ba:	480e      	ldr	r0, [pc, #56]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136bc:	f004 fdda 	bl	8018274 <HAL_I2C_Init>
 80136c0:	4603      	mov	r3, r0
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d001      	beq.n	80136ca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 80136c6:	f000 fb21 	bl	8013d0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80136ca:	2100      	movs	r1, #0
 80136cc:	4809      	ldr	r0, [pc, #36]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136ce:	f005 fb29 	bl	8018d24 <HAL_I2CEx_ConfigAnalogFilter>
 80136d2:	4603      	mov	r3, r0
 80136d4:	2b00      	cmp	r3, #0
 80136d6:	d001      	beq.n	80136dc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80136d8:	f000 fb18 	bl	8013d0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80136dc:	2100      	movs	r1, #0
 80136de:	4805      	ldr	r0, [pc, #20]	; (80136f4 <MX_I2C2_Init+0x74>)
 80136e0:	f005 fb6b 	bl	8018dba <HAL_I2CEx_ConfigDigitalFilter>
 80136e4:	4603      	mov	r3, r0
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d001      	beq.n	80136ee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80136ea:	f000 fb0f 	bl	8013d0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80136ee:	bf00      	nop
 80136f0:	bd80      	pop	{r7, pc}
 80136f2:	bf00      	nop
 80136f4:	20009ff8 	.word	0x20009ff8
 80136f8:	40005800 	.word	0x40005800
 80136fc:	c0000e12 	.word	0xc0000e12

08013700 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8013700:	b580      	push	{r7, lr}
 8013702:	b0b0      	sub	sp, #192	; 0xc0
 8013704:	af00      	add	r7, sp, #0
 8013706:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013708:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801370c:	2200      	movs	r2, #0
 801370e:	601a      	str	r2, [r3, #0]
 8013710:	605a      	str	r2, [r3, #4]
 8013712:	609a      	str	r2, [r3, #8]
 8013714:	60da      	str	r2, [r3, #12]
 8013716:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013718:	f107 031c 	add.w	r3, r7, #28
 801371c:	2290      	movs	r2, #144	; 0x90
 801371e:	2100      	movs	r1, #0
 8013720:	4618      	mov	r0, r3
 8013722:	f00e ffa1 	bl	8022668 <memset>
  if(i2cHandle->Instance==I2C1)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	681b      	ldr	r3, [r3, #0]
 801372a:	4a44      	ldr	r2, [pc, #272]	; (801383c <HAL_I2C_MspInit+0x13c>)
 801372c:	4293      	cmp	r3, r2
 801372e:	d13e      	bne.n	80137ae <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8013730:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8013734:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8013736:	2300      	movs	r3, #0
 8013738:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801373c:	f107 031c 	add.w	r3, r7, #28
 8013740:	4618      	mov	r0, r3
 8013742:	f006 f879 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 8013746:	4603      	mov	r3, r0
 8013748:	2b00      	cmp	r3, #0
 801374a:	d001      	beq.n	8013750 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 801374c:	f000 fade 	bl	8013d0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8013750:	4b3b      	ldr	r3, [pc, #236]	; (8013840 <HAL_I2C_MspInit+0x140>)
 8013752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013754:	4a3a      	ldr	r2, [pc, #232]	; (8013840 <HAL_I2C_MspInit+0x140>)
 8013756:	f043 0302 	orr.w	r3, r3, #2
 801375a:	6313      	str	r3, [r2, #48]	; 0x30
 801375c:	4b38      	ldr	r3, [pc, #224]	; (8013840 <HAL_I2C_MspInit+0x140>)
 801375e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013760:	f003 0302 	and.w	r3, r3, #2
 8013764:	61bb      	str	r3, [r7, #24]
 8013766:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 8013768:	f44f 73c0 	mov.w	r3, #384	; 0x180
 801376c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013770:	2312      	movs	r3, #18
 8013772:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013776:	2300      	movs	r3, #0
 8013778:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801377c:	2303      	movs	r3, #3
 801377e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8013782:	2304      	movs	r3, #4
 8013784:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013788:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801378c:	4619      	mov	r1, r3
 801378e:	482d      	ldr	r0, [pc, #180]	; (8013844 <HAL_I2C_MspInit+0x144>)
 8013790:	f004 fb54 	bl	8017e3c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013794:	4b2a      	ldr	r3, [pc, #168]	; (8013840 <HAL_I2C_MspInit+0x140>)
 8013796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013798:	4a29      	ldr	r2, [pc, #164]	; (8013840 <HAL_I2C_MspInit+0x140>)
 801379a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801379e:	6413      	str	r3, [r2, #64]	; 0x40
 80137a0:	4b27      	ldr	r3, [pc, #156]	; (8013840 <HAL_I2C_MspInit+0x140>)
 80137a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80137a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80137a8:	617b      	str	r3, [r7, #20]
 80137aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80137ac:	e041      	b.n	8013832 <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 80137ae:	687b      	ldr	r3, [r7, #4]
 80137b0:	681b      	ldr	r3, [r3, #0]
 80137b2:	4a25      	ldr	r2, [pc, #148]	; (8013848 <HAL_I2C_MspInit+0x148>)
 80137b4:	4293      	cmp	r3, r2
 80137b6:	d13c      	bne.n	8013832 <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80137b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80137bc:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80137be:	2300      	movs	r3, #0
 80137c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80137c4:	f107 031c 	add.w	r3, r7, #28
 80137c8:	4618      	mov	r0, r3
 80137ca:	f006 f835 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 80137ce:	4603      	mov	r3, r0
 80137d0:	2b00      	cmp	r3, #0
 80137d2:	d001      	beq.n	80137d8 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 80137d4:	f000 fa9a 	bl	8013d0c <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80137d8:	4b19      	ldr	r3, [pc, #100]	; (8013840 <HAL_I2C_MspInit+0x140>)
 80137da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137dc:	4a18      	ldr	r2, [pc, #96]	; (8013840 <HAL_I2C_MspInit+0x140>)
 80137de:	f043 0320 	orr.w	r3, r3, #32
 80137e2:	6313      	str	r3, [r2, #48]	; 0x30
 80137e4:	4b16      	ldr	r3, [pc, #88]	; (8013840 <HAL_I2C_MspInit+0x140>)
 80137e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80137e8:	f003 0320 	and.w	r3, r3, #32
 80137ec:	613b      	str	r3, [r7, #16]
 80137ee:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 80137f0:	2303      	movs	r3, #3
 80137f2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80137f6:	2312      	movs	r3, #18
 80137f8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80137fc:	2300      	movs	r3, #0
 80137fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013802:	2303      	movs	r3, #3
 8013804:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013808:	2304      	movs	r3, #4
 801380a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801380e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013812:	4619      	mov	r1, r3
 8013814:	480d      	ldr	r0, [pc, #52]	; (801384c <HAL_I2C_MspInit+0x14c>)
 8013816:	f004 fb11 	bl	8017e3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 801381a:	4b09      	ldr	r3, [pc, #36]	; (8013840 <HAL_I2C_MspInit+0x140>)
 801381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801381e:	4a08      	ldr	r2, [pc, #32]	; (8013840 <HAL_I2C_MspInit+0x140>)
 8013820:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8013824:	6413      	str	r3, [r2, #64]	; 0x40
 8013826:	4b06      	ldr	r3, [pc, #24]	; (8013840 <HAL_I2C_MspInit+0x140>)
 8013828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801382a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801382e:	60fb      	str	r3, [r7, #12]
 8013830:	68fb      	ldr	r3, [r7, #12]
}
 8013832:	bf00      	nop
 8013834:	37c0      	adds	r7, #192	; 0xc0
 8013836:	46bd      	mov	sp, r7
 8013838:	bd80      	pop	{r7, pc}
 801383a:	bf00      	nop
 801383c:	40005400 	.word	0x40005400
 8013840:	40023800 	.word	0x40023800
 8013844:	40020400 	.word	0x40020400
 8013848:	40005800 	.word	0x40005800
 801384c:	40021400 	.word	0x40021400

08013850 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 8013850:	b580      	push	{r7, lr}
 8013852:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8013854:	4b0b      	ldr	r3, [pc, #44]	; (8013884 <MX_IWDG_Init+0x34>)
 8013856:	4a0c      	ldr	r2, [pc, #48]	; (8013888 <MX_IWDG_Init+0x38>)
 8013858:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 801385a:	4b0a      	ldr	r3, [pc, #40]	; (8013884 <MX_IWDG_Init+0x34>)
 801385c:	2203      	movs	r2, #3
 801385e:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8013860:	4b08      	ldr	r3, [pc, #32]	; (8013884 <MX_IWDG_Init+0x34>)
 8013862:	f640 72ff 	movw	r2, #4095	; 0xfff
 8013866:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 8013868:	4b06      	ldr	r3, [pc, #24]	; (8013884 <MX_IWDG_Init+0x34>)
 801386a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 801386e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8013870:	4804      	ldr	r0, [pc, #16]	; (8013884 <MX_IWDG_Init+0x34>)
 8013872:	f005 faee 	bl	8018e52 <HAL_IWDG_Init>
 8013876:	4603      	mov	r3, r0
 8013878:	2b00      	cmp	r3, #0
 801387a:	d001      	beq.n	8013880 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 801387c:	f000 fa46 	bl	8013d0c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8013880:	bf00      	nop
 8013882:	bd80      	pop	{r7, pc}
 8013884:	2000a04c 	.word	0x2000a04c
 8013888:	40003000 	.word	0x40003000

0801388c <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 801388c:	b480      	push	{r7}
 801388e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8013890:	f3bf 8f4f 	dsb	sy
}
 8013894:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013896:	f3bf 8f6f 	isb	sy
}
 801389a:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 801389c:	4b0d      	ldr	r3, [pc, #52]	; (80138d4 <SCB_EnableICache+0x48>)
 801389e:	2200      	movs	r2, #0
 80138a0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80138a4:	f3bf 8f4f 	dsb	sy
}
 80138a8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80138aa:	f3bf 8f6f 	isb	sy
}
 80138ae:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80138b0:	4b08      	ldr	r3, [pc, #32]	; (80138d4 <SCB_EnableICache+0x48>)
 80138b2:	695b      	ldr	r3, [r3, #20]
 80138b4:	4a07      	ldr	r2, [pc, #28]	; (80138d4 <SCB_EnableICache+0x48>)
 80138b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80138ba:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80138bc:	f3bf 8f4f 	dsb	sy
}
 80138c0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80138c2:	f3bf 8f6f 	isb	sy
}
 80138c6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80138c8:	bf00      	nop
 80138ca:	46bd      	mov	sp, r7
 80138cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138d0:	4770      	bx	lr
 80138d2:	bf00      	nop
 80138d4:	e000ed00 	.word	0xe000ed00

080138d8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80138d8:	b480      	push	{r7}
 80138da:	b085      	sub	sp, #20
 80138dc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80138de:	4b1f      	ldr	r3, [pc, #124]	; (801395c <SCB_EnableDCache+0x84>)
 80138e0:	2200      	movs	r2, #0
 80138e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80138e6:	f3bf 8f4f 	dsb	sy
}
 80138ea:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80138ec:	4b1b      	ldr	r3, [pc, #108]	; (801395c <SCB_EnableDCache+0x84>)
 80138ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80138f2:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80138f4:	687b      	ldr	r3, [r7, #4]
 80138f6:	0b5b      	lsrs	r3, r3, #13
 80138f8:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80138fc:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80138fe:	687b      	ldr	r3, [r7, #4]
 8013900:	08db      	lsrs	r3, r3, #3
 8013902:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013906:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	015a      	lsls	r2, r3, #5
 801390c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8013910:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8013912:	68ba      	ldr	r2, [r7, #8]
 8013914:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013916:	4911      	ldr	r1, [pc, #68]	; (801395c <SCB_EnableDCache+0x84>)
 8013918:	4313      	orrs	r3, r2
 801391a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801391e:	68bb      	ldr	r3, [r7, #8]
 8013920:	1e5a      	subs	r2, r3, #1
 8013922:	60ba      	str	r2, [r7, #8]
 8013924:	2b00      	cmp	r3, #0
 8013926:	d1ef      	bne.n	8013908 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8013928:	68fb      	ldr	r3, [r7, #12]
 801392a:	1e5a      	subs	r2, r3, #1
 801392c:	60fa      	str	r2, [r7, #12]
 801392e:	2b00      	cmp	r3, #0
 8013930:	d1e5      	bne.n	80138fe <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8013932:	f3bf 8f4f 	dsb	sy
}
 8013936:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8013938:	4b08      	ldr	r3, [pc, #32]	; (801395c <SCB_EnableDCache+0x84>)
 801393a:	695b      	ldr	r3, [r3, #20]
 801393c:	4a07      	ldr	r2, [pc, #28]	; (801395c <SCB_EnableDCache+0x84>)
 801393e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8013942:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013944:	f3bf 8f4f 	dsb	sy
}
 8013948:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801394a:	f3bf 8f6f 	isb	sy
}
 801394e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8013950:	bf00      	nop
 8013952:	3714      	adds	r7, #20
 8013954:	46bd      	mov	sp, r7
 8013956:	f85d 7b04 	ldr.w	r7, [sp], #4
 801395a:	4770      	bx	lr
 801395c:	e000ed00 	.word	0xe000ed00

08013960 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8013960:	b580      	push	{r7, lr}
 8013962:	b082      	sub	sp, #8
 8013964:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 8013966:	2300      	movs	r3, #0
 8013968:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 801396a:	f000 f9a3 	bl	8013cb4 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 801396e:	f7ff ff8d 	bl	801388c <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 8013972:	f7ff ffb1 	bl	80138d8 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8013976:	f001 fef5 	bl	8015764 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 801397a:	f000 f8d5 	bl	8013b28 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 801397e:	f7f5 fc29 	bl	80091d4 <reset_cause_get>
 8013982:	4603      	mov	r3, r0
 8013984:	4618      	mov	r0, r3
 8013986:	f7f5 fc77 	bl	8009278 <reset_cause_get_name>
 801398a:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 801398c:	f7ff fc08 	bl	80131a0 <MX_GPIO_Init>
	MX_USART1_UART_Init();
 8013990:	f001 f90e 	bl	8014bb0 <MX_USART1_UART_Init>
	Get_Slot();
 8013994:	f7ed f89a 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8013998:	f7fb fde0 	bl	800f55c <MX_CAN2_Init>
	MX_CAN3_Init();
 801399c:	f7fb fe56 	bl	800f64c <MX_CAN3_Init>
	MX_I2C1_Init();
 80139a0:	f7ff fe2e 	bl	8013600 <MX_I2C1_Init>
	MX_I2C2_Init();
 80139a4:	f7ff fe6c 	bl	8013680 <MX_I2C2_Init>
	MX_SPI1_Init();
 80139a8:	f000 fa14 	bl	8013dd4 <MX_SPI1_Init>
	Get_Config();
 80139ac:	f000 fd7e 	bl	80144ac <Get_Config>
	MX_RNG_Init();
 80139b0:	f000 f9b2 	bl	8013d18 <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80139b4:	2208      	movs	r2, #8
 80139b6:	2100      	movs	r1, #0
 80139b8:	484e      	ldr	r0, [pc, #312]	; (8013af4 <main+0x194>)
 80139ba:	f00e fe55 	bl	8022668 <memset>
	HAL_Delay(250);
 80139be:	20fa      	movs	r0, #250	; 0xfa
 80139c0:	f001 ff3c 	bl	801583c <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 80139c4:	484c      	ldr	r0, [pc, #304]	; (8013af8 <main+0x198>)
 80139c6:	f00e ff37 	bl	8022838 <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 80139ca:	484c      	ldr	r0, [pc, #304]	; (8013afc <main+0x19c>)
 80139cc:	f00e ffd0 	bl	8022970 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 80139d0:	6879      	ldr	r1, [r7, #4]
 80139d2:	484b      	ldr	r0, [pc, #300]	; (8013b00 <main+0x1a0>)
 80139d4:	f00e ff30 	bl	8022838 <iprintf>
	Get_Build_Details();
 80139d8:	f000 f910 	bl	8013bfc <Get_Build_Details>
	switch(EI_data.ProtocolType)
 80139dc:	4b49      	ldr	r3, [pc, #292]	; (8013b04 <main+0x1a4>)
 80139de:	781b      	ldrb	r3, [r3, #0]
 80139e0:	3b01      	subs	r3, #1
 80139e2:	2b03      	cmp	r3, #3
 80139e4:	d85f      	bhi.n	8013aa6 <main+0x146>
 80139e6:	a201      	add	r2, pc, #4	; (adr r2, 80139ec <main+0x8c>)
 80139e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139ec:	080139fd 	.word	0x080139fd
 80139f0:	08013a4f 	.word	0x08013a4f
 80139f4:	08013a77 	.word	0x08013a77
 80139f8:	08013aaf 	.word	0x08013aaf
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 80139fc:	4842      	ldr	r0, [pc, #264]	; (8013b08 <main+0x1a8>)
 80139fe:	f00e ffb7 	bl	8022970 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013a02:	4842      	ldr	r0, [pc, #264]	; (8013b0c <main+0x1ac>)
 8013a04:	f00e ffb4 	bl	8022970 <puts>
		MX_LWIP_Init();
 8013a08:	f009 f836 	bl	801ca78 <MX_LWIP_Init>
		udpServer_init();
 8013a0c:	f7fb f98c 	bl	800ed28 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013a10:	483f      	ldr	r0, [pc, #252]	; (8013b10 <main+0x1b0>)
 8013a12:	f00e ffad 	bl	8022970 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 8013a16:	4b3b      	ldr	r3, [pc, #236]	; (8013b04 <main+0x1a4>)
 8013a18:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013a1c:	2b01      	cmp	r3, #1
 8013a1e:	d111      	bne.n	8013a44 <main+0xe4>
 8013a20:	4b38      	ldr	r3, [pc, #224]	; (8013b04 <main+0x1a4>)
 8013a22:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00c      	beq.n	8013a44 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 8013a2a:	4b36      	ldr	r3, [pc, #216]	; (8013b04 <main+0x1a4>)
 8013a2c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a30:	4619      	mov	r1, r3
 8013a32:	4838      	ldr	r0, [pc, #224]	; (8013b14 <main+0x1b4>)
 8013a34:	f00e ff00 	bl	8022838 <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 8013a38:	4b32      	ldr	r3, [pc, #200]	; (8013b04 <main+0x1a4>)
 8013a3a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f001 fa64 	bl	8014f0c <UART4_Init>
		}
		print_self_Details();
 8013a44:	f7f4 feca 	bl	80087dc <print_self_Details>
		Update_HitachiCommands();
 8013a48:	f7ec ff2c 	bl	80008a4 <Update_HitachiCommands>
		break;
 8013a4c:	e030      	b.n	8013ab0 <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 8013a4e:	4832      	ldr	r0, [pc, #200]	; (8013b18 <main+0x1b8>)
 8013a50:	f00e ff8e 	bl	8022970 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 8013a54:	482d      	ldr	r0, [pc, #180]	; (8013b0c <main+0x1ac>)
 8013a56:	f00e ff8b 	bl	8022970 <puts>
		MX_LWIP_Init();
 8013a5a:	f009 f80d 	bl	801ca78 <MX_LWIP_Init>
		udpServer_init();
 8013a5e:	f7fb f963 	bl	800ed28 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 8013a62:	482b      	ldr	r0, [pc, #172]	; (8013b10 <main+0x1b0>)
 8013a64:	f00e ff84 	bl	8022970 <puts>
		print_self_DetailsSiemens();
 8013a68:	f7fb f844 	bl	800eaf4 <print_self_DetailsSiemens>
		Update_SiemensCommands();
 8013a6c:	f7f9 fd4e 	bl	800d50c <Update_SiemensCommands>
		UpdateSIGNALSNames();
 8013a70:	f7fa fb62 	bl	800e138 <UpdateSIGNALSNames>
		break;
 8013a74:	e01c      	b.n	8013ab0 <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 8013a76:	4829      	ldr	r0, [pc, #164]	; (8013b1c <main+0x1bc>)
 8013a78:	f00e ff7a 	bl	8022970 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 8013a7c:	4b21      	ldr	r3, [pc, #132]	; (8013b04 <main+0x1a4>)
 8013a7e:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d006      	beq.n	8013a94 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8013a86:	4b1f      	ldr	r3, [pc, #124]	; (8013b04 <main+0x1a4>)
 8013a88:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013a8c:	4618      	mov	r0, r3
 8013a8e:	f001 fa3d 	bl	8014f0c <UART4_Init>
 8013a92:	e003      	b.n	8013a9c <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 8013a94:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8013a98:	f001 fa38 	bl	8014f0c <UART4_Init>
		}
		Update_MedhaCommands();
 8013a9c:	f7f7 f80e 	bl	800aabc <Update_MedhaCommands>
		Print_Medha_Self_Details();
 8013aa0:	f7f6 fdcc 	bl	800a63c <Print_Medha_Self_Details>
		break;
 8013aa4:	e004      	b.n	8013ab0 <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 8013aa6:	481e      	ldr	r0, [pc, #120]	; (8013b20 <main+0x1c0>)
 8013aa8:	f00e ff62 	bl	8022970 <puts>
		while(1);
 8013aac:	e7fe      	b.n	8013aac <main+0x14c>
		break;
 8013aae:	bf00      	nop
	}
	//	MX_CRC_Init();
	//	MX_RNG_Init();
	uint32_t Ticks = HAL_GetTick();
 8013ab0:	f001 feb8 	bl	8015824 <HAL_GetTick>
 8013ab4:	6038      	str	r0, [r7, #0]


	printf("Initialization Success\n");
 8013ab6:	481b      	ldr	r0, [pc, #108]	; (8013b24 <main+0x1c4>)
 8013ab8:	f00e ff5a 	bl	8022970 <puts>
//	printf("start Ticks:%lu",Ticks);
	MX_IWDG_Init();
 8013abc:	f7ff fec8 	bl	8013850 <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8013ac0:	4b10      	ldr	r3, [pc, #64]	; (8013b04 <main+0x1a4>)
 8013ac2:	781b      	ldrb	r3, [r3, #0]
 8013ac4:	2b03      	cmp	r3, #3
 8013ac6:	d00c      	beq.n	8013ae2 <main+0x182>
 8013ac8:	2b03      	cmp	r3, #3
 8013aca:	dc0d      	bgt.n	8013ae8 <main+0x188>
 8013acc:	2b01      	cmp	r3, #1
 8013ace:	d002      	beq.n	8013ad6 <main+0x176>
 8013ad0:	2b02      	cmp	r3, #2
 8013ad2:	d003      	beq.n	8013adc <main+0x17c>
 8013ad4:	e008      	b.n	8013ae8 <main+0x188>
//			{
//				HAL_Delay(1000);
//				printf("Feed Ticks:%lu\n",HAL_Elaps_Ticks(Ticks));
//				//Ticks = HAL_GetTick();
//			}
			Process_HitachiEI();
 8013ad6:	f7f5 fb3d 	bl	8009154 <Process_HitachiEI>
			break;
 8013ada:	e009      	b.n	8013af0 <main+0x190>

		case SIEMENS:
			Process_SiemensEI();
 8013adc:	f7f7 fd14 	bl	800b508 <Process_SiemensEI>
			break;
 8013ae0:	e006      	b.n	8013af0 <main+0x190>

		case MEDHA:
			Process_Medha_EI();
 8013ae2:	f7f5 fc19 	bl	8009318 <Process_Medha_EI>
			break;
 8013ae6:	e003      	b.n	8013af0 <main+0x190>

		default:
			printf("Please Select Protocol Type\n");
 8013ae8:	480d      	ldr	r0, [pc, #52]	; (8013b20 <main+0x1c0>)
 8013aea:	f00e ff41 	bl	8022970 <puts>
			while(1);
 8013aee:	e7fe      	b.n	8013aee <main+0x18e>
		switch(EI_data.ProtocolType)
 8013af0:	e7e6      	b.n	8013ac0 <main+0x160>
 8013af2:	bf00      	nop
 8013af4:	20001a1c 	.word	0x20001a1c
 8013af8:	0802700c 	.word	0x0802700c
 8013afc:	08027018 	.word	0x08027018
 8013b00:	08027068 	.word	0x08027068
 8013b04:	20000304 	.word	0x20000304
 8013b08:	08027084 	.word	0x08027084
 8013b0c:	080270a4 	.word	0x080270a4
 8013b10:	080270cc 	.word	0x080270cc
 8013b14:	080270e8 	.word	0x080270e8
 8013b18:	08027110 	.word	0x08027110
 8013b1c:	08027130 	.word	0x08027130
 8013b20:	0802714c 	.word	0x0802714c
 8013b24:	08027168 	.word	0x08027168

08013b28 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8013b28:	b580      	push	{r7, lr}
 8013b2a:	b094      	sub	sp, #80	; 0x50
 8013b2c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8013b2e:	f107 031c 	add.w	r3, r7, #28
 8013b32:	2234      	movs	r2, #52	; 0x34
 8013b34:	2100      	movs	r1, #0
 8013b36:	4618      	mov	r0, r3
 8013b38:	f00e fd96 	bl	8022668 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8013b3c:	f107 0308 	add.w	r3, r7, #8
 8013b40:	2200      	movs	r2, #0
 8013b42:	601a      	str	r2, [r3, #0]
 8013b44:	605a      	str	r2, [r3, #4]
 8013b46:	609a      	str	r2, [r3, #8]
 8013b48:	60da      	str	r2, [r3, #12]
 8013b4a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8013b4c:	4b29      	ldr	r3, [pc, #164]	; (8013bf4 <SystemClock_Config+0xcc>)
 8013b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b50:	4a28      	ldr	r2, [pc, #160]	; (8013bf4 <SystemClock_Config+0xcc>)
 8013b52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013b56:	6413      	str	r3, [r2, #64]	; 0x40
 8013b58:	4b26      	ldr	r3, [pc, #152]	; (8013bf4 <SystemClock_Config+0xcc>)
 8013b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013b5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013b60:	607b      	str	r3, [r7, #4]
 8013b62:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013b64:	4b24      	ldr	r3, [pc, #144]	; (8013bf8 <SystemClock_Config+0xd0>)
 8013b66:	681b      	ldr	r3, [r3, #0]
 8013b68:	4a23      	ldr	r2, [pc, #140]	; (8013bf8 <SystemClock_Config+0xd0>)
 8013b6a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013b6e:	6013      	str	r3, [r2, #0]
 8013b70:	4b21      	ldr	r3, [pc, #132]	; (8013bf8 <SystemClock_Config+0xd0>)
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013b78:	603b      	str	r3, [r7, #0]
 8013b7a:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8013b7c:	2309      	movs	r3, #9
 8013b7e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8013b80:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8013b84:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8013b86:	2301      	movs	r3, #1
 8013b88:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013b8a:	2302      	movs	r3, #2
 8013b8c:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013b8e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013b92:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8013b94:	2306      	movs	r3, #6
 8013b96:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 8013b98:	23b4      	movs	r3, #180	; 0xb4
 8013b9a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013b9c:	2302      	movs	r3, #2
 8013b9e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8013ba0:	2308      	movs	r3, #8
 8013ba2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8013ba4:	2302      	movs	r3, #2
 8013ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013ba8:	f107 031c 	add.w	r3, r7, #28
 8013bac:	4618      	mov	r0, r3
 8013bae:	f005 f9af 	bl	8018f10 <HAL_RCC_OscConfig>
 8013bb2:	4603      	mov	r3, r0
 8013bb4:	2b00      	cmp	r3, #0
 8013bb6:	d001      	beq.n	8013bbc <SystemClock_Config+0x94>
	{
		Error_Handler();
 8013bb8:	f000 f8a8 	bl	8013d0c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013bbc:	230f      	movs	r3, #15
 8013bbe:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013bc0:	2302      	movs	r3, #2
 8013bc2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013bc8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013bcc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013bce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013bd2:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013bd4:	f107 0308 	add.w	r3, r7, #8
 8013bd8:	2105      	movs	r1, #5
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f005 fc46 	bl	801946c <HAL_RCC_ClockConfig>
 8013be0:	4603      	mov	r3, r0
 8013be2:	2b00      	cmp	r3, #0
 8013be4:	d001      	beq.n	8013bea <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8013be6:	f000 f891 	bl	8013d0c <Error_Handler>
	}
}
 8013bea:	bf00      	nop
 8013bec:	3750      	adds	r7, #80	; 0x50
 8013bee:	46bd      	mov	sp, r7
 8013bf0:	bd80      	pop	{r7, pc}
 8013bf2:	bf00      	nop
 8013bf4:	40023800 	.word	0x40023800
 8013bf8:	40007000 	.word	0x40007000

08013bfc <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013bfc:	b580      	push	{r7, lr}
 8013bfe:	b08e      	sub	sp, #56	; 0x38
 8013c00:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8013c02:	2300      	movs	r3, #0
 8013c04:	607b      	str	r3, [r7, #4]
 8013c06:	f107 0308 	add.w	r3, r7, #8
 8013c0a:	222e      	movs	r2, #46	; 0x2e
 8013c0c:	2100      	movs	r1, #0
 8013c0e:	4618      	mov	r0, r3
 8013c10:	f00e fd2a 	bl	8022668 <memset>
	printf("\n_____________________________________________\n");
 8013c14:	481d      	ldr	r0, [pc, #116]	; (8013c8c <Get_Build_Details+0x90>)
 8013c16:	f00e feab 	bl	8022970 <puts>
	printf("Build Date:%s\n",__DATE__);
 8013c1a:	491d      	ldr	r1, [pc, #116]	; (8013c90 <Get_Build_Details+0x94>)
 8013c1c:	481d      	ldr	r0, [pc, #116]	; (8013c94 <Get_Build_Details+0x98>)
 8013c1e:	f00e fe0b 	bl	8022838 <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8013c22:	491d      	ldr	r1, [pc, #116]	; (8013c98 <Get_Build_Details+0x9c>)
 8013c24:	481d      	ldr	r0, [pc, #116]	; (8013c9c <Get_Build_Details+0xa0>)
 8013c26:	f00e fe07 	bl	8022838 <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 8013c2a:	1d3b      	adds	r3, r7, #4
 8013c2c:	4a18      	ldr	r2, [pc, #96]	; (8013c90 <Get_Build_Details+0x94>)
 8013c2e:	ca07      	ldmia	r2, {r0, r1, r2}
 8013c30:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 8013c34:	1d3b      	adds	r3, r7, #4
 8013c36:	4618      	mov	r0, r3
 8013c38:	f7ec fb0c 	bl	8000254 <strlen>
 8013c3c:	4603      	mov	r3, r0
 8013c3e:	461a      	mov	r2, r3
 8013c40:	1d3b      	adds	r3, r7, #4
 8013c42:	4413      	add	r3, r2
 8013c44:	4914      	ldr	r1, [pc, #80]	; (8013c98 <Get_Build_Details+0x9c>)
 8013c46:	461a      	mov	r2, r3
 8013c48:	460b      	mov	r3, r1
 8013c4a:	cb03      	ldmia	r3!, {r0, r1}
 8013c4c:	6010      	str	r0, [r2, #0]
 8013c4e:	6051      	str	r1, [r2, #4]
 8013c50:	781b      	ldrb	r3, [r3, #0]
 8013c52:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 8013c54:	1d3b      	adds	r3, r7, #4
 8013c56:	4618      	mov	r0, r3
 8013c58:	f7ec fafc 	bl	8000254 <strlen>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	b21a      	sxth	r2, r3
 8013c60:	1d3b      	adds	r3, r7, #4
 8013c62:	4619      	mov	r1, r3
 8013c64:	2000      	movs	r0, #0
 8013c66:	f7ff f947 	bl	8012ef8 <GetCRC16>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	4b0c      	ldr	r3, [pc, #48]	; (8013ca0 <Get_Build_Details+0xa4>)
 8013c70:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 8013c72:	4a0c      	ldr	r2, [pc, #48]	; (8013ca4 <Get_Build_Details+0xa8>)
 8013c74:	490c      	ldr	r1, [pc, #48]	; (8013ca8 <Get_Build_Details+0xac>)
 8013c76:	480d      	ldr	r0, [pc, #52]	; (8013cac <Get_Build_Details+0xb0>)
 8013c78:	f00e fdde 	bl	8022838 <iprintf>
	printf("_____________________________________________\n");
 8013c7c:	480c      	ldr	r0, [pc, #48]	; (8013cb0 <Get_Build_Details+0xb4>)
 8013c7e:	f00e fe77 	bl	8022970 <puts>

}
 8013c82:	bf00      	nop
 8013c84:	3738      	adds	r7, #56	; 0x38
 8013c86:	46bd      	mov	sp, r7
 8013c88:	bd80      	pop	{r7, pc}
 8013c8a:	bf00      	nop
 8013c8c:	08027180 	.word	0x08027180
 8013c90:	080271b0 	.word	0x080271b0
 8013c94:	080271bc 	.word	0x080271bc
 8013c98:	080271cc 	.word	0x080271cc
 8013c9c:	080271d8 	.word	0x080271d8
 8013ca0:	2000a080 	.word	0x2000a080
 8013ca4:	080271e8 	.word	0x080271e8
 8013ca8:	080271f0 	.word	0x080271f0
 8013cac:	08027208 	.word	0x08027208
 8013cb0:	08027224 	.word	0x08027224

08013cb4 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b084      	sub	sp, #16
 8013cb8:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8013cba:	463b      	mov	r3, r7
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	601a      	str	r2, [r3, #0]
 8013cc0:	605a      	str	r2, [r3, #4]
 8013cc2:	609a      	str	r2, [r3, #8]
 8013cc4:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 8013cc6:	f002 fdc5 	bl	8016854 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8013cca:	2301      	movs	r3, #1
 8013ccc:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8013cce:	2300      	movs	r3, #0
 8013cd0:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8013cd6:	231f      	movs	r3, #31
 8013cd8:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 8013cda:	2387      	movs	r3, #135	; 0x87
 8013cdc:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8013cde:	2300      	movs	r3, #0
 8013ce0:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8013ce6:	2301      	movs	r3, #1
 8013ce8:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8013cea:	2301      	movs	r3, #1
 8013cec:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8013cf2:	2300      	movs	r3, #0
 8013cf4:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8013cf6:	463b      	mov	r3, r7
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f002 fde3 	bl	80168c4 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013cfe:	2004      	movs	r0, #4
 8013d00:	f002 fdc0 	bl	8016884 <HAL_MPU_Enable>

}
 8013d04:	bf00      	nop
 8013d06:	3710      	adds	r7, #16
 8013d08:	46bd      	mov	sp, r7
 8013d0a:	bd80      	pop	{r7, pc}

08013d0c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013d0c:	b480      	push	{r7}
 8013d0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013d10:	b672      	cpsid	i
}
 8013d12:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013d14:	e7fe      	b.n	8013d14 <Error_Handler+0x8>
	...

08013d18 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8013d18:	b580      	push	{r7, lr}
 8013d1a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013d1c:	4b06      	ldr	r3, [pc, #24]	; (8013d38 <MX_RNG_Init+0x20>)
 8013d1e:	4a07      	ldr	r2, [pc, #28]	; (8013d3c <MX_RNG_Init+0x24>)
 8013d20:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8013d22:	4805      	ldr	r0, [pc, #20]	; (8013d38 <MX_RNG_Init+0x20>)
 8013d24:	f006 f9b0 	bl	801a088 <HAL_RNG_Init>
 8013d28:	4603      	mov	r3, r0
 8013d2a:	2b00      	cmp	r3, #0
 8013d2c:	d001      	beq.n	8013d32 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 8013d2e:	f7ff ffed 	bl	8013d0c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8013d32:	bf00      	nop
 8013d34:	bd80      	pop	{r7, pc}
 8013d36:	bf00      	nop
 8013d38:	2000a05c 	.word	0x2000a05c
 8013d3c:	50060800 	.word	0x50060800

08013d40 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8013d40:	b580      	push	{r7, lr}
 8013d42:	b0a8      	sub	sp, #160	; 0xa0
 8013d44:	af00      	add	r7, sp, #0
 8013d46:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013d48:	f107 0310 	add.w	r3, r7, #16
 8013d4c:	2290      	movs	r2, #144	; 0x90
 8013d4e:	2100      	movs	r1, #0
 8013d50:	4618      	mov	r0, r3
 8013d52:	f00e fc89 	bl	8022668 <memset>
  if(rngHandle->Instance==RNG)
 8013d56:	687b      	ldr	r3, [r7, #4]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	4a11      	ldr	r2, [pc, #68]	; (8013da0 <HAL_RNG_MspInit+0x60>)
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	d11b      	bne.n	8013d98 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8013d60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8013d64:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8013d66:	2300      	movs	r3, #0
 8013d68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013d6c:	f107 0310 	add.w	r3, r7, #16
 8013d70:	4618      	mov	r0, r3
 8013d72:	f005 fd61 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 8013d76:	4603      	mov	r3, r0
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d001      	beq.n	8013d80 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8013d7c:	f7ff ffc6 	bl	8013d0c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8013d80:	4b08      	ldr	r3, [pc, #32]	; (8013da4 <HAL_RNG_MspInit+0x64>)
 8013d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d84:	4a07      	ldr	r2, [pc, #28]	; (8013da4 <HAL_RNG_MspInit+0x64>)
 8013d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d8a:	6353      	str	r3, [r2, #52]	; 0x34
 8013d8c:	4b05      	ldr	r3, [pc, #20]	; (8013da4 <HAL_RNG_MspInit+0x64>)
 8013d8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013d94:	60fb      	str	r3, [r7, #12]
 8013d96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8013d98:	bf00      	nop
 8013d9a:	37a0      	adds	r7, #160	; 0xa0
 8013d9c:	46bd      	mov	sp, r7
 8013d9e:	bd80      	pop	{r7, pc}
 8013da0:	50060800 	.word	0x50060800
 8013da4:	40023800 	.word	0x40023800

08013da8 <__NVIC_SystemReset>:
{
 8013da8:	b480      	push	{r7}
 8013daa:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013dac:	f3bf 8f4f 	dsb	sy
}
 8013db0:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013db2:	4b06      	ldr	r3, [pc, #24]	; (8013dcc <__NVIC_SystemReset+0x24>)
 8013db4:	68db      	ldr	r3, [r3, #12]
 8013db6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013dba:	4904      	ldr	r1, [pc, #16]	; (8013dcc <__NVIC_SystemReset+0x24>)
 8013dbc:	4b04      	ldr	r3, [pc, #16]	; (8013dd0 <__NVIC_SystemReset+0x28>)
 8013dbe:	4313      	orrs	r3, r2
 8013dc0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013dc2:	f3bf 8f4f 	dsb	sy
}
 8013dc6:	bf00      	nop
    __NOP();
 8013dc8:	bf00      	nop
 8013dca:	e7fd      	b.n	8013dc8 <__NVIC_SystemReset+0x20>
 8013dcc:	e000ed00 	.word	0xe000ed00
 8013dd0:	05fa0004 	.word	0x05fa0004

08013dd4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8013dd4:	b580      	push	{r7, lr}
 8013dd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8013dd8:	4b1b      	ldr	r3, [pc, #108]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013dda:	4a1c      	ldr	r2, [pc, #112]	; (8013e4c <MX_SPI1_Init+0x78>)
 8013ddc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013dde:	4b1a      	ldr	r3, [pc, #104]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013de0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013de4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8013de6:	4b18      	ldr	r3, [pc, #96]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013de8:	2200      	movs	r2, #0
 8013dea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013dec:	4b16      	ldr	r3, [pc, #88]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013dee:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8013df2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013df4:	4b14      	ldr	r3, [pc, #80]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013df6:	2200      	movs	r2, #0
 8013df8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8013dfa:	4b13      	ldr	r3, [pc, #76]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013dfc:	2200      	movs	r2, #0
 8013dfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013e00:	4b11      	ldr	r3, [pc, #68]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e02:	f44f 7200 	mov.w	r2, #512	; 0x200
 8013e06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8013e08:	4b0f      	ldr	r3, [pc, #60]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e0a:	2208      	movs	r2, #8
 8013e0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013e0e:	4b0e      	ldr	r3, [pc, #56]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e10:	2200      	movs	r2, #0
 8013e12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013e14:	4b0c      	ldr	r3, [pc, #48]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e16:	2200      	movs	r2, #0
 8013e18:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8013e1a:	4b0b      	ldr	r3, [pc, #44]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e1c:	2200      	movs	r2, #0
 8013e1e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013e20:	4b09      	ldr	r3, [pc, #36]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e22:	2207      	movs	r2, #7
 8013e24:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8013e26:	4b08      	ldr	r3, [pc, #32]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e28:	2200      	movs	r2, #0
 8013e2a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8013e2c:	4b06      	ldr	r3, [pc, #24]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e2e:	2208      	movs	r2, #8
 8013e30:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8013e32:	4805      	ldr	r0, [pc, #20]	; (8013e48 <MX_SPI1_Init+0x74>)
 8013e34:	f006 f9bd 	bl	801a1b2 <HAL_SPI_Init>
 8013e38:	4603      	mov	r3, r0
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	d001      	beq.n	8013e42 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8013e3e:	f7ff ff65 	bl	8013d0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8013e42:	bf00      	nop
 8013e44:	bd80      	pop	{r7, pc}
 8013e46:	bf00      	nop
 8013e48:	2000a084 	.word	0x2000a084
 8013e4c:	40013000 	.word	0x40013000

08013e50 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8013e50:	b580      	push	{r7, lr}
 8013e52:	b08c      	sub	sp, #48	; 0x30
 8013e54:	af00      	add	r7, sp, #0
 8013e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013e58:	f107 031c 	add.w	r3, r7, #28
 8013e5c:	2200      	movs	r2, #0
 8013e5e:	601a      	str	r2, [r3, #0]
 8013e60:	605a      	str	r2, [r3, #4]
 8013e62:	609a      	str	r2, [r3, #8]
 8013e64:	60da      	str	r2, [r3, #12]
 8013e66:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	681b      	ldr	r3, [r3, #0]
 8013e6c:	4a33      	ldr	r2, [pc, #204]	; (8013f3c <HAL_SPI_MspInit+0xec>)
 8013e6e:	4293      	cmp	r3, r2
 8013e70:	d160      	bne.n	8013f34 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8013e72:	4b33      	ldr	r3, [pc, #204]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e76:	4a32      	ldr	r2, [pc, #200]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013e78:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8013e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8013e7e:	4b30      	ldr	r3, [pc, #192]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013e82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8013e86:	61bb      	str	r3, [r7, #24]
 8013e88:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013e8a:	4b2d      	ldr	r3, [pc, #180]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e8e:	4a2c      	ldr	r2, [pc, #176]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013e90:	f043 0301 	orr.w	r3, r3, #1
 8013e94:	6313      	str	r3, [r2, #48]	; 0x30
 8013e96:	4b2a      	ldr	r3, [pc, #168]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013e9a:	f003 0301 	and.w	r3, r3, #1
 8013e9e:	617b      	str	r3, [r7, #20]
 8013ea0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013ea2:	4b27      	ldr	r3, [pc, #156]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ea6:	4a26      	ldr	r2, [pc, #152]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013ea8:	f043 0308 	orr.w	r3, r3, #8
 8013eac:	6313      	str	r3, [r2, #48]	; 0x30
 8013eae:	4b24      	ldr	r3, [pc, #144]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eb2:	f003 0308 	and.w	r3, r3, #8
 8013eb6:	613b      	str	r3, [r7, #16]
 8013eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8013eba:	4b21      	ldr	r3, [pc, #132]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013ebe:	4a20      	ldr	r2, [pc, #128]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013ec4:	6313      	str	r3, [r2, #48]	; 0x30
 8013ec6:	4b1e      	ldr	r3, [pc, #120]	; (8013f40 <HAL_SPI_MspInit+0xf0>)
 8013ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013eca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013ece:	60fb      	str	r3, [r7, #12]
 8013ed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8013ed2:	2320      	movs	r3, #32
 8013ed4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ed6:	2302      	movs	r3, #2
 8013ed8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013eda:	2300      	movs	r3, #0
 8013edc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013ede:	2303      	movs	r3, #3
 8013ee0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013ee2:	2305      	movs	r3, #5
 8013ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 8013ee6:	f107 031c 	add.w	r3, r7, #28
 8013eea:	4619      	mov	r1, r3
 8013eec:	4815      	ldr	r0, [pc, #84]	; (8013f44 <HAL_SPI_MspInit+0xf4>)
 8013eee:	f003 ffa5 	bl	8017e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8013ef2:	2380      	movs	r3, #128	; 0x80
 8013ef4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013ef6:	2302      	movs	r3, #2
 8013ef8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013efa:	2300      	movs	r3, #0
 8013efc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013efe:	2303      	movs	r3, #3
 8013f00:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013f02:	2305      	movs	r3, #5
 8013f04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 8013f06:	f107 031c 	add.w	r3, r7, #28
 8013f0a:	4619      	mov	r1, r3
 8013f0c:	480e      	ldr	r0, [pc, #56]	; (8013f48 <HAL_SPI_MspInit+0xf8>)
 8013f0e:	f003 ff95 	bl	8017e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8013f12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8013f18:	2302      	movs	r3, #2
 8013f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013f1c:	2300      	movs	r3, #0
 8013f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013f20:	2303      	movs	r3, #3
 8013f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013f24:	2305      	movs	r3, #5
 8013f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 8013f28:	f107 031c 	add.w	r3, r7, #28
 8013f2c:	4619      	mov	r1, r3
 8013f2e:	4807      	ldr	r0, [pc, #28]	; (8013f4c <HAL_SPI_MspInit+0xfc>)
 8013f30:	f003 ff84 	bl	8017e3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8013f34:	bf00      	nop
 8013f36:	3730      	adds	r7, #48	; 0x30
 8013f38:	46bd      	mov	sp, r7
 8013f3a:	bd80      	pop	{r7, pc}
 8013f3c:	40013000 	.word	0x40013000
 8013f40:	40023800 	.word	0x40023800
 8013f44:	40020000 	.word	0x40020000
 8013f48:	40020c00 	.word	0x40020c00
 8013f4c:	40021800 	.word	0x40021800

08013f50 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8013f50:	b580      	push	{r7, lr}
 8013f52:	b086      	sub	sp, #24
 8013f54:	af00      	add	r7, sp, #0
 8013f56:	60b9      	str	r1, [r7, #8]
 8013f58:	607b      	str	r3, [r7, #4]
 8013f5a:	4603      	mov	r3, r0
 8013f5c:	73fb      	strb	r3, [r7, #15]
 8013f5e:	4613      	mov	r3, r2
 8013f60:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 8013f62:	2300      	movs	r3, #0
 8013f64:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 8013f66:	7bfb      	ldrb	r3, [r7, #15]
 8013f68:	3b01      	subs	r3, #1
 8013f6a:	2b03      	cmp	r3, #3
 8013f6c:	d828      	bhi.n	8013fc0 <SPI_WriteInFlash+0x70>
 8013f6e:	a201      	add	r2, pc, #4	; (adr r2, 8013f74 <SPI_WriteInFlash+0x24>)
 8013f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013f74:	08013f85 	.word	0x08013f85
 8013f78:	08013f95 	.word	0x08013f95
 8013f7c:	08013fa3 	.word	0x08013fa3
 8013f80:	08013fb1 	.word	0x08013fb1
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 8013f84:	4b75      	ldr	r3, [pc, #468]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013f86:	4a76      	ldr	r2, [pc, #472]	; (8014160 <SPI_WriteInFlash+0x210>)
 8013f88:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013f8a:	4b76      	ldr	r3, [pc, #472]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013f8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013f90:	601a      	str	r2, [r3, #0]
		break;
 8013f92:	e018      	b.n	8013fc6 <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8013f94:	4b71      	ldr	r3, [pc, #452]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013f96:	4a74      	ldr	r2, [pc, #464]	; (8014168 <SPI_WriteInFlash+0x218>)
 8013f98:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013f9a:	4b72      	ldr	r3, [pc, #456]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013f9c:	2220      	movs	r2, #32
 8013f9e:	601a      	str	r2, [r3, #0]
		break;
 8013fa0:	e011      	b.n	8013fc6 <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8013fa2:	4b6e      	ldr	r3, [pc, #440]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013fa4:	4a70      	ldr	r2, [pc, #448]	; (8014168 <SPI_WriteInFlash+0x218>)
 8013fa6:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013fa8:	4b6e      	ldr	r3, [pc, #440]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013faa:	2240      	movs	r2, #64	; 0x40
 8013fac:	601a      	str	r2, [r3, #0]
		break;
 8013fae:	e00a      	b.n	8013fc6 <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8013fb0:	4b6a      	ldr	r3, [pc, #424]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013fb2:	4a6e      	ldr	r2, [pc, #440]	; (801416c <SPI_WriteInFlash+0x21c>)
 8013fb4:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013fb6:	4b6b      	ldr	r3, [pc, #428]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013fb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013fbc:	601a      	str	r2, [r3, #0]
		break;
 8013fbe:	e002      	b.n	8013fc6 <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8013fc0:	486b      	ldr	r0, [pc, #428]	; (8014170 <SPI_WriteInFlash+0x220>)
 8013fc2:	f00e fcd5 	bl	8022970 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013fc6:	4b65      	ldr	r3, [pc, #404]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4a66      	ldr	r2, [pc, #408]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013fcc:	6812      	ldr	r2, [r2, #0]
 8013fce:	b291      	uxth	r1, r2
 8013fd0:	2201      	movs	r2, #1
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f004 f8f6 	bl	80181c4 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013fd8:	4b60      	ldr	r3, [pc, #384]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013fda:	681b      	ldr	r3, [r3, #0]
 8013fdc:	4a61      	ldr	r2, [pc, #388]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013fde:	6812      	ldr	r2, [r2, #0]
 8013fe0:	b291      	uxth	r1, r2
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	4618      	mov	r0, r3
 8013fe6:	f004 f8ed 	bl	80181c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8013fea:	2364      	movs	r3, #100	; 0x64
 8013fec:	2201      	movs	r2, #1
 8013fee:	4961      	ldr	r1, [pc, #388]	; (8014174 <SPI_WriteInFlash+0x224>)
 8013ff0:	4861      	ldr	r0, [pc, #388]	; (8014178 <SPI_WriteInFlash+0x228>)
 8013ff2:	f006 f989 	bl	801a308 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013ff6:	4b59      	ldr	r3, [pc, #356]	; (801415c <SPI_WriteInFlash+0x20c>)
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	4a5a      	ldr	r2, [pc, #360]	; (8014164 <SPI_WriteInFlash+0x214>)
 8013ffc:	6812      	ldr	r2, [r2, #0]
 8013ffe:	b291      	uxth	r1, r2
 8014000:	2201      	movs	r2, #1
 8014002:	4618      	mov	r0, r3
 8014004:	f004 f8de 	bl	80181c4 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014008:	4b54      	ldr	r3, [pc, #336]	; (801415c <SPI_WriteInFlash+0x20c>)
 801400a:	681b      	ldr	r3, [r3, #0]
 801400c:	4a55      	ldr	r2, [pc, #340]	; (8014164 <SPI_WriteInFlash+0x214>)
 801400e:	6812      	ldr	r2, [r2, #0]
 8014010:	b291      	uxth	r1, r2
 8014012:	2200      	movs	r2, #0
 8014014:	4618      	mov	r0, r3
 8014016:	f004 f8d5 	bl	80181c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 801401a:	2364      	movs	r3, #100	; 0x64
 801401c:	2201      	movs	r2, #1
 801401e:	4957      	ldr	r1, [pc, #348]	; (801417c <SPI_WriteInFlash+0x22c>)
 8014020:	4855      	ldr	r0, [pc, #340]	; (8014178 <SPI_WriteInFlash+0x228>)
 8014022:	f006 f971 	bl	801a308 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014026:	2364      	movs	r3, #100	; 0x64
 8014028:	2201      	movs	r2, #1
 801402a:	4955      	ldr	r1, [pc, #340]	; (8014180 <SPI_WriteInFlash+0x230>)
 801402c:	4852      	ldr	r0, [pc, #328]	; (8014178 <SPI_WriteInFlash+0x228>)
 801402e:	f006 fad9 	bl	801a5e4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014032:	4b4a      	ldr	r3, [pc, #296]	; (801415c <SPI_WriteInFlash+0x20c>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	4a4b      	ldr	r2, [pc, #300]	; (8014164 <SPI_WriteInFlash+0x214>)
 8014038:	6812      	ldr	r2, [r2, #0]
 801403a:	b291      	uxth	r1, r2
 801403c:	2201      	movs	r2, #1
 801403e:	4618      	mov	r0, r3
 8014040:	f004 f8c0 	bl	80181c4 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8014044:	4b4e      	ldr	r3, [pc, #312]	; (8014180 <SPI_WriteInFlash+0x230>)
 8014046:	781b      	ldrb	r3, [r3, #0]
 8014048:	f003 0302 	and.w	r3, r3, #2
 801404c:	2b00      	cmp	r3, #0
 801404e:	d103      	bne.n	8014058 <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8014050:	484c      	ldr	r0, [pc, #304]	; (8014184 <SPI_WriteInFlash+0x234>)
 8014052:	f00e fbf1 	bl	8022838 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014056:	e7d7      	b.n	8014008 <SPI_WriteInFlash+0xb8>
			break;
 8014058:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801405a:	4b40      	ldr	r3, [pc, #256]	; (801415c <SPI_WriteInFlash+0x20c>)
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	4a41      	ldr	r2, [pc, #260]	; (8014164 <SPI_WriteInFlash+0x214>)
 8014060:	6812      	ldr	r2, [r2, #0]
 8014062:	b291      	uxth	r1, r2
 8014064:	2200      	movs	r2, #0
 8014066:	4618      	mov	r0, r3
 8014068:	f004 f8ac 	bl	80181c4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 801406c:	2202      	movs	r2, #2
 801406e:	4b46      	ldr	r3, [pc, #280]	; (8014188 <SPI_WriteInFlash+0x238>)
 8014070:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8014072:	68bb      	ldr	r3, [r7, #8]
 8014074:	0c1b      	lsrs	r3, r3, #16
 8014076:	b2da      	uxtb	r2, r3
 8014078:	4b43      	ldr	r3, [pc, #268]	; (8014188 <SPI_WriteInFlash+0x238>)
 801407a:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 801407c:	68bb      	ldr	r3, [r7, #8]
 801407e:	0a1b      	lsrs	r3, r3, #8
 8014080:	b2da      	uxtb	r2, r3
 8014082:	4b41      	ldr	r3, [pc, #260]	; (8014188 <SPI_WriteInFlash+0x238>)
 8014084:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8014086:	68bb      	ldr	r3, [r7, #8]
 8014088:	b2da      	uxtb	r2, r3
 801408a:	4b3f      	ldr	r3, [pc, #252]	; (8014188 <SPI_WriteInFlash+0x238>)
 801408c:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 801408e:	2364      	movs	r3, #100	; 0x64
 8014090:	2204      	movs	r2, #4
 8014092:	493d      	ldr	r1, [pc, #244]	; (8014188 <SPI_WriteInFlash+0x238>)
 8014094:	4838      	ldr	r0, [pc, #224]	; (8014178 <SPI_WriteInFlash+0x228>)
 8014096:	f006 f937 	bl	801a308 <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 801409a:	89ba      	ldrh	r2, [r7, #12]
 801409c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80140a0:	6879      	ldr	r1, [r7, #4]
 80140a2:	4835      	ldr	r0, [pc, #212]	; (8014178 <SPI_WriteInFlash+0x228>)
 80140a4:	f006 f930 	bl	801a308 <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80140a8:	4b2c      	ldr	r3, [pc, #176]	; (801415c <SPI_WriteInFlash+0x20c>)
 80140aa:	681b      	ldr	r3, [r3, #0]
 80140ac:	4a2d      	ldr	r2, [pc, #180]	; (8014164 <SPI_WriteInFlash+0x214>)
 80140ae:	6812      	ldr	r2, [r2, #0]
 80140b0:	b291      	uxth	r1, r2
 80140b2:	2201      	movs	r2, #1
 80140b4:	4618      	mov	r0, r3
 80140b6:	f004 f885 	bl	80181c4 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80140ba:	4b28      	ldr	r3, [pc, #160]	; (801415c <SPI_WriteInFlash+0x20c>)
 80140bc:	681b      	ldr	r3, [r3, #0]
 80140be:	4a29      	ldr	r2, [pc, #164]	; (8014164 <SPI_WriteInFlash+0x214>)
 80140c0:	6812      	ldr	r2, [r2, #0]
 80140c2:	b291      	uxth	r1, r2
 80140c4:	2200      	movs	r2, #0
 80140c6:	4618      	mov	r0, r3
 80140c8:	f004 f87c 	bl	80181c4 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80140cc:	2205      	movs	r2, #5
 80140ce:	4b2e      	ldr	r3, [pc, #184]	; (8014188 <SPI_WriteInFlash+0x238>)
 80140d0:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80140d2:	2364      	movs	r3, #100	; 0x64
 80140d4:	2201      	movs	r2, #1
 80140d6:	492c      	ldr	r1, [pc, #176]	; (8014188 <SPI_WriteInFlash+0x238>)
 80140d8:	4827      	ldr	r0, [pc, #156]	; (8014178 <SPI_WriteInFlash+0x228>)
 80140da:	f006 f915 	bl	801a308 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80140de:	2364      	movs	r3, #100	; 0x64
 80140e0:	2201      	movs	r2, #1
 80140e2:	4927      	ldr	r1, [pc, #156]	; (8014180 <SPI_WriteInFlash+0x230>)
 80140e4:	4824      	ldr	r0, [pc, #144]	; (8014178 <SPI_WriteInFlash+0x228>)
 80140e6:	f006 fa7d 	bl	801a5e4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80140ea:	4b1c      	ldr	r3, [pc, #112]	; (801415c <SPI_WriteInFlash+0x20c>)
 80140ec:	681b      	ldr	r3, [r3, #0]
 80140ee:	4a1d      	ldr	r2, [pc, #116]	; (8014164 <SPI_WriteInFlash+0x214>)
 80140f0:	6812      	ldr	r2, [r2, #0]
 80140f2:	b291      	uxth	r1, r2
 80140f4:	2201      	movs	r2, #1
 80140f6:	4618      	mov	r0, r3
 80140f8:	f004 f864 	bl	80181c4 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 80140fc:	4b20      	ldr	r3, [pc, #128]	; (8014180 <SPI_WriteInFlash+0x230>)
 80140fe:	781b      	ldrb	r3, [r3, #0]
 8014100:	f003 0301 	and.w	r3, r3, #1
 8014104:	2b00      	cmp	r3, #0
 8014106:	d1d8      	bne.n	80140ba <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8014108:	2301      	movs	r3, #1
 801410a:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 801410c:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801410e:	4b13      	ldr	r3, [pc, #76]	; (801415c <SPI_WriteInFlash+0x20c>)
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	4a14      	ldr	r2, [pc, #80]	; (8014164 <SPI_WriteInFlash+0x214>)
 8014114:	6812      	ldr	r2, [r2, #0]
 8014116:	b291      	uxth	r1, r2
 8014118:	2200      	movs	r2, #0
 801411a:	4618      	mov	r0, r3
 801411c:	f004 f852 	bl	80181c4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8014120:	2204      	movs	r2, #4
 8014122:	4b19      	ldr	r3, [pc, #100]	; (8014188 <SPI_WriteInFlash+0x238>)
 8014124:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8014126:	2364      	movs	r3, #100	; 0x64
 8014128:	2201      	movs	r2, #1
 801412a:	4917      	ldr	r1, [pc, #92]	; (8014188 <SPI_WriteInFlash+0x238>)
 801412c:	4812      	ldr	r0, [pc, #72]	; (8014178 <SPI_WriteInFlash+0x228>)
 801412e:	f006 f8eb 	bl	801a308 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8014132:	2364      	movs	r3, #100	; 0x64
 8014134:	2201      	movs	r2, #1
 8014136:	4912      	ldr	r1, [pc, #72]	; (8014180 <SPI_WriteInFlash+0x230>)
 8014138:	480f      	ldr	r0, [pc, #60]	; (8014178 <SPI_WriteInFlash+0x228>)
 801413a:	f006 fa53 	bl	801a5e4 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801413e:	4b07      	ldr	r3, [pc, #28]	; (801415c <SPI_WriteInFlash+0x20c>)
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	4a08      	ldr	r2, [pc, #32]	; (8014164 <SPI_WriteInFlash+0x214>)
 8014144:	6812      	ldr	r2, [r2, #0]
 8014146:	b291      	uxth	r1, r2
 8014148:	2201      	movs	r2, #1
 801414a:	4618      	mov	r0, r3
 801414c:	f004 f83a 	bl	80181c4 <HAL_GPIO_WritePin>

	return Return_Value;
 8014150:	7dfb      	ldrb	r3, [r7, #23]
}
 8014152:	4618      	mov	r0, r3
 8014154:	3718      	adds	r7, #24
 8014156:	46bd      	mov	sp, r7
 8014158:	bd80      	pop	{r7, pc}
 801415a:	bf00      	nop
 801415c:	2000a078 	.word	0x2000a078
 8014160:	40021800 	.word	0x40021800
 8014164:	2000a07c 	.word	0x2000a07c
 8014168:	40020c00 	.word	0x40020c00
 801416c:	40021000 	.word	0x40021000
 8014170:	08027254 	.word	0x08027254
 8014174:	08028ec4 	.word	0x08028ec4
 8014178:	2000a084 	.word	0x2000a084
 801417c:	08028ec5 	.word	0x08028ec5
 8014180:	2000a074 	.word	0x2000a074
 8014184:	0802726c 	.word	0x0802726c
 8014188:	2000a070 	.word	0x2000a070

0801418c <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 801418c:	b580      	push	{r7, lr}
 801418e:	b084      	sub	sp, #16
 8014190:	af00      	add	r7, sp, #0
 8014192:	4603      	mov	r3, r0
 8014194:	6039      	str	r1, [r7, #0]
 8014196:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8014198:	2300      	movs	r3, #0
 801419a:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 801419c:	79fb      	ldrb	r3, [r7, #7]
 801419e:	3b01      	subs	r3, #1
 80141a0:	2b03      	cmp	r3, #3
 80141a2:	d829      	bhi.n	80141f8 <SPI_MemoryEraseBySector+0x6c>
 80141a4:	a201      	add	r2, pc, #4	; (adr r2, 80141ac <SPI_MemoryEraseBySector+0x20>)
 80141a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80141aa:	bf00      	nop
 80141ac:	080141bd 	.word	0x080141bd
 80141b0:	080141cd 	.word	0x080141cd
 80141b4:	080141db 	.word	0x080141db
 80141b8:	080141e9 	.word	0x080141e9
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80141bc:	4b6d      	ldr	r3, [pc, #436]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 80141be:	4a6e      	ldr	r2, [pc, #440]	; (8014378 <SPI_MemoryEraseBySector+0x1ec>)
 80141c0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80141c2:	4b6e      	ldr	r3, [pc, #440]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 80141c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80141c8:	601a      	str	r2, [r3, #0]
		break;
 80141ca:	e018      	b.n	80141fe <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80141cc:	4b69      	ldr	r3, [pc, #420]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 80141ce:	4a6c      	ldr	r2, [pc, #432]	; (8014380 <SPI_MemoryEraseBySector+0x1f4>)
 80141d0:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80141d2:	4b6a      	ldr	r3, [pc, #424]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 80141d4:	2220      	movs	r2, #32
 80141d6:	601a      	str	r2, [r3, #0]
		break;
 80141d8:	e011      	b.n	80141fe <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80141da:	4b66      	ldr	r3, [pc, #408]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 80141dc:	4a68      	ldr	r2, [pc, #416]	; (8014380 <SPI_MemoryEraseBySector+0x1f4>)
 80141de:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80141e0:	4b66      	ldr	r3, [pc, #408]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 80141e2:	2240      	movs	r2, #64	; 0x40
 80141e4:	601a      	str	r2, [r3, #0]
		break;
 80141e6:	e00a      	b.n	80141fe <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 80141e8:	4b62      	ldr	r3, [pc, #392]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 80141ea:	4a66      	ldr	r2, [pc, #408]	; (8014384 <SPI_MemoryEraseBySector+0x1f8>)
 80141ec:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 80141ee:	4b63      	ldr	r3, [pc, #396]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 80141f0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80141f4:	601a      	str	r2, [r3, #0]
		break;
 80141f6:	e002      	b.n	80141fe <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 80141f8:	4863      	ldr	r0, [pc, #396]	; (8014388 <SPI_MemoryEraseBySector+0x1fc>)
 80141fa:	f00e fbb9 	bl	8022970 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80141fe:	4b5d      	ldr	r3, [pc, #372]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	4a5e      	ldr	r2, [pc, #376]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 8014204:	6812      	ldr	r2, [r2, #0]
 8014206:	b291      	uxth	r1, r2
 8014208:	2200      	movs	r2, #0
 801420a:	4618      	mov	r0, r3
 801420c:	f003 ffda 	bl	80181c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8014210:	2364      	movs	r3, #100	; 0x64
 8014212:	2201      	movs	r2, #1
 8014214:	495d      	ldr	r1, [pc, #372]	; (801438c <SPI_MemoryEraseBySector+0x200>)
 8014216:	485e      	ldr	r0, [pc, #376]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 8014218:	f006 f876 	bl	801a308 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 801421c:	4b55      	ldr	r3, [pc, #340]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	4a56      	ldr	r2, [pc, #344]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 8014222:	6812      	ldr	r2, [r2, #0]
 8014224:	b291      	uxth	r1, r2
 8014226:	2201      	movs	r2, #1
 8014228:	4618      	mov	r0, r3
 801422a:	f003 ffcb 	bl	80181c4 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801422e:	4b51      	ldr	r3, [pc, #324]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	4a52      	ldr	r2, [pc, #328]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 8014234:	6812      	ldr	r2, [r2, #0]
 8014236:	b291      	uxth	r1, r2
 8014238:	2200      	movs	r2, #0
 801423a:	4618      	mov	r0, r3
 801423c:	f003 ffc2 	bl	80181c4 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8014240:	2364      	movs	r3, #100	; 0x64
 8014242:	2201      	movs	r2, #1
 8014244:	4953      	ldr	r1, [pc, #332]	; (8014394 <SPI_MemoryEraseBySector+0x208>)
 8014246:	4852      	ldr	r0, [pc, #328]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 8014248:	f006 f85e 	bl	801a308 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801424c:	2364      	movs	r3, #100	; 0x64
 801424e:	2201      	movs	r2, #1
 8014250:	4951      	ldr	r1, [pc, #324]	; (8014398 <SPI_MemoryEraseBySector+0x20c>)
 8014252:	484f      	ldr	r0, [pc, #316]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 8014254:	f006 f9c6 	bl	801a5e4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014258:	4b46      	ldr	r3, [pc, #280]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	4a47      	ldr	r2, [pc, #284]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 801425e:	6812      	ldr	r2, [r2, #0]
 8014260:	b291      	uxth	r1, r2
 8014262:	2201      	movs	r2, #1
 8014264:	4618      	mov	r0, r3
 8014266:	f003 ffad 	bl	80181c4 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 801426a:	4b4b      	ldr	r3, [pc, #300]	; (8014398 <SPI_MemoryEraseBySector+0x20c>)
 801426c:	781b      	ldrb	r3, [r3, #0]
 801426e:	f003 0302 	and.w	r3, r3, #2
 8014272:	2b00      	cmp	r3, #0
 8014274:	d103      	bne.n	801427e <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8014276:	4849      	ldr	r0, [pc, #292]	; (801439c <SPI_MemoryEraseBySector+0x210>)
 8014278:	f00e fade 	bl	8022838 <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 801427c:	e7d7      	b.n	801422e <SPI_MemoryEraseBySector+0xa2>
			break;
 801427e:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014280:	4b3c      	ldr	r3, [pc, #240]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 8014282:	681b      	ldr	r3, [r3, #0]
 8014284:	4a3d      	ldr	r2, [pc, #244]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 8014286:	6812      	ldr	r2, [r2, #0]
 8014288:	b291      	uxth	r1, r2
 801428a:	2200      	movs	r2, #0
 801428c:	4618      	mov	r0, r3
 801428e:	f003 ff99 	bl	80181c4 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8014292:	4b43      	ldr	r3, [pc, #268]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 8014294:	2220      	movs	r2, #32
 8014296:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8014298:	683b      	ldr	r3, [r7, #0]
 801429a:	0c1b      	lsrs	r3, r3, #16
 801429c:	b2da      	uxtb	r2, r3
 801429e:	4b40      	ldr	r3, [pc, #256]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 80142a0:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 80142a2:	683b      	ldr	r3, [r7, #0]
 80142a4:	0a1b      	lsrs	r3, r3, #8
 80142a6:	b2da      	uxtb	r2, r3
 80142a8:	4b3d      	ldr	r3, [pc, #244]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 80142aa:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 80142ac:	683b      	ldr	r3, [r7, #0]
 80142ae:	b2da      	uxtb	r2, r3
 80142b0:	4b3b      	ldr	r3, [pc, #236]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 80142b2:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 80142b4:	2364      	movs	r3, #100	; 0x64
 80142b6:	2204      	movs	r2, #4
 80142b8:	4939      	ldr	r1, [pc, #228]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 80142ba:	4835      	ldr	r0, [pc, #212]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 80142bc:	f006 f824 	bl	801a308 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 80142c0:	4b2c      	ldr	r3, [pc, #176]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 80142c2:	681b      	ldr	r3, [r3, #0]
 80142c4:	4a2d      	ldr	r2, [pc, #180]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 80142c6:	6812      	ldr	r2, [r2, #0]
 80142c8:	b291      	uxth	r1, r2
 80142ca:	2201      	movs	r2, #1
 80142cc:	4618      	mov	r0, r3
 80142ce:	f003 ff79 	bl	80181c4 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 80142d2:	4b28      	ldr	r3, [pc, #160]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 80142d4:	681b      	ldr	r3, [r3, #0]
 80142d6:	4a29      	ldr	r2, [pc, #164]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 80142d8:	6812      	ldr	r2, [r2, #0]
 80142da:	b291      	uxth	r1, r2
 80142dc:	2200      	movs	r2, #0
 80142de:	4618      	mov	r0, r3
 80142e0:	f003 ff70 	bl	80181c4 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 80142e4:	2205      	movs	r2, #5
 80142e6:	4b2e      	ldr	r3, [pc, #184]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 80142e8:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 80142ea:	2364      	movs	r3, #100	; 0x64
 80142ec:	2201      	movs	r2, #1
 80142ee:	492c      	ldr	r1, [pc, #176]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 80142f0:	4827      	ldr	r0, [pc, #156]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 80142f2:	f006 f809 	bl	801a308 <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 80142f6:	2364      	movs	r3, #100	; 0x64
 80142f8:	2201      	movs	r2, #1
 80142fa:	4927      	ldr	r1, [pc, #156]	; (8014398 <SPI_MemoryEraseBySector+0x20c>)
 80142fc:	4824      	ldr	r0, [pc, #144]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 80142fe:	f006 f971 	bl	801a5e4 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014302:	4b1c      	ldr	r3, [pc, #112]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 8014304:	681b      	ldr	r3, [r3, #0]
 8014306:	4a1d      	ldr	r2, [pc, #116]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 8014308:	6812      	ldr	r2, [r2, #0]
 801430a:	b291      	uxth	r1, r2
 801430c:	2201      	movs	r2, #1
 801430e:	4618      	mov	r0, r3
 8014310:	f003 ff58 	bl	80181c4 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8014314:	4b20      	ldr	r3, [pc, #128]	; (8014398 <SPI_MemoryEraseBySector+0x20c>)
 8014316:	781b      	ldrb	r3, [r3, #0]
 8014318:	f003 0301 	and.w	r3, r3, #1
 801431c:	2b00      	cmp	r3, #0
 801431e:	d1d8      	bne.n	80142d2 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8014320:	2301      	movs	r3, #1
 8014322:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8014324:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014326:	4b13      	ldr	r3, [pc, #76]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 8014328:	681b      	ldr	r3, [r3, #0]
 801432a:	4a14      	ldr	r2, [pc, #80]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 801432c:	6812      	ldr	r2, [r2, #0]
 801432e:	b291      	uxth	r1, r2
 8014330:	2200      	movs	r2, #0
 8014332:	4618      	mov	r0, r3
 8014334:	f003 ff46 	bl	80181c4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8014338:	2204      	movs	r2, #4
 801433a:	4b19      	ldr	r3, [pc, #100]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 801433c:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 801433e:	2364      	movs	r3, #100	; 0x64
 8014340:	2201      	movs	r2, #1
 8014342:	4917      	ldr	r1, [pc, #92]	; (80143a0 <SPI_MemoryEraseBySector+0x214>)
 8014344:	4812      	ldr	r0, [pc, #72]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 8014346:	f005 ffdf 	bl	801a308 <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 801434a:	2364      	movs	r3, #100	; 0x64
 801434c:	2201      	movs	r2, #1
 801434e:	4912      	ldr	r1, [pc, #72]	; (8014398 <SPI_MemoryEraseBySector+0x20c>)
 8014350:	480f      	ldr	r0, [pc, #60]	; (8014390 <SPI_MemoryEraseBySector+0x204>)
 8014352:	f006 f947 	bl	801a5e4 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014356:	4b07      	ldr	r3, [pc, #28]	; (8014374 <SPI_MemoryEraseBySector+0x1e8>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	4a08      	ldr	r2, [pc, #32]	; (801437c <SPI_MemoryEraseBySector+0x1f0>)
 801435c:	6812      	ldr	r2, [r2, #0]
 801435e:	b291      	uxth	r1, r2
 8014360:	2201      	movs	r2, #1
 8014362:	4618      	mov	r0, r3
 8014364:	f003 ff2e 	bl	80181c4 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8014368:	68fb      	ldr	r3, [r7, #12]

}
 801436a:	4618      	mov	r0, r3
 801436c:	3710      	adds	r7, #16
 801436e:	46bd      	mov	sp, r7
 8014370:	bd80      	pop	{r7, pc}
 8014372:	bf00      	nop
 8014374:	2000a078 	.word	0x2000a078
 8014378:	40021800 	.word	0x40021800
 801437c:	2000a07c 	.word	0x2000a07c
 8014380:	40020c00 	.word	0x40020c00
 8014384:	40021000 	.word	0x40021000
 8014388:	08027254 	.word	0x08027254
 801438c:	08028ec4 	.word	0x08028ec4
 8014390:	2000a084 	.word	0x2000a084
 8014394:	08028ec5 	.word	0x08028ec5
 8014398:	2000a074 	.word	0x2000a074
 801439c:	08027290 	.word	0x08027290
 80143a0:	2000a070 	.word	0x2000a070

080143a4 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	b084      	sub	sp, #16
 80143a8:	af00      	add	r7, sp, #0
 80143aa:	60b9      	str	r1, [r7, #8]
 80143ac:	607b      	str	r3, [r7, #4]
 80143ae:	4603      	mov	r3, r0
 80143b0:	73fb      	strb	r3, [r7, #15]
 80143b2:	4613      	mov	r3, r2
 80143b4:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 80143b6:	7bfb      	ldrb	r3, [r7, #15]
 80143b8:	3b01      	subs	r3, #1
 80143ba:	2b03      	cmp	r3, #3
 80143bc:	d828      	bhi.n	8014410 <SPI_ReadFromFlash+0x6c>
 80143be:	a201      	add	r2, pc, #4	; (adr r2, 80143c4 <SPI_ReadFromFlash+0x20>)
 80143c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143c4:	080143d5 	.word	0x080143d5
 80143c8:	080143e5 	.word	0x080143e5
 80143cc:	080143f3 	.word	0x080143f3
 80143d0:	08014401 	.word	0x08014401
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 80143d4:	4b2d      	ldr	r3, [pc, #180]	; (801448c <SPI_ReadFromFlash+0xe8>)
 80143d6:	4a2e      	ldr	r2, [pc, #184]	; (8014490 <SPI_ReadFromFlash+0xec>)
 80143d8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80143da:	4b2e      	ldr	r3, [pc, #184]	; (8014494 <SPI_ReadFromFlash+0xf0>)
 80143dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80143e0:	601a      	str	r2, [r3, #0]
		break;
 80143e2:	e018      	b.n	8014416 <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 80143e4:	4b29      	ldr	r3, [pc, #164]	; (801448c <SPI_ReadFromFlash+0xe8>)
 80143e6:	4a2c      	ldr	r2, [pc, #176]	; (8014498 <SPI_ReadFromFlash+0xf4>)
 80143e8:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 80143ea:	4b2a      	ldr	r3, [pc, #168]	; (8014494 <SPI_ReadFromFlash+0xf0>)
 80143ec:	2220      	movs	r2, #32
 80143ee:	601a      	str	r2, [r3, #0]
		break;
 80143f0:	e011      	b.n	8014416 <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 80143f2:	4b26      	ldr	r3, [pc, #152]	; (801448c <SPI_ReadFromFlash+0xe8>)
 80143f4:	4a28      	ldr	r2, [pc, #160]	; (8014498 <SPI_ReadFromFlash+0xf4>)
 80143f6:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 80143f8:	4b26      	ldr	r3, [pc, #152]	; (8014494 <SPI_ReadFromFlash+0xf0>)
 80143fa:	2240      	movs	r2, #64	; 0x40
 80143fc:	601a      	str	r2, [r3, #0]
		break;
 80143fe:	e00a      	b.n	8014416 <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8014400:	4b22      	ldr	r3, [pc, #136]	; (801448c <SPI_ReadFromFlash+0xe8>)
 8014402:	4a26      	ldr	r2, [pc, #152]	; (801449c <SPI_ReadFromFlash+0xf8>)
 8014404:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8014406:	4b23      	ldr	r3, [pc, #140]	; (8014494 <SPI_ReadFromFlash+0xf0>)
 8014408:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 801440c:	601a      	str	r2, [r3, #0]
		break;
 801440e:	e002      	b.n	8014416 <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8014410:	4823      	ldr	r0, [pc, #140]	; (80144a0 <SPI_ReadFromFlash+0xfc>)
 8014412:	f00e faad 	bl	8022970 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8014416:	89bb      	ldrh	r3, [r7, #12]
 8014418:	461a      	mov	r2, r3
 801441a:	2100      	movs	r1, #0
 801441c:	6878      	ldr	r0, [r7, #4]
 801441e:	f00e f923 	bl	8022668 <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8014422:	4b1a      	ldr	r3, [pc, #104]	; (801448c <SPI_ReadFromFlash+0xe8>)
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4a1b      	ldr	r2, [pc, #108]	; (8014494 <SPI_ReadFromFlash+0xf0>)
 8014428:	6812      	ldr	r2, [r2, #0]
 801442a:	b291      	uxth	r1, r2
 801442c:	2200      	movs	r2, #0
 801442e:	4618      	mov	r0, r3
 8014430:	f003 fec8 	bl	80181c4 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8014434:	2203      	movs	r2, #3
 8014436:	4b1b      	ldr	r3, [pc, #108]	; (80144a4 <SPI_ReadFromFlash+0x100>)
 8014438:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 801443a:	68bb      	ldr	r3, [r7, #8]
 801443c:	0c1b      	lsrs	r3, r3, #16
 801443e:	b2da      	uxtb	r2, r3
 8014440:	4b18      	ldr	r3, [pc, #96]	; (80144a4 <SPI_ReadFromFlash+0x100>)
 8014442:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8014444:	68bb      	ldr	r3, [r7, #8]
 8014446:	0a1b      	lsrs	r3, r3, #8
 8014448:	b2da      	uxtb	r2, r3
 801444a:	4b16      	ldr	r3, [pc, #88]	; (80144a4 <SPI_ReadFromFlash+0x100>)
 801444c:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 801444e:	68bb      	ldr	r3, [r7, #8]
 8014450:	b2da      	uxtb	r2, r3
 8014452:	4b14      	ldr	r3, [pc, #80]	; (80144a4 <SPI_ReadFromFlash+0x100>)
 8014454:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8014456:	2364      	movs	r3, #100	; 0x64
 8014458:	2204      	movs	r2, #4
 801445a:	4912      	ldr	r1, [pc, #72]	; (80144a4 <SPI_ReadFromFlash+0x100>)
 801445c:	4812      	ldr	r0, [pc, #72]	; (80144a8 <SPI_ReadFromFlash+0x104>)
 801445e:	f005 ff53 	bl	801a308 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8014462:	89ba      	ldrh	r2, [r7, #12]
 8014464:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8014468:	6879      	ldr	r1, [r7, #4]
 801446a:	480f      	ldr	r0, [pc, #60]	; (80144a8 <SPI_ReadFromFlash+0x104>)
 801446c:	f006 f8ba 	bl	801a5e4 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8014470:	4b06      	ldr	r3, [pc, #24]	; (801448c <SPI_ReadFromFlash+0xe8>)
 8014472:	681b      	ldr	r3, [r3, #0]
 8014474:	4a07      	ldr	r2, [pc, #28]	; (8014494 <SPI_ReadFromFlash+0xf0>)
 8014476:	6812      	ldr	r2, [r2, #0]
 8014478:	b291      	uxth	r1, r2
 801447a:	2201      	movs	r2, #1
 801447c:	4618      	mov	r0, r3
 801447e:	f003 fea1 	bl	80181c4 <HAL_GPIO_WritePin>

}
 8014482:	bf00      	nop
 8014484:	3710      	adds	r7, #16
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	2000a078 	.word	0x2000a078
 8014490:	40021800 	.word	0x40021800
 8014494:	2000a07c 	.word	0x2000a07c
 8014498:	40020c00 	.word	0x40020c00
 801449c:	40021000 	.word	0x40021000
 80144a0:	08027254 	.word	0x08027254
 80144a4:	2000a070 	.word	0x2000a070
 80144a8:	2000a084 	.word	0x2000a084

080144ac <Get_Config>:




void Get_Config(void)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b084      	sub	sp, #16
 80144b0:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 80144b2:	2300      	movs	r3, #0
 80144b4:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 80144b6:	f240 3346 	movw	r3, #838	; 0x346
 80144ba:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80144bc:	687b      	ldr	r3, [r7, #4]
 80144be:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80144c0:	2300      	movs	r3, #0
 80144c2:	60fb      	str	r3, [r7, #12]
 80144c4:	e01d      	b.n	8014502 <Get_Config+0x56>
	{
		HAL_Delay(20);
 80144c6:	2014      	movs	r0, #20
 80144c8:	f001 f9b8 	bl	801583c <HAL_Delay>
		if(SIZE_VAR <32)
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	2b1f      	cmp	r3, #31
 80144d0:	d809      	bhi.n	80144e6 <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 80144d2:	68bb      	ldr	r3, [r7, #8]
 80144d4:	b29a      	uxth	r2, r3
 80144d6:	68fb      	ldr	r3, [r7, #12]
 80144d8:	492c      	ldr	r1, [pc, #176]	; (801458c <Get_Config+0xe0>)
 80144da:	440b      	add	r3, r1
 80144dc:	68f9      	ldr	r1, [r7, #12]
 80144de:	2001      	movs	r0, #1
 80144e0:	f7ff ff60 	bl	80143a4 <SPI_ReadFromFlash>
 80144e4:	e00a      	b.n	80144fc <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 80144e6:	68fb      	ldr	r3, [r7, #12]
 80144e8:	4a28      	ldr	r2, [pc, #160]	; (801458c <Get_Config+0xe0>)
 80144ea:	4413      	add	r3, r2
 80144ec:	2220      	movs	r2, #32
 80144ee:	68f9      	ldr	r1, [r7, #12]
 80144f0:	2001      	movs	r0, #1
 80144f2:	f7ff ff57 	bl	80143a4 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 80144f6:	68bb      	ldr	r3, [r7, #8]
 80144f8:	3b20      	subs	r3, #32
 80144fa:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 80144fc:	68fb      	ldr	r3, [r7, #12]
 80144fe:	3320      	adds	r3, #32
 8014500:	60fb      	str	r3, [r7, #12]
 8014502:	68fa      	ldr	r2, [r7, #12]
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	429a      	cmp	r2, r3
 8014508:	d3dd      	bcc.n	80144c6 <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 801450a:	f44f 7151 	mov.w	r1, #836	; 0x344
 801450e:	481f      	ldr	r0, [pc, #124]	; (801458c <Get_Config+0xe0>)
 8014510:	f7fe fc9e 	bl	8012e50 <CheckCRC>
 8014514:	4603      	mov	r3, r0
 8014516:	2b00      	cmp	r3, #0
 8014518:	d013      	beq.n	8014542 <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 801451a:	f44f 7250 	mov.w	r2, #832	; 0x340
 801451e:	491c      	ldr	r1, [pc, #112]	; (8014590 <Get_Config+0xe4>)
 8014520:	481c      	ldr	r0, [pc, #112]	; (8014594 <Get_Config+0xe8>)
 8014522:	f00e f879 	bl	8022618 <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8014526:	4a1c      	ldr	r2, [pc, #112]	; (8014598 <Get_Config+0xec>)
 8014528:	2110      	movs	r1, #16
 801452a:	2000      	movs	r0, #0
 801452c:	f7ec f872 	bl	8000614 <ExtractBits>
 8014530:	4603      	mov	r3, r0
 8014532:	b29a      	uxth	r2, r3
 8014534:	4b19      	ldr	r3, [pc, #100]	; (801459c <Get_Config+0xf0>)
 8014536:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8014538:	4b19      	ldr	r3, [pc, #100]	; (80145a0 <Get_Config+0xf4>)
 801453a:	781b      	ldrb	r3, [r3, #0]
 801453c:	2b00      	cmp	r3, #0
 801453e:	d121      	bne.n	8014584 <Get_Config+0xd8>
 8014540:	e01e      	b.n	8014580 <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 8014542:	f44f 7151 	mov.w	r1, #836	; 0x344
 8014546:	4817      	ldr	r0, [pc, #92]	; (80145a4 <Get_Config+0xf8>)
 8014548:	f00e f976 	bl	8022838 <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 801454c:	4b16      	ldr	r3, [pc, #88]	; (80145a8 <Get_Config+0xfc>)
 801454e:	4a10      	ldr	r2, [pc, #64]	; (8014590 <Get_Config+0xe4>)
 8014550:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8014552:	4b0e      	ldr	r3, [pc, #56]	; (801458c <Get_Config+0xe0>)
 8014554:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8014558:	4619      	mov	r1, r3
 801455a:	4b0c      	ldr	r3, [pc, #48]	; (801458c <Get_Config+0xe0>)
 801455c:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8014560:	461a      	mov	r2, r3
 8014562:	4812      	ldr	r0, [pc, #72]	; (80145ac <Get_Config+0x100>)
 8014564:	f00e f968 	bl	8022838 <iprintf>
		printf("\nCheck for CRC:");
 8014568:	4811      	ldr	r0, [pc, #68]	; (80145b0 <Get_Config+0x104>)
 801456a:	f00e f965 	bl	8022838 <iprintf>
		gucFlagUpdate =3;
 801456e:	4b11      	ldr	r3, [pc, #68]	; (80145b4 <Get_Config+0x108>)
 8014570:	2203      	movs	r2, #3
 8014572:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8014574:	4810      	ldr	r0, [pc, #64]	; (80145b8 <Get_Config+0x10c>)
 8014576:	f00e f9fb 	bl	8022970 <puts>
			Data_Processing();
 801457a:	f000 f81f 	bl	80145bc <Data_Processing>
 801457e:	e7fc      	b.n	801457a <Get_Config+0xce>
	{
		readCanToStructs();
 8014580:	f7fb fdf8 	bl	8010174 <readCanToStructs>
	}
}
 8014584:	bf00      	nop
 8014586:	3710      	adds	r7, #16
 8014588:	46bd      	mov	sp, r7
 801458a:	bd80      	pop	{r7, pc}
 801458c:	20000648 	.word	0x20000648
 8014590:	2000064c 	.word	0x2000064c
 8014594:	20000304 	.word	0x20000304
 8014598:	2000098c 	.word	0x2000098c
 801459c:	2000a082 	.word	0x2000a082
 80145a0:	20000a4b 	.word	0x20000a4b
 80145a4:	080272c0 	.word	0x080272c0
 80145a8:	20000300 	.word	0x20000300
 80145ac:	080272e8 	.word	0x080272e8
 80145b0:	080272fc 	.word	0x080272fc
 80145b4:	20000a49 	.word	0x20000a49
 80145b8:	0802730c 	.word	0x0802730c

080145bc <Data_Processing>:


void Data_Processing(void)
{
 80145bc:	b580      	push	{r7, lr}
 80145be:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 80145c0:	4b0b      	ldr	r3, [pc, #44]	; (80145f0 <Data_Processing+0x34>)
 80145c2:	781b      	ldrb	r3, [r3, #0]
 80145c4:	2b03      	cmp	r3, #3
 80145c6:	d10e      	bne.n	80145e6 <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 80145c8:	2000      	movs	r0, #0
 80145ca:	f7f6 fb9b 	bl	800ad04 <CheckForRqst>
 80145ce:	4603      	mov	r3, r0
 80145d0:	461a      	mov	r2, r3
 80145d2:	4b08      	ldr	r3, [pc, #32]	; (80145f4 <Data_Processing+0x38>)
 80145d4:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 80145d6:	4b07      	ldr	r3, [pc, #28]	; (80145f4 <Data_Processing+0x38>)
 80145d8:	781b      	ldrb	r3, [r3, #0]
 80145da:	2b01      	cmp	r3, #1
 80145dc:	d105      	bne.n	80145ea <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 80145de:	2000      	movs	r0, #0
 80145e0:	f000 f80a 	bl	80145f8 <AutoLoadDat>
		}
		break;
 80145e4:	e001      	b.n	80145ea <Data_Processing+0x2e>
	default:
		break;
 80145e6:	bf00      	nop
 80145e8:	e000      	b.n	80145ec <Data_Processing+0x30>
		break;
 80145ea:	bf00      	nop
	}
}
 80145ec:	bf00      	nop
 80145ee:	bd80      	pop	{r7, pc}
 80145f0:	20000a49 	.word	0x20000a49
 80145f4:	20000a4a 	.word	0x20000a4a

080145f8 <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 80145f8:	b580      	push	{r7, lr}
 80145fa:	b084      	sub	sp, #16
 80145fc:	af00      	add	r7, sp, #0
 80145fe:	4603      	mov	r3, r0
 8014600:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8014602:	2300      	movs	r3, #0
 8014604:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 8014606:	79fb      	ldrb	r3, [r7, #7]
 8014608:	b29b      	uxth	r3, r3
 801460a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801460e:	4934      	ldr	r1, [pc, #208]	; (80146e0 <AutoLoadDat+0xe8>)
 8014610:	4618      	mov	r0, r3
 8014612:	f7f6 fd1f 	bl	800b054 <ReadAndFormConfig>
 8014616:	4603      	mov	r3, r0
 8014618:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 801461a:	4832      	ldr	r0, [pc, #200]	; (80146e4 <AutoLoadDat+0xec>)
 801461c:	f004 fc68 	bl	8018ef0 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8014620:	7bbb      	ldrb	r3, [r7, #14]
 8014622:	2b01      	cmp	r3, #1
 8014624:	d921      	bls.n	801466a <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 8014626:	4b30      	ldr	r3, [pc, #192]	; (80146e8 <AutoLoadDat+0xf0>)
 8014628:	2200      	movs	r2, #0
 801462a:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 801462c:	4b2c      	ldr	r3, [pc, #176]	; (80146e0 <AutoLoadDat+0xe8>)
 801462e:	785b      	ldrb	r3, [r3, #1]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d107      	bne.n	8014644 <AutoLoadDat+0x4c>
 8014634:	4b2a      	ldr	r3, [pc, #168]	; (80146e0 <AutoLoadDat+0xe8>)
 8014636:	789b      	ldrb	r3, [r3, #2]
 8014638:	2b01      	cmp	r3, #1
 801463a:	d103      	bne.n	8014644 <AutoLoadDat+0x4c>
 801463c:	4b28      	ldr	r3, [pc, #160]	; (80146e0 <AutoLoadDat+0xe8>)
 801463e:	78db      	ldrb	r3, [r3, #3]
 8014640:	2b04      	cmp	r3, #4
 8014642:	d003      	beq.n	801464c <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 8014644:	4829      	ldr	r0, [pc, #164]	; (80146ec <AutoLoadDat+0xf4>)
 8014646:	f00e f993 	bl	8022970 <puts>
				return;
 801464a:	e046      	b.n	80146da <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 801464c:	4b28      	ldr	r3, [pc, #160]	; (80146f0 <AutoLoadDat+0xf8>)
 801464e:	4a29      	ldr	r2, [pc, #164]	; (80146f4 <AutoLoadDat+0xfc>)
 8014650:	601a      	str	r2, [r3, #0]
			saveConfig();
 8014652:	f000 f85b 	bl	801470c <saveConfig>
			gucFlagCheck =1;
 8014656:	4b28      	ldr	r3, [pc, #160]	; (80146f8 <AutoLoadDat+0x100>)
 8014658:	2201      	movs	r2, #1
 801465a:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 801465c:	4b27      	ldr	r3, [pc, #156]	; (80146fc <AutoLoadDat+0x104>)
 801465e:	2201      	movs	r2, #1
 8014660:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 8014662:	4827      	ldr	r0, [pc, #156]	; (8014700 <AutoLoadDat+0x108>)
 8014664:	f00e f984 	bl	8022970 <puts>
			break;
 8014668:	e037      	b.n	80146da <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 801466a:	7bbb      	ldrb	r3, [r7, #14]
 801466c:	2b01      	cmp	r3, #1
 801466e:	d11b      	bne.n	80146a8 <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 8014670:	7bfb      	ldrb	r3, [r7, #15]
 8014672:	2b03      	cmp	r3, #3
 8014674:	d109      	bne.n	801468a <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 8014676:	4b1c      	ldr	r3, [pc, #112]	; (80146e8 <AutoLoadDat+0xf0>)
 8014678:	2200      	movs	r2, #0
 801467a:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 801467c:	79fb      	ldrb	r3, [r7, #7]
 801467e:	2203      	movs	r2, #3
 8014680:	2101      	movs	r1, #1
 8014682:	4618      	mov	r0, r3
 8014684:	f7f6 fc9a 	bl	800afbc <SendAck>
				break;
 8014688:	e027      	b.n	80146da <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 801468a:	79fb      	ldrb	r3, [r7, #7]
 801468c:	2202      	movs	r2, #2
 801468e:	2101      	movs	r1, #1
 8014690:	4618      	mov	r0, r3
 8014692:	f7f6 fc93 	bl	800afbc <SendAck>
			gucReqstCurTim = HAL_GetTick();
 8014696:	f001 f8c5 	bl	8015824 <HAL_GetTick>
 801469a:	4603      	mov	r3, r0
 801469c:	4a19      	ldr	r2, [pc, #100]	; (8014704 <AutoLoadDat+0x10c>)
 801469e:	6013      	str	r3, [r2, #0]
			AckCount++;
 80146a0:	7bfb      	ldrb	r3, [r7, #15]
 80146a2:	3301      	adds	r3, #1
 80146a4:	73fb      	strb	r3, [r7, #15]
 80146a6:	e7ae      	b.n	8014606 <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 80146a8:	f001 f8bc 	bl	8015824 <HAL_GetTick>
 80146ac:	4602      	mov	r2, r0
 80146ae:	4b15      	ldr	r3, [pc, #84]	; (8014704 <AutoLoadDat+0x10c>)
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	1ad3      	subs	r3, r2, r3
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	bfb8      	it	lt
 80146b8:	425b      	neglt	r3, r3
 80146ba:	f247 5230 	movw	r2, #30000	; 0x7530
 80146be:	4293      	cmp	r3, r2
 80146c0:	dda1      	ble.n	8014606 <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 80146c2:	4b09      	ldr	r3, [pc, #36]	; (80146e8 <AutoLoadDat+0xf0>)
 80146c4:	2200      	movs	r2, #0
 80146c6:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 80146c8:	480f      	ldr	r0, [pc, #60]	; (8014708 <AutoLoadDat+0x110>)
 80146ca:	f00e f951 	bl	8022970 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 80146ce:	79fb      	ldrb	r3, [r7, #7]
 80146d0:	2205      	movs	r2, #5
 80146d2:	2101      	movs	r1, #1
 80146d4:	4618      	mov	r0, r3
 80146d6:	f7f6 fc71 	bl	800afbc <SendAck>
				break;
			}
		}
	}
}
 80146da:	3710      	adds	r7, #16
 80146dc:	46bd      	mov	sp, r7
 80146de:	bd80      	pop	{r7, pc}
 80146e0:	20000648 	.word	0x20000648
 80146e4:	2000a04c 	.word	0x2000a04c
 80146e8:	20000a4a 	.word	0x20000a4a
 80146ec:	0802734c 	.word	0x0802734c
 80146f0:	20000300 	.word	0x20000300
 80146f4:	2000064c 	.word	0x2000064c
 80146f8:	2000a06c 	.word	0x2000a06c
 80146fc:	2000a06d 	.word	0x2000a06d
 8014700:	08027364 	.word	0x08027364
 8014704:	20000a4c 	.word	0x20000a4c
 8014708:	08027374 	.word	0x08027374

0801470c <saveConfig>:

unsigned char saveConfig(void)
{
 801470c:	b580      	push	{r7, lr}
 801470e:	b084      	sub	sp, #16
 8014710:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8014712:	2300      	movs	r3, #0
 8014714:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 8014716:	4825      	ldr	r0, [pc, #148]	; (80147ac <saveConfig+0xa0>)
 8014718:	f00e f92a 	bl	8022970 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 801471c:	2300      	movs	r3, #0
 801471e:	60fb      	str	r3, [r7, #12]
 8014720:	e011      	b.n	8014746 <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	031b      	lsls	r3, r3, #12
 8014726:	4619      	mov	r1, r3
 8014728:	2001      	movs	r0, #1
 801472a:	f7ff fd2f 	bl	801418c <SPI_MemoryEraseBySector>
 801472e:	4603      	mov	r3, r0
 8014730:	2b00      	cmp	r3, #0
 8014732:	d005      	beq.n	8014740 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 8014734:	481e      	ldr	r0, [pc, #120]	; (80147b0 <saveConfig+0xa4>)
 8014736:	f004 fbdb 	bl	8018ef0 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 801473a:	481e      	ldr	r0, [pc, #120]	; (80147b4 <saveConfig+0xa8>)
 801473c:	f00e f918 	bl	8022970 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014740:	68fb      	ldr	r3, [r7, #12]
 8014742:	3301      	adds	r3, #1
 8014744:	60fb      	str	r3, [r7, #12]
 8014746:	68fb      	ldr	r3, [r7, #12]
 8014748:	2b05      	cmp	r3, #5
 801474a:	d9ea      	bls.n	8014722 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 801474c:	f240 3347 	movw	r3, #839	; 0x347
 8014750:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014756:	2300      	movs	r3, #0
 8014758:	60fb      	str	r3, [r7, #12]
 801475a:	e01d      	b.n	8014798 <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 801475c:	4814      	ldr	r0, [pc, #80]	; (80147b0 <saveConfig+0xa4>)
 801475e:	f004 fbc7 	bl	8018ef0 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 8014762:	68bb      	ldr	r3, [r7, #8]
 8014764:	2b1f      	cmp	r3, #31
 8014766:	d809      	bhi.n	801477c <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 8014768:	68bb      	ldr	r3, [r7, #8]
 801476a:	b29a      	uxth	r2, r3
 801476c:	68fb      	ldr	r3, [r7, #12]
 801476e:	4912      	ldr	r1, [pc, #72]	; (80147b8 <saveConfig+0xac>)
 8014770:	440b      	add	r3, r1
 8014772:	68f9      	ldr	r1, [r7, #12]
 8014774:	2001      	movs	r0, #1
 8014776:	f7ff fbeb 	bl	8013f50 <SPI_WriteInFlash>
 801477a:	e00a      	b.n	8014792 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 801477c:	68fb      	ldr	r3, [r7, #12]
 801477e:	4a0e      	ldr	r2, [pc, #56]	; (80147b8 <saveConfig+0xac>)
 8014780:	4413      	add	r3, r2
 8014782:	2220      	movs	r2, #32
 8014784:	68f9      	ldr	r1, [r7, #12]
 8014786:	2001      	movs	r0, #1
 8014788:	f7ff fbe2 	bl	8013f50 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 801478c:	68bb      	ldr	r3, [r7, #8]
 801478e:	3b20      	subs	r3, #32
 8014790:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	3320      	adds	r3, #32
 8014796:	60fb      	str	r3, [r7, #12]
 8014798:	68fa      	ldr	r2, [r7, #12]
 801479a:	687b      	ldr	r3, [r7, #4]
 801479c:	429a      	cmp	r2, r3
 801479e:	d3dd      	bcc.n	801475c <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 80147a0:	4806      	ldr	r0, [pc, #24]	; (80147bc <saveConfig+0xb0>)
 80147a2:	f00e f849 	bl	8022838 <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 80147a6:	f7ff faff 	bl	8013da8 <__NVIC_SystemReset>
 80147aa:	bf00      	nop
 80147ac:	08027390 	.word	0x08027390
 80147b0:	2000a04c 	.word	0x2000a04c
 80147b4:	0802739c 	.word	0x0802739c
 80147b8:	20000648 	.word	0x20000648
 80147bc:	080273b0 	.word	0x080273b0

080147c0 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 80147c4:	4b14      	ldr	r3, [pc, #80]	; (8014818 <Print_BuildDat_Details+0x58>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d022      	beq.n	8014812 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 80147cc:	4b13      	ldr	r3, [pc, #76]	; (801481c <Print_BuildDat_Details+0x5c>)
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	4618      	mov	r0, r3
 80147d2:	f7fa fa99 	bl	800ed08 <HAL_Elaps_Ticks>
 80147d6:	4603      	mov	r3, r0
 80147d8:	f242 720f 	movw	r2, #9999	; 0x270f
 80147dc:	4293      	cmp	r3, r2
 80147de:	d919      	bls.n	8014814 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 80147e0:	480f      	ldr	r0, [pc, #60]	; (8014820 <Print_BuildDat_Details+0x60>)
 80147e2:	f00e f8c5 	bl	8022970 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 80147e6:	490f      	ldr	r1, [pc, #60]	; (8014824 <Print_BuildDat_Details+0x64>)
 80147e8:	480f      	ldr	r0, [pc, #60]	; (8014828 <Print_BuildDat_Details+0x68>)
 80147ea:	f00e f825 	bl	8022838 <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 80147ee:	4b0f      	ldr	r3, [pc, #60]	; (801482c <Print_BuildDat_Details+0x6c>)
 80147f0:	881b      	ldrh	r3, [r3, #0]
 80147f2:	4619      	mov	r1, r3
 80147f4:	480e      	ldr	r0, [pc, #56]	; (8014830 <Print_BuildDat_Details+0x70>)
 80147f6:	f00e f81f 	bl	8022838 <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 80147fa:	4b0e      	ldr	r3, [pc, #56]	; (8014834 <Print_BuildDat_Details+0x74>)
 80147fc:	881b      	ldrh	r3, [r3, #0]
 80147fe:	4619      	mov	r1, r3
 8014800:	480d      	ldr	r0, [pc, #52]	; (8014838 <Print_BuildDat_Details+0x78>)
 8014802:	f00e f819 	bl	8022838 <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 8014806:	f001 f80d 	bl	8015824 <HAL_GetTick>
 801480a:	4603      	mov	r3, r0
 801480c:	4a03      	ldr	r2, [pc, #12]	; (801481c <Print_BuildDat_Details+0x5c>)
 801480e:	6013      	str	r3, [r2, #0]
 8014810:	e000      	b.n	8014814 <Print_BuildDat_Details+0x54>
		return;
 8014812:	bf00      	nop
	}
}
 8014814:	bd80      	pop	{r7, pc}
 8014816:	bf00      	nop
 8014818:	20000645 	.word	0x20000645
 801481c:	2000a0e8 	.word	0x2000a0e8
 8014820:	080273cc 	.word	0x080273cc
 8014824:	20000305 	.word	0x20000305
 8014828:	08027400 	.word	0x08027400
 801482c:	2000a082 	.word	0x2000a082
 8014830:	08027414 	.word	0x08027414
 8014834:	2000a080 	.word	0x2000a080
 8014838:	08027424 	.word	0x08027424

0801483c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 801483c:	b580      	push	{r7, lr}
 801483e:	b082      	sub	sp, #8
 8014840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8014842:	4b0f      	ldr	r3, [pc, #60]	; (8014880 <HAL_MspInit+0x44>)
 8014844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014846:	4a0e      	ldr	r2, [pc, #56]	; (8014880 <HAL_MspInit+0x44>)
 8014848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801484c:	6413      	str	r3, [r2, #64]	; 0x40
 801484e:	4b0c      	ldr	r3, [pc, #48]	; (8014880 <HAL_MspInit+0x44>)
 8014850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8014856:	607b      	str	r3, [r7, #4]
 8014858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801485a:	4b09      	ldr	r3, [pc, #36]	; (8014880 <HAL_MspInit+0x44>)
 801485c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801485e:	4a08      	ldr	r2, [pc, #32]	; (8014880 <HAL_MspInit+0x44>)
 8014860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8014864:	6453      	str	r3, [r2, #68]	; 0x44
 8014866:	4b06      	ldr	r3, [pc, #24]	; (8014880 <HAL_MspInit+0x44>)
 8014868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801486a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801486e:	603b      	str	r3, [r7, #0]
 8014870:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8014872:	2004      	movs	r0, #4
 8014874:	f001 ffac 	bl	80167d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8014878:	bf00      	nop
 801487a:	3708      	adds	r7, #8
 801487c:	46bd      	mov	sp, r7
 801487e:	bd80      	pop	{r7, pc}
 8014880:	40023800 	.word	0x40023800

08014884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8014884:	b480      	push	{r7}
 8014886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8014888:	e7fe      	b.n	8014888 <NMI_Handler+0x4>

0801488a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 801488a:	b480      	push	{r7}
 801488c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 801488e:	e7fe      	b.n	801488e <HardFault_Handler+0x4>

08014890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014890:	b480      	push	{r7}
 8014892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014894:	e7fe      	b.n	8014894 <MemManage_Handler+0x4>

08014896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8014896:	b480      	push	{r7}
 8014898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801489a:	e7fe      	b.n	801489a <BusFault_Handler+0x4>

0801489c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801489c:	b480      	push	{r7}
 801489e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80148a0:	e7fe      	b.n	80148a0 <UsageFault_Handler+0x4>

080148a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80148a2:	b480      	push	{r7}
 80148a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80148a6:	bf00      	nop
 80148a8:	46bd      	mov	sp, r7
 80148aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ae:	4770      	bx	lr

080148b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80148b0:	b480      	push	{r7}
 80148b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80148b4:	bf00      	nop
 80148b6:	46bd      	mov	sp, r7
 80148b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148bc:	4770      	bx	lr

080148be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80148be:	b480      	push	{r7}
 80148c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80148c2:	bf00      	nop
 80148c4:	46bd      	mov	sp, r7
 80148c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148ca:	4770      	bx	lr

080148cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80148cc:	b580      	push	{r7, lr}
 80148ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80148d0:	f000 ff94 	bl	80157fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80148d4:	bf00      	nop
 80148d6:	bd80      	pop	{r7, pc}

080148d8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80148d8:	b580      	push	{r7, lr}
 80148da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 80148dc:	2001      	movs	r0, #1
 80148de:	f003 fca5 	bl	801822c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80148e2:	bf00      	nop
 80148e4:	bd80      	pop	{r7, pc}

080148e6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80148e6:	b580      	push	{r7, lr}
 80148e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 80148ea:	2002      	movs	r0, #2
 80148ec:	f003 fc9e 	bl	801822c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80148f0:	bf00      	nop
 80148f2:	bd80      	pop	{r7, pc}

080148f4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80148f4:	b580      	push	{r7, lr}
 80148f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80148f8:	4802      	ldr	r0, [pc, #8]	; (8014904 <TIM4_IRQHandler+0x10>)
 80148fa:	f006 fbbb 	bl	801b074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80148fe:	bf00      	nop
 8014900:	bd80      	pop	{r7, pc}
 8014902:	bf00      	nop
 8014904:	2000a0f0 	.word	0x2000a0f0

08014908 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8014908:	b580      	push	{r7, lr}
 801490a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 801490c:	4802      	ldr	r0, [pc, #8]	; (8014918 <USART1_IRQHandler+0x10>)
 801490e:	f006 fdd5 	bl	801b4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8014912:	bf00      	nop
 8014914:	bd80      	pop	{r7, pc}
 8014916:	bf00      	nop
 8014918:	2000c024 	.word	0x2000c024

0801491c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 801491c:	b580      	push	{r7, lr}
 801491e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014920:	4802      	ldr	r0, [pc, #8]	; (801492c <TIM5_IRQHandler+0x10>)
 8014922:	f006 fba7 	bl	801b074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8014926:	bf00      	nop
 8014928:	bd80      	pop	{r7, pc}
 801492a:	bf00      	nop
 801492c:	2000a1ac 	.word	0x2000a1ac

08014930 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8014930:	b580      	push	{r7, lr}
 8014932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8014934:	4802      	ldr	r0, [pc, #8]	; (8014940 <UART4_IRQHandler+0x10>)
 8014936:	f006 fdc1 	bl	801b4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 801493a:	bf00      	nop
 801493c:	bd80      	pop	{r7, pc}
 801493e:	bf00      	nop
 8014940:	2000bdfc 	.word	0x2000bdfc

08014944 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8014944:	b580      	push	{r7, lr}
 8014946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8014948:	4802      	ldr	r0, [pc, #8]	; (8014954 <UART5_IRQHandler+0x10>)
 801494a:	f006 fdb7 	bl	801b4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 801494e:	bf00      	nop
 8014950:	bd80      	pop	{r7, pc}
 8014952:	bf00      	nop
 8014954:	2000beb4 	.word	0x2000beb4

08014958 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8014958:	b580      	push	{r7, lr}
 801495a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 801495c:	4802      	ldr	r0, [pc, #8]	; (8014968 <TIM6_DAC_IRQHandler+0x10>)
 801495e:	f006 fb89 	bl	801b074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8014962:	bf00      	nop
 8014964:	bd80      	pop	{r7, pc}
 8014966:	bf00      	nop
 8014968:	2000a268 	.word	0x2000a268

0801496c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 801496c:	b580      	push	{r7, lr}
 801496e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8014970:	4802      	ldr	r0, [pc, #8]	; (801497c <TIM7_IRQHandler+0x10>)
 8014972:	f006 fb7f 	bl	801b074 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8014976:	bf00      	nop
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	2000a324 	.word	0x2000a324

08014980 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8014984:	4802      	ldr	r0, [pc, #8]	; (8014990 <ETH_IRQHandler+0x10>)
 8014986:	f002 fb73 	bl	8017070 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 801498a:	bf00      	nop
 801498c:	bd80      	pop	{r7, pc}
 801498e:	bf00      	nop
 8014990:	20010a38 	.word	0x20010a38

08014994 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8014994:	b580      	push	{r7, lr}
 8014996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014998:	4802      	ldr	r0, [pc, #8]	; (80149a4 <CAN2_RX0_IRQHandler+0x10>)
 801499a:	f001 fc15 	bl	80161c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 801499e:	bf00      	nop
 80149a0:	bd80      	pop	{r7, pc}
 80149a2:	bf00      	nop
 80149a4:	20009ec8 	.word	0x20009ec8

080149a8 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80149a8:	b580      	push	{r7, lr}
 80149aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80149ac:	4802      	ldr	r0, [pc, #8]	; (80149b8 <CAN2_RX1_IRQHandler+0x10>)
 80149ae:	f001 fc0b 	bl	80161c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80149b2:	bf00      	nop
 80149b4:	bd80      	pop	{r7, pc}
 80149b6:	bf00      	nop
 80149b8:	20009ec8 	.word	0x20009ec8

080149bc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80149c0:	4802      	ldr	r0, [pc, #8]	; (80149cc <UART7_IRQHandler+0x10>)
 80149c2:	f006 fd7b 	bl	801b4bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80149c6:	bf00      	nop
 80149c8:	bd80      	pop	{r7, pc}
 80149ca:	bf00      	nop
 80149cc:	2000bf6c 	.word	0x2000bf6c

080149d0 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 80149d0:	b580      	push	{r7, lr}
 80149d2:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80149d4:	4802      	ldr	r0, [pc, #8]	; (80149e0 <CAN3_RX0_IRQHandler+0x10>)
 80149d6:	f001 fbf7 	bl	80161c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 80149da:	bf00      	nop
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	20009f2c 	.word	0x20009f2c

080149e4 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 80149e4:	b580      	push	{r7, lr}
 80149e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 80149e8:	4802      	ldr	r0, [pc, #8]	; (80149f4 <CAN3_RX1_IRQHandler+0x10>)
 80149ea:	f001 fbed 	bl	80161c8 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 80149ee:	bf00      	nop
 80149f0:	bd80      	pop	{r7, pc}
 80149f2:	bf00      	nop
 80149f4:	20009f2c 	.word	0x20009f2c

080149f8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80149f8:	b480      	push	{r7}
 80149fa:	af00      	add	r7, sp, #0
	return 1;
 80149fc:	2301      	movs	r3, #1
}
 80149fe:	4618      	mov	r0, r3
 8014a00:	46bd      	mov	sp, r7
 8014a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a06:	4770      	bx	lr

08014a08 <_kill>:

int _kill(int pid, int sig)
{
 8014a08:	b480      	push	{r7}
 8014a0a:	b083      	sub	sp, #12
 8014a0c:	af00      	add	r7, sp, #0
 8014a0e:	6078      	str	r0, [r7, #4]
 8014a10:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8014a12:	4b05      	ldr	r3, [pc, #20]	; (8014a28 <_kill+0x20>)
 8014a14:	2216      	movs	r2, #22
 8014a16:	601a      	str	r2, [r3, #0]
	return -1;
 8014a18:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014a1c:	4618      	mov	r0, r3
 8014a1e:	370c      	adds	r7, #12
 8014a20:	46bd      	mov	sp, r7
 8014a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a26:	4770      	bx	lr
 8014a28:	2001467c 	.word	0x2001467c

08014a2c <_exit>:

void _exit (int status)
{
 8014a2c:	b580      	push	{r7, lr}
 8014a2e:	b082      	sub	sp, #8
 8014a30:	af00      	add	r7, sp, #0
 8014a32:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8014a34:	f04f 31ff 	mov.w	r1, #4294967295
 8014a38:	6878      	ldr	r0, [r7, #4]
 8014a3a:	f7ff ffe5 	bl	8014a08 <_kill>
	while (1) {}		/* Make sure we hang here */
 8014a3e:	e7fe      	b.n	8014a3e <_exit+0x12>

08014a40 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8014a40:	b580      	push	{r7, lr}
 8014a42:	b086      	sub	sp, #24
 8014a44:	af00      	add	r7, sp, #0
 8014a46:	60f8      	str	r0, [r7, #12]
 8014a48:	60b9      	str	r1, [r7, #8]
 8014a4a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014a4c:	2300      	movs	r3, #0
 8014a4e:	617b      	str	r3, [r7, #20]
 8014a50:	e00a      	b.n	8014a68 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8014a52:	f3af 8000 	nop.w
 8014a56:	4601      	mov	r1, r0
 8014a58:	68bb      	ldr	r3, [r7, #8]
 8014a5a:	1c5a      	adds	r2, r3, #1
 8014a5c:	60ba      	str	r2, [r7, #8]
 8014a5e:	b2ca      	uxtb	r2, r1
 8014a60:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014a62:	697b      	ldr	r3, [r7, #20]
 8014a64:	3301      	adds	r3, #1
 8014a66:	617b      	str	r3, [r7, #20]
 8014a68:	697a      	ldr	r2, [r7, #20]
 8014a6a:	687b      	ldr	r3, [r7, #4]
 8014a6c:	429a      	cmp	r2, r3
 8014a6e:	dbf0      	blt.n	8014a52 <_read+0x12>
	}

return len;
 8014a70:	687b      	ldr	r3, [r7, #4]
}
 8014a72:	4618      	mov	r0, r3
 8014a74:	3718      	adds	r7, #24
 8014a76:	46bd      	mov	sp, r7
 8014a78:	bd80      	pop	{r7, pc}

08014a7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8014a7a:	b580      	push	{r7, lr}
 8014a7c:	b086      	sub	sp, #24
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	60f8      	str	r0, [r7, #12]
 8014a82:	60b9      	str	r1, [r7, #8]
 8014a84:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014a86:	2300      	movs	r3, #0
 8014a88:	617b      	str	r3, [r7, #20]
 8014a8a:	e009      	b.n	8014aa0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014a8c:	68bb      	ldr	r3, [r7, #8]
 8014a8e:	1c5a      	adds	r2, r3, #1
 8014a90:	60ba      	str	r2, [r7, #8]
 8014a92:	781b      	ldrb	r3, [r3, #0]
 8014a94:	4618      	mov	r0, r3
 8014a96:	f7eb fffd 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	3301      	adds	r3, #1
 8014a9e:	617b      	str	r3, [r7, #20]
 8014aa0:	697a      	ldr	r2, [r7, #20]
 8014aa2:	687b      	ldr	r3, [r7, #4]
 8014aa4:	429a      	cmp	r2, r3
 8014aa6:	dbf1      	blt.n	8014a8c <_write+0x12>
	}
	return len;
 8014aa8:	687b      	ldr	r3, [r7, #4]
}
 8014aaa:	4618      	mov	r0, r3
 8014aac:	3718      	adds	r7, #24
 8014aae:	46bd      	mov	sp, r7
 8014ab0:	bd80      	pop	{r7, pc}

08014ab2 <_close>:

int _close(int file)
{
 8014ab2:	b480      	push	{r7}
 8014ab4:	b083      	sub	sp, #12
 8014ab6:	af00      	add	r7, sp, #0
 8014ab8:	6078      	str	r0, [r7, #4]
	return -1;
 8014aba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014abe:	4618      	mov	r0, r3
 8014ac0:	370c      	adds	r7, #12
 8014ac2:	46bd      	mov	sp, r7
 8014ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ac8:	4770      	bx	lr

08014aca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8014aca:	b480      	push	{r7}
 8014acc:	b083      	sub	sp, #12
 8014ace:	af00      	add	r7, sp, #0
 8014ad0:	6078      	str	r0, [r7, #4]
 8014ad2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014ad4:	683b      	ldr	r3, [r7, #0]
 8014ad6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8014ada:	605a      	str	r2, [r3, #4]
	return 0;
 8014adc:	2300      	movs	r3, #0
}
 8014ade:	4618      	mov	r0, r3
 8014ae0:	370c      	adds	r7, #12
 8014ae2:	46bd      	mov	sp, r7
 8014ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae8:	4770      	bx	lr

08014aea <_isatty>:

int _isatty(int file)
{
 8014aea:	b480      	push	{r7}
 8014aec:	b083      	sub	sp, #12
 8014aee:	af00      	add	r7, sp, #0
 8014af0:	6078      	str	r0, [r7, #4]
	return 1;
 8014af2:	2301      	movs	r3, #1
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	370c      	adds	r7, #12
 8014af8:	46bd      	mov	sp, r7
 8014afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afe:	4770      	bx	lr

08014b00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014b00:	b480      	push	{r7}
 8014b02:	b085      	sub	sp, #20
 8014b04:	af00      	add	r7, sp, #0
 8014b06:	60f8      	str	r0, [r7, #12]
 8014b08:	60b9      	str	r1, [r7, #8]
 8014b0a:	607a      	str	r2, [r7, #4]
	return 0;
 8014b0c:	2300      	movs	r3, #0
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	3714      	adds	r7, #20
 8014b12:	46bd      	mov	sp, r7
 8014b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b18:	4770      	bx	lr
	...

08014b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b087      	sub	sp, #28
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014b24:	4a14      	ldr	r2, [pc, #80]	; (8014b78 <_sbrk+0x5c>)
 8014b26:	4b15      	ldr	r3, [pc, #84]	; (8014b7c <_sbrk+0x60>)
 8014b28:	1ad3      	subs	r3, r2, r3
 8014b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8014b2c:	697b      	ldr	r3, [r7, #20]
 8014b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8014b30:	4b13      	ldr	r3, [pc, #76]	; (8014b80 <_sbrk+0x64>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	2b00      	cmp	r3, #0
 8014b36:	d102      	bne.n	8014b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8014b38:	4b11      	ldr	r3, [pc, #68]	; (8014b80 <_sbrk+0x64>)
 8014b3a:	4a12      	ldr	r2, [pc, #72]	; (8014b84 <_sbrk+0x68>)
 8014b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8014b3e:	4b10      	ldr	r3, [pc, #64]	; (8014b80 <_sbrk+0x64>)
 8014b40:	681a      	ldr	r2, [r3, #0]
 8014b42:	687b      	ldr	r3, [r7, #4]
 8014b44:	4413      	add	r3, r2
 8014b46:	693a      	ldr	r2, [r7, #16]
 8014b48:	429a      	cmp	r2, r3
 8014b4a:	d205      	bcs.n	8014b58 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8014b4c:	4b0e      	ldr	r3, [pc, #56]	; (8014b88 <_sbrk+0x6c>)
 8014b4e:	220c      	movs	r2, #12
 8014b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8014b52:	f04f 33ff 	mov.w	r3, #4294967295
 8014b56:	e009      	b.n	8014b6c <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8014b58:	4b09      	ldr	r3, [pc, #36]	; (8014b80 <_sbrk+0x64>)
 8014b5a:	681b      	ldr	r3, [r3, #0]
 8014b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8014b5e:	4b08      	ldr	r3, [pc, #32]	; (8014b80 <_sbrk+0x64>)
 8014b60:	681a      	ldr	r2, [r3, #0]
 8014b62:	687b      	ldr	r3, [r7, #4]
 8014b64:	4413      	add	r3, r2
 8014b66:	4a06      	ldr	r2, [pc, #24]	; (8014b80 <_sbrk+0x64>)
 8014b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
}
 8014b6c:	4618      	mov	r0, r3
 8014b6e:	371c      	adds	r7, #28
 8014b70:	46bd      	mov	sp, r7
 8014b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b76:	4770      	bx	lr
 8014b78:	20080000 	.word	0x20080000
 8014b7c:	00000400 	.word	0x00000400
 8014b80:	2000a0ec 	.word	0x2000a0ec
 8014b84:	20014688 	.word	0x20014688
 8014b88:	2001467c 	.word	0x2001467c

08014b8c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014b8c:	b480      	push	{r7}
 8014b8e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014b90:	4b06      	ldr	r3, [pc, #24]	; (8014bac <SystemInit+0x20>)
 8014b92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014b96:	4a05      	ldr	r2, [pc, #20]	; (8014bac <SystemInit+0x20>)
 8014b98:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014b9c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014ba0:	bf00      	nop
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba8:	4770      	bx	lr
 8014baa:	bf00      	nop
 8014bac:	e000ed00 	.word	0xe000ed00

08014bb0 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014bb4:	4b16      	ldr	r3, [pc, #88]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bb6:	4a17      	ldr	r2, [pc, #92]	; (8014c14 <MX_USART1_UART_Init+0x64>)
 8014bb8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8014bba:	4b15      	ldr	r3, [pc, #84]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bbc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014bc0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014bc2:	4b13      	ldr	r3, [pc, #76]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bc4:	2200      	movs	r2, #0
 8014bc6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8014bc8:	4b11      	ldr	r3, [pc, #68]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bca:	2200      	movs	r2, #0
 8014bcc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8014bce:	4b10      	ldr	r3, [pc, #64]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014bd4:	4b0e      	ldr	r3, [pc, #56]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bd6:	220c      	movs	r2, #12
 8014bd8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014bda:	4b0d      	ldr	r3, [pc, #52]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bdc:	2200      	movs	r2, #0
 8014bde:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014be0:	4b0b      	ldr	r3, [pc, #44]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014be2:	2200      	movs	r2, #0
 8014be4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014be6:	4b0a      	ldr	r3, [pc, #40]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014be8:	2200      	movs	r2, #0
 8014bea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014bec:	4b08      	ldr	r3, [pc, #32]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bee:	2200      	movs	r2, #0
 8014bf0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8014bf2:	4807      	ldr	r0, [pc, #28]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014bf4:	f006 fb80 	bl	801b2f8 <HAL_UART_Init>
 8014bf8:	4603      	mov	r3, r0
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d001      	beq.n	8014c02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8014bfe:	f7ff f885 	bl	8013d0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014c02:	2280      	movs	r2, #128	; 0x80
 8014c04:	4904      	ldr	r1, [pc, #16]	; (8014c18 <MX_USART1_UART_Init+0x68>)
 8014c06:	4802      	ldr	r0, [pc, #8]	; (8014c10 <MX_USART1_UART_Init+0x60>)
 8014c08:	f007 fee2 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014c0c:	bf00      	nop
 8014c0e:	bd80      	pop	{r7, pc}
 8014c10:	2000c024 	.word	0x2000c024
 8014c14:	40011000 	.word	0x40011000
 8014c18:	2000bbfc 	.word	0x2000bbfc

08014c1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014c1c:	b580      	push	{r7, lr}
 8014c1e:	b0b4      	sub	sp, #208	; 0xd0
 8014c20:	af00      	add	r7, sp, #0
 8014c22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014c24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014c28:	2200      	movs	r2, #0
 8014c2a:	601a      	str	r2, [r3, #0]
 8014c2c:	605a      	str	r2, [r3, #4]
 8014c2e:	609a      	str	r2, [r3, #8]
 8014c30:	60da      	str	r2, [r3, #12]
 8014c32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8014c34:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c38:	2290      	movs	r2, #144	; 0x90
 8014c3a:	2100      	movs	r1, #0
 8014c3c:	4618      	mov	r0, r3
 8014c3e:	f00d fd13 	bl	8022668 <memset>
  if(uartHandle->Instance==UART4)
 8014c42:	687b      	ldr	r3, [r7, #4]
 8014c44:	681b      	ldr	r3, [r3, #0]
 8014c46:	4aa7      	ldr	r2, [pc, #668]	; (8014ee4 <HAL_UART_MspInit+0x2c8>)
 8014c48:	4293      	cmp	r3, r2
 8014c4a:	d145      	bne.n	8014cd8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8014c4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014c50:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8014c52:	2300      	movs	r3, #0
 8014c54:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014c5a:	4618      	mov	r0, r3
 8014c5c:	f004 fdec 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 8014c60:	4603      	mov	r3, r0
 8014c62:	2b00      	cmp	r3, #0
 8014c64:	d001      	beq.n	8014c6a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8014c66:	f7ff f851 	bl	8013d0c <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8014c6a:	4b9f      	ldr	r3, [pc, #636]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c6e:	4a9e      	ldr	r2, [pc, #632]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014c70:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014c74:	6413      	str	r3, [r2, #64]	; 0x40
 8014c76:	4b9c      	ldr	r3, [pc, #624]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014c7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8014c7e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014c80:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 8014c82:	4b99      	ldr	r3, [pc, #612]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c86:	4a98      	ldr	r2, [pc, #608]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014c8c:	6313      	str	r3, [r2, #48]	; 0x30
 8014c8e:	4b96      	ldr	r3, [pc, #600]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014c92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8014c96:	627b      	str	r3, [r7, #36]	; 0x24
 8014c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 8014c9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014c9e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ca2:	2302      	movs	r3, #2
 8014ca4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014ca8:	2300      	movs	r3, #0
 8014caa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014cae:	2303      	movs	r3, #3
 8014cb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8014cb4:	2308      	movs	r3, #8
 8014cb6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8014cba:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014cbe:	4619      	mov	r1, r3
 8014cc0:	488a      	ldr	r0, [pc, #552]	; (8014eec <HAL_UART_MspInit+0x2d0>)
 8014cc2:	f003 f8bb 	bl	8017e3c <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8014cc6:	2200      	movs	r2, #0
 8014cc8:	2105      	movs	r1, #5
 8014cca:	2034      	movs	r0, #52	; 0x34
 8014ccc:	f001 fd8b 	bl	80167e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8014cd0:	2034      	movs	r0, #52	; 0x34
 8014cd2:	f001 fda4 	bl	801681e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8014cd6:	e100      	b.n	8014eda <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 8014cd8:	687b      	ldr	r3, [r7, #4]
 8014cda:	681b      	ldr	r3, [r3, #0]
 8014cdc:	4a84      	ldr	r2, [pc, #528]	; (8014ef0 <HAL_UART_MspInit+0x2d4>)
 8014cde:	4293      	cmp	r3, r2
 8014ce0:	d167      	bne.n	8014db2 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8014ce2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8014ce8:	2300      	movs	r3, #0
 8014cea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014cee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f004 fda0 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 8014cf8:	4603      	mov	r3, r0
 8014cfa:	2b00      	cmp	r3, #0
 8014cfc:	d001      	beq.n	8014d02 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8014cfe:	f7ff f805 	bl	8013d0c <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8014d02:	4b79      	ldr	r3, [pc, #484]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d06:	4a78      	ldr	r2, [pc, #480]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8014d0e:	4b76      	ldr	r3, [pc, #472]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014d12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8014d16:	623b      	str	r3, [r7, #32]
 8014d18:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8014d1a:	4b73      	ldr	r3, [pc, #460]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d1e:	4a72      	ldr	r2, [pc, #456]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d20:	f043 0308 	orr.w	r3, r3, #8
 8014d24:	6313      	str	r3, [r2, #48]	; 0x30
 8014d26:	4b70      	ldr	r3, [pc, #448]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d2a:	f003 0308 	and.w	r3, r3, #8
 8014d2e:	61fb      	str	r3, [r7, #28]
 8014d30:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8014d32:	4b6d      	ldr	r3, [pc, #436]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d36:	4a6c      	ldr	r2, [pc, #432]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d38:	f043 0302 	orr.w	r3, r3, #2
 8014d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8014d3e:	4b6a      	ldr	r3, [pc, #424]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014d42:	f003 0302 	and.w	r3, r3, #2
 8014d46:	61bb      	str	r3, [r7, #24]
 8014d48:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 8014d4a:	2304      	movs	r3, #4
 8014d4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d50:	2302      	movs	r3, #2
 8014d52:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d56:	2300      	movs	r3, #0
 8014d58:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d5c:	2303      	movs	r3, #3
 8014d5e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8014d62:	2308      	movs	r3, #8
 8014d64:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 8014d68:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014d6c:	4619      	mov	r1, r3
 8014d6e:	4861      	ldr	r0, [pc, #388]	; (8014ef4 <HAL_UART_MspInit+0x2d8>)
 8014d70:	f003 f864 	bl	8017e3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 8014d74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014d7c:	2302      	movs	r3, #2
 8014d7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014d82:	2300      	movs	r3, #0
 8014d84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014d88:	2303      	movs	r3, #3
 8014d8a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8014d8e:	2307      	movs	r3, #7
 8014d90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8014d94:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014d98:	4619      	mov	r1, r3
 8014d9a:	4857      	ldr	r0, [pc, #348]	; (8014ef8 <HAL_UART_MspInit+0x2dc>)
 8014d9c:	f003 f84e 	bl	8017e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8014da0:	2200      	movs	r2, #0
 8014da2:	2105      	movs	r1, #5
 8014da4:	2035      	movs	r0, #53	; 0x35
 8014da6:	f001 fd1e 	bl	80167e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8014daa:	2035      	movs	r0, #53	; 0x35
 8014dac:	f001 fd37 	bl	801681e <HAL_NVIC_EnableIRQ>
}
 8014db0:	e093      	b.n	8014eda <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8014db2:	687b      	ldr	r3, [r7, #4]
 8014db4:	681b      	ldr	r3, [r3, #0]
 8014db6:	4a51      	ldr	r2, [pc, #324]	; (8014efc <HAL_UART_MspInit+0x2e0>)
 8014db8:	4293      	cmp	r3, r2
 8014dba:	d145      	bne.n	8014e48 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8014dbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8014dc2:	2300      	movs	r3, #0
 8014dc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f004 fd33 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 8014dd2:	4603      	mov	r3, r0
 8014dd4:	2b00      	cmp	r3, #0
 8014dd6:	d001      	beq.n	8014ddc <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 8014dd8:	f7fe ff98 	bl	8013d0c <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8014ddc:	4b42      	ldr	r3, [pc, #264]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014de0:	4a41      	ldr	r2, [pc, #260]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014de6:	6413      	str	r3, [r2, #64]	; 0x40
 8014de8:	4b3f      	ldr	r3, [pc, #252]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014dec:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014df0:	617b      	str	r3, [r7, #20]
 8014df2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014df4:	4b3c      	ldr	r3, [pc, #240]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014df6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014df8:	4a3b      	ldr	r2, [pc, #236]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014dfa:	f043 0320 	orr.w	r3, r3, #32
 8014dfe:	6313      	str	r3, [r2, #48]	; 0x30
 8014e00:	4b39      	ldr	r3, [pc, #228]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e04:	f003 0320 	and.w	r3, r3, #32
 8014e08:	613b      	str	r3, [r7, #16]
 8014e0a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8014e0c:	23c0      	movs	r3, #192	; 0xc0
 8014e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014e12:	2302      	movs	r3, #2
 8014e14:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014e18:	2300      	movs	r3, #0
 8014e1a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014e1e:	2303      	movs	r3, #3
 8014e20:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8014e24:	2308      	movs	r3, #8
 8014e26:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8014e2a:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014e2e:	4619      	mov	r1, r3
 8014e30:	4833      	ldr	r0, [pc, #204]	; (8014f00 <HAL_UART_MspInit+0x2e4>)
 8014e32:	f003 f803 	bl	8017e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8014e36:	2200      	movs	r2, #0
 8014e38:	2105      	movs	r1, #5
 8014e3a:	2052      	movs	r0, #82	; 0x52
 8014e3c:	f001 fcd3 	bl	80167e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8014e40:	2052      	movs	r0, #82	; 0x52
 8014e42:	f001 fcec 	bl	801681e <HAL_NVIC_EnableIRQ>
}
 8014e46:	e048      	b.n	8014eda <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	4a2d      	ldr	r2, [pc, #180]	; (8014f04 <HAL_UART_MspInit+0x2e8>)
 8014e4e:	4293      	cmp	r3, r2
 8014e50:	d143      	bne.n	8014eda <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8014e52:	2340      	movs	r3, #64	; 0x40
 8014e54:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8014e56:	2300      	movs	r3, #0
 8014e58:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014e5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014e5e:	4618      	mov	r0, r3
 8014e60:	f004 fcea 	bl	8019838 <HAL_RCCEx_PeriphCLKConfig>
 8014e64:	4603      	mov	r3, r0
 8014e66:	2b00      	cmp	r3, #0
 8014e68:	d001      	beq.n	8014e6e <HAL_UART_MspInit+0x252>
      Error_Handler();
 8014e6a:	f7fe ff4f 	bl	8013d0c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8014e6e:	4b1e      	ldr	r3, [pc, #120]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e72:	4a1d      	ldr	r2, [pc, #116]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e74:	f043 0310 	orr.w	r3, r3, #16
 8014e78:	6453      	str	r3, [r2, #68]	; 0x44
 8014e7a:	4b1b      	ldr	r3, [pc, #108]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e7e:	f003 0310 	and.w	r3, r3, #16
 8014e82:	60fb      	str	r3, [r7, #12]
 8014e84:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8014e86:	4b18      	ldr	r3, [pc, #96]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e8a:	4a17      	ldr	r2, [pc, #92]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e8c:	f043 0301 	orr.w	r3, r3, #1
 8014e90:	6313      	str	r3, [r2, #48]	; 0x30
 8014e92:	4b15      	ldr	r3, [pc, #84]	; (8014ee8 <HAL_UART_MspInit+0x2cc>)
 8014e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014e96:	f003 0301 	and.w	r3, r3, #1
 8014e9a:	60bb      	str	r3, [r7, #8]
 8014e9c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8014e9e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014ea2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014ea6:	2302      	movs	r3, #2
 8014ea8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014eac:	2300      	movs	r3, #0
 8014eae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014eb2:	2303      	movs	r3, #3
 8014eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8014eb8:	2307      	movs	r3, #7
 8014eba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014ebe:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014ec2:	4619      	mov	r1, r3
 8014ec4:	4810      	ldr	r0, [pc, #64]	; (8014f08 <HAL_UART_MspInit+0x2ec>)
 8014ec6:	f002 ffb9 	bl	8017e3c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8014eca:	2200      	movs	r2, #0
 8014ecc:	2107      	movs	r1, #7
 8014ece:	2025      	movs	r0, #37	; 0x25
 8014ed0:	f001 fc89 	bl	80167e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014ed4:	2025      	movs	r0, #37	; 0x25
 8014ed6:	f001 fca2 	bl	801681e <HAL_NVIC_EnableIRQ>
}
 8014eda:	bf00      	nop
 8014edc:	37d0      	adds	r7, #208	; 0xd0
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	40004c00 	.word	0x40004c00
 8014ee8:	40023800 	.word	0x40023800
 8014eec:	40021c00 	.word	0x40021c00
 8014ef0:	40005000 	.word	0x40005000
 8014ef4:	40020c00 	.word	0x40020c00
 8014ef8:	40020400 	.word	0x40020400
 8014efc:	40007800 	.word	0x40007800
 8014f00:	40021400 	.word	0x40021400
 8014f04:	40011000 	.word	0x40011000
 8014f08:	40020000 	.word	0x40020000

08014f0c <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8014f0c:	b580      	push	{r7, lr}
 8014f0e:	b082      	sub	sp, #8
 8014f10:	af00      	add	r7, sp, #0
 8014f12:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8014f14:	4b17      	ldr	r3, [pc, #92]	; (8014f74 <UART4_Init+0x68>)
 8014f16:	4a18      	ldr	r2, [pc, #96]	; (8014f78 <UART4_Init+0x6c>)
 8014f18:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 8014f1a:	4a16      	ldr	r2, [pc, #88]	; (8014f74 <UART4_Init+0x68>)
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8014f20:	4b14      	ldr	r3, [pc, #80]	; (8014f74 <UART4_Init+0x68>)
 8014f22:	2200      	movs	r2, #0
 8014f24:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 8014f26:	4b13      	ldr	r3, [pc, #76]	; (8014f74 <UART4_Init+0x68>)
 8014f28:	2200      	movs	r2, #0
 8014f2a:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 8014f2c:	4b11      	ldr	r3, [pc, #68]	; (8014f74 <UART4_Init+0x68>)
 8014f2e:	2200      	movs	r2, #0
 8014f30:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 8014f32:	4b10      	ldr	r3, [pc, #64]	; (8014f74 <UART4_Init+0x68>)
 8014f34:	220c      	movs	r2, #12
 8014f36:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8014f38:	4b0e      	ldr	r3, [pc, #56]	; (8014f74 <UART4_Init+0x68>)
 8014f3a:	2200      	movs	r2, #0
 8014f3c:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8014f3e:	4b0d      	ldr	r3, [pc, #52]	; (8014f74 <UART4_Init+0x68>)
 8014f40:	2200      	movs	r2, #0
 8014f42:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8014f44:	4b0b      	ldr	r3, [pc, #44]	; (8014f74 <UART4_Init+0x68>)
 8014f46:	2200      	movs	r2, #0
 8014f48:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014f4a:	4b0a      	ldr	r3, [pc, #40]	; (8014f74 <UART4_Init+0x68>)
 8014f4c:	2200      	movs	r2, #0
 8014f4e:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 8014f50:	4808      	ldr	r0, [pc, #32]	; (8014f74 <UART4_Init+0x68>)
 8014f52:	f006 f9d1 	bl	801b2f8 <HAL_UART_Init>
 8014f56:	4603      	mov	r3, r0
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d001      	beq.n	8014f60 <UART4_Init+0x54>
	{
		Error_Handler();
 8014f5c:	f7fe fed6 	bl	8013d0c <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014f60:	2280      	movs	r2, #128	; 0x80
 8014f62:	4906      	ldr	r1, [pc, #24]	; (8014f7c <UART4_Init+0x70>)
 8014f64:	4803      	ldr	r0, [pc, #12]	; (8014f74 <UART4_Init+0x68>)
 8014f66:	f007 fd33 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 8014f6a:	bf00      	nop
 8014f6c:	3708      	adds	r7, #8
 8014f6e:	46bd      	mov	sp, r7
 8014f70:	bd80      	pop	{r7, pc}
 8014f72:	bf00      	nop
 8014f74:	2000bdfc 	.word	0x2000bdfc
 8014f78:	40004c00 	.word	0x40004c00
 8014f7c:	2000bd7c 	.word	0x2000bd7c

08014f80 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014f80:	b580      	push	{r7, lr}
 8014f82:	b084      	sub	sp, #16
 8014f84:	af00      	add	r7, sp, #0
 8014f86:	6078      	str	r0, [r7, #4]
 8014f88:	460b      	mov	r3, r1
 8014f8a:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8014f8c:	687b      	ldr	r3, [r7, #4]
 8014f8e:	681b      	ldr	r3, [r3, #0]
 8014f90:	4a60      	ldr	r2, [pc, #384]	; (8015114 <HAL_UARTEx_RxEventCallback+0x194>)
 8014f92:	4293      	cmp	r3, r2
 8014f94:	d129      	bne.n	8014fea <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014f96:	2280      	movs	r2, #128	; 0x80
 8014f98:	495f      	ldr	r1, [pc, #380]	; (8015118 <HAL_UARTEx_RxEventCallback+0x198>)
 8014f9a:	4860      	ldr	r0, [pc, #384]	; (801511c <HAL_UARTEx_RxEventCallback+0x19c>)
 8014f9c:	f007 fd18 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014fa0:	2300      	movs	r3, #0
 8014fa2:	81fb      	strh	r3, [r7, #14]
 8014fa4:	e017      	b.n	8014fd6 <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8014fa6:	89fa      	ldrh	r2, [r7, #14]
 8014fa8:	4b5d      	ldr	r3, [pc, #372]	; (8015120 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014faa:	881b      	ldrh	r3, [r3, #0]
 8014fac:	1c59      	adds	r1, r3, #1
 8014fae:	b288      	uxth	r0, r1
 8014fb0:	495b      	ldr	r1, [pc, #364]	; (8015120 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014fb2:	8008      	strh	r0, [r1, #0]
 8014fb4:	4619      	mov	r1, r3
 8014fb6:	4b58      	ldr	r3, [pc, #352]	; (8015118 <HAL_UARTEx_RxEventCallback+0x198>)
 8014fb8:	5c9a      	ldrb	r2, [r3, r2]
 8014fba:	4b59      	ldr	r3, [pc, #356]	; (8015120 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014fbc:	440b      	add	r3, r1
 8014fbe:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8014fc0:	4b57      	ldr	r3, [pc, #348]	; (8015120 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014fc2:	881b      	ldrh	r3, [r3, #0]
 8014fc4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014fc8:	d302      	bcc.n	8014fd0 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8014fca:	4b55      	ldr	r3, [pc, #340]	; (8015120 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014fcc:	2200      	movs	r2, #0
 8014fce:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8014fd0:	89fb      	ldrh	r3, [r7, #14]
 8014fd2:	3301      	adds	r3, #1
 8014fd4:	81fb      	strh	r3, [r7, #14]
 8014fd6:	89fa      	ldrh	r2, [r7, #14]
 8014fd8:	887b      	ldrh	r3, [r7, #2]
 8014fda:	429a      	cmp	r2, r3
 8014fdc:	d3e3      	bcc.n	8014fa6 <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8014fde:	f000 fc21 	bl	8015824 <HAL_GetTick>
 8014fe2:	4603      	mov	r3, r0
 8014fe4:	4a4f      	ldr	r2, [pc, #316]	; (8015124 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8014fe6:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8014fe8:	e090      	b.n	801510c <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	4a4e      	ldr	r2, [pc, #312]	; (8015128 <HAL_UARTEx_RxEventCallback+0x1a8>)
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d129      	bne.n	8015048 <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014ff4:	2280      	movs	r2, #128	; 0x80
 8014ff6:	494d      	ldr	r1, [pc, #308]	; (801512c <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014ff8:	484d      	ldr	r0, [pc, #308]	; (8015130 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8014ffa:	f007 fce9 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014ffe:	2300      	movs	r3, #0
 8015000:	81bb      	strh	r3, [r7, #12]
 8015002:	e01c      	b.n	801503e <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8015004:	89ba      	ldrh	r2, [r7, #12]
 8015006:	4b4b      	ldr	r3, [pc, #300]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015008:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 801500c:	1c59      	adds	r1, r3, #1
 801500e:	b288      	uxth	r0, r1
 8015010:	4948      	ldr	r1, [pc, #288]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015012:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8015016:	4619      	mov	r1, r3
 8015018:	4b44      	ldr	r3, [pc, #272]	; (801512c <HAL_UARTEx_RxEventCallback+0x1ac>)
 801501a:	5c9a      	ldrb	r2, [r3, r2]
 801501c:	4b45      	ldr	r3, [pc, #276]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801501e:	440b      	add	r3, r1
 8015020:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8015024:	4b43      	ldr	r3, [pc, #268]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015026:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 801502a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801502e:	d303      	bcc.n	8015038 <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8015030:	4b40      	ldr	r3, [pc, #256]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015032:	2200      	movs	r2, #0
 8015034:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8015038:	89bb      	ldrh	r3, [r7, #12]
 801503a:	3301      	adds	r3, #1
 801503c:	81bb      	strh	r3, [r7, #12]
 801503e:	89ba      	ldrh	r2, [r7, #12]
 8015040:	887b      	ldrh	r3, [r7, #2]
 8015042:	429a      	cmp	r2, r3
 8015044:	d3de      	bcc.n	8015004 <HAL_UARTEx_RxEventCallback+0x84>
}
 8015046:	e061      	b.n	801510c <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	4a3a      	ldr	r2, [pc, #232]	; (8015138 <HAL_UARTEx_RxEventCallback+0x1b8>)
 801504e:	4293      	cmp	r3, r2
 8015050:	d129      	bne.n	80150a6 <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015052:	2280      	movs	r2, #128	; 0x80
 8015054:	4939      	ldr	r1, [pc, #228]	; (801513c <HAL_UARTEx_RxEventCallback+0x1bc>)
 8015056:	483a      	ldr	r0, [pc, #232]	; (8015140 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8015058:	f007 fcba 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 801505c:	2300      	movs	r3, #0
 801505e:	817b      	strh	r3, [r7, #10]
 8015060:	e01c      	b.n	801509c <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8015062:	897a      	ldrh	r2, [r7, #10]
 8015064:	4b33      	ldr	r3, [pc, #204]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015066:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 801506a:	1c59      	adds	r1, r3, #1
 801506c:	b288      	uxth	r0, r1
 801506e:	4931      	ldr	r1, [pc, #196]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015070:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8015074:	4619      	mov	r1, r3
 8015076:	4b31      	ldr	r3, [pc, #196]	; (801513c <HAL_UARTEx_RxEventCallback+0x1bc>)
 8015078:	5c9a      	ldrb	r2, [r3, r2]
 801507a:	4b2e      	ldr	r3, [pc, #184]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 801507c:	440b      	add	r3, r1
 801507e:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8015082:	4b2c      	ldr	r3, [pc, #176]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015084:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8015088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801508c:	d303      	bcc.n	8015096 <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 801508e:	4b29      	ldr	r3, [pc, #164]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8015090:	2200      	movs	r2, #0
 8015092:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8015096:	897b      	ldrh	r3, [r7, #10]
 8015098:	3301      	adds	r3, #1
 801509a:	817b      	strh	r3, [r7, #10]
 801509c:	897a      	ldrh	r2, [r7, #10]
 801509e:	887b      	ldrh	r3, [r7, #2]
 80150a0:	429a      	cmp	r2, r3
 80150a2:	d3de      	bcc.n	8015062 <HAL_UARTEx_RxEventCallback+0xe2>
}
 80150a4:	e032      	b.n	801510c <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	4a26      	ldr	r2, [pc, #152]	; (8015144 <HAL_UARTEx_RxEventCallback+0x1c4>)
 80150ac:	4293      	cmp	r3, r2
 80150ae:	d12d      	bne.n	801510c <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80150b0:	2280      	movs	r2, #128	; 0x80
 80150b2:	4925      	ldr	r1, [pc, #148]	; (8015148 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80150b4:	4825      	ldr	r0, [pc, #148]	; (801514c <HAL_UARTEx_RxEventCallback+0x1cc>)
 80150b6:	f007 fc8b 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 80150ba:	2300      	movs	r3, #0
 80150bc:	813b      	strh	r3, [r7, #8]
 80150be:	e01c      	b.n	80150fa <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 80150c0:	893a      	ldrh	r2, [r7, #8]
 80150c2:	4b1c      	ldr	r3, [pc, #112]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80150c4:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80150c8:	1c59      	adds	r1, r3, #1
 80150ca:	b288      	uxth	r0, r1
 80150cc:	4919      	ldr	r1, [pc, #100]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80150ce:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 80150d2:	4619      	mov	r1, r3
 80150d4:	4b1c      	ldr	r3, [pc, #112]	; (8015148 <HAL_UARTEx_RxEventCallback+0x1c8>)
 80150d6:	5c9a      	ldrb	r2, [r3, r2]
 80150d8:	4b16      	ldr	r3, [pc, #88]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80150da:	440b      	add	r3, r1
 80150dc:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 80150e0:	4b14      	ldr	r3, [pc, #80]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80150e2:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 80150e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80150ea:	d303      	bcc.n	80150f4 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 80150ec:	4b11      	ldr	r3, [pc, #68]	; (8015134 <HAL_UARTEx_RxEventCallback+0x1b4>)
 80150ee:	2200      	movs	r2, #0
 80150f0:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 80150f4:	893b      	ldrh	r3, [r7, #8]
 80150f6:	3301      	adds	r3, #1
 80150f8:	813b      	strh	r3, [r7, #8]
 80150fa:	893a      	ldrh	r2, [r7, #8]
 80150fc:	887b      	ldrh	r3, [r7, #2]
 80150fe:	429a      	cmp	r2, r3
 8015100:	d3de      	bcc.n	80150c0 <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8015102:	f000 fb8f 	bl	8015824 <HAL_GetTick>
 8015106:	4603      	mov	r3, r0
 8015108:	4a11      	ldr	r2, [pc, #68]	; (8015150 <HAL_UARTEx_RxEventCallback+0x1d0>)
 801510a:	6013      	str	r3, [r2, #0]
}
 801510c:	bf00      	nop
 801510e:	3710      	adds	r7, #16
 8015110:	46bd      	mov	sp, r7
 8015112:	bd80      	pop	{r7, pc}
 8015114:	40011000 	.word	0x40011000
 8015118:	2000bbfc 	.word	0x2000bbfc
 801511c:	2000c024 	.word	0x2000c024
 8015120:	2000b3f8 	.word	0x2000b3f8
 8015124:	2000a3e4 	.word	0x2000a3e4
 8015128:	40005000 	.word	0x40005000
 801512c:	2000bc7c 	.word	0x2000bc7c
 8015130:	2000beb4 	.word	0x2000beb4
 8015134:	2000a3e8 	.word	0x2000a3e8
 8015138:	40007800 	.word	0x40007800
 801513c:	2000bcfc 	.word	0x2000bcfc
 8015140:	2000bf6c 	.word	0x2000bf6c
 8015144:	40004c00 	.word	0x40004c00
 8015148:	2000bd7c 	.word	0x2000bd7c
 801514c:	2000bdfc 	.word	0x2000bdfc
 8015150:	2000a3e0 	.word	0x2000a3e0

08015154 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8015154:	b480      	push	{r7}
 8015156:	b085      	sub	sp, #20
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 801515e:	2300      	movs	r3, #0
 8015160:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8015162:	79fb      	ldrb	r3, [r7, #7]
 8015164:	2b00      	cmp	r3, #0
 8015166:	d115      	bne.n	8015194 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8015168:	79fa      	ldrb	r2, [r7, #7]
 801516a:	4918      	ldr	r1, [pc, #96]	; (80151cc <Com_DataReady+0x78>)
 801516c:	4613      	mov	r3, r2
 801516e:	025b      	lsls	r3, r3, #9
 8015170:	4413      	add	r3, r2
 8015172:	009b      	lsls	r3, r3, #2
 8015174:	440b      	add	r3, r1
 8015176:	8819      	ldrh	r1, [r3, #0]
 8015178:	79fa      	ldrb	r2, [r7, #7]
 801517a:	4814      	ldr	r0, [pc, #80]	; (80151cc <Com_DataReady+0x78>)
 801517c:	4613      	mov	r3, r2
 801517e:	025b      	lsls	r3, r3, #9
 8015180:	4413      	add	r3, r2
 8015182:	009b      	lsls	r3, r3, #2
 8015184:	4403      	add	r3, r0
 8015186:	3302      	adds	r3, #2
 8015188:	881b      	ldrh	r3, [r3, #0]
 801518a:	4299      	cmp	r1, r3
 801518c:	d017      	beq.n	80151be <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 801518e:	2301      	movs	r3, #1
 8015190:	73fb      	strb	r3, [r7, #15]
 8015192:	e014      	b.n	80151be <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8015194:	79fa      	ldrb	r2, [r7, #7]
 8015196:	490e      	ldr	r1, [pc, #56]	; (80151d0 <Com_DataReady+0x7c>)
 8015198:	4613      	mov	r3, r2
 801519a:	021b      	lsls	r3, r3, #8
 801519c:	4413      	add	r3, r2
 801519e:	009b      	lsls	r3, r3, #2
 80151a0:	440b      	add	r3, r1
 80151a2:	8819      	ldrh	r1, [r3, #0]
 80151a4:	79fa      	ldrb	r2, [r7, #7]
 80151a6:	480a      	ldr	r0, [pc, #40]	; (80151d0 <Com_DataReady+0x7c>)
 80151a8:	4613      	mov	r3, r2
 80151aa:	021b      	lsls	r3, r3, #8
 80151ac:	4413      	add	r3, r2
 80151ae:	009b      	lsls	r3, r3, #2
 80151b0:	4403      	add	r3, r0
 80151b2:	3302      	adds	r3, #2
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	4299      	cmp	r1, r3
 80151b8:	d001      	beq.n	80151be <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 80151ba:	2301      	movs	r3, #1
 80151bc:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 80151be:	7bfb      	ldrb	r3, [r7, #15]
}
 80151c0:	4618      	mov	r0, r3
 80151c2:	3714      	adds	r7, #20
 80151c4:	46bd      	mov	sp, r7
 80151c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151ca:	4770      	bx	lr
 80151cc:	2000b3f8 	.word	0x2000b3f8
 80151d0:	2000a3e8 	.word	0x2000a3e8

080151d4 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 80151d4:	b4b0      	push	{r4, r5, r7}
 80151d6:	b085      	sub	sp, #20
 80151d8:	af00      	add	r7, sp, #0
 80151da:	4603      	mov	r3, r0
 80151dc:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 80151de:	2300      	movs	r3, #0
 80151e0:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 80151e2:	79fb      	ldrb	r3, [r7, #7]
 80151e4:	2b00      	cmp	r3, #0
 80151e6:	d135      	bne.n	8015254 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 80151e8:	79f9      	ldrb	r1, [r7, #7]
 80151ea:	79fa      	ldrb	r2, [r7, #7]
 80151ec:	4837      	ldr	r0, [pc, #220]	; (80152cc <Com_Get_Byte+0xf8>)
 80151ee:	4613      	mov	r3, r2
 80151f0:	025b      	lsls	r3, r3, #9
 80151f2:	4413      	add	r3, r2
 80151f4:	009b      	lsls	r3, r3, #2
 80151f6:	4403      	add	r3, r0
 80151f8:	3302      	adds	r3, #2
 80151fa:	8818      	ldrh	r0, [r3, #0]
 80151fc:	1c43      	adds	r3, r0, #1
 80151fe:	b29d      	uxth	r5, r3
 8015200:	4c32      	ldr	r4, [pc, #200]	; (80152cc <Com_Get_Byte+0xf8>)
 8015202:	4613      	mov	r3, r2
 8015204:	025b      	lsls	r3, r3, #9
 8015206:	4413      	add	r3, r2
 8015208:	009b      	lsls	r3, r3, #2
 801520a:	4423      	add	r3, r4
 801520c:	3302      	adds	r3, #2
 801520e:	462a      	mov	r2, r5
 8015210:	801a      	strh	r2, [r3, #0]
 8015212:	4a2e      	ldr	r2, [pc, #184]	; (80152cc <Com_Get_Byte+0xf8>)
 8015214:	460b      	mov	r3, r1
 8015216:	025b      	lsls	r3, r3, #9
 8015218:	440b      	add	r3, r1
 801521a:	009b      	lsls	r3, r3, #2
 801521c:	4413      	add	r3, r2
 801521e:	4403      	add	r3, r0
 8015220:	3304      	adds	r3, #4
 8015222:	781b      	ldrb	r3, [r3, #0]
 8015224:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8015226:	79fa      	ldrb	r2, [r7, #7]
 8015228:	4928      	ldr	r1, [pc, #160]	; (80152cc <Com_Get_Byte+0xf8>)
 801522a:	4613      	mov	r3, r2
 801522c:	025b      	lsls	r3, r3, #9
 801522e:	4413      	add	r3, r2
 8015230:	009b      	lsls	r3, r3, #2
 8015232:	440b      	add	r3, r1
 8015234:	3302      	adds	r3, #2
 8015236:	881b      	ldrh	r3, [r3, #0]
 8015238:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801523c:	d33f      	bcc.n	80152be <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 801523e:	79fa      	ldrb	r2, [r7, #7]
 8015240:	4922      	ldr	r1, [pc, #136]	; (80152cc <Com_Get_Byte+0xf8>)
 8015242:	4613      	mov	r3, r2
 8015244:	025b      	lsls	r3, r3, #9
 8015246:	4413      	add	r3, r2
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	440b      	add	r3, r1
 801524c:	3302      	adds	r3, #2
 801524e:	2200      	movs	r2, #0
 8015250:	801a      	strh	r2, [r3, #0]
 8015252:	e034      	b.n	80152be <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8015254:	79f9      	ldrb	r1, [r7, #7]
 8015256:	79fa      	ldrb	r2, [r7, #7]
 8015258:	481d      	ldr	r0, [pc, #116]	; (80152d0 <Com_Get_Byte+0xfc>)
 801525a:	4613      	mov	r3, r2
 801525c:	021b      	lsls	r3, r3, #8
 801525e:	4413      	add	r3, r2
 8015260:	009b      	lsls	r3, r3, #2
 8015262:	4403      	add	r3, r0
 8015264:	3302      	adds	r3, #2
 8015266:	8818      	ldrh	r0, [r3, #0]
 8015268:	1c43      	adds	r3, r0, #1
 801526a:	b29d      	uxth	r5, r3
 801526c:	4c18      	ldr	r4, [pc, #96]	; (80152d0 <Com_Get_Byte+0xfc>)
 801526e:	4613      	mov	r3, r2
 8015270:	021b      	lsls	r3, r3, #8
 8015272:	4413      	add	r3, r2
 8015274:	009b      	lsls	r3, r3, #2
 8015276:	4423      	add	r3, r4
 8015278:	3302      	adds	r3, #2
 801527a:	462a      	mov	r2, r5
 801527c:	801a      	strh	r2, [r3, #0]
 801527e:	4a14      	ldr	r2, [pc, #80]	; (80152d0 <Com_Get_Byte+0xfc>)
 8015280:	460b      	mov	r3, r1
 8015282:	021b      	lsls	r3, r3, #8
 8015284:	440b      	add	r3, r1
 8015286:	009b      	lsls	r3, r3, #2
 8015288:	4413      	add	r3, r2
 801528a:	4403      	add	r3, r0
 801528c:	3304      	adds	r3, #4
 801528e:	781b      	ldrb	r3, [r3, #0]
 8015290:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8015292:	79fa      	ldrb	r2, [r7, #7]
 8015294:	490e      	ldr	r1, [pc, #56]	; (80152d0 <Com_Get_Byte+0xfc>)
 8015296:	4613      	mov	r3, r2
 8015298:	021b      	lsls	r3, r3, #8
 801529a:	4413      	add	r3, r2
 801529c:	009b      	lsls	r3, r3, #2
 801529e:	440b      	add	r3, r1
 80152a0:	3302      	adds	r3, #2
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80152a8:	d309      	bcc.n	80152be <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 80152aa:	79fa      	ldrb	r2, [r7, #7]
 80152ac:	4908      	ldr	r1, [pc, #32]	; (80152d0 <Com_Get_Byte+0xfc>)
 80152ae:	4613      	mov	r3, r2
 80152b0:	021b      	lsls	r3, r3, #8
 80152b2:	4413      	add	r3, r2
 80152b4:	009b      	lsls	r3, r3, #2
 80152b6:	440b      	add	r3, r1
 80152b8:	3302      	adds	r3, #2
 80152ba:	2200      	movs	r2, #0
 80152bc:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 80152be:	7bfb      	ldrb	r3, [r7, #15]
}
 80152c0:	4618      	mov	r0, r3
 80152c2:	3714      	adds	r7, #20
 80152c4:	46bd      	mov	sp, r7
 80152c6:	bcb0      	pop	{r4, r5, r7}
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	2000b3f8 	.word	0x2000b3f8
 80152d0:	2000a3e8 	.word	0x2000a3e8

080152d4 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b084      	sub	sp, #16
 80152d8:	af00      	add	r7, sp, #0
 80152da:	4603      	mov	r3, r0
 80152dc:	6039      	str	r1, [r7, #0]
 80152de:	71fb      	strb	r3, [r7, #7]
 80152e0:	4613      	mov	r3, r2
 80152e2:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 80152e4:	2300      	movs	r3, #0
 80152e6:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 80152e8:	2300      	movs	r3, #0
 80152ea:	81fb      	strh	r3, [r7, #14]
 80152ec:	e03a      	b.n	8015364 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 80152ee:	89fb      	ldrh	r3, [r7, #14]
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00a      	beq.n	801530a <CommTransmitMessage+0x36>
 80152f4:	89fb      	ldrh	r3, [r7, #14]
 80152f6:	683a      	ldr	r2, [r7, #0]
 80152f8:	4413      	add	r3, r2
 80152fa:	781b      	ldrb	r3, [r3, #0]
 80152fc:	2b24      	cmp	r3, #36	; 0x24
 80152fe:	d104      	bne.n	801530a <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8015300:	79fb      	ldrb	r3, [r7, #7]
 8015302:	2105      	movs	r1, #5
 8015304:	4618      	mov	r0, r3
 8015306:	f000 f835 	bl	8015374 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 801530a:	89fb      	ldrh	r3, [r7, #14]
 801530c:	2b00      	cmp	r3, #0
 801530e:	d00e      	beq.n	801532e <CommTransmitMessage+0x5a>
 8015310:	89fa      	ldrh	r2, [r7, #14]
 8015312:	88bb      	ldrh	r3, [r7, #4]
 8015314:	429a      	cmp	r2, r3
 8015316:	d20a      	bcs.n	801532e <CommTransmitMessage+0x5a>
 8015318:	89fb      	ldrh	r3, [r7, #14]
 801531a:	683a      	ldr	r2, [r7, #0]
 801531c:	4413      	add	r3, r2
 801531e:	781b      	ldrb	r3, [r3, #0]
 8015320:	2b05      	cmp	r3, #5
 8015322:	d104      	bne.n	801532e <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8015324:	79fb      	ldrb	r3, [r7, #7]
 8015326:	2105      	movs	r1, #5
 8015328:	4618      	mov	r0, r3
 801532a:	f000 f823 	bl	8015374 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 801532e:	89fb      	ldrh	r3, [r7, #14]
 8015330:	683a      	ldr	r2, [r7, #0]
 8015332:	4413      	add	r3, r2
 8015334:	781b      	ldrb	r3, [r3, #0]
 8015336:	2b26      	cmp	r3, #38	; 0x26
 8015338:	d108      	bne.n	801534c <CommTransmitMessage+0x78>
 801533a:	89fa      	ldrh	r2, [r7, #14]
 801533c:	88bb      	ldrh	r3, [r7, #4]
 801533e:	429a      	cmp	r2, r3
 8015340:	d004      	beq.n	801534c <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8015342:	79fb      	ldrb	r3, [r7, #7]
 8015344:	2105      	movs	r1, #5
 8015346:	4618      	mov	r0, r3
 8015348:	f000 f814 	bl	8015374 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 801534c:	89fb      	ldrh	r3, [r7, #14]
 801534e:	683a      	ldr	r2, [r7, #0]
 8015350:	4413      	add	r3, r2
 8015352:	781a      	ldrb	r2, [r3, #0]
 8015354:	79fb      	ldrb	r3, [r7, #7]
 8015356:	4611      	mov	r1, r2
 8015358:	4618      	mov	r0, r3
 801535a:	f000 f80b 	bl	8015374 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 801535e:	89fb      	ldrh	r3, [r7, #14]
 8015360:	3301      	adds	r3, #1
 8015362:	81fb      	strh	r3, [r7, #14]
 8015364:	89fa      	ldrh	r2, [r7, #14]
 8015366:	88bb      	ldrh	r3, [r7, #4]
 8015368:	429a      	cmp	r2, r3
 801536a:	d9c0      	bls.n	80152ee <CommTransmitMessage+0x1a>
	}

	return;
 801536c:	bf00      	nop
}
 801536e:	3710      	adds	r7, #16
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}

08015374 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8015374:	b580      	push	{r7, lr}
 8015376:	b084      	sub	sp, #16
 8015378:	af00      	add	r7, sp, #0
 801537a:	4603      	mov	r3, r0
 801537c:	460a      	mov	r2, r1
 801537e:	71fb      	strb	r3, [r7, #7]
 8015380:	4613      	mov	r3, r2
 8015382:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8015384:	1dbb      	adds	r3, r7, #6
 8015386:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8015388:	79fb      	ldrb	r3, [r7, #7]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d107      	bne.n	801539e <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 801538e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015392:	2201      	movs	r2, #1
 8015394:	68f9      	ldr	r1, [r7, #12]
 8015396:	4816      	ldr	r0, [pc, #88]	; (80153f0 <Com_SendByte+0x7c>)
 8015398:	f006 f80c 	bl	801b3b4 <HAL_UART_Transmit>
 801539c:	e01f      	b.n	80153de <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 801539e:	79fb      	ldrb	r3, [r7, #7]
 80153a0:	2b01      	cmp	r3, #1
 80153a2:	d107      	bne.n	80153b4 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 80153a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153a8:	2201      	movs	r2, #1
 80153aa:	68f9      	ldr	r1, [r7, #12]
 80153ac:	4811      	ldr	r0, [pc, #68]	; (80153f4 <Com_SendByte+0x80>)
 80153ae:	f006 f801 	bl	801b3b4 <HAL_UART_Transmit>
 80153b2:	e014      	b.n	80153de <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 80153b4:	79fb      	ldrb	r3, [r7, #7]
 80153b6:	2b02      	cmp	r3, #2
 80153b8:	d107      	bne.n	80153ca <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 80153ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153be:	2201      	movs	r2, #1
 80153c0:	68f9      	ldr	r1, [r7, #12]
 80153c2:	480d      	ldr	r0, [pc, #52]	; (80153f8 <Com_SendByte+0x84>)
 80153c4:	f005 fff6 	bl	801b3b4 <HAL_UART_Transmit>
 80153c8:	e009      	b.n	80153de <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 80153ca:	79fb      	ldrb	r3, [r7, #7]
 80153cc:	2b03      	cmp	r3, #3
 80153ce:	d106      	bne.n	80153de <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 80153d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80153d4:	2201      	movs	r2, #1
 80153d6:	68f9      	ldr	r1, [r7, #12]
 80153d8:	4808      	ldr	r0, [pc, #32]	; (80153fc <Com_SendByte+0x88>)
 80153da:	f005 ffeb 	bl	801b3b4 <HAL_UART_Transmit>
	}

	ptr=NULL;
 80153de:	2300      	movs	r3, #0
 80153e0:	60fb      	str	r3, [r7, #12]
	free(ptr);
 80153e2:	68f8      	ldr	r0, [r7, #12]
 80153e4:	f00d f900 	bl	80225e8 <free>
}
 80153e8:	bf00      	nop
 80153ea:	3710      	adds	r7, #16
 80153ec:	46bd      	mov	sp, r7
 80153ee:	bd80      	pop	{r7, pc}
 80153f0:	2000c024 	.word	0x2000c024
 80153f4:	2000beb4 	.word	0x2000beb4
 80153f8:	2000bf6c 	.word	0x2000bf6c
 80153fc:	2000bdfc 	.word	0x2000bdfc

08015400 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015404:	2280      	movs	r2, #128	; 0x80
 8015406:	490a      	ldr	r1, [pc, #40]	; (8015430 <Enable_UART_Interrupts+0x30>)
 8015408:	480a      	ldr	r0, [pc, #40]	; (8015434 <Enable_UART_Interrupts+0x34>)
 801540a:	f007 fae1 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 801540e:	2280      	movs	r2, #128	; 0x80
 8015410:	4909      	ldr	r1, [pc, #36]	; (8015438 <Enable_UART_Interrupts+0x38>)
 8015412:	480a      	ldr	r0, [pc, #40]	; (801543c <Enable_UART_Interrupts+0x3c>)
 8015414:	f007 fadc 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015418:	2280      	movs	r2, #128	; 0x80
 801541a:	4909      	ldr	r1, [pc, #36]	; (8015440 <Enable_UART_Interrupts+0x40>)
 801541c:	4809      	ldr	r0, [pc, #36]	; (8015444 <Enable_UART_Interrupts+0x44>)
 801541e:	f007 fad7 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8015422:	2280      	movs	r2, #128	; 0x80
 8015424:	4908      	ldr	r1, [pc, #32]	; (8015448 <Enable_UART_Interrupts+0x48>)
 8015426:	4809      	ldr	r0, [pc, #36]	; (801544c <Enable_UART_Interrupts+0x4c>)
 8015428:	f007 fad2 	bl	801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>
}
 801542c:	bf00      	nop
 801542e:	bd80      	pop	{r7, pc}
 8015430:	2000bbfc 	.word	0x2000bbfc
 8015434:	2000c024 	.word	0x2000c024
 8015438:	2000bc7c 	.word	0x2000bc7c
 801543c:	2000beb4 	.word	0x2000beb4
 8015440:	2000bcfc 	.word	0x2000bcfc
 8015444:	2000bf6c 	.word	0x2000bf6c
 8015448:	2000bd7c 	.word	0x2000bd7c
 801544c:	2000bdfc 	.word	0x2000bdfc

08015450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015450:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015488 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8015454:	480d      	ldr	r0, [pc, #52]	; (801548c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8015456:	490e      	ldr	r1, [pc, #56]	; (8015490 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8015458:	4a0e      	ldr	r2, [pc, #56]	; (8015494 <LoopFillZerobss+0x1e>)
  movs r3, #0
 801545a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 801545c:	e002      	b.n	8015464 <LoopCopyDataInit>

0801545e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 801545e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8015460:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8015462:	3304      	adds	r3, #4

08015464 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8015464:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8015466:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8015468:	d3f9      	bcc.n	801545e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 801546a:	4a0b      	ldr	r2, [pc, #44]	; (8015498 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 801546c:	4c0b      	ldr	r4, [pc, #44]	; (801549c <LoopFillZerobss+0x26>)
  movs r3, #0
 801546e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8015470:	e001      	b.n	8015476 <LoopFillZerobss>

08015472 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8015472:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8015474:	3204      	adds	r2, #4

08015476 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8015476:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8015478:	d3fb      	bcc.n	8015472 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 801547a:	f7ff fb87 	bl	8014b8c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 801547e:	f00d f887 	bl	8022590 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015482:	f7fe fa6d 	bl	8013960 <main>
  bx  lr    
 8015486:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015488:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 801548c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8015490:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8015494:	080290c8 	.word	0x080290c8
  ldr r2, =_sbss
 8015498:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 801549c:	20014684 	.word	0x20014684

080154a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80154a0:	e7fe      	b.n	80154a0 <ADC_IRQHandler>

080154a2 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 80154a2:	b480      	push	{r7}
 80154a4:	b083      	sub	sp, #12
 80154a6:	af00      	add	r7, sp, #0
 80154a8:	6078      	str	r0, [r7, #4]
 80154aa:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80154ac:	687b      	ldr	r3, [r7, #4]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d00b      	beq.n	80154ca <DP83848_RegisterBusIO+0x28>
 80154b2:	683b      	ldr	r3, [r7, #0]
 80154b4:	68db      	ldr	r3, [r3, #12]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d007      	beq.n	80154ca <DP83848_RegisterBusIO+0x28>
 80154ba:	683b      	ldr	r3, [r7, #0]
 80154bc:	689b      	ldr	r3, [r3, #8]
 80154be:	2b00      	cmp	r3, #0
 80154c0:	d003      	beq.n	80154ca <DP83848_RegisterBusIO+0x28>
 80154c2:	683b      	ldr	r3, [r7, #0]
 80154c4:	691b      	ldr	r3, [r3, #16]
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d102      	bne.n	80154d0 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 80154ca:	f04f 33ff 	mov.w	r3, #4294967295
 80154ce:	e014      	b.n	80154fa <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 80154d0:	683b      	ldr	r3, [r7, #0]
 80154d2:	681a      	ldr	r2, [r3, #0]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 80154d8:	683b      	ldr	r3, [r7, #0]
 80154da:	685a      	ldr	r2, [r3, #4]
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 80154e0:	683b      	ldr	r3, [r7, #0]
 80154e2:	68da      	ldr	r2, [r3, #12]
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 80154e8:	683b      	ldr	r3, [r7, #0]
 80154ea:	689a      	ldr	r2, [r3, #8]
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80154f0:	683b      	ldr	r3, [r7, #0]
 80154f2:	691a      	ldr	r2, [r3, #16]
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 80154f8:	2300      	movs	r3, #0
}
 80154fa:	4618      	mov	r0, r3
 80154fc:	370c      	adds	r7, #12
 80154fe:	46bd      	mov	sp, r7
 8015500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015504:	4770      	bx	lr

08015506 <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8015506:	b580      	push	{r7, lr}
 8015508:	b086      	sub	sp, #24
 801550a:	af00      	add	r7, sp, #0
 801550c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 801550e:	2300      	movs	r3, #0
 8015510:	60fb      	str	r3, [r7, #12]
 8015512:	2300      	movs	r3, #0
 8015514:	60bb      	str	r3, [r7, #8]
 8015516:	2300      	movs	r3, #0
 8015518:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 801551a:	2300      	movs	r3, #0
 801551c:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	685b      	ldr	r3, [r3, #4]
 8015522:	2b00      	cmp	r3, #0
 8015524:	d17c      	bne.n	8015620 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	689b      	ldr	r3, [r3, #8]
 801552a:	2b00      	cmp	r3, #0
 801552c:	d002      	beq.n	8015534 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	689b      	ldr	r3, [r3, #8]
 8015532:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2220      	movs	r2, #32
 8015538:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 801553a:	2300      	movs	r3, #0
 801553c:	617b      	str	r3, [r7, #20]
 801553e:	e01c      	b.n	801557a <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8015540:	687b      	ldr	r3, [r7, #4]
 8015542:	695b      	ldr	r3, [r3, #20]
 8015544:	f107 0208 	add.w	r2, r7, #8
 8015548:	2119      	movs	r1, #25
 801554a:	6978      	ldr	r0, [r7, #20]
 801554c:	4798      	blx	r3
 801554e:	4603      	mov	r3, r0
 8015550:	2b00      	cmp	r3, #0
 8015552:	da03      	bge.n	801555c <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8015554:	f06f 0304 	mvn.w	r3, #4
 8015558:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 801555a:	e00b      	b.n	8015574 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	f003 031f 	and.w	r3, r3, #31
 8015562:	697a      	ldr	r2, [r7, #20]
 8015564:	429a      	cmp	r2, r3
 8015566:	d105      	bne.n	8015574 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8015568:	687b      	ldr	r3, [r7, #4]
 801556a:	697a      	ldr	r2, [r7, #20]
 801556c:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 801556e:	2300      	movs	r3, #0
 8015570:	613b      	str	r3, [r7, #16]
         break;
 8015572:	e005      	b.n	8015580 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	3301      	adds	r3, #1
 8015578:	617b      	str	r3, [r7, #20]
 801557a:	697b      	ldr	r3, [r7, #20]
 801557c:	2b1f      	cmp	r3, #31
 801557e:	d9df      	bls.n	8015540 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	2b1f      	cmp	r3, #31
 8015586:	d902      	bls.n	801558e <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8015588:	f06f 0302 	mvn.w	r3, #2
 801558c:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 801558e:	693b      	ldr	r3, [r7, #16]
 8015590:	2b00      	cmp	r3, #0
 8015592:	d145      	bne.n	8015620 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	691b      	ldr	r3, [r3, #16]
 8015598:	687a      	ldr	r2, [r7, #4]
 801559a:	6810      	ldr	r0, [r2, #0]
 801559c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80155a0:	2100      	movs	r1, #0
 80155a2:	4798      	blx	r3
 80155a4:	4603      	mov	r3, r0
 80155a6:	2b00      	cmp	r3, #0
 80155a8:	db37      	blt.n	801561a <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	695b      	ldr	r3, [r3, #20]
 80155ae:	687a      	ldr	r2, [r7, #4]
 80155b0:	6810      	ldr	r0, [r2, #0]
 80155b2:	f107 0208 	add.w	r2, r7, #8
 80155b6:	2100      	movs	r1, #0
 80155b8:	4798      	blx	r3
 80155ba:	4603      	mov	r3, r0
 80155bc:	2b00      	cmp	r3, #0
 80155be:	db28      	blt.n	8015612 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 80155c0:	687b      	ldr	r3, [r7, #4]
 80155c2:	699b      	ldr	r3, [r3, #24]
 80155c4:	4798      	blx	r3
 80155c6:	4603      	mov	r3, r0
 80155c8:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 80155ca:	e01c      	b.n	8015606 <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	699b      	ldr	r3, [r3, #24]
 80155d0:	4798      	blx	r3
 80155d2:	4603      	mov	r3, r0
 80155d4:	461a      	mov	r2, r3
 80155d6:	68fb      	ldr	r3, [r7, #12]
 80155d8:	1ad3      	subs	r3, r2, r3
 80155da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80155de:	d80e      	bhi.n	80155fe <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 80155e0:	687b      	ldr	r3, [r7, #4]
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	687a      	ldr	r2, [r7, #4]
 80155e6:	6810      	ldr	r0, [r2, #0]
 80155e8:	f107 0208 	add.w	r2, r7, #8
 80155ec:	2100      	movs	r1, #0
 80155ee:	4798      	blx	r3
 80155f0:	4603      	mov	r3, r0
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	da07      	bge.n	8015606 <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 80155f6:	f06f 0304 	mvn.w	r3, #4
 80155fa:	613b      	str	r3, [r7, #16]
                 break;
 80155fc:	e010      	b.n	8015620 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 80155fe:	f06f 0301 	mvn.w	r3, #1
 8015602:	613b      	str	r3, [r7, #16]
               break;
 8015604:	e00c      	b.n	8015620 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 8015606:	68bb      	ldr	r3, [r7, #8]
 8015608:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801560c:	2b00      	cmp	r3, #0
 801560e:	d1dd      	bne.n	80155cc <DP83848_Init+0xc6>
 8015610:	e006      	b.n	8015620 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8015612:	f06f 0304 	mvn.w	r3, #4
 8015616:	613b      	str	r3, [r7, #16]
 8015618:	e002      	b.n	8015620 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 801561a:	f06f 0303 	mvn.w	r3, #3
 801561e:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8015620:	693b      	ldr	r3, [r7, #16]
 8015622:	2b00      	cmp	r3, #0
 8015624:	d112      	bne.n	801564c <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	699b      	ldr	r3, [r3, #24]
 801562a:	4798      	blx	r3
 801562c:	4603      	mov	r3, r0
 801562e:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 8015630:	bf00      	nop
 8015632:	687b      	ldr	r3, [r7, #4]
 8015634:	699b      	ldr	r3, [r3, #24]
 8015636:	4798      	blx	r3
 8015638:	4603      	mov	r3, r0
 801563a:	461a      	mov	r2, r3
 801563c:	68fb      	ldr	r3, [r7, #12]
 801563e:	1ad3      	subs	r3, r2, r3
 8015640:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8015644:	d9f5      	bls.n	8015632 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8015646:	687b      	ldr	r3, [r7, #4]
 8015648:	2201      	movs	r2, #1
 801564a:	605a      	str	r2, [r3, #4]
   }

   return status;
 801564c:	693b      	ldr	r3, [r7, #16]
 }
 801564e:	4618      	mov	r0, r3
 8015650:	3718      	adds	r7, #24
 8015652:	46bd      	mov	sp, r7
 8015654:	bd80      	pop	{r7, pc}

08015656 <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 8015656:	b580      	push	{r7, lr}
 8015658:	b084      	sub	sp, #16
 801565a:	af00      	add	r7, sp, #0
 801565c:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 801565e:	2300      	movs	r3, #0
 8015660:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	695b      	ldr	r3, [r3, #20]
 8015666:	687a      	ldr	r2, [r7, #4]
 8015668:	6810      	ldr	r0, [r2, #0]
 801566a:	f107 020c 	add.w	r2, r7, #12
 801566e:	2101      	movs	r1, #1
 8015670:	4798      	blx	r3
 8015672:	4603      	mov	r3, r0
 8015674:	2b00      	cmp	r3, #0
 8015676:	da02      	bge.n	801567e <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 8015678:	f06f 0304 	mvn.w	r3, #4
 801567c:	e06e      	b.n	801575c <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 801567e:	687b      	ldr	r3, [r7, #4]
 8015680:	695b      	ldr	r3, [r3, #20]
 8015682:	687a      	ldr	r2, [r7, #4]
 8015684:	6810      	ldr	r0, [r2, #0]
 8015686:	f107 020c 	add.w	r2, r7, #12
 801568a:	2101      	movs	r1, #1
 801568c:	4798      	blx	r3
 801568e:	4603      	mov	r3, r0
 8015690:	2b00      	cmp	r3, #0
 8015692:	da02      	bge.n	801569a <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8015694:	f06f 0304 	mvn.w	r3, #4
 8015698:	e060      	b.n	801575c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 801569a:	68fb      	ldr	r3, [r7, #12]
 801569c:	f003 0304 	and.w	r3, r3, #4
 80156a0:	2b00      	cmp	r3, #0
 80156a2:	d101      	bne.n	80156a8 <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 80156a4:	2301      	movs	r3, #1
 80156a6:	e059      	b.n	801575c <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 80156a8:	687b      	ldr	r3, [r7, #4]
 80156aa:	695b      	ldr	r3, [r3, #20]
 80156ac:	687a      	ldr	r2, [r7, #4]
 80156ae:	6810      	ldr	r0, [r2, #0]
 80156b0:	f107 020c 	add.w	r2, r7, #12
 80156b4:	2100      	movs	r1, #0
 80156b6:	4798      	blx	r3
 80156b8:	4603      	mov	r3, r0
 80156ba:	2b00      	cmp	r3, #0
 80156bc:	da02      	bge.n	80156c4 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 80156be:	f06f 0304 	mvn.w	r3, #4
 80156c2:	e04b      	b.n	801575c <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 80156c4:	68fb      	ldr	r3, [r7, #12]
 80156c6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d11b      	bne.n	8015706 <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d006      	beq.n	80156e6 <DP83848_GetLinkState+0x90>
 80156d8:	68fb      	ldr	r3, [r7, #12]
 80156da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156de:	2b00      	cmp	r3, #0
 80156e0:	d001      	beq.n	80156e6 <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80156e2:	2302      	movs	r3, #2
 80156e4:	e03a      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80156ec:	2b00      	cmp	r3, #0
 80156ee:	d001      	beq.n	80156f4 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80156f0:	2303      	movs	r3, #3
 80156f2:	e033      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d001      	beq.n	8015702 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80156fe:	2304      	movs	r3, #4
 8015700:	e02c      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8015702:	2305      	movs	r3, #5
 8015704:	e02a      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 8015706:	687b      	ldr	r3, [r7, #4]
 8015708:	695b      	ldr	r3, [r3, #20]
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	6810      	ldr	r0, [r2, #0]
 801570e:	f107 020c 	add.w	r2, r7, #12
 8015712:	2110      	movs	r1, #16
 8015714:	4798      	blx	r3
 8015716:	4603      	mov	r3, r0
 8015718:	2b00      	cmp	r3, #0
 801571a:	da02      	bge.n	8015722 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 801571c:	f06f 0304 	mvn.w	r3, #4
 8015720:	e01c      	b.n	801575c <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8015722:	68fb      	ldr	r3, [r7, #12]
 8015724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015728:	2b00      	cmp	r3, #0
 801572a:	d101      	bne.n	8015730 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 801572c:	2306      	movs	r3, #6
 801572e:	e015      	b.n	801575c <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 8015730:	68fb      	ldr	r3, [r7, #12]
 8015732:	f003 0306 	and.w	r3, r3, #6
 8015736:	2b04      	cmp	r3, #4
 8015738:	d101      	bne.n	801573e <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 801573a:	2302      	movs	r3, #2
 801573c:	e00e      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 801573e:	68fb      	ldr	r3, [r7, #12]
 8015740:	f003 0306 	and.w	r3, r3, #6
 8015744:	2b00      	cmp	r3, #0
 8015746:	d101      	bne.n	801574c <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015748:	2303      	movs	r3, #3
 801574a:	e007      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f003 0306 	and.w	r3, r3, #6
 8015752:	2b06      	cmp	r3, #6
 8015754:	d101      	bne.n	801575a <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8015756:	2304      	movs	r3, #4
 8015758:	e000      	b.n	801575c <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 801575a:	2305      	movs	r3, #5
    }
  }
}
 801575c:	4618      	mov	r0, r3
 801575e:	3710      	adds	r7, #16
 8015760:	46bd      	mov	sp, r7
 8015762:	bd80      	pop	{r7, pc}

08015764 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8015764:	b580      	push	{r7, lr}
 8015766:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 8015768:	4b0b      	ldr	r3, [pc, #44]	; (8015798 <HAL_Init+0x34>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	4a0a      	ldr	r2, [pc, #40]	; (8015798 <HAL_Init+0x34>)
 801576e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015772:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8015774:	4b08      	ldr	r3, [pc, #32]	; (8015798 <HAL_Init+0x34>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	4a07      	ldr	r2, [pc, #28]	; (8015798 <HAL_Init+0x34>)
 801577a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801577e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8015780:	2003      	movs	r0, #3
 8015782:	f001 f825 	bl	80167d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8015786:	2007      	movs	r0, #7
 8015788:	f000 f808 	bl	801579c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 801578c:	f7ff f856 	bl	801483c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015790:	2300      	movs	r3, #0
}
 8015792:	4618      	mov	r0, r3
 8015794:	bd80      	pop	{r7, pc}
 8015796:	bf00      	nop
 8015798:	40023c00 	.word	0x40023c00

0801579c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 801579c:	b580      	push	{r7, lr}
 801579e:	b082      	sub	sp, #8
 80157a0:	af00      	add	r7, sp, #0
 80157a2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80157a4:	4b12      	ldr	r3, [pc, #72]	; (80157f0 <HAL_InitTick+0x54>)
 80157a6:	681a      	ldr	r2, [r3, #0]
 80157a8:	4b12      	ldr	r3, [pc, #72]	; (80157f4 <HAL_InitTick+0x58>)
 80157aa:	781b      	ldrb	r3, [r3, #0]
 80157ac:	4619      	mov	r1, r3
 80157ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80157b2:	fbb3 f3f1 	udiv	r3, r3, r1
 80157b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80157ba:	4618      	mov	r0, r3
 80157bc:	f001 f83d 	bl	801683a <HAL_SYSTICK_Config>
 80157c0:	4603      	mov	r3, r0
 80157c2:	2b00      	cmp	r3, #0
 80157c4:	d001      	beq.n	80157ca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80157c6:	2301      	movs	r3, #1
 80157c8:	e00e      	b.n	80157e8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80157ca:	687b      	ldr	r3, [r7, #4]
 80157cc:	2b0f      	cmp	r3, #15
 80157ce:	d80a      	bhi.n	80157e6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80157d0:	2200      	movs	r2, #0
 80157d2:	6879      	ldr	r1, [r7, #4]
 80157d4:	f04f 30ff 	mov.w	r0, #4294967295
 80157d8:	f001 f805 	bl	80167e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80157dc:	4a06      	ldr	r2, [pc, #24]	; (80157f8 <HAL_InitTick+0x5c>)
 80157de:	687b      	ldr	r3, [r7, #4]
 80157e0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80157e2:	2300      	movs	r3, #0
 80157e4:	e000      	b.n	80157e8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80157e6:	2301      	movs	r3, #1
}
 80157e8:	4618      	mov	r0, r3
 80157ea:	3708      	adds	r7, #8
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd80      	pop	{r7, pc}
 80157f0:	2000011c 	.word	0x2000011c
 80157f4:	20000124 	.word	0x20000124
 80157f8:	20000120 	.word	0x20000120

080157fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80157fc:	b480      	push	{r7}
 80157fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015800:	4b06      	ldr	r3, [pc, #24]	; (801581c <HAL_IncTick+0x20>)
 8015802:	781b      	ldrb	r3, [r3, #0]
 8015804:	461a      	mov	r2, r3
 8015806:	4b06      	ldr	r3, [pc, #24]	; (8015820 <HAL_IncTick+0x24>)
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	4413      	add	r3, r2
 801580c:	4a04      	ldr	r2, [pc, #16]	; (8015820 <HAL_IncTick+0x24>)
 801580e:	6013      	str	r3, [r2, #0]
}
 8015810:	bf00      	nop
 8015812:	46bd      	mov	sp, r7
 8015814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015818:	4770      	bx	lr
 801581a:	bf00      	nop
 801581c:	20000124 	.word	0x20000124
 8015820:	2000c0dc 	.word	0x2000c0dc

08015824 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015824:	b480      	push	{r7}
 8015826:	af00      	add	r7, sp, #0
  return uwTick;
 8015828:	4b03      	ldr	r3, [pc, #12]	; (8015838 <HAL_GetTick+0x14>)
 801582a:	681b      	ldr	r3, [r3, #0]
}
 801582c:	4618      	mov	r0, r3
 801582e:	46bd      	mov	sp, r7
 8015830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015834:	4770      	bx	lr
 8015836:	bf00      	nop
 8015838:	2000c0dc 	.word	0x2000c0dc

0801583c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 801583c:	b580      	push	{r7, lr}
 801583e:	b084      	sub	sp, #16
 8015840:	af00      	add	r7, sp, #0
 8015842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8015844:	f7ff ffee 	bl	8015824 <HAL_GetTick>
 8015848:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801584a:	687b      	ldr	r3, [r7, #4]
 801584c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 801584e:	68fb      	ldr	r3, [r7, #12]
 8015850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015854:	d005      	beq.n	8015862 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8015856:	4b0a      	ldr	r3, [pc, #40]	; (8015880 <HAL_Delay+0x44>)
 8015858:	781b      	ldrb	r3, [r3, #0]
 801585a:	461a      	mov	r2, r3
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	4413      	add	r3, r2
 8015860:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8015862:	bf00      	nop
 8015864:	f7ff ffde 	bl	8015824 <HAL_GetTick>
 8015868:	4602      	mov	r2, r0
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	1ad3      	subs	r3, r2, r3
 801586e:	68fa      	ldr	r2, [r7, #12]
 8015870:	429a      	cmp	r2, r3
 8015872:	d8f7      	bhi.n	8015864 <HAL_Delay+0x28>
  {
  }
}
 8015874:	bf00      	nop
 8015876:	bf00      	nop
 8015878:	3710      	adds	r7, #16
 801587a:	46bd      	mov	sp, r7
 801587c:	bd80      	pop	{r7, pc}
 801587e:	bf00      	nop
 8015880:	20000124 	.word	0x20000124

08015884 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8015884:	b580      	push	{r7, lr}
 8015886:	b084      	sub	sp, #16
 8015888:	af00      	add	r7, sp, #0
 801588a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d101      	bne.n	8015896 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8015892:	2301      	movs	r3, #1
 8015894:	e11c      	b.n	8015ad0 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 8015896:	687b      	ldr	r3, [r7, #4]
 8015898:	f893 3020 	ldrb.w	r3, [r3, #32]
 801589c:	b2db      	uxtb	r3, r3
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d131      	bne.n	8015906 <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 80158a2:	687b      	ldr	r3, [r7, #4]
 80158a4:	4a8c      	ldr	r2, [pc, #560]	; (8015ad8 <HAL_CAN_Init+0x254>)
 80158a6:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 80158a8:	687b      	ldr	r3, [r7, #4]
 80158aa:	4a8c      	ldr	r2, [pc, #560]	; (8015adc <HAL_CAN_Init+0x258>)
 80158ac:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	4a8b      	ldr	r2, [pc, #556]	; (8015ae0 <HAL_CAN_Init+0x25c>)
 80158b2:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 80158b4:	687b      	ldr	r3, [r7, #4]
 80158b6:	4a8b      	ldr	r2, [pc, #556]	; (8015ae4 <HAL_CAN_Init+0x260>)
 80158b8:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 80158ba:	687b      	ldr	r3, [r7, #4]
 80158bc:	4a8a      	ldr	r2, [pc, #552]	; (8015ae8 <HAL_CAN_Init+0x264>)
 80158be:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	4a8a      	ldr	r2, [pc, #552]	; (8015aec <HAL_CAN_Init+0x268>)
 80158c4:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	4a89      	ldr	r2, [pc, #548]	; (8015af0 <HAL_CAN_Init+0x26c>)
 80158ca:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	4a89      	ldr	r2, [pc, #548]	; (8015af4 <HAL_CAN_Init+0x270>)
 80158d0:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	4a88      	ldr	r2, [pc, #544]	; (8015af8 <HAL_CAN_Init+0x274>)
 80158d6:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 80158d8:	687b      	ldr	r3, [r7, #4]
 80158da:	4a88      	ldr	r2, [pc, #544]	; (8015afc <HAL_CAN_Init+0x278>)
 80158dc:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 80158de:	687b      	ldr	r3, [r7, #4]
 80158e0:	4a87      	ldr	r2, [pc, #540]	; (8015b00 <HAL_CAN_Init+0x27c>)
 80158e2:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	4a87      	ldr	r2, [pc, #540]	; (8015b04 <HAL_CAN_Init+0x280>)
 80158e8:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	4a86      	ldr	r2, [pc, #536]	; (8015b08 <HAL_CAN_Init+0x284>)
 80158ee:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d102      	bne.n	80158fe <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 80158f8:	687b      	ldr	r3, [r7, #4]
 80158fa:	4a84      	ldr	r2, [pc, #528]	; (8015b0c <HAL_CAN_Init+0x288>)
 80158fc:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 80158fe:	687b      	ldr	r3, [r7, #4]
 8015900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	681a      	ldr	r2, [r3, #0]
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681b      	ldr	r3, [r3, #0]
 8015910:	f042 0201 	orr.w	r2, r2, #1
 8015914:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015916:	f7ff ff85 	bl	8015824 <HAL_GetTick>
 801591a:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 801591c:	e012      	b.n	8015944 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801591e:	f7ff ff81 	bl	8015824 <HAL_GetTick>
 8015922:	4602      	mov	r2, r0
 8015924:	68fb      	ldr	r3, [r7, #12]
 8015926:	1ad3      	subs	r3, r2, r3
 8015928:	2b0a      	cmp	r3, #10
 801592a:	d90b      	bls.n	8015944 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801592c:	687b      	ldr	r3, [r7, #4]
 801592e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015930:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015934:	687b      	ldr	r3, [r7, #4]
 8015936:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015938:	687b      	ldr	r3, [r7, #4]
 801593a:	2205      	movs	r2, #5
 801593c:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015940:	2301      	movs	r3, #1
 8015942:	e0c5      	b.n	8015ad0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	f003 0301 	and.w	r3, r3, #1
 801594e:	2b00      	cmp	r3, #0
 8015950:	d0e5      	beq.n	801591e <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	681b      	ldr	r3, [r3, #0]
 8015956:	681a      	ldr	r2, [r3, #0]
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	f022 0202 	bic.w	r2, r2, #2
 8015960:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8015962:	f7ff ff5f 	bl	8015824 <HAL_GetTick>
 8015966:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015968:	e012      	b.n	8015990 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 801596a:	f7ff ff5b 	bl	8015824 <HAL_GetTick>
 801596e:	4602      	mov	r2, r0
 8015970:	68fb      	ldr	r3, [r7, #12]
 8015972:	1ad3      	subs	r3, r2, r3
 8015974:	2b0a      	cmp	r3, #10
 8015976:	d90b      	bls.n	8015990 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015978:	687b      	ldr	r3, [r7, #4]
 801597a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801597c:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	2205      	movs	r2, #5
 8015988:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 801598c:	2301      	movs	r3, #1
 801598e:	e09f      	b.n	8015ad0 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	681b      	ldr	r3, [r3, #0]
 8015994:	685b      	ldr	r3, [r3, #4]
 8015996:	f003 0302 	and.w	r3, r3, #2
 801599a:	2b00      	cmp	r3, #0
 801599c:	d1e5      	bne.n	801596a <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	7e1b      	ldrb	r3, [r3, #24]
 80159a2:	2b01      	cmp	r3, #1
 80159a4:	d108      	bne.n	80159b8 <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	681a      	ldr	r2, [r3, #0]
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80159b4:	601a      	str	r2, [r3, #0]
 80159b6:	e007      	b.n	80159c8 <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80159b8:	687b      	ldr	r3, [r7, #4]
 80159ba:	681b      	ldr	r3, [r3, #0]
 80159bc:	681a      	ldr	r2, [r3, #0]
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	681b      	ldr	r3, [r3, #0]
 80159c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80159c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80159c8:	687b      	ldr	r3, [r7, #4]
 80159ca:	7e5b      	ldrb	r3, [r3, #25]
 80159cc:	2b01      	cmp	r3, #1
 80159ce:	d108      	bne.n	80159e2 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	681a      	ldr	r2, [r3, #0]
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80159de:	601a      	str	r2, [r3, #0]
 80159e0:	e007      	b.n	80159f2 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	681a      	ldr	r2, [r3, #0]
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	681b      	ldr	r3, [r3, #0]
 80159ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80159f0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	7e9b      	ldrb	r3, [r3, #26]
 80159f6:	2b01      	cmp	r3, #1
 80159f8:	d108      	bne.n	8015a0c <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	681a      	ldr	r2, [r3, #0]
 8015a00:	687b      	ldr	r3, [r7, #4]
 8015a02:	681b      	ldr	r3, [r3, #0]
 8015a04:	f042 0220 	orr.w	r2, r2, #32
 8015a08:	601a      	str	r2, [r3, #0]
 8015a0a:	e007      	b.n	8015a1c <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	681b      	ldr	r3, [r3, #0]
 8015a10:	681a      	ldr	r2, [r3, #0]
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	681b      	ldr	r3, [r3, #0]
 8015a16:	f022 0220 	bic.w	r2, r2, #32
 8015a1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	7edb      	ldrb	r3, [r3, #27]
 8015a20:	2b01      	cmp	r3, #1
 8015a22:	d108      	bne.n	8015a36 <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	681a      	ldr	r2, [r3, #0]
 8015a2a:	687b      	ldr	r3, [r7, #4]
 8015a2c:	681b      	ldr	r3, [r3, #0]
 8015a2e:	f022 0210 	bic.w	r2, r2, #16
 8015a32:	601a      	str	r2, [r3, #0]
 8015a34:	e007      	b.n	8015a46 <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	681a      	ldr	r2, [r3, #0]
 8015a3c:	687b      	ldr	r3, [r7, #4]
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f042 0210 	orr.w	r2, r2, #16
 8015a44:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	7f1b      	ldrb	r3, [r3, #28]
 8015a4a:	2b01      	cmp	r3, #1
 8015a4c:	d108      	bne.n	8015a60 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	687b      	ldr	r3, [r7, #4]
 8015a56:	681b      	ldr	r3, [r3, #0]
 8015a58:	f042 0208 	orr.w	r2, r2, #8
 8015a5c:	601a      	str	r2, [r3, #0]
 8015a5e:	e007      	b.n	8015a70 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	681a      	ldr	r2, [r3, #0]
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	681b      	ldr	r3, [r3, #0]
 8015a6a:	f022 0208 	bic.w	r2, r2, #8
 8015a6e:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8015a70:	687b      	ldr	r3, [r7, #4]
 8015a72:	7f5b      	ldrb	r3, [r3, #29]
 8015a74:	2b01      	cmp	r3, #1
 8015a76:	d108      	bne.n	8015a8a <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	681b      	ldr	r3, [r3, #0]
 8015a7c:	681a      	ldr	r2, [r3, #0]
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	681b      	ldr	r3, [r3, #0]
 8015a82:	f042 0204 	orr.w	r2, r2, #4
 8015a86:	601a      	str	r2, [r3, #0]
 8015a88:	e007      	b.n	8015a9a <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8015a8a:	687b      	ldr	r3, [r7, #4]
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	681b      	ldr	r3, [r3, #0]
 8015a94:	f022 0204 	bic.w	r2, r2, #4
 8015a98:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	689a      	ldr	r2, [r3, #8]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	68db      	ldr	r3, [r3, #12]
 8015aa2:	431a      	orrs	r2, r3
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	691b      	ldr	r3, [r3, #16]
 8015aa8:	431a      	orrs	r2, r3
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	695b      	ldr	r3, [r3, #20]
 8015aae:	ea42 0103 	orr.w	r1, r2, r3
 8015ab2:	687b      	ldr	r3, [r7, #4]
 8015ab4:	685b      	ldr	r3, [r3, #4]
 8015ab6:	1e5a      	subs	r2, r3, #1
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	681b      	ldr	r3, [r3, #0]
 8015abc:	430a      	orrs	r2, r1
 8015abe:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015ac0:	687b      	ldr	r3, [r7, #4]
 8015ac2:	2200      	movs	r2, #0
 8015ac4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8015ac6:	687b      	ldr	r3, [r7, #4]
 8015ac8:	2201      	movs	r2, #1
 8015aca:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8015ace:	2300      	movs	r3, #0
}
 8015ad0:	4618      	mov	r0, r3
 8015ad2:	3710      	adds	r7, #16
 8015ad4:	46bd      	mov	sp, r7
 8015ad6:	bd80      	pop	{r7, pc}
 8015ad8:	0800fe81 	.word	0x0800fe81
 8015adc:	080165cb 	.word	0x080165cb
 8015ae0:	0800ff9d 	.word	0x0800ff9d
 8015ae4:	080165df 	.word	0x080165df
 8015ae8:	08016553 	.word	0x08016553
 8015aec:	08016567 	.word	0x08016567
 8015af0:	0801657b 	.word	0x0801657b
 8015af4:	0801658f 	.word	0x0801658f
 8015af8:	080165a3 	.word	0x080165a3
 8015afc:	080165b7 	.word	0x080165b7
 8015b00:	080165f3 	.word	0x080165f3
 8015b04:	08016607 	.word	0x08016607
 8015b08:	0801661b 	.word	0x0801661b
 8015b0c:	0800f72d 	.word	0x0800f72d

08015b10 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8015b10:	b480      	push	{r7}
 8015b12:	b087      	sub	sp, #28
 8015b14:	af00      	add	r7, sp, #0
 8015b16:	6078      	str	r0, [r7, #4]
 8015b18:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8015b1a:	687b      	ldr	r3, [r7, #4]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015b20:	687b      	ldr	r3, [r7, #4]
 8015b22:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015b26:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8015b28:	7cfb      	ldrb	r3, [r7, #19]
 8015b2a:	2b01      	cmp	r3, #1
 8015b2c:	d003      	beq.n	8015b36 <HAL_CAN_ConfigFilter+0x26>
 8015b2e:	7cfb      	ldrb	r3, [r7, #19]
 8015b30:	2b02      	cmp	r3, #2
 8015b32:	f040 80c7 	bne.w	8015cc4 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	4a69      	ldr	r2, [pc, #420]	; (8015ce0 <HAL_CAN_ConfigFilter+0x1d0>)
 8015b3c:	4293      	cmp	r3, r2
 8015b3e:	d001      	beq.n	8015b44 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 8015b40:	4b68      	ldr	r3, [pc, #416]	; (8015ce4 <HAL_CAN_ConfigFilter+0x1d4>)
 8015b42:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015b44:	697b      	ldr	r3, [r7, #20]
 8015b46:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015b4a:	f043 0201 	orr.w	r2, r3, #1
 8015b4e:	697b      	ldr	r3, [r7, #20]
 8015b50:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 8015b54:	697b      	ldr	r3, [r7, #20]
 8015b56:	4a63      	ldr	r2, [pc, #396]	; (8015ce4 <HAL_CAN_ConfigFilter+0x1d4>)
 8015b58:	4293      	cmp	r3, r2
 8015b5a:	d111      	bne.n	8015b80 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015b62:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8015b66:	697b      	ldr	r3, [r7, #20]
 8015b68:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8015b6c:	697b      	ldr	r3, [r7, #20]
 8015b6e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8015b72:	683b      	ldr	r3, [r7, #0]
 8015b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b76:	021b      	lsls	r3, r3, #8
 8015b78:	431a      	orrs	r2, r3
 8015b7a:	697b      	ldr	r3, [r7, #20]
 8015b7c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	695b      	ldr	r3, [r3, #20]
 8015b84:	f003 031f 	and.w	r3, r3, #31
 8015b88:	2201      	movs	r2, #1
 8015b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8015b8e:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015b96:	68fb      	ldr	r3, [r7, #12]
 8015b98:	43db      	mvns	r3, r3
 8015b9a:	401a      	ands	r2, r3
 8015b9c:	697b      	ldr	r3, [r7, #20]
 8015b9e:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	69db      	ldr	r3, [r3, #28]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d123      	bne.n	8015bf2 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8015baa:	697b      	ldr	r3, [r7, #20]
 8015bac:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	43db      	mvns	r3, r3
 8015bb4:	401a      	ands	r2, r3
 8015bb6:	697b      	ldr	r3, [r7, #20]
 8015bb8:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015bbc:	683b      	ldr	r3, [r7, #0]
 8015bbe:	68db      	ldr	r3, [r3, #12]
 8015bc0:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015bc2:	683b      	ldr	r3, [r7, #0]
 8015bc4:	685b      	ldr	r3, [r3, #4]
 8015bc6:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015bc8:	683a      	ldr	r2, [r7, #0]
 8015bca:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015bcc:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015bce:	697b      	ldr	r3, [r7, #20]
 8015bd0:	3248      	adds	r2, #72	; 0x48
 8015bd2:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015bd6:	683b      	ldr	r3, [r7, #0]
 8015bd8:	689b      	ldr	r3, [r3, #8]
 8015bda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015bdc:	683b      	ldr	r3, [r7, #0]
 8015bde:	681b      	ldr	r3, [r3, #0]
 8015be0:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015be2:	683b      	ldr	r3, [r7, #0]
 8015be4:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015be6:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015be8:	6979      	ldr	r1, [r7, #20]
 8015bea:	3348      	adds	r3, #72	; 0x48
 8015bec:	00db      	lsls	r3, r3, #3
 8015bee:	440b      	add	r3, r1
 8015bf0:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8015bf2:	683b      	ldr	r3, [r7, #0]
 8015bf4:	69db      	ldr	r3, [r3, #28]
 8015bf6:	2b01      	cmp	r3, #1
 8015bf8:	d122      	bne.n	8015c40 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8015bfa:	697b      	ldr	r3, [r7, #20]
 8015bfc:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015c00:	68fb      	ldr	r3, [r7, #12]
 8015c02:	431a      	orrs	r2, r3
 8015c04:	697b      	ldr	r3, [r7, #20]
 8015c06:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015c0a:	683b      	ldr	r3, [r7, #0]
 8015c0c:	681b      	ldr	r3, [r3, #0]
 8015c0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015c10:	683b      	ldr	r3, [r7, #0]
 8015c12:	685b      	ldr	r3, [r3, #4]
 8015c14:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015c16:	683a      	ldr	r2, [r7, #0]
 8015c18:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8015c1a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015c1c:	697b      	ldr	r3, [r7, #20]
 8015c1e:	3248      	adds	r2, #72	; 0x48
 8015c20:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015c24:	683b      	ldr	r3, [r7, #0]
 8015c26:	689b      	ldr	r3, [r3, #8]
 8015c28:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8015c2a:	683b      	ldr	r3, [r7, #0]
 8015c2c:	68db      	ldr	r3, [r3, #12]
 8015c2e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015c30:	683b      	ldr	r3, [r7, #0]
 8015c32:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015c34:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015c36:	6979      	ldr	r1, [r7, #20]
 8015c38:	3348      	adds	r3, #72	; 0x48
 8015c3a:	00db      	lsls	r3, r3, #3
 8015c3c:	440b      	add	r3, r1
 8015c3e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8015c40:	683b      	ldr	r3, [r7, #0]
 8015c42:	699b      	ldr	r3, [r3, #24]
 8015c44:	2b00      	cmp	r3, #0
 8015c46:	d109      	bne.n	8015c5c <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8015c48:	697b      	ldr	r3, [r7, #20]
 8015c4a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	43db      	mvns	r3, r3
 8015c52:	401a      	ands	r2, r3
 8015c54:	697b      	ldr	r3, [r7, #20]
 8015c56:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8015c5a:	e007      	b.n	8015c6c <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8015c5c:	697b      	ldr	r3, [r7, #20]
 8015c5e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8015c62:	68fb      	ldr	r3, [r7, #12]
 8015c64:	431a      	orrs	r2, r3
 8015c66:	697b      	ldr	r3, [r7, #20]
 8015c68:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8015c6c:	683b      	ldr	r3, [r7, #0]
 8015c6e:	691b      	ldr	r3, [r3, #16]
 8015c70:	2b00      	cmp	r3, #0
 8015c72:	d109      	bne.n	8015c88 <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8015c74:	697b      	ldr	r3, [r7, #20]
 8015c76:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015c7a:	68fb      	ldr	r3, [r7, #12]
 8015c7c:	43db      	mvns	r3, r3
 8015c7e:	401a      	ands	r2, r3
 8015c80:	697b      	ldr	r3, [r7, #20]
 8015c82:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8015c86:	e007      	b.n	8015c98 <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8015c88:	697b      	ldr	r3, [r7, #20]
 8015c8a:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	431a      	orrs	r2, r3
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8015c98:	683b      	ldr	r3, [r7, #0]
 8015c9a:	6a1b      	ldr	r3, [r3, #32]
 8015c9c:	2b01      	cmp	r3, #1
 8015c9e:	d107      	bne.n	8015cb0 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015ca0:	697b      	ldr	r3, [r7, #20]
 8015ca2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8015ca6:	68fb      	ldr	r3, [r7, #12]
 8015ca8:	431a      	orrs	r2, r3
 8015caa:	697b      	ldr	r3, [r7, #20]
 8015cac:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015cb0:	697b      	ldr	r3, [r7, #20]
 8015cb2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8015cb6:	f023 0201 	bic.w	r2, r3, #1
 8015cba:	697b      	ldr	r3, [r7, #20]
 8015cbc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8015cc0:	2300      	movs	r3, #0
 8015cc2:	e006      	b.n	8015cd2 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015cc4:	687b      	ldr	r3, [r7, #4]
 8015cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cc8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015cd0:	2301      	movs	r3, #1
  }
}
 8015cd2:	4618      	mov	r0, r3
 8015cd4:	371c      	adds	r7, #28
 8015cd6:	46bd      	mov	sp, r7
 8015cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015cdc:	4770      	bx	lr
 8015cde:	bf00      	nop
 8015ce0:	40003400 	.word	0x40003400
 8015ce4:	40006400 	.word	0x40006400

08015ce8 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8015ce8:	b580      	push	{r7, lr}
 8015cea:	b084      	sub	sp, #16
 8015cec:	af00      	add	r7, sp, #0
 8015cee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015cf6:	b2db      	uxtb	r3, r3
 8015cf8:	2b01      	cmp	r3, #1
 8015cfa:	d12e      	bne.n	8015d5a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	2202      	movs	r2, #2
 8015d00:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015d04:	687b      	ldr	r3, [r7, #4]
 8015d06:	681b      	ldr	r3, [r3, #0]
 8015d08:	681a      	ldr	r2, [r3, #0]
 8015d0a:	687b      	ldr	r3, [r7, #4]
 8015d0c:	681b      	ldr	r3, [r3, #0]
 8015d0e:	f022 0201 	bic.w	r2, r2, #1
 8015d12:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015d14:	f7ff fd86 	bl	8015824 <HAL_GetTick>
 8015d18:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015d1a:	e012      	b.n	8015d42 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015d1c:	f7ff fd82 	bl	8015824 <HAL_GetTick>
 8015d20:	4602      	mov	r2, r0
 8015d22:	68fb      	ldr	r3, [r7, #12]
 8015d24:	1ad3      	subs	r3, r2, r3
 8015d26:	2b0a      	cmp	r3, #10
 8015d28:	d90b      	bls.n	8015d42 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d2e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8015d36:	687b      	ldr	r3, [r7, #4]
 8015d38:	2205      	movs	r2, #5
 8015d3a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8015d3e:	2301      	movs	r3, #1
 8015d40:	e012      	b.n	8015d68 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8015d42:	687b      	ldr	r3, [r7, #4]
 8015d44:	681b      	ldr	r3, [r3, #0]
 8015d46:	685b      	ldr	r3, [r3, #4]
 8015d48:	f003 0301 	and.w	r3, r3, #1
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d1e5      	bne.n	8015d1c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	2200      	movs	r2, #0
 8015d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8015d56:	2300      	movs	r3, #0
 8015d58:	e006      	b.n	8015d68 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8015d5a:	687b      	ldr	r3, [r7, #4]
 8015d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d5e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015d66:	2301      	movs	r3, #1
  }
}
 8015d68:	4618      	mov	r0, r3
 8015d6a:	3710      	adds	r7, #16
 8015d6c:	46bd      	mov	sp, r7
 8015d6e:	bd80      	pop	{r7, pc}

08015d70 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8015d70:	b480      	push	{r7}
 8015d72:	b089      	sub	sp, #36	; 0x24
 8015d74:	af00      	add	r7, sp, #0
 8015d76:	60f8      	str	r0, [r7, #12]
 8015d78:	60b9      	str	r1, [r7, #8]
 8015d7a:	607a      	str	r2, [r7, #4]
 8015d7c:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8015d7e:	68fb      	ldr	r3, [r7, #12]
 8015d80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015d84:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	689b      	ldr	r3, [r3, #8]
 8015d8c:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015d8e:	7ffb      	ldrb	r3, [r7, #31]
 8015d90:	2b01      	cmp	r3, #1
 8015d92:	d003      	beq.n	8015d9c <HAL_CAN_AddTxMessage+0x2c>
 8015d94:	7ffb      	ldrb	r3, [r7, #31]
 8015d96:	2b02      	cmp	r3, #2
 8015d98:	f040 80ad 	bne.w	8015ef6 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015d9c:	69bb      	ldr	r3, [r7, #24]
 8015d9e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015da2:	2b00      	cmp	r3, #0
 8015da4:	d10a      	bne.n	8015dbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015da6:	69bb      	ldr	r3, [r7, #24]
 8015da8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d105      	bne.n	8015dbc <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015db0:	69bb      	ldr	r3, [r7, #24]
 8015db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	f000 8095 	beq.w	8015ee6 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015dbc:	69bb      	ldr	r3, [r7, #24]
 8015dbe:	0e1b      	lsrs	r3, r3, #24
 8015dc0:	f003 0303 	and.w	r3, r3, #3
 8015dc4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8015dc6:	2201      	movs	r2, #1
 8015dc8:	697b      	ldr	r3, [r7, #20]
 8015dca:	409a      	lsls	r2, r3
 8015dcc:	683b      	ldr	r3, [r7, #0]
 8015dce:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015dd0:	68bb      	ldr	r3, [r7, #8]
 8015dd2:	689b      	ldr	r3, [r3, #8]
 8015dd4:	2b00      	cmp	r3, #0
 8015dd6:	d10d      	bne.n	8015df4 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015dd8:	68bb      	ldr	r3, [r7, #8]
 8015dda:	681b      	ldr	r3, [r3, #0]
 8015ddc:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015dde:	68bb      	ldr	r3, [r7, #8]
 8015de0:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015de2:	68f9      	ldr	r1, [r7, #12]
 8015de4:	6809      	ldr	r1, [r1, #0]
 8015de6:	431a      	orrs	r2, r3
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	3318      	adds	r3, #24
 8015dec:	011b      	lsls	r3, r3, #4
 8015dee:	440b      	add	r3, r1
 8015df0:	601a      	str	r2, [r3, #0]
 8015df2:	e00f      	b.n	8015e14 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015df4:	68bb      	ldr	r3, [r7, #8]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8015dfa:	68bb      	ldr	r3, [r7, #8]
 8015dfc:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015dfe:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015e04:	68f9      	ldr	r1, [r7, #12]
 8015e06:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8015e08:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015e0a:	697b      	ldr	r3, [r7, #20]
 8015e0c:	3318      	adds	r3, #24
 8015e0e:	011b      	lsls	r3, r3, #4
 8015e10:	440b      	add	r3, r1
 8015e12:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	6819      	ldr	r1, [r3, #0]
 8015e18:	68bb      	ldr	r3, [r7, #8]
 8015e1a:	691a      	ldr	r2, [r3, #16]
 8015e1c:	697b      	ldr	r3, [r7, #20]
 8015e1e:	3318      	adds	r3, #24
 8015e20:	011b      	lsls	r3, r3, #4
 8015e22:	440b      	add	r3, r1
 8015e24:	3304      	adds	r3, #4
 8015e26:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8015e28:	68bb      	ldr	r3, [r7, #8]
 8015e2a:	7d1b      	ldrb	r3, [r3, #20]
 8015e2c:	2b01      	cmp	r3, #1
 8015e2e:	d111      	bne.n	8015e54 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8015e30:	68fb      	ldr	r3, [r7, #12]
 8015e32:	681a      	ldr	r2, [r3, #0]
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	3318      	adds	r3, #24
 8015e38:	011b      	lsls	r3, r3, #4
 8015e3a:	4413      	add	r3, r2
 8015e3c:	3304      	adds	r3, #4
 8015e3e:	681b      	ldr	r3, [r3, #0]
 8015e40:	68fa      	ldr	r2, [r7, #12]
 8015e42:	6811      	ldr	r1, [r2, #0]
 8015e44:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8015e48:	697b      	ldr	r3, [r7, #20]
 8015e4a:	3318      	adds	r3, #24
 8015e4c:	011b      	lsls	r3, r3, #4
 8015e4e:	440b      	add	r3, r1
 8015e50:	3304      	adds	r3, #4
 8015e52:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8015e54:	687b      	ldr	r3, [r7, #4]
 8015e56:	3307      	adds	r3, #7
 8015e58:	781b      	ldrb	r3, [r3, #0]
 8015e5a:	061a      	lsls	r2, r3, #24
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	3306      	adds	r3, #6
 8015e60:	781b      	ldrb	r3, [r3, #0]
 8015e62:	041b      	lsls	r3, r3, #16
 8015e64:	431a      	orrs	r2, r3
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	3305      	adds	r3, #5
 8015e6a:	781b      	ldrb	r3, [r3, #0]
 8015e6c:	021b      	lsls	r3, r3, #8
 8015e6e:	4313      	orrs	r3, r2
 8015e70:	687a      	ldr	r2, [r7, #4]
 8015e72:	3204      	adds	r2, #4
 8015e74:	7812      	ldrb	r2, [r2, #0]
 8015e76:	4610      	mov	r0, r2
 8015e78:	68fa      	ldr	r2, [r7, #12]
 8015e7a:	6811      	ldr	r1, [r2, #0]
 8015e7c:	ea43 0200 	orr.w	r2, r3, r0
 8015e80:	697b      	ldr	r3, [r7, #20]
 8015e82:	011b      	lsls	r3, r3, #4
 8015e84:	440b      	add	r3, r1
 8015e86:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8015e8a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8015e8c:	687b      	ldr	r3, [r7, #4]
 8015e8e:	3303      	adds	r3, #3
 8015e90:	781b      	ldrb	r3, [r3, #0]
 8015e92:	061a      	lsls	r2, r3, #24
 8015e94:	687b      	ldr	r3, [r7, #4]
 8015e96:	3302      	adds	r3, #2
 8015e98:	781b      	ldrb	r3, [r3, #0]
 8015e9a:	041b      	lsls	r3, r3, #16
 8015e9c:	431a      	orrs	r2, r3
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	3301      	adds	r3, #1
 8015ea2:	781b      	ldrb	r3, [r3, #0]
 8015ea4:	021b      	lsls	r3, r3, #8
 8015ea6:	4313      	orrs	r3, r2
 8015ea8:	687a      	ldr	r2, [r7, #4]
 8015eaa:	7812      	ldrb	r2, [r2, #0]
 8015eac:	4610      	mov	r0, r2
 8015eae:	68fa      	ldr	r2, [r7, #12]
 8015eb0:	6811      	ldr	r1, [r2, #0]
 8015eb2:	ea43 0200 	orr.w	r2, r3, r0
 8015eb6:	697b      	ldr	r3, [r7, #20]
 8015eb8:	011b      	lsls	r3, r3, #4
 8015eba:	440b      	add	r3, r1
 8015ebc:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8015ec0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8015ec2:	68fb      	ldr	r3, [r7, #12]
 8015ec4:	681a      	ldr	r2, [r3, #0]
 8015ec6:	697b      	ldr	r3, [r7, #20]
 8015ec8:	3318      	adds	r3, #24
 8015eca:	011b      	lsls	r3, r3, #4
 8015ecc:	4413      	add	r3, r2
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	68fa      	ldr	r2, [r7, #12]
 8015ed2:	6811      	ldr	r1, [r2, #0]
 8015ed4:	f043 0201 	orr.w	r2, r3, #1
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	3318      	adds	r3, #24
 8015edc:	011b      	lsls	r3, r3, #4
 8015ede:	440b      	add	r3, r1
 8015ee0:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8015ee2:	2300      	movs	r3, #0
 8015ee4:	e00e      	b.n	8015f04 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015ee6:	68fb      	ldr	r3, [r7, #12]
 8015ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015eea:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8015ef2:	2301      	movs	r3, #1
 8015ef4:	e006      	b.n	8015f04 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015efa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015efe:	68fb      	ldr	r3, [r7, #12]
 8015f00:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015f02:	2301      	movs	r3, #1
  }
}
 8015f04:	4618      	mov	r0, r3
 8015f06:	3724      	adds	r7, #36	; 0x24
 8015f08:	46bd      	mov	sp, r7
 8015f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f0e:	4770      	bx	lr

08015f10 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8015f10:	b480      	push	{r7}
 8015f12:	b085      	sub	sp, #20
 8015f14:	af00      	add	r7, sp, #0
 8015f16:	6078      	str	r0, [r7, #4]
 8015f18:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 8015f1a:	2300      	movs	r3, #0
 8015f1c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015f1e:	687b      	ldr	r3, [r7, #4]
 8015f20:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015f24:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 8015f26:	7afb      	ldrb	r3, [r7, #11]
 8015f28:	2b01      	cmp	r3, #1
 8015f2a:	d002      	beq.n	8015f32 <HAL_CAN_IsTxMessagePending+0x22>
 8015f2c:	7afb      	ldrb	r3, [r7, #11]
 8015f2e:	2b02      	cmp	r3, #2
 8015f30:	d10b      	bne.n	8015f4a <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	681b      	ldr	r3, [r3, #0]
 8015f36:	689a      	ldr	r2, [r3, #8]
 8015f38:	683b      	ldr	r3, [r7, #0]
 8015f3a:	069b      	lsls	r3, r3, #26
 8015f3c:	401a      	ands	r2, r3
 8015f3e:	683b      	ldr	r3, [r7, #0]
 8015f40:	069b      	lsls	r3, r3, #26
 8015f42:	429a      	cmp	r2, r3
 8015f44:	d001      	beq.n	8015f4a <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 8015f46:	2301      	movs	r3, #1
 8015f48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 8015f4a:	68fb      	ldr	r3, [r7, #12]
}
 8015f4c:	4618      	mov	r0, r3
 8015f4e:	3714      	adds	r7, #20
 8015f50:	46bd      	mov	sp, r7
 8015f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f56:	4770      	bx	lr

08015f58 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8015f58:	b480      	push	{r7}
 8015f5a:	b087      	sub	sp, #28
 8015f5c:	af00      	add	r7, sp, #0
 8015f5e:	60f8      	str	r0, [r7, #12]
 8015f60:	60b9      	str	r1, [r7, #8]
 8015f62:	607a      	str	r2, [r7, #4]
 8015f64:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015f66:	68fb      	ldr	r3, [r7, #12]
 8015f68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015f6c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8015f6e:	7dfb      	ldrb	r3, [r7, #23]
 8015f70:	2b01      	cmp	r3, #1
 8015f72:	d003      	beq.n	8015f7c <HAL_CAN_GetRxMessage+0x24>
 8015f74:	7dfb      	ldrb	r3, [r7, #23]
 8015f76:	2b02      	cmp	r3, #2
 8015f78:	f040 80f3 	bne.w	8016162 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015f7c:	68bb      	ldr	r3, [r7, #8]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d10e      	bne.n	8015fa0 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	68db      	ldr	r3, [r3, #12]
 8015f88:	f003 0303 	and.w	r3, r3, #3
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d116      	bne.n	8015fbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015f90:	68fb      	ldr	r3, [r7, #12]
 8015f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015f94:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015f98:	68fb      	ldr	r3, [r7, #12]
 8015f9a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015f9c:	2301      	movs	r3, #1
 8015f9e:	e0e7      	b.n	8016170 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	691b      	ldr	r3, [r3, #16]
 8015fa6:	f003 0303 	and.w	r3, r3, #3
 8015faa:	2b00      	cmp	r3, #0
 8015fac:	d107      	bne.n	8015fbe <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015fae:	68fb      	ldr	r3, [r7, #12]
 8015fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015fb2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015fb6:	68fb      	ldr	r3, [r7, #12]
 8015fb8:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015fba:	2301      	movs	r3, #1
 8015fbc:	e0d8      	b.n	8016170 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681a      	ldr	r2, [r3, #0]
 8015fc2:	68bb      	ldr	r3, [r7, #8]
 8015fc4:	331b      	adds	r3, #27
 8015fc6:	011b      	lsls	r3, r3, #4
 8015fc8:	4413      	add	r3, r2
 8015fca:	681b      	ldr	r3, [r3, #0]
 8015fcc:	f003 0204 	and.w	r2, r3, #4
 8015fd0:	687b      	ldr	r3, [r7, #4]
 8015fd2:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	689b      	ldr	r3, [r3, #8]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d10c      	bne.n	8015ff6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8015fdc:	68fb      	ldr	r3, [r7, #12]
 8015fde:	681a      	ldr	r2, [r3, #0]
 8015fe0:	68bb      	ldr	r3, [r7, #8]
 8015fe2:	331b      	adds	r3, #27
 8015fe4:	011b      	lsls	r3, r3, #4
 8015fe6:	4413      	add	r3, r2
 8015fe8:	681b      	ldr	r3, [r3, #0]
 8015fea:	0d5b      	lsrs	r3, r3, #21
 8015fec:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015ff0:	687b      	ldr	r3, [r7, #4]
 8015ff2:	601a      	str	r2, [r3, #0]
 8015ff4:	e00b      	b.n	801600e <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8015ff6:	68fb      	ldr	r3, [r7, #12]
 8015ff8:	681a      	ldr	r2, [r3, #0]
 8015ffa:	68bb      	ldr	r3, [r7, #8]
 8015ffc:	331b      	adds	r3, #27
 8015ffe:	011b      	lsls	r3, r3, #4
 8016000:	4413      	add	r3, r2
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	08db      	lsrs	r3, r3, #3
 8016006:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	681a      	ldr	r2, [r3, #0]
 8016012:	68bb      	ldr	r3, [r7, #8]
 8016014:	331b      	adds	r3, #27
 8016016:	011b      	lsls	r3, r3, #4
 8016018:	4413      	add	r3, r2
 801601a:	681b      	ldr	r3, [r3, #0]
 801601c:	f003 0202 	and.w	r2, r3, #2
 8016020:	687b      	ldr	r3, [r7, #4]
 8016022:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8016024:	68fb      	ldr	r3, [r7, #12]
 8016026:	681a      	ldr	r2, [r3, #0]
 8016028:	68bb      	ldr	r3, [r7, #8]
 801602a:	331b      	adds	r3, #27
 801602c:	011b      	lsls	r3, r3, #4
 801602e:	4413      	add	r3, r2
 8016030:	3304      	adds	r3, #4
 8016032:	681b      	ldr	r3, [r3, #0]
 8016034:	f003 020f 	and.w	r2, r3, #15
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 801603c:	68fb      	ldr	r3, [r7, #12]
 801603e:	681a      	ldr	r2, [r3, #0]
 8016040:	68bb      	ldr	r3, [r7, #8]
 8016042:	331b      	adds	r3, #27
 8016044:	011b      	lsls	r3, r3, #4
 8016046:	4413      	add	r3, r2
 8016048:	3304      	adds	r3, #4
 801604a:	681b      	ldr	r3, [r3, #0]
 801604c:	0a1b      	lsrs	r3, r3, #8
 801604e:	b2da      	uxtb	r2, r3
 8016050:	687b      	ldr	r3, [r7, #4]
 8016052:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	681a      	ldr	r2, [r3, #0]
 8016058:	68bb      	ldr	r3, [r7, #8]
 801605a:	331b      	adds	r3, #27
 801605c:	011b      	lsls	r3, r3, #4
 801605e:	4413      	add	r3, r2
 8016060:	3304      	adds	r3, #4
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	0c1b      	lsrs	r3, r3, #16
 8016066:	b29a      	uxth	r2, r3
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 801606c:	68fb      	ldr	r3, [r7, #12]
 801606e:	681a      	ldr	r2, [r3, #0]
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	011b      	lsls	r3, r3, #4
 8016074:	4413      	add	r3, r2
 8016076:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 801607a:	681b      	ldr	r3, [r3, #0]
 801607c:	b2da      	uxtb	r2, r3
 801607e:	683b      	ldr	r3, [r7, #0]
 8016080:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8016082:	68fb      	ldr	r3, [r7, #12]
 8016084:	681a      	ldr	r2, [r3, #0]
 8016086:	68bb      	ldr	r3, [r7, #8]
 8016088:	011b      	lsls	r3, r3, #4
 801608a:	4413      	add	r3, r2
 801608c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	0a1a      	lsrs	r2, r3, #8
 8016094:	683b      	ldr	r3, [r7, #0]
 8016096:	3301      	adds	r3, #1
 8016098:	b2d2      	uxtb	r2, r2
 801609a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 801609c:	68fb      	ldr	r3, [r7, #12]
 801609e:	681a      	ldr	r2, [r3, #0]
 80160a0:	68bb      	ldr	r3, [r7, #8]
 80160a2:	011b      	lsls	r3, r3, #4
 80160a4:	4413      	add	r3, r2
 80160a6:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80160aa:	681b      	ldr	r3, [r3, #0]
 80160ac:	0c1a      	lsrs	r2, r3, #16
 80160ae:	683b      	ldr	r3, [r7, #0]
 80160b0:	3302      	adds	r3, #2
 80160b2:	b2d2      	uxtb	r2, r2
 80160b4:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	681a      	ldr	r2, [r3, #0]
 80160ba:	68bb      	ldr	r3, [r7, #8]
 80160bc:	011b      	lsls	r3, r3, #4
 80160be:	4413      	add	r3, r2
 80160c0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80160c4:	681b      	ldr	r3, [r3, #0]
 80160c6:	0e1a      	lsrs	r2, r3, #24
 80160c8:	683b      	ldr	r3, [r7, #0]
 80160ca:	3303      	adds	r3, #3
 80160cc:	b2d2      	uxtb	r2, r2
 80160ce:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	681a      	ldr	r2, [r3, #0]
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	011b      	lsls	r3, r3, #4
 80160d8:	4413      	add	r3, r2
 80160da:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80160de:	681a      	ldr	r2, [r3, #0]
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	3304      	adds	r3, #4
 80160e4:	b2d2      	uxtb	r2, r2
 80160e6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	681a      	ldr	r2, [r3, #0]
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	011b      	lsls	r3, r3, #4
 80160f0:	4413      	add	r3, r2
 80160f2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80160f6:	681b      	ldr	r3, [r3, #0]
 80160f8:	0a1a      	lsrs	r2, r3, #8
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	3305      	adds	r3, #5
 80160fe:	b2d2      	uxtb	r2, r2
 8016100:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	681a      	ldr	r2, [r3, #0]
 8016106:	68bb      	ldr	r3, [r7, #8]
 8016108:	011b      	lsls	r3, r3, #4
 801610a:	4413      	add	r3, r2
 801610c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8016110:	681b      	ldr	r3, [r3, #0]
 8016112:	0c1a      	lsrs	r2, r3, #16
 8016114:	683b      	ldr	r3, [r7, #0]
 8016116:	3306      	adds	r3, #6
 8016118:	b2d2      	uxtb	r2, r2
 801611a:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 801611c:	68fb      	ldr	r3, [r7, #12]
 801611e:	681a      	ldr	r2, [r3, #0]
 8016120:	68bb      	ldr	r3, [r7, #8]
 8016122:	011b      	lsls	r3, r3, #4
 8016124:	4413      	add	r3, r2
 8016126:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 801612a:	681b      	ldr	r3, [r3, #0]
 801612c:	0e1a      	lsrs	r2, r3, #24
 801612e:	683b      	ldr	r3, [r7, #0]
 8016130:	3307      	adds	r3, #7
 8016132:	b2d2      	uxtb	r2, r2
 8016134:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8016136:	68bb      	ldr	r3, [r7, #8]
 8016138:	2b00      	cmp	r3, #0
 801613a:	d108      	bne.n	801614e <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 801613c:	68fb      	ldr	r3, [r7, #12]
 801613e:	681b      	ldr	r3, [r3, #0]
 8016140:	68da      	ldr	r2, [r3, #12]
 8016142:	68fb      	ldr	r3, [r7, #12]
 8016144:	681b      	ldr	r3, [r3, #0]
 8016146:	f042 0220 	orr.w	r2, r2, #32
 801614a:	60da      	str	r2, [r3, #12]
 801614c:	e007      	b.n	801615e <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 801614e:	68fb      	ldr	r3, [r7, #12]
 8016150:	681b      	ldr	r3, [r3, #0]
 8016152:	691a      	ldr	r2, [r3, #16]
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	681b      	ldr	r3, [r3, #0]
 8016158:	f042 0220 	orr.w	r2, r2, #32
 801615c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 801615e:	2300      	movs	r3, #0
 8016160:	e006      	b.n	8016170 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016166:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 801616a:	68fb      	ldr	r3, [r7, #12]
 801616c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 801616e:	2301      	movs	r3, #1
  }
}
 8016170:	4618      	mov	r0, r3
 8016172:	371c      	adds	r7, #28
 8016174:	46bd      	mov	sp, r7
 8016176:	f85d 7b04 	ldr.w	r7, [sp], #4
 801617a:	4770      	bx	lr

0801617c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 801617c:	b480      	push	{r7}
 801617e:	b085      	sub	sp, #20
 8016180:	af00      	add	r7, sp, #0
 8016182:	6078      	str	r0, [r7, #4]
 8016184:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8016186:	687b      	ldr	r3, [r7, #4]
 8016188:	f893 3020 	ldrb.w	r3, [r3, #32]
 801618c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 801618e:	7bfb      	ldrb	r3, [r7, #15]
 8016190:	2b01      	cmp	r3, #1
 8016192:	d002      	beq.n	801619a <HAL_CAN_ActivateNotification+0x1e>
 8016194:	7bfb      	ldrb	r3, [r7, #15]
 8016196:	2b02      	cmp	r3, #2
 8016198:	d109      	bne.n	80161ae <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	681b      	ldr	r3, [r3, #0]
 801619e:	6959      	ldr	r1, [r3, #20]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	683a      	ldr	r2, [r7, #0]
 80161a6:	430a      	orrs	r2, r1
 80161a8:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80161aa:	2300      	movs	r3, #0
 80161ac:	e006      	b.n	80161bc <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80161ae:	687b      	ldr	r3, [r7, #4]
 80161b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80161ba:	2301      	movs	r3, #1
  }
}
 80161bc:	4618      	mov	r0, r3
 80161be:	3714      	adds	r7, #20
 80161c0:	46bd      	mov	sp, r7
 80161c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161c6:	4770      	bx	lr

080161c8 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b08a      	sub	sp, #40	; 0x28
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80161d0:	2300      	movs	r3, #0
 80161d2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80161d4:	687b      	ldr	r3, [r7, #4]
 80161d6:	681b      	ldr	r3, [r3, #0]
 80161d8:	695b      	ldr	r3, [r3, #20]
 80161da:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80161dc:	687b      	ldr	r3, [r7, #4]
 80161de:	681b      	ldr	r3, [r3, #0]
 80161e0:	685b      	ldr	r3, [r3, #4]
 80161e2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80161e4:	687b      	ldr	r3, [r7, #4]
 80161e6:	681b      	ldr	r3, [r3, #0]
 80161e8:	689b      	ldr	r3, [r3, #8]
 80161ea:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	681b      	ldr	r3, [r3, #0]
 80161f0:	68db      	ldr	r3, [r3, #12]
 80161f2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	681b      	ldr	r3, [r3, #0]
 80161f8:	691b      	ldr	r3, [r3, #16]
 80161fa:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80161fc:	687b      	ldr	r3, [r7, #4]
 80161fe:	681b      	ldr	r3, [r3, #0]
 8016200:	699b      	ldr	r3, [r3, #24]
 8016202:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8016204:	6a3b      	ldr	r3, [r7, #32]
 8016206:	f003 0301 	and.w	r3, r3, #1
 801620a:	2b00      	cmp	r3, #0
 801620c:	f000 8083 	beq.w	8016316 <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8016210:	69bb      	ldr	r3, [r7, #24]
 8016212:	f003 0301 	and.w	r3, r3, #1
 8016216:	2b00      	cmp	r3, #0
 8016218:	d025      	beq.n	8016266 <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2201      	movs	r2, #1
 8016220:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8016222:	69bb      	ldr	r3, [r7, #24]
 8016224:	f003 0302 	and.w	r3, r3, #2
 8016228:	2b00      	cmp	r3, #0
 801622a:	d004      	beq.n	8016236 <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016230:	6878      	ldr	r0, [r7, #4]
 8016232:	4798      	blx	r3
 8016234:	e017      	b.n	8016266 <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8016236:	69bb      	ldr	r3, [r7, #24]
 8016238:	f003 0304 	and.w	r3, r3, #4
 801623c:	2b00      	cmp	r3, #0
 801623e:	d004      	beq.n	801624a <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8016240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016242:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8016246:	627b      	str	r3, [r7, #36]	; 0x24
 8016248:	e00d      	b.n	8016266 <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 801624a:	69bb      	ldr	r3, [r7, #24]
 801624c:	f003 0308 	and.w	r3, r3, #8
 8016250:	2b00      	cmp	r3, #0
 8016252:	d004      	beq.n	801625e <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8016254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016256:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801625a:	627b      	str	r3, [r7, #36]	; 0x24
 801625c:	e003      	b.n	8016266 <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 801625e:	687b      	ldr	r3, [r7, #4]
 8016260:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016262:	6878      	ldr	r0, [r7, #4]
 8016264:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8016266:	69bb      	ldr	r3, [r7, #24]
 8016268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801626c:	2b00      	cmp	r3, #0
 801626e:	d026      	beq.n	80162be <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	681b      	ldr	r3, [r3, #0]
 8016274:	f44f 7280 	mov.w	r2, #256	; 0x100
 8016278:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 801627a:	69bb      	ldr	r3, [r7, #24]
 801627c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016280:	2b00      	cmp	r3, #0
 8016282:	d004      	beq.n	801628e <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016288:	6878      	ldr	r0, [r7, #4]
 801628a:	4798      	blx	r3
 801628c:	e017      	b.n	80162be <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 801628e:	69bb      	ldr	r3, [r7, #24]
 8016290:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016294:	2b00      	cmp	r3, #0
 8016296:	d004      	beq.n	80162a2 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8016298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801629a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801629e:	627b      	str	r3, [r7, #36]	; 0x24
 80162a0:	e00d      	b.n	80162be <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80162a2:	69bb      	ldr	r3, [r7, #24]
 80162a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d004      	beq.n	80162b6 <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80162ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80162b2:	627b      	str	r3, [r7, #36]	; 0x24
 80162b4:	e003      	b.n	80162be <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80162ba:	6878      	ldr	r0, [r7, #4]
 80162bc:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80162be:	69bb      	ldr	r3, [r7, #24]
 80162c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80162c4:	2b00      	cmp	r3, #0
 80162c6:	d026      	beq.n	8016316 <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	681b      	ldr	r3, [r3, #0]
 80162cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80162d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80162d2:	69bb      	ldr	r3, [r7, #24]
 80162d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80162d8:	2b00      	cmp	r3, #0
 80162da:	d004      	beq.n	80162e6 <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80162e0:	6878      	ldr	r0, [r7, #4]
 80162e2:	4798      	blx	r3
 80162e4:	e017      	b.n	8016316 <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80162e6:	69bb      	ldr	r3, [r7, #24]
 80162e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d004      	beq.n	80162fa <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80162f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80162f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80162f6:	627b      	str	r3, [r7, #36]	; 0x24
 80162f8:	e00d      	b.n	8016316 <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80162fa:	69bb      	ldr	r3, [r7, #24]
 80162fc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016300:	2b00      	cmp	r3, #0
 8016302:	d004      	beq.n	801630e <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8016304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801630a:	627b      	str	r3, [r7, #36]	; 0x24
 801630c:	e003      	b.n	8016316 <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 801630e:	687b      	ldr	r3, [r7, #4]
 8016310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8016312:	6878      	ldr	r0, [r7, #4]
 8016314:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8016316:	6a3b      	ldr	r3, [r7, #32]
 8016318:	f003 0308 	and.w	r3, r3, #8
 801631c:	2b00      	cmp	r3, #0
 801631e:	d00c      	beq.n	801633a <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8016320:	697b      	ldr	r3, [r7, #20]
 8016322:	f003 0310 	and.w	r3, r3, #16
 8016326:	2b00      	cmp	r3, #0
 8016328:	d007      	beq.n	801633a <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 801632a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801632c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8016330:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8016332:	687b      	ldr	r3, [r7, #4]
 8016334:	681b      	ldr	r3, [r3, #0]
 8016336:	2210      	movs	r2, #16
 8016338:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 801633a:	6a3b      	ldr	r3, [r7, #32]
 801633c:	f003 0304 	and.w	r3, r3, #4
 8016340:	2b00      	cmp	r3, #0
 8016342:	d00c      	beq.n	801635e <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8016344:	697b      	ldr	r3, [r7, #20]
 8016346:	f003 0308 	and.w	r3, r3, #8
 801634a:	2b00      	cmp	r3, #0
 801634c:	d007      	beq.n	801635e <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	2208      	movs	r2, #8
 8016354:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8016356:	687b      	ldr	r3, [r7, #4]
 8016358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801635a:	6878      	ldr	r0, [r7, #4]
 801635c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 801635e:	6a3b      	ldr	r3, [r7, #32]
 8016360:	f003 0302 	and.w	r3, r3, #2
 8016364:	2b00      	cmp	r3, #0
 8016366:	d00a      	beq.n	801637e <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8016368:	687b      	ldr	r3, [r7, #4]
 801636a:	681b      	ldr	r3, [r3, #0]
 801636c:	68db      	ldr	r3, [r3, #12]
 801636e:	f003 0303 	and.w	r3, r3, #3
 8016372:	2b00      	cmp	r3, #0
 8016374:	d003      	beq.n	801637e <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801637a:	6878      	ldr	r0, [r7, #4]
 801637c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 801637e:	6a3b      	ldr	r3, [r7, #32]
 8016380:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016384:	2b00      	cmp	r3, #0
 8016386:	d00c      	beq.n	80163a2 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8016388:	693b      	ldr	r3, [r7, #16]
 801638a:	f003 0310 	and.w	r3, r3, #16
 801638e:	2b00      	cmp	r3, #0
 8016390:	d007      	beq.n	80163a2 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8016392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016394:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8016398:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 801639a:	687b      	ldr	r3, [r7, #4]
 801639c:	681b      	ldr	r3, [r3, #0]
 801639e:	2210      	movs	r2, #16
 80163a0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80163a2:	6a3b      	ldr	r3, [r7, #32]
 80163a4:	f003 0320 	and.w	r3, r3, #32
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d00c      	beq.n	80163c6 <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80163ac:	693b      	ldr	r3, [r7, #16]
 80163ae:	f003 0308 	and.w	r3, r3, #8
 80163b2:	2b00      	cmp	r3, #0
 80163b4:	d007      	beq.n	80163c6 <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	681b      	ldr	r3, [r3, #0]
 80163ba:	2208      	movs	r2, #8
 80163bc:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80163c2:	6878      	ldr	r0, [r7, #4]
 80163c4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80163c6:	6a3b      	ldr	r3, [r7, #32]
 80163c8:	f003 0310 	and.w	r3, r3, #16
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d00a      	beq.n	80163e6 <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	681b      	ldr	r3, [r3, #0]
 80163d4:	691b      	ldr	r3, [r3, #16]
 80163d6:	f003 0303 	and.w	r3, r3, #3
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d003      	beq.n	80163e6 <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 80163de:	687b      	ldr	r3, [r7, #4]
 80163e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80163e2:	6878      	ldr	r0, [r7, #4]
 80163e4:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80163e6:	6a3b      	ldr	r3, [r7, #32]
 80163e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d00c      	beq.n	801640a <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80163f0:	69fb      	ldr	r3, [r7, #28]
 80163f2:	f003 0310 	and.w	r3, r3, #16
 80163f6:	2b00      	cmp	r3, #0
 80163f8:	d007      	beq.n	801640a <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80163fa:	687b      	ldr	r3, [r7, #4]
 80163fc:	681b      	ldr	r3, [r3, #0]
 80163fe:	2210      	movs	r2, #16
 8016400:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016406:	6878      	ldr	r0, [r7, #4]
 8016408:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 801640a:	6a3b      	ldr	r3, [r7, #32]
 801640c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8016410:	2b00      	cmp	r3, #0
 8016412:	d00c      	beq.n	801642e <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8016414:	69fb      	ldr	r3, [r7, #28]
 8016416:	f003 0308 	and.w	r3, r3, #8
 801641a:	2b00      	cmp	r3, #0
 801641c:	d007      	beq.n	801642e <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	681b      	ldr	r3, [r3, #0]
 8016422:	2208      	movs	r2, #8
 8016424:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8016426:	687b      	ldr	r3, [r7, #4]
 8016428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801642a:	6878      	ldr	r0, [r7, #4]
 801642c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 801642e:	6a3b      	ldr	r3, [r7, #32]
 8016430:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016434:	2b00      	cmp	r3, #0
 8016436:	d07b      	beq.n	8016530 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8016438:	69fb      	ldr	r3, [r7, #28]
 801643a:	f003 0304 	and.w	r3, r3, #4
 801643e:	2b00      	cmp	r3, #0
 8016440:	d072      	beq.n	8016528 <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016442:	6a3b      	ldr	r3, [r7, #32]
 8016444:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016448:	2b00      	cmp	r3, #0
 801644a:	d008      	beq.n	801645e <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 801644c:	68fb      	ldr	r3, [r7, #12]
 801644e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8016452:	2b00      	cmp	r3, #0
 8016454:	d003      	beq.n	801645e <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8016456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016458:	f043 0301 	orr.w	r3, r3, #1
 801645c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801645e:	6a3b      	ldr	r3, [r7, #32]
 8016460:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016464:	2b00      	cmp	r3, #0
 8016466:	d008      	beq.n	801647a <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 801646e:	2b00      	cmp	r3, #0
 8016470:	d003      	beq.n	801647a <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8016472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016474:	f043 0302 	orr.w	r3, r3, #2
 8016478:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801647a:	6a3b      	ldr	r3, [r7, #32]
 801647c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016480:	2b00      	cmp	r3, #0
 8016482:	d008      	beq.n	8016496 <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8016484:	68fb      	ldr	r3, [r7, #12]
 8016486:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 801648a:	2b00      	cmp	r3, #0
 801648c:	d003      	beq.n	8016496 <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 801648e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016490:	f043 0304 	orr.w	r3, r3, #4
 8016494:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8016496:	6a3b      	ldr	r3, [r7, #32]
 8016498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801649c:	2b00      	cmp	r3, #0
 801649e:	d043      	beq.n	8016528 <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80164a0:	68fb      	ldr	r3, [r7, #12]
 80164a2:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d03e      	beq.n	8016528 <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 80164aa:	68fb      	ldr	r3, [r7, #12]
 80164ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80164b0:	2b60      	cmp	r3, #96	; 0x60
 80164b2:	d02b      	beq.n	801650c <HAL_CAN_IRQHandler+0x344>
 80164b4:	2b60      	cmp	r3, #96	; 0x60
 80164b6:	d82e      	bhi.n	8016516 <HAL_CAN_IRQHandler+0x34e>
 80164b8:	2b50      	cmp	r3, #80	; 0x50
 80164ba:	d022      	beq.n	8016502 <HAL_CAN_IRQHandler+0x33a>
 80164bc:	2b50      	cmp	r3, #80	; 0x50
 80164be:	d82a      	bhi.n	8016516 <HAL_CAN_IRQHandler+0x34e>
 80164c0:	2b40      	cmp	r3, #64	; 0x40
 80164c2:	d019      	beq.n	80164f8 <HAL_CAN_IRQHandler+0x330>
 80164c4:	2b40      	cmp	r3, #64	; 0x40
 80164c6:	d826      	bhi.n	8016516 <HAL_CAN_IRQHandler+0x34e>
 80164c8:	2b30      	cmp	r3, #48	; 0x30
 80164ca:	d010      	beq.n	80164ee <HAL_CAN_IRQHandler+0x326>
 80164cc:	2b30      	cmp	r3, #48	; 0x30
 80164ce:	d822      	bhi.n	8016516 <HAL_CAN_IRQHandler+0x34e>
 80164d0:	2b10      	cmp	r3, #16
 80164d2:	d002      	beq.n	80164da <HAL_CAN_IRQHandler+0x312>
 80164d4:	2b20      	cmp	r3, #32
 80164d6:	d005      	beq.n	80164e4 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80164d8:	e01d      	b.n	8016516 <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 80164da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164dc:	f043 0308 	orr.w	r3, r3, #8
 80164e0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80164e2:	e019      	b.n	8016518 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 80164e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e6:	f043 0310 	orr.w	r3, r3, #16
 80164ea:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80164ec:	e014      	b.n	8016518 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 80164ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f0:	f043 0320 	orr.w	r3, r3, #32
 80164f4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80164f6:	e00f      	b.n	8016518 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 80164f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80164fe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016500:	e00a      	b.n	8016518 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8016502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016508:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 801650a:	e005      	b.n	8016518 <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 801650c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801650e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8016512:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8016514:	e000      	b.n	8016518 <HAL_CAN_IRQHandler+0x350>
            break;
 8016516:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	699a      	ldr	r2, [r3, #24]
 801651e:	687b      	ldr	r3, [r7, #4]
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8016526:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	2204      	movs	r2, #4
 801652e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8016530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016532:	2b00      	cmp	r3, #0
 8016534:	d009      	beq.n	801654a <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801653a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801653c:	431a      	orrs	r2, r3
 801653e:	687b      	ldr	r3, [r7, #4]
 8016540:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016546:	6878      	ldr	r0, [r7, #4]
 8016548:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 801654a:	bf00      	nop
 801654c:	3728      	adds	r7, #40	; 0x28
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}

08016552 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016552:	b480      	push	{r7}
 8016554:	b083      	sub	sp, #12
 8016556:	af00      	add	r7, sp, #0
 8016558:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 801655a:	bf00      	nop
 801655c:	370c      	adds	r7, #12
 801655e:	46bd      	mov	sp, r7
 8016560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016564:	4770      	bx	lr

08016566 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8016566:	b480      	push	{r7}
 8016568:	b083      	sub	sp, #12
 801656a:	af00      	add	r7, sp, #0
 801656c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 801656e:	bf00      	nop
 8016570:	370c      	adds	r7, #12
 8016572:	46bd      	mov	sp, r7
 8016574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016578:	4770      	bx	lr

0801657a <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 801657a:	b480      	push	{r7}
 801657c:	b083      	sub	sp, #12
 801657e:	af00      	add	r7, sp, #0
 8016580:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8016582:	bf00      	nop
 8016584:	370c      	adds	r7, #12
 8016586:	46bd      	mov	sp, r7
 8016588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801658c:	4770      	bx	lr

0801658e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 801658e:	b480      	push	{r7}
 8016590:	b083      	sub	sp, #12
 8016592:	af00      	add	r7, sp, #0
 8016594:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8016596:	bf00      	nop
 8016598:	370c      	adds	r7, #12
 801659a:	46bd      	mov	sp, r7
 801659c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165a0:	4770      	bx	lr

080165a2 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80165a2:	b480      	push	{r7}
 80165a4:	b083      	sub	sp, #12
 80165a6:	af00      	add	r7, sp, #0
 80165a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80165aa:	bf00      	nop
 80165ac:	370c      	adds	r7, #12
 80165ae:	46bd      	mov	sp, r7
 80165b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165b4:	4770      	bx	lr

080165b6 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80165b6:	b480      	push	{r7}
 80165b8:	b083      	sub	sp, #12
 80165ba:	af00      	add	r7, sp, #0
 80165bc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80165be:	bf00      	nop
 80165c0:	370c      	adds	r7, #12
 80165c2:	46bd      	mov	sp, r7
 80165c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165c8:	4770      	bx	lr

080165ca <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80165ca:	b480      	push	{r7}
 80165cc:	b083      	sub	sp, #12
 80165ce:	af00      	add	r7, sp, #0
 80165d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80165d2:	bf00      	nop
 80165d4:	370c      	adds	r7, #12
 80165d6:	46bd      	mov	sp, r7
 80165d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165dc:	4770      	bx	lr

080165de <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80165de:	b480      	push	{r7}
 80165e0:	b083      	sub	sp, #12
 80165e2:	af00      	add	r7, sp, #0
 80165e4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80165e6:	bf00      	nop
 80165e8:	370c      	adds	r7, #12
 80165ea:	46bd      	mov	sp, r7
 80165ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80165f0:	4770      	bx	lr

080165f2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80165f2:	b480      	push	{r7}
 80165f4:	b083      	sub	sp, #12
 80165f6:	af00      	add	r7, sp, #0
 80165f8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80165fa:	bf00      	nop
 80165fc:	370c      	adds	r7, #12
 80165fe:	46bd      	mov	sp, r7
 8016600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016604:	4770      	bx	lr

08016606 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8016606:	b480      	push	{r7}
 8016608:	b083      	sub	sp, #12
 801660a:	af00      	add	r7, sp, #0
 801660c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 801660e:	bf00      	nop
 8016610:	370c      	adds	r7, #12
 8016612:	46bd      	mov	sp, r7
 8016614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016618:	4770      	bx	lr

0801661a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801661a:	b480      	push	{r7}
 801661c:	b083      	sub	sp, #12
 801661e:	af00      	add	r7, sp, #0
 8016620:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8016622:	bf00      	nop
 8016624:	370c      	adds	r7, #12
 8016626:	46bd      	mov	sp, r7
 8016628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801662c:	4770      	bx	lr
	...

08016630 <__NVIC_SetPriorityGrouping>:
{
 8016630:	b480      	push	{r7}
 8016632:	b085      	sub	sp, #20
 8016634:	af00      	add	r7, sp, #0
 8016636:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	f003 0307 	and.w	r3, r3, #7
 801663e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8016640:	4b0b      	ldr	r3, [pc, #44]	; (8016670 <__NVIC_SetPriorityGrouping+0x40>)
 8016642:	68db      	ldr	r3, [r3, #12]
 8016644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8016646:	68ba      	ldr	r2, [r7, #8]
 8016648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 801664c:	4013      	ands	r3, r2
 801664e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8016650:	68fb      	ldr	r3, [r7, #12]
 8016652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8016654:	68bb      	ldr	r3, [r7, #8]
 8016656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8016658:	4b06      	ldr	r3, [pc, #24]	; (8016674 <__NVIC_SetPriorityGrouping+0x44>)
 801665a:	4313      	orrs	r3, r2
 801665c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801665e:	4a04      	ldr	r2, [pc, #16]	; (8016670 <__NVIC_SetPriorityGrouping+0x40>)
 8016660:	68bb      	ldr	r3, [r7, #8]
 8016662:	60d3      	str	r3, [r2, #12]
}
 8016664:	bf00      	nop
 8016666:	3714      	adds	r7, #20
 8016668:	46bd      	mov	sp, r7
 801666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801666e:	4770      	bx	lr
 8016670:	e000ed00 	.word	0xe000ed00
 8016674:	05fa0000 	.word	0x05fa0000

08016678 <__NVIC_GetPriorityGrouping>:
{
 8016678:	b480      	push	{r7}
 801667a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801667c:	4b04      	ldr	r3, [pc, #16]	; (8016690 <__NVIC_GetPriorityGrouping+0x18>)
 801667e:	68db      	ldr	r3, [r3, #12]
 8016680:	0a1b      	lsrs	r3, r3, #8
 8016682:	f003 0307 	and.w	r3, r3, #7
}
 8016686:	4618      	mov	r0, r3
 8016688:	46bd      	mov	sp, r7
 801668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801668e:	4770      	bx	lr
 8016690:	e000ed00 	.word	0xe000ed00

08016694 <__NVIC_EnableIRQ>:
{
 8016694:	b480      	push	{r7}
 8016696:	b083      	sub	sp, #12
 8016698:	af00      	add	r7, sp, #0
 801669a:	4603      	mov	r3, r0
 801669c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 801669e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166a2:	2b00      	cmp	r3, #0
 80166a4:	db0b      	blt.n	80166be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80166a6:	79fb      	ldrb	r3, [r7, #7]
 80166a8:	f003 021f 	and.w	r2, r3, #31
 80166ac:	4907      	ldr	r1, [pc, #28]	; (80166cc <__NVIC_EnableIRQ+0x38>)
 80166ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166b2:	095b      	lsrs	r3, r3, #5
 80166b4:	2001      	movs	r0, #1
 80166b6:	fa00 f202 	lsl.w	r2, r0, r2
 80166ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80166be:	bf00      	nop
 80166c0:	370c      	adds	r7, #12
 80166c2:	46bd      	mov	sp, r7
 80166c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166c8:	4770      	bx	lr
 80166ca:	bf00      	nop
 80166cc:	e000e100 	.word	0xe000e100

080166d0 <__NVIC_SetPriority>:
{
 80166d0:	b480      	push	{r7}
 80166d2:	b083      	sub	sp, #12
 80166d4:	af00      	add	r7, sp, #0
 80166d6:	4603      	mov	r3, r0
 80166d8:	6039      	str	r1, [r7, #0]
 80166da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80166dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166e0:	2b00      	cmp	r3, #0
 80166e2:	db0a      	blt.n	80166fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80166e4:	683b      	ldr	r3, [r7, #0]
 80166e6:	b2da      	uxtb	r2, r3
 80166e8:	490c      	ldr	r1, [pc, #48]	; (801671c <__NVIC_SetPriority+0x4c>)
 80166ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80166ee:	0112      	lsls	r2, r2, #4
 80166f0:	b2d2      	uxtb	r2, r2
 80166f2:	440b      	add	r3, r1
 80166f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80166f8:	e00a      	b.n	8016710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80166fa:	683b      	ldr	r3, [r7, #0]
 80166fc:	b2da      	uxtb	r2, r3
 80166fe:	4908      	ldr	r1, [pc, #32]	; (8016720 <__NVIC_SetPriority+0x50>)
 8016700:	79fb      	ldrb	r3, [r7, #7]
 8016702:	f003 030f 	and.w	r3, r3, #15
 8016706:	3b04      	subs	r3, #4
 8016708:	0112      	lsls	r2, r2, #4
 801670a:	b2d2      	uxtb	r2, r2
 801670c:	440b      	add	r3, r1
 801670e:	761a      	strb	r2, [r3, #24]
}
 8016710:	bf00      	nop
 8016712:	370c      	adds	r7, #12
 8016714:	46bd      	mov	sp, r7
 8016716:	f85d 7b04 	ldr.w	r7, [sp], #4
 801671a:	4770      	bx	lr
 801671c:	e000e100 	.word	0xe000e100
 8016720:	e000ed00 	.word	0xe000ed00

08016724 <NVIC_EncodePriority>:
{
 8016724:	b480      	push	{r7}
 8016726:	b089      	sub	sp, #36	; 0x24
 8016728:	af00      	add	r7, sp, #0
 801672a:	60f8      	str	r0, [r7, #12]
 801672c:	60b9      	str	r1, [r7, #8]
 801672e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8016730:	68fb      	ldr	r3, [r7, #12]
 8016732:	f003 0307 	and.w	r3, r3, #7
 8016736:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8016738:	69fb      	ldr	r3, [r7, #28]
 801673a:	f1c3 0307 	rsb	r3, r3, #7
 801673e:	2b04      	cmp	r3, #4
 8016740:	bf28      	it	cs
 8016742:	2304      	movcs	r3, #4
 8016744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8016746:	69fb      	ldr	r3, [r7, #28]
 8016748:	3304      	adds	r3, #4
 801674a:	2b06      	cmp	r3, #6
 801674c:	d902      	bls.n	8016754 <NVIC_EncodePriority+0x30>
 801674e:	69fb      	ldr	r3, [r7, #28]
 8016750:	3b03      	subs	r3, #3
 8016752:	e000      	b.n	8016756 <NVIC_EncodePriority+0x32>
 8016754:	2300      	movs	r3, #0
 8016756:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8016758:	f04f 32ff 	mov.w	r2, #4294967295
 801675c:	69bb      	ldr	r3, [r7, #24]
 801675e:	fa02 f303 	lsl.w	r3, r2, r3
 8016762:	43da      	mvns	r2, r3
 8016764:	68bb      	ldr	r3, [r7, #8]
 8016766:	401a      	ands	r2, r3
 8016768:	697b      	ldr	r3, [r7, #20]
 801676a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801676c:	f04f 31ff 	mov.w	r1, #4294967295
 8016770:	697b      	ldr	r3, [r7, #20]
 8016772:	fa01 f303 	lsl.w	r3, r1, r3
 8016776:	43d9      	mvns	r1, r3
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801677c:	4313      	orrs	r3, r2
}
 801677e:	4618      	mov	r0, r3
 8016780:	3724      	adds	r7, #36	; 0x24
 8016782:	46bd      	mov	sp, r7
 8016784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016788:	4770      	bx	lr
	...

0801678c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801678c:	b580      	push	{r7, lr}
 801678e:	b082      	sub	sp, #8
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016794:	687b      	ldr	r3, [r7, #4]
 8016796:	3b01      	subs	r3, #1
 8016798:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801679c:	d301      	bcc.n	80167a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 801679e:	2301      	movs	r3, #1
 80167a0:	e00f      	b.n	80167c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80167a2:	4a0a      	ldr	r2, [pc, #40]	; (80167cc <SysTick_Config+0x40>)
 80167a4:	687b      	ldr	r3, [r7, #4]
 80167a6:	3b01      	subs	r3, #1
 80167a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80167aa:	210f      	movs	r1, #15
 80167ac:	f04f 30ff 	mov.w	r0, #4294967295
 80167b0:	f7ff ff8e 	bl	80166d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80167b4:	4b05      	ldr	r3, [pc, #20]	; (80167cc <SysTick_Config+0x40>)
 80167b6:	2200      	movs	r2, #0
 80167b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80167ba:	4b04      	ldr	r3, [pc, #16]	; (80167cc <SysTick_Config+0x40>)
 80167bc:	2207      	movs	r2, #7
 80167be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80167c0:	2300      	movs	r3, #0
}
 80167c2:	4618      	mov	r0, r3
 80167c4:	3708      	adds	r7, #8
 80167c6:	46bd      	mov	sp, r7
 80167c8:	bd80      	pop	{r7, pc}
 80167ca:	bf00      	nop
 80167cc:	e000e010 	.word	0xe000e010

080167d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80167d0:	b580      	push	{r7, lr}
 80167d2:	b082      	sub	sp, #8
 80167d4:	af00      	add	r7, sp, #0
 80167d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80167d8:	6878      	ldr	r0, [r7, #4]
 80167da:	f7ff ff29 	bl	8016630 <__NVIC_SetPriorityGrouping>
}
 80167de:	bf00      	nop
 80167e0:	3708      	adds	r7, #8
 80167e2:	46bd      	mov	sp, r7
 80167e4:	bd80      	pop	{r7, pc}

080167e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80167e6:	b580      	push	{r7, lr}
 80167e8:	b086      	sub	sp, #24
 80167ea:	af00      	add	r7, sp, #0
 80167ec:	4603      	mov	r3, r0
 80167ee:	60b9      	str	r1, [r7, #8]
 80167f0:	607a      	str	r2, [r7, #4]
 80167f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80167f4:	2300      	movs	r3, #0
 80167f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80167f8:	f7ff ff3e 	bl	8016678 <__NVIC_GetPriorityGrouping>
 80167fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80167fe:	687a      	ldr	r2, [r7, #4]
 8016800:	68b9      	ldr	r1, [r7, #8]
 8016802:	6978      	ldr	r0, [r7, #20]
 8016804:	f7ff ff8e 	bl	8016724 <NVIC_EncodePriority>
 8016808:	4602      	mov	r2, r0
 801680a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801680e:	4611      	mov	r1, r2
 8016810:	4618      	mov	r0, r3
 8016812:	f7ff ff5d 	bl	80166d0 <__NVIC_SetPriority>
}
 8016816:	bf00      	nop
 8016818:	3718      	adds	r7, #24
 801681a:	46bd      	mov	sp, r7
 801681c:	bd80      	pop	{r7, pc}

0801681e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801681e:	b580      	push	{r7, lr}
 8016820:	b082      	sub	sp, #8
 8016822:	af00      	add	r7, sp, #0
 8016824:	4603      	mov	r3, r0
 8016826:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8016828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801682c:	4618      	mov	r0, r3
 801682e:	f7ff ff31 	bl	8016694 <__NVIC_EnableIRQ>
}
 8016832:	bf00      	nop
 8016834:	3708      	adds	r7, #8
 8016836:	46bd      	mov	sp, r7
 8016838:	bd80      	pop	{r7, pc}

0801683a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801683a:	b580      	push	{r7, lr}
 801683c:	b082      	sub	sp, #8
 801683e:	af00      	add	r7, sp, #0
 8016840:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8016842:	6878      	ldr	r0, [r7, #4]
 8016844:	f7ff ffa2 	bl	801678c <SysTick_Config>
 8016848:	4603      	mov	r3, r0
}
 801684a:	4618      	mov	r0, r3
 801684c:	3708      	adds	r7, #8
 801684e:	46bd      	mov	sp, r7
 8016850:	bd80      	pop	{r7, pc}
	...

08016854 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8016854:	b480      	push	{r7}
 8016856:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8016858:	f3bf 8f5f 	dmb	sy
}
 801685c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801685e:	4b07      	ldr	r3, [pc, #28]	; (801687c <HAL_MPU_Disable+0x28>)
 8016860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016862:	4a06      	ldr	r2, [pc, #24]	; (801687c <HAL_MPU_Disable+0x28>)
 8016864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8016868:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 801686a:	4b05      	ldr	r3, [pc, #20]	; (8016880 <HAL_MPU_Disable+0x2c>)
 801686c:	2200      	movs	r2, #0
 801686e:	605a      	str	r2, [r3, #4]
}
 8016870:	bf00      	nop
 8016872:	46bd      	mov	sp, r7
 8016874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016878:	4770      	bx	lr
 801687a:	bf00      	nop
 801687c:	e000ed00 	.word	0xe000ed00
 8016880:	e000ed90 	.word	0xe000ed90

08016884 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8016884:	b480      	push	{r7}
 8016886:	b083      	sub	sp, #12
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 801688c:	4a0b      	ldr	r2, [pc, #44]	; (80168bc <HAL_MPU_Enable+0x38>)
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f043 0301 	orr.w	r3, r3, #1
 8016894:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8016896:	4b0a      	ldr	r3, [pc, #40]	; (80168c0 <HAL_MPU_Enable+0x3c>)
 8016898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801689a:	4a09      	ldr	r2, [pc, #36]	; (80168c0 <HAL_MPU_Enable+0x3c>)
 801689c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80168a0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80168a2:	f3bf 8f4f 	dsb	sy
}
 80168a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80168a8:	f3bf 8f6f 	isb	sy
}
 80168ac:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80168ae:	bf00      	nop
 80168b0:	370c      	adds	r7, #12
 80168b2:	46bd      	mov	sp, r7
 80168b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168b8:	4770      	bx	lr
 80168ba:	bf00      	nop
 80168bc:	e000ed90 	.word	0xe000ed90
 80168c0:	e000ed00 	.word	0xe000ed00

080168c4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80168c4:	b480      	push	{r7}
 80168c6:	b083      	sub	sp, #12
 80168c8:	af00      	add	r7, sp, #0
 80168ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	785a      	ldrb	r2, [r3, #1]
 80168d0:	4b1d      	ldr	r3, [pc, #116]	; (8016948 <HAL_MPU_ConfigRegion+0x84>)
 80168d2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	781b      	ldrb	r3, [r3, #0]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d029      	beq.n	8016930 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 80168dc:	4a1a      	ldr	r2, [pc, #104]	; (8016948 <HAL_MPU_ConfigRegion+0x84>)
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	685b      	ldr	r3, [r3, #4]
 80168e2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	7b1b      	ldrb	r3, [r3, #12]
 80168e8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	7adb      	ldrb	r3, [r3, #11]
 80168ee:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80168f0:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	7a9b      	ldrb	r3, [r3, #10]
 80168f6:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80168f8:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80168fa:	687b      	ldr	r3, [r7, #4]
 80168fc:	7b5b      	ldrb	r3, [r3, #13]
 80168fe:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016900:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016902:	687b      	ldr	r3, [r7, #4]
 8016904:	7b9b      	ldrb	r3, [r3, #14]
 8016906:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8016908:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	7bdb      	ldrb	r3, [r3, #15]
 801690e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016910:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016912:	687b      	ldr	r3, [r7, #4]
 8016914:	7a5b      	ldrb	r3, [r3, #9]
 8016916:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8016918:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801691a:	687b      	ldr	r3, [r7, #4]
 801691c:	7a1b      	ldrb	r3, [r3, #8]
 801691e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016920:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8016922:	687a      	ldr	r2, [r7, #4]
 8016924:	7812      	ldrb	r2, [r2, #0]
 8016926:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016928:	4a07      	ldr	r2, [pc, #28]	; (8016948 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801692a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801692c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 801692e:	e005      	b.n	801693c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8016930:	4b05      	ldr	r3, [pc, #20]	; (8016948 <HAL_MPU_ConfigRegion+0x84>)
 8016932:	2200      	movs	r2, #0
 8016934:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8016936:	4b04      	ldr	r3, [pc, #16]	; (8016948 <HAL_MPU_ConfigRegion+0x84>)
 8016938:	2200      	movs	r2, #0
 801693a:	611a      	str	r2, [r3, #16]
}
 801693c:	bf00      	nop
 801693e:	370c      	adds	r7, #12
 8016940:	46bd      	mov	sp, r7
 8016942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016946:	4770      	bx	lr
 8016948:	e000ed90 	.word	0xe000ed90

0801694c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 801694c:	b580      	push	{r7, lr}
 801694e:	b084      	sub	sp, #16
 8016950:	af00      	add	r7, sp, #0
 8016952:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016958:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 801695a:	f7fe ff63 	bl	8015824 <HAL_GetTick>
 801695e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016960:	687b      	ldr	r3, [r7, #4]
 8016962:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016966:	b2db      	uxtb	r3, r3
 8016968:	2b02      	cmp	r3, #2
 801696a:	d008      	beq.n	801697e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2280      	movs	r2, #128	; 0x80
 8016970:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	2200      	movs	r2, #0
 8016976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 801697a:	2301      	movs	r3, #1
 801697c:	e052      	b.n	8016a24 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	681b      	ldr	r3, [r3, #0]
 8016982:	681a      	ldr	r2, [r3, #0]
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	681b      	ldr	r3, [r3, #0]
 8016988:	f022 0216 	bic.w	r2, r2, #22
 801698c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 801698e:	687b      	ldr	r3, [r7, #4]
 8016990:	681b      	ldr	r3, [r3, #0]
 8016992:	695a      	ldr	r2, [r3, #20]
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	681b      	ldr	r3, [r3, #0]
 8016998:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801699c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80169a2:	2b00      	cmp	r3, #0
 80169a4:	d103      	bne.n	80169ae <HAL_DMA_Abort+0x62>
 80169a6:	687b      	ldr	r3, [r7, #4]
 80169a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d007      	beq.n	80169be <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80169ae:	687b      	ldr	r3, [r7, #4]
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	681a      	ldr	r2, [r3, #0]
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	f022 0208 	bic.w	r2, r2, #8
 80169bc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80169be:	687b      	ldr	r3, [r7, #4]
 80169c0:	681b      	ldr	r3, [r3, #0]
 80169c2:	681a      	ldr	r2, [r3, #0]
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	681b      	ldr	r3, [r3, #0]
 80169c8:	f022 0201 	bic.w	r2, r2, #1
 80169cc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80169ce:	e013      	b.n	80169f8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80169d0:	f7fe ff28 	bl	8015824 <HAL_GetTick>
 80169d4:	4602      	mov	r2, r0
 80169d6:	68bb      	ldr	r3, [r7, #8]
 80169d8:	1ad3      	subs	r3, r2, r3
 80169da:	2b05      	cmp	r3, #5
 80169dc:	d90c      	bls.n	80169f8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	2220      	movs	r2, #32
 80169e2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80169e4:	687b      	ldr	r3, [r7, #4]
 80169e6:	2203      	movs	r2, #3
 80169e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	2200      	movs	r2, #0
 80169f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80169f4:	2303      	movs	r3, #3
 80169f6:	e015      	b.n	8016a24 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80169f8:	687b      	ldr	r3, [r7, #4]
 80169fa:	681b      	ldr	r3, [r3, #0]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	f003 0301 	and.w	r3, r3, #1
 8016a02:	2b00      	cmp	r3, #0
 8016a04:	d1e4      	bne.n	80169d0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016a0a:	223f      	movs	r2, #63	; 0x3f
 8016a0c:	409a      	lsls	r2, r3
 8016a0e:	68fb      	ldr	r3, [r7, #12]
 8016a10:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	2201      	movs	r2, #1
 8016a16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	2200      	movs	r2, #0
 8016a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8016a22:	2300      	movs	r3, #0
}
 8016a24:	4618      	mov	r0, r3
 8016a26:	3710      	adds	r7, #16
 8016a28:	46bd      	mov	sp, r7
 8016a2a:	bd80      	pop	{r7, pc}

08016a2c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8016a2c:	b480      	push	{r7}
 8016a2e:	b083      	sub	sp, #12
 8016a30:	af00      	add	r7, sp, #0
 8016a32:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8016a3a:	b2db      	uxtb	r3, r3
 8016a3c:	2b02      	cmp	r3, #2
 8016a3e:	d004      	beq.n	8016a4a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8016a40:	687b      	ldr	r3, [r7, #4]
 8016a42:	2280      	movs	r2, #128	; 0x80
 8016a44:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8016a46:	2301      	movs	r3, #1
 8016a48:	e00c      	b.n	8016a64 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	2205      	movs	r2, #5
 8016a4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	681a      	ldr	r2, [r3, #0]
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f022 0201 	bic.w	r2, r2, #1
 8016a60:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8016a62:	2300      	movs	r3, #0
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	370c      	adds	r7, #12
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a6e:	4770      	bx	lr

08016a70 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8016a70:	b580      	push	{r7, lr}
 8016a72:	b084      	sub	sp, #16
 8016a74:	af00      	add	r7, sp, #0
 8016a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	d101      	bne.n	8016a82 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8016a7e:	2301      	movs	r3, #1
 8016a80:	e06a      	b.n	8016b58 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016a88:	2b00      	cmp	r3, #0
 8016a8a:	d106      	bne.n	8016a9a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	2223      	movs	r2, #35	; 0x23
 8016a90:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8016a94:	6878      	ldr	r0, [r7, #4]
 8016a96:	f006 fbaf 	bl	801d1f8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8016a9a:	4b31      	ldr	r3, [pc, #196]	; (8016b60 <HAL_ETH_Init+0xf0>)
 8016a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016a9e:	4a30      	ldr	r2, [pc, #192]	; (8016b60 <HAL_ETH_Init+0xf0>)
 8016aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8016aa6:	4b2e      	ldr	r3, [pc, #184]	; (8016b60 <HAL_ETH_Init+0xf0>)
 8016aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016aae:	60bb      	str	r3, [r7, #8]
 8016ab0:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8016ab2:	4b2c      	ldr	r3, [pc, #176]	; (8016b64 <HAL_ETH_Init+0xf4>)
 8016ab4:	685b      	ldr	r3, [r3, #4]
 8016ab6:	4a2b      	ldr	r2, [pc, #172]	; (8016b64 <HAL_ETH_Init+0xf4>)
 8016ab8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016abc:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8016abe:	4b29      	ldr	r3, [pc, #164]	; (8016b64 <HAL_ETH_Init+0xf4>)
 8016ac0:	685a      	ldr	r2, [r3, #4]
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	689b      	ldr	r3, [r3, #8]
 8016ac6:	4927      	ldr	r1, [pc, #156]	; (8016b64 <HAL_ETH_Init+0xf4>)
 8016ac8:	4313      	orrs	r3, r2
 8016aca:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8016acc:	4b25      	ldr	r3, [pc, #148]	; (8016b64 <HAL_ETH_Init+0xf4>)
 8016ace:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8016ad0:	687b      	ldr	r3, [r7, #4]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ad8:	681b      	ldr	r3, [r3, #0]
 8016ada:	687a      	ldr	r2, [r7, #4]
 8016adc:	6812      	ldr	r2, [r2, #0]
 8016ade:	f043 0301 	orr.w	r3, r3, #1
 8016ae2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016ae6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016ae8:	f7fe fe9c 	bl	8015824 <HAL_GetTick>
 8016aec:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016aee:	e011      	b.n	8016b14 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8016af0:	f7fe fe98 	bl	8015824 <HAL_GetTick>
 8016af4:	4602      	mov	r2, r0
 8016af6:	68fb      	ldr	r3, [r7, #12]
 8016af8:	1ad3      	subs	r3, r2, r3
 8016afa:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016afe:	d909      	bls.n	8016b14 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2204      	movs	r2, #4
 8016b04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	22e0      	movs	r2, #224	; 0xe0
 8016b0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8016b10:	2301      	movs	r3, #1
 8016b12:	e021      	b.n	8016b58 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	681b      	ldr	r3, [r3, #0]
 8016b18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	f003 0301 	and.w	r3, r3, #1
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d1e4      	bne.n	8016af0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f000 fee4 	bl	80178f4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8016b2c:	6878      	ldr	r0, [r7, #4]
 8016b2e:	f000 ff8b 	bl	8017a48 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8016b32:	6878      	ldr	r0, [r7, #4]
 8016b34:	f000 ffe1 	bl	8017afa <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8016b38:	687b      	ldr	r3, [r7, #4]
 8016b3a:	685b      	ldr	r3, [r3, #4]
 8016b3c:	461a      	mov	r2, r3
 8016b3e:	2100      	movs	r1, #0
 8016b40:	6878      	ldr	r0, [r7, #4]
 8016b42:	f000 ff49 	bl	80179d8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	2200      	movs	r2, #0
 8016b4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	2210      	movs	r2, #16
 8016b52:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3710      	adds	r7, #16
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}
 8016b60:	40023800 	.word	0x40023800
 8016b64:	40013800 	.word	0x40013800

08016b68 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 8016b68:	b580      	push	{r7, lr}
 8016b6a:	b084      	sub	sp, #16
 8016b6c:	af00      	add	r7, sp, #0
 8016b6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8016b70:	687b      	ldr	r3, [r7, #4]
 8016b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016b76:	2b10      	cmp	r3, #16
 8016b78:	d150      	bne.n	8016c1c <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016b7a:	687b      	ldr	r3, [r7, #4]
 8016b7c:	2223      	movs	r2, #35	; 0x23
 8016b7e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	2204      	movs	r2, #4
 8016b86:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8016b88:	6878      	ldr	r0, [r7, #4]
 8016b8a:	f000 f9fd 	bl	8016f88 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	681b      	ldr	r3, [r3, #0]
 8016b92:	681a      	ldr	r2, [r3, #0]
 8016b94:	687b      	ldr	r3, [r7, #4]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	f042 0208 	orr.w	r2, r2, #8
 8016b9c:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016b9e:	687b      	ldr	r3, [r7, #4]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	681b      	ldr	r3, [r3, #0]
 8016ba4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016ba6:	2001      	movs	r0, #1
 8016ba8:	f7fe fe48 	bl	801583c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016bac:	687b      	ldr	r3, [r7, #4]
 8016bae:	681b      	ldr	r3, [r3, #0]
 8016bb0:	68fa      	ldr	r2, [r7, #12]
 8016bb2:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016bb4:	687b      	ldr	r3, [r7, #4]
 8016bb6:	681b      	ldr	r3, [r3, #0]
 8016bb8:	681a      	ldr	r2, [r3, #0]
 8016bba:	687b      	ldr	r3, [r7, #4]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	f042 0204 	orr.w	r2, r2, #4
 8016bc2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016bc4:	687b      	ldr	r3, [r7, #4]
 8016bc6:	681b      	ldr	r3, [r3, #0]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016bcc:	2001      	movs	r0, #1
 8016bce:	f7fe fe35 	bl	801583c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016bd2:	687b      	ldr	r3, [r7, #4]
 8016bd4:	681b      	ldr	r3, [r3, #0]
 8016bd6:	68fa      	ldr	r2, [r7, #12]
 8016bd8:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016bda:	6878      	ldr	r0, [r7, #4]
 8016bdc:	f000 fd2a 	bl	8017634 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016be8:	699b      	ldr	r3, [r3, #24]
 8016bea:	687a      	ldr	r2, [r7, #4]
 8016bec:	6812      	ldr	r2, [r2, #0]
 8016bee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016bf2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016bf6:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c00:	699b      	ldr	r3, [r3, #24]
 8016c02:	687a      	ldr	r2, [r7, #4]
 8016c04:	6812      	ldr	r2, [r2, #0]
 8016c06:	f043 0302 	orr.w	r3, r3, #2
 8016c0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016c0e:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8016c10:	687b      	ldr	r3, [r7, #4]
 8016c12:	2223      	movs	r2, #35	; 0x23
 8016c14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8016c18:	2300      	movs	r3, #0
 8016c1a:	e000      	b.n	8016c1e <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016c1c:	2301      	movs	r3, #1
  }
}
 8016c1e:	4618      	mov	r0, r3
 8016c20:	3710      	adds	r7, #16
 8016c22:	46bd      	mov	sp, r7
 8016c24:	bd80      	pop	{r7, pc}

08016c26 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 8016c26:	b580      	push	{r7, lr}
 8016c28:	b084      	sub	sp, #16
 8016c2a:	af00      	add	r7, sp, #0
 8016c2c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016c2e:	687b      	ldr	r3, [r7, #4]
 8016c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016c34:	2b23      	cmp	r3, #35	; 0x23
 8016c36:	d14a      	bne.n	8016cce <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	2223      	movs	r2, #35	; 0x23
 8016c3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016c40:	687b      	ldr	r3, [r7, #4]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c48:	699b      	ldr	r3, [r3, #24]
 8016c4a:	687a      	ldr	r2, [r7, #4]
 8016c4c:	6812      	ldr	r2, [r2, #0]
 8016c4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8016c52:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016c56:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8016c58:	687b      	ldr	r3, [r7, #4]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016c60:	699b      	ldr	r3, [r3, #24]
 8016c62:	687a      	ldr	r2, [r7, #4]
 8016c64:	6812      	ldr	r2, [r2, #0]
 8016c66:	f023 0302 	bic.w	r3, r3, #2
 8016c6a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016c6e:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	681a      	ldr	r2, [r3, #0]
 8016c76:	687b      	ldr	r3, [r7, #4]
 8016c78:	681b      	ldr	r3, [r3, #0]
 8016c7a:	f022 0204 	bic.w	r2, r2, #4
 8016c7e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016c80:	687b      	ldr	r3, [r7, #4]
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	681b      	ldr	r3, [r3, #0]
 8016c86:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016c88:	2001      	movs	r0, #1
 8016c8a:	f7fe fdd7 	bl	801583c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016c8e:	687b      	ldr	r3, [r7, #4]
 8016c90:	681b      	ldr	r3, [r3, #0]
 8016c92:	68fa      	ldr	r2, [r7, #12]
 8016c94:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8016c96:	6878      	ldr	r0, [r7, #4]
 8016c98:	f000 fccc 	bl	8017634 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	681b      	ldr	r3, [r3, #0]
 8016ca0:	681a      	ldr	r2, [r3, #0]
 8016ca2:	687b      	ldr	r3, [r7, #4]
 8016ca4:	681b      	ldr	r3, [r3, #0]
 8016ca6:	f022 0208 	bic.w	r2, r2, #8
 8016caa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016cac:	687b      	ldr	r3, [r7, #4]
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	681b      	ldr	r3, [r3, #0]
 8016cb2:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016cb4:	2001      	movs	r0, #1
 8016cb6:	f7fe fdc1 	bl	801583c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016cba:	687b      	ldr	r3, [r7, #4]
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	68fa      	ldr	r2, [r7, #12]
 8016cc0:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	2210      	movs	r2, #16
 8016cc6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8016cca:	2300      	movs	r3, #0
 8016ccc:	e000      	b.n	8016cd0 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8016cce:	2301      	movs	r3, #1
  }
}
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	3710      	adds	r7, #16
 8016cd4:	46bd      	mov	sp, r7
 8016cd6:	bd80      	pop	{r7, pc}

08016cd8 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8016cd8:	b580      	push	{r7, lr}
 8016cda:	b086      	sub	sp, #24
 8016cdc:	af00      	add	r7, sp, #0
 8016cde:	60f8      	str	r0, [r7, #12]
 8016ce0:	60b9      	str	r1, [r7, #8]
 8016ce2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016ce4:	68bb      	ldr	r3, [r7, #8]
 8016ce6:	2b00      	cmp	r3, #0
 8016ce8:	d109      	bne.n	8016cfe <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016cea:	68fb      	ldr	r3, [r7, #12]
 8016cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016cf0:	f043 0201 	orr.w	r2, r3, #1
 8016cf4:	68fb      	ldr	r3, [r7, #12]
 8016cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016cfa:	2301      	movs	r3, #1
 8016cfc:	e07c      	b.n	8016df8 <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016cfe:	68fb      	ldr	r3, [r7, #12]
 8016d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016d04:	2b23      	cmp	r3, #35	; 0x23
 8016d06:	d176      	bne.n	8016df6 <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8016d08:	2200      	movs	r2, #0
 8016d0a:	68b9      	ldr	r1, [r7, #8]
 8016d0c:	68f8      	ldr	r0, [r7, #12]
 8016d0e:	f000 ff61 	bl	8017bd4 <ETH_Prepare_Tx_Descriptors>
 8016d12:	4603      	mov	r3, r0
 8016d14:	2b00      	cmp	r3, #0
 8016d16:	d009      	beq.n	8016d2c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8016d18:	68fb      	ldr	r3, [r7, #12]
 8016d1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016d1e:	f043 0202 	orr.w	r2, r3, #2
 8016d22:	68fb      	ldr	r3, [r7, #12]
 8016d24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8016d28:	2301      	movs	r3, #1
 8016d2a:	e065      	b.n	8016df8 <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 8016d2c:	f3bf 8f4f 	dsb	sy
}
 8016d30:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8016d32:	68fb      	ldr	r3, [r7, #12]
 8016d34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8016d36:	68fb      	ldr	r3, [r7, #12]
 8016d38:	3206      	adds	r2, #6
 8016d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016d3e:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8016d40:	68fb      	ldr	r3, [r7, #12]
 8016d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d44:	1c5a      	adds	r2, r3, #1
 8016d46:	68fb      	ldr	r3, [r7, #12]
 8016d48:	629a      	str	r2, [r3, #40]	; 0x28
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d4e:	2b03      	cmp	r3, #3
 8016d50:	d904      	bls.n	8016d5c <HAL_ETH_Transmit+0x84>
 8016d52:	68fb      	ldr	r3, [r7, #12]
 8016d54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016d56:	1f1a      	subs	r2, r3, #4
 8016d58:	68fb      	ldr	r3, [r7, #12]
 8016d5a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 8016d5c:	68fb      	ldr	r3, [r7, #12]
 8016d5e:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8016d60:	68fb      	ldr	r3, [r7, #12]
 8016d62:	681a      	ldr	r2, [r3, #0]
 8016d64:	68fb      	ldr	r3, [r7, #12]
 8016d66:	3106      	adds	r1, #6
 8016d68:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8016d6c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016d70:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 8016d72:	f7fe fd57 	bl	8015824 <HAL_GetTick>
 8016d76:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016d78:	e037      	b.n	8016dea <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 8016d7a:	68fb      	ldr	r3, [r7, #12]
 8016d7c:	681b      	ldr	r3, [r3, #0]
 8016d7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016d82:	695b      	ldr	r3, [r3, #20]
 8016d84:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d011      	beq.n	8016db0 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016d92:	f043 0208 	orr.w	r2, r3, #8
 8016d96:	68fb      	ldr	r3, [r7, #12]
 8016d98:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8016d9c:	68fb      	ldr	r3, [r7, #12]
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016da4:	695a      	ldr	r2, [r3, #20]
 8016da6:	68fb      	ldr	r3, [r7, #12]
 8016da8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8016dac:	2301      	movs	r3, #1
 8016dae:	e023      	b.n	8016df8 <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016db6:	d018      	beq.n	8016dea <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016db8:	f7fe fd34 	bl	8015824 <HAL_GetTick>
 8016dbc:	4602      	mov	r2, r0
 8016dbe:	693b      	ldr	r3, [r7, #16]
 8016dc0:	1ad3      	subs	r3, r2, r3
 8016dc2:	687a      	ldr	r2, [r7, #4]
 8016dc4:	429a      	cmp	r2, r3
 8016dc6:	d302      	bcc.n	8016dce <HAL_ETH_Transmit+0xf6>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d10d      	bne.n	8016dea <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8016dce:	68fb      	ldr	r3, [r7, #12]
 8016dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016dd4:	f043 0204 	orr.w	r2, r3, #4
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8016dde:	697b      	ldr	r3, [r7, #20]
 8016de0:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016de4:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8016de6:	2301      	movs	r3, #1
 8016de8:	e006      	b.n	8016df8 <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8016dea:	697b      	ldr	r3, [r7, #20]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	dbc3      	blt.n	8016d7a <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8016df2:	2300      	movs	r3, #0
 8016df4:	e000      	b.n	8016df8 <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 8016df6:	2301      	movs	r3, #1
  }
}
 8016df8:	4618      	mov	r0, r3
 8016dfa:	3718      	adds	r7, #24
 8016dfc:	46bd      	mov	sp, r7
 8016dfe:	bd80      	pop	{r7, pc}

08016e00 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8016e00:	b580      	push	{r7, lr}
 8016e02:	b088      	sub	sp, #32
 8016e04:	af00      	add	r7, sp, #0
 8016e06:	6078      	str	r0, [r7, #4]
 8016e08:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8016e0e:	2300      	movs	r3, #0
 8016e10:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8016e12:	683b      	ldr	r3, [r7, #0]
 8016e14:	2b00      	cmp	r3, #0
 8016e16:	d109      	bne.n	8016e2c <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016e1e:	f043 0201 	orr.w	r2, r3, #1
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8016e28:	2301      	movs	r3, #1
 8016e2a:	e0a8      	b.n	8016f7e <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016e32:	2b23      	cmp	r3, #35	; 0x23
 8016e34:	d001      	beq.n	8016e3a <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8016e36:	2301      	movs	r3, #1
 8016e38:	e0a1      	b.n	8016f7e <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8016e3a:	687b      	ldr	r3, [r7, #4]
 8016e3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016e3e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016e40:	687b      	ldr	r3, [r7, #4]
 8016e42:	69fa      	ldr	r2, [r7, #28]
 8016e44:	3212      	adds	r2, #18
 8016e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016e4a:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e50:	f1c3 0304 	rsb	r3, r3, #4
 8016e54:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016e56:	e06a      	b.n	8016f2e <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8016e58:	69bb      	ldr	r3, [r7, #24]
 8016e5a:	681b      	ldr	r3, [r3, #0]
 8016e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d007      	beq.n	8016e74 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8016e64:	69bb      	ldr	r3, [r7, #24]
 8016e66:	699a      	ldr	r2, [r3, #24]
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8016e6c:	69bb      	ldr	r3, [r7, #24]
 8016e6e:	69da      	ldr	r2, [r3, #28]
 8016e70:	687b      	ldr	r3, [r7, #4]
 8016e72:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8016e74:	69bb      	ldr	r3, [r7, #24]
 8016e76:	681b      	ldr	r3, [r3, #0]
 8016e78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016e7c:	2b00      	cmp	r3, #0
 8016e7e:	d103      	bne.n	8016e88 <HAL_ETH_ReadData+0x88>
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d040      	beq.n	8016f0a <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8016e88:	69bb      	ldr	r3, [r7, #24]
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d005      	beq.n	8016ea0 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8016e94:	687b      	ldr	r3, [r7, #4]
 8016e96:	2200      	movs	r2, #0
 8016e98:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8016e9a:	687b      	ldr	r3, [r7, #4]
 8016e9c:	2200      	movs	r2, #0
 8016e9e:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	695b      	ldr	r3, [r3, #20]
 8016ea4:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8016ea6:	69bb      	ldr	r3, [r7, #24]
 8016ea8:	681b      	ldr	r3, [r3, #0]
 8016eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016eae:	2b00      	cmp	r3, #0
 8016eb0:	d00c      	beq.n	8016ecc <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8016eb2:	69bb      	ldr	r3, [r7, #24]
 8016eb4:	681b      	ldr	r3, [r3, #0]
 8016eb6:	0c1b      	lsrs	r3, r3, #16
 8016eb8:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016ebc:	3b04      	subs	r3, #4
 8016ebe:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8016ec0:	69bb      	ldr	r3, [r7, #24]
 8016ec2:	681a      	ldr	r2, [r3, #0]
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8016ec8:	2301      	movs	r3, #1
 8016eca:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8016ecc:	69bb      	ldr	r3, [r7, #24]
 8016ece:	689a      	ldr	r2, [r3, #8]
 8016ed0:	69bb      	ldr	r3, [r7, #24]
 8016ed2:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8016eda:	687b      	ldr	r3, [r7, #4]
 8016edc:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8016ee0:	69bb      	ldr	r3, [r7, #24]
 8016ee2:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016ee4:	461a      	mov	r2, r3
 8016ee6:	693b      	ldr	r3, [r7, #16]
 8016ee8:	b29b      	uxth	r3, r3
 8016eea:	f006 fb4f 	bl	801d58c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016ef2:	1c5a      	adds	r2, r3, #1
 8016ef4:	687b      	ldr	r3, [r7, #4]
 8016ef6:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016efc:	693b      	ldr	r3, [r7, #16]
 8016efe:	441a      	add	r2, r3
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8016f04:	69bb      	ldr	r3, [r7, #24]
 8016f06:	2200      	movs	r2, #0
 8016f08:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8016f0a:	69fb      	ldr	r3, [r7, #28]
 8016f0c:	3301      	adds	r3, #1
 8016f0e:	61fb      	str	r3, [r7, #28]
 8016f10:	69fb      	ldr	r3, [r7, #28]
 8016f12:	2b03      	cmp	r3, #3
 8016f14:	d902      	bls.n	8016f1c <HAL_ETH_ReadData+0x11c>
 8016f16:	69fb      	ldr	r3, [r7, #28]
 8016f18:	3b04      	subs	r3, #4
 8016f1a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	69fa      	ldr	r2, [r7, #28]
 8016f20:	3212      	adds	r2, #18
 8016f22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016f26:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8016f28:	697b      	ldr	r3, [r7, #20]
 8016f2a:	3301      	adds	r3, #1
 8016f2c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8016f2e:	69bb      	ldr	r3, [r7, #24]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	db06      	blt.n	8016f44 <HAL_ETH_ReadData+0x144>
 8016f36:	697a      	ldr	r2, [r7, #20]
 8016f38:	68bb      	ldr	r3, [r7, #8]
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d202      	bcs.n	8016f44 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8016f3e:	7bfb      	ldrb	r3, [r7, #15]
 8016f40:	2b00      	cmp	r3, #0
 8016f42:	d089      	beq.n	8016e58 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8016f44:	687b      	ldr	r3, [r7, #4]
 8016f46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8016f48:	697b      	ldr	r3, [r7, #20]
 8016f4a:	441a      	add	r2, r3
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8016f50:	687b      	ldr	r3, [r7, #4]
 8016f52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	d002      	beq.n	8016f5e <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8016f58:	6878      	ldr	r0, [r7, #4]
 8016f5a:	f000 f815 	bl	8016f88 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8016f5e:	687b      	ldr	r3, [r7, #4]
 8016f60:	69fa      	ldr	r2, [r7, #28]
 8016f62:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8016f64:	7bfb      	ldrb	r3, [r7, #15]
 8016f66:	2b01      	cmp	r3, #1
 8016f68:	d108      	bne.n	8016f7c <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8016f6a:	687b      	ldr	r3, [r7, #4]
 8016f6c:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8016f6e:	683b      	ldr	r3, [r7, #0]
 8016f70:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	2200      	movs	r2, #0
 8016f76:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8016f78:	2300      	movs	r3, #0
 8016f7a:	e000      	b.n	8016f7e <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8016f7c:	2301      	movs	r3, #1
}
 8016f7e:	4618      	mov	r0, r3
 8016f80:	3720      	adds	r7, #32
 8016f82:	46bd      	mov	sp, r7
 8016f84:	bd80      	pop	{r7, pc}
	...

08016f88 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8016f88:	b580      	push	{r7, lr}
 8016f8a:	b088      	sub	sp, #32
 8016f8c:	af00      	add	r7, sp, #0
 8016f8e:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8016f90:	2300      	movs	r3, #0
 8016f92:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8016f94:	2301      	movs	r3, #1
 8016f96:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016f9c:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	69fa      	ldr	r2, [r7, #28]
 8016fa2:	3212      	adds	r2, #18
 8016fa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016fa8:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8016faa:	687b      	ldr	r3, [r7, #4]
 8016fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fae:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8016fb0:	e040      	b.n	8017034 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8016fb2:	697b      	ldr	r3, [r7, #20]
 8016fb4:	6a1b      	ldr	r3, [r3, #32]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d112      	bne.n	8016fe0 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8016fba:	f107 030c 	add.w	r3, r7, #12
 8016fbe:	4618      	mov	r0, r3
 8016fc0:	f006 fab4 	bl	801d52c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8016fc4:	68fb      	ldr	r3, [r7, #12]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d102      	bne.n	8016fd0 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8016fca:	2300      	movs	r3, #0
 8016fcc:	74fb      	strb	r3, [r7, #19]
 8016fce:	e007      	b.n	8016fe0 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	697b      	ldr	r3, [r7, #20]
 8016fd6:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8016fd8:	68fb      	ldr	r3, [r7, #12]
 8016fda:	461a      	mov	r2, r3
 8016fdc:	697b      	ldr	r3, [r7, #20]
 8016fde:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8016fe0:	7cfb      	ldrb	r3, [r7, #19]
 8016fe2:	2b00      	cmp	r3, #0
 8016fe4:	d026      	beq.n	8017034 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d103      	bne.n	8016ff6 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016fee:	697b      	ldr	r3, [r7, #20]
 8016ff0:	4a1e      	ldr	r2, [pc, #120]	; (801706c <ETH_UpdateDescriptor+0xe4>)
 8016ff2:	605a      	str	r2, [r3, #4]
 8016ff4:	e003      	b.n	8016ffe <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016ff6:	697b      	ldr	r3, [r7, #20]
 8016ff8:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8016ffc:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8016ffe:	f3bf 8f5f 	dmb	sy
}
 8017002:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8017004:	697b      	ldr	r3, [r7, #20]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801700c:	697b      	ldr	r3, [r7, #20]
 801700e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8017010:	69fb      	ldr	r3, [r7, #28]
 8017012:	3301      	adds	r3, #1
 8017014:	61fb      	str	r3, [r7, #28]
 8017016:	69fb      	ldr	r3, [r7, #28]
 8017018:	2b03      	cmp	r3, #3
 801701a:	d902      	bls.n	8017022 <ETH_UpdateDescriptor+0x9a>
 801701c:	69fb      	ldr	r3, [r7, #28]
 801701e:	3b04      	subs	r3, #4
 8017020:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	69fa      	ldr	r2, [r7, #28]
 8017026:	3212      	adds	r2, #18
 8017028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801702c:	617b      	str	r3, [r7, #20]
      desccount--;
 801702e:	69bb      	ldr	r3, [r7, #24]
 8017030:	3b01      	subs	r3, #1
 8017032:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8017034:	69bb      	ldr	r3, [r7, #24]
 8017036:	2b00      	cmp	r3, #0
 8017038:	d002      	beq.n	8017040 <ETH_UpdateDescriptor+0xb8>
 801703a:	7cfb      	ldrb	r3, [r7, #19]
 801703c:	2b00      	cmp	r3, #0
 801703e:	d1b8      	bne.n	8016fb2 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8017040:	687b      	ldr	r3, [r7, #4]
 8017042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017044:	69ba      	ldr	r2, [r7, #24]
 8017046:	429a      	cmp	r2, r3
 8017048:	d00c      	beq.n	8017064 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017052:	461a      	mov	r2, r3
 8017054:	2300      	movs	r3, #0
 8017056:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	69fa      	ldr	r2, [r7, #28]
 801705c:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 801705e:	687b      	ldr	r3, [r7, #4]
 8017060:	69ba      	ldr	r2, [r7, #24]
 8017062:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8017064:	bf00      	nop
 8017066:	3720      	adds	r7, #32
 8017068:	46bd      	mov	sp, r7
 801706a:	bd80      	pop	{r7, pc}
 801706c:	800045f8 	.word	0x800045f8

08017070 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8017070:	b580      	push	{r7, lr}
 8017072:	b082      	sub	sp, #8
 8017074:	af00      	add	r7, sp, #0
 8017076:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8017078:	687b      	ldr	r3, [r7, #4]
 801707a:	681b      	ldr	r3, [r3, #0]
 801707c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017080:	695b      	ldr	r3, [r3, #20]
 8017082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017086:	2b40      	cmp	r3, #64	; 0x40
 8017088:	d112      	bne.n	80170b0 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 801708a:	687b      	ldr	r3, [r7, #4]
 801708c:	681b      	ldr	r3, [r3, #0]
 801708e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017092:	69db      	ldr	r3, [r3, #28]
 8017094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017098:	2b40      	cmp	r3, #64	; 0x40
 801709a:	d109      	bne.n	80170b0 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170a4:	461a      	mov	r2, r3
 80170a6:	4b50      	ldr	r3, [pc, #320]	; (80171e8 <HAL_ETH_IRQHandler+0x178>)
 80170a8:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 80170aa:	6878      	ldr	r0, [r7, #4]
 80170ac:	f000 f8ac 	bl	8017208 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	681b      	ldr	r3, [r3, #0]
 80170b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170b8:	695b      	ldr	r3, [r3, #20]
 80170ba:	f003 0301 	and.w	r3, r3, #1
 80170be:	2b01      	cmp	r3, #1
 80170c0:	d113      	bne.n	80170ea <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 80170c2:	687b      	ldr	r3, [r7, #4]
 80170c4:	681b      	ldr	r3, [r3, #0]
 80170c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170ca:	69db      	ldr	r3, [r3, #28]
 80170cc:	f003 0301 	and.w	r3, r3, #1
 80170d0:	2b01      	cmp	r3, #1
 80170d2:	d10a      	bne.n	80170ea <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80170d4:	687b      	ldr	r3, [r7, #4]
 80170d6:	681b      	ldr	r3, [r3, #0]
 80170d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170dc:	461a      	mov	r2, r3
 80170de:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80170e2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 80170e4:	6878      	ldr	r0, [r7, #4]
 80170e6:	f000 f885 	bl	80171f4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 80170ea:	687b      	ldr	r3, [r7, #4]
 80170ec:	681b      	ldr	r3, [r3, #0]
 80170ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170f2:	695b      	ldr	r3, [r3, #20]
 80170f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80170f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80170fc:	d14c      	bne.n	8017198 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017106:	69db      	ldr	r3, [r3, #28]
 8017108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 801710c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8017110:	d142      	bne.n	8017198 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8017112:	687b      	ldr	r3, [r7, #4]
 8017114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8017118:	f043 0208 	orr.w	r2, r3, #8
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	681b      	ldr	r3, [r3, #0]
 8017126:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801712a:	695b      	ldr	r3, [r3, #20]
 801712c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8017134:	d11a      	bne.n	801716c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	681b      	ldr	r3, [r3, #0]
 801713a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801713e:	695a      	ldr	r2, [r3, #20]
 8017140:	4b2a      	ldr	r3, [pc, #168]	; (80171ec <HAL_ETH_IRQHandler+0x17c>)
 8017142:	4013      	ands	r3, r2
 8017144:	687a      	ldr	r2, [r7, #4]
 8017146:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 801714a:	687b      	ldr	r3, [r7, #4]
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017152:	69db      	ldr	r3, [r3, #28]
 8017154:	687a      	ldr	r2, [r7, #4]
 8017156:	6812      	ldr	r2, [r2, #0]
 8017158:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 801715c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017160:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8017162:	687b      	ldr	r3, [r7, #4]
 8017164:	22e0      	movs	r2, #224	; 0xe0
 8017166:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 801716a:	e012      	b.n	8017192 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	681b      	ldr	r3, [r3, #0]
 8017170:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017174:	695a      	ldr	r2, [r3, #20]
 8017176:	f248 6380 	movw	r3, #34432	; 0x8680
 801717a:	4013      	ands	r3, r2
 801717c:	687a      	ldr	r2, [r7, #4]
 801717e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801718a:	461a      	mov	r2, r3
 801718c:	f248 6380 	movw	r3, #34432	; 0x8680
 8017190:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8017192:	6878      	ldr	r0, [r7, #4]
 8017194:	f000 f842 	bl	801721c <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	681b      	ldr	r3, [r3, #0]
 801719c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801719e:	f003 0308 	and.w	r3, r3, #8
 80171a2:	2b08      	cmp	r3, #8
 80171a4:	d10e      	bne.n	80171c4 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80171ac:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80171b6:	6878      	ldr	r0, [r7, #4]
 80171b8:	f000 f83a 	bl	8017230 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	2200      	movs	r2, #0
 80171c0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80171c4:	4b0a      	ldr	r3, [pc, #40]	; (80171f0 <HAL_ETH_IRQHandler+0x180>)
 80171c6:	695b      	ldr	r3, [r3, #20]
 80171c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d006      	beq.n	80171de <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80171d0:	4b07      	ldr	r3, [pc, #28]	; (80171f0 <HAL_ETH_IRQHandler+0x180>)
 80171d2:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80171d6:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80171d8:	6878      	ldr	r0, [r7, #4]
 80171da:	f000 f833 	bl	8017244 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80171de:	bf00      	nop
 80171e0:	3708      	adds	r7, #8
 80171e2:	46bd      	mov	sp, r7
 80171e4:	bd80      	pop	{r7, pc}
 80171e6:	bf00      	nop
 80171e8:	00010040 	.word	0x00010040
 80171ec:	007e2000 	.word	0x007e2000
 80171f0:	40013c00 	.word	0x40013c00

080171f4 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 80171f4:	b480      	push	{r7}
 80171f6:	b083      	sub	sp, #12
 80171f8:	af00      	add	r7, sp, #0
 80171fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 80171fc:	bf00      	nop
 80171fe:	370c      	adds	r7, #12
 8017200:	46bd      	mov	sp, r7
 8017202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017206:	4770      	bx	lr

08017208 <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8017208:	b480      	push	{r7}
 801720a:	b083      	sub	sp, #12
 801720c:	af00      	add	r7, sp, #0
 801720e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8017210:	bf00      	nop
 8017212:	370c      	adds	r7, #12
 8017214:	46bd      	mov	sp, r7
 8017216:	f85d 7b04 	ldr.w	r7, [sp], #4
 801721a:	4770      	bx	lr

0801721c <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 801721c:	b480      	push	{r7}
 801721e:	b083      	sub	sp, #12
 8017220:	af00      	add	r7, sp, #0
 8017222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8017224:	bf00      	nop
 8017226:	370c      	adds	r7, #12
 8017228:	46bd      	mov	sp, r7
 801722a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801722e:	4770      	bx	lr

08017230 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8017230:	b480      	push	{r7}
 8017232:	b083      	sub	sp, #12
 8017234:	af00      	add	r7, sp, #0
 8017236:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8017238:	bf00      	nop
 801723a:	370c      	adds	r7, #12
 801723c:	46bd      	mov	sp, r7
 801723e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017242:	4770      	bx	lr

08017244 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8017244:	b480      	push	{r7}
 8017246:	b083      	sub	sp, #12
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 801724c:	bf00      	nop
 801724e:	370c      	adds	r7, #12
 8017250:	46bd      	mov	sp, r7
 8017252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017256:	4770      	bx	lr

08017258 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8017258:	b580      	push	{r7, lr}
 801725a:	b086      	sub	sp, #24
 801725c:	af00      	add	r7, sp, #0
 801725e:	60f8      	str	r0, [r7, #12]
 8017260:	60b9      	str	r1, [r7, #8]
 8017262:	607a      	str	r2, [r7, #4]
 8017264:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	681b      	ldr	r3, [r3, #0]
 801726a:	691b      	ldr	r3, [r3, #16]
 801726c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 801726e:	697b      	ldr	r3, [r7, #20]
 8017270:	f003 031c 	and.w	r3, r3, #28
 8017274:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8017276:	68bb      	ldr	r3, [r7, #8]
 8017278:	02db      	lsls	r3, r3, #11
 801727a:	b29b      	uxth	r3, r3
 801727c:	697a      	ldr	r2, [r7, #20]
 801727e:	4313      	orrs	r3, r2
 8017280:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	019b      	lsls	r3, r3, #6
 8017286:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 801728a:	697a      	ldr	r2, [r7, #20]
 801728c:	4313      	orrs	r3, r2
 801728e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8017290:	697b      	ldr	r3, [r7, #20]
 8017292:	f023 0302 	bic.w	r3, r3, #2
 8017296:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8017298:	697b      	ldr	r3, [r7, #20]
 801729a:	f043 0301 	orr.w	r3, r3, #1
 801729e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80172a0:	68fb      	ldr	r3, [r7, #12]
 80172a2:	681b      	ldr	r3, [r3, #0]
 80172a4:	697a      	ldr	r2, [r7, #20]
 80172a6:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 80172a8:	f7fe fabc 	bl	8015824 <HAL_GetTick>
 80172ac:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80172ae:	e00d      	b.n	80172cc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80172b0:	f7fe fab8 	bl	8015824 <HAL_GetTick>
 80172b4:	4602      	mov	r2, r0
 80172b6:	693b      	ldr	r3, [r7, #16]
 80172b8:	1ad3      	subs	r3, r2, r3
 80172ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80172be:	d301      	bcc.n	80172c4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80172c0:	2301      	movs	r3, #1
 80172c2:	e010      	b.n	80172e6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	681b      	ldr	r3, [r3, #0]
 80172c8:	691b      	ldr	r3, [r3, #16]
 80172ca:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80172cc:	697b      	ldr	r3, [r7, #20]
 80172ce:	f003 0301 	and.w	r3, r3, #1
 80172d2:	2b00      	cmp	r3, #0
 80172d4:	d1ec      	bne.n	80172b0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80172d6:	68fb      	ldr	r3, [r7, #12]
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	695b      	ldr	r3, [r3, #20]
 80172dc:	b29b      	uxth	r3, r3
 80172de:	461a      	mov	r2, r3
 80172e0:	683b      	ldr	r3, [r7, #0]
 80172e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80172e4:	2300      	movs	r3, #0
}
 80172e6:	4618      	mov	r0, r3
 80172e8:	3718      	adds	r7, #24
 80172ea:	46bd      	mov	sp, r7
 80172ec:	bd80      	pop	{r7, pc}

080172ee <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80172ee:	b580      	push	{r7, lr}
 80172f0:	b086      	sub	sp, #24
 80172f2:	af00      	add	r7, sp, #0
 80172f4:	60f8      	str	r0, [r7, #12]
 80172f6:	60b9      	str	r1, [r7, #8]
 80172f8:	607a      	str	r2, [r7, #4]
 80172fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	691b      	ldr	r3, [r3, #16]
 8017302:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8017304:	697b      	ldr	r3, [r7, #20]
 8017306:	f003 031c 	and.w	r3, r3, #28
 801730a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 801730c:	68bb      	ldr	r3, [r7, #8]
 801730e:	02db      	lsls	r3, r3, #11
 8017310:	b29b      	uxth	r3, r3
 8017312:	697a      	ldr	r2, [r7, #20]
 8017314:	4313      	orrs	r3, r2
 8017316:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	019b      	lsls	r3, r3, #6
 801731c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8017320:	697a      	ldr	r2, [r7, #20]
 8017322:	4313      	orrs	r3, r2
 8017324:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8017326:	697b      	ldr	r3, [r7, #20]
 8017328:	f043 0302 	orr.w	r3, r3, #2
 801732c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 801732e:	697b      	ldr	r3, [r7, #20]
 8017330:	f043 0301 	orr.w	r3, r3, #1
 8017334:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8017336:	683b      	ldr	r3, [r7, #0]
 8017338:	b29a      	uxth	r2, r3
 801733a:	68fb      	ldr	r3, [r7, #12]
 801733c:	681b      	ldr	r3, [r3, #0]
 801733e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8017340:	68fb      	ldr	r3, [r7, #12]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	697a      	ldr	r2, [r7, #20]
 8017346:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8017348:	f7fe fa6c 	bl	8015824 <HAL_GetTick>
 801734c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801734e:	e00d      	b.n	801736c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8017350:	f7fe fa68 	bl	8015824 <HAL_GetTick>
 8017354:	4602      	mov	r2, r0
 8017356:	693b      	ldr	r3, [r7, #16]
 8017358:	1ad3      	subs	r3, r2, r3
 801735a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801735e:	d301      	bcc.n	8017364 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8017360:	2301      	movs	r3, #1
 8017362:	e009      	b.n	8017378 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8017364:	68fb      	ldr	r3, [r7, #12]
 8017366:	681b      	ldr	r3, [r3, #0]
 8017368:	691b      	ldr	r3, [r3, #16]
 801736a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 801736c:	697b      	ldr	r3, [r7, #20]
 801736e:	f003 0301 	and.w	r3, r3, #1
 8017372:	2b00      	cmp	r3, #0
 8017374:	d1ec      	bne.n	8017350 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8017376:	2300      	movs	r3, #0
}
 8017378:	4618      	mov	r0, r3
 801737a:	3718      	adds	r7, #24
 801737c:	46bd      	mov	sp, r7
 801737e:	bd80      	pop	{r7, pc}

08017380 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8017380:	b480      	push	{r7}
 8017382:	b083      	sub	sp, #12
 8017384:	af00      	add	r7, sp, #0
 8017386:	6078      	str	r0, [r7, #4]
 8017388:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	2b00      	cmp	r3, #0
 801738e:	d101      	bne.n	8017394 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8017390:	2301      	movs	r3, #1
 8017392:	e0d9      	b.n	8017548 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f003 0310 	and.w	r3, r3, #16
 801739e:	2b00      	cmp	r3, #0
 80173a0:	bf14      	ite	ne
 80173a2:	2301      	movne	r3, #1
 80173a4:	2300      	moveq	r3, #0
 80173a6:	b2db      	uxtb	r3, r3
 80173a8:	461a      	mov	r2, r3
 80173aa:	683b      	ldr	r3, [r7, #0]
 80173ac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	681b      	ldr	r3, [r3, #0]
 80173b6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80173ba:	683b      	ldr	r3, [r7, #0]
 80173bc:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	681b      	ldr	r3, [r3, #0]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80173c8:	2b00      	cmp	r3, #0
 80173ca:	bf0c      	ite	eq
 80173cc:	2301      	moveq	r3, #1
 80173ce:	2300      	movne	r3, #0
 80173d0:	b2db      	uxtb	r3, r3
 80173d2:	461a      	mov	r2, r3
 80173d4:	683b      	ldr	r3, [r7, #0]
 80173d6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	681b      	ldr	r3, [r3, #0]
 80173de:	681b      	ldr	r3, [r3, #0]
 80173e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	bf14      	ite	ne
 80173e8:	2301      	movne	r3, #1
 80173ea:	2300      	moveq	r3, #0
 80173ec:	b2db      	uxtb	r3, r3
 80173ee:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80173f0:	683b      	ldr	r3, [r7, #0]
 80173f2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80173f4:	687b      	ldr	r3, [r7, #4]
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	681b      	ldr	r3, [r3, #0]
 80173fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80173fe:	2b00      	cmp	r3, #0
 8017400:	bf0c      	ite	eq
 8017402:	2301      	moveq	r3, #1
 8017404:	2300      	movne	r3, #0
 8017406:	b2db      	uxtb	r3, r3
 8017408:	461a      	mov	r2, r3
 801740a:	683b      	ldr	r3, [r7, #0]
 801740c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 801740e:	687b      	ldr	r3, [r7, #4]
 8017410:	681b      	ldr	r3, [r3, #0]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8017418:	2b00      	cmp	r3, #0
 801741a:	bf14      	ite	ne
 801741c:	2301      	movne	r3, #1
 801741e:	2300      	moveq	r3, #0
 8017420:	b2db      	uxtb	r3, r3
 8017422:	461a      	mov	r2, r3
 8017424:	683b      	ldr	r3, [r7, #0]
 8017426:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8017428:	687b      	ldr	r3, [r7, #4]
 801742a:	681b      	ldr	r3, [r3, #0]
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	681b      	ldr	r3, [r3, #0]
 801743c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8017440:	683b      	ldr	r3, [r7, #0]
 8017442:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8017444:	687b      	ldr	r3, [r7, #4]
 8017446:	681b      	ldr	r3, [r3, #0]
 8017448:	681b      	ldr	r3, [r3, #0]
 801744a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801744e:	2b00      	cmp	r3, #0
 8017450:	bf0c      	ite	eq
 8017452:	2301      	moveq	r3, #1
 8017454:	2300      	movne	r3, #0
 8017456:	b2db      	uxtb	r3, r3
 8017458:	461a      	mov	r2, r3
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 801745e:	687b      	ldr	r3, [r7, #4]
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	681b      	ldr	r3, [r3, #0]
 8017464:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8017468:	2b00      	cmp	r3, #0
 801746a:	bf0c      	ite	eq
 801746c:	2301      	moveq	r3, #1
 801746e:	2300      	movne	r3, #0
 8017470:	b2db      	uxtb	r3, r3
 8017472:	461a      	mov	r2, r3
 8017474:	683b      	ldr	r3, [r7, #0]
 8017476:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8017478:	687b      	ldr	r3, [r7, #4]
 801747a:	681b      	ldr	r3, [r3, #0]
 801747c:	681b      	ldr	r3, [r3, #0]
 801747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8017482:	2b00      	cmp	r3, #0
 8017484:	bf14      	ite	ne
 8017486:	2301      	movne	r3, #1
 8017488:	2300      	moveq	r3, #0
 801748a:	b2db      	uxtb	r3, r3
 801748c:	461a      	mov	r2, r3
 801748e:	683b      	ldr	r3, [r7, #0]
 8017490:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	681b      	ldr	r3, [r3, #0]
 8017496:	681b      	ldr	r3, [r3, #0]
 8017498:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 801749c:	683b      	ldr	r3, [r7, #0]
 801749e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	bf14      	ite	ne
 80174ae:	2301      	movne	r3, #1
 80174b0:	2300      	moveq	r3, #0
 80174b2:	b2db      	uxtb	r3, r3
 80174b4:	461a      	mov	r2, r3
 80174b6:	683b      	ldr	r3, [r7, #0]
 80174b8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	681b      	ldr	r3, [r3, #0]
 80174be:	699b      	ldr	r3, [r3, #24]
 80174c0:	f003 0302 	and.w	r3, r3, #2
 80174c4:	2b00      	cmp	r3, #0
 80174c6:	bf14      	ite	ne
 80174c8:	2301      	movne	r3, #1
 80174ca:	2300      	moveq	r3, #0
 80174cc:	b2db      	uxtb	r3, r3
 80174ce:	461a      	mov	r2, r3
 80174d0:	683b      	ldr	r3, [r7, #0]
 80174d2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	681b      	ldr	r3, [r3, #0]
 80174da:	699b      	ldr	r3, [r3, #24]
 80174dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80174e0:	2b00      	cmp	r3, #0
 80174e2:	bf0c      	ite	eq
 80174e4:	2301      	moveq	r3, #1
 80174e6:	2300      	movne	r3, #0
 80174e8:	b2db      	uxtb	r3, r3
 80174ea:	461a      	mov	r2, r3
 80174ec:	683b      	ldr	r3, [r7, #0]
 80174ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80174f2:	687b      	ldr	r3, [r7, #4]
 80174f4:	681b      	ldr	r3, [r3, #0]
 80174f6:	699b      	ldr	r3, [r3, #24]
 80174f8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80174fc:	683b      	ldr	r3, [r7, #0]
 80174fe:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8017500:	687b      	ldr	r3, [r7, #4]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	699b      	ldr	r3, [r3, #24]
 8017506:	0c1b      	lsrs	r3, r3, #16
 8017508:	b29a      	uxth	r2, r3
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	699b      	ldr	r3, [r3, #24]
 8017514:	f003 0304 	and.w	r3, r3, #4
 8017518:	2b00      	cmp	r3, #0
 801751a:	bf14      	ite	ne
 801751c:	2301      	movne	r3, #1
 801751e:	2300      	moveq	r3, #0
 8017520:	b2db      	uxtb	r3, r3
 8017522:	461a      	mov	r2, r3
 8017524:	683b      	ldr	r3, [r7, #0]
 8017526:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 801752a:	687b      	ldr	r3, [r7, #4]
 801752c:	681b      	ldr	r3, [r3, #0]
 801752e:	699b      	ldr	r3, [r3, #24]
 8017530:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8017534:	2b00      	cmp	r3, #0
 8017536:	bf14      	ite	ne
 8017538:	2301      	movne	r3, #1
 801753a:	2300      	moveq	r3, #0
 801753c:	b2db      	uxtb	r3, r3
 801753e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8017540:	683b      	ldr	r3, [r7, #0]
 8017542:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8017546:	2300      	movs	r3, #0
}
 8017548:	4618      	mov	r0, r3
 801754a:	370c      	adds	r7, #12
 801754c:	46bd      	mov	sp, r7
 801754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017552:	4770      	bx	lr

08017554 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8017554:	b580      	push	{r7, lr}
 8017556:	b082      	sub	sp, #8
 8017558:	af00      	add	r7, sp, #0
 801755a:	6078      	str	r0, [r7, #4]
 801755c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 801755e:	683b      	ldr	r3, [r7, #0]
 8017560:	2b00      	cmp	r3, #0
 8017562:	d101      	bne.n	8017568 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8017564:	2301      	movs	r3, #1
 8017566:	e00b      	b.n	8017580 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8017568:	687b      	ldr	r3, [r7, #4]
 801756a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801756e:	2b10      	cmp	r3, #16
 8017570:	d105      	bne.n	801757e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8017572:	6839      	ldr	r1, [r7, #0]
 8017574:	6878      	ldr	r0, [r7, #4]
 8017576:	f000 f883 	bl	8017680 <ETH_SetMACConfig>

    return HAL_OK;
 801757a:	2300      	movs	r3, #0
 801757c:	e000      	b.n	8017580 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 801757e:	2301      	movs	r3, #1
  }
}
 8017580:	4618      	mov	r0, r3
 8017582:	3708      	adds	r7, #8
 8017584:	46bd      	mov	sp, r7
 8017586:	bd80      	pop	{r7, pc}

08017588 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8017588:	b580      	push	{r7, lr}
 801758a:	b084      	sub	sp, #16
 801758c:	af00      	add	r7, sp, #0
 801758e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	681b      	ldr	r3, [r3, #0]
 8017594:	691b      	ldr	r3, [r3, #16]
 8017596:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8017598:	68fb      	ldr	r3, [r7, #12]
 801759a:	f023 031c 	bic.w	r3, r3, #28
 801759e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80175a0:	f002 f916 	bl	80197d0 <HAL_RCC_GetHCLKFreq>
 80175a4:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	4a1d      	ldr	r2, [pc, #116]	; (8017620 <HAL_ETH_SetMDIOClockRange+0x98>)
 80175aa:	4293      	cmp	r3, r2
 80175ac:	d908      	bls.n	80175c0 <HAL_ETH_SetMDIOClockRange+0x38>
 80175ae:	68bb      	ldr	r3, [r7, #8]
 80175b0:	4a1c      	ldr	r2, [pc, #112]	; (8017624 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80175b2:	4293      	cmp	r3, r2
 80175b4:	d804      	bhi.n	80175c0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	f043 0308 	orr.w	r3, r3, #8
 80175bc:	60fb      	str	r3, [r7, #12]
 80175be:	e027      	b.n	8017610 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80175c0:	68bb      	ldr	r3, [r7, #8]
 80175c2:	4a18      	ldr	r2, [pc, #96]	; (8017624 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80175c4:	4293      	cmp	r3, r2
 80175c6:	d908      	bls.n	80175da <HAL_ETH_SetMDIOClockRange+0x52>
 80175c8:	68bb      	ldr	r3, [r7, #8]
 80175ca:	4a17      	ldr	r2, [pc, #92]	; (8017628 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80175cc:	4293      	cmp	r3, r2
 80175ce:	d204      	bcs.n	80175da <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80175d0:	68fb      	ldr	r3, [r7, #12]
 80175d2:	f043 030c 	orr.w	r3, r3, #12
 80175d6:	60fb      	str	r3, [r7, #12]
 80175d8:	e01a      	b.n	8017610 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80175da:	68bb      	ldr	r3, [r7, #8]
 80175dc:	4a12      	ldr	r2, [pc, #72]	; (8017628 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80175de:	4293      	cmp	r3, r2
 80175e0:	d303      	bcc.n	80175ea <HAL_ETH_SetMDIOClockRange+0x62>
 80175e2:	68bb      	ldr	r3, [r7, #8]
 80175e4:	4a11      	ldr	r2, [pc, #68]	; (801762c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80175e6:	4293      	cmp	r3, r2
 80175e8:	d911      	bls.n	801760e <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80175ea:	68bb      	ldr	r3, [r7, #8]
 80175ec:	4a0f      	ldr	r2, [pc, #60]	; (801762c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80175ee:	4293      	cmp	r3, r2
 80175f0:	d908      	bls.n	8017604 <HAL_ETH_SetMDIOClockRange+0x7c>
 80175f2:	68bb      	ldr	r3, [r7, #8]
 80175f4:	4a0e      	ldr	r2, [pc, #56]	; (8017630 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80175f6:	4293      	cmp	r3, r2
 80175f8:	d804      	bhi.n	8017604 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80175fa:	68fb      	ldr	r3, [r7, #12]
 80175fc:	f043 0304 	orr.w	r3, r3, #4
 8017600:	60fb      	str	r3, [r7, #12]
 8017602:	e005      	b.n	8017610 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	f043 0310 	orr.w	r3, r3, #16
 801760a:	60fb      	str	r3, [r7, #12]
 801760c:	e000      	b.n	8017610 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 801760e:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	681b      	ldr	r3, [r3, #0]
 8017614:	68fa      	ldr	r2, [r7, #12]
 8017616:	611a      	str	r2, [r3, #16]
}
 8017618:	bf00      	nop
 801761a:	3710      	adds	r7, #16
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}
 8017620:	01312cff 	.word	0x01312cff
 8017624:	02160ebf 	.word	0x02160ebf
 8017628:	03938700 	.word	0x03938700
 801762c:	05f5e0ff 	.word	0x05f5e0ff
 8017630:	08f0d17f 	.word	0x08f0d17f

08017634 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8017634:	b580      	push	{r7, lr}
 8017636:	b084      	sub	sp, #16
 8017638:	af00      	add	r7, sp, #0
 801763a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 801763c:	2300      	movs	r3, #0
 801763e:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8017640:	687b      	ldr	r3, [r7, #4]
 8017642:	681b      	ldr	r3, [r3, #0]
 8017644:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017648:	699b      	ldr	r3, [r3, #24]
 801764a:	687a      	ldr	r2, [r7, #4]
 801764c:	6812      	ldr	r2, [r2, #0]
 801764e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017656:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8017658:	687b      	ldr	r3, [r7, #4]
 801765a:	681b      	ldr	r3, [r3, #0]
 801765c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017660:	699b      	ldr	r3, [r3, #24]
 8017662:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017664:	2001      	movs	r0, #1
 8017666:	f7fe f8e9 	bl	801583c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 801766a:	687b      	ldr	r3, [r7, #4]
 801766c:	681a      	ldr	r2, [r3, #0]
 801766e:	68fb      	ldr	r3, [r7, #12]
 8017670:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8017674:	6193      	str	r3, [r2, #24]
}
 8017676:	bf00      	nop
 8017678:	3710      	adds	r7, #16
 801767a:	46bd      	mov	sp, r7
 801767c:	bd80      	pop	{r7, pc}
	...

08017680 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8017680:	b580      	push	{r7, lr}
 8017682:	b084      	sub	sp, #16
 8017684:	af00      	add	r7, sp, #0
 8017686:	6078      	str	r0, [r7, #4]
 8017688:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 801768a:	687b      	ldr	r3, [r7, #4]
 801768c:	681b      	ldr	r3, [r3, #0]
 801768e:	681b      	ldr	r3, [r3, #0]
 8017690:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8017692:	68fa      	ldr	r2, [r7, #12]
 8017694:	4b51      	ldr	r3, [pc, #324]	; (80177dc <ETH_SetMACConfig+0x15c>)
 8017696:	4013      	ands	r3, r2
 8017698:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801769a:	683b      	ldr	r3, [r7, #0]
 801769c:	7c1b      	ldrb	r3, [r3, #16]
 801769e:	2b00      	cmp	r3, #0
 80176a0:	d102      	bne.n	80176a8 <ETH_SetMACConfig+0x28>
 80176a2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80176a6:	e000      	b.n	80176aa <ETH_SetMACConfig+0x2a>
 80176a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80176aa:	683b      	ldr	r3, [r7, #0]
 80176ac:	7c5b      	ldrb	r3, [r3, #17]
 80176ae:	2b00      	cmp	r3, #0
 80176b0:	d102      	bne.n	80176b8 <ETH_SetMACConfig+0x38>
 80176b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80176b6:	e000      	b.n	80176ba <ETH_SetMACConfig+0x3a>
 80176b8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80176ba:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80176bc:	683b      	ldr	r3, [r7, #0]
 80176be:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80176c0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80176c2:	683b      	ldr	r3, [r7, #0]
 80176c4:	7fdb      	ldrb	r3, [r3, #31]
 80176c6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80176c8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80176ca:	683b      	ldr	r3, [r7, #0]
 80176cc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80176ce:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80176d0:	683a      	ldr	r2, [r7, #0]
 80176d2:	7f92      	ldrb	r2, [r2, #30]
 80176d4:	2a00      	cmp	r2, #0
 80176d6:	d102      	bne.n	80176de <ETH_SetMACConfig+0x5e>
 80176d8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80176dc:	e000      	b.n	80176e0 <ETH_SetMACConfig+0x60>
 80176de:	2200      	movs	r2, #0
                        macconf->Speed |
 80176e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80176e2:	683b      	ldr	r3, [r7, #0]
 80176e4:	7f1b      	ldrb	r3, [r3, #28]
 80176e6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80176e8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80176ea:	683b      	ldr	r3, [r7, #0]
 80176ec:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80176ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80176f0:	683b      	ldr	r3, [r7, #0]
 80176f2:	791b      	ldrb	r3, [r3, #4]
 80176f4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80176f6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80176f8:	683a      	ldr	r2, [r7, #0]
 80176fa:	f892 2020 	ldrb.w	r2, [r2, #32]
 80176fe:	2a00      	cmp	r2, #0
 8017700:	d102      	bne.n	8017708 <ETH_SetMACConfig+0x88>
 8017702:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017706:	e000      	b.n	801770a <ETH_SetMACConfig+0x8a>
 8017708:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801770a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801770c:	683b      	ldr	r3, [r7, #0]
 801770e:	7bdb      	ldrb	r3, [r3, #15]
 8017710:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017712:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8017714:	683b      	ldr	r3, [r7, #0]
 8017716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017718:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801771a:	683b      	ldr	r3, [r7, #0]
 801771c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017720:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8017722:	4313      	orrs	r3, r2
 8017724:	68fa      	ldr	r2, [r7, #12]
 8017726:	4313      	orrs	r3, r2
 8017728:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	68fa      	ldr	r2, [r7, #12]
 8017730:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8017732:	687b      	ldr	r3, [r7, #4]
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	681b      	ldr	r3, [r3, #0]
 8017738:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 801773a:	2001      	movs	r0, #1
 801773c:	f7fe f87e 	bl	801583c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8017740:	687b      	ldr	r3, [r7, #4]
 8017742:	681b      	ldr	r3, [r3, #0]
 8017744:	68fa      	ldr	r2, [r7, #12]
 8017746:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	699b      	ldr	r3, [r3, #24]
 801774e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8017750:	68fa      	ldr	r2, [r7, #12]
 8017752:	f64f 7341 	movw	r3, #65345	; 0xff41
 8017756:	4013      	ands	r3, r2
 8017758:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 801775a:	683b      	ldr	r3, [r7, #0]
 801775c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801775e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8017760:	683a      	ldr	r2, [r7, #0]
 8017762:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8017766:	2a00      	cmp	r2, #0
 8017768:	d101      	bne.n	801776e <ETH_SetMACConfig+0xee>
 801776a:	2280      	movs	r2, #128	; 0x80
 801776c:	e000      	b.n	8017770 <ETH_SetMACConfig+0xf0>
 801776e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017770:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8017772:	683b      	ldr	r3, [r7, #0]
 8017774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8017776:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8017778:	683a      	ldr	r2, [r7, #0]
 801777a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 801777e:	2a01      	cmp	r2, #1
 8017780:	d101      	bne.n	8017786 <ETH_SetMACConfig+0x106>
 8017782:	2208      	movs	r2, #8
 8017784:	e000      	b.n	8017788 <ETH_SetMACConfig+0x108>
 8017786:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8017788:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 801778a:	683a      	ldr	r2, [r7, #0]
 801778c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8017790:	2a01      	cmp	r2, #1
 8017792:	d101      	bne.n	8017798 <ETH_SetMACConfig+0x118>
 8017794:	2204      	movs	r2, #4
 8017796:	e000      	b.n	801779a <ETH_SetMACConfig+0x11a>
 8017798:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801779a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 801779c:	683a      	ldr	r2, [r7, #0]
 801779e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80177a2:	2a01      	cmp	r2, #1
 80177a4:	d101      	bne.n	80177aa <ETH_SetMACConfig+0x12a>
 80177a6:	2202      	movs	r2, #2
 80177a8:	e000      	b.n	80177ac <ETH_SetMACConfig+0x12c>
 80177aa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80177ac:	4313      	orrs	r3, r2
 80177ae:	68fa      	ldr	r2, [r7, #12]
 80177b0:	4313      	orrs	r3, r2
 80177b2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80177b4:	687b      	ldr	r3, [r7, #4]
 80177b6:	681b      	ldr	r3, [r3, #0]
 80177b8:	68fa      	ldr	r2, [r7, #12]
 80177ba:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	681b      	ldr	r3, [r3, #0]
 80177c0:	699b      	ldr	r3, [r3, #24]
 80177c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80177c4:	2001      	movs	r0, #1
 80177c6:	f7fe f839 	bl	801583c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	68fa      	ldr	r2, [r7, #12]
 80177d0:	619a      	str	r2, [r3, #24]
}
 80177d2:	bf00      	nop
 80177d4:	3710      	adds	r7, #16
 80177d6:	46bd      	mov	sp, r7
 80177d8:	bd80      	pop	{r7, pc}
 80177da:	bf00      	nop
 80177dc:	ff20810f 	.word	0xff20810f

080177e0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80177e0:	b580      	push	{r7, lr}
 80177e2:	b084      	sub	sp, #16
 80177e4:	af00      	add	r7, sp, #0
 80177e6:	6078      	str	r0, [r7, #4]
 80177e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80177ea:	687b      	ldr	r3, [r7, #4]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80177f2:	699b      	ldr	r3, [r3, #24]
 80177f4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80177f6:	68fa      	ldr	r2, [r7, #12]
 80177f8:	4b3d      	ldr	r3, [pc, #244]	; (80178f0 <ETH_SetDMAConfig+0x110>)
 80177fa:	4013      	ands	r3, r2
 80177fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	7b1b      	ldrb	r3, [r3, #12]
 8017802:	2b00      	cmp	r3, #0
 8017804:	d102      	bne.n	801780c <ETH_SetDMAConfig+0x2c>
 8017806:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801780a:	e000      	b.n	801780e <ETH_SetDMAConfig+0x2e>
 801780c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801780e:	683b      	ldr	r3, [r7, #0]
 8017810:	7b5b      	ldrb	r3, [r3, #13]
 8017812:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017814:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8017816:	683a      	ldr	r2, [r7, #0]
 8017818:	7f52      	ldrb	r2, [r2, #29]
 801781a:	2a00      	cmp	r2, #0
 801781c:	d102      	bne.n	8017824 <ETH_SetDMAConfig+0x44>
 801781e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017822:	e000      	b.n	8017826 <ETH_SetDMAConfig+0x46>
 8017824:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017826:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017828:	683b      	ldr	r3, [r7, #0]
 801782a:	7b9b      	ldrb	r3, [r3, #14]
 801782c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801782e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8017830:	683b      	ldr	r3, [r7, #0]
 8017832:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8017834:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017836:	683b      	ldr	r3, [r7, #0]
 8017838:	7f1b      	ldrb	r3, [r3, #28]
 801783a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 801783c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801783e:	683b      	ldr	r3, [r7, #0]
 8017840:	7f9b      	ldrb	r3, [r3, #30]
 8017842:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8017844:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8017846:	683b      	ldr	r3, [r7, #0]
 8017848:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 801784a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 801784c:	683b      	ldr	r3, [r7, #0]
 801784e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8017852:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017854:	4313      	orrs	r3, r2
 8017856:	68fa      	ldr	r2, [r7, #12]
 8017858:	4313      	orrs	r3, r2
 801785a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 801785c:	687b      	ldr	r3, [r7, #4]
 801785e:	681b      	ldr	r3, [r3, #0]
 8017860:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017864:	461a      	mov	r2, r3
 8017866:	68fb      	ldr	r3, [r7, #12]
 8017868:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801786a:	687b      	ldr	r3, [r7, #4]
 801786c:	681b      	ldr	r3, [r3, #0]
 801786e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017872:	699b      	ldr	r3, [r3, #24]
 8017874:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017876:	2001      	movs	r0, #1
 8017878:	f7fd ffe0 	bl	801583c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	681b      	ldr	r3, [r3, #0]
 8017880:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017884:	461a      	mov	r2, r3
 8017886:	68fb      	ldr	r3, [r7, #12]
 8017888:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801788a:	683b      	ldr	r3, [r7, #0]
 801788c:	791b      	ldrb	r3, [r3, #4]
 801788e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017894:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8017896:	683b      	ldr	r3, [r7, #0]
 8017898:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801789a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 801789c:	683b      	ldr	r3, [r7, #0]
 801789e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80178a0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80178a2:	683b      	ldr	r3, [r7, #0]
 80178a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80178a8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80178aa:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80178ac:	683b      	ldr	r3, [r7, #0]
 80178ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80178b0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80178b2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80178b4:	683b      	ldr	r3, [r7, #0]
 80178b6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80178b8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80178ba:	687a      	ldr	r2, [r7, #4]
 80178bc:	6812      	ldr	r2, [r2, #0]
 80178be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80178c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80178c6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80178d4:	2001      	movs	r0, #1
 80178d6:	f7fd ffb1 	bl	801583c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80178da:	687b      	ldr	r3, [r7, #4]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80178e2:	461a      	mov	r2, r3
 80178e4:	68fb      	ldr	r3, [r7, #12]
 80178e6:	6013      	str	r3, [r2, #0]
}
 80178e8:	bf00      	nop
 80178ea:	3710      	adds	r7, #16
 80178ec:	46bd      	mov	sp, r7
 80178ee:	bd80      	pop	{r7, pc}
 80178f0:	f8de3f23 	.word	0xf8de3f23

080178f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80178f4:	b580      	push	{r7, lr}
 80178f6:	b0a6      	sub	sp, #152	; 0x98
 80178f8:	af00      	add	r7, sp, #0
 80178fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80178fc:	2301      	movs	r3, #1
 80178fe:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8017902:	2301      	movs	r3, #1
 8017904:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8017908:	2300      	movs	r3, #0
 801790a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 801790c:	2300      	movs	r3, #0
 801790e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8017912:	2301      	movs	r3, #1
 8017914:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8017918:	2300      	movs	r3, #0
 801791a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 801791e:	2301      	movs	r3, #1
 8017920:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017924:	2300      	movs	r3, #0
 8017926:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801792a:	2300      	movs	r3, #0
 801792c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8017930:	2300      	movs	r3, #0
 8017932:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8017934:	2300      	movs	r3, #0
 8017936:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 801793a:	2300      	movs	r3, #0
 801793c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 801793e:	2300      	movs	r3, #0
 8017940:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8017944:	2300      	movs	r3, #0
 8017946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 801794a:	2300      	movs	r3, #0
 801794c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8017950:	2300      	movs	r3, #0
 8017952:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8017956:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801795a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 801795c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017960:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8017962:	2300      	movs	r3, #0
 8017964:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8017968:	f107 0334 	add.w	r3, r7, #52	; 0x34
 801796c:	4619      	mov	r1, r3
 801796e:	6878      	ldr	r0, [r7, #4]
 8017970:	f7ff fe86 	bl	8017680 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8017974:	2301      	movs	r3, #1
 8017976:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8017978:	2301      	movs	r3, #1
 801797a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 801797c:	2301      	movs	r3, #1
 801797e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8017982:	2301      	movs	r3, #1
 8017984:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8017986:	2300      	movs	r3, #0
 8017988:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 801798a:	2300      	movs	r3, #0
 801798c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8017990:	2300      	movs	r3, #0
 8017992:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8017996:	2300      	movs	r3, #0
 8017998:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801799a:	2301      	movs	r3, #1
 801799c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80179a0:	2301      	movs	r3, #1
 80179a2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80179a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80179a8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80179aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80179ae:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80179b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80179b4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80179b6:	2301      	movs	r3, #1
 80179b8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80179bc:	2300      	movs	r3, #0
 80179be:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80179c0:	2300      	movs	r3, #0
 80179c2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80179c4:	f107 0308 	add.w	r3, r7, #8
 80179c8:	4619      	mov	r1, r3
 80179ca:	6878      	ldr	r0, [r7, #4]
 80179cc:	f7ff ff08 	bl	80177e0 <ETH_SetDMAConfig>
}
 80179d0:	bf00      	nop
 80179d2:	3798      	adds	r7, #152	; 0x98
 80179d4:	46bd      	mov	sp, r7
 80179d6:	bd80      	pop	{r7, pc}

080179d8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80179d8:	b480      	push	{r7}
 80179da:	b087      	sub	sp, #28
 80179dc:	af00      	add	r7, sp, #0
 80179de:	60f8      	str	r0, [r7, #12]
 80179e0:	60b9      	str	r1, [r7, #8]
 80179e2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	3305      	adds	r3, #5
 80179e8:	781b      	ldrb	r3, [r3, #0]
 80179ea:	021b      	lsls	r3, r3, #8
 80179ec:	687a      	ldr	r2, [r7, #4]
 80179ee:	3204      	adds	r2, #4
 80179f0:	7812      	ldrb	r2, [r2, #0]
 80179f2:	4313      	orrs	r3, r2
 80179f4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80179f6:	68ba      	ldr	r2, [r7, #8]
 80179f8:	4b11      	ldr	r3, [pc, #68]	; (8017a40 <ETH_MACAddressConfig+0x68>)
 80179fa:	4413      	add	r3, r2
 80179fc:	461a      	mov	r2, r3
 80179fe:	697b      	ldr	r3, [r7, #20]
 8017a00:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8017a02:	687b      	ldr	r3, [r7, #4]
 8017a04:	3303      	adds	r3, #3
 8017a06:	781b      	ldrb	r3, [r3, #0]
 8017a08:	061a      	lsls	r2, r3, #24
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	3302      	adds	r3, #2
 8017a0e:	781b      	ldrb	r3, [r3, #0]
 8017a10:	041b      	lsls	r3, r3, #16
 8017a12:	431a      	orrs	r2, r3
 8017a14:	687b      	ldr	r3, [r7, #4]
 8017a16:	3301      	adds	r3, #1
 8017a18:	781b      	ldrb	r3, [r3, #0]
 8017a1a:	021b      	lsls	r3, r3, #8
 8017a1c:	4313      	orrs	r3, r2
 8017a1e:	687a      	ldr	r2, [r7, #4]
 8017a20:	7812      	ldrb	r2, [r2, #0]
 8017a22:	4313      	orrs	r3, r2
 8017a24:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8017a26:	68ba      	ldr	r2, [r7, #8]
 8017a28:	4b06      	ldr	r3, [pc, #24]	; (8017a44 <ETH_MACAddressConfig+0x6c>)
 8017a2a:	4413      	add	r3, r2
 8017a2c:	461a      	mov	r2, r3
 8017a2e:	697b      	ldr	r3, [r7, #20]
 8017a30:	6013      	str	r3, [r2, #0]
}
 8017a32:	bf00      	nop
 8017a34:	371c      	adds	r7, #28
 8017a36:	46bd      	mov	sp, r7
 8017a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017a3c:	4770      	bx	lr
 8017a3e:	bf00      	nop
 8017a40:	40028040 	.word	0x40028040
 8017a44:	40028044 	.word	0x40028044

08017a48 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8017a48:	b480      	push	{r7}
 8017a4a:	b085      	sub	sp, #20
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017a50:	2300      	movs	r3, #0
 8017a52:	60fb      	str	r3, [r7, #12]
 8017a54:	e03e      	b.n	8017ad4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	68d9      	ldr	r1, [r3, #12]
 8017a5a:	68fa      	ldr	r2, [r7, #12]
 8017a5c:	4613      	mov	r3, r2
 8017a5e:	009b      	lsls	r3, r3, #2
 8017a60:	4413      	add	r3, r2
 8017a62:	00db      	lsls	r3, r3, #3
 8017a64:	440b      	add	r3, r1
 8017a66:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8017a68:	68bb      	ldr	r3, [r7, #8]
 8017a6a:	2200      	movs	r2, #0
 8017a6c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8017a6e:	68bb      	ldr	r3, [r7, #8]
 8017a70:	2200      	movs	r2, #0
 8017a72:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8017a74:	68bb      	ldr	r3, [r7, #8]
 8017a76:	2200      	movs	r2, #0
 8017a78:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8017a7a:	68bb      	ldr	r3, [r7, #8]
 8017a7c:	2200      	movs	r2, #0
 8017a7e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8017a80:	68b9      	ldr	r1, [r7, #8]
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	68fa      	ldr	r2, [r7, #12]
 8017a86:	3206      	adds	r2, #6
 8017a88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8017a8c:	68bb      	ldr	r3, [r7, #8]
 8017a8e:	681b      	ldr	r3, [r3, #0]
 8017a90:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017a94:	68bb      	ldr	r3, [r7, #8]
 8017a96:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8017a98:	68fb      	ldr	r3, [r7, #12]
 8017a9a:	2b02      	cmp	r3, #2
 8017a9c:	d80c      	bhi.n	8017ab8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	68d9      	ldr	r1, [r3, #12]
 8017aa2:	68fb      	ldr	r3, [r7, #12]
 8017aa4:	1c5a      	adds	r2, r3, #1
 8017aa6:	4613      	mov	r3, r2
 8017aa8:	009b      	lsls	r3, r3, #2
 8017aaa:	4413      	add	r3, r2
 8017aac:	00db      	lsls	r3, r3, #3
 8017aae:	440b      	add	r3, r1
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	68bb      	ldr	r3, [r7, #8]
 8017ab4:	60da      	str	r2, [r3, #12]
 8017ab6:	e004      	b.n	8017ac2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8017ab8:	687b      	ldr	r3, [r7, #4]
 8017aba:	68db      	ldr	r3, [r3, #12]
 8017abc:	461a      	mov	r2, r3
 8017abe:	68bb      	ldr	r3, [r7, #8]
 8017ac0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8017ac2:	68bb      	ldr	r3, [r7, #8]
 8017ac4:	681b      	ldr	r3, [r3, #0]
 8017ac6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8017aca:	68bb      	ldr	r3, [r7, #8]
 8017acc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017ace:	68fb      	ldr	r3, [r7, #12]
 8017ad0:	3301      	adds	r3, #1
 8017ad2:	60fb      	str	r3, [r7, #12]
 8017ad4:	68fb      	ldr	r3, [r7, #12]
 8017ad6:	2b03      	cmp	r3, #3
 8017ad8:	d9bd      	bls.n	8017a56 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	2200      	movs	r2, #0
 8017ade:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	68da      	ldr	r2, [r3, #12]
 8017ae4:	687b      	ldr	r3, [r7, #4]
 8017ae6:	681b      	ldr	r3, [r3, #0]
 8017ae8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017aec:	611a      	str	r2, [r3, #16]
}
 8017aee:	bf00      	nop
 8017af0:	3714      	adds	r7, #20
 8017af2:	46bd      	mov	sp, r7
 8017af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af8:	4770      	bx	lr

08017afa <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8017afa:	b480      	push	{r7}
 8017afc:	b085      	sub	sp, #20
 8017afe:	af00      	add	r7, sp, #0
 8017b00:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017b02:	2300      	movs	r3, #0
 8017b04:	60fb      	str	r3, [r7, #12]
 8017b06:	e046      	b.n	8017b96 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	6919      	ldr	r1, [r3, #16]
 8017b0c:	68fa      	ldr	r2, [r7, #12]
 8017b0e:	4613      	mov	r3, r2
 8017b10:	009b      	lsls	r3, r3, #2
 8017b12:	4413      	add	r3, r2
 8017b14:	00db      	lsls	r3, r3, #3
 8017b16:	440b      	add	r3, r1
 8017b18:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8017b1a:	68bb      	ldr	r3, [r7, #8]
 8017b1c:	2200      	movs	r2, #0
 8017b1e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8017b20:	68bb      	ldr	r3, [r7, #8]
 8017b22:	2200      	movs	r2, #0
 8017b24:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8017b26:	68bb      	ldr	r3, [r7, #8]
 8017b28:	2200      	movs	r2, #0
 8017b2a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8017b2c:	68bb      	ldr	r3, [r7, #8]
 8017b2e:	2200      	movs	r2, #0
 8017b30:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8017b32:	68bb      	ldr	r3, [r7, #8]
 8017b34:	2200      	movs	r2, #0
 8017b36:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8017b38:	68bb      	ldr	r3, [r7, #8]
 8017b3a:	2200      	movs	r2, #0
 8017b3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8017b3e:	68bb      	ldr	r3, [r7, #8]
 8017b40:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8017b44:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8017b4c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017b56:	68bb      	ldr	r3, [r7, #8]
 8017b58:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8017b5a:	68b9      	ldr	r1, [r7, #8]
 8017b5c:	687b      	ldr	r3, [r7, #4]
 8017b5e:	68fa      	ldr	r2, [r7, #12]
 8017b60:	3212      	adds	r2, #18
 8017b62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8017b66:	68fb      	ldr	r3, [r7, #12]
 8017b68:	2b02      	cmp	r3, #2
 8017b6a:	d80c      	bhi.n	8017b86 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8017b6c:	687b      	ldr	r3, [r7, #4]
 8017b6e:	6919      	ldr	r1, [r3, #16]
 8017b70:	68fb      	ldr	r3, [r7, #12]
 8017b72:	1c5a      	adds	r2, r3, #1
 8017b74:	4613      	mov	r3, r2
 8017b76:	009b      	lsls	r3, r3, #2
 8017b78:	4413      	add	r3, r2
 8017b7a:	00db      	lsls	r3, r3, #3
 8017b7c:	440b      	add	r3, r1
 8017b7e:	461a      	mov	r2, r3
 8017b80:	68bb      	ldr	r3, [r7, #8]
 8017b82:	60da      	str	r2, [r3, #12]
 8017b84:	e004      	b.n	8017b90 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8017b86:	687b      	ldr	r3, [r7, #4]
 8017b88:	691b      	ldr	r3, [r3, #16]
 8017b8a:	461a      	mov	r2, r3
 8017b8c:	68bb      	ldr	r3, [r7, #8]
 8017b8e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017b90:	68fb      	ldr	r3, [r7, #12]
 8017b92:	3301      	adds	r3, #1
 8017b94:	60fb      	str	r3, [r7, #12]
 8017b96:	68fb      	ldr	r3, [r7, #12]
 8017b98:	2b03      	cmp	r3, #3
 8017b9a:	d9b5      	bls.n	8017b08 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	2200      	movs	r2, #0
 8017ba0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8017ba2:	687b      	ldr	r3, [r7, #4]
 8017ba4:	2200      	movs	r2, #0
 8017ba6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8017ba8:	687b      	ldr	r3, [r7, #4]
 8017baa:	2200      	movs	r2, #0
 8017bac:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8017bae:	687b      	ldr	r3, [r7, #4]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	2200      	movs	r2, #0
 8017bb8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	691a      	ldr	r2, [r3, #16]
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	681b      	ldr	r3, [r3, #0]
 8017bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017bc6:	60da      	str	r2, [r3, #12]
}
 8017bc8:	bf00      	nop
 8017bca:	3714      	adds	r7, #20
 8017bcc:	46bd      	mov	sp, r7
 8017bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd2:	4770      	bx	lr

08017bd4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8017bd4:	b480      	push	{r7}
 8017bd6:	b08d      	sub	sp, #52	; 0x34
 8017bd8:	af00      	add	r7, sp, #0
 8017bda:	60f8      	str	r0, [r7, #12]
 8017bdc:	60b9      	str	r1, [r7, #8]
 8017bde:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8017be0:	68fb      	ldr	r3, [r7, #12]
 8017be2:	3318      	adds	r3, #24
 8017be4:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	691b      	ldr	r3, [r3, #16]
 8017bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	691b      	ldr	r3, [r3, #16]
 8017bf0:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8017bf2:	2300      	movs	r3, #0
 8017bf4:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017bf6:	697b      	ldr	r3, [r7, #20]
 8017bf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017bfe:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8017c00:	68bb      	ldr	r3, [r7, #8]
 8017c02:	689b      	ldr	r3, [r3, #8]
 8017c04:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8017c06:	2300      	movs	r3, #0
 8017c08:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017c0a:	6a3b      	ldr	r3, [r7, #32]
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017c12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017c16:	d007      	beq.n	8017c28 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017c18:	697a      	ldr	r2, [r7, #20]
 8017c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017c1c:	3304      	adds	r3, #4
 8017c1e:	009b      	lsls	r3, r3, #2
 8017c20:	4413      	add	r3, r2
 8017c22:	685b      	ldr	r3, [r3, #4]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d001      	beq.n	8017c2c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8017c28:	2302      	movs	r3, #2
 8017c2a:	e0ff      	b.n	8017e2c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 8017c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c2e:	3301      	adds	r3, #1
 8017c30:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017c32:	69fb      	ldr	r3, [r7, #28]
 8017c34:	681b      	ldr	r3, [r3, #0]
 8017c36:	461a      	mov	r2, r3
 8017c38:	6a3b      	ldr	r3, [r7, #32]
 8017c3a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017c3c:	6a3b      	ldr	r3, [r7, #32]
 8017c3e:	685a      	ldr	r2, [r3, #4]
 8017c40:	4b7d      	ldr	r3, [pc, #500]	; (8017e38 <ETH_Prepare_Tx_Descriptors+0x264>)
 8017c42:	4013      	ands	r3, r2
 8017c44:	69fa      	ldr	r2, [r7, #28]
 8017c46:	6852      	ldr	r2, [r2, #4]
 8017c48:	431a      	orrs	r2, r3
 8017c4a:	6a3b      	ldr	r3, [r7, #32]
 8017c4c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8017c4e:	68bb      	ldr	r3, [r7, #8]
 8017c50:	681b      	ldr	r3, [r3, #0]
 8017c52:	f003 0301 	and.w	r3, r3, #1
 8017c56:	2b00      	cmp	r3, #0
 8017c58:	d008      	beq.n	8017c6c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8017c5a:	6a3b      	ldr	r3, [r7, #32]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8017c62:	68bb      	ldr	r3, [r7, #8]
 8017c64:	695b      	ldr	r3, [r3, #20]
 8017c66:	431a      	orrs	r2, r3
 8017c68:	6a3b      	ldr	r3, [r7, #32]
 8017c6a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8017c6c:	68bb      	ldr	r3, [r7, #8]
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	f003 0320 	and.w	r3, r3, #32
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d008      	beq.n	8017c8a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8017c78:	6a3b      	ldr	r3, [r7, #32]
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8017c80:	68bb      	ldr	r3, [r7, #8]
 8017c82:	691b      	ldr	r3, [r3, #16]
 8017c84:	431a      	orrs	r2, r3
 8017c86:	6a3b      	ldr	r3, [r7, #32]
 8017c88:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8017c8a:	68bb      	ldr	r3, [r7, #8]
 8017c8c:	681b      	ldr	r3, [r3, #0]
 8017c8e:	f003 0304 	and.w	r3, r3, #4
 8017c92:	2b00      	cmp	r3, #0
 8017c94:	d005      	beq.n	8017ca2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8017c96:	6a3b      	ldr	r3, [r7, #32]
 8017c98:	681b      	ldr	r3, [r3, #0]
 8017c9a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017c9e:	6a3b      	ldr	r3, [r7, #32]
 8017ca0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017ca2:	6a3b      	ldr	r3, [r7, #32]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8017caa:	6a3b      	ldr	r3, [r7, #32]
 8017cac:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017cae:	f3bf 8f5f 	dmb	sy
}
 8017cb2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017cb4:	6a3b      	ldr	r3, [r7, #32]
 8017cb6:	681b      	ldr	r3, [r3, #0]
 8017cb8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017cbc:	6a3b      	ldr	r3, [r7, #32]
 8017cbe:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8017cc0:	e082      	b.n	8017dc8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017cc2:	6a3b      	ldr	r3, [r7, #32]
 8017cc4:	681b      	ldr	r3, [r3, #0]
 8017cc6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8017cca:	6a3b      	ldr	r3, [r7, #32]
 8017ccc:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	2b00      	cmp	r3, #0
 8017cd2:	d006      	beq.n	8017ce2 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017cd4:	6a3b      	ldr	r3, [r7, #32]
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017cdc:	6a3b      	ldr	r3, [r7, #32]
 8017cde:	601a      	str	r2, [r3, #0]
 8017ce0:	e005      	b.n	8017cee <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017ce2:	6a3b      	ldr	r3, [r7, #32]
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017cea:	6a3b      	ldr	r3, [r7, #32]
 8017cec:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf0:	3301      	adds	r3, #1
 8017cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017cf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cf6:	2b03      	cmp	r3, #3
 8017cf8:	d902      	bls.n	8017d00 <ETH_Prepare_Tx_Descriptors+0x12c>
 8017cfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017cfc:	3b04      	subs	r3, #4
 8017cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017d00:	697b      	ldr	r3, [r7, #20]
 8017d02:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d08:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017d0a:	6a3b      	ldr	r3, [r7, #32]
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017d12:	6a3b      	ldr	r3, [r7, #32]
 8017d14:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8017d16:	6a3b      	ldr	r3, [r7, #32]
 8017d18:	681b      	ldr	r3, [r3, #0]
 8017d1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017d1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017d22:	d007      	beq.n	8017d34 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017d24:	697a      	ldr	r2, [r7, #20]
 8017d26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d28:	3304      	adds	r3, #4
 8017d2a:	009b      	lsls	r3, r3, #2
 8017d2c:	4413      	add	r3, r2
 8017d2e:	685b      	ldr	r3, [r3, #4]
 8017d30:	2b00      	cmp	r3, #0
 8017d32:	d029      	beq.n	8017d88 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8017d34:	693b      	ldr	r3, [r7, #16]
 8017d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017d38:	697b      	ldr	r3, [r7, #20]
 8017d3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d40:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8017d42:	2300      	movs	r3, #0
 8017d44:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d46:	e019      	b.n	8017d7c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8017d48:	f3bf 8f5f 	dmb	sy
}
 8017d4c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017d4e:	6a3b      	ldr	r3, [r7, #32]
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8017d56:	6a3b      	ldr	r3, [r7, #32]
 8017d58:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8017d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d5c:	3301      	adds	r3, #1
 8017d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d62:	2b03      	cmp	r3, #3
 8017d64:	d902      	bls.n	8017d6c <ETH_Prepare_Tx_Descriptors+0x198>
 8017d66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d68:	3b04      	subs	r3, #4
 8017d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017d6c:	697b      	ldr	r3, [r7, #20]
 8017d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017d70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017d74:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8017d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017d78:	3301      	adds	r3, #1
 8017d7a:	62bb      	str	r3, [r7, #40]	; 0x28
 8017d7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d80:	429a      	cmp	r2, r3
 8017d82:	d3e1      	bcc.n	8017d48 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 8017d84:	2302      	movs	r3, #2
 8017d86:	e051      	b.n	8017e2c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 8017d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d8a:	3301      	adds	r3, #1
 8017d8c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8017d8e:	69fb      	ldr	r3, [r7, #28]
 8017d90:	689b      	ldr	r3, [r3, #8]
 8017d92:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017d94:	69fb      	ldr	r3, [r7, #28]
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	461a      	mov	r2, r3
 8017d9a:	6a3b      	ldr	r3, [r7, #32]
 8017d9c:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017d9e:	6a3b      	ldr	r3, [r7, #32]
 8017da0:	685a      	ldr	r2, [r3, #4]
 8017da2:	4b25      	ldr	r3, [pc, #148]	; (8017e38 <ETH_Prepare_Tx_Descriptors+0x264>)
 8017da4:	4013      	ands	r3, r2
 8017da6:	69fa      	ldr	r2, [r7, #28]
 8017da8:	6852      	ldr	r2, [r2, #4]
 8017daa:	431a      	orrs	r2, r3
 8017dac:	6a3b      	ldr	r3, [r7, #32]
 8017dae:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8017db0:	69bb      	ldr	r3, [r7, #24]
 8017db2:	3301      	adds	r3, #1
 8017db4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8017db6:	f3bf 8f5f 	dmb	sy
}
 8017dba:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017dbc:	6a3b      	ldr	r3, [r7, #32]
 8017dbe:	681b      	ldr	r3, [r3, #0]
 8017dc0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017dc4:	6a3b      	ldr	r3, [r7, #32]
 8017dc6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8017dc8:	69fb      	ldr	r3, [r7, #28]
 8017dca:	689b      	ldr	r3, [r3, #8]
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	f47f af78 	bne.w	8017cc2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	2b00      	cmp	r3, #0
 8017dd6:	d006      	beq.n	8017de6 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017dd8:	6a3b      	ldr	r3, [r7, #32]
 8017dda:	681b      	ldr	r3, [r3, #0]
 8017ddc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017de0:	6a3b      	ldr	r3, [r7, #32]
 8017de2:	601a      	str	r2, [r3, #0]
 8017de4:	e005      	b.n	8017df2 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	681b      	ldr	r3, [r3, #0]
 8017dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017dee:	6a3b      	ldr	r3, [r7, #32]
 8017df0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017df2:	6a3b      	ldr	r3, [r7, #32]
 8017df4:	681b      	ldr	r3, [r3, #0]
 8017df6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8017dfa:	6a3b      	ldr	r3, [r7, #32]
 8017dfc:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8017dfe:	697b      	ldr	r3, [r7, #20]
 8017e00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017e02:	6979      	ldr	r1, [r7, #20]
 8017e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017e06:	3304      	adds	r3, #4
 8017e08:	009b      	lsls	r3, r3, #2
 8017e0a:	440b      	add	r3, r1
 8017e0c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8017e0e:	697b      	ldr	r3, [r7, #20]
 8017e10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017e12:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017e14:	b672      	cpsid	i
}
 8017e16:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017e1c:	69bb      	ldr	r3, [r7, #24]
 8017e1e:	4413      	add	r3, r2
 8017e20:	1c5a      	adds	r2, r3, #1
 8017e22:	697b      	ldr	r3, [r7, #20]
 8017e24:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8017e26:	b662      	cpsie	i
}
 8017e28:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8017e2a:	2300      	movs	r3, #0
}
 8017e2c:	4618      	mov	r0, r3
 8017e2e:	3734      	adds	r7, #52	; 0x34
 8017e30:	46bd      	mov	sp, r7
 8017e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e36:	4770      	bx	lr
 8017e38:	ffffe000 	.word	0xffffe000

08017e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8017e3c:	b480      	push	{r7}
 8017e3e:	b089      	sub	sp, #36	; 0x24
 8017e40:	af00      	add	r7, sp, #0
 8017e42:	6078      	str	r0, [r7, #4]
 8017e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8017e46:	2300      	movs	r3, #0
 8017e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8017e4a:	2300      	movs	r3, #0
 8017e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8017e4e:	2300      	movs	r3, #0
 8017e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8017e52:	2300      	movs	r3, #0
 8017e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8017e56:	2300      	movs	r3, #0
 8017e58:	61fb      	str	r3, [r7, #28]
 8017e5a:	e175      	b.n	8018148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8017e5c:	2201      	movs	r2, #1
 8017e5e:	69fb      	ldr	r3, [r7, #28]
 8017e60:	fa02 f303 	lsl.w	r3, r2, r3
 8017e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8017e66:	683b      	ldr	r3, [r7, #0]
 8017e68:	681b      	ldr	r3, [r3, #0]
 8017e6a:	697a      	ldr	r2, [r7, #20]
 8017e6c:	4013      	ands	r3, r2
 8017e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8017e70:	693a      	ldr	r2, [r7, #16]
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	429a      	cmp	r2, r3
 8017e76:	f040 8164 	bne.w	8018142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017e7a:	683b      	ldr	r3, [r7, #0]
 8017e7c:	685b      	ldr	r3, [r3, #4]
 8017e7e:	f003 0303 	and.w	r3, r3, #3
 8017e82:	2b01      	cmp	r3, #1
 8017e84:	d005      	beq.n	8017e92 <HAL_GPIO_Init+0x56>
 8017e86:	683b      	ldr	r3, [r7, #0]
 8017e88:	685b      	ldr	r3, [r3, #4]
 8017e8a:	f003 0303 	and.w	r3, r3, #3
 8017e8e:	2b02      	cmp	r3, #2
 8017e90:	d130      	bne.n	8017ef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017e92:	687b      	ldr	r3, [r7, #4]
 8017e94:	689b      	ldr	r3, [r3, #8]
 8017e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8017e98:	69fb      	ldr	r3, [r7, #28]
 8017e9a:	005b      	lsls	r3, r3, #1
 8017e9c:	2203      	movs	r2, #3
 8017e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8017ea2:	43db      	mvns	r3, r3
 8017ea4:	69ba      	ldr	r2, [r7, #24]
 8017ea6:	4013      	ands	r3, r2
 8017ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8017eaa:	683b      	ldr	r3, [r7, #0]
 8017eac:	68da      	ldr	r2, [r3, #12]
 8017eae:	69fb      	ldr	r3, [r7, #28]
 8017eb0:	005b      	lsls	r3, r3, #1
 8017eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8017eb6:	69ba      	ldr	r2, [r7, #24]
 8017eb8:	4313      	orrs	r3, r2
 8017eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017ebc:	687b      	ldr	r3, [r7, #4]
 8017ebe:	69ba      	ldr	r2, [r7, #24]
 8017ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017ec2:	687b      	ldr	r3, [r7, #4]
 8017ec4:	685b      	ldr	r3, [r3, #4]
 8017ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8017ec8:	2201      	movs	r2, #1
 8017eca:	69fb      	ldr	r3, [r7, #28]
 8017ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8017ed0:	43db      	mvns	r3, r3
 8017ed2:	69ba      	ldr	r2, [r7, #24]
 8017ed4:	4013      	ands	r3, r2
 8017ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017ed8:	683b      	ldr	r3, [r7, #0]
 8017eda:	685b      	ldr	r3, [r3, #4]
 8017edc:	091b      	lsrs	r3, r3, #4
 8017ede:	f003 0201 	and.w	r2, r3, #1
 8017ee2:	69fb      	ldr	r3, [r7, #28]
 8017ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8017ee8:	69ba      	ldr	r2, [r7, #24]
 8017eea:	4313      	orrs	r3, r2
 8017eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017eee:	687b      	ldr	r3, [r7, #4]
 8017ef0:	69ba      	ldr	r2, [r7, #24]
 8017ef2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017ef4:	683b      	ldr	r3, [r7, #0]
 8017ef6:	685b      	ldr	r3, [r3, #4]
 8017ef8:	f003 0303 	and.w	r3, r3, #3
 8017efc:	2b03      	cmp	r3, #3
 8017efe:	d017      	beq.n	8017f30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	68db      	ldr	r3, [r3, #12]
 8017f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8017f06:	69fb      	ldr	r3, [r7, #28]
 8017f08:	005b      	lsls	r3, r3, #1
 8017f0a:	2203      	movs	r2, #3
 8017f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8017f10:	43db      	mvns	r3, r3
 8017f12:	69ba      	ldr	r2, [r7, #24]
 8017f14:	4013      	ands	r3, r2
 8017f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8017f18:	683b      	ldr	r3, [r7, #0]
 8017f1a:	689a      	ldr	r2, [r3, #8]
 8017f1c:	69fb      	ldr	r3, [r7, #28]
 8017f1e:	005b      	lsls	r3, r3, #1
 8017f20:	fa02 f303 	lsl.w	r3, r2, r3
 8017f24:	69ba      	ldr	r2, [r7, #24]
 8017f26:	4313      	orrs	r3, r2
 8017f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8017f2a:	687b      	ldr	r3, [r7, #4]
 8017f2c:	69ba      	ldr	r2, [r7, #24]
 8017f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8017f30:	683b      	ldr	r3, [r7, #0]
 8017f32:	685b      	ldr	r3, [r3, #4]
 8017f34:	f003 0303 	and.w	r3, r3, #3
 8017f38:	2b02      	cmp	r3, #2
 8017f3a:	d123      	bne.n	8017f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8017f3c:	69fb      	ldr	r3, [r7, #28]
 8017f3e:	08da      	lsrs	r2, r3, #3
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	3208      	adds	r2, #8
 8017f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8017f4a:	69fb      	ldr	r3, [r7, #28]
 8017f4c:	f003 0307 	and.w	r3, r3, #7
 8017f50:	009b      	lsls	r3, r3, #2
 8017f52:	220f      	movs	r2, #15
 8017f54:	fa02 f303 	lsl.w	r3, r2, r3
 8017f58:	43db      	mvns	r3, r3
 8017f5a:	69ba      	ldr	r2, [r7, #24]
 8017f5c:	4013      	ands	r3, r2
 8017f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8017f60:	683b      	ldr	r3, [r7, #0]
 8017f62:	691a      	ldr	r2, [r3, #16]
 8017f64:	69fb      	ldr	r3, [r7, #28]
 8017f66:	f003 0307 	and.w	r3, r3, #7
 8017f6a:	009b      	lsls	r3, r3, #2
 8017f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8017f70:	69ba      	ldr	r2, [r7, #24]
 8017f72:	4313      	orrs	r3, r2
 8017f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8017f76:	69fb      	ldr	r3, [r7, #28]
 8017f78:	08da      	lsrs	r2, r3, #3
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	3208      	adds	r2, #8
 8017f7e:	69b9      	ldr	r1, [r7, #24]
 8017f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8017f8a:	69fb      	ldr	r3, [r7, #28]
 8017f8c:	005b      	lsls	r3, r3, #1
 8017f8e:	2203      	movs	r2, #3
 8017f90:	fa02 f303 	lsl.w	r3, r2, r3
 8017f94:	43db      	mvns	r3, r3
 8017f96:	69ba      	ldr	r2, [r7, #24]
 8017f98:	4013      	ands	r3, r2
 8017f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8017f9c:	683b      	ldr	r3, [r7, #0]
 8017f9e:	685b      	ldr	r3, [r3, #4]
 8017fa0:	f003 0203 	and.w	r2, r3, #3
 8017fa4:	69fb      	ldr	r3, [r7, #28]
 8017fa6:	005b      	lsls	r3, r3, #1
 8017fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8017fac:	69ba      	ldr	r2, [r7, #24]
 8017fae:	4313      	orrs	r3, r2
 8017fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017fb2:	687b      	ldr	r3, [r7, #4]
 8017fb4:	69ba      	ldr	r2, [r7, #24]
 8017fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8017fb8:	683b      	ldr	r3, [r7, #0]
 8017fba:	685b      	ldr	r3, [r3, #4]
 8017fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017fc0:	2b00      	cmp	r3, #0
 8017fc2:	f000 80be 	beq.w	8018142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017fc6:	4b66      	ldr	r3, [pc, #408]	; (8018160 <HAL_GPIO_Init+0x324>)
 8017fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fca:	4a65      	ldr	r2, [pc, #404]	; (8018160 <HAL_GPIO_Init+0x324>)
 8017fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8017fd2:	4b63      	ldr	r3, [pc, #396]	; (8018160 <HAL_GPIO_Init+0x324>)
 8017fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017fda:	60fb      	str	r3, [r7, #12]
 8017fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8017fde:	4a61      	ldr	r2, [pc, #388]	; (8018164 <HAL_GPIO_Init+0x328>)
 8017fe0:	69fb      	ldr	r3, [r7, #28]
 8017fe2:	089b      	lsrs	r3, r3, #2
 8017fe4:	3302      	adds	r3, #2
 8017fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8017fec:	69fb      	ldr	r3, [r7, #28]
 8017fee:	f003 0303 	and.w	r3, r3, #3
 8017ff2:	009b      	lsls	r3, r3, #2
 8017ff4:	220f      	movs	r2, #15
 8017ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8017ffa:	43db      	mvns	r3, r3
 8017ffc:	69ba      	ldr	r2, [r7, #24]
 8017ffe:	4013      	ands	r3, r2
 8018000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8018002:	687b      	ldr	r3, [r7, #4]
 8018004:	4a58      	ldr	r2, [pc, #352]	; (8018168 <HAL_GPIO_Init+0x32c>)
 8018006:	4293      	cmp	r3, r2
 8018008:	d037      	beq.n	801807a <HAL_GPIO_Init+0x23e>
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	4a57      	ldr	r2, [pc, #348]	; (801816c <HAL_GPIO_Init+0x330>)
 801800e:	4293      	cmp	r3, r2
 8018010:	d031      	beq.n	8018076 <HAL_GPIO_Init+0x23a>
 8018012:	687b      	ldr	r3, [r7, #4]
 8018014:	4a56      	ldr	r2, [pc, #344]	; (8018170 <HAL_GPIO_Init+0x334>)
 8018016:	4293      	cmp	r3, r2
 8018018:	d02b      	beq.n	8018072 <HAL_GPIO_Init+0x236>
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	4a55      	ldr	r2, [pc, #340]	; (8018174 <HAL_GPIO_Init+0x338>)
 801801e:	4293      	cmp	r3, r2
 8018020:	d025      	beq.n	801806e <HAL_GPIO_Init+0x232>
 8018022:	687b      	ldr	r3, [r7, #4]
 8018024:	4a54      	ldr	r2, [pc, #336]	; (8018178 <HAL_GPIO_Init+0x33c>)
 8018026:	4293      	cmp	r3, r2
 8018028:	d01f      	beq.n	801806a <HAL_GPIO_Init+0x22e>
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	4a53      	ldr	r2, [pc, #332]	; (801817c <HAL_GPIO_Init+0x340>)
 801802e:	4293      	cmp	r3, r2
 8018030:	d019      	beq.n	8018066 <HAL_GPIO_Init+0x22a>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	4a52      	ldr	r2, [pc, #328]	; (8018180 <HAL_GPIO_Init+0x344>)
 8018036:	4293      	cmp	r3, r2
 8018038:	d013      	beq.n	8018062 <HAL_GPIO_Init+0x226>
 801803a:	687b      	ldr	r3, [r7, #4]
 801803c:	4a51      	ldr	r2, [pc, #324]	; (8018184 <HAL_GPIO_Init+0x348>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d00d      	beq.n	801805e <HAL_GPIO_Init+0x222>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	4a50      	ldr	r2, [pc, #320]	; (8018188 <HAL_GPIO_Init+0x34c>)
 8018046:	4293      	cmp	r3, r2
 8018048:	d007      	beq.n	801805a <HAL_GPIO_Init+0x21e>
 801804a:	687b      	ldr	r3, [r7, #4]
 801804c:	4a4f      	ldr	r2, [pc, #316]	; (801818c <HAL_GPIO_Init+0x350>)
 801804e:	4293      	cmp	r3, r2
 8018050:	d101      	bne.n	8018056 <HAL_GPIO_Init+0x21a>
 8018052:	2309      	movs	r3, #9
 8018054:	e012      	b.n	801807c <HAL_GPIO_Init+0x240>
 8018056:	230a      	movs	r3, #10
 8018058:	e010      	b.n	801807c <HAL_GPIO_Init+0x240>
 801805a:	2308      	movs	r3, #8
 801805c:	e00e      	b.n	801807c <HAL_GPIO_Init+0x240>
 801805e:	2307      	movs	r3, #7
 8018060:	e00c      	b.n	801807c <HAL_GPIO_Init+0x240>
 8018062:	2306      	movs	r3, #6
 8018064:	e00a      	b.n	801807c <HAL_GPIO_Init+0x240>
 8018066:	2305      	movs	r3, #5
 8018068:	e008      	b.n	801807c <HAL_GPIO_Init+0x240>
 801806a:	2304      	movs	r3, #4
 801806c:	e006      	b.n	801807c <HAL_GPIO_Init+0x240>
 801806e:	2303      	movs	r3, #3
 8018070:	e004      	b.n	801807c <HAL_GPIO_Init+0x240>
 8018072:	2302      	movs	r3, #2
 8018074:	e002      	b.n	801807c <HAL_GPIO_Init+0x240>
 8018076:	2301      	movs	r3, #1
 8018078:	e000      	b.n	801807c <HAL_GPIO_Init+0x240>
 801807a:	2300      	movs	r3, #0
 801807c:	69fa      	ldr	r2, [r7, #28]
 801807e:	f002 0203 	and.w	r2, r2, #3
 8018082:	0092      	lsls	r2, r2, #2
 8018084:	4093      	lsls	r3, r2
 8018086:	69ba      	ldr	r2, [r7, #24]
 8018088:	4313      	orrs	r3, r2
 801808a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 801808c:	4935      	ldr	r1, [pc, #212]	; (8018164 <HAL_GPIO_Init+0x328>)
 801808e:	69fb      	ldr	r3, [r7, #28]
 8018090:	089b      	lsrs	r3, r3, #2
 8018092:	3302      	adds	r3, #2
 8018094:	69ba      	ldr	r2, [r7, #24]
 8018096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 801809a:	4b3d      	ldr	r3, [pc, #244]	; (8018190 <HAL_GPIO_Init+0x354>)
 801809c:	689b      	ldr	r3, [r3, #8]
 801809e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80180a0:	693b      	ldr	r3, [r7, #16]
 80180a2:	43db      	mvns	r3, r3
 80180a4:	69ba      	ldr	r2, [r7, #24]
 80180a6:	4013      	ands	r3, r2
 80180a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80180aa:	683b      	ldr	r3, [r7, #0]
 80180ac:	685b      	ldr	r3, [r3, #4]
 80180ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80180b2:	2b00      	cmp	r3, #0
 80180b4:	d003      	beq.n	80180be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80180b6:	69ba      	ldr	r2, [r7, #24]
 80180b8:	693b      	ldr	r3, [r7, #16]
 80180ba:	4313      	orrs	r3, r2
 80180bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80180be:	4a34      	ldr	r2, [pc, #208]	; (8018190 <HAL_GPIO_Init+0x354>)
 80180c0:	69bb      	ldr	r3, [r7, #24]
 80180c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80180c4:	4b32      	ldr	r3, [pc, #200]	; (8018190 <HAL_GPIO_Init+0x354>)
 80180c6:	68db      	ldr	r3, [r3, #12]
 80180c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80180ca:	693b      	ldr	r3, [r7, #16]
 80180cc:	43db      	mvns	r3, r3
 80180ce:	69ba      	ldr	r2, [r7, #24]
 80180d0:	4013      	ands	r3, r2
 80180d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80180d4:	683b      	ldr	r3, [r7, #0]
 80180d6:	685b      	ldr	r3, [r3, #4]
 80180d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80180dc:	2b00      	cmp	r3, #0
 80180de:	d003      	beq.n	80180e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80180e0:	69ba      	ldr	r2, [r7, #24]
 80180e2:	693b      	ldr	r3, [r7, #16]
 80180e4:	4313      	orrs	r3, r2
 80180e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80180e8:	4a29      	ldr	r2, [pc, #164]	; (8018190 <HAL_GPIO_Init+0x354>)
 80180ea:	69bb      	ldr	r3, [r7, #24]
 80180ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80180ee:	4b28      	ldr	r3, [pc, #160]	; (8018190 <HAL_GPIO_Init+0x354>)
 80180f0:	685b      	ldr	r3, [r3, #4]
 80180f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80180f4:	693b      	ldr	r3, [r7, #16]
 80180f6:	43db      	mvns	r3, r3
 80180f8:	69ba      	ldr	r2, [r7, #24]
 80180fa:	4013      	ands	r3, r2
 80180fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80180fe:	683b      	ldr	r3, [r7, #0]
 8018100:	685b      	ldr	r3, [r3, #4]
 8018102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018106:	2b00      	cmp	r3, #0
 8018108:	d003      	beq.n	8018112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 801810a:	69ba      	ldr	r2, [r7, #24]
 801810c:	693b      	ldr	r3, [r7, #16]
 801810e:	4313      	orrs	r3, r2
 8018110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8018112:	4a1f      	ldr	r2, [pc, #124]	; (8018190 <HAL_GPIO_Init+0x354>)
 8018114:	69bb      	ldr	r3, [r7, #24]
 8018116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8018118:	4b1d      	ldr	r3, [pc, #116]	; (8018190 <HAL_GPIO_Init+0x354>)
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 801811e:	693b      	ldr	r3, [r7, #16]
 8018120:	43db      	mvns	r3, r3
 8018122:	69ba      	ldr	r2, [r7, #24]
 8018124:	4013      	ands	r3, r2
 8018126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8018128:	683b      	ldr	r3, [r7, #0]
 801812a:	685b      	ldr	r3, [r3, #4]
 801812c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8018130:	2b00      	cmp	r3, #0
 8018132:	d003      	beq.n	801813c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8018134:	69ba      	ldr	r2, [r7, #24]
 8018136:	693b      	ldr	r3, [r7, #16]
 8018138:	4313      	orrs	r3, r2
 801813a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 801813c:	4a14      	ldr	r2, [pc, #80]	; (8018190 <HAL_GPIO_Init+0x354>)
 801813e:	69bb      	ldr	r3, [r7, #24]
 8018140:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8018142:	69fb      	ldr	r3, [r7, #28]
 8018144:	3301      	adds	r3, #1
 8018146:	61fb      	str	r3, [r7, #28]
 8018148:	69fb      	ldr	r3, [r7, #28]
 801814a:	2b0f      	cmp	r3, #15
 801814c:	f67f ae86 	bls.w	8017e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8018150:	bf00      	nop
 8018152:	bf00      	nop
 8018154:	3724      	adds	r7, #36	; 0x24
 8018156:	46bd      	mov	sp, r7
 8018158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801815c:	4770      	bx	lr
 801815e:	bf00      	nop
 8018160:	40023800 	.word	0x40023800
 8018164:	40013800 	.word	0x40013800
 8018168:	40020000 	.word	0x40020000
 801816c:	40020400 	.word	0x40020400
 8018170:	40020800 	.word	0x40020800
 8018174:	40020c00 	.word	0x40020c00
 8018178:	40021000 	.word	0x40021000
 801817c:	40021400 	.word	0x40021400
 8018180:	40021800 	.word	0x40021800
 8018184:	40021c00 	.word	0x40021c00
 8018188:	40022000 	.word	0x40022000
 801818c:	40022400 	.word	0x40022400
 8018190:	40013c00 	.word	0x40013c00

08018194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8018194:	b480      	push	{r7}
 8018196:	b085      	sub	sp, #20
 8018198:	af00      	add	r7, sp, #0
 801819a:	6078      	str	r0, [r7, #4]
 801819c:	460b      	mov	r3, r1
 801819e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80181a0:	687b      	ldr	r3, [r7, #4]
 80181a2:	691a      	ldr	r2, [r3, #16]
 80181a4:	887b      	ldrh	r3, [r7, #2]
 80181a6:	4013      	ands	r3, r2
 80181a8:	2b00      	cmp	r3, #0
 80181aa:	d002      	beq.n	80181b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80181ac:	2301      	movs	r3, #1
 80181ae:	73fb      	strb	r3, [r7, #15]
 80181b0:	e001      	b.n	80181b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80181b2:	2300      	movs	r3, #0
 80181b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80181b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80181b8:	4618      	mov	r0, r3
 80181ba:	3714      	adds	r7, #20
 80181bc:	46bd      	mov	sp, r7
 80181be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181c2:	4770      	bx	lr

080181c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80181c4:	b480      	push	{r7}
 80181c6:	b083      	sub	sp, #12
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
 80181cc:	460b      	mov	r3, r1
 80181ce:	807b      	strh	r3, [r7, #2]
 80181d0:	4613      	mov	r3, r2
 80181d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80181d4:	787b      	ldrb	r3, [r7, #1]
 80181d6:	2b00      	cmp	r3, #0
 80181d8:	d003      	beq.n	80181e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80181da:	887a      	ldrh	r2, [r7, #2]
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80181e0:	e003      	b.n	80181ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80181e2:	887b      	ldrh	r3, [r7, #2]
 80181e4:	041a      	lsls	r2, r3, #16
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	619a      	str	r2, [r3, #24]
}
 80181ea:	bf00      	nop
 80181ec:	370c      	adds	r7, #12
 80181ee:	46bd      	mov	sp, r7
 80181f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80181f4:	4770      	bx	lr

080181f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80181f6:	b480      	push	{r7}
 80181f8:	b085      	sub	sp, #20
 80181fa:	af00      	add	r7, sp, #0
 80181fc:	6078      	str	r0, [r7, #4]
 80181fe:	460b      	mov	r3, r1
 8018200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	695b      	ldr	r3, [r3, #20]
 8018206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8018208:	887a      	ldrh	r2, [r7, #2]
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	4013      	ands	r3, r2
 801820e:	041a      	lsls	r2, r3, #16
 8018210:	68fb      	ldr	r3, [r7, #12]
 8018212:	43d9      	mvns	r1, r3
 8018214:	887b      	ldrh	r3, [r7, #2]
 8018216:	400b      	ands	r3, r1
 8018218:	431a      	orrs	r2, r3
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	619a      	str	r2, [r3, #24]
}
 801821e:	bf00      	nop
 8018220:	3714      	adds	r7, #20
 8018222:	46bd      	mov	sp, r7
 8018224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018228:	4770      	bx	lr
	...

0801822c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 801822c:	b580      	push	{r7, lr}
 801822e:	b082      	sub	sp, #8
 8018230:	af00      	add	r7, sp, #0
 8018232:	4603      	mov	r3, r0
 8018234:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8018236:	4b08      	ldr	r3, [pc, #32]	; (8018258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018238:	695a      	ldr	r2, [r3, #20]
 801823a:	88fb      	ldrh	r3, [r7, #6]
 801823c:	4013      	ands	r3, r2
 801823e:	2b00      	cmp	r3, #0
 8018240:	d006      	beq.n	8018250 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8018242:	4a05      	ldr	r2, [pc, #20]	; (8018258 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8018244:	88fb      	ldrh	r3, [r7, #6]
 8018246:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8018248:	88fb      	ldrh	r3, [r7, #6]
 801824a:	4618      	mov	r0, r3
 801824c:	f000 f806 	bl	801825c <HAL_GPIO_EXTI_Callback>
  }
}
 8018250:	bf00      	nop
 8018252:	3708      	adds	r7, #8
 8018254:	46bd      	mov	sp, r7
 8018256:	bd80      	pop	{r7, pc}
 8018258:	40013c00 	.word	0x40013c00

0801825c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 801825c:	b480      	push	{r7}
 801825e:	b083      	sub	sp, #12
 8018260:	af00      	add	r7, sp, #0
 8018262:	4603      	mov	r3, r0
 8018264:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8018266:	bf00      	nop
 8018268:	370c      	adds	r7, #12
 801826a:	46bd      	mov	sp, r7
 801826c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018270:	4770      	bx	lr
	...

08018274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8018274:	b580      	push	{r7, lr}
 8018276:	b082      	sub	sp, #8
 8018278:	af00      	add	r7, sp, #0
 801827a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801827c:	687b      	ldr	r3, [r7, #4]
 801827e:	2b00      	cmp	r3, #0
 8018280:	d101      	bne.n	8018286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8018282:	2301      	movs	r3, #1
 8018284:	e07f      	b.n	8018386 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8018286:	687b      	ldr	r3, [r7, #4]
 8018288:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801828c:	b2db      	uxtb	r3, r3
 801828e:	2b00      	cmp	r3, #0
 8018290:	d106      	bne.n	80182a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8018292:	687b      	ldr	r3, [r7, #4]
 8018294:	2200      	movs	r2, #0
 8018296:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801829a:	6878      	ldr	r0, [r7, #4]
 801829c:	f7fb fa30 	bl	8013700 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	2224      	movs	r2, #36	; 0x24
 80182a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80182a8:	687b      	ldr	r3, [r7, #4]
 80182aa:	681b      	ldr	r3, [r3, #0]
 80182ac:	681a      	ldr	r2, [r3, #0]
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	681b      	ldr	r3, [r3, #0]
 80182b2:	f022 0201 	bic.w	r2, r2, #1
 80182b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	685a      	ldr	r2, [r3, #4]
 80182bc:	687b      	ldr	r3, [r7, #4]
 80182be:	681b      	ldr	r3, [r3, #0]
 80182c0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80182c4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80182c6:	687b      	ldr	r3, [r7, #4]
 80182c8:	681b      	ldr	r3, [r3, #0]
 80182ca:	689a      	ldr	r2, [r3, #8]
 80182cc:	687b      	ldr	r3, [r7, #4]
 80182ce:	681b      	ldr	r3, [r3, #0]
 80182d0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80182d4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80182d6:	687b      	ldr	r3, [r7, #4]
 80182d8:	68db      	ldr	r3, [r3, #12]
 80182da:	2b01      	cmp	r3, #1
 80182dc:	d107      	bne.n	80182ee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	689a      	ldr	r2, [r3, #8]
 80182e2:	687b      	ldr	r3, [r7, #4]
 80182e4:	681b      	ldr	r3, [r3, #0]
 80182e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80182ea:	609a      	str	r2, [r3, #8]
 80182ec:	e006      	b.n	80182fc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	689a      	ldr	r2, [r3, #8]
 80182f2:	687b      	ldr	r3, [r7, #4]
 80182f4:	681b      	ldr	r3, [r3, #0]
 80182f6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80182fa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80182fc:	687b      	ldr	r3, [r7, #4]
 80182fe:	68db      	ldr	r3, [r3, #12]
 8018300:	2b02      	cmp	r3, #2
 8018302:	d104      	bne.n	801830e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	681b      	ldr	r3, [r3, #0]
 8018308:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801830c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	6859      	ldr	r1, [r3, #4]
 8018314:	687b      	ldr	r3, [r7, #4]
 8018316:	681a      	ldr	r2, [r3, #0]
 8018318:	4b1d      	ldr	r3, [pc, #116]	; (8018390 <HAL_I2C_Init+0x11c>)
 801831a:	430b      	orrs	r3, r1
 801831c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	681b      	ldr	r3, [r3, #0]
 8018322:	68da      	ldr	r2, [r3, #12]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	681b      	ldr	r3, [r3, #0]
 8018328:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 801832c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801832e:	687b      	ldr	r3, [r7, #4]
 8018330:	691a      	ldr	r2, [r3, #16]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	695b      	ldr	r3, [r3, #20]
 8018336:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801833a:	687b      	ldr	r3, [r7, #4]
 801833c:	699b      	ldr	r3, [r3, #24]
 801833e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	681b      	ldr	r3, [r3, #0]
 8018344:	430a      	orrs	r2, r1
 8018346:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018348:	687b      	ldr	r3, [r7, #4]
 801834a:	69d9      	ldr	r1, [r3, #28]
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	6a1a      	ldr	r2, [r3, #32]
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	681b      	ldr	r3, [r3, #0]
 8018354:	430a      	orrs	r2, r1
 8018356:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018358:	687b      	ldr	r3, [r7, #4]
 801835a:	681b      	ldr	r3, [r3, #0]
 801835c:	681a      	ldr	r2, [r3, #0]
 801835e:	687b      	ldr	r3, [r7, #4]
 8018360:	681b      	ldr	r3, [r3, #0]
 8018362:	f042 0201 	orr.w	r2, r2, #1
 8018366:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	2200      	movs	r2, #0
 801836c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801836e:	687b      	ldr	r3, [r7, #4]
 8018370:	2220      	movs	r2, #32
 8018372:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8018376:	687b      	ldr	r3, [r7, #4]
 8018378:	2200      	movs	r2, #0
 801837a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801837c:	687b      	ldr	r3, [r7, #4]
 801837e:	2200      	movs	r2, #0
 8018380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8018384:	2300      	movs	r3, #0
}
 8018386:	4618      	mov	r0, r3
 8018388:	3708      	adds	r7, #8
 801838a:	46bd      	mov	sp, r7
 801838c:	bd80      	pop	{r7, pc}
 801838e:	bf00      	nop
 8018390:	02008000 	.word	0x02008000

08018394 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018394:	b580      	push	{r7, lr}
 8018396:	b088      	sub	sp, #32
 8018398:	af02      	add	r7, sp, #8
 801839a:	60f8      	str	r0, [r7, #12]
 801839c:	4608      	mov	r0, r1
 801839e:	4611      	mov	r1, r2
 80183a0:	461a      	mov	r2, r3
 80183a2:	4603      	mov	r3, r0
 80183a4:	817b      	strh	r3, [r7, #10]
 80183a6:	460b      	mov	r3, r1
 80183a8:	813b      	strh	r3, [r7, #8]
 80183aa:	4613      	mov	r3, r2
 80183ac:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80183b4:	b2db      	uxtb	r3, r3
 80183b6:	2b20      	cmp	r3, #32
 80183b8:	f040 80f9 	bne.w	80185ae <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80183bc:	6a3b      	ldr	r3, [r7, #32]
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d002      	beq.n	80183c8 <HAL_I2C_Mem_Write+0x34>
 80183c2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d105      	bne.n	80183d4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80183c8:	68fb      	ldr	r3, [r7, #12]
 80183ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80183ce:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80183d0:	2301      	movs	r3, #1
 80183d2:	e0ed      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80183da:	2b01      	cmp	r3, #1
 80183dc:	d101      	bne.n	80183e2 <HAL_I2C_Mem_Write+0x4e>
 80183de:	2302      	movs	r3, #2
 80183e0:	e0e6      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	2201      	movs	r2, #1
 80183e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80183ea:	f7fd fa1b 	bl	8015824 <HAL_GetTick>
 80183ee:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80183f0:	697b      	ldr	r3, [r7, #20]
 80183f2:	9300      	str	r3, [sp, #0]
 80183f4:	2319      	movs	r3, #25
 80183f6:	2201      	movs	r2, #1
 80183f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80183fc:	68f8      	ldr	r0, [r7, #12]
 80183fe:	f000 fac3 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 8018402:	4603      	mov	r3, r0
 8018404:	2b00      	cmp	r3, #0
 8018406:	d001      	beq.n	801840c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8018408:	2301      	movs	r3, #1
 801840a:	e0d1      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801840c:	68fb      	ldr	r3, [r7, #12]
 801840e:	2221      	movs	r2, #33	; 0x21
 8018410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	2240      	movs	r2, #64	; 0x40
 8018418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801841c:	68fb      	ldr	r3, [r7, #12]
 801841e:	2200      	movs	r2, #0
 8018420:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018422:	68fb      	ldr	r3, [r7, #12]
 8018424:	6a3a      	ldr	r2, [r7, #32]
 8018426:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018428:	68fb      	ldr	r3, [r7, #12]
 801842a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801842c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 801842e:	68fb      	ldr	r3, [r7, #12]
 8018430:	2200      	movs	r2, #0
 8018432:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018434:	88f8      	ldrh	r0, [r7, #6]
 8018436:	893a      	ldrh	r2, [r7, #8]
 8018438:	8979      	ldrh	r1, [r7, #10]
 801843a:	697b      	ldr	r3, [r7, #20]
 801843c:	9301      	str	r3, [sp, #4]
 801843e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018440:	9300      	str	r3, [sp, #0]
 8018442:	4603      	mov	r3, r0
 8018444:	68f8      	ldr	r0, [r7, #12]
 8018446:	f000 f9d3 	bl	80187f0 <I2C_RequestMemoryWrite>
 801844a:	4603      	mov	r3, r0
 801844c:	2b00      	cmp	r3, #0
 801844e:	d005      	beq.n	801845c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018450:	68fb      	ldr	r3, [r7, #12]
 8018452:	2200      	movs	r2, #0
 8018454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018458:	2301      	movs	r3, #1
 801845a:	e0a9      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801845c:	68fb      	ldr	r3, [r7, #12]
 801845e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018460:	b29b      	uxth	r3, r3
 8018462:	2bff      	cmp	r3, #255	; 0xff
 8018464:	d90e      	bls.n	8018484 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	22ff      	movs	r2, #255	; 0xff
 801846a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018470:	b2da      	uxtb	r2, r3
 8018472:	8979      	ldrh	r1, [r7, #10]
 8018474:	2300      	movs	r3, #0
 8018476:	9300      	str	r3, [sp, #0]
 8018478:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801847c:	68f8      	ldr	r0, [r7, #12]
 801847e:	f000 fc1f 	bl	8018cc0 <I2C_TransferConfig>
 8018482:	e00f      	b.n	80184a4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018488:	b29a      	uxth	r2, r3
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018492:	b2da      	uxtb	r2, r3
 8018494:	8979      	ldrh	r1, [r7, #10]
 8018496:	2300      	movs	r3, #0
 8018498:	9300      	str	r3, [sp, #0]
 801849a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801849e:	68f8      	ldr	r0, [r7, #12]
 80184a0:	f000 fc0e 	bl	8018cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80184a4:	697a      	ldr	r2, [r7, #20]
 80184a6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80184a8:	68f8      	ldr	r0, [r7, #12]
 80184aa:	f000 faad 	bl	8018a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80184ae:	4603      	mov	r3, r0
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d001      	beq.n	80184b8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80184b4:	2301      	movs	r3, #1
 80184b6:	e07b      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80184b8:	68fb      	ldr	r3, [r7, #12]
 80184ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184bc:	781a      	ldrb	r2, [r3, #0]
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80184c8:	1c5a      	adds	r2, r3, #1
 80184ca:	68fb      	ldr	r3, [r7, #12]
 80184cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80184ce:	68fb      	ldr	r3, [r7, #12]
 80184d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184d2:	b29b      	uxth	r3, r3
 80184d4:	3b01      	subs	r3, #1
 80184d6:	b29a      	uxth	r2, r3
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80184dc:	68fb      	ldr	r3, [r7, #12]
 80184de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184e0:	3b01      	subs	r3, #1
 80184e2:	b29a      	uxth	r2, r3
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80184e8:	68fb      	ldr	r3, [r7, #12]
 80184ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80184ec:	b29b      	uxth	r3, r3
 80184ee:	2b00      	cmp	r3, #0
 80184f0:	d034      	beq.n	801855c <HAL_I2C_Mem_Write+0x1c8>
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d130      	bne.n	801855c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80184fa:	697b      	ldr	r3, [r7, #20]
 80184fc:	9300      	str	r3, [sp, #0]
 80184fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018500:	2200      	movs	r2, #0
 8018502:	2180      	movs	r1, #128	; 0x80
 8018504:	68f8      	ldr	r0, [r7, #12]
 8018506:	f000 fa3f 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 801850a:	4603      	mov	r3, r0
 801850c:	2b00      	cmp	r3, #0
 801850e:	d001      	beq.n	8018514 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8018510:	2301      	movs	r3, #1
 8018512:	e04d      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018514:	68fb      	ldr	r3, [r7, #12]
 8018516:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018518:	b29b      	uxth	r3, r3
 801851a:	2bff      	cmp	r3, #255	; 0xff
 801851c:	d90e      	bls.n	801853c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801851e:	68fb      	ldr	r3, [r7, #12]
 8018520:	22ff      	movs	r2, #255	; 0xff
 8018522:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018524:	68fb      	ldr	r3, [r7, #12]
 8018526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018528:	b2da      	uxtb	r2, r3
 801852a:	8979      	ldrh	r1, [r7, #10]
 801852c:	2300      	movs	r3, #0
 801852e:	9300      	str	r3, [sp, #0]
 8018530:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018534:	68f8      	ldr	r0, [r7, #12]
 8018536:	f000 fbc3 	bl	8018cc0 <I2C_TransferConfig>
 801853a:	e00f      	b.n	801855c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018540:	b29a      	uxth	r2, r3
 8018542:	68fb      	ldr	r3, [r7, #12]
 8018544:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018546:	68fb      	ldr	r3, [r7, #12]
 8018548:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801854a:	b2da      	uxtb	r2, r3
 801854c:	8979      	ldrh	r1, [r7, #10]
 801854e:	2300      	movs	r3, #0
 8018550:	9300      	str	r3, [sp, #0]
 8018552:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018556:	68f8      	ldr	r0, [r7, #12]
 8018558:	f000 fbb2 	bl	8018cc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018560:	b29b      	uxth	r3, r3
 8018562:	2b00      	cmp	r3, #0
 8018564:	d19e      	bne.n	80184a4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018566:	697a      	ldr	r2, [r7, #20]
 8018568:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801856a:	68f8      	ldr	r0, [r7, #12]
 801856c:	f000 fa8c 	bl	8018a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 8018570:	4603      	mov	r3, r0
 8018572:	2b00      	cmp	r3, #0
 8018574:	d001      	beq.n	801857a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8018576:	2301      	movs	r3, #1
 8018578:	e01a      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801857a:	68fb      	ldr	r3, [r7, #12]
 801857c:	681b      	ldr	r3, [r3, #0]
 801857e:	2220      	movs	r2, #32
 8018580:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	6859      	ldr	r1, [r3, #4]
 8018588:	68fb      	ldr	r3, [r7, #12]
 801858a:	681a      	ldr	r2, [r3, #0]
 801858c:	4b0a      	ldr	r3, [pc, #40]	; (80185b8 <HAL_I2C_Mem_Write+0x224>)
 801858e:	400b      	ands	r3, r1
 8018590:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018592:	68fb      	ldr	r3, [r7, #12]
 8018594:	2220      	movs	r2, #32
 8018596:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801859a:	68fb      	ldr	r3, [r7, #12]
 801859c:	2200      	movs	r2, #0
 801859e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80185a2:	68fb      	ldr	r3, [r7, #12]
 80185a4:	2200      	movs	r2, #0
 80185a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80185aa:	2300      	movs	r3, #0
 80185ac:	e000      	b.n	80185b0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80185ae:	2302      	movs	r3, #2
  }
}
 80185b0:	4618      	mov	r0, r3
 80185b2:	3718      	adds	r7, #24
 80185b4:	46bd      	mov	sp, r7
 80185b6:	bd80      	pop	{r7, pc}
 80185b8:	fe00e800 	.word	0xfe00e800

080185bc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80185bc:	b580      	push	{r7, lr}
 80185be:	b088      	sub	sp, #32
 80185c0:	af02      	add	r7, sp, #8
 80185c2:	60f8      	str	r0, [r7, #12]
 80185c4:	4608      	mov	r0, r1
 80185c6:	4611      	mov	r1, r2
 80185c8:	461a      	mov	r2, r3
 80185ca:	4603      	mov	r3, r0
 80185cc:	817b      	strh	r3, [r7, #10]
 80185ce:	460b      	mov	r3, r1
 80185d0:	813b      	strh	r3, [r7, #8]
 80185d2:	4613      	mov	r3, r2
 80185d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80185d6:	68fb      	ldr	r3, [r7, #12]
 80185d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80185dc:	b2db      	uxtb	r3, r3
 80185de:	2b20      	cmp	r3, #32
 80185e0:	f040 80fd 	bne.w	80187de <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80185e4:	6a3b      	ldr	r3, [r7, #32]
 80185e6:	2b00      	cmp	r3, #0
 80185e8:	d002      	beq.n	80185f0 <HAL_I2C_Mem_Read+0x34>
 80185ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80185ec:	2b00      	cmp	r3, #0
 80185ee:	d105      	bne.n	80185fc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80185f0:	68fb      	ldr	r3, [r7, #12]
 80185f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80185f6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80185f8:	2301      	movs	r3, #1
 80185fa:	e0f1      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80185fc:	68fb      	ldr	r3, [r7, #12]
 80185fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018602:	2b01      	cmp	r3, #1
 8018604:	d101      	bne.n	801860a <HAL_I2C_Mem_Read+0x4e>
 8018606:	2302      	movs	r3, #2
 8018608:	e0ea      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
 801860a:	68fb      	ldr	r3, [r7, #12]
 801860c:	2201      	movs	r2, #1
 801860e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018612:	f7fd f907 	bl	8015824 <HAL_GetTick>
 8018616:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018618:	697b      	ldr	r3, [r7, #20]
 801861a:	9300      	str	r3, [sp, #0]
 801861c:	2319      	movs	r3, #25
 801861e:	2201      	movs	r2, #1
 8018620:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018624:	68f8      	ldr	r0, [r7, #12]
 8018626:	f000 f9af 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 801862a:	4603      	mov	r3, r0
 801862c:	2b00      	cmp	r3, #0
 801862e:	d001      	beq.n	8018634 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8018630:	2301      	movs	r3, #1
 8018632:	e0d5      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018634:	68fb      	ldr	r3, [r7, #12]
 8018636:	2222      	movs	r2, #34	; 0x22
 8018638:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801863c:	68fb      	ldr	r3, [r7, #12]
 801863e:	2240      	movs	r2, #64	; 0x40
 8018640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018644:	68fb      	ldr	r3, [r7, #12]
 8018646:	2200      	movs	r2, #0
 8018648:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801864a:	68fb      	ldr	r3, [r7, #12]
 801864c:	6a3a      	ldr	r2, [r7, #32]
 801864e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8018650:	68fb      	ldr	r3, [r7, #12]
 8018652:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018654:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	2200      	movs	r2, #0
 801865a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801865c:	88f8      	ldrh	r0, [r7, #6]
 801865e:	893a      	ldrh	r2, [r7, #8]
 8018660:	8979      	ldrh	r1, [r7, #10]
 8018662:	697b      	ldr	r3, [r7, #20]
 8018664:	9301      	str	r3, [sp, #4]
 8018666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018668:	9300      	str	r3, [sp, #0]
 801866a:	4603      	mov	r3, r0
 801866c:	68f8      	ldr	r0, [r7, #12]
 801866e:	f000 f913 	bl	8018898 <I2C_RequestMemoryRead>
 8018672:	4603      	mov	r3, r0
 8018674:	2b00      	cmp	r3, #0
 8018676:	d005      	beq.n	8018684 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018678:	68fb      	ldr	r3, [r7, #12]
 801867a:	2200      	movs	r2, #0
 801867c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8018680:	2301      	movs	r3, #1
 8018682:	e0ad      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018688:	b29b      	uxth	r3, r3
 801868a:	2bff      	cmp	r3, #255	; 0xff
 801868c:	d90e      	bls.n	80186ac <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	22ff      	movs	r2, #255	; 0xff
 8018692:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018694:	68fb      	ldr	r3, [r7, #12]
 8018696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018698:	b2da      	uxtb	r2, r3
 801869a:	8979      	ldrh	r1, [r7, #10]
 801869c:	4b52      	ldr	r3, [pc, #328]	; (80187e8 <HAL_I2C_Mem_Read+0x22c>)
 801869e:	9300      	str	r3, [sp, #0]
 80186a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80186a4:	68f8      	ldr	r0, [r7, #12]
 80186a6:	f000 fb0b 	bl	8018cc0 <I2C_TransferConfig>
 80186aa:	e00f      	b.n	80186cc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80186ac:	68fb      	ldr	r3, [r7, #12]
 80186ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80186b6:	68fb      	ldr	r3, [r7, #12]
 80186b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80186ba:	b2da      	uxtb	r2, r3
 80186bc:	8979      	ldrh	r1, [r7, #10]
 80186be:	4b4a      	ldr	r3, [pc, #296]	; (80187e8 <HAL_I2C_Mem_Read+0x22c>)
 80186c0:	9300      	str	r3, [sp, #0]
 80186c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80186c6:	68f8      	ldr	r0, [r7, #12]
 80186c8:	f000 fafa 	bl	8018cc0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80186cc:	697b      	ldr	r3, [r7, #20]
 80186ce:	9300      	str	r3, [sp, #0]
 80186d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80186d2:	2200      	movs	r2, #0
 80186d4:	2104      	movs	r1, #4
 80186d6:	68f8      	ldr	r0, [r7, #12]
 80186d8:	f000 f956 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 80186dc:	4603      	mov	r3, r0
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d001      	beq.n	80186e6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80186e2:	2301      	movs	r3, #1
 80186e4:	e07c      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80186e6:	68fb      	ldr	r3, [r7, #12]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80186ec:	68fb      	ldr	r3, [r7, #12]
 80186ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186f0:	b2d2      	uxtb	r2, r2
 80186f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80186f8:	1c5a      	adds	r2, r3, #1
 80186fa:	68fb      	ldr	r3, [r7, #12]
 80186fc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018702:	3b01      	subs	r3, #1
 8018704:	b29a      	uxth	r2, r3
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801870e:	b29b      	uxth	r3, r3
 8018710:	3b01      	subs	r3, #1
 8018712:	b29a      	uxth	r2, r3
 8018714:	68fb      	ldr	r3, [r7, #12]
 8018716:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018718:	68fb      	ldr	r3, [r7, #12]
 801871a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801871c:	b29b      	uxth	r3, r3
 801871e:	2b00      	cmp	r3, #0
 8018720:	d034      	beq.n	801878c <HAL_I2C_Mem_Read+0x1d0>
 8018722:	68fb      	ldr	r3, [r7, #12]
 8018724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018726:	2b00      	cmp	r3, #0
 8018728:	d130      	bne.n	801878c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801872a:	697b      	ldr	r3, [r7, #20]
 801872c:	9300      	str	r3, [sp, #0]
 801872e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018730:	2200      	movs	r2, #0
 8018732:	2180      	movs	r1, #128	; 0x80
 8018734:	68f8      	ldr	r0, [r7, #12]
 8018736:	f000 f927 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 801873a:	4603      	mov	r3, r0
 801873c:	2b00      	cmp	r3, #0
 801873e:	d001      	beq.n	8018744 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018740:	2301      	movs	r3, #1
 8018742:	e04d      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018744:	68fb      	ldr	r3, [r7, #12]
 8018746:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018748:	b29b      	uxth	r3, r3
 801874a:	2bff      	cmp	r3, #255	; 0xff
 801874c:	d90e      	bls.n	801876c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801874e:	68fb      	ldr	r3, [r7, #12]
 8018750:	22ff      	movs	r2, #255	; 0xff
 8018752:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8018754:	68fb      	ldr	r3, [r7, #12]
 8018756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018758:	b2da      	uxtb	r2, r3
 801875a:	8979      	ldrh	r1, [r7, #10]
 801875c:	2300      	movs	r3, #0
 801875e:	9300      	str	r3, [sp, #0]
 8018760:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018764:	68f8      	ldr	r0, [r7, #12]
 8018766:	f000 faab 	bl	8018cc0 <I2C_TransferConfig>
 801876a:	e00f      	b.n	801878c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801876c:	68fb      	ldr	r3, [r7, #12]
 801876e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018770:	b29a      	uxth	r2, r3
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018776:	68fb      	ldr	r3, [r7, #12]
 8018778:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801877a:	b2da      	uxtb	r2, r3
 801877c:	8979      	ldrh	r1, [r7, #10]
 801877e:	2300      	movs	r3, #0
 8018780:	9300      	str	r3, [sp, #0]
 8018782:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8018786:	68f8      	ldr	r0, [r7, #12]
 8018788:	f000 fa9a 	bl	8018cc0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 801878c:	68fb      	ldr	r3, [r7, #12]
 801878e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018790:	b29b      	uxth	r3, r3
 8018792:	2b00      	cmp	r3, #0
 8018794:	d19a      	bne.n	80186cc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8018796:	697a      	ldr	r2, [r7, #20]
 8018798:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801879a:	68f8      	ldr	r0, [r7, #12]
 801879c:	f000 f974 	bl	8018a88 <I2C_WaitOnSTOPFlagUntilTimeout>
 80187a0:	4603      	mov	r3, r0
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d001      	beq.n	80187aa <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80187a6:	2301      	movs	r3, #1
 80187a8:	e01a      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80187aa:	68fb      	ldr	r3, [r7, #12]
 80187ac:	681b      	ldr	r3, [r3, #0]
 80187ae:	2220      	movs	r2, #32
 80187b0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80187b2:	68fb      	ldr	r3, [r7, #12]
 80187b4:	681b      	ldr	r3, [r3, #0]
 80187b6:	6859      	ldr	r1, [r3, #4]
 80187b8:	68fb      	ldr	r3, [r7, #12]
 80187ba:	681a      	ldr	r2, [r3, #0]
 80187bc:	4b0b      	ldr	r3, [pc, #44]	; (80187ec <HAL_I2C_Mem_Read+0x230>)
 80187be:	400b      	ands	r3, r1
 80187c0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	2220      	movs	r2, #32
 80187c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	2200      	movs	r2, #0
 80187ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80187d2:	68fb      	ldr	r3, [r7, #12]
 80187d4:	2200      	movs	r2, #0
 80187d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80187da:	2300      	movs	r3, #0
 80187dc:	e000      	b.n	80187e0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80187de:	2302      	movs	r3, #2
  }
}
 80187e0:	4618      	mov	r0, r3
 80187e2:	3718      	adds	r7, #24
 80187e4:	46bd      	mov	sp, r7
 80187e6:	bd80      	pop	{r7, pc}
 80187e8:	80002400 	.word	0x80002400
 80187ec:	fe00e800 	.word	0xfe00e800

080187f0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80187f0:	b580      	push	{r7, lr}
 80187f2:	b086      	sub	sp, #24
 80187f4:	af02      	add	r7, sp, #8
 80187f6:	60f8      	str	r0, [r7, #12]
 80187f8:	4608      	mov	r0, r1
 80187fa:	4611      	mov	r1, r2
 80187fc:	461a      	mov	r2, r3
 80187fe:	4603      	mov	r3, r0
 8018800:	817b      	strh	r3, [r7, #10]
 8018802:	460b      	mov	r3, r1
 8018804:	813b      	strh	r3, [r7, #8]
 8018806:	4613      	mov	r3, r2
 8018808:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801880a:	88fb      	ldrh	r3, [r7, #6]
 801880c:	b2da      	uxtb	r2, r3
 801880e:	8979      	ldrh	r1, [r7, #10]
 8018810:	4b20      	ldr	r3, [pc, #128]	; (8018894 <I2C_RequestMemoryWrite+0xa4>)
 8018812:	9300      	str	r3, [sp, #0]
 8018814:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018818:	68f8      	ldr	r0, [r7, #12]
 801881a:	f000 fa51 	bl	8018cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801881e:	69fa      	ldr	r2, [r7, #28]
 8018820:	69b9      	ldr	r1, [r7, #24]
 8018822:	68f8      	ldr	r0, [r7, #12]
 8018824:	f000 f8f0 	bl	8018a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8018828:	4603      	mov	r3, r0
 801882a:	2b00      	cmp	r3, #0
 801882c:	d001      	beq.n	8018832 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 801882e:	2301      	movs	r3, #1
 8018830:	e02c      	b.n	801888c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8018832:	88fb      	ldrh	r3, [r7, #6]
 8018834:	2b01      	cmp	r3, #1
 8018836:	d105      	bne.n	8018844 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018838:	893b      	ldrh	r3, [r7, #8]
 801883a:	b2da      	uxtb	r2, r3
 801883c:	68fb      	ldr	r3, [r7, #12]
 801883e:	681b      	ldr	r3, [r3, #0]
 8018840:	629a      	str	r2, [r3, #40]	; 0x28
 8018842:	e015      	b.n	8018870 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8018844:	893b      	ldrh	r3, [r7, #8]
 8018846:	0a1b      	lsrs	r3, r3, #8
 8018848:	b29b      	uxth	r3, r3
 801884a:	b2da      	uxtb	r2, r3
 801884c:	68fb      	ldr	r3, [r7, #12]
 801884e:	681b      	ldr	r3, [r3, #0]
 8018850:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018852:	69fa      	ldr	r2, [r7, #28]
 8018854:	69b9      	ldr	r1, [r7, #24]
 8018856:	68f8      	ldr	r0, [r7, #12]
 8018858:	f000 f8d6 	bl	8018a08 <I2C_WaitOnTXISFlagUntilTimeout>
 801885c:	4603      	mov	r3, r0
 801885e:	2b00      	cmp	r3, #0
 8018860:	d001      	beq.n	8018866 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8018862:	2301      	movs	r3, #1
 8018864:	e012      	b.n	801888c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018866:	893b      	ldrh	r3, [r7, #8]
 8018868:	b2da      	uxtb	r2, r3
 801886a:	68fb      	ldr	r3, [r7, #12]
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8018870:	69fb      	ldr	r3, [r7, #28]
 8018872:	9300      	str	r3, [sp, #0]
 8018874:	69bb      	ldr	r3, [r7, #24]
 8018876:	2200      	movs	r2, #0
 8018878:	2180      	movs	r1, #128	; 0x80
 801887a:	68f8      	ldr	r0, [r7, #12]
 801887c:	f000 f884 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 8018880:	4603      	mov	r3, r0
 8018882:	2b00      	cmp	r3, #0
 8018884:	d001      	beq.n	801888a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8018886:	2301      	movs	r3, #1
 8018888:	e000      	b.n	801888c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 801888a:	2300      	movs	r3, #0
}
 801888c:	4618      	mov	r0, r3
 801888e:	3710      	adds	r7, #16
 8018890:	46bd      	mov	sp, r7
 8018892:	bd80      	pop	{r7, pc}
 8018894:	80002000 	.word	0x80002000

08018898 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8018898:	b580      	push	{r7, lr}
 801889a:	b086      	sub	sp, #24
 801889c:	af02      	add	r7, sp, #8
 801889e:	60f8      	str	r0, [r7, #12]
 80188a0:	4608      	mov	r0, r1
 80188a2:	4611      	mov	r1, r2
 80188a4:	461a      	mov	r2, r3
 80188a6:	4603      	mov	r3, r0
 80188a8:	817b      	strh	r3, [r7, #10]
 80188aa:	460b      	mov	r3, r1
 80188ac:	813b      	strh	r3, [r7, #8]
 80188ae:	4613      	mov	r3, r2
 80188b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80188b2:	88fb      	ldrh	r3, [r7, #6]
 80188b4:	b2da      	uxtb	r2, r3
 80188b6:	8979      	ldrh	r1, [r7, #10]
 80188b8:	4b20      	ldr	r3, [pc, #128]	; (801893c <I2C_RequestMemoryRead+0xa4>)
 80188ba:	9300      	str	r3, [sp, #0]
 80188bc:	2300      	movs	r3, #0
 80188be:	68f8      	ldr	r0, [r7, #12]
 80188c0:	f000 f9fe 	bl	8018cc0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80188c4:	69fa      	ldr	r2, [r7, #28]
 80188c6:	69b9      	ldr	r1, [r7, #24]
 80188c8:	68f8      	ldr	r0, [r7, #12]
 80188ca:	f000 f89d 	bl	8018a08 <I2C_WaitOnTXISFlagUntilTimeout>
 80188ce:	4603      	mov	r3, r0
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d001      	beq.n	80188d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80188d4:	2301      	movs	r3, #1
 80188d6:	e02c      	b.n	8018932 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80188d8:	88fb      	ldrh	r3, [r7, #6]
 80188da:	2b01      	cmp	r3, #1
 80188dc:	d105      	bne.n	80188ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80188de:	893b      	ldrh	r3, [r7, #8]
 80188e0:	b2da      	uxtb	r2, r3
 80188e2:	68fb      	ldr	r3, [r7, #12]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	629a      	str	r2, [r3, #40]	; 0x28
 80188e8:	e015      	b.n	8018916 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80188ea:	893b      	ldrh	r3, [r7, #8]
 80188ec:	0a1b      	lsrs	r3, r3, #8
 80188ee:	b29b      	uxth	r3, r3
 80188f0:	b2da      	uxtb	r2, r3
 80188f2:	68fb      	ldr	r3, [r7, #12]
 80188f4:	681b      	ldr	r3, [r3, #0]
 80188f6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80188f8:	69fa      	ldr	r2, [r7, #28]
 80188fa:	69b9      	ldr	r1, [r7, #24]
 80188fc:	68f8      	ldr	r0, [r7, #12]
 80188fe:	f000 f883 	bl	8018a08 <I2C_WaitOnTXISFlagUntilTimeout>
 8018902:	4603      	mov	r3, r0
 8018904:	2b00      	cmp	r3, #0
 8018906:	d001      	beq.n	801890c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8018908:	2301      	movs	r3, #1
 801890a:	e012      	b.n	8018932 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 801890c:	893b      	ldrh	r3, [r7, #8]
 801890e:	b2da      	uxtb	r2, r3
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	681b      	ldr	r3, [r3, #0]
 8018914:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8018916:	69fb      	ldr	r3, [r7, #28]
 8018918:	9300      	str	r3, [sp, #0]
 801891a:	69bb      	ldr	r3, [r7, #24]
 801891c:	2200      	movs	r2, #0
 801891e:	2140      	movs	r1, #64	; 0x40
 8018920:	68f8      	ldr	r0, [r7, #12]
 8018922:	f000 f831 	bl	8018988 <I2C_WaitOnFlagUntilTimeout>
 8018926:	4603      	mov	r3, r0
 8018928:	2b00      	cmp	r3, #0
 801892a:	d001      	beq.n	8018930 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 801892c:	2301      	movs	r3, #1
 801892e:	e000      	b.n	8018932 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8018930:	2300      	movs	r3, #0
}
 8018932:	4618      	mov	r0, r3
 8018934:	3710      	adds	r7, #16
 8018936:	46bd      	mov	sp, r7
 8018938:	bd80      	pop	{r7, pc}
 801893a:	bf00      	nop
 801893c:	80002000 	.word	0x80002000

08018940 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8018940:	b480      	push	{r7}
 8018942:	b083      	sub	sp, #12
 8018944:	af00      	add	r7, sp, #0
 8018946:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	699b      	ldr	r3, [r3, #24]
 801894e:	f003 0302 	and.w	r3, r3, #2
 8018952:	2b02      	cmp	r3, #2
 8018954:	d103      	bne.n	801895e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	2200      	movs	r2, #0
 801895c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 801895e:	687b      	ldr	r3, [r7, #4]
 8018960:	681b      	ldr	r3, [r3, #0]
 8018962:	699b      	ldr	r3, [r3, #24]
 8018964:	f003 0301 	and.w	r3, r3, #1
 8018968:	2b01      	cmp	r3, #1
 801896a:	d007      	beq.n	801897c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	699a      	ldr	r2, [r3, #24]
 8018972:	687b      	ldr	r3, [r7, #4]
 8018974:	681b      	ldr	r3, [r3, #0]
 8018976:	f042 0201 	orr.w	r2, r2, #1
 801897a:	619a      	str	r2, [r3, #24]
  }
}
 801897c:	bf00      	nop
 801897e:	370c      	adds	r7, #12
 8018980:	46bd      	mov	sp, r7
 8018982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018986:	4770      	bx	lr

08018988 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8018988:	b580      	push	{r7, lr}
 801898a:	b084      	sub	sp, #16
 801898c:	af00      	add	r7, sp, #0
 801898e:	60f8      	str	r0, [r7, #12]
 8018990:	60b9      	str	r1, [r7, #8]
 8018992:	603b      	str	r3, [r7, #0]
 8018994:	4613      	mov	r3, r2
 8018996:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018998:	e022      	b.n	80189e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801899a:	683b      	ldr	r3, [r7, #0]
 801899c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80189a0:	d01e      	beq.n	80189e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80189a2:	f7fc ff3f 	bl	8015824 <HAL_GetTick>
 80189a6:	4602      	mov	r2, r0
 80189a8:	69bb      	ldr	r3, [r7, #24]
 80189aa:	1ad3      	subs	r3, r2, r3
 80189ac:	683a      	ldr	r2, [r7, #0]
 80189ae:	429a      	cmp	r2, r3
 80189b0:	d302      	bcc.n	80189b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80189b2:	683b      	ldr	r3, [r7, #0]
 80189b4:	2b00      	cmp	r3, #0
 80189b6:	d113      	bne.n	80189e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80189b8:	68fb      	ldr	r3, [r7, #12]
 80189ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80189bc:	f043 0220 	orr.w	r2, r3, #32
 80189c0:	68fb      	ldr	r3, [r7, #12]
 80189c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80189c4:	68fb      	ldr	r3, [r7, #12]
 80189c6:	2220      	movs	r2, #32
 80189c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80189cc:	68fb      	ldr	r3, [r7, #12]
 80189ce:	2200      	movs	r2, #0
 80189d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80189d4:	68fb      	ldr	r3, [r7, #12]
 80189d6:	2200      	movs	r2, #0
 80189d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80189dc:	2301      	movs	r3, #1
 80189de:	e00f      	b.n	8018a00 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80189e0:	68fb      	ldr	r3, [r7, #12]
 80189e2:	681b      	ldr	r3, [r3, #0]
 80189e4:	699a      	ldr	r2, [r3, #24]
 80189e6:	68bb      	ldr	r3, [r7, #8]
 80189e8:	4013      	ands	r3, r2
 80189ea:	68ba      	ldr	r2, [r7, #8]
 80189ec:	429a      	cmp	r2, r3
 80189ee:	bf0c      	ite	eq
 80189f0:	2301      	moveq	r3, #1
 80189f2:	2300      	movne	r3, #0
 80189f4:	b2db      	uxtb	r3, r3
 80189f6:	461a      	mov	r2, r3
 80189f8:	79fb      	ldrb	r3, [r7, #7]
 80189fa:	429a      	cmp	r2, r3
 80189fc:	d0cd      	beq.n	801899a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80189fe:	2300      	movs	r3, #0
}
 8018a00:	4618      	mov	r0, r3
 8018a02:	3710      	adds	r7, #16
 8018a04:	46bd      	mov	sp, r7
 8018a06:	bd80      	pop	{r7, pc}

08018a08 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018a08:	b580      	push	{r7, lr}
 8018a0a:	b084      	sub	sp, #16
 8018a0c:	af00      	add	r7, sp, #0
 8018a0e:	60f8      	str	r0, [r7, #12]
 8018a10:	60b9      	str	r1, [r7, #8]
 8018a12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018a14:	e02c      	b.n	8018a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018a16:	687a      	ldr	r2, [r7, #4]
 8018a18:	68b9      	ldr	r1, [r7, #8]
 8018a1a:	68f8      	ldr	r0, [r7, #12]
 8018a1c:	f000 f870 	bl	8018b00 <I2C_IsErrorOccurred>
 8018a20:	4603      	mov	r3, r0
 8018a22:	2b00      	cmp	r3, #0
 8018a24:	d001      	beq.n	8018a2a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018a26:	2301      	movs	r3, #1
 8018a28:	e02a      	b.n	8018a80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018a2a:	68bb      	ldr	r3, [r7, #8]
 8018a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018a30:	d01e      	beq.n	8018a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018a32:	f7fc fef7 	bl	8015824 <HAL_GetTick>
 8018a36:	4602      	mov	r2, r0
 8018a38:	687b      	ldr	r3, [r7, #4]
 8018a3a:	1ad3      	subs	r3, r2, r3
 8018a3c:	68ba      	ldr	r2, [r7, #8]
 8018a3e:	429a      	cmp	r2, r3
 8018a40:	d302      	bcc.n	8018a48 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	2b00      	cmp	r3, #0
 8018a46:	d113      	bne.n	8018a70 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018a4c:	f043 0220 	orr.w	r2, r3, #32
 8018a50:	68fb      	ldr	r3, [r7, #12]
 8018a52:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018a54:	68fb      	ldr	r3, [r7, #12]
 8018a56:	2220      	movs	r2, #32
 8018a58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a5c:	68fb      	ldr	r3, [r7, #12]
 8018a5e:	2200      	movs	r2, #0
 8018a60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018a64:	68fb      	ldr	r3, [r7, #12]
 8018a66:	2200      	movs	r2, #0
 8018a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8018a6c:	2301      	movs	r3, #1
 8018a6e:	e007      	b.n	8018a80 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	699b      	ldr	r3, [r3, #24]
 8018a76:	f003 0302 	and.w	r3, r3, #2
 8018a7a:	2b02      	cmp	r3, #2
 8018a7c:	d1cb      	bne.n	8018a16 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8018a7e:	2300      	movs	r3, #0
}
 8018a80:	4618      	mov	r0, r3
 8018a82:	3710      	adds	r7, #16
 8018a84:	46bd      	mov	sp, r7
 8018a86:	bd80      	pop	{r7, pc}

08018a88 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8018a88:	b580      	push	{r7, lr}
 8018a8a:	b084      	sub	sp, #16
 8018a8c:	af00      	add	r7, sp, #0
 8018a8e:	60f8      	str	r0, [r7, #12]
 8018a90:	60b9      	str	r1, [r7, #8]
 8018a92:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018a94:	e028      	b.n	8018ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8018a96:	687a      	ldr	r2, [r7, #4]
 8018a98:	68b9      	ldr	r1, [r7, #8]
 8018a9a:	68f8      	ldr	r0, [r7, #12]
 8018a9c:	f000 f830 	bl	8018b00 <I2C_IsErrorOccurred>
 8018aa0:	4603      	mov	r3, r0
 8018aa2:	2b00      	cmp	r3, #0
 8018aa4:	d001      	beq.n	8018aaa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8018aa6:	2301      	movs	r3, #1
 8018aa8:	e026      	b.n	8018af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018aaa:	f7fc febb 	bl	8015824 <HAL_GetTick>
 8018aae:	4602      	mov	r2, r0
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	1ad3      	subs	r3, r2, r3
 8018ab4:	68ba      	ldr	r2, [r7, #8]
 8018ab6:	429a      	cmp	r2, r3
 8018ab8:	d302      	bcc.n	8018ac0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8018aba:	68bb      	ldr	r3, [r7, #8]
 8018abc:	2b00      	cmp	r3, #0
 8018abe:	d113      	bne.n	8018ae8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018ac0:	68fb      	ldr	r3, [r7, #12]
 8018ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018ac4:	f043 0220 	orr.w	r2, r3, #32
 8018ac8:	68fb      	ldr	r3, [r7, #12]
 8018aca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	2220      	movs	r2, #32
 8018ad0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018ad4:	68fb      	ldr	r3, [r7, #12]
 8018ad6:	2200      	movs	r2, #0
 8018ad8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018adc:	68fb      	ldr	r3, [r7, #12]
 8018ade:	2200      	movs	r2, #0
 8018ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018ae4:	2301      	movs	r3, #1
 8018ae6:	e007      	b.n	8018af8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018ae8:	68fb      	ldr	r3, [r7, #12]
 8018aea:	681b      	ldr	r3, [r3, #0]
 8018aec:	699b      	ldr	r3, [r3, #24]
 8018aee:	f003 0320 	and.w	r3, r3, #32
 8018af2:	2b20      	cmp	r3, #32
 8018af4:	d1cf      	bne.n	8018a96 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8018af6:	2300      	movs	r3, #0
}
 8018af8:	4618      	mov	r0, r3
 8018afa:	3710      	adds	r7, #16
 8018afc:	46bd      	mov	sp, r7
 8018afe:	bd80      	pop	{r7, pc}

08018b00 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018b00:	b580      	push	{r7, lr}
 8018b02:	b08a      	sub	sp, #40	; 0x28
 8018b04:	af00      	add	r7, sp, #0
 8018b06:	60f8      	str	r0, [r7, #12]
 8018b08:	60b9      	str	r1, [r7, #8]
 8018b0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018b0c:	2300      	movs	r3, #0
 8018b0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8018b12:	68fb      	ldr	r3, [r7, #12]
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	699b      	ldr	r3, [r3, #24]
 8018b18:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8018b1a:	2300      	movs	r3, #0
 8018b1c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018b1e:	687b      	ldr	r3, [r7, #4]
 8018b20:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018b22:	69bb      	ldr	r3, [r7, #24]
 8018b24:	f003 0310 	and.w	r3, r3, #16
 8018b28:	2b00      	cmp	r3, #0
 8018b2a:	d068      	beq.n	8018bfe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8018b2c:	68fb      	ldr	r3, [r7, #12]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	2210      	movs	r2, #16
 8018b32:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018b34:	e049      	b.n	8018bca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8018b36:	68bb      	ldr	r3, [r7, #8]
 8018b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018b3c:	d045      	beq.n	8018bca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018b3e:	f7fc fe71 	bl	8015824 <HAL_GetTick>
 8018b42:	4602      	mov	r2, r0
 8018b44:	69fb      	ldr	r3, [r7, #28]
 8018b46:	1ad3      	subs	r3, r2, r3
 8018b48:	68ba      	ldr	r2, [r7, #8]
 8018b4a:	429a      	cmp	r2, r3
 8018b4c:	d302      	bcc.n	8018b54 <I2C_IsErrorOccurred+0x54>
 8018b4e:	68bb      	ldr	r3, [r7, #8]
 8018b50:	2b00      	cmp	r3, #0
 8018b52:	d13a      	bne.n	8018bca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018b54:	68fb      	ldr	r3, [r7, #12]
 8018b56:	681b      	ldr	r3, [r3, #0]
 8018b58:	685b      	ldr	r3, [r3, #4]
 8018b5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8018b5e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018b66:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	681b      	ldr	r3, [r3, #0]
 8018b6c:	699b      	ldr	r3, [r3, #24]
 8018b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8018b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8018b76:	d121      	bne.n	8018bbc <I2C_IsErrorOccurred+0xbc>
 8018b78:	697b      	ldr	r3, [r7, #20]
 8018b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8018b7e:	d01d      	beq.n	8018bbc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8018b80:	7cfb      	ldrb	r3, [r7, #19]
 8018b82:	2b20      	cmp	r3, #32
 8018b84:	d01a      	beq.n	8018bbc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8018b86:	68fb      	ldr	r3, [r7, #12]
 8018b88:	681b      	ldr	r3, [r3, #0]
 8018b8a:	685a      	ldr	r2, [r3, #4]
 8018b8c:	68fb      	ldr	r3, [r7, #12]
 8018b8e:	681b      	ldr	r3, [r3, #0]
 8018b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018b94:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8018b96:	f7fc fe45 	bl	8015824 <HAL_GetTick>
 8018b9a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018b9c:	e00e      	b.n	8018bbc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018b9e:	f7fc fe41 	bl	8015824 <HAL_GetTick>
 8018ba2:	4602      	mov	r2, r0
 8018ba4:	69fb      	ldr	r3, [r7, #28]
 8018ba6:	1ad3      	subs	r3, r2, r3
 8018ba8:	2b19      	cmp	r3, #25
 8018baa:	d907      	bls.n	8018bbc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8018bac:	6a3b      	ldr	r3, [r7, #32]
 8018bae:	f043 0320 	orr.w	r3, r3, #32
 8018bb2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018bb4:	2301      	movs	r3, #1
 8018bb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8018bba:	e006      	b.n	8018bca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018bbc:	68fb      	ldr	r3, [r7, #12]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	699b      	ldr	r3, [r3, #24]
 8018bc2:	f003 0320 	and.w	r3, r3, #32
 8018bc6:	2b20      	cmp	r3, #32
 8018bc8:	d1e9      	bne.n	8018b9e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	681b      	ldr	r3, [r3, #0]
 8018bce:	699b      	ldr	r3, [r3, #24]
 8018bd0:	f003 0320 	and.w	r3, r3, #32
 8018bd4:	2b20      	cmp	r3, #32
 8018bd6:	d003      	beq.n	8018be0 <I2C_IsErrorOccurred+0xe0>
 8018bd8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bdc:	2b00      	cmp	r3, #0
 8018bde:	d0aa      	beq.n	8018b36 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018be0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d103      	bne.n	8018bf0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	681b      	ldr	r3, [r3, #0]
 8018bec:	2220      	movs	r2, #32
 8018bee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018bf0:	6a3b      	ldr	r3, [r7, #32]
 8018bf2:	f043 0304 	orr.w	r3, r3, #4
 8018bf6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8018bf8:	2301      	movs	r3, #1
 8018bfa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	681b      	ldr	r3, [r3, #0]
 8018c02:	699b      	ldr	r3, [r3, #24]
 8018c04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8018c06:	69bb      	ldr	r3, [r7, #24]
 8018c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c0c:	2b00      	cmp	r3, #0
 8018c0e:	d00b      	beq.n	8018c28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018c10:	6a3b      	ldr	r3, [r7, #32]
 8018c12:	f043 0301 	orr.w	r3, r3, #1
 8018c16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8018c18:	68fb      	ldr	r3, [r7, #12]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018c20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018c22:	2301      	movs	r3, #1
 8018c24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8018c28:	69bb      	ldr	r3, [r7, #24]
 8018c2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d00b      	beq.n	8018c4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8018c32:	6a3b      	ldr	r3, [r7, #32]
 8018c34:	f043 0308 	orr.w	r3, r3, #8
 8018c38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8018c3a:	68fb      	ldr	r3, [r7, #12]
 8018c3c:	681b      	ldr	r3, [r3, #0]
 8018c3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8018c42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018c44:	2301      	movs	r3, #1
 8018c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018c4a:	69bb      	ldr	r3, [r7, #24]
 8018c4c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8018c50:	2b00      	cmp	r3, #0
 8018c52:	d00b      	beq.n	8018c6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018c54:	6a3b      	ldr	r3, [r7, #32]
 8018c56:	f043 0302 	orr.w	r3, r3, #2
 8018c5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	681b      	ldr	r3, [r3, #0]
 8018c60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8018c64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018c66:	2301      	movs	r3, #1
 8018c68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8018c6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c70:	2b00      	cmp	r3, #0
 8018c72:	d01c      	beq.n	8018cae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018c74:	68f8      	ldr	r0, [r7, #12]
 8018c76:	f7ff fe63 	bl	8018940 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	6859      	ldr	r1, [r3, #4]
 8018c80:	68fb      	ldr	r3, [r7, #12]
 8018c82:	681a      	ldr	r2, [r3, #0]
 8018c84:	4b0d      	ldr	r3, [pc, #52]	; (8018cbc <I2C_IsErrorOccurred+0x1bc>)
 8018c86:	400b      	ands	r3, r1
 8018c88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018c8e:	6a3b      	ldr	r3, [r7, #32]
 8018c90:	431a      	orrs	r2, r3
 8018c92:	68fb      	ldr	r3, [r7, #12]
 8018c94:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	2220      	movs	r2, #32
 8018c9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018c9e:	68fb      	ldr	r3, [r7, #12]
 8018ca0:	2200      	movs	r2, #0
 8018ca2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018ca6:	68fb      	ldr	r3, [r7, #12]
 8018ca8:	2200      	movs	r2, #0
 8018caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8018cae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3728      	adds	r7, #40	; 0x28
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	fe00e800 	.word	0xfe00e800

08018cc0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018cc0:	b480      	push	{r7}
 8018cc2:	b087      	sub	sp, #28
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	60f8      	str	r0, [r7, #12]
 8018cc8:	607b      	str	r3, [r7, #4]
 8018cca:	460b      	mov	r3, r1
 8018ccc:	817b      	strh	r3, [r7, #10]
 8018cce:	4613      	mov	r3, r2
 8018cd0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018cd2:	897b      	ldrh	r3, [r7, #10]
 8018cd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018cd8:	7a7b      	ldrb	r3, [r7, #9]
 8018cda:	041b      	lsls	r3, r3, #16
 8018cdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ce0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018ce2:	687b      	ldr	r3, [r7, #4]
 8018ce4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018ce6:	6a3b      	ldr	r3, [r7, #32]
 8018ce8:	4313      	orrs	r3, r2
 8018cea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018cee:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018cf0:	68fb      	ldr	r3, [r7, #12]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	685a      	ldr	r2, [r3, #4]
 8018cf6:	6a3b      	ldr	r3, [r7, #32]
 8018cf8:	0d5b      	lsrs	r3, r3, #21
 8018cfa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018cfe:	4b08      	ldr	r3, [pc, #32]	; (8018d20 <I2C_TransferConfig+0x60>)
 8018d00:	430b      	orrs	r3, r1
 8018d02:	43db      	mvns	r3, r3
 8018d04:	ea02 0103 	and.w	r1, r2, r3
 8018d08:	68fb      	ldr	r3, [r7, #12]
 8018d0a:	681b      	ldr	r3, [r3, #0]
 8018d0c:	697a      	ldr	r2, [r7, #20]
 8018d0e:	430a      	orrs	r2, r1
 8018d10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018d12:	bf00      	nop
 8018d14:	371c      	adds	r7, #28
 8018d16:	46bd      	mov	sp, r7
 8018d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d1c:	4770      	bx	lr
 8018d1e:	bf00      	nop
 8018d20:	03ff63ff 	.word	0x03ff63ff

08018d24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018d24:	b480      	push	{r7}
 8018d26:	b083      	sub	sp, #12
 8018d28:	af00      	add	r7, sp, #0
 8018d2a:	6078      	str	r0, [r7, #4]
 8018d2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018d2e:	687b      	ldr	r3, [r7, #4]
 8018d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018d34:	b2db      	uxtb	r3, r3
 8018d36:	2b20      	cmp	r3, #32
 8018d38:	d138      	bne.n	8018dac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018d3a:	687b      	ldr	r3, [r7, #4]
 8018d3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018d40:	2b01      	cmp	r3, #1
 8018d42:	d101      	bne.n	8018d48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018d44:	2302      	movs	r3, #2
 8018d46:	e032      	b.n	8018dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	2201      	movs	r2, #1
 8018d4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018d50:	687b      	ldr	r3, [r7, #4]
 8018d52:	2224      	movs	r2, #36	; 0x24
 8018d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	681b      	ldr	r3, [r3, #0]
 8018d5c:	681a      	ldr	r2, [r3, #0]
 8018d5e:	687b      	ldr	r3, [r7, #4]
 8018d60:	681b      	ldr	r3, [r3, #0]
 8018d62:	f022 0201 	bic.w	r2, r2, #1
 8018d66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018d68:	687b      	ldr	r3, [r7, #4]
 8018d6a:	681b      	ldr	r3, [r3, #0]
 8018d6c:	681a      	ldr	r2, [r3, #0]
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8018d76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	6819      	ldr	r1, [r3, #0]
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	683a      	ldr	r2, [r7, #0]
 8018d84:	430a      	orrs	r2, r1
 8018d86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018d88:	687b      	ldr	r3, [r7, #4]
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	681a      	ldr	r2, [r3, #0]
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	f042 0201 	orr.w	r2, r2, #1
 8018d96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	2220      	movs	r2, #32
 8018d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018da0:	687b      	ldr	r3, [r7, #4]
 8018da2:	2200      	movs	r2, #0
 8018da4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018da8:	2300      	movs	r3, #0
 8018daa:	e000      	b.n	8018dae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018dac:	2302      	movs	r3, #2
  }
}
 8018dae:	4618      	mov	r0, r3
 8018db0:	370c      	adds	r7, #12
 8018db2:	46bd      	mov	sp, r7
 8018db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018db8:	4770      	bx	lr

08018dba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018dba:	b480      	push	{r7}
 8018dbc:	b085      	sub	sp, #20
 8018dbe:	af00      	add	r7, sp, #0
 8018dc0:	6078      	str	r0, [r7, #4]
 8018dc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018dca:	b2db      	uxtb	r3, r3
 8018dcc:	2b20      	cmp	r3, #32
 8018dce:	d139      	bne.n	8018e44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018dd6:	2b01      	cmp	r3, #1
 8018dd8:	d101      	bne.n	8018dde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018dda:	2302      	movs	r3, #2
 8018ddc:	e033      	b.n	8018e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018dde:	687b      	ldr	r3, [r7, #4]
 8018de0:	2201      	movs	r2, #1
 8018de2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	2224      	movs	r2, #36	; 0x24
 8018dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	681a      	ldr	r2, [r3, #0]
 8018df4:	687b      	ldr	r3, [r7, #4]
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	f022 0201 	bic.w	r2, r2, #1
 8018dfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	681b      	ldr	r3, [r3, #0]
 8018e04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018e06:	68fb      	ldr	r3, [r7, #12]
 8018e08:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018e0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	021b      	lsls	r3, r3, #8
 8018e12:	68fa      	ldr	r2, [r7, #12]
 8018e14:	4313      	orrs	r3, r2
 8018e16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018e18:	687b      	ldr	r3, [r7, #4]
 8018e1a:	681b      	ldr	r3, [r3, #0]
 8018e1c:	68fa      	ldr	r2, [r7, #12]
 8018e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	681a      	ldr	r2, [r3, #0]
 8018e26:	687b      	ldr	r3, [r7, #4]
 8018e28:	681b      	ldr	r3, [r3, #0]
 8018e2a:	f042 0201 	orr.w	r2, r2, #1
 8018e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018e30:	687b      	ldr	r3, [r7, #4]
 8018e32:	2220      	movs	r2, #32
 8018e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	2200      	movs	r2, #0
 8018e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8018e40:	2300      	movs	r3, #0
 8018e42:	e000      	b.n	8018e46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018e44:	2302      	movs	r3, #2
  }
}
 8018e46:	4618      	mov	r0, r3
 8018e48:	3714      	adds	r7, #20
 8018e4a:	46bd      	mov	sp, r7
 8018e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e50:	4770      	bx	lr

08018e52 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8018e52:	b580      	push	{r7, lr}
 8018e54:	b084      	sub	sp, #16
 8018e56:	af00      	add	r7, sp, #0
 8018e58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8018e5a:	687b      	ldr	r3, [r7, #4]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d101      	bne.n	8018e64 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8018e60:	2301      	movs	r3, #1
 8018e62:	e041      	b.n	8018ee8 <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8018e64:	687b      	ldr	r3, [r7, #4]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 8018e6c:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	f245 5255 	movw	r2, #21845	; 0x5555
 8018e76:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	681b      	ldr	r3, [r3, #0]
 8018e7c:	687a      	ldr	r2, [r7, #4]
 8018e7e:	6852      	ldr	r2, [r2, #4]
 8018e80:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8018e82:	687b      	ldr	r3, [r7, #4]
 8018e84:	681b      	ldr	r3, [r3, #0]
 8018e86:	687a      	ldr	r2, [r7, #4]
 8018e88:	6892      	ldr	r2, [r2, #8]
 8018e8a:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8018e8c:	f7fc fcca 	bl	8015824 <HAL_GetTick>
 8018e90:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018e92:	e00f      	b.n	8018eb4 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8018e94:	f7fc fcc6 	bl	8015824 <HAL_GetTick>
 8018e98:	4602      	mov	r2, r0
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	1ad3      	subs	r3, r2, r3
 8018e9e:	2b31      	cmp	r3, #49	; 0x31
 8018ea0:	d908      	bls.n	8018eb4 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	681b      	ldr	r3, [r3, #0]
 8018ea6:	68db      	ldr	r3, [r3, #12]
 8018ea8:	f003 0307 	and.w	r3, r3, #7
 8018eac:	2b00      	cmp	r3, #0
 8018eae:	d001      	beq.n	8018eb4 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8018eb0:	2303      	movs	r3, #3
 8018eb2:	e019      	b.n	8018ee8 <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018eb4:	687b      	ldr	r3, [r7, #4]
 8018eb6:	681b      	ldr	r3, [r3, #0]
 8018eb8:	68db      	ldr	r3, [r3, #12]
 8018eba:	f003 0307 	and.w	r3, r3, #7
 8018ebe:	2b00      	cmp	r3, #0
 8018ec0:	d1e8      	bne.n	8018e94 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	681b      	ldr	r3, [r3, #0]
 8018ec6:	691a      	ldr	r2, [r3, #16]
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	68db      	ldr	r3, [r3, #12]
 8018ecc:	429a      	cmp	r2, r3
 8018ece:	d005      	beq.n	8018edc <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8018ed0:	687b      	ldr	r3, [r7, #4]
 8018ed2:	681b      	ldr	r3, [r3, #0]
 8018ed4:	687a      	ldr	r2, [r7, #4]
 8018ed6:	68d2      	ldr	r2, [r2, #12]
 8018ed8:	611a      	str	r2, [r3, #16]
 8018eda:	e004      	b.n	8018ee6 <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018edc:	687b      	ldr	r3, [r7, #4]
 8018ede:	681b      	ldr	r3, [r3, #0]
 8018ee0:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018ee4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8018ee6:	2300      	movs	r3, #0
}
 8018ee8:	4618      	mov	r0, r3
 8018eea:	3710      	adds	r7, #16
 8018eec:	46bd      	mov	sp, r7
 8018eee:	bd80      	pop	{r7, pc}

08018ef0 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8018ef0:	b480      	push	{r7}
 8018ef2:	b083      	sub	sp, #12
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018ef8:	687b      	ldr	r3, [r7, #4]
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018f00:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8018f02:	2300      	movs	r3, #0
}
 8018f04:	4618      	mov	r0, r3
 8018f06:	370c      	adds	r7, #12
 8018f08:	46bd      	mov	sp, r7
 8018f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f0e:	4770      	bx	lr

08018f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b086      	sub	sp, #24
 8018f14:	af00      	add	r7, sp, #0
 8018f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8018f18:	2300      	movs	r3, #0
 8018f1a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d101      	bne.n	8018f26 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8018f22:	2301      	movs	r3, #1
 8018f24:	e29b      	b.n	801945e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8018f26:	687b      	ldr	r3, [r7, #4]
 8018f28:	681b      	ldr	r3, [r3, #0]
 8018f2a:	f003 0301 	and.w	r3, r3, #1
 8018f2e:	2b00      	cmp	r3, #0
 8018f30:	f000 8087 	beq.w	8019042 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8018f34:	4b96      	ldr	r3, [pc, #600]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f36:	689b      	ldr	r3, [r3, #8]
 8018f38:	f003 030c 	and.w	r3, r3, #12
 8018f3c:	2b04      	cmp	r3, #4
 8018f3e:	d00c      	beq.n	8018f5a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8018f40:	4b93      	ldr	r3, [pc, #588]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f42:	689b      	ldr	r3, [r3, #8]
 8018f44:	f003 030c 	and.w	r3, r3, #12
 8018f48:	2b08      	cmp	r3, #8
 8018f4a:	d112      	bne.n	8018f72 <HAL_RCC_OscConfig+0x62>
 8018f4c:	4b90      	ldr	r3, [pc, #576]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f4e:	685b      	ldr	r3, [r3, #4]
 8018f50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018f54:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8018f58:	d10b      	bne.n	8018f72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018f5a:	4b8d      	ldr	r3, [pc, #564]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f5c:	681b      	ldr	r3, [r3, #0]
 8018f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d06c      	beq.n	8019040 <HAL_RCC_OscConfig+0x130>
 8018f66:	687b      	ldr	r3, [r7, #4]
 8018f68:	685b      	ldr	r3, [r3, #4]
 8018f6a:	2b00      	cmp	r3, #0
 8018f6c:	d168      	bne.n	8019040 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8018f6e:	2301      	movs	r3, #1
 8018f70:	e275      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8018f72:	687b      	ldr	r3, [r7, #4]
 8018f74:	685b      	ldr	r3, [r3, #4]
 8018f76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018f7a:	d106      	bne.n	8018f8a <HAL_RCC_OscConfig+0x7a>
 8018f7c:	4b84      	ldr	r3, [pc, #528]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f7e:	681b      	ldr	r3, [r3, #0]
 8018f80:	4a83      	ldr	r2, [pc, #524]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018f86:	6013      	str	r3, [r2, #0]
 8018f88:	e02e      	b.n	8018fe8 <HAL_RCC_OscConfig+0xd8>
 8018f8a:	687b      	ldr	r3, [r7, #4]
 8018f8c:	685b      	ldr	r3, [r3, #4]
 8018f8e:	2b00      	cmp	r3, #0
 8018f90:	d10c      	bne.n	8018fac <HAL_RCC_OscConfig+0x9c>
 8018f92:	4b7f      	ldr	r3, [pc, #508]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f94:	681b      	ldr	r3, [r3, #0]
 8018f96:	4a7e      	ldr	r2, [pc, #504]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018f98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018f9c:	6013      	str	r3, [r2, #0]
 8018f9e:	4b7c      	ldr	r3, [pc, #496]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fa0:	681b      	ldr	r3, [r3, #0]
 8018fa2:	4a7b      	ldr	r2, [pc, #492]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fa4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018fa8:	6013      	str	r3, [r2, #0]
 8018faa:	e01d      	b.n	8018fe8 <HAL_RCC_OscConfig+0xd8>
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	685b      	ldr	r3, [r3, #4]
 8018fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8018fb4:	d10c      	bne.n	8018fd0 <HAL_RCC_OscConfig+0xc0>
 8018fb6:	4b76      	ldr	r3, [pc, #472]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fb8:	681b      	ldr	r3, [r3, #0]
 8018fba:	4a75      	ldr	r2, [pc, #468]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8018fc0:	6013      	str	r3, [r2, #0]
 8018fc2:	4b73      	ldr	r3, [pc, #460]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fc4:	681b      	ldr	r3, [r3, #0]
 8018fc6:	4a72      	ldr	r2, [pc, #456]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018fcc:	6013      	str	r3, [r2, #0]
 8018fce:	e00b      	b.n	8018fe8 <HAL_RCC_OscConfig+0xd8>
 8018fd0:	4b6f      	ldr	r3, [pc, #444]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fd2:	681b      	ldr	r3, [r3, #0]
 8018fd4:	4a6e      	ldr	r2, [pc, #440]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018fda:	6013      	str	r3, [r2, #0]
 8018fdc:	4b6c      	ldr	r3, [pc, #432]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fde:	681b      	ldr	r3, [r3, #0]
 8018fe0:	4a6b      	ldr	r2, [pc, #428]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8018fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018fe8:	687b      	ldr	r3, [r7, #4]
 8018fea:	685b      	ldr	r3, [r3, #4]
 8018fec:	2b00      	cmp	r3, #0
 8018fee:	d013      	beq.n	8019018 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018ff0:	f7fc fc18 	bl	8015824 <HAL_GetTick>
 8018ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018ff6:	e008      	b.n	801900a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018ff8:	f7fc fc14 	bl	8015824 <HAL_GetTick>
 8018ffc:	4602      	mov	r2, r0
 8018ffe:	693b      	ldr	r3, [r7, #16]
 8019000:	1ad3      	subs	r3, r2, r3
 8019002:	2b64      	cmp	r3, #100	; 0x64
 8019004:	d901      	bls.n	801900a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8019006:	2303      	movs	r3, #3
 8019008:	e229      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 801900a:	4b61      	ldr	r3, [pc, #388]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801900c:	681b      	ldr	r3, [r3, #0]
 801900e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019012:	2b00      	cmp	r3, #0
 8019014:	d0f0      	beq.n	8018ff8 <HAL_RCC_OscConfig+0xe8>
 8019016:	e014      	b.n	8019042 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019018:	f7fc fc04 	bl	8015824 <HAL_GetTick>
 801901c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 801901e:	e008      	b.n	8019032 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8019020:	f7fc fc00 	bl	8015824 <HAL_GetTick>
 8019024:	4602      	mov	r2, r0
 8019026:	693b      	ldr	r3, [r7, #16]
 8019028:	1ad3      	subs	r3, r2, r3
 801902a:	2b64      	cmp	r3, #100	; 0x64
 801902c:	d901      	bls.n	8019032 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801902e:	2303      	movs	r3, #3
 8019030:	e215      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8019032:	4b57      	ldr	r3, [pc, #348]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019034:	681b      	ldr	r3, [r3, #0]
 8019036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801903a:	2b00      	cmp	r3, #0
 801903c:	d1f0      	bne.n	8019020 <HAL_RCC_OscConfig+0x110>
 801903e:	e000      	b.n	8019042 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8019040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8019042:	687b      	ldr	r3, [r7, #4]
 8019044:	681b      	ldr	r3, [r3, #0]
 8019046:	f003 0302 	and.w	r3, r3, #2
 801904a:	2b00      	cmp	r3, #0
 801904c:	d069      	beq.n	8019122 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 801904e:	4b50      	ldr	r3, [pc, #320]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019050:	689b      	ldr	r3, [r3, #8]
 8019052:	f003 030c 	and.w	r3, r3, #12
 8019056:	2b00      	cmp	r3, #0
 8019058:	d00b      	beq.n	8019072 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801905a:	4b4d      	ldr	r3, [pc, #308]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801905c:	689b      	ldr	r3, [r3, #8]
 801905e:	f003 030c 	and.w	r3, r3, #12
 8019062:	2b08      	cmp	r3, #8
 8019064:	d11c      	bne.n	80190a0 <HAL_RCC_OscConfig+0x190>
 8019066:	4b4a      	ldr	r3, [pc, #296]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019068:	685b      	ldr	r3, [r3, #4]
 801906a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801906e:	2b00      	cmp	r3, #0
 8019070:	d116      	bne.n	80190a0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8019072:	4b47      	ldr	r3, [pc, #284]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	f003 0302 	and.w	r3, r3, #2
 801907a:	2b00      	cmp	r3, #0
 801907c:	d005      	beq.n	801908a <HAL_RCC_OscConfig+0x17a>
 801907e:	687b      	ldr	r3, [r7, #4]
 8019080:	68db      	ldr	r3, [r3, #12]
 8019082:	2b01      	cmp	r3, #1
 8019084:	d001      	beq.n	801908a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8019086:	2301      	movs	r3, #1
 8019088:	e1e9      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801908a:	4b41      	ldr	r3, [pc, #260]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801908c:	681b      	ldr	r3, [r3, #0]
 801908e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8019092:	687b      	ldr	r3, [r7, #4]
 8019094:	691b      	ldr	r3, [r3, #16]
 8019096:	00db      	lsls	r3, r3, #3
 8019098:	493d      	ldr	r1, [pc, #244]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801909a:	4313      	orrs	r3, r2
 801909c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801909e:	e040      	b.n	8019122 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80190a0:	687b      	ldr	r3, [r7, #4]
 80190a2:	68db      	ldr	r3, [r3, #12]
 80190a4:	2b00      	cmp	r3, #0
 80190a6:	d023      	beq.n	80190f0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80190a8:	4b39      	ldr	r3, [pc, #228]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190aa:	681b      	ldr	r3, [r3, #0]
 80190ac:	4a38      	ldr	r2, [pc, #224]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190ae:	f043 0301 	orr.w	r3, r3, #1
 80190b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80190b4:	f7fc fbb6 	bl	8015824 <HAL_GetTick>
 80190b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80190ba:	e008      	b.n	80190ce <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80190bc:	f7fc fbb2 	bl	8015824 <HAL_GetTick>
 80190c0:	4602      	mov	r2, r0
 80190c2:	693b      	ldr	r3, [r7, #16]
 80190c4:	1ad3      	subs	r3, r2, r3
 80190c6:	2b02      	cmp	r3, #2
 80190c8:	d901      	bls.n	80190ce <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80190ca:	2303      	movs	r3, #3
 80190cc:	e1c7      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80190ce:	4b30      	ldr	r3, [pc, #192]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190d0:	681b      	ldr	r3, [r3, #0]
 80190d2:	f003 0302 	and.w	r3, r3, #2
 80190d6:	2b00      	cmp	r3, #0
 80190d8:	d0f0      	beq.n	80190bc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80190da:	4b2d      	ldr	r3, [pc, #180]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190dc:	681b      	ldr	r3, [r3, #0]
 80190de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	691b      	ldr	r3, [r3, #16]
 80190e6:	00db      	lsls	r3, r3, #3
 80190e8:	4929      	ldr	r1, [pc, #164]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190ea:	4313      	orrs	r3, r2
 80190ec:	600b      	str	r3, [r1, #0]
 80190ee:	e018      	b.n	8019122 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80190f0:	4b27      	ldr	r3, [pc, #156]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190f2:	681b      	ldr	r3, [r3, #0]
 80190f4:	4a26      	ldr	r2, [pc, #152]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 80190f6:	f023 0301 	bic.w	r3, r3, #1
 80190fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80190fc:	f7fc fb92 	bl	8015824 <HAL_GetTick>
 8019100:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019102:	e008      	b.n	8019116 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8019104:	f7fc fb8e 	bl	8015824 <HAL_GetTick>
 8019108:	4602      	mov	r2, r0
 801910a:	693b      	ldr	r3, [r7, #16]
 801910c:	1ad3      	subs	r3, r2, r3
 801910e:	2b02      	cmp	r3, #2
 8019110:	d901      	bls.n	8019116 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8019112:	2303      	movs	r3, #3
 8019114:	e1a3      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8019116:	4b1e      	ldr	r3, [pc, #120]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019118:	681b      	ldr	r3, [r3, #0]
 801911a:	f003 0302 	and.w	r3, r3, #2
 801911e:	2b00      	cmp	r3, #0
 8019120:	d1f0      	bne.n	8019104 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8019122:	687b      	ldr	r3, [r7, #4]
 8019124:	681b      	ldr	r3, [r3, #0]
 8019126:	f003 0308 	and.w	r3, r3, #8
 801912a:	2b00      	cmp	r3, #0
 801912c:	d038      	beq.n	80191a0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801912e:	687b      	ldr	r3, [r7, #4]
 8019130:	695b      	ldr	r3, [r3, #20]
 8019132:	2b00      	cmp	r3, #0
 8019134:	d019      	beq.n	801916a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8019136:	4b16      	ldr	r3, [pc, #88]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801913a:	4a15      	ldr	r2, [pc, #84]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801913c:	f043 0301 	orr.w	r3, r3, #1
 8019140:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019142:	f7fc fb6f 	bl	8015824 <HAL_GetTick>
 8019146:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8019148:	e008      	b.n	801915c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801914a:	f7fc fb6b 	bl	8015824 <HAL_GetTick>
 801914e:	4602      	mov	r2, r0
 8019150:	693b      	ldr	r3, [r7, #16]
 8019152:	1ad3      	subs	r3, r2, r3
 8019154:	2b02      	cmp	r3, #2
 8019156:	d901      	bls.n	801915c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8019158:	2303      	movs	r3, #3
 801915a:	e180      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 801915c:	4b0c      	ldr	r3, [pc, #48]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801915e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019160:	f003 0302 	and.w	r3, r3, #2
 8019164:	2b00      	cmp	r3, #0
 8019166:	d0f0      	beq.n	801914a <HAL_RCC_OscConfig+0x23a>
 8019168:	e01a      	b.n	80191a0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801916a:	4b09      	ldr	r3, [pc, #36]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 801916c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801916e:	4a08      	ldr	r2, [pc, #32]	; (8019190 <HAL_RCC_OscConfig+0x280>)
 8019170:	f023 0301 	bic.w	r3, r3, #1
 8019174:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8019176:	f7fc fb55 	bl	8015824 <HAL_GetTick>
 801917a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801917c:	e00a      	b.n	8019194 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801917e:	f7fc fb51 	bl	8015824 <HAL_GetTick>
 8019182:	4602      	mov	r2, r0
 8019184:	693b      	ldr	r3, [r7, #16]
 8019186:	1ad3      	subs	r3, r2, r3
 8019188:	2b02      	cmp	r3, #2
 801918a:	d903      	bls.n	8019194 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 801918c:	2303      	movs	r3, #3
 801918e:	e166      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
 8019190:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8019194:	4b92      	ldr	r3, [pc, #584]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019198:	f003 0302 	and.w	r3, r3, #2
 801919c:	2b00      	cmp	r3, #0
 801919e:	d1ee      	bne.n	801917e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80191a0:	687b      	ldr	r3, [r7, #4]
 80191a2:	681b      	ldr	r3, [r3, #0]
 80191a4:	f003 0304 	and.w	r3, r3, #4
 80191a8:	2b00      	cmp	r3, #0
 80191aa:	f000 80a4 	beq.w	80192f6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80191ae:	4b8c      	ldr	r3, [pc, #560]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80191b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d10d      	bne.n	80191d6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80191ba:	4b89      	ldr	r3, [pc, #548]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80191bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191be:	4a88      	ldr	r2, [pc, #544]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80191c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80191c4:	6413      	str	r3, [r2, #64]	; 0x40
 80191c6:	4b86      	ldr	r3, [pc, #536]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80191c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80191ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80191ce:	60bb      	str	r3, [r7, #8]
 80191d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80191d2:	2301      	movs	r3, #1
 80191d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80191d6:	4b83      	ldr	r3, [pc, #524]	; (80193e4 <HAL_RCC_OscConfig+0x4d4>)
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d118      	bne.n	8019214 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80191e2:	4b80      	ldr	r3, [pc, #512]	; (80193e4 <HAL_RCC_OscConfig+0x4d4>)
 80191e4:	681b      	ldr	r3, [r3, #0]
 80191e6:	4a7f      	ldr	r2, [pc, #508]	; (80193e4 <HAL_RCC_OscConfig+0x4d4>)
 80191e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80191ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80191ee:	f7fc fb19 	bl	8015824 <HAL_GetTick>
 80191f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80191f4:	e008      	b.n	8019208 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80191f6:	f7fc fb15 	bl	8015824 <HAL_GetTick>
 80191fa:	4602      	mov	r2, r0
 80191fc:	693b      	ldr	r3, [r7, #16]
 80191fe:	1ad3      	subs	r3, r2, r3
 8019200:	2b64      	cmp	r3, #100	; 0x64
 8019202:	d901      	bls.n	8019208 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8019204:	2303      	movs	r3, #3
 8019206:	e12a      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8019208:	4b76      	ldr	r3, [pc, #472]	; (80193e4 <HAL_RCC_OscConfig+0x4d4>)
 801920a:	681b      	ldr	r3, [r3, #0]
 801920c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019210:	2b00      	cmp	r3, #0
 8019212:	d0f0      	beq.n	80191f6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	689b      	ldr	r3, [r3, #8]
 8019218:	2b01      	cmp	r3, #1
 801921a:	d106      	bne.n	801922a <HAL_RCC_OscConfig+0x31a>
 801921c:	4b70      	ldr	r3, [pc, #448]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801921e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019220:	4a6f      	ldr	r2, [pc, #444]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019222:	f043 0301 	orr.w	r3, r3, #1
 8019226:	6713      	str	r3, [r2, #112]	; 0x70
 8019228:	e02d      	b.n	8019286 <HAL_RCC_OscConfig+0x376>
 801922a:	687b      	ldr	r3, [r7, #4]
 801922c:	689b      	ldr	r3, [r3, #8]
 801922e:	2b00      	cmp	r3, #0
 8019230:	d10c      	bne.n	801924c <HAL_RCC_OscConfig+0x33c>
 8019232:	4b6b      	ldr	r3, [pc, #428]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019236:	4a6a      	ldr	r2, [pc, #424]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019238:	f023 0301 	bic.w	r3, r3, #1
 801923c:	6713      	str	r3, [r2, #112]	; 0x70
 801923e:	4b68      	ldr	r3, [pc, #416]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019240:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019242:	4a67      	ldr	r2, [pc, #412]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019244:	f023 0304 	bic.w	r3, r3, #4
 8019248:	6713      	str	r3, [r2, #112]	; 0x70
 801924a:	e01c      	b.n	8019286 <HAL_RCC_OscConfig+0x376>
 801924c:	687b      	ldr	r3, [r7, #4]
 801924e:	689b      	ldr	r3, [r3, #8]
 8019250:	2b05      	cmp	r3, #5
 8019252:	d10c      	bne.n	801926e <HAL_RCC_OscConfig+0x35e>
 8019254:	4b62      	ldr	r3, [pc, #392]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019258:	4a61      	ldr	r2, [pc, #388]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801925a:	f043 0304 	orr.w	r3, r3, #4
 801925e:	6713      	str	r3, [r2, #112]	; 0x70
 8019260:	4b5f      	ldr	r3, [pc, #380]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019264:	4a5e      	ldr	r2, [pc, #376]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019266:	f043 0301 	orr.w	r3, r3, #1
 801926a:	6713      	str	r3, [r2, #112]	; 0x70
 801926c:	e00b      	b.n	8019286 <HAL_RCC_OscConfig+0x376>
 801926e:	4b5c      	ldr	r3, [pc, #368]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019272:	4a5b      	ldr	r2, [pc, #364]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019274:	f023 0301 	bic.w	r3, r3, #1
 8019278:	6713      	str	r3, [r2, #112]	; 0x70
 801927a:	4b59      	ldr	r3, [pc, #356]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801927c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801927e:	4a58      	ldr	r2, [pc, #352]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019280:	f023 0304 	bic.w	r3, r3, #4
 8019284:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8019286:	687b      	ldr	r3, [r7, #4]
 8019288:	689b      	ldr	r3, [r3, #8]
 801928a:	2b00      	cmp	r3, #0
 801928c:	d015      	beq.n	80192ba <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801928e:	f7fc fac9 	bl	8015824 <HAL_GetTick>
 8019292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019294:	e00a      	b.n	80192ac <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8019296:	f7fc fac5 	bl	8015824 <HAL_GetTick>
 801929a:	4602      	mov	r2, r0
 801929c:	693b      	ldr	r3, [r7, #16]
 801929e:	1ad3      	subs	r3, r2, r3
 80192a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80192a4:	4293      	cmp	r3, r2
 80192a6:	d901      	bls.n	80192ac <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80192a8:	2303      	movs	r3, #3
 80192aa:	e0d8      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80192ac:	4b4c      	ldr	r3, [pc, #304]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80192ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80192b0:	f003 0302 	and.w	r3, r3, #2
 80192b4:	2b00      	cmp	r3, #0
 80192b6:	d0ee      	beq.n	8019296 <HAL_RCC_OscConfig+0x386>
 80192b8:	e014      	b.n	80192e4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80192ba:	f7fc fab3 	bl	8015824 <HAL_GetTick>
 80192be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80192c0:	e00a      	b.n	80192d8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80192c2:	f7fc faaf 	bl	8015824 <HAL_GetTick>
 80192c6:	4602      	mov	r2, r0
 80192c8:	693b      	ldr	r3, [r7, #16]
 80192ca:	1ad3      	subs	r3, r2, r3
 80192cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80192d0:	4293      	cmp	r3, r2
 80192d2:	d901      	bls.n	80192d8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80192d4:	2303      	movs	r3, #3
 80192d6:	e0c2      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80192d8:	4b41      	ldr	r3, [pc, #260]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80192da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80192dc:	f003 0302 	and.w	r3, r3, #2
 80192e0:	2b00      	cmp	r3, #0
 80192e2:	d1ee      	bne.n	80192c2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80192e4:	7dfb      	ldrb	r3, [r7, #23]
 80192e6:	2b01      	cmp	r3, #1
 80192e8:	d105      	bne.n	80192f6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80192ea:	4b3d      	ldr	r3, [pc, #244]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80192ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80192ee:	4a3c      	ldr	r2, [pc, #240]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80192f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80192f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80192f6:	687b      	ldr	r3, [r7, #4]
 80192f8:	699b      	ldr	r3, [r3, #24]
 80192fa:	2b00      	cmp	r3, #0
 80192fc:	f000 80ae 	beq.w	801945c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8019300:	4b37      	ldr	r3, [pc, #220]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019302:	689b      	ldr	r3, [r3, #8]
 8019304:	f003 030c 	and.w	r3, r3, #12
 8019308:	2b08      	cmp	r3, #8
 801930a:	d06d      	beq.n	80193e8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801930c:	687b      	ldr	r3, [r7, #4]
 801930e:	699b      	ldr	r3, [r3, #24]
 8019310:	2b02      	cmp	r3, #2
 8019312:	d14b      	bne.n	80193ac <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8019314:	4b32      	ldr	r3, [pc, #200]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019316:	681b      	ldr	r3, [r3, #0]
 8019318:	4a31      	ldr	r2, [pc, #196]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801931a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801931e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019320:	f7fc fa80 	bl	8015824 <HAL_GetTick>
 8019324:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8019326:	e008      	b.n	801933a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8019328:	f7fc fa7c 	bl	8015824 <HAL_GetTick>
 801932c:	4602      	mov	r2, r0
 801932e:	693b      	ldr	r3, [r7, #16]
 8019330:	1ad3      	subs	r3, r2, r3
 8019332:	2b02      	cmp	r3, #2
 8019334:	d901      	bls.n	801933a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8019336:	2303      	movs	r3, #3
 8019338:	e091      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 801933a:	4b29      	ldr	r3, [pc, #164]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801933c:	681b      	ldr	r3, [r3, #0]
 801933e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019342:	2b00      	cmp	r3, #0
 8019344:	d1f0      	bne.n	8019328 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8019346:	687b      	ldr	r3, [r7, #4]
 8019348:	69da      	ldr	r2, [r3, #28]
 801934a:	687b      	ldr	r3, [r7, #4]
 801934c:	6a1b      	ldr	r3, [r3, #32]
 801934e:	431a      	orrs	r2, r3
 8019350:	687b      	ldr	r3, [r7, #4]
 8019352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019354:	019b      	lsls	r3, r3, #6
 8019356:	431a      	orrs	r2, r3
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801935c:	085b      	lsrs	r3, r3, #1
 801935e:	3b01      	subs	r3, #1
 8019360:	041b      	lsls	r3, r3, #16
 8019362:	431a      	orrs	r2, r3
 8019364:	687b      	ldr	r3, [r7, #4]
 8019366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019368:	061b      	lsls	r3, r3, #24
 801936a:	431a      	orrs	r2, r3
 801936c:	687b      	ldr	r3, [r7, #4]
 801936e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019370:	071b      	lsls	r3, r3, #28
 8019372:	491b      	ldr	r1, [pc, #108]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 8019374:	4313      	orrs	r3, r2
 8019376:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8019378:	4b19      	ldr	r3, [pc, #100]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801937a:	681b      	ldr	r3, [r3, #0]
 801937c:	4a18      	ldr	r2, [pc, #96]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 801937e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8019382:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8019384:	f7fc fa4e 	bl	8015824 <HAL_GetTick>
 8019388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801938a:	e008      	b.n	801939e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801938c:	f7fc fa4a 	bl	8015824 <HAL_GetTick>
 8019390:	4602      	mov	r2, r0
 8019392:	693b      	ldr	r3, [r7, #16]
 8019394:	1ad3      	subs	r3, r2, r3
 8019396:	2b02      	cmp	r3, #2
 8019398:	d901      	bls.n	801939e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 801939a:	2303      	movs	r3, #3
 801939c:	e05f      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801939e:	4b10      	ldr	r3, [pc, #64]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80193a0:	681b      	ldr	r3, [r3, #0]
 80193a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80193a6:	2b00      	cmp	r3, #0
 80193a8:	d0f0      	beq.n	801938c <HAL_RCC_OscConfig+0x47c>
 80193aa:	e057      	b.n	801945c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80193ac:	4b0c      	ldr	r3, [pc, #48]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80193ae:	681b      	ldr	r3, [r3, #0]
 80193b0:	4a0b      	ldr	r2, [pc, #44]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80193b2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80193b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80193b8:	f7fc fa34 	bl	8015824 <HAL_GetTick>
 80193bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80193be:	e008      	b.n	80193d2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80193c0:	f7fc fa30 	bl	8015824 <HAL_GetTick>
 80193c4:	4602      	mov	r2, r0
 80193c6:	693b      	ldr	r3, [r7, #16]
 80193c8:	1ad3      	subs	r3, r2, r3
 80193ca:	2b02      	cmp	r3, #2
 80193cc:	d901      	bls.n	80193d2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80193ce:	2303      	movs	r3, #3
 80193d0:	e045      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80193d2:	4b03      	ldr	r3, [pc, #12]	; (80193e0 <HAL_RCC_OscConfig+0x4d0>)
 80193d4:	681b      	ldr	r3, [r3, #0]
 80193d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80193da:	2b00      	cmp	r3, #0
 80193dc:	d1f0      	bne.n	80193c0 <HAL_RCC_OscConfig+0x4b0>
 80193de:	e03d      	b.n	801945c <HAL_RCC_OscConfig+0x54c>
 80193e0:	40023800 	.word	0x40023800
 80193e4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80193e8:	4b1f      	ldr	r3, [pc, #124]	; (8019468 <HAL_RCC_OscConfig+0x558>)
 80193ea:	685b      	ldr	r3, [r3, #4]
 80193ec:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	699b      	ldr	r3, [r3, #24]
 80193f2:	2b01      	cmp	r3, #1
 80193f4:	d030      	beq.n	8019458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80193f6:	68fb      	ldr	r3, [r7, #12]
 80193f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80193fc:	687b      	ldr	r3, [r7, #4]
 80193fe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8019400:	429a      	cmp	r2, r3
 8019402:	d129      	bne.n	8019458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019404:	68fb      	ldr	r3, [r7, #12]
 8019406:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801940e:	429a      	cmp	r2, r3
 8019410:	d122      	bne.n	8019458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019412:	68fa      	ldr	r2, [r7, #12]
 8019414:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8019418:	4013      	ands	r3, r2
 801941a:	687a      	ldr	r2, [r7, #4]
 801941c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801941e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8019420:	4293      	cmp	r3, r2
 8019422:	d119      	bne.n	8019458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019424:	68fb      	ldr	r3, [r7, #12]
 8019426:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801942e:	085b      	lsrs	r3, r3, #1
 8019430:	3b01      	subs	r3, #1
 8019432:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8019434:	429a      	cmp	r2, r3
 8019436:	d10f      	bne.n	8019458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8019438:	68fb      	ldr	r3, [r7, #12]
 801943a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019442:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8019444:	429a      	cmp	r2, r3
 8019446:	d107      	bne.n	8019458 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8019448:	68fb      	ldr	r3, [r7, #12]
 801944a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019452:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8019454:	429a      	cmp	r2, r3
 8019456:	d001      	beq.n	801945c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8019458:	2301      	movs	r3, #1
 801945a:	e000      	b.n	801945e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 801945c:	2300      	movs	r3, #0
}
 801945e:	4618      	mov	r0, r3
 8019460:	3718      	adds	r7, #24
 8019462:	46bd      	mov	sp, r7
 8019464:	bd80      	pop	{r7, pc}
 8019466:	bf00      	nop
 8019468:	40023800 	.word	0x40023800

0801946c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801946c:	b580      	push	{r7, lr}
 801946e:	b084      	sub	sp, #16
 8019470:	af00      	add	r7, sp, #0
 8019472:	6078      	str	r0, [r7, #4]
 8019474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8019476:	2300      	movs	r3, #0
 8019478:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d101      	bne.n	8019484 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8019480:	2301      	movs	r3, #1
 8019482:	e0d0      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8019484:	4b6a      	ldr	r3, [pc, #424]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 8019486:	681b      	ldr	r3, [r3, #0]
 8019488:	f003 030f 	and.w	r3, r3, #15
 801948c:	683a      	ldr	r2, [r7, #0]
 801948e:	429a      	cmp	r2, r3
 8019490:	d910      	bls.n	80194b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019492:	4b67      	ldr	r3, [pc, #412]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	f023 020f 	bic.w	r2, r3, #15
 801949a:	4965      	ldr	r1, [pc, #404]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 801949c:	683b      	ldr	r3, [r7, #0]
 801949e:	4313      	orrs	r3, r2
 80194a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80194a2:	4b63      	ldr	r3, [pc, #396]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	f003 030f 	and.w	r3, r3, #15
 80194aa:	683a      	ldr	r2, [r7, #0]
 80194ac:	429a      	cmp	r2, r3
 80194ae:	d001      	beq.n	80194b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80194b0:	2301      	movs	r3, #1
 80194b2:	e0b8      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80194b4:	687b      	ldr	r3, [r7, #4]
 80194b6:	681b      	ldr	r3, [r3, #0]
 80194b8:	f003 0302 	and.w	r3, r3, #2
 80194bc:	2b00      	cmp	r3, #0
 80194be:	d020      	beq.n	8019502 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80194c0:	687b      	ldr	r3, [r7, #4]
 80194c2:	681b      	ldr	r3, [r3, #0]
 80194c4:	f003 0304 	and.w	r3, r3, #4
 80194c8:	2b00      	cmp	r3, #0
 80194ca:	d005      	beq.n	80194d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80194cc:	4b59      	ldr	r3, [pc, #356]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80194ce:	689b      	ldr	r3, [r3, #8]
 80194d0:	4a58      	ldr	r2, [pc, #352]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80194d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80194d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80194d8:	687b      	ldr	r3, [r7, #4]
 80194da:	681b      	ldr	r3, [r3, #0]
 80194dc:	f003 0308 	and.w	r3, r3, #8
 80194e0:	2b00      	cmp	r3, #0
 80194e2:	d005      	beq.n	80194f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80194e4:	4b53      	ldr	r3, [pc, #332]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80194e6:	689b      	ldr	r3, [r3, #8]
 80194e8:	4a52      	ldr	r2, [pc, #328]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80194ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80194ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80194f0:	4b50      	ldr	r3, [pc, #320]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80194f2:	689b      	ldr	r3, [r3, #8]
 80194f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80194f8:	687b      	ldr	r3, [r7, #4]
 80194fa:	689b      	ldr	r3, [r3, #8]
 80194fc:	494d      	ldr	r1, [pc, #308]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80194fe:	4313      	orrs	r3, r2
 8019500:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8019502:	687b      	ldr	r3, [r7, #4]
 8019504:	681b      	ldr	r3, [r3, #0]
 8019506:	f003 0301 	and.w	r3, r3, #1
 801950a:	2b00      	cmp	r3, #0
 801950c:	d040      	beq.n	8019590 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801950e:	687b      	ldr	r3, [r7, #4]
 8019510:	685b      	ldr	r3, [r3, #4]
 8019512:	2b01      	cmp	r3, #1
 8019514:	d107      	bne.n	8019526 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8019516:	4b47      	ldr	r3, [pc, #284]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 8019518:	681b      	ldr	r3, [r3, #0]
 801951a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801951e:	2b00      	cmp	r3, #0
 8019520:	d115      	bne.n	801954e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8019522:	2301      	movs	r3, #1
 8019524:	e07f      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8019526:	687b      	ldr	r3, [r7, #4]
 8019528:	685b      	ldr	r3, [r3, #4]
 801952a:	2b02      	cmp	r3, #2
 801952c:	d107      	bne.n	801953e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 801952e:	4b41      	ldr	r3, [pc, #260]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019536:	2b00      	cmp	r3, #0
 8019538:	d109      	bne.n	801954e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801953a:	2301      	movs	r3, #1
 801953c:	e073      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801953e:	4b3d      	ldr	r3, [pc, #244]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 8019540:	681b      	ldr	r3, [r3, #0]
 8019542:	f003 0302 	and.w	r3, r3, #2
 8019546:	2b00      	cmp	r3, #0
 8019548:	d101      	bne.n	801954e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 801954a:	2301      	movs	r3, #1
 801954c:	e06b      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 801954e:	4b39      	ldr	r3, [pc, #228]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 8019550:	689b      	ldr	r3, [r3, #8]
 8019552:	f023 0203 	bic.w	r2, r3, #3
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	685b      	ldr	r3, [r3, #4]
 801955a:	4936      	ldr	r1, [pc, #216]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 801955c:	4313      	orrs	r3, r2
 801955e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019560:	f7fc f960 	bl	8015824 <HAL_GetTick>
 8019564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8019566:	e00a      	b.n	801957e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8019568:	f7fc f95c 	bl	8015824 <HAL_GetTick>
 801956c:	4602      	mov	r2, r0
 801956e:	68fb      	ldr	r3, [r7, #12]
 8019570:	1ad3      	subs	r3, r2, r3
 8019572:	f241 3288 	movw	r2, #5000	; 0x1388
 8019576:	4293      	cmp	r3, r2
 8019578:	d901      	bls.n	801957e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 801957a:	2303      	movs	r3, #3
 801957c:	e053      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801957e:	4b2d      	ldr	r3, [pc, #180]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 8019580:	689b      	ldr	r3, [r3, #8]
 8019582:	f003 020c 	and.w	r2, r3, #12
 8019586:	687b      	ldr	r3, [r7, #4]
 8019588:	685b      	ldr	r3, [r3, #4]
 801958a:	009b      	lsls	r3, r3, #2
 801958c:	429a      	cmp	r2, r3
 801958e:	d1eb      	bne.n	8019568 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8019590:	4b27      	ldr	r3, [pc, #156]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 8019592:	681b      	ldr	r3, [r3, #0]
 8019594:	f003 030f 	and.w	r3, r3, #15
 8019598:	683a      	ldr	r2, [r7, #0]
 801959a:	429a      	cmp	r2, r3
 801959c:	d210      	bcs.n	80195c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801959e:	4b24      	ldr	r3, [pc, #144]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 80195a0:	681b      	ldr	r3, [r3, #0]
 80195a2:	f023 020f 	bic.w	r2, r3, #15
 80195a6:	4922      	ldr	r1, [pc, #136]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 80195a8:	683b      	ldr	r3, [r7, #0]
 80195aa:	4313      	orrs	r3, r2
 80195ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80195ae:	4b20      	ldr	r3, [pc, #128]	; (8019630 <HAL_RCC_ClockConfig+0x1c4>)
 80195b0:	681b      	ldr	r3, [r3, #0]
 80195b2:	f003 030f 	and.w	r3, r3, #15
 80195b6:	683a      	ldr	r2, [r7, #0]
 80195b8:	429a      	cmp	r2, r3
 80195ba:	d001      	beq.n	80195c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80195bc:	2301      	movs	r3, #1
 80195be:	e032      	b.n	8019626 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80195c0:	687b      	ldr	r3, [r7, #4]
 80195c2:	681b      	ldr	r3, [r3, #0]
 80195c4:	f003 0304 	and.w	r3, r3, #4
 80195c8:	2b00      	cmp	r3, #0
 80195ca:	d008      	beq.n	80195de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80195cc:	4b19      	ldr	r3, [pc, #100]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80195ce:	689b      	ldr	r3, [r3, #8]
 80195d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80195d4:	687b      	ldr	r3, [r7, #4]
 80195d6:	68db      	ldr	r3, [r3, #12]
 80195d8:	4916      	ldr	r1, [pc, #88]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80195da:	4313      	orrs	r3, r2
 80195dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	681b      	ldr	r3, [r3, #0]
 80195e2:	f003 0308 	and.w	r3, r3, #8
 80195e6:	2b00      	cmp	r3, #0
 80195e8:	d009      	beq.n	80195fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80195ea:	4b12      	ldr	r3, [pc, #72]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80195ec:	689b      	ldr	r3, [r3, #8]
 80195ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80195f2:	687b      	ldr	r3, [r7, #4]
 80195f4:	691b      	ldr	r3, [r3, #16]
 80195f6:	00db      	lsls	r3, r3, #3
 80195f8:	490e      	ldr	r1, [pc, #56]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 80195fa:	4313      	orrs	r3, r2
 80195fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80195fe:	f000 f821 	bl	8019644 <HAL_RCC_GetSysClockFreq>
 8019602:	4602      	mov	r2, r0
 8019604:	4b0b      	ldr	r3, [pc, #44]	; (8019634 <HAL_RCC_ClockConfig+0x1c8>)
 8019606:	689b      	ldr	r3, [r3, #8]
 8019608:	091b      	lsrs	r3, r3, #4
 801960a:	f003 030f 	and.w	r3, r3, #15
 801960e:	490a      	ldr	r1, [pc, #40]	; (8019638 <HAL_RCC_ClockConfig+0x1cc>)
 8019610:	5ccb      	ldrb	r3, [r1, r3]
 8019612:	fa22 f303 	lsr.w	r3, r2, r3
 8019616:	4a09      	ldr	r2, [pc, #36]	; (801963c <HAL_RCC_ClockConfig+0x1d0>)
 8019618:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801961a:	4b09      	ldr	r3, [pc, #36]	; (8019640 <HAL_RCC_ClockConfig+0x1d4>)
 801961c:	681b      	ldr	r3, [r3, #0]
 801961e:	4618      	mov	r0, r3
 8019620:	f7fc f8bc 	bl	801579c <HAL_InitTick>

  return HAL_OK;
 8019624:	2300      	movs	r3, #0
}
 8019626:	4618      	mov	r0, r3
 8019628:	3710      	adds	r7, #16
 801962a:	46bd      	mov	sp, r7
 801962c:	bd80      	pop	{r7, pc}
 801962e:	bf00      	nop
 8019630:	40023c00 	.word	0x40023c00
 8019634:	40023800 	.word	0x40023800
 8019638:	08028ec8 	.word	0x08028ec8
 801963c:	2000011c 	.word	0x2000011c
 8019640:	20000120 	.word	0x20000120

08019644 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8019644:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019648:	b090      	sub	sp, #64	; 0x40
 801964a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 801964c:	2300      	movs	r3, #0
 801964e:	637b      	str	r3, [r7, #52]	; 0x34
 8019650:	2300      	movs	r3, #0
 8019652:	63fb      	str	r3, [r7, #60]	; 0x3c
 8019654:	2300      	movs	r3, #0
 8019656:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8019658:	2300      	movs	r3, #0
 801965a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 801965c:	4b59      	ldr	r3, [pc, #356]	; (80197c4 <HAL_RCC_GetSysClockFreq+0x180>)
 801965e:	689b      	ldr	r3, [r3, #8]
 8019660:	f003 030c 	and.w	r3, r3, #12
 8019664:	2b08      	cmp	r3, #8
 8019666:	d00d      	beq.n	8019684 <HAL_RCC_GetSysClockFreq+0x40>
 8019668:	2b08      	cmp	r3, #8
 801966a:	f200 80a1 	bhi.w	80197b0 <HAL_RCC_GetSysClockFreq+0x16c>
 801966e:	2b00      	cmp	r3, #0
 8019670:	d002      	beq.n	8019678 <HAL_RCC_GetSysClockFreq+0x34>
 8019672:	2b04      	cmp	r3, #4
 8019674:	d003      	beq.n	801967e <HAL_RCC_GetSysClockFreq+0x3a>
 8019676:	e09b      	b.n	80197b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8019678:	4b53      	ldr	r3, [pc, #332]	; (80197c8 <HAL_RCC_GetSysClockFreq+0x184>)
 801967a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 801967c:	e09b      	b.n	80197b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 801967e:	4b53      	ldr	r3, [pc, #332]	; (80197cc <HAL_RCC_GetSysClockFreq+0x188>)
 8019680:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019682:	e098      	b.n	80197b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8019684:	4b4f      	ldr	r3, [pc, #316]	; (80197c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8019686:	685b      	ldr	r3, [r3, #4]
 8019688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801968c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 801968e:	4b4d      	ldr	r3, [pc, #308]	; (80197c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8019690:	685b      	ldr	r3, [r3, #4]
 8019692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019696:	2b00      	cmp	r3, #0
 8019698:	d028      	beq.n	80196ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801969a:	4b4a      	ldr	r3, [pc, #296]	; (80197c4 <HAL_RCC_GetSysClockFreq+0x180>)
 801969c:	685b      	ldr	r3, [r3, #4]
 801969e:	099b      	lsrs	r3, r3, #6
 80196a0:	2200      	movs	r2, #0
 80196a2:	623b      	str	r3, [r7, #32]
 80196a4:	627a      	str	r2, [r7, #36]	; 0x24
 80196a6:	6a3b      	ldr	r3, [r7, #32]
 80196a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80196ac:	2100      	movs	r1, #0
 80196ae:	4b47      	ldr	r3, [pc, #284]	; (80197cc <HAL_RCC_GetSysClockFreq+0x188>)
 80196b0:	fb03 f201 	mul.w	r2, r3, r1
 80196b4:	2300      	movs	r3, #0
 80196b6:	fb00 f303 	mul.w	r3, r0, r3
 80196ba:	4413      	add	r3, r2
 80196bc:	4a43      	ldr	r2, [pc, #268]	; (80197cc <HAL_RCC_GetSysClockFreq+0x188>)
 80196be:	fba0 1202 	umull	r1, r2, r0, r2
 80196c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80196c4:	460a      	mov	r2, r1
 80196c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80196c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80196ca:	4413      	add	r3, r2
 80196cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80196ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80196d0:	2200      	movs	r2, #0
 80196d2:	61bb      	str	r3, [r7, #24]
 80196d4:	61fa      	str	r2, [r7, #28]
 80196d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80196da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80196de:	f7e6 fe17 	bl	8000310 <__aeabi_uldivmod>
 80196e2:	4602      	mov	r2, r0
 80196e4:	460b      	mov	r3, r1
 80196e6:	4613      	mov	r3, r2
 80196e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80196ea:	e053      	b.n	8019794 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80196ec:	4b35      	ldr	r3, [pc, #212]	; (80197c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80196ee:	685b      	ldr	r3, [r3, #4]
 80196f0:	099b      	lsrs	r3, r3, #6
 80196f2:	2200      	movs	r2, #0
 80196f4:	613b      	str	r3, [r7, #16]
 80196f6:	617a      	str	r2, [r7, #20]
 80196f8:	693b      	ldr	r3, [r7, #16]
 80196fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80196fe:	f04f 0b00 	mov.w	fp, #0
 8019702:	4652      	mov	r2, sl
 8019704:	465b      	mov	r3, fp
 8019706:	f04f 0000 	mov.w	r0, #0
 801970a:	f04f 0100 	mov.w	r1, #0
 801970e:	0159      	lsls	r1, r3, #5
 8019710:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019714:	0150      	lsls	r0, r2, #5
 8019716:	4602      	mov	r2, r0
 8019718:	460b      	mov	r3, r1
 801971a:	ebb2 080a 	subs.w	r8, r2, sl
 801971e:	eb63 090b 	sbc.w	r9, r3, fp
 8019722:	f04f 0200 	mov.w	r2, #0
 8019726:	f04f 0300 	mov.w	r3, #0
 801972a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 801972e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8019732:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8019736:	ebb2 0408 	subs.w	r4, r2, r8
 801973a:	eb63 0509 	sbc.w	r5, r3, r9
 801973e:	f04f 0200 	mov.w	r2, #0
 8019742:	f04f 0300 	mov.w	r3, #0
 8019746:	00eb      	lsls	r3, r5, #3
 8019748:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801974c:	00e2      	lsls	r2, r4, #3
 801974e:	4614      	mov	r4, r2
 8019750:	461d      	mov	r5, r3
 8019752:	eb14 030a 	adds.w	r3, r4, sl
 8019756:	603b      	str	r3, [r7, #0]
 8019758:	eb45 030b 	adc.w	r3, r5, fp
 801975c:	607b      	str	r3, [r7, #4]
 801975e:	f04f 0200 	mov.w	r2, #0
 8019762:	f04f 0300 	mov.w	r3, #0
 8019766:	e9d7 4500 	ldrd	r4, r5, [r7]
 801976a:	4629      	mov	r1, r5
 801976c:	028b      	lsls	r3, r1, #10
 801976e:	4621      	mov	r1, r4
 8019770:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8019774:	4621      	mov	r1, r4
 8019776:	028a      	lsls	r2, r1, #10
 8019778:	4610      	mov	r0, r2
 801977a:	4619      	mov	r1, r3
 801977c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801977e:	2200      	movs	r2, #0
 8019780:	60bb      	str	r3, [r7, #8]
 8019782:	60fa      	str	r2, [r7, #12]
 8019784:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8019788:	f7e6 fdc2 	bl	8000310 <__aeabi_uldivmod>
 801978c:	4602      	mov	r2, r0
 801978e:	460b      	mov	r3, r1
 8019790:	4613      	mov	r3, r2
 8019792:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8019794:	4b0b      	ldr	r3, [pc, #44]	; (80197c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8019796:	685b      	ldr	r3, [r3, #4]
 8019798:	0c1b      	lsrs	r3, r3, #16
 801979a:	f003 0303 	and.w	r3, r3, #3
 801979e:	3301      	adds	r3, #1
 80197a0:	005b      	lsls	r3, r3, #1
 80197a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 80197a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80197a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80197a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80197ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80197ae:	e002      	b.n	80197b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80197b0:	4b05      	ldr	r3, [pc, #20]	; (80197c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80197b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80197b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80197b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80197b8:	4618      	mov	r0, r3
 80197ba:	3740      	adds	r7, #64	; 0x40
 80197bc:	46bd      	mov	sp, r7
 80197be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80197c2:	bf00      	nop
 80197c4:	40023800 	.word	0x40023800
 80197c8:	00f42400 	.word	0x00f42400
 80197cc:	00b71b00 	.word	0x00b71b00

080197d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80197d0:	b480      	push	{r7}
 80197d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80197d4:	4b03      	ldr	r3, [pc, #12]	; (80197e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80197d6:	681b      	ldr	r3, [r3, #0]
}
 80197d8:	4618      	mov	r0, r3
 80197da:	46bd      	mov	sp, r7
 80197dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197e0:	4770      	bx	lr
 80197e2:	bf00      	nop
 80197e4:	2000011c 	.word	0x2000011c

080197e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80197e8:	b580      	push	{r7, lr}
 80197ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80197ec:	f7ff fff0 	bl	80197d0 <HAL_RCC_GetHCLKFreq>
 80197f0:	4602      	mov	r2, r0
 80197f2:	4b05      	ldr	r3, [pc, #20]	; (8019808 <HAL_RCC_GetPCLK1Freq+0x20>)
 80197f4:	689b      	ldr	r3, [r3, #8]
 80197f6:	0a9b      	lsrs	r3, r3, #10
 80197f8:	f003 0307 	and.w	r3, r3, #7
 80197fc:	4903      	ldr	r1, [pc, #12]	; (801980c <HAL_RCC_GetPCLK1Freq+0x24>)
 80197fe:	5ccb      	ldrb	r3, [r1, r3]
 8019800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019804:	4618      	mov	r0, r3
 8019806:	bd80      	pop	{r7, pc}
 8019808:	40023800 	.word	0x40023800
 801980c:	08028ed8 	.word	0x08028ed8

08019810 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019810:	b580      	push	{r7, lr}
 8019812:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019814:	f7ff ffdc 	bl	80197d0 <HAL_RCC_GetHCLKFreq>
 8019818:	4602      	mov	r2, r0
 801981a:	4b05      	ldr	r3, [pc, #20]	; (8019830 <HAL_RCC_GetPCLK2Freq+0x20>)
 801981c:	689b      	ldr	r3, [r3, #8]
 801981e:	0b5b      	lsrs	r3, r3, #13
 8019820:	f003 0307 	and.w	r3, r3, #7
 8019824:	4903      	ldr	r1, [pc, #12]	; (8019834 <HAL_RCC_GetPCLK2Freq+0x24>)
 8019826:	5ccb      	ldrb	r3, [r1, r3]
 8019828:	fa22 f303 	lsr.w	r3, r2, r3
}
 801982c:	4618      	mov	r0, r3
 801982e:	bd80      	pop	{r7, pc}
 8019830:	40023800 	.word	0x40023800
 8019834:	08028ed8 	.word	0x08028ed8

08019838 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8019838:	b580      	push	{r7, lr}
 801983a:	b088      	sub	sp, #32
 801983c:	af00      	add	r7, sp, #0
 801983e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8019840:	2300      	movs	r3, #0
 8019842:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8019844:	2300      	movs	r3, #0
 8019846:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8019848:	2300      	movs	r3, #0
 801984a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 801984c:	2300      	movs	r3, #0
 801984e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8019850:	2300      	movs	r3, #0
 8019852:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	681b      	ldr	r3, [r3, #0]
 8019858:	f003 0301 	and.w	r3, r3, #1
 801985c:	2b00      	cmp	r3, #0
 801985e:	d012      	beq.n	8019886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8019860:	4b69      	ldr	r3, [pc, #420]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019862:	689b      	ldr	r3, [r3, #8]
 8019864:	4a68      	ldr	r2, [pc, #416]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019866:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 801986a:	6093      	str	r3, [r2, #8]
 801986c:	4b66      	ldr	r3, [pc, #408]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801986e:	689a      	ldr	r2, [r3, #8]
 8019870:	687b      	ldr	r3, [r7, #4]
 8019872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019874:	4964      	ldr	r1, [pc, #400]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019876:	4313      	orrs	r3, r2
 8019878:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801987e:	2b00      	cmp	r3, #0
 8019880:	d101      	bne.n	8019886 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8019882:	2301      	movs	r3, #1
 8019884:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8019886:	687b      	ldr	r3, [r7, #4]
 8019888:	681b      	ldr	r3, [r3, #0]
 801988a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 801988e:	2b00      	cmp	r3, #0
 8019890:	d017      	beq.n	80198c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8019892:	4b5d      	ldr	r3, [pc, #372]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019894:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019898:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801989c:	687b      	ldr	r3, [r7, #4]
 801989e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198a0:	4959      	ldr	r1, [pc, #356]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80198a2:	4313      	orrs	r3, r2
 80198a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80198a8:	687b      	ldr	r3, [r7, #4]
 80198aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80198b0:	d101      	bne.n	80198b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80198b2:	2301      	movs	r3, #1
 80198b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80198ba:	2b00      	cmp	r3, #0
 80198bc:	d101      	bne.n	80198c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80198be:	2301      	movs	r3, #1
 80198c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80198ca:	2b00      	cmp	r3, #0
 80198cc:	d017      	beq.n	80198fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80198ce:	4b4e      	ldr	r3, [pc, #312]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80198d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80198d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198dc:	494a      	ldr	r1, [pc, #296]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80198de:	4313      	orrs	r3, r2
 80198e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80198e4:	687b      	ldr	r3, [r7, #4]
 80198e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80198ec:	d101      	bne.n	80198f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80198ee:	2301      	movs	r3, #1
 80198f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80198f6:	2b00      	cmp	r3, #0
 80198f8:	d101      	bne.n	80198fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80198fa:	2301      	movs	r3, #1
 80198fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80198fe:	687b      	ldr	r3, [r7, #4]
 8019900:	681b      	ldr	r3, [r3, #0]
 8019902:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019906:	2b00      	cmp	r3, #0
 8019908:	d001      	beq.n	801990e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801990a:	2301      	movs	r3, #1
 801990c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	681b      	ldr	r3, [r3, #0]
 8019912:	f003 0320 	and.w	r3, r3, #32
 8019916:	2b00      	cmp	r3, #0
 8019918:	f000 808b 	beq.w	8019a32 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 801991c:	4b3a      	ldr	r3, [pc, #232]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801991e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019920:	4a39      	ldr	r2, [pc, #228]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019922:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019926:	6413      	str	r3, [r2, #64]	; 0x40
 8019928:	4b37      	ldr	r3, [pc, #220]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801992a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801992c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019930:	60bb      	str	r3, [r7, #8]
 8019932:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8019934:	4b35      	ldr	r3, [pc, #212]	; (8019a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8019936:	681b      	ldr	r3, [r3, #0]
 8019938:	4a34      	ldr	r2, [pc, #208]	; (8019a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801993a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 801993e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019940:	f7fb ff70 	bl	8015824 <HAL_GetTick>
 8019944:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8019946:	e008      	b.n	801995a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8019948:	f7fb ff6c 	bl	8015824 <HAL_GetTick>
 801994c:	4602      	mov	r2, r0
 801994e:	697b      	ldr	r3, [r7, #20]
 8019950:	1ad3      	subs	r3, r2, r3
 8019952:	2b64      	cmp	r3, #100	; 0x64
 8019954:	d901      	bls.n	801995a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8019956:	2303      	movs	r3, #3
 8019958:	e38f      	b.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 801995a:	4b2c      	ldr	r3, [pc, #176]	; (8019a0c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 801995c:	681b      	ldr	r3, [r3, #0]
 801995e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019962:	2b00      	cmp	r3, #0
 8019964:	d0f0      	beq.n	8019948 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8019966:	4b28      	ldr	r3, [pc, #160]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801996a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801996e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8019970:	693b      	ldr	r3, [r7, #16]
 8019972:	2b00      	cmp	r3, #0
 8019974:	d035      	beq.n	80199e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801997a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801997e:	693a      	ldr	r2, [r7, #16]
 8019980:	429a      	cmp	r2, r3
 8019982:	d02e      	beq.n	80199e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8019984:	4b20      	ldr	r3, [pc, #128]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 801998c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 801998e:	4b1e      	ldr	r3, [pc, #120]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019992:	4a1d      	ldr	r2, [pc, #116]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8019998:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801999a:	4b1b      	ldr	r3, [pc, #108]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801999c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801999e:	4a1a      	ldr	r2, [pc, #104]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80199a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80199a6:	4a18      	ldr	r2, [pc, #96]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199a8:	693b      	ldr	r3, [r7, #16]
 80199aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80199ac:	4b16      	ldr	r3, [pc, #88]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199b0:	f003 0301 	and.w	r3, r3, #1
 80199b4:	2b01      	cmp	r3, #1
 80199b6:	d114      	bne.n	80199e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80199b8:	f7fb ff34 	bl	8015824 <HAL_GetTick>
 80199bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80199be:	e00a      	b.n	80199d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80199c0:	f7fb ff30 	bl	8015824 <HAL_GetTick>
 80199c4:	4602      	mov	r2, r0
 80199c6:	697b      	ldr	r3, [r7, #20]
 80199c8:	1ad3      	subs	r3, r2, r3
 80199ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80199ce:	4293      	cmp	r3, r2
 80199d0:	d901      	bls.n	80199d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80199d2:	2303      	movs	r3, #3
 80199d4:	e351      	b.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80199d6:	4b0c      	ldr	r3, [pc, #48]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80199da:	f003 0302 	and.w	r3, r3, #2
 80199de:	2b00      	cmp	r3, #0
 80199e0:	d0ee      	beq.n	80199c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80199e2:	687b      	ldr	r3, [r7, #4]
 80199e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80199e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80199ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80199ee:	d111      	bne.n	8019a14 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80199f0:	4b05      	ldr	r3, [pc, #20]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80199f2:	689b      	ldr	r3, [r3, #8]
 80199f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80199fc:	4b04      	ldr	r3, [pc, #16]	; (8019a10 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80199fe:	400b      	ands	r3, r1
 8019a00:	4901      	ldr	r1, [pc, #4]	; (8019a08 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019a02:	4313      	orrs	r3, r2
 8019a04:	608b      	str	r3, [r1, #8]
 8019a06:	e00b      	b.n	8019a20 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8019a08:	40023800 	.word	0x40023800
 8019a0c:	40007000 	.word	0x40007000
 8019a10:	0ffffcff 	.word	0x0ffffcff
 8019a14:	4bac      	ldr	r3, [pc, #688]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a16:	689b      	ldr	r3, [r3, #8]
 8019a18:	4aab      	ldr	r2, [pc, #684]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8019a1e:	6093      	str	r3, [r2, #8]
 8019a20:	4ba9      	ldr	r3, [pc, #676]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019a24:	687b      	ldr	r3, [r7, #4]
 8019a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8019a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8019a2c:	49a6      	ldr	r1, [pc, #664]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a2e:	4313      	orrs	r3, r2
 8019a30:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8019a32:	687b      	ldr	r3, [r7, #4]
 8019a34:	681b      	ldr	r3, [r3, #0]
 8019a36:	f003 0310 	and.w	r3, r3, #16
 8019a3a:	2b00      	cmp	r3, #0
 8019a3c:	d010      	beq.n	8019a60 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8019a3e:	4ba2      	ldr	r3, [pc, #648]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019a44:	4aa0      	ldr	r2, [pc, #640]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8019a4a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8019a4e:	4b9e      	ldr	r3, [pc, #632]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a50:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019a58:	499b      	ldr	r1, [pc, #620]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a5a:	4313      	orrs	r3, r2
 8019a5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	681b      	ldr	r3, [r3, #0]
 8019a64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8019a68:	2b00      	cmp	r3, #0
 8019a6a:	d00a      	beq.n	8019a82 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8019a6c:	4b96      	ldr	r3, [pc, #600]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019a72:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019a76:	687b      	ldr	r3, [r7, #4]
 8019a78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8019a7a:	4993      	ldr	r1, [pc, #588]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a7c:	4313      	orrs	r3, r2
 8019a7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	681b      	ldr	r3, [r3, #0]
 8019a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8019a8a:	2b00      	cmp	r3, #0
 8019a8c:	d00a      	beq.n	8019aa4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8019a8e:	4b8e      	ldr	r3, [pc, #568]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019a94:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8019a98:	687b      	ldr	r3, [r7, #4]
 8019a9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019a9c:	498a      	ldr	r1, [pc, #552]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019a9e:	4313      	orrs	r3, r2
 8019aa0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019aa4:	687b      	ldr	r3, [r7, #4]
 8019aa6:	681b      	ldr	r3, [r3, #0]
 8019aa8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019aac:	2b00      	cmp	r3, #0
 8019aae:	d00a      	beq.n	8019ac6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8019ab0:	4b85      	ldr	r3, [pc, #532]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ab6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019abe:	4982      	ldr	r1, [pc, #520]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ac0:	4313      	orrs	r3, r2
 8019ac2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8019ac6:	687b      	ldr	r3, [r7, #4]
 8019ac8:	681b      	ldr	r3, [r3, #0]
 8019aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019ace:	2b00      	cmp	r3, #0
 8019ad0:	d00a      	beq.n	8019ae8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8019ad2:	4b7d      	ldr	r3, [pc, #500]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ad8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019adc:	687b      	ldr	r3, [r7, #4]
 8019ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019ae0:	4979      	ldr	r1, [pc, #484]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ae2:	4313      	orrs	r3, r2
 8019ae4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8019ae8:	687b      	ldr	r3, [r7, #4]
 8019aea:	681b      	ldr	r3, [r3, #0]
 8019aec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019af0:	2b00      	cmp	r3, #0
 8019af2:	d00a      	beq.n	8019b0a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019af4:	4b74      	ldr	r3, [pc, #464]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019afa:	f023 0203 	bic.w	r2, r3, #3
 8019afe:	687b      	ldr	r3, [r7, #4]
 8019b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019b02:	4971      	ldr	r1, [pc, #452]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b04:	4313      	orrs	r3, r2
 8019b06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8019b0a:	687b      	ldr	r3, [r7, #4]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d00a      	beq.n	8019b2c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8019b16:	4b6c      	ldr	r3, [pc, #432]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019b1c:	f023 020c 	bic.w	r2, r3, #12
 8019b20:	687b      	ldr	r3, [r7, #4]
 8019b22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019b24:	4968      	ldr	r1, [pc, #416]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b26:	4313      	orrs	r3, r2
 8019b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8019b2c:	687b      	ldr	r3, [r7, #4]
 8019b2e:	681b      	ldr	r3, [r3, #0]
 8019b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8019b34:	2b00      	cmp	r3, #0
 8019b36:	d00a      	beq.n	8019b4e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8019b38:	4b63      	ldr	r3, [pc, #396]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019b3e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8019b46:	4960      	ldr	r1, [pc, #384]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b48:	4313      	orrs	r3, r2
 8019b4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019b56:	2b00      	cmp	r3, #0
 8019b58:	d00a      	beq.n	8019b70 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8019b5a:	4b5b      	ldr	r3, [pc, #364]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019b60:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8019b68:	4957      	ldr	r1, [pc, #348]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b6a:	4313      	orrs	r3, r2
 8019b6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	681b      	ldr	r3, [r3, #0]
 8019b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d00a      	beq.n	8019b92 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8019b7c:	4b52      	ldr	r3, [pc, #328]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019b82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019b8a:	494f      	ldr	r1, [pc, #316]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019b8c:	4313      	orrs	r3, r2
 8019b8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	681b      	ldr	r3, [r3, #0]
 8019b96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8019b9a:	2b00      	cmp	r3, #0
 8019b9c:	d00a      	beq.n	8019bb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8019b9e:	4b4a      	ldr	r3, [pc, #296]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019ba4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019bac:	4946      	ldr	r1, [pc, #280]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bae:	4313      	orrs	r3, r2
 8019bb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8019bb4:	687b      	ldr	r3, [r7, #4]
 8019bb6:	681b      	ldr	r3, [r3, #0]
 8019bb8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d00a      	beq.n	8019bd6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8019bc0:	4b41      	ldr	r3, [pc, #260]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019bc6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8019bca:	687b      	ldr	r3, [r7, #4]
 8019bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019bce:	493e      	ldr	r1, [pc, #248]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bd0:	4313      	orrs	r3, r2
 8019bd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8019bd6:	687b      	ldr	r3, [r7, #4]
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019bde:	2b00      	cmp	r3, #0
 8019be0:	d00a      	beq.n	8019bf8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8019be2:	4b39      	ldr	r3, [pc, #228]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019be4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019be8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019bf0:	4935      	ldr	r1, [pc, #212]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019bf2:	4313      	orrs	r3, r2
 8019bf4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019c00:	2b00      	cmp	r3, #0
 8019c02:	d00a      	beq.n	8019c1a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019c04:	4b30      	ldr	r3, [pc, #192]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c0a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019c0e:	687b      	ldr	r3, [r7, #4]
 8019c10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019c12:	492d      	ldr	r1, [pc, #180]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c14:	4313      	orrs	r3, r2
 8019c16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8019c1a:	687b      	ldr	r3, [r7, #4]
 8019c1c:	681b      	ldr	r3, [r3, #0]
 8019c1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019c22:	2b00      	cmp	r3, #0
 8019c24:	d011      	beq.n	8019c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8019c26:	4b28      	ldr	r3, [pc, #160]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c2c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8019c30:	687b      	ldr	r3, [r7, #4]
 8019c32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c34:	4924      	ldr	r1, [pc, #144]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c36:	4313      	orrs	r3, r2
 8019c38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8019c3c:	687b      	ldr	r3, [r7, #4]
 8019c3e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019c40:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019c44:	d101      	bne.n	8019c4a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8019c46:	2301      	movs	r3, #1
 8019c48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	681b      	ldr	r3, [r3, #0]
 8019c4e:	f003 0308 	and.w	r3, r3, #8
 8019c52:	2b00      	cmp	r3, #0
 8019c54:	d001      	beq.n	8019c5a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8019c56:	2301      	movs	r3, #1
 8019c58:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8019c5a:	687b      	ldr	r3, [r7, #4]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8019c62:	2b00      	cmp	r3, #0
 8019c64:	d00a      	beq.n	8019c7c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8019c66:	4b18      	ldr	r3, [pc, #96]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c6c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8019c74:	4914      	ldr	r1, [pc, #80]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c76:	4313      	orrs	r3, r2
 8019c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8019c7c:	687b      	ldr	r3, [r7, #4]
 8019c7e:	681b      	ldr	r3, [r3, #0]
 8019c80:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d00b      	beq.n	8019ca0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8019c88:	4b0f      	ldr	r3, [pc, #60]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019c8e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8019c98:	490b      	ldr	r1, [pc, #44]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019c9a:	4313      	orrs	r3, r2
 8019c9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8019ca0:	687b      	ldr	r3, [r7, #4]
 8019ca2:	681b      	ldr	r3, [r3, #0]
 8019ca4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d00f      	beq.n	8019ccc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8019cac:	4b06      	ldr	r3, [pc, #24]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019cb2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019cbc:	4902      	ldr	r1, [pc, #8]	; (8019cc8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019cbe:	4313      	orrs	r3, r2
 8019cc0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8019cc4:	e002      	b.n	8019ccc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8019cc6:	bf00      	nop
 8019cc8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8019ccc:	687b      	ldr	r3, [r7, #4]
 8019cce:	681b      	ldr	r3, [r3, #0]
 8019cd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d00b      	beq.n	8019cf0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8019cd8:	4b8a      	ldr	r3, [pc, #552]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019cde:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019ce8:	4986      	ldr	r1, [pc, #536]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019cea:	4313      	orrs	r3, r2
 8019cec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019cf0:	687b      	ldr	r3, [r7, #4]
 8019cf2:	681b      	ldr	r3, [r3, #0]
 8019cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8019cf8:	2b00      	cmp	r3, #0
 8019cfa:	d00b      	beq.n	8019d14 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019cfc:	4b81      	ldr	r3, [pc, #516]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019cfe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d02:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019d06:	687b      	ldr	r3, [r7, #4]
 8019d08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019d0c:	497d      	ldr	r1, [pc, #500]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019d0e:	4313      	orrs	r3, r2
 8019d10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019d14:	69fb      	ldr	r3, [r7, #28]
 8019d16:	2b01      	cmp	r3, #1
 8019d18:	d006      	beq.n	8019d28 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019d22:	2b00      	cmp	r3, #0
 8019d24:	f000 80d6 	beq.w	8019ed4 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8019d28:	4b76      	ldr	r3, [pc, #472]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019d2a:	681b      	ldr	r3, [r3, #0]
 8019d2c:	4a75      	ldr	r2, [pc, #468]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019d2e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8019d32:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019d34:	f7fb fd76 	bl	8015824 <HAL_GetTick>
 8019d38:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019d3a:	e008      	b.n	8019d4e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019d3c:	f7fb fd72 	bl	8015824 <HAL_GetTick>
 8019d40:	4602      	mov	r2, r0
 8019d42:	697b      	ldr	r3, [r7, #20]
 8019d44:	1ad3      	subs	r3, r2, r3
 8019d46:	2b64      	cmp	r3, #100	; 0x64
 8019d48:	d901      	bls.n	8019d4e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019d4a:	2303      	movs	r3, #3
 8019d4c:	e195      	b.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8019d4e:	4b6d      	ldr	r3, [pc, #436]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019d50:	681b      	ldr	r3, [r3, #0]
 8019d52:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019d56:	2b00      	cmp	r3, #0
 8019d58:	d1f0      	bne.n	8019d3c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	f003 0301 	and.w	r3, r3, #1
 8019d62:	2b00      	cmp	r3, #0
 8019d64:	d021      	beq.n	8019daa <HAL_RCCEx_PeriphCLKConfig+0x572>
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d6a:	2b00      	cmp	r3, #0
 8019d6c:	d11d      	bne.n	8019daa <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019d6e:	4b65      	ldr	r3, [pc, #404]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019d70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019d74:	0c1b      	lsrs	r3, r3, #16
 8019d76:	f003 0303 	and.w	r3, r3, #3
 8019d7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019d7c:	4b61      	ldr	r3, [pc, #388]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019d7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019d82:	0e1b      	lsrs	r3, r3, #24
 8019d84:	f003 030f 	and.w	r3, r3, #15
 8019d88:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	685b      	ldr	r3, [r3, #4]
 8019d8e:	019a      	lsls	r2, r3, #6
 8019d90:	693b      	ldr	r3, [r7, #16]
 8019d92:	041b      	lsls	r3, r3, #16
 8019d94:	431a      	orrs	r2, r3
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	061b      	lsls	r3, r3, #24
 8019d9a:	431a      	orrs	r2, r3
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	689b      	ldr	r3, [r3, #8]
 8019da0:	071b      	lsls	r3, r3, #28
 8019da2:	4958      	ldr	r1, [pc, #352]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019da4:	4313      	orrs	r3, r2
 8019da6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019db2:	2b00      	cmp	r3, #0
 8019db4:	d004      	beq.n	8019dc0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8019db6:	687b      	ldr	r3, [r7, #4]
 8019db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019dbe:	d00a      	beq.n	8019dd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019dc0:	687b      	ldr	r3, [r7, #4]
 8019dc2:	681b      	ldr	r3, [r3, #0]
 8019dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8019dc8:	2b00      	cmp	r3, #0
 8019dca:	d02e      	beq.n	8019e2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019dcc:	687b      	ldr	r3, [r7, #4]
 8019dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019dd0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019dd4:	d129      	bne.n	8019e2a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8019dd6:	4b4b      	ldr	r3, [pc, #300]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019dd8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019ddc:	0c1b      	lsrs	r3, r3, #16
 8019dde:	f003 0303 	and.w	r3, r3, #3
 8019de2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019de4:	4b47      	ldr	r3, [pc, #284]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019de6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019dea:	0f1b      	lsrs	r3, r3, #28
 8019dec:	f003 0307 	and.w	r3, r3, #7
 8019df0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	685b      	ldr	r3, [r3, #4]
 8019df6:	019a      	lsls	r2, r3, #6
 8019df8:	693b      	ldr	r3, [r7, #16]
 8019dfa:	041b      	lsls	r3, r3, #16
 8019dfc:	431a      	orrs	r2, r3
 8019dfe:	687b      	ldr	r3, [r7, #4]
 8019e00:	68db      	ldr	r3, [r3, #12]
 8019e02:	061b      	lsls	r3, r3, #24
 8019e04:	431a      	orrs	r2, r3
 8019e06:	68fb      	ldr	r3, [r7, #12]
 8019e08:	071b      	lsls	r3, r3, #28
 8019e0a:	493e      	ldr	r1, [pc, #248]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e0c:	4313      	orrs	r3, r2
 8019e0e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019e12:	4b3c      	ldr	r3, [pc, #240]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e14:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019e18:	f023 021f 	bic.w	r2, r3, #31
 8019e1c:	687b      	ldr	r3, [r7, #4]
 8019e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019e20:	3b01      	subs	r3, #1
 8019e22:	4938      	ldr	r1, [pc, #224]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e24:	4313      	orrs	r3, r2
 8019e26:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019e2a:	687b      	ldr	r3, [r7, #4]
 8019e2c:	681b      	ldr	r3, [r3, #0]
 8019e2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d01d      	beq.n	8019e72 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8019e36:	4b33      	ldr	r3, [pc, #204]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e3c:	0e1b      	lsrs	r3, r3, #24
 8019e3e:	f003 030f 	and.w	r3, r3, #15
 8019e42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019e44:	4b2f      	ldr	r3, [pc, #188]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019e4a:	0f1b      	lsrs	r3, r3, #28
 8019e4c:	f003 0307 	and.w	r3, r3, #7
 8019e50:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8019e52:	687b      	ldr	r3, [r7, #4]
 8019e54:	685b      	ldr	r3, [r3, #4]
 8019e56:	019a      	lsls	r2, r3, #6
 8019e58:	687b      	ldr	r3, [r7, #4]
 8019e5a:	691b      	ldr	r3, [r3, #16]
 8019e5c:	041b      	lsls	r3, r3, #16
 8019e5e:	431a      	orrs	r2, r3
 8019e60:	693b      	ldr	r3, [r7, #16]
 8019e62:	061b      	lsls	r3, r3, #24
 8019e64:	431a      	orrs	r2, r3
 8019e66:	68fb      	ldr	r3, [r7, #12]
 8019e68:	071b      	lsls	r3, r3, #28
 8019e6a:	4926      	ldr	r1, [pc, #152]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e6c:	4313      	orrs	r3, r2
 8019e6e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8019e72:	687b      	ldr	r3, [r7, #4]
 8019e74:	681b      	ldr	r3, [r3, #0]
 8019e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019e7a:	2b00      	cmp	r3, #0
 8019e7c:	d011      	beq.n	8019ea2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	685b      	ldr	r3, [r3, #4]
 8019e82:	019a      	lsls	r2, r3, #6
 8019e84:	687b      	ldr	r3, [r7, #4]
 8019e86:	691b      	ldr	r3, [r3, #16]
 8019e88:	041b      	lsls	r3, r3, #16
 8019e8a:	431a      	orrs	r2, r3
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	68db      	ldr	r3, [r3, #12]
 8019e90:	061b      	lsls	r3, r3, #24
 8019e92:	431a      	orrs	r2, r3
 8019e94:	687b      	ldr	r3, [r7, #4]
 8019e96:	689b      	ldr	r3, [r3, #8]
 8019e98:	071b      	lsls	r3, r3, #28
 8019e9a:	491a      	ldr	r1, [pc, #104]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019e9c:	4313      	orrs	r3, r2
 8019e9e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8019ea2:	4b18      	ldr	r3, [pc, #96]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ea4:	681b      	ldr	r3, [r3, #0]
 8019ea6:	4a17      	ldr	r2, [pc, #92]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ea8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019eae:	f7fb fcb9 	bl	8015824 <HAL_GetTick>
 8019eb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019eb4:	e008      	b.n	8019ec8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8019eb6:	f7fb fcb5 	bl	8015824 <HAL_GetTick>
 8019eba:	4602      	mov	r2, r0
 8019ebc:	697b      	ldr	r3, [r7, #20]
 8019ebe:	1ad3      	subs	r3, r2, r3
 8019ec0:	2b64      	cmp	r3, #100	; 0x64
 8019ec2:	d901      	bls.n	8019ec8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019ec4:	2303      	movs	r3, #3
 8019ec6:	e0d8      	b.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019ec8:	4b0e      	ldr	r3, [pc, #56]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019eca:	681b      	ldr	r3, [r3, #0]
 8019ecc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019ed0:	2b00      	cmp	r3, #0
 8019ed2:	d0f0      	beq.n	8019eb6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8019ed4:	69bb      	ldr	r3, [r7, #24]
 8019ed6:	2b01      	cmp	r3, #1
 8019ed8:	f040 80ce 	bne.w	801a078 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8019edc:	4b09      	ldr	r3, [pc, #36]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	4a08      	ldr	r2, [pc, #32]	; (8019f04 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019ee2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8019ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019ee8:	f7fb fc9c 	bl	8015824 <HAL_GetTick>
 8019eec:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019eee:	e00b      	b.n	8019f08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019ef0:	f7fb fc98 	bl	8015824 <HAL_GetTick>
 8019ef4:	4602      	mov	r2, r0
 8019ef6:	697b      	ldr	r3, [r7, #20]
 8019ef8:	1ad3      	subs	r3, r2, r3
 8019efa:	2b64      	cmp	r3, #100	; 0x64
 8019efc:	d904      	bls.n	8019f08 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019efe:	2303      	movs	r3, #3
 8019f00:	e0bb      	b.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8019f02:	bf00      	nop
 8019f04:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019f08:	4b5e      	ldr	r3, [pc, #376]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019f10:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019f14:	d0ec      	beq.n	8019ef0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	681b      	ldr	r3, [r3, #0]
 8019f1a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019f1e:	2b00      	cmp	r3, #0
 8019f20:	d003      	beq.n	8019f2a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8019f22:	687b      	ldr	r3, [r7, #4]
 8019f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019f26:	2b00      	cmp	r3, #0
 8019f28:	d009      	beq.n	8019f3e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8019f2a:	687b      	ldr	r3, [r7, #4]
 8019f2c:	681b      	ldr	r3, [r3, #0]
 8019f2e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8019f32:	2b00      	cmp	r3, #0
 8019f34:	d02e      	beq.n	8019f94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8019f36:	687b      	ldr	r3, [r7, #4]
 8019f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d12a      	bne.n	8019f94 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019f3e:	4b51      	ldr	r3, [pc, #324]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f44:	0c1b      	lsrs	r3, r3, #16
 8019f46:	f003 0303 	and.w	r3, r3, #3
 8019f4a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019f4c:	4b4d      	ldr	r3, [pc, #308]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019f52:	0f1b      	lsrs	r3, r3, #28
 8019f54:	f003 0307 	and.w	r3, r3, #7
 8019f58:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	695b      	ldr	r3, [r3, #20]
 8019f5e:	019a      	lsls	r2, r3, #6
 8019f60:	693b      	ldr	r3, [r7, #16]
 8019f62:	041b      	lsls	r3, r3, #16
 8019f64:	431a      	orrs	r2, r3
 8019f66:	687b      	ldr	r3, [r7, #4]
 8019f68:	699b      	ldr	r3, [r3, #24]
 8019f6a:	061b      	lsls	r3, r3, #24
 8019f6c:	431a      	orrs	r2, r3
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	071b      	lsls	r3, r3, #28
 8019f72:	4944      	ldr	r1, [pc, #272]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019f74:	4313      	orrs	r3, r2
 8019f76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8019f7a:	4b42      	ldr	r3, [pc, #264]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019f7c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019f80:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8019f84:	687b      	ldr	r3, [r7, #4]
 8019f86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019f88:	3b01      	subs	r3, #1
 8019f8a:	021b      	lsls	r3, r3, #8
 8019f8c:	493d      	ldr	r1, [pc, #244]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019f8e:	4313      	orrs	r3, r2
 8019f90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	d022      	beq.n	8019fe6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019fa4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019fa8:	d11d      	bne.n	8019fe6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019faa:	4b36      	ldr	r3, [pc, #216]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019fb0:	0e1b      	lsrs	r3, r3, #24
 8019fb2:	f003 030f 	and.w	r3, r3, #15
 8019fb6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019fb8:	4b32      	ldr	r3, [pc, #200]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019fbe:	0f1b      	lsrs	r3, r3, #28
 8019fc0:	f003 0307 	and.w	r3, r3, #7
 8019fc4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	695b      	ldr	r3, [r3, #20]
 8019fca:	019a      	lsls	r2, r3, #6
 8019fcc:	687b      	ldr	r3, [r7, #4]
 8019fce:	6a1b      	ldr	r3, [r3, #32]
 8019fd0:	041b      	lsls	r3, r3, #16
 8019fd2:	431a      	orrs	r2, r3
 8019fd4:	693b      	ldr	r3, [r7, #16]
 8019fd6:	061b      	lsls	r3, r3, #24
 8019fd8:	431a      	orrs	r2, r3
 8019fda:	68fb      	ldr	r3, [r7, #12]
 8019fdc:	071b      	lsls	r3, r3, #28
 8019fde:	4929      	ldr	r1, [pc, #164]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019fe0:	4313      	orrs	r3, r2
 8019fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8019fe6:	687b      	ldr	r3, [r7, #4]
 8019fe8:	681b      	ldr	r3, [r3, #0]
 8019fea:	f003 0308 	and.w	r3, r3, #8
 8019fee:	2b00      	cmp	r3, #0
 8019ff0:	d028      	beq.n	801a044 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019ff2:	4b24      	ldr	r3, [pc, #144]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019ff8:	0e1b      	lsrs	r3, r3, #24
 8019ffa:	f003 030f 	and.w	r3, r3, #15
 8019ffe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 801a000:	4b20      	ldr	r3, [pc, #128]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a002:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801a006:	0c1b      	lsrs	r3, r3, #16
 801a008:	f003 0303 	and.w	r3, r3, #3
 801a00c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 801a00e:	687b      	ldr	r3, [r7, #4]
 801a010:	695b      	ldr	r3, [r3, #20]
 801a012:	019a      	lsls	r2, r3, #6
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	041b      	lsls	r3, r3, #16
 801a018:	431a      	orrs	r2, r3
 801a01a:	693b      	ldr	r3, [r7, #16]
 801a01c:	061b      	lsls	r3, r3, #24
 801a01e:	431a      	orrs	r2, r3
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	69db      	ldr	r3, [r3, #28]
 801a024:	071b      	lsls	r3, r3, #28
 801a026:	4917      	ldr	r1, [pc, #92]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a028:	4313      	orrs	r3, r2
 801a02a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 801a02e:	4b15      	ldr	r3, [pc, #84]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a034:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801a03c:	4911      	ldr	r1, [pc, #68]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a03e:	4313      	orrs	r3, r2
 801a040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 801a044:	4b0f      	ldr	r3, [pc, #60]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a046:	681b      	ldr	r3, [r3, #0]
 801a048:	4a0e      	ldr	r2, [pc, #56]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a04a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801a04e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801a050:	f7fb fbe8 	bl	8015824 <HAL_GetTick>
 801a054:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801a056:	e008      	b.n	801a06a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 801a058:	f7fb fbe4 	bl	8015824 <HAL_GetTick>
 801a05c:	4602      	mov	r2, r0
 801a05e:	697b      	ldr	r3, [r7, #20]
 801a060:	1ad3      	subs	r3, r2, r3
 801a062:	2b64      	cmp	r3, #100	; 0x64
 801a064:	d901      	bls.n	801a06a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 801a066:	2303      	movs	r3, #3
 801a068:	e007      	b.n	801a07a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 801a06a:	4b06      	ldr	r3, [pc, #24]	; (801a084 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801a06c:	681b      	ldr	r3, [r3, #0]
 801a06e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801a072:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801a076:	d1ef      	bne.n	801a058 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 801a078:	2300      	movs	r3, #0
}
 801a07a:	4618      	mov	r0, r3
 801a07c:	3720      	adds	r7, #32
 801a07e:	46bd      	mov	sp, r7
 801a080:	bd80      	pop	{r7, pc}
 801a082:	bf00      	nop
 801a084:	40023800 	.word	0x40023800

0801a088 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 801a088:	b580      	push	{r7, lr}
 801a08a:	b082      	sub	sp, #8
 801a08c:	af00      	add	r7, sp, #0
 801a08e:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 801a090:	687b      	ldr	r3, [r7, #4]
 801a092:	2b00      	cmp	r3, #0
 801a094:	d101      	bne.n	801a09a <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 801a096:	2301      	movs	r3, #1
 801a098:	e01c      	b.n	801a0d4 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 801a09a:	687b      	ldr	r3, [r7, #4]
 801a09c:	795b      	ldrb	r3, [r3, #5]
 801a09e:	b2db      	uxtb	r3, r3
 801a0a0:	2b00      	cmp	r3, #0
 801a0a2:	d105      	bne.n	801a0b0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 801a0a4:	687b      	ldr	r3, [r7, #4]
 801a0a6:	2200      	movs	r2, #0
 801a0a8:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 801a0aa:	6878      	ldr	r0, [r7, #4]
 801a0ac:	f7f9 fe48 	bl	8013d40 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	2202      	movs	r2, #2
 801a0b4:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 801a0b6:	687b      	ldr	r3, [r7, #4]
 801a0b8:	681b      	ldr	r3, [r3, #0]
 801a0ba:	681a      	ldr	r2, [r3, #0]
 801a0bc:	687b      	ldr	r3, [r7, #4]
 801a0be:	681b      	ldr	r3, [r3, #0]
 801a0c0:	f042 0204 	orr.w	r2, r2, #4
 801a0c4:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 801a0c6:	687b      	ldr	r3, [r7, #4]
 801a0c8:	2201      	movs	r2, #1
 801a0ca:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 801a0cc:	687b      	ldr	r3, [r7, #4]
 801a0ce:	2200      	movs	r2, #0
 801a0d0:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 801a0d2:	2300      	movs	r3, #0
}
 801a0d4:	4618      	mov	r0, r3
 801a0d6:	3708      	adds	r7, #8
 801a0d8:	46bd      	mov	sp, r7
 801a0da:	bd80      	pop	{r7, pc}

0801a0dc <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 801a0dc:	b580      	push	{r7, lr}
 801a0de:	b084      	sub	sp, #16
 801a0e0:	af00      	add	r7, sp, #0
 801a0e2:	6078      	str	r0, [r7, #4]
 801a0e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801a0e6:	2300      	movs	r3, #0
 801a0e8:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 801a0ea:	687b      	ldr	r3, [r7, #4]
 801a0ec:	791b      	ldrb	r3, [r3, #4]
 801a0ee:	2b01      	cmp	r3, #1
 801a0f0:	d101      	bne.n	801a0f6 <HAL_RNG_GenerateRandomNumber+0x1a>
 801a0f2:	2302      	movs	r3, #2
 801a0f4:	e044      	b.n	801a180 <HAL_RNG_GenerateRandomNumber+0xa4>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	2201      	movs	r2, #1
 801a0fa:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 801a0fc:	687b      	ldr	r3, [r7, #4]
 801a0fe:	795b      	ldrb	r3, [r3, #5]
 801a100:	b2db      	uxtb	r3, r3
 801a102:	2b01      	cmp	r3, #1
 801a104:	d133      	bne.n	801a16e <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 801a106:	687b      	ldr	r3, [r7, #4]
 801a108:	2202      	movs	r2, #2
 801a10a:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 801a10c:	f7fb fb8a 	bl	8015824 <HAL_GetTick>
 801a110:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a112:	e018      	b.n	801a146 <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 801a114:	f7fb fb86 	bl	8015824 <HAL_GetTick>
 801a118:	4602      	mov	r2, r0
 801a11a:	68bb      	ldr	r3, [r7, #8]
 801a11c:	1ad3      	subs	r3, r2, r3
 801a11e:	2b02      	cmp	r3, #2
 801a120:	d911      	bls.n	801a146 <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a122:	687b      	ldr	r3, [r7, #4]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	685b      	ldr	r3, [r3, #4]
 801a128:	f003 0301 	and.w	r3, r3, #1
 801a12c:	2b01      	cmp	r3, #1
 801a12e:	d00a      	beq.n	801a146 <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 801a130:	687b      	ldr	r3, [r7, #4]
 801a132:	2201      	movs	r2, #1
 801a134:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801a136:	687b      	ldr	r3, [r7, #4]
 801a138:	2202      	movs	r2, #2
 801a13a:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 801a13c:	687b      	ldr	r3, [r7, #4]
 801a13e:	2200      	movs	r2, #0
 801a140:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 801a142:	2301      	movs	r3, #1
 801a144:	e01c      	b.n	801a180 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	685b      	ldr	r3, [r3, #4]
 801a14c:	f003 0301 	and.w	r3, r3, #1
 801a150:	2b01      	cmp	r3, #1
 801a152:	d1df      	bne.n	801a114 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 801a154:	687b      	ldr	r3, [r7, #4]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	689a      	ldr	r2, [r3, #8]
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 801a15e:	687b      	ldr	r3, [r7, #4]
 801a160:	68da      	ldr	r2, [r3, #12]
 801a162:	683b      	ldr	r3, [r7, #0]
 801a164:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 801a166:	687b      	ldr	r3, [r7, #4]
 801a168:	2201      	movs	r2, #1
 801a16a:	715a      	strb	r2, [r3, #5]
 801a16c:	e004      	b.n	801a178 <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	2204      	movs	r2, #4
 801a172:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 801a174:	2301      	movs	r3, #1
 801a176:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	2200      	movs	r2, #0
 801a17c:	711a      	strb	r2, [r3, #4]

  return status;
 801a17e:	7bfb      	ldrb	r3, [r7, #15]
}
 801a180:	4618      	mov	r0, r3
 801a182:	3710      	adds	r7, #16
 801a184:	46bd      	mov	sp, r7
 801a186:	bd80      	pop	{r7, pc}

0801a188 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 801a188:	b580      	push	{r7, lr}
 801a18a:	b082      	sub	sp, #8
 801a18c:	af00      	add	r7, sp, #0
 801a18e:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 801a190:	687b      	ldr	r3, [r7, #4]
 801a192:	330c      	adds	r3, #12
 801a194:	4619      	mov	r1, r3
 801a196:	6878      	ldr	r0, [r7, #4]
 801a198:	f7ff ffa0 	bl	801a0dc <HAL_RNG_GenerateRandomNumber>
 801a19c:	4603      	mov	r3, r0
 801a19e:	2b00      	cmp	r3, #0
 801a1a0:	d102      	bne.n	801a1a8 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 801a1a2:	687b      	ldr	r3, [r7, #4]
 801a1a4:	68db      	ldr	r3, [r3, #12]
 801a1a6:	e000      	b.n	801a1aa <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 801a1a8:	2300      	movs	r3, #0
  }
}
 801a1aa:	4618      	mov	r0, r3
 801a1ac:	3708      	adds	r7, #8
 801a1ae:	46bd      	mov	sp, r7
 801a1b0:	bd80      	pop	{r7, pc}

0801a1b2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801a1b2:	b580      	push	{r7, lr}
 801a1b4:	b084      	sub	sp, #16
 801a1b6:	af00      	add	r7, sp, #0
 801a1b8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801a1ba:	687b      	ldr	r3, [r7, #4]
 801a1bc:	2b00      	cmp	r3, #0
 801a1be:	d101      	bne.n	801a1c4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801a1c0:	2301      	movs	r3, #1
 801a1c2:	e09d      	b.n	801a300 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801a1c4:	687b      	ldr	r3, [r7, #4]
 801a1c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a1c8:	2b00      	cmp	r3, #0
 801a1ca:	d108      	bne.n	801a1de <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	685b      	ldr	r3, [r3, #4]
 801a1d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a1d4:	d009      	beq.n	801a1ea <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 801a1d6:	687b      	ldr	r3, [r7, #4]
 801a1d8:	2200      	movs	r2, #0
 801a1da:	61da      	str	r2, [r3, #28]
 801a1dc:	e005      	b.n	801a1ea <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 801a1de:	687b      	ldr	r3, [r7, #4]
 801a1e0:	2200      	movs	r2, #0
 801a1e2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801a1e4:	687b      	ldr	r3, [r7, #4]
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a1ea:	687b      	ldr	r3, [r7, #4]
 801a1ec:	2200      	movs	r2, #0
 801a1ee:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a1f6:	b2db      	uxtb	r3, r3
 801a1f8:	2b00      	cmp	r3, #0
 801a1fa:	d106      	bne.n	801a20a <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801a1fc:	687b      	ldr	r3, [r7, #4]
 801a1fe:	2200      	movs	r2, #0
 801a200:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801a204:	6878      	ldr	r0, [r7, #4]
 801a206:	f7f9 fe23 	bl	8013e50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	2202      	movs	r2, #2
 801a20e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	681a      	ldr	r2, [r3, #0]
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a220:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a222:	687b      	ldr	r3, [r7, #4]
 801a224:	68db      	ldr	r3, [r3, #12]
 801a226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a22a:	d902      	bls.n	801a232 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 801a22c:	2300      	movs	r3, #0
 801a22e:	60fb      	str	r3, [r7, #12]
 801a230:	e002      	b.n	801a238 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 801a232:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 801a236:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 801a238:	687b      	ldr	r3, [r7, #4]
 801a23a:	68db      	ldr	r3, [r3, #12]
 801a23c:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 801a240:	d007      	beq.n	801a252 <HAL_SPI_Init+0xa0>
 801a242:	687b      	ldr	r3, [r7, #4]
 801a244:	68db      	ldr	r3, [r3, #12]
 801a246:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a24a:	d002      	beq.n	801a252 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801a24c:	687b      	ldr	r3, [r7, #4]
 801a24e:	2200      	movs	r2, #0
 801a250:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801a252:	687b      	ldr	r3, [r7, #4]
 801a254:	685b      	ldr	r3, [r3, #4]
 801a256:	f403 7282 	and.w	r2, r3, #260	; 0x104
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	689b      	ldr	r3, [r3, #8]
 801a25e:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801a262:	431a      	orrs	r2, r3
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	691b      	ldr	r3, [r3, #16]
 801a268:	f003 0302 	and.w	r3, r3, #2
 801a26c:	431a      	orrs	r2, r3
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	695b      	ldr	r3, [r3, #20]
 801a272:	f003 0301 	and.w	r3, r3, #1
 801a276:	431a      	orrs	r2, r3
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	699b      	ldr	r3, [r3, #24]
 801a27c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 801a280:	431a      	orrs	r2, r3
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	69db      	ldr	r3, [r3, #28]
 801a286:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801a28a:	431a      	orrs	r2, r3
 801a28c:	687b      	ldr	r3, [r7, #4]
 801a28e:	6a1b      	ldr	r3, [r3, #32]
 801a290:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a294:	ea42 0103 	orr.w	r1, r2, r3
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a29c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 801a2a0:	687b      	ldr	r3, [r7, #4]
 801a2a2:	681b      	ldr	r3, [r3, #0]
 801a2a4:	430a      	orrs	r2, r1
 801a2a6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	699b      	ldr	r3, [r3, #24]
 801a2ac:	0c1b      	lsrs	r3, r3, #16
 801a2ae:	f003 0204 	and.w	r2, r3, #4
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801a2b6:	f003 0310 	and.w	r3, r3, #16
 801a2ba:	431a      	orrs	r2, r3
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801a2c0:	f003 0308 	and.w	r3, r3, #8
 801a2c4:	431a      	orrs	r2, r3
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	68db      	ldr	r3, [r3, #12]
 801a2ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 801a2ce:	ea42 0103 	orr.w	r1, r2, r3
 801a2d2:	68fb      	ldr	r3, [r7, #12]
 801a2d4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 801a2d8:	687b      	ldr	r3, [r7, #4]
 801a2da:	681b      	ldr	r3, [r3, #0]
 801a2dc:	430a      	orrs	r2, r1
 801a2de:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	69da      	ldr	r2, [r3, #28]
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	681b      	ldr	r3, [r3, #0]
 801a2ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 801a2ee:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801a2f0:	687b      	ldr	r3, [r7, #4]
 801a2f2:	2200      	movs	r2, #0
 801a2f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801a2f6:	687b      	ldr	r3, [r7, #4]
 801a2f8:	2201      	movs	r2, #1
 801a2fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 801a2fe:	2300      	movs	r3, #0
}
 801a300:	4618      	mov	r0, r3
 801a302:	3710      	adds	r7, #16
 801a304:	46bd      	mov	sp, r7
 801a306:	bd80      	pop	{r7, pc}

0801a308 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a308:	b580      	push	{r7, lr}
 801a30a:	b088      	sub	sp, #32
 801a30c:	af00      	add	r7, sp, #0
 801a30e:	60f8      	str	r0, [r7, #12]
 801a310:	60b9      	str	r1, [r7, #8]
 801a312:	603b      	str	r3, [r7, #0]
 801a314:	4613      	mov	r3, r2
 801a316:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a318:	2300      	movs	r3, #0
 801a31a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a31c:	68fb      	ldr	r3, [r7, #12]
 801a31e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a322:	2b01      	cmp	r3, #1
 801a324:	d101      	bne.n	801a32a <HAL_SPI_Transmit+0x22>
 801a326:	2302      	movs	r3, #2
 801a328:	e158      	b.n	801a5dc <HAL_SPI_Transmit+0x2d4>
 801a32a:	68fb      	ldr	r3, [r7, #12]
 801a32c:	2201      	movs	r2, #1
 801a32e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a332:	f7fb fa77 	bl	8015824 <HAL_GetTick>
 801a336:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801a338:	88fb      	ldrh	r3, [r7, #6]
 801a33a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a33c:	68fb      	ldr	r3, [r7, #12]
 801a33e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a342:	b2db      	uxtb	r3, r3
 801a344:	2b01      	cmp	r3, #1
 801a346:	d002      	beq.n	801a34e <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801a348:	2302      	movs	r3, #2
 801a34a:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a34c:	e13d      	b.n	801a5ca <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 801a34e:	68bb      	ldr	r3, [r7, #8]
 801a350:	2b00      	cmp	r3, #0
 801a352:	d002      	beq.n	801a35a <HAL_SPI_Transmit+0x52>
 801a354:	88fb      	ldrh	r3, [r7, #6]
 801a356:	2b00      	cmp	r3, #0
 801a358:	d102      	bne.n	801a360 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801a35a:	2301      	movs	r3, #1
 801a35c:	77fb      	strb	r3, [r7, #31]
    goto error;
 801a35e:	e134      	b.n	801a5ca <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	2203      	movs	r2, #3
 801a364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	2200      	movs	r2, #0
 801a36c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 801a36e:	68fb      	ldr	r3, [r7, #12]
 801a370:	68ba      	ldr	r2, [r7, #8]
 801a372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 801a374:	68fb      	ldr	r3, [r7, #12]
 801a376:	88fa      	ldrh	r2, [r7, #6]
 801a378:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 801a37a:	68fb      	ldr	r3, [r7, #12]
 801a37c:	88fa      	ldrh	r2, [r7, #6]
 801a37e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 801a380:	68fb      	ldr	r3, [r7, #12]
 801a382:	2200      	movs	r2, #0
 801a384:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 801a386:	68fb      	ldr	r3, [r7, #12]
 801a388:	2200      	movs	r2, #0
 801a38a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	2200      	movs	r2, #0
 801a392:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 801a396:	68fb      	ldr	r3, [r7, #12]
 801a398:	2200      	movs	r2, #0
 801a39a:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 801a39c:	68fb      	ldr	r3, [r7, #12]
 801a39e:	2200      	movs	r2, #0
 801a3a0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a3a2:	68fb      	ldr	r3, [r7, #12]
 801a3a4:	689b      	ldr	r3, [r3, #8]
 801a3a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a3aa:	d10f      	bne.n	801a3cc <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	681b      	ldr	r3, [r3, #0]
 801a3b0:	681a      	ldr	r2, [r3, #0]
 801a3b2:	68fb      	ldr	r3, [r7, #12]
 801a3b4:	681b      	ldr	r3, [r3, #0]
 801a3b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a3ba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801a3bc:	68fb      	ldr	r3, [r7, #12]
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	681a      	ldr	r2, [r3, #0]
 801a3c2:	68fb      	ldr	r3, [r7, #12]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801a3ca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a3cc:	68fb      	ldr	r3, [r7, #12]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a3d6:	2b40      	cmp	r3, #64	; 0x40
 801a3d8:	d007      	beq.n	801a3ea <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a3da:	68fb      	ldr	r3, [r7, #12]
 801a3dc:	681b      	ldr	r3, [r3, #0]
 801a3de:	681a      	ldr	r2, [r3, #0]
 801a3e0:	68fb      	ldr	r3, [r7, #12]
 801a3e2:	681b      	ldr	r3, [r3, #0]
 801a3e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a3e8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a3ea:	68fb      	ldr	r3, [r7, #12]
 801a3ec:	68db      	ldr	r3, [r3, #12]
 801a3ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a3f2:	d94b      	bls.n	801a48c <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a3f4:	68fb      	ldr	r3, [r7, #12]
 801a3f6:	685b      	ldr	r3, [r3, #4]
 801a3f8:	2b00      	cmp	r3, #0
 801a3fa:	d002      	beq.n	801a402 <HAL_SPI_Transmit+0xfa>
 801a3fc:	8afb      	ldrh	r3, [r7, #22]
 801a3fe:	2b01      	cmp	r3, #1
 801a400:	d13e      	bne.n	801a480 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a406:	881a      	ldrh	r2, [r3, #0]
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	681b      	ldr	r3, [r3, #0]
 801a40c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a40e:	68fb      	ldr	r3, [r7, #12]
 801a410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a412:	1c9a      	adds	r2, r3, #2
 801a414:	68fb      	ldr	r3, [r7, #12]
 801a416:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a418:	68fb      	ldr	r3, [r7, #12]
 801a41a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a41c:	b29b      	uxth	r3, r3
 801a41e:	3b01      	subs	r3, #1
 801a420:	b29a      	uxth	r2, r3
 801a422:	68fb      	ldr	r3, [r7, #12]
 801a424:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 801a426:	e02b      	b.n	801a480 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a428:	68fb      	ldr	r3, [r7, #12]
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	689b      	ldr	r3, [r3, #8]
 801a42e:	f003 0302 	and.w	r3, r3, #2
 801a432:	2b02      	cmp	r3, #2
 801a434:	d112      	bne.n	801a45c <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a436:	68fb      	ldr	r3, [r7, #12]
 801a438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a43a:	881a      	ldrh	r2, [r3, #0]
 801a43c:	68fb      	ldr	r3, [r7, #12]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a442:	68fb      	ldr	r3, [r7, #12]
 801a444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a446:	1c9a      	adds	r2, r3, #2
 801a448:	68fb      	ldr	r3, [r7, #12]
 801a44a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a450:	b29b      	uxth	r3, r3
 801a452:	3b01      	subs	r3, #1
 801a454:	b29a      	uxth	r2, r3
 801a456:	68fb      	ldr	r3, [r7, #12]
 801a458:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a45a:	e011      	b.n	801a480 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a45c:	f7fb f9e2 	bl	8015824 <HAL_GetTick>
 801a460:	4602      	mov	r2, r0
 801a462:	69bb      	ldr	r3, [r7, #24]
 801a464:	1ad3      	subs	r3, r2, r3
 801a466:	683a      	ldr	r2, [r7, #0]
 801a468:	429a      	cmp	r2, r3
 801a46a:	d803      	bhi.n	801a474 <HAL_SPI_Transmit+0x16c>
 801a46c:	683b      	ldr	r3, [r7, #0]
 801a46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a472:	d102      	bne.n	801a47a <HAL_SPI_Transmit+0x172>
 801a474:	683b      	ldr	r3, [r7, #0]
 801a476:	2b00      	cmp	r3, #0
 801a478:	d102      	bne.n	801a480 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 801a47a:	2303      	movs	r3, #3
 801a47c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a47e:	e0a4      	b.n	801a5ca <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a480:	68fb      	ldr	r3, [r7, #12]
 801a482:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a484:	b29b      	uxth	r3, r3
 801a486:	2b00      	cmp	r3, #0
 801a488:	d1ce      	bne.n	801a428 <HAL_SPI_Transmit+0x120>
 801a48a:	e07c      	b.n	801a586 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a48c:	68fb      	ldr	r3, [r7, #12]
 801a48e:	685b      	ldr	r3, [r3, #4]
 801a490:	2b00      	cmp	r3, #0
 801a492:	d002      	beq.n	801a49a <HAL_SPI_Transmit+0x192>
 801a494:	8afb      	ldrh	r3, [r7, #22]
 801a496:	2b01      	cmp	r3, #1
 801a498:	d170      	bne.n	801a57c <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 801a49a:	68fb      	ldr	r3, [r7, #12]
 801a49c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	2b01      	cmp	r3, #1
 801a4a2:	d912      	bls.n	801a4ca <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a4a4:	68fb      	ldr	r3, [r7, #12]
 801a4a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4a8:	881a      	ldrh	r2, [r3, #0]
 801a4aa:	68fb      	ldr	r3, [r7, #12]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a4b0:	68fb      	ldr	r3, [r7, #12]
 801a4b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4b4:	1c9a      	adds	r2, r3, #2
 801a4b6:	68fb      	ldr	r3, [r7, #12]
 801a4b8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a4ba:	68fb      	ldr	r3, [r7, #12]
 801a4bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4be:	b29b      	uxth	r3, r3
 801a4c0:	3b02      	subs	r3, #2
 801a4c2:	b29a      	uxth	r2, r3
 801a4c4:	68fb      	ldr	r3, [r7, #12]
 801a4c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a4c8:	e058      	b.n	801a57c <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a4ce:	68fb      	ldr	r3, [r7, #12]
 801a4d0:	681b      	ldr	r3, [r3, #0]
 801a4d2:	330c      	adds	r3, #12
 801a4d4:	7812      	ldrb	r2, [r2, #0]
 801a4d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 801a4d8:	68fb      	ldr	r3, [r7, #12]
 801a4da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a4dc:	1c5a      	adds	r2, r3, #1
 801a4de:	68fb      	ldr	r3, [r7, #12]
 801a4e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4e6:	b29b      	uxth	r3, r3
 801a4e8:	3b01      	subs	r3, #1
 801a4ea:	b29a      	uxth	r2, r3
 801a4ec:	68fb      	ldr	r3, [r7, #12]
 801a4ee:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 801a4f0:	e044      	b.n	801a57c <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	689b      	ldr	r3, [r3, #8]
 801a4f8:	f003 0302 	and.w	r3, r3, #2
 801a4fc:	2b02      	cmp	r3, #2
 801a4fe:	d12b      	bne.n	801a558 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 801a500:	68fb      	ldr	r3, [r7, #12]
 801a502:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a504:	b29b      	uxth	r3, r3
 801a506:	2b01      	cmp	r3, #1
 801a508:	d912      	bls.n	801a530 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a50a:	68fb      	ldr	r3, [r7, #12]
 801a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a50e:	881a      	ldrh	r2, [r3, #0]
 801a510:	68fb      	ldr	r3, [r7, #12]
 801a512:	681b      	ldr	r3, [r3, #0]
 801a514:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a516:	68fb      	ldr	r3, [r7, #12]
 801a518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a51a:	1c9a      	adds	r2, r3, #2
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a520:	68fb      	ldr	r3, [r7, #12]
 801a522:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a524:	b29b      	uxth	r3, r3
 801a526:	3b02      	subs	r3, #2
 801a528:	b29a      	uxth	r2, r3
 801a52a:	68fb      	ldr	r3, [r7, #12]
 801a52c:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a52e:	e025      	b.n	801a57c <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a534:	68fb      	ldr	r3, [r7, #12]
 801a536:	681b      	ldr	r3, [r3, #0]
 801a538:	330c      	adds	r3, #12
 801a53a:	7812      	ldrb	r2, [r2, #0]
 801a53c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a53e:	68fb      	ldr	r3, [r7, #12]
 801a540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a542:	1c5a      	adds	r2, r3, #1
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a548:	68fb      	ldr	r3, [r7, #12]
 801a54a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a54c:	b29b      	uxth	r3, r3
 801a54e:	3b01      	subs	r3, #1
 801a550:	b29a      	uxth	r2, r3
 801a552:	68fb      	ldr	r3, [r7, #12]
 801a554:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a556:	e011      	b.n	801a57c <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a558:	f7fb f964 	bl	8015824 <HAL_GetTick>
 801a55c:	4602      	mov	r2, r0
 801a55e:	69bb      	ldr	r3, [r7, #24]
 801a560:	1ad3      	subs	r3, r2, r3
 801a562:	683a      	ldr	r2, [r7, #0]
 801a564:	429a      	cmp	r2, r3
 801a566:	d803      	bhi.n	801a570 <HAL_SPI_Transmit+0x268>
 801a568:	683b      	ldr	r3, [r7, #0]
 801a56a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a56e:	d102      	bne.n	801a576 <HAL_SPI_Transmit+0x26e>
 801a570:	683b      	ldr	r3, [r7, #0]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d102      	bne.n	801a57c <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 801a576:	2303      	movs	r3, #3
 801a578:	77fb      	strb	r3, [r7, #31]
          goto error;
 801a57a:	e026      	b.n	801a5ca <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 801a57c:	68fb      	ldr	r3, [r7, #12]
 801a57e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a580:	b29b      	uxth	r3, r3
 801a582:	2b00      	cmp	r3, #0
 801a584:	d1b5      	bne.n	801a4f2 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a586:	69ba      	ldr	r2, [r7, #24]
 801a588:	6839      	ldr	r1, [r7, #0]
 801a58a:	68f8      	ldr	r0, [r7, #12]
 801a58c:	f000 fd08 	bl	801afa0 <SPI_EndRxTxTransaction>
 801a590:	4603      	mov	r3, r0
 801a592:	2b00      	cmp	r3, #0
 801a594:	d002      	beq.n	801a59c <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a596:	68fb      	ldr	r3, [r7, #12]
 801a598:	2220      	movs	r2, #32
 801a59a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	689b      	ldr	r3, [r3, #8]
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d10a      	bne.n	801a5ba <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a5a4:	2300      	movs	r3, #0
 801a5a6:	613b      	str	r3, [r7, #16]
 801a5a8:	68fb      	ldr	r3, [r7, #12]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	68db      	ldr	r3, [r3, #12]
 801a5ae:	613b      	str	r3, [r7, #16]
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	681b      	ldr	r3, [r3, #0]
 801a5b4:	689b      	ldr	r3, [r3, #8]
 801a5b6:	613b      	str	r3, [r7, #16]
 801a5b8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a5be:	2b00      	cmp	r3, #0
 801a5c0:	d002      	beq.n	801a5c8 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801a5c2:	2301      	movs	r3, #1
 801a5c4:	77fb      	strb	r3, [r7, #31]
 801a5c6:	e000      	b.n	801a5ca <HAL_SPI_Transmit+0x2c2>
  }

error:
 801a5c8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a5ca:	68fb      	ldr	r3, [r7, #12]
 801a5cc:	2201      	movs	r2, #1
 801a5ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a5d2:	68fb      	ldr	r3, [r7, #12]
 801a5d4:	2200      	movs	r2, #0
 801a5d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a5da:	7ffb      	ldrb	r3, [r7, #31]
}
 801a5dc:	4618      	mov	r0, r3
 801a5de:	3720      	adds	r7, #32
 801a5e0:	46bd      	mov	sp, r7
 801a5e2:	bd80      	pop	{r7, pc}

0801a5e4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a5e4:	b580      	push	{r7, lr}
 801a5e6:	b088      	sub	sp, #32
 801a5e8:	af02      	add	r7, sp, #8
 801a5ea:	60f8      	str	r0, [r7, #12]
 801a5ec:	60b9      	str	r1, [r7, #8]
 801a5ee:	603b      	str	r3, [r7, #0]
 801a5f0:	4613      	mov	r3, r2
 801a5f2:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a5f4:	2300      	movs	r3, #0
 801a5f6:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a5f8:	68fb      	ldr	r3, [r7, #12]
 801a5fa:	685b      	ldr	r3, [r3, #4]
 801a5fc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a600:	d112      	bne.n	801a628 <HAL_SPI_Receive+0x44>
 801a602:	68fb      	ldr	r3, [r7, #12]
 801a604:	689b      	ldr	r3, [r3, #8]
 801a606:	2b00      	cmp	r3, #0
 801a608:	d10e      	bne.n	801a628 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a60a:	68fb      	ldr	r3, [r7, #12]
 801a60c:	2204      	movs	r2, #4
 801a60e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a612:	88fa      	ldrh	r2, [r7, #6]
 801a614:	683b      	ldr	r3, [r7, #0]
 801a616:	9300      	str	r3, [sp, #0]
 801a618:	4613      	mov	r3, r2
 801a61a:	68ba      	ldr	r2, [r7, #8]
 801a61c:	68b9      	ldr	r1, [r7, #8]
 801a61e:	68f8      	ldr	r0, [r7, #12]
 801a620:	f000 f910 	bl	801a844 <HAL_SPI_TransmitReceive>
 801a624:	4603      	mov	r3, r0
 801a626:	e109      	b.n	801a83c <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a62e:	2b01      	cmp	r3, #1
 801a630:	d101      	bne.n	801a636 <HAL_SPI_Receive+0x52>
 801a632:	2302      	movs	r3, #2
 801a634:	e102      	b.n	801a83c <HAL_SPI_Receive+0x258>
 801a636:	68fb      	ldr	r3, [r7, #12]
 801a638:	2201      	movs	r2, #1
 801a63a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a63e:	f7fb f8f1 	bl	8015824 <HAL_GetTick>
 801a642:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a644:	68fb      	ldr	r3, [r7, #12]
 801a646:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a64a:	b2db      	uxtb	r3, r3
 801a64c:	2b01      	cmp	r3, #1
 801a64e:	d002      	beq.n	801a656 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a650:	2302      	movs	r3, #2
 801a652:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a654:	e0e9      	b.n	801a82a <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a656:	68bb      	ldr	r3, [r7, #8]
 801a658:	2b00      	cmp	r3, #0
 801a65a:	d002      	beq.n	801a662 <HAL_SPI_Receive+0x7e>
 801a65c:	88fb      	ldrh	r3, [r7, #6]
 801a65e:	2b00      	cmp	r3, #0
 801a660:	d102      	bne.n	801a668 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a662:	2301      	movs	r3, #1
 801a664:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a666:	e0e0      	b.n	801a82a <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a668:	68fb      	ldr	r3, [r7, #12]
 801a66a:	2204      	movs	r2, #4
 801a66c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a670:	68fb      	ldr	r3, [r7, #12]
 801a672:	2200      	movs	r2, #0
 801a674:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a676:	68fb      	ldr	r3, [r7, #12]
 801a678:	68ba      	ldr	r2, [r7, #8]
 801a67a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a67c:	68fb      	ldr	r3, [r7, #12]
 801a67e:	88fa      	ldrh	r2, [r7, #6]
 801a680:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a684:	68fb      	ldr	r3, [r7, #12]
 801a686:	88fa      	ldrh	r2, [r7, #6]
 801a688:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a68c:	68fb      	ldr	r3, [r7, #12]
 801a68e:	2200      	movs	r2, #0
 801a690:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a692:	68fb      	ldr	r3, [r7, #12]
 801a694:	2200      	movs	r2, #0
 801a696:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a698:	68fb      	ldr	r3, [r7, #12]
 801a69a:	2200      	movs	r2, #0
 801a69c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a69e:	68fb      	ldr	r3, [r7, #12]
 801a6a0:	2200      	movs	r2, #0
 801a6a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a6a4:	68fb      	ldr	r3, [r7, #12]
 801a6a6:	2200      	movs	r2, #0
 801a6a8:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a6aa:	68fb      	ldr	r3, [r7, #12]
 801a6ac:	68db      	ldr	r3, [r3, #12]
 801a6ae:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a6b2:	d908      	bls.n	801a6c6 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a6b4:	68fb      	ldr	r3, [r7, #12]
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	685a      	ldr	r2, [r3, #4]
 801a6ba:	68fb      	ldr	r3, [r7, #12]
 801a6bc:	681b      	ldr	r3, [r3, #0]
 801a6be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a6c2:	605a      	str	r2, [r3, #4]
 801a6c4:	e007      	b.n	801a6d6 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a6c6:	68fb      	ldr	r3, [r7, #12]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	685a      	ldr	r2, [r3, #4]
 801a6cc:	68fb      	ldr	r3, [r7, #12]
 801a6ce:	681b      	ldr	r3, [r3, #0]
 801a6d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a6d4:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a6d6:	68fb      	ldr	r3, [r7, #12]
 801a6d8:	689b      	ldr	r3, [r3, #8]
 801a6da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a6de:	d10f      	bne.n	801a700 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a6e0:	68fb      	ldr	r3, [r7, #12]
 801a6e2:	681b      	ldr	r3, [r3, #0]
 801a6e4:	681a      	ldr	r2, [r3, #0]
 801a6e6:	68fb      	ldr	r3, [r7, #12]
 801a6e8:	681b      	ldr	r3, [r3, #0]
 801a6ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a6ee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a6f0:	68fb      	ldr	r3, [r7, #12]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	681a      	ldr	r2, [r3, #0]
 801a6f6:	68fb      	ldr	r3, [r7, #12]
 801a6f8:	681b      	ldr	r3, [r3, #0]
 801a6fa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a6fe:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a700:	68fb      	ldr	r3, [r7, #12]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	681b      	ldr	r3, [r3, #0]
 801a706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a70a:	2b40      	cmp	r3, #64	; 0x40
 801a70c:	d007      	beq.n	801a71e <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a70e:	68fb      	ldr	r3, [r7, #12]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	681a      	ldr	r2, [r3, #0]
 801a714:	68fb      	ldr	r3, [r7, #12]
 801a716:	681b      	ldr	r3, [r3, #0]
 801a718:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a71c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a71e:	68fb      	ldr	r3, [r7, #12]
 801a720:	68db      	ldr	r3, [r3, #12]
 801a722:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a726:	d867      	bhi.n	801a7f8 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a728:	e030      	b.n	801a78c <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a72a:	68fb      	ldr	r3, [r7, #12]
 801a72c:	681b      	ldr	r3, [r3, #0]
 801a72e:	689b      	ldr	r3, [r3, #8]
 801a730:	f003 0301 	and.w	r3, r3, #1
 801a734:	2b01      	cmp	r3, #1
 801a736:	d117      	bne.n	801a768 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a738:	68fb      	ldr	r3, [r7, #12]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	f103 020c 	add.w	r2, r3, #12
 801a740:	68fb      	ldr	r3, [r7, #12]
 801a742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a744:	7812      	ldrb	r2, [r2, #0]
 801a746:	b2d2      	uxtb	r2, r2
 801a748:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a74a:	68fb      	ldr	r3, [r7, #12]
 801a74c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a74e:	1c5a      	adds	r2, r3, #1
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a754:	68fb      	ldr	r3, [r7, #12]
 801a756:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a75a:	b29b      	uxth	r3, r3
 801a75c:	3b01      	subs	r3, #1
 801a75e:	b29a      	uxth	r2, r3
 801a760:	68fb      	ldr	r3, [r7, #12]
 801a762:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a766:	e011      	b.n	801a78c <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a768:	f7fb f85c 	bl	8015824 <HAL_GetTick>
 801a76c:	4602      	mov	r2, r0
 801a76e:	693b      	ldr	r3, [r7, #16]
 801a770:	1ad3      	subs	r3, r2, r3
 801a772:	683a      	ldr	r2, [r7, #0]
 801a774:	429a      	cmp	r2, r3
 801a776:	d803      	bhi.n	801a780 <HAL_SPI_Receive+0x19c>
 801a778:	683b      	ldr	r3, [r7, #0]
 801a77a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a77e:	d102      	bne.n	801a786 <HAL_SPI_Receive+0x1a2>
 801a780:	683b      	ldr	r3, [r7, #0]
 801a782:	2b00      	cmp	r3, #0
 801a784:	d102      	bne.n	801a78c <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801a786:	2303      	movs	r3, #3
 801a788:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a78a:	e04e      	b.n	801a82a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a78c:	68fb      	ldr	r3, [r7, #12]
 801a78e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a792:	b29b      	uxth	r3, r3
 801a794:	2b00      	cmp	r3, #0
 801a796:	d1c8      	bne.n	801a72a <HAL_SPI_Receive+0x146>
 801a798:	e034      	b.n	801a804 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a79a:	68fb      	ldr	r3, [r7, #12]
 801a79c:	681b      	ldr	r3, [r3, #0]
 801a79e:	689b      	ldr	r3, [r3, #8]
 801a7a0:	f003 0301 	and.w	r3, r3, #1
 801a7a4:	2b01      	cmp	r3, #1
 801a7a6:	d115      	bne.n	801a7d4 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a7a8:	68fb      	ldr	r3, [r7, #12]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	68da      	ldr	r2, [r3, #12]
 801a7ae:	68fb      	ldr	r3, [r7, #12]
 801a7b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7b2:	b292      	uxth	r2, r2
 801a7b4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a7b6:	68fb      	ldr	r3, [r7, #12]
 801a7b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a7ba:	1c9a      	adds	r2, r3, #2
 801a7bc:	68fb      	ldr	r3, [r7, #12]
 801a7be:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a7c0:	68fb      	ldr	r3, [r7, #12]
 801a7c2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a7c6:	b29b      	uxth	r3, r3
 801a7c8:	3b01      	subs	r3, #1
 801a7ca:	b29a      	uxth	r2, r3
 801a7cc:	68fb      	ldr	r3, [r7, #12]
 801a7ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a7d2:	e011      	b.n	801a7f8 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a7d4:	f7fb f826 	bl	8015824 <HAL_GetTick>
 801a7d8:	4602      	mov	r2, r0
 801a7da:	693b      	ldr	r3, [r7, #16]
 801a7dc:	1ad3      	subs	r3, r2, r3
 801a7de:	683a      	ldr	r2, [r7, #0]
 801a7e0:	429a      	cmp	r2, r3
 801a7e2:	d803      	bhi.n	801a7ec <HAL_SPI_Receive+0x208>
 801a7e4:	683b      	ldr	r3, [r7, #0]
 801a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a7ea:	d102      	bne.n	801a7f2 <HAL_SPI_Receive+0x20e>
 801a7ec:	683b      	ldr	r3, [r7, #0]
 801a7ee:	2b00      	cmp	r3, #0
 801a7f0:	d102      	bne.n	801a7f8 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801a7f2:	2303      	movs	r3, #3
 801a7f4:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a7f6:	e018      	b.n	801a82a <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a7f8:	68fb      	ldr	r3, [r7, #12]
 801a7fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a7fe:	b29b      	uxth	r3, r3
 801a800:	2b00      	cmp	r3, #0
 801a802:	d1ca      	bne.n	801a79a <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a804:	693a      	ldr	r2, [r7, #16]
 801a806:	6839      	ldr	r1, [r7, #0]
 801a808:	68f8      	ldr	r0, [r7, #12]
 801a80a:	f000 fb4d 	bl	801aea8 <SPI_EndRxTransaction>
 801a80e:	4603      	mov	r3, r0
 801a810:	2b00      	cmp	r3, #0
 801a812:	d002      	beq.n	801a81a <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a814:	68fb      	ldr	r3, [r7, #12]
 801a816:	2220      	movs	r2, #32
 801a818:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a81a:	68fb      	ldr	r3, [r7, #12]
 801a81c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a81e:	2b00      	cmp	r3, #0
 801a820:	d002      	beq.n	801a828 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801a822:	2301      	movs	r3, #1
 801a824:	75fb      	strb	r3, [r7, #23]
 801a826:	e000      	b.n	801a82a <HAL_SPI_Receive+0x246>
  }

error :
 801a828:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a82a:	68fb      	ldr	r3, [r7, #12]
 801a82c:	2201      	movs	r2, #1
 801a82e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a832:	68fb      	ldr	r3, [r7, #12]
 801a834:	2200      	movs	r2, #0
 801a836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a83a:	7dfb      	ldrb	r3, [r7, #23]
}
 801a83c:	4618      	mov	r0, r3
 801a83e:	3718      	adds	r7, #24
 801a840:	46bd      	mov	sp, r7
 801a842:	bd80      	pop	{r7, pc}

0801a844 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801a844:	b580      	push	{r7, lr}
 801a846:	b08a      	sub	sp, #40	; 0x28
 801a848:	af00      	add	r7, sp, #0
 801a84a:	60f8      	str	r0, [r7, #12]
 801a84c:	60b9      	str	r1, [r7, #8]
 801a84e:	607a      	str	r2, [r7, #4]
 801a850:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a852:	2301      	movs	r3, #1
 801a854:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801a856:	2300      	movs	r3, #0
 801a858:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a85c:	68fb      	ldr	r3, [r7, #12]
 801a85e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a862:	2b01      	cmp	r3, #1
 801a864:	d101      	bne.n	801a86a <HAL_SPI_TransmitReceive+0x26>
 801a866:	2302      	movs	r3, #2
 801a868:	e1fb      	b.n	801ac62 <HAL_SPI_TransmitReceive+0x41e>
 801a86a:	68fb      	ldr	r3, [r7, #12]
 801a86c:	2201      	movs	r2, #1
 801a86e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a872:	f7fa ffd7 	bl	8015824 <HAL_GetTick>
 801a876:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a878:	68fb      	ldr	r3, [r7, #12]
 801a87a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a87e:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	685b      	ldr	r3, [r3, #4]
 801a884:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801a886:	887b      	ldrh	r3, [r7, #2]
 801a888:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801a88a:	887b      	ldrh	r3, [r7, #2]
 801a88c:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a88e:	7efb      	ldrb	r3, [r7, #27]
 801a890:	2b01      	cmp	r3, #1
 801a892:	d00e      	beq.n	801a8b2 <HAL_SPI_TransmitReceive+0x6e>
 801a894:	697b      	ldr	r3, [r7, #20]
 801a896:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a89a:	d106      	bne.n	801a8aa <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801a89c:	68fb      	ldr	r3, [r7, #12]
 801a89e:	689b      	ldr	r3, [r3, #8]
 801a8a0:	2b00      	cmp	r3, #0
 801a8a2:	d102      	bne.n	801a8aa <HAL_SPI_TransmitReceive+0x66>
 801a8a4:	7efb      	ldrb	r3, [r7, #27]
 801a8a6:	2b04      	cmp	r3, #4
 801a8a8:	d003      	beq.n	801a8b2 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801a8aa:	2302      	movs	r3, #2
 801a8ac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a8b0:	e1cd      	b.n	801ac4e <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801a8b2:	68bb      	ldr	r3, [r7, #8]
 801a8b4:	2b00      	cmp	r3, #0
 801a8b6:	d005      	beq.n	801a8c4 <HAL_SPI_TransmitReceive+0x80>
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	2b00      	cmp	r3, #0
 801a8bc:	d002      	beq.n	801a8c4 <HAL_SPI_TransmitReceive+0x80>
 801a8be:	887b      	ldrh	r3, [r7, #2]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d103      	bne.n	801a8cc <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801a8c4:	2301      	movs	r3, #1
 801a8c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a8ca:	e1c0      	b.n	801ac4e <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801a8cc:	68fb      	ldr	r3, [r7, #12]
 801a8ce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a8d2:	b2db      	uxtb	r3, r3
 801a8d4:	2b04      	cmp	r3, #4
 801a8d6:	d003      	beq.n	801a8e0 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2205      	movs	r2, #5
 801a8dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801a8e6:	68fb      	ldr	r3, [r7, #12]
 801a8e8:	687a      	ldr	r2, [r7, #4]
 801a8ea:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801a8ec:	68fb      	ldr	r3, [r7, #12]
 801a8ee:	887a      	ldrh	r2, [r7, #2]
 801a8f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801a8f4:	68fb      	ldr	r3, [r7, #12]
 801a8f6:	887a      	ldrh	r2, [r7, #2]
 801a8f8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	68ba      	ldr	r2, [r7, #8]
 801a900:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801a902:	68fb      	ldr	r3, [r7, #12]
 801a904:	887a      	ldrh	r2, [r7, #2]
 801a906:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801a908:	68fb      	ldr	r3, [r7, #12]
 801a90a:	887a      	ldrh	r2, [r7, #2]
 801a90c:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801a90e:	68fb      	ldr	r3, [r7, #12]
 801a910:	2200      	movs	r2, #0
 801a912:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a914:	68fb      	ldr	r3, [r7, #12]
 801a916:	2200      	movs	r2, #0
 801a918:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801a91a:	68fb      	ldr	r3, [r7, #12]
 801a91c:	68db      	ldr	r3, [r3, #12]
 801a91e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a922:	d802      	bhi.n	801a92a <HAL_SPI_TransmitReceive+0xe6>
 801a924:	8a3b      	ldrh	r3, [r7, #16]
 801a926:	2b01      	cmp	r3, #1
 801a928:	d908      	bls.n	801a93c <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a92a:	68fb      	ldr	r3, [r7, #12]
 801a92c:	681b      	ldr	r3, [r3, #0]
 801a92e:	685a      	ldr	r2, [r3, #4]
 801a930:	68fb      	ldr	r3, [r7, #12]
 801a932:	681b      	ldr	r3, [r3, #0]
 801a934:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a938:	605a      	str	r2, [r3, #4]
 801a93a:	e007      	b.n	801a94c <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	681b      	ldr	r3, [r3, #0]
 801a940:	685a      	ldr	r2, [r3, #4]
 801a942:	68fb      	ldr	r3, [r7, #12]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a94a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a956:	2b40      	cmp	r3, #64	; 0x40
 801a958:	d007      	beq.n	801a96a <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a95a:	68fb      	ldr	r3, [r7, #12]
 801a95c:	681b      	ldr	r3, [r3, #0]
 801a95e:	681a      	ldr	r2, [r3, #0]
 801a960:	68fb      	ldr	r3, [r7, #12]
 801a962:	681b      	ldr	r3, [r3, #0]
 801a964:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a968:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a96a:	68fb      	ldr	r3, [r7, #12]
 801a96c:	68db      	ldr	r3, [r3, #12]
 801a96e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a972:	d97c      	bls.n	801aa6e <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	685b      	ldr	r3, [r3, #4]
 801a978:	2b00      	cmp	r3, #0
 801a97a:	d002      	beq.n	801a982 <HAL_SPI_TransmitReceive+0x13e>
 801a97c:	8a7b      	ldrh	r3, [r7, #18]
 801a97e:	2b01      	cmp	r3, #1
 801a980:	d169      	bne.n	801aa56 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a982:	68fb      	ldr	r3, [r7, #12]
 801a984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a986:	881a      	ldrh	r2, [r3, #0]
 801a988:	68fb      	ldr	r3, [r7, #12]
 801a98a:	681b      	ldr	r3, [r3, #0]
 801a98c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a98e:	68fb      	ldr	r3, [r7, #12]
 801a990:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a992:	1c9a      	adds	r2, r3, #2
 801a994:	68fb      	ldr	r3, [r7, #12]
 801a996:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a998:	68fb      	ldr	r3, [r7, #12]
 801a99a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a99c:	b29b      	uxth	r3, r3
 801a99e:	3b01      	subs	r3, #1
 801a9a0:	b29a      	uxth	r2, r3
 801a9a2:	68fb      	ldr	r3, [r7, #12]
 801a9a4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a9a6:	e056      	b.n	801aa56 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	689b      	ldr	r3, [r3, #8]
 801a9ae:	f003 0302 	and.w	r3, r3, #2
 801a9b2:	2b02      	cmp	r3, #2
 801a9b4:	d11b      	bne.n	801a9ee <HAL_SPI_TransmitReceive+0x1aa>
 801a9b6:	68fb      	ldr	r3, [r7, #12]
 801a9b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a9ba:	b29b      	uxth	r3, r3
 801a9bc:	2b00      	cmp	r3, #0
 801a9be:	d016      	beq.n	801a9ee <HAL_SPI_TransmitReceive+0x1aa>
 801a9c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a9c2:	2b01      	cmp	r3, #1
 801a9c4:	d113      	bne.n	801a9ee <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a9c6:	68fb      	ldr	r3, [r7, #12]
 801a9c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9ca:	881a      	ldrh	r2, [r3, #0]
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	681b      	ldr	r3, [r3, #0]
 801a9d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a9d2:	68fb      	ldr	r3, [r7, #12]
 801a9d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a9d6:	1c9a      	adds	r2, r3, #2
 801a9d8:	68fb      	ldr	r3, [r7, #12]
 801a9da:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a9dc:	68fb      	ldr	r3, [r7, #12]
 801a9de:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a9e0:	b29b      	uxth	r3, r3
 801a9e2:	3b01      	subs	r3, #1
 801a9e4:	b29a      	uxth	r2, r3
 801a9e6:	68fb      	ldr	r3, [r7, #12]
 801a9e8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a9ea:	2300      	movs	r3, #0
 801a9ec:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a9ee:	68fb      	ldr	r3, [r7, #12]
 801a9f0:	681b      	ldr	r3, [r3, #0]
 801a9f2:	689b      	ldr	r3, [r3, #8]
 801a9f4:	f003 0301 	and.w	r3, r3, #1
 801a9f8:	2b01      	cmp	r3, #1
 801a9fa:	d11c      	bne.n	801aa36 <HAL_SPI_TransmitReceive+0x1f2>
 801a9fc:	68fb      	ldr	r3, [r7, #12]
 801a9fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aa02:	b29b      	uxth	r3, r3
 801aa04:	2b00      	cmp	r3, #0
 801aa06:	d016      	beq.n	801aa36 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801aa08:	68fb      	ldr	r3, [r7, #12]
 801aa0a:	681b      	ldr	r3, [r3, #0]
 801aa0c:	68da      	ldr	r2, [r3, #12]
 801aa0e:	68fb      	ldr	r3, [r7, #12]
 801aa10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa12:	b292      	uxth	r2, r2
 801aa14:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801aa16:	68fb      	ldr	r3, [r7, #12]
 801aa18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801aa1a:	1c9a      	adds	r2, r3, #2
 801aa1c:	68fb      	ldr	r3, [r7, #12]
 801aa1e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801aa20:	68fb      	ldr	r3, [r7, #12]
 801aa22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aa26:	b29b      	uxth	r3, r3
 801aa28:	3b01      	subs	r3, #1
 801aa2a:	b29a      	uxth	r2, r3
 801aa2c:	68fb      	ldr	r3, [r7, #12]
 801aa2e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801aa32:	2301      	movs	r3, #1
 801aa34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801aa36:	f7fa fef5 	bl	8015824 <HAL_GetTick>
 801aa3a:	4602      	mov	r2, r0
 801aa3c:	69fb      	ldr	r3, [r7, #28]
 801aa3e:	1ad3      	subs	r3, r2, r3
 801aa40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aa42:	429a      	cmp	r2, r3
 801aa44:	d807      	bhi.n	801aa56 <HAL_SPI_TransmitReceive+0x212>
 801aa46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801aa48:	f1b3 3fff 	cmp.w	r3, #4294967295
 801aa4c:	d003      	beq.n	801aa56 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801aa4e:	2303      	movs	r3, #3
 801aa50:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801aa54:	e0fb      	b.n	801ac4e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aa56:	68fb      	ldr	r3, [r7, #12]
 801aa58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aa5a:	b29b      	uxth	r3, r3
 801aa5c:	2b00      	cmp	r3, #0
 801aa5e:	d1a3      	bne.n	801a9a8 <HAL_SPI_TransmitReceive+0x164>
 801aa60:	68fb      	ldr	r3, [r7, #12]
 801aa62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aa66:	b29b      	uxth	r3, r3
 801aa68:	2b00      	cmp	r3, #0
 801aa6a:	d19d      	bne.n	801a9a8 <HAL_SPI_TransmitReceive+0x164>
 801aa6c:	e0df      	b.n	801ac2e <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801aa6e:	68fb      	ldr	r3, [r7, #12]
 801aa70:	685b      	ldr	r3, [r3, #4]
 801aa72:	2b00      	cmp	r3, #0
 801aa74:	d003      	beq.n	801aa7e <HAL_SPI_TransmitReceive+0x23a>
 801aa76:	8a7b      	ldrh	r3, [r7, #18]
 801aa78:	2b01      	cmp	r3, #1
 801aa7a:	f040 80cb 	bne.w	801ac14 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aa82:	b29b      	uxth	r3, r3
 801aa84:	2b01      	cmp	r3, #1
 801aa86:	d912      	bls.n	801aaae <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aa88:	68fb      	ldr	r3, [r7, #12]
 801aa8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa8c:	881a      	ldrh	r2, [r3, #0]
 801aa8e:	68fb      	ldr	r3, [r7, #12]
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801aa94:	68fb      	ldr	r3, [r7, #12]
 801aa96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aa98:	1c9a      	adds	r2, r3, #2
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801aa9e:	68fb      	ldr	r3, [r7, #12]
 801aaa0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aaa2:	b29b      	uxth	r3, r3
 801aaa4:	3b02      	subs	r3, #2
 801aaa6:	b29a      	uxth	r2, r3
 801aaa8:	68fb      	ldr	r3, [r7, #12]
 801aaaa:	87da      	strh	r2, [r3, #62]	; 0x3e
 801aaac:	e0b2      	b.n	801ac14 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801aaae:	68fb      	ldr	r3, [r7, #12]
 801aab0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801aab2:	68fb      	ldr	r3, [r7, #12]
 801aab4:	681b      	ldr	r3, [r3, #0]
 801aab6:	330c      	adds	r3, #12
 801aab8:	7812      	ldrb	r2, [r2, #0]
 801aaba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801aabc:	68fb      	ldr	r3, [r7, #12]
 801aabe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801aac0:	1c5a      	adds	r2, r3, #1
 801aac2:	68fb      	ldr	r3, [r7, #12]
 801aac4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801aac6:	68fb      	ldr	r3, [r7, #12]
 801aac8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aaca:	b29b      	uxth	r3, r3
 801aacc:	3b01      	subs	r3, #1
 801aace:	b29a      	uxth	r2, r3
 801aad0:	68fb      	ldr	r3, [r7, #12]
 801aad2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801aad4:	e09e      	b.n	801ac14 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801aad6:	68fb      	ldr	r3, [r7, #12]
 801aad8:	681b      	ldr	r3, [r3, #0]
 801aada:	689b      	ldr	r3, [r3, #8]
 801aadc:	f003 0302 	and.w	r3, r3, #2
 801aae0:	2b02      	cmp	r3, #2
 801aae2:	d134      	bne.n	801ab4e <HAL_SPI_TransmitReceive+0x30a>
 801aae4:	68fb      	ldr	r3, [r7, #12]
 801aae6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aae8:	b29b      	uxth	r3, r3
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d02f      	beq.n	801ab4e <HAL_SPI_TransmitReceive+0x30a>
 801aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801aaf0:	2b01      	cmp	r3, #1
 801aaf2:	d12c      	bne.n	801ab4e <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801aaf4:	68fb      	ldr	r3, [r7, #12]
 801aaf6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801aaf8:	b29b      	uxth	r3, r3
 801aafa:	2b01      	cmp	r3, #1
 801aafc:	d912      	bls.n	801ab24 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801aafe:	68fb      	ldr	r3, [r7, #12]
 801ab00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab02:	881a      	ldrh	r2, [r3, #0]
 801ab04:	68fb      	ldr	r3, [r7, #12]
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801ab0a:	68fb      	ldr	r3, [r7, #12]
 801ab0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab0e:	1c9a      	adds	r2, r3, #2
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801ab14:	68fb      	ldr	r3, [r7, #12]
 801ab16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ab18:	b29b      	uxth	r3, r3
 801ab1a:	3b02      	subs	r3, #2
 801ab1c:	b29a      	uxth	r2, r3
 801ab1e:	68fb      	ldr	r3, [r7, #12]
 801ab20:	87da      	strh	r2, [r3, #62]	; 0x3e
 801ab22:	e012      	b.n	801ab4a <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	330c      	adds	r3, #12
 801ab2e:	7812      	ldrb	r2, [r2, #0]
 801ab30:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801ab32:	68fb      	ldr	r3, [r7, #12]
 801ab34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801ab36:	1c5a      	adds	r2, r3, #1
 801ab38:	68fb      	ldr	r3, [r7, #12]
 801ab3a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801ab3c:	68fb      	ldr	r3, [r7, #12]
 801ab3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ab40:	b29b      	uxth	r3, r3
 801ab42:	3b01      	subs	r3, #1
 801ab44:	b29a      	uxth	r2, r3
 801ab46:	68fb      	ldr	r3, [r7, #12]
 801ab48:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801ab4a:	2300      	movs	r3, #0
 801ab4c:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	681b      	ldr	r3, [r3, #0]
 801ab52:	689b      	ldr	r3, [r3, #8]
 801ab54:	f003 0301 	and.w	r3, r3, #1
 801ab58:	2b01      	cmp	r3, #1
 801ab5a:	d148      	bne.n	801abee <HAL_SPI_TransmitReceive+0x3aa>
 801ab5c:	68fb      	ldr	r3, [r7, #12]
 801ab5e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ab62:	b29b      	uxth	r3, r3
 801ab64:	2b00      	cmp	r3, #0
 801ab66:	d042      	beq.n	801abee <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801ab68:	68fb      	ldr	r3, [r7, #12]
 801ab6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ab6e:	b29b      	uxth	r3, r3
 801ab70:	2b01      	cmp	r3, #1
 801ab72:	d923      	bls.n	801abbc <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801ab74:	68fb      	ldr	r3, [r7, #12]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	68da      	ldr	r2, [r3, #12]
 801ab7a:	68fb      	ldr	r3, [r7, #12]
 801ab7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab7e:	b292      	uxth	r2, r2
 801ab80:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ab82:	68fb      	ldr	r3, [r7, #12]
 801ab84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801ab86:	1c9a      	adds	r2, r3, #2
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801ab8c:	68fb      	ldr	r3, [r7, #12]
 801ab8e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ab92:	b29b      	uxth	r3, r3
 801ab94:	3b02      	subs	r3, #2
 801ab96:	b29a      	uxth	r2, r3
 801ab98:	68fb      	ldr	r3, [r7, #12]
 801ab9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801ab9e:	68fb      	ldr	r3, [r7, #12]
 801aba0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801aba4:	b29b      	uxth	r3, r3
 801aba6:	2b01      	cmp	r3, #1
 801aba8:	d81f      	bhi.n	801abea <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801abaa:	68fb      	ldr	r3, [r7, #12]
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	685a      	ldr	r2, [r3, #4]
 801abb0:	68fb      	ldr	r3, [r7, #12]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801abb8:	605a      	str	r2, [r3, #4]
 801abba:	e016      	b.n	801abea <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801abbc:	68fb      	ldr	r3, [r7, #12]
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	f103 020c 	add.w	r2, r3, #12
 801abc4:	68fb      	ldr	r3, [r7, #12]
 801abc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abc8:	7812      	ldrb	r2, [r2, #0]
 801abca:	b2d2      	uxtb	r2, r2
 801abcc:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801abd2:	1c5a      	adds	r2, r3, #1
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801abde:	b29b      	uxth	r3, r3
 801abe0:	3b01      	subs	r3, #1
 801abe2:	b29a      	uxth	r2, r3
 801abe4:	68fb      	ldr	r3, [r7, #12]
 801abe6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801abea:	2301      	movs	r3, #1
 801abec:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801abee:	f7fa fe19 	bl	8015824 <HAL_GetTick>
 801abf2:	4602      	mov	r2, r0
 801abf4:	69fb      	ldr	r3, [r7, #28]
 801abf6:	1ad3      	subs	r3, r2, r3
 801abf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801abfa:	429a      	cmp	r2, r3
 801abfc:	d803      	bhi.n	801ac06 <HAL_SPI_TransmitReceive+0x3c2>
 801abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac00:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ac04:	d102      	bne.n	801ac0c <HAL_SPI_TransmitReceive+0x3c8>
 801ac06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ac08:	2b00      	cmp	r3, #0
 801ac0a:	d103      	bne.n	801ac14 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801ac0c:	2303      	movs	r3, #3
 801ac0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801ac12:	e01c      	b.n	801ac4e <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801ac14:	68fb      	ldr	r3, [r7, #12]
 801ac16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801ac18:	b29b      	uxth	r3, r3
 801ac1a:	2b00      	cmp	r3, #0
 801ac1c:	f47f af5b 	bne.w	801aad6 <HAL_SPI_TransmitReceive+0x292>
 801ac20:	68fb      	ldr	r3, [r7, #12]
 801ac22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801ac26:	b29b      	uxth	r3, r3
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	f47f af54 	bne.w	801aad6 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801ac2e:	69fa      	ldr	r2, [r7, #28]
 801ac30:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801ac32:	68f8      	ldr	r0, [r7, #12]
 801ac34:	f000 f9b4 	bl	801afa0 <SPI_EndRxTxTransaction>
 801ac38:	4603      	mov	r3, r0
 801ac3a:	2b00      	cmp	r3, #0
 801ac3c:	d006      	beq.n	801ac4c <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801ac3e:	2301      	movs	r3, #1
 801ac40:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801ac44:	68fb      	ldr	r3, [r7, #12]
 801ac46:	2220      	movs	r2, #32
 801ac48:	661a      	str	r2, [r3, #96]	; 0x60
 801ac4a:	e000      	b.n	801ac4e <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801ac4c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801ac4e:	68fb      	ldr	r3, [r7, #12]
 801ac50:	2201      	movs	r2, #1
 801ac52:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801ac56:	68fb      	ldr	r3, [r7, #12]
 801ac58:	2200      	movs	r2, #0
 801ac5a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801ac5e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801ac62:	4618      	mov	r0, r3
 801ac64:	3728      	adds	r7, #40	; 0x28
 801ac66:	46bd      	mov	sp, r7
 801ac68:	bd80      	pop	{r7, pc}
	...

0801ac6c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ac6c:	b580      	push	{r7, lr}
 801ac6e:	b088      	sub	sp, #32
 801ac70:	af00      	add	r7, sp, #0
 801ac72:	60f8      	str	r0, [r7, #12]
 801ac74:	60b9      	str	r1, [r7, #8]
 801ac76:	603b      	str	r3, [r7, #0]
 801ac78:	4613      	mov	r3, r2
 801ac7a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801ac7c:	f7fa fdd2 	bl	8015824 <HAL_GetTick>
 801ac80:	4602      	mov	r2, r0
 801ac82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ac84:	1a9b      	subs	r3, r3, r2
 801ac86:	683a      	ldr	r2, [r7, #0]
 801ac88:	4413      	add	r3, r2
 801ac8a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801ac8c:	f7fa fdca 	bl	8015824 <HAL_GetTick>
 801ac90:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801ac92:	4b39      	ldr	r3, [pc, #228]	; (801ad78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801ac94:	681b      	ldr	r3, [r3, #0]
 801ac96:	015b      	lsls	r3, r3, #5
 801ac98:	0d1b      	lsrs	r3, r3, #20
 801ac9a:	69fa      	ldr	r2, [r7, #28]
 801ac9c:	fb02 f303 	mul.w	r3, r2, r3
 801aca0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801aca2:	e054      	b.n	801ad4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801aca4:	683b      	ldr	r3, [r7, #0]
 801aca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801acaa:	d050      	beq.n	801ad4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801acac:	f7fa fdba 	bl	8015824 <HAL_GetTick>
 801acb0:	4602      	mov	r2, r0
 801acb2:	69bb      	ldr	r3, [r7, #24]
 801acb4:	1ad3      	subs	r3, r2, r3
 801acb6:	69fa      	ldr	r2, [r7, #28]
 801acb8:	429a      	cmp	r2, r3
 801acba:	d902      	bls.n	801acc2 <SPI_WaitFlagStateUntilTimeout+0x56>
 801acbc:	69fb      	ldr	r3, [r7, #28]
 801acbe:	2b00      	cmp	r3, #0
 801acc0:	d13d      	bne.n	801ad3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801acc2:	68fb      	ldr	r3, [r7, #12]
 801acc4:	681b      	ldr	r3, [r3, #0]
 801acc6:	685a      	ldr	r2, [r3, #4]
 801acc8:	68fb      	ldr	r3, [r7, #12]
 801acca:	681b      	ldr	r3, [r3, #0]
 801accc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801acd0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801acd2:	68fb      	ldr	r3, [r7, #12]
 801acd4:	685b      	ldr	r3, [r3, #4]
 801acd6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801acda:	d111      	bne.n	801ad00 <SPI_WaitFlagStateUntilTimeout+0x94>
 801acdc:	68fb      	ldr	r3, [r7, #12]
 801acde:	689b      	ldr	r3, [r3, #8]
 801ace0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ace4:	d004      	beq.n	801acf0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ace6:	68fb      	ldr	r3, [r7, #12]
 801ace8:	689b      	ldr	r3, [r3, #8]
 801acea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801acee:	d107      	bne.n	801ad00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801acf0:	68fb      	ldr	r3, [r7, #12]
 801acf2:	681b      	ldr	r3, [r3, #0]
 801acf4:	681a      	ldr	r2, [r3, #0]
 801acf6:	68fb      	ldr	r3, [r7, #12]
 801acf8:	681b      	ldr	r3, [r3, #0]
 801acfa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801acfe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ad00:	68fb      	ldr	r3, [r7, #12]
 801ad02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ad04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ad08:	d10f      	bne.n	801ad2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801ad0a:	68fb      	ldr	r3, [r7, #12]
 801ad0c:	681b      	ldr	r3, [r3, #0]
 801ad0e:	681a      	ldr	r2, [r3, #0]
 801ad10:	68fb      	ldr	r3, [r7, #12]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ad18:	601a      	str	r2, [r3, #0]
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	681b      	ldr	r3, [r3, #0]
 801ad1e:	681a      	ldr	r2, [r3, #0]
 801ad20:	68fb      	ldr	r3, [r7, #12]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ad28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ad2a:	68fb      	ldr	r3, [r7, #12]
 801ad2c:	2201      	movs	r2, #1
 801ad2e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ad32:	68fb      	ldr	r3, [r7, #12]
 801ad34:	2200      	movs	r2, #0
 801ad36:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ad3a:	2303      	movs	r3, #3
 801ad3c:	e017      	b.n	801ad6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ad3e:	697b      	ldr	r3, [r7, #20]
 801ad40:	2b00      	cmp	r3, #0
 801ad42:	d101      	bne.n	801ad48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801ad44:	2300      	movs	r3, #0
 801ad46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801ad48:	697b      	ldr	r3, [r7, #20]
 801ad4a:	3b01      	subs	r3, #1
 801ad4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801ad4e:	68fb      	ldr	r3, [r7, #12]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	689a      	ldr	r2, [r3, #8]
 801ad54:	68bb      	ldr	r3, [r7, #8]
 801ad56:	4013      	ands	r3, r2
 801ad58:	68ba      	ldr	r2, [r7, #8]
 801ad5a:	429a      	cmp	r2, r3
 801ad5c:	bf0c      	ite	eq
 801ad5e:	2301      	moveq	r3, #1
 801ad60:	2300      	movne	r3, #0
 801ad62:	b2db      	uxtb	r3, r3
 801ad64:	461a      	mov	r2, r3
 801ad66:	79fb      	ldrb	r3, [r7, #7]
 801ad68:	429a      	cmp	r2, r3
 801ad6a:	d19b      	bne.n	801aca4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801ad6c:	2300      	movs	r3, #0
}
 801ad6e:	4618      	mov	r0, r3
 801ad70:	3720      	adds	r7, #32
 801ad72:	46bd      	mov	sp, r7
 801ad74:	bd80      	pop	{r7, pc}
 801ad76:	bf00      	nop
 801ad78:	2000011c 	.word	0x2000011c

0801ad7c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801ad7c:	b580      	push	{r7, lr}
 801ad7e:	b08a      	sub	sp, #40	; 0x28
 801ad80:	af00      	add	r7, sp, #0
 801ad82:	60f8      	str	r0, [r7, #12]
 801ad84:	60b9      	str	r1, [r7, #8]
 801ad86:	607a      	str	r2, [r7, #4]
 801ad88:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801ad8a:	2300      	movs	r3, #0
 801ad8c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801ad8e:	f7fa fd49 	bl	8015824 <HAL_GetTick>
 801ad92:	4602      	mov	r2, r0
 801ad94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ad96:	1a9b      	subs	r3, r3, r2
 801ad98:	683a      	ldr	r2, [r7, #0]
 801ad9a:	4413      	add	r3, r2
 801ad9c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801ad9e:	f7fa fd41 	bl	8015824 <HAL_GetTick>
 801ada2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801ada4:	68fb      	ldr	r3, [r7, #12]
 801ada6:	681b      	ldr	r3, [r3, #0]
 801ada8:	330c      	adds	r3, #12
 801adaa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801adac:	4b3d      	ldr	r3, [pc, #244]	; (801aea4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801adae:	681a      	ldr	r2, [r3, #0]
 801adb0:	4613      	mov	r3, r2
 801adb2:	009b      	lsls	r3, r3, #2
 801adb4:	4413      	add	r3, r2
 801adb6:	00da      	lsls	r2, r3, #3
 801adb8:	1ad3      	subs	r3, r2, r3
 801adba:	0d1b      	lsrs	r3, r3, #20
 801adbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adbe:	fb02 f303 	mul.w	r3, r2, r3
 801adc2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801adc4:	e060      	b.n	801ae88 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801adc6:	68bb      	ldr	r3, [r7, #8]
 801adc8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801adcc:	d107      	bne.n	801adde <SPI_WaitFifoStateUntilTimeout+0x62>
 801adce:	687b      	ldr	r3, [r7, #4]
 801add0:	2b00      	cmp	r3, #0
 801add2:	d104      	bne.n	801adde <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801add4:	69fb      	ldr	r3, [r7, #28]
 801add6:	781b      	ldrb	r3, [r3, #0]
 801add8:	b2db      	uxtb	r3, r3
 801adda:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801addc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801adde:	683b      	ldr	r3, [r7, #0]
 801ade0:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ade4:	d050      	beq.n	801ae88 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801ade6:	f7fa fd1d 	bl	8015824 <HAL_GetTick>
 801adea:	4602      	mov	r2, r0
 801adec:	6a3b      	ldr	r3, [r7, #32]
 801adee:	1ad3      	subs	r3, r2, r3
 801adf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801adf2:	429a      	cmp	r2, r3
 801adf4:	d902      	bls.n	801adfc <SPI_WaitFifoStateUntilTimeout+0x80>
 801adf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d13d      	bne.n	801ae78 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801adfc:	68fb      	ldr	r3, [r7, #12]
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	685a      	ldr	r2, [r3, #4]
 801ae02:	68fb      	ldr	r3, [r7, #12]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801ae0a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801ae0c:	68fb      	ldr	r3, [r7, #12]
 801ae0e:	685b      	ldr	r3, [r3, #4]
 801ae10:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801ae14:	d111      	bne.n	801ae3a <SPI_WaitFifoStateUntilTimeout+0xbe>
 801ae16:	68fb      	ldr	r3, [r7, #12]
 801ae18:	689b      	ldr	r3, [r3, #8]
 801ae1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801ae1e:	d004      	beq.n	801ae2a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801ae20:	68fb      	ldr	r3, [r7, #12]
 801ae22:	689b      	ldr	r3, [r3, #8]
 801ae24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801ae28:	d107      	bne.n	801ae3a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801ae2a:	68fb      	ldr	r3, [r7, #12]
 801ae2c:	681b      	ldr	r3, [r3, #0]
 801ae2e:	681a      	ldr	r2, [r3, #0]
 801ae30:	68fb      	ldr	r3, [r7, #12]
 801ae32:	681b      	ldr	r3, [r3, #0]
 801ae34:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801ae38:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801ae3a:	68fb      	ldr	r3, [r7, #12]
 801ae3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ae3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801ae42:	d10f      	bne.n	801ae64 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801ae44:	68fb      	ldr	r3, [r7, #12]
 801ae46:	681b      	ldr	r3, [r3, #0]
 801ae48:	681a      	ldr	r2, [r3, #0]
 801ae4a:	68fb      	ldr	r3, [r7, #12]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801ae52:	601a      	str	r2, [r3, #0]
 801ae54:	68fb      	ldr	r3, [r7, #12]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	681a      	ldr	r2, [r3, #0]
 801ae5a:	68fb      	ldr	r3, [r7, #12]
 801ae5c:	681b      	ldr	r3, [r3, #0]
 801ae5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801ae62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	2201      	movs	r2, #1
 801ae68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	2200      	movs	r2, #0
 801ae70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801ae74:	2303      	movs	r3, #3
 801ae76:	e010      	b.n	801ae9a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801ae78:	69bb      	ldr	r3, [r7, #24]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d101      	bne.n	801ae82 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801ae7e:	2300      	movs	r3, #0
 801ae80:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801ae82:	69bb      	ldr	r3, [r7, #24]
 801ae84:	3b01      	subs	r3, #1
 801ae86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801ae88:	68fb      	ldr	r3, [r7, #12]
 801ae8a:	681b      	ldr	r3, [r3, #0]
 801ae8c:	689a      	ldr	r2, [r3, #8]
 801ae8e:	68bb      	ldr	r3, [r7, #8]
 801ae90:	4013      	ands	r3, r2
 801ae92:	687a      	ldr	r2, [r7, #4]
 801ae94:	429a      	cmp	r2, r3
 801ae96:	d196      	bne.n	801adc6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801ae98:	2300      	movs	r3, #0
}
 801ae9a:	4618      	mov	r0, r3
 801ae9c:	3728      	adds	r7, #40	; 0x28
 801ae9e:	46bd      	mov	sp, r7
 801aea0:	bd80      	pop	{r7, pc}
 801aea2:	bf00      	nop
 801aea4:	2000011c 	.word	0x2000011c

0801aea8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801aea8:	b580      	push	{r7, lr}
 801aeaa:	b088      	sub	sp, #32
 801aeac:	af02      	add	r7, sp, #8
 801aeae:	60f8      	str	r0, [r7, #12]
 801aeb0:	60b9      	str	r1, [r7, #8]
 801aeb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801aeb4:	68fb      	ldr	r3, [r7, #12]
 801aeb6:	685b      	ldr	r3, [r3, #4]
 801aeb8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aebc:	d111      	bne.n	801aee2 <SPI_EndRxTransaction+0x3a>
 801aebe:	68fb      	ldr	r3, [r7, #12]
 801aec0:	689b      	ldr	r3, [r3, #8]
 801aec2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801aec6:	d004      	beq.n	801aed2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801aec8:	68fb      	ldr	r3, [r7, #12]
 801aeca:	689b      	ldr	r3, [r3, #8]
 801aecc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801aed0:	d107      	bne.n	801aee2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801aed2:	68fb      	ldr	r3, [r7, #12]
 801aed4:	681b      	ldr	r3, [r3, #0]
 801aed6:	681a      	ldr	r2, [r3, #0]
 801aed8:	68fb      	ldr	r3, [r7, #12]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801aee0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	685b      	ldr	r3, [r3, #4]
 801aee6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aeea:	d112      	bne.n	801af12 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	9300      	str	r3, [sp, #0]
 801aef0:	68bb      	ldr	r3, [r7, #8]
 801aef2:	2200      	movs	r2, #0
 801aef4:	2180      	movs	r1, #128	; 0x80
 801aef6:	68f8      	ldr	r0, [r7, #12]
 801aef8:	f7ff feb8 	bl	801ac6c <SPI_WaitFlagStateUntilTimeout>
 801aefc:	4603      	mov	r3, r0
 801aefe:	2b00      	cmp	r3, #0
 801af00:	d021      	beq.n	801af46 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801af02:	68fb      	ldr	r3, [r7, #12]
 801af04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801af06:	f043 0220 	orr.w	r2, r3, #32
 801af0a:	68fb      	ldr	r3, [r7, #12]
 801af0c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801af0e:	2303      	movs	r3, #3
 801af10:	e03d      	b.n	801af8e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801af12:	4b21      	ldr	r3, [pc, #132]	; (801af98 <SPI_EndRxTransaction+0xf0>)
 801af14:	681b      	ldr	r3, [r3, #0]
 801af16:	4a21      	ldr	r2, [pc, #132]	; (801af9c <SPI_EndRxTransaction+0xf4>)
 801af18:	fba2 2303 	umull	r2, r3, r2, r3
 801af1c:	0d5b      	lsrs	r3, r3, #21
 801af1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801af22:	fb02 f303 	mul.w	r3, r2, r3
 801af26:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801af28:	697b      	ldr	r3, [r7, #20]
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	d00a      	beq.n	801af44 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801af2e:	697b      	ldr	r3, [r7, #20]
 801af30:	3b01      	subs	r3, #1
 801af32:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801af34:	68fb      	ldr	r3, [r7, #12]
 801af36:	681b      	ldr	r3, [r3, #0]
 801af38:	689b      	ldr	r3, [r3, #8]
 801af3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801af3e:	2b80      	cmp	r3, #128	; 0x80
 801af40:	d0f2      	beq.n	801af28 <SPI_EndRxTransaction+0x80>
 801af42:	e000      	b.n	801af46 <SPI_EndRxTransaction+0x9e>
        break;
 801af44:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801af46:	68fb      	ldr	r3, [r7, #12]
 801af48:	685b      	ldr	r3, [r3, #4]
 801af4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801af4e:	d11d      	bne.n	801af8c <SPI_EndRxTransaction+0xe4>
 801af50:	68fb      	ldr	r3, [r7, #12]
 801af52:	689b      	ldr	r3, [r3, #8]
 801af54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801af58:	d004      	beq.n	801af64 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801af5a:	68fb      	ldr	r3, [r7, #12]
 801af5c:	689b      	ldr	r3, [r3, #8]
 801af5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801af62:	d113      	bne.n	801af8c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	9300      	str	r3, [sp, #0]
 801af68:	68bb      	ldr	r3, [r7, #8]
 801af6a:	2200      	movs	r2, #0
 801af6c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801af70:	68f8      	ldr	r0, [r7, #12]
 801af72:	f7ff ff03 	bl	801ad7c <SPI_WaitFifoStateUntilTimeout>
 801af76:	4603      	mov	r3, r0
 801af78:	2b00      	cmp	r3, #0
 801af7a:	d007      	beq.n	801af8c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801af7c:	68fb      	ldr	r3, [r7, #12]
 801af7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801af80:	f043 0220 	orr.w	r2, r3, #32
 801af84:	68fb      	ldr	r3, [r7, #12]
 801af86:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801af88:	2303      	movs	r3, #3
 801af8a:	e000      	b.n	801af8e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801af8c:	2300      	movs	r3, #0
}
 801af8e:	4618      	mov	r0, r3
 801af90:	3718      	adds	r7, #24
 801af92:	46bd      	mov	sp, r7
 801af94:	bd80      	pop	{r7, pc}
 801af96:	bf00      	nop
 801af98:	2000011c 	.word	0x2000011c
 801af9c:	165e9f81 	.word	0x165e9f81

0801afa0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b088      	sub	sp, #32
 801afa4:	af02      	add	r7, sp, #8
 801afa6:	60f8      	str	r0, [r7, #12]
 801afa8:	60b9      	str	r1, [r7, #8]
 801afaa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	9300      	str	r3, [sp, #0]
 801afb0:	68bb      	ldr	r3, [r7, #8]
 801afb2:	2200      	movs	r2, #0
 801afb4:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801afb8:	68f8      	ldr	r0, [r7, #12]
 801afba:	f7ff fedf 	bl	801ad7c <SPI_WaitFifoStateUntilTimeout>
 801afbe:	4603      	mov	r3, r0
 801afc0:	2b00      	cmp	r3, #0
 801afc2:	d007      	beq.n	801afd4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801afc4:	68fb      	ldr	r3, [r7, #12]
 801afc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801afc8:	f043 0220 	orr.w	r2, r3, #32
 801afcc:	68fb      	ldr	r3, [r7, #12]
 801afce:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801afd0:	2303      	movs	r3, #3
 801afd2:	e046      	b.n	801b062 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801afd4:	4b25      	ldr	r3, [pc, #148]	; (801b06c <SPI_EndRxTxTransaction+0xcc>)
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	4a25      	ldr	r2, [pc, #148]	; (801b070 <SPI_EndRxTxTransaction+0xd0>)
 801afda:	fba2 2303 	umull	r2, r3, r2, r3
 801afde:	0d5b      	lsrs	r3, r3, #21
 801afe0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801afe4:	fb02 f303 	mul.w	r3, r2, r3
 801afe8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	685b      	ldr	r3, [r3, #4]
 801afee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aff2:	d112      	bne.n	801b01a <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	9300      	str	r3, [sp, #0]
 801aff8:	68bb      	ldr	r3, [r7, #8]
 801affa:	2200      	movs	r2, #0
 801affc:	2180      	movs	r1, #128	; 0x80
 801affe:	68f8      	ldr	r0, [r7, #12]
 801b000:	f7ff fe34 	bl	801ac6c <SPI_WaitFlagStateUntilTimeout>
 801b004:	4603      	mov	r3, r0
 801b006:	2b00      	cmp	r3, #0
 801b008:	d016      	beq.n	801b038 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b00a:	68fb      	ldr	r3, [r7, #12]
 801b00c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b00e:	f043 0220 	orr.w	r2, r3, #32
 801b012:	68fb      	ldr	r3, [r7, #12]
 801b014:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801b016:	2303      	movs	r3, #3
 801b018:	e023      	b.n	801b062 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801b01a:	697b      	ldr	r3, [r7, #20]
 801b01c:	2b00      	cmp	r3, #0
 801b01e:	d00a      	beq.n	801b036 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801b020:	697b      	ldr	r3, [r7, #20]
 801b022:	3b01      	subs	r3, #1
 801b024:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801b026:	68fb      	ldr	r3, [r7, #12]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	689b      	ldr	r3, [r3, #8]
 801b02c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b030:	2b80      	cmp	r3, #128	; 0x80
 801b032:	d0f2      	beq.n	801b01a <SPI_EndRxTxTransaction+0x7a>
 801b034:	e000      	b.n	801b038 <SPI_EndRxTxTransaction+0x98>
        break;
 801b036:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801b038:	687b      	ldr	r3, [r7, #4]
 801b03a:	9300      	str	r3, [sp, #0]
 801b03c:	68bb      	ldr	r3, [r7, #8]
 801b03e:	2200      	movs	r2, #0
 801b040:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801b044:	68f8      	ldr	r0, [r7, #12]
 801b046:	f7ff fe99 	bl	801ad7c <SPI_WaitFifoStateUntilTimeout>
 801b04a:	4603      	mov	r3, r0
 801b04c:	2b00      	cmp	r3, #0
 801b04e:	d007      	beq.n	801b060 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801b050:	68fb      	ldr	r3, [r7, #12]
 801b052:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b054:	f043 0220 	orr.w	r2, r3, #32
 801b058:	68fb      	ldr	r3, [r7, #12]
 801b05a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801b05c:	2303      	movs	r3, #3
 801b05e:	e000      	b.n	801b062 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801b060:	2300      	movs	r3, #0
}
 801b062:	4618      	mov	r0, r3
 801b064:	3718      	adds	r7, #24
 801b066:	46bd      	mov	sp, r7
 801b068:	bd80      	pop	{r7, pc}
 801b06a:	bf00      	nop
 801b06c:	2000011c 	.word	0x2000011c
 801b070:	165e9f81 	.word	0x165e9f81

0801b074 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801b074:	b580      	push	{r7, lr}
 801b076:	b082      	sub	sp, #8
 801b078:	af00      	add	r7, sp, #0
 801b07a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801b07c:	687b      	ldr	r3, [r7, #4]
 801b07e:	681b      	ldr	r3, [r3, #0]
 801b080:	691b      	ldr	r3, [r3, #16]
 801b082:	f003 0302 	and.w	r3, r3, #2
 801b086:	2b02      	cmp	r3, #2
 801b088:	d128      	bne.n	801b0dc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801b08a:	687b      	ldr	r3, [r7, #4]
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	68db      	ldr	r3, [r3, #12]
 801b090:	f003 0302 	and.w	r3, r3, #2
 801b094:	2b02      	cmp	r3, #2
 801b096:	d121      	bne.n	801b0dc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	f06f 0202 	mvn.w	r2, #2
 801b0a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801b0a2:	687b      	ldr	r3, [r7, #4]
 801b0a4:	2201      	movs	r2, #1
 801b0a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801b0a8:	687b      	ldr	r3, [r7, #4]
 801b0aa:	681b      	ldr	r3, [r3, #0]
 801b0ac:	699b      	ldr	r3, [r3, #24]
 801b0ae:	f003 0303 	and.w	r3, r3, #3
 801b0b2:	2b00      	cmp	r3, #0
 801b0b4:	d005      	beq.n	801b0c2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801b0b6:	687b      	ldr	r3, [r7, #4]
 801b0b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b0bc:	6878      	ldr	r0, [r7, #4]
 801b0be:	4798      	blx	r3
 801b0c0:	e009      	b.n	801b0d6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b0c8:	6878      	ldr	r0, [r7, #4]
 801b0ca:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b0d2:	6878      	ldr	r0, [r7, #4]
 801b0d4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	2200      	movs	r2, #0
 801b0da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	681b      	ldr	r3, [r3, #0]
 801b0e0:	691b      	ldr	r3, [r3, #16]
 801b0e2:	f003 0304 	and.w	r3, r3, #4
 801b0e6:	2b04      	cmp	r3, #4
 801b0e8:	d128      	bne.n	801b13c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801b0ea:	687b      	ldr	r3, [r7, #4]
 801b0ec:	681b      	ldr	r3, [r3, #0]
 801b0ee:	68db      	ldr	r3, [r3, #12]
 801b0f0:	f003 0304 	and.w	r3, r3, #4
 801b0f4:	2b04      	cmp	r3, #4
 801b0f6:	d121      	bne.n	801b13c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	f06f 0204 	mvn.w	r2, #4
 801b100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801b102:	687b      	ldr	r3, [r7, #4]
 801b104:	2202      	movs	r2, #2
 801b106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801b108:	687b      	ldr	r3, [r7, #4]
 801b10a:	681b      	ldr	r3, [r3, #0]
 801b10c:	699b      	ldr	r3, [r3, #24]
 801b10e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b112:	2b00      	cmp	r3, #0
 801b114:	d005      	beq.n	801b122 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b11c:	6878      	ldr	r0, [r7, #4]
 801b11e:	4798      	blx	r3
 801b120:	e009      	b.n	801b136 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b122:	687b      	ldr	r3, [r7, #4]
 801b124:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b128:	6878      	ldr	r0, [r7, #4]
 801b12a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b12c:	687b      	ldr	r3, [r7, #4]
 801b12e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b132:	6878      	ldr	r0, [r7, #4]
 801b134:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b136:	687b      	ldr	r3, [r7, #4]
 801b138:	2200      	movs	r2, #0
 801b13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	691b      	ldr	r3, [r3, #16]
 801b142:	f003 0308 	and.w	r3, r3, #8
 801b146:	2b08      	cmp	r3, #8
 801b148:	d128      	bne.n	801b19c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801b14a:	687b      	ldr	r3, [r7, #4]
 801b14c:	681b      	ldr	r3, [r3, #0]
 801b14e:	68db      	ldr	r3, [r3, #12]
 801b150:	f003 0308 	and.w	r3, r3, #8
 801b154:	2b08      	cmp	r3, #8
 801b156:	d121      	bne.n	801b19c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801b158:	687b      	ldr	r3, [r7, #4]
 801b15a:	681b      	ldr	r3, [r3, #0]
 801b15c:	f06f 0208 	mvn.w	r2, #8
 801b160:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801b162:	687b      	ldr	r3, [r7, #4]
 801b164:	2204      	movs	r2, #4
 801b166:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801b168:	687b      	ldr	r3, [r7, #4]
 801b16a:	681b      	ldr	r3, [r3, #0]
 801b16c:	69db      	ldr	r3, [r3, #28]
 801b16e:	f003 0303 	and.w	r3, r3, #3
 801b172:	2b00      	cmp	r3, #0
 801b174:	d005      	beq.n	801b182 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b176:	687b      	ldr	r3, [r7, #4]
 801b178:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b17c:	6878      	ldr	r0, [r7, #4]
 801b17e:	4798      	blx	r3
 801b180:	e009      	b.n	801b196 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b188:	6878      	ldr	r0, [r7, #4]
 801b18a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b192:	6878      	ldr	r0, [r7, #4]
 801b194:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	2200      	movs	r2, #0
 801b19a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	691b      	ldr	r3, [r3, #16]
 801b1a2:	f003 0310 	and.w	r3, r3, #16
 801b1a6:	2b10      	cmp	r3, #16
 801b1a8:	d128      	bne.n	801b1fc <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801b1aa:	687b      	ldr	r3, [r7, #4]
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	68db      	ldr	r3, [r3, #12]
 801b1b0:	f003 0310 	and.w	r3, r3, #16
 801b1b4:	2b10      	cmp	r3, #16
 801b1b6:	d121      	bne.n	801b1fc <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	681b      	ldr	r3, [r3, #0]
 801b1bc:	f06f 0210 	mvn.w	r2, #16
 801b1c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801b1c2:	687b      	ldr	r3, [r7, #4]
 801b1c4:	2208      	movs	r2, #8
 801b1c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	681b      	ldr	r3, [r3, #0]
 801b1cc:	69db      	ldr	r3, [r3, #28]
 801b1ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b1d2:	2b00      	cmp	r3, #0
 801b1d4:	d005      	beq.n	801b1e2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801b1dc:	6878      	ldr	r0, [r7, #4]
 801b1de:	4798      	blx	r3
 801b1e0:	e009      	b.n	801b1f6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801b1e8:	6878      	ldr	r0, [r7, #4]
 801b1ea:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801b1ec:	687b      	ldr	r3, [r7, #4]
 801b1ee:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801b1f2:	6878      	ldr	r0, [r7, #4]
 801b1f4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	2200      	movs	r2, #0
 801b1fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	691b      	ldr	r3, [r3, #16]
 801b202:	f003 0301 	and.w	r3, r3, #1
 801b206:	2b01      	cmp	r3, #1
 801b208:	d110      	bne.n	801b22c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	68db      	ldr	r3, [r3, #12]
 801b210:	f003 0301 	and.w	r3, r3, #1
 801b214:	2b01      	cmp	r3, #1
 801b216:	d109      	bne.n	801b22c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801b218:	687b      	ldr	r3, [r7, #4]
 801b21a:	681b      	ldr	r3, [r3, #0]
 801b21c:	f06f 0201 	mvn.w	r2, #1
 801b220:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b228:	6878      	ldr	r0, [r7, #4]
 801b22a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801b22c:	687b      	ldr	r3, [r7, #4]
 801b22e:	681b      	ldr	r3, [r3, #0]
 801b230:	691b      	ldr	r3, [r3, #16]
 801b232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b236:	2b80      	cmp	r3, #128	; 0x80
 801b238:	d110      	bne.n	801b25c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b23a:	687b      	ldr	r3, [r7, #4]
 801b23c:	681b      	ldr	r3, [r3, #0]
 801b23e:	68db      	ldr	r3, [r3, #12]
 801b240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b244:	2b80      	cmp	r3, #128	; 0x80
 801b246:	d109      	bne.n	801b25c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801b250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801b258:	6878      	ldr	r0, [r7, #4]
 801b25a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	691b      	ldr	r3, [r3, #16]
 801b262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b266:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b26a:	d110      	bne.n	801b28e <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801b26c:	687b      	ldr	r3, [r7, #4]
 801b26e:	681b      	ldr	r3, [r3, #0]
 801b270:	68db      	ldr	r3, [r3, #12]
 801b272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b276:	2b80      	cmp	r3, #128	; 0x80
 801b278:	d109      	bne.n	801b28e <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801b282:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801b28a:	6878      	ldr	r0, [r7, #4]
 801b28c:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	691b      	ldr	r3, [r3, #16]
 801b294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b298:	2b40      	cmp	r3, #64	; 0x40
 801b29a:	d110      	bne.n	801b2be <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801b29c:	687b      	ldr	r3, [r7, #4]
 801b29e:	681b      	ldr	r3, [r3, #0]
 801b2a0:	68db      	ldr	r3, [r3, #12]
 801b2a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b2a6:	2b40      	cmp	r3, #64	; 0x40
 801b2a8:	d109      	bne.n	801b2be <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801b2aa:	687b      	ldr	r3, [r7, #4]
 801b2ac:	681b      	ldr	r3, [r3, #0]
 801b2ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801b2b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801b2b4:	687b      	ldr	r3, [r7, #4]
 801b2b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801b2ba:	6878      	ldr	r0, [r7, #4]
 801b2bc:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801b2be:	687b      	ldr	r3, [r7, #4]
 801b2c0:	681b      	ldr	r3, [r3, #0]
 801b2c2:	691b      	ldr	r3, [r3, #16]
 801b2c4:	f003 0320 	and.w	r3, r3, #32
 801b2c8:	2b20      	cmp	r3, #32
 801b2ca:	d110      	bne.n	801b2ee <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801b2cc:	687b      	ldr	r3, [r7, #4]
 801b2ce:	681b      	ldr	r3, [r3, #0]
 801b2d0:	68db      	ldr	r3, [r3, #12]
 801b2d2:	f003 0320 	and.w	r3, r3, #32
 801b2d6:	2b20      	cmp	r3, #32
 801b2d8:	d109      	bne.n	801b2ee <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801b2da:	687b      	ldr	r3, [r7, #4]
 801b2dc:	681b      	ldr	r3, [r3, #0]
 801b2de:	f06f 0220 	mvn.w	r2, #32
 801b2e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801b2e4:	687b      	ldr	r3, [r7, #4]
 801b2e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b2ea:	6878      	ldr	r0, [r7, #4]
 801b2ec:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801b2ee:	bf00      	nop
 801b2f0:	3708      	adds	r7, #8
 801b2f2:	46bd      	mov	sp, r7
 801b2f4:	bd80      	pop	{r7, pc}
	...

0801b2f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801b2f8:	b580      	push	{r7, lr}
 801b2fa:	b082      	sub	sp, #8
 801b2fc:	af00      	add	r7, sp, #0
 801b2fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	2b00      	cmp	r3, #0
 801b304:	d101      	bne.n	801b30a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801b306:	2301      	movs	r3, #1
 801b308:	e04e      	b.n	801b3a8 <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801b30a:	687b      	ldr	r3, [r7, #4]
 801b30c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d114      	bne.n	801b33c <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	2200      	movs	r2, #0
 801b316:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801b31a:	6878      	ldr	r0, [r7, #4]
 801b31c:	f000 fc1c 	bl	801bb58 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801b320:	687b      	ldr	r3, [r7, #4]
 801b322:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b326:	2b00      	cmp	r3, #0
 801b328:	d103      	bne.n	801b332 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801b32a:	687b      	ldr	r3, [r7, #4]
 801b32c:	4a20      	ldr	r2, [pc, #128]	; (801b3b0 <HAL_UART_Init+0xb8>)
 801b32e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801b338:	6878      	ldr	r0, [r7, #4]
 801b33a:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	2224      	movs	r2, #36	; 0x24
 801b340:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801b342:	687b      	ldr	r3, [r7, #4]
 801b344:	681b      	ldr	r3, [r3, #0]
 801b346:	681a      	ldr	r2, [r3, #0]
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	681b      	ldr	r3, [r3, #0]
 801b34c:	f022 0201 	bic.w	r2, r2, #1
 801b350:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801b352:	6878      	ldr	r0, [r7, #4]
 801b354:	f000 fc46 	bl	801bbe4 <UART_SetConfig>
 801b358:	4603      	mov	r3, r0
 801b35a:	2b01      	cmp	r3, #1
 801b35c:	d101      	bne.n	801b362 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801b35e:	2301      	movs	r3, #1
 801b360:	e022      	b.n	801b3a8 <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801b362:	687b      	ldr	r3, [r7, #4]
 801b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801b366:	2b00      	cmp	r3, #0
 801b368:	d002      	beq.n	801b370 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801b36a:	6878      	ldr	r0, [r7, #4]
 801b36c:	f000 fe9e 	bl	801c0ac <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801b370:	687b      	ldr	r3, [r7, #4]
 801b372:	681b      	ldr	r3, [r3, #0]
 801b374:	685a      	ldr	r2, [r3, #4]
 801b376:	687b      	ldr	r3, [r7, #4]
 801b378:	681b      	ldr	r3, [r3, #0]
 801b37a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801b37e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	681b      	ldr	r3, [r3, #0]
 801b384:	689a      	ldr	r2, [r3, #8]
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801b38e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	681b      	ldr	r3, [r3, #0]
 801b394:	681a      	ldr	r2, [r3, #0]
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	f042 0201 	orr.w	r2, r2, #1
 801b39e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801b3a0:	6878      	ldr	r0, [r7, #4]
 801b3a2:	f000 ff25 	bl	801c1f0 <UART_CheckIdleState>
 801b3a6:	4603      	mov	r3, r0
}
 801b3a8:	4618      	mov	r0, r3
 801b3aa:	3708      	adds	r7, #8
 801b3ac:	46bd      	mov	sp, r7
 801b3ae:	bd80      	pop	{r7, pc}
 801b3b0:	08014c1d 	.word	0x08014c1d

0801b3b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b08a      	sub	sp, #40	; 0x28
 801b3b8:	af02      	add	r7, sp, #8
 801b3ba:	60f8      	str	r0, [r7, #12]
 801b3bc:	60b9      	str	r1, [r7, #8]
 801b3be:	603b      	str	r3, [r7, #0]
 801b3c0:	4613      	mov	r3, r2
 801b3c2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801b3c4:	68fb      	ldr	r3, [r7, #12]
 801b3c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801b3c8:	2b20      	cmp	r3, #32
 801b3ca:	d171      	bne.n	801b4b0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801b3cc:	68bb      	ldr	r3, [r7, #8]
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d002      	beq.n	801b3d8 <HAL_UART_Transmit+0x24>
 801b3d2:	88fb      	ldrh	r3, [r7, #6]
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d101      	bne.n	801b3dc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801b3d8:	2301      	movs	r3, #1
 801b3da:	e06a      	b.n	801b4b2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b3dc:	68fb      	ldr	r3, [r7, #12]
 801b3de:	2200      	movs	r2, #0
 801b3e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801b3e4:	68fb      	ldr	r3, [r7, #12]
 801b3e6:	2221      	movs	r2, #33	; 0x21
 801b3e8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801b3ea:	f7fa fa1b 	bl	8015824 <HAL_GetTick>
 801b3ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	88fa      	ldrh	r2, [r7, #6]
 801b3f4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	88fa      	ldrh	r2, [r7, #6]
 801b3fc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801b400:	68fb      	ldr	r3, [r7, #12]
 801b402:	689b      	ldr	r3, [r3, #8]
 801b404:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b408:	d108      	bne.n	801b41c <HAL_UART_Transmit+0x68>
 801b40a:	68fb      	ldr	r3, [r7, #12]
 801b40c:	691b      	ldr	r3, [r3, #16]
 801b40e:	2b00      	cmp	r3, #0
 801b410:	d104      	bne.n	801b41c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801b412:	2300      	movs	r3, #0
 801b414:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801b416:	68bb      	ldr	r3, [r7, #8]
 801b418:	61bb      	str	r3, [r7, #24]
 801b41a:	e003      	b.n	801b424 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801b41c:	68bb      	ldr	r3, [r7, #8]
 801b41e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801b420:	2300      	movs	r3, #0
 801b422:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801b424:	e02c      	b.n	801b480 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801b426:	683b      	ldr	r3, [r7, #0]
 801b428:	9300      	str	r3, [sp, #0]
 801b42a:	697b      	ldr	r3, [r7, #20]
 801b42c:	2200      	movs	r2, #0
 801b42e:	2180      	movs	r1, #128	; 0x80
 801b430:	68f8      	ldr	r0, [r7, #12]
 801b432:	f000 ff2a 	bl	801c28a <UART_WaitOnFlagUntilTimeout>
 801b436:	4603      	mov	r3, r0
 801b438:	2b00      	cmp	r3, #0
 801b43a:	d001      	beq.n	801b440 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801b43c:	2303      	movs	r3, #3
 801b43e:	e038      	b.n	801b4b2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801b440:	69fb      	ldr	r3, [r7, #28]
 801b442:	2b00      	cmp	r3, #0
 801b444:	d10b      	bne.n	801b45e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801b446:	69bb      	ldr	r3, [r7, #24]
 801b448:	881b      	ldrh	r3, [r3, #0]
 801b44a:	461a      	mov	r2, r3
 801b44c:	68fb      	ldr	r3, [r7, #12]
 801b44e:	681b      	ldr	r3, [r3, #0]
 801b450:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801b454:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801b456:	69bb      	ldr	r3, [r7, #24]
 801b458:	3302      	adds	r3, #2
 801b45a:	61bb      	str	r3, [r7, #24]
 801b45c:	e007      	b.n	801b46e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801b45e:	69fb      	ldr	r3, [r7, #28]
 801b460:	781a      	ldrb	r2, [r3, #0]
 801b462:	68fb      	ldr	r3, [r7, #12]
 801b464:	681b      	ldr	r3, [r3, #0]
 801b466:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801b468:	69fb      	ldr	r3, [r7, #28]
 801b46a:	3301      	adds	r3, #1
 801b46c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801b46e:	68fb      	ldr	r3, [r7, #12]
 801b470:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b474:	b29b      	uxth	r3, r3
 801b476:	3b01      	subs	r3, #1
 801b478:	b29a      	uxth	r2, r3
 801b47a:	68fb      	ldr	r3, [r7, #12]
 801b47c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801b480:	68fb      	ldr	r3, [r7, #12]
 801b482:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801b486:	b29b      	uxth	r3, r3
 801b488:	2b00      	cmp	r3, #0
 801b48a:	d1cc      	bne.n	801b426 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801b48c:	683b      	ldr	r3, [r7, #0]
 801b48e:	9300      	str	r3, [sp, #0]
 801b490:	697b      	ldr	r3, [r7, #20]
 801b492:	2200      	movs	r2, #0
 801b494:	2140      	movs	r1, #64	; 0x40
 801b496:	68f8      	ldr	r0, [r7, #12]
 801b498:	f000 fef7 	bl	801c28a <UART_WaitOnFlagUntilTimeout>
 801b49c:	4603      	mov	r3, r0
 801b49e:	2b00      	cmp	r3, #0
 801b4a0:	d001      	beq.n	801b4a6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801b4a2:	2303      	movs	r3, #3
 801b4a4:	e005      	b.n	801b4b2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801b4a6:	68fb      	ldr	r3, [r7, #12]
 801b4a8:	2220      	movs	r2, #32
 801b4aa:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801b4ac:	2300      	movs	r3, #0
 801b4ae:	e000      	b.n	801b4b2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801b4b0:	2302      	movs	r3, #2
  }
}
 801b4b2:	4618      	mov	r0, r3
 801b4b4:	3720      	adds	r7, #32
 801b4b6:	46bd      	mov	sp, r7
 801b4b8:	bd80      	pop	{r7, pc}
	...

0801b4bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801b4bc:	b580      	push	{r7, lr}
 801b4be:	b0ba      	sub	sp, #232	; 0xe8
 801b4c0:	af00      	add	r7, sp, #0
 801b4c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801b4c4:	687b      	ldr	r3, [r7, #4]
 801b4c6:	681b      	ldr	r3, [r3, #0]
 801b4c8:	69db      	ldr	r3, [r3, #28]
 801b4ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801b4ce:	687b      	ldr	r3, [r7, #4]
 801b4d0:	681b      	ldr	r3, [r3, #0]
 801b4d2:	681b      	ldr	r3, [r3, #0]
 801b4d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801b4d8:	687b      	ldr	r3, [r7, #4]
 801b4da:	681b      	ldr	r3, [r3, #0]
 801b4dc:	689b      	ldr	r3, [r3, #8]
 801b4de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801b4e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b4e6:	f640 030f 	movw	r3, #2063	; 0x80f
 801b4ea:	4013      	ands	r3, r2
 801b4ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801b4f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b4f4:	2b00      	cmp	r3, #0
 801b4f6:	d115      	bne.n	801b524 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801b4f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4fc:	f003 0320 	and.w	r3, r3, #32
 801b500:	2b00      	cmp	r3, #0
 801b502:	d00f      	beq.n	801b524 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b508:	f003 0320 	and.w	r3, r3, #32
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d009      	beq.n	801b524 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801b510:	687b      	ldr	r3, [r7, #4]
 801b512:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b514:	2b00      	cmp	r3, #0
 801b516:	f000 82b8 	beq.w	801ba8a <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801b51a:	687b      	ldr	r3, [r7, #4]
 801b51c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b51e:	6878      	ldr	r0, [r7, #4]
 801b520:	4798      	blx	r3
      }
      return;
 801b522:	e2b2      	b.n	801ba8a <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801b524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801b528:	2b00      	cmp	r3, #0
 801b52a:	f000 811d 	beq.w	801b768 <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801b52e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b532:	f003 0301 	and.w	r3, r3, #1
 801b536:	2b00      	cmp	r3, #0
 801b538:	d106      	bne.n	801b548 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801b53a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b53e:	4b88      	ldr	r3, [pc, #544]	; (801b760 <HAL_UART_IRQHandler+0x2a4>)
 801b540:	4013      	ands	r3, r2
 801b542:	2b00      	cmp	r3, #0
 801b544:	f000 8110 	beq.w	801b768 <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801b548:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b54c:	f003 0301 	and.w	r3, r3, #1
 801b550:	2b00      	cmp	r3, #0
 801b552:	d011      	beq.n	801b578 <HAL_UART_IRQHandler+0xbc>
 801b554:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d00b      	beq.n	801b578 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801b560:	687b      	ldr	r3, [r7, #4]
 801b562:	681b      	ldr	r3, [r3, #0]
 801b564:	2201      	movs	r2, #1
 801b566:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801b568:	687b      	ldr	r3, [r7, #4]
 801b56a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b56e:	f043 0201 	orr.w	r2, r3, #1
 801b572:	687b      	ldr	r3, [r7, #4]
 801b574:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b57c:	f003 0302 	and.w	r3, r3, #2
 801b580:	2b00      	cmp	r3, #0
 801b582:	d011      	beq.n	801b5a8 <HAL_UART_IRQHandler+0xec>
 801b584:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b588:	f003 0301 	and.w	r3, r3, #1
 801b58c:	2b00      	cmp	r3, #0
 801b58e:	d00b      	beq.n	801b5a8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b590:	687b      	ldr	r3, [r7, #4]
 801b592:	681b      	ldr	r3, [r3, #0]
 801b594:	2202      	movs	r2, #2
 801b596:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b598:	687b      	ldr	r3, [r7, #4]
 801b59a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b59e:	f043 0204 	orr.w	r2, r3, #4
 801b5a2:	687b      	ldr	r3, [r7, #4]
 801b5a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b5a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b5ac:	f003 0304 	and.w	r3, r3, #4
 801b5b0:	2b00      	cmp	r3, #0
 801b5b2:	d011      	beq.n	801b5d8 <HAL_UART_IRQHandler+0x11c>
 801b5b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b5b8:	f003 0301 	and.w	r3, r3, #1
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d00b      	beq.n	801b5d8 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b5c0:	687b      	ldr	r3, [r7, #4]
 801b5c2:	681b      	ldr	r3, [r3, #0]
 801b5c4:	2204      	movs	r2, #4
 801b5c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b5c8:	687b      	ldr	r3, [r7, #4]
 801b5ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b5ce:	f043 0202 	orr.w	r2, r3, #2
 801b5d2:	687b      	ldr	r3, [r7, #4]
 801b5d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b5d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b5dc:	f003 0308 	and.w	r3, r3, #8
 801b5e0:	2b00      	cmp	r3, #0
 801b5e2:	d017      	beq.n	801b614 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b5e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b5e8:	f003 0320 	and.w	r3, r3, #32
 801b5ec:	2b00      	cmp	r3, #0
 801b5ee:	d105      	bne.n	801b5fc <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b5f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b5f4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d00b      	beq.n	801b614 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	681b      	ldr	r3, [r3, #0]
 801b600:	2208      	movs	r2, #8
 801b602:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b60a:	f043 0208 	orr.w	r2, r3, #8
 801b60e:	687b      	ldr	r3, [r7, #4]
 801b610:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b61c:	2b00      	cmp	r3, #0
 801b61e:	d012      	beq.n	801b646 <HAL_UART_IRQHandler+0x18a>
 801b620:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b628:	2b00      	cmp	r3, #0
 801b62a:	d00c      	beq.n	801b646 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b62c:	687b      	ldr	r3, [r7, #4]
 801b62e:	681b      	ldr	r3, [r3, #0]
 801b630:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b634:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b636:	687b      	ldr	r3, [r7, #4]
 801b638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b63c:	f043 0220 	orr.w	r2, r3, #32
 801b640:	687b      	ldr	r3, [r7, #4]
 801b642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b646:	687b      	ldr	r3, [r7, #4]
 801b648:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b64c:	2b00      	cmp	r3, #0
 801b64e:	f000 821e 	beq.w	801ba8e <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b656:	f003 0320 	and.w	r3, r3, #32
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	d00d      	beq.n	801b67a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b65e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b662:	f003 0320 	and.w	r3, r3, #32
 801b666:	2b00      	cmp	r3, #0
 801b668:	d007      	beq.n	801b67a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b66e:	2b00      	cmp	r3, #0
 801b670:	d003      	beq.n	801b67a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b672:	687b      	ldr	r3, [r7, #4]
 801b674:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b676:	6878      	ldr	r0, [r7, #4]
 801b678:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b67a:	687b      	ldr	r3, [r7, #4]
 801b67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b680:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b684:	687b      	ldr	r3, [r7, #4]
 801b686:	681b      	ldr	r3, [r3, #0]
 801b688:	689b      	ldr	r3, [r3, #8]
 801b68a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b68e:	2b40      	cmp	r3, #64	; 0x40
 801b690:	d005      	beq.n	801b69e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b696:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b69a:	2b00      	cmp	r3, #0
 801b69c:	d053      	beq.n	801b746 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b69e:	6878      	ldr	r0, [r7, #4]
 801b6a0:	f000 ff80 	bl	801c5a4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b6a4:	687b      	ldr	r3, [r7, #4]
 801b6a6:	681b      	ldr	r3, [r3, #0]
 801b6a8:	689b      	ldr	r3, [r3, #8]
 801b6aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b6ae:	2b40      	cmp	r3, #64	; 0x40
 801b6b0:	d143      	bne.n	801b73a <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b6b2:	687b      	ldr	r3, [r7, #4]
 801b6b4:	681b      	ldr	r3, [r3, #0]
 801b6b6:	3308      	adds	r3, #8
 801b6b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b6bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b6c0:	e853 3f00 	ldrex	r3, [r3]
 801b6c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b6c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b6cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b6d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	3308      	adds	r3, #8
 801b6da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b6de:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b6e2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b6e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b6ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b6ee:	e841 2300 	strex	r3, r2, [r1]
 801b6f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b6f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b6fa:	2b00      	cmp	r3, #0
 801b6fc:	d1d9      	bne.n	801b6b2 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b6fe:	687b      	ldr	r3, [r7, #4]
 801b700:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b702:	2b00      	cmp	r3, #0
 801b704:	d013      	beq.n	801b72e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b706:	687b      	ldr	r3, [r7, #4]
 801b708:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b70a:	4a16      	ldr	r2, [pc, #88]	; (801b764 <HAL_UART_IRQHandler+0x2a8>)
 801b70c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b70e:	687b      	ldr	r3, [r7, #4]
 801b710:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b712:	4618      	mov	r0, r3
 801b714:	f7fb f98a 	bl	8016a2c <HAL_DMA_Abort_IT>
 801b718:	4603      	mov	r3, r0
 801b71a:	2b00      	cmp	r3, #0
 801b71c:	d01d      	beq.n	801b75a <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b71e:	687b      	ldr	r3, [r7, #4]
 801b720:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b724:	687a      	ldr	r2, [r7, #4]
 801b726:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b728:	4610      	mov	r0, r2
 801b72a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b72c:	e015      	b.n	801b75a <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b72e:	687b      	ldr	r3, [r7, #4]
 801b730:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b734:	6878      	ldr	r0, [r7, #4]
 801b736:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b738:	e00f      	b.n	801b75a <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b73a:	687b      	ldr	r3, [r7, #4]
 801b73c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b740:	6878      	ldr	r0, [r7, #4]
 801b742:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b744:	e009      	b.n	801b75a <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b746:	687b      	ldr	r3, [r7, #4]
 801b748:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b74c:	6878      	ldr	r0, [r7, #4]
 801b74e:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b750:	687b      	ldr	r3, [r7, #4]
 801b752:	2200      	movs	r2, #0
 801b754:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801b758:	e199      	b.n	801ba8e <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b75a:	bf00      	nop
    return;
 801b75c:	e197      	b.n	801ba8e <HAL_UART_IRQHandler+0x5d2>
 801b75e:	bf00      	nop
 801b760:	04000120 	.word	0x04000120
 801b764:	0801c66d 	.word	0x0801c66d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b768:	687b      	ldr	r3, [r7, #4]
 801b76a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b76c:	2b01      	cmp	r3, #1
 801b76e:	f040 8150 	bne.w	801ba12 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b776:	f003 0310 	and.w	r3, r3, #16
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	f000 8149 	beq.w	801ba12 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b780:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b784:	f003 0310 	and.w	r3, r3, #16
 801b788:	2b00      	cmp	r3, #0
 801b78a:	f000 8142 	beq.w	801ba12 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b78e:	687b      	ldr	r3, [r7, #4]
 801b790:	681b      	ldr	r3, [r3, #0]
 801b792:	2210      	movs	r2, #16
 801b794:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b796:	687b      	ldr	r3, [r7, #4]
 801b798:	681b      	ldr	r3, [r3, #0]
 801b79a:	689b      	ldr	r3, [r3, #8]
 801b79c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b7a0:	2b40      	cmp	r3, #64	; 0x40
 801b7a2:	f040 80b8 	bne.w	801b916 <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b7aa:	681b      	ldr	r3, [r3, #0]
 801b7ac:	685b      	ldr	r3, [r3, #4]
 801b7ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b7b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b7b6:	2b00      	cmp	r3, #0
 801b7b8:	f000 816b 	beq.w	801ba92 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b7bc:	687b      	ldr	r3, [r7, #4]
 801b7be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801b7c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b7c6:	429a      	cmp	r2, r3
 801b7c8:	f080 8163 	bcs.w	801ba92 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b7cc:	687b      	ldr	r3, [r7, #4]
 801b7ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b7d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b7d6:	687b      	ldr	r3, [r7, #4]
 801b7d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b7da:	69db      	ldr	r3, [r3, #28]
 801b7dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b7e0:	f000 8086 	beq.w	801b8f0 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	681b      	ldr	r3, [r3, #0]
 801b7e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b7ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b7f0:	e853 3f00 	ldrex	r3, [r3]
 801b7f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b7f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b7fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b804:	687b      	ldr	r3, [r7, #4]
 801b806:	681b      	ldr	r3, [r3, #0]
 801b808:	461a      	mov	r2, r3
 801b80a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b80e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b812:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b816:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b81a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b81e:	e841 2300 	strex	r3, r2, [r1]
 801b822:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b826:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	d1da      	bne.n	801b7e4 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b82e:	687b      	ldr	r3, [r7, #4]
 801b830:	681b      	ldr	r3, [r3, #0]
 801b832:	3308      	adds	r3, #8
 801b834:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b836:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b838:	e853 3f00 	ldrex	r3, [r3]
 801b83c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b83e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b840:	f023 0301 	bic.w	r3, r3, #1
 801b844:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b848:	687b      	ldr	r3, [r7, #4]
 801b84a:	681b      	ldr	r3, [r3, #0]
 801b84c:	3308      	adds	r3, #8
 801b84e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b852:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b856:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b858:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b85a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b85e:	e841 2300 	strex	r3, r2, [r1]
 801b862:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b864:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b866:	2b00      	cmp	r3, #0
 801b868:	d1e1      	bne.n	801b82e <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b86a:	687b      	ldr	r3, [r7, #4]
 801b86c:	681b      	ldr	r3, [r3, #0]
 801b86e:	3308      	adds	r3, #8
 801b870:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b872:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b874:	e853 3f00 	ldrex	r3, [r3]
 801b878:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b87a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b87c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b880:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b884:	687b      	ldr	r3, [r7, #4]
 801b886:	681b      	ldr	r3, [r3, #0]
 801b888:	3308      	adds	r3, #8
 801b88a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b88e:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b890:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b892:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b894:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b896:	e841 2300 	strex	r3, r2, [r1]
 801b89a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b89c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b89e:	2b00      	cmp	r3, #0
 801b8a0:	d1e3      	bne.n	801b86a <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	2220      	movs	r2, #32
 801b8a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	2200      	movs	r2, #0
 801b8ae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b8b0:	687b      	ldr	r3, [r7, #4]
 801b8b2:	681b      	ldr	r3, [r3, #0]
 801b8b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b8b8:	e853 3f00 	ldrex	r3, [r3]
 801b8bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b8be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b8c0:	f023 0310 	bic.w	r3, r3, #16
 801b8c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	681b      	ldr	r3, [r3, #0]
 801b8cc:	461a      	mov	r2, r3
 801b8ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b8d2:	65bb      	str	r3, [r7, #88]	; 0x58
 801b8d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b8d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b8d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b8da:	e841 2300 	strex	r3, r2, [r1]
 801b8de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b8e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b8e2:	2b00      	cmp	r3, #0
 801b8e4:	d1e4      	bne.n	801b8b0 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b8e6:	687b      	ldr	r3, [r7, #4]
 801b8e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b8ea:	4618      	mov	r0, r3
 801b8ec:	f7fb f82e 	bl	801694c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b8f0:	687b      	ldr	r3, [r7, #4]
 801b8f2:	2202      	movs	r2, #2
 801b8f4:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b8f6:	687b      	ldr	r3, [r7, #4]
 801b8f8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b8fc:	687a      	ldr	r2, [r7, #4]
 801b8fe:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801b902:	687a      	ldr	r2, [r7, #4]
 801b904:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801b908:	b292      	uxth	r2, r2
 801b90a:	1a8a      	subs	r2, r1, r2
 801b90c:	b292      	uxth	r2, r2
 801b90e:	4611      	mov	r1, r2
 801b910:	6878      	ldr	r0, [r7, #4]
 801b912:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b914:	e0bd      	b.n	801ba92 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b916:	687b      	ldr	r3, [r7, #4]
 801b918:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801b91c:	687b      	ldr	r3, [r7, #4]
 801b91e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b922:	b29b      	uxth	r3, r3
 801b924:	1ad3      	subs	r3, r2, r3
 801b926:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b92a:	687b      	ldr	r3, [r7, #4]
 801b92c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b930:	b29b      	uxth	r3, r3
 801b932:	2b00      	cmp	r3, #0
 801b934:	f000 80af 	beq.w	801ba96 <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801b938:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b93c:	2b00      	cmp	r3, #0
 801b93e:	f000 80aa 	beq.w	801ba96 <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b94a:	e853 3f00 	ldrex	r3, [r3]
 801b94e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b952:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b956:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b95a:	687b      	ldr	r3, [r7, #4]
 801b95c:	681b      	ldr	r3, [r3, #0]
 801b95e:	461a      	mov	r2, r3
 801b960:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b964:	647b      	str	r3, [r7, #68]	; 0x44
 801b966:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b968:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b96a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b96c:	e841 2300 	strex	r3, r2, [r1]
 801b970:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b974:	2b00      	cmp	r3, #0
 801b976:	d1e4      	bne.n	801b942 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b978:	687b      	ldr	r3, [r7, #4]
 801b97a:	681b      	ldr	r3, [r3, #0]
 801b97c:	3308      	adds	r3, #8
 801b97e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b982:	e853 3f00 	ldrex	r3, [r3]
 801b986:	623b      	str	r3, [r7, #32]
   return(result);
 801b988:	6a3b      	ldr	r3, [r7, #32]
 801b98a:	f023 0301 	bic.w	r3, r3, #1
 801b98e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b992:	687b      	ldr	r3, [r7, #4]
 801b994:	681b      	ldr	r3, [r3, #0]
 801b996:	3308      	adds	r3, #8
 801b998:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b99c:	633a      	str	r2, [r7, #48]	; 0x30
 801b99e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b9a2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b9a4:	e841 2300 	strex	r3, r2, [r1]
 801b9a8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d1e3      	bne.n	801b978 <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b9b0:	687b      	ldr	r3, [r7, #4]
 801b9b2:	2220      	movs	r2, #32
 801b9b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b9b8:	687b      	ldr	r3, [r7, #4]
 801b9ba:	2200      	movs	r2, #0
 801b9bc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b9be:	687b      	ldr	r3, [r7, #4]
 801b9c0:	2200      	movs	r2, #0
 801b9c2:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b9c4:	687b      	ldr	r3, [r7, #4]
 801b9c6:	681b      	ldr	r3, [r3, #0]
 801b9c8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b9ca:	693b      	ldr	r3, [r7, #16]
 801b9cc:	e853 3f00 	ldrex	r3, [r3]
 801b9d0:	60fb      	str	r3, [r7, #12]
   return(result);
 801b9d2:	68fb      	ldr	r3, [r7, #12]
 801b9d4:	f023 0310 	bic.w	r3, r3, #16
 801b9d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b9dc:	687b      	ldr	r3, [r7, #4]
 801b9de:	681b      	ldr	r3, [r3, #0]
 801b9e0:	461a      	mov	r2, r3
 801b9e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b9e6:	61fb      	str	r3, [r7, #28]
 801b9e8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b9ea:	69b9      	ldr	r1, [r7, #24]
 801b9ec:	69fa      	ldr	r2, [r7, #28]
 801b9ee:	e841 2300 	strex	r3, r2, [r1]
 801b9f2:	617b      	str	r3, [r7, #20]
   return(result);
 801b9f4:	697b      	ldr	r3, [r7, #20]
 801b9f6:	2b00      	cmp	r3, #0
 801b9f8:	d1e4      	bne.n	801b9c4 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b9fa:	687b      	ldr	r3, [r7, #4]
 801b9fc:	2202      	movs	r2, #2
 801b9fe:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801ba00:	687b      	ldr	r3, [r7, #4]
 801ba02:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ba06:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801ba0a:	4611      	mov	r1, r2
 801ba0c:	6878      	ldr	r0, [r7, #4]
 801ba0e:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801ba10:	e041      	b.n	801ba96 <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801ba12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801ba1a:	2b00      	cmp	r3, #0
 801ba1c:	d010      	beq.n	801ba40 <HAL_UART_IRQHandler+0x584>
 801ba1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801ba22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801ba26:	2b00      	cmp	r3, #0
 801ba28:	d00a      	beq.n	801ba40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801ba32:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801ba34:	687b      	ldr	r3, [r7, #4]
 801ba36:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801ba3a:	6878      	ldr	r0, [r7, #4]
 801ba3c:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801ba3e:	e02d      	b.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801ba40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ba48:	2b00      	cmp	r3, #0
 801ba4a:	d00e      	beq.n	801ba6a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801ba4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ba54:	2b00      	cmp	r3, #0
 801ba56:	d008      	beq.n	801ba6a <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801ba58:	687b      	ldr	r3, [r7, #4]
 801ba5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba5c:	2b00      	cmp	r3, #0
 801ba5e:	d01c      	beq.n	801ba9a <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801ba60:	687b      	ldr	r3, [r7, #4]
 801ba62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801ba64:	6878      	ldr	r0, [r7, #4]
 801ba66:	4798      	blx	r3
    }
    return;
 801ba68:	e017      	b.n	801ba9a <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801ba6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801ba6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ba72:	2b00      	cmp	r3, #0
 801ba74:	d012      	beq.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
 801ba76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801ba7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ba7e:	2b00      	cmp	r3, #0
 801ba80:	d00c      	beq.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801ba82:	6878      	ldr	r0, [r7, #4]
 801ba84:	f000 fe0a 	bl	801c69c <UART_EndTransmit_IT>
    return;
 801ba88:	e008      	b.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
      return;
 801ba8a:	bf00      	nop
 801ba8c:	e006      	b.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
    return;
 801ba8e:	bf00      	nop
 801ba90:	e004      	b.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
      return;
 801ba92:	bf00      	nop
 801ba94:	e002      	b.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
      return;
 801ba96:	bf00      	nop
 801ba98:	e000      	b.n	801ba9c <HAL_UART_IRQHandler+0x5e0>
    return;
 801ba9a:	bf00      	nop
  }

}
 801ba9c:	37e8      	adds	r7, #232	; 0xe8
 801ba9e:	46bd      	mov	sp, r7
 801baa0:	bd80      	pop	{r7, pc}
 801baa2:	bf00      	nop

0801baa4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801baa4:	b480      	push	{r7}
 801baa6:	b083      	sub	sp, #12
 801baa8:	af00      	add	r7, sp, #0
 801baaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801baac:	bf00      	nop
 801baae:	370c      	adds	r7, #12
 801bab0:	46bd      	mov	sp, r7
 801bab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bab6:	4770      	bx	lr

0801bab8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bab8:	b480      	push	{r7}
 801baba:	b083      	sub	sp, #12
 801babc:	af00      	add	r7, sp, #0
 801babe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801bac0:	bf00      	nop
 801bac2:	370c      	adds	r7, #12
 801bac4:	46bd      	mov	sp, r7
 801bac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baca:	4770      	bx	lr

0801bacc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801bacc:	b480      	push	{r7}
 801bace:	b083      	sub	sp, #12
 801bad0:	af00      	add	r7, sp, #0
 801bad2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801bad4:	bf00      	nop
 801bad6:	370c      	adds	r7, #12
 801bad8:	46bd      	mov	sp, r7
 801bada:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bade:	4770      	bx	lr

0801bae0 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801bae0:	b480      	push	{r7}
 801bae2:	b083      	sub	sp, #12
 801bae4:	af00      	add	r7, sp, #0
 801bae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801bae8:	bf00      	nop
 801baea:	370c      	adds	r7, #12
 801baec:	46bd      	mov	sp, r7
 801baee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801baf2:	4770      	bx	lr

0801baf4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801baf4:	b480      	push	{r7}
 801baf6:	b083      	sub	sp, #12
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801bafc:	bf00      	nop
 801bafe:	370c      	adds	r7, #12
 801bb00:	46bd      	mov	sp, r7
 801bb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb06:	4770      	bx	lr

0801bb08 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801bb08:	b480      	push	{r7}
 801bb0a:	b083      	sub	sp, #12
 801bb0c:	af00      	add	r7, sp, #0
 801bb0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801bb10:	bf00      	nop
 801bb12:	370c      	adds	r7, #12
 801bb14:	46bd      	mov	sp, r7
 801bb16:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb1a:	4770      	bx	lr

0801bb1c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801bb1c:	b480      	push	{r7}
 801bb1e:	b083      	sub	sp, #12
 801bb20:	af00      	add	r7, sp, #0
 801bb22:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801bb24:	bf00      	nop
 801bb26:	370c      	adds	r7, #12
 801bb28:	46bd      	mov	sp, r7
 801bb2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb2e:	4770      	bx	lr

0801bb30 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801bb30:	b480      	push	{r7}
 801bb32:	b083      	sub	sp, #12
 801bb34:	af00      	add	r7, sp, #0
 801bb36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801bb38:	bf00      	nop
 801bb3a:	370c      	adds	r7, #12
 801bb3c:	46bd      	mov	sp, r7
 801bb3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb42:	4770      	bx	lr

0801bb44 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801bb44:	b480      	push	{r7}
 801bb46:	b083      	sub	sp, #12
 801bb48:	af00      	add	r7, sp, #0
 801bb4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801bb4c:	bf00      	nop
 801bb4e:	370c      	adds	r7, #12
 801bb50:	46bd      	mov	sp, r7
 801bb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bb56:	4770      	bx	lr

0801bb58 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801bb58:	b480      	push	{r7}
 801bb5a:	b083      	sub	sp, #12
 801bb5c:	af00      	add	r7, sp, #0
 801bb5e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	4a16      	ldr	r2, [pc, #88]	; (801bbbc <UART_InitCallbacksToDefault+0x64>)
 801bb64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801bb68:	687b      	ldr	r3, [r7, #4]
 801bb6a:	4a15      	ldr	r2, [pc, #84]	; (801bbc0 <UART_InitCallbacksToDefault+0x68>)
 801bb6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801bb70:	687b      	ldr	r3, [r7, #4]
 801bb72:	4a14      	ldr	r2, [pc, #80]	; (801bbc4 <UART_InitCallbacksToDefault+0x6c>)
 801bb74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	4a13      	ldr	r2, [pc, #76]	; (801bbc8 <UART_InitCallbacksToDefault+0x70>)
 801bb7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801bb80:	687b      	ldr	r3, [r7, #4]
 801bb82:	4a12      	ldr	r2, [pc, #72]	; (801bbcc <UART_InitCallbacksToDefault+0x74>)
 801bb84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801bb88:	687b      	ldr	r3, [r7, #4]
 801bb8a:	4a11      	ldr	r2, [pc, #68]	; (801bbd0 <UART_InitCallbacksToDefault+0x78>)
 801bb8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801bb90:	687b      	ldr	r3, [r7, #4]
 801bb92:	4a10      	ldr	r2, [pc, #64]	; (801bbd4 <UART_InitCallbacksToDefault+0x7c>)
 801bb94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801bb98:	687b      	ldr	r3, [r7, #4]
 801bb9a:	4a0f      	ldr	r2, [pc, #60]	; (801bbd8 <UART_InitCallbacksToDefault+0x80>)
 801bb9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801bba0:	687b      	ldr	r3, [r7, #4]
 801bba2:	4a0e      	ldr	r2, [pc, #56]	; (801bbdc <UART_InitCallbacksToDefault+0x84>)
 801bba4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	4a0d      	ldr	r2, [pc, #52]	; (801bbe0 <UART_InitCallbacksToDefault+0x88>)
 801bbac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801bbb0:	bf00      	nop
 801bbb2:	370c      	adds	r7, #12
 801bbb4:	46bd      	mov	sp, r7
 801bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbba:	4770      	bx	lr
 801bbbc:	0801bab9 	.word	0x0801bab9
 801bbc0:	0801baa5 	.word	0x0801baa5
 801bbc4:	0801bae1 	.word	0x0801bae1
 801bbc8:	0801bacd 	.word	0x0801bacd
 801bbcc:	0801baf5 	.word	0x0801baf5
 801bbd0:	0801bb09 	.word	0x0801bb09
 801bbd4:	0801bb1d 	.word	0x0801bb1d
 801bbd8:	0801bb31 	.word	0x0801bb31
 801bbdc:	0801bb45 	.word	0x0801bb45
 801bbe0:	08014f81 	.word	0x08014f81

0801bbe4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801bbe4:	b580      	push	{r7, lr}
 801bbe6:	b088      	sub	sp, #32
 801bbe8:	af00      	add	r7, sp, #0
 801bbea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801bbec:	2300      	movs	r3, #0
 801bbee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801bbf0:	687b      	ldr	r3, [r7, #4]
 801bbf2:	689a      	ldr	r2, [r3, #8]
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	691b      	ldr	r3, [r3, #16]
 801bbf8:	431a      	orrs	r2, r3
 801bbfa:	687b      	ldr	r3, [r7, #4]
 801bbfc:	695b      	ldr	r3, [r3, #20]
 801bbfe:	431a      	orrs	r2, r3
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	69db      	ldr	r3, [r3, #28]
 801bc04:	4313      	orrs	r3, r2
 801bc06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801bc08:	687b      	ldr	r3, [r7, #4]
 801bc0a:	681b      	ldr	r3, [r3, #0]
 801bc0c:	681a      	ldr	r2, [r3, #0]
 801bc0e:	4ba6      	ldr	r3, [pc, #664]	; (801bea8 <UART_SetConfig+0x2c4>)
 801bc10:	4013      	ands	r3, r2
 801bc12:	687a      	ldr	r2, [r7, #4]
 801bc14:	6812      	ldr	r2, [r2, #0]
 801bc16:	6979      	ldr	r1, [r7, #20]
 801bc18:	430b      	orrs	r3, r1
 801bc1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	681b      	ldr	r3, [r3, #0]
 801bc20:	685b      	ldr	r3, [r3, #4]
 801bc22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801bc26:	687b      	ldr	r3, [r7, #4]
 801bc28:	68da      	ldr	r2, [r3, #12]
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	681b      	ldr	r3, [r3, #0]
 801bc2e:	430a      	orrs	r2, r1
 801bc30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801bc32:	687b      	ldr	r3, [r7, #4]
 801bc34:	699b      	ldr	r3, [r3, #24]
 801bc36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801bc38:	687b      	ldr	r3, [r7, #4]
 801bc3a:	6a1b      	ldr	r3, [r3, #32]
 801bc3c:	697a      	ldr	r2, [r7, #20]
 801bc3e:	4313      	orrs	r3, r2
 801bc40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	689b      	ldr	r3, [r3, #8]
 801bc48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	681b      	ldr	r3, [r3, #0]
 801bc50:	697a      	ldr	r2, [r7, #20]
 801bc52:	430a      	orrs	r2, r1
 801bc54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801bc56:	687b      	ldr	r3, [r7, #4]
 801bc58:	681b      	ldr	r3, [r3, #0]
 801bc5a:	4a94      	ldr	r2, [pc, #592]	; (801beac <UART_SetConfig+0x2c8>)
 801bc5c:	4293      	cmp	r3, r2
 801bc5e:	d120      	bne.n	801bca2 <UART_SetConfig+0xbe>
 801bc60:	4b93      	ldr	r3, [pc, #588]	; (801beb0 <UART_SetConfig+0x2cc>)
 801bc62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bc66:	f003 0303 	and.w	r3, r3, #3
 801bc6a:	2b03      	cmp	r3, #3
 801bc6c:	d816      	bhi.n	801bc9c <UART_SetConfig+0xb8>
 801bc6e:	a201      	add	r2, pc, #4	; (adr r2, 801bc74 <UART_SetConfig+0x90>)
 801bc70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc74:	0801bc85 	.word	0x0801bc85
 801bc78:	0801bc91 	.word	0x0801bc91
 801bc7c:	0801bc8b 	.word	0x0801bc8b
 801bc80:	0801bc97 	.word	0x0801bc97
 801bc84:	2301      	movs	r3, #1
 801bc86:	77fb      	strb	r3, [r7, #31]
 801bc88:	e150      	b.n	801bf2c <UART_SetConfig+0x348>
 801bc8a:	2302      	movs	r3, #2
 801bc8c:	77fb      	strb	r3, [r7, #31]
 801bc8e:	e14d      	b.n	801bf2c <UART_SetConfig+0x348>
 801bc90:	2304      	movs	r3, #4
 801bc92:	77fb      	strb	r3, [r7, #31]
 801bc94:	e14a      	b.n	801bf2c <UART_SetConfig+0x348>
 801bc96:	2308      	movs	r3, #8
 801bc98:	77fb      	strb	r3, [r7, #31]
 801bc9a:	e147      	b.n	801bf2c <UART_SetConfig+0x348>
 801bc9c:	2310      	movs	r3, #16
 801bc9e:	77fb      	strb	r3, [r7, #31]
 801bca0:	e144      	b.n	801bf2c <UART_SetConfig+0x348>
 801bca2:	687b      	ldr	r3, [r7, #4]
 801bca4:	681b      	ldr	r3, [r3, #0]
 801bca6:	4a83      	ldr	r2, [pc, #524]	; (801beb4 <UART_SetConfig+0x2d0>)
 801bca8:	4293      	cmp	r3, r2
 801bcaa:	d132      	bne.n	801bd12 <UART_SetConfig+0x12e>
 801bcac:	4b80      	ldr	r3, [pc, #512]	; (801beb0 <UART_SetConfig+0x2cc>)
 801bcae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bcb2:	f003 030c 	and.w	r3, r3, #12
 801bcb6:	2b0c      	cmp	r3, #12
 801bcb8:	d828      	bhi.n	801bd0c <UART_SetConfig+0x128>
 801bcba:	a201      	add	r2, pc, #4	; (adr r2, 801bcc0 <UART_SetConfig+0xdc>)
 801bcbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcc0:	0801bcf5 	.word	0x0801bcf5
 801bcc4:	0801bd0d 	.word	0x0801bd0d
 801bcc8:	0801bd0d 	.word	0x0801bd0d
 801bccc:	0801bd0d 	.word	0x0801bd0d
 801bcd0:	0801bd01 	.word	0x0801bd01
 801bcd4:	0801bd0d 	.word	0x0801bd0d
 801bcd8:	0801bd0d 	.word	0x0801bd0d
 801bcdc:	0801bd0d 	.word	0x0801bd0d
 801bce0:	0801bcfb 	.word	0x0801bcfb
 801bce4:	0801bd0d 	.word	0x0801bd0d
 801bce8:	0801bd0d 	.word	0x0801bd0d
 801bcec:	0801bd0d 	.word	0x0801bd0d
 801bcf0:	0801bd07 	.word	0x0801bd07
 801bcf4:	2300      	movs	r3, #0
 801bcf6:	77fb      	strb	r3, [r7, #31]
 801bcf8:	e118      	b.n	801bf2c <UART_SetConfig+0x348>
 801bcfa:	2302      	movs	r3, #2
 801bcfc:	77fb      	strb	r3, [r7, #31]
 801bcfe:	e115      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd00:	2304      	movs	r3, #4
 801bd02:	77fb      	strb	r3, [r7, #31]
 801bd04:	e112      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd06:	2308      	movs	r3, #8
 801bd08:	77fb      	strb	r3, [r7, #31]
 801bd0a:	e10f      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd0c:	2310      	movs	r3, #16
 801bd0e:	77fb      	strb	r3, [r7, #31]
 801bd10:	e10c      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	4a68      	ldr	r2, [pc, #416]	; (801beb8 <UART_SetConfig+0x2d4>)
 801bd18:	4293      	cmp	r3, r2
 801bd1a:	d120      	bne.n	801bd5e <UART_SetConfig+0x17a>
 801bd1c:	4b64      	ldr	r3, [pc, #400]	; (801beb0 <UART_SetConfig+0x2cc>)
 801bd1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bd22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801bd26:	2b30      	cmp	r3, #48	; 0x30
 801bd28:	d013      	beq.n	801bd52 <UART_SetConfig+0x16e>
 801bd2a:	2b30      	cmp	r3, #48	; 0x30
 801bd2c:	d814      	bhi.n	801bd58 <UART_SetConfig+0x174>
 801bd2e:	2b20      	cmp	r3, #32
 801bd30:	d009      	beq.n	801bd46 <UART_SetConfig+0x162>
 801bd32:	2b20      	cmp	r3, #32
 801bd34:	d810      	bhi.n	801bd58 <UART_SetConfig+0x174>
 801bd36:	2b00      	cmp	r3, #0
 801bd38:	d002      	beq.n	801bd40 <UART_SetConfig+0x15c>
 801bd3a:	2b10      	cmp	r3, #16
 801bd3c:	d006      	beq.n	801bd4c <UART_SetConfig+0x168>
 801bd3e:	e00b      	b.n	801bd58 <UART_SetConfig+0x174>
 801bd40:	2300      	movs	r3, #0
 801bd42:	77fb      	strb	r3, [r7, #31]
 801bd44:	e0f2      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd46:	2302      	movs	r3, #2
 801bd48:	77fb      	strb	r3, [r7, #31]
 801bd4a:	e0ef      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd4c:	2304      	movs	r3, #4
 801bd4e:	77fb      	strb	r3, [r7, #31]
 801bd50:	e0ec      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd52:	2308      	movs	r3, #8
 801bd54:	77fb      	strb	r3, [r7, #31]
 801bd56:	e0e9      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd58:	2310      	movs	r3, #16
 801bd5a:	77fb      	strb	r3, [r7, #31]
 801bd5c:	e0e6      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	681b      	ldr	r3, [r3, #0]
 801bd62:	4a56      	ldr	r2, [pc, #344]	; (801bebc <UART_SetConfig+0x2d8>)
 801bd64:	4293      	cmp	r3, r2
 801bd66:	d120      	bne.n	801bdaa <UART_SetConfig+0x1c6>
 801bd68:	4b51      	ldr	r3, [pc, #324]	; (801beb0 <UART_SetConfig+0x2cc>)
 801bd6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bd6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801bd72:	2bc0      	cmp	r3, #192	; 0xc0
 801bd74:	d013      	beq.n	801bd9e <UART_SetConfig+0x1ba>
 801bd76:	2bc0      	cmp	r3, #192	; 0xc0
 801bd78:	d814      	bhi.n	801bda4 <UART_SetConfig+0x1c0>
 801bd7a:	2b80      	cmp	r3, #128	; 0x80
 801bd7c:	d009      	beq.n	801bd92 <UART_SetConfig+0x1ae>
 801bd7e:	2b80      	cmp	r3, #128	; 0x80
 801bd80:	d810      	bhi.n	801bda4 <UART_SetConfig+0x1c0>
 801bd82:	2b00      	cmp	r3, #0
 801bd84:	d002      	beq.n	801bd8c <UART_SetConfig+0x1a8>
 801bd86:	2b40      	cmp	r3, #64	; 0x40
 801bd88:	d006      	beq.n	801bd98 <UART_SetConfig+0x1b4>
 801bd8a:	e00b      	b.n	801bda4 <UART_SetConfig+0x1c0>
 801bd8c:	2300      	movs	r3, #0
 801bd8e:	77fb      	strb	r3, [r7, #31]
 801bd90:	e0cc      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd92:	2302      	movs	r3, #2
 801bd94:	77fb      	strb	r3, [r7, #31]
 801bd96:	e0c9      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd98:	2304      	movs	r3, #4
 801bd9a:	77fb      	strb	r3, [r7, #31]
 801bd9c:	e0c6      	b.n	801bf2c <UART_SetConfig+0x348>
 801bd9e:	2308      	movs	r3, #8
 801bda0:	77fb      	strb	r3, [r7, #31]
 801bda2:	e0c3      	b.n	801bf2c <UART_SetConfig+0x348>
 801bda4:	2310      	movs	r3, #16
 801bda6:	77fb      	strb	r3, [r7, #31]
 801bda8:	e0c0      	b.n	801bf2c <UART_SetConfig+0x348>
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4a44      	ldr	r2, [pc, #272]	; (801bec0 <UART_SetConfig+0x2dc>)
 801bdb0:	4293      	cmp	r3, r2
 801bdb2:	d125      	bne.n	801be00 <UART_SetConfig+0x21c>
 801bdb4:	4b3e      	ldr	r3, [pc, #248]	; (801beb0 <UART_SetConfig+0x2cc>)
 801bdb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bdba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801bdbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bdc2:	d017      	beq.n	801bdf4 <UART_SetConfig+0x210>
 801bdc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801bdc8:	d817      	bhi.n	801bdfa <UART_SetConfig+0x216>
 801bdca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bdce:	d00b      	beq.n	801bde8 <UART_SetConfig+0x204>
 801bdd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bdd4:	d811      	bhi.n	801bdfa <UART_SetConfig+0x216>
 801bdd6:	2b00      	cmp	r3, #0
 801bdd8:	d003      	beq.n	801bde2 <UART_SetConfig+0x1fe>
 801bdda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801bdde:	d006      	beq.n	801bdee <UART_SetConfig+0x20a>
 801bde0:	e00b      	b.n	801bdfa <UART_SetConfig+0x216>
 801bde2:	2300      	movs	r3, #0
 801bde4:	77fb      	strb	r3, [r7, #31]
 801bde6:	e0a1      	b.n	801bf2c <UART_SetConfig+0x348>
 801bde8:	2302      	movs	r3, #2
 801bdea:	77fb      	strb	r3, [r7, #31]
 801bdec:	e09e      	b.n	801bf2c <UART_SetConfig+0x348>
 801bdee:	2304      	movs	r3, #4
 801bdf0:	77fb      	strb	r3, [r7, #31]
 801bdf2:	e09b      	b.n	801bf2c <UART_SetConfig+0x348>
 801bdf4:	2308      	movs	r3, #8
 801bdf6:	77fb      	strb	r3, [r7, #31]
 801bdf8:	e098      	b.n	801bf2c <UART_SetConfig+0x348>
 801bdfa:	2310      	movs	r3, #16
 801bdfc:	77fb      	strb	r3, [r7, #31]
 801bdfe:	e095      	b.n	801bf2c <UART_SetConfig+0x348>
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	681b      	ldr	r3, [r3, #0]
 801be04:	4a2f      	ldr	r2, [pc, #188]	; (801bec4 <UART_SetConfig+0x2e0>)
 801be06:	4293      	cmp	r3, r2
 801be08:	d125      	bne.n	801be56 <UART_SetConfig+0x272>
 801be0a:	4b29      	ldr	r3, [pc, #164]	; (801beb0 <UART_SetConfig+0x2cc>)
 801be0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801be14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801be18:	d017      	beq.n	801be4a <UART_SetConfig+0x266>
 801be1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801be1e:	d817      	bhi.n	801be50 <UART_SetConfig+0x26c>
 801be20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801be24:	d00b      	beq.n	801be3e <UART_SetConfig+0x25a>
 801be26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801be2a:	d811      	bhi.n	801be50 <UART_SetConfig+0x26c>
 801be2c:	2b00      	cmp	r3, #0
 801be2e:	d003      	beq.n	801be38 <UART_SetConfig+0x254>
 801be30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801be34:	d006      	beq.n	801be44 <UART_SetConfig+0x260>
 801be36:	e00b      	b.n	801be50 <UART_SetConfig+0x26c>
 801be38:	2301      	movs	r3, #1
 801be3a:	77fb      	strb	r3, [r7, #31]
 801be3c:	e076      	b.n	801bf2c <UART_SetConfig+0x348>
 801be3e:	2302      	movs	r3, #2
 801be40:	77fb      	strb	r3, [r7, #31]
 801be42:	e073      	b.n	801bf2c <UART_SetConfig+0x348>
 801be44:	2304      	movs	r3, #4
 801be46:	77fb      	strb	r3, [r7, #31]
 801be48:	e070      	b.n	801bf2c <UART_SetConfig+0x348>
 801be4a:	2308      	movs	r3, #8
 801be4c:	77fb      	strb	r3, [r7, #31]
 801be4e:	e06d      	b.n	801bf2c <UART_SetConfig+0x348>
 801be50:	2310      	movs	r3, #16
 801be52:	77fb      	strb	r3, [r7, #31]
 801be54:	e06a      	b.n	801bf2c <UART_SetConfig+0x348>
 801be56:	687b      	ldr	r3, [r7, #4]
 801be58:	681b      	ldr	r3, [r3, #0]
 801be5a:	4a1b      	ldr	r2, [pc, #108]	; (801bec8 <UART_SetConfig+0x2e4>)
 801be5c:	4293      	cmp	r3, r2
 801be5e:	d138      	bne.n	801bed2 <UART_SetConfig+0x2ee>
 801be60:	4b13      	ldr	r3, [pc, #76]	; (801beb0 <UART_SetConfig+0x2cc>)
 801be62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801be66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801be6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801be6e:	d017      	beq.n	801bea0 <UART_SetConfig+0x2bc>
 801be70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801be74:	d82a      	bhi.n	801becc <UART_SetConfig+0x2e8>
 801be76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801be7a:	d00b      	beq.n	801be94 <UART_SetConfig+0x2b0>
 801be7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801be80:	d824      	bhi.n	801becc <UART_SetConfig+0x2e8>
 801be82:	2b00      	cmp	r3, #0
 801be84:	d003      	beq.n	801be8e <UART_SetConfig+0x2aa>
 801be86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801be8a:	d006      	beq.n	801be9a <UART_SetConfig+0x2b6>
 801be8c:	e01e      	b.n	801becc <UART_SetConfig+0x2e8>
 801be8e:	2300      	movs	r3, #0
 801be90:	77fb      	strb	r3, [r7, #31]
 801be92:	e04b      	b.n	801bf2c <UART_SetConfig+0x348>
 801be94:	2302      	movs	r3, #2
 801be96:	77fb      	strb	r3, [r7, #31]
 801be98:	e048      	b.n	801bf2c <UART_SetConfig+0x348>
 801be9a:	2304      	movs	r3, #4
 801be9c:	77fb      	strb	r3, [r7, #31]
 801be9e:	e045      	b.n	801bf2c <UART_SetConfig+0x348>
 801bea0:	2308      	movs	r3, #8
 801bea2:	77fb      	strb	r3, [r7, #31]
 801bea4:	e042      	b.n	801bf2c <UART_SetConfig+0x348>
 801bea6:	bf00      	nop
 801bea8:	efff69f3 	.word	0xefff69f3
 801beac:	40011000 	.word	0x40011000
 801beb0:	40023800 	.word	0x40023800
 801beb4:	40004400 	.word	0x40004400
 801beb8:	40004800 	.word	0x40004800
 801bebc:	40004c00 	.word	0x40004c00
 801bec0:	40005000 	.word	0x40005000
 801bec4:	40011400 	.word	0x40011400
 801bec8:	40007800 	.word	0x40007800
 801becc:	2310      	movs	r3, #16
 801bece:	77fb      	strb	r3, [r7, #31]
 801bed0:	e02c      	b.n	801bf2c <UART_SetConfig+0x348>
 801bed2:	687b      	ldr	r3, [r7, #4]
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	4a72      	ldr	r2, [pc, #456]	; (801c0a0 <UART_SetConfig+0x4bc>)
 801bed8:	4293      	cmp	r3, r2
 801beda:	d125      	bne.n	801bf28 <UART_SetConfig+0x344>
 801bedc:	4b71      	ldr	r3, [pc, #452]	; (801c0a4 <UART_SetConfig+0x4c0>)
 801bede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bee2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801bee6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801beea:	d017      	beq.n	801bf1c <UART_SetConfig+0x338>
 801beec:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801bef0:	d817      	bhi.n	801bf22 <UART_SetConfig+0x33e>
 801bef2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bef6:	d00b      	beq.n	801bf10 <UART_SetConfig+0x32c>
 801bef8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801befc:	d811      	bhi.n	801bf22 <UART_SetConfig+0x33e>
 801befe:	2b00      	cmp	r3, #0
 801bf00:	d003      	beq.n	801bf0a <UART_SetConfig+0x326>
 801bf02:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801bf06:	d006      	beq.n	801bf16 <UART_SetConfig+0x332>
 801bf08:	e00b      	b.n	801bf22 <UART_SetConfig+0x33e>
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	77fb      	strb	r3, [r7, #31]
 801bf0e:	e00d      	b.n	801bf2c <UART_SetConfig+0x348>
 801bf10:	2302      	movs	r3, #2
 801bf12:	77fb      	strb	r3, [r7, #31]
 801bf14:	e00a      	b.n	801bf2c <UART_SetConfig+0x348>
 801bf16:	2304      	movs	r3, #4
 801bf18:	77fb      	strb	r3, [r7, #31]
 801bf1a:	e007      	b.n	801bf2c <UART_SetConfig+0x348>
 801bf1c:	2308      	movs	r3, #8
 801bf1e:	77fb      	strb	r3, [r7, #31]
 801bf20:	e004      	b.n	801bf2c <UART_SetConfig+0x348>
 801bf22:	2310      	movs	r3, #16
 801bf24:	77fb      	strb	r3, [r7, #31]
 801bf26:	e001      	b.n	801bf2c <UART_SetConfig+0x348>
 801bf28:	2310      	movs	r3, #16
 801bf2a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	69db      	ldr	r3, [r3, #28]
 801bf30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801bf34:	d15b      	bne.n	801bfee <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801bf36:	7ffb      	ldrb	r3, [r7, #31]
 801bf38:	2b08      	cmp	r3, #8
 801bf3a:	d828      	bhi.n	801bf8e <UART_SetConfig+0x3aa>
 801bf3c:	a201      	add	r2, pc, #4	; (adr r2, 801bf44 <UART_SetConfig+0x360>)
 801bf3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf42:	bf00      	nop
 801bf44:	0801bf69 	.word	0x0801bf69
 801bf48:	0801bf71 	.word	0x0801bf71
 801bf4c:	0801bf79 	.word	0x0801bf79
 801bf50:	0801bf8f 	.word	0x0801bf8f
 801bf54:	0801bf7f 	.word	0x0801bf7f
 801bf58:	0801bf8f 	.word	0x0801bf8f
 801bf5c:	0801bf8f 	.word	0x0801bf8f
 801bf60:	0801bf8f 	.word	0x0801bf8f
 801bf64:	0801bf87 	.word	0x0801bf87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801bf68:	f7fd fc3e 	bl	80197e8 <HAL_RCC_GetPCLK1Freq>
 801bf6c:	61b8      	str	r0, [r7, #24]
        break;
 801bf6e:	e013      	b.n	801bf98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801bf70:	f7fd fc4e 	bl	8019810 <HAL_RCC_GetPCLK2Freq>
 801bf74:	61b8      	str	r0, [r7, #24]
        break;
 801bf76:	e00f      	b.n	801bf98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801bf78:	4b4b      	ldr	r3, [pc, #300]	; (801c0a8 <UART_SetConfig+0x4c4>)
 801bf7a:	61bb      	str	r3, [r7, #24]
        break;
 801bf7c:	e00c      	b.n	801bf98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801bf7e:	f7fd fb61 	bl	8019644 <HAL_RCC_GetSysClockFreq>
 801bf82:	61b8      	str	r0, [r7, #24]
        break;
 801bf84:	e008      	b.n	801bf98 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bf86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bf8a:	61bb      	str	r3, [r7, #24]
        break;
 801bf8c:	e004      	b.n	801bf98 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801bf8e:	2300      	movs	r3, #0
 801bf90:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801bf92:	2301      	movs	r3, #1
 801bf94:	77bb      	strb	r3, [r7, #30]
        break;
 801bf96:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801bf98:	69bb      	ldr	r3, [r7, #24]
 801bf9a:	2b00      	cmp	r3, #0
 801bf9c:	d074      	beq.n	801c088 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801bf9e:	69bb      	ldr	r3, [r7, #24]
 801bfa0:	005a      	lsls	r2, r3, #1
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	685b      	ldr	r3, [r3, #4]
 801bfa6:	085b      	lsrs	r3, r3, #1
 801bfa8:	441a      	add	r2, r3
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	685b      	ldr	r3, [r3, #4]
 801bfae:	fbb2 f3f3 	udiv	r3, r2, r3
 801bfb2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bfb4:	693b      	ldr	r3, [r7, #16]
 801bfb6:	2b0f      	cmp	r3, #15
 801bfb8:	d916      	bls.n	801bfe8 <UART_SetConfig+0x404>
 801bfba:	693b      	ldr	r3, [r7, #16]
 801bfbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801bfc0:	d212      	bcs.n	801bfe8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801bfc2:	693b      	ldr	r3, [r7, #16]
 801bfc4:	b29b      	uxth	r3, r3
 801bfc6:	f023 030f 	bic.w	r3, r3, #15
 801bfca:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801bfcc:	693b      	ldr	r3, [r7, #16]
 801bfce:	085b      	lsrs	r3, r3, #1
 801bfd0:	b29b      	uxth	r3, r3
 801bfd2:	f003 0307 	and.w	r3, r3, #7
 801bfd6:	b29a      	uxth	r2, r3
 801bfd8:	89fb      	ldrh	r3, [r7, #14]
 801bfda:	4313      	orrs	r3, r2
 801bfdc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801bfde:	687b      	ldr	r3, [r7, #4]
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	89fa      	ldrh	r2, [r7, #14]
 801bfe4:	60da      	str	r2, [r3, #12]
 801bfe6:	e04f      	b.n	801c088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801bfe8:	2301      	movs	r3, #1
 801bfea:	77bb      	strb	r3, [r7, #30]
 801bfec:	e04c      	b.n	801c088 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801bfee:	7ffb      	ldrb	r3, [r7, #31]
 801bff0:	2b08      	cmp	r3, #8
 801bff2:	d828      	bhi.n	801c046 <UART_SetConfig+0x462>
 801bff4:	a201      	add	r2, pc, #4	; (adr r2, 801bffc <UART_SetConfig+0x418>)
 801bff6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bffa:	bf00      	nop
 801bffc:	0801c021 	.word	0x0801c021
 801c000:	0801c029 	.word	0x0801c029
 801c004:	0801c031 	.word	0x0801c031
 801c008:	0801c047 	.word	0x0801c047
 801c00c:	0801c037 	.word	0x0801c037
 801c010:	0801c047 	.word	0x0801c047
 801c014:	0801c047 	.word	0x0801c047
 801c018:	0801c047 	.word	0x0801c047
 801c01c:	0801c03f 	.word	0x0801c03f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801c020:	f7fd fbe2 	bl	80197e8 <HAL_RCC_GetPCLK1Freq>
 801c024:	61b8      	str	r0, [r7, #24]
        break;
 801c026:	e013      	b.n	801c050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801c028:	f7fd fbf2 	bl	8019810 <HAL_RCC_GetPCLK2Freq>
 801c02c:	61b8      	str	r0, [r7, #24]
        break;
 801c02e:	e00f      	b.n	801c050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801c030:	4b1d      	ldr	r3, [pc, #116]	; (801c0a8 <UART_SetConfig+0x4c4>)
 801c032:	61bb      	str	r3, [r7, #24]
        break;
 801c034:	e00c      	b.n	801c050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801c036:	f7fd fb05 	bl	8019644 <HAL_RCC_GetSysClockFreq>
 801c03a:	61b8      	str	r0, [r7, #24]
        break;
 801c03c:	e008      	b.n	801c050 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801c03e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801c042:	61bb      	str	r3, [r7, #24]
        break;
 801c044:	e004      	b.n	801c050 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801c046:	2300      	movs	r3, #0
 801c048:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801c04a:	2301      	movs	r3, #1
 801c04c:	77bb      	strb	r3, [r7, #30]
        break;
 801c04e:	bf00      	nop
    }

    if (pclk != 0U)
 801c050:	69bb      	ldr	r3, [r7, #24]
 801c052:	2b00      	cmp	r3, #0
 801c054:	d018      	beq.n	801c088 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	685b      	ldr	r3, [r3, #4]
 801c05a:	085a      	lsrs	r2, r3, #1
 801c05c:	69bb      	ldr	r3, [r7, #24]
 801c05e:	441a      	add	r2, r3
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	685b      	ldr	r3, [r3, #4]
 801c064:	fbb2 f3f3 	udiv	r3, r2, r3
 801c068:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801c06a:	693b      	ldr	r3, [r7, #16]
 801c06c:	2b0f      	cmp	r3, #15
 801c06e:	d909      	bls.n	801c084 <UART_SetConfig+0x4a0>
 801c070:	693b      	ldr	r3, [r7, #16]
 801c072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801c076:	d205      	bcs.n	801c084 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801c078:	693b      	ldr	r3, [r7, #16]
 801c07a:	b29a      	uxth	r2, r3
 801c07c:	687b      	ldr	r3, [r7, #4]
 801c07e:	681b      	ldr	r3, [r3, #0]
 801c080:	60da      	str	r2, [r3, #12]
 801c082:	e001      	b.n	801c088 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801c084:	2301      	movs	r3, #1
 801c086:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	2200      	movs	r2, #0
 801c08c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	2200      	movs	r2, #0
 801c092:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801c094:	7fbb      	ldrb	r3, [r7, #30]
}
 801c096:	4618      	mov	r0, r3
 801c098:	3720      	adds	r7, #32
 801c09a:	46bd      	mov	sp, r7
 801c09c:	bd80      	pop	{r7, pc}
 801c09e:	bf00      	nop
 801c0a0:	40007c00 	.word	0x40007c00
 801c0a4:	40023800 	.word	0x40023800
 801c0a8:	00f42400 	.word	0x00f42400

0801c0ac <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801c0ac:	b480      	push	{r7}
 801c0ae:	b083      	sub	sp, #12
 801c0b0:	af00      	add	r7, sp, #0
 801c0b2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801c0b4:	687b      	ldr	r3, [r7, #4]
 801c0b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0b8:	f003 0301 	and.w	r3, r3, #1
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d00a      	beq.n	801c0d6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	681b      	ldr	r3, [r3, #0]
 801c0c4:	685b      	ldr	r3, [r3, #4]
 801c0c6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	681b      	ldr	r3, [r3, #0]
 801c0d2:	430a      	orrs	r2, r1
 801c0d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0da:	f003 0302 	and.w	r3, r3, #2
 801c0de:	2b00      	cmp	r3, #0
 801c0e0:	d00a      	beq.n	801c0f8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	685b      	ldr	r3, [r3, #4]
 801c0e8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801c0ec:	687b      	ldr	r3, [r7, #4]
 801c0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801c0f0:	687b      	ldr	r3, [r7, #4]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	430a      	orrs	r2, r1
 801c0f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c0fc:	f003 0304 	and.w	r3, r3, #4
 801c100:	2b00      	cmp	r3, #0
 801c102:	d00a      	beq.n	801c11a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801c104:	687b      	ldr	r3, [r7, #4]
 801c106:	681b      	ldr	r3, [r3, #0]
 801c108:	685b      	ldr	r3, [r3, #4]
 801c10a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801c10e:	687b      	ldr	r3, [r7, #4]
 801c110:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801c112:	687b      	ldr	r3, [r7, #4]
 801c114:	681b      	ldr	r3, [r3, #0]
 801c116:	430a      	orrs	r2, r1
 801c118:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801c11a:	687b      	ldr	r3, [r7, #4]
 801c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c11e:	f003 0308 	and.w	r3, r3, #8
 801c122:	2b00      	cmp	r3, #0
 801c124:	d00a      	beq.n	801c13c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801c126:	687b      	ldr	r3, [r7, #4]
 801c128:	681b      	ldr	r3, [r3, #0]
 801c12a:	685b      	ldr	r3, [r3, #4]
 801c12c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801c134:	687b      	ldr	r3, [r7, #4]
 801c136:	681b      	ldr	r3, [r3, #0]
 801c138:	430a      	orrs	r2, r1
 801c13a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c140:	f003 0310 	and.w	r3, r3, #16
 801c144:	2b00      	cmp	r3, #0
 801c146:	d00a      	beq.n	801c15e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801c148:	687b      	ldr	r3, [r7, #4]
 801c14a:	681b      	ldr	r3, [r3, #0]
 801c14c:	689b      	ldr	r3, [r3, #8]
 801c14e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801c152:	687b      	ldr	r3, [r7, #4]
 801c154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	681b      	ldr	r3, [r3, #0]
 801c15a:	430a      	orrs	r2, r1
 801c15c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c162:	f003 0320 	and.w	r3, r3, #32
 801c166:	2b00      	cmp	r3, #0
 801c168:	d00a      	beq.n	801c180 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	681b      	ldr	r3, [r3, #0]
 801c16e:	689b      	ldr	r3, [r3, #8]
 801c170:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801c174:	687b      	ldr	r3, [r7, #4]
 801c176:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801c178:	687b      	ldr	r3, [r7, #4]
 801c17a:	681b      	ldr	r3, [r3, #0]
 801c17c:	430a      	orrs	r2, r1
 801c17e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801c180:	687b      	ldr	r3, [r7, #4]
 801c182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801c188:	2b00      	cmp	r3, #0
 801c18a:	d01a      	beq.n	801c1c2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	685b      	ldr	r3, [r3, #4]
 801c192:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801c196:	687b      	ldr	r3, [r7, #4]
 801c198:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801c19a:	687b      	ldr	r3, [r7, #4]
 801c19c:	681b      	ldr	r3, [r3, #0]
 801c19e:	430a      	orrs	r2, r1
 801c1a0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801c1a2:	687b      	ldr	r3, [r7, #4]
 801c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801c1a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801c1aa:	d10a      	bne.n	801c1c2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	681b      	ldr	r3, [r3, #0]
 801c1b0:	685b      	ldr	r3, [r3, #4]
 801c1b2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801c1b6:	687b      	ldr	r3, [r7, #4]
 801c1b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	430a      	orrs	r2, r1
 801c1c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c1c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d00a      	beq.n	801c1e4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	685b      	ldr	r3, [r3, #4]
 801c1d4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801c1d8:	687b      	ldr	r3, [r7, #4]
 801c1da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c1dc:	687b      	ldr	r3, [r7, #4]
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	430a      	orrs	r2, r1
 801c1e2:	605a      	str	r2, [r3, #4]
  }
}
 801c1e4:	bf00      	nop
 801c1e6:	370c      	adds	r7, #12
 801c1e8:	46bd      	mov	sp, r7
 801c1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1ee:	4770      	bx	lr

0801c1f0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801c1f0:	b580      	push	{r7, lr}
 801c1f2:	b086      	sub	sp, #24
 801c1f4:	af02      	add	r7, sp, #8
 801c1f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c1f8:	687b      	ldr	r3, [r7, #4]
 801c1fa:	2200      	movs	r2, #0
 801c1fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801c200:	f7f9 fb10 	bl	8015824 <HAL_GetTick>
 801c204:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801c206:	687b      	ldr	r3, [r7, #4]
 801c208:	681b      	ldr	r3, [r3, #0]
 801c20a:	681b      	ldr	r3, [r3, #0]
 801c20c:	f003 0308 	and.w	r3, r3, #8
 801c210:	2b08      	cmp	r3, #8
 801c212:	d10e      	bne.n	801c232 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c214:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c218:	9300      	str	r3, [sp, #0]
 801c21a:	68fb      	ldr	r3, [r7, #12]
 801c21c:	2200      	movs	r2, #0
 801c21e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801c222:	6878      	ldr	r0, [r7, #4]
 801c224:	f000 f831 	bl	801c28a <UART_WaitOnFlagUntilTimeout>
 801c228:	4603      	mov	r3, r0
 801c22a:	2b00      	cmp	r3, #0
 801c22c:	d001      	beq.n	801c232 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c22e:	2303      	movs	r3, #3
 801c230:	e027      	b.n	801c282 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801c232:	687b      	ldr	r3, [r7, #4]
 801c234:	681b      	ldr	r3, [r3, #0]
 801c236:	681b      	ldr	r3, [r3, #0]
 801c238:	f003 0304 	and.w	r3, r3, #4
 801c23c:	2b04      	cmp	r3, #4
 801c23e:	d10e      	bne.n	801c25e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801c240:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801c244:	9300      	str	r3, [sp, #0]
 801c246:	68fb      	ldr	r3, [r7, #12]
 801c248:	2200      	movs	r2, #0
 801c24a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801c24e:	6878      	ldr	r0, [r7, #4]
 801c250:	f000 f81b 	bl	801c28a <UART_WaitOnFlagUntilTimeout>
 801c254:	4603      	mov	r3, r0
 801c256:	2b00      	cmp	r3, #0
 801c258:	d001      	beq.n	801c25e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801c25a:	2303      	movs	r3, #3
 801c25c:	e011      	b.n	801c282 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801c25e:	687b      	ldr	r3, [r7, #4]
 801c260:	2220      	movs	r2, #32
 801c262:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	2220      	movs	r2, #32
 801c268:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	2200      	movs	r2, #0
 801c270:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	2200      	movs	r2, #0
 801c276:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801c278:	687b      	ldr	r3, [r7, #4]
 801c27a:	2200      	movs	r2, #0
 801c27c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801c280:	2300      	movs	r3, #0
}
 801c282:	4618      	mov	r0, r3
 801c284:	3710      	adds	r7, #16
 801c286:	46bd      	mov	sp, r7
 801c288:	bd80      	pop	{r7, pc}

0801c28a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801c28a:	b580      	push	{r7, lr}
 801c28c:	b09c      	sub	sp, #112	; 0x70
 801c28e:	af00      	add	r7, sp, #0
 801c290:	60f8      	str	r0, [r7, #12]
 801c292:	60b9      	str	r1, [r7, #8]
 801c294:	603b      	str	r3, [r7, #0]
 801c296:	4613      	mov	r3, r2
 801c298:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c29a:	e0a7      	b.n	801c3ec <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801c29c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c29e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c2a2:	f000 80a3 	beq.w	801c3ec <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801c2a6:	f7f9 fabd 	bl	8015824 <HAL_GetTick>
 801c2aa:	4602      	mov	r2, r0
 801c2ac:	683b      	ldr	r3, [r7, #0]
 801c2ae:	1ad3      	subs	r3, r2, r3
 801c2b0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801c2b2:	429a      	cmp	r2, r3
 801c2b4:	d302      	bcc.n	801c2bc <UART_WaitOnFlagUntilTimeout+0x32>
 801c2b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801c2b8:	2b00      	cmp	r3, #0
 801c2ba:	d13f      	bne.n	801c33c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c2bc:	68fb      	ldr	r3, [r7, #12]
 801c2be:	681b      	ldr	r3, [r3, #0]
 801c2c0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c2c4:	e853 3f00 	ldrex	r3, [r3]
 801c2c8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801c2ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c2cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c2d0:	667b      	str	r3, [r7, #100]	; 0x64
 801c2d2:	68fb      	ldr	r3, [r7, #12]
 801c2d4:	681b      	ldr	r3, [r3, #0]
 801c2d6:	461a      	mov	r2, r3
 801c2d8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801c2da:	65fb      	str	r3, [r7, #92]	; 0x5c
 801c2dc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c2de:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801c2e0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801c2e2:	e841 2300 	strex	r3, r2, [r1]
 801c2e6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801c2e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801c2ea:	2b00      	cmp	r3, #0
 801c2ec:	d1e6      	bne.n	801c2bc <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c2ee:	68fb      	ldr	r3, [r7, #12]
 801c2f0:	681b      	ldr	r3, [r3, #0]
 801c2f2:	3308      	adds	r3, #8
 801c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c2f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c2f8:	e853 3f00 	ldrex	r3, [r3]
 801c2fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c2fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c300:	f023 0301 	bic.w	r3, r3, #1
 801c304:	663b      	str	r3, [r7, #96]	; 0x60
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	681b      	ldr	r3, [r3, #0]
 801c30a:	3308      	adds	r3, #8
 801c30c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801c30e:	64ba      	str	r2, [r7, #72]	; 0x48
 801c310:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c312:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c314:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c316:	e841 2300 	strex	r3, r2, [r1]
 801c31a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c31c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c31e:	2b00      	cmp	r3, #0
 801c320:	d1e5      	bne.n	801c2ee <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801c322:	68fb      	ldr	r3, [r7, #12]
 801c324:	2220      	movs	r2, #32
 801c326:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801c328:	68fb      	ldr	r3, [r7, #12]
 801c32a:	2220      	movs	r2, #32
 801c32c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801c330:	68fb      	ldr	r3, [r7, #12]
 801c332:	2200      	movs	r2, #0
 801c334:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801c338:	2303      	movs	r3, #3
 801c33a:	e068      	b.n	801c40e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801c33c:	68fb      	ldr	r3, [r7, #12]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	681b      	ldr	r3, [r3, #0]
 801c342:	f003 0304 	and.w	r3, r3, #4
 801c346:	2b00      	cmp	r3, #0
 801c348:	d050      	beq.n	801c3ec <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801c34a:	68fb      	ldr	r3, [r7, #12]
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	69db      	ldr	r3, [r3, #28]
 801c350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801c354:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801c358:	d148      	bne.n	801c3ec <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801c35a:	68fb      	ldr	r3, [r7, #12]
 801c35c:	681b      	ldr	r3, [r3, #0]
 801c35e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801c362:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801c364:	68fb      	ldr	r3, [r7, #12]
 801c366:	681b      	ldr	r3, [r3, #0]
 801c368:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c36a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c36c:	e853 3f00 	ldrex	r3, [r3]
 801c370:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c374:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801c378:	66fb      	str	r3, [r7, #108]	; 0x6c
 801c37a:	68fb      	ldr	r3, [r7, #12]
 801c37c:	681b      	ldr	r3, [r3, #0]
 801c37e:	461a      	mov	r2, r3
 801c380:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801c382:	637b      	str	r3, [r7, #52]	; 0x34
 801c384:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c386:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c388:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c38a:	e841 2300 	strex	r3, r2, [r1]
 801c38e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c392:	2b00      	cmp	r3, #0
 801c394:	d1e6      	bne.n	801c364 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c396:	68fb      	ldr	r3, [r7, #12]
 801c398:	681b      	ldr	r3, [r3, #0]
 801c39a:	3308      	adds	r3, #8
 801c39c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c39e:	697b      	ldr	r3, [r7, #20]
 801c3a0:	e853 3f00 	ldrex	r3, [r3]
 801c3a4:	613b      	str	r3, [r7, #16]
   return(result);
 801c3a6:	693b      	ldr	r3, [r7, #16]
 801c3a8:	f023 0301 	bic.w	r3, r3, #1
 801c3ac:	66bb      	str	r3, [r7, #104]	; 0x68
 801c3ae:	68fb      	ldr	r3, [r7, #12]
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	3308      	adds	r3, #8
 801c3b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801c3b6:	623a      	str	r2, [r7, #32]
 801c3b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3ba:	69f9      	ldr	r1, [r7, #28]
 801c3bc:	6a3a      	ldr	r2, [r7, #32]
 801c3be:	e841 2300 	strex	r3, r2, [r1]
 801c3c2:	61bb      	str	r3, [r7, #24]
   return(result);
 801c3c4:	69bb      	ldr	r3, [r7, #24]
 801c3c6:	2b00      	cmp	r3, #0
 801c3c8:	d1e5      	bne.n	801c396 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	2220      	movs	r2, #32
 801c3ce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801c3d0:	68fb      	ldr	r3, [r7, #12]
 801c3d2:	2220      	movs	r2, #32
 801c3d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801c3d8:	68fb      	ldr	r3, [r7, #12]
 801c3da:	2220      	movs	r2, #32
 801c3dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801c3e0:	68fb      	ldr	r3, [r7, #12]
 801c3e2:	2200      	movs	r2, #0
 801c3e4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801c3e8:	2303      	movs	r3, #3
 801c3ea:	e010      	b.n	801c40e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801c3ec:	68fb      	ldr	r3, [r7, #12]
 801c3ee:	681b      	ldr	r3, [r3, #0]
 801c3f0:	69da      	ldr	r2, [r3, #28]
 801c3f2:	68bb      	ldr	r3, [r7, #8]
 801c3f4:	4013      	ands	r3, r2
 801c3f6:	68ba      	ldr	r2, [r7, #8]
 801c3f8:	429a      	cmp	r2, r3
 801c3fa:	bf0c      	ite	eq
 801c3fc:	2301      	moveq	r3, #1
 801c3fe:	2300      	movne	r3, #0
 801c400:	b2db      	uxtb	r3, r3
 801c402:	461a      	mov	r2, r3
 801c404:	79fb      	ldrb	r3, [r7, #7]
 801c406:	429a      	cmp	r2, r3
 801c408:	f43f af48 	beq.w	801c29c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801c40c:	2300      	movs	r3, #0
}
 801c40e:	4618      	mov	r0, r3
 801c410:	3770      	adds	r7, #112	; 0x70
 801c412:	46bd      	mov	sp, r7
 801c414:	bd80      	pop	{r7, pc}
	...

0801c418 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c418:	b480      	push	{r7}
 801c41a:	b097      	sub	sp, #92	; 0x5c
 801c41c:	af00      	add	r7, sp, #0
 801c41e:	60f8      	str	r0, [r7, #12]
 801c420:	60b9      	str	r1, [r7, #8]
 801c422:	4613      	mov	r3, r2
 801c424:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801c426:	68fb      	ldr	r3, [r7, #12]
 801c428:	68ba      	ldr	r2, [r7, #8]
 801c42a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801c42c:	68fb      	ldr	r3, [r7, #12]
 801c42e:	88fa      	ldrh	r2, [r7, #6]
 801c430:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801c434:	68fb      	ldr	r3, [r7, #12]
 801c436:	88fa      	ldrh	r2, [r7, #6]
 801c438:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801c43c:	68fb      	ldr	r3, [r7, #12]
 801c43e:	2200      	movs	r2, #0
 801c440:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801c442:	68fb      	ldr	r3, [r7, #12]
 801c444:	689b      	ldr	r3, [r3, #8]
 801c446:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c44a:	d10e      	bne.n	801c46a <UART_Start_Receive_IT+0x52>
 801c44c:	68fb      	ldr	r3, [r7, #12]
 801c44e:	691b      	ldr	r3, [r3, #16]
 801c450:	2b00      	cmp	r3, #0
 801c452:	d105      	bne.n	801c460 <UART_Start_Receive_IT+0x48>
 801c454:	68fb      	ldr	r3, [r7, #12]
 801c456:	f240 12ff 	movw	r2, #511	; 0x1ff
 801c45a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c45e:	e02d      	b.n	801c4bc <UART_Start_Receive_IT+0xa4>
 801c460:	68fb      	ldr	r3, [r7, #12]
 801c462:	22ff      	movs	r2, #255	; 0xff
 801c464:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c468:	e028      	b.n	801c4bc <UART_Start_Receive_IT+0xa4>
 801c46a:	68fb      	ldr	r3, [r7, #12]
 801c46c:	689b      	ldr	r3, [r3, #8]
 801c46e:	2b00      	cmp	r3, #0
 801c470:	d10d      	bne.n	801c48e <UART_Start_Receive_IT+0x76>
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	691b      	ldr	r3, [r3, #16]
 801c476:	2b00      	cmp	r3, #0
 801c478:	d104      	bne.n	801c484 <UART_Start_Receive_IT+0x6c>
 801c47a:	68fb      	ldr	r3, [r7, #12]
 801c47c:	22ff      	movs	r2, #255	; 0xff
 801c47e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c482:	e01b      	b.n	801c4bc <UART_Start_Receive_IT+0xa4>
 801c484:	68fb      	ldr	r3, [r7, #12]
 801c486:	227f      	movs	r2, #127	; 0x7f
 801c488:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c48c:	e016      	b.n	801c4bc <UART_Start_Receive_IT+0xa4>
 801c48e:	68fb      	ldr	r3, [r7, #12]
 801c490:	689b      	ldr	r3, [r3, #8]
 801c492:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801c496:	d10d      	bne.n	801c4b4 <UART_Start_Receive_IT+0x9c>
 801c498:	68fb      	ldr	r3, [r7, #12]
 801c49a:	691b      	ldr	r3, [r3, #16]
 801c49c:	2b00      	cmp	r3, #0
 801c49e:	d104      	bne.n	801c4aa <UART_Start_Receive_IT+0x92>
 801c4a0:	68fb      	ldr	r3, [r7, #12]
 801c4a2:	227f      	movs	r2, #127	; 0x7f
 801c4a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c4a8:	e008      	b.n	801c4bc <UART_Start_Receive_IT+0xa4>
 801c4aa:	68fb      	ldr	r3, [r7, #12]
 801c4ac:	223f      	movs	r2, #63	; 0x3f
 801c4ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801c4b2:	e003      	b.n	801c4bc <UART_Start_Receive_IT+0xa4>
 801c4b4:	68fb      	ldr	r3, [r7, #12]
 801c4b6:	2200      	movs	r2, #0
 801c4b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801c4bc:	68fb      	ldr	r3, [r7, #12]
 801c4be:	2200      	movs	r2, #0
 801c4c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801c4c4:	68fb      	ldr	r3, [r7, #12]
 801c4c6:	2222      	movs	r2, #34	; 0x22
 801c4c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c4cc:	68fb      	ldr	r3, [r7, #12]
 801c4ce:	681b      	ldr	r3, [r3, #0]
 801c4d0:	3308      	adds	r3, #8
 801c4d2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c4d6:	e853 3f00 	ldrex	r3, [r3]
 801c4da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c4dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c4de:	f043 0301 	orr.w	r3, r3, #1
 801c4e2:	657b      	str	r3, [r7, #84]	; 0x54
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	681b      	ldr	r3, [r3, #0]
 801c4e8:	3308      	adds	r3, #8
 801c4ea:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801c4ec:	64ba      	str	r2, [r7, #72]	; 0x48
 801c4ee:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4f0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801c4f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c4f4:	e841 2300 	strex	r3, r2, [r1]
 801c4f8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801c4fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801c4fc:	2b00      	cmp	r3, #0
 801c4fe:	d1e5      	bne.n	801c4cc <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801c500:	68fb      	ldr	r3, [r7, #12]
 801c502:	689b      	ldr	r3, [r3, #8]
 801c504:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801c508:	d107      	bne.n	801c51a <UART_Start_Receive_IT+0x102>
 801c50a:	68fb      	ldr	r3, [r7, #12]
 801c50c:	691b      	ldr	r3, [r3, #16]
 801c50e:	2b00      	cmp	r3, #0
 801c510:	d103      	bne.n	801c51a <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801c512:	68fb      	ldr	r3, [r7, #12]
 801c514:	4a21      	ldr	r2, [pc, #132]	; (801c59c <UART_Start_Receive_IT+0x184>)
 801c516:	669a      	str	r2, [r3, #104]	; 0x68
 801c518:	e002      	b.n	801c520 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801c51a:	68fb      	ldr	r3, [r7, #12]
 801c51c:	4a20      	ldr	r2, [pc, #128]	; (801c5a0 <UART_Start_Receive_IT+0x188>)
 801c51e:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801c520:	68fb      	ldr	r3, [r7, #12]
 801c522:	691b      	ldr	r3, [r3, #16]
 801c524:	2b00      	cmp	r3, #0
 801c526:	d019      	beq.n	801c55c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	681b      	ldr	r3, [r3, #0]
 801c52c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c530:	e853 3f00 	ldrex	r3, [r3]
 801c534:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c538:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801c53c:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c53e:	68fb      	ldr	r3, [r7, #12]
 801c540:	681b      	ldr	r3, [r3, #0]
 801c542:	461a      	mov	r2, r3
 801c544:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c546:	637b      	str	r3, [r7, #52]	; 0x34
 801c548:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c54a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801c54c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801c54e:	e841 2300 	strex	r3, r2, [r1]
 801c552:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801c554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c556:	2b00      	cmp	r3, #0
 801c558:	d1e6      	bne.n	801c528 <UART_Start_Receive_IT+0x110>
 801c55a:	e018      	b.n	801c58e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801c55c:	68fb      	ldr	r3, [r7, #12]
 801c55e:	681b      	ldr	r3, [r3, #0]
 801c560:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c562:	697b      	ldr	r3, [r7, #20]
 801c564:	e853 3f00 	ldrex	r3, [r3]
 801c568:	613b      	str	r3, [r7, #16]
   return(result);
 801c56a:	693b      	ldr	r3, [r7, #16]
 801c56c:	f043 0320 	orr.w	r3, r3, #32
 801c570:	653b      	str	r3, [r7, #80]	; 0x50
 801c572:	68fb      	ldr	r3, [r7, #12]
 801c574:	681b      	ldr	r3, [r3, #0]
 801c576:	461a      	mov	r2, r3
 801c578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c57a:	623b      	str	r3, [r7, #32]
 801c57c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c57e:	69f9      	ldr	r1, [r7, #28]
 801c580:	6a3a      	ldr	r2, [r7, #32]
 801c582:	e841 2300 	strex	r3, r2, [r1]
 801c586:	61bb      	str	r3, [r7, #24]
   return(result);
 801c588:	69bb      	ldr	r3, [r7, #24]
 801c58a:	2b00      	cmp	r3, #0
 801c58c:	d1e6      	bne.n	801c55c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801c58e:	2300      	movs	r3, #0
}
 801c590:	4618      	mov	r0, r3
 801c592:	375c      	adds	r7, #92	; 0x5c
 801c594:	46bd      	mov	sp, r7
 801c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c59a:	4770      	bx	lr
 801c59c:	0801c863 	.word	0x0801c863
 801c5a0:	0801c6f5 	.word	0x0801c6f5

0801c5a4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c5a4:	b480      	push	{r7}
 801c5a6:	b095      	sub	sp, #84	; 0x54
 801c5a8:	af00      	add	r7, sp, #0
 801c5aa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c5ac:	687b      	ldr	r3, [r7, #4]
 801c5ae:	681b      	ldr	r3, [r3, #0]
 801c5b0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c5b4:	e853 3f00 	ldrex	r3, [r3]
 801c5b8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c5ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c5bc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c5c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c5c2:	687b      	ldr	r3, [r7, #4]
 801c5c4:	681b      	ldr	r3, [r3, #0]
 801c5c6:	461a      	mov	r2, r3
 801c5c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c5ca:	643b      	str	r3, [r7, #64]	; 0x40
 801c5cc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c5ce:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c5d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c5d2:	e841 2300 	strex	r3, r2, [r1]
 801c5d6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c5d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c5da:	2b00      	cmp	r3, #0
 801c5dc:	d1e6      	bne.n	801c5ac <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c5de:	687b      	ldr	r3, [r7, #4]
 801c5e0:	681b      	ldr	r3, [r3, #0]
 801c5e2:	3308      	adds	r3, #8
 801c5e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c5e6:	6a3b      	ldr	r3, [r7, #32]
 801c5e8:	e853 3f00 	ldrex	r3, [r3]
 801c5ec:	61fb      	str	r3, [r7, #28]
   return(result);
 801c5ee:	69fb      	ldr	r3, [r7, #28]
 801c5f0:	f023 0301 	bic.w	r3, r3, #1
 801c5f4:	64bb      	str	r3, [r7, #72]	; 0x48
 801c5f6:	687b      	ldr	r3, [r7, #4]
 801c5f8:	681b      	ldr	r3, [r3, #0]
 801c5fa:	3308      	adds	r3, #8
 801c5fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c5fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c600:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c602:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c604:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c606:	e841 2300 	strex	r3, r2, [r1]
 801c60a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c60e:	2b00      	cmp	r3, #0
 801c610:	d1e5      	bne.n	801c5de <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c612:	687b      	ldr	r3, [r7, #4]
 801c614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c616:	2b01      	cmp	r3, #1
 801c618:	d118      	bne.n	801c64c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c61a:	687b      	ldr	r3, [r7, #4]
 801c61c:	681b      	ldr	r3, [r3, #0]
 801c61e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c620:	68fb      	ldr	r3, [r7, #12]
 801c622:	e853 3f00 	ldrex	r3, [r3]
 801c626:	60bb      	str	r3, [r7, #8]
   return(result);
 801c628:	68bb      	ldr	r3, [r7, #8]
 801c62a:	f023 0310 	bic.w	r3, r3, #16
 801c62e:	647b      	str	r3, [r7, #68]	; 0x44
 801c630:	687b      	ldr	r3, [r7, #4]
 801c632:	681b      	ldr	r3, [r3, #0]
 801c634:	461a      	mov	r2, r3
 801c636:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c638:	61bb      	str	r3, [r7, #24]
 801c63a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c63c:	6979      	ldr	r1, [r7, #20]
 801c63e:	69ba      	ldr	r2, [r7, #24]
 801c640:	e841 2300 	strex	r3, r2, [r1]
 801c644:	613b      	str	r3, [r7, #16]
   return(result);
 801c646:	693b      	ldr	r3, [r7, #16]
 801c648:	2b00      	cmp	r3, #0
 801c64a:	d1e6      	bne.n	801c61a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c64c:	687b      	ldr	r3, [r7, #4]
 801c64e:	2220      	movs	r2, #32
 801c650:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	2200      	movs	r2, #0
 801c658:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	2200      	movs	r2, #0
 801c65e:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c660:	bf00      	nop
 801c662:	3754      	adds	r7, #84	; 0x54
 801c664:	46bd      	mov	sp, r7
 801c666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c66a:	4770      	bx	lr

0801c66c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c66c:	b580      	push	{r7, lr}
 801c66e:	b084      	sub	sp, #16
 801c670:	af00      	add	r7, sp, #0
 801c672:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c678:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c67a:	68fb      	ldr	r3, [r7, #12]
 801c67c:	2200      	movs	r2, #0
 801c67e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c682:	68fb      	ldr	r3, [r7, #12]
 801c684:	2200      	movs	r2, #0
 801c686:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c68a:	68fb      	ldr	r3, [r7, #12]
 801c68c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c690:	68f8      	ldr	r0, [r7, #12]
 801c692:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c694:	bf00      	nop
 801c696:	3710      	adds	r7, #16
 801c698:	46bd      	mov	sp, r7
 801c69a:	bd80      	pop	{r7, pc}

0801c69c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c69c:	b580      	push	{r7, lr}
 801c69e:	b088      	sub	sp, #32
 801c6a0:	af00      	add	r7, sp, #0
 801c6a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c6a4:	687b      	ldr	r3, [r7, #4]
 801c6a6:	681b      	ldr	r3, [r3, #0]
 801c6a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c6aa:	68fb      	ldr	r3, [r7, #12]
 801c6ac:	e853 3f00 	ldrex	r3, [r3]
 801c6b0:	60bb      	str	r3, [r7, #8]
   return(result);
 801c6b2:	68bb      	ldr	r3, [r7, #8]
 801c6b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c6b8:	61fb      	str	r3, [r7, #28]
 801c6ba:	687b      	ldr	r3, [r7, #4]
 801c6bc:	681b      	ldr	r3, [r3, #0]
 801c6be:	461a      	mov	r2, r3
 801c6c0:	69fb      	ldr	r3, [r7, #28]
 801c6c2:	61bb      	str	r3, [r7, #24]
 801c6c4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c6c6:	6979      	ldr	r1, [r7, #20]
 801c6c8:	69ba      	ldr	r2, [r7, #24]
 801c6ca:	e841 2300 	strex	r3, r2, [r1]
 801c6ce:	613b      	str	r3, [r7, #16]
   return(result);
 801c6d0:	693b      	ldr	r3, [r7, #16]
 801c6d2:	2b00      	cmp	r3, #0
 801c6d4:	d1e6      	bne.n	801c6a4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	2220      	movs	r2, #32
 801c6da:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c6dc:	687b      	ldr	r3, [r7, #4]
 801c6de:	2200      	movs	r2, #0
 801c6e0:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c6e2:	687b      	ldr	r3, [r7, #4]
 801c6e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c6e8:	6878      	ldr	r0, [r7, #4]
 801c6ea:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c6ec:	bf00      	nop
 801c6ee:	3720      	adds	r7, #32
 801c6f0:	46bd      	mov	sp, r7
 801c6f2:	bd80      	pop	{r7, pc}

0801c6f4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c6f4:	b580      	push	{r7, lr}
 801c6f6:	b096      	sub	sp, #88	; 0x58
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c702:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c70c:	2b22      	cmp	r3, #34	; 0x22
 801c70e:	f040 809c 	bne.w	801c84a <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c712:	687b      	ldr	r3, [r7, #4]
 801c714:	681b      	ldr	r3, [r3, #0]
 801c716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c718:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c71c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c720:	b2d9      	uxtb	r1, r3
 801c722:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c726:	b2da      	uxtb	r2, r3
 801c728:	687b      	ldr	r3, [r7, #4]
 801c72a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c72c:	400a      	ands	r2, r1
 801c72e:	b2d2      	uxtb	r2, r2
 801c730:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c732:	687b      	ldr	r3, [r7, #4]
 801c734:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c736:	1c5a      	adds	r2, r3, #1
 801c738:	687b      	ldr	r3, [r7, #4]
 801c73a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c742:	b29b      	uxth	r3, r3
 801c744:	3b01      	subs	r3, #1
 801c746:	b29a      	uxth	r2, r3
 801c748:	687b      	ldr	r3, [r7, #4]
 801c74a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c74e:	687b      	ldr	r3, [r7, #4]
 801c750:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c754:	b29b      	uxth	r3, r3
 801c756:	2b00      	cmp	r3, #0
 801c758:	d17f      	bne.n	801c85a <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c75a:	687b      	ldr	r3, [r7, #4]
 801c75c:	681b      	ldr	r3, [r3, #0]
 801c75e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c762:	e853 3f00 	ldrex	r3, [r3]
 801c766:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c76a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c76e:	653b      	str	r3, [r7, #80]	; 0x50
 801c770:	687b      	ldr	r3, [r7, #4]
 801c772:	681b      	ldr	r3, [r3, #0]
 801c774:	461a      	mov	r2, r3
 801c776:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c778:	647b      	str	r3, [r7, #68]	; 0x44
 801c77a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c77c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c77e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c780:	e841 2300 	strex	r3, r2, [r1]
 801c784:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c788:	2b00      	cmp	r3, #0
 801c78a:	d1e6      	bne.n	801c75a <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c78c:	687b      	ldr	r3, [r7, #4]
 801c78e:	681b      	ldr	r3, [r3, #0]
 801c790:	3308      	adds	r3, #8
 801c792:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c796:	e853 3f00 	ldrex	r3, [r3]
 801c79a:	623b      	str	r3, [r7, #32]
   return(result);
 801c79c:	6a3b      	ldr	r3, [r7, #32]
 801c79e:	f023 0301 	bic.w	r3, r3, #1
 801c7a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c7a4:	687b      	ldr	r3, [r7, #4]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	3308      	adds	r3, #8
 801c7aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c7ac:	633a      	str	r2, [r7, #48]	; 0x30
 801c7ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c7b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c7b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c7b4:	e841 2300 	strex	r3, r2, [r1]
 801c7b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c7ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c7bc:	2b00      	cmp	r3, #0
 801c7be:	d1e5      	bne.n	801c78c <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c7c0:	687b      	ldr	r3, [r7, #4]
 801c7c2:	2220      	movs	r2, #32
 801c7c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c7c8:	687b      	ldr	r3, [r7, #4]
 801c7ca:	2200      	movs	r2, #0
 801c7cc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c7ce:	687b      	ldr	r3, [r7, #4]
 801c7d0:	2200      	movs	r2, #0
 801c7d2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c7d4:	687b      	ldr	r3, [r7, #4]
 801c7d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c7d8:	2b01      	cmp	r3, #1
 801c7da:	d130      	bne.n	801c83e <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c7dc:	687b      	ldr	r3, [r7, #4]
 801c7de:	2200      	movs	r2, #0
 801c7e0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	681b      	ldr	r3, [r3, #0]
 801c7e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c7e8:	693b      	ldr	r3, [r7, #16]
 801c7ea:	e853 3f00 	ldrex	r3, [r3]
 801c7ee:	60fb      	str	r3, [r7, #12]
   return(result);
 801c7f0:	68fb      	ldr	r3, [r7, #12]
 801c7f2:	f023 0310 	bic.w	r3, r3, #16
 801c7f6:	64bb      	str	r3, [r7, #72]	; 0x48
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	681b      	ldr	r3, [r3, #0]
 801c7fc:	461a      	mov	r2, r3
 801c7fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c800:	61fb      	str	r3, [r7, #28]
 801c802:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c804:	69b9      	ldr	r1, [r7, #24]
 801c806:	69fa      	ldr	r2, [r7, #28]
 801c808:	e841 2300 	strex	r3, r2, [r1]
 801c80c:	617b      	str	r3, [r7, #20]
   return(result);
 801c80e:	697b      	ldr	r3, [r7, #20]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d1e6      	bne.n	801c7e2 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c814:	687b      	ldr	r3, [r7, #4]
 801c816:	681b      	ldr	r3, [r3, #0]
 801c818:	69db      	ldr	r3, [r3, #28]
 801c81a:	f003 0310 	and.w	r3, r3, #16
 801c81e:	2b10      	cmp	r3, #16
 801c820:	d103      	bne.n	801c82a <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c822:	687b      	ldr	r3, [r7, #4]
 801c824:	681b      	ldr	r3, [r3, #0]
 801c826:	2210      	movs	r2, #16
 801c828:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c82a:	687b      	ldr	r3, [r7, #4]
 801c82c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c830:	687a      	ldr	r2, [r7, #4]
 801c832:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c836:	4611      	mov	r1, r2
 801c838:	6878      	ldr	r0, [r7, #4]
 801c83a:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c83c:	e00d      	b.n	801c85a <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801c83e:	687b      	ldr	r3, [r7, #4]
 801c840:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c844:	6878      	ldr	r0, [r7, #4]
 801c846:	4798      	blx	r3
}
 801c848:	e007      	b.n	801c85a <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	699a      	ldr	r2, [r3, #24]
 801c850:	687b      	ldr	r3, [r7, #4]
 801c852:	681b      	ldr	r3, [r3, #0]
 801c854:	f042 0208 	orr.w	r2, r2, #8
 801c858:	619a      	str	r2, [r3, #24]
}
 801c85a:	bf00      	nop
 801c85c:	3758      	adds	r7, #88	; 0x58
 801c85e:	46bd      	mov	sp, r7
 801c860:	bd80      	pop	{r7, pc}

0801c862 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c862:	b580      	push	{r7, lr}
 801c864:	b096      	sub	sp, #88	; 0x58
 801c866:	af00      	add	r7, sp, #0
 801c868:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c86a:	687b      	ldr	r3, [r7, #4]
 801c86c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c870:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c874:	687b      	ldr	r3, [r7, #4]
 801c876:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c87a:	2b22      	cmp	r3, #34	; 0x22
 801c87c:	f040 809c 	bne.w	801c9b8 <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c886:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c88a:	687b      	ldr	r3, [r7, #4]
 801c88c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c88e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801c890:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c894:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c898:	4013      	ands	r3, r2
 801c89a:	b29a      	uxth	r2, r3
 801c89c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c89e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c8a0:	687b      	ldr	r3, [r7, #4]
 801c8a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c8a4:	1c9a      	adds	r2, r3, #2
 801c8a6:	687b      	ldr	r3, [r7, #4]
 801c8a8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c8b0:	b29b      	uxth	r3, r3
 801c8b2:	3b01      	subs	r3, #1
 801c8b4:	b29a      	uxth	r2, r3
 801c8b6:	687b      	ldr	r3, [r7, #4]
 801c8b8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c8c2:	b29b      	uxth	r3, r3
 801c8c4:	2b00      	cmp	r3, #0
 801c8c6:	d17f      	bne.n	801c9c8 <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c8c8:	687b      	ldr	r3, [r7, #4]
 801c8ca:	681b      	ldr	r3, [r3, #0]
 801c8cc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c8ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c8d0:	e853 3f00 	ldrex	r3, [r3]
 801c8d4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c8d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c8d8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c8dc:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c8de:	687b      	ldr	r3, [r7, #4]
 801c8e0:	681b      	ldr	r3, [r3, #0]
 801c8e2:	461a      	mov	r2, r3
 801c8e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c8e6:	643b      	str	r3, [r7, #64]	; 0x40
 801c8e8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c8ea:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c8ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c8ee:	e841 2300 	strex	r3, r2, [r1]
 801c8f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c8f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c8f6:	2b00      	cmp	r3, #0
 801c8f8:	d1e6      	bne.n	801c8c8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c8fa:	687b      	ldr	r3, [r7, #4]
 801c8fc:	681b      	ldr	r3, [r3, #0]
 801c8fe:	3308      	adds	r3, #8
 801c900:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c902:	6a3b      	ldr	r3, [r7, #32]
 801c904:	e853 3f00 	ldrex	r3, [r3]
 801c908:	61fb      	str	r3, [r7, #28]
   return(result);
 801c90a:	69fb      	ldr	r3, [r7, #28]
 801c90c:	f023 0301 	bic.w	r3, r3, #1
 801c910:	64bb      	str	r3, [r7, #72]	; 0x48
 801c912:	687b      	ldr	r3, [r7, #4]
 801c914:	681b      	ldr	r3, [r3, #0]
 801c916:	3308      	adds	r3, #8
 801c918:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c91a:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c91c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c91e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c922:	e841 2300 	strex	r3, r2, [r1]
 801c926:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d1e5      	bne.n	801c8fa <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c92e:	687b      	ldr	r3, [r7, #4]
 801c930:	2220      	movs	r2, #32
 801c932:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c936:	687b      	ldr	r3, [r7, #4]
 801c938:	2200      	movs	r2, #0
 801c93a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c93c:	687b      	ldr	r3, [r7, #4]
 801c93e:	2200      	movs	r2, #0
 801c940:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c942:	687b      	ldr	r3, [r7, #4]
 801c944:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c946:	2b01      	cmp	r3, #1
 801c948:	d130      	bne.n	801c9ac <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c94a:	687b      	ldr	r3, [r7, #4]
 801c94c:	2200      	movs	r2, #0
 801c94e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c950:	687b      	ldr	r3, [r7, #4]
 801c952:	681b      	ldr	r3, [r3, #0]
 801c954:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c956:	68fb      	ldr	r3, [r7, #12]
 801c958:	e853 3f00 	ldrex	r3, [r3]
 801c95c:	60bb      	str	r3, [r7, #8]
   return(result);
 801c95e:	68bb      	ldr	r3, [r7, #8]
 801c960:	f023 0310 	bic.w	r3, r3, #16
 801c964:	647b      	str	r3, [r7, #68]	; 0x44
 801c966:	687b      	ldr	r3, [r7, #4]
 801c968:	681b      	ldr	r3, [r3, #0]
 801c96a:	461a      	mov	r2, r3
 801c96c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c96e:	61bb      	str	r3, [r7, #24]
 801c970:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c972:	6979      	ldr	r1, [r7, #20]
 801c974:	69ba      	ldr	r2, [r7, #24]
 801c976:	e841 2300 	strex	r3, r2, [r1]
 801c97a:	613b      	str	r3, [r7, #16]
   return(result);
 801c97c:	693b      	ldr	r3, [r7, #16]
 801c97e:	2b00      	cmp	r3, #0
 801c980:	d1e6      	bne.n	801c950 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c982:	687b      	ldr	r3, [r7, #4]
 801c984:	681b      	ldr	r3, [r3, #0]
 801c986:	69db      	ldr	r3, [r3, #28]
 801c988:	f003 0310 	and.w	r3, r3, #16
 801c98c:	2b10      	cmp	r3, #16
 801c98e:	d103      	bne.n	801c998 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c990:	687b      	ldr	r3, [r7, #4]
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	2210      	movs	r2, #16
 801c996:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c998:	687b      	ldr	r3, [r7, #4]
 801c99a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c99e:	687a      	ldr	r2, [r7, #4]
 801c9a0:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c9a4:	4611      	mov	r1, r2
 801c9a6:	6878      	ldr	r0, [r7, #4]
 801c9a8:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c9aa:	e00d      	b.n	801c9c8 <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801c9ac:	687b      	ldr	r3, [r7, #4]
 801c9ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c9b2:	6878      	ldr	r0, [r7, #4]
 801c9b4:	4798      	blx	r3
}
 801c9b6:	e007      	b.n	801c9c8 <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	681b      	ldr	r3, [r3, #0]
 801c9bc:	699a      	ldr	r2, [r3, #24]
 801c9be:	687b      	ldr	r3, [r7, #4]
 801c9c0:	681b      	ldr	r3, [r3, #0]
 801c9c2:	f042 0208 	orr.w	r2, r2, #8
 801c9c6:	619a      	str	r2, [r3, #24]
}
 801c9c8:	bf00      	nop
 801c9ca:	3758      	adds	r7, #88	; 0x58
 801c9cc:	46bd      	mov	sp, r7
 801c9ce:	bd80      	pop	{r7, pc}

0801c9d0 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c9d0:	b580      	push	{r7, lr}
 801c9d2:	b08c      	sub	sp, #48	; 0x30
 801c9d4:	af00      	add	r7, sp, #0
 801c9d6:	60f8      	str	r0, [r7, #12]
 801c9d8:	60b9      	str	r1, [r7, #8]
 801c9da:	4613      	mov	r3, r2
 801c9dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c9de:	68fb      	ldr	r3, [r7, #12]
 801c9e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c9e4:	2b20      	cmp	r3, #32
 801c9e6:	d142      	bne.n	801ca6e <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801c9e8:	68bb      	ldr	r3, [r7, #8]
 801c9ea:	2b00      	cmp	r3, #0
 801c9ec:	d002      	beq.n	801c9f4 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801c9ee:	88fb      	ldrh	r3, [r7, #6]
 801c9f0:	2b00      	cmp	r3, #0
 801c9f2:	d101      	bne.n	801c9f8 <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801c9f4:	2301      	movs	r3, #1
 801c9f6:	e03b      	b.n	801ca70 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801c9f8:	68fb      	ldr	r3, [r7, #12]
 801c9fa:	2201      	movs	r2, #1
 801c9fc:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c9fe:	68fb      	ldr	r3, [r7, #12]
 801ca00:	2200      	movs	r2, #0
 801ca02:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801ca04:	88fb      	ldrh	r3, [r7, #6]
 801ca06:	461a      	mov	r2, r3
 801ca08:	68b9      	ldr	r1, [r7, #8]
 801ca0a:	68f8      	ldr	r0, [r7, #12]
 801ca0c:	f7ff fd04 	bl	801c418 <UART_Start_Receive_IT>
 801ca10:	4603      	mov	r3, r0
 801ca12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801ca16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ca1a:	2b00      	cmp	r3, #0
 801ca1c:	d124      	bne.n	801ca68 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801ca1e:	68fb      	ldr	r3, [r7, #12]
 801ca20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ca22:	2b01      	cmp	r3, #1
 801ca24:	d11d      	bne.n	801ca62 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ca26:	68fb      	ldr	r3, [r7, #12]
 801ca28:	681b      	ldr	r3, [r3, #0]
 801ca2a:	2210      	movs	r2, #16
 801ca2c:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801ca2e:	68fb      	ldr	r3, [r7, #12]
 801ca30:	681b      	ldr	r3, [r3, #0]
 801ca32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ca34:	69bb      	ldr	r3, [r7, #24]
 801ca36:	e853 3f00 	ldrex	r3, [r3]
 801ca3a:	617b      	str	r3, [r7, #20]
   return(result);
 801ca3c:	697b      	ldr	r3, [r7, #20]
 801ca3e:	f043 0310 	orr.w	r3, r3, #16
 801ca42:	62bb      	str	r3, [r7, #40]	; 0x28
 801ca44:	68fb      	ldr	r3, [r7, #12]
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	461a      	mov	r2, r3
 801ca4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca4c:	627b      	str	r3, [r7, #36]	; 0x24
 801ca4e:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ca50:	6a39      	ldr	r1, [r7, #32]
 801ca52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ca54:	e841 2300 	strex	r3, r2, [r1]
 801ca58:	61fb      	str	r3, [r7, #28]
   return(result);
 801ca5a:	69fb      	ldr	r3, [r7, #28]
 801ca5c:	2b00      	cmp	r3, #0
 801ca5e:	d1e6      	bne.n	801ca2e <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801ca60:	e002      	b.n	801ca68 <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801ca62:	2301      	movs	r3, #1
 801ca64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801ca68:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801ca6c:	e000      	b.n	801ca70 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801ca6e:	2302      	movs	r3, #2
  }
}
 801ca70:	4618      	mov	r0, r3
 801ca72:	3730      	adds	r7, #48	; 0x30
 801ca74:	46bd      	mov	sp, r7
 801ca76:	bd80      	pop	{r7, pc}

0801ca78 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801ca78:	b580      	push	{r7, lr}
 801ca7a:	b084      	sub	sp, #16
 801ca7c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801ca7e:	4b2f      	ldr	r3, [pc, #188]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801ca80:	22c0      	movs	r2, #192	; 0xc0
 801ca82:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801ca84:	4b2d      	ldr	r3, [pc, #180]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801ca86:	22a8      	movs	r2, #168	; 0xa8
 801ca88:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801ca8a:	4b2c      	ldr	r3, [pc, #176]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801ca8c:	220c      	movs	r2, #12
 801ca8e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801ca90:	4b2a      	ldr	r3, [pc, #168]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801ca92:	2264      	movs	r2, #100	; 0x64
 801ca94:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801ca96:	4b2a      	ldr	r3, [pc, #168]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801ca98:	22ff      	movs	r2, #255	; 0xff
 801ca9a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801ca9c:	4b28      	ldr	r3, [pc, #160]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801ca9e:	22ff      	movs	r2, #255	; 0xff
 801caa0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801caa2:	4b27      	ldr	r3, [pc, #156]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801caa4:	22ff      	movs	r2, #255	; 0xff
 801caa6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801caa8:	4b25      	ldr	r3, [pc, #148]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801caaa:	2200      	movs	r2, #0
 801caac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801caae:	4b25      	ldr	r3, [pc, #148]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cab0:	22c0      	movs	r2, #192	; 0xc0
 801cab2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801cab4:	4b23      	ldr	r3, [pc, #140]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cab6:	22a8      	movs	r2, #168	; 0xa8
 801cab8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801caba:	4b22      	ldr	r3, [pc, #136]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cabc:	220c      	movs	r2, #12
 801cabe:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801cac0:	4b20      	ldr	r3, [pc, #128]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cac2:	2201      	movs	r2, #1
 801cac4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801cac6:	4b20      	ldr	r3, [pc, #128]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801cac8:	781b      	ldrb	r3, [r3, #0]
 801caca:	2b01      	cmp	r3, #1
 801cacc:	d002      	beq.n	801cad4 <MX_LWIP_Init+0x5c>
 801cace:	2b02      	cmp	r3, #2
 801cad0:	d03c      	beq.n	801cb4c <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801cad2:	e162      	b.n	801cd9a <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801cad4:	4b1c      	ldr	r3, [pc, #112]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801cad6:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801cada:	4b18      	ldr	r3, [pc, #96]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801cadc:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801cade:	4b1a      	ldr	r3, [pc, #104]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801cae0:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801cae4:	4b15      	ldr	r3, [pc, #84]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801cae6:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801cae8:	4b17      	ldr	r3, [pc, #92]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801caea:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801caee:	4b13      	ldr	r3, [pc, #76]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801caf0:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801caf2:	4b15      	ldr	r3, [pc, #84]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801caf4:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
 801caf8:	4b10      	ldr	r3, [pc, #64]	; (801cb3c <MX_LWIP_Init+0xc4>)
 801cafa:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801cafc:	4b10      	ldr	r3, [pc, #64]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801cafe:	22ff      	movs	r2, #255	; 0xff
 801cb00:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801cb02:	4b0f      	ldr	r3, [pc, #60]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801cb04:	22ff      	movs	r2, #255	; 0xff
 801cb06:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801cb08:	4b0d      	ldr	r3, [pc, #52]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801cb0a:	22ff      	movs	r2, #255	; 0xff
 801cb0c:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801cb0e:	4b0c      	ldr	r3, [pc, #48]	; (801cb40 <MX_LWIP_Init+0xc8>)
 801cb10:	2200      	movs	r2, #0
 801cb12:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801cb14:	4b0c      	ldr	r3, [pc, #48]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801cb16:	f893 2037 	ldrb.w	r2, [r3, #55]	; 0x37
 801cb1a:	4b0a      	ldr	r3, [pc, #40]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cb1c:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801cb1e:	4b0a      	ldr	r3, [pc, #40]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801cb20:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 801cb24:	4b07      	ldr	r3, [pc, #28]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cb26:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801cb28:	4b07      	ldr	r3, [pc, #28]	; (801cb48 <MX_LWIP_Init+0xd0>)
 801cb2a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
 801cb2e:	4b05      	ldr	r3, [pc, #20]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cb30:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801cb32:	4b04      	ldr	r3, [pc, #16]	; (801cb44 <MX_LWIP_Init+0xcc>)
 801cb34:	2201      	movs	r2, #1
 801cb36:	70da      	strb	r2, [r3, #3]
		break;
 801cb38:	e03b      	b.n	801cbb2 <MX_LWIP_Init+0x13a>
 801cb3a:	bf00      	nop
 801cb3c:	2000c130 	.word	0x2000c130
 801cb40:	2000c134 	.word	0x2000c134
 801cb44:	2000c138 	.word	0x2000c138
 801cb48:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801cb4c:	4b94      	ldr	r3, [pc, #592]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cb4e:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801cb52:	4b94      	ldr	r3, [pc, #592]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cb54:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801cb56:	4b92      	ldr	r3, [pc, #584]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cb58:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801cb5c:	4b91      	ldr	r3, [pc, #580]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cb5e:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801cb60:	4b8f      	ldr	r3, [pc, #572]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cb62:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801cb66:	4b8f      	ldr	r3, [pc, #572]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cb68:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801cb6a:	4b8d      	ldr	r3, [pc, #564]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cb6c:	f893 22a8 	ldrb.w	r2, [r3, #680]	; 0x2a8
 801cb70:	4b8c      	ldr	r3, [pc, #560]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cb72:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801cb74:	4b8c      	ldr	r3, [pc, #560]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cb76:	22ff      	movs	r2, #255	; 0xff
 801cb78:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801cb7a:	4b8b      	ldr	r3, [pc, #556]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cb7c:	22ff      	movs	r2, #255	; 0xff
 801cb7e:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801cb80:	4b89      	ldr	r3, [pc, #548]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cb82:	22ff      	movs	r2, #255	; 0xff
 801cb84:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801cb86:	4b88      	ldr	r3, [pc, #544]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cb88:	2200      	movs	r2, #0
 801cb8a:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801cb8c:	4b84      	ldr	r3, [pc, #528]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cb8e:	f893 22a5 	ldrb.w	r2, [r3, #677]	; 0x2a5
 801cb92:	4b86      	ldr	r3, [pc, #536]	; (801cdac <MX_LWIP_Init+0x334>)
 801cb94:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801cb96:	4b82      	ldr	r3, [pc, #520]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cb98:	f893 22a6 	ldrb.w	r2, [r3, #678]	; 0x2a6
 801cb9c:	4b83      	ldr	r3, [pc, #524]	; (801cdac <MX_LWIP_Init+0x334>)
 801cb9e:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801cba0:	4b7f      	ldr	r3, [pc, #508]	; (801cda0 <MX_LWIP_Init+0x328>)
 801cba2:	f893 22a7 	ldrb.w	r2, [r3, #679]	; 0x2a7
 801cba6:	4b81      	ldr	r3, [pc, #516]	; (801cdac <MX_LWIP_Init+0x334>)
 801cba8:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801cbaa:	4b80      	ldr	r3, [pc, #512]	; (801cdac <MX_LWIP_Init+0x334>)
 801cbac:	2201      	movs	r2, #1
 801cbae:	70da      	strb	r2, [r3, #3]
		break;
 801cbb0:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801cbb2:	f000 fd42 	bl	801d63a <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801cbb6:	4b7b      	ldr	r3, [pc, #492]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbb8:	781b      	ldrb	r3, [r3, #0]
 801cbba:	061a      	lsls	r2, r3, #24
 801cbbc:	4b79      	ldr	r3, [pc, #484]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbbe:	785b      	ldrb	r3, [r3, #1]
 801cbc0:	041b      	lsls	r3, r3, #16
 801cbc2:	431a      	orrs	r2, r3
 801cbc4:	4b77      	ldr	r3, [pc, #476]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbc6:	789b      	ldrb	r3, [r3, #2]
 801cbc8:	021b      	lsls	r3, r3, #8
 801cbca:	4313      	orrs	r3, r2
 801cbcc:	4a75      	ldr	r2, [pc, #468]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbce:	78d2      	ldrb	r2, [r2, #3]
 801cbd0:	4313      	orrs	r3, r2
 801cbd2:	061a      	lsls	r2, r3, #24
 801cbd4:	4b73      	ldr	r3, [pc, #460]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbd6:	781b      	ldrb	r3, [r3, #0]
 801cbd8:	0619      	lsls	r1, r3, #24
 801cbda:	4b72      	ldr	r3, [pc, #456]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbdc:	785b      	ldrb	r3, [r3, #1]
 801cbde:	041b      	lsls	r3, r3, #16
 801cbe0:	4319      	orrs	r1, r3
 801cbe2:	4b70      	ldr	r3, [pc, #448]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbe4:	789b      	ldrb	r3, [r3, #2]
 801cbe6:	021b      	lsls	r3, r3, #8
 801cbe8:	430b      	orrs	r3, r1
 801cbea:	496e      	ldr	r1, [pc, #440]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbec:	78c9      	ldrb	r1, [r1, #3]
 801cbee:	430b      	orrs	r3, r1
 801cbf0:	021b      	lsls	r3, r3, #8
 801cbf2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cbf6:	431a      	orrs	r2, r3
 801cbf8:	4b6a      	ldr	r3, [pc, #424]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cbfa:	781b      	ldrb	r3, [r3, #0]
 801cbfc:	0619      	lsls	r1, r3, #24
 801cbfe:	4b69      	ldr	r3, [pc, #420]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc00:	785b      	ldrb	r3, [r3, #1]
 801cc02:	041b      	lsls	r3, r3, #16
 801cc04:	4319      	orrs	r1, r3
 801cc06:	4b67      	ldr	r3, [pc, #412]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc08:	789b      	ldrb	r3, [r3, #2]
 801cc0a:	021b      	lsls	r3, r3, #8
 801cc0c:	430b      	orrs	r3, r1
 801cc0e:	4965      	ldr	r1, [pc, #404]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc10:	78c9      	ldrb	r1, [r1, #3]
 801cc12:	430b      	orrs	r3, r1
 801cc14:	0a1b      	lsrs	r3, r3, #8
 801cc16:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cc1a:	431a      	orrs	r2, r3
 801cc1c:	4b61      	ldr	r3, [pc, #388]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc1e:	781b      	ldrb	r3, [r3, #0]
 801cc20:	0619      	lsls	r1, r3, #24
 801cc22:	4b60      	ldr	r3, [pc, #384]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc24:	785b      	ldrb	r3, [r3, #1]
 801cc26:	041b      	lsls	r3, r3, #16
 801cc28:	4319      	orrs	r1, r3
 801cc2a:	4b5e      	ldr	r3, [pc, #376]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc2c:	789b      	ldrb	r3, [r3, #2]
 801cc2e:	021b      	lsls	r3, r3, #8
 801cc30:	430b      	orrs	r3, r1
 801cc32:	495c      	ldr	r1, [pc, #368]	; (801cda4 <MX_LWIP_Init+0x32c>)
 801cc34:	78c9      	ldrb	r1, [r1, #3]
 801cc36:	430b      	orrs	r3, r1
 801cc38:	0e1b      	lsrs	r3, r3, #24
 801cc3a:	4313      	orrs	r3, r2
 801cc3c:	4a5c      	ldr	r2, [pc, #368]	; (801cdb0 <MX_LWIP_Init+0x338>)
 801cc3e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801cc40:	4b59      	ldr	r3, [pc, #356]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc42:	781b      	ldrb	r3, [r3, #0]
 801cc44:	061a      	lsls	r2, r3, #24
 801cc46:	4b58      	ldr	r3, [pc, #352]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc48:	785b      	ldrb	r3, [r3, #1]
 801cc4a:	041b      	lsls	r3, r3, #16
 801cc4c:	431a      	orrs	r2, r3
 801cc4e:	4b56      	ldr	r3, [pc, #344]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc50:	789b      	ldrb	r3, [r3, #2]
 801cc52:	021b      	lsls	r3, r3, #8
 801cc54:	4313      	orrs	r3, r2
 801cc56:	4a54      	ldr	r2, [pc, #336]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc58:	78d2      	ldrb	r2, [r2, #3]
 801cc5a:	4313      	orrs	r3, r2
 801cc5c:	061a      	lsls	r2, r3, #24
 801cc5e:	4b52      	ldr	r3, [pc, #328]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc60:	781b      	ldrb	r3, [r3, #0]
 801cc62:	0619      	lsls	r1, r3, #24
 801cc64:	4b50      	ldr	r3, [pc, #320]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc66:	785b      	ldrb	r3, [r3, #1]
 801cc68:	041b      	lsls	r3, r3, #16
 801cc6a:	4319      	orrs	r1, r3
 801cc6c:	4b4e      	ldr	r3, [pc, #312]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc6e:	789b      	ldrb	r3, [r3, #2]
 801cc70:	021b      	lsls	r3, r3, #8
 801cc72:	430b      	orrs	r3, r1
 801cc74:	494c      	ldr	r1, [pc, #304]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc76:	78c9      	ldrb	r1, [r1, #3]
 801cc78:	430b      	orrs	r3, r1
 801cc7a:	021b      	lsls	r3, r3, #8
 801cc7c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cc80:	431a      	orrs	r2, r3
 801cc82:	4b49      	ldr	r3, [pc, #292]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc84:	781b      	ldrb	r3, [r3, #0]
 801cc86:	0619      	lsls	r1, r3, #24
 801cc88:	4b47      	ldr	r3, [pc, #284]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc8a:	785b      	ldrb	r3, [r3, #1]
 801cc8c:	041b      	lsls	r3, r3, #16
 801cc8e:	4319      	orrs	r1, r3
 801cc90:	4b45      	ldr	r3, [pc, #276]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc92:	789b      	ldrb	r3, [r3, #2]
 801cc94:	021b      	lsls	r3, r3, #8
 801cc96:	430b      	orrs	r3, r1
 801cc98:	4943      	ldr	r1, [pc, #268]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cc9a:	78c9      	ldrb	r1, [r1, #3]
 801cc9c:	430b      	orrs	r3, r1
 801cc9e:	0a1b      	lsrs	r3, r3, #8
 801cca0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cca4:	431a      	orrs	r2, r3
 801cca6:	4b40      	ldr	r3, [pc, #256]	; (801cda8 <MX_LWIP_Init+0x330>)
 801cca8:	781b      	ldrb	r3, [r3, #0]
 801ccaa:	0619      	lsls	r1, r3, #24
 801ccac:	4b3e      	ldr	r3, [pc, #248]	; (801cda8 <MX_LWIP_Init+0x330>)
 801ccae:	785b      	ldrb	r3, [r3, #1]
 801ccb0:	041b      	lsls	r3, r3, #16
 801ccb2:	4319      	orrs	r1, r3
 801ccb4:	4b3c      	ldr	r3, [pc, #240]	; (801cda8 <MX_LWIP_Init+0x330>)
 801ccb6:	789b      	ldrb	r3, [r3, #2]
 801ccb8:	021b      	lsls	r3, r3, #8
 801ccba:	430b      	orrs	r3, r1
 801ccbc:	493a      	ldr	r1, [pc, #232]	; (801cda8 <MX_LWIP_Init+0x330>)
 801ccbe:	78c9      	ldrb	r1, [r1, #3]
 801ccc0:	430b      	orrs	r3, r1
 801ccc2:	0e1b      	lsrs	r3, r3, #24
 801ccc4:	4313      	orrs	r3, r2
 801ccc6:	4a3b      	ldr	r2, [pc, #236]	; (801cdb4 <MX_LWIP_Init+0x33c>)
 801ccc8:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801ccca:	4b38      	ldr	r3, [pc, #224]	; (801cdac <MX_LWIP_Init+0x334>)
 801cccc:	781b      	ldrb	r3, [r3, #0]
 801ccce:	061a      	lsls	r2, r3, #24
 801ccd0:	4b36      	ldr	r3, [pc, #216]	; (801cdac <MX_LWIP_Init+0x334>)
 801ccd2:	785b      	ldrb	r3, [r3, #1]
 801ccd4:	041b      	lsls	r3, r3, #16
 801ccd6:	431a      	orrs	r2, r3
 801ccd8:	4b34      	ldr	r3, [pc, #208]	; (801cdac <MX_LWIP_Init+0x334>)
 801ccda:	789b      	ldrb	r3, [r3, #2]
 801ccdc:	021b      	lsls	r3, r3, #8
 801ccde:	4313      	orrs	r3, r2
 801cce0:	4a32      	ldr	r2, [pc, #200]	; (801cdac <MX_LWIP_Init+0x334>)
 801cce2:	78d2      	ldrb	r2, [r2, #3]
 801cce4:	4313      	orrs	r3, r2
 801cce6:	061a      	lsls	r2, r3, #24
 801cce8:	4b30      	ldr	r3, [pc, #192]	; (801cdac <MX_LWIP_Init+0x334>)
 801ccea:	781b      	ldrb	r3, [r3, #0]
 801ccec:	0619      	lsls	r1, r3, #24
 801ccee:	4b2f      	ldr	r3, [pc, #188]	; (801cdac <MX_LWIP_Init+0x334>)
 801ccf0:	785b      	ldrb	r3, [r3, #1]
 801ccf2:	041b      	lsls	r3, r3, #16
 801ccf4:	4319      	orrs	r1, r3
 801ccf6:	4b2d      	ldr	r3, [pc, #180]	; (801cdac <MX_LWIP_Init+0x334>)
 801ccf8:	789b      	ldrb	r3, [r3, #2]
 801ccfa:	021b      	lsls	r3, r3, #8
 801ccfc:	430b      	orrs	r3, r1
 801ccfe:	492b      	ldr	r1, [pc, #172]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd00:	78c9      	ldrb	r1, [r1, #3]
 801cd02:	430b      	orrs	r3, r1
 801cd04:	021b      	lsls	r3, r3, #8
 801cd06:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801cd0a:	431a      	orrs	r2, r3
 801cd0c:	4b27      	ldr	r3, [pc, #156]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd0e:	781b      	ldrb	r3, [r3, #0]
 801cd10:	0619      	lsls	r1, r3, #24
 801cd12:	4b26      	ldr	r3, [pc, #152]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd14:	785b      	ldrb	r3, [r3, #1]
 801cd16:	041b      	lsls	r3, r3, #16
 801cd18:	4319      	orrs	r1, r3
 801cd1a:	4b24      	ldr	r3, [pc, #144]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd1c:	789b      	ldrb	r3, [r3, #2]
 801cd1e:	021b      	lsls	r3, r3, #8
 801cd20:	430b      	orrs	r3, r1
 801cd22:	4922      	ldr	r1, [pc, #136]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd24:	78c9      	ldrb	r1, [r1, #3]
 801cd26:	430b      	orrs	r3, r1
 801cd28:	0a1b      	lsrs	r3, r3, #8
 801cd2a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801cd2e:	431a      	orrs	r2, r3
 801cd30:	4b1e      	ldr	r3, [pc, #120]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd32:	781b      	ldrb	r3, [r3, #0]
 801cd34:	0619      	lsls	r1, r3, #24
 801cd36:	4b1d      	ldr	r3, [pc, #116]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd38:	785b      	ldrb	r3, [r3, #1]
 801cd3a:	041b      	lsls	r3, r3, #16
 801cd3c:	4319      	orrs	r1, r3
 801cd3e:	4b1b      	ldr	r3, [pc, #108]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd40:	789b      	ldrb	r3, [r3, #2]
 801cd42:	021b      	lsls	r3, r3, #8
 801cd44:	430b      	orrs	r3, r1
 801cd46:	4919      	ldr	r1, [pc, #100]	; (801cdac <MX_LWIP_Init+0x334>)
 801cd48:	78c9      	ldrb	r1, [r1, #3]
 801cd4a:	430b      	orrs	r3, r1
 801cd4c:	0e1b      	lsrs	r3, r3, #24
 801cd4e:	4313      	orrs	r3, r2
 801cd50:	4a19      	ldr	r2, [pc, #100]	; (801cdb8 <MX_LWIP_Init+0x340>)
 801cd52:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801cd54:	4b19      	ldr	r3, [pc, #100]	; (801cdbc <MX_LWIP_Init+0x344>)
 801cd56:	9302      	str	r3, [sp, #8]
 801cd58:	4b19      	ldr	r3, [pc, #100]	; (801cdc0 <MX_LWIP_Init+0x348>)
 801cd5a:	9301      	str	r3, [sp, #4]
 801cd5c:	2300      	movs	r3, #0
 801cd5e:	9300      	str	r3, [sp, #0]
 801cd60:	4b15      	ldr	r3, [pc, #84]	; (801cdb8 <MX_LWIP_Init+0x340>)
 801cd62:	4a14      	ldr	r2, [pc, #80]	; (801cdb4 <MX_LWIP_Init+0x33c>)
 801cd64:	4912      	ldr	r1, [pc, #72]	; (801cdb0 <MX_LWIP_Init+0x338>)
 801cd66:	4817      	ldr	r0, [pc, #92]	; (801cdc4 <MX_LWIP_Init+0x34c>)
 801cd68:	f001 f998 	bl	801e09c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801cd6c:	4815      	ldr	r0, [pc, #84]	; (801cdc4 <MX_LWIP_Init+0x34c>)
 801cd6e:	f001 fb49 	bl	801e404 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801cd72:	4b14      	ldr	r3, [pc, #80]	; (801cdc4 <MX_LWIP_Init+0x34c>)
 801cd74:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cd78:	089b      	lsrs	r3, r3, #2
 801cd7a:	f003 0301 	and.w	r3, r3, #1
 801cd7e:	b2db      	uxtb	r3, r3
 801cd80:	2b00      	cmp	r3, #0
 801cd82:	d003      	beq.n	801cd8c <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801cd84:	480f      	ldr	r0, [pc, #60]	; (801cdc4 <MX_LWIP_Init+0x34c>)
 801cd86:	f001 fb4d 	bl	801e424 <netif_set_up>
 801cd8a:	e002      	b.n	801cd92 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801cd8c:	480d      	ldr	r0, [pc, #52]	; (801cdc4 <MX_LWIP_Init+0x34c>)
 801cd8e:	f001 fbb5 	bl	801e4fc <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801cd92:	490d      	ldr	r1, [pc, #52]	; (801cdc8 <MX_LWIP_Init+0x350>)
 801cd94:	480b      	ldr	r0, [pc, #44]	; (801cdc4 <MX_LWIP_Init+0x34c>)
 801cd96:	f001 fc47 	bl	801e628 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801cd9a:	46bd      	mov	sp, r7
 801cd9c:	bd80      	pop	{r7, pc}
 801cd9e:	bf00      	nop
 801cda0:	20000304 	.word	0x20000304
 801cda4:	2000c130 	.word	0x2000c130
 801cda8:	2000c134 	.word	0x2000c134
 801cdac:	2000c138 	.word	0x2000c138
 801cdb0:	2000c124 	.word	0x2000c124
 801cdb4:	2000c128 	.word	0x2000c128
 801cdb8:	2000c12c 	.word	0x2000c12c
 801cdbc:	080223e5 	.word	0x080223e5
 801cdc0:	0801d159 	.word	0x0801d159
 801cdc4:	2000c0e4 	.word	0x2000c0e4
 801cdc8:	0801ce1d 	.word	0x0801ce1d

0801cdcc <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801cdcc:	b580      	push	{r7, lr}
 801cdce:	b082      	sub	sp, #8
 801cdd0:	af00      	add	r7, sp, #0
 801cdd2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801cdd4:	f7f8 fd26 	bl	8015824 <HAL_GetTick>
 801cdd8:	4602      	mov	r2, r0
 801cdda:	4b08      	ldr	r3, [pc, #32]	; (801cdfc <Ethernet_Link_Periodic_Handle+0x30>)
 801cddc:	681b      	ldr	r3, [r3, #0]
 801cdde:	1ad3      	subs	r3, r2, r3
 801cde0:	2b63      	cmp	r3, #99	; 0x63
 801cde2:	d907      	bls.n	801cdf4 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801cde4:	f7f8 fd1e 	bl	8015824 <HAL_GetTick>
 801cde8:	4603      	mov	r3, r0
 801cdea:	4a04      	ldr	r2, [pc, #16]	; (801cdfc <Ethernet_Link_Periodic_Handle+0x30>)
 801cdec:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801cdee:	6878      	ldr	r0, [r7, #4]
 801cdf0:	f000 fb10 	bl	801d414 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801cdf4:	bf00      	nop
 801cdf6:	3708      	adds	r7, #8
 801cdf8:	46bd      	mov	sp, r7
 801cdfa:	bd80      	pop	{r7, pc}
 801cdfc:	2000c0e0 	.word	0x2000c0e0

0801ce00 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801ce00:	b580      	push	{r7, lr}
 801ce02:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801ce04:	4804      	ldr	r0, [pc, #16]	; (801ce18 <MX_LWIP_Process+0x18>)
 801ce06:	f000 f987 	bl	801d118 <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801ce0a:	f002 fb83 	bl	801f514 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801ce0e:	4802      	ldr	r0, [pc, #8]	; (801ce18 <MX_LWIP_Process+0x18>)
 801ce10:	f7ff ffdc 	bl	801cdcc <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801ce14:	bf00      	nop
 801ce16:	bd80      	pop	{r7, pc}
 801ce18:	2000c0e4 	.word	0x2000c0e4

0801ce1c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801ce1c:	b480      	push	{r7}
 801ce1e:	b083      	sub	sp, #12
 801ce20:	af00      	add	r7, sp, #0
 801ce22:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801ce24:	bf00      	nop
 801ce26:	370c      	adds	r7, #12
 801ce28:	46bd      	mov	sp, r7
 801ce2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce2e:	4770      	bx	lr

0801ce30 <SCB_InvalidateDCache_by_Addr>:
{
 801ce30:	b480      	push	{r7}
 801ce32:	b087      	sub	sp, #28
 801ce34:	af00      	add	r7, sp, #0
 801ce36:	6078      	str	r0, [r7, #4]
 801ce38:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801ce3a:	683b      	ldr	r3, [r7, #0]
 801ce3c:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801ce42:	2320      	movs	r3, #32
 801ce44:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801ce46:	f3bf 8f4f 	dsb	sy
}
 801ce4a:	bf00      	nop
    while (op_size > 0) {
 801ce4c:	e00b      	b.n	801ce66 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801ce4e:	4a0d      	ldr	r2, [pc, #52]	; (801ce84 <SCB_InvalidateDCache_by_Addr+0x54>)
 801ce50:	693b      	ldr	r3, [r7, #16]
 801ce52:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801ce56:	68fb      	ldr	r3, [r7, #12]
 801ce58:	693a      	ldr	r2, [r7, #16]
 801ce5a:	4413      	add	r3, r2
 801ce5c:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801ce5e:	697a      	ldr	r2, [r7, #20]
 801ce60:	68fb      	ldr	r3, [r7, #12]
 801ce62:	1ad3      	subs	r3, r2, r3
 801ce64:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801ce66:	697b      	ldr	r3, [r7, #20]
 801ce68:	2b00      	cmp	r3, #0
 801ce6a:	dcf0      	bgt.n	801ce4e <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801ce6c:	f3bf 8f4f 	dsb	sy
}
 801ce70:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801ce72:	f3bf 8f6f 	isb	sy
}
 801ce76:	bf00      	nop
}
 801ce78:	bf00      	nop
 801ce7a:	371c      	adds	r7, #28
 801ce7c:	46bd      	mov	sp, r7
 801ce7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce82:	4770      	bx	lr
 801ce84:	e000ed00 	.word	0xe000ed00

0801ce88 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b084      	sub	sp, #16
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801ce90:	2300      	movs	r3, #0
 801ce92:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801ce94:	4b47      	ldr	r3, [pc, #284]	; (801cfb4 <low_level_init+0x12c>)
 801ce96:	4a48      	ldr	r2, [pc, #288]	; (801cfb8 <low_level_init+0x130>)
 801ce98:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801ce9a:	2300      	movs	r3, #0
 801ce9c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801ce9e:	2380      	movs	r3, #128	; 0x80
 801cea0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801cea2:	23e1      	movs	r3, #225	; 0xe1
 801cea4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801cea6:	2300      	movs	r3, #0
 801cea8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801ceaa:	2300      	movs	r3, #0
 801ceac:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801ceae:	2300      	movs	r3, #0
 801ceb0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801ceb2:	4a40      	ldr	r2, [pc, #256]	; (801cfb4 <low_level_init+0x12c>)
 801ceb4:	f107 0308 	add.w	r3, r7, #8
 801ceb8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801ceba:	4b3e      	ldr	r3, [pc, #248]	; (801cfb4 <low_level_init+0x12c>)
 801cebc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801cec0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801cec2:	4b3c      	ldr	r3, [pc, #240]	; (801cfb4 <low_level_init+0x12c>)
 801cec4:	4a3d      	ldr	r2, [pc, #244]	; (801cfbc <low_level_init+0x134>)
 801cec6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801cec8:	4b3a      	ldr	r3, [pc, #232]	; (801cfb4 <low_level_init+0x12c>)
 801ceca:	4a3d      	ldr	r2, [pc, #244]	; (801cfc0 <low_level_init+0x138>)
 801cecc:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801cece:	4b39      	ldr	r3, [pc, #228]	; (801cfb4 <low_level_init+0x12c>)
 801ced0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801ced4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801ced6:	4b3b      	ldr	r3, [pc, #236]	; (801cfc4 <low_level_init+0x13c>)
 801ced8:	781b      	ldrb	r3, [r3, #0]
 801ceda:	2b01      	cmp	r3, #1
 801cedc:	d002      	beq.n	801cee4 <low_level_init+0x5c>
 801cede:	2b02      	cmp	r3, #2
 801cee0:	d004      	beq.n	801ceec <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801cee2:	e063      	b.n	801cfac <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801cee4:	4b33      	ldr	r3, [pc, #204]	; (801cfb4 <low_level_init+0x12c>)
 801cee6:	4a38      	ldr	r2, [pc, #224]	; (801cfc8 <low_level_init+0x140>)
 801cee8:	605a      	str	r2, [r3, #4]
		break;
 801ceea:	e003      	b.n	801cef4 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801ceec:	4b31      	ldr	r3, [pc, #196]	; (801cfb4 <low_level_init+0x12c>)
 801ceee:	4a37      	ldr	r2, [pc, #220]	; (801cfcc <low_level_init+0x144>)
 801cef0:	605a      	str	r2, [r3, #4]
		break;
 801cef2:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801cef4:	482f      	ldr	r0, [pc, #188]	; (801cfb4 <low_level_init+0x12c>)
 801cef6:	f7f9 fdbb 	bl	8016a70 <HAL_ETH_Init>
 801cefa:	4603      	mov	r3, r0
 801cefc:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801cefe:	2238      	movs	r2, #56	; 0x38
 801cf00:	2100      	movs	r1, #0
 801cf02:	4833      	ldr	r0, [pc, #204]	; (801cfd0 <low_level_init+0x148>)
 801cf04:	f005 fbb0 	bl	8022668 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801cf08:	4b31      	ldr	r3, [pc, #196]	; (801cfd0 <low_level_init+0x148>)
 801cf0a:	2221      	movs	r2, #33	; 0x21
 801cf0c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801cf0e:	4b30      	ldr	r3, [pc, #192]	; (801cfd0 <low_level_init+0x148>)
 801cf10:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801cf14:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801cf16:	4b2e      	ldr	r3, [pc, #184]	; (801cfd0 <low_level_init+0x148>)
 801cf18:	2200      	movs	r2, #0
 801cf1a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801cf1c:	482d      	ldr	r0, [pc, #180]	; (801cfd4 <low_level_init+0x14c>)
 801cf1e:	f000 ff3d 	bl	801dd9c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801cf22:	687b      	ldr	r3, [r7, #4]
 801cf24:	2206      	movs	r2, #6
 801cf26:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801cf2a:	4b22      	ldr	r3, [pc, #136]	; (801cfb4 <low_level_init+0x12c>)
 801cf2c:	685b      	ldr	r3, [r3, #4]
 801cf2e:	781a      	ldrb	r2, [r3, #0]
 801cf30:	687b      	ldr	r3, [r7, #4]
 801cf32:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801cf36:	4b1f      	ldr	r3, [pc, #124]	; (801cfb4 <low_level_init+0x12c>)
 801cf38:	685b      	ldr	r3, [r3, #4]
 801cf3a:	785a      	ldrb	r2, [r3, #1]
 801cf3c:	687b      	ldr	r3, [r7, #4]
 801cf3e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801cf42:	4b1c      	ldr	r3, [pc, #112]	; (801cfb4 <low_level_init+0x12c>)
 801cf44:	685b      	ldr	r3, [r3, #4]
 801cf46:	789a      	ldrb	r2, [r3, #2]
 801cf48:	687b      	ldr	r3, [r7, #4]
 801cf4a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801cf4e:	4b19      	ldr	r3, [pc, #100]	; (801cfb4 <low_level_init+0x12c>)
 801cf50:	685b      	ldr	r3, [r3, #4]
 801cf52:	78da      	ldrb	r2, [r3, #3]
 801cf54:	687b      	ldr	r3, [r7, #4]
 801cf56:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801cf5a:	4b16      	ldr	r3, [pc, #88]	; (801cfb4 <low_level_init+0x12c>)
 801cf5c:	685b      	ldr	r3, [r3, #4]
 801cf5e:	791a      	ldrb	r2, [r3, #4]
 801cf60:	687b      	ldr	r3, [r7, #4]
 801cf62:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801cf66:	4b13      	ldr	r3, [pc, #76]	; (801cfb4 <low_level_init+0x12c>)
 801cf68:	685b      	ldr	r3, [r3, #4]
 801cf6a:	795a      	ldrb	r2, [r3, #5]
 801cf6c:	687b      	ldr	r3, [r7, #4]
 801cf6e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801cf72:	687b      	ldr	r3, [r7, #4]
 801cf74:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801cf78:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801cf7a:	687b      	ldr	r3, [r7, #4]
 801cf7c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cf80:	f043 030a 	orr.w	r3, r3, #10
 801cf84:	b2da      	uxtb	r2, r3
 801cf86:	687b      	ldr	r3, [r7, #4]
 801cf88:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801cf8c:	4912      	ldr	r1, [pc, #72]	; (801cfd8 <low_level_init+0x150>)
 801cf8e:	4813      	ldr	r0, [pc, #76]	; (801cfdc <low_level_init+0x154>)
 801cf90:	f7f8 fa87 	bl	80154a2 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801cf94:	4811      	ldr	r0, [pc, #68]	; (801cfdc <low_level_init+0x154>)
 801cf96:	f7f8 fab6 	bl	8015506 <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801cf9a:	7bfb      	ldrb	r3, [r7, #15]
 801cf9c:	2b00      	cmp	r3, #0
 801cf9e:	d103      	bne.n	801cfa8 <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801cfa0:	6878      	ldr	r0, [r7, #4]
 801cfa2:	f000 fa37 	bl	801d414 <ethernet_link_check_state>
 801cfa6:	e001      	b.n	801cfac <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801cfa8:	f7f6 feb0 	bl	8013d0c <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801cfac:	3710      	adds	r7, #16
 801cfae:	46bd      	mov	sp, r7
 801cfb0:	bd80      	pop	{r7, pc}
 801cfb2:	bf00      	nop
 801cfb4:	20010a38 	.word	0x20010a38
 801cfb8:	40028000 	.word	0x40028000
 801cfbc:	20000244 	.word	0x20000244
 801cfc0:	200001a4 	.word	0x200001a4
 801cfc4:	20000304 	.word	0x20000304
 801cfc8:	20000343 	.word	0x20000343
 801cfcc:	200005b1 	.word	0x200005b1
 801cfd0:	20010ae8 	.word	0x20010ae8
 801cfd4:	08028ee0 	.word	0x08028ee0
 801cfd8:	20000128 	.word	0x20000128
 801cfdc:	20010b20 	.word	0x20010b20

0801cfe0 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801cfe0:	b580      	push	{r7, lr}
 801cfe2:	b092      	sub	sp, #72	; 0x48
 801cfe4:	af00      	add	r7, sp, #0
 801cfe6:	6078      	str	r0, [r7, #4]
 801cfe8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801cfea:	2300      	movs	r3, #0
 801cfec:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801cfee:	2300      	movs	r3, #0
 801cff0:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801cff2:	2300      	movs	r3, #0
 801cff4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801cff8:	f107 030c 	add.w	r3, r7, #12
 801cffc:	2230      	movs	r2, #48	; 0x30
 801cffe:	2100      	movs	r1, #0
 801d000:	4618      	mov	r0, r3
 801d002:	f005 fb31 	bl	8022668 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801d006:	f107 030c 	add.w	r3, r7, #12
 801d00a:	2230      	movs	r2, #48	; 0x30
 801d00c:	2100      	movs	r1, #0
 801d00e:	4618      	mov	r0, r3
 801d010:	f005 fb2a 	bl	8022668 <memset>

  for(q = p; q != NULL; q = q->next)
 801d014:	683b      	ldr	r3, [r7, #0]
 801d016:	643b      	str	r3, [r7, #64]	; 0x40
 801d018:	e045      	b.n	801d0a6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801d01a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d01c:	2b03      	cmp	r3, #3
 801d01e:	d902      	bls.n	801d026 <low_level_output+0x46>
      return ERR_IF;
 801d020:	f06f 030b 	mvn.w	r3, #11
 801d024:	e055      	b.n	801d0d2 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801d026:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d028:	6859      	ldr	r1, [r3, #4]
 801d02a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d02c:	4613      	mov	r3, r2
 801d02e:	005b      	lsls	r3, r3, #1
 801d030:	4413      	add	r3, r2
 801d032:	009b      	lsls	r3, r3, #2
 801d034:	3348      	adds	r3, #72	; 0x48
 801d036:	443b      	add	r3, r7
 801d038:	3b3c      	subs	r3, #60	; 0x3c
 801d03a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801d03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d03e:	895b      	ldrh	r3, [r3, #10]
 801d040:	4619      	mov	r1, r3
 801d042:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d044:	4613      	mov	r3, r2
 801d046:	005b      	lsls	r3, r3, #1
 801d048:	4413      	add	r3, r2
 801d04a:	009b      	lsls	r3, r3, #2
 801d04c:	3348      	adds	r3, #72	; 0x48
 801d04e:	443b      	add	r3, r7
 801d050:	3b38      	subs	r3, #56	; 0x38
 801d052:	6019      	str	r1, [r3, #0]

    if(i>0)
 801d054:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d056:	2b00      	cmp	r3, #0
 801d058:	d011      	beq.n	801d07e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801d05a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d05c:	1e5a      	subs	r2, r3, #1
 801d05e:	f107 000c 	add.w	r0, r7, #12
 801d062:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801d064:	460b      	mov	r3, r1
 801d066:	005b      	lsls	r3, r3, #1
 801d068:	440b      	add	r3, r1
 801d06a:	009b      	lsls	r3, r3, #2
 801d06c:	18c1      	adds	r1, r0, r3
 801d06e:	4613      	mov	r3, r2
 801d070:	005b      	lsls	r3, r3, #1
 801d072:	4413      	add	r3, r2
 801d074:	009b      	lsls	r3, r3, #2
 801d076:	3348      	adds	r3, #72	; 0x48
 801d078:	443b      	add	r3, r7
 801d07a:	3b34      	subs	r3, #52	; 0x34
 801d07c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801d07e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d080:	681b      	ldr	r3, [r3, #0]
 801d082:	2b00      	cmp	r3, #0
 801d084:	d109      	bne.n	801d09a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801d086:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801d088:	4613      	mov	r3, r2
 801d08a:	005b      	lsls	r3, r3, #1
 801d08c:	4413      	add	r3, r2
 801d08e:	009b      	lsls	r3, r3, #2
 801d090:	3348      	adds	r3, #72	; 0x48
 801d092:	443b      	add	r3, r7
 801d094:	3b34      	subs	r3, #52	; 0x34
 801d096:	2200      	movs	r2, #0
 801d098:	601a      	str	r2, [r3, #0]
    }

    i++;
 801d09a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d09c:	3301      	adds	r3, #1
 801d09e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801d0a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d0a2:	681b      	ldr	r3, [r3, #0]
 801d0a4:	643b      	str	r3, [r7, #64]	; 0x40
 801d0a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d1b6      	bne.n	801d01a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801d0ac:	683b      	ldr	r3, [r7, #0]
 801d0ae:	891b      	ldrh	r3, [r3, #8]
 801d0b0:	461a      	mov	r2, r3
 801d0b2:	4b0a      	ldr	r3, [pc, #40]	; (801d0dc <low_level_output+0xfc>)
 801d0b4:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801d0b6:	4a09      	ldr	r2, [pc, #36]	; (801d0dc <low_level_output+0xfc>)
 801d0b8:	f107 030c 	add.w	r3, r7, #12
 801d0bc:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801d0be:	4a07      	ldr	r2, [pc, #28]	; (801d0dc <low_level_output+0xfc>)
 801d0c0:	683b      	ldr	r3, [r7, #0]
 801d0c2:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801d0c4:	2214      	movs	r2, #20
 801d0c6:	4905      	ldr	r1, [pc, #20]	; (801d0dc <low_level_output+0xfc>)
 801d0c8:	4805      	ldr	r0, [pc, #20]	; (801d0e0 <low_level_output+0x100>)
 801d0ca:	f7f9 fe05 	bl	8016cd8 <HAL_ETH_Transmit>

  return errval;
 801d0ce:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801d0d2:	4618      	mov	r0, r3
 801d0d4:	3748      	adds	r7, #72	; 0x48
 801d0d6:	46bd      	mov	sp, r7
 801d0d8:	bd80      	pop	{r7, pc}
 801d0da:	bf00      	nop
 801d0dc:	20010ae8 	.word	0x20010ae8
 801d0e0:	20010a38 	.word	0x20010a38

0801d0e4 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801d0e4:	b580      	push	{r7, lr}
 801d0e6:	b084      	sub	sp, #16
 801d0e8:	af00      	add	r7, sp, #0
 801d0ea:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801d0ec:	2300      	movs	r3, #0
 801d0ee:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801d0f0:	4b07      	ldr	r3, [pc, #28]	; (801d110 <low_level_input+0x2c>)
 801d0f2:	781b      	ldrb	r3, [r3, #0]
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d105      	bne.n	801d104 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801d0f8:	f107 030c 	add.w	r3, r7, #12
 801d0fc:	4619      	mov	r1, r3
 801d0fe:	4805      	ldr	r0, [pc, #20]	; (801d114 <low_level_input+0x30>)
 801d100:	f7f9 fe7e 	bl	8016e00 <HAL_ETH_ReadData>
  }

  return p;
 801d104:	68fb      	ldr	r3, [r7, #12]
}
 801d106:	4618      	mov	r0, r3
 801d108:	3710      	adds	r7, #16
 801d10a:	46bd      	mov	sp, r7
 801d10c:	bd80      	pop	{r7, pc}
 801d10e:	bf00      	nop
 801d110:	20010a34 	.word	0x20010a34
 801d114:	20010a38 	.word	0x20010a38

0801d118 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801d118:	b580      	push	{r7, lr}
 801d11a:	b084      	sub	sp, #16
 801d11c:	af00      	add	r7, sp, #0
 801d11e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801d120:	2300      	movs	r3, #0
 801d122:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801d124:	6878      	ldr	r0, [r7, #4]
 801d126:	f7ff ffdd 	bl	801d0e4 <low_level_input>
 801d12a:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801d12c:	68fb      	ldr	r3, [r7, #12]
 801d12e:	2b00      	cmp	r3, #0
 801d130:	d00a      	beq.n	801d148 <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801d132:	687b      	ldr	r3, [r7, #4]
 801d134:	691b      	ldr	r3, [r3, #16]
 801d136:	6879      	ldr	r1, [r7, #4]
 801d138:	68f8      	ldr	r0, [r7, #12]
 801d13a:	4798      	blx	r3
 801d13c:	4603      	mov	r3, r0
 801d13e:	2b00      	cmp	r3, #0
 801d140:	d002      	beq.n	801d148 <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801d142:	68f8      	ldr	r0, [r7, #12]
 801d144:	f001 fe40 	bl	801edc8 <pbuf_free>
      }
    }
  } while(p!=NULL);
 801d148:	68fb      	ldr	r3, [r7, #12]
 801d14a:	2b00      	cmp	r3, #0
 801d14c:	d1ea      	bne.n	801d124 <ethernetif_input+0xc>
}
 801d14e:	bf00      	nop
 801d150:	bf00      	nop
 801d152:	3710      	adds	r7, #16
 801d154:	46bd      	mov	sp, r7
 801d156:	bd80      	pop	{r7, pc}

0801d158 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801d158:	b580      	push	{r7, lr}
 801d15a:	b082      	sub	sp, #8
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801d160:	687b      	ldr	r3, [r7, #4]
 801d162:	2b00      	cmp	r3, #0
 801d164:	d106      	bne.n	801d174 <ethernetif_init+0x1c>
 801d166:	4b0e      	ldr	r3, [pc, #56]	; (801d1a0 <ethernetif_init+0x48>)
 801d168:	f240 1287 	movw	r2, #391	; 0x187
 801d16c:	490d      	ldr	r1, [pc, #52]	; (801d1a4 <ethernetif_init+0x4c>)
 801d16e:	480e      	ldr	r0, [pc, #56]	; (801d1a8 <ethernetif_init+0x50>)
 801d170:	f005 fb62 	bl	8022838 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801d174:	687b      	ldr	r3, [r7, #4]
 801d176:	2273      	movs	r2, #115	; 0x73
 801d178:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801d17c:	687b      	ldr	r3, [r7, #4]
 801d17e:	2274      	movs	r2, #116	; 0x74
 801d180:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	4a09      	ldr	r2, [pc, #36]	; (801d1ac <ethernetif_init+0x54>)
 801d188:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801d18a:	687b      	ldr	r3, [r7, #4]
 801d18c:	4a08      	ldr	r2, [pc, #32]	; (801d1b0 <ethernetif_init+0x58>)
 801d18e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801d190:	6878      	ldr	r0, [r7, #4]
 801d192:	f7ff fe79 	bl	801ce88 <low_level_init>

  return ERR_OK;
 801d196:	2300      	movs	r3, #0
}
 801d198:	4618      	mov	r0, r3
 801d19a:	3708      	adds	r7, #8
 801d19c:	46bd      	mov	sp, r7
 801d19e:	bd80      	pop	{r7, pc}
 801d1a0:	08027438 	.word	0x08027438
 801d1a4:	08027454 	.word	0x08027454
 801d1a8:	08027464 	.word	0x08027464
 801d1ac:	08020775 	.word	0x08020775
 801d1b0:	0801cfe1 	.word	0x0801cfe1

0801d1b4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801d1b4:	b580      	push	{r7, lr}
 801d1b6:	b084      	sub	sp, #16
 801d1b8:	af00      	add	r7, sp, #0
 801d1ba:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801d1c0:	68f9      	ldr	r1, [r7, #12]
 801d1c2:	4807      	ldr	r0, [pc, #28]	; (801d1e0 <pbuf_free_custom+0x2c>)
 801d1c4:	f000 fecc 	bl	801df60 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801d1c8:	4b06      	ldr	r3, [pc, #24]	; (801d1e4 <pbuf_free_custom+0x30>)
 801d1ca:	781b      	ldrb	r3, [r3, #0]
 801d1cc:	2b01      	cmp	r3, #1
 801d1ce:	d102      	bne.n	801d1d6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801d1d0:	4b04      	ldr	r3, [pc, #16]	; (801d1e4 <pbuf_free_custom+0x30>)
 801d1d2:	2200      	movs	r2, #0
 801d1d4:	701a      	strb	r2, [r3, #0]
  }
}
 801d1d6:	bf00      	nop
 801d1d8:	3710      	adds	r7, #16
 801d1da:	46bd      	mov	sp, r7
 801d1dc:	bd80      	pop	{r7, pc}
 801d1de:	bf00      	nop
 801d1e0:	08028ee0 	.word	0x08028ee0
 801d1e4:	20010a34 	.word	0x20010a34

0801d1e8 <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801d1e8:	b580      	push	{r7, lr}
 801d1ea:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801d1ec:	f7f8 fb1a 	bl	8015824 <HAL_GetTick>
 801d1f0:	4603      	mov	r3, r0
}
 801d1f2:	4618      	mov	r0, r3
 801d1f4:	bd80      	pop	{r7, pc}
	...

0801d1f8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801d1f8:	b580      	push	{r7, lr}
 801d1fa:	b08e      	sub	sp, #56	; 0x38
 801d1fc:	af00      	add	r7, sp, #0
 801d1fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801d200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d204:	2200      	movs	r2, #0
 801d206:	601a      	str	r2, [r3, #0]
 801d208:	605a      	str	r2, [r3, #4]
 801d20a:	609a      	str	r2, [r3, #8]
 801d20c:	60da      	str	r2, [r3, #12]
 801d20e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801d210:	687b      	ldr	r3, [r7, #4]
 801d212:	681b      	ldr	r3, [r3, #0]
 801d214:	4a52      	ldr	r2, [pc, #328]	; (801d360 <HAL_ETH_MspInit+0x168>)
 801d216:	4293      	cmp	r3, r2
 801d218:	f040 809e 	bne.w	801d358 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801d21c:	4b51      	ldr	r3, [pc, #324]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d21e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d220:	4a50      	ldr	r2, [pc, #320]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d222:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801d226:	6313      	str	r3, [r2, #48]	; 0x30
 801d228:	4b4e      	ldr	r3, [pc, #312]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d22a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d22c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801d230:	623b      	str	r3, [r7, #32]
 801d232:	6a3b      	ldr	r3, [r7, #32]
 801d234:	4b4b      	ldr	r3, [pc, #300]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d238:	4a4a      	ldr	r2, [pc, #296]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d23a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801d23e:	6313      	str	r3, [r2, #48]	; 0x30
 801d240:	4b48      	ldr	r3, [pc, #288]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801d248:	61fb      	str	r3, [r7, #28]
 801d24a:	69fb      	ldr	r3, [r7, #28]
 801d24c:	4b45      	ldr	r3, [pc, #276]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d24e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d250:	4a44      	ldr	r2, [pc, #272]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d252:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801d256:	6313      	str	r3, [r2, #48]	; 0x30
 801d258:	4b42      	ldr	r3, [pc, #264]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d25a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d25c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801d260:	61bb      	str	r3, [r7, #24]
 801d262:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801d264:	4b3f      	ldr	r3, [pc, #252]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d268:	4a3e      	ldr	r2, [pc, #248]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d26a:	f043 0304 	orr.w	r3, r3, #4
 801d26e:	6313      	str	r3, [r2, #48]	; 0x30
 801d270:	4b3c      	ldr	r3, [pc, #240]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d274:	f003 0304 	and.w	r3, r3, #4
 801d278:	617b      	str	r3, [r7, #20]
 801d27a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801d27c:	4b39      	ldr	r3, [pc, #228]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d280:	4a38      	ldr	r2, [pc, #224]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d282:	f043 0301 	orr.w	r3, r3, #1
 801d286:	6313      	str	r3, [r2, #48]	; 0x30
 801d288:	4b36      	ldr	r3, [pc, #216]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d28a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d28c:	f003 0301 	and.w	r3, r3, #1
 801d290:	613b      	str	r3, [r7, #16]
 801d292:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801d294:	4b33      	ldr	r3, [pc, #204]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d298:	4a32      	ldr	r2, [pc, #200]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d29a:	f043 0302 	orr.w	r3, r3, #2
 801d29e:	6313      	str	r3, [r2, #48]	; 0x30
 801d2a0:	4b30      	ldr	r3, [pc, #192]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d2a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2a4:	f003 0302 	and.w	r3, r3, #2
 801d2a8:	60fb      	str	r3, [r7, #12]
 801d2aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801d2ac:	4b2d      	ldr	r3, [pc, #180]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d2ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2b0:	4a2c      	ldr	r2, [pc, #176]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d2b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d2b6:	6313      	str	r3, [r2, #48]	; 0x30
 801d2b8:	4b2a      	ldr	r3, [pc, #168]	; (801d364 <HAL_ETH_MspInit+0x16c>)
 801d2ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d2bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801d2c0:	60bb      	str	r3, [r7, #8]
 801d2c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801d2c4:	2332      	movs	r3, #50	; 0x32
 801d2c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d2c8:	2302      	movs	r3, #2
 801d2ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2cc:	2300      	movs	r3, #0
 801d2ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d2d0:	2303      	movs	r3, #3
 801d2d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d2d4:	230b      	movs	r3, #11
 801d2d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801d2d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2dc:	4619      	mov	r1, r3
 801d2de:	4822      	ldr	r0, [pc, #136]	; (801d368 <HAL_ETH_MspInit+0x170>)
 801d2e0:	f7fa fdac 	bl	8017e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801d2e4:	2386      	movs	r3, #134	; 0x86
 801d2e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d2e8:	2302      	movs	r3, #2
 801d2ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d2ec:	2300      	movs	r3, #0
 801d2ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d2f0:	2303      	movs	r3, #3
 801d2f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d2f4:	230b      	movs	r3, #11
 801d2f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801d2f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d2fc:	4619      	mov	r1, r3
 801d2fe:	481b      	ldr	r0, [pc, #108]	; (801d36c <HAL_ETH_MspInit+0x174>)
 801d300:	f7fa fd9c 	bl	8017e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801d304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d308:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d30a:	2302      	movs	r3, #2
 801d30c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d30e:	2300      	movs	r3, #0
 801d310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d312:	2303      	movs	r3, #3
 801d314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d316:	230b      	movs	r3, #11
 801d318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801d31a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d31e:	4619      	mov	r1, r3
 801d320:	4813      	ldr	r0, [pc, #76]	; (801d370 <HAL_ETH_MspInit+0x178>)
 801d322:	f7fa fd8b 	bl	8017e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801d326:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801d32a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801d32c:	2302      	movs	r3, #2
 801d32e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801d330:	2300      	movs	r3, #0
 801d332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801d334:	2303      	movs	r3, #3
 801d336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801d338:	230b      	movs	r3, #11
 801d33a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801d33c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801d340:	4619      	mov	r1, r3
 801d342:	480c      	ldr	r0, [pc, #48]	; (801d374 <HAL_ETH_MspInit+0x17c>)
 801d344:	f7fa fd7a 	bl	8017e3c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801d348:	2200      	movs	r2, #0
 801d34a:	2101      	movs	r1, #1
 801d34c:	203d      	movs	r0, #61	; 0x3d
 801d34e:	f7f9 fa4a 	bl	80167e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801d352:	203d      	movs	r0, #61	; 0x3d
 801d354:	f7f9 fa63 	bl	801681e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801d358:	bf00      	nop
 801d35a:	3738      	adds	r7, #56	; 0x38
 801d35c:	46bd      	mov	sp, r7
 801d35e:	bd80      	pop	{r7, pc}
 801d360:	40028000 	.word	0x40028000
 801d364:	40023800 	.word	0x40023800
 801d368:	40020800 	.word	0x40020800
 801d36c:	40020000 	.word	0x40020000
 801d370:	40020400 	.word	0x40020400
 801d374:	40021800 	.word	0x40021800

0801d378 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801d378:	b580      	push	{r7, lr}
 801d37a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801d37c:	4802      	ldr	r0, [pc, #8]	; (801d388 <ETH_PHY_IO_Init+0x10>)
 801d37e:	f7fa f903 	bl	8017588 <HAL_ETH_SetMDIOClockRange>

  return 0;
 801d382:	2300      	movs	r3, #0
}
 801d384:	4618      	mov	r0, r3
 801d386:	bd80      	pop	{r7, pc}
 801d388:	20010a38 	.word	0x20010a38

0801d38c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801d38c:	b480      	push	{r7}
 801d38e:	af00      	add	r7, sp, #0
  return 0;
 801d390:	2300      	movs	r3, #0
}
 801d392:	4618      	mov	r0, r3
 801d394:	46bd      	mov	sp, r7
 801d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d39a:	4770      	bx	lr

0801d39c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801d39c:	b580      	push	{r7, lr}
 801d39e:	b084      	sub	sp, #16
 801d3a0:	af00      	add	r7, sp, #0
 801d3a2:	60f8      	str	r0, [r7, #12]
 801d3a4:	60b9      	str	r1, [r7, #8]
 801d3a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801d3a8:	687b      	ldr	r3, [r7, #4]
 801d3aa:	68ba      	ldr	r2, [r7, #8]
 801d3ac:	68f9      	ldr	r1, [r7, #12]
 801d3ae:	4807      	ldr	r0, [pc, #28]	; (801d3cc <ETH_PHY_IO_ReadReg+0x30>)
 801d3b0:	f7f9 ff52 	bl	8017258 <HAL_ETH_ReadPHYRegister>
 801d3b4:	4603      	mov	r3, r0
 801d3b6:	2b00      	cmp	r3, #0
 801d3b8:	d002      	beq.n	801d3c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801d3ba:	f04f 33ff 	mov.w	r3, #4294967295
 801d3be:	e000      	b.n	801d3c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801d3c0:	2300      	movs	r3, #0
}
 801d3c2:	4618      	mov	r0, r3
 801d3c4:	3710      	adds	r7, #16
 801d3c6:	46bd      	mov	sp, r7
 801d3c8:	bd80      	pop	{r7, pc}
 801d3ca:	bf00      	nop
 801d3cc:	20010a38 	.word	0x20010a38

0801d3d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801d3d0:	b580      	push	{r7, lr}
 801d3d2:	b084      	sub	sp, #16
 801d3d4:	af00      	add	r7, sp, #0
 801d3d6:	60f8      	str	r0, [r7, #12]
 801d3d8:	60b9      	str	r1, [r7, #8]
 801d3da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	68ba      	ldr	r2, [r7, #8]
 801d3e0:	68f9      	ldr	r1, [r7, #12]
 801d3e2:	4807      	ldr	r0, [pc, #28]	; (801d400 <ETH_PHY_IO_WriteReg+0x30>)
 801d3e4:	f7f9 ff83 	bl	80172ee <HAL_ETH_WritePHYRegister>
 801d3e8:	4603      	mov	r3, r0
 801d3ea:	2b00      	cmp	r3, #0
 801d3ec:	d002      	beq.n	801d3f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801d3ee:	f04f 33ff 	mov.w	r3, #4294967295
 801d3f2:	e000      	b.n	801d3f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801d3f4:	2300      	movs	r3, #0
}
 801d3f6:	4618      	mov	r0, r3
 801d3f8:	3710      	adds	r7, #16
 801d3fa:	46bd      	mov	sp, r7
 801d3fc:	bd80      	pop	{r7, pc}
 801d3fe:	bf00      	nop
 801d400:	20010a38 	.word	0x20010a38

0801d404 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801d404:	b580      	push	{r7, lr}
 801d406:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801d408:	f7f8 fa0c 	bl	8015824 <HAL_GetTick>
 801d40c:	4603      	mov	r3, r0
}
 801d40e:	4618      	mov	r0, r3
 801d410:	bd80      	pop	{r7, pc}
	...

0801d414 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801d414:	b580      	push	{r7, lr}
 801d416:	b0a0      	sub	sp, #128	; 0x80
 801d418:	af00      	add	r7, sp, #0
 801d41a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801d41c:	f107 030c 	add.w	r3, r7, #12
 801d420:	2264      	movs	r2, #100	; 0x64
 801d422:	2100      	movs	r1, #0
 801d424:	4618      	mov	r0, r3
 801d426:	f005 f91f 	bl	8022668 <memset>
  int32_t PHYLinkState = 0;
 801d42a:	2300      	movs	r3, #0
 801d42c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801d42e:	2300      	movs	r3, #0
 801d430:	67fb      	str	r3, [r7, #124]	; 0x7c
 801d432:	2300      	movs	r3, #0
 801d434:	67bb      	str	r3, [r7, #120]	; 0x78
 801d436:	2300      	movs	r3, #0
 801d438:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801d43a:	483a      	ldr	r0, [pc, #232]	; (801d524 <ethernet_link_check_state+0x110>)
 801d43c:	f7f8 f90b 	bl	8015656 <DP83848_GetLinkState>
 801d440:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801d442:	687b      	ldr	r3, [r7, #4]
 801d444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d448:	089b      	lsrs	r3, r3, #2
 801d44a:	f003 0301 	and.w	r3, r3, #1
 801d44e:	b2db      	uxtb	r3, r3
 801d450:	2b00      	cmp	r3, #0
 801d452:	d00c      	beq.n	801d46e <ethernet_link_check_state+0x5a>
 801d454:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d456:	2b01      	cmp	r3, #1
 801d458:	dc09      	bgt.n	801d46e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801d45a:	4833      	ldr	r0, [pc, #204]	; (801d528 <ethernet_link_check_state+0x114>)
 801d45c:	f7f9 fbe3 	bl	8016c26 <HAL_ETH_Stop>
    netif_set_down(netif);
 801d460:	6878      	ldr	r0, [r7, #4]
 801d462:	f001 f84b 	bl	801e4fc <netif_set_down>
    netif_set_link_down(netif);
 801d466:	6878      	ldr	r0, [r7, #4]
 801d468:	f001 f8ae 	bl	801e5c8 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801d46c:	e055      	b.n	801d51a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801d46e:	687b      	ldr	r3, [r7, #4]
 801d470:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801d474:	f003 0304 	and.w	r3, r3, #4
 801d478:	2b00      	cmp	r3, #0
 801d47a:	d14e      	bne.n	801d51a <ethernet_link_check_state+0x106>
 801d47c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d47e:	2b01      	cmp	r3, #1
 801d480:	dd4b      	ble.n	801d51a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801d482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801d484:	3b02      	subs	r3, #2
 801d486:	2b03      	cmp	r3, #3
 801d488:	d82a      	bhi.n	801d4e0 <ethernet_link_check_state+0xcc>
 801d48a:	a201      	add	r2, pc, #4	; (adr r2, 801d490 <ethernet_link_check_state+0x7c>)
 801d48c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d490:	0801d4a1 	.word	0x0801d4a1
 801d494:	0801d4b3 	.word	0x0801d4b3
 801d498:	0801d4c3 	.word	0x0801d4c3
 801d49c:	0801d4d3 	.word	0x0801d4d3
      duplex = ETH_FULLDUPLEX_MODE;
 801d4a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d4a4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d4a6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d4aa:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d4ac:	2301      	movs	r3, #1
 801d4ae:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d4b0:	e017      	b.n	801d4e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d4b2:	2300      	movs	r3, #0
 801d4b4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801d4b6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801d4ba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d4bc:	2301      	movs	r3, #1
 801d4be:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d4c0:	e00f      	b.n	801d4e2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801d4c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801d4c6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d4c8:	2300      	movs	r3, #0
 801d4ca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d4cc:	2301      	movs	r3, #1
 801d4ce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d4d0:	e007      	b.n	801d4e2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801d4d2:	2300      	movs	r3, #0
 801d4d4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801d4d6:	2300      	movs	r3, #0
 801d4d8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801d4da:	2301      	movs	r3, #1
 801d4dc:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801d4de:	e000      	b.n	801d4e2 <ethernet_link_check_state+0xce>
      break;
 801d4e0:	bf00      	nop
    if(linkchanged)
 801d4e2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801d4e4:	2b00      	cmp	r3, #0
 801d4e6:	d018      	beq.n	801d51a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801d4e8:	f107 030c 	add.w	r3, r7, #12
 801d4ec:	4619      	mov	r1, r3
 801d4ee:	480e      	ldr	r0, [pc, #56]	; (801d528 <ethernet_link_check_state+0x114>)
 801d4f0:	f7f9 ff46 	bl	8017380 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801d4f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801d4f6:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801d4f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801d4fa:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801d4fc:	f107 030c 	add.w	r3, r7, #12
 801d500:	4619      	mov	r1, r3
 801d502:	4809      	ldr	r0, [pc, #36]	; (801d528 <ethernet_link_check_state+0x114>)
 801d504:	f7fa f826 	bl	8017554 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801d508:	4807      	ldr	r0, [pc, #28]	; (801d528 <ethernet_link_check_state+0x114>)
 801d50a:	f7f9 fb2d 	bl	8016b68 <HAL_ETH_Start>
      netif_set_up(netif);
 801d50e:	6878      	ldr	r0, [r7, #4]
 801d510:	f000 ff88 	bl	801e424 <netif_set_up>
      netif_set_link_up(netif);
 801d514:	6878      	ldr	r0, [r7, #4]
 801d516:	f001 f823 	bl	801e560 <netif_set_link_up>
}
 801d51a:	bf00      	nop
 801d51c:	3780      	adds	r7, #128	; 0x80
 801d51e:	46bd      	mov	sp, r7
 801d520:	bd80      	pop	{r7, pc}
 801d522:	bf00      	nop
 801d524:	20010b20 	.word	0x20010b20
 801d528:	20010a38 	.word	0x20010a38

0801d52c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801d52c:	b580      	push	{r7, lr}
 801d52e:	b086      	sub	sp, #24
 801d530:	af02      	add	r7, sp, #8
 801d532:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801d534:	4812      	ldr	r0, [pc, #72]	; (801d580 <HAL_ETH_RxAllocateCallback+0x54>)
 801d536:	f000 fca5 	bl	801de84 <memp_malloc_pool>
 801d53a:	60f8      	str	r0, [r7, #12]
	if (p)
 801d53c:	68fb      	ldr	r3, [r7, #12]
 801d53e:	2b00      	cmp	r3, #0
 801d540:	d014      	beq.n	801d56c <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801d542:	68fb      	ldr	r3, [r7, #12]
 801d544:	f103 0214 	add.w	r2, r3, #20
 801d548:	687b      	ldr	r3, [r7, #4]
 801d54a:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801d54c:	68fb      	ldr	r3, [r7, #12]
 801d54e:	4a0d      	ldr	r2, [pc, #52]	; (801d584 <HAL_ETH_RxAllocateCallback+0x58>)
 801d550:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801d552:	687b      	ldr	r3, [r7, #4]
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801d55a:	9201      	str	r2, [sp, #4]
 801d55c:	9300      	str	r3, [sp, #0]
 801d55e:	68fb      	ldr	r3, [r7, #12]
 801d560:	2241      	movs	r2, #65	; 0x41
 801d562:	2100      	movs	r1, #0
 801d564:	2000      	movs	r0, #0
 801d566:	f001 fa75 	bl	801ea54 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801d56a:	e005      	b.n	801d578 <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801d56c:	4b06      	ldr	r3, [pc, #24]	; (801d588 <HAL_ETH_RxAllocateCallback+0x5c>)
 801d56e:	2201      	movs	r2, #1
 801d570:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801d572:	687b      	ldr	r3, [r7, #4]
 801d574:	2200      	movs	r2, #0
 801d576:	601a      	str	r2, [r3, #0]
}
 801d578:	bf00      	nop
 801d57a:	3710      	adds	r7, #16
 801d57c:	46bd      	mov	sp, r7
 801d57e:	bd80      	pop	{r7, pc}
 801d580:	08028ee0 	.word	0x08028ee0
 801d584:	0801d1b5 	.word	0x0801d1b5
 801d588:	20010a34 	.word	0x20010a34

0801d58c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801d58c:	b580      	push	{r7, lr}
 801d58e:	b088      	sub	sp, #32
 801d590:	af00      	add	r7, sp, #0
 801d592:	60f8      	str	r0, [r7, #12]
 801d594:	60b9      	str	r1, [r7, #8]
 801d596:	607a      	str	r2, [r7, #4]
 801d598:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801d59a:	68fb      	ldr	r3, [r7, #12]
 801d59c:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801d59e:	68bb      	ldr	r3, [r7, #8]
 801d5a0:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801d5a2:	2300      	movs	r3, #0
 801d5a4:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801d5a6:	687b      	ldr	r3, [r7, #4]
 801d5a8:	3b14      	subs	r3, #20
 801d5aa:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801d5ac:	69fb      	ldr	r3, [r7, #28]
 801d5ae:	2200      	movs	r2, #0
 801d5b0:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801d5b2:	69fb      	ldr	r3, [r7, #28]
 801d5b4:	2200      	movs	r2, #0
 801d5b6:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801d5b8:	69fb      	ldr	r3, [r7, #28]
 801d5ba:	887a      	ldrh	r2, [r7, #2]
 801d5bc:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801d5be:	69bb      	ldr	r3, [r7, #24]
 801d5c0:	681b      	ldr	r3, [r3, #0]
 801d5c2:	2b00      	cmp	r3, #0
 801d5c4:	d103      	bne.n	801d5ce <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801d5c6:	69bb      	ldr	r3, [r7, #24]
 801d5c8:	69fa      	ldr	r2, [r7, #28]
 801d5ca:	601a      	str	r2, [r3, #0]
 801d5cc:	e003      	b.n	801d5d6 <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801d5ce:	697b      	ldr	r3, [r7, #20]
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	69fa      	ldr	r2, [r7, #28]
 801d5d4:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801d5d6:	697b      	ldr	r3, [r7, #20]
 801d5d8:	69fa      	ldr	r2, [r7, #28]
 801d5da:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801d5dc:	69bb      	ldr	r3, [r7, #24]
 801d5de:	681b      	ldr	r3, [r3, #0]
 801d5e0:	61fb      	str	r3, [r7, #28]
 801d5e2:	e009      	b.n	801d5f8 <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801d5e4:	69fb      	ldr	r3, [r7, #28]
 801d5e6:	891a      	ldrh	r2, [r3, #8]
 801d5e8:	887b      	ldrh	r3, [r7, #2]
 801d5ea:	4413      	add	r3, r2
 801d5ec:	b29a      	uxth	r2, r3
 801d5ee:	69fb      	ldr	r3, [r7, #28]
 801d5f0:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801d5f2:	69fb      	ldr	r3, [r7, #28]
 801d5f4:	681b      	ldr	r3, [r3, #0]
 801d5f6:	61fb      	str	r3, [r7, #28]
 801d5f8:	69fb      	ldr	r3, [r7, #28]
 801d5fa:	2b00      	cmp	r3, #0
 801d5fc:	d1f2      	bne.n	801d5e4 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801d5fe:	887b      	ldrh	r3, [r7, #2]
 801d600:	4619      	mov	r1, r3
 801d602:	6878      	ldr	r0, [r7, #4]
 801d604:	f7ff fc14 	bl	801ce30 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d608:	bf00      	nop
 801d60a:	3720      	adds	r7, #32
 801d60c:	46bd      	mov	sp, r7
 801d60e:	bd80      	pop	{r7, pc}

0801d610 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d610:	b480      	push	{r7}
 801d612:	b083      	sub	sp, #12
 801d614:	af00      	add	r7, sp, #0
 801d616:	4603      	mov	r3, r0
 801d618:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d61a:	88fb      	ldrh	r3, [r7, #6]
 801d61c:	021b      	lsls	r3, r3, #8
 801d61e:	b21a      	sxth	r2, r3
 801d620:	88fb      	ldrh	r3, [r7, #6]
 801d622:	0a1b      	lsrs	r3, r3, #8
 801d624:	b29b      	uxth	r3, r3
 801d626:	b21b      	sxth	r3, r3
 801d628:	4313      	orrs	r3, r2
 801d62a:	b21b      	sxth	r3, r3
 801d62c:	b29b      	uxth	r3, r3
}
 801d62e:	4618      	mov	r0, r3
 801d630:	370c      	adds	r7, #12
 801d632:	46bd      	mov	sp, r7
 801d634:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d638:	4770      	bx	lr

0801d63a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d63a:	b580      	push	{r7, lr}
 801d63c:	b082      	sub	sp, #8
 801d63e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d640:	2300      	movs	r3, #0
 801d642:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d644:	f000 f8d2 	bl	801d7ec <mem_init>
  memp_init();
 801d648:	f000 fbd8 	bl	801ddfc <memp_init>
  pbuf_init();
  netif_init();
 801d64c:	f000 fcfc 	bl	801e048 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d650:	f001 ff9a 	bl	801f588 <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d654:	f001 ff16 	bl	801f484 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d658:	bf00      	nop
 801d65a:	3708      	adds	r7, #8
 801d65c:	46bd      	mov	sp, r7
 801d65e:	bd80      	pop	{r7, pc}

0801d660 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d660:	b480      	push	{r7}
 801d662:	b083      	sub	sp, #12
 801d664:	af00      	add	r7, sp, #0
 801d666:	4603      	mov	r3, r0
 801d668:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d66a:	4b05      	ldr	r3, [pc, #20]	; (801d680 <ptr_to_mem+0x20>)
 801d66c:	681a      	ldr	r2, [r3, #0]
 801d66e:	88fb      	ldrh	r3, [r7, #6]
 801d670:	4413      	add	r3, r2
}
 801d672:	4618      	mov	r0, r3
 801d674:	370c      	adds	r7, #12
 801d676:	46bd      	mov	sp, r7
 801d678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d67c:	4770      	bx	lr
 801d67e:	bf00      	nop
 801d680:	200111ac 	.word	0x200111ac

0801d684 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d684:	b480      	push	{r7}
 801d686:	b083      	sub	sp, #12
 801d688:	af00      	add	r7, sp, #0
 801d68a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d68c:	4b05      	ldr	r3, [pc, #20]	; (801d6a4 <mem_to_ptr+0x20>)
 801d68e:	681b      	ldr	r3, [r3, #0]
 801d690:	687a      	ldr	r2, [r7, #4]
 801d692:	1ad3      	subs	r3, r2, r3
 801d694:	b29b      	uxth	r3, r3
}
 801d696:	4618      	mov	r0, r3
 801d698:	370c      	adds	r7, #12
 801d69a:	46bd      	mov	sp, r7
 801d69c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6a0:	4770      	bx	lr
 801d6a2:	bf00      	nop
 801d6a4:	200111ac 	.word	0x200111ac

0801d6a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d6a8:	b590      	push	{r4, r7, lr}
 801d6aa:	b085      	sub	sp, #20
 801d6ac:	af00      	add	r7, sp, #0
 801d6ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d6b0:	4b45      	ldr	r3, [pc, #276]	; (801d7c8 <plug_holes+0x120>)
 801d6b2:	681b      	ldr	r3, [r3, #0]
 801d6b4:	687a      	ldr	r2, [r7, #4]
 801d6b6:	429a      	cmp	r2, r3
 801d6b8:	d206      	bcs.n	801d6c8 <plug_holes+0x20>
 801d6ba:	4b44      	ldr	r3, [pc, #272]	; (801d7cc <plug_holes+0x124>)
 801d6bc:	f240 12df 	movw	r2, #479	; 0x1df
 801d6c0:	4943      	ldr	r1, [pc, #268]	; (801d7d0 <plug_holes+0x128>)
 801d6c2:	4844      	ldr	r0, [pc, #272]	; (801d7d4 <plug_holes+0x12c>)
 801d6c4:	f005 f8b8 	bl	8022838 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d6c8:	4b43      	ldr	r3, [pc, #268]	; (801d7d8 <plug_holes+0x130>)
 801d6ca:	681b      	ldr	r3, [r3, #0]
 801d6cc:	687a      	ldr	r2, [r7, #4]
 801d6ce:	429a      	cmp	r2, r3
 801d6d0:	d306      	bcc.n	801d6e0 <plug_holes+0x38>
 801d6d2:	4b3e      	ldr	r3, [pc, #248]	; (801d7cc <plug_holes+0x124>)
 801d6d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d6d8:	4940      	ldr	r1, [pc, #256]	; (801d7dc <plug_holes+0x134>)
 801d6da:	483e      	ldr	r0, [pc, #248]	; (801d7d4 <plug_holes+0x12c>)
 801d6dc:	f005 f8ac 	bl	8022838 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d6e0:	687b      	ldr	r3, [r7, #4]
 801d6e2:	791b      	ldrb	r3, [r3, #4]
 801d6e4:	2b00      	cmp	r3, #0
 801d6e6:	d006      	beq.n	801d6f6 <plug_holes+0x4e>
 801d6e8:	4b38      	ldr	r3, [pc, #224]	; (801d7cc <plug_holes+0x124>)
 801d6ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d6ee:	493c      	ldr	r1, [pc, #240]	; (801d7e0 <plug_holes+0x138>)
 801d6f0:	4838      	ldr	r0, [pc, #224]	; (801d7d4 <plug_holes+0x12c>)
 801d6f2:	f005 f8a1 	bl	8022838 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d6f6:	687b      	ldr	r3, [r7, #4]
 801d6f8:	881b      	ldrh	r3, [r3, #0]
 801d6fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d6fe:	d906      	bls.n	801d70e <plug_holes+0x66>
 801d700:	4b32      	ldr	r3, [pc, #200]	; (801d7cc <plug_holes+0x124>)
 801d702:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d706:	4937      	ldr	r1, [pc, #220]	; (801d7e4 <plug_holes+0x13c>)
 801d708:	4832      	ldr	r0, [pc, #200]	; (801d7d4 <plug_holes+0x12c>)
 801d70a:	f005 f895 	bl	8022838 <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d70e:	687b      	ldr	r3, [r7, #4]
 801d710:	881b      	ldrh	r3, [r3, #0]
 801d712:	4618      	mov	r0, r3
 801d714:	f7ff ffa4 	bl	801d660 <ptr_to_mem>
 801d718:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d71a:	687a      	ldr	r2, [r7, #4]
 801d71c:	68fb      	ldr	r3, [r7, #12]
 801d71e:	429a      	cmp	r2, r3
 801d720:	d024      	beq.n	801d76c <plug_holes+0xc4>
 801d722:	68fb      	ldr	r3, [r7, #12]
 801d724:	791b      	ldrb	r3, [r3, #4]
 801d726:	2b00      	cmp	r3, #0
 801d728:	d120      	bne.n	801d76c <plug_holes+0xc4>
 801d72a:	4b2b      	ldr	r3, [pc, #172]	; (801d7d8 <plug_holes+0x130>)
 801d72c:	681b      	ldr	r3, [r3, #0]
 801d72e:	68fa      	ldr	r2, [r7, #12]
 801d730:	429a      	cmp	r2, r3
 801d732:	d01b      	beq.n	801d76c <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d734:	4b2c      	ldr	r3, [pc, #176]	; (801d7e8 <plug_holes+0x140>)
 801d736:	681b      	ldr	r3, [r3, #0]
 801d738:	68fa      	ldr	r2, [r7, #12]
 801d73a:	429a      	cmp	r2, r3
 801d73c:	d102      	bne.n	801d744 <plug_holes+0x9c>
      lfree = mem;
 801d73e:	4a2a      	ldr	r2, [pc, #168]	; (801d7e8 <plug_holes+0x140>)
 801d740:	687b      	ldr	r3, [r7, #4]
 801d742:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801d744:	68fb      	ldr	r3, [r7, #12]
 801d746:	881a      	ldrh	r2, [r3, #0]
 801d748:	687b      	ldr	r3, [r7, #4]
 801d74a:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801d74c:	68fb      	ldr	r3, [r7, #12]
 801d74e:	881b      	ldrh	r3, [r3, #0]
 801d750:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d754:	d00a      	beq.n	801d76c <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801d756:	68fb      	ldr	r3, [r7, #12]
 801d758:	881b      	ldrh	r3, [r3, #0]
 801d75a:	4618      	mov	r0, r3
 801d75c:	f7ff ff80 	bl	801d660 <ptr_to_mem>
 801d760:	4604      	mov	r4, r0
 801d762:	6878      	ldr	r0, [r7, #4]
 801d764:	f7ff ff8e 	bl	801d684 <mem_to_ptr>
 801d768:	4603      	mov	r3, r0
 801d76a:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801d76c:	687b      	ldr	r3, [r7, #4]
 801d76e:	885b      	ldrh	r3, [r3, #2]
 801d770:	4618      	mov	r0, r3
 801d772:	f7ff ff75 	bl	801d660 <ptr_to_mem>
 801d776:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801d778:	68ba      	ldr	r2, [r7, #8]
 801d77a:	687b      	ldr	r3, [r7, #4]
 801d77c:	429a      	cmp	r2, r3
 801d77e:	d01f      	beq.n	801d7c0 <plug_holes+0x118>
 801d780:	68bb      	ldr	r3, [r7, #8]
 801d782:	791b      	ldrb	r3, [r3, #4]
 801d784:	2b00      	cmp	r3, #0
 801d786:	d11b      	bne.n	801d7c0 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801d788:	4b17      	ldr	r3, [pc, #92]	; (801d7e8 <plug_holes+0x140>)
 801d78a:	681b      	ldr	r3, [r3, #0]
 801d78c:	687a      	ldr	r2, [r7, #4]
 801d78e:	429a      	cmp	r2, r3
 801d790:	d102      	bne.n	801d798 <plug_holes+0xf0>
      lfree = pmem;
 801d792:	4a15      	ldr	r2, [pc, #84]	; (801d7e8 <plug_holes+0x140>)
 801d794:	68bb      	ldr	r3, [r7, #8]
 801d796:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801d798:	687b      	ldr	r3, [r7, #4]
 801d79a:	881a      	ldrh	r2, [r3, #0]
 801d79c:	68bb      	ldr	r3, [r7, #8]
 801d79e:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801d7a0:	687b      	ldr	r3, [r7, #4]
 801d7a2:	881b      	ldrh	r3, [r3, #0]
 801d7a4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d7a8:	d00a      	beq.n	801d7c0 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801d7aa:	687b      	ldr	r3, [r7, #4]
 801d7ac:	881b      	ldrh	r3, [r3, #0]
 801d7ae:	4618      	mov	r0, r3
 801d7b0:	f7ff ff56 	bl	801d660 <ptr_to_mem>
 801d7b4:	4604      	mov	r4, r0
 801d7b6:	68b8      	ldr	r0, [r7, #8]
 801d7b8:	f7ff ff64 	bl	801d684 <mem_to_ptr>
 801d7bc:	4603      	mov	r3, r0
 801d7be:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801d7c0:	bf00      	nop
 801d7c2:	3714      	adds	r7, #20
 801d7c4:	46bd      	mov	sp, r7
 801d7c6:	bd90      	pop	{r4, r7, pc}
 801d7c8:	200111ac 	.word	0x200111ac
 801d7cc:	0802748c 	.word	0x0802748c
 801d7d0:	080274bc 	.word	0x080274bc
 801d7d4:	080274d4 	.word	0x080274d4
 801d7d8:	200111b0 	.word	0x200111b0
 801d7dc:	080274fc 	.word	0x080274fc
 801d7e0:	08027518 	.word	0x08027518
 801d7e4:	08027534 	.word	0x08027534
 801d7e8:	200111b4 	.word	0x200111b4

0801d7ec <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801d7ec:	b580      	push	{r7, lr}
 801d7ee:	b082      	sub	sp, #8
 801d7f0:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801d7f2:	4b18      	ldr	r3, [pc, #96]	; (801d854 <mem_init+0x68>)
 801d7f4:	3303      	adds	r3, #3
 801d7f6:	f023 0303 	bic.w	r3, r3, #3
 801d7fa:	461a      	mov	r2, r3
 801d7fc:	4b16      	ldr	r3, [pc, #88]	; (801d858 <mem_init+0x6c>)
 801d7fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801d800:	4b15      	ldr	r3, [pc, #84]	; (801d858 <mem_init+0x6c>)
 801d802:	681b      	ldr	r3, [r3, #0]
 801d804:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801d806:	687b      	ldr	r3, [r7, #4]
 801d808:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d80c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801d80e:	687b      	ldr	r3, [r7, #4]
 801d810:	2200      	movs	r2, #0
 801d812:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801d814:	687b      	ldr	r3, [r7, #4]
 801d816:	2200      	movs	r2, #0
 801d818:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801d81a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801d81e:	f7ff ff1f 	bl	801d660 <ptr_to_mem>
 801d822:	4603      	mov	r3, r0
 801d824:	4a0d      	ldr	r2, [pc, #52]	; (801d85c <mem_init+0x70>)
 801d826:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801d828:	4b0c      	ldr	r3, [pc, #48]	; (801d85c <mem_init+0x70>)
 801d82a:	681b      	ldr	r3, [r3, #0]
 801d82c:	2201      	movs	r2, #1
 801d82e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801d830:	4b0a      	ldr	r3, [pc, #40]	; (801d85c <mem_init+0x70>)
 801d832:	681b      	ldr	r3, [r3, #0]
 801d834:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d838:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801d83a:	4b08      	ldr	r3, [pc, #32]	; (801d85c <mem_init+0x70>)
 801d83c:	681b      	ldr	r3, [r3, #0]
 801d83e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d842:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801d844:	4b04      	ldr	r3, [pc, #16]	; (801d858 <mem_init+0x6c>)
 801d846:	681b      	ldr	r3, [r3, #0]
 801d848:	4a05      	ldr	r2, [pc, #20]	; (801d860 <mem_init+0x74>)
 801d84a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801d84c:	bf00      	nop
 801d84e:	3708      	adds	r7, #8
 801d850:	46bd      	mov	sp, r7
 801d852:	bd80      	pop	{r7, pc}
 801d854:	20010b58 	.word	0x20010b58
 801d858:	200111ac 	.word	0x200111ac
 801d85c:	200111b0 	.word	0x200111b0
 801d860:	200111b4 	.word	0x200111b4

0801d864 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801d864:	b580      	push	{r7, lr}
 801d866:	b086      	sub	sp, #24
 801d868:	af00      	add	r7, sp, #0
 801d86a:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801d86c:	6878      	ldr	r0, [r7, #4]
 801d86e:	f7ff ff09 	bl	801d684 <mem_to_ptr>
 801d872:	4603      	mov	r3, r0
 801d874:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801d876:	687b      	ldr	r3, [r7, #4]
 801d878:	881b      	ldrh	r3, [r3, #0]
 801d87a:	4618      	mov	r0, r3
 801d87c:	f7ff fef0 	bl	801d660 <ptr_to_mem>
 801d880:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801d882:	687b      	ldr	r3, [r7, #4]
 801d884:	885b      	ldrh	r3, [r3, #2]
 801d886:	4618      	mov	r0, r3
 801d888:	f7ff feea 	bl	801d660 <ptr_to_mem>
 801d88c:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d88e:	687b      	ldr	r3, [r7, #4]
 801d890:	881b      	ldrh	r3, [r3, #0]
 801d892:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d896:	d818      	bhi.n	801d8ca <mem_link_valid+0x66>
 801d898:	687b      	ldr	r3, [r7, #4]
 801d89a:	885b      	ldrh	r3, [r3, #2]
 801d89c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d8a0:	d813      	bhi.n	801d8ca <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d8a2:	687b      	ldr	r3, [r7, #4]
 801d8a4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d8a6:	8afa      	ldrh	r2, [r7, #22]
 801d8a8:	429a      	cmp	r2, r3
 801d8aa:	d004      	beq.n	801d8b6 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d8ac:	68fb      	ldr	r3, [r7, #12]
 801d8ae:	881b      	ldrh	r3, [r3, #0]
 801d8b0:	8afa      	ldrh	r2, [r7, #22]
 801d8b2:	429a      	cmp	r2, r3
 801d8b4:	d109      	bne.n	801d8ca <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d8b6:	4b08      	ldr	r3, [pc, #32]	; (801d8d8 <mem_link_valid+0x74>)
 801d8b8:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d8ba:	693a      	ldr	r2, [r7, #16]
 801d8bc:	429a      	cmp	r2, r3
 801d8be:	d006      	beq.n	801d8ce <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d8c0:	693b      	ldr	r3, [r7, #16]
 801d8c2:	885b      	ldrh	r3, [r3, #2]
 801d8c4:	8afa      	ldrh	r2, [r7, #22]
 801d8c6:	429a      	cmp	r2, r3
 801d8c8:	d001      	beq.n	801d8ce <mem_link_valid+0x6a>
    return 0;
 801d8ca:	2300      	movs	r3, #0
 801d8cc:	e000      	b.n	801d8d0 <mem_link_valid+0x6c>
  }
  return 1;
 801d8ce:	2301      	movs	r3, #1
}
 801d8d0:	4618      	mov	r0, r3
 801d8d2:	3718      	adds	r7, #24
 801d8d4:	46bd      	mov	sp, r7
 801d8d6:	bd80      	pop	{r7, pc}
 801d8d8:	200111b0 	.word	0x200111b0

0801d8dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801d8dc:	b580      	push	{r7, lr}
 801d8de:	b084      	sub	sp, #16
 801d8e0:	af00      	add	r7, sp, #0
 801d8e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801d8e4:	687b      	ldr	r3, [r7, #4]
 801d8e6:	2b00      	cmp	r3, #0
 801d8e8:	d04c      	beq.n	801d984 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801d8ea:	687b      	ldr	r3, [r7, #4]
 801d8ec:	f003 0303 	and.w	r3, r3, #3
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d007      	beq.n	801d904 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801d8f4:	4b25      	ldr	r3, [pc, #148]	; (801d98c <mem_free+0xb0>)
 801d8f6:	f240 2273 	movw	r2, #627	; 0x273
 801d8fa:	4925      	ldr	r1, [pc, #148]	; (801d990 <mem_free+0xb4>)
 801d8fc:	4825      	ldr	r0, [pc, #148]	; (801d994 <mem_free+0xb8>)
 801d8fe:	f004 ff9b 	bl	8022838 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d902:	e040      	b.n	801d986 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d904:	687b      	ldr	r3, [r7, #4]
 801d906:	3b08      	subs	r3, #8
 801d908:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801d90a:	4b23      	ldr	r3, [pc, #140]	; (801d998 <mem_free+0xbc>)
 801d90c:	681b      	ldr	r3, [r3, #0]
 801d90e:	68fa      	ldr	r2, [r7, #12]
 801d910:	429a      	cmp	r2, r3
 801d912:	d306      	bcc.n	801d922 <mem_free+0x46>
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	f103 020c 	add.w	r2, r3, #12
 801d91a:	4b20      	ldr	r3, [pc, #128]	; (801d99c <mem_free+0xc0>)
 801d91c:	681b      	ldr	r3, [r3, #0]
 801d91e:	429a      	cmp	r2, r3
 801d920:	d907      	bls.n	801d932 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801d922:	4b1a      	ldr	r3, [pc, #104]	; (801d98c <mem_free+0xb0>)
 801d924:	f240 227f 	movw	r2, #639	; 0x27f
 801d928:	491d      	ldr	r1, [pc, #116]	; (801d9a0 <mem_free+0xc4>)
 801d92a:	481a      	ldr	r0, [pc, #104]	; (801d994 <mem_free+0xb8>)
 801d92c:	f004 ff84 	bl	8022838 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d930:	e029      	b.n	801d986 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801d932:	68fb      	ldr	r3, [r7, #12]
 801d934:	791b      	ldrb	r3, [r3, #4]
 801d936:	2b00      	cmp	r3, #0
 801d938:	d107      	bne.n	801d94a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801d93a:	4b14      	ldr	r3, [pc, #80]	; (801d98c <mem_free+0xb0>)
 801d93c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801d940:	4918      	ldr	r1, [pc, #96]	; (801d9a4 <mem_free+0xc8>)
 801d942:	4814      	ldr	r0, [pc, #80]	; (801d994 <mem_free+0xb8>)
 801d944:	f004 ff78 	bl	8022838 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d948:	e01d      	b.n	801d986 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801d94a:	68f8      	ldr	r0, [r7, #12]
 801d94c:	f7ff ff8a 	bl	801d864 <mem_link_valid>
 801d950:	4603      	mov	r3, r0
 801d952:	2b00      	cmp	r3, #0
 801d954:	d107      	bne.n	801d966 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801d956:	4b0d      	ldr	r3, [pc, #52]	; (801d98c <mem_free+0xb0>)
 801d958:	f240 2295 	movw	r2, #661	; 0x295
 801d95c:	4912      	ldr	r1, [pc, #72]	; (801d9a8 <mem_free+0xcc>)
 801d95e:	480d      	ldr	r0, [pc, #52]	; (801d994 <mem_free+0xb8>)
 801d960:	f004 ff6a 	bl	8022838 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d964:	e00f      	b.n	801d986 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801d966:	68fb      	ldr	r3, [r7, #12]
 801d968:	2200      	movs	r2, #0
 801d96a:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801d96c:	4b0f      	ldr	r3, [pc, #60]	; (801d9ac <mem_free+0xd0>)
 801d96e:	681b      	ldr	r3, [r3, #0]
 801d970:	68fa      	ldr	r2, [r7, #12]
 801d972:	429a      	cmp	r2, r3
 801d974:	d202      	bcs.n	801d97c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801d976:	4a0d      	ldr	r2, [pc, #52]	; (801d9ac <mem_free+0xd0>)
 801d978:	68fb      	ldr	r3, [r7, #12]
 801d97a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801d97c:	68f8      	ldr	r0, [r7, #12]
 801d97e:	f7ff fe93 	bl	801d6a8 <plug_holes>
 801d982:	e000      	b.n	801d986 <mem_free+0xaa>
    return;
 801d984:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801d986:	3710      	adds	r7, #16
 801d988:	46bd      	mov	sp, r7
 801d98a:	bd80      	pop	{r7, pc}
 801d98c:	0802748c 	.word	0x0802748c
 801d990:	08027560 	.word	0x08027560
 801d994:	080274d4 	.word	0x080274d4
 801d998:	200111ac 	.word	0x200111ac
 801d99c:	200111b0 	.word	0x200111b0
 801d9a0:	08027584 	.word	0x08027584
 801d9a4:	080275a0 	.word	0x080275a0
 801d9a8:	080275c8 	.word	0x080275c8
 801d9ac:	200111b4 	.word	0x200111b4

0801d9b0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801d9b0:	b580      	push	{r7, lr}
 801d9b2:	b088      	sub	sp, #32
 801d9b4:	af00      	add	r7, sp, #0
 801d9b6:	6078      	str	r0, [r7, #4]
 801d9b8:	460b      	mov	r3, r1
 801d9ba:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801d9bc:	887b      	ldrh	r3, [r7, #2]
 801d9be:	3303      	adds	r3, #3
 801d9c0:	b29b      	uxth	r3, r3
 801d9c2:	f023 0303 	bic.w	r3, r3, #3
 801d9c6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801d9c8:	8bfb      	ldrh	r3, [r7, #30]
 801d9ca:	2b0b      	cmp	r3, #11
 801d9cc:	d801      	bhi.n	801d9d2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801d9ce:	230c      	movs	r3, #12
 801d9d0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801d9d2:	8bfb      	ldrh	r3, [r7, #30]
 801d9d4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d9d8:	d803      	bhi.n	801d9e2 <mem_trim+0x32>
 801d9da:	8bfa      	ldrh	r2, [r7, #30]
 801d9dc:	887b      	ldrh	r3, [r7, #2]
 801d9de:	429a      	cmp	r2, r3
 801d9e0:	d201      	bcs.n	801d9e6 <mem_trim+0x36>
    return NULL;
 801d9e2:	2300      	movs	r3, #0
 801d9e4:	e0cc      	b.n	801db80 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801d9e6:	4b68      	ldr	r3, [pc, #416]	; (801db88 <mem_trim+0x1d8>)
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	687a      	ldr	r2, [r7, #4]
 801d9ec:	429a      	cmp	r2, r3
 801d9ee:	d304      	bcc.n	801d9fa <mem_trim+0x4a>
 801d9f0:	4b66      	ldr	r3, [pc, #408]	; (801db8c <mem_trim+0x1dc>)
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	687a      	ldr	r2, [r7, #4]
 801d9f6:	429a      	cmp	r2, r3
 801d9f8:	d306      	bcc.n	801da08 <mem_trim+0x58>
 801d9fa:	4b65      	ldr	r3, [pc, #404]	; (801db90 <mem_trim+0x1e0>)
 801d9fc:	f240 22d1 	movw	r2, #721	; 0x2d1
 801da00:	4964      	ldr	r1, [pc, #400]	; (801db94 <mem_trim+0x1e4>)
 801da02:	4865      	ldr	r0, [pc, #404]	; (801db98 <mem_trim+0x1e8>)
 801da04:	f004 ff18 	bl	8022838 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801da08:	4b5f      	ldr	r3, [pc, #380]	; (801db88 <mem_trim+0x1d8>)
 801da0a:	681b      	ldr	r3, [r3, #0]
 801da0c:	687a      	ldr	r2, [r7, #4]
 801da0e:	429a      	cmp	r2, r3
 801da10:	d304      	bcc.n	801da1c <mem_trim+0x6c>
 801da12:	4b5e      	ldr	r3, [pc, #376]	; (801db8c <mem_trim+0x1dc>)
 801da14:	681b      	ldr	r3, [r3, #0]
 801da16:	687a      	ldr	r2, [r7, #4]
 801da18:	429a      	cmp	r2, r3
 801da1a:	d301      	bcc.n	801da20 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801da1c:	687b      	ldr	r3, [r7, #4]
 801da1e:	e0af      	b.n	801db80 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	3b08      	subs	r3, #8
 801da24:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801da26:	69b8      	ldr	r0, [r7, #24]
 801da28:	f7ff fe2c 	bl	801d684 <mem_to_ptr>
 801da2c:	4603      	mov	r3, r0
 801da2e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801da30:	69bb      	ldr	r3, [r7, #24]
 801da32:	881a      	ldrh	r2, [r3, #0]
 801da34:	8afb      	ldrh	r3, [r7, #22]
 801da36:	1ad3      	subs	r3, r2, r3
 801da38:	b29b      	uxth	r3, r3
 801da3a:	3b08      	subs	r3, #8
 801da3c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801da3e:	8bfa      	ldrh	r2, [r7, #30]
 801da40:	8abb      	ldrh	r3, [r7, #20]
 801da42:	429a      	cmp	r2, r3
 801da44:	d906      	bls.n	801da54 <mem_trim+0xa4>
 801da46:	4b52      	ldr	r3, [pc, #328]	; (801db90 <mem_trim+0x1e0>)
 801da48:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801da4c:	4953      	ldr	r1, [pc, #332]	; (801db9c <mem_trim+0x1ec>)
 801da4e:	4852      	ldr	r0, [pc, #328]	; (801db98 <mem_trim+0x1e8>)
 801da50:	f004 fef2 	bl	8022838 <iprintf>
  if (newsize > size) {
 801da54:	8bfa      	ldrh	r2, [r7, #30]
 801da56:	8abb      	ldrh	r3, [r7, #20]
 801da58:	429a      	cmp	r2, r3
 801da5a:	d901      	bls.n	801da60 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801da5c:	2300      	movs	r3, #0
 801da5e:	e08f      	b.n	801db80 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801da60:	8bfa      	ldrh	r2, [r7, #30]
 801da62:	8abb      	ldrh	r3, [r7, #20]
 801da64:	429a      	cmp	r2, r3
 801da66:	d101      	bne.n	801da6c <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	e089      	b.n	801db80 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801da6c:	69bb      	ldr	r3, [r7, #24]
 801da6e:	881b      	ldrh	r3, [r3, #0]
 801da70:	4618      	mov	r0, r3
 801da72:	f7ff fdf5 	bl	801d660 <ptr_to_mem>
 801da76:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801da78:	693b      	ldr	r3, [r7, #16]
 801da7a:	791b      	ldrb	r3, [r3, #4]
 801da7c:	2b00      	cmp	r3, #0
 801da7e:	d13f      	bne.n	801db00 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801da80:	69bb      	ldr	r3, [r7, #24]
 801da82:	881b      	ldrh	r3, [r3, #0]
 801da84:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801da88:	d106      	bne.n	801da98 <mem_trim+0xe8>
 801da8a:	4b41      	ldr	r3, [pc, #260]	; (801db90 <mem_trim+0x1e0>)
 801da8c:	f240 22f5 	movw	r2, #757	; 0x2f5
 801da90:	4943      	ldr	r1, [pc, #268]	; (801dba0 <mem_trim+0x1f0>)
 801da92:	4841      	ldr	r0, [pc, #260]	; (801db98 <mem_trim+0x1e8>)
 801da94:	f004 fed0 	bl	8022838 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801da98:	693b      	ldr	r3, [r7, #16]
 801da9a:	881b      	ldrh	r3, [r3, #0]
 801da9c:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801da9e:	8afa      	ldrh	r2, [r7, #22]
 801daa0:	8bfb      	ldrh	r3, [r7, #30]
 801daa2:	4413      	add	r3, r2
 801daa4:	b29b      	uxth	r3, r3
 801daa6:	3308      	adds	r3, #8
 801daa8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801daaa:	4b3e      	ldr	r3, [pc, #248]	; (801dba4 <mem_trim+0x1f4>)
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	693a      	ldr	r2, [r7, #16]
 801dab0:	429a      	cmp	r2, r3
 801dab2:	d106      	bne.n	801dac2 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801dab4:	89fb      	ldrh	r3, [r7, #14]
 801dab6:	4618      	mov	r0, r3
 801dab8:	f7ff fdd2 	bl	801d660 <ptr_to_mem>
 801dabc:	4603      	mov	r3, r0
 801dabe:	4a39      	ldr	r2, [pc, #228]	; (801dba4 <mem_trim+0x1f4>)
 801dac0:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801dac2:	89fb      	ldrh	r3, [r7, #14]
 801dac4:	4618      	mov	r0, r3
 801dac6:	f7ff fdcb 	bl	801d660 <ptr_to_mem>
 801daca:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801dacc:	693b      	ldr	r3, [r7, #16]
 801dace:	2200      	movs	r2, #0
 801dad0:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801dad2:	693b      	ldr	r3, [r7, #16]
 801dad4:	89ba      	ldrh	r2, [r7, #12]
 801dad6:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801dad8:	693b      	ldr	r3, [r7, #16]
 801dada:	8afa      	ldrh	r2, [r7, #22]
 801dadc:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801dade:	69bb      	ldr	r3, [r7, #24]
 801dae0:	89fa      	ldrh	r2, [r7, #14]
 801dae2:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801dae4:	693b      	ldr	r3, [r7, #16]
 801dae6:	881b      	ldrh	r3, [r3, #0]
 801dae8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801daec:	d047      	beq.n	801db7e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801daee:	693b      	ldr	r3, [r7, #16]
 801daf0:	881b      	ldrh	r3, [r3, #0]
 801daf2:	4618      	mov	r0, r3
 801daf4:	f7ff fdb4 	bl	801d660 <ptr_to_mem>
 801daf8:	4602      	mov	r2, r0
 801dafa:	89fb      	ldrh	r3, [r7, #14]
 801dafc:	8053      	strh	r3, [r2, #2]
 801dafe:	e03e      	b.n	801db7e <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801db00:	8bfb      	ldrh	r3, [r7, #30]
 801db02:	f103 0214 	add.w	r2, r3, #20
 801db06:	8abb      	ldrh	r3, [r7, #20]
 801db08:	429a      	cmp	r2, r3
 801db0a:	d838      	bhi.n	801db7e <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801db0c:	8afa      	ldrh	r2, [r7, #22]
 801db0e:	8bfb      	ldrh	r3, [r7, #30]
 801db10:	4413      	add	r3, r2
 801db12:	b29b      	uxth	r3, r3
 801db14:	3308      	adds	r3, #8
 801db16:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801db18:	69bb      	ldr	r3, [r7, #24]
 801db1a:	881b      	ldrh	r3, [r3, #0]
 801db1c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801db20:	d106      	bne.n	801db30 <mem_trim+0x180>
 801db22:	4b1b      	ldr	r3, [pc, #108]	; (801db90 <mem_trim+0x1e0>)
 801db24:	f240 3216 	movw	r2, #790	; 0x316
 801db28:	491d      	ldr	r1, [pc, #116]	; (801dba0 <mem_trim+0x1f0>)
 801db2a:	481b      	ldr	r0, [pc, #108]	; (801db98 <mem_trim+0x1e8>)
 801db2c:	f004 fe84 	bl	8022838 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801db30:	89fb      	ldrh	r3, [r7, #14]
 801db32:	4618      	mov	r0, r3
 801db34:	f7ff fd94 	bl	801d660 <ptr_to_mem>
 801db38:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801db3a:	4b1a      	ldr	r3, [pc, #104]	; (801dba4 <mem_trim+0x1f4>)
 801db3c:	681b      	ldr	r3, [r3, #0]
 801db3e:	693a      	ldr	r2, [r7, #16]
 801db40:	429a      	cmp	r2, r3
 801db42:	d202      	bcs.n	801db4a <mem_trim+0x19a>
      lfree = mem2;
 801db44:	4a17      	ldr	r2, [pc, #92]	; (801dba4 <mem_trim+0x1f4>)
 801db46:	693b      	ldr	r3, [r7, #16]
 801db48:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801db4a:	693b      	ldr	r3, [r7, #16]
 801db4c:	2200      	movs	r2, #0
 801db4e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801db50:	69bb      	ldr	r3, [r7, #24]
 801db52:	881a      	ldrh	r2, [r3, #0]
 801db54:	693b      	ldr	r3, [r7, #16]
 801db56:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801db58:	693b      	ldr	r3, [r7, #16]
 801db5a:	8afa      	ldrh	r2, [r7, #22]
 801db5c:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801db5e:	69bb      	ldr	r3, [r7, #24]
 801db60:	89fa      	ldrh	r2, [r7, #14]
 801db62:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801db64:	693b      	ldr	r3, [r7, #16]
 801db66:	881b      	ldrh	r3, [r3, #0]
 801db68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801db6c:	d007      	beq.n	801db7e <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801db6e:	693b      	ldr	r3, [r7, #16]
 801db70:	881b      	ldrh	r3, [r3, #0]
 801db72:	4618      	mov	r0, r3
 801db74:	f7ff fd74 	bl	801d660 <ptr_to_mem>
 801db78:	4602      	mov	r2, r0
 801db7a:	89fb      	ldrh	r3, [r7, #14]
 801db7c:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801db7e:	687b      	ldr	r3, [r7, #4]
}
 801db80:	4618      	mov	r0, r3
 801db82:	3720      	adds	r7, #32
 801db84:	46bd      	mov	sp, r7
 801db86:	bd80      	pop	{r7, pc}
 801db88:	200111ac 	.word	0x200111ac
 801db8c:	200111b0 	.word	0x200111b0
 801db90:	0802748c 	.word	0x0802748c
 801db94:	080275fc 	.word	0x080275fc
 801db98:	080274d4 	.word	0x080274d4
 801db9c:	08027614 	.word	0x08027614
 801dba0:	08027634 	.word	0x08027634
 801dba4:	200111b4 	.word	0x200111b4

0801dba8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801dba8:	b580      	push	{r7, lr}
 801dbaa:	b088      	sub	sp, #32
 801dbac:	af00      	add	r7, sp, #0
 801dbae:	4603      	mov	r3, r0
 801dbb0:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801dbb2:	88fb      	ldrh	r3, [r7, #6]
 801dbb4:	2b00      	cmp	r3, #0
 801dbb6:	d101      	bne.n	801dbbc <mem_malloc+0x14>
    return NULL;
 801dbb8:	2300      	movs	r3, #0
 801dbba:	e0d9      	b.n	801dd70 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801dbbc:	88fb      	ldrh	r3, [r7, #6]
 801dbbe:	3303      	adds	r3, #3
 801dbc0:	b29b      	uxth	r3, r3
 801dbc2:	f023 0303 	bic.w	r3, r3, #3
 801dbc6:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801dbc8:	8bbb      	ldrh	r3, [r7, #28]
 801dbca:	2b0b      	cmp	r3, #11
 801dbcc:	d801      	bhi.n	801dbd2 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801dbce:	230c      	movs	r3, #12
 801dbd0:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801dbd2:	8bbb      	ldrh	r3, [r7, #28]
 801dbd4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dbd8:	d803      	bhi.n	801dbe2 <mem_malloc+0x3a>
 801dbda:	8bba      	ldrh	r2, [r7, #28]
 801dbdc:	88fb      	ldrh	r3, [r7, #6]
 801dbde:	429a      	cmp	r2, r3
 801dbe0:	d201      	bcs.n	801dbe6 <mem_malloc+0x3e>
    return NULL;
 801dbe2:	2300      	movs	r3, #0
 801dbe4:	e0c4      	b.n	801dd70 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801dbe6:	4b64      	ldr	r3, [pc, #400]	; (801dd78 <mem_malloc+0x1d0>)
 801dbe8:	681b      	ldr	r3, [r3, #0]
 801dbea:	4618      	mov	r0, r3
 801dbec:	f7ff fd4a 	bl	801d684 <mem_to_ptr>
 801dbf0:	4603      	mov	r3, r0
 801dbf2:	83fb      	strh	r3, [r7, #30]
 801dbf4:	e0b4      	b.n	801dd60 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801dbf6:	8bfb      	ldrh	r3, [r7, #30]
 801dbf8:	4618      	mov	r0, r3
 801dbfa:	f7ff fd31 	bl	801d660 <ptr_to_mem>
 801dbfe:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801dc00:	697b      	ldr	r3, [r7, #20]
 801dc02:	791b      	ldrb	r3, [r3, #4]
 801dc04:	2b00      	cmp	r3, #0
 801dc06:	f040 80a4 	bne.w	801dd52 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801dc0a:	697b      	ldr	r3, [r7, #20]
 801dc0c:	881b      	ldrh	r3, [r3, #0]
 801dc0e:	461a      	mov	r2, r3
 801dc10:	8bfb      	ldrh	r3, [r7, #30]
 801dc12:	1ad3      	subs	r3, r2, r3
 801dc14:	f1a3 0208 	sub.w	r2, r3, #8
 801dc18:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801dc1a:	429a      	cmp	r2, r3
 801dc1c:	f0c0 8099 	bcc.w	801dd52 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801dc20:	697b      	ldr	r3, [r7, #20]
 801dc22:	881b      	ldrh	r3, [r3, #0]
 801dc24:	461a      	mov	r2, r3
 801dc26:	8bfb      	ldrh	r3, [r7, #30]
 801dc28:	1ad3      	subs	r3, r2, r3
 801dc2a:	f1a3 0208 	sub.w	r2, r3, #8
 801dc2e:	8bbb      	ldrh	r3, [r7, #28]
 801dc30:	3314      	adds	r3, #20
 801dc32:	429a      	cmp	r2, r3
 801dc34:	d333      	bcc.n	801dc9e <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801dc36:	8bfa      	ldrh	r2, [r7, #30]
 801dc38:	8bbb      	ldrh	r3, [r7, #28]
 801dc3a:	4413      	add	r3, r2
 801dc3c:	b29b      	uxth	r3, r3
 801dc3e:	3308      	adds	r3, #8
 801dc40:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801dc42:	8a7b      	ldrh	r3, [r7, #18]
 801dc44:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dc48:	d106      	bne.n	801dc58 <mem_malloc+0xb0>
 801dc4a:	4b4c      	ldr	r3, [pc, #304]	; (801dd7c <mem_malloc+0x1d4>)
 801dc4c:	f240 3287 	movw	r2, #903	; 0x387
 801dc50:	494b      	ldr	r1, [pc, #300]	; (801dd80 <mem_malloc+0x1d8>)
 801dc52:	484c      	ldr	r0, [pc, #304]	; (801dd84 <mem_malloc+0x1dc>)
 801dc54:	f004 fdf0 	bl	8022838 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801dc58:	8a7b      	ldrh	r3, [r7, #18]
 801dc5a:	4618      	mov	r0, r3
 801dc5c:	f7ff fd00 	bl	801d660 <ptr_to_mem>
 801dc60:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801dc62:	68fb      	ldr	r3, [r7, #12]
 801dc64:	2200      	movs	r2, #0
 801dc66:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801dc68:	697b      	ldr	r3, [r7, #20]
 801dc6a:	881a      	ldrh	r2, [r3, #0]
 801dc6c:	68fb      	ldr	r3, [r7, #12]
 801dc6e:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801dc70:	68fb      	ldr	r3, [r7, #12]
 801dc72:	8bfa      	ldrh	r2, [r7, #30]
 801dc74:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801dc76:	697b      	ldr	r3, [r7, #20]
 801dc78:	8a7a      	ldrh	r2, [r7, #18]
 801dc7a:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801dc7c:	697b      	ldr	r3, [r7, #20]
 801dc7e:	2201      	movs	r2, #1
 801dc80:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	881b      	ldrh	r3, [r3, #0]
 801dc86:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801dc8a:	d00b      	beq.n	801dca4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801dc8c:	68fb      	ldr	r3, [r7, #12]
 801dc8e:	881b      	ldrh	r3, [r3, #0]
 801dc90:	4618      	mov	r0, r3
 801dc92:	f7ff fce5 	bl	801d660 <ptr_to_mem>
 801dc96:	4602      	mov	r2, r0
 801dc98:	8a7b      	ldrh	r3, [r7, #18]
 801dc9a:	8053      	strh	r3, [r2, #2]
 801dc9c:	e002      	b.n	801dca4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801dc9e:	697b      	ldr	r3, [r7, #20]
 801dca0:	2201      	movs	r2, #1
 801dca2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801dca4:	4b34      	ldr	r3, [pc, #208]	; (801dd78 <mem_malloc+0x1d0>)
 801dca6:	681b      	ldr	r3, [r3, #0]
 801dca8:	697a      	ldr	r2, [r7, #20]
 801dcaa:	429a      	cmp	r2, r3
 801dcac:	d127      	bne.n	801dcfe <mem_malloc+0x156>
          struct mem *cur = lfree;
 801dcae:	4b32      	ldr	r3, [pc, #200]	; (801dd78 <mem_malloc+0x1d0>)
 801dcb0:	681b      	ldr	r3, [r3, #0]
 801dcb2:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801dcb4:	e005      	b.n	801dcc2 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801dcb6:	69bb      	ldr	r3, [r7, #24]
 801dcb8:	881b      	ldrh	r3, [r3, #0]
 801dcba:	4618      	mov	r0, r3
 801dcbc:	f7ff fcd0 	bl	801d660 <ptr_to_mem>
 801dcc0:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801dcc2:	69bb      	ldr	r3, [r7, #24]
 801dcc4:	791b      	ldrb	r3, [r3, #4]
 801dcc6:	2b00      	cmp	r3, #0
 801dcc8:	d004      	beq.n	801dcd4 <mem_malloc+0x12c>
 801dcca:	4b2f      	ldr	r3, [pc, #188]	; (801dd88 <mem_malloc+0x1e0>)
 801dccc:	681b      	ldr	r3, [r3, #0]
 801dcce:	69ba      	ldr	r2, [r7, #24]
 801dcd0:	429a      	cmp	r2, r3
 801dcd2:	d1f0      	bne.n	801dcb6 <mem_malloc+0x10e>
          }
          lfree = cur;
 801dcd4:	4a28      	ldr	r2, [pc, #160]	; (801dd78 <mem_malloc+0x1d0>)
 801dcd6:	69bb      	ldr	r3, [r7, #24]
 801dcd8:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801dcda:	4b27      	ldr	r3, [pc, #156]	; (801dd78 <mem_malloc+0x1d0>)
 801dcdc:	681a      	ldr	r2, [r3, #0]
 801dcde:	4b2a      	ldr	r3, [pc, #168]	; (801dd88 <mem_malloc+0x1e0>)
 801dce0:	681b      	ldr	r3, [r3, #0]
 801dce2:	429a      	cmp	r2, r3
 801dce4:	d00b      	beq.n	801dcfe <mem_malloc+0x156>
 801dce6:	4b24      	ldr	r3, [pc, #144]	; (801dd78 <mem_malloc+0x1d0>)
 801dce8:	681b      	ldr	r3, [r3, #0]
 801dcea:	791b      	ldrb	r3, [r3, #4]
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	d006      	beq.n	801dcfe <mem_malloc+0x156>
 801dcf0:	4b22      	ldr	r3, [pc, #136]	; (801dd7c <mem_malloc+0x1d4>)
 801dcf2:	f240 32b5 	movw	r2, #949	; 0x3b5
 801dcf6:	4925      	ldr	r1, [pc, #148]	; (801dd8c <mem_malloc+0x1e4>)
 801dcf8:	4822      	ldr	r0, [pc, #136]	; (801dd84 <mem_malloc+0x1dc>)
 801dcfa:	f004 fd9d 	bl	8022838 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801dcfe:	8bba      	ldrh	r2, [r7, #28]
 801dd00:	697b      	ldr	r3, [r7, #20]
 801dd02:	4413      	add	r3, r2
 801dd04:	3308      	adds	r3, #8
 801dd06:	4a20      	ldr	r2, [pc, #128]	; (801dd88 <mem_malloc+0x1e0>)
 801dd08:	6812      	ldr	r2, [r2, #0]
 801dd0a:	4293      	cmp	r3, r2
 801dd0c:	d906      	bls.n	801dd1c <mem_malloc+0x174>
 801dd0e:	4b1b      	ldr	r3, [pc, #108]	; (801dd7c <mem_malloc+0x1d4>)
 801dd10:	f240 32b9 	movw	r2, #953	; 0x3b9
 801dd14:	491e      	ldr	r1, [pc, #120]	; (801dd90 <mem_malloc+0x1e8>)
 801dd16:	481b      	ldr	r0, [pc, #108]	; (801dd84 <mem_malloc+0x1dc>)
 801dd18:	f004 fd8e 	bl	8022838 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801dd1c:	697b      	ldr	r3, [r7, #20]
 801dd1e:	f003 0303 	and.w	r3, r3, #3
 801dd22:	2b00      	cmp	r3, #0
 801dd24:	d006      	beq.n	801dd34 <mem_malloc+0x18c>
 801dd26:	4b15      	ldr	r3, [pc, #84]	; (801dd7c <mem_malloc+0x1d4>)
 801dd28:	f240 32bb 	movw	r2, #955	; 0x3bb
 801dd2c:	4919      	ldr	r1, [pc, #100]	; (801dd94 <mem_malloc+0x1ec>)
 801dd2e:	4815      	ldr	r0, [pc, #84]	; (801dd84 <mem_malloc+0x1dc>)
 801dd30:	f004 fd82 	bl	8022838 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801dd34:	697b      	ldr	r3, [r7, #20]
 801dd36:	f003 0303 	and.w	r3, r3, #3
 801dd3a:	2b00      	cmp	r3, #0
 801dd3c:	d006      	beq.n	801dd4c <mem_malloc+0x1a4>
 801dd3e:	4b0f      	ldr	r3, [pc, #60]	; (801dd7c <mem_malloc+0x1d4>)
 801dd40:	f240 32bd 	movw	r2, #957	; 0x3bd
 801dd44:	4914      	ldr	r1, [pc, #80]	; (801dd98 <mem_malloc+0x1f0>)
 801dd46:	480f      	ldr	r0, [pc, #60]	; (801dd84 <mem_malloc+0x1dc>)
 801dd48:	f004 fd76 	bl	8022838 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801dd4c:	697b      	ldr	r3, [r7, #20]
 801dd4e:	3308      	adds	r3, #8
 801dd50:	e00e      	b.n	801dd70 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801dd52:	8bfb      	ldrh	r3, [r7, #30]
 801dd54:	4618      	mov	r0, r3
 801dd56:	f7ff fc83 	bl	801d660 <ptr_to_mem>
 801dd5a:	4603      	mov	r3, r0
 801dd5c:	881b      	ldrh	r3, [r3, #0]
 801dd5e:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801dd60:	8bfa      	ldrh	r2, [r7, #30]
 801dd62:	8bbb      	ldrh	r3, [r7, #28]
 801dd64:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801dd68:	429a      	cmp	r2, r3
 801dd6a:	f4ff af44 	bcc.w	801dbf6 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801dd6e:	2300      	movs	r3, #0
}
 801dd70:	4618      	mov	r0, r3
 801dd72:	3720      	adds	r7, #32
 801dd74:	46bd      	mov	sp, r7
 801dd76:	bd80      	pop	{r7, pc}
 801dd78:	200111b4 	.word	0x200111b4
 801dd7c:	0802748c 	.word	0x0802748c
 801dd80:	08027634 	.word	0x08027634
 801dd84:	080274d4 	.word	0x080274d4
 801dd88:	200111b0 	.word	0x200111b0
 801dd8c:	08027648 	.word	0x08027648
 801dd90:	08027664 	.word	0x08027664
 801dd94:	08027694 	.word	0x08027694
 801dd98:	080276c4 	.word	0x080276c4

0801dd9c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801dd9c:	b480      	push	{r7}
 801dd9e:	b085      	sub	sp, #20
 801dda0:	af00      	add	r7, sp, #0
 801dda2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801dda4:	687b      	ldr	r3, [r7, #4]
 801dda6:	689b      	ldr	r3, [r3, #8]
 801dda8:	2200      	movs	r2, #0
 801ddaa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801ddac:	687b      	ldr	r3, [r7, #4]
 801ddae:	685b      	ldr	r3, [r3, #4]
 801ddb0:	3303      	adds	r3, #3
 801ddb2:	f023 0303 	bic.w	r3, r3, #3
 801ddb6:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801ddb8:	2300      	movs	r3, #0
 801ddba:	60fb      	str	r3, [r7, #12]
 801ddbc:	e011      	b.n	801dde2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801ddbe:	687b      	ldr	r3, [r7, #4]
 801ddc0:	689b      	ldr	r3, [r3, #8]
 801ddc2:	681a      	ldr	r2, [r3, #0]
 801ddc4:	68bb      	ldr	r3, [r7, #8]
 801ddc6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801ddc8:	687b      	ldr	r3, [r7, #4]
 801ddca:	689b      	ldr	r3, [r3, #8]
 801ddcc:	68ba      	ldr	r2, [r7, #8]
 801ddce:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801ddd0:	687b      	ldr	r3, [r7, #4]
 801ddd2:	881b      	ldrh	r3, [r3, #0]
 801ddd4:	461a      	mov	r2, r3
 801ddd6:	68bb      	ldr	r3, [r7, #8]
 801ddd8:	4413      	add	r3, r2
 801ddda:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801dddc:	68fb      	ldr	r3, [r7, #12]
 801ddde:	3301      	adds	r3, #1
 801dde0:	60fb      	str	r3, [r7, #12]
 801dde2:	687b      	ldr	r3, [r7, #4]
 801dde4:	885b      	ldrh	r3, [r3, #2]
 801dde6:	461a      	mov	r2, r3
 801dde8:	68fb      	ldr	r3, [r7, #12]
 801ddea:	4293      	cmp	r3, r2
 801ddec:	dbe7      	blt.n	801ddbe <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801ddee:	bf00      	nop
 801ddf0:	bf00      	nop
 801ddf2:	3714      	adds	r7, #20
 801ddf4:	46bd      	mov	sp, r7
 801ddf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ddfa:	4770      	bx	lr

0801ddfc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801ddfc:	b580      	push	{r7, lr}
 801ddfe:	b082      	sub	sp, #8
 801de00:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801de02:	2300      	movs	r3, #0
 801de04:	80fb      	strh	r3, [r7, #6]
 801de06:	e009      	b.n	801de1c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801de08:	88fb      	ldrh	r3, [r7, #6]
 801de0a:	4a08      	ldr	r2, [pc, #32]	; (801de2c <memp_init+0x30>)
 801de0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801de10:	4618      	mov	r0, r3
 801de12:	f7ff ffc3 	bl	801dd9c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801de16:	88fb      	ldrh	r3, [r7, #6]
 801de18:	3301      	adds	r3, #1
 801de1a:	80fb      	strh	r3, [r7, #6]
 801de1c:	88fb      	ldrh	r3, [r7, #6]
 801de1e:	2b05      	cmp	r3, #5
 801de20:	d9f2      	bls.n	801de08 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801de22:	bf00      	nop
 801de24:	bf00      	nop
 801de26:	3708      	adds	r7, #8
 801de28:	46bd      	mov	sp, r7
 801de2a:	bd80      	pop	{r7, pc}
 801de2c:	08028f34 	.word	0x08028f34

0801de30 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801de30:	b580      	push	{r7, lr}
 801de32:	b084      	sub	sp, #16
 801de34:	af00      	add	r7, sp, #0
 801de36:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801de38:	687b      	ldr	r3, [r7, #4]
 801de3a:	689b      	ldr	r3, [r3, #8]
 801de3c:	681b      	ldr	r3, [r3, #0]
 801de3e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801de40:	68fb      	ldr	r3, [r7, #12]
 801de42:	2b00      	cmp	r3, #0
 801de44:	d012      	beq.n	801de6c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801de46:	687b      	ldr	r3, [r7, #4]
 801de48:	689b      	ldr	r3, [r3, #8]
 801de4a:	68fa      	ldr	r2, [r7, #12]
 801de4c:	6812      	ldr	r2, [r2, #0]
 801de4e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801de50:	68fb      	ldr	r3, [r7, #12]
 801de52:	f003 0303 	and.w	r3, r3, #3
 801de56:	2b00      	cmp	r3, #0
 801de58:	d006      	beq.n	801de68 <do_memp_malloc_pool+0x38>
 801de5a:	4b07      	ldr	r3, [pc, #28]	; (801de78 <do_memp_malloc_pool+0x48>)
 801de5c:	f44f 728c 	mov.w	r2, #280	; 0x118
 801de60:	4906      	ldr	r1, [pc, #24]	; (801de7c <do_memp_malloc_pool+0x4c>)
 801de62:	4807      	ldr	r0, [pc, #28]	; (801de80 <do_memp_malloc_pool+0x50>)
 801de64:	f004 fce8 	bl	8022838 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801de68:	68fb      	ldr	r3, [r7, #12]
 801de6a:	e000      	b.n	801de6e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801de6c:	2300      	movs	r3, #0
}
 801de6e:	4618      	mov	r0, r3
 801de70:	3710      	adds	r7, #16
 801de72:	46bd      	mov	sp, r7
 801de74:	bd80      	pop	{r7, pc}
 801de76:	bf00      	nop
 801de78:	080276e8 	.word	0x080276e8
 801de7c:	08027718 	.word	0x08027718
 801de80:	0802773c 	.word	0x0802773c

0801de84 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801de84:	b580      	push	{r7, lr}
 801de86:	b082      	sub	sp, #8
 801de88:	af00      	add	r7, sp, #0
 801de8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801de8c:	687b      	ldr	r3, [r7, #4]
 801de8e:	2b00      	cmp	r3, #0
 801de90:	d106      	bne.n	801dea0 <memp_malloc_pool+0x1c>
 801de92:	4b0a      	ldr	r3, [pc, #40]	; (801debc <memp_malloc_pool+0x38>)
 801de94:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801de98:	4909      	ldr	r1, [pc, #36]	; (801dec0 <memp_malloc_pool+0x3c>)
 801de9a:	480a      	ldr	r0, [pc, #40]	; (801dec4 <memp_malloc_pool+0x40>)
 801de9c:	f004 fccc 	bl	8022838 <iprintf>
  if (desc == NULL) {
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d101      	bne.n	801deaa <memp_malloc_pool+0x26>
    return NULL;
 801dea6:	2300      	movs	r3, #0
 801dea8:	e003      	b.n	801deb2 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801deaa:	6878      	ldr	r0, [r7, #4]
 801deac:	f7ff ffc0 	bl	801de30 <do_memp_malloc_pool>
 801deb0:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801deb2:	4618      	mov	r0, r3
 801deb4:	3708      	adds	r7, #8
 801deb6:	46bd      	mov	sp, r7
 801deb8:	bd80      	pop	{r7, pc}
 801deba:	bf00      	nop
 801debc:	080276e8 	.word	0x080276e8
 801dec0:	08027764 	.word	0x08027764
 801dec4:	0802773c 	.word	0x0802773c

0801dec8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801dec8:	b580      	push	{r7, lr}
 801deca:	b084      	sub	sp, #16
 801decc:	af00      	add	r7, sp, #0
 801dece:	4603      	mov	r3, r0
 801ded0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801ded2:	79fb      	ldrb	r3, [r7, #7]
 801ded4:	2b05      	cmp	r3, #5
 801ded6:	d908      	bls.n	801deea <memp_malloc+0x22>
 801ded8:	4b0a      	ldr	r3, [pc, #40]	; (801df04 <memp_malloc+0x3c>)
 801deda:	f240 1257 	movw	r2, #343	; 0x157
 801dede:	490a      	ldr	r1, [pc, #40]	; (801df08 <memp_malloc+0x40>)
 801dee0:	480a      	ldr	r0, [pc, #40]	; (801df0c <memp_malloc+0x44>)
 801dee2:	f004 fca9 	bl	8022838 <iprintf>
 801dee6:	2300      	movs	r3, #0
 801dee8:	e008      	b.n	801defc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801deea:	79fb      	ldrb	r3, [r7, #7]
 801deec:	4a08      	ldr	r2, [pc, #32]	; (801df10 <memp_malloc+0x48>)
 801deee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801def2:	4618      	mov	r0, r3
 801def4:	f7ff ff9c 	bl	801de30 <do_memp_malloc_pool>
 801def8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801defa:	68fb      	ldr	r3, [r7, #12]
}
 801defc:	4618      	mov	r0, r3
 801defe:	3710      	adds	r7, #16
 801df00:	46bd      	mov	sp, r7
 801df02:	bd80      	pop	{r7, pc}
 801df04:	080276e8 	.word	0x080276e8
 801df08:	08027778 	.word	0x08027778
 801df0c:	0802773c 	.word	0x0802773c
 801df10:	08028f34 	.word	0x08028f34

0801df14 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801df14:	b580      	push	{r7, lr}
 801df16:	b084      	sub	sp, #16
 801df18:	af00      	add	r7, sp, #0
 801df1a:	6078      	str	r0, [r7, #4]
 801df1c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801df1e:	683b      	ldr	r3, [r7, #0]
 801df20:	f003 0303 	and.w	r3, r3, #3
 801df24:	2b00      	cmp	r3, #0
 801df26:	d006      	beq.n	801df36 <do_memp_free_pool+0x22>
 801df28:	4b0a      	ldr	r3, [pc, #40]	; (801df54 <do_memp_free_pool+0x40>)
 801df2a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801df2e:	490a      	ldr	r1, [pc, #40]	; (801df58 <do_memp_free_pool+0x44>)
 801df30:	480a      	ldr	r0, [pc, #40]	; (801df5c <do_memp_free_pool+0x48>)
 801df32:	f004 fc81 	bl	8022838 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801df36:	683b      	ldr	r3, [r7, #0]
 801df38:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801df3a:	687b      	ldr	r3, [r7, #4]
 801df3c:	689b      	ldr	r3, [r3, #8]
 801df3e:	681a      	ldr	r2, [r3, #0]
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801df44:	687b      	ldr	r3, [r7, #4]
 801df46:	689b      	ldr	r3, [r3, #8]
 801df48:	68fa      	ldr	r2, [r7, #12]
 801df4a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801df4c:	bf00      	nop
 801df4e:	3710      	adds	r7, #16
 801df50:	46bd      	mov	sp, r7
 801df52:	bd80      	pop	{r7, pc}
 801df54:	080276e8 	.word	0x080276e8
 801df58:	08027798 	.word	0x08027798
 801df5c:	0802773c 	.word	0x0802773c

0801df60 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801df60:	b580      	push	{r7, lr}
 801df62:	b082      	sub	sp, #8
 801df64:	af00      	add	r7, sp, #0
 801df66:	6078      	str	r0, [r7, #4]
 801df68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	2b00      	cmp	r3, #0
 801df6e:	d106      	bne.n	801df7e <memp_free_pool+0x1e>
 801df70:	4b0a      	ldr	r3, [pc, #40]	; (801df9c <memp_free_pool+0x3c>)
 801df72:	f240 1295 	movw	r2, #405	; 0x195
 801df76:	490a      	ldr	r1, [pc, #40]	; (801dfa0 <memp_free_pool+0x40>)
 801df78:	480a      	ldr	r0, [pc, #40]	; (801dfa4 <memp_free_pool+0x44>)
 801df7a:	f004 fc5d 	bl	8022838 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801df7e:	687b      	ldr	r3, [r7, #4]
 801df80:	2b00      	cmp	r3, #0
 801df82:	d007      	beq.n	801df94 <memp_free_pool+0x34>
 801df84:	683b      	ldr	r3, [r7, #0]
 801df86:	2b00      	cmp	r3, #0
 801df88:	d004      	beq.n	801df94 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801df8a:	6839      	ldr	r1, [r7, #0]
 801df8c:	6878      	ldr	r0, [r7, #4]
 801df8e:	f7ff ffc1 	bl	801df14 <do_memp_free_pool>
 801df92:	e000      	b.n	801df96 <memp_free_pool+0x36>
    return;
 801df94:	bf00      	nop
}
 801df96:	3708      	adds	r7, #8
 801df98:	46bd      	mov	sp, r7
 801df9a:	bd80      	pop	{r7, pc}
 801df9c:	080276e8 	.word	0x080276e8
 801dfa0:	08027764 	.word	0x08027764
 801dfa4:	0802773c 	.word	0x0802773c

0801dfa8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801dfa8:	b580      	push	{r7, lr}
 801dfaa:	b082      	sub	sp, #8
 801dfac:	af00      	add	r7, sp, #0
 801dfae:	4603      	mov	r3, r0
 801dfb0:	6039      	str	r1, [r7, #0]
 801dfb2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801dfb4:	79fb      	ldrb	r3, [r7, #7]
 801dfb6:	2b05      	cmp	r3, #5
 801dfb8:	d907      	bls.n	801dfca <memp_free+0x22>
 801dfba:	4b0c      	ldr	r3, [pc, #48]	; (801dfec <memp_free+0x44>)
 801dfbc:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801dfc0:	490b      	ldr	r1, [pc, #44]	; (801dff0 <memp_free+0x48>)
 801dfc2:	480c      	ldr	r0, [pc, #48]	; (801dff4 <memp_free+0x4c>)
 801dfc4:	f004 fc38 	bl	8022838 <iprintf>
 801dfc8:	e00c      	b.n	801dfe4 <memp_free+0x3c>

  if (mem == NULL) {
 801dfca:	683b      	ldr	r3, [r7, #0]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	d008      	beq.n	801dfe2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801dfd0:	79fb      	ldrb	r3, [r7, #7]
 801dfd2:	4a09      	ldr	r2, [pc, #36]	; (801dff8 <memp_free+0x50>)
 801dfd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801dfd8:	6839      	ldr	r1, [r7, #0]
 801dfda:	4618      	mov	r0, r3
 801dfdc:	f7ff ff9a 	bl	801df14 <do_memp_free_pool>
 801dfe0:	e000      	b.n	801dfe4 <memp_free+0x3c>
    return;
 801dfe2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801dfe4:	3708      	adds	r7, #8
 801dfe6:	46bd      	mov	sp, r7
 801dfe8:	bd80      	pop	{r7, pc}
 801dfea:	bf00      	nop
 801dfec:	080276e8 	.word	0x080276e8
 801dff0:	080277b8 	.word	0x080277b8
 801dff4:	0802773c 	.word	0x0802773c
 801dff8:	08028f34 	.word	0x08028f34

0801dffc <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801dffc:	b580      	push	{r7, lr}
 801dffe:	b082      	sub	sp, #8
 801e000:	af00      	add	r7, sp, #0
 801e002:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801e004:	687b      	ldr	r3, [r7, #4]
 801e006:	2b00      	cmp	r3, #0
 801e008:	d105      	bne.n	801e016 <netif_loopif_init+0x1a>
 801e00a:	4b0b      	ldr	r3, [pc, #44]	; (801e038 <netif_loopif_init+0x3c>)
 801e00c:	2299      	movs	r2, #153	; 0x99
 801e00e:	490b      	ldr	r1, [pc, #44]	; (801e03c <netif_loopif_init+0x40>)
 801e010:	480b      	ldr	r0, [pc, #44]	; (801e040 <netif_loopif_init+0x44>)
 801e012:	f004 fc11 	bl	8022838 <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801e016:	687b      	ldr	r3, [r7, #4]
 801e018:	226c      	movs	r2, #108	; 0x6c
 801e01a:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801e01e:	687b      	ldr	r3, [r7, #4]
 801e020:	226f      	movs	r2, #111	; 0x6f
 801e022:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801e026:	687b      	ldr	r3, [r7, #4]
 801e028:	4a06      	ldr	r2, [pc, #24]	; (801e044 <netif_loopif_init+0x48>)
 801e02a:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801e02c:	2300      	movs	r3, #0
}
 801e02e:	4618      	mov	r0, r3
 801e030:	3708      	adds	r7, #8
 801e032:	46bd      	mov	sp, r7
 801e034:	bd80      	pop	{r7, pc}
 801e036:	bf00      	nop
 801e038:	080277d4 	.word	0x080277d4
 801e03c:	08027808 	.word	0x08027808
 801e040:	0802782c 	.word	0x0802782c
 801e044:	0801e729 	.word	0x0801e729

0801e048 <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801e048:	b580      	push	{r7, lr}
 801e04a:	b088      	sub	sp, #32
 801e04c:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801e04e:	4b0f      	ldr	r3, [pc, #60]	; (801e08c <netif_init+0x44>)
 801e050:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801e052:	4b0e      	ldr	r3, [pc, #56]	; (801e08c <netif_init+0x44>)
 801e054:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801e056:	23ff      	movs	r3, #255	; 0xff
 801e058:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801e05a:	1d3b      	adds	r3, r7, #4
 801e05c:	f107 0208 	add.w	r2, r7, #8
 801e060:	f107 010c 	add.w	r1, r7, #12
 801e064:	480a      	ldr	r0, [pc, #40]	; (801e090 <netif_init+0x48>)
 801e066:	9002      	str	r0, [sp, #8]
 801e068:	480a      	ldr	r0, [pc, #40]	; (801e094 <netif_init+0x4c>)
 801e06a:	9001      	str	r0, [sp, #4]
 801e06c:	2000      	movs	r0, #0
 801e06e:	9000      	str	r0, [sp, #0]
 801e070:	4809      	ldr	r0, [pc, #36]	; (801e098 <netif_init+0x50>)
 801e072:	f000 f813 	bl	801e09c <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801e076:	4808      	ldr	r0, [pc, #32]	; (801e098 <netif_init+0x50>)
 801e078:	f000 fa72 	bl	801e560 <netif_set_link_up>
  netif_set_up(&loop_netif);
 801e07c:	4806      	ldr	r0, [pc, #24]	; (801e098 <netif_init+0x50>)
 801e07e:	f000 f9d1 	bl	801e424 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801e082:	bf00      	nop
 801e084:	3710      	adds	r7, #16
 801e086:	46bd      	mov	sp, r7
 801e088:	bd80      	pop	{r7, pc}
 801e08a:	bf00      	nop
 801e08c:	0100007f 	.word	0x0100007f
 801e090:	080211c5 	.word	0x080211c5
 801e094:	0801dffd 	.word	0x0801dffd
 801e098:	2001415c 	.word	0x2001415c

0801e09c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801e09c:	b580      	push	{r7, lr}
 801e09e:	b086      	sub	sp, #24
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	60f8      	str	r0, [r7, #12]
 801e0a4:	60b9      	str	r1, [r7, #8]
 801e0a6:	607a      	str	r2, [r7, #4]
 801e0a8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801e0aa:	68fb      	ldr	r3, [r7, #12]
 801e0ac:	2b00      	cmp	r3, #0
 801e0ae:	d108      	bne.n	801e0c2 <netif_add+0x26>
 801e0b0:	4b5a      	ldr	r3, [pc, #360]	; (801e21c <netif_add+0x180>)
 801e0b2:	f240 1227 	movw	r2, #295	; 0x127
 801e0b6:	495a      	ldr	r1, [pc, #360]	; (801e220 <netif_add+0x184>)
 801e0b8:	485a      	ldr	r0, [pc, #360]	; (801e224 <netif_add+0x188>)
 801e0ba:	f004 fbbd 	bl	8022838 <iprintf>
 801e0be:	2300      	movs	r3, #0
 801e0c0:	e0a8      	b.n	801e214 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801e0c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d108      	bne.n	801e0da <netif_add+0x3e>
 801e0c8:	4b54      	ldr	r3, [pc, #336]	; (801e21c <netif_add+0x180>)
 801e0ca:	f44f 7294 	mov.w	r2, #296	; 0x128
 801e0ce:	4956      	ldr	r1, [pc, #344]	; (801e228 <netif_add+0x18c>)
 801e0d0:	4854      	ldr	r0, [pc, #336]	; (801e224 <netif_add+0x188>)
 801e0d2:	f004 fbb1 	bl	8022838 <iprintf>
 801e0d6:	2300      	movs	r3, #0
 801e0d8:	e09c      	b.n	801e214 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801e0da:	68bb      	ldr	r3, [r7, #8]
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d101      	bne.n	801e0e4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801e0e0:	4b52      	ldr	r3, [pc, #328]	; (801e22c <netif_add+0x190>)
 801e0e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e0e4:	687b      	ldr	r3, [r7, #4]
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d101      	bne.n	801e0ee <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801e0ea:	4b50      	ldr	r3, [pc, #320]	; (801e22c <netif_add+0x190>)
 801e0ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e0ee:	683b      	ldr	r3, [r7, #0]
 801e0f0:	2b00      	cmp	r3, #0
 801e0f2:	d101      	bne.n	801e0f8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801e0f4:	4b4d      	ldr	r3, [pc, #308]	; (801e22c <netif_add+0x190>)
 801e0f6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801e0f8:	68fb      	ldr	r3, [r7, #12]
 801e0fa:	2200      	movs	r2, #0
 801e0fc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801e0fe:	68fb      	ldr	r3, [r7, #12]
 801e100:	2200      	movs	r2, #0
 801e102:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801e104:	68fb      	ldr	r3, [r7, #12]
 801e106:	2200      	movs	r2, #0
 801e108:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801e10a:	68fb      	ldr	r3, [r7, #12]
 801e10c:	4a48      	ldr	r2, [pc, #288]	; (801e230 <netif_add+0x194>)
 801e10e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801e110:	68fb      	ldr	r3, [r7, #12]
 801e112:	2200      	movs	r2, #0
 801e114:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801e116:	68fb      	ldr	r3, [r7, #12]
 801e118:	2200      	movs	r2, #0
 801e11a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801e11e:	68fb      	ldr	r3, [r7, #12]
 801e120:	2200      	movs	r2, #0
 801e122:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801e124:	68fb      	ldr	r3, [r7, #12]
 801e126:	2200      	movs	r2, #0
 801e128:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801e12a:	68fb      	ldr	r3, [r7, #12]
 801e12c:	2200      	movs	r2, #0
 801e12e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801e130:	68fb      	ldr	r3, [r7, #12]
 801e132:	6a3a      	ldr	r2, [r7, #32]
 801e134:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801e136:	4b3f      	ldr	r3, [pc, #252]	; (801e234 <netif_add+0x198>)
 801e138:	781a      	ldrb	r2, [r3, #0]
 801e13a:	68fb      	ldr	r3, [r7, #12]
 801e13c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801e140:	68fb      	ldr	r3, [r7, #12]
 801e142:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801e144:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801e146:	683b      	ldr	r3, [r7, #0]
 801e148:	687a      	ldr	r2, [r7, #4]
 801e14a:	68b9      	ldr	r1, [r7, #8]
 801e14c:	68f8      	ldr	r0, [r7, #12]
 801e14e:	f000 f90f 	bl	801e370 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801e152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e154:	68f8      	ldr	r0, [r7, #12]
 801e156:	4798      	blx	r3
 801e158:	4603      	mov	r3, r0
 801e15a:	2b00      	cmp	r3, #0
 801e15c:	d001      	beq.n	801e162 <netif_add+0xc6>
    return NULL;
 801e15e:	2300      	movs	r3, #0
 801e160:	e058      	b.n	801e214 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801e162:	68fb      	ldr	r3, [r7, #12]
 801e164:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e168:	2bff      	cmp	r3, #255	; 0xff
 801e16a:	d103      	bne.n	801e174 <netif_add+0xd8>
        netif->num = 0;
 801e16c:	68fb      	ldr	r3, [r7, #12]
 801e16e:	2200      	movs	r2, #0
 801e170:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801e174:	2300      	movs	r3, #0
 801e176:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e178:	4b2f      	ldr	r3, [pc, #188]	; (801e238 <netif_add+0x19c>)
 801e17a:	681b      	ldr	r3, [r3, #0]
 801e17c:	617b      	str	r3, [r7, #20]
 801e17e:	e02b      	b.n	801e1d8 <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801e180:	697a      	ldr	r2, [r7, #20]
 801e182:	68fb      	ldr	r3, [r7, #12]
 801e184:	429a      	cmp	r2, r3
 801e186:	d106      	bne.n	801e196 <netif_add+0xfa>
 801e188:	4b24      	ldr	r3, [pc, #144]	; (801e21c <netif_add+0x180>)
 801e18a:	f240 128b 	movw	r2, #395	; 0x18b
 801e18e:	492b      	ldr	r1, [pc, #172]	; (801e23c <netif_add+0x1a0>)
 801e190:	4824      	ldr	r0, [pc, #144]	; (801e224 <netif_add+0x188>)
 801e192:	f004 fb51 	bl	8022838 <iprintf>
        num_netifs++;
 801e196:	693b      	ldr	r3, [r7, #16]
 801e198:	3301      	adds	r3, #1
 801e19a:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801e19c:	693b      	ldr	r3, [r7, #16]
 801e19e:	2bff      	cmp	r3, #255	; 0xff
 801e1a0:	dd06      	ble.n	801e1b0 <netif_add+0x114>
 801e1a2:	4b1e      	ldr	r3, [pc, #120]	; (801e21c <netif_add+0x180>)
 801e1a4:	f240 128d 	movw	r2, #397	; 0x18d
 801e1a8:	4925      	ldr	r1, [pc, #148]	; (801e240 <netif_add+0x1a4>)
 801e1aa:	481e      	ldr	r0, [pc, #120]	; (801e224 <netif_add+0x188>)
 801e1ac:	f004 fb44 	bl	8022838 <iprintf>
        if (netif2->num == netif->num) {
 801e1b0:	697b      	ldr	r3, [r7, #20]
 801e1b2:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e1bc:	429a      	cmp	r2, r3
 801e1be:	d108      	bne.n	801e1d2 <netif_add+0x136>
          netif->num++;
 801e1c0:	68fb      	ldr	r3, [r7, #12]
 801e1c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e1c6:	3301      	adds	r3, #1
 801e1c8:	b2da      	uxtb	r2, r3
 801e1ca:	68fb      	ldr	r3, [r7, #12]
 801e1cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801e1d0:	e005      	b.n	801e1de <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801e1d2:	697b      	ldr	r3, [r7, #20]
 801e1d4:	681b      	ldr	r3, [r3, #0]
 801e1d6:	617b      	str	r3, [r7, #20]
 801e1d8:	697b      	ldr	r3, [r7, #20]
 801e1da:	2b00      	cmp	r3, #0
 801e1dc:	d1d0      	bne.n	801e180 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801e1de:	697b      	ldr	r3, [r7, #20]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d1be      	bne.n	801e162 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801e1e4:	68fb      	ldr	r3, [r7, #12]
 801e1e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e1ea:	2bfe      	cmp	r3, #254	; 0xfe
 801e1ec:	d103      	bne.n	801e1f6 <netif_add+0x15a>
    netif_num = 0;
 801e1ee:	4b11      	ldr	r3, [pc, #68]	; (801e234 <netif_add+0x198>)
 801e1f0:	2200      	movs	r2, #0
 801e1f2:	701a      	strb	r2, [r3, #0]
 801e1f4:	e006      	b.n	801e204 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801e1f6:	68fb      	ldr	r3, [r7, #12]
 801e1f8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e1fc:	3301      	adds	r3, #1
 801e1fe:	b2da      	uxtb	r2, r3
 801e200:	4b0c      	ldr	r3, [pc, #48]	; (801e234 <netif_add+0x198>)
 801e202:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801e204:	4b0c      	ldr	r3, [pc, #48]	; (801e238 <netif_add+0x19c>)
 801e206:	681a      	ldr	r2, [r3, #0]
 801e208:	68fb      	ldr	r3, [r7, #12]
 801e20a:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801e20c:	4a0a      	ldr	r2, [pc, #40]	; (801e238 <netif_add+0x19c>)
 801e20e:	68fb      	ldr	r3, [r7, #12]
 801e210:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801e212:	68fb      	ldr	r3, [r7, #12]
}
 801e214:	4618      	mov	r0, r3
 801e216:	3718      	adds	r7, #24
 801e218:	46bd      	mov	sp, r7
 801e21a:	bd80      	pop	{r7, pc}
 801e21c:	080277d4 	.word	0x080277d4
 801e220:	0802788c 	.word	0x0802788c
 801e224:	0802782c 	.word	0x0802782c
 801e228:	080278a8 	.word	0x080278a8
 801e22c:	08028f5c 	.word	0x08028f5c
 801e230:	0801e747 	.word	0x0801e747
 801e234:	20014158 	.word	0x20014158
 801e238:	20014150 	.word	0x20014150
 801e23c:	080278cc 	.word	0x080278cc
 801e240:	080278e0 	.word	0x080278e0

0801e244 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801e244:	b580      	push	{r7, lr}
 801e246:	b082      	sub	sp, #8
 801e248:	af00      	add	r7, sp, #0
 801e24a:	6078      	str	r0, [r7, #4]
 801e24c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801e24e:	6839      	ldr	r1, [r7, #0]
 801e250:	6878      	ldr	r0, [r7, #4]
 801e252:	f001 fe13 	bl	801fe7c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801e256:	bf00      	nop
 801e258:	3708      	adds	r7, #8
 801e25a:	46bd      	mov	sp, r7
 801e25c:	bd80      	pop	{r7, pc}
	...

0801e260 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801e260:	b580      	push	{r7, lr}
 801e262:	b086      	sub	sp, #24
 801e264:	af00      	add	r7, sp, #0
 801e266:	60f8      	str	r0, [r7, #12]
 801e268:	60b9      	str	r1, [r7, #8]
 801e26a:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801e26c:	68bb      	ldr	r3, [r7, #8]
 801e26e:	2b00      	cmp	r3, #0
 801e270:	d106      	bne.n	801e280 <netif_do_set_ipaddr+0x20>
 801e272:	4b1d      	ldr	r3, [pc, #116]	; (801e2e8 <netif_do_set_ipaddr+0x88>)
 801e274:	f240 12cb 	movw	r2, #459	; 0x1cb
 801e278:	491c      	ldr	r1, [pc, #112]	; (801e2ec <netif_do_set_ipaddr+0x8c>)
 801e27a:	481d      	ldr	r0, [pc, #116]	; (801e2f0 <netif_do_set_ipaddr+0x90>)
 801e27c:	f004 fadc 	bl	8022838 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801e280:	687b      	ldr	r3, [r7, #4]
 801e282:	2b00      	cmp	r3, #0
 801e284:	d106      	bne.n	801e294 <netif_do_set_ipaddr+0x34>
 801e286:	4b18      	ldr	r3, [pc, #96]	; (801e2e8 <netif_do_set_ipaddr+0x88>)
 801e288:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801e28c:	4917      	ldr	r1, [pc, #92]	; (801e2ec <netif_do_set_ipaddr+0x8c>)
 801e28e:	4818      	ldr	r0, [pc, #96]	; (801e2f0 <netif_do_set_ipaddr+0x90>)
 801e290:	f004 fad2 	bl	8022838 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801e294:	68bb      	ldr	r3, [r7, #8]
 801e296:	681a      	ldr	r2, [r3, #0]
 801e298:	68fb      	ldr	r3, [r7, #12]
 801e29a:	3304      	adds	r3, #4
 801e29c:	681b      	ldr	r3, [r3, #0]
 801e29e:	429a      	cmp	r2, r3
 801e2a0:	d01c      	beq.n	801e2dc <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801e2a2:	68bb      	ldr	r3, [r7, #8]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801e2a8:	68fb      	ldr	r3, [r7, #12]
 801e2aa:	3304      	adds	r3, #4
 801e2ac:	681a      	ldr	r2, [r3, #0]
 801e2ae:	687b      	ldr	r3, [r7, #4]
 801e2b0:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801e2b2:	f107 0314 	add.w	r3, r7, #20
 801e2b6:	4619      	mov	r1, r3
 801e2b8:	6878      	ldr	r0, [r7, #4]
 801e2ba:	f7ff ffc3 	bl	801e244 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801e2be:	68bb      	ldr	r3, [r7, #8]
 801e2c0:	2b00      	cmp	r3, #0
 801e2c2:	d002      	beq.n	801e2ca <netif_do_set_ipaddr+0x6a>
 801e2c4:	68bb      	ldr	r3, [r7, #8]
 801e2c6:	681b      	ldr	r3, [r3, #0]
 801e2c8:	e000      	b.n	801e2cc <netif_do_set_ipaddr+0x6c>
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	68fa      	ldr	r2, [r7, #12]
 801e2ce:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801e2d0:	2101      	movs	r1, #1
 801e2d2:	68f8      	ldr	r0, [r7, #12]
 801e2d4:	f000 f8d2 	bl	801e47c <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801e2d8:	2301      	movs	r3, #1
 801e2da:	e000      	b.n	801e2de <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801e2dc:	2300      	movs	r3, #0
}
 801e2de:	4618      	mov	r0, r3
 801e2e0:	3718      	adds	r7, #24
 801e2e2:	46bd      	mov	sp, r7
 801e2e4:	bd80      	pop	{r7, pc}
 801e2e6:	bf00      	nop
 801e2e8:	080277d4 	.word	0x080277d4
 801e2ec:	08027910 	.word	0x08027910
 801e2f0:	0802782c 	.word	0x0802782c

0801e2f4 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801e2f4:	b480      	push	{r7}
 801e2f6:	b085      	sub	sp, #20
 801e2f8:	af00      	add	r7, sp, #0
 801e2fa:	60f8      	str	r0, [r7, #12]
 801e2fc:	60b9      	str	r1, [r7, #8]
 801e2fe:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801e300:	68bb      	ldr	r3, [r7, #8]
 801e302:	681a      	ldr	r2, [r3, #0]
 801e304:	68fb      	ldr	r3, [r7, #12]
 801e306:	3308      	adds	r3, #8
 801e308:	681b      	ldr	r3, [r3, #0]
 801e30a:	429a      	cmp	r2, r3
 801e30c:	d00a      	beq.n	801e324 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801e30e:	68bb      	ldr	r3, [r7, #8]
 801e310:	2b00      	cmp	r3, #0
 801e312:	d002      	beq.n	801e31a <netif_do_set_netmask+0x26>
 801e314:	68bb      	ldr	r3, [r7, #8]
 801e316:	681b      	ldr	r3, [r3, #0]
 801e318:	e000      	b.n	801e31c <netif_do_set_netmask+0x28>
 801e31a:	2300      	movs	r3, #0
 801e31c:	68fa      	ldr	r2, [r7, #12]
 801e31e:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801e320:	2301      	movs	r3, #1
 801e322:	e000      	b.n	801e326 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801e324:	2300      	movs	r3, #0
}
 801e326:	4618      	mov	r0, r3
 801e328:	3714      	adds	r7, #20
 801e32a:	46bd      	mov	sp, r7
 801e32c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e330:	4770      	bx	lr

0801e332 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801e332:	b480      	push	{r7}
 801e334:	b085      	sub	sp, #20
 801e336:	af00      	add	r7, sp, #0
 801e338:	60f8      	str	r0, [r7, #12]
 801e33a:	60b9      	str	r1, [r7, #8]
 801e33c:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801e33e:	68bb      	ldr	r3, [r7, #8]
 801e340:	681a      	ldr	r2, [r3, #0]
 801e342:	68fb      	ldr	r3, [r7, #12]
 801e344:	330c      	adds	r3, #12
 801e346:	681b      	ldr	r3, [r3, #0]
 801e348:	429a      	cmp	r2, r3
 801e34a:	d00a      	beq.n	801e362 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801e34c:	68bb      	ldr	r3, [r7, #8]
 801e34e:	2b00      	cmp	r3, #0
 801e350:	d002      	beq.n	801e358 <netif_do_set_gw+0x26>
 801e352:	68bb      	ldr	r3, [r7, #8]
 801e354:	681b      	ldr	r3, [r3, #0]
 801e356:	e000      	b.n	801e35a <netif_do_set_gw+0x28>
 801e358:	2300      	movs	r3, #0
 801e35a:	68fa      	ldr	r2, [r7, #12]
 801e35c:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801e35e:	2301      	movs	r3, #1
 801e360:	e000      	b.n	801e364 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801e362:	2300      	movs	r3, #0
}
 801e364:	4618      	mov	r0, r3
 801e366:	3714      	adds	r7, #20
 801e368:	46bd      	mov	sp, r7
 801e36a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e36e:	4770      	bx	lr

0801e370 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801e370:	b580      	push	{r7, lr}
 801e372:	b088      	sub	sp, #32
 801e374:	af00      	add	r7, sp, #0
 801e376:	60f8      	str	r0, [r7, #12]
 801e378:	60b9      	str	r1, [r7, #8]
 801e37a:	607a      	str	r2, [r7, #4]
 801e37c:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801e37e:	2300      	movs	r3, #0
 801e380:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801e382:	2300      	movs	r3, #0
 801e384:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801e386:	68bb      	ldr	r3, [r7, #8]
 801e388:	2b00      	cmp	r3, #0
 801e38a:	d101      	bne.n	801e390 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801e38c:	4b1c      	ldr	r3, [pc, #112]	; (801e400 <netif_set_addr+0x90>)
 801e38e:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801e390:	687b      	ldr	r3, [r7, #4]
 801e392:	2b00      	cmp	r3, #0
 801e394:	d101      	bne.n	801e39a <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801e396:	4b1a      	ldr	r3, [pc, #104]	; (801e400 <netif_set_addr+0x90>)
 801e398:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801e39a:	683b      	ldr	r3, [r7, #0]
 801e39c:	2b00      	cmp	r3, #0
 801e39e:	d101      	bne.n	801e3a4 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801e3a0:	4b17      	ldr	r3, [pc, #92]	; (801e400 <netif_set_addr+0x90>)
 801e3a2:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801e3a4:	68bb      	ldr	r3, [r7, #8]
 801e3a6:	2b00      	cmp	r3, #0
 801e3a8:	d003      	beq.n	801e3b2 <netif_set_addr+0x42>
 801e3aa:	68bb      	ldr	r3, [r7, #8]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	2b00      	cmp	r3, #0
 801e3b0:	d101      	bne.n	801e3b6 <netif_set_addr+0x46>
 801e3b2:	2301      	movs	r3, #1
 801e3b4:	e000      	b.n	801e3b8 <netif_set_addr+0x48>
 801e3b6:	2300      	movs	r3, #0
 801e3b8:	617b      	str	r3, [r7, #20]
  if (remove) {
 801e3ba:	697b      	ldr	r3, [r7, #20]
 801e3bc:	2b00      	cmp	r3, #0
 801e3be:	d006      	beq.n	801e3ce <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e3c0:	f107 0310 	add.w	r3, r7, #16
 801e3c4:	461a      	mov	r2, r3
 801e3c6:	68b9      	ldr	r1, [r7, #8]
 801e3c8:	68f8      	ldr	r0, [r7, #12]
 801e3ca:	f7ff ff49 	bl	801e260 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801e3ce:	69fa      	ldr	r2, [r7, #28]
 801e3d0:	6879      	ldr	r1, [r7, #4]
 801e3d2:	68f8      	ldr	r0, [r7, #12]
 801e3d4:	f7ff ff8e 	bl	801e2f4 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801e3d8:	69ba      	ldr	r2, [r7, #24]
 801e3da:	6839      	ldr	r1, [r7, #0]
 801e3dc:	68f8      	ldr	r0, [r7, #12]
 801e3de:	f7ff ffa8 	bl	801e332 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801e3e2:	697b      	ldr	r3, [r7, #20]
 801e3e4:	2b00      	cmp	r3, #0
 801e3e6:	d106      	bne.n	801e3f6 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801e3e8:	f107 0310 	add.w	r3, r7, #16
 801e3ec:	461a      	mov	r2, r3
 801e3ee:	68b9      	ldr	r1, [r7, #8]
 801e3f0:	68f8      	ldr	r0, [r7, #12]
 801e3f2:	f7ff ff35 	bl	801e260 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801e3f6:	bf00      	nop
 801e3f8:	3720      	adds	r7, #32
 801e3fa:	46bd      	mov	sp, r7
 801e3fc:	bd80      	pop	{r7, pc}
 801e3fe:	bf00      	nop
 801e400:	08028f5c 	.word	0x08028f5c

0801e404 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801e404:	b480      	push	{r7}
 801e406:	b083      	sub	sp, #12
 801e408:	af00      	add	r7, sp, #0
 801e40a:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801e40c:	4a04      	ldr	r2, [pc, #16]	; (801e420 <netif_set_default+0x1c>)
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801e412:	bf00      	nop
 801e414:	370c      	adds	r7, #12
 801e416:	46bd      	mov	sp, r7
 801e418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e41c:	4770      	bx	lr
 801e41e:	bf00      	nop
 801e420:	20014154 	.word	0x20014154

0801e424 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801e424:	b580      	push	{r7, lr}
 801e426:	b082      	sub	sp, #8
 801e428:	af00      	add	r7, sp, #0
 801e42a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801e42c:	687b      	ldr	r3, [r7, #4]
 801e42e:	2b00      	cmp	r3, #0
 801e430:	d107      	bne.n	801e442 <netif_set_up+0x1e>
 801e432:	4b0f      	ldr	r3, [pc, #60]	; (801e470 <netif_set_up+0x4c>)
 801e434:	f44f 7254 	mov.w	r2, #848	; 0x350
 801e438:	490e      	ldr	r1, [pc, #56]	; (801e474 <netif_set_up+0x50>)
 801e43a:	480f      	ldr	r0, [pc, #60]	; (801e478 <netif_set_up+0x54>)
 801e43c:	f004 f9fc 	bl	8022838 <iprintf>
 801e440:	e013      	b.n	801e46a <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801e442:	687b      	ldr	r3, [r7, #4]
 801e444:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e448:	f003 0301 	and.w	r3, r3, #1
 801e44c:	2b00      	cmp	r3, #0
 801e44e:	d10c      	bne.n	801e46a <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801e450:	687b      	ldr	r3, [r7, #4]
 801e452:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e456:	f043 0301 	orr.w	r3, r3, #1
 801e45a:	b2da      	uxtb	r2, r3
 801e45c:	687b      	ldr	r3, [r7, #4]
 801e45e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e462:	2103      	movs	r1, #3
 801e464:	6878      	ldr	r0, [r7, #4]
 801e466:	f000 f809 	bl	801e47c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801e46a:	3708      	adds	r7, #8
 801e46c:	46bd      	mov	sp, r7
 801e46e:	bd80      	pop	{r7, pc}
 801e470:	080277d4 	.word	0x080277d4
 801e474:	08027980 	.word	0x08027980
 801e478:	0802782c 	.word	0x0802782c

0801e47c <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801e47c:	b580      	push	{r7, lr}
 801e47e:	b082      	sub	sp, #8
 801e480:	af00      	add	r7, sp, #0
 801e482:	6078      	str	r0, [r7, #4]
 801e484:	460b      	mov	r3, r1
 801e486:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801e488:	687b      	ldr	r3, [r7, #4]
 801e48a:	2b00      	cmp	r3, #0
 801e48c:	d106      	bne.n	801e49c <netif_issue_reports+0x20>
 801e48e:	4b18      	ldr	r3, [pc, #96]	; (801e4f0 <netif_issue_reports+0x74>)
 801e490:	f240 326d 	movw	r2, #877	; 0x36d
 801e494:	4917      	ldr	r1, [pc, #92]	; (801e4f4 <netif_issue_reports+0x78>)
 801e496:	4818      	ldr	r0, [pc, #96]	; (801e4f8 <netif_issue_reports+0x7c>)
 801e498:	f004 f9ce 	bl	8022838 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e49c:	687b      	ldr	r3, [r7, #4]
 801e49e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e4a2:	f003 0304 	and.w	r3, r3, #4
 801e4a6:	2b00      	cmp	r3, #0
 801e4a8:	d01e      	beq.n	801e4e8 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801e4aa:	687b      	ldr	r3, [r7, #4]
 801e4ac:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e4b0:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801e4b4:	2b00      	cmp	r3, #0
 801e4b6:	d017      	beq.n	801e4e8 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e4b8:	78fb      	ldrb	r3, [r7, #3]
 801e4ba:	f003 0301 	and.w	r3, r3, #1
 801e4be:	2b00      	cmp	r3, #0
 801e4c0:	d013      	beq.n	801e4ea <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801e4c2:	687b      	ldr	r3, [r7, #4]
 801e4c4:	3304      	adds	r3, #4
 801e4c6:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801e4c8:	2b00      	cmp	r3, #0
 801e4ca:	d00e      	beq.n	801e4ea <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e4d2:	f003 0308 	and.w	r3, r3, #8
 801e4d6:	2b00      	cmp	r3, #0
 801e4d8:	d007      	beq.n	801e4ea <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	3304      	adds	r3, #4
 801e4de:	4619      	mov	r1, r3
 801e4e0:	6878      	ldr	r0, [r7, #4]
 801e4e2:	f002 fc35 	bl	8020d50 <etharp_request>
 801e4e6:	e000      	b.n	801e4ea <netif_issue_reports+0x6e>
    return;
 801e4e8:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801e4ea:	3708      	adds	r7, #8
 801e4ec:	46bd      	mov	sp, r7
 801e4ee:	bd80      	pop	{r7, pc}
 801e4f0:	080277d4 	.word	0x080277d4
 801e4f4:	0802799c 	.word	0x0802799c
 801e4f8:	0802782c 	.word	0x0802782c

0801e4fc <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801e4fc:	b580      	push	{r7, lr}
 801e4fe:	b082      	sub	sp, #8
 801e500:	af00      	add	r7, sp, #0
 801e502:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801e504:	687b      	ldr	r3, [r7, #4]
 801e506:	2b00      	cmp	r3, #0
 801e508:	d107      	bne.n	801e51a <netif_set_down+0x1e>
 801e50a:	4b12      	ldr	r3, [pc, #72]	; (801e554 <netif_set_down+0x58>)
 801e50c:	f240 329b 	movw	r2, #923	; 0x39b
 801e510:	4911      	ldr	r1, [pc, #68]	; (801e558 <netif_set_down+0x5c>)
 801e512:	4812      	ldr	r0, [pc, #72]	; (801e55c <netif_set_down+0x60>)
 801e514:	f004 f990 	bl	8022838 <iprintf>
 801e518:	e019      	b.n	801e54e <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801e51a:	687b      	ldr	r3, [r7, #4]
 801e51c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e520:	f003 0301 	and.w	r3, r3, #1
 801e524:	2b00      	cmp	r3, #0
 801e526:	d012      	beq.n	801e54e <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801e528:	687b      	ldr	r3, [r7, #4]
 801e52a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e52e:	f023 0301 	bic.w	r3, r3, #1
 801e532:	b2da      	uxtb	r2, r3
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801e53a:	687b      	ldr	r3, [r7, #4]
 801e53c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e540:	f003 0308 	and.w	r3, r3, #8
 801e544:	2b00      	cmp	r3, #0
 801e546:	d002      	beq.n	801e54e <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801e548:	6878      	ldr	r0, [r7, #4]
 801e54a:	f001 ffbf 	bl	80204cc <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801e54e:	3708      	adds	r7, #8
 801e550:	46bd      	mov	sp, r7
 801e552:	bd80      	pop	{r7, pc}
 801e554:	080277d4 	.word	0x080277d4
 801e558:	080279c0 	.word	0x080279c0
 801e55c:	0802782c 	.word	0x0802782c

0801e560 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801e560:	b580      	push	{r7, lr}
 801e562:	b082      	sub	sp, #8
 801e564:	af00      	add	r7, sp, #0
 801e566:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d107      	bne.n	801e57e <netif_set_link_up+0x1e>
 801e56e:	4b13      	ldr	r3, [pc, #76]	; (801e5bc <netif_set_link_up+0x5c>)
 801e570:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801e574:	4912      	ldr	r1, [pc, #72]	; (801e5c0 <netif_set_link_up+0x60>)
 801e576:	4813      	ldr	r0, [pc, #76]	; (801e5c4 <netif_set_link_up+0x64>)
 801e578:	f004 f95e 	bl	8022838 <iprintf>
 801e57c:	e01b      	b.n	801e5b6 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801e57e:	687b      	ldr	r3, [r7, #4]
 801e580:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e584:	f003 0304 	and.w	r3, r3, #4
 801e588:	2b00      	cmp	r3, #0
 801e58a:	d114      	bne.n	801e5b6 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801e58c:	687b      	ldr	r3, [r7, #4]
 801e58e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e592:	f043 0304 	orr.w	r3, r3, #4
 801e596:	b2da      	uxtb	r2, r3
 801e598:	687b      	ldr	r3, [r7, #4]
 801e59a:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e59e:	2103      	movs	r1, #3
 801e5a0:	6878      	ldr	r0, [r7, #4]
 801e5a2:	f7ff ff6b 	bl	801e47c <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801e5a6:	687b      	ldr	r3, [r7, #4]
 801e5a8:	69db      	ldr	r3, [r3, #28]
 801e5aa:	2b00      	cmp	r3, #0
 801e5ac:	d003      	beq.n	801e5b6 <netif_set_link_up+0x56>
 801e5ae:	687b      	ldr	r3, [r7, #4]
 801e5b0:	69db      	ldr	r3, [r3, #28]
 801e5b2:	6878      	ldr	r0, [r7, #4]
 801e5b4:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e5b6:	3708      	adds	r7, #8
 801e5b8:	46bd      	mov	sp, r7
 801e5ba:	bd80      	pop	{r7, pc}
 801e5bc:	080277d4 	.word	0x080277d4
 801e5c0:	080279e0 	.word	0x080279e0
 801e5c4:	0802782c 	.word	0x0802782c

0801e5c8 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801e5c8:	b580      	push	{r7, lr}
 801e5ca:	b082      	sub	sp, #8
 801e5cc:	af00      	add	r7, sp, #0
 801e5ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801e5d0:	687b      	ldr	r3, [r7, #4]
 801e5d2:	2b00      	cmp	r3, #0
 801e5d4:	d107      	bne.n	801e5e6 <netif_set_link_down+0x1e>
 801e5d6:	4b11      	ldr	r3, [pc, #68]	; (801e61c <netif_set_link_down+0x54>)
 801e5d8:	f240 4206 	movw	r2, #1030	; 0x406
 801e5dc:	4910      	ldr	r1, [pc, #64]	; (801e620 <netif_set_link_down+0x58>)
 801e5de:	4811      	ldr	r0, [pc, #68]	; (801e624 <netif_set_link_down+0x5c>)
 801e5e0:	f004 f92a 	bl	8022838 <iprintf>
 801e5e4:	e017      	b.n	801e616 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801e5e6:	687b      	ldr	r3, [r7, #4]
 801e5e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5ec:	f003 0304 	and.w	r3, r3, #4
 801e5f0:	2b00      	cmp	r3, #0
 801e5f2:	d010      	beq.n	801e616 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801e5f4:	687b      	ldr	r3, [r7, #4]
 801e5f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e5fa:	f023 0304 	bic.w	r3, r3, #4
 801e5fe:	b2da      	uxtb	r2, r3
 801e600:	687b      	ldr	r3, [r7, #4]
 801e602:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	69db      	ldr	r3, [r3, #28]
 801e60a:	2b00      	cmp	r3, #0
 801e60c:	d003      	beq.n	801e616 <netif_set_link_down+0x4e>
 801e60e:	687b      	ldr	r3, [r7, #4]
 801e610:	69db      	ldr	r3, [r3, #28]
 801e612:	6878      	ldr	r0, [r7, #4]
 801e614:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e616:	3708      	adds	r7, #8
 801e618:	46bd      	mov	sp, r7
 801e61a:	bd80      	pop	{r7, pc}
 801e61c:	080277d4 	.word	0x080277d4
 801e620:	08027a04 	.word	0x08027a04
 801e624:	0802782c 	.word	0x0802782c

0801e628 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e628:	b480      	push	{r7}
 801e62a:	b083      	sub	sp, #12
 801e62c:	af00      	add	r7, sp, #0
 801e62e:	6078      	str	r0, [r7, #4]
 801e630:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	2b00      	cmp	r3, #0
 801e636:	d002      	beq.n	801e63e <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e638:	687b      	ldr	r3, [r7, #4]
 801e63a:	683a      	ldr	r2, [r7, #0]
 801e63c:	61da      	str	r2, [r3, #28]
  }
}
 801e63e:	bf00      	nop
 801e640:	370c      	adds	r7, #12
 801e642:	46bd      	mov	sp, r7
 801e644:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e648:	4770      	bx	lr
	...

0801e64c <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e64c:	b580      	push	{r7, lr}
 801e64e:	b086      	sub	sp, #24
 801e650:	af00      	add	r7, sp, #0
 801e652:	6078      	str	r0, [r7, #4]
 801e654:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	2b00      	cmp	r3, #0
 801e65a:	d106      	bne.n	801e66a <netif_loop_output+0x1e>
 801e65c:	4b2d      	ldr	r3, [pc, #180]	; (801e714 <netif_loop_output+0xc8>)
 801e65e:	f240 424b 	movw	r2, #1099	; 0x44b
 801e662:	492d      	ldr	r1, [pc, #180]	; (801e718 <netif_loop_output+0xcc>)
 801e664:	482d      	ldr	r0, [pc, #180]	; (801e71c <netif_loop_output+0xd0>)
 801e666:	f004 f8e7 	bl	8022838 <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e66a:	683b      	ldr	r3, [r7, #0]
 801e66c:	2b00      	cmp	r3, #0
 801e66e:	d106      	bne.n	801e67e <netif_loop_output+0x32>
 801e670:	4b28      	ldr	r3, [pc, #160]	; (801e714 <netif_loop_output+0xc8>)
 801e672:	f240 424c 	movw	r2, #1100	; 0x44c
 801e676:	492a      	ldr	r1, [pc, #168]	; (801e720 <netif_loop_output+0xd4>)
 801e678:	4828      	ldr	r0, [pc, #160]	; (801e71c <netif_loop_output+0xd0>)
 801e67a:	f004 f8dd 	bl	8022838 <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e67e:	683b      	ldr	r3, [r7, #0]
 801e680:	891b      	ldrh	r3, [r3, #8]
 801e682:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e686:	4619      	mov	r1, r3
 801e688:	200e      	movs	r0, #14
 801e68a:	f000 f8bb 	bl	801e804 <pbuf_alloc>
 801e68e:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e690:	693b      	ldr	r3, [r7, #16]
 801e692:	2b00      	cmp	r3, #0
 801e694:	d102      	bne.n	801e69c <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e696:	f04f 33ff 	mov.w	r3, #4294967295
 801e69a:	e037      	b.n	801e70c <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e69c:	6839      	ldr	r1, [r7, #0]
 801e69e:	6938      	ldr	r0, [r7, #16]
 801e6a0:	f000 fcba 	bl	801f018 <pbuf_copy>
 801e6a4:	4603      	mov	r3, r0
 801e6a6:	73fb      	strb	r3, [r7, #15]
 801e6a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e6ac:	2b00      	cmp	r3, #0
 801e6ae:	d005      	beq.n	801e6bc <netif_loop_output+0x70>
    pbuf_free(r);
 801e6b0:	6938      	ldr	r0, [r7, #16]
 801e6b2:	f000 fb89 	bl	801edc8 <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e6b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e6ba:	e027      	b.n	801e70c <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e6bc:	693b      	ldr	r3, [r7, #16]
 801e6be:	617b      	str	r3, [r7, #20]
 801e6c0:	e002      	b.n	801e6c8 <netif_loop_output+0x7c>
 801e6c2:	697b      	ldr	r3, [r7, #20]
 801e6c4:	681b      	ldr	r3, [r3, #0]
 801e6c6:	617b      	str	r3, [r7, #20]
 801e6c8:	697b      	ldr	r3, [r7, #20]
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	2b00      	cmp	r3, #0
 801e6ce:	d1f8      	bne.n	801e6c2 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e6d0:	687b      	ldr	r3, [r7, #4]
 801e6d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	d012      	beq.n	801e6fe <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6dc:	2b00      	cmp	r3, #0
 801e6de:	d106      	bne.n	801e6ee <netif_loop_output+0xa2>
 801e6e0:	4b0c      	ldr	r3, [pc, #48]	; (801e714 <netif_loop_output+0xc8>)
 801e6e2:	f240 4277 	movw	r2, #1143	; 0x477
 801e6e6:	490f      	ldr	r1, [pc, #60]	; (801e724 <netif_loop_output+0xd8>)
 801e6e8:	480c      	ldr	r0, [pc, #48]	; (801e71c <netif_loop_output+0xd0>)
 801e6ea:	f004 f8a5 	bl	8022838 <iprintf>
    netif->loop_last->next = r;
 801e6ee:	687b      	ldr	r3, [r7, #4]
 801e6f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e6f2:	693a      	ldr	r2, [r7, #16]
 801e6f4:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e6f6:	687b      	ldr	r3, [r7, #4]
 801e6f8:	697a      	ldr	r2, [r7, #20]
 801e6fa:	63da      	str	r2, [r3, #60]	; 0x3c
 801e6fc:	e005      	b.n	801e70a <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	693a      	ldr	r2, [r7, #16]
 801e702:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e704:	687b      	ldr	r3, [r7, #4]
 801e706:	697a      	ldr	r2, [r7, #20]
 801e708:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e70a:	2300      	movs	r3, #0
}
 801e70c:	4618      	mov	r0, r3
 801e70e:	3718      	adds	r7, #24
 801e710:	46bd      	mov	sp, r7
 801e712:	bd80      	pop	{r7, pc}
 801e714:	080277d4 	.word	0x080277d4
 801e718:	08027a28 	.word	0x08027a28
 801e71c:	0802782c 	.word	0x0802782c
 801e720:	08027a4c 	.word	0x08027a4c
 801e724:	08027a6c 	.word	0x08027a6c

0801e728 <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e728:	b580      	push	{r7, lr}
 801e72a:	b084      	sub	sp, #16
 801e72c:	af00      	add	r7, sp, #0
 801e72e:	60f8      	str	r0, [r7, #12]
 801e730:	60b9      	str	r1, [r7, #8]
 801e732:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e734:	68b9      	ldr	r1, [r7, #8]
 801e736:	68f8      	ldr	r0, [r7, #12]
 801e738:	f7ff ff88 	bl	801e64c <netif_loop_output>
 801e73c:	4603      	mov	r3, r0
}
 801e73e:	4618      	mov	r0, r3
 801e740:	3710      	adds	r7, #16
 801e742:	46bd      	mov	sp, r7
 801e744:	bd80      	pop	{r7, pc}

0801e746 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e746:	b480      	push	{r7}
 801e748:	b085      	sub	sp, #20
 801e74a:	af00      	add	r7, sp, #0
 801e74c:	60f8      	str	r0, [r7, #12]
 801e74e:	60b9      	str	r1, [r7, #8]
 801e750:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e752:	f06f 030b 	mvn.w	r3, #11
}
 801e756:	4618      	mov	r0, r3
 801e758:	3714      	adds	r7, #20
 801e75a:	46bd      	mov	sp, r7
 801e75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e760:	4770      	bx	lr
	...

0801e764 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e764:	b480      	push	{r7}
 801e766:	b085      	sub	sp, #20
 801e768:	af00      	add	r7, sp, #0
 801e76a:	4603      	mov	r3, r0
 801e76c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e76e:	79fb      	ldrb	r3, [r7, #7]
 801e770:	2b00      	cmp	r3, #0
 801e772:	d013      	beq.n	801e79c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e774:	4b0d      	ldr	r3, [pc, #52]	; (801e7ac <netif_get_by_index+0x48>)
 801e776:	681b      	ldr	r3, [r3, #0]
 801e778:	60fb      	str	r3, [r7, #12]
 801e77a:	e00c      	b.n	801e796 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e77c:	68fb      	ldr	r3, [r7, #12]
 801e77e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e782:	3301      	adds	r3, #1
 801e784:	b2db      	uxtb	r3, r3
 801e786:	79fa      	ldrb	r2, [r7, #7]
 801e788:	429a      	cmp	r2, r3
 801e78a:	d101      	bne.n	801e790 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e78c:	68fb      	ldr	r3, [r7, #12]
 801e78e:	e006      	b.n	801e79e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e790:	68fb      	ldr	r3, [r7, #12]
 801e792:	681b      	ldr	r3, [r3, #0]
 801e794:	60fb      	str	r3, [r7, #12]
 801e796:	68fb      	ldr	r3, [r7, #12]
 801e798:	2b00      	cmp	r3, #0
 801e79a:	d1ef      	bne.n	801e77c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e79c:	2300      	movs	r3, #0
}
 801e79e:	4618      	mov	r0, r3
 801e7a0:	3714      	adds	r7, #20
 801e7a2:	46bd      	mov	sp, r7
 801e7a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e7a8:	4770      	bx	lr
 801e7aa:	bf00      	nop
 801e7ac:	20014150 	.word	0x20014150

0801e7b0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e7b0:	b480      	push	{r7}
 801e7b2:	b085      	sub	sp, #20
 801e7b4:	af00      	add	r7, sp, #0
 801e7b6:	60f8      	str	r0, [r7, #12]
 801e7b8:	60b9      	str	r1, [r7, #8]
 801e7ba:	4611      	mov	r1, r2
 801e7bc:	461a      	mov	r2, r3
 801e7be:	460b      	mov	r3, r1
 801e7c0:	80fb      	strh	r3, [r7, #6]
 801e7c2:	4613      	mov	r3, r2
 801e7c4:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e7c6:	68fb      	ldr	r3, [r7, #12]
 801e7c8:	2200      	movs	r2, #0
 801e7ca:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e7cc:	68fb      	ldr	r3, [r7, #12]
 801e7ce:	68ba      	ldr	r2, [r7, #8]
 801e7d0:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e7d2:	68fb      	ldr	r3, [r7, #12]
 801e7d4:	88fa      	ldrh	r2, [r7, #6]
 801e7d6:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e7d8:	68fb      	ldr	r3, [r7, #12]
 801e7da:	88ba      	ldrh	r2, [r7, #4]
 801e7dc:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e7de:	8b3b      	ldrh	r3, [r7, #24]
 801e7e0:	b2da      	uxtb	r2, r3
 801e7e2:	68fb      	ldr	r3, [r7, #12]
 801e7e4:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e7e6:	68fb      	ldr	r3, [r7, #12]
 801e7e8:	7f3a      	ldrb	r2, [r7, #28]
 801e7ea:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	2201      	movs	r2, #1
 801e7f0:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e7f2:	68fb      	ldr	r3, [r7, #12]
 801e7f4:	2200      	movs	r2, #0
 801e7f6:	73da      	strb	r2, [r3, #15]
}
 801e7f8:	bf00      	nop
 801e7fa:	3714      	adds	r7, #20
 801e7fc:	46bd      	mov	sp, r7
 801e7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e802:	4770      	bx	lr

0801e804 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e804:	b580      	push	{r7, lr}
 801e806:	b08c      	sub	sp, #48	; 0x30
 801e808:	af02      	add	r7, sp, #8
 801e80a:	4603      	mov	r3, r0
 801e80c:	71fb      	strb	r3, [r7, #7]
 801e80e:	460b      	mov	r3, r1
 801e810:	80bb      	strh	r3, [r7, #4]
 801e812:	4613      	mov	r3, r2
 801e814:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e816:	79fb      	ldrb	r3, [r7, #7]
 801e818:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e81a:	887b      	ldrh	r3, [r7, #2]
 801e81c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e820:	d07d      	beq.n	801e91e <pbuf_alloc+0x11a>
 801e822:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e826:	f300 80c6 	bgt.w	801e9b6 <pbuf_alloc+0x1b2>
 801e82a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e82e:	d010      	beq.n	801e852 <pbuf_alloc+0x4e>
 801e830:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e834:	f300 80bf 	bgt.w	801e9b6 <pbuf_alloc+0x1b2>
 801e838:	2b01      	cmp	r3, #1
 801e83a:	d002      	beq.n	801e842 <pbuf_alloc+0x3e>
 801e83c:	2b41      	cmp	r3, #65	; 0x41
 801e83e:	f040 80ba 	bne.w	801e9b6 <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e842:	887a      	ldrh	r2, [r7, #2]
 801e844:	88bb      	ldrh	r3, [r7, #4]
 801e846:	4619      	mov	r1, r3
 801e848:	2000      	movs	r0, #0
 801e84a:	f000 f8cf 	bl	801e9ec <pbuf_alloc_reference>
 801e84e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e850:	e0bb      	b.n	801e9ca <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e852:	2300      	movs	r3, #0
 801e854:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e856:	2300      	movs	r3, #0
 801e858:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e85a:	88bb      	ldrh	r3, [r7, #4]
 801e85c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e85e:	2005      	movs	r0, #5
 801e860:	f7ff fb32 	bl	801dec8 <memp_malloc>
 801e864:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801e866:	693b      	ldr	r3, [r7, #16]
 801e868:	2b00      	cmp	r3, #0
 801e86a:	d107      	bne.n	801e87c <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e86c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e86e:	2b00      	cmp	r3, #0
 801e870:	d002      	beq.n	801e878 <pbuf_alloc+0x74>
            pbuf_free(p);
 801e872:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e874:	f000 faa8 	bl	801edc8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e878:	2300      	movs	r3, #0
 801e87a:	e0a7      	b.n	801e9cc <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e87c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e87e:	3303      	adds	r3, #3
 801e880:	b29b      	uxth	r3, r3
 801e882:	f023 0303 	bic.w	r3, r3, #3
 801e886:	b29b      	uxth	r3, r3
 801e888:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801e88c:	b29b      	uxth	r3, r3
 801e88e:	8b7a      	ldrh	r2, [r7, #26]
 801e890:	4293      	cmp	r3, r2
 801e892:	bf28      	it	cs
 801e894:	4613      	movcs	r3, r2
 801e896:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e89a:	3310      	adds	r3, #16
 801e89c:	693a      	ldr	r2, [r7, #16]
 801e89e:	4413      	add	r3, r2
 801e8a0:	3303      	adds	r3, #3
 801e8a2:	f023 0303 	bic.w	r3, r3, #3
 801e8a6:	4618      	mov	r0, r3
 801e8a8:	89f9      	ldrh	r1, [r7, #14]
 801e8aa:	8b7a      	ldrh	r2, [r7, #26]
 801e8ac:	2300      	movs	r3, #0
 801e8ae:	9301      	str	r3, [sp, #4]
 801e8b0:	887b      	ldrh	r3, [r7, #2]
 801e8b2:	9300      	str	r3, [sp, #0]
 801e8b4:	460b      	mov	r3, r1
 801e8b6:	4601      	mov	r1, r0
 801e8b8:	6938      	ldr	r0, [r7, #16]
 801e8ba:	f7ff ff79 	bl	801e7b0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801e8be:	693b      	ldr	r3, [r7, #16]
 801e8c0:	685b      	ldr	r3, [r3, #4]
 801e8c2:	f003 0303 	and.w	r3, r3, #3
 801e8c6:	2b00      	cmp	r3, #0
 801e8c8:	d006      	beq.n	801e8d8 <pbuf_alloc+0xd4>
 801e8ca:	4b42      	ldr	r3, [pc, #264]	; (801e9d4 <pbuf_alloc+0x1d0>)
 801e8cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e8d0:	4941      	ldr	r1, [pc, #260]	; (801e9d8 <pbuf_alloc+0x1d4>)
 801e8d2:	4842      	ldr	r0, [pc, #264]	; (801e9dc <pbuf_alloc+0x1d8>)
 801e8d4:	f003 ffb0 	bl	8022838 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801e8d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e8da:	3303      	adds	r3, #3
 801e8dc:	f023 0303 	bic.w	r3, r3, #3
 801e8e0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801e8e4:	d106      	bne.n	801e8f4 <pbuf_alloc+0xf0>
 801e8e6:	4b3b      	ldr	r3, [pc, #236]	; (801e9d4 <pbuf_alloc+0x1d0>)
 801e8e8:	f44f 7281 	mov.w	r2, #258	; 0x102
 801e8ec:	493c      	ldr	r1, [pc, #240]	; (801e9e0 <pbuf_alloc+0x1dc>)
 801e8ee:	483b      	ldr	r0, [pc, #236]	; (801e9dc <pbuf_alloc+0x1d8>)
 801e8f0:	f003 ffa2 	bl	8022838 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	d102      	bne.n	801e900 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801e8fa:	693b      	ldr	r3, [r7, #16]
 801e8fc:	627b      	str	r3, [r7, #36]	; 0x24
 801e8fe:	e002      	b.n	801e906 <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801e900:	69fb      	ldr	r3, [r7, #28]
 801e902:	693a      	ldr	r2, [r7, #16]
 801e904:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801e906:	693b      	ldr	r3, [r7, #16]
 801e908:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801e90a:	8b7a      	ldrh	r2, [r7, #26]
 801e90c:	89fb      	ldrh	r3, [r7, #14]
 801e90e:	1ad3      	subs	r3, r2, r3
 801e910:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801e912:	2300      	movs	r3, #0
 801e914:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801e916:	8b7b      	ldrh	r3, [r7, #26]
 801e918:	2b00      	cmp	r3, #0
 801e91a:	d1a0      	bne.n	801e85e <pbuf_alloc+0x5a>
      break;
 801e91c:	e055      	b.n	801e9ca <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801e91e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e920:	3303      	adds	r3, #3
 801e922:	b29b      	uxth	r3, r3
 801e924:	f023 0303 	bic.w	r3, r3, #3
 801e928:	b29a      	uxth	r2, r3
 801e92a:	88bb      	ldrh	r3, [r7, #4]
 801e92c:	3303      	adds	r3, #3
 801e92e:	b29b      	uxth	r3, r3
 801e930:	f023 0303 	bic.w	r3, r3, #3
 801e934:	b29b      	uxth	r3, r3
 801e936:	4413      	add	r3, r2
 801e938:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801e93a:	8b3b      	ldrh	r3, [r7, #24]
 801e93c:	3310      	adds	r3, #16
 801e93e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e940:	8b3a      	ldrh	r2, [r7, #24]
 801e942:	88bb      	ldrh	r3, [r7, #4]
 801e944:	3303      	adds	r3, #3
 801e946:	f023 0303 	bic.w	r3, r3, #3
 801e94a:	429a      	cmp	r2, r3
 801e94c:	d306      	bcc.n	801e95c <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801e94e:	8afa      	ldrh	r2, [r7, #22]
 801e950:	88bb      	ldrh	r3, [r7, #4]
 801e952:	3303      	adds	r3, #3
 801e954:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e958:	429a      	cmp	r2, r3
 801e95a:	d201      	bcs.n	801e960 <pbuf_alloc+0x15c>
        return NULL;
 801e95c:	2300      	movs	r3, #0
 801e95e:	e035      	b.n	801e9cc <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801e960:	8afb      	ldrh	r3, [r7, #22]
 801e962:	4618      	mov	r0, r3
 801e964:	f7ff f920 	bl	801dba8 <mem_malloc>
 801e968:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801e96a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e96c:	2b00      	cmp	r3, #0
 801e96e:	d101      	bne.n	801e974 <pbuf_alloc+0x170>
        return NULL;
 801e970:	2300      	movs	r3, #0
 801e972:	e02b      	b.n	801e9cc <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801e974:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e976:	3310      	adds	r3, #16
 801e978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e97a:	4413      	add	r3, r2
 801e97c:	3303      	adds	r3, #3
 801e97e:	f023 0303 	bic.w	r3, r3, #3
 801e982:	4618      	mov	r0, r3
 801e984:	88b9      	ldrh	r1, [r7, #4]
 801e986:	88ba      	ldrh	r2, [r7, #4]
 801e988:	2300      	movs	r3, #0
 801e98a:	9301      	str	r3, [sp, #4]
 801e98c:	887b      	ldrh	r3, [r7, #2]
 801e98e:	9300      	str	r3, [sp, #0]
 801e990:	460b      	mov	r3, r1
 801e992:	4601      	mov	r1, r0
 801e994:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e996:	f7ff ff0b 	bl	801e7b0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801e99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e99c:	685b      	ldr	r3, [r3, #4]
 801e99e:	f003 0303 	and.w	r3, r3, #3
 801e9a2:	2b00      	cmp	r3, #0
 801e9a4:	d010      	beq.n	801e9c8 <pbuf_alloc+0x1c4>
 801e9a6:	4b0b      	ldr	r3, [pc, #44]	; (801e9d4 <pbuf_alloc+0x1d0>)
 801e9a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 801e9ac:	490d      	ldr	r1, [pc, #52]	; (801e9e4 <pbuf_alloc+0x1e0>)
 801e9ae:	480b      	ldr	r0, [pc, #44]	; (801e9dc <pbuf_alloc+0x1d8>)
 801e9b0:	f003 ff42 	bl	8022838 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801e9b4:	e008      	b.n	801e9c8 <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801e9b6:	4b07      	ldr	r3, [pc, #28]	; (801e9d4 <pbuf_alloc+0x1d0>)
 801e9b8:	f240 1227 	movw	r2, #295	; 0x127
 801e9bc:	490a      	ldr	r1, [pc, #40]	; (801e9e8 <pbuf_alloc+0x1e4>)
 801e9be:	4807      	ldr	r0, [pc, #28]	; (801e9dc <pbuf_alloc+0x1d8>)
 801e9c0:	f003 ff3a 	bl	8022838 <iprintf>
      return NULL;
 801e9c4:	2300      	movs	r3, #0
 801e9c6:	e001      	b.n	801e9cc <pbuf_alloc+0x1c8>
      break;
 801e9c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801e9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e9cc:	4618      	mov	r0, r3
 801e9ce:	3728      	adds	r7, #40	; 0x28
 801e9d0:	46bd      	mov	sp, r7
 801e9d2:	bd80      	pop	{r7, pc}
 801e9d4:	08027b0c 	.word	0x08027b0c
 801e9d8:	08027b3c 	.word	0x08027b3c
 801e9dc:	08027b6c 	.word	0x08027b6c
 801e9e0:	08027b94 	.word	0x08027b94
 801e9e4:	08027bc8 	.word	0x08027bc8
 801e9e8:	08027bf4 	.word	0x08027bf4

0801e9ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801e9ec:	b580      	push	{r7, lr}
 801e9ee:	b086      	sub	sp, #24
 801e9f0:	af02      	add	r7, sp, #8
 801e9f2:	6078      	str	r0, [r7, #4]
 801e9f4:	460b      	mov	r3, r1
 801e9f6:	807b      	strh	r3, [r7, #2]
 801e9f8:	4613      	mov	r3, r2
 801e9fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801e9fc:	883b      	ldrh	r3, [r7, #0]
 801e9fe:	2b41      	cmp	r3, #65	; 0x41
 801ea00:	d009      	beq.n	801ea16 <pbuf_alloc_reference+0x2a>
 801ea02:	883b      	ldrh	r3, [r7, #0]
 801ea04:	2b01      	cmp	r3, #1
 801ea06:	d006      	beq.n	801ea16 <pbuf_alloc_reference+0x2a>
 801ea08:	4b0f      	ldr	r3, [pc, #60]	; (801ea48 <pbuf_alloc_reference+0x5c>)
 801ea0a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801ea0e:	490f      	ldr	r1, [pc, #60]	; (801ea4c <pbuf_alloc_reference+0x60>)
 801ea10:	480f      	ldr	r0, [pc, #60]	; (801ea50 <pbuf_alloc_reference+0x64>)
 801ea12:	f003 ff11 	bl	8022838 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801ea16:	2004      	movs	r0, #4
 801ea18:	f7ff fa56 	bl	801dec8 <memp_malloc>
 801ea1c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801ea1e:	68fb      	ldr	r3, [r7, #12]
 801ea20:	2b00      	cmp	r3, #0
 801ea22:	d101      	bne.n	801ea28 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801ea24:	2300      	movs	r3, #0
 801ea26:	e00b      	b.n	801ea40 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801ea28:	8879      	ldrh	r1, [r7, #2]
 801ea2a:	887a      	ldrh	r2, [r7, #2]
 801ea2c:	2300      	movs	r3, #0
 801ea2e:	9301      	str	r3, [sp, #4]
 801ea30:	883b      	ldrh	r3, [r7, #0]
 801ea32:	9300      	str	r3, [sp, #0]
 801ea34:	460b      	mov	r3, r1
 801ea36:	6879      	ldr	r1, [r7, #4]
 801ea38:	68f8      	ldr	r0, [r7, #12]
 801ea3a:	f7ff feb9 	bl	801e7b0 <pbuf_init_alloced_pbuf>
  return p;
 801ea3e:	68fb      	ldr	r3, [r7, #12]
}
 801ea40:	4618      	mov	r0, r3
 801ea42:	3710      	adds	r7, #16
 801ea44:	46bd      	mov	sp, r7
 801ea46:	bd80      	pop	{r7, pc}
 801ea48:	08027b0c 	.word	0x08027b0c
 801ea4c:	08027c10 	.word	0x08027c10
 801ea50:	08027b6c 	.word	0x08027b6c

0801ea54 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801ea54:	b580      	push	{r7, lr}
 801ea56:	b088      	sub	sp, #32
 801ea58:	af02      	add	r7, sp, #8
 801ea5a:	607b      	str	r3, [r7, #4]
 801ea5c:	4603      	mov	r3, r0
 801ea5e:	73fb      	strb	r3, [r7, #15]
 801ea60:	460b      	mov	r3, r1
 801ea62:	81bb      	strh	r3, [r7, #12]
 801ea64:	4613      	mov	r3, r2
 801ea66:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801ea68:	7bfb      	ldrb	r3, [r7, #15]
 801ea6a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801ea6c:	8a7b      	ldrh	r3, [r7, #18]
 801ea6e:	3303      	adds	r3, #3
 801ea70:	f023 0203 	bic.w	r2, r3, #3
 801ea74:	89bb      	ldrh	r3, [r7, #12]
 801ea76:	441a      	add	r2, r3
 801ea78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801ea7a:	429a      	cmp	r2, r3
 801ea7c:	d901      	bls.n	801ea82 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801ea7e:	2300      	movs	r3, #0
 801ea80:	e018      	b.n	801eab4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801ea82:	6a3b      	ldr	r3, [r7, #32]
 801ea84:	2b00      	cmp	r3, #0
 801ea86:	d007      	beq.n	801ea98 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801ea88:	8a7b      	ldrh	r3, [r7, #18]
 801ea8a:	3303      	adds	r3, #3
 801ea8c:	f023 0303 	bic.w	r3, r3, #3
 801ea90:	6a3a      	ldr	r2, [r7, #32]
 801ea92:	4413      	add	r3, r2
 801ea94:	617b      	str	r3, [r7, #20]
 801ea96:	e001      	b.n	801ea9c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801ea98:	2300      	movs	r3, #0
 801ea9a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801ea9c:	6878      	ldr	r0, [r7, #4]
 801ea9e:	89b9      	ldrh	r1, [r7, #12]
 801eaa0:	89ba      	ldrh	r2, [r7, #12]
 801eaa2:	2302      	movs	r3, #2
 801eaa4:	9301      	str	r3, [sp, #4]
 801eaa6:	897b      	ldrh	r3, [r7, #10]
 801eaa8:	9300      	str	r3, [sp, #0]
 801eaaa:	460b      	mov	r3, r1
 801eaac:	6979      	ldr	r1, [r7, #20]
 801eaae:	f7ff fe7f 	bl	801e7b0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801eab2:	687b      	ldr	r3, [r7, #4]
}
 801eab4:	4618      	mov	r0, r3
 801eab6:	3718      	adds	r7, #24
 801eab8:	46bd      	mov	sp, r7
 801eaba:	bd80      	pop	{r7, pc}

0801eabc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801eabc:	b580      	push	{r7, lr}
 801eabe:	b084      	sub	sp, #16
 801eac0:	af00      	add	r7, sp, #0
 801eac2:	6078      	str	r0, [r7, #4]
 801eac4:	460b      	mov	r3, r1
 801eac6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801eac8:	687b      	ldr	r3, [r7, #4]
 801eaca:	2b00      	cmp	r3, #0
 801eacc:	d106      	bne.n	801eadc <pbuf_realloc+0x20>
 801eace:	4b3a      	ldr	r3, [pc, #232]	; (801ebb8 <pbuf_realloc+0xfc>)
 801ead0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801ead4:	4939      	ldr	r1, [pc, #228]	; (801ebbc <pbuf_realloc+0x100>)
 801ead6:	483a      	ldr	r0, [pc, #232]	; (801ebc0 <pbuf_realloc+0x104>)
 801ead8:	f003 feae 	bl	8022838 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801eadc:	687b      	ldr	r3, [r7, #4]
 801eade:	891b      	ldrh	r3, [r3, #8]
 801eae0:	887a      	ldrh	r2, [r7, #2]
 801eae2:	429a      	cmp	r2, r3
 801eae4:	d263      	bcs.n	801ebae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	891a      	ldrh	r2, [r3, #8]
 801eaea:	887b      	ldrh	r3, [r7, #2]
 801eaec:	1ad3      	subs	r3, r2, r3
 801eaee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801eaf0:	887b      	ldrh	r3, [r7, #2]
 801eaf2:	817b      	strh	r3, [r7, #10]
  q = p;
 801eaf4:	687b      	ldr	r3, [r7, #4]
 801eaf6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801eaf8:	e018      	b.n	801eb2c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801eafa:	68fb      	ldr	r3, [r7, #12]
 801eafc:	895b      	ldrh	r3, [r3, #10]
 801eafe:	897a      	ldrh	r2, [r7, #10]
 801eb00:	1ad3      	subs	r3, r2, r3
 801eb02:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801eb04:	68fb      	ldr	r3, [r7, #12]
 801eb06:	891a      	ldrh	r2, [r3, #8]
 801eb08:	893b      	ldrh	r3, [r7, #8]
 801eb0a:	1ad3      	subs	r3, r2, r3
 801eb0c:	b29a      	uxth	r2, r3
 801eb0e:	68fb      	ldr	r3, [r7, #12]
 801eb10:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801eb12:	68fb      	ldr	r3, [r7, #12]
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801eb18:	68fb      	ldr	r3, [r7, #12]
 801eb1a:	2b00      	cmp	r3, #0
 801eb1c:	d106      	bne.n	801eb2c <pbuf_realloc+0x70>
 801eb1e:	4b26      	ldr	r3, [pc, #152]	; (801ebb8 <pbuf_realloc+0xfc>)
 801eb20:	f240 12af 	movw	r2, #431	; 0x1af
 801eb24:	4927      	ldr	r1, [pc, #156]	; (801ebc4 <pbuf_realloc+0x108>)
 801eb26:	4826      	ldr	r0, [pc, #152]	; (801ebc0 <pbuf_realloc+0x104>)
 801eb28:	f003 fe86 	bl	8022838 <iprintf>
  while (rem_len > q->len) {
 801eb2c:	68fb      	ldr	r3, [r7, #12]
 801eb2e:	895b      	ldrh	r3, [r3, #10]
 801eb30:	897a      	ldrh	r2, [r7, #10]
 801eb32:	429a      	cmp	r2, r3
 801eb34:	d8e1      	bhi.n	801eafa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801eb36:	68fb      	ldr	r3, [r7, #12]
 801eb38:	7b1b      	ldrb	r3, [r3, #12]
 801eb3a:	f003 030f 	and.w	r3, r3, #15
 801eb3e:	2b00      	cmp	r3, #0
 801eb40:	d121      	bne.n	801eb86 <pbuf_realloc+0xca>
 801eb42:	68fb      	ldr	r3, [r7, #12]
 801eb44:	895b      	ldrh	r3, [r3, #10]
 801eb46:	897a      	ldrh	r2, [r7, #10]
 801eb48:	429a      	cmp	r2, r3
 801eb4a:	d01c      	beq.n	801eb86 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801eb4c:	68fb      	ldr	r3, [r7, #12]
 801eb4e:	7b5b      	ldrb	r3, [r3, #13]
 801eb50:	f003 0302 	and.w	r3, r3, #2
 801eb54:	2b00      	cmp	r3, #0
 801eb56:	d116      	bne.n	801eb86 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801eb58:	68fb      	ldr	r3, [r7, #12]
 801eb5a:	685a      	ldr	r2, [r3, #4]
 801eb5c:	68fb      	ldr	r3, [r7, #12]
 801eb5e:	1ad3      	subs	r3, r2, r3
 801eb60:	b29a      	uxth	r2, r3
 801eb62:	897b      	ldrh	r3, [r7, #10]
 801eb64:	4413      	add	r3, r2
 801eb66:	b29b      	uxth	r3, r3
 801eb68:	4619      	mov	r1, r3
 801eb6a:	68f8      	ldr	r0, [r7, #12]
 801eb6c:	f7fe ff20 	bl	801d9b0 <mem_trim>
 801eb70:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801eb72:	68fb      	ldr	r3, [r7, #12]
 801eb74:	2b00      	cmp	r3, #0
 801eb76:	d106      	bne.n	801eb86 <pbuf_realloc+0xca>
 801eb78:	4b0f      	ldr	r3, [pc, #60]	; (801ebb8 <pbuf_realloc+0xfc>)
 801eb7a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801eb7e:	4912      	ldr	r1, [pc, #72]	; (801ebc8 <pbuf_realloc+0x10c>)
 801eb80:	480f      	ldr	r0, [pc, #60]	; (801ebc0 <pbuf_realloc+0x104>)
 801eb82:	f003 fe59 	bl	8022838 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801eb86:	68fb      	ldr	r3, [r7, #12]
 801eb88:	897a      	ldrh	r2, [r7, #10]
 801eb8a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801eb8c:	68fb      	ldr	r3, [r7, #12]
 801eb8e:	895a      	ldrh	r2, [r3, #10]
 801eb90:	68fb      	ldr	r3, [r7, #12]
 801eb92:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801eb94:	68fb      	ldr	r3, [r7, #12]
 801eb96:	681b      	ldr	r3, [r3, #0]
 801eb98:	2b00      	cmp	r3, #0
 801eb9a:	d004      	beq.n	801eba6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801eb9c:	68fb      	ldr	r3, [r7, #12]
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	4618      	mov	r0, r3
 801eba2:	f000 f911 	bl	801edc8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801eba6:	68fb      	ldr	r3, [r7, #12]
 801eba8:	2200      	movs	r2, #0
 801ebaa:	601a      	str	r2, [r3, #0]
 801ebac:	e000      	b.n	801ebb0 <pbuf_realloc+0xf4>
    return;
 801ebae:	bf00      	nop

}
 801ebb0:	3710      	adds	r7, #16
 801ebb2:	46bd      	mov	sp, r7
 801ebb4:	bd80      	pop	{r7, pc}
 801ebb6:	bf00      	nop
 801ebb8:	08027b0c 	.word	0x08027b0c
 801ebbc:	08027c24 	.word	0x08027c24
 801ebc0:	08027b6c 	.word	0x08027b6c
 801ebc4:	08027c3c 	.word	0x08027c3c
 801ebc8:	08027c54 	.word	0x08027c54

0801ebcc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801ebcc:	b580      	push	{r7, lr}
 801ebce:	b086      	sub	sp, #24
 801ebd0:	af00      	add	r7, sp, #0
 801ebd2:	60f8      	str	r0, [r7, #12]
 801ebd4:	60b9      	str	r1, [r7, #8]
 801ebd6:	4613      	mov	r3, r2
 801ebd8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ebda:	68fb      	ldr	r3, [r7, #12]
 801ebdc:	2b00      	cmp	r3, #0
 801ebde:	d106      	bne.n	801ebee <pbuf_add_header_impl+0x22>
 801ebe0:	4b2b      	ldr	r3, [pc, #172]	; (801ec90 <pbuf_add_header_impl+0xc4>)
 801ebe2:	f240 12df 	movw	r2, #479	; 0x1df
 801ebe6:	492b      	ldr	r1, [pc, #172]	; (801ec94 <pbuf_add_header_impl+0xc8>)
 801ebe8:	482b      	ldr	r0, [pc, #172]	; (801ec98 <pbuf_add_header_impl+0xcc>)
 801ebea:	f003 fe25 	bl	8022838 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801ebee:	68fb      	ldr	r3, [r7, #12]
 801ebf0:	2b00      	cmp	r3, #0
 801ebf2:	d003      	beq.n	801ebfc <pbuf_add_header_impl+0x30>
 801ebf4:	68bb      	ldr	r3, [r7, #8]
 801ebf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ebfa:	d301      	bcc.n	801ec00 <pbuf_add_header_impl+0x34>
    return 1;
 801ebfc:	2301      	movs	r3, #1
 801ebfe:	e043      	b.n	801ec88 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801ec00:	68bb      	ldr	r3, [r7, #8]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d101      	bne.n	801ec0a <pbuf_add_header_impl+0x3e>
    return 0;
 801ec06:	2300      	movs	r3, #0
 801ec08:	e03e      	b.n	801ec88 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801ec0a:	68bb      	ldr	r3, [r7, #8]
 801ec0c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801ec0e:	68fb      	ldr	r3, [r7, #12]
 801ec10:	891a      	ldrh	r2, [r3, #8]
 801ec12:	8a7b      	ldrh	r3, [r7, #18]
 801ec14:	4413      	add	r3, r2
 801ec16:	b29b      	uxth	r3, r3
 801ec18:	8a7a      	ldrh	r2, [r7, #18]
 801ec1a:	429a      	cmp	r2, r3
 801ec1c:	d901      	bls.n	801ec22 <pbuf_add_header_impl+0x56>
    return 1;
 801ec1e:	2301      	movs	r3, #1
 801ec20:	e032      	b.n	801ec88 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801ec22:	68fb      	ldr	r3, [r7, #12]
 801ec24:	7b1b      	ldrb	r3, [r3, #12]
 801ec26:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801ec28:	8a3b      	ldrh	r3, [r7, #16]
 801ec2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d00c      	beq.n	801ec4c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801ec32:	68fb      	ldr	r3, [r7, #12]
 801ec34:	685a      	ldr	r2, [r3, #4]
 801ec36:	68bb      	ldr	r3, [r7, #8]
 801ec38:	425b      	negs	r3, r3
 801ec3a:	4413      	add	r3, r2
 801ec3c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801ec3e:	68fb      	ldr	r3, [r7, #12]
 801ec40:	3310      	adds	r3, #16
 801ec42:	697a      	ldr	r2, [r7, #20]
 801ec44:	429a      	cmp	r2, r3
 801ec46:	d20d      	bcs.n	801ec64 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801ec48:	2301      	movs	r3, #1
 801ec4a:	e01d      	b.n	801ec88 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801ec4c:	79fb      	ldrb	r3, [r7, #7]
 801ec4e:	2b00      	cmp	r3, #0
 801ec50:	d006      	beq.n	801ec60 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801ec52:	68fb      	ldr	r3, [r7, #12]
 801ec54:	685a      	ldr	r2, [r3, #4]
 801ec56:	68bb      	ldr	r3, [r7, #8]
 801ec58:	425b      	negs	r3, r3
 801ec5a:	4413      	add	r3, r2
 801ec5c:	617b      	str	r3, [r7, #20]
 801ec5e:	e001      	b.n	801ec64 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801ec60:	2301      	movs	r3, #1
 801ec62:	e011      	b.n	801ec88 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801ec64:	68fb      	ldr	r3, [r7, #12]
 801ec66:	697a      	ldr	r2, [r7, #20]
 801ec68:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801ec6a:	68fb      	ldr	r3, [r7, #12]
 801ec6c:	895a      	ldrh	r2, [r3, #10]
 801ec6e:	8a7b      	ldrh	r3, [r7, #18]
 801ec70:	4413      	add	r3, r2
 801ec72:	b29a      	uxth	r2, r3
 801ec74:	68fb      	ldr	r3, [r7, #12]
 801ec76:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801ec78:	68fb      	ldr	r3, [r7, #12]
 801ec7a:	891a      	ldrh	r2, [r3, #8]
 801ec7c:	8a7b      	ldrh	r3, [r7, #18]
 801ec7e:	4413      	add	r3, r2
 801ec80:	b29a      	uxth	r2, r3
 801ec82:	68fb      	ldr	r3, [r7, #12]
 801ec84:	811a      	strh	r2, [r3, #8]


  return 0;
 801ec86:	2300      	movs	r3, #0
}
 801ec88:	4618      	mov	r0, r3
 801ec8a:	3718      	adds	r7, #24
 801ec8c:	46bd      	mov	sp, r7
 801ec8e:	bd80      	pop	{r7, pc}
 801ec90:	08027b0c 	.word	0x08027b0c
 801ec94:	08027c70 	.word	0x08027c70
 801ec98:	08027b6c 	.word	0x08027b6c

0801ec9c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801ec9c:	b580      	push	{r7, lr}
 801ec9e:	b082      	sub	sp, #8
 801eca0:	af00      	add	r7, sp, #0
 801eca2:	6078      	str	r0, [r7, #4]
 801eca4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801eca6:	2200      	movs	r2, #0
 801eca8:	6839      	ldr	r1, [r7, #0]
 801ecaa:	6878      	ldr	r0, [r7, #4]
 801ecac:	f7ff ff8e 	bl	801ebcc <pbuf_add_header_impl>
 801ecb0:	4603      	mov	r3, r0
}
 801ecb2:	4618      	mov	r0, r3
 801ecb4:	3708      	adds	r7, #8
 801ecb6:	46bd      	mov	sp, r7
 801ecb8:	bd80      	pop	{r7, pc}
	...

0801ecbc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801ecbc:	b580      	push	{r7, lr}
 801ecbe:	b084      	sub	sp, #16
 801ecc0:	af00      	add	r7, sp, #0
 801ecc2:	6078      	str	r0, [r7, #4]
 801ecc4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	2b00      	cmp	r3, #0
 801ecca:	d106      	bne.n	801ecda <pbuf_remove_header+0x1e>
 801eccc:	4b20      	ldr	r3, [pc, #128]	; (801ed50 <pbuf_remove_header+0x94>)
 801ecce:	f240 224b 	movw	r2, #587	; 0x24b
 801ecd2:	4920      	ldr	r1, [pc, #128]	; (801ed54 <pbuf_remove_header+0x98>)
 801ecd4:	4820      	ldr	r0, [pc, #128]	; (801ed58 <pbuf_remove_header+0x9c>)
 801ecd6:	f003 fdaf 	bl	8022838 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801ecda:	687b      	ldr	r3, [r7, #4]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d003      	beq.n	801ece8 <pbuf_remove_header+0x2c>
 801ece0:	683b      	ldr	r3, [r7, #0]
 801ece2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ece6:	d301      	bcc.n	801ecec <pbuf_remove_header+0x30>
    return 1;
 801ece8:	2301      	movs	r3, #1
 801ecea:	e02c      	b.n	801ed46 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801ecec:	683b      	ldr	r3, [r7, #0]
 801ecee:	2b00      	cmp	r3, #0
 801ecf0:	d101      	bne.n	801ecf6 <pbuf_remove_header+0x3a>
    return 0;
 801ecf2:	2300      	movs	r3, #0
 801ecf4:	e027      	b.n	801ed46 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801ecf6:	683b      	ldr	r3, [r7, #0]
 801ecf8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	895b      	ldrh	r3, [r3, #10]
 801ecfe:	89fa      	ldrh	r2, [r7, #14]
 801ed00:	429a      	cmp	r2, r3
 801ed02:	d908      	bls.n	801ed16 <pbuf_remove_header+0x5a>
 801ed04:	4b12      	ldr	r3, [pc, #72]	; (801ed50 <pbuf_remove_header+0x94>)
 801ed06:	f240 2255 	movw	r2, #597	; 0x255
 801ed0a:	4914      	ldr	r1, [pc, #80]	; (801ed5c <pbuf_remove_header+0xa0>)
 801ed0c:	4812      	ldr	r0, [pc, #72]	; (801ed58 <pbuf_remove_header+0x9c>)
 801ed0e:	f003 fd93 	bl	8022838 <iprintf>
 801ed12:	2301      	movs	r3, #1
 801ed14:	e017      	b.n	801ed46 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801ed16:	687b      	ldr	r3, [r7, #4]
 801ed18:	685b      	ldr	r3, [r3, #4]
 801ed1a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801ed1c:	687b      	ldr	r3, [r7, #4]
 801ed1e:	685a      	ldr	r2, [r3, #4]
 801ed20:	683b      	ldr	r3, [r7, #0]
 801ed22:	441a      	add	r2, r3
 801ed24:	687b      	ldr	r3, [r7, #4]
 801ed26:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801ed28:	687b      	ldr	r3, [r7, #4]
 801ed2a:	895a      	ldrh	r2, [r3, #10]
 801ed2c:	89fb      	ldrh	r3, [r7, #14]
 801ed2e:	1ad3      	subs	r3, r2, r3
 801ed30:	b29a      	uxth	r2, r3
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801ed36:	687b      	ldr	r3, [r7, #4]
 801ed38:	891a      	ldrh	r2, [r3, #8]
 801ed3a:	89fb      	ldrh	r3, [r7, #14]
 801ed3c:	1ad3      	subs	r3, r2, r3
 801ed3e:	b29a      	uxth	r2, r3
 801ed40:	687b      	ldr	r3, [r7, #4]
 801ed42:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801ed44:	2300      	movs	r3, #0
}
 801ed46:	4618      	mov	r0, r3
 801ed48:	3710      	adds	r7, #16
 801ed4a:	46bd      	mov	sp, r7
 801ed4c:	bd80      	pop	{r7, pc}
 801ed4e:	bf00      	nop
 801ed50:	08027b0c 	.word	0x08027b0c
 801ed54:	08027c70 	.word	0x08027c70
 801ed58:	08027b6c 	.word	0x08027b6c
 801ed5c:	08027c7c 	.word	0x08027c7c

0801ed60 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801ed60:	b580      	push	{r7, lr}
 801ed62:	b082      	sub	sp, #8
 801ed64:	af00      	add	r7, sp, #0
 801ed66:	6078      	str	r0, [r7, #4]
 801ed68:	460b      	mov	r3, r1
 801ed6a:	807b      	strh	r3, [r7, #2]
 801ed6c:	4613      	mov	r3, r2
 801ed6e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801ed70:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	da08      	bge.n	801ed8a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801ed78:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ed7c:	425b      	negs	r3, r3
 801ed7e:	4619      	mov	r1, r3
 801ed80:	6878      	ldr	r0, [r7, #4]
 801ed82:	f7ff ff9b 	bl	801ecbc <pbuf_remove_header>
 801ed86:	4603      	mov	r3, r0
 801ed88:	e007      	b.n	801ed9a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801ed8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801ed8e:	787a      	ldrb	r2, [r7, #1]
 801ed90:	4619      	mov	r1, r3
 801ed92:	6878      	ldr	r0, [r7, #4]
 801ed94:	f7ff ff1a 	bl	801ebcc <pbuf_add_header_impl>
 801ed98:	4603      	mov	r3, r0
  }
}
 801ed9a:	4618      	mov	r0, r3
 801ed9c:	3708      	adds	r7, #8
 801ed9e:	46bd      	mov	sp, r7
 801eda0:	bd80      	pop	{r7, pc}

0801eda2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801eda2:	b580      	push	{r7, lr}
 801eda4:	b082      	sub	sp, #8
 801eda6:	af00      	add	r7, sp, #0
 801eda8:	6078      	str	r0, [r7, #4]
 801edaa:	460b      	mov	r3, r1
 801edac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801edae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801edb2:	2201      	movs	r2, #1
 801edb4:	4619      	mov	r1, r3
 801edb6:	6878      	ldr	r0, [r7, #4]
 801edb8:	f7ff ffd2 	bl	801ed60 <pbuf_header_impl>
 801edbc:	4603      	mov	r3, r0
}
 801edbe:	4618      	mov	r0, r3
 801edc0:	3708      	adds	r7, #8
 801edc2:	46bd      	mov	sp, r7
 801edc4:	bd80      	pop	{r7, pc}
	...

0801edc8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801edc8:	b580      	push	{r7, lr}
 801edca:	b086      	sub	sp, #24
 801edcc:	af00      	add	r7, sp, #0
 801edce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801edd0:	687b      	ldr	r3, [r7, #4]
 801edd2:	2b00      	cmp	r3, #0
 801edd4:	d10b      	bne.n	801edee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801edd6:	687b      	ldr	r3, [r7, #4]
 801edd8:	2b00      	cmp	r3, #0
 801edda:	d106      	bne.n	801edea <pbuf_free+0x22>
 801eddc:	4b38      	ldr	r3, [pc, #224]	; (801eec0 <pbuf_free+0xf8>)
 801edde:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801ede2:	4938      	ldr	r1, [pc, #224]	; (801eec4 <pbuf_free+0xfc>)
 801ede4:	4838      	ldr	r0, [pc, #224]	; (801eec8 <pbuf_free+0x100>)
 801ede6:	f003 fd27 	bl	8022838 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801edea:	2300      	movs	r3, #0
 801edec:	e063      	b.n	801eeb6 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801edee:	2300      	movs	r3, #0
 801edf0:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801edf2:	e05c      	b.n	801eeae <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	7b9b      	ldrb	r3, [r3, #14]
 801edf8:	2b00      	cmp	r3, #0
 801edfa:	d106      	bne.n	801ee0a <pbuf_free+0x42>
 801edfc:	4b30      	ldr	r3, [pc, #192]	; (801eec0 <pbuf_free+0xf8>)
 801edfe:	f240 22f1 	movw	r2, #753	; 0x2f1
 801ee02:	4932      	ldr	r1, [pc, #200]	; (801eecc <pbuf_free+0x104>)
 801ee04:	4830      	ldr	r0, [pc, #192]	; (801eec8 <pbuf_free+0x100>)
 801ee06:	f003 fd17 	bl	8022838 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801ee0a:	687b      	ldr	r3, [r7, #4]
 801ee0c:	7b9b      	ldrb	r3, [r3, #14]
 801ee0e:	3b01      	subs	r3, #1
 801ee10:	b2da      	uxtb	r2, r3
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	739a      	strb	r2, [r3, #14]
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	7b9b      	ldrb	r3, [r3, #14]
 801ee1a:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801ee1c:	7dbb      	ldrb	r3, [r7, #22]
 801ee1e:	2b00      	cmp	r3, #0
 801ee20:	d143      	bne.n	801eeaa <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	681b      	ldr	r3, [r3, #0]
 801ee26:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801ee28:	687b      	ldr	r3, [r7, #4]
 801ee2a:	7b1b      	ldrb	r3, [r3, #12]
 801ee2c:	f003 030f 	and.w	r3, r3, #15
 801ee30:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	7b5b      	ldrb	r3, [r3, #13]
 801ee36:	f003 0302 	and.w	r3, r3, #2
 801ee3a:	2b00      	cmp	r3, #0
 801ee3c:	d011      	beq.n	801ee62 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801ee3e:	687b      	ldr	r3, [r7, #4]
 801ee40:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801ee42:	68bb      	ldr	r3, [r7, #8]
 801ee44:	691b      	ldr	r3, [r3, #16]
 801ee46:	2b00      	cmp	r3, #0
 801ee48:	d106      	bne.n	801ee58 <pbuf_free+0x90>
 801ee4a:	4b1d      	ldr	r3, [pc, #116]	; (801eec0 <pbuf_free+0xf8>)
 801ee4c:	f240 22ff 	movw	r2, #767	; 0x2ff
 801ee50:	491f      	ldr	r1, [pc, #124]	; (801eed0 <pbuf_free+0x108>)
 801ee52:	481d      	ldr	r0, [pc, #116]	; (801eec8 <pbuf_free+0x100>)
 801ee54:	f003 fcf0 	bl	8022838 <iprintf>
        pc->custom_free_function(p);
 801ee58:	68bb      	ldr	r3, [r7, #8]
 801ee5a:	691b      	ldr	r3, [r3, #16]
 801ee5c:	6878      	ldr	r0, [r7, #4]
 801ee5e:	4798      	blx	r3
 801ee60:	e01d      	b.n	801ee9e <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801ee62:	7bfb      	ldrb	r3, [r7, #15]
 801ee64:	2b02      	cmp	r3, #2
 801ee66:	d104      	bne.n	801ee72 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801ee68:	6879      	ldr	r1, [r7, #4]
 801ee6a:	2005      	movs	r0, #5
 801ee6c:	f7ff f89c 	bl	801dfa8 <memp_free>
 801ee70:	e015      	b.n	801ee9e <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801ee72:	7bfb      	ldrb	r3, [r7, #15]
 801ee74:	2b01      	cmp	r3, #1
 801ee76:	d104      	bne.n	801ee82 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801ee78:	6879      	ldr	r1, [r7, #4]
 801ee7a:	2004      	movs	r0, #4
 801ee7c:	f7ff f894 	bl	801dfa8 <memp_free>
 801ee80:	e00d      	b.n	801ee9e <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801ee82:	7bfb      	ldrb	r3, [r7, #15]
 801ee84:	2b00      	cmp	r3, #0
 801ee86:	d103      	bne.n	801ee90 <pbuf_free+0xc8>
          mem_free(p);
 801ee88:	6878      	ldr	r0, [r7, #4]
 801ee8a:	f7fe fd27 	bl	801d8dc <mem_free>
 801ee8e:	e006      	b.n	801ee9e <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801ee90:	4b0b      	ldr	r3, [pc, #44]	; (801eec0 <pbuf_free+0xf8>)
 801ee92:	f240 320f 	movw	r2, #783	; 0x30f
 801ee96:	490f      	ldr	r1, [pc, #60]	; (801eed4 <pbuf_free+0x10c>)
 801ee98:	480b      	ldr	r0, [pc, #44]	; (801eec8 <pbuf_free+0x100>)
 801ee9a:	f003 fccd 	bl	8022838 <iprintf>
        }
      }
      count++;
 801ee9e:	7dfb      	ldrb	r3, [r7, #23]
 801eea0:	3301      	adds	r3, #1
 801eea2:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801eea4:	693b      	ldr	r3, [r7, #16]
 801eea6:	607b      	str	r3, [r7, #4]
 801eea8:	e001      	b.n	801eeae <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801eeaa:	2300      	movs	r3, #0
 801eeac:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	2b00      	cmp	r3, #0
 801eeb2:	d19f      	bne.n	801edf4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801eeb4:	7dfb      	ldrb	r3, [r7, #23]
}
 801eeb6:	4618      	mov	r0, r3
 801eeb8:	3718      	adds	r7, #24
 801eeba:	46bd      	mov	sp, r7
 801eebc:	bd80      	pop	{r7, pc}
 801eebe:	bf00      	nop
 801eec0:	08027b0c 	.word	0x08027b0c
 801eec4:	08027c70 	.word	0x08027c70
 801eec8:	08027b6c 	.word	0x08027b6c
 801eecc:	08027c9c 	.word	0x08027c9c
 801eed0:	08027cb4 	.word	0x08027cb4
 801eed4:	08027cd8 	.word	0x08027cd8

0801eed8 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801eed8:	b480      	push	{r7}
 801eeda:	b085      	sub	sp, #20
 801eedc:	af00      	add	r7, sp, #0
 801eede:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801eee0:	2300      	movs	r3, #0
 801eee2:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801eee4:	e005      	b.n	801eef2 <pbuf_clen+0x1a>
    ++len;
 801eee6:	89fb      	ldrh	r3, [r7, #14]
 801eee8:	3301      	adds	r3, #1
 801eeea:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801eeec:	687b      	ldr	r3, [r7, #4]
 801eeee:	681b      	ldr	r3, [r3, #0]
 801eef0:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	2b00      	cmp	r3, #0
 801eef6:	d1f6      	bne.n	801eee6 <pbuf_clen+0xe>
  }
  return len;
 801eef8:	89fb      	ldrh	r3, [r7, #14]
}
 801eefa:	4618      	mov	r0, r3
 801eefc:	3714      	adds	r7, #20
 801eefe:	46bd      	mov	sp, r7
 801ef00:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef04:	4770      	bx	lr
	...

0801ef08 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801ef08:	b580      	push	{r7, lr}
 801ef0a:	b082      	sub	sp, #8
 801ef0c:	af00      	add	r7, sp, #0
 801ef0e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801ef10:	687b      	ldr	r3, [r7, #4]
 801ef12:	2b00      	cmp	r3, #0
 801ef14:	d010      	beq.n	801ef38 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801ef16:	687b      	ldr	r3, [r7, #4]
 801ef18:	7b9b      	ldrb	r3, [r3, #14]
 801ef1a:	3301      	adds	r3, #1
 801ef1c:	b2da      	uxtb	r2, r3
 801ef1e:	687b      	ldr	r3, [r7, #4]
 801ef20:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	7b9b      	ldrb	r3, [r3, #14]
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d106      	bne.n	801ef38 <pbuf_ref+0x30>
 801ef2a:	4b05      	ldr	r3, [pc, #20]	; (801ef40 <pbuf_ref+0x38>)
 801ef2c:	f240 3242 	movw	r2, #834	; 0x342
 801ef30:	4904      	ldr	r1, [pc, #16]	; (801ef44 <pbuf_ref+0x3c>)
 801ef32:	4805      	ldr	r0, [pc, #20]	; (801ef48 <pbuf_ref+0x40>)
 801ef34:	f003 fc80 	bl	8022838 <iprintf>
  }
}
 801ef38:	bf00      	nop
 801ef3a:	3708      	adds	r7, #8
 801ef3c:	46bd      	mov	sp, r7
 801ef3e:	bd80      	pop	{r7, pc}
 801ef40:	08027b0c 	.word	0x08027b0c
 801ef44:	08027cec 	.word	0x08027cec
 801ef48:	08027b6c 	.word	0x08027b6c

0801ef4c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801ef4c:	b580      	push	{r7, lr}
 801ef4e:	b084      	sub	sp, #16
 801ef50:	af00      	add	r7, sp, #0
 801ef52:	6078      	str	r0, [r7, #4]
 801ef54:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801ef56:	687b      	ldr	r3, [r7, #4]
 801ef58:	2b00      	cmp	r3, #0
 801ef5a:	d002      	beq.n	801ef62 <pbuf_cat+0x16>
 801ef5c:	683b      	ldr	r3, [r7, #0]
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d107      	bne.n	801ef72 <pbuf_cat+0x26>
 801ef62:	4b20      	ldr	r3, [pc, #128]	; (801efe4 <pbuf_cat+0x98>)
 801ef64:	f240 3259 	movw	r2, #857	; 0x359
 801ef68:	491f      	ldr	r1, [pc, #124]	; (801efe8 <pbuf_cat+0x9c>)
 801ef6a:	4820      	ldr	r0, [pc, #128]	; (801efec <pbuf_cat+0xa0>)
 801ef6c:	f003 fc64 	bl	8022838 <iprintf>
 801ef70:	e034      	b.n	801efdc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801ef72:	687b      	ldr	r3, [r7, #4]
 801ef74:	60fb      	str	r3, [r7, #12]
 801ef76:	e00a      	b.n	801ef8e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ef78:	68fb      	ldr	r3, [r7, #12]
 801ef7a:	891a      	ldrh	r2, [r3, #8]
 801ef7c:	683b      	ldr	r3, [r7, #0]
 801ef7e:	891b      	ldrh	r3, [r3, #8]
 801ef80:	4413      	add	r3, r2
 801ef82:	b29a      	uxth	r2, r3
 801ef84:	68fb      	ldr	r3, [r7, #12]
 801ef86:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801ef88:	68fb      	ldr	r3, [r7, #12]
 801ef8a:	681b      	ldr	r3, [r3, #0]
 801ef8c:	60fb      	str	r3, [r7, #12]
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	2b00      	cmp	r3, #0
 801ef94:	d1f0      	bne.n	801ef78 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ef96:	68fb      	ldr	r3, [r7, #12]
 801ef98:	891a      	ldrh	r2, [r3, #8]
 801ef9a:	68fb      	ldr	r3, [r7, #12]
 801ef9c:	895b      	ldrh	r3, [r3, #10]
 801ef9e:	429a      	cmp	r2, r3
 801efa0:	d006      	beq.n	801efb0 <pbuf_cat+0x64>
 801efa2:	4b10      	ldr	r3, [pc, #64]	; (801efe4 <pbuf_cat+0x98>)
 801efa4:	f240 3262 	movw	r2, #866	; 0x362
 801efa8:	4911      	ldr	r1, [pc, #68]	; (801eff0 <pbuf_cat+0xa4>)
 801efaa:	4810      	ldr	r0, [pc, #64]	; (801efec <pbuf_cat+0xa0>)
 801efac:	f003 fc44 	bl	8022838 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801efb0:	68fb      	ldr	r3, [r7, #12]
 801efb2:	681b      	ldr	r3, [r3, #0]
 801efb4:	2b00      	cmp	r3, #0
 801efb6:	d006      	beq.n	801efc6 <pbuf_cat+0x7a>
 801efb8:	4b0a      	ldr	r3, [pc, #40]	; (801efe4 <pbuf_cat+0x98>)
 801efba:	f240 3263 	movw	r2, #867	; 0x363
 801efbe:	490d      	ldr	r1, [pc, #52]	; (801eff4 <pbuf_cat+0xa8>)
 801efc0:	480a      	ldr	r0, [pc, #40]	; (801efec <pbuf_cat+0xa0>)
 801efc2:	f003 fc39 	bl	8022838 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801efc6:	68fb      	ldr	r3, [r7, #12]
 801efc8:	891a      	ldrh	r2, [r3, #8]
 801efca:	683b      	ldr	r3, [r7, #0]
 801efcc:	891b      	ldrh	r3, [r3, #8]
 801efce:	4413      	add	r3, r2
 801efd0:	b29a      	uxth	r2, r3
 801efd2:	68fb      	ldr	r3, [r7, #12]
 801efd4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801efd6:	68fb      	ldr	r3, [r7, #12]
 801efd8:	683a      	ldr	r2, [r7, #0]
 801efda:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801efdc:	3710      	adds	r7, #16
 801efde:	46bd      	mov	sp, r7
 801efe0:	bd80      	pop	{r7, pc}
 801efe2:	bf00      	nop
 801efe4:	08027b0c 	.word	0x08027b0c
 801efe8:	08027d00 	.word	0x08027d00
 801efec:	08027b6c 	.word	0x08027b6c
 801eff0:	08027d38 	.word	0x08027d38
 801eff4:	08027d68 	.word	0x08027d68

0801eff8 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801eff8:	b580      	push	{r7, lr}
 801effa:	b082      	sub	sp, #8
 801effc:	af00      	add	r7, sp, #0
 801effe:	6078      	str	r0, [r7, #4]
 801f000:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801f002:	6839      	ldr	r1, [r7, #0]
 801f004:	6878      	ldr	r0, [r7, #4]
 801f006:	f7ff ffa1 	bl	801ef4c <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801f00a:	6838      	ldr	r0, [r7, #0]
 801f00c:	f7ff ff7c 	bl	801ef08 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801f010:	bf00      	nop
 801f012:	3708      	adds	r7, #8
 801f014:	46bd      	mov	sp, r7
 801f016:	bd80      	pop	{r7, pc}

0801f018 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801f018:	b580      	push	{r7, lr}
 801f01a:	b086      	sub	sp, #24
 801f01c:	af00      	add	r7, sp, #0
 801f01e:	6078      	str	r0, [r7, #4]
 801f020:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801f022:	2300      	movs	r3, #0
 801f024:	617b      	str	r3, [r7, #20]
 801f026:	2300      	movs	r3, #0
 801f028:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801f02a:	687b      	ldr	r3, [r7, #4]
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d008      	beq.n	801f042 <pbuf_copy+0x2a>
 801f030:	683b      	ldr	r3, [r7, #0]
 801f032:	2b00      	cmp	r3, #0
 801f034:	d005      	beq.n	801f042 <pbuf_copy+0x2a>
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	891a      	ldrh	r2, [r3, #8]
 801f03a:	683b      	ldr	r3, [r7, #0]
 801f03c:	891b      	ldrh	r3, [r3, #8]
 801f03e:	429a      	cmp	r2, r3
 801f040:	d209      	bcs.n	801f056 <pbuf_copy+0x3e>
 801f042:	4b57      	ldr	r3, [pc, #348]	; (801f1a0 <pbuf_copy+0x188>)
 801f044:	f240 32c9 	movw	r2, #969	; 0x3c9
 801f048:	4956      	ldr	r1, [pc, #344]	; (801f1a4 <pbuf_copy+0x18c>)
 801f04a:	4857      	ldr	r0, [pc, #348]	; (801f1a8 <pbuf_copy+0x190>)
 801f04c:	f003 fbf4 	bl	8022838 <iprintf>
 801f050:	f06f 030f 	mvn.w	r3, #15
 801f054:	e09f      	b.n	801f196 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801f056:	687b      	ldr	r3, [r7, #4]
 801f058:	895b      	ldrh	r3, [r3, #10]
 801f05a:	461a      	mov	r2, r3
 801f05c:	697b      	ldr	r3, [r7, #20]
 801f05e:	1ad2      	subs	r2, r2, r3
 801f060:	683b      	ldr	r3, [r7, #0]
 801f062:	895b      	ldrh	r3, [r3, #10]
 801f064:	4619      	mov	r1, r3
 801f066:	693b      	ldr	r3, [r7, #16]
 801f068:	1acb      	subs	r3, r1, r3
 801f06a:	429a      	cmp	r2, r3
 801f06c:	d306      	bcc.n	801f07c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801f06e:	683b      	ldr	r3, [r7, #0]
 801f070:	895b      	ldrh	r3, [r3, #10]
 801f072:	461a      	mov	r2, r3
 801f074:	693b      	ldr	r3, [r7, #16]
 801f076:	1ad3      	subs	r3, r2, r3
 801f078:	60fb      	str	r3, [r7, #12]
 801f07a:	e005      	b.n	801f088 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801f07c:	687b      	ldr	r3, [r7, #4]
 801f07e:	895b      	ldrh	r3, [r3, #10]
 801f080:	461a      	mov	r2, r3
 801f082:	697b      	ldr	r3, [r7, #20]
 801f084:	1ad3      	subs	r3, r2, r3
 801f086:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	685a      	ldr	r2, [r3, #4]
 801f08c:	697b      	ldr	r3, [r7, #20]
 801f08e:	18d0      	adds	r0, r2, r3
 801f090:	683b      	ldr	r3, [r7, #0]
 801f092:	685a      	ldr	r2, [r3, #4]
 801f094:	693b      	ldr	r3, [r7, #16]
 801f096:	4413      	add	r3, r2
 801f098:	68fa      	ldr	r2, [r7, #12]
 801f09a:	4619      	mov	r1, r3
 801f09c:	f003 fabc 	bl	8022618 <memcpy>
    offset_to += len;
 801f0a0:	697a      	ldr	r2, [r7, #20]
 801f0a2:	68fb      	ldr	r3, [r7, #12]
 801f0a4:	4413      	add	r3, r2
 801f0a6:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801f0a8:	693a      	ldr	r2, [r7, #16]
 801f0aa:	68fb      	ldr	r3, [r7, #12]
 801f0ac:	4413      	add	r3, r2
 801f0ae:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801f0b0:	687b      	ldr	r3, [r7, #4]
 801f0b2:	895b      	ldrh	r3, [r3, #10]
 801f0b4:	461a      	mov	r2, r3
 801f0b6:	697b      	ldr	r3, [r7, #20]
 801f0b8:	4293      	cmp	r3, r2
 801f0ba:	d906      	bls.n	801f0ca <pbuf_copy+0xb2>
 801f0bc:	4b38      	ldr	r3, [pc, #224]	; (801f1a0 <pbuf_copy+0x188>)
 801f0be:	f240 32d9 	movw	r2, #985	; 0x3d9
 801f0c2:	493a      	ldr	r1, [pc, #232]	; (801f1ac <pbuf_copy+0x194>)
 801f0c4:	4838      	ldr	r0, [pc, #224]	; (801f1a8 <pbuf_copy+0x190>)
 801f0c6:	f003 fbb7 	bl	8022838 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801f0ca:	683b      	ldr	r3, [r7, #0]
 801f0cc:	895b      	ldrh	r3, [r3, #10]
 801f0ce:	461a      	mov	r2, r3
 801f0d0:	693b      	ldr	r3, [r7, #16]
 801f0d2:	4293      	cmp	r3, r2
 801f0d4:	d906      	bls.n	801f0e4 <pbuf_copy+0xcc>
 801f0d6:	4b32      	ldr	r3, [pc, #200]	; (801f1a0 <pbuf_copy+0x188>)
 801f0d8:	f240 32da 	movw	r2, #986	; 0x3da
 801f0dc:	4934      	ldr	r1, [pc, #208]	; (801f1b0 <pbuf_copy+0x198>)
 801f0de:	4832      	ldr	r0, [pc, #200]	; (801f1a8 <pbuf_copy+0x190>)
 801f0e0:	f003 fbaa 	bl	8022838 <iprintf>
    if (offset_from >= p_from->len) {
 801f0e4:	683b      	ldr	r3, [r7, #0]
 801f0e6:	895b      	ldrh	r3, [r3, #10]
 801f0e8:	461a      	mov	r2, r3
 801f0ea:	693b      	ldr	r3, [r7, #16]
 801f0ec:	4293      	cmp	r3, r2
 801f0ee:	d304      	bcc.n	801f0fa <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801f0f0:	2300      	movs	r3, #0
 801f0f2:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801f0f4:	683b      	ldr	r3, [r7, #0]
 801f0f6:	681b      	ldr	r3, [r3, #0]
 801f0f8:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801f0fa:	687b      	ldr	r3, [r7, #4]
 801f0fc:	895b      	ldrh	r3, [r3, #10]
 801f0fe:	461a      	mov	r2, r3
 801f100:	697b      	ldr	r3, [r7, #20]
 801f102:	4293      	cmp	r3, r2
 801f104:	d114      	bne.n	801f130 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801f106:	2300      	movs	r3, #0
 801f108:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	2b00      	cmp	r3, #0
 801f114:	d10c      	bne.n	801f130 <pbuf_copy+0x118>
 801f116:	683b      	ldr	r3, [r7, #0]
 801f118:	2b00      	cmp	r3, #0
 801f11a:	d009      	beq.n	801f130 <pbuf_copy+0x118>
 801f11c:	4b20      	ldr	r3, [pc, #128]	; (801f1a0 <pbuf_copy+0x188>)
 801f11e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801f122:	4924      	ldr	r1, [pc, #144]	; (801f1b4 <pbuf_copy+0x19c>)
 801f124:	4820      	ldr	r0, [pc, #128]	; (801f1a8 <pbuf_copy+0x190>)
 801f126:	f003 fb87 	bl	8022838 <iprintf>
 801f12a:	f06f 030f 	mvn.w	r3, #15
 801f12e:	e032      	b.n	801f196 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801f130:	683b      	ldr	r3, [r7, #0]
 801f132:	2b00      	cmp	r3, #0
 801f134:	d013      	beq.n	801f15e <pbuf_copy+0x146>
 801f136:	683b      	ldr	r3, [r7, #0]
 801f138:	895a      	ldrh	r2, [r3, #10]
 801f13a:	683b      	ldr	r3, [r7, #0]
 801f13c:	891b      	ldrh	r3, [r3, #8]
 801f13e:	429a      	cmp	r2, r3
 801f140:	d10d      	bne.n	801f15e <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f142:	683b      	ldr	r3, [r7, #0]
 801f144:	681b      	ldr	r3, [r3, #0]
 801f146:	2b00      	cmp	r3, #0
 801f148:	d009      	beq.n	801f15e <pbuf_copy+0x146>
 801f14a:	4b15      	ldr	r3, [pc, #84]	; (801f1a0 <pbuf_copy+0x188>)
 801f14c:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801f150:	4919      	ldr	r1, [pc, #100]	; (801f1b8 <pbuf_copy+0x1a0>)
 801f152:	4815      	ldr	r0, [pc, #84]	; (801f1a8 <pbuf_copy+0x190>)
 801f154:	f003 fb70 	bl	8022838 <iprintf>
 801f158:	f06f 0305 	mvn.w	r3, #5
 801f15c:	e01b      	b.n	801f196 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801f15e:	687b      	ldr	r3, [r7, #4]
 801f160:	2b00      	cmp	r3, #0
 801f162:	d013      	beq.n	801f18c <pbuf_copy+0x174>
 801f164:	687b      	ldr	r3, [r7, #4]
 801f166:	895a      	ldrh	r2, [r3, #10]
 801f168:	687b      	ldr	r3, [r7, #4]
 801f16a:	891b      	ldrh	r3, [r3, #8]
 801f16c:	429a      	cmp	r2, r3
 801f16e:	d10d      	bne.n	801f18c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801f170:	687b      	ldr	r3, [r7, #4]
 801f172:	681b      	ldr	r3, [r3, #0]
 801f174:	2b00      	cmp	r3, #0
 801f176:	d009      	beq.n	801f18c <pbuf_copy+0x174>
 801f178:	4b09      	ldr	r3, [pc, #36]	; (801f1a0 <pbuf_copy+0x188>)
 801f17a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801f17e:	490e      	ldr	r1, [pc, #56]	; (801f1b8 <pbuf_copy+0x1a0>)
 801f180:	4809      	ldr	r0, [pc, #36]	; (801f1a8 <pbuf_copy+0x190>)
 801f182:	f003 fb59 	bl	8022838 <iprintf>
 801f186:	f06f 0305 	mvn.w	r3, #5
 801f18a:	e004      	b.n	801f196 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801f18c:	683b      	ldr	r3, [r7, #0]
 801f18e:	2b00      	cmp	r3, #0
 801f190:	f47f af61 	bne.w	801f056 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801f194:	2300      	movs	r3, #0
}
 801f196:	4618      	mov	r0, r3
 801f198:	3718      	adds	r7, #24
 801f19a:	46bd      	mov	sp, r7
 801f19c:	bd80      	pop	{r7, pc}
 801f19e:	bf00      	nop
 801f1a0:	08027b0c 	.word	0x08027b0c
 801f1a4:	08027db4 	.word	0x08027db4
 801f1a8:	08027b6c 	.word	0x08027b6c
 801f1ac:	08027de4 	.word	0x08027de4
 801f1b0:	08027dfc 	.word	0x08027dfc
 801f1b4:	08027e18 	.word	0x08027e18
 801f1b8:	08027e28 	.word	0x08027e28

0801f1bc <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801f1bc:	b580      	push	{r7, lr}
 801f1be:	b088      	sub	sp, #32
 801f1c0:	af00      	add	r7, sp, #0
 801f1c2:	60f8      	str	r0, [r7, #12]
 801f1c4:	60b9      	str	r1, [r7, #8]
 801f1c6:	4613      	mov	r3, r2
 801f1c8:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801f1ca:	88fb      	ldrh	r3, [r7, #6]
 801f1cc:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801f1ce:	2300      	movs	r3, #0
 801f1d0:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801f1d2:	68fb      	ldr	r3, [r7, #12]
 801f1d4:	2b00      	cmp	r3, #0
 801f1d6:	d109      	bne.n	801f1ec <pbuf_take+0x30>
 801f1d8:	4b3a      	ldr	r3, [pc, #232]	; (801f2c4 <pbuf_take+0x108>)
 801f1da:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801f1de:	493a      	ldr	r1, [pc, #232]	; (801f2c8 <pbuf_take+0x10c>)
 801f1e0:	483a      	ldr	r0, [pc, #232]	; (801f2cc <pbuf_take+0x110>)
 801f1e2:	f003 fb29 	bl	8022838 <iprintf>
 801f1e6:	f06f 030f 	mvn.w	r3, #15
 801f1ea:	e067      	b.n	801f2bc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801f1ec:	68bb      	ldr	r3, [r7, #8]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d109      	bne.n	801f206 <pbuf_take+0x4a>
 801f1f2:	4b34      	ldr	r3, [pc, #208]	; (801f2c4 <pbuf_take+0x108>)
 801f1f4:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801f1f8:	4935      	ldr	r1, [pc, #212]	; (801f2d0 <pbuf_take+0x114>)
 801f1fa:	4834      	ldr	r0, [pc, #208]	; (801f2cc <pbuf_take+0x110>)
 801f1fc:	f003 fb1c 	bl	8022838 <iprintf>
 801f200:	f06f 030f 	mvn.w	r3, #15
 801f204:	e05a      	b.n	801f2bc <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	891b      	ldrh	r3, [r3, #8]
 801f20a:	88fa      	ldrh	r2, [r7, #6]
 801f20c:	429a      	cmp	r2, r3
 801f20e:	d909      	bls.n	801f224 <pbuf_take+0x68>
 801f210:	4b2c      	ldr	r3, [pc, #176]	; (801f2c4 <pbuf_take+0x108>)
 801f212:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801f216:	492f      	ldr	r1, [pc, #188]	; (801f2d4 <pbuf_take+0x118>)
 801f218:	482c      	ldr	r0, [pc, #176]	; (801f2cc <pbuf_take+0x110>)
 801f21a:	f003 fb0d 	bl	8022838 <iprintf>
 801f21e:	f04f 33ff 	mov.w	r3, #4294967295
 801f222:	e04b      	b.n	801f2bc <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801f224:	68fb      	ldr	r3, [r7, #12]
 801f226:	2b00      	cmp	r3, #0
 801f228:	d007      	beq.n	801f23a <pbuf_take+0x7e>
 801f22a:	68bb      	ldr	r3, [r7, #8]
 801f22c:	2b00      	cmp	r3, #0
 801f22e:	d004      	beq.n	801f23a <pbuf_take+0x7e>
 801f230:	68fb      	ldr	r3, [r7, #12]
 801f232:	891b      	ldrh	r3, [r3, #8]
 801f234:	88fa      	ldrh	r2, [r7, #6]
 801f236:	429a      	cmp	r2, r3
 801f238:	d902      	bls.n	801f240 <pbuf_take+0x84>
    return ERR_ARG;
 801f23a:	f06f 030f 	mvn.w	r3, #15
 801f23e:	e03d      	b.n	801f2bc <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f240:	68fb      	ldr	r3, [r7, #12]
 801f242:	61fb      	str	r3, [r7, #28]
 801f244:	e028      	b.n	801f298 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801f246:	69fb      	ldr	r3, [r7, #28]
 801f248:	2b00      	cmp	r3, #0
 801f24a:	d106      	bne.n	801f25a <pbuf_take+0x9e>
 801f24c:	4b1d      	ldr	r3, [pc, #116]	; (801f2c4 <pbuf_take+0x108>)
 801f24e:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801f252:	4921      	ldr	r1, [pc, #132]	; (801f2d8 <pbuf_take+0x11c>)
 801f254:	481d      	ldr	r0, [pc, #116]	; (801f2cc <pbuf_take+0x110>)
 801f256:	f003 faef 	bl	8022838 <iprintf>
    buf_copy_len = total_copy_len;
 801f25a:	697b      	ldr	r3, [r7, #20]
 801f25c:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801f25e:	69fb      	ldr	r3, [r7, #28]
 801f260:	895b      	ldrh	r3, [r3, #10]
 801f262:	461a      	mov	r2, r3
 801f264:	69bb      	ldr	r3, [r7, #24]
 801f266:	4293      	cmp	r3, r2
 801f268:	d902      	bls.n	801f270 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801f26a:	69fb      	ldr	r3, [r7, #28]
 801f26c:	895b      	ldrh	r3, [r3, #10]
 801f26e:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801f270:	69fb      	ldr	r3, [r7, #28]
 801f272:	6858      	ldr	r0, [r3, #4]
 801f274:	68ba      	ldr	r2, [r7, #8]
 801f276:	693b      	ldr	r3, [r7, #16]
 801f278:	4413      	add	r3, r2
 801f27a:	69ba      	ldr	r2, [r7, #24]
 801f27c:	4619      	mov	r1, r3
 801f27e:	f003 f9cb 	bl	8022618 <memcpy>
    total_copy_len -= buf_copy_len;
 801f282:	697a      	ldr	r2, [r7, #20]
 801f284:	69bb      	ldr	r3, [r7, #24]
 801f286:	1ad3      	subs	r3, r2, r3
 801f288:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801f28a:	693a      	ldr	r2, [r7, #16]
 801f28c:	69bb      	ldr	r3, [r7, #24]
 801f28e:	4413      	add	r3, r2
 801f290:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801f292:	69fb      	ldr	r3, [r7, #28]
 801f294:	681b      	ldr	r3, [r3, #0]
 801f296:	61fb      	str	r3, [r7, #28]
 801f298:	697b      	ldr	r3, [r7, #20]
 801f29a:	2b00      	cmp	r3, #0
 801f29c:	d1d3      	bne.n	801f246 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801f29e:	697b      	ldr	r3, [r7, #20]
 801f2a0:	2b00      	cmp	r3, #0
 801f2a2:	d103      	bne.n	801f2ac <pbuf_take+0xf0>
 801f2a4:	88fb      	ldrh	r3, [r7, #6]
 801f2a6:	693a      	ldr	r2, [r7, #16]
 801f2a8:	429a      	cmp	r2, r3
 801f2aa:	d006      	beq.n	801f2ba <pbuf_take+0xfe>
 801f2ac:	4b05      	ldr	r3, [pc, #20]	; (801f2c4 <pbuf_take+0x108>)
 801f2ae:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801f2b2:	490a      	ldr	r1, [pc, #40]	; (801f2dc <pbuf_take+0x120>)
 801f2b4:	4805      	ldr	r0, [pc, #20]	; (801f2cc <pbuf_take+0x110>)
 801f2b6:	f003 fabf 	bl	8022838 <iprintf>
  return ERR_OK;
 801f2ba:	2300      	movs	r3, #0
}
 801f2bc:	4618      	mov	r0, r3
 801f2be:	3720      	adds	r7, #32
 801f2c0:	46bd      	mov	sp, r7
 801f2c2:	bd80      	pop	{r7, pc}
 801f2c4:	08027b0c 	.word	0x08027b0c
 801f2c8:	08027ee4 	.word	0x08027ee4
 801f2cc:	08027b6c 	.word	0x08027b6c
 801f2d0:	08027efc 	.word	0x08027efc
 801f2d4:	08027f18 	.word	0x08027f18
 801f2d8:	08027f38 	.word	0x08027f38
 801f2dc:	08027f50 	.word	0x08027f50

0801f2e0 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801f2e0:	b580      	push	{r7, lr}
 801f2e2:	b084      	sub	sp, #16
 801f2e4:	af00      	add	r7, sp, #0
 801f2e6:	4603      	mov	r3, r0
 801f2e8:	603a      	str	r2, [r7, #0]
 801f2ea:	71fb      	strb	r3, [r7, #7]
 801f2ec:	460b      	mov	r3, r1
 801f2ee:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801f2f0:	683b      	ldr	r3, [r7, #0]
 801f2f2:	8919      	ldrh	r1, [r3, #8]
 801f2f4:	88ba      	ldrh	r2, [r7, #4]
 801f2f6:	79fb      	ldrb	r3, [r7, #7]
 801f2f8:	4618      	mov	r0, r3
 801f2fa:	f7ff fa83 	bl	801e804 <pbuf_alloc>
 801f2fe:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801f300:	68fb      	ldr	r3, [r7, #12]
 801f302:	2b00      	cmp	r3, #0
 801f304:	d101      	bne.n	801f30a <pbuf_clone+0x2a>
    return NULL;
 801f306:	2300      	movs	r3, #0
 801f308:	e011      	b.n	801f32e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801f30a:	6839      	ldr	r1, [r7, #0]
 801f30c:	68f8      	ldr	r0, [r7, #12]
 801f30e:	f7ff fe83 	bl	801f018 <pbuf_copy>
 801f312:	4603      	mov	r3, r0
 801f314:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801f316:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801f31a:	2b00      	cmp	r3, #0
 801f31c:	d006      	beq.n	801f32c <pbuf_clone+0x4c>
 801f31e:	4b06      	ldr	r3, [pc, #24]	; (801f338 <pbuf_clone+0x58>)
 801f320:	f240 5224 	movw	r2, #1316	; 0x524
 801f324:	4905      	ldr	r1, [pc, #20]	; (801f33c <pbuf_clone+0x5c>)
 801f326:	4806      	ldr	r0, [pc, #24]	; (801f340 <pbuf_clone+0x60>)
 801f328:	f003 fa86 	bl	8022838 <iprintf>
  return q;
 801f32c:	68fb      	ldr	r3, [r7, #12]
}
 801f32e:	4618      	mov	r0, r3
 801f330:	3710      	adds	r7, #16
 801f332:	46bd      	mov	sp, r7
 801f334:	bd80      	pop	{r7, pc}
 801f336:	bf00      	nop
 801f338:	08027b0c 	.word	0x08027b0c
 801f33c:	08027f80 	.word	0x08027f80
 801f340:	08027b6c 	.word	0x08027b6c

0801f344 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f344:	b580      	push	{r7, lr}
 801f346:	b086      	sub	sp, #24
 801f348:	af00      	add	r7, sp, #0
 801f34a:	60f8      	str	r0, [r7, #12]
 801f34c:	60b9      	str	r1, [r7, #8]
 801f34e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f350:	2003      	movs	r0, #3
 801f352:	f7fe fdb9 	bl	801dec8 <memp_malloc>
 801f356:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f358:	693b      	ldr	r3, [r7, #16]
 801f35a:	2b00      	cmp	r3, #0
 801f35c:	d109      	bne.n	801f372 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f35e:	693b      	ldr	r3, [r7, #16]
 801f360:	2b00      	cmp	r3, #0
 801f362:	d151      	bne.n	801f408 <sys_timeout_abs+0xc4>
 801f364:	4b2a      	ldr	r3, [pc, #168]	; (801f410 <sys_timeout_abs+0xcc>)
 801f366:	22be      	movs	r2, #190	; 0xbe
 801f368:	492a      	ldr	r1, [pc, #168]	; (801f414 <sys_timeout_abs+0xd0>)
 801f36a:	482b      	ldr	r0, [pc, #172]	; (801f418 <sys_timeout_abs+0xd4>)
 801f36c:	f003 fa64 	bl	8022838 <iprintf>
    return;
 801f370:	e04a      	b.n	801f408 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f372:	693b      	ldr	r3, [r7, #16]
 801f374:	2200      	movs	r2, #0
 801f376:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f378:	693b      	ldr	r3, [r7, #16]
 801f37a:	68ba      	ldr	r2, [r7, #8]
 801f37c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f37e:	693b      	ldr	r3, [r7, #16]
 801f380:	687a      	ldr	r2, [r7, #4]
 801f382:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f384:	693b      	ldr	r3, [r7, #16]
 801f386:	68fa      	ldr	r2, [r7, #12]
 801f388:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f38a:	4b24      	ldr	r3, [pc, #144]	; (801f41c <sys_timeout_abs+0xd8>)
 801f38c:	681b      	ldr	r3, [r3, #0]
 801f38e:	2b00      	cmp	r3, #0
 801f390:	d103      	bne.n	801f39a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f392:	4a22      	ldr	r2, [pc, #136]	; (801f41c <sys_timeout_abs+0xd8>)
 801f394:	693b      	ldr	r3, [r7, #16]
 801f396:	6013      	str	r3, [r2, #0]
    return;
 801f398:	e037      	b.n	801f40a <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f39a:	693b      	ldr	r3, [r7, #16]
 801f39c:	685a      	ldr	r2, [r3, #4]
 801f39e:	4b1f      	ldr	r3, [pc, #124]	; (801f41c <sys_timeout_abs+0xd8>)
 801f3a0:	681b      	ldr	r3, [r3, #0]
 801f3a2:	685b      	ldr	r3, [r3, #4]
 801f3a4:	1ad3      	subs	r3, r2, r3
 801f3a6:	0fdb      	lsrs	r3, r3, #31
 801f3a8:	f003 0301 	and.w	r3, r3, #1
 801f3ac:	b2db      	uxtb	r3, r3
 801f3ae:	2b00      	cmp	r3, #0
 801f3b0:	d007      	beq.n	801f3c2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f3b2:	4b1a      	ldr	r3, [pc, #104]	; (801f41c <sys_timeout_abs+0xd8>)
 801f3b4:	681a      	ldr	r2, [r3, #0]
 801f3b6:	693b      	ldr	r3, [r7, #16]
 801f3b8:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f3ba:	4a18      	ldr	r2, [pc, #96]	; (801f41c <sys_timeout_abs+0xd8>)
 801f3bc:	693b      	ldr	r3, [r7, #16]
 801f3be:	6013      	str	r3, [r2, #0]
 801f3c0:	e023      	b.n	801f40a <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f3c2:	4b16      	ldr	r3, [pc, #88]	; (801f41c <sys_timeout_abs+0xd8>)
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	617b      	str	r3, [r7, #20]
 801f3c8:	e01a      	b.n	801f400 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f3ca:	697b      	ldr	r3, [r7, #20]
 801f3cc:	681b      	ldr	r3, [r3, #0]
 801f3ce:	2b00      	cmp	r3, #0
 801f3d0:	d00b      	beq.n	801f3ea <sys_timeout_abs+0xa6>
 801f3d2:	693b      	ldr	r3, [r7, #16]
 801f3d4:	685a      	ldr	r2, [r3, #4]
 801f3d6:	697b      	ldr	r3, [r7, #20]
 801f3d8:	681b      	ldr	r3, [r3, #0]
 801f3da:	685b      	ldr	r3, [r3, #4]
 801f3dc:	1ad3      	subs	r3, r2, r3
 801f3de:	0fdb      	lsrs	r3, r3, #31
 801f3e0:	f003 0301 	and.w	r3, r3, #1
 801f3e4:	b2db      	uxtb	r3, r3
 801f3e6:	2b00      	cmp	r3, #0
 801f3e8:	d007      	beq.n	801f3fa <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f3ea:	697b      	ldr	r3, [r7, #20]
 801f3ec:	681a      	ldr	r2, [r3, #0]
 801f3ee:	693b      	ldr	r3, [r7, #16]
 801f3f0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f3f2:	697b      	ldr	r3, [r7, #20]
 801f3f4:	693a      	ldr	r2, [r7, #16]
 801f3f6:	601a      	str	r2, [r3, #0]
        break;
 801f3f8:	e007      	b.n	801f40a <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f3fa:	697b      	ldr	r3, [r7, #20]
 801f3fc:	681b      	ldr	r3, [r3, #0]
 801f3fe:	617b      	str	r3, [r7, #20]
 801f400:	697b      	ldr	r3, [r7, #20]
 801f402:	2b00      	cmp	r3, #0
 801f404:	d1e1      	bne.n	801f3ca <sys_timeout_abs+0x86>
 801f406:	e000      	b.n	801f40a <sys_timeout_abs+0xc6>
    return;
 801f408:	bf00      	nop
      }
    }
  }
}
 801f40a:	3718      	adds	r7, #24
 801f40c:	46bd      	mov	sp, r7
 801f40e:	bd80      	pop	{r7, pc}
 801f410:	08027f94 	.word	0x08027f94
 801f414:	08027fc8 	.word	0x08027fc8
 801f418:	08028008 	.word	0x08028008
 801f41c:	2001419c 	.word	0x2001419c

0801f420 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f420:	b580      	push	{r7, lr}
 801f422:	b086      	sub	sp, #24
 801f424:	af00      	add	r7, sp, #0
 801f426:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f428:	687b      	ldr	r3, [r7, #4]
 801f42a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f42c:	697b      	ldr	r3, [r7, #20]
 801f42e:	685b      	ldr	r3, [r3, #4]
 801f430:	4798      	blx	r3

  now = sys_now();
 801f432:	f7fd fed9 	bl	801d1e8 <sys_now>
 801f436:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f438:	697b      	ldr	r3, [r7, #20]
 801f43a:	681a      	ldr	r2, [r3, #0]
 801f43c:	4b0f      	ldr	r3, [pc, #60]	; (801f47c <lwip_cyclic_timer+0x5c>)
 801f43e:	681b      	ldr	r3, [r3, #0]
 801f440:	4413      	add	r3, r2
 801f442:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f444:	68fa      	ldr	r2, [r7, #12]
 801f446:	693b      	ldr	r3, [r7, #16]
 801f448:	1ad3      	subs	r3, r2, r3
 801f44a:	0fdb      	lsrs	r3, r3, #31
 801f44c:	f003 0301 	and.w	r3, r3, #1
 801f450:	b2db      	uxtb	r3, r3
 801f452:	2b00      	cmp	r3, #0
 801f454:	d009      	beq.n	801f46a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f456:	697b      	ldr	r3, [r7, #20]
 801f458:	681a      	ldr	r2, [r3, #0]
 801f45a:	693b      	ldr	r3, [r7, #16]
 801f45c:	4413      	add	r3, r2
 801f45e:	687a      	ldr	r2, [r7, #4]
 801f460:	4907      	ldr	r1, [pc, #28]	; (801f480 <lwip_cyclic_timer+0x60>)
 801f462:	4618      	mov	r0, r3
 801f464:	f7ff ff6e 	bl	801f344 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f468:	e004      	b.n	801f474 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f46a:	687a      	ldr	r2, [r7, #4]
 801f46c:	4904      	ldr	r1, [pc, #16]	; (801f480 <lwip_cyclic_timer+0x60>)
 801f46e:	68f8      	ldr	r0, [r7, #12]
 801f470:	f7ff ff68 	bl	801f344 <sys_timeout_abs>
}
 801f474:	bf00      	nop
 801f476:	3718      	adds	r7, #24
 801f478:	46bd      	mov	sp, r7
 801f47a:	bd80      	pop	{r7, pc}
 801f47c:	200141a0 	.word	0x200141a0
 801f480:	0801f421 	.word	0x0801f421

0801f484 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f484:	b580      	push	{r7, lr}
 801f486:	b082      	sub	sp, #8
 801f488:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f48a:	2300      	movs	r3, #0
 801f48c:	607b      	str	r3, [r7, #4]
 801f48e:	e00e      	b.n	801f4ae <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f490:	4a0b      	ldr	r2, [pc, #44]	; (801f4c0 <sys_timeouts_init+0x3c>)
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f498:	687b      	ldr	r3, [r7, #4]
 801f49a:	00db      	lsls	r3, r3, #3
 801f49c:	4a08      	ldr	r2, [pc, #32]	; (801f4c0 <sys_timeouts_init+0x3c>)
 801f49e:	4413      	add	r3, r2
 801f4a0:	461a      	mov	r2, r3
 801f4a2:	4908      	ldr	r1, [pc, #32]	; (801f4c4 <sys_timeouts_init+0x40>)
 801f4a4:	f000 f810 	bl	801f4c8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	3301      	adds	r3, #1
 801f4ac:	607b      	str	r3, [r7, #4]
 801f4ae:	687b      	ldr	r3, [r7, #4]
 801f4b0:	2b01      	cmp	r3, #1
 801f4b2:	d9ed      	bls.n	801f490 <sys_timeouts_init+0xc>
  }
}
 801f4b4:	bf00      	nop
 801f4b6:	bf00      	nop
 801f4b8:	3708      	adds	r7, #8
 801f4ba:	46bd      	mov	sp, r7
 801f4bc:	bd80      	pop	{r7, pc}
 801f4be:	bf00      	nop
 801f4c0:	08028f4c 	.word	0x08028f4c
 801f4c4:	0801f421 	.word	0x0801f421

0801f4c8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f4c8:	b580      	push	{r7, lr}
 801f4ca:	b086      	sub	sp, #24
 801f4cc:	af00      	add	r7, sp, #0
 801f4ce:	60f8      	str	r0, [r7, #12]
 801f4d0:	60b9      	str	r1, [r7, #8]
 801f4d2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f4da:	d306      	bcc.n	801f4ea <sys_timeout+0x22>
 801f4dc:	4b0a      	ldr	r3, [pc, #40]	; (801f508 <sys_timeout+0x40>)
 801f4de:	f240 1229 	movw	r2, #297	; 0x129
 801f4e2:	490a      	ldr	r1, [pc, #40]	; (801f50c <sys_timeout+0x44>)
 801f4e4:	480a      	ldr	r0, [pc, #40]	; (801f510 <sys_timeout+0x48>)
 801f4e6:	f003 f9a7 	bl	8022838 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f4ea:	f7fd fe7d 	bl	801d1e8 <sys_now>
 801f4ee:	4602      	mov	r2, r0
 801f4f0:	68fb      	ldr	r3, [r7, #12]
 801f4f2:	4413      	add	r3, r2
 801f4f4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f4f6:	687a      	ldr	r2, [r7, #4]
 801f4f8:	68b9      	ldr	r1, [r7, #8]
 801f4fa:	6978      	ldr	r0, [r7, #20]
 801f4fc:	f7ff ff22 	bl	801f344 <sys_timeout_abs>
#endif
}
 801f500:	bf00      	nop
 801f502:	3718      	adds	r7, #24
 801f504:	46bd      	mov	sp, r7
 801f506:	bd80      	pop	{r7, pc}
 801f508:	08027f94 	.word	0x08027f94
 801f50c:	08028030 	.word	0x08028030
 801f510:	08028008 	.word	0x08028008

0801f514 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f514:	b580      	push	{r7, lr}
 801f516:	b084      	sub	sp, #16
 801f518:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f51a:	f7fd fe65 	bl	801d1e8 <sys_now>
 801f51e:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f520:	4b17      	ldr	r3, [pc, #92]	; (801f580 <sys_check_timeouts+0x6c>)
 801f522:	681b      	ldr	r3, [r3, #0]
 801f524:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f526:	68bb      	ldr	r3, [r7, #8]
 801f528:	2b00      	cmp	r3, #0
 801f52a:	d022      	beq.n	801f572 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f52c:	68bb      	ldr	r3, [r7, #8]
 801f52e:	685b      	ldr	r3, [r3, #4]
 801f530:	68fa      	ldr	r2, [r7, #12]
 801f532:	1ad3      	subs	r3, r2, r3
 801f534:	0fdb      	lsrs	r3, r3, #31
 801f536:	f003 0301 	and.w	r3, r3, #1
 801f53a:	b2db      	uxtb	r3, r3
 801f53c:	2b00      	cmp	r3, #0
 801f53e:	d11a      	bne.n	801f576 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f540:	68bb      	ldr	r3, [r7, #8]
 801f542:	681b      	ldr	r3, [r3, #0]
 801f544:	4a0e      	ldr	r2, [pc, #56]	; (801f580 <sys_check_timeouts+0x6c>)
 801f546:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	689b      	ldr	r3, [r3, #8]
 801f54c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f54e:	68bb      	ldr	r3, [r7, #8]
 801f550:	68db      	ldr	r3, [r3, #12]
 801f552:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f554:	68bb      	ldr	r3, [r7, #8]
 801f556:	685b      	ldr	r3, [r3, #4]
 801f558:	4a0a      	ldr	r2, [pc, #40]	; (801f584 <sys_check_timeouts+0x70>)
 801f55a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f55c:	68b9      	ldr	r1, [r7, #8]
 801f55e:	2003      	movs	r0, #3
 801f560:	f7fe fd22 	bl	801dfa8 <memp_free>
    if (handler != NULL) {
 801f564:	687b      	ldr	r3, [r7, #4]
 801f566:	2b00      	cmp	r3, #0
 801f568:	d0da      	beq.n	801f520 <sys_check_timeouts+0xc>
      handler(arg);
 801f56a:	687b      	ldr	r3, [r7, #4]
 801f56c:	6838      	ldr	r0, [r7, #0]
 801f56e:	4798      	blx	r3
  do {
 801f570:	e7d6      	b.n	801f520 <sys_check_timeouts+0xc>
      return;
 801f572:	bf00      	nop
 801f574:	e000      	b.n	801f578 <sys_check_timeouts+0x64>
      return;
 801f576:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f578:	3710      	adds	r7, #16
 801f57a:	46bd      	mov	sp, r7
 801f57c:	bd80      	pop	{r7, pc}
 801f57e:	bf00      	nop
 801f580:	2001419c 	.word	0x2001419c
 801f584:	200141a0 	.word	0x200141a0

0801f588 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f588:	b580      	push	{r7, lr}
 801f58a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f58c:	f003 f9f8 	bl	8022980 <rand>
 801f590:	4603      	mov	r3, r0
 801f592:	b29b      	uxth	r3, r3
 801f594:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f598:	b29b      	uxth	r3, r3
 801f59a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f59e:	b29a      	uxth	r2, r3
 801f5a0:	4b01      	ldr	r3, [pc, #4]	; (801f5a8 <udp_init+0x20>)
 801f5a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f5a4:	bf00      	nop
 801f5a6:	bd80      	pop	{r7, pc}
 801f5a8:	2000013c 	.word	0x2000013c

0801f5ac <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f5ac:	b480      	push	{r7}
 801f5ae:	b083      	sub	sp, #12
 801f5b0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f5b6:	4b17      	ldr	r3, [pc, #92]	; (801f614 <udp_new_port+0x68>)
 801f5b8:	881b      	ldrh	r3, [r3, #0]
 801f5ba:	1c5a      	adds	r2, r3, #1
 801f5bc:	b291      	uxth	r1, r2
 801f5be:	4a15      	ldr	r2, [pc, #84]	; (801f614 <udp_new_port+0x68>)
 801f5c0:	8011      	strh	r1, [r2, #0]
 801f5c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f5c6:	4293      	cmp	r3, r2
 801f5c8:	d103      	bne.n	801f5d2 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f5ca:	4b12      	ldr	r3, [pc, #72]	; (801f614 <udp_new_port+0x68>)
 801f5cc:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f5d0:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f5d2:	4b11      	ldr	r3, [pc, #68]	; (801f618 <udp_new_port+0x6c>)
 801f5d4:	681b      	ldr	r3, [r3, #0]
 801f5d6:	603b      	str	r3, [r7, #0]
 801f5d8:	e011      	b.n	801f5fe <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f5da:	683b      	ldr	r3, [r7, #0]
 801f5dc:	8a5a      	ldrh	r2, [r3, #18]
 801f5de:	4b0d      	ldr	r3, [pc, #52]	; (801f614 <udp_new_port+0x68>)
 801f5e0:	881b      	ldrh	r3, [r3, #0]
 801f5e2:	429a      	cmp	r2, r3
 801f5e4:	d108      	bne.n	801f5f8 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f5e6:	88fb      	ldrh	r3, [r7, #6]
 801f5e8:	3301      	adds	r3, #1
 801f5ea:	80fb      	strh	r3, [r7, #6]
 801f5ec:	88fb      	ldrh	r3, [r7, #6]
 801f5ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f5f2:	d3e0      	bcc.n	801f5b6 <udp_new_port+0xa>
        return 0;
 801f5f4:	2300      	movs	r3, #0
 801f5f6:	e007      	b.n	801f608 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f5f8:	683b      	ldr	r3, [r7, #0]
 801f5fa:	68db      	ldr	r3, [r3, #12]
 801f5fc:	603b      	str	r3, [r7, #0]
 801f5fe:	683b      	ldr	r3, [r7, #0]
 801f600:	2b00      	cmp	r3, #0
 801f602:	d1ea      	bne.n	801f5da <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f604:	4b03      	ldr	r3, [pc, #12]	; (801f614 <udp_new_port+0x68>)
 801f606:	881b      	ldrh	r3, [r3, #0]
}
 801f608:	4618      	mov	r0, r3
 801f60a:	370c      	adds	r7, #12
 801f60c:	46bd      	mov	sp, r7
 801f60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f612:	4770      	bx	lr
 801f614:	2000013c 	.word	0x2000013c
 801f618:	200141a4 	.word	0x200141a4

0801f61c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f61c:	b580      	push	{r7, lr}
 801f61e:	b084      	sub	sp, #16
 801f620:	af00      	add	r7, sp, #0
 801f622:	60f8      	str	r0, [r7, #12]
 801f624:	60b9      	str	r1, [r7, #8]
 801f626:	4613      	mov	r3, r2
 801f628:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f62a:	68fb      	ldr	r3, [r7, #12]
 801f62c:	2b00      	cmp	r3, #0
 801f62e:	d105      	bne.n	801f63c <udp_input_local_match+0x20>
 801f630:	4b27      	ldr	r3, [pc, #156]	; (801f6d0 <udp_input_local_match+0xb4>)
 801f632:	2287      	movs	r2, #135	; 0x87
 801f634:	4927      	ldr	r1, [pc, #156]	; (801f6d4 <udp_input_local_match+0xb8>)
 801f636:	4828      	ldr	r0, [pc, #160]	; (801f6d8 <udp_input_local_match+0xbc>)
 801f638:	f003 f8fe 	bl	8022838 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f63c:	68bb      	ldr	r3, [r7, #8]
 801f63e:	2b00      	cmp	r3, #0
 801f640:	d105      	bne.n	801f64e <udp_input_local_match+0x32>
 801f642:	4b23      	ldr	r3, [pc, #140]	; (801f6d0 <udp_input_local_match+0xb4>)
 801f644:	2288      	movs	r2, #136	; 0x88
 801f646:	4925      	ldr	r1, [pc, #148]	; (801f6dc <udp_input_local_match+0xc0>)
 801f648:	4823      	ldr	r0, [pc, #140]	; (801f6d8 <udp_input_local_match+0xbc>)
 801f64a:	f003 f8f5 	bl	8022838 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f64e:	68fb      	ldr	r3, [r7, #12]
 801f650:	7a1b      	ldrb	r3, [r3, #8]
 801f652:	2b00      	cmp	r3, #0
 801f654:	d00b      	beq.n	801f66e <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f656:	68fb      	ldr	r3, [r7, #12]
 801f658:	7a1a      	ldrb	r2, [r3, #8]
 801f65a:	4b21      	ldr	r3, [pc, #132]	; (801f6e0 <udp_input_local_match+0xc4>)
 801f65c:	685b      	ldr	r3, [r3, #4]
 801f65e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f662:	3301      	adds	r3, #1
 801f664:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f666:	429a      	cmp	r2, r3
 801f668:	d001      	beq.n	801f66e <udp_input_local_match+0x52>
    return 0;
 801f66a:	2300      	movs	r3, #0
 801f66c:	e02b      	b.n	801f6c6 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f66e:	79fb      	ldrb	r3, [r7, #7]
 801f670:	2b00      	cmp	r3, #0
 801f672:	d018      	beq.n	801f6a6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	2b00      	cmp	r3, #0
 801f678:	d013      	beq.n	801f6a2 <udp_input_local_match+0x86>
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	2b00      	cmp	r3, #0
 801f680:	d00f      	beq.n	801f6a2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f682:	4b17      	ldr	r3, [pc, #92]	; (801f6e0 <udp_input_local_match+0xc4>)
 801f684:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f686:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f68a:	d00a      	beq.n	801f6a2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	681a      	ldr	r2, [r3, #0]
 801f690:	4b13      	ldr	r3, [pc, #76]	; (801f6e0 <udp_input_local_match+0xc4>)
 801f692:	695b      	ldr	r3, [r3, #20]
 801f694:	405a      	eors	r2, r3
 801f696:	68bb      	ldr	r3, [r7, #8]
 801f698:	3308      	adds	r3, #8
 801f69a:	681b      	ldr	r3, [r3, #0]
 801f69c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f69e:	2b00      	cmp	r3, #0
 801f6a0:	d110      	bne.n	801f6c4 <udp_input_local_match+0xa8>
          return 1;
 801f6a2:	2301      	movs	r3, #1
 801f6a4:	e00f      	b.n	801f6c6 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	2b00      	cmp	r3, #0
 801f6aa:	d009      	beq.n	801f6c0 <udp_input_local_match+0xa4>
 801f6ac:	68fb      	ldr	r3, [r7, #12]
 801f6ae:	681b      	ldr	r3, [r3, #0]
 801f6b0:	2b00      	cmp	r3, #0
 801f6b2:	d005      	beq.n	801f6c0 <udp_input_local_match+0xa4>
 801f6b4:	68fb      	ldr	r3, [r7, #12]
 801f6b6:	681a      	ldr	r2, [r3, #0]
 801f6b8:	4b09      	ldr	r3, [pc, #36]	; (801f6e0 <udp_input_local_match+0xc4>)
 801f6ba:	695b      	ldr	r3, [r3, #20]
 801f6bc:	429a      	cmp	r2, r3
 801f6be:	d101      	bne.n	801f6c4 <udp_input_local_match+0xa8>
        return 1;
 801f6c0:	2301      	movs	r3, #1
 801f6c2:	e000      	b.n	801f6c6 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f6c4:	2300      	movs	r3, #0
}
 801f6c6:	4618      	mov	r0, r3
 801f6c8:	3710      	adds	r7, #16
 801f6ca:	46bd      	mov	sp, r7
 801f6cc:	bd80      	pop	{r7, pc}
 801f6ce:	bf00      	nop
 801f6d0:	0802807c 	.word	0x0802807c
 801f6d4:	080280ac 	.word	0x080280ac
 801f6d8:	080280d0 	.word	0x080280d0
 801f6dc:	080280f8 	.word	0x080280f8
 801f6e0:	20010b40 	.word	0x20010b40

0801f6e4 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f6e4:	b590      	push	{r4, r7, lr}
 801f6e6:	b08d      	sub	sp, #52	; 0x34
 801f6e8:	af02      	add	r7, sp, #8
 801f6ea:	6078      	str	r0, [r7, #4]
 801f6ec:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f6ee:	2300      	movs	r3, #0
 801f6f0:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f6f2:	687b      	ldr	r3, [r7, #4]
 801f6f4:	2b00      	cmp	r3, #0
 801f6f6:	d105      	bne.n	801f704 <udp_input+0x20>
 801f6f8:	4b7c      	ldr	r3, [pc, #496]	; (801f8ec <udp_input+0x208>)
 801f6fa:	22cf      	movs	r2, #207	; 0xcf
 801f6fc:	497c      	ldr	r1, [pc, #496]	; (801f8f0 <udp_input+0x20c>)
 801f6fe:	487d      	ldr	r0, [pc, #500]	; (801f8f4 <udp_input+0x210>)
 801f700:	f003 f89a 	bl	8022838 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f704:	683b      	ldr	r3, [r7, #0]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d105      	bne.n	801f716 <udp_input+0x32>
 801f70a:	4b78      	ldr	r3, [pc, #480]	; (801f8ec <udp_input+0x208>)
 801f70c:	22d0      	movs	r2, #208	; 0xd0
 801f70e:	497a      	ldr	r1, [pc, #488]	; (801f8f8 <udp_input+0x214>)
 801f710:	4878      	ldr	r0, [pc, #480]	; (801f8f4 <udp_input+0x210>)
 801f712:	f003 f891 	bl	8022838 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f716:	687b      	ldr	r3, [r7, #4]
 801f718:	895b      	ldrh	r3, [r3, #10]
 801f71a:	2b07      	cmp	r3, #7
 801f71c:	d803      	bhi.n	801f726 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f71e:	6878      	ldr	r0, [r7, #4]
 801f720:	f7ff fb52 	bl	801edc8 <pbuf_free>
    goto end;
 801f724:	e0de      	b.n	801f8e4 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f726:	687b      	ldr	r3, [r7, #4]
 801f728:	685b      	ldr	r3, [r3, #4]
 801f72a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f72c:	4b73      	ldr	r3, [pc, #460]	; (801f8fc <udp_input+0x218>)
 801f72e:	695b      	ldr	r3, [r3, #20]
 801f730:	4a72      	ldr	r2, [pc, #456]	; (801f8fc <udp_input+0x218>)
 801f732:	6812      	ldr	r2, [r2, #0]
 801f734:	4611      	mov	r1, r2
 801f736:	4618      	mov	r0, r3
 801f738:	f001 ff44 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 801f73c:	4603      	mov	r3, r0
 801f73e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f740:	697b      	ldr	r3, [r7, #20]
 801f742:	881b      	ldrh	r3, [r3, #0]
 801f744:	b29b      	uxth	r3, r3
 801f746:	4618      	mov	r0, r3
 801f748:	f7fd ff62 	bl	801d610 <lwip_htons>
 801f74c:	4603      	mov	r3, r0
 801f74e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f750:	697b      	ldr	r3, [r7, #20]
 801f752:	885b      	ldrh	r3, [r3, #2]
 801f754:	b29b      	uxth	r3, r3
 801f756:	4618      	mov	r0, r3
 801f758:	f7fd ff5a 	bl	801d610 <lwip_htons>
 801f75c:	4603      	mov	r3, r0
 801f75e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f760:	2300      	movs	r3, #0
 801f762:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f764:	2300      	movs	r3, #0
 801f766:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f768:	2300      	movs	r3, #0
 801f76a:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f76c:	4b64      	ldr	r3, [pc, #400]	; (801f900 <udp_input+0x21c>)
 801f76e:	681b      	ldr	r3, [r3, #0]
 801f770:	627b      	str	r3, [r7, #36]	; 0x24
 801f772:	e054      	b.n	801f81e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f776:	8a5b      	ldrh	r3, [r3, #18]
 801f778:	89fa      	ldrh	r2, [r7, #14]
 801f77a:	429a      	cmp	r2, r3
 801f77c:	d14a      	bne.n	801f814 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f77e:	7cfb      	ldrb	r3, [r7, #19]
 801f780:	461a      	mov	r2, r3
 801f782:	6839      	ldr	r1, [r7, #0]
 801f784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f786:	f7ff ff49 	bl	801f61c <udp_input_local_match>
 801f78a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f78c:	2b00      	cmp	r3, #0
 801f78e:	d041      	beq.n	801f814 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f792:	7c1b      	ldrb	r3, [r3, #16]
 801f794:	f003 0304 	and.w	r3, r3, #4
 801f798:	2b00      	cmp	r3, #0
 801f79a:	d11d      	bne.n	801f7d8 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f79c:	69fb      	ldr	r3, [r7, #28]
 801f79e:	2b00      	cmp	r3, #0
 801f7a0:	d102      	bne.n	801f7a8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f7a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7a4:	61fb      	str	r3, [r7, #28]
 801f7a6:	e017      	b.n	801f7d8 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f7a8:	7cfb      	ldrb	r3, [r7, #19]
 801f7aa:	2b00      	cmp	r3, #0
 801f7ac:	d014      	beq.n	801f7d8 <udp_input+0xf4>
 801f7ae:	4b53      	ldr	r3, [pc, #332]	; (801f8fc <udp_input+0x218>)
 801f7b0:	695b      	ldr	r3, [r3, #20]
 801f7b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f7b6:	d10f      	bne.n	801f7d8 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f7b8:	69fb      	ldr	r3, [r7, #28]
 801f7ba:	681a      	ldr	r2, [r3, #0]
 801f7bc:	683b      	ldr	r3, [r7, #0]
 801f7be:	3304      	adds	r3, #4
 801f7c0:	681b      	ldr	r3, [r3, #0]
 801f7c2:	429a      	cmp	r2, r3
 801f7c4:	d008      	beq.n	801f7d8 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f7c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7c8:	681a      	ldr	r2, [r3, #0]
 801f7ca:	683b      	ldr	r3, [r7, #0]
 801f7cc:	3304      	adds	r3, #4
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	429a      	cmp	r2, r3
 801f7d2:	d101      	bne.n	801f7d8 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f7d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7d6:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f7d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7da:	8a9b      	ldrh	r3, [r3, #20]
 801f7dc:	8a3a      	ldrh	r2, [r7, #16]
 801f7de:	429a      	cmp	r2, r3
 801f7e0:	d118      	bne.n	801f814 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7e4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f7e6:	2b00      	cmp	r3, #0
 801f7e8:	d005      	beq.n	801f7f6 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7ec:	685a      	ldr	r2, [r3, #4]
 801f7ee:	4b43      	ldr	r3, [pc, #268]	; (801f8fc <udp_input+0x218>)
 801f7f0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f7f2:	429a      	cmp	r2, r3
 801f7f4:	d10e      	bne.n	801f814 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f7f6:	6a3b      	ldr	r3, [r7, #32]
 801f7f8:	2b00      	cmp	r3, #0
 801f7fa:	d014      	beq.n	801f826 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f7fe:	68da      	ldr	r2, [r3, #12]
 801f800:	6a3b      	ldr	r3, [r7, #32]
 801f802:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f804:	4b3e      	ldr	r3, [pc, #248]	; (801f900 <udp_input+0x21c>)
 801f806:	681a      	ldr	r2, [r3, #0]
 801f808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f80a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f80c:	4a3c      	ldr	r2, [pc, #240]	; (801f900 <udp_input+0x21c>)
 801f80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f810:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f812:	e008      	b.n	801f826 <udp_input+0x142>
      }
    }

    prev = pcb;
 801f814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f816:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f81a:	68db      	ldr	r3, [r3, #12]
 801f81c:	627b      	str	r3, [r7, #36]	; 0x24
 801f81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f820:	2b00      	cmp	r3, #0
 801f822:	d1a7      	bne.n	801f774 <udp_input+0x90>
 801f824:	e000      	b.n	801f828 <udp_input+0x144>
        break;
 801f826:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f82a:	2b00      	cmp	r3, #0
 801f82c:	d101      	bne.n	801f832 <udp_input+0x14e>
    pcb = uncon_pcb;
 801f82e:	69fb      	ldr	r3, [r7, #28]
 801f830:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f834:	2b00      	cmp	r3, #0
 801f836:	d002      	beq.n	801f83e <udp_input+0x15a>
    for_us = 1;
 801f838:	2301      	movs	r3, #1
 801f83a:	76fb      	strb	r3, [r7, #27]
 801f83c:	e00a      	b.n	801f854 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f83e:	683b      	ldr	r3, [r7, #0]
 801f840:	3304      	adds	r3, #4
 801f842:	681a      	ldr	r2, [r3, #0]
 801f844:	4b2d      	ldr	r3, [pc, #180]	; (801f8fc <udp_input+0x218>)
 801f846:	695b      	ldr	r3, [r3, #20]
 801f848:	429a      	cmp	r2, r3
 801f84a:	bf0c      	ite	eq
 801f84c:	2301      	moveq	r3, #1
 801f84e:	2300      	movne	r3, #0
 801f850:	b2db      	uxtb	r3, r3
 801f852:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f854:	7efb      	ldrb	r3, [r7, #27]
 801f856:	2b00      	cmp	r3, #0
 801f858:	d041      	beq.n	801f8de <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f85a:	2108      	movs	r1, #8
 801f85c:	6878      	ldr	r0, [r7, #4]
 801f85e:	f7ff fa2d 	bl	801ecbc <pbuf_remove_header>
 801f862:	4603      	mov	r3, r0
 801f864:	2b00      	cmp	r3, #0
 801f866:	d00a      	beq.n	801f87e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f868:	4b20      	ldr	r3, [pc, #128]	; (801f8ec <udp_input+0x208>)
 801f86a:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f86e:	4925      	ldr	r1, [pc, #148]	; (801f904 <udp_input+0x220>)
 801f870:	4820      	ldr	r0, [pc, #128]	; (801f8f4 <udp_input+0x210>)
 801f872:	f002 ffe1 	bl	8022838 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f876:	6878      	ldr	r0, [r7, #4]
 801f878:	f7ff faa6 	bl	801edc8 <pbuf_free>
      goto end;
 801f87c:	e032      	b.n	801f8e4 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f87e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f880:	2b00      	cmp	r3, #0
 801f882:	d012      	beq.n	801f8aa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f886:	699b      	ldr	r3, [r3, #24]
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d00a      	beq.n	801f8a2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f88e:	699c      	ldr	r4, [r3, #24]
 801f890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f892:	69d8      	ldr	r0, [r3, #28]
 801f894:	8a3b      	ldrh	r3, [r7, #16]
 801f896:	9300      	str	r3, [sp, #0]
 801f898:	4b1b      	ldr	r3, [pc, #108]	; (801f908 <udp_input+0x224>)
 801f89a:	687a      	ldr	r2, [r7, #4]
 801f89c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f89e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f8a0:	e021      	b.n	801f8e6 <udp_input+0x202>
        pbuf_free(p);
 801f8a2:	6878      	ldr	r0, [r7, #4]
 801f8a4:	f7ff fa90 	bl	801edc8 <pbuf_free>
        goto end;
 801f8a8:	e01c      	b.n	801f8e4 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f8aa:	7cfb      	ldrb	r3, [r7, #19]
 801f8ac:	2b00      	cmp	r3, #0
 801f8ae:	d112      	bne.n	801f8d6 <udp_input+0x1f2>
 801f8b0:	4b12      	ldr	r3, [pc, #72]	; (801f8fc <udp_input+0x218>)
 801f8b2:	695b      	ldr	r3, [r3, #20]
 801f8b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f8b8:	2be0      	cmp	r3, #224	; 0xe0
 801f8ba:	d00c      	beq.n	801f8d6 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f8bc:	4b0f      	ldr	r3, [pc, #60]	; (801f8fc <udp_input+0x218>)
 801f8be:	899b      	ldrh	r3, [r3, #12]
 801f8c0:	3308      	adds	r3, #8
 801f8c2:	b29b      	uxth	r3, r3
 801f8c4:	b21b      	sxth	r3, r3
 801f8c6:	4619      	mov	r1, r3
 801f8c8:	6878      	ldr	r0, [r7, #4]
 801f8ca:	f7ff fa6a 	bl	801eda2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f8ce:	2103      	movs	r1, #3
 801f8d0:	6878      	ldr	r0, [r7, #4]
 801f8d2:	f001 fb53 	bl	8020f7c <icmp_dest_unreach>
      pbuf_free(p);
 801f8d6:	6878      	ldr	r0, [r7, #4]
 801f8d8:	f7ff fa76 	bl	801edc8 <pbuf_free>
  return;
 801f8dc:	e003      	b.n	801f8e6 <udp_input+0x202>
    pbuf_free(p);
 801f8de:	6878      	ldr	r0, [r7, #4]
 801f8e0:	f7ff fa72 	bl	801edc8 <pbuf_free>
  return;
 801f8e4:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f8e6:	372c      	adds	r7, #44	; 0x2c
 801f8e8:	46bd      	mov	sp, r7
 801f8ea:	bd90      	pop	{r4, r7, pc}
 801f8ec:	0802807c 	.word	0x0802807c
 801f8f0:	08028120 	.word	0x08028120
 801f8f4:	080280d0 	.word	0x080280d0
 801f8f8:	08028138 	.word	0x08028138
 801f8fc:	20010b40 	.word	0x20010b40
 801f900:	200141a4 	.word	0x200141a4
 801f904:	08028154 	.word	0x08028154
 801f908:	20010b50 	.word	0x20010b50

0801f90c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f90c:	b580      	push	{r7, lr}
 801f90e:	b088      	sub	sp, #32
 801f910:	af02      	add	r7, sp, #8
 801f912:	60f8      	str	r0, [r7, #12]
 801f914:	60b9      	str	r1, [r7, #8]
 801f916:	607a      	str	r2, [r7, #4]
 801f918:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f91a:	68fb      	ldr	r3, [r7, #12]
 801f91c:	2b00      	cmp	r3, #0
 801f91e:	d109      	bne.n	801f934 <udp_sendto+0x28>
 801f920:	4b23      	ldr	r3, [pc, #140]	; (801f9b0 <udp_sendto+0xa4>)
 801f922:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f926:	4923      	ldr	r1, [pc, #140]	; (801f9b4 <udp_sendto+0xa8>)
 801f928:	4823      	ldr	r0, [pc, #140]	; (801f9b8 <udp_sendto+0xac>)
 801f92a:	f002 ff85 	bl	8022838 <iprintf>
 801f92e:	f06f 030f 	mvn.w	r3, #15
 801f932:	e038      	b.n	801f9a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f934:	68bb      	ldr	r3, [r7, #8]
 801f936:	2b00      	cmp	r3, #0
 801f938:	d109      	bne.n	801f94e <udp_sendto+0x42>
 801f93a:	4b1d      	ldr	r3, [pc, #116]	; (801f9b0 <udp_sendto+0xa4>)
 801f93c:	f240 2219 	movw	r2, #537	; 0x219
 801f940:	491e      	ldr	r1, [pc, #120]	; (801f9bc <udp_sendto+0xb0>)
 801f942:	481d      	ldr	r0, [pc, #116]	; (801f9b8 <udp_sendto+0xac>)
 801f944:	f002 ff78 	bl	8022838 <iprintf>
 801f948:	f06f 030f 	mvn.w	r3, #15
 801f94c:	e02b      	b.n	801f9a6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f94e:	687b      	ldr	r3, [r7, #4]
 801f950:	2b00      	cmp	r3, #0
 801f952:	d109      	bne.n	801f968 <udp_sendto+0x5c>
 801f954:	4b16      	ldr	r3, [pc, #88]	; (801f9b0 <udp_sendto+0xa4>)
 801f956:	f240 221a 	movw	r2, #538	; 0x21a
 801f95a:	4919      	ldr	r1, [pc, #100]	; (801f9c0 <udp_sendto+0xb4>)
 801f95c:	4816      	ldr	r0, [pc, #88]	; (801f9b8 <udp_sendto+0xac>)
 801f95e:	f002 ff6b 	bl	8022838 <iprintf>
 801f962:	f06f 030f 	mvn.w	r3, #15
 801f966:	e01e      	b.n	801f9a6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f968:	68fb      	ldr	r3, [r7, #12]
 801f96a:	7a1b      	ldrb	r3, [r3, #8]
 801f96c:	2b00      	cmp	r3, #0
 801f96e:	d006      	beq.n	801f97e <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	7a1b      	ldrb	r3, [r3, #8]
 801f974:	4618      	mov	r0, r3
 801f976:	f7fe fef5 	bl	801e764 <netif_get_by_index>
 801f97a:	6178      	str	r0, [r7, #20]
 801f97c:	e003      	b.n	801f986 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f97e:	6878      	ldr	r0, [r7, #4]
 801f980:	f001 fb86 	bl	8021090 <ip4_route>
 801f984:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f986:	697b      	ldr	r3, [r7, #20]
 801f988:	2b00      	cmp	r3, #0
 801f98a:	d102      	bne.n	801f992 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f98c:	f06f 0303 	mvn.w	r3, #3
 801f990:	e009      	b.n	801f9a6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f992:	887a      	ldrh	r2, [r7, #2]
 801f994:	697b      	ldr	r3, [r7, #20]
 801f996:	9300      	str	r3, [sp, #0]
 801f998:	4613      	mov	r3, r2
 801f99a:	687a      	ldr	r2, [r7, #4]
 801f99c:	68b9      	ldr	r1, [r7, #8]
 801f99e:	68f8      	ldr	r0, [r7, #12]
 801f9a0:	f000 f810 	bl	801f9c4 <udp_sendto_if>
 801f9a4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f9a6:	4618      	mov	r0, r3
 801f9a8:	3718      	adds	r7, #24
 801f9aa:	46bd      	mov	sp, r7
 801f9ac:	bd80      	pop	{r7, pc}
 801f9ae:	bf00      	nop
 801f9b0:	0802807c 	.word	0x0802807c
 801f9b4:	080281a0 	.word	0x080281a0
 801f9b8:	080280d0 	.word	0x080280d0
 801f9bc:	080281b8 	.word	0x080281b8
 801f9c0:	080281d4 	.word	0x080281d4

0801f9c4 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f9c4:	b580      	push	{r7, lr}
 801f9c6:	b088      	sub	sp, #32
 801f9c8:	af02      	add	r7, sp, #8
 801f9ca:	60f8      	str	r0, [r7, #12]
 801f9cc:	60b9      	str	r1, [r7, #8]
 801f9ce:	607a      	str	r2, [r7, #4]
 801f9d0:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f9d2:	68fb      	ldr	r3, [r7, #12]
 801f9d4:	2b00      	cmp	r3, #0
 801f9d6:	d109      	bne.n	801f9ec <udp_sendto_if+0x28>
 801f9d8:	4b2e      	ldr	r3, [pc, #184]	; (801fa94 <udp_sendto_if+0xd0>)
 801f9da:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f9de:	492e      	ldr	r1, [pc, #184]	; (801fa98 <udp_sendto_if+0xd4>)
 801f9e0:	482e      	ldr	r0, [pc, #184]	; (801fa9c <udp_sendto_if+0xd8>)
 801f9e2:	f002 ff29 	bl	8022838 <iprintf>
 801f9e6:	f06f 030f 	mvn.w	r3, #15
 801f9ea:	e04f      	b.n	801fa8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f9ec:	68bb      	ldr	r3, [r7, #8]
 801f9ee:	2b00      	cmp	r3, #0
 801f9f0:	d109      	bne.n	801fa06 <udp_sendto_if+0x42>
 801f9f2:	4b28      	ldr	r3, [pc, #160]	; (801fa94 <udp_sendto_if+0xd0>)
 801f9f4:	f240 2281 	movw	r2, #641	; 0x281
 801f9f8:	4929      	ldr	r1, [pc, #164]	; (801faa0 <udp_sendto_if+0xdc>)
 801f9fa:	4828      	ldr	r0, [pc, #160]	; (801fa9c <udp_sendto_if+0xd8>)
 801f9fc:	f002 ff1c 	bl	8022838 <iprintf>
 801fa00:	f06f 030f 	mvn.w	r3, #15
 801fa04:	e042      	b.n	801fa8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fa06:	687b      	ldr	r3, [r7, #4]
 801fa08:	2b00      	cmp	r3, #0
 801fa0a:	d109      	bne.n	801fa20 <udp_sendto_if+0x5c>
 801fa0c:	4b21      	ldr	r3, [pc, #132]	; (801fa94 <udp_sendto_if+0xd0>)
 801fa0e:	f240 2282 	movw	r2, #642	; 0x282
 801fa12:	4924      	ldr	r1, [pc, #144]	; (801faa4 <udp_sendto_if+0xe0>)
 801fa14:	4821      	ldr	r0, [pc, #132]	; (801fa9c <udp_sendto_if+0xd8>)
 801fa16:	f002 ff0f 	bl	8022838 <iprintf>
 801fa1a:	f06f 030f 	mvn.w	r3, #15
 801fa1e:	e035      	b.n	801fa8c <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fa20:	6a3b      	ldr	r3, [r7, #32]
 801fa22:	2b00      	cmp	r3, #0
 801fa24:	d109      	bne.n	801fa3a <udp_sendto_if+0x76>
 801fa26:	4b1b      	ldr	r3, [pc, #108]	; (801fa94 <udp_sendto_if+0xd0>)
 801fa28:	f240 2283 	movw	r2, #643	; 0x283
 801fa2c:	491e      	ldr	r1, [pc, #120]	; (801faa8 <udp_sendto_if+0xe4>)
 801fa2e:	481b      	ldr	r0, [pc, #108]	; (801fa9c <udp_sendto_if+0xd8>)
 801fa30:	f002 ff02 	bl	8022838 <iprintf>
 801fa34:	f06f 030f 	mvn.w	r3, #15
 801fa38:	e028      	b.n	801fa8c <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa3a:	68fb      	ldr	r3, [r7, #12]
 801fa3c:	2b00      	cmp	r3, #0
 801fa3e:	d009      	beq.n	801fa54 <udp_sendto_if+0x90>
 801fa40:	68fb      	ldr	r3, [r7, #12]
 801fa42:	681b      	ldr	r3, [r3, #0]
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	d005      	beq.n	801fa54 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fa48:	68fb      	ldr	r3, [r7, #12]
 801fa4a:	681b      	ldr	r3, [r3, #0]
 801fa4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa50:	2be0      	cmp	r3, #224	; 0xe0
 801fa52:	d103      	bne.n	801fa5c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fa54:	6a3b      	ldr	r3, [r7, #32]
 801fa56:	3304      	adds	r3, #4
 801fa58:	617b      	str	r3, [r7, #20]
 801fa5a:	e00b      	b.n	801fa74 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fa5c:	68fb      	ldr	r3, [r7, #12]
 801fa5e:	681a      	ldr	r2, [r3, #0]
 801fa60:	6a3b      	ldr	r3, [r7, #32]
 801fa62:	3304      	adds	r3, #4
 801fa64:	681b      	ldr	r3, [r3, #0]
 801fa66:	429a      	cmp	r2, r3
 801fa68:	d002      	beq.n	801fa70 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801fa6a:	f06f 0303 	mvn.w	r3, #3
 801fa6e:	e00d      	b.n	801fa8c <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fa70:	68fb      	ldr	r3, [r7, #12]
 801fa72:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fa74:	887a      	ldrh	r2, [r7, #2]
 801fa76:	697b      	ldr	r3, [r7, #20]
 801fa78:	9301      	str	r3, [sp, #4]
 801fa7a:	6a3b      	ldr	r3, [r7, #32]
 801fa7c:	9300      	str	r3, [sp, #0]
 801fa7e:	4613      	mov	r3, r2
 801fa80:	687a      	ldr	r2, [r7, #4]
 801fa82:	68b9      	ldr	r1, [r7, #8]
 801fa84:	68f8      	ldr	r0, [r7, #12]
 801fa86:	f000 f811 	bl	801faac <udp_sendto_if_src>
 801fa8a:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fa8c:	4618      	mov	r0, r3
 801fa8e:	3718      	adds	r7, #24
 801fa90:	46bd      	mov	sp, r7
 801fa92:	bd80      	pop	{r7, pc}
 801fa94:	0802807c 	.word	0x0802807c
 801fa98:	080281f0 	.word	0x080281f0
 801fa9c:	080280d0 	.word	0x080280d0
 801faa0:	0802820c 	.word	0x0802820c
 801faa4:	08028228 	.word	0x08028228
 801faa8:	08028248 	.word	0x08028248

0801faac <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801faac:	b580      	push	{r7, lr}
 801faae:	b08c      	sub	sp, #48	; 0x30
 801fab0:	af04      	add	r7, sp, #16
 801fab2:	60f8      	str	r0, [r7, #12]
 801fab4:	60b9      	str	r1, [r7, #8]
 801fab6:	607a      	str	r2, [r7, #4]
 801fab8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801faba:	68fb      	ldr	r3, [r7, #12]
 801fabc:	2b00      	cmp	r3, #0
 801fabe:	d109      	bne.n	801fad4 <udp_sendto_if_src+0x28>
 801fac0:	4b65      	ldr	r3, [pc, #404]	; (801fc58 <udp_sendto_if_src+0x1ac>)
 801fac2:	f240 22d1 	movw	r2, #721	; 0x2d1
 801fac6:	4965      	ldr	r1, [pc, #404]	; (801fc5c <udp_sendto_if_src+0x1b0>)
 801fac8:	4865      	ldr	r0, [pc, #404]	; (801fc60 <udp_sendto_if_src+0x1b4>)
 801faca:	f002 feb5 	bl	8022838 <iprintf>
 801face:	f06f 030f 	mvn.w	r3, #15
 801fad2:	e0bc      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801fad4:	68bb      	ldr	r3, [r7, #8]
 801fad6:	2b00      	cmp	r3, #0
 801fad8:	d109      	bne.n	801faee <udp_sendto_if_src+0x42>
 801fada:	4b5f      	ldr	r3, [pc, #380]	; (801fc58 <udp_sendto_if_src+0x1ac>)
 801fadc:	f240 22d2 	movw	r2, #722	; 0x2d2
 801fae0:	4960      	ldr	r1, [pc, #384]	; (801fc64 <udp_sendto_if_src+0x1b8>)
 801fae2:	485f      	ldr	r0, [pc, #380]	; (801fc60 <udp_sendto_if_src+0x1b4>)
 801fae4:	f002 fea8 	bl	8022838 <iprintf>
 801fae8:	f06f 030f 	mvn.w	r3, #15
 801faec:	e0af      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	2b00      	cmp	r3, #0
 801faf2:	d109      	bne.n	801fb08 <udp_sendto_if_src+0x5c>
 801faf4:	4b58      	ldr	r3, [pc, #352]	; (801fc58 <udp_sendto_if_src+0x1ac>)
 801faf6:	f240 22d3 	movw	r2, #723	; 0x2d3
 801fafa:	495b      	ldr	r1, [pc, #364]	; (801fc68 <udp_sendto_if_src+0x1bc>)
 801fafc:	4858      	ldr	r0, [pc, #352]	; (801fc60 <udp_sendto_if_src+0x1b4>)
 801fafe:	f002 fe9b 	bl	8022838 <iprintf>
 801fb02:	f06f 030f 	mvn.w	r3, #15
 801fb06:	e0a2      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801fb08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801fb0a:	2b00      	cmp	r3, #0
 801fb0c:	d109      	bne.n	801fb22 <udp_sendto_if_src+0x76>
 801fb0e:	4b52      	ldr	r3, [pc, #328]	; (801fc58 <udp_sendto_if_src+0x1ac>)
 801fb10:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801fb14:	4955      	ldr	r1, [pc, #340]	; (801fc6c <udp_sendto_if_src+0x1c0>)
 801fb16:	4852      	ldr	r0, [pc, #328]	; (801fc60 <udp_sendto_if_src+0x1b4>)
 801fb18:	f002 fe8e 	bl	8022838 <iprintf>
 801fb1c:	f06f 030f 	mvn.w	r3, #15
 801fb20:	e095      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801fb22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801fb24:	2b00      	cmp	r3, #0
 801fb26:	d109      	bne.n	801fb3c <udp_sendto_if_src+0x90>
 801fb28:	4b4b      	ldr	r3, [pc, #300]	; (801fc58 <udp_sendto_if_src+0x1ac>)
 801fb2a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801fb2e:	4950      	ldr	r1, [pc, #320]	; (801fc70 <udp_sendto_if_src+0x1c4>)
 801fb30:	484b      	ldr	r0, [pc, #300]	; (801fc60 <udp_sendto_if_src+0x1b4>)
 801fb32:	f002 fe81 	bl	8022838 <iprintf>
 801fb36:	f06f 030f 	mvn.w	r3, #15
 801fb3a:	e088      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801fb3c:	68fb      	ldr	r3, [r7, #12]
 801fb3e:	8a5b      	ldrh	r3, [r3, #18]
 801fb40:	2b00      	cmp	r3, #0
 801fb42:	d10f      	bne.n	801fb64 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801fb44:	68f9      	ldr	r1, [r7, #12]
 801fb46:	68fb      	ldr	r3, [r7, #12]
 801fb48:	8a5b      	ldrh	r3, [r3, #18]
 801fb4a:	461a      	mov	r2, r3
 801fb4c:	68f8      	ldr	r0, [r7, #12]
 801fb4e:	f000 f893 	bl	801fc78 <udp_bind>
 801fb52:	4603      	mov	r3, r0
 801fb54:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801fb56:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fb5a:	2b00      	cmp	r3, #0
 801fb5c:	d002      	beq.n	801fb64 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801fb5e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801fb62:	e074      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801fb64:	68bb      	ldr	r3, [r7, #8]
 801fb66:	891b      	ldrh	r3, [r3, #8]
 801fb68:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fb6c:	4293      	cmp	r3, r2
 801fb6e:	d902      	bls.n	801fb76 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fb70:	f04f 33ff 	mov.w	r3, #4294967295
 801fb74:	e06b      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fb76:	2108      	movs	r1, #8
 801fb78:	68b8      	ldr	r0, [r7, #8]
 801fb7a:	f7ff f88f 	bl	801ec9c <pbuf_add_header>
 801fb7e:	4603      	mov	r3, r0
 801fb80:	2b00      	cmp	r3, #0
 801fb82:	d015      	beq.n	801fbb0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801fb84:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fb88:	2108      	movs	r1, #8
 801fb8a:	2022      	movs	r0, #34	; 0x22
 801fb8c:	f7fe fe3a 	bl	801e804 <pbuf_alloc>
 801fb90:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801fb92:	69fb      	ldr	r3, [r7, #28]
 801fb94:	2b00      	cmp	r3, #0
 801fb96:	d102      	bne.n	801fb9e <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801fb98:	f04f 33ff 	mov.w	r3, #4294967295
 801fb9c:	e057      	b.n	801fc4e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801fb9e:	68bb      	ldr	r3, [r7, #8]
 801fba0:	891b      	ldrh	r3, [r3, #8]
 801fba2:	2b00      	cmp	r3, #0
 801fba4:	d006      	beq.n	801fbb4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801fba6:	68b9      	ldr	r1, [r7, #8]
 801fba8:	69f8      	ldr	r0, [r7, #28]
 801fbaa:	f7ff fa25 	bl	801eff8 <pbuf_chain>
 801fbae:	e001      	b.n	801fbb4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801fbb0:	68bb      	ldr	r3, [r7, #8]
 801fbb2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801fbb4:	69fb      	ldr	r3, [r7, #28]
 801fbb6:	895b      	ldrh	r3, [r3, #10]
 801fbb8:	2b07      	cmp	r3, #7
 801fbba:	d806      	bhi.n	801fbca <udp_sendto_if_src+0x11e>
 801fbbc:	4b26      	ldr	r3, [pc, #152]	; (801fc58 <udp_sendto_if_src+0x1ac>)
 801fbbe:	f240 320d 	movw	r2, #781	; 0x30d
 801fbc2:	492c      	ldr	r1, [pc, #176]	; (801fc74 <udp_sendto_if_src+0x1c8>)
 801fbc4:	4826      	ldr	r0, [pc, #152]	; (801fc60 <udp_sendto_if_src+0x1b4>)
 801fbc6:	f002 fe37 	bl	8022838 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801fbca:	69fb      	ldr	r3, [r7, #28]
 801fbcc:	685b      	ldr	r3, [r3, #4]
 801fbce:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801fbd0:	68fb      	ldr	r3, [r7, #12]
 801fbd2:	8a5b      	ldrh	r3, [r3, #18]
 801fbd4:	4618      	mov	r0, r3
 801fbd6:	f7fd fd1b 	bl	801d610 <lwip_htons>
 801fbda:	4603      	mov	r3, r0
 801fbdc:	461a      	mov	r2, r3
 801fbde:	697b      	ldr	r3, [r7, #20]
 801fbe0:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801fbe2:	887b      	ldrh	r3, [r7, #2]
 801fbe4:	4618      	mov	r0, r3
 801fbe6:	f7fd fd13 	bl	801d610 <lwip_htons>
 801fbea:	4603      	mov	r3, r0
 801fbec:	461a      	mov	r2, r3
 801fbee:	697b      	ldr	r3, [r7, #20]
 801fbf0:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801fbf2:	697b      	ldr	r3, [r7, #20]
 801fbf4:	2200      	movs	r2, #0
 801fbf6:	719a      	strb	r2, [r3, #6]
 801fbf8:	2200      	movs	r2, #0
 801fbfa:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801fbfc:	69fb      	ldr	r3, [r7, #28]
 801fbfe:	891b      	ldrh	r3, [r3, #8]
 801fc00:	4618      	mov	r0, r3
 801fc02:	f7fd fd05 	bl	801d610 <lwip_htons>
 801fc06:	4603      	mov	r3, r0
 801fc08:	461a      	mov	r2, r3
 801fc0a:	697b      	ldr	r3, [r7, #20]
 801fc0c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801fc0e:	2311      	movs	r3, #17
 801fc10:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801fc12:	68fb      	ldr	r3, [r7, #12]
 801fc14:	7adb      	ldrb	r3, [r3, #11]
 801fc16:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801fc18:	68fb      	ldr	r3, [r7, #12]
 801fc1a:	7a9b      	ldrb	r3, [r3, #10]
 801fc1c:	7cb9      	ldrb	r1, [r7, #18]
 801fc1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801fc20:	9202      	str	r2, [sp, #8]
 801fc22:	7cfa      	ldrb	r2, [r7, #19]
 801fc24:	9201      	str	r2, [sp, #4]
 801fc26:	9300      	str	r3, [sp, #0]
 801fc28:	460b      	mov	r3, r1
 801fc2a:	687a      	ldr	r2, [r7, #4]
 801fc2c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801fc2e:	69f8      	ldr	r0, [r7, #28]
 801fc30:	f001 fc0c 	bl	802144c <ip4_output_if_src>
 801fc34:	4603      	mov	r3, r0
 801fc36:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801fc38:	69fa      	ldr	r2, [r7, #28]
 801fc3a:	68bb      	ldr	r3, [r7, #8]
 801fc3c:	429a      	cmp	r2, r3
 801fc3e:	d004      	beq.n	801fc4a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801fc40:	69f8      	ldr	r0, [r7, #28]
 801fc42:	f7ff f8c1 	bl	801edc8 <pbuf_free>
    q = NULL;
 801fc46:	2300      	movs	r3, #0
 801fc48:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801fc4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801fc4e:	4618      	mov	r0, r3
 801fc50:	3720      	adds	r7, #32
 801fc52:	46bd      	mov	sp, r7
 801fc54:	bd80      	pop	{r7, pc}
 801fc56:	bf00      	nop
 801fc58:	0802807c 	.word	0x0802807c
 801fc5c:	08028268 	.word	0x08028268
 801fc60:	080280d0 	.word	0x080280d0
 801fc64:	08028288 	.word	0x08028288
 801fc68:	080282a8 	.word	0x080282a8
 801fc6c:	080282cc 	.word	0x080282cc
 801fc70:	080282f0 	.word	0x080282f0
 801fc74:	08028314 	.word	0x08028314

0801fc78 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801fc78:	b580      	push	{r7, lr}
 801fc7a:	b086      	sub	sp, #24
 801fc7c:	af00      	add	r7, sp, #0
 801fc7e:	60f8      	str	r0, [r7, #12]
 801fc80:	60b9      	str	r1, [r7, #8]
 801fc82:	4613      	mov	r3, r2
 801fc84:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801fc86:	68bb      	ldr	r3, [r7, #8]
 801fc88:	2b00      	cmp	r3, #0
 801fc8a:	d101      	bne.n	801fc90 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801fc8c:	4b39      	ldr	r3, [pc, #228]	; (801fd74 <udp_bind+0xfc>)
 801fc8e:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801fc90:	68fb      	ldr	r3, [r7, #12]
 801fc92:	2b00      	cmp	r3, #0
 801fc94:	d109      	bne.n	801fcaa <udp_bind+0x32>
 801fc96:	4b38      	ldr	r3, [pc, #224]	; (801fd78 <udp_bind+0x100>)
 801fc98:	f240 32b7 	movw	r2, #951	; 0x3b7
 801fc9c:	4937      	ldr	r1, [pc, #220]	; (801fd7c <udp_bind+0x104>)
 801fc9e:	4838      	ldr	r0, [pc, #224]	; (801fd80 <udp_bind+0x108>)
 801fca0:	f002 fdca 	bl	8022838 <iprintf>
 801fca4:	f06f 030f 	mvn.w	r3, #15
 801fca8:	e060      	b.n	801fd6c <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801fcaa:	2300      	movs	r3, #0
 801fcac:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fcae:	4b35      	ldr	r3, [pc, #212]	; (801fd84 <udp_bind+0x10c>)
 801fcb0:	681b      	ldr	r3, [r3, #0]
 801fcb2:	617b      	str	r3, [r7, #20]
 801fcb4:	e009      	b.n	801fcca <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801fcb6:	68fa      	ldr	r2, [r7, #12]
 801fcb8:	697b      	ldr	r3, [r7, #20]
 801fcba:	429a      	cmp	r2, r3
 801fcbc:	d102      	bne.n	801fcc4 <udp_bind+0x4c>
      rebind = 1;
 801fcbe:	2301      	movs	r3, #1
 801fcc0:	74fb      	strb	r3, [r7, #19]
      break;
 801fcc2:	e005      	b.n	801fcd0 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fcc4:	697b      	ldr	r3, [r7, #20]
 801fcc6:	68db      	ldr	r3, [r3, #12]
 801fcc8:	617b      	str	r3, [r7, #20]
 801fcca:	697b      	ldr	r3, [r7, #20]
 801fccc:	2b00      	cmp	r3, #0
 801fcce:	d1f2      	bne.n	801fcb6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801fcd0:	88fb      	ldrh	r3, [r7, #6]
 801fcd2:	2b00      	cmp	r3, #0
 801fcd4:	d109      	bne.n	801fcea <udp_bind+0x72>
    port = udp_new_port();
 801fcd6:	f7ff fc69 	bl	801f5ac <udp_new_port>
 801fcda:	4603      	mov	r3, r0
 801fcdc:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801fcde:	88fb      	ldrh	r3, [r7, #6]
 801fce0:	2b00      	cmp	r3, #0
 801fce2:	d12c      	bne.n	801fd3e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801fce4:	f06f 0307 	mvn.w	r3, #7
 801fce8:	e040      	b.n	801fd6c <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fcea:	4b26      	ldr	r3, [pc, #152]	; (801fd84 <udp_bind+0x10c>)
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	617b      	str	r3, [r7, #20]
 801fcf0:	e022      	b.n	801fd38 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801fcf2:	68fa      	ldr	r2, [r7, #12]
 801fcf4:	697b      	ldr	r3, [r7, #20]
 801fcf6:	429a      	cmp	r2, r3
 801fcf8:	d01b      	beq.n	801fd32 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801fcfa:	697b      	ldr	r3, [r7, #20]
 801fcfc:	8a5b      	ldrh	r3, [r3, #18]
 801fcfe:	88fa      	ldrh	r2, [r7, #6]
 801fd00:	429a      	cmp	r2, r3
 801fd02:	d116      	bne.n	801fd32 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fd04:	697b      	ldr	r3, [r7, #20]
 801fd06:	681a      	ldr	r2, [r3, #0]
 801fd08:	68bb      	ldr	r3, [r7, #8]
 801fd0a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801fd0c:	429a      	cmp	r2, r3
 801fd0e:	d00d      	beq.n	801fd2c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fd10:	68bb      	ldr	r3, [r7, #8]
 801fd12:	2b00      	cmp	r3, #0
 801fd14:	d00a      	beq.n	801fd2c <udp_bind+0xb4>
 801fd16:	68bb      	ldr	r3, [r7, #8]
 801fd18:	681b      	ldr	r3, [r3, #0]
 801fd1a:	2b00      	cmp	r3, #0
 801fd1c:	d006      	beq.n	801fd2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fd1e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801fd20:	2b00      	cmp	r3, #0
 801fd22:	d003      	beq.n	801fd2c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801fd24:	697b      	ldr	r3, [r7, #20]
 801fd26:	681b      	ldr	r3, [r3, #0]
 801fd28:	2b00      	cmp	r3, #0
 801fd2a:	d102      	bne.n	801fd32 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801fd2c:	f06f 0307 	mvn.w	r3, #7
 801fd30:	e01c      	b.n	801fd6c <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801fd32:	697b      	ldr	r3, [r7, #20]
 801fd34:	68db      	ldr	r3, [r3, #12]
 801fd36:	617b      	str	r3, [r7, #20]
 801fd38:	697b      	ldr	r3, [r7, #20]
 801fd3a:	2b00      	cmp	r3, #0
 801fd3c:	d1d9      	bne.n	801fcf2 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801fd3e:	68bb      	ldr	r3, [r7, #8]
 801fd40:	2b00      	cmp	r3, #0
 801fd42:	d002      	beq.n	801fd4a <udp_bind+0xd2>
 801fd44:	68bb      	ldr	r3, [r7, #8]
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	e000      	b.n	801fd4c <udp_bind+0xd4>
 801fd4a:	2300      	movs	r3, #0
 801fd4c:	68fa      	ldr	r2, [r7, #12]
 801fd4e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801fd50:	68fb      	ldr	r3, [r7, #12]
 801fd52:	88fa      	ldrh	r2, [r7, #6]
 801fd54:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801fd56:	7cfb      	ldrb	r3, [r7, #19]
 801fd58:	2b00      	cmp	r3, #0
 801fd5a:	d106      	bne.n	801fd6a <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801fd5c:	4b09      	ldr	r3, [pc, #36]	; (801fd84 <udp_bind+0x10c>)
 801fd5e:	681a      	ldr	r2, [r3, #0]
 801fd60:	68fb      	ldr	r3, [r7, #12]
 801fd62:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801fd64:	4a07      	ldr	r2, [pc, #28]	; (801fd84 <udp_bind+0x10c>)
 801fd66:	68fb      	ldr	r3, [r7, #12]
 801fd68:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801fd6a:	2300      	movs	r3, #0
}
 801fd6c:	4618      	mov	r0, r3
 801fd6e:	3718      	adds	r7, #24
 801fd70:	46bd      	mov	sp, r7
 801fd72:	bd80      	pop	{r7, pc}
 801fd74:	08028f5c 	.word	0x08028f5c
 801fd78:	0802807c 	.word	0x0802807c
 801fd7c:	08028344 	.word	0x08028344
 801fd80:	080280d0 	.word	0x080280d0
 801fd84:	200141a4 	.word	0x200141a4

0801fd88 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801fd88:	b580      	push	{r7, lr}
 801fd8a:	b084      	sub	sp, #16
 801fd8c:	af00      	add	r7, sp, #0
 801fd8e:	60f8      	str	r0, [r7, #12]
 801fd90:	60b9      	str	r1, [r7, #8]
 801fd92:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801fd94:	68fb      	ldr	r3, [r7, #12]
 801fd96:	2b00      	cmp	r3, #0
 801fd98:	d107      	bne.n	801fdaa <udp_recv+0x22>
 801fd9a:	4b08      	ldr	r3, [pc, #32]	; (801fdbc <udp_recv+0x34>)
 801fd9c:	f240 428a 	movw	r2, #1162	; 0x48a
 801fda0:	4907      	ldr	r1, [pc, #28]	; (801fdc0 <udp_recv+0x38>)
 801fda2:	4808      	ldr	r0, [pc, #32]	; (801fdc4 <udp_recv+0x3c>)
 801fda4:	f002 fd48 	bl	8022838 <iprintf>
 801fda8:	e005      	b.n	801fdb6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801fdaa:	68fb      	ldr	r3, [r7, #12]
 801fdac:	68ba      	ldr	r2, [r7, #8]
 801fdae:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801fdb0:	68fb      	ldr	r3, [r7, #12]
 801fdb2:	687a      	ldr	r2, [r7, #4]
 801fdb4:	61da      	str	r2, [r3, #28]
}
 801fdb6:	3710      	adds	r7, #16
 801fdb8:	46bd      	mov	sp, r7
 801fdba:	bd80      	pop	{r7, pc}
 801fdbc:	0802807c 	.word	0x0802807c
 801fdc0:	080283b0 	.word	0x080283b0
 801fdc4:	080280d0 	.word	0x080280d0

0801fdc8 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801fdc8:	b580      	push	{r7, lr}
 801fdca:	b084      	sub	sp, #16
 801fdcc:	af00      	add	r7, sp, #0
 801fdce:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801fdd0:	687b      	ldr	r3, [r7, #4]
 801fdd2:	2b00      	cmp	r3, #0
 801fdd4:	d107      	bne.n	801fde6 <udp_remove+0x1e>
 801fdd6:	4b19      	ldr	r3, [pc, #100]	; (801fe3c <udp_remove+0x74>)
 801fdd8:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801fddc:	4918      	ldr	r1, [pc, #96]	; (801fe40 <udp_remove+0x78>)
 801fdde:	4819      	ldr	r0, [pc, #100]	; (801fe44 <udp_remove+0x7c>)
 801fde0:	f002 fd2a 	bl	8022838 <iprintf>
 801fde4:	e026      	b.n	801fe34 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801fde6:	4b18      	ldr	r3, [pc, #96]	; (801fe48 <udp_remove+0x80>)
 801fde8:	681b      	ldr	r3, [r3, #0]
 801fdea:	687a      	ldr	r2, [r7, #4]
 801fdec:	429a      	cmp	r2, r3
 801fdee:	d105      	bne.n	801fdfc <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801fdf0:	4b15      	ldr	r3, [pc, #84]	; (801fe48 <udp_remove+0x80>)
 801fdf2:	681b      	ldr	r3, [r3, #0]
 801fdf4:	68db      	ldr	r3, [r3, #12]
 801fdf6:	4a14      	ldr	r2, [pc, #80]	; (801fe48 <udp_remove+0x80>)
 801fdf8:	6013      	str	r3, [r2, #0]
 801fdfa:	e017      	b.n	801fe2c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fdfc:	4b12      	ldr	r3, [pc, #72]	; (801fe48 <udp_remove+0x80>)
 801fdfe:	681b      	ldr	r3, [r3, #0]
 801fe00:	60fb      	str	r3, [r7, #12]
 801fe02:	e010      	b.n	801fe26 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801fe04:	68fb      	ldr	r3, [r7, #12]
 801fe06:	68db      	ldr	r3, [r3, #12]
 801fe08:	2b00      	cmp	r3, #0
 801fe0a:	d009      	beq.n	801fe20 <udp_remove+0x58>
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	68db      	ldr	r3, [r3, #12]
 801fe10:	687a      	ldr	r2, [r7, #4]
 801fe12:	429a      	cmp	r2, r3
 801fe14:	d104      	bne.n	801fe20 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	68da      	ldr	r2, [r3, #12]
 801fe1a:	68fb      	ldr	r3, [r7, #12]
 801fe1c:	60da      	str	r2, [r3, #12]
        break;
 801fe1e:	e005      	b.n	801fe2c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801fe20:	68fb      	ldr	r3, [r7, #12]
 801fe22:	68db      	ldr	r3, [r3, #12]
 801fe24:	60fb      	str	r3, [r7, #12]
 801fe26:	68fb      	ldr	r3, [r7, #12]
 801fe28:	2b00      	cmp	r3, #0
 801fe2a:	d1eb      	bne.n	801fe04 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801fe2c:	6879      	ldr	r1, [r7, #4]
 801fe2e:	2000      	movs	r0, #0
 801fe30:	f7fe f8ba 	bl	801dfa8 <memp_free>
}
 801fe34:	3710      	adds	r7, #16
 801fe36:	46bd      	mov	sp, r7
 801fe38:	bd80      	pop	{r7, pc}
 801fe3a:	bf00      	nop
 801fe3c:	0802807c 	.word	0x0802807c
 801fe40:	080283c8 	.word	0x080283c8
 801fe44:	080280d0 	.word	0x080280d0
 801fe48:	200141a4 	.word	0x200141a4

0801fe4c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801fe4c:	b580      	push	{r7, lr}
 801fe4e:	b082      	sub	sp, #8
 801fe50:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801fe52:	2000      	movs	r0, #0
 801fe54:	f7fe f838 	bl	801dec8 <memp_malloc>
 801fe58:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801fe5a:	687b      	ldr	r3, [r7, #4]
 801fe5c:	2b00      	cmp	r3, #0
 801fe5e:	d007      	beq.n	801fe70 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801fe60:	2220      	movs	r2, #32
 801fe62:	2100      	movs	r1, #0
 801fe64:	6878      	ldr	r0, [r7, #4]
 801fe66:	f002 fbff 	bl	8022668 <memset>
    pcb->ttl = UDP_TTL;
 801fe6a:	687b      	ldr	r3, [r7, #4]
 801fe6c:	22ff      	movs	r2, #255	; 0xff
 801fe6e:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801fe70:	687b      	ldr	r3, [r7, #4]
}
 801fe72:	4618      	mov	r0, r3
 801fe74:	3708      	adds	r7, #8
 801fe76:	46bd      	mov	sp, r7
 801fe78:	bd80      	pop	{r7, pc}
	...

0801fe7c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801fe7c:	b480      	push	{r7}
 801fe7e:	b085      	sub	sp, #20
 801fe80:	af00      	add	r7, sp, #0
 801fe82:	6078      	str	r0, [r7, #4]
 801fe84:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801fe86:	687b      	ldr	r3, [r7, #4]
 801fe88:	2b00      	cmp	r3, #0
 801fe8a:	d01e      	beq.n	801feca <udp_netif_ip_addr_changed+0x4e>
 801fe8c:	687b      	ldr	r3, [r7, #4]
 801fe8e:	681b      	ldr	r3, [r3, #0]
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	d01a      	beq.n	801feca <udp_netif_ip_addr_changed+0x4e>
 801fe94:	683b      	ldr	r3, [r7, #0]
 801fe96:	2b00      	cmp	r3, #0
 801fe98:	d017      	beq.n	801feca <udp_netif_ip_addr_changed+0x4e>
 801fe9a:	683b      	ldr	r3, [r7, #0]
 801fe9c:	681b      	ldr	r3, [r3, #0]
 801fe9e:	2b00      	cmp	r3, #0
 801fea0:	d013      	beq.n	801feca <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801fea2:	4b0d      	ldr	r3, [pc, #52]	; (801fed8 <udp_netif_ip_addr_changed+0x5c>)
 801fea4:	681b      	ldr	r3, [r3, #0]
 801fea6:	60fb      	str	r3, [r7, #12]
 801fea8:	e00c      	b.n	801fec4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801feaa:	68fb      	ldr	r3, [r7, #12]
 801feac:	681a      	ldr	r2, [r3, #0]
 801feae:	687b      	ldr	r3, [r7, #4]
 801feb0:	681b      	ldr	r3, [r3, #0]
 801feb2:	429a      	cmp	r2, r3
 801feb4:	d103      	bne.n	801febe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801feb6:	683b      	ldr	r3, [r7, #0]
 801feb8:	681a      	ldr	r2, [r3, #0]
 801feba:	68fb      	ldr	r3, [r7, #12]
 801febc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	68db      	ldr	r3, [r3, #12]
 801fec2:	60fb      	str	r3, [r7, #12]
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	2b00      	cmp	r3, #0
 801fec8:	d1ef      	bne.n	801feaa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801feca:	bf00      	nop
 801fecc:	3714      	adds	r7, #20
 801fece:	46bd      	mov	sp, r7
 801fed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fed4:	4770      	bx	lr
 801fed6:	bf00      	nop
 801fed8:	200141a4 	.word	0x200141a4

0801fedc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801fedc:	b580      	push	{r7, lr}
 801fede:	b082      	sub	sp, #8
 801fee0:	af00      	add	r7, sp, #0
 801fee2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801fee4:	4915      	ldr	r1, [pc, #84]	; (801ff3c <etharp_free_entry+0x60>)
 801fee6:	687a      	ldr	r2, [r7, #4]
 801fee8:	4613      	mov	r3, r2
 801feea:	005b      	lsls	r3, r3, #1
 801feec:	4413      	add	r3, r2
 801feee:	00db      	lsls	r3, r3, #3
 801fef0:	440b      	add	r3, r1
 801fef2:	681b      	ldr	r3, [r3, #0]
 801fef4:	2b00      	cmp	r3, #0
 801fef6:	d013      	beq.n	801ff20 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801fef8:	4910      	ldr	r1, [pc, #64]	; (801ff3c <etharp_free_entry+0x60>)
 801fefa:	687a      	ldr	r2, [r7, #4]
 801fefc:	4613      	mov	r3, r2
 801fefe:	005b      	lsls	r3, r3, #1
 801ff00:	4413      	add	r3, r2
 801ff02:	00db      	lsls	r3, r3, #3
 801ff04:	440b      	add	r3, r1
 801ff06:	681b      	ldr	r3, [r3, #0]
 801ff08:	4618      	mov	r0, r3
 801ff0a:	f7fe ff5d 	bl	801edc8 <pbuf_free>
    arp_table[i].q = NULL;
 801ff0e:	490b      	ldr	r1, [pc, #44]	; (801ff3c <etharp_free_entry+0x60>)
 801ff10:	687a      	ldr	r2, [r7, #4]
 801ff12:	4613      	mov	r3, r2
 801ff14:	005b      	lsls	r3, r3, #1
 801ff16:	4413      	add	r3, r2
 801ff18:	00db      	lsls	r3, r3, #3
 801ff1a:	440b      	add	r3, r1
 801ff1c:	2200      	movs	r2, #0
 801ff1e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801ff20:	4906      	ldr	r1, [pc, #24]	; (801ff3c <etharp_free_entry+0x60>)
 801ff22:	687a      	ldr	r2, [r7, #4]
 801ff24:	4613      	mov	r3, r2
 801ff26:	005b      	lsls	r3, r3, #1
 801ff28:	4413      	add	r3, r2
 801ff2a:	00db      	lsls	r3, r3, #3
 801ff2c:	440b      	add	r3, r1
 801ff2e:	3314      	adds	r3, #20
 801ff30:	2200      	movs	r2, #0
 801ff32:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801ff34:	bf00      	nop
 801ff36:	3708      	adds	r7, #8
 801ff38:	46bd      	mov	sp, r7
 801ff3a:	bd80      	pop	{r7, pc}
 801ff3c:	200141a8 	.word	0x200141a8

0801ff40 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801ff40:	b580      	push	{r7, lr}
 801ff42:	b082      	sub	sp, #8
 801ff44:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff46:	2300      	movs	r3, #0
 801ff48:	607b      	str	r3, [r7, #4]
 801ff4a:	e096      	b.n	802007a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801ff4c:	494f      	ldr	r1, [pc, #316]	; (802008c <etharp_tmr+0x14c>)
 801ff4e:	687a      	ldr	r2, [r7, #4]
 801ff50:	4613      	mov	r3, r2
 801ff52:	005b      	lsls	r3, r3, #1
 801ff54:	4413      	add	r3, r2
 801ff56:	00db      	lsls	r3, r3, #3
 801ff58:	440b      	add	r3, r1
 801ff5a:	3314      	adds	r3, #20
 801ff5c:	781b      	ldrb	r3, [r3, #0]
 801ff5e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801ff60:	78fb      	ldrb	r3, [r7, #3]
 801ff62:	2b00      	cmp	r3, #0
 801ff64:	f000 8086 	beq.w	8020074 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801ff68:	4948      	ldr	r1, [pc, #288]	; (802008c <etharp_tmr+0x14c>)
 801ff6a:	687a      	ldr	r2, [r7, #4]
 801ff6c:	4613      	mov	r3, r2
 801ff6e:	005b      	lsls	r3, r3, #1
 801ff70:	4413      	add	r3, r2
 801ff72:	00db      	lsls	r3, r3, #3
 801ff74:	440b      	add	r3, r1
 801ff76:	3312      	adds	r3, #18
 801ff78:	881b      	ldrh	r3, [r3, #0]
 801ff7a:	3301      	adds	r3, #1
 801ff7c:	b298      	uxth	r0, r3
 801ff7e:	4943      	ldr	r1, [pc, #268]	; (802008c <etharp_tmr+0x14c>)
 801ff80:	687a      	ldr	r2, [r7, #4]
 801ff82:	4613      	mov	r3, r2
 801ff84:	005b      	lsls	r3, r3, #1
 801ff86:	4413      	add	r3, r2
 801ff88:	00db      	lsls	r3, r3, #3
 801ff8a:	440b      	add	r3, r1
 801ff8c:	3312      	adds	r3, #18
 801ff8e:	4602      	mov	r2, r0
 801ff90:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ff92:	493e      	ldr	r1, [pc, #248]	; (802008c <etharp_tmr+0x14c>)
 801ff94:	687a      	ldr	r2, [r7, #4]
 801ff96:	4613      	mov	r3, r2
 801ff98:	005b      	lsls	r3, r3, #1
 801ff9a:	4413      	add	r3, r2
 801ff9c:	00db      	lsls	r3, r3, #3
 801ff9e:	440b      	add	r3, r1
 801ffa0:	3312      	adds	r3, #18
 801ffa2:	881b      	ldrh	r3, [r3, #0]
 801ffa4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801ffa8:	d215      	bcs.n	801ffd6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ffaa:	4938      	ldr	r1, [pc, #224]	; (802008c <etharp_tmr+0x14c>)
 801ffac:	687a      	ldr	r2, [r7, #4]
 801ffae:	4613      	mov	r3, r2
 801ffb0:	005b      	lsls	r3, r3, #1
 801ffb2:	4413      	add	r3, r2
 801ffb4:	00db      	lsls	r3, r3, #3
 801ffb6:	440b      	add	r3, r1
 801ffb8:	3314      	adds	r3, #20
 801ffba:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801ffbc:	2b01      	cmp	r3, #1
 801ffbe:	d10e      	bne.n	801ffde <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801ffc0:	4932      	ldr	r1, [pc, #200]	; (802008c <etharp_tmr+0x14c>)
 801ffc2:	687a      	ldr	r2, [r7, #4]
 801ffc4:	4613      	mov	r3, r2
 801ffc6:	005b      	lsls	r3, r3, #1
 801ffc8:	4413      	add	r3, r2
 801ffca:	00db      	lsls	r3, r3, #3
 801ffcc:	440b      	add	r3, r1
 801ffce:	3312      	adds	r3, #18
 801ffd0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801ffd2:	2b04      	cmp	r3, #4
 801ffd4:	d903      	bls.n	801ffde <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801ffd6:	6878      	ldr	r0, [r7, #4]
 801ffd8:	f7ff ff80 	bl	801fedc <etharp_free_entry>
 801ffdc:	e04a      	b.n	8020074 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801ffde:	492b      	ldr	r1, [pc, #172]	; (802008c <etharp_tmr+0x14c>)
 801ffe0:	687a      	ldr	r2, [r7, #4]
 801ffe2:	4613      	mov	r3, r2
 801ffe4:	005b      	lsls	r3, r3, #1
 801ffe6:	4413      	add	r3, r2
 801ffe8:	00db      	lsls	r3, r3, #3
 801ffea:	440b      	add	r3, r1
 801ffec:	3314      	adds	r3, #20
 801ffee:	781b      	ldrb	r3, [r3, #0]
 801fff0:	2b03      	cmp	r3, #3
 801fff2:	d10a      	bne.n	802000a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801fff4:	4925      	ldr	r1, [pc, #148]	; (802008c <etharp_tmr+0x14c>)
 801fff6:	687a      	ldr	r2, [r7, #4]
 801fff8:	4613      	mov	r3, r2
 801fffa:	005b      	lsls	r3, r3, #1
 801fffc:	4413      	add	r3, r2
 801fffe:	00db      	lsls	r3, r3, #3
 8020000:	440b      	add	r3, r1
 8020002:	3314      	adds	r3, #20
 8020004:	2204      	movs	r2, #4
 8020006:	701a      	strb	r2, [r3, #0]
 8020008:	e034      	b.n	8020074 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 802000a:	4920      	ldr	r1, [pc, #128]	; (802008c <etharp_tmr+0x14c>)
 802000c:	687a      	ldr	r2, [r7, #4]
 802000e:	4613      	mov	r3, r2
 8020010:	005b      	lsls	r3, r3, #1
 8020012:	4413      	add	r3, r2
 8020014:	00db      	lsls	r3, r3, #3
 8020016:	440b      	add	r3, r1
 8020018:	3314      	adds	r3, #20
 802001a:	781b      	ldrb	r3, [r3, #0]
 802001c:	2b04      	cmp	r3, #4
 802001e:	d10a      	bne.n	8020036 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020020:	491a      	ldr	r1, [pc, #104]	; (802008c <etharp_tmr+0x14c>)
 8020022:	687a      	ldr	r2, [r7, #4]
 8020024:	4613      	mov	r3, r2
 8020026:	005b      	lsls	r3, r3, #1
 8020028:	4413      	add	r3, r2
 802002a:	00db      	lsls	r3, r3, #3
 802002c:	440b      	add	r3, r1
 802002e:	3314      	adds	r3, #20
 8020030:	2202      	movs	r2, #2
 8020032:	701a      	strb	r2, [r3, #0]
 8020034:	e01e      	b.n	8020074 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020036:	4915      	ldr	r1, [pc, #84]	; (802008c <etharp_tmr+0x14c>)
 8020038:	687a      	ldr	r2, [r7, #4]
 802003a:	4613      	mov	r3, r2
 802003c:	005b      	lsls	r3, r3, #1
 802003e:	4413      	add	r3, r2
 8020040:	00db      	lsls	r3, r3, #3
 8020042:	440b      	add	r3, r1
 8020044:	3314      	adds	r3, #20
 8020046:	781b      	ldrb	r3, [r3, #0]
 8020048:	2b01      	cmp	r3, #1
 802004a:	d113      	bne.n	8020074 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 802004c:	490f      	ldr	r1, [pc, #60]	; (802008c <etharp_tmr+0x14c>)
 802004e:	687a      	ldr	r2, [r7, #4]
 8020050:	4613      	mov	r3, r2
 8020052:	005b      	lsls	r3, r3, #1
 8020054:	4413      	add	r3, r2
 8020056:	00db      	lsls	r3, r3, #3
 8020058:	440b      	add	r3, r1
 802005a:	3308      	adds	r3, #8
 802005c:	6818      	ldr	r0, [r3, #0]
 802005e:	687a      	ldr	r2, [r7, #4]
 8020060:	4613      	mov	r3, r2
 8020062:	005b      	lsls	r3, r3, #1
 8020064:	4413      	add	r3, r2
 8020066:	00db      	lsls	r3, r3, #3
 8020068:	4a08      	ldr	r2, [pc, #32]	; (802008c <etharp_tmr+0x14c>)
 802006a:	4413      	add	r3, r2
 802006c:	3304      	adds	r3, #4
 802006e:	4619      	mov	r1, r3
 8020070:	f000 fe6e 	bl	8020d50 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020074:	687b      	ldr	r3, [r7, #4]
 8020076:	3301      	adds	r3, #1
 8020078:	607b      	str	r3, [r7, #4]
 802007a:	687b      	ldr	r3, [r7, #4]
 802007c:	2b31      	cmp	r3, #49	; 0x31
 802007e:	f77f af65 	ble.w	801ff4c <etharp_tmr+0xc>
      }
    }
  }
}
 8020082:	bf00      	nop
 8020084:	bf00      	nop
 8020086:	3708      	adds	r7, #8
 8020088:	46bd      	mov	sp, r7
 802008a:	bd80      	pop	{r7, pc}
 802008c:	200141a8 	.word	0x200141a8

08020090 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020090:	b580      	push	{r7, lr}
 8020092:	b08a      	sub	sp, #40	; 0x28
 8020094:	af00      	add	r7, sp, #0
 8020096:	60f8      	str	r0, [r7, #12]
 8020098:	460b      	mov	r3, r1
 802009a:	607a      	str	r2, [r7, #4]
 802009c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 802009e:	2332      	movs	r3, #50	; 0x32
 80200a0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80200a2:	2332      	movs	r3, #50	; 0x32
 80200a4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80200a6:	2332      	movs	r3, #50	; 0x32
 80200a8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80200aa:	2300      	movs	r3, #0
 80200ac:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80200ae:	2332      	movs	r3, #50	; 0x32
 80200b0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80200b2:	2300      	movs	r3, #0
 80200b4:	83bb      	strh	r3, [r7, #28]
 80200b6:	2300      	movs	r3, #0
 80200b8:	837b      	strh	r3, [r7, #26]
 80200ba:	2300      	movs	r3, #0
 80200bc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80200be:	2300      	movs	r3, #0
 80200c0:	843b      	strh	r3, [r7, #32]
 80200c2:	e0ae      	b.n	8020222 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 80200c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80200c8:	49a6      	ldr	r1, [pc, #664]	; (8020364 <etharp_find_entry+0x2d4>)
 80200ca:	4613      	mov	r3, r2
 80200cc:	005b      	lsls	r3, r3, #1
 80200ce:	4413      	add	r3, r2
 80200d0:	00db      	lsls	r3, r3, #3
 80200d2:	440b      	add	r3, r1
 80200d4:	3314      	adds	r3, #20
 80200d6:	781b      	ldrb	r3, [r3, #0]
 80200d8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80200da:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80200de:	2b32      	cmp	r3, #50	; 0x32
 80200e0:	d105      	bne.n	80200ee <etharp_find_entry+0x5e>
 80200e2:	7dfb      	ldrb	r3, [r7, #23]
 80200e4:	2b00      	cmp	r3, #0
 80200e6:	d102      	bne.n	80200ee <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80200e8:	8c3b      	ldrh	r3, [r7, #32]
 80200ea:	847b      	strh	r3, [r7, #34]	; 0x22
 80200ec:	e095      	b.n	802021a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80200ee:	7dfb      	ldrb	r3, [r7, #23]
 80200f0:	2b00      	cmp	r3, #0
 80200f2:	f000 8092 	beq.w	802021a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80200f6:	7dfb      	ldrb	r3, [r7, #23]
 80200f8:	2b01      	cmp	r3, #1
 80200fa:	d009      	beq.n	8020110 <etharp_find_entry+0x80>
 80200fc:	7dfb      	ldrb	r3, [r7, #23]
 80200fe:	2b01      	cmp	r3, #1
 8020100:	d806      	bhi.n	8020110 <etharp_find_entry+0x80>
 8020102:	4b99      	ldr	r3, [pc, #612]	; (8020368 <etharp_find_entry+0x2d8>)
 8020104:	f240 1223 	movw	r2, #291	; 0x123
 8020108:	4998      	ldr	r1, [pc, #608]	; (802036c <etharp_find_entry+0x2dc>)
 802010a:	4899      	ldr	r0, [pc, #612]	; (8020370 <etharp_find_entry+0x2e0>)
 802010c:	f002 fb94 	bl	8022838 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020110:	68fb      	ldr	r3, [r7, #12]
 8020112:	2b00      	cmp	r3, #0
 8020114:	d020      	beq.n	8020158 <etharp_find_entry+0xc8>
 8020116:	68fb      	ldr	r3, [r7, #12]
 8020118:	6819      	ldr	r1, [r3, #0]
 802011a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802011e:	4891      	ldr	r0, [pc, #580]	; (8020364 <etharp_find_entry+0x2d4>)
 8020120:	4613      	mov	r3, r2
 8020122:	005b      	lsls	r3, r3, #1
 8020124:	4413      	add	r3, r2
 8020126:	00db      	lsls	r3, r3, #3
 8020128:	4403      	add	r3, r0
 802012a:	3304      	adds	r3, #4
 802012c:	681b      	ldr	r3, [r3, #0]
 802012e:	4299      	cmp	r1, r3
 8020130:	d112      	bne.n	8020158 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	2b00      	cmp	r3, #0
 8020136:	d00c      	beq.n	8020152 <etharp_find_entry+0xc2>
 8020138:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802013c:	4989      	ldr	r1, [pc, #548]	; (8020364 <etharp_find_entry+0x2d4>)
 802013e:	4613      	mov	r3, r2
 8020140:	005b      	lsls	r3, r3, #1
 8020142:	4413      	add	r3, r2
 8020144:	00db      	lsls	r3, r3, #3
 8020146:	440b      	add	r3, r1
 8020148:	3308      	adds	r3, #8
 802014a:	681b      	ldr	r3, [r3, #0]
 802014c:	687a      	ldr	r2, [r7, #4]
 802014e:	429a      	cmp	r2, r3
 8020150:	d102      	bne.n	8020158 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8020152:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020156:	e100      	b.n	802035a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8020158:	7dfb      	ldrb	r3, [r7, #23]
 802015a:	2b01      	cmp	r3, #1
 802015c:	d140      	bne.n	80201e0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 802015e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020162:	4980      	ldr	r1, [pc, #512]	; (8020364 <etharp_find_entry+0x2d4>)
 8020164:	4613      	mov	r3, r2
 8020166:	005b      	lsls	r3, r3, #1
 8020168:	4413      	add	r3, r2
 802016a:	00db      	lsls	r3, r3, #3
 802016c:	440b      	add	r3, r1
 802016e:	681b      	ldr	r3, [r3, #0]
 8020170:	2b00      	cmp	r3, #0
 8020172:	d01a      	beq.n	80201aa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8020174:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020178:	497a      	ldr	r1, [pc, #488]	; (8020364 <etharp_find_entry+0x2d4>)
 802017a:	4613      	mov	r3, r2
 802017c:	005b      	lsls	r3, r3, #1
 802017e:	4413      	add	r3, r2
 8020180:	00db      	lsls	r3, r3, #3
 8020182:	440b      	add	r3, r1
 8020184:	3312      	adds	r3, #18
 8020186:	881b      	ldrh	r3, [r3, #0]
 8020188:	8bba      	ldrh	r2, [r7, #28]
 802018a:	429a      	cmp	r2, r3
 802018c:	d845      	bhi.n	802021a <etharp_find_entry+0x18a>
            old_queue = i;
 802018e:	8c3b      	ldrh	r3, [r7, #32]
 8020190:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8020192:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020196:	4973      	ldr	r1, [pc, #460]	; (8020364 <etharp_find_entry+0x2d4>)
 8020198:	4613      	mov	r3, r2
 802019a:	005b      	lsls	r3, r3, #1
 802019c:	4413      	add	r3, r2
 802019e:	00db      	lsls	r3, r3, #3
 80201a0:	440b      	add	r3, r1
 80201a2:	3312      	adds	r3, #18
 80201a4:	881b      	ldrh	r3, [r3, #0]
 80201a6:	83bb      	strh	r3, [r7, #28]
 80201a8:	e037      	b.n	802021a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80201aa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201ae:	496d      	ldr	r1, [pc, #436]	; (8020364 <etharp_find_entry+0x2d4>)
 80201b0:	4613      	mov	r3, r2
 80201b2:	005b      	lsls	r3, r3, #1
 80201b4:	4413      	add	r3, r2
 80201b6:	00db      	lsls	r3, r3, #3
 80201b8:	440b      	add	r3, r1
 80201ba:	3312      	adds	r3, #18
 80201bc:	881b      	ldrh	r3, [r3, #0]
 80201be:	8b7a      	ldrh	r2, [r7, #26]
 80201c0:	429a      	cmp	r2, r3
 80201c2:	d82a      	bhi.n	802021a <etharp_find_entry+0x18a>
            old_pending = i;
 80201c4:	8c3b      	ldrh	r3, [r7, #32]
 80201c6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 80201c8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201cc:	4965      	ldr	r1, [pc, #404]	; (8020364 <etharp_find_entry+0x2d4>)
 80201ce:	4613      	mov	r3, r2
 80201d0:	005b      	lsls	r3, r3, #1
 80201d2:	4413      	add	r3, r2
 80201d4:	00db      	lsls	r3, r3, #3
 80201d6:	440b      	add	r3, r1
 80201d8:	3312      	adds	r3, #18
 80201da:	881b      	ldrh	r3, [r3, #0]
 80201dc:	837b      	strh	r3, [r7, #26]
 80201de:	e01c      	b.n	802021a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80201e0:	7dfb      	ldrb	r3, [r7, #23]
 80201e2:	2b01      	cmp	r3, #1
 80201e4:	d919      	bls.n	802021a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80201e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80201ea:	495e      	ldr	r1, [pc, #376]	; (8020364 <etharp_find_entry+0x2d4>)
 80201ec:	4613      	mov	r3, r2
 80201ee:	005b      	lsls	r3, r3, #1
 80201f0:	4413      	add	r3, r2
 80201f2:	00db      	lsls	r3, r3, #3
 80201f4:	440b      	add	r3, r1
 80201f6:	3312      	adds	r3, #18
 80201f8:	881b      	ldrh	r3, [r3, #0]
 80201fa:	8b3a      	ldrh	r2, [r7, #24]
 80201fc:	429a      	cmp	r2, r3
 80201fe:	d80c      	bhi.n	802021a <etharp_find_entry+0x18a>
            old_stable = i;
 8020200:	8c3b      	ldrh	r3, [r7, #32]
 8020202:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8020204:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020208:	4956      	ldr	r1, [pc, #344]	; (8020364 <etharp_find_entry+0x2d4>)
 802020a:	4613      	mov	r3, r2
 802020c:	005b      	lsls	r3, r3, #1
 802020e:	4413      	add	r3, r2
 8020210:	00db      	lsls	r3, r3, #3
 8020212:	440b      	add	r3, r1
 8020214:	3312      	adds	r3, #18
 8020216:	881b      	ldrh	r3, [r3, #0]
 8020218:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 802021a:	8c3b      	ldrh	r3, [r7, #32]
 802021c:	3301      	adds	r3, #1
 802021e:	b29b      	uxth	r3, r3
 8020220:	843b      	strh	r3, [r7, #32]
 8020222:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020226:	2b31      	cmp	r3, #49	; 0x31
 8020228:	f77f af4c 	ble.w	80200c4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 802022c:	7afb      	ldrb	r3, [r7, #11]
 802022e:	f003 0302 	and.w	r3, r3, #2
 8020232:	2b00      	cmp	r3, #0
 8020234:	d108      	bne.n	8020248 <etharp_find_entry+0x1b8>
 8020236:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 802023a:	2b32      	cmp	r3, #50	; 0x32
 802023c:	d107      	bne.n	802024e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 802023e:	7afb      	ldrb	r3, [r7, #11]
 8020240:	f003 0301 	and.w	r3, r3, #1
 8020244:	2b00      	cmp	r3, #0
 8020246:	d102      	bne.n	802024e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8020248:	f04f 33ff 	mov.w	r3, #4294967295
 802024c:	e085      	b.n	802035a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 802024e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020252:	2b31      	cmp	r3, #49	; 0x31
 8020254:	dc02      	bgt.n	802025c <etharp_find_entry+0x1cc>
    i = empty;
 8020256:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020258:	843b      	strh	r3, [r7, #32]
 802025a:	e039      	b.n	80202d0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 802025c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8020260:	2b31      	cmp	r3, #49	; 0x31
 8020262:	dc14      	bgt.n	802028e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8020264:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8020266:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8020268:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802026c:	493d      	ldr	r1, [pc, #244]	; (8020364 <etharp_find_entry+0x2d4>)
 802026e:	4613      	mov	r3, r2
 8020270:	005b      	lsls	r3, r3, #1
 8020272:	4413      	add	r3, r2
 8020274:	00db      	lsls	r3, r3, #3
 8020276:	440b      	add	r3, r1
 8020278:	681b      	ldr	r3, [r3, #0]
 802027a:	2b00      	cmp	r3, #0
 802027c:	d018      	beq.n	80202b0 <etharp_find_entry+0x220>
 802027e:	4b3a      	ldr	r3, [pc, #232]	; (8020368 <etharp_find_entry+0x2d8>)
 8020280:	f240 126d 	movw	r2, #365	; 0x16d
 8020284:	493b      	ldr	r1, [pc, #236]	; (8020374 <etharp_find_entry+0x2e4>)
 8020286:	483a      	ldr	r0, [pc, #232]	; (8020370 <etharp_find_entry+0x2e0>)
 8020288:	f002 fad6 	bl	8022838 <iprintf>
 802028c:	e010      	b.n	80202b0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 802028e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8020292:	2b31      	cmp	r3, #49	; 0x31
 8020294:	dc02      	bgt.n	802029c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8020296:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020298:	843b      	strh	r3, [r7, #32]
 802029a:	e009      	b.n	80202b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 802029c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80202a0:	2b31      	cmp	r3, #49	; 0x31
 80202a2:	dc02      	bgt.n	80202aa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80202a4:	8bfb      	ldrh	r3, [r7, #30]
 80202a6:	843b      	strh	r3, [r7, #32]
 80202a8:	e002      	b.n	80202b0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80202aa:	f04f 33ff 	mov.w	r3, #4294967295
 80202ae:	e054      	b.n	802035a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80202b0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80202b4:	2b31      	cmp	r3, #49	; 0x31
 80202b6:	dd06      	ble.n	80202c6 <etharp_find_entry+0x236>
 80202b8:	4b2b      	ldr	r3, [pc, #172]	; (8020368 <etharp_find_entry+0x2d8>)
 80202ba:	f240 127f 	movw	r2, #383	; 0x17f
 80202be:	492e      	ldr	r1, [pc, #184]	; (8020378 <etharp_find_entry+0x2e8>)
 80202c0:	482b      	ldr	r0, [pc, #172]	; (8020370 <etharp_find_entry+0x2e0>)
 80202c2:	f002 fab9 	bl	8022838 <iprintf>
    etharp_free_entry(i);
 80202c6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80202ca:	4618      	mov	r0, r3
 80202cc:	f7ff fe06 	bl	801fedc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80202d0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80202d4:	2b31      	cmp	r3, #49	; 0x31
 80202d6:	dd06      	ble.n	80202e6 <etharp_find_entry+0x256>
 80202d8:	4b23      	ldr	r3, [pc, #140]	; (8020368 <etharp_find_entry+0x2d8>)
 80202da:	f240 1283 	movw	r2, #387	; 0x183
 80202de:	4926      	ldr	r1, [pc, #152]	; (8020378 <etharp_find_entry+0x2e8>)
 80202e0:	4823      	ldr	r0, [pc, #140]	; (8020370 <etharp_find_entry+0x2e0>)
 80202e2:	f002 faa9 	bl	8022838 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80202e6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80202ea:	491e      	ldr	r1, [pc, #120]	; (8020364 <etharp_find_entry+0x2d4>)
 80202ec:	4613      	mov	r3, r2
 80202ee:	005b      	lsls	r3, r3, #1
 80202f0:	4413      	add	r3, r2
 80202f2:	00db      	lsls	r3, r3, #3
 80202f4:	440b      	add	r3, r1
 80202f6:	3314      	adds	r3, #20
 80202f8:	781b      	ldrb	r3, [r3, #0]
 80202fa:	2b00      	cmp	r3, #0
 80202fc:	d006      	beq.n	802030c <etharp_find_entry+0x27c>
 80202fe:	4b1a      	ldr	r3, [pc, #104]	; (8020368 <etharp_find_entry+0x2d8>)
 8020300:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8020304:	491d      	ldr	r1, [pc, #116]	; (802037c <etharp_find_entry+0x2ec>)
 8020306:	481a      	ldr	r0, [pc, #104]	; (8020370 <etharp_find_entry+0x2e0>)
 8020308:	f002 fa96 	bl	8022838 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 802030c:	68fb      	ldr	r3, [r7, #12]
 802030e:	2b00      	cmp	r3, #0
 8020310:	d00b      	beq.n	802032a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8020312:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020316:	68fb      	ldr	r3, [r7, #12]
 8020318:	6819      	ldr	r1, [r3, #0]
 802031a:	4812      	ldr	r0, [pc, #72]	; (8020364 <etharp_find_entry+0x2d4>)
 802031c:	4613      	mov	r3, r2
 802031e:	005b      	lsls	r3, r3, #1
 8020320:	4413      	add	r3, r2
 8020322:	00db      	lsls	r3, r3, #3
 8020324:	4403      	add	r3, r0
 8020326:	3304      	adds	r3, #4
 8020328:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 802032a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802032e:	490d      	ldr	r1, [pc, #52]	; (8020364 <etharp_find_entry+0x2d4>)
 8020330:	4613      	mov	r3, r2
 8020332:	005b      	lsls	r3, r3, #1
 8020334:	4413      	add	r3, r2
 8020336:	00db      	lsls	r3, r3, #3
 8020338:	440b      	add	r3, r1
 802033a:	3312      	adds	r3, #18
 802033c:	2200      	movs	r2, #0
 802033e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8020340:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020344:	4907      	ldr	r1, [pc, #28]	; (8020364 <etharp_find_entry+0x2d4>)
 8020346:	4613      	mov	r3, r2
 8020348:	005b      	lsls	r3, r3, #1
 802034a:	4413      	add	r3, r2
 802034c:	00db      	lsls	r3, r3, #3
 802034e:	440b      	add	r3, r1
 8020350:	3308      	adds	r3, #8
 8020352:	687a      	ldr	r2, [r7, #4]
 8020354:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8020356:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 802035a:	4618      	mov	r0, r3
 802035c:	3728      	adds	r7, #40	; 0x28
 802035e:	46bd      	mov	sp, r7
 8020360:	bd80      	pop	{r7, pc}
 8020362:	bf00      	nop
 8020364:	200141a8 	.word	0x200141a8
 8020368:	080283e0 	.word	0x080283e0
 802036c:	08028418 	.word	0x08028418
 8020370:	08028458 	.word	0x08028458
 8020374:	08028480 	.word	0x08028480
 8020378:	08028498 	.word	0x08028498
 802037c:	080284ac 	.word	0x080284ac

08020380 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8020380:	b580      	push	{r7, lr}
 8020382:	b088      	sub	sp, #32
 8020384:	af02      	add	r7, sp, #8
 8020386:	60f8      	str	r0, [r7, #12]
 8020388:	60b9      	str	r1, [r7, #8]
 802038a:	607a      	str	r2, [r7, #4]
 802038c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 802038e:	68fb      	ldr	r3, [r7, #12]
 8020390:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020394:	2b06      	cmp	r3, #6
 8020396:	d006      	beq.n	80203a6 <etharp_update_arp_entry+0x26>
 8020398:	4b48      	ldr	r3, [pc, #288]	; (80204bc <etharp_update_arp_entry+0x13c>)
 802039a:	f240 12a9 	movw	r2, #425	; 0x1a9
 802039e:	4948      	ldr	r1, [pc, #288]	; (80204c0 <etharp_update_arp_entry+0x140>)
 80203a0:	4848      	ldr	r0, [pc, #288]	; (80204c4 <etharp_update_arp_entry+0x144>)
 80203a2:	f002 fa49 	bl	8022838 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80203a6:	68bb      	ldr	r3, [r7, #8]
 80203a8:	2b00      	cmp	r3, #0
 80203aa:	d012      	beq.n	80203d2 <etharp_update_arp_entry+0x52>
 80203ac:	68bb      	ldr	r3, [r7, #8]
 80203ae:	681b      	ldr	r3, [r3, #0]
 80203b0:	2b00      	cmp	r3, #0
 80203b2:	d00e      	beq.n	80203d2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80203b4:	68bb      	ldr	r3, [r7, #8]
 80203b6:	681b      	ldr	r3, [r3, #0]
 80203b8:	68f9      	ldr	r1, [r7, #12]
 80203ba:	4618      	mov	r0, r3
 80203bc:	f001 f902 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 80203c0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 80203c2:	2b00      	cmp	r3, #0
 80203c4:	d105      	bne.n	80203d2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 80203c6:	68bb      	ldr	r3, [r7, #8]
 80203c8:	681b      	ldr	r3, [r3, #0]
 80203ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80203ce:	2be0      	cmp	r3, #224	; 0xe0
 80203d0:	d102      	bne.n	80203d8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80203d2:	f06f 030f 	mvn.w	r3, #15
 80203d6:	e06c      	b.n	80204b2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80203d8:	78fb      	ldrb	r3, [r7, #3]
 80203da:	68fa      	ldr	r2, [r7, #12]
 80203dc:	4619      	mov	r1, r3
 80203de:	68b8      	ldr	r0, [r7, #8]
 80203e0:	f7ff fe56 	bl	8020090 <etharp_find_entry>
 80203e4:	4603      	mov	r3, r0
 80203e6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80203e8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80203ec:	2b00      	cmp	r3, #0
 80203ee:	da02      	bge.n	80203f6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80203f0:	8afb      	ldrh	r3, [r7, #22]
 80203f2:	b25b      	sxtb	r3, r3
 80203f4:	e05d      	b.n	80204b2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80203f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80203fa:	4933      	ldr	r1, [pc, #204]	; (80204c8 <etharp_update_arp_entry+0x148>)
 80203fc:	4613      	mov	r3, r2
 80203fe:	005b      	lsls	r3, r3, #1
 8020400:	4413      	add	r3, r2
 8020402:	00db      	lsls	r3, r3, #3
 8020404:	440b      	add	r3, r1
 8020406:	3314      	adds	r3, #20
 8020408:	2202      	movs	r2, #2
 802040a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 802040c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020410:	492d      	ldr	r1, [pc, #180]	; (80204c8 <etharp_update_arp_entry+0x148>)
 8020412:	4613      	mov	r3, r2
 8020414:	005b      	lsls	r3, r3, #1
 8020416:	4413      	add	r3, r2
 8020418:	00db      	lsls	r3, r3, #3
 802041a:	440b      	add	r3, r1
 802041c:	3308      	adds	r3, #8
 802041e:	68fa      	ldr	r2, [r7, #12]
 8020420:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8020422:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020426:	4613      	mov	r3, r2
 8020428:	005b      	lsls	r3, r3, #1
 802042a:	4413      	add	r3, r2
 802042c:	00db      	lsls	r3, r3, #3
 802042e:	3308      	adds	r3, #8
 8020430:	4a25      	ldr	r2, [pc, #148]	; (80204c8 <etharp_update_arp_entry+0x148>)
 8020432:	4413      	add	r3, r2
 8020434:	3304      	adds	r3, #4
 8020436:	2206      	movs	r2, #6
 8020438:	6879      	ldr	r1, [r7, #4]
 802043a:	4618      	mov	r0, r3
 802043c:	f002 f8ec 	bl	8022618 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8020440:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020444:	4920      	ldr	r1, [pc, #128]	; (80204c8 <etharp_update_arp_entry+0x148>)
 8020446:	4613      	mov	r3, r2
 8020448:	005b      	lsls	r3, r3, #1
 802044a:	4413      	add	r3, r2
 802044c:	00db      	lsls	r3, r3, #3
 802044e:	440b      	add	r3, r1
 8020450:	3312      	adds	r3, #18
 8020452:	2200      	movs	r2, #0
 8020454:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8020456:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802045a:	491b      	ldr	r1, [pc, #108]	; (80204c8 <etharp_update_arp_entry+0x148>)
 802045c:	4613      	mov	r3, r2
 802045e:	005b      	lsls	r3, r3, #1
 8020460:	4413      	add	r3, r2
 8020462:	00db      	lsls	r3, r3, #3
 8020464:	440b      	add	r3, r1
 8020466:	681b      	ldr	r3, [r3, #0]
 8020468:	2b00      	cmp	r3, #0
 802046a:	d021      	beq.n	80204b0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 802046c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020470:	4915      	ldr	r1, [pc, #84]	; (80204c8 <etharp_update_arp_entry+0x148>)
 8020472:	4613      	mov	r3, r2
 8020474:	005b      	lsls	r3, r3, #1
 8020476:	4413      	add	r3, r2
 8020478:	00db      	lsls	r3, r3, #3
 802047a:	440b      	add	r3, r1
 802047c:	681b      	ldr	r3, [r3, #0]
 802047e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8020480:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020484:	4910      	ldr	r1, [pc, #64]	; (80204c8 <etharp_update_arp_entry+0x148>)
 8020486:	4613      	mov	r3, r2
 8020488:	005b      	lsls	r3, r3, #1
 802048a:	4413      	add	r3, r2
 802048c:	00db      	lsls	r3, r3, #3
 802048e:	440b      	add	r3, r1
 8020490:	2200      	movs	r2, #0
 8020492:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8020494:	68fb      	ldr	r3, [r7, #12]
 8020496:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802049a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 802049e:	9300      	str	r3, [sp, #0]
 80204a0:	687b      	ldr	r3, [r7, #4]
 80204a2:	6939      	ldr	r1, [r7, #16]
 80204a4:	68f8      	ldr	r0, [r7, #12]
 80204a6:	f002 f82b 	bl	8022500 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80204aa:	6938      	ldr	r0, [r7, #16]
 80204ac:	f7fe fc8c 	bl	801edc8 <pbuf_free>
  }
  return ERR_OK;
 80204b0:	2300      	movs	r3, #0
}
 80204b2:	4618      	mov	r0, r3
 80204b4:	3718      	adds	r7, #24
 80204b6:	46bd      	mov	sp, r7
 80204b8:	bd80      	pop	{r7, pc}
 80204ba:	bf00      	nop
 80204bc:	080283e0 	.word	0x080283e0
 80204c0:	080284d8 	.word	0x080284d8
 80204c4:	08028458 	.word	0x08028458
 80204c8:	200141a8 	.word	0x200141a8

080204cc <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 80204cc:	b580      	push	{r7, lr}
 80204ce:	b084      	sub	sp, #16
 80204d0:	af00      	add	r7, sp, #0
 80204d2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80204d4:	2300      	movs	r3, #0
 80204d6:	60fb      	str	r3, [r7, #12]
 80204d8:	e01e      	b.n	8020518 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80204da:	4913      	ldr	r1, [pc, #76]	; (8020528 <etharp_cleanup_netif+0x5c>)
 80204dc:	68fa      	ldr	r2, [r7, #12]
 80204de:	4613      	mov	r3, r2
 80204e0:	005b      	lsls	r3, r3, #1
 80204e2:	4413      	add	r3, r2
 80204e4:	00db      	lsls	r3, r3, #3
 80204e6:	440b      	add	r3, r1
 80204e8:	3314      	adds	r3, #20
 80204ea:	781b      	ldrb	r3, [r3, #0]
 80204ec:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80204ee:	7afb      	ldrb	r3, [r7, #11]
 80204f0:	2b00      	cmp	r3, #0
 80204f2:	d00e      	beq.n	8020512 <etharp_cleanup_netif+0x46>
 80204f4:	490c      	ldr	r1, [pc, #48]	; (8020528 <etharp_cleanup_netif+0x5c>)
 80204f6:	68fa      	ldr	r2, [r7, #12]
 80204f8:	4613      	mov	r3, r2
 80204fa:	005b      	lsls	r3, r3, #1
 80204fc:	4413      	add	r3, r2
 80204fe:	00db      	lsls	r3, r3, #3
 8020500:	440b      	add	r3, r1
 8020502:	3308      	adds	r3, #8
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	687a      	ldr	r2, [r7, #4]
 8020508:	429a      	cmp	r2, r3
 802050a:	d102      	bne.n	8020512 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 802050c:	68f8      	ldr	r0, [r7, #12]
 802050e:	f7ff fce5 	bl	801fedc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020512:	68fb      	ldr	r3, [r7, #12]
 8020514:	3301      	adds	r3, #1
 8020516:	60fb      	str	r3, [r7, #12]
 8020518:	68fb      	ldr	r3, [r7, #12]
 802051a:	2b31      	cmp	r3, #49	; 0x31
 802051c:	dddd      	ble.n	80204da <etharp_cleanup_netif+0xe>
    }
  }
}
 802051e:	bf00      	nop
 8020520:	bf00      	nop
 8020522:	3710      	adds	r7, #16
 8020524:	46bd      	mov	sp, r7
 8020526:	bd80      	pop	{r7, pc}
 8020528:	200141a8 	.word	0x200141a8

0802052c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 802052c:	b5b0      	push	{r4, r5, r7, lr}
 802052e:	b08a      	sub	sp, #40	; 0x28
 8020530:	af04      	add	r7, sp, #16
 8020532:	6078      	str	r0, [r7, #4]
 8020534:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020536:	683b      	ldr	r3, [r7, #0]
 8020538:	2b00      	cmp	r3, #0
 802053a:	d107      	bne.n	802054c <etharp_input+0x20>
 802053c:	4b3d      	ldr	r3, [pc, #244]	; (8020634 <etharp_input+0x108>)
 802053e:	f240 228a 	movw	r2, #650	; 0x28a
 8020542:	493d      	ldr	r1, [pc, #244]	; (8020638 <etharp_input+0x10c>)
 8020544:	483d      	ldr	r0, [pc, #244]	; (802063c <etharp_input+0x110>)
 8020546:	f002 f977 	bl	8022838 <iprintf>
 802054a:	e06f      	b.n	802062c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 802054c:	687b      	ldr	r3, [r7, #4]
 802054e:	685b      	ldr	r3, [r3, #4]
 8020550:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020552:	693b      	ldr	r3, [r7, #16]
 8020554:	881b      	ldrh	r3, [r3, #0]
 8020556:	b29b      	uxth	r3, r3
 8020558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802055c:	d10c      	bne.n	8020578 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802055e:	693b      	ldr	r3, [r7, #16]
 8020560:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020562:	2b06      	cmp	r3, #6
 8020564:	d108      	bne.n	8020578 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020566:	693b      	ldr	r3, [r7, #16]
 8020568:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 802056a:	2b04      	cmp	r3, #4
 802056c:	d104      	bne.n	8020578 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 802056e:	693b      	ldr	r3, [r7, #16]
 8020570:	885b      	ldrh	r3, [r3, #2]
 8020572:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020574:	2b08      	cmp	r3, #8
 8020576:	d003      	beq.n	8020580 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8020578:	6878      	ldr	r0, [r7, #4]
 802057a:	f7fe fc25 	bl	801edc8 <pbuf_free>
    return;
 802057e:	e055      	b.n	802062c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8020580:	693b      	ldr	r3, [r7, #16]
 8020582:	330e      	adds	r3, #14
 8020584:	681b      	ldr	r3, [r3, #0]
 8020586:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8020588:	693b      	ldr	r3, [r7, #16]
 802058a:	3318      	adds	r3, #24
 802058c:	681b      	ldr	r3, [r3, #0]
 802058e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020590:	683b      	ldr	r3, [r7, #0]
 8020592:	3304      	adds	r3, #4
 8020594:	681b      	ldr	r3, [r3, #0]
 8020596:	2b00      	cmp	r3, #0
 8020598:	d102      	bne.n	80205a0 <etharp_input+0x74>
    for_us = 0;
 802059a:	2300      	movs	r3, #0
 802059c:	75fb      	strb	r3, [r7, #23]
 802059e:	e009      	b.n	80205b4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80205a0:	68ba      	ldr	r2, [r7, #8]
 80205a2:	683b      	ldr	r3, [r7, #0]
 80205a4:	3304      	adds	r3, #4
 80205a6:	681b      	ldr	r3, [r3, #0]
 80205a8:	429a      	cmp	r2, r3
 80205aa:	bf0c      	ite	eq
 80205ac:	2301      	moveq	r3, #1
 80205ae:	2300      	movne	r3, #0
 80205b0:	b2db      	uxtb	r3, r3
 80205b2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80205b4:	693b      	ldr	r3, [r7, #16]
 80205b6:	f103 0208 	add.w	r2, r3, #8
 80205ba:	7dfb      	ldrb	r3, [r7, #23]
 80205bc:	2b00      	cmp	r3, #0
 80205be:	d001      	beq.n	80205c4 <etharp_input+0x98>
 80205c0:	2301      	movs	r3, #1
 80205c2:	e000      	b.n	80205c6 <etharp_input+0x9a>
 80205c4:	2302      	movs	r3, #2
 80205c6:	f107 010c 	add.w	r1, r7, #12
 80205ca:	6838      	ldr	r0, [r7, #0]
 80205cc:	f7ff fed8 	bl	8020380 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80205d0:	693b      	ldr	r3, [r7, #16]
 80205d2:	88db      	ldrh	r3, [r3, #6]
 80205d4:	b29b      	uxth	r3, r3
 80205d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80205da:	d003      	beq.n	80205e4 <etharp_input+0xb8>
 80205dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80205e0:	d01e      	beq.n	8020620 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80205e2:	e020      	b.n	8020626 <etharp_input+0xfa>
      if (for_us) {
 80205e4:	7dfb      	ldrb	r3, [r7, #23]
 80205e6:	2b00      	cmp	r3, #0
 80205e8:	d01c      	beq.n	8020624 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80205ea:	683b      	ldr	r3, [r7, #0]
 80205ec:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 80205f0:	693b      	ldr	r3, [r7, #16]
 80205f2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80205f6:	683b      	ldr	r3, [r7, #0]
 80205f8:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 80205fc:	683b      	ldr	r3, [r7, #0]
 80205fe:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020600:	693a      	ldr	r2, [r7, #16]
 8020602:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020604:	2102      	movs	r1, #2
 8020606:	9103      	str	r1, [sp, #12]
 8020608:	f107 010c 	add.w	r1, r7, #12
 802060c:	9102      	str	r1, [sp, #8]
 802060e:	9201      	str	r2, [sp, #4]
 8020610:	9300      	str	r3, [sp, #0]
 8020612:	462b      	mov	r3, r5
 8020614:	4622      	mov	r2, r4
 8020616:	4601      	mov	r1, r0
 8020618:	6838      	ldr	r0, [r7, #0]
 802061a:	f000 faeb 	bl	8020bf4 <etharp_raw>
      break;
 802061e:	e001      	b.n	8020624 <etharp_input+0xf8>
      break;
 8020620:	bf00      	nop
 8020622:	e000      	b.n	8020626 <etharp_input+0xfa>
      break;
 8020624:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8020626:	6878      	ldr	r0, [r7, #4]
 8020628:	f7fe fbce 	bl	801edc8 <pbuf_free>
}
 802062c:	3718      	adds	r7, #24
 802062e:	46bd      	mov	sp, r7
 8020630:	bdb0      	pop	{r4, r5, r7, pc}
 8020632:	bf00      	nop
 8020634:	080283e0 	.word	0x080283e0
 8020638:	08028530 	.word	0x08028530
 802063c:	08028458 	.word	0x08028458

08020640 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020640:	b580      	push	{r7, lr}
 8020642:	b086      	sub	sp, #24
 8020644:	af02      	add	r7, sp, #8
 8020646:	60f8      	str	r0, [r7, #12]
 8020648:	60b9      	str	r1, [r7, #8]
 802064a:	4613      	mov	r3, r2
 802064c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 802064e:	79fa      	ldrb	r2, [r7, #7]
 8020650:	4944      	ldr	r1, [pc, #272]	; (8020764 <etharp_output_to_arp_index+0x124>)
 8020652:	4613      	mov	r3, r2
 8020654:	005b      	lsls	r3, r3, #1
 8020656:	4413      	add	r3, r2
 8020658:	00db      	lsls	r3, r3, #3
 802065a:	440b      	add	r3, r1
 802065c:	3314      	adds	r3, #20
 802065e:	781b      	ldrb	r3, [r3, #0]
 8020660:	2b01      	cmp	r3, #1
 8020662:	d806      	bhi.n	8020672 <etharp_output_to_arp_index+0x32>
 8020664:	4b40      	ldr	r3, [pc, #256]	; (8020768 <etharp_output_to_arp_index+0x128>)
 8020666:	f240 22ee 	movw	r2, #750	; 0x2ee
 802066a:	4940      	ldr	r1, [pc, #256]	; (802076c <etharp_output_to_arp_index+0x12c>)
 802066c:	4840      	ldr	r0, [pc, #256]	; (8020770 <etharp_output_to_arp_index+0x130>)
 802066e:	f002 f8e3 	bl	8022838 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8020672:	79fa      	ldrb	r2, [r7, #7]
 8020674:	493b      	ldr	r1, [pc, #236]	; (8020764 <etharp_output_to_arp_index+0x124>)
 8020676:	4613      	mov	r3, r2
 8020678:	005b      	lsls	r3, r3, #1
 802067a:	4413      	add	r3, r2
 802067c:	00db      	lsls	r3, r3, #3
 802067e:	440b      	add	r3, r1
 8020680:	3314      	adds	r3, #20
 8020682:	781b      	ldrb	r3, [r3, #0]
 8020684:	2b02      	cmp	r3, #2
 8020686:	d153      	bne.n	8020730 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8020688:	79fa      	ldrb	r2, [r7, #7]
 802068a:	4936      	ldr	r1, [pc, #216]	; (8020764 <etharp_output_to_arp_index+0x124>)
 802068c:	4613      	mov	r3, r2
 802068e:	005b      	lsls	r3, r3, #1
 8020690:	4413      	add	r3, r2
 8020692:	00db      	lsls	r3, r3, #3
 8020694:	440b      	add	r3, r1
 8020696:	3312      	adds	r3, #18
 8020698:	881b      	ldrh	r3, [r3, #0]
 802069a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 802069e:	d919      	bls.n	80206d4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80206a0:	79fa      	ldrb	r2, [r7, #7]
 80206a2:	4613      	mov	r3, r2
 80206a4:	005b      	lsls	r3, r3, #1
 80206a6:	4413      	add	r3, r2
 80206a8:	00db      	lsls	r3, r3, #3
 80206aa:	4a2e      	ldr	r2, [pc, #184]	; (8020764 <etharp_output_to_arp_index+0x124>)
 80206ac:	4413      	add	r3, r2
 80206ae:	3304      	adds	r3, #4
 80206b0:	4619      	mov	r1, r3
 80206b2:	68f8      	ldr	r0, [r7, #12]
 80206b4:	f000 fb4c 	bl	8020d50 <etharp_request>
 80206b8:	4603      	mov	r3, r0
 80206ba:	2b00      	cmp	r3, #0
 80206bc:	d138      	bne.n	8020730 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80206be:	79fa      	ldrb	r2, [r7, #7]
 80206c0:	4928      	ldr	r1, [pc, #160]	; (8020764 <etharp_output_to_arp_index+0x124>)
 80206c2:	4613      	mov	r3, r2
 80206c4:	005b      	lsls	r3, r3, #1
 80206c6:	4413      	add	r3, r2
 80206c8:	00db      	lsls	r3, r3, #3
 80206ca:	440b      	add	r3, r1
 80206cc:	3314      	adds	r3, #20
 80206ce:	2203      	movs	r2, #3
 80206d0:	701a      	strb	r2, [r3, #0]
 80206d2:	e02d      	b.n	8020730 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80206d4:	79fa      	ldrb	r2, [r7, #7]
 80206d6:	4923      	ldr	r1, [pc, #140]	; (8020764 <etharp_output_to_arp_index+0x124>)
 80206d8:	4613      	mov	r3, r2
 80206da:	005b      	lsls	r3, r3, #1
 80206dc:	4413      	add	r3, r2
 80206de:	00db      	lsls	r3, r3, #3
 80206e0:	440b      	add	r3, r1
 80206e2:	3312      	adds	r3, #18
 80206e4:	881b      	ldrh	r3, [r3, #0]
 80206e6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80206ea:	d321      	bcc.n	8020730 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80206ec:	79fa      	ldrb	r2, [r7, #7]
 80206ee:	4613      	mov	r3, r2
 80206f0:	005b      	lsls	r3, r3, #1
 80206f2:	4413      	add	r3, r2
 80206f4:	00db      	lsls	r3, r3, #3
 80206f6:	4a1b      	ldr	r2, [pc, #108]	; (8020764 <etharp_output_to_arp_index+0x124>)
 80206f8:	4413      	add	r3, r2
 80206fa:	1d19      	adds	r1, r3, #4
 80206fc:	79fa      	ldrb	r2, [r7, #7]
 80206fe:	4613      	mov	r3, r2
 8020700:	005b      	lsls	r3, r3, #1
 8020702:	4413      	add	r3, r2
 8020704:	00db      	lsls	r3, r3, #3
 8020706:	3308      	adds	r3, #8
 8020708:	4a16      	ldr	r2, [pc, #88]	; (8020764 <etharp_output_to_arp_index+0x124>)
 802070a:	4413      	add	r3, r2
 802070c:	3304      	adds	r3, #4
 802070e:	461a      	mov	r2, r3
 8020710:	68f8      	ldr	r0, [r7, #12]
 8020712:	f000 fafb 	bl	8020d0c <etharp_request_dst>
 8020716:	4603      	mov	r3, r0
 8020718:	2b00      	cmp	r3, #0
 802071a:	d109      	bne.n	8020730 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 802071c:	79fa      	ldrb	r2, [r7, #7]
 802071e:	4911      	ldr	r1, [pc, #68]	; (8020764 <etharp_output_to_arp_index+0x124>)
 8020720:	4613      	mov	r3, r2
 8020722:	005b      	lsls	r3, r3, #1
 8020724:	4413      	add	r3, r2
 8020726:	00db      	lsls	r3, r3, #3
 8020728:	440b      	add	r3, r1
 802072a:	3314      	adds	r3, #20
 802072c:	2203      	movs	r2, #3
 802072e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020730:	68fb      	ldr	r3, [r7, #12]
 8020732:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 8020736:	79fa      	ldrb	r2, [r7, #7]
 8020738:	4613      	mov	r3, r2
 802073a:	005b      	lsls	r3, r3, #1
 802073c:	4413      	add	r3, r2
 802073e:	00db      	lsls	r3, r3, #3
 8020740:	3308      	adds	r3, #8
 8020742:	4a08      	ldr	r2, [pc, #32]	; (8020764 <etharp_output_to_arp_index+0x124>)
 8020744:	4413      	add	r3, r2
 8020746:	3304      	adds	r3, #4
 8020748:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802074c:	9200      	str	r2, [sp, #0]
 802074e:	460a      	mov	r2, r1
 8020750:	68b9      	ldr	r1, [r7, #8]
 8020752:	68f8      	ldr	r0, [r7, #12]
 8020754:	f001 fed4 	bl	8022500 <ethernet_output>
 8020758:	4603      	mov	r3, r0
}
 802075a:	4618      	mov	r0, r3
 802075c:	3710      	adds	r7, #16
 802075e:	46bd      	mov	sp, r7
 8020760:	bd80      	pop	{r7, pc}
 8020762:	bf00      	nop
 8020764:	200141a8 	.word	0x200141a8
 8020768:	080283e0 	.word	0x080283e0
 802076c:	08028550 	.word	0x08028550
 8020770:	08028458 	.word	0x08028458

08020774 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020774:	b580      	push	{r7, lr}
 8020776:	b08a      	sub	sp, #40	; 0x28
 8020778:	af02      	add	r7, sp, #8
 802077a:	60f8      	str	r0, [r7, #12]
 802077c:	60b9      	str	r1, [r7, #8]
 802077e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8020780:	687b      	ldr	r3, [r7, #4]
 8020782:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020784:	68fb      	ldr	r3, [r7, #12]
 8020786:	2b00      	cmp	r3, #0
 8020788:	d106      	bne.n	8020798 <etharp_output+0x24>
 802078a:	4b73      	ldr	r3, [pc, #460]	; (8020958 <etharp_output+0x1e4>)
 802078c:	f240 321e 	movw	r2, #798	; 0x31e
 8020790:	4972      	ldr	r1, [pc, #456]	; (802095c <etharp_output+0x1e8>)
 8020792:	4873      	ldr	r0, [pc, #460]	; (8020960 <etharp_output+0x1ec>)
 8020794:	f002 f850 	bl	8022838 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020798:	68bb      	ldr	r3, [r7, #8]
 802079a:	2b00      	cmp	r3, #0
 802079c:	d106      	bne.n	80207ac <etharp_output+0x38>
 802079e:	4b6e      	ldr	r3, [pc, #440]	; (8020958 <etharp_output+0x1e4>)
 80207a0:	f240 321f 	movw	r2, #799	; 0x31f
 80207a4:	496f      	ldr	r1, [pc, #444]	; (8020964 <etharp_output+0x1f0>)
 80207a6:	486e      	ldr	r0, [pc, #440]	; (8020960 <etharp_output+0x1ec>)
 80207a8:	f002 f846 	bl	8022838 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80207ac:	687b      	ldr	r3, [r7, #4]
 80207ae:	2b00      	cmp	r3, #0
 80207b0:	d106      	bne.n	80207c0 <etharp_output+0x4c>
 80207b2:	4b69      	ldr	r3, [pc, #420]	; (8020958 <etharp_output+0x1e4>)
 80207b4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80207b8:	496b      	ldr	r1, [pc, #428]	; (8020968 <etharp_output+0x1f4>)
 80207ba:	4869      	ldr	r0, [pc, #420]	; (8020960 <etharp_output+0x1ec>)
 80207bc:	f002 f83c 	bl	8022838 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80207c0:	687b      	ldr	r3, [r7, #4]
 80207c2:	681b      	ldr	r3, [r3, #0]
 80207c4:	68f9      	ldr	r1, [r7, #12]
 80207c6:	4618      	mov	r0, r3
 80207c8:	f000 fefc 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 80207cc:	4603      	mov	r3, r0
 80207ce:	2b00      	cmp	r3, #0
 80207d0:	d002      	beq.n	80207d8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80207d2:	4b66      	ldr	r3, [pc, #408]	; (802096c <etharp_output+0x1f8>)
 80207d4:	61fb      	str	r3, [r7, #28]
 80207d6:	e0af      	b.n	8020938 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	681b      	ldr	r3, [r3, #0]
 80207dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80207e0:	2be0      	cmp	r3, #224	; 0xe0
 80207e2:	d118      	bne.n	8020816 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80207e4:	2301      	movs	r3, #1
 80207e6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80207e8:	2300      	movs	r3, #0
 80207ea:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80207ec:	235e      	movs	r3, #94	; 0x5e
 80207ee:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80207f0:	687b      	ldr	r3, [r7, #4]
 80207f2:	3301      	adds	r3, #1
 80207f4:	781b      	ldrb	r3, [r3, #0]
 80207f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80207fa:	b2db      	uxtb	r3, r3
 80207fc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80207fe:	687b      	ldr	r3, [r7, #4]
 8020800:	3302      	adds	r3, #2
 8020802:	781b      	ldrb	r3, [r3, #0]
 8020804:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020806:	687b      	ldr	r3, [r7, #4]
 8020808:	3303      	adds	r3, #3
 802080a:	781b      	ldrb	r3, [r3, #0]
 802080c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 802080e:	f107 0310 	add.w	r3, r7, #16
 8020812:	61fb      	str	r3, [r7, #28]
 8020814:	e090      	b.n	8020938 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020816:	687b      	ldr	r3, [r7, #4]
 8020818:	681a      	ldr	r2, [r3, #0]
 802081a:	68fb      	ldr	r3, [r7, #12]
 802081c:	3304      	adds	r3, #4
 802081e:	681b      	ldr	r3, [r3, #0]
 8020820:	405a      	eors	r2, r3
 8020822:	68fb      	ldr	r3, [r7, #12]
 8020824:	3308      	adds	r3, #8
 8020826:	681b      	ldr	r3, [r3, #0]
 8020828:	4013      	ands	r3, r2
 802082a:	2b00      	cmp	r3, #0
 802082c:	d012      	beq.n	8020854 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 802082e:	687b      	ldr	r3, [r7, #4]
 8020830:	681b      	ldr	r3, [r3, #0]
 8020832:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020834:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020838:	4293      	cmp	r3, r2
 802083a:	d00b      	beq.n	8020854 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 802083c:	68fb      	ldr	r3, [r7, #12]
 802083e:	330c      	adds	r3, #12
 8020840:	681b      	ldr	r3, [r3, #0]
 8020842:	2b00      	cmp	r3, #0
 8020844:	d003      	beq.n	802084e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020846:	68fb      	ldr	r3, [r7, #12]
 8020848:	330c      	adds	r3, #12
 802084a:	61bb      	str	r3, [r7, #24]
 802084c:	e002      	b.n	8020854 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 802084e:	f06f 0303 	mvn.w	r3, #3
 8020852:	e07d      	b.n	8020950 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020854:	4b46      	ldr	r3, [pc, #280]	; (8020970 <etharp_output+0x1fc>)
 8020856:	781b      	ldrb	r3, [r3, #0]
 8020858:	4619      	mov	r1, r3
 802085a:	4a46      	ldr	r2, [pc, #280]	; (8020974 <etharp_output+0x200>)
 802085c:	460b      	mov	r3, r1
 802085e:	005b      	lsls	r3, r3, #1
 8020860:	440b      	add	r3, r1
 8020862:	00db      	lsls	r3, r3, #3
 8020864:	4413      	add	r3, r2
 8020866:	3314      	adds	r3, #20
 8020868:	781b      	ldrb	r3, [r3, #0]
 802086a:	2b01      	cmp	r3, #1
 802086c:	d925      	bls.n	80208ba <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 802086e:	4b40      	ldr	r3, [pc, #256]	; (8020970 <etharp_output+0x1fc>)
 8020870:	781b      	ldrb	r3, [r3, #0]
 8020872:	4619      	mov	r1, r3
 8020874:	4a3f      	ldr	r2, [pc, #252]	; (8020974 <etharp_output+0x200>)
 8020876:	460b      	mov	r3, r1
 8020878:	005b      	lsls	r3, r3, #1
 802087a:	440b      	add	r3, r1
 802087c:	00db      	lsls	r3, r3, #3
 802087e:	4413      	add	r3, r2
 8020880:	3308      	adds	r3, #8
 8020882:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020884:	68fa      	ldr	r2, [r7, #12]
 8020886:	429a      	cmp	r2, r3
 8020888:	d117      	bne.n	80208ba <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 802088a:	69bb      	ldr	r3, [r7, #24]
 802088c:	681a      	ldr	r2, [r3, #0]
 802088e:	4b38      	ldr	r3, [pc, #224]	; (8020970 <etharp_output+0x1fc>)
 8020890:	781b      	ldrb	r3, [r3, #0]
 8020892:	4618      	mov	r0, r3
 8020894:	4937      	ldr	r1, [pc, #220]	; (8020974 <etharp_output+0x200>)
 8020896:	4603      	mov	r3, r0
 8020898:	005b      	lsls	r3, r3, #1
 802089a:	4403      	add	r3, r0
 802089c:	00db      	lsls	r3, r3, #3
 802089e:	440b      	add	r3, r1
 80208a0:	3304      	adds	r3, #4
 80208a2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80208a4:	429a      	cmp	r2, r3
 80208a6:	d108      	bne.n	80208ba <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80208a8:	4b31      	ldr	r3, [pc, #196]	; (8020970 <etharp_output+0x1fc>)
 80208aa:	781b      	ldrb	r3, [r3, #0]
 80208ac:	461a      	mov	r2, r3
 80208ae:	68b9      	ldr	r1, [r7, #8]
 80208b0:	68f8      	ldr	r0, [r7, #12]
 80208b2:	f7ff fec5 	bl	8020640 <etharp_output_to_arp_index>
 80208b6:	4603      	mov	r3, r0
 80208b8:	e04a      	b.n	8020950 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80208ba:	2300      	movs	r3, #0
 80208bc:	75fb      	strb	r3, [r7, #23]
 80208be:	e031      	b.n	8020924 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80208c0:	7dfa      	ldrb	r2, [r7, #23]
 80208c2:	492c      	ldr	r1, [pc, #176]	; (8020974 <etharp_output+0x200>)
 80208c4:	4613      	mov	r3, r2
 80208c6:	005b      	lsls	r3, r3, #1
 80208c8:	4413      	add	r3, r2
 80208ca:	00db      	lsls	r3, r3, #3
 80208cc:	440b      	add	r3, r1
 80208ce:	3314      	adds	r3, #20
 80208d0:	781b      	ldrb	r3, [r3, #0]
 80208d2:	2b01      	cmp	r3, #1
 80208d4:	d923      	bls.n	802091e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80208d6:	7dfa      	ldrb	r2, [r7, #23]
 80208d8:	4926      	ldr	r1, [pc, #152]	; (8020974 <etharp_output+0x200>)
 80208da:	4613      	mov	r3, r2
 80208dc:	005b      	lsls	r3, r3, #1
 80208de:	4413      	add	r3, r2
 80208e0:	00db      	lsls	r3, r3, #3
 80208e2:	440b      	add	r3, r1
 80208e4:	3308      	adds	r3, #8
 80208e6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80208e8:	68fa      	ldr	r2, [r7, #12]
 80208ea:	429a      	cmp	r2, r3
 80208ec:	d117      	bne.n	802091e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80208ee:	69bb      	ldr	r3, [r7, #24]
 80208f0:	6819      	ldr	r1, [r3, #0]
 80208f2:	7dfa      	ldrb	r2, [r7, #23]
 80208f4:	481f      	ldr	r0, [pc, #124]	; (8020974 <etharp_output+0x200>)
 80208f6:	4613      	mov	r3, r2
 80208f8:	005b      	lsls	r3, r3, #1
 80208fa:	4413      	add	r3, r2
 80208fc:	00db      	lsls	r3, r3, #3
 80208fe:	4403      	add	r3, r0
 8020900:	3304      	adds	r3, #4
 8020902:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020904:	4299      	cmp	r1, r3
 8020906:	d10a      	bne.n	802091e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020908:	4a19      	ldr	r2, [pc, #100]	; (8020970 <etharp_output+0x1fc>)
 802090a:	7dfb      	ldrb	r3, [r7, #23]
 802090c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 802090e:	7dfb      	ldrb	r3, [r7, #23]
 8020910:	461a      	mov	r2, r3
 8020912:	68b9      	ldr	r1, [r7, #8]
 8020914:	68f8      	ldr	r0, [r7, #12]
 8020916:	f7ff fe93 	bl	8020640 <etharp_output_to_arp_index>
 802091a:	4603      	mov	r3, r0
 802091c:	e018      	b.n	8020950 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802091e:	7dfb      	ldrb	r3, [r7, #23]
 8020920:	3301      	adds	r3, #1
 8020922:	75fb      	strb	r3, [r7, #23]
 8020924:	7dfb      	ldrb	r3, [r7, #23]
 8020926:	2b31      	cmp	r3, #49	; 0x31
 8020928:	d9ca      	bls.n	80208c0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802092a:	68ba      	ldr	r2, [r7, #8]
 802092c:	69b9      	ldr	r1, [r7, #24]
 802092e:	68f8      	ldr	r0, [r7, #12]
 8020930:	f000 f822 	bl	8020978 <etharp_query>
 8020934:	4603      	mov	r3, r0
 8020936:	e00b      	b.n	8020950 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020938:	68fb      	ldr	r3, [r7, #12]
 802093a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 802093e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020942:	9300      	str	r3, [sp, #0]
 8020944:	69fb      	ldr	r3, [r7, #28]
 8020946:	68b9      	ldr	r1, [r7, #8]
 8020948:	68f8      	ldr	r0, [r7, #12]
 802094a:	f001 fdd9 	bl	8022500 <ethernet_output>
 802094e:	4603      	mov	r3, r0
}
 8020950:	4618      	mov	r0, r3
 8020952:	3720      	adds	r7, #32
 8020954:	46bd      	mov	sp, r7
 8020956:	bd80      	pop	{r7, pc}
 8020958:	080283e0 	.word	0x080283e0
 802095c:	08028530 	.word	0x08028530
 8020960:	08028458 	.word	0x08028458
 8020964:	08028580 	.word	0x08028580
 8020968:	08028520 	.word	0x08028520
 802096c:	08028f60 	.word	0x08028f60
 8020970:	20014658 	.word	0x20014658
 8020974:	200141a8 	.word	0x200141a8

08020978 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020978:	b580      	push	{r7, lr}
 802097a:	b08c      	sub	sp, #48	; 0x30
 802097c:	af02      	add	r7, sp, #8
 802097e:	60f8      	str	r0, [r7, #12]
 8020980:	60b9      	str	r1, [r7, #8]
 8020982:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020984:	68fb      	ldr	r3, [r7, #12]
 8020986:	332a      	adds	r3, #42	; 0x2a
 8020988:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 802098a:	23ff      	movs	r3, #255	; 0xff
 802098c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020990:	2300      	movs	r3, #0
 8020992:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020994:	68bb      	ldr	r3, [r7, #8]
 8020996:	681b      	ldr	r3, [r3, #0]
 8020998:	68f9      	ldr	r1, [r7, #12]
 802099a:	4618      	mov	r0, r3
 802099c:	f000 fe12 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 80209a0:	4603      	mov	r3, r0
 80209a2:	2b00      	cmp	r3, #0
 80209a4:	d10c      	bne.n	80209c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80209a6:	68bb      	ldr	r3, [r7, #8]
 80209a8:	681b      	ldr	r3, [r3, #0]
 80209aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80209ae:	2be0      	cmp	r3, #224	; 0xe0
 80209b0:	d006      	beq.n	80209c0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80209b2:	68bb      	ldr	r3, [r7, #8]
 80209b4:	2b00      	cmp	r3, #0
 80209b6:	d003      	beq.n	80209c0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80209b8:	68bb      	ldr	r3, [r7, #8]
 80209ba:	681b      	ldr	r3, [r3, #0]
 80209bc:	2b00      	cmp	r3, #0
 80209be:	d102      	bne.n	80209c6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80209c0:	f06f 030f 	mvn.w	r3, #15
 80209c4:	e101      	b.n	8020bca <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80209c6:	68fa      	ldr	r2, [r7, #12]
 80209c8:	2101      	movs	r1, #1
 80209ca:	68b8      	ldr	r0, [r7, #8]
 80209cc:	f7ff fb60 	bl	8020090 <etharp_find_entry>
 80209d0:	4603      	mov	r3, r0
 80209d2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80209d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80209d8:	2b00      	cmp	r3, #0
 80209da:	da02      	bge.n	80209e2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80209dc:	8a7b      	ldrh	r3, [r7, #18]
 80209de:	b25b      	sxtb	r3, r3
 80209e0:	e0f3      	b.n	8020bca <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80209e2:	8a7b      	ldrh	r3, [r7, #18]
 80209e4:	2b7e      	cmp	r3, #126	; 0x7e
 80209e6:	d906      	bls.n	80209f6 <etharp_query+0x7e>
 80209e8:	4b7a      	ldr	r3, [pc, #488]	; (8020bd4 <etharp_query+0x25c>)
 80209ea:	f240 32c1 	movw	r2, #961	; 0x3c1
 80209ee:	497a      	ldr	r1, [pc, #488]	; (8020bd8 <etharp_query+0x260>)
 80209f0:	487a      	ldr	r0, [pc, #488]	; (8020bdc <etharp_query+0x264>)
 80209f2:	f001 ff21 	bl	8022838 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80209f6:	8a7b      	ldrh	r3, [r7, #18]
 80209f8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80209fa:	7c7a      	ldrb	r2, [r7, #17]
 80209fc:	4978      	ldr	r1, [pc, #480]	; (8020be0 <etharp_query+0x268>)
 80209fe:	4613      	mov	r3, r2
 8020a00:	005b      	lsls	r3, r3, #1
 8020a02:	4413      	add	r3, r2
 8020a04:	00db      	lsls	r3, r3, #3
 8020a06:	440b      	add	r3, r1
 8020a08:	3314      	adds	r3, #20
 8020a0a:	781b      	ldrb	r3, [r3, #0]
 8020a0c:	2b00      	cmp	r3, #0
 8020a0e:	d115      	bne.n	8020a3c <etharp_query+0xc4>
    is_new_entry = 1;
 8020a10:	2301      	movs	r3, #1
 8020a12:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020a14:	7c7a      	ldrb	r2, [r7, #17]
 8020a16:	4972      	ldr	r1, [pc, #456]	; (8020be0 <etharp_query+0x268>)
 8020a18:	4613      	mov	r3, r2
 8020a1a:	005b      	lsls	r3, r3, #1
 8020a1c:	4413      	add	r3, r2
 8020a1e:	00db      	lsls	r3, r3, #3
 8020a20:	440b      	add	r3, r1
 8020a22:	3314      	adds	r3, #20
 8020a24:	2201      	movs	r2, #1
 8020a26:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020a28:	7c7a      	ldrb	r2, [r7, #17]
 8020a2a:	496d      	ldr	r1, [pc, #436]	; (8020be0 <etharp_query+0x268>)
 8020a2c:	4613      	mov	r3, r2
 8020a2e:	005b      	lsls	r3, r3, #1
 8020a30:	4413      	add	r3, r2
 8020a32:	00db      	lsls	r3, r3, #3
 8020a34:	440b      	add	r3, r1
 8020a36:	3308      	adds	r3, #8
 8020a38:	68fa      	ldr	r2, [r7, #12]
 8020a3a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020a3c:	7c7a      	ldrb	r2, [r7, #17]
 8020a3e:	4968      	ldr	r1, [pc, #416]	; (8020be0 <etharp_query+0x268>)
 8020a40:	4613      	mov	r3, r2
 8020a42:	005b      	lsls	r3, r3, #1
 8020a44:	4413      	add	r3, r2
 8020a46:	00db      	lsls	r3, r3, #3
 8020a48:	440b      	add	r3, r1
 8020a4a:	3314      	adds	r3, #20
 8020a4c:	781b      	ldrb	r3, [r3, #0]
 8020a4e:	2b01      	cmp	r3, #1
 8020a50:	d011      	beq.n	8020a76 <etharp_query+0xfe>
 8020a52:	7c7a      	ldrb	r2, [r7, #17]
 8020a54:	4962      	ldr	r1, [pc, #392]	; (8020be0 <etharp_query+0x268>)
 8020a56:	4613      	mov	r3, r2
 8020a58:	005b      	lsls	r3, r3, #1
 8020a5a:	4413      	add	r3, r2
 8020a5c:	00db      	lsls	r3, r3, #3
 8020a5e:	440b      	add	r3, r1
 8020a60:	3314      	adds	r3, #20
 8020a62:	781b      	ldrb	r3, [r3, #0]
 8020a64:	2b01      	cmp	r3, #1
 8020a66:	d806      	bhi.n	8020a76 <etharp_query+0xfe>
 8020a68:	4b5a      	ldr	r3, [pc, #360]	; (8020bd4 <etharp_query+0x25c>)
 8020a6a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020a6e:	495d      	ldr	r1, [pc, #372]	; (8020be4 <etharp_query+0x26c>)
 8020a70:	485a      	ldr	r0, [pc, #360]	; (8020bdc <etharp_query+0x264>)
 8020a72:	f001 fee1 	bl	8022838 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020a76:	6a3b      	ldr	r3, [r7, #32]
 8020a78:	2b00      	cmp	r3, #0
 8020a7a:	d102      	bne.n	8020a82 <etharp_query+0x10a>
 8020a7c:	687b      	ldr	r3, [r7, #4]
 8020a7e:	2b00      	cmp	r3, #0
 8020a80:	d10c      	bne.n	8020a9c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020a82:	68b9      	ldr	r1, [r7, #8]
 8020a84:	68f8      	ldr	r0, [r7, #12]
 8020a86:	f000 f963 	bl	8020d50 <etharp_request>
 8020a8a:	4603      	mov	r3, r0
 8020a8c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020a90:	687b      	ldr	r3, [r7, #4]
 8020a92:	2b00      	cmp	r3, #0
 8020a94:	d102      	bne.n	8020a9c <etharp_query+0x124>
      return result;
 8020a96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8020a9a:	e096      	b.n	8020bca <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020a9c:	687b      	ldr	r3, [r7, #4]
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d106      	bne.n	8020ab0 <etharp_query+0x138>
 8020aa2:	4b4c      	ldr	r3, [pc, #304]	; (8020bd4 <etharp_query+0x25c>)
 8020aa4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8020aa8:	494f      	ldr	r1, [pc, #316]	; (8020be8 <etharp_query+0x270>)
 8020aaa:	484c      	ldr	r0, [pc, #304]	; (8020bdc <etharp_query+0x264>)
 8020aac:	f001 fec4 	bl	8022838 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020ab0:	7c7a      	ldrb	r2, [r7, #17]
 8020ab2:	494b      	ldr	r1, [pc, #300]	; (8020be0 <etharp_query+0x268>)
 8020ab4:	4613      	mov	r3, r2
 8020ab6:	005b      	lsls	r3, r3, #1
 8020ab8:	4413      	add	r3, r2
 8020aba:	00db      	lsls	r3, r3, #3
 8020abc:	440b      	add	r3, r1
 8020abe:	3314      	adds	r3, #20
 8020ac0:	781b      	ldrb	r3, [r3, #0]
 8020ac2:	2b01      	cmp	r3, #1
 8020ac4:	d917      	bls.n	8020af6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8020ac6:	4a49      	ldr	r2, [pc, #292]	; (8020bec <etharp_query+0x274>)
 8020ac8:	7c7b      	ldrb	r3, [r7, #17]
 8020aca:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020acc:	7c7a      	ldrb	r2, [r7, #17]
 8020ace:	4613      	mov	r3, r2
 8020ad0:	005b      	lsls	r3, r3, #1
 8020ad2:	4413      	add	r3, r2
 8020ad4:	00db      	lsls	r3, r3, #3
 8020ad6:	3308      	adds	r3, #8
 8020ad8:	4a41      	ldr	r2, [pc, #260]	; (8020be0 <etharp_query+0x268>)
 8020ada:	4413      	add	r3, r2
 8020adc:	3304      	adds	r3, #4
 8020ade:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020ae2:	9200      	str	r2, [sp, #0]
 8020ae4:	697a      	ldr	r2, [r7, #20]
 8020ae6:	6879      	ldr	r1, [r7, #4]
 8020ae8:	68f8      	ldr	r0, [r7, #12]
 8020aea:	f001 fd09 	bl	8022500 <ethernet_output>
 8020aee:	4603      	mov	r3, r0
 8020af0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020af4:	e067      	b.n	8020bc6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8020af6:	7c7a      	ldrb	r2, [r7, #17]
 8020af8:	4939      	ldr	r1, [pc, #228]	; (8020be0 <etharp_query+0x268>)
 8020afa:	4613      	mov	r3, r2
 8020afc:	005b      	lsls	r3, r3, #1
 8020afe:	4413      	add	r3, r2
 8020b00:	00db      	lsls	r3, r3, #3
 8020b02:	440b      	add	r3, r1
 8020b04:	3314      	adds	r3, #20
 8020b06:	781b      	ldrb	r3, [r3, #0]
 8020b08:	2b01      	cmp	r3, #1
 8020b0a:	d15c      	bne.n	8020bc6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020b0c:	2300      	movs	r3, #0
 8020b0e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020b10:	687b      	ldr	r3, [r7, #4]
 8020b12:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020b14:	e01c      	b.n	8020b50 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8020b16:	69fb      	ldr	r3, [r7, #28]
 8020b18:	895a      	ldrh	r2, [r3, #10]
 8020b1a:	69fb      	ldr	r3, [r7, #28]
 8020b1c:	891b      	ldrh	r3, [r3, #8]
 8020b1e:	429a      	cmp	r2, r3
 8020b20:	d10a      	bne.n	8020b38 <etharp_query+0x1c0>
 8020b22:	69fb      	ldr	r3, [r7, #28]
 8020b24:	681b      	ldr	r3, [r3, #0]
 8020b26:	2b00      	cmp	r3, #0
 8020b28:	d006      	beq.n	8020b38 <etharp_query+0x1c0>
 8020b2a:	4b2a      	ldr	r3, [pc, #168]	; (8020bd4 <etharp_query+0x25c>)
 8020b2c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8020b30:	492f      	ldr	r1, [pc, #188]	; (8020bf0 <etharp_query+0x278>)
 8020b32:	482a      	ldr	r0, [pc, #168]	; (8020bdc <etharp_query+0x264>)
 8020b34:	f001 fe80 	bl	8022838 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8020b38:	69fb      	ldr	r3, [r7, #28]
 8020b3a:	7b1b      	ldrb	r3, [r3, #12]
 8020b3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8020b40:	2b00      	cmp	r3, #0
 8020b42:	d002      	beq.n	8020b4a <etharp_query+0x1d2>
        copy_needed = 1;
 8020b44:	2301      	movs	r3, #1
 8020b46:	61bb      	str	r3, [r7, #24]
        break;
 8020b48:	e005      	b.n	8020b56 <etharp_query+0x1de>
      }
      p = p->next;
 8020b4a:	69fb      	ldr	r3, [r7, #28]
 8020b4c:	681b      	ldr	r3, [r3, #0]
 8020b4e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020b50:	69fb      	ldr	r3, [r7, #28]
 8020b52:	2b00      	cmp	r3, #0
 8020b54:	d1df      	bne.n	8020b16 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8020b56:	69bb      	ldr	r3, [r7, #24]
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d007      	beq.n	8020b6c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8020b5c:	687a      	ldr	r2, [r7, #4]
 8020b5e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8020b62:	200e      	movs	r0, #14
 8020b64:	f7fe fbbc 	bl	801f2e0 <pbuf_clone>
 8020b68:	61f8      	str	r0, [r7, #28]
 8020b6a:	e004      	b.n	8020b76 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8020b6c:	687b      	ldr	r3, [r7, #4]
 8020b6e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8020b70:	69f8      	ldr	r0, [r7, #28]
 8020b72:	f7fe f9c9 	bl	801ef08 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8020b76:	69fb      	ldr	r3, [r7, #28]
 8020b78:	2b00      	cmp	r3, #0
 8020b7a:	d021      	beq.n	8020bc0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8020b7c:	7c7a      	ldrb	r2, [r7, #17]
 8020b7e:	4918      	ldr	r1, [pc, #96]	; (8020be0 <etharp_query+0x268>)
 8020b80:	4613      	mov	r3, r2
 8020b82:	005b      	lsls	r3, r3, #1
 8020b84:	4413      	add	r3, r2
 8020b86:	00db      	lsls	r3, r3, #3
 8020b88:	440b      	add	r3, r1
 8020b8a:	681b      	ldr	r3, [r3, #0]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d00a      	beq.n	8020ba6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020b90:	7c7a      	ldrb	r2, [r7, #17]
 8020b92:	4913      	ldr	r1, [pc, #76]	; (8020be0 <etharp_query+0x268>)
 8020b94:	4613      	mov	r3, r2
 8020b96:	005b      	lsls	r3, r3, #1
 8020b98:	4413      	add	r3, r2
 8020b9a:	00db      	lsls	r3, r3, #3
 8020b9c:	440b      	add	r3, r1
 8020b9e:	681b      	ldr	r3, [r3, #0]
 8020ba0:	4618      	mov	r0, r3
 8020ba2:	f7fe f911 	bl	801edc8 <pbuf_free>
      }
      arp_table[i].q = p;
 8020ba6:	7c7a      	ldrb	r2, [r7, #17]
 8020ba8:	490d      	ldr	r1, [pc, #52]	; (8020be0 <etharp_query+0x268>)
 8020baa:	4613      	mov	r3, r2
 8020bac:	005b      	lsls	r3, r3, #1
 8020bae:	4413      	add	r3, r2
 8020bb0:	00db      	lsls	r3, r3, #3
 8020bb2:	440b      	add	r3, r1
 8020bb4:	69fa      	ldr	r2, [r7, #28]
 8020bb6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8020bb8:	2300      	movs	r3, #0
 8020bba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020bbe:	e002      	b.n	8020bc6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020bc0:	23ff      	movs	r3, #255	; 0xff
 8020bc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8020bc6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8020bca:	4618      	mov	r0, r3
 8020bcc:	3728      	adds	r7, #40	; 0x28
 8020bce:	46bd      	mov	sp, r7
 8020bd0:	bd80      	pop	{r7, pc}
 8020bd2:	bf00      	nop
 8020bd4:	080283e0 	.word	0x080283e0
 8020bd8:	0802858c 	.word	0x0802858c
 8020bdc:	08028458 	.word	0x08028458
 8020be0:	200141a8 	.word	0x200141a8
 8020be4:	0802859c 	.word	0x0802859c
 8020be8:	08028580 	.word	0x08028580
 8020bec:	20014658 	.word	0x20014658
 8020bf0:	080285c4 	.word	0x080285c4

08020bf4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020bf4:	b580      	push	{r7, lr}
 8020bf6:	b08a      	sub	sp, #40	; 0x28
 8020bf8:	af02      	add	r7, sp, #8
 8020bfa:	60f8      	str	r0, [r7, #12]
 8020bfc:	60b9      	str	r1, [r7, #8]
 8020bfe:	607a      	str	r2, [r7, #4]
 8020c00:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020c02:	2300      	movs	r3, #0
 8020c04:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020c06:	68fb      	ldr	r3, [r7, #12]
 8020c08:	2b00      	cmp	r3, #0
 8020c0a:	d106      	bne.n	8020c1a <etharp_raw+0x26>
 8020c0c:	4b3a      	ldr	r3, [pc, #232]	; (8020cf8 <etharp_raw+0x104>)
 8020c0e:	f240 4257 	movw	r2, #1111	; 0x457
 8020c12:	493a      	ldr	r1, [pc, #232]	; (8020cfc <etharp_raw+0x108>)
 8020c14:	483a      	ldr	r0, [pc, #232]	; (8020d00 <etharp_raw+0x10c>)
 8020c16:	f001 fe0f 	bl	8022838 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8020c1a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020c1e:	211c      	movs	r1, #28
 8020c20:	200e      	movs	r0, #14
 8020c22:	f7fd fdef 	bl	801e804 <pbuf_alloc>
 8020c26:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8020c28:	69bb      	ldr	r3, [r7, #24]
 8020c2a:	2b00      	cmp	r3, #0
 8020c2c:	d102      	bne.n	8020c34 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8020c2e:	f04f 33ff 	mov.w	r3, #4294967295
 8020c32:	e05d      	b.n	8020cf0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8020c34:	69bb      	ldr	r3, [r7, #24]
 8020c36:	895b      	ldrh	r3, [r3, #10]
 8020c38:	2b1b      	cmp	r3, #27
 8020c3a:	d806      	bhi.n	8020c4a <etharp_raw+0x56>
 8020c3c:	4b2e      	ldr	r3, [pc, #184]	; (8020cf8 <etharp_raw+0x104>)
 8020c3e:	f240 4262 	movw	r2, #1122	; 0x462
 8020c42:	4930      	ldr	r1, [pc, #192]	; (8020d04 <etharp_raw+0x110>)
 8020c44:	482e      	ldr	r0, [pc, #184]	; (8020d00 <etharp_raw+0x10c>)
 8020c46:	f001 fdf7 	bl	8022838 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8020c4a:	69bb      	ldr	r3, [r7, #24]
 8020c4c:	685b      	ldr	r3, [r3, #4]
 8020c4e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8020c50:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8020c52:	4618      	mov	r0, r3
 8020c54:	f7fc fcdc 	bl	801d610 <lwip_htons>
 8020c58:	4603      	mov	r3, r0
 8020c5a:	461a      	mov	r2, r3
 8020c5c:	697b      	ldr	r3, [r7, #20]
 8020c5e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8020c60:	68fb      	ldr	r3, [r7, #12]
 8020c62:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8020c66:	2b06      	cmp	r3, #6
 8020c68:	d006      	beq.n	8020c78 <etharp_raw+0x84>
 8020c6a:	4b23      	ldr	r3, [pc, #140]	; (8020cf8 <etharp_raw+0x104>)
 8020c6c:	f240 4269 	movw	r2, #1129	; 0x469
 8020c70:	4925      	ldr	r1, [pc, #148]	; (8020d08 <etharp_raw+0x114>)
 8020c72:	4823      	ldr	r0, [pc, #140]	; (8020d00 <etharp_raw+0x10c>)
 8020c74:	f001 fde0 	bl	8022838 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8020c78:	697b      	ldr	r3, [r7, #20]
 8020c7a:	3308      	adds	r3, #8
 8020c7c:	2206      	movs	r2, #6
 8020c7e:	6839      	ldr	r1, [r7, #0]
 8020c80:	4618      	mov	r0, r3
 8020c82:	f001 fcc9 	bl	8022618 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8020c86:	697b      	ldr	r3, [r7, #20]
 8020c88:	3312      	adds	r3, #18
 8020c8a:	2206      	movs	r2, #6
 8020c8c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020c8e:	4618      	mov	r0, r3
 8020c90:	f001 fcc2 	bl	8022618 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020c94:	697b      	ldr	r3, [r7, #20]
 8020c96:	330e      	adds	r3, #14
 8020c98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8020c9a:	6812      	ldr	r2, [r2, #0]
 8020c9c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020c9e:	697b      	ldr	r3, [r7, #20]
 8020ca0:	3318      	adds	r3, #24
 8020ca2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020ca4:	6812      	ldr	r2, [r2, #0]
 8020ca6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8020ca8:	697b      	ldr	r3, [r7, #20]
 8020caa:	2200      	movs	r2, #0
 8020cac:	701a      	strb	r2, [r3, #0]
 8020cae:	2200      	movs	r2, #0
 8020cb0:	f042 0201 	orr.w	r2, r2, #1
 8020cb4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8020cb6:	697b      	ldr	r3, [r7, #20]
 8020cb8:	2200      	movs	r2, #0
 8020cba:	f042 0208 	orr.w	r2, r2, #8
 8020cbe:	709a      	strb	r2, [r3, #2]
 8020cc0:	2200      	movs	r2, #0
 8020cc2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020cc4:	697b      	ldr	r3, [r7, #20]
 8020cc6:	2206      	movs	r2, #6
 8020cc8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8020cca:	697b      	ldr	r3, [r7, #20]
 8020ccc:	2204      	movs	r2, #4
 8020cce:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020cd0:	f640 0306 	movw	r3, #2054	; 0x806
 8020cd4:	9300      	str	r3, [sp, #0]
 8020cd6:	687b      	ldr	r3, [r7, #4]
 8020cd8:	68ba      	ldr	r2, [r7, #8]
 8020cda:	69b9      	ldr	r1, [r7, #24]
 8020cdc:	68f8      	ldr	r0, [r7, #12]
 8020cde:	f001 fc0f 	bl	8022500 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020ce2:	69b8      	ldr	r0, [r7, #24]
 8020ce4:	f7fe f870 	bl	801edc8 <pbuf_free>
  p = NULL;
 8020ce8:	2300      	movs	r3, #0
 8020cea:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020cec:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020cf0:	4618      	mov	r0, r3
 8020cf2:	3720      	adds	r7, #32
 8020cf4:	46bd      	mov	sp, r7
 8020cf6:	bd80      	pop	{r7, pc}
 8020cf8:	080283e0 	.word	0x080283e0
 8020cfc:	08028530 	.word	0x08028530
 8020d00:	08028458 	.word	0x08028458
 8020d04:	080285e0 	.word	0x080285e0
 8020d08:	08028614 	.word	0x08028614

08020d0c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020d0c:	b580      	push	{r7, lr}
 8020d0e:	b088      	sub	sp, #32
 8020d10:	af04      	add	r7, sp, #16
 8020d12:	60f8      	str	r0, [r7, #12]
 8020d14:	60b9      	str	r1, [r7, #8]
 8020d16:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020d18:	68fb      	ldr	r3, [r7, #12]
 8020d1a:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020d1e:	68fb      	ldr	r3, [r7, #12]
 8020d20:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020d24:	68fb      	ldr	r3, [r7, #12]
 8020d26:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8020d28:	2201      	movs	r2, #1
 8020d2a:	9203      	str	r2, [sp, #12]
 8020d2c:	68ba      	ldr	r2, [r7, #8]
 8020d2e:	9202      	str	r2, [sp, #8]
 8020d30:	4a06      	ldr	r2, [pc, #24]	; (8020d4c <etharp_request_dst+0x40>)
 8020d32:	9201      	str	r2, [sp, #4]
 8020d34:	9300      	str	r3, [sp, #0]
 8020d36:	4603      	mov	r3, r0
 8020d38:	687a      	ldr	r2, [r7, #4]
 8020d3a:	68f8      	ldr	r0, [r7, #12]
 8020d3c:	f7ff ff5a 	bl	8020bf4 <etharp_raw>
 8020d40:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8020d42:	4618      	mov	r0, r3
 8020d44:	3710      	adds	r7, #16
 8020d46:	46bd      	mov	sp, r7
 8020d48:	bd80      	pop	{r7, pc}
 8020d4a:	bf00      	nop
 8020d4c:	08028f68 	.word	0x08028f68

08020d50 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8020d50:	b580      	push	{r7, lr}
 8020d52:	b082      	sub	sp, #8
 8020d54:	af00      	add	r7, sp, #0
 8020d56:	6078      	str	r0, [r7, #4]
 8020d58:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8020d5a:	4a05      	ldr	r2, [pc, #20]	; (8020d70 <etharp_request+0x20>)
 8020d5c:	6839      	ldr	r1, [r7, #0]
 8020d5e:	6878      	ldr	r0, [r7, #4]
 8020d60:	f7ff ffd4 	bl	8020d0c <etharp_request_dst>
 8020d64:	4603      	mov	r3, r0
}
 8020d66:	4618      	mov	r0, r3
 8020d68:	3708      	adds	r7, #8
 8020d6a:	46bd      	mov	sp, r7
 8020d6c:	bd80      	pop	{r7, pc}
 8020d6e:	bf00      	nop
 8020d70:	08028f60 	.word	0x08028f60

08020d74 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8020d74:	b580      	push	{r7, lr}
 8020d76:	b08e      	sub	sp, #56	; 0x38
 8020d78:	af04      	add	r7, sp, #16
 8020d7a:	6078      	str	r0, [r7, #4]
 8020d7c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8020d7e:	4b79      	ldr	r3, [pc, #484]	; (8020f64 <icmp_input+0x1f0>)
 8020d80:	689b      	ldr	r3, [r3, #8]
 8020d82:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8020d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8020d86:	781b      	ldrb	r3, [r3, #0]
 8020d88:	f003 030f 	and.w	r3, r3, #15
 8020d8c:	b2db      	uxtb	r3, r3
 8020d8e:	009b      	lsls	r3, r3, #2
 8020d90:	b2db      	uxtb	r3, r3
 8020d92:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020d94:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020d96:	2b13      	cmp	r3, #19
 8020d98:	f240 80cd 	bls.w	8020f36 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020d9c:	687b      	ldr	r3, [r7, #4]
 8020d9e:	895b      	ldrh	r3, [r3, #10]
 8020da0:	2b03      	cmp	r3, #3
 8020da2:	f240 80ca 	bls.w	8020f3a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	685b      	ldr	r3, [r3, #4]
 8020daa:	781b      	ldrb	r3, [r3, #0]
 8020dac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020db0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020db4:	2b00      	cmp	r3, #0
 8020db6:	f000 80b7 	beq.w	8020f28 <icmp_input+0x1b4>
 8020dba:	2b08      	cmp	r3, #8
 8020dbc:	f040 80b7 	bne.w	8020f2e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020dc0:	4b69      	ldr	r3, [pc, #420]	; (8020f68 <icmp_input+0x1f4>)
 8020dc2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020dc4:	4b67      	ldr	r3, [pc, #412]	; (8020f64 <icmp_input+0x1f0>)
 8020dc6:	695b      	ldr	r3, [r3, #20]
 8020dc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020dcc:	2be0      	cmp	r3, #224	; 0xe0
 8020dce:	f000 80bb 	beq.w	8020f48 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020dd2:	4b64      	ldr	r3, [pc, #400]	; (8020f64 <icmp_input+0x1f0>)
 8020dd4:	695b      	ldr	r3, [r3, #20]
 8020dd6:	4a63      	ldr	r2, [pc, #396]	; (8020f64 <icmp_input+0x1f0>)
 8020dd8:	6812      	ldr	r2, [r2, #0]
 8020dda:	4611      	mov	r1, r2
 8020ddc:	4618      	mov	r0, r3
 8020dde:	f000 fbf1 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 8020de2:	4603      	mov	r3, r0
 8020de4:	2b00      	cmp	r3, #0
 8020de6:	f040 80b1 	bne.w	8020f4c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8020dea:	687b      	ldr	r3, [r7, #4]
 8020dec:	891b      	ldrh	r3, [r3, #8]
 8020dee:	2b07      	cmp	r3, #7
 8020df0:	f240 80a5 	bls.w	8020f3e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020df4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020df6:	330e      	adds	r3, #14
 8020df8:	4619      	mov	r1, r3
 8020dfa:	6878      	ldr	r0, [r7, #4]
 8020dfc:	f7fd ff4e 	bl	801ec9c <pbuf_add_header>
 8020e00:	4603      	mov	r3, r0
 8020e02:	2b00      	cmp	r3, #0
 8020e04:	d04b      	beq.n	8020e9e <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8020e06:	687b      	ldr	r3, [r7, #4]
 8020e08:	891a      	ldrh	r2, [r3, #8]
 8020e0a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020e0c:	4413      	add	r3, r2
 8020e0e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020e10:	687b      	ldr	r3, [r7, #4]
 8020e12:	891b      	ldrh	r3, [r3, #8]
 8020e14:	8b7a      	ldrh	r2, [r7, #26]
 8020e16:	429a      	cmp	r2, r3
 8020e18:	f0c0 809a 	bcc.w	8020f50 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020e1c:	8b7b      	ldrh	r3, [r7, #26]
 8020e1e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020e22:	4619      	mov	r1, r3
 8020e24:	200e      	movs	r0, #14
 8020e26:	f7fd fced 	bl	801e804 <pbuf_alloc>
 8020e2a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8020e2c:	697b      	ldr	r3, [r7, #20]
 8020e2e:	2b00      	cmp	r3, #0
 8020e30:	f000 8090 	beq.w	8020f54 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8020e34:	697b      	ldr	r3, [r7, #20]
 8020e36:	895b      	ldrh	r3, [r3, #10]
 8020e38:	461a      	mov	r2, r3
 8020e3a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020e3c:	3308      	adds	r3, #8
 8020e3e:	429a      	cmp	r2, r3
 8020e40:	d203      	bcs.n	8020e4a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8020e42:	6978      	ldr	r0, [r7, #20]
 8020e44:	f7fd ffc0 	bl	801edc8 <pbuf_free>
          goto icmperr;
 8020e48:	e085      	b.n	8020f56 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8020e4a:	697b      	ldr	r3, [r7, #20]
 8020e4c:	685b      	ldr	r3, [r3, #4]
 8020e4e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8020e50:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8020e52:	4618      	mov	r0, r3
 8020e54:	f001 fbe0 	bl	8022618 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8020e58:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020e5a:	4619      	mov	r1, r3
 8020e5c:	6978      	ldr	r0, [r7, #20]
 8020e5e:	f7fd ff2d 	bl	801ecbc <pbuf_remove_header>
 8020e62:	4603      	mov	r3, r0
 8020e64:	2b00      	cmp	r3, #0
 8020e66:	d009      	beq.n	8020e7c <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8020e68:	4b40      	ldr	r3, [pc, #256]	; (8020f6c <icmp_input+0x1f8>)
 8020e6a:	22b6      	movs	r2, #182	; 0xb6
 8020e6c:	4940      	ldr	r1, [pc, #256]	; (8020f70 <icmp_input+0x1fc>)
 8020e6e:	4841      	ldr	r0, [pc, #260]	; (8020f74 <icmp_input+0x200>)
 8020e70:	f001 fce2 	bl	8022838 <iprintf>
          pbuf_free(r);
 8020e74:	6978      	ldr	r0, [r7, #20]
 8020e76:	f7fd ffa7 	bl	801edc8 <pbuf_free>
          goto icmperr;
 8020e7a:	e06c      	b.n	8020f56 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8020e7c:	6879      	ldr	r1, [r7, #4]
 8020e7e:	6978      	ldr	r0, [r7, #20]
 8020e80:	f7fe f8ca 	bl	801f018 <pbuf_copy>
 8020e84:	4603      	mov	r3, r0
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d003      	beq.n	8020e92 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8020e8a:	6978      	ldr	r0, [r7, #20]
 8020e8c:	f7fd ff9c 	bl	801edc8 <pbuf_free>
          goto icmperr;
 8020e90:	e061      	b.n	8020f56 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020e92:	6878      	ldr	r0, [r7, #4]
 8020e94:	f7fd ff98 	bl	801edc8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8020e98:	697b      	ldr	r3, [r7, #20]
 8020e9a:	607b      	str	r3, [r7, #4]
 8020e9c:	e00f      	b.n	8020ebe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ea0:	330e      	adds	r3, #14
 8020ea2:	4619      	mov	r1, r3
 8020ea4:	6878      	ldr	r0, [r7, #4]
 8020ea6:	f7fd ff09 	bl	801ecbc <pbuf_remove_header>
 8020eaa:	4603      	mov	r3, r0
 8020eac:	2b00      	cmp	r3, #0
 8020eae:	d006      	beq.n	8020ebe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020eb0:	4b2e      	ldr	r3, [pc, #184]	; (8020f6c <icmp_input+0x1f8>)
 8020eb2:	22c7      	movs	r2, #199	; 0xc7
 8020eb4:	4930      	ldr	r1, [pc, #192]	; (8020f78 <icmp_input+0x204>)
 8020eb6:	482f      	ldr	r0, [pc, #188]	; (8020f74 <icmp_input+0x200>)
 8020eb8:	f001 fcbe 	bl	8022838 <iprintf>
          goto icmperr;
 8020ebc:	e04b      	b.n	8020f56 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	685b      	ldr	r3, [r3, #4]
 8020ec2:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020ec6:	4619      	mov	r1, r3
 8020ec8:	6878      	ldr	r0, [r7, #4]
 8020eca:	f7fd fee7 	bl	801ec9c <pbuf_add_header>
 8020ece:	4603      	mov	r3, r0
 8020ed0:	2b00      	cmp	r3, #0
 8020ed2:	d12b      	bne.n	8020f2c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	685b      	ldr	r3, [r3, #4]
 8020ed8:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8020eda:	69fb      	ldr	r3, [r7, #28]
 8020edc:	681a      	ldr	r2, [r3, #0]
 8020ede:	68fb      	ldr	r3, [r7, #12]
 8020ee0:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020ee2:	4b20      	ldr	r3, [pc, #128]	; (8020f64 <icmp_input+0x1f0>)
 8020ee4:	691a      	ldr	r2, [r3, #16]
 8020ee6:	68fb      	ldr	r3, [r7, #12]
 8020ee8:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8020eea:	693b      	ldr	r3, [r7, #16]
 8020eec:	2200      	movs	r2, #0
 8020eee:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8020ef0:	693b      	ldr	r3, [r7, #16]
 8020ef2:	2200      	movs	r2, #0
 8020ef4:	709a      	strb	r2, [r3, #2]
 8020ef6:	2200      	movs	r2, #0
 8020ef8:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8020efa:	68fb      	ldr	r3, [r7, #12]
 8020efc:	22ff      	movs	r2, #255	; 0xff
 8020efe:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020f00:	68fb      	ldr	r3, [r7, #12]
 8020f02:	2200      	movs	r2, #0
 8020f04:	729a      	strb	r2, [r3, #10]
 8020f06:	2200      	movs	r2, #0
 8020f08:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8020f0a:	683b      	ldr	r3, [r7, #0]
 8020f0c:	9302      	str	r3, [sp, #8]
 8020f0e:	2301      	movs	r3, #1
 8020f10:	9301      	str	r3, [sp, #4]
 8020f12:	2300      	movs	r3, #0
 8020f14:	9300      	str	r3, [sp, #0]
 8020f16:	23ff      	movs	r3, #255	; 0xff
 8020f18:	2200      	movs	r2, #0
 8020f1a:	69f9      	ldr	r1, [r7, #28]
 8020f1c:	6878      	ldr	r0, [r7, #4]
 8020f1e:	f000 fa6b 	bl	80213f8 <ip4_output_if>
 8020f22:	4603      	mov	r3, r0
 8020f24:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8020f26:	e001      	b.n	8020f2c <icmp_input+0x1b8>
      break;
 8020f28:	bf00      	nop
 8020f2a:	e000      	b.n	8020f2e <icmp_input+0x1ba>
      break;
 8020f2c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8020f2e:	6878      	ldr	r0, [r7, #4]
 8020f30:	f7fd ff4a 	bl	801edc8 <pbuf_free>
  return;
 8020f34:	e013      	b.n	8020f5e <icmp_input+0x1ea>
    goto lenerr;
 8020f36:	bf00      	nop
 8020f38:	e002      	b.n	8020f40 <icmp_input+0x1cc>
    goto lenerr;
 8020f3a:	bf00      	nop
 8020f3c:	e000      	b.n	8020f40 <icmp_input+0x1cc>
        goto lenerr;
 8020f3e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8020f40:	6878      	ldr	r0, [r7, #4]
 8020f42:	f7fd ff41 	bl	801edc8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020f46:	e00a      	b.n	8020f5e <icmp_input+0x1ea>
        goto icmperr;
 8020f48:	bf00      	nop
 8020f4a:	e004      	b.n	8020f56 <icmp_input+0x1e2>
        goto icmperr;
 8020f4c:	bf00      	nop
 8020f4e:	e002      	b.n	8020f56 <icmp_input+0x1e2>
          goto icmperr;
 8020f50:	bf00      	nop
 8020f52:	e000      	b.n	8020f56 <icmp_input+0x1e2>
          goto icmperr;
 8020f54:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8020f56:	6878      	ldr	r0, [r7, #4]
 8020f58:	f7fd ff36 	bl	801edc8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8020f5c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8020f5e:	3728      	adds	r7, #40	; 0x28
 8020f60:	46bd      	mov	sp, r7
 8020f62:	bd80      	pop	{r7, pc}
 8020f64:	20010b40 	.word	0x20010b40
 8020f68:	20010b54 	.word	0x20010b54
 8020f6c:	08028658 	.word	0x08028658
 8020f70:	08028690 	.word	0x08028690
 8020f74:	080286c8 	.word	0x080286c8
 8020f78:	080286f0 	.word	0x080286f0

08020f7c <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8020f7c:	b580      	push	{r7, lr}
 8020f7e:	b082      	sub	sp, #8
 8020f80:	af00      	add	r7, sp, #0
 8020f82:	6078      	str	r0, [r7, #4]
 8020f84:	460b      	mov	r3, r1
 8020f86:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8020f88:	78fb      	ldrb	r3, [r7, #3]
 8020f8a:	461a      	mov	r2, r3
 8020f8c:	2103      	movs	r1, #3
 8020f8e:	6878      	ldr	r0, [r7, #4]
 8020f90:	f000 f814 	bl	8020fbc <icmp_send_response>
}
 8020f94:	bf00      	nop
 8020f96:	3708      	adds	r7, #8
 8020f98:	46bd      	mov	sp, r7
 8020f9a:	bd80      	pop	{r7, pc}

08020f9c <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020f9c:	b580      	push	{r7, lr}
 8020f9e:	b082      	sub	sp, #8
 8020fa0:	af00      	add	r7, sp, #0
 8020fa2:	6078      	str	r0, [r7, #4]
 8020fa4:	460b      	mov	r3, r1
 8020fa6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020fa8:	78fb      	ldrb	r3, [r7, #3]
 8020faa:	461a      	mov	r2, r3
 8020fac:	210b      	movs	r1, #11
 8020fae:	6878      	ldr	r0, [r7, #4]
 8020fb0:	f000 f804 	bl	8020fbc <icmp_send_response>
}
 8020fb4:	bf00      	nop
 8020fb6:	3708      	adds	r7, #8
 8020fb8:	46bd      	mov	sp, r7
 8020fba:	bd80      	pop	{r7, pc}

08020fbc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020fbc:	b580      	push	{r7, lr}
 8020fbe:	b08c      	sub	sp, #48	; 0x30
 8020fc0:	af04      	add	r7, sp, #16
 8020fc2:	6078      	str	r0, [r7, #4]
 8020fc4:	460b      	mov	r3, r1
 8020fc6:	70fb      	strb	r3, [r7, #3]
 8020fc8:	4613      	mov	r3, r2
 8020fca:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020fcc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020fd0:	2124      	movs	r1, #36	; 0x24
 8020fd2:	2022      	movs	r0, #34	; 0x22
 8020fd4:	f7fd fc16 	bl	801e804 <pbuf_alloc>
 8020fd8:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020fda:	69fb      	ldr	r3, [r7, #28]
 8020fdc:	2b00      	cmp	r3, #0
 8020fde:	d04c      	beq.n	802107a <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020fe0:	69fb      	ldr	r3, [r7, #28]
 8020fe2:	895b      	ldrh	r3, [r3, #10]
 8020fe4:	2b23      	cmp	r3, #35	; 0x23
 8020fe6:	d806      	bhi.n	8020ff6 <icmp_send_response+0x3a>
 8020fe8:	4b26      	ldr	r3, [pc, #152]	; (8021084 <icmp_send_response+0xc8>)
 8020fea:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020fee:	4926      	ldr	r1, [pc, #152]	; (8021088 <icmp_send_response+0xcc>)
 8020ff0:	4826      	ldr	r0, [pc, #152]	; (802108c <icmp_send_response+0xd0>)
 8020ff2:	f001 fc21 	bl	8022838 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	685b      	ldr	r3, [r3, #4]
 8020ffa:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020ffc:	69fb      	ldr	r3, [r7, #28]
 8020ffe:	685b      	ldr	r3, [r3, #4]
 8021000:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8021002:	697b      	ldr	r3, [r7, #20]
 8021004:	78fa      	ldrb	r2, [r7, #3]
 8021006:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8021008:	697b      	ldr	r3, [r7, #20]
 802100a:	78ba      	ldrb	r2, [r7, #2]
 802100c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 802100e:	697b      	ldr	r3, [r7, #20]
 8021010:	2200      	movs	r2, #0
 8021012:	711a      	strb	r2, [r3, #4]
 8021014:	2200      	movs	r2, #0
 8021016:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8021018:	697b      	ldr	r3, [r7, #20]
 802101a:	2200      	movs	r2, #0
 802101c:	719a      	strb	r2, [r3, #6]
 802101e:	2200      	movs	r2, #0
 8021020:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8021022:	69fb      	ldr	r3, [r7, #28]
 8021024:	685b      	ldr	r3, [r3, #4]
 8021026:	f103 0008 	add.w	r0, r3, #8
 802102a:	687b      	ldr	r3, [r7, #4]
 802102c:	685b      	ldr	r3, [r3, #4]
 802102e:	221c      	movs	r2, #28
 8021030:	4619      	mov	r1, r3
 8021032:	f001 faf1 	bl	8022618 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8021036:	69bb      	ldr	r3, [r7, #24]
 8021038:	68db      	ldr	r3, [r3, #12]
 802103a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 802103c:	f107 030c 	add.w	r3, r7, #12
 8021040:	4618      	mov	r0, r3
 8021042:	f000 f825 	bl	8021090 <ip4_route>
 8021046:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8021048:	693b      	ldr	r3, [r7, #16]
 802104a:	2b00      	cmp	r3, #0
 802104c:	d011      	beq.n	8021072 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 802104e:	697b      	ldr	r3, [r7, #20]
 8021050:	2200      	movs	r2, #0
 8021052:	709a      	strb	r2, [r3, #2]
 8021054:	2200      	movs	r2, #0
 8021056:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8021058:	f107 020c 	add.w	r2, r7, #12
 802105c:	693b      	ldr	r3, [r7, #16]
 802105e:	9302      	str	r3, [sp, #8]
 8021060:	2301      	movs	r3, #1
 8021062:	9301      	str	r3, [sp, #4]
 8021064:	2300      	movs	r3, #0
 8021066:	9300      	str	r3, [sp, #0]
 8021068:	23ff      	movs	r3, #255	; 0xff
 802106a:	2100      	movs	r1, #0
 802106c:	69f8      	ldr	r0, [r7, #28]
 802106e:	f000 f9c3 	bl	80213f8 <ip4_output_if>
  }
  pbuf_free(q);
 8021072:	69f8      	ldr	r0, [r7, #28]
 8021074:	f7fd fea8 	bl	801edc8 <pbuf_free>
 8021078:	e000      	b.n	802107c <icmp_send_response+0xc0>
    return;
 802107a:	bf00      	nop
}
 802107c:	3720      	adds	r7, #32
 802107e:	46bd      	mov	sp, r7
 8021080:	bd80      	pop	{r7, pc}
 8021082:	bf00      	nop
 8021084:	08028658 	.word	0x08028658
 8021088:	08028724 	.word	0x08028724
 802108c:	080286c8 	.word	0x080286c8

08021090 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021090:	b480      	push	{r7}
 8021092:	b085      	sub	sp, #20
 8021094:	af00      	add	r7, sp, #0
 8021096:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021098:	4b33      	ldr	r3, [pc, #204]	; (8021168 <ip4_route+0xd8>)
 802109a:	681b      	ldr	r3, [r3, #0]
 802109c:	60fb      	str	r3, [r7, #12]
 802109e:	e036      	b.n	802110e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80210a0:	68fb      	ldr	r3, [r7, #12]
 80210a2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210a6:	f003 0301 	and.w	r3, r3, #1
 80210aa:	b2db      	uxtb	r3, r3
 80210ac:	2b00      	cmp	r3, #0
 80210ae:	d02b      	beq.n	8021108 <ip4_route+0x78>
 80210b0:	68fb      	ldr	r3, [r7, #12]
 80210b2:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210b6:	089b      	lsrs	r3, r3, #2
 80210b8:	f003 0301 	and.w	r3, r3, #1
 80210bc:	b2db      	uxtb	r3, r3
 80210be:	2b00      	cmp	r3, #0
 80210c0:	d022      	beq.n	8021108 <ip4_route+0x78>
 80210c2:	68fb      	ldr	r3, [r7, #12]
 80210c4:	3304      	adds	r3, #4
 80210c6:	681b      	ldr	r3, [r3, #0]
 80210c8:	2b00      	cmp	r3, #0
 80210ca:	d01d      	beq.n	8021108 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	681a      	ldr	r2, [r3, #0]
 80210d0:	68fb      	ldr	r3, [r7, #12]
 80210d2:	3304      	adds	r3, #4
 80210d4:	681b      	ldr	r3, [r3, #0]
 80210d6:	405a      	eors	r2, r3
 80210d8:	68fb      	ldr	r3, [r7, #12]
 80210da:	3308      	adds	r3, #8
 80210dc:	681b      	ldr	r3, [r3, #0]
 80210de:	4013      	ands	r3, r2
 80210e0:	2b00      	cmp	r3, #0
 80210e2:	d101      	bne.n	80210e8 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 80210e4:	68fb      	ldr	r3, [r7, #12]
 80210e6:	e038      	b.n	802115a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80210e8:	68fb      	ldr	r3, [r7, #12]
 80210ea:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80210ee:	f003 0302 	and.w	r3, r3, #2
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d108      	bne.n	8021108 <ip4_route+0x78>
 80210f6:	687b      	ldr	r3, [r7, #4]
 80210f8:	681a      	ldr	r2, [r3, #0]
 80210fa:	68fb      	ldr	r3, [r7, #12]
 80210fc:	330c      	adds	r3, #12
 80210fe:	681b      	ldr	r3, [r3, #0]
 8021100:	429a      	cmp	r2, r3
 8021102:	d101      	bne.n	8021108 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8021104:	68fb      	ldr	r3, [r7, #12]
 8021106:	e028      	b.n	802115a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8021108:	68fb      	ldr	r3, [r7, #12]
 802110a:	681b      	ldr	r3, [r3, #0]
 802110c:	60fb      	str	r3, [r7, #12]
 802110e:	68fb      	ldr	r3, [r7, #12]
 8021110:	2b00      	cmp	r3, #0
 8021112:	d1c5      	bne.n	80210a0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021114:	4b15      	ldr	r3, [pc, #84]	; (802116c <ip4_route+0xdc>)
 8021116:	681b      	ldr	r3, [r3, #0]
 8021118:	2b00      	cmp	r3, #0
 802111a:	d01a      	beq.n	8021152 <ip4_route+0xc2>
 802111c:	4b13      	ldr	r3, [pc, #76]	; (802116c <ip4_route+0xdc>)
 802111e:	681b      	ldr	r3, [r3, #0]
 8021120:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021124:	f003 0301 	and.w	r3, r3, #1
 8021128:	2b00      	cmp	r3, #0
 802112a:	d012      	beq.n	8021152 <ip4_route+0xc2>
 802112c:	4b0f      	ldr	r3, [pc, #60]	; (802116c <ip4_route+0xdc>)
 802112e:	681b      	ldr	r3, [r3, #0]
 8021130:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021134:	f003 0304 	and.w	r3, r3, #4
 8021138:	2b00      	cmp	r3, #0
 802113a:	d00a      	beq.n	8021152 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 802113c:	4b0b      	ldr	r3, [pc, #44]	; (802116c <ip4_route+0xdc>)
 802113e:	681b      	ldr	r3, [r3, #0]
 8021140:	3304      	adds	r3, #4
 8021142:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8021144:	2b00      	cmp	r3, #0
 8021146:	d004      	beq.n	8021152 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	681b      	ldr	r3, [r3, #0]
 802114c:	b2db      	uxtb	r3, r3
 802114e:	2b7f      	cmp	r3, #127	; 0x7f
 8021150:	d101      	bne.n	8021156 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8021152:	2300      	movs	r3, #0
 8021154:	e001      	b.n	802115a <ip4_route+0xca>
  }

  return netif_default;
 8021156:	4b05      	ldr	r3, [pc, #20]	; (802116c <ip4_route+0xdc>)
 8021158:	681b      	ldr	r3, [r3, #0]
}
 802115a:	4618      	mov	r0, r3
 802115c:	3714      	adds	r7, #20
 802115e:	46bd      	mov	sp, r7
 8021160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021164:	4770      	bx	lr
 8021166:	bf00      	nop
 8021168:	20014150 	.word	0x20014150
 802116c:	20014154 	.word	0x20014154

08021170 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8021170:	b580      	push	{r7, lr}
 8021172:	b082      	sub	sp, #8
 8021174:	af00      	add	r7, sp, #0
 8021176:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8021178:	687b      	ldr	r3, [r7, #4]
 802117a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802117e:	f003 0301 	and.w	r3, r3, #1
 8021182:	b2db      	uxtb	r3, r3
 8021184:	2b00      	cmp	r3, #0
 8021186:	d016      	beq.n	80211b6 <ip4_input_accept+0x46>
 8021188:	687b      	ldr	r3, [r7, #4]
 802118a:	3304      	adds	r3, #4
 802118c:	681b      	ldr	r3, [r3, #0]
 802118e:	2b00      	cmp	r3, #0
 8021190:	d011      	beq.n	80211b6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021192:	4b0b      	ldr	r3, [pc, #44]	; (80211c0 <ip4_input_accept+0x50>)
 8021194:	695a      	ldr	r2, [r3, #20]
 8021196:	687b      	ldr	r3, [r7, #4]
 8021198:	3304      	adds	r3, #4
 802119a:	681b      	ldr	r3, [r3, #0]
 802119c:	429a      	cmp	r2, r3
 802119e:	d008      	beq.n	80211b2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80211a0:	4b07      	ldr	r3, [pc, #28]	; (80211c0 <ip4_input_accept+0x50>)
 80211a2:	695b      	ldr	r3, [r3, #20]
 80211a4:	6879      	ldr	r1, [r7, #4]
 80211a6:	4618      	mov	r0, r3
 80211a8:	f000 fa0c 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 80211ac:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80211ae:	2b00      	cmp	r3, #0
 80211b0:	d001      	beq.n	80211b6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80211b2:	2301      	movs	r3, #1
 80211b4:	e000      	b.n	80211b8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80211b6:	2300      	movs	r3, #0
}
 80211b8:	4618      	mov	r0, r3
 80211ba:	3708      	adds	r7, #8
 80211bc:	46bd      	mov	sp, r7
 80211be:	bd80      	pop	{r7, pc}
 80211c0:	20010b40 	.word	0x20010b40

080211c4 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80211c4:	b580      	push	{r7, lr}
 80211c6:	b086      	sub	sp, #24
 80211c8:	af00      	add	r7, sp, #0
 80211ca:	6078      	str	r0, [r7, #4]
 80211cc:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80211ce:	687b      	ldr	r3, [r7, #4]
 80211d0:	685b      	ldr	r3, [r3, #4]
 80211d2:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80211d4:	697b      	ldr	r3, [r7, #20]
 80211d6:	781b      	ldrb	r3, [r3, #0]
 80211d8:	091b      	lsrs	r3, r3, #4
 80211da:	b2db      	uxtb	r3, r3
 80211dc:	2b04      	cmp	r3, #4
 80211de:	d004      	beq.n	80211ea <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80211e0:	6878      	ldr	r0, [r7, #4]
 80211e2:	f7fd fdf1 	bl	801edc8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 80211e6:	2300      	movs	r3, #0
 80211e8:	e0fd      	b.n	80213e6 <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80211ea:	697b      	ldr	r3, [r7, #20]
 80211ec:	781b      	ldrb	r3, [r3, #0]
 80211ee:	f003 030f 	and.w	r3, r3, #15
 80211f2:	b2db      	uxtb	r3, r3
 80211f4:	009b      	lsls	r3, r3, #2
 80211f6:	b2db      	uxtb	r3, r3
 80211f8:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80211fa:	697b      	ldr	r3, [r7, #20]
 80211fc:	885b      	ldrh	r3, [r3, #2]
 80211fe:	b29b      	uxth	r3, r3
 8021200:	4618      	mov	r0, r3
 8021202:	f7fc fa05 	bl	801d610 <lwip_htons>
 8021206:	4603      	mov	r3, r0
 8021208:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 802120a:	687b      	ldr	r3, [r7, #4]
 802120c:	891b      	ldrh	r3, [r3, #8]
 802120e:	89ba      	ldrh	r2, [r7, #12]
 8021210:	429a      	cmp	r2, r3
 8021212:	d204      	bcs.n	802121e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8021214:	89bb      	ldrh	r3, [r7, #12]
 8021216:	4619      	mov	r1, r3
 8021218:	6878      	ldr	r0, [r7, #4]
 802121a:	f7fd fc4f 	bl	801eabc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	895b      	ldrh	r3, [r3, #10]
 8021222:	89fa      	ldrh	r2, [r7, #14]
 8021224:	429a      	cmp	r2, r3
 8021226:	d807      	bhi.n	8021238 <ip4_input+0x74>
 8021228:	687b      	ldr	r3, [r7, #4]
 802122a:	891b      	ldrh	r3, [r3, #8]
 802122c:	89ba      	ldrh	r2, [r7, #12]
 802122e:	429a      	cmp	r2, r3
 8021230:	d802      	bhi.n	8021238 <ip4_input+0x74>
 8021232:	89fb      	ldrh	r3, [r7, #14]
 8021234:	2b13      	cmp	r3, #19
 8021236:	d804      	bhi.n	8021242 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8021238:	6878      	ldr	r0, [r7, #4]
 802123a:	f7fd fdc5 	bl	801edc8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 802123e:	2300      	movs	r3, #0
 8021240:	e0d1      	b.n	80213e6 <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8021242:	697b      	ldr	r3, [r7, #20]
 8021244:	691b      	ldr	r3, [r3, #16]
 8021246:	4a6a      	ldr	r2, [pc, #424]	; (80213f0 <ip4_input+0x22c>)
 8021248:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 802124a:	697b      	ldr	r3, [r7, #20]
 802124c:	68db      	ldr	r3, [r3, #12]
 802124e:	4a68      	ldr	r2, [pc, #416]	; (80213f0 <ip4_input+0x22c>)
 8021250:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021252:	4b67      	ldr	r3, [pc, #412]	; (80213f0 <ip4_input+0x22c>)
 8021254:	695b      	ldr	r3, [r3, #20]
 8021256:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 802125a:	2be0      	cmp	r3, #224	; 0xe0
 802125c:	d112      	bne.n	8021284 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 802125e:	683b      	ldr	r3, [r7, #0]
 8021260:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021264:	f003 0301 	and.w	r3, r3, #1
 8021268:	b2db      	uxtb	r3, r3
 802126a:	2b00      	cmp	r3, #0
 802126c:	d007      	beq.n	802127e <ip4_input+0xba>
 802126e:	683b      	ldr	r3, [r7, #0]
 8021270:	3304      	adds	r3, #4
 8021272:	681b      	ldr	r3, [r3, #0]
 8021274:	2b00      	cmp	r3, #0
 8021276:	d002      	beq.n	802127e <ip4_input+0xba>
      netif = inp;
 8021278:	683b      	ldr	r3, [r7, #0]
 802127a:	613b      	str	r3, [r7, #16]
 802127c:	e02a      	b.n	80212d4 <ip4_input+0x110>
    } else {
      netif = NULL;
 802127e:	2300      	movs	r3, #0
 8021280:	613b      	str	r3, [r7, #16]
 8021282:	e027      	b.n	80212d4 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8021284:	6838      	ldr	r0, [r7, #0]
 8021286:	f7ff ff73 	bl	8021170 <ip4_input_accept>
 802128a:	4603      	mov	r3, r0
 802128c:	2b00      	cmp	r3, #0
 802128e:	d002      	beq.n	8021296 <ip4_input+0xd2>
      netif = inp;
 8021290:	683b      	ldr	r3, [r7, #0]
 8021292:	613b      	str	r3, [r7, #16]
 8021294:	e01e      	b.n	80212d4 <ip4_input+0x110>
    } else {
      netif = NULL;
 8021296:	2300      	movs	r3, #0
 8021298:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 802129a:	4b55      	ldr	r3, [pc, #340]	; (80213f0 <ip4_input+0x22c>)
 802129c:	695b      	ldr	r3, [r3, #20]
 802129e:	b2db      	uxtb	r3, r3
 80212a0:	2b7f      	cmp	r3, #127	; 0x7f
 80212a2:	d017      	beq.n	80212d4 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80212a4:	4b53      	ldr	r3, [pc, #332]	; (80213f4 <ip4_input+0x230>)
 80212a6:	681b      	ldr	r3, [r3, #0]
 80212a8:	613b      	str	r3, [r7, #16]
 80212aa:	e00e      	b.n	80212ca <ip4_input+0x106>
          if (netif == inp) {
 80212ac:	693a      	ldr	r2, [r7, #16]
 80212ae:	683b      	ldr	r3, [r7, #0]
 80212b0:	429a      	cmp	r2, r3
 80212b2:	d006      	beq.n	80212c2 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80212b4:	6938      	ldr	r0, [r7, #16]
 80212b6:	f7ff ff5b 	bl	8021170 <ip4_input_accept>
 80212ba:	4603      	mov	r3, r0
 80212bc:	2b00      	cmp	r3, #0
 80212be:	d108      	bne.n	80212d2 <ip4_input+0x10e>
 80212c0:	e000      	b.n	80212c4 <ip4_input+0x100>
            continue;
 80212c2:	bf00      	nop
        NETIF_FOREACH(netif) {
 80212c4:	693b      	ldr	r3, [r7, #16]
 80212c6:	681b      	ldr	r3, [r3, #0]
 80212c8:	613b      	str	r3, [r7, #16]
 80212ca:	693b      	ldr	r3, [r7, #16]
 80212cc:	2b00      	cmp	r3, #0
 80212ce:	d1ed      	bne.n	80212ac <ip4_input+0xe8>
 80212d0:	e000      	b.n	80212d4 <ip4_input+0x110>
            break;
 80212d2:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80212d4:	4b46      	ldr	r3, [pc, #280]	; (80213f0 <ip4_input+0x22c>)
 80212d6:	691b      	ldr	r3, [r3, #16]
 80212d8:	6839      	ldr	r1, [r7, #0]
 80212da:	4618      	mov	r0, r3
 80212dc:	f000 f972 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 80212e0:	4603      	mov	r3, r0
 80212e2:	2b00      	cmp	r3, #0
 80212e4:	d105      	bne.n	80212f2 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 80212e6:	4b42      	ldr	r3, [pc, #264]	; (80213f0 <ip4_input+0x22c>)
 80212e8:	691b      	ldr	r3, [r3, #16]
 80212ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80212ee:	2be0      	cmp	r3, #224	; 0xe0
 80212f0:	d104      	bne.n	80212fc <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80212f2:	6878      	ldr	r0, [r7, #4]
 80212f4:	f7fd fd68 	bl	801edc8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80212f8:	2300      	movs	r3, #0
 80212fa:	e074      	b.n	80213e6 <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80212fc:	693b      	ldr	r3, [r7, #16]
 80212fe:	2b00      	cmp	r3, #0
 8021300:	d104      	bne.n	802130c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8021302:	6878      	ldr	r0, [r7, #4]
 8021304:	f7fd fd60 	bl	801edc8 <pbuf_free>
    return ERR_OK;
 8021308:	2300      	movs	r3, #0
 802130a:	e06c      	b.n	80213e6 <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	88db      	ldrh	r3, [r3, #6]
 8021310:	b29b      	uxth	r3, r3
 8021312:	461a      	mov	r2, r3
 8021314:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021318:	4013      	ands	r3, r2
 802131a:	2b00      	cmp	r3, #0
 802131c:	d00b      	beq.n	8021336 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 802131e:	6878      	ldr	r0, [r7, #4]
 8021320:	f000 fd26 	bl	8021d70 <ip4_reass>
 8021324:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8021326:	687b      	ldr	r3, [r7, #4]
 8021328:	2b00      	cmp	r3, #0
 802132a:	d101      	bne.n	8021330 <ip4_input+0x16c>
      return ERR_OK;
 802132c:	2300      	movs	r3, #0
 802132e:	e05a      	b.n	80213e6 <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8021330:	687b      	ldr	r3, [r7, #4]
 8021332:	685b      	ldr	r3, [r3, #4]
 8021334:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8021336:	4a2e      	ldr	r2, [pc, #184]	; (80213f0 <ip4_input+0x22c>)
 8021338:	693b      	ldr	r3, [r7, #16]
 802133a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 802133c:	4a2c      	ldr	r2, [pc, #176]	; (80213f0 <ip4_input+0x22c>)
 802133e:	683b      	ldr	r3, [r7, #0]
 8021340:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8021342:	4a2b      	ldr	r2, [pc, #172]	; (80213f0 <ip4_input+0x22c>)
 8021344:	697b      	ldr	r3, [r7, #20]
 8021346:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8021348:	697b      	ldr	r3, [r7, #20]
 802134a:	781b      	ldrb	r3, [r3, #0]
 802134c:	f003 030f 	and.w	r3, r3, #15
 8021350:	b2db      	uxtb	r3, r3
 8021352:	009b      	lsls	r3, r3, #2
 8021354:	b2db      	uxtb	r3, r3
 8021356:	b29a      	uxth	r2, r3
 8021358:	4b25      	ldr	r3, [pc, #148]	; (80213f0 <ip4_input+0x22c>)
 802135a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 802135c:	89fb      	ldrh	r3, [r7, #14]
 802135e:	4619      	mov	r1, r3
 8021360:	6878      	ldr	r0, [r7, #4]
 8021362:	f7fd fcab 	bl	801ecbc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8021366:	697b      	ldr	r3, [r7, #20]
 8021368:	7a5b      	ldrb	r3, [r3, #9]
 802136a:	2b01      	cmp	r3, #1
 802136c:	d006      	beq.n	802137c <ip4_input+0x1b8>
 802136e:	2b11      	cmp	r3, #17
 8021370:	d109      	bne.n	8021386 <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8021372:	6839      	ldr	r1, [r7, #0]
 8021374:	6878      	ldr	r0, [r7, #4]
 8021376:	f7fe f9b5 	bl	801f6e4 <udp_input>
        break;
 802137a:	e021      	b.n	80213c0 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 802137c:	6839      	ldr	r1, [r7, #0]
 802137e:	6878      	ldr	r0, [r7, #4]
 8021380:	f7ff fcf8 	bl	8020d74 <icmp_input>
        break;
 8021384:	e01c      	b.n	80213c0 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021386:	4b1a      	ldr	r3, [pc, #104]	; (80213f0 <ip4_input+0x22c>)
 8021388:	695b      	ldr	r3, [r3, #20]
 802138a:	6939      	ldr	r1, [r7, #16]
 802138c:	4618      	mov	r0, r3
 802138e:	f000 f919 	bl	80215c4 <ip4_addr_isbroadcast_u32>
 8021392:	4603      	mov	r3, r0
 8021394:	2b00      	cmp	r3, #0
 8021396:	d10f      	bne.n	80213b8 <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021398:	4b15      	ldr	r3, [pc, #84]	; (80213f0 <ip4_input+0x22c>)
 802139a:	695b      	ldr	r3, [r3, #20]
 802139c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80213a0:	2be0      	cmp	r3, #224	; 0xe0
 80213a2:	d009      	beq.n	80213b8 <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80213a4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80213a8:	4619      	mov	r1, r3
 80213aa:	6878      	ldr	r0, [r7, #4]
 80213ac:	f7fd fcf9 	bl	801eda2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80213b0:	2102      	movs	r1, #2
 80213b2:	6878      	ldr	r0, [r7, #4]
 80213b4:	f7ff fde2 	bl	8020f7c <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80213b8:	6878      	ldr	r0, [r7, #4]
 80213ba:	f7fd fd05 	bl	801edc8 <pbuf_free>
        break;
 80213be:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80213c0:	4b0b      	ldr	r3, [pc, #44]	; (80213f0 <ip4_input+0x22c>)
 80213c2:	2200      	movs	r2, #0
 80213c4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80213c6:	4b0a      	ldr	r3, [pc, #40]	; (80213f0 <ip4_input+0x22c>)
 80213c8:	2200      	movs	r2, #0
 80213ca:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80213cc:	4b08      	ldr	r3, [pc, #32]	; (80213f0 <ip4_input+0x22c>)
 80213ce:	2200      	movs	r2, #0
 80213d0:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 80213d2:	4b07      	ldr	r3, [pc, #28]	; (80213f0 <ip4_input+0x22c>)
 80213d4:	2200      	movs	r2, #0
 80213d6:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80213d8:	4b05      	ldr	r3, [pc, #20]	; (80213f0 <ip4_input+0x22c>)
 80213da:	2200      	movs	r2, #0
 80213dc:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80213de:	4b04      	ldr	r3, [pc, #16]	; (80213f0 <ip4_input+0x22c>)
 80213e0:	2200      	movs	r2, #0
 80213e2:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80213e4:	2300      	movs	r3, #0
}
 80213e6:	4618      	mov	r0, r3
 80213e8:	3718      	adds	r7, #24
 80213ea:	46bd      	mov	sp, r7
 80213ec:	bd80      	pop	{r7, pc}
 80213ee:	bf00      	nop
 80213f0:	20010b40 	.word	0x20010b40
 80213f4:	20014150 	.word	0x20014150

080213f8 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80213f8:	b580      	push	{r7, lr}
 80213fa:	b08a      	sub	sp, #40	; 0x28
 80213fc:	af04      	add	r7, sp, #16
 80213fe:	60f8      	str	r0, [r7, #12]
 8021400:	60b9      	str	r1, [r7, #8]
 8021402:	607a      	str	r2, [r7, #4]
 8021404:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021406:	68bb      	ldr	r3, [r7, #8]
 8021408:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d009      	beq.n	8021424 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8021410:	68bb      	ldr	r3, [r7, #8]
 8021412:	2b00      	cmp	r3, #0
 8021414:	d003      	beq.n	802141e <ip4_output_if+0x26>
 8021416:	68bb      	ldr	r3, [r7, #8]
 8021418:	681b      	ldr	r3, [r3, #0]
 802141a:	2b00      	cmp	r3, #0
 802141c:	d102      	bne.n	8021424 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 802141e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021420:	3304      	adds	r3, #4
 8021422:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8021424:	78fa      	ldrb	r2, [r7, #3]
 8021426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021428:	9302      	str	r3, [sp, #8]
 802142a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 802142e:	9301      	str	r3, [sp, #4]
 8021430:	f897 3020 	ldrb.w	r3, [r7, #32]
 8021434:	9300      	str	r3, [sp, #0]
 8021436:	4613      	mov	r3, r2
 8021438:	687a      	ldr	r2, [r7, #4]
 802143a:	6979      	ldr	r1, [r7, #20]
 802143c:	68f8      	ldr	r0, [r7, #12]
 802143e:	f000 f805 	bl	802144c <ip4_output_if_src>
 8021442:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8021444:	4618      	mov	r0, r3
 8021446:	3718      	adds	r7, #24
 8021448:	46bd      	mov	sp, r7
 802144a:	bd80      	pop	{r7, pc}

0802144c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 802144c:	b580      	push	{r7, lr}
 802144e:	b088      	sub	sp, #32
 8021450:	af00      	add	r7, sp, #0
 8021452:	60f8      	str	r0, [r7, #12]
 8021454:	60b9      	str	r1, [r7, #8]
 8021456:	607a      	str	r2, [r7, #4]
 8021458:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 802145a:	68fb      	ldr	r3, [r7, #12]
 802145c:	7b9b      	ldrb	r3, [r3, #14]
 802145e:	2b01      	cmp	r3, #1
 8021460:	d006      	beq.n	8021470 <ip4_output_if_src+0x24>
 8021462:	4b52      	ldr	r3, [pc, #328]	; (80215ac <ip4_output_if_src+0x160>)
 8021464:	f44f 7255 	mov.w	r2, #852	; 0x354
 8021468:	4951      	ldr	r1, [pc, #324]	; (80215b0 <ip4_output_if_src+0x164>)
 802146a:	4852      	ldr	r0, [pc, #328]	; (80215b4 <ip4_output_if_src+0x168>)
 802146c:	f001 f9e4 	bl	8022838 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8021470:	687b      	ldr	r3, [r7, #4]
 8021472:	2b00      	cmp	r3, #0
 8021474:	d060      	beq.n	8021538 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8021476:	2314      	movs	r3, #20
 8021478:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 802147a:	2114      	movs	r1, #20
 802147c:	68f8      	ldr	r0, [r7, #12]
 802147e:	f7fd fc0d 	bl	801ec9c <pbuf_add_header>
 8021482:	4603      	mov	r3, r0
 8021484:	2b00      	cmp	r3, #0
 8021486:	d002      	beq.n	802148e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021488:	f06f 0301 	mvn.w	r3, #1
 802148c:	e089      	b.n	80215a2 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 802148e:	68fb      	ldr	r3, [r7, #12]
 8021490:	685b      	ldr	r3, [r3, #4]
 8021492:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021494:	68fb      	ldr	r3, [r7, #12]
 8021496:	895b      	ldrh	r3, [r3, #10]
 8021498:	2b13      	cmp	r3, #19
 802149a:	d806      	bhi.n	80214aa <ip4_output_if_src+0x5e>
 802149c:	4b43      	ldr	r3, [pc, #268]	; (80215ac <ip4_output_if_src+0x160>)
 802149e:	f44f 7262 	mov.w	r2, #904	; 0x388
 80214a2:	4945      	ldr	r1, [pc, #276]	; (80215b8 <ip4_output_if_src+0x16c>)
 80214a4:	4843      	ldr	r0, [pc, #268]	; (80215b4 <ip4_output_if_src+0x168>)
 80214a6:	f001 f9c7 	bl	8022838 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80214aa:	69fb      	ldr	r3, [r7, #28]
 80214ac:	78fa      	ldrb	r2, [r7, #3]
 80214ae:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80214b0:	69fb      	ldr	r3, [r7, #28]
 80214b2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80214b6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	681a      	ldr	r2, [r3, #0]
 80214bc:	69fb      	ldr	r3, [r7, #28]
 80214be:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80214c0:	8b7b      	ldrh	r3, [r7, #26]
 80214c2:	089b      	lsrs	r3, r3, #2
 80214c4:	b29b      	uxth	r3, r3
 80214c6:	b2db      	uxtb	r3, r3
 80214c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80214cc:	b2da      	uxtb	r2, r3
 80214ce:	69fb      	ldr	r3, [r7, #28]
 80214d0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 80214d2:	69fb      	ldr	r3, [r7, #28]
 80214d4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80214d8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80214da:	68fb      	ldr	r3, [r7, #12]
 80214dc:	891b      	ldrh	r3, [r3, #8]
 80214de:	4618      	mov	r0, r3
 80214e0:	f7fc f896 	bl	801d610 <lwip_htons>
 80214e4:	4603      	mov	r3, r0
 80214e6:	461a      	mov	r2, r3
 80214e8:	69fb      	ldr	r3, [r7, #28]
 80214ea:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80214ec:	69fb      	ldr	r3, [r7, #28]
 80214ee:	2200      	movs	r2, #0
 80214f0:	719a      	strb	r2, [r3, #6]
 80214f2:	2200      	movs	r2, #0
 80214f4:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80214f6:	4b31      	ldr	r3, [pc, #196]	; (80215bc <ip4_output_if_src+0x170>)
 80214f8:	881b      	ldrh	r3, [r3, #0]
 80214fa:	4618      	mov	r0, r3
 80214fc:	f7fc f888 	bl	801d610 <lwip_htons>
 8021500:	4603      	mov	r3, r0
 8021502:	461a      	mov	r2, r3
 8021504:	69fb      	ldr	r3, [r7, #28]
 8021506:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021508:	4b2c      	ldr	r3, [pc, #176]	; (80215bc <ip4_output_if_src+0x170>)
 802150a:	881b      	ldrh	r3, [r3, #0]
 802150c:	3301      	adds	r3, #1
 802150e:	b29a      	uxth	r2, r3
 8021510:	4b2a      	ldr	r3, [pc, #168]	; (80215bc <ip4_output_if_src+0x170>)
 8021512:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021514:	68bb      	ldr	r3, [r7, #8]
 8021516:	2b00      	cmp	r3, #0
 8021518:	d104      	bne.n	8021524 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 802151a:	4b29      	ldr	r3, [pc, #164]	; (80215c0 <ip4_output_if_src+0x174>)
 802151c:	681a      	ldr	r2, [r3, #0]
 802151e:	69fb      	ldr	r3, [r7, #28]
 8021520:	60da      	str	r2, [r3, #12]
 8021522:	e003      	b.n	802152c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021524:	68bb      	ldr	r3, [r7, #8]
 8021526:	681a      	ldr	r2, [r3, #0]
 8021528:	69fb      	ldr	r3, [r7, #28]
 802152a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 802152c:	69fb      	ldr	r3, [r7, #28]
 802152e:	2200      	movs	r2, #0
 8021530:	729a      	strb	r2, [r3, #10]
 8021532:	2200      	movs	r2, #0
 8021534:	72da      	strb	r2, [r3, #11]
 8021536:	e00f      	b.n	8021558 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8021538:	68fb      	ldr	r3, [r7, #12]
 802153a:	895b      	ldrh	r3, [r3, #10]
 802153c:	2b13      	cmp	r3, #19
 802153e:	d802      	bhi.n	8021546 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021540:	f06f 0301 	mvn.w	r3, #1
 8021544:	e02d      	b.n	80215a2 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8021546:	68fb      	ldr	r3, [r7, #12]
 8021548:	685b      	ldr	r3, [r3, #4]
 802154a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 802154c:	69fb      	ldr	r3, [r7, #28]
 802154e:	691b      	ldr	r3, [r3, #16]
 8021550:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8021552:	f107 0314 	add.w	r3, r7, #20
 8021556:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8021558:	687b      	ldr	r3, [r7, #4]
 802155a:	681a      	ldr	r2, [r3, #0]
 802155c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802155e:	3304      	adds	r3, #4
 8021560:	681b      	ldr	r3, [r3, #0]
 8021562:	429a      	cmp	r2, r3
 8021564:	d105      	bne.n	8021572 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8021566:	68f9      	ldr	r1, [r7, #12]
 8021568:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802156a:	f7fd f86f 	bl	801e64c <netif_loop_output>
 802156e:	4603      	mov	r3, r0
 8021570:	e017      	b.n	80215a2 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021576:	2b00      	cmp	r3, #0
 8021578:	d00c      	beq.n	8021594 <ip4_output_if_src+0x148>
 802157a:	68fb      	ldr	r3, [r7, #12]
 802157c:	891a      	ldrh	r2, [r3, #8]
 802157e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021580:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021582:	429a      	cmp	r2, r3
 8021584:	d906      	bls.n	8021594 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 8021586:	687a      	ldr	r2, [r7, #4]
 8021588:	6b39      	ldr	r1, [r7, #48]	; 0x30
 802158a:	68f8      	ldr	r0, [r7, #12]
 802158c:	f000 fde4 	bl	8022158 <ip4_frag>
 8021590:	4603      	mov	r3, r0
 8021592:	e006      	b.n	80215a2 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021596:	695b      	ldr	r3, [r3, #20]
 8021598:	687a      	ldr	r2, [r7, #4]
 802159a:	68f9      	ldr	r1, [r7, #12]
 802159c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802159e:	4798      	blx	r3
 80215a0:	4603      	mov	r3, r0
}
 80215a2:	4618      	mov	r0, r3
 80215a4:	3720      	adds	r7, #32
 80215a6:	46bd      	mov	sp, r7
 80215a8:	bd80      	pop	{r7, pc}
 80215aa:	bf00      	nop
 80215ac:	08028750 	.word	0x08028750
 80215b0:	08028784 	.word	0x08028784
 80215b4:	08028790 	.word	0x08028790
 80215b8:	080287b8 	.word	0x080287b8
 80215bc:	2001465a 	.word	0x2001465a
 80215c0:	08028f5c 	.word	0x08028f5c

080215c4 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80215c4:	b480      	push	{r7}
 80215c6:	b085      	sub	sp, #20
 80215c8:	af00      	add	r7, sp, #0
 80215ca:	6078      	str	r0, [r7, #4]
 80215cc:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80215ce:	687b      	ldr	r3, [r7, #4]
 80215d0:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80215d2:	687b      	ldr	r3, [r7, #4]
 80215d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80215d8:	d002      	beq.n	80215e0 <ip4_addr_isbroadcast_u32+0x1c>
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d101      	bne.n	80215e4 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80215e0:	2301      	movs	r3, #1
 80215e2:	e02a      	b.n	802163a <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80215e4:	683b      	ldr	r3, [r7, #0]
 80215e6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80215ea:	f003 0302 	and.w	r3, r3, #2
 80215ee:	2b00      	cmp	r3, #0
 80215f0:	d101      	bne.n	80215f6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80215f2:	2300      	movs	r3, #0
 80215f4:	e021      	b.n	802163a <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80215f6:	683b      	ldr	r3, [r7, #0]
 80215f8:	3304      	adds	r3, #4
 80215fa:	681b      	ldr	r3, [r3, #0]
 80215fc:	687a      	ldr	r2, [r7, #4]
 80215fe:	429a      	cmp	r2, r3
 8021600:	d101      	bne.n	8021606 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8021602:	2300      	movs	r3, #0
 8021604:	e019      	b.n	802163a <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021606:	68fa      	ldr	r2, [r7, #12]
 8021608:	683b      	ldr	r3, [r7, #0]
 802160a:	3304      	adds	r3, #4
 802160c:	681b      	ldr	r3, [r3, #0]
 802160e:	405a      	eors	r2, r3
 8021610:	683b      	ldr	r3, [r7, #0]
 8021612:	3308      	adds	r3, #8
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	4013      	ands	r3, r2
 8021618:	2b00      	cmp	r3, #0
 802161a:	d10d      	bne.n	8021638 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 802161c:	683b      	ldr	r3, [r7, #0]
 802161e:	3308      	adds	r3, #8
 8021620:	681b      	ldr	r3, [r3, #0]
 8021622:	43da      	mvns	r2, r3
 8021624:	687b      	ldr	r3, [r7, #4]
 8021626:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021628:	683b      	ldr	r3, [r7, #0]
 802162a:	3308      	adds	r3, #8
 802162c:	681b      	ldr	r3, [r3, #0]
 802162e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021630:	429a      	cmp	r2, r3
 8021632:	d101      	bne.n	8021638 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021634:	2301      	movs	r3, #1
 8021636:	e000      	b.n	802163a <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021638:	2300      	movs	r3, #0
  }
}
 802163a:	4618      	mov	r0, r3
 802163c:	3714      	adds	r7, #20
 802163e:	46bd      	mov	sp, r7
 8021640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021644:	4770      	bx	lr
	...

08021648 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 8021648:	b580      	push	{r7, lr}
 802164a:	b082      	sub	sp, #8
 802164c:	af00      	add	r7, sp, #0
 802164e:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8021650:	2210      	movs	r2, #16
 8021652:	4904      	ldr	r1, [pc, #16]	; (8021664 <ip4addr_ntoa+0x1c>)
 8021654:	6878      	ldr	r0, [r7, #4]
 8021656:	f000 f807 	bl	8021668 <ip4addr_ntoa_r>
 802165a:	4603      	mov	r3, r0
}
 802165c:	4618      	mov	r0, r3
 802165e:	3708      	adds	r7, #8
 8021660:	46bd      	mov	sp, r7
 8021662:	bd80      	pop	{r7, pc}
 8021664:	2001465c 	.word	0x2001465c

08021668 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8021668:	b480      	push	{r7}
 802166a:	b08d      	sub	sp, #52	; 0x34
 802166c:	af00      	add	r7, sp, #0
 802166e:	60f8      	str	r0, [r7, #12]
 8021670:	60b9      	str	r1, [r7, #8]
 8021672:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8021674:	2300      	movs	r3, #0
 8021676:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8021678:	68fb      	ldr	r3, [r7, #12]
 802167a:	681b      	ldr	r3, [r3, #0]
 802167c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 802167e:	68bb      	ldr	r3, [r7, #8]
 8021680:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8021682:	f107 0318 	add.w	r3, r7, #24
 8021686:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021688:	2300      	movs	r3, #0
 802168a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802168e:	e058      	b.n	8021742 <ip4addr_ntoa_r+0xda>
    i = 0;
 8021690:	2300      	movs	r3, #0
 8021692:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8021696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021698:	781a      	ldrb	r2, [r3, #0]
 802169a:	4b32      	ldr	r3, [pc, #200]	; (8021764 <ip4addr_ntoa_r+0xfc>)
 802169c:	fba3 1302 	umull	r1, r3, r3, r2
 80216a0:	08d9      	lsrs	r1, r3, #3
 80216a2:	460b      	mov	r3, r1
 80216a4:	009b      	lsls	r3, r3, #2
 80216a6:	440b      	add	r3, r1
 80216a8:	005b      	lsls	r3, r3, #1
 80216aa:	1ad3      	subs	r3, r2, r3
 80216ac:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 80216ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216b0:	781b      	ldrb	r3, [r3, #0]
 80216b2:	4a2c      	ldr	r2, [pc, #176]	; (8021764 <ip4addr_ntoa_r+0xfc>)
 80216b4:	fba2 2303 	umull	r2, r3, r2, r3
 80216b8:	08db      	lsrs	r3, r3, #3
 80216ba:	b2da      	uxtb	r2, r3
 80216bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216be:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 80216c0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80216c4:	1c5a      	adds	r2, r3, #1
 80216c6:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80216ca:	4619      	mov	r1, r3
 80216cc:	7ffb      	ldrb	r3, [r7, #31]
 80216ce:	3330      	adds	r3, #48	; 0x30
 80216d0:	b2da      	uxtb	r2, r3
 80216d2:	f101 0330 	add.w	r3, r1, #48	; 0x30
 80216d6:	443b      	add	r3, r7
 80216d8:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 80216dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216de:	781b      	ldrb	r3, [r3, #0]
 80216e0:	2b00      	cmp	r3, #0
 80216e2:	d1d8      	bne.n	8021696 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 80216e4:	e011      	b.n	802170a <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 80216e6:	6a3b      	ldr	r3, [r7, #32]
 80216e8:	1c5a      	adds	r2, r3, #1
 80216ea:	623a      	str	r2, [r7, #32]
 80216ec:	687a      	ldr	r2, [r7, #4]
 80216ee:	429a      	cmp	r2, r3
 80216f0:	dc01      	bgt.n	80216f6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80216f2:	2300      	movs	r3, #0
 80216f4:	e030      	b.n	8021758 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80216f6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80216fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216fc:	1c59      	adds	r1, r3, #1
 80216fe:	62f9      	str	r1, [r7, #44]	; 0x2c
 8021700:	3230      	adds	r2, #48	; 0x30
 8021702:	443a      	add	r2, r7
 8021704:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 8021708:	701a      	strb	r2, [r3, #0]
    while (i--) {
 802170a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 802170e:	1e5a      	subs	r2, r3, #1
 8021710:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021714:	2b00      	cmp	r3, #0
 8021716:	d1e6      	bne.n	80216e6 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 8021718:	6a3b      	ldr	r3, [r7, #32]
 802171a:	1c5a      	adds	r2, r3, #1
 802171c:	623a      	str	r2, [r7, #32]
 802171e:	687a      	ldr	r2, [r7, #4]
 8021720:	429a      	cmp	r2, r3
 8021722:	dc01      	bgt.n	8021728 <ip4addr_ntoa_r+0xc0>
      return NULL;
 8021724:	2300      	movs	r3, #0
 8021726:	e017      	b.n	8021758 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 8021728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802172a:	1c5a      	adds	r2, r3, #1
 802172c:	62fa      	str	r2, [r7, #44]	; 0x2c
 802172e:	222e      	movs	r2, #46	; 0x2e
 8021730:	701a      	strb	r2, [r3, #0]
    ap++;
 8021732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021734:	3301      	adds	r3, #1
 8021736:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8021738:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 802173c:	3301      	adds	r3, #1
 802173e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021742:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8021746:	2b03      	cmp	r3, #3
 8021748:	d9a2      	bls.n	8021690 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 802174a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802174c:	3b01      	subs	r3, #1
 802174e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021752:	2200      	movs	r2, #0
 8021754:	701a      	strb	r2, [r3, #0]
  return buf;
 8021756:	68bb      	ldr	r3, [r7, #8]
}
 8021758:	4618      	mov	r0, r3
 802175a:	3734      	adds	r7, #52	; 0x34
 802175c:	46bd      	mov	sp, r7
 802175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021762:	4770      	bx	lr
 8021764:	cccccccd 	.word	0xcccccccd

08021768 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021768:	b580      	push	{r7, lr}
 802176a:	b084      	sub	sp, #16
 802176c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 802176e:	2300      	movs	r3, #0
 8021770:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021772:	4b12      	ldr	r3, [pc, #72]	; (80217bc <ip_reass_tmr+0x54>)
 8021774:	681b      	ldr	r3, [r3, #0]
 8021776:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021778:	e018      	b.n	80217ac <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 802177a:	68fb      	ldr	r3, [r7, #12]
 802177c:	7fdb      	ldrb	r3, [r3, #31]
 802177e:	2b00      	cmp	r3, #0
 8021780:	d00b      	beq.n	802179a <ip_reass_tmr+0x32>
      r->timer--;
 8021782:	68fb      	ldr	r3, [r7, #12]
 8021784:	7fdb      	ldrb	r3, [r3, #31]
 8021786:	3b01      	subs	r3, #1
 8021788:	b2da      	uxtb	r2, r3
 802178a:	68fb      	ldr	r3, [r7, #12]
 802178c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 802178e:	68fb      	ldr	r3, [r7, #12]
 8021790:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021792:	68fb      	ldr	r3, [r7, #12]
 8021794:	681b      	ldr	r3, [r3, #0]
 8021796:	60fb      	str	r3, [r7, #12]
 8021798:	e008      	b.n	80217ac <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 802179a:	68fb      	ldr	r3, [r7, #12]
 802179c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 802179e:	68fb      	ldr	r3, [r7, #12]
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80217a4:	68b9      	ldr	r1, [r7, #8]
 80217a6:	6878      	ldr	r0, [r7, #4]
 80217a8:	f000 f80a 	bl	80217c0 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80217ac:	68fb      	ldr	r3, [r7, #12]
 80217ae:	2b00      	cmp	r3, #0
 80217b0:	d1e3      	bne.n	802177a <ip_reass_tmr+0x12>
    }
  }
}
 80217b2:	bf00      	nop
 80217b4:	bf00      	nop
 80217b6:	3710      	adds	r7, #16
 80217b8:	46bd      	mov	sp, r7
 80217ba:	bd80      	pop	{r7, pc}
 80217bc:	2001466c 	.word	0x2001466c

080217c0 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80217c0:	b580      	push	{r7, lr}
 80217c2:	b088      	sub	sp, #32
 80217c4:	af00      	add	r7, sp, #0
 80217c6:	6078      	str	r0, [r7, #4]
 80217c8:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80217ca:	2300      	movs	r3, #0
 80217cc:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80217ce:	683a      	ldr	r2, [r7, #0]
 80217d0:	687b      	ldr	r3, [r7, #4]
 80217d2:	429a      	cmp	r2, r3
 80217d4:	d105      	bne.n	80217e2 <ip_reass_free_complete_datagram+0x22>
 80217d6:	4b45      	ldr	r3, [pc, #276]	; (80218ec <ip_reass_free_complete_datagram+0x12c>)
 80217d8:	22ab      	movs	r2, #171	; 0xab
 80217da:	4945      	ldr	r1, [pc, #276]	; (80218f0 <ip_reass_free_complete_datagram+0x130>)
 80217dc:	4845      	ldr	r0, [pc, #276]	; (80218f4 <ip_reass_free_complete_datagram+0x134>)
 80217de:	f001 f82b 	bl	8022838 <iprintf>
  if (prev != NULL) {
 80217e2:	683b      	ldr	r3, [r7, #0]
 80217e4:	2b00      	cmp	r3, #0
 80217e6:	d00a      	beq.n	80217fe <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80217e8:	683b      	ldr	r3, [r7, #0]
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	687a      	ldr	r2, [r7, #4]
 80217ee:	429a      	cmp	r2, r3
 80217f0:	d005      	beq.n	80217fe <ip_reass_free_complete_datagram+0x3e>
 80217f2:	4b3e      	ldr	r3, [pc, #248]	; (80218ec <ip_reass_free_complete_datagram+0x12c>)
 80217f4:	22ad      	movs	r2, #173	; 0xad
 80217f6:	4940      	ldr	r1, [pc, #256]	; (80218f8 <ip_reass_free_complete_datagram+0x138>)
 80217f8:	483e      	ldr	r0, [pc, #248]	; (80218f4 <ip_reass_free_complete_datagram+0x134>)
 80217fa:	f001 f81d 	bl	8022838 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80217fe:	687b      	ldr	r3, [r7, #4]
 8021800:	685b      	ldr	r3, [r3, #4]
 8021802:	685b      	ldr	r3, [r3, #4]
 8021804:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021806:	697b      	ldr	r3, [r7, #20]
 8021808:	889b      	ldrh	r3, [r3, #4]
 802180a:	b29b      	uxth	r3, r3
 802180c:	2b00      	cmp	r3, #0
 802180e:	d12a      	bne.n	8021866 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021810:	687b      	ldr	r3, [r7, #4]
 8021812:	685b      	ldr	r3, [r3, #4]
 8021814:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021816:	697b      	ldr	r3, [r7, #20]
 8021818:	681a      	ldr	r2, [r3, #0]
 802181a:	687b      	ldr	r3, [r7, #4]
 802181c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 802181e:	69bb      	ldr	r3, [r7, #24]
 8021820:	6858      	ldr	r0, [r3, #4]
 8021822:	687b      	ldr	r3, [r7, #4]
 8021824:	3308      	adds	r3, #8
 8021826:	2214      	movs	r2, #20
 8021828:	4619      	mov	r1, r3
 802182a:	f000 fef5 	bl	8022618 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 802182e:	2101      	movs	r1, #1
 8021830:	69b8      	ldr	r0, [r7, #24]
 8021832:	f7ff fbb3 	bl	8020f9c <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021836:	69b8      	ldr	r0, [r7, #24]
 8021838:	f7fd fb4e 	bl	801eed8 <pbuf_clen>
 802183c:	4603      	mov	r3, r0
 802183e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021840:	8bfa      	ldrh	r2, [r7, #30]
 8021842:	8a7b      	ldrh	r3, [r7, #18]
 8021844:	4413      	add	r3, r2
 8021846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 802184a:	db05      	blt.n	8021858 <ip_reass_free_complete_datagram+0x98>
 802184c:	4b27      	ldr	r3, [pc, #156]	; (80218ec <ip_reass_free_complete_datagram+0x12c>)
 802184e:	22bc      	movs	r2, #188	; 0xbc
 8021850:	492a      	ldr	r1, [pc, #168]	; (80218fc <ip_reass_free_complete_datagram+0x13c>)
 8021852:	4828      	ldr	r0, [pc, #160]	; (80218f4 <ip_reass_free_complete_datagram+0x134>)
 8021854:	f000 fff0 	bl	8022838 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021858:	8bfa      	ldrh	r2, [r7, #30]
 802185a:	8a7b      	ldrh	r3, [r7, #18]
 802185c:	4413      	add	r3, r2
 802185e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021860:	69b8      	ldr	r0, [r7, #24]
 8021862:	f7fd fab1 	bl	801edc8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021866:	687b      	ldr	r3, [r7, #4]
 8021868:	685b      	ldr	r3, [r3, #4]
 802186a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 802186c:	e01f      	b.n	80218ae <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 802186e:	69bb      	ldr	r3, [r7, #24]
 8021870:	685b      	ldr	r3, [r3, #4]
 8021872:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021874:	69bb      	ldr	r3, [r7, #24]
 8021876:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021878:	697b      	ldr	r3, [r7, #20]
 802187a:	681b      	ldr	r3, [r3, #0]
 802187c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 802187e:	68f8      	ldr	r0, [r7, #12]
 8021880:	f7fd fb2a 	bl	801eed8 <pbuf_clen>
 8021884:	4603      	mov	r3, r0
 8021886:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021888:	8bfa      	ldrh	r2, [r7, #30]
 802188a:	8a7b      	ldrh	r3, [r7, #18]
 802188c:	4413      	add	r3, r2
 802188e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021892:	db05      	blt.n	80218a0 <ip_reass_free_complete_datagram+0xe0>
 8021894:	4b15      	ldr	r3, [pc, #84]	; (80218ec <ip_reass_free_complete_datagram+0x12c>)
 8021896:	22cc      	movs	r2, #204	; 0xcc
 8021898:	4918      	ldr	r1, [pc, #96]	; (80218fc <ip_reass_free_complete_datagram+0x13c>)
 802189a:	4816      	ldr	r0, [pc, #88]	; (80218f4 <ip_reass_free_complete_datagram+0x134>)
 802189c:	f000 ffcc 	bl	8022838 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80218a0:	8bfa      	ldrh	r2, [r7, #30]
 80218a2:	8a7b      	ldrh	r3, [r7, #18]
 80218a4:	4413      	add	r3, r2
 80218a6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80218a8:	68f8      	ldr	r0, [r7, #12]
 80218aa:	f7fd fa8d 	bl	801edc8 <pbuf_free>
  while (p != NULL) {
 80218ae:	69bb      	ldr	r3, [r7, #24]
 80218b0:	2b00      	cmp	r3, #0
 80218b2:	d1dc      	bne.n	802186e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80218b4:	6839      	ldr	r1, [r7, #0]
 80218b6:	6878      	ldr	r0, [r7, #4]
 80218b8:	f000 f8c2 	bl	8021a40 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80218bc:	4b10      	ldr	r3, [pc, #64]	; (8021900 <ip_reass_free_complete_datagram+0x140>)
 80218be:	881b      	ldrh	r3, [r3, #0]
 80218c0:	8bfa      	ldrh	r2, [r7, #30]
 80218c2:	429a      	cmp	r2, r3
 80218c4:	d905      	bls.n	80218d2 <ip_reass_free_complete_datagram+0x112>
 80218c6:	4b09      	ldr	r3, [pc, #36]	; (80218ec <ip_reass_free_complete_datagram+0x12c>)
 80218c8:	22d2      	movs	r2, #210	; 0xd2
 80218ca:	490e      	ldr	r1, [pc, #56]	; (8021904 <ip_reass_free_complete_datagram+0x144>)
 80218cc:	4809      	ldr	r0, [pc, #36]	; (80218f4 <ip_reass_free_complete_datagram+0x134>)
 80218ce:	f000 ffb3 	bl	8022838 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80218d2:	4b0b      	ldr	r3, [pc, #44]	; (8021900 <ip_reass_free_complete_datagram+0x140>)
 80218d4:	881a      	ldrh	r2, [r3, #0]
 80218d6:	8bfb      	ldrh	r3, [r7, #30]
 80218d8:	1ad3      	subs	r3, r2, r3
 80218da:	b29a      	uxth	r2, r3
 80218dc:	4b08      	ldr	r3, [pc, #32]	; (8021900 <ip_reass_free_complete_datagram+0x140>)
 80218de:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80218e0:	8bfb      	ldrh	r3, [r7, #30]
}
 80218e2:	4618      	mov	r0, r3
 80218e4:	3720      	adds	r7, #32
 80218e6:	46bd      	mov	sp, r7
 80218e8:	bd80      	pop	{r7, pc}
 80218ea:	bf00      	nop
 80218ec:	080287e8 	.word	0x080287e8
 80218f0:	08028824 	.word	0x08028824
 80218f4:	08028830 	.word	0x08028830
 80218f8:	08028858 	.word	0x08028858
 80218fc:	0802886c 	.word	0x0802886c
 8021900:	20014670 	.word	0x20014670
 8021904:	0802888c 	.word	0x0802888c

08021908 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021908:	b580      	push	{r7, lr}
 802190a:	b08a      	sub	sp, #40	; 0x28
 802190c:	af00      	add	r7, sp, #0
 802190e:	6078      	str	r0, [r7, #4]
 8021910:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021912:	2300      	movs	r3, #0
 8021914:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021916:	2300      	movs	r3, #0
 8021918:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802191a:	2300      	movs	r3, #0
 802191c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 802191e:	2300      	movs	r3, #0
 8021920:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021922:	2300      	movs	r3, #0
 8021924:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021926:	4b28      	ldr	r3, [pc, #160]	; (80219c8 <ip_reass_remove_oldest_datagram+0xc0>)
 8021928:	681b      	ldr	r3, [r3, #0]
 802192a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 802192c:	e030      	b.n	8021990 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 802192e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021930:	695a      	ldr	r2, [r3, #20]
 8021932:	687b      	ldr	r3, [r7, #4]
 8021934:	68db      	ldr	r3, [r3, #12]
 8021936:	429a      	cmp	r2, r3
 8021938:	d10c      	bne.n	8021954 <ip_reass_remove_oldest_datagram+0x4c>
 802193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802193c:	699a      	ldr	r2, [r3, #24]
 802193e:	687b      	ldr	r3, [r7, #4]
 8021940:	691b      	ldr	r3, [r3, #16]
 8021942:	429a      	cmp	r2, r3
 8021944:	d106      	bne.n	8021954 <ip_reass_remove_oldest_datagram+0x4c>
 8021946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021948:	899a      	ldrh	r2, [r3, #12]
 802194a:	687b      	ldr	r3, [r7, #4]
 802194c:	889b      	ldrh	r3, [r3, #4]
 802194e:	b29b      	uxth	r3, r3
 8021950:	429a      	cmp	r2, r3
 8021952:	d014      	beq.n	802197e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021954:	693b      	ldr	r3, [r7, #16]
 8021956:	3301      	adds	r3, #1
 8021958:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 802195a:	6a3b      	ldr	r3, [r7, #32]
 802195c:	2b00      	cmp	r3, #0
 802195e:	d104      	bne.n	802196a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021962:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021964:	69fb      	ldr	r3, [r7, #28]
 8021966:	61bb      	str	r3, [r7, #24]
 8021968:	e009      	b.n	802197e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 802196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802196c:	7fda      	ldrb	r2, [r3, #31]
 802196e:	6a3b      	ldr	r3, [r7, #32]
 8021970:	7fdb      	ldrb	r3, [r3, #31]
 8021972:	429a      	cmp	r2, r3
 8021974:	d803      	bhi.n	802197e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021978:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 802197a:	69fb      	ldr	r3, [r7, #28]
 802197c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 802197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021980:	681b      	ldr	r3, [r3, #0]
 8021982:	2b00      	cmp	r3, #0
 8021984:	d001      	beq.n	802198a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021986:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021988:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 802198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802198c:	681b      	ldr	r3, [r3, #0]
 802198e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021992:	2b00      	cmp	r3, #0
 8021994:	d1cb      	bne.n	802192e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021996:	6a3b      	ldr	r3, [r7, #32]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d008      	beq.n	80219ae <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 802199c:	69b9      	ldr	r1, [r7, #24]
 802199e:	6a38      	ldr	r0, [r7, #32]
 80219a0:	f7ff ff0e 	bl	80217c0 <ip_reass_free_complete_datagram>
 80219a4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80219a6:	697a      	ldr	r2, [r7, #20]
 80219a8:	68fb      	ldr	r3, [r7, #12]
 80219aa:	4413      	add	r3, r2
 80219ac:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80219ae:	697a      	ldr	r2, [r7, #20]
 80219b0:	683b      	ldr	r3, [r7, #0]
 80219b2:	429a      	cmp	r2, r3
 80219b4:	da02      	bge.n	80219bc <ip_reass_remove_oldest_datagram+0xb4>
 80219b6:	693b      	ldr	r3, [r7, #16]
 80219b8:	2b01      	cmp	r3, #1
 80219ba:	dcac      	bgt.n	8021916 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80219bc:	697b      	ldr	r3, [r7, #20]
}
 80219be:	4618      	mov	r0, r3
 80219c0:	3728      	adds	r7, #40	; 0x28
 80219c2:	46bd      	mov	sp, r7
 80219c4:	bd80      	pop	{r7, pc}
 80219c6:	bf00      	nop
 80219c8:	2001466c 	.word	0x2001466c

080219cc <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80219cc:	b580      	push	{r7, lr}
 80219ce:	b084      	sub	sp, #16
 80219d0:	af00      	add	r7, sp, #0
 80219d2:	6078      	str	r0, [r7, #4]
 80219d4:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80219d6:	2001      	movs	r0, #1
 80219d8:	f7fc fa76 	bl	801dec8 <memp_malloc>
 80219dc:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80219de:	68fb      	ldr	r3, [r7, #12]
 80219e0:	2b00      	cmp	r3, #0
 80219e2:	d110      	bne.n	8021a06 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80219e4:	6839      	ldr	r1, [r7, #0]
 80219e6:	6878      	ldr	r0, [r7, #4]
 80219e8:	f7ff ff8e 	bl	8021908 <ip_reass_remove_oldest_datagram>
 80219ec:	4602      	mov	r2, r0
 80219ee:	683b      	ldr	r3, [r7, #0]
 80219f0:	4293      	cmp	r3, r2
 80219f2:	dc03      	bgt.n	80219fc <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80219f4:	2001      	movs	r0, #1
 80219f6:	f7fc fa67 	bl	801dec8 <memp_malloc>
 80219fa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80219fc:	68fb      	ldr	r3, [r7, #12]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d101      	bne.n	8021a06 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021a02:	2300      	movs	r3, #0
 8021a04:	e016      	b.n	8021a34 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021a06:	2220      	movs	r2, #32
 8021a08:	2100      	movs	r1, #0
 8021a0a:	68f8      	ldr	r0, [r7, #12]
 8021a0c:	f000 fe2c 	bl	8022668 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021a10:	68fb      	ldr	r3, [r7, #12]
 8021a12:	220f      	movs	r2, #15
 8021a14:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021a16:	4b09      	ldr	r3, [pc, #36]	; (8021a3c <ip_reass_enqueue_new_datagram+0x70>)
 8021a18:	681a      	ldr	r2, [r3, #0]
 8021a1a:	68fb      	ldr	r3, [r7, #12]
 8021a1c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021a1e:	4a07      	ldr	r2, [pc, #28]	; (8021a3c <ip_reass_enqueue_new_datagram+0x70>)
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021a24:	68fb      	ldr	r3, [r7, #12]
 8021a26:	3308      	adds	r3, #8
 8021a28:	2214      	movs	r2, #20
 8021a2a:	6879      	ldr	r1, [r7, #4]
 8021a2c:	4618      	mov	r0, r3
 8021a2e:	f000 fdf3 	bl	8022618 <memcpy>
  return ipr;
 8021a32:	68fb      	ldr	r3, [r7, #12]
}
 8021a34:	4618      	mov	r0, r3
 8021a36:	3710      	adds	r7, #16
 8021a38:	46bd      	mov	sp, r7
 8021a3a:	bd80      	pop	{r7, pc}
 8021a3c:	2001466c 	.word	0x2001466c

08021a40 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021a40:	b580      	push	{r7, lr}
 8021a42:	b082      	sub	sp, #8
 8021a44:	af00      	add	r7, sp, #0
 8021a46:	6078      	str	r0, [r7, #4]
 8021a48:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021a4a:	4b10      	ldr	r3, [pc, #64]	; (8021a8c <ip_reass_dequeue_datagram+0x4c>)
 8021a4c:	681b      	ldr	r3, [r3, #0]
 8021a4e:	687a      	ldr	r2, [r7, #4]
 8021a50:	429a      	cmp	r2, r3
 8021a52:	d104      	bne.n	8021a5e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021a54:	687b      	ldr	r3, [r7, #4]
 8021a56:	681b      	ldr	r3, [r3, #0]
 8021a58:	4a0c      	ldr	r2, [pc, #48]	; (8021a8c <ip_reass_dequeue_datagram+0x4c>)
 8021a5a:	6013      	str	r3, [r2, #0]
 8021a5c:	e00d      	b.n	8021a7a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021a5e:	683b      	ldr	r3, [r7, #0]
 8021a60:	2b00      	cmp	r3, #0
 8021a62:	d106      	bne.n	8021a72 <ip_reass_dequeue_datagram+0x32>
 8021a64:	4b0a      	ldr	r3, [pc, #40]	; (8021a90 <ip_reass_dequeue_datagram+0x50>)
 8021a66:	f240 1245 	movw	r2, #325	; 0x145
 8021a6a:	490a      	ldr	r1, [pc, #40]	; (8021a94 <ip_reass_dequeue_datagram+0x54>)
 8021a6c:	480a      	ldr	r0, [pc, #40]	; (8021a98 <ip_reass_dequeue_datagram+0x58>)
 8021a6e:	f000 fee3 	bl	8022838 <iprintf>
    prev->next = ipr->next;
 8021a72:	687b      	ldr	r3, [r7, #4]
 8021a74:	681a      	ldr	r2, [r3, #0]
 8021a76:	683b      	ldr	r3, [r7, #0]
 8021a78:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021a7a:	6879      	ldr	r1, [r7, #4]
 8021a7c:	2001      	movs	r0, #1
 8021a7e:	f7fc fa93 	bl	801dfa8 <memp_free>
}
 8021a82:	bf00      	nop
 8021a84:	3708      	adds	r7, #8
 8021a86:	46bd      	mov	sp, r7
 8021a88:	bd80      	pop	{r7, pc}
 8021a8a:	bf00      	nop
 8021a8c:	2001466c 	.word	0x2001466c
 8021a90:	080287e8 	.word	0x080287e8
 8021a94:	080288b0 	.word	0x080288b0
 8021a98:	08028830 	.word	0x08028830

08021a9c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021a9c:	b580      	push	{r7, lr}
 8021a9e:	b08c      	sub	sp, #48	; 0x30
 8021aa0:	af00      	add	r7, sp, #0
 8021aa2:	60f8      	str	r0, [r7, #12]
 8021aa4:	60b9      	str	r1, [r7, #8]
 8021aa6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021aa8:	2300      	movs	r3, #0
 8021aaa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021aac:	2301      	movs	r3, #1
 8021aae:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021ab0:	68bb      	ldr	r3, [r7, #8]
 8021ab2:	685b      	ldr	r3, [r3, #4]
 8021ab4:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021ab6:	69fb      	ldr	r3, [r7, #28]
 8021ab8:	885b      	ldrh	r3, [r3, #2]
 8021aba:	b29b      	uxth	r3, r3
 8021abc:	4618      	mov	r0, r3
 8021abe:	f7fb fda7 	bl	801d610 <lwip_htons>
 8021ac2:	4603      	mov	r3, r0
 8021ac4:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021ac6:	69fb      	ldr	r3, [r7, #28]
 8021ac8:	781b      	ldrb	r3, [r3, #0]
 8021aca:	f003 030f 	and.w	r3, r3, #15
 8021ace:	b2db      	uxtb	r3, r3
 8021ad0:	009b      	lsls	r3, r3, #2
 8021ad2:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021ad4:	7e7b      	ldrb	r3, [r7, #25]
 8021ad6:	b29b      	uxth	r3, r3
 8021ad8:	8b7a      	ldrh	r2, [r7, #26]
 8021ada:	429a      	cmp	r2, r3
 8021adc:	d202      	bcs.n	8021ae4 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021ade:	f04f 33ff 	mov.w	r3, #4294967295
 8021ae2:	e135      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021ae4:	7e7b      	ldrb	r3, [r7, #25]
 8021ae6:	b29b      	uxth	r3, r3
 8021ae8:	8b7a      	ldrh	r2, [r7, #26]
 8021aea:	1ad3      	subs	r3, r2, r3
 8021aec:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021aee:	69fb      	ldr	r3, [r7, #28]
 8021af0:	88db      	ldrh	r3, [r3, #6]
 8021af2:	b29b      	uxth	r3, r3
 8021af4:	4618      	mov	r0, r3
 8021af6:	f7fb fd8b 	bl	801d610 <lwip_htons>
 8021afa:	4603      	mov	r3, r0
 8021afc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021b00:	b29b      	uxth	r3, r3
 8021b02:	00db      	lsls	r3, r3, #3
 8021b04:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021b06:	68bb      	ldr	r3, [r7, #8]
 8021b08:	685b      	ldr	r3, [r3, #4]
 8021b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b0e:	2200      	movs	r2, #0
 8021b10:	701a      	strb	r2, [r3, #0]
 8021b12:	2200      	movs	r2, #0
 8021b14:	705a      	strb	r2, [r3, #1]
 8021b16:	2200      	movs	r2, #0
 8021b18:	709a      	strb	r2, [r3, #2]
 8021b1a:	2200      	movs	r2, #0
 8021b1c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b20:	8afa      	ldrh	r2, [r7, #22]
 8021b22:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021b24:	8afa      	ldrh	r2, [r7, #22]
 8021b26:	8b7b      	ldrh	r3, [r7, #26]
 8021b28:	4413      	add	r3, r2
 8021b2a:	b29a      	uxth	r2, r3
 8021b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b2e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b32:	88db      	ldrh	r3, [r3, #6]
 8021b34:	b29b      	uxth	r3, r3
 8021b36:	8afa      	ldrh	r2, [r7, #22]
 8021b38:	429a      	cmp	r2, r3
 8021b3a:	d902      	bls.n	8021b42 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021b3c:	f04f 33ff 	mov.w	r3, #4294967295
 8021b40:	e106      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021b42:	68fb      	ldr	r3, [r7, #12]
 8021b44:	685b      	ldr	r3, [r3, #4]
 8021b46:	627b      	str	r3, [r7, #36]	; 0x24
 8021b48:	e068      	b.n	8021c1c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021b4c:	685b      	ldr	r3, [r3, #4]
 8021b4e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b52:	889b      	ldrh	r3, [r3, #4]
 8021b54:	b29a      	uxth	r2, r3
 8021b56:	693b      	ldr	r3, [r7, #16]
 8021b58:	889b      	ldrh	r3, [r3, #4]
 8021b5a:	b29b      	uxth	r3, r3
 8021b5c:	429a      	cmp	r2, r3
 8021b5e:	d235      	bcs.n	8021bcc <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021b64:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b68:	2b00      	cmp	r3, #0
 8021b6a:	d020      	beq.n	8021bae <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b6e:	889b      	ldrh	r3, [r3, #4]
 8021b70:	b29a      	uxth	r2, r3
 8021b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b74:	88db      	ldrh	r3, [r3, #6]
 8021b76:	b29b      	uxth	r3, r3
 8021b78:	429a      	cmp	r2, r3
 8021b7a:	d307      	bcc.n	8021b8c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021b7e:	88db      	ldrh	r3, [r3, #6]
 8021b80:	b29a      	uxth	r2, r3
 8021b82:	693b      	ldr	r3, [r7, #16]
 8021b84:	889b      	ldrh	r3, [r3, #4]
 8021b86:	b29b      	uxth	r3, r3
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	d902      	bls.n	8021b92 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021b8c:	f04f 33ff 	mov.w	r3, #4294967295
 8021b90:	e0de      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b94:	68ba      	ldr	r2, [r7, #8]
 8021b96:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021b9a:	88db      	ldrh	r3, [r3, #6]
 8021b9c:	b29a      	uxth	r2, r3
 8021b9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ba0:	889b      	ldrh	r3, [r3, #4]
 8021ba2:	b29b      	uxth	r3, r3
 8021ba4:	429a      	cmp	r2, r3
 8021ba6:	d03d      	beq.n	8021c24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021ba8:	2300      	movs	r3, #0
 8021baa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021bac:	e03a      	b.n	8021c24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bb0:	88db      	ldrh	r3, [r3, #6]
 8021bb2:	b29a      	uxth	r2, r3
 8021bb4:	693b      	ldr	r3, [r7, #16]
 8021bb6:	889b      	ldrh	r3, [r3, #4]
 8021bb8:	b29b      	uxth	r3, r3
 8021bba:	429a      	cmp	r2, r3
 8021bbc:	d902      	bls.n	8021bc4 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8021bc2:	e0c5      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021bc4:	68fb      	ldr	r3, [r7, #12]
 8021bc6:	68ba      	ldr	r2, [r7, #8]
 8021bc8:	605a      	str	r2, [r3, #4]
      break;
 8021bca:	e02b      	b.n	8021c24 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021bce:	889b      	ldrh	r3, [r3, #4]
 8021bd0:	b29a      	uxth	r2, r3
 8021bd2:	693b      	ldr	r3, [r7, #16]
 8021bd4:	889b      	ldrh	r3, [r3, #4]
 8021bd6:	b29b      	uxth	r3, r3
 8021bd8:	429a      	cmp	r2, r3
 8021bda:	d102      	bne.n	8021be2 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8021be0:	e0b6      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021be4:	889b      	ldrh	r3, [r3, #4]
 8021be6:	b29a      	uxth	r2, r3
 8021be8:	693b      	ldr	r3, [r7, #16]
 8021bea:	88db      	ldrh	r3, [r3, #6]
 8021bec:	b29b      	uxth	r3, r3
 8021bee:	429a      	cmp	r2, r3
 8021bf0:	d202      	bcs.n	8021bf8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021bf2:	f04f 33ff 	mov.w	r3, #4294967295
 8021bf6:	e0ab      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8021bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021bfa:	2b00      	cmp	r3, #0
 8021bfc:	d009      	beq.n	8021c12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c00:	88db      	ldrh	r3, [r3, #6]
 8021c02:	b29a      	uxth	r2, r3
 8021c04:	693b      	ldr	r3, [r7, #16]
 8021c06:	889b      	ldrh	r3, [r3, #4]
 8021c08:	b29b      	uxth	r3, r3
 8021c0a:	429a      	cmp	r2, r3
 8021c0c:	d001      	beq.n	8021c12 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021c0e:	2300      	movs	r3, #0
 8021c10:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021c12:	693b      	ldr	r3, [r7, #16]
 8021c14:	681b      	ldr	r3, [r3, #0]
 8021c16:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8021c18:	693b      	ldr	r3, [r7, #16]
 8021c1a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c1e:	2b00      	cmp	r3, #0
 8021c20:	d193      	bne.n	8021b4a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021c22:	e000      	b.n	8021c26 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021c24:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8021c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c28:	2b00      	cmp	r3, #0
 8021c2a:	d12d      	bne.n	8021c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8021c2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c2e:	2b00      	cmp	r3, #0
 8021c30:	d01c      	beq.n	8021c6c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8021c32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c34:	88db      	ldrh	r3, [r3, #6]
 8021c36:	b29a      	uxth	r2, r3
 8021c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c3a:	889b      	ldrh	r3, [r3, #4]
 8021c3c:	b29b      	uxth	r3, r3
 8021c3e:	429a      	cmp	r2, r3
 8021c40:	d906      	bls.n	8021c50 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8021c42:	4b45      	ldr	r3, [pc, #276]	; (8021d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021c44:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8021c48:	4944      	ldr	r1, [pc, #272]	; (8021d5c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8021c4a:	4845      	ldr	r0, [pc, #276]	; (8021d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021c4c:	f000 fdf4 	bl	8022838 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8021c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c52:	68ba      	ldr	r2, [r7, #8]
 8021c54:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8021c56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021c58:	88db      	ldrh	r3, [r3, #6]
 8021c5a:	b29a      	uxth	r2, r3
 8021c5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021c5e:	889b      	ldrh	r3, [r3, #4]
 8021c60:	b29b      	uxth	r3, r3
 8021c62:	429a      	cmp	r2, r3
 8021c64:	d010      	beq.n	8021c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8021c66:	2300      	movs	r3, #0
 8021c68:	623b      	str	r3, [r7, #32]
 8021c6a:	e00d      	b.n	8021c88 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8021c6c:	68fb      	ldr	r3, [r7, #12]
 8021c6e:	685b      	ldr	r3, [r3, #4]
 8021c70:	2b00      	cmp	r3, #0
 8021c72:	d006      	beq.n	8021c82 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8021c74:	4b38      	ldr	r3, [pc, #224]	; (8021d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021c76:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8021c7a:	493a      	ldr	r1, [pc, #232]	; (8021d64 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8021c7c:	4838      	ldr	r0, [pc, #224]	; (8021d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021c7e:	f000 fddb 	bl	8022838 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8021c82:	68fb      	ldr	r3, [r7, #12]
 8021c84:	68ba      	ldr	r2, [r7, #8]
 8021c86:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8021c88:	687b      	ldr	r3, [r7, #4]
 8021c8a:	2b00      	cmp	r3, #0
 8021c8c:	d105      	bne.n	8021c9a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021c8e:	68fb      	ldr	r3, [r7, #12]
 8021c90:	7f9b      	ldrb	r3, [r3, #30]
 8021c92:	f003 0301 	and.w	r3, r3, #1
 8021c96:	2b00      	cmp	r3, #0
 8021c98:	d059      	beq.n	8021d4e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8021c9a:	6a3b      	ldr	r3, [r7, #32]
 8021c9c:	2b00      	cmp	r3, #0
 8021c9e:	d04f      	beq.n	8021d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021ca0:	68fb      	ldr	r3, [r7, #12]
 8021ca2:	685b      	ldr	r3, [r3, #4]
 8021ca4:	2b00      	cmp	r3, #0
 8021ca6:	d006      	beq.n	8021cb6 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8021ca8:	68fb      	ldr	r3, [r7, #12]
 8021caa:	685b      	ldr	r3, [r3, #4]
 8021cac:	685b      	ldr	r3, [r3, #4]
 8021cae:	889b      	ldrh	r3, [r3, #4]
 8021cb0:	b29b      	uxth	r3, r3
 8021cb2:	2b00      	cmp	r3, #0
 8021cb4:	d002      	beq.n	8021cbc <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8021cb6:	2300      	movs	r3, #0
 8021cb8:	623b      	str	r3, [r7, #32]
 8021cba:	e041      	b.n	8021d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cbe:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cc2:	681b      	ldr	r3, [r3, #0]
 8021cc4:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021cc6:	e012      	b.n	8021cee <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8021cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cca:	685b      	ldr	r3, [r3, #4]
 8021ccc:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021cce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021cd0:	88db      	ldrh	r3, [r3, #6]
 8021cd2:	b29a      	uxth	r2, r3
 8021cd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cd6:	889b      	ldrh	r3, [r3, #4]
 8021cd8:	b29b      	uxth	r3, r3
 8021cda:	429a      	cmp	r2, r3
 8021cdc:	d002      	beq.n	8021ce4 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021cde:	2300      	movs	r3, #0
 8021ce0:	623b      	str	r3, [r7, #32]
            break;
 8021ce2:	e007      	b.n	8021cf4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ce6:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8021ce8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021cea:	681b      	ldr	r3, [r3, #0]
 8021cec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cf0:	2b00      	cmp	r3, #0
 8021cf2:	d1e9      	bne.n	8021cc8 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021cf4:	6a3b      	ldr	r3, [r7, #32]
 8021cf6:	2b00      	cmp	r3, #0
 8021cf8:	d022      	beq.n	8021d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8021cfa:	68fb      	ldr	r3, [r7, #12]
 8021cfc:	685b      	ldr	r3, [r3, #4]
 8021cfe:	2b00      	cmp	r3, #0
 8021d00:	d106      	bne.n	8021d10 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021d02:	4b15      	ldr	r3, [pc, #84]	; (8021d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021d04:	f240 12df 	movw	r2, #479	; 0x1df
 8021d08:	4917      	ldr	r1, [pc, #92]	; (8021d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021d0a:	4815      	ldr	r0, [pc, #84]	; (8021d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021d0c:	f000 fd94 	bl	8022838 <iprintf>
          LWIP_ASSERT("sanity check",
 8021d10:	68fb      	ldr	r3, [r7, #12]
 8021d12:	685b      	ldr	r3, [r3, #4]
 8021d14:	685b      	ldr	r3, [r3, #4]
 8021d16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8021d18:	429a      	cmp	r2, r3
 8021d1a:	d106      	bne.n	8021d2a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021d1c:	4b0e      	ldr	r3, [pc, #56]	; (8021d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021d1e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021d22:	4911      	ldr	r1, [pc, #68]	; (8021d68 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021d24:	480e      	ldr	r0, [pc, #56]	; (8021d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021d26:	f000 fd87 	bl	8022838 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8021d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021d2c:	681b      	ldr	r3, [r3, #0]
 8021d2e:	2b00      	cmp	r3, #0
 8021d30:	d006      	beq.n	8021d40 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8021d32:	4b09      	ldr	r3, [pc, #36]	; (8021d58 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021d34:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8021d38:	490c      	ldr	r1, [pc, #48]	; (8021d6c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8021d3a:	4809      	ldr	r0, [pc, #36]	; (8021d60 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021d3c:	f000 fd7c 	bl	8022838 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8021d40:	6a3b      	ldr	r3, [r7, #32]
 8021d42:	2b00      	cmp	r3, #0
 8021d44:	bf14      	ite	ne
 8021d46:	2301      	movne	r3, #1
 8021d48:	2300      	moveq	r3, #0
 8021d4a:	b2db      	uxtb	r3, r3
 8021d4c:	e000      	b.n	8021d50 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8021d4e:	2300      	movs	r3, #0
}
 8021d50:	4618      	mov	r0, r3
 8021d52:	3730      	adds	r7, #48	; 0x30
 8021d54:	46bd      	mov	sp, r7
 8021d56:	bd80      	pop	{r7, pc}
 8021d58:	080287e8 	.word	0x080287e8
 8021d5c:	080288cc 	.word	0x080288cc
 8021d60:	08028830 	.word	0x08028830
 8021d64:	080288ec 	.word	0x080288ec
 8021d68:	08028924 	.word	0x08028924
 8021d6c:	08028934 	.word	0x08028934

08021d70 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8021d70:	b580      	push	{r7, lr}
 8021d72:	b08e      	sub	sp, #56	; 0x38
 8021d74:	af00      	add	r7, sp, #0
 8021d76:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8021d78:	687b      	ldr	r3, [r7, #4]
 8021d7a:	685b      	ldr	r3, [r3, #4]
 8021d7c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8021d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d80:	781b      	ldrb	r3, [r3, #0]
 8021d82:	f003 030f 	and.w	r3, r3, #15
 8021d86:	b2db      	uxtb	r3, r3
 8021d88:	009b      	lsls	r3, r3, #2
 8021d8a:	b2db      	uxtb	r3, r3
 8021d8c:	2b14      	cmp	r3, #20
 8021d8e:	f040 8171 	bne.w	8022074 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021d94:	88db      	ldrh	r3, [r3, #6]
 8021d96:	b29b      	uxth	r3, r3
 8021d98:	4618      	mov	r0, r3
 8021d9a:	f7fb fc39 	bl	801d610 <lwip_htons>
 8021d9e:	4603      	mov	r3, r0
 8021da0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021da4:	b29b      	uxth	r3, r3
 8021da6:	00db      	lsls	r3, r3, #3
 8021da8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021daa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021dac:	885b      	ldrh	r3, [r3, #2]
 8021dae:	b29b      	uxth	r3, r3
 8021db0:	4618      	mov	r0, r3
 8021db2:	f7fb fc2d 	bl	801d610 <lwip_htons>
 8021db6:	4603      	mov	r3, r0
 8021db8:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8021dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021dbc:	781b      	ldrb	r3, [r3, #0]
 8021dbe:	f003 030f 	and.w	r3, r3, #15
 8021dc2:	b2db      	uxtb	r3, r3
 8021dc4:	009b      	lsls	r3, r3, #2
 8021dc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8021dca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021dce:	b29b      	uxth	r3, r3
 8021dd0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021dd2:	429a      	cmp	r2, r3
 8021dd4:	f0c0 8150 	bcc.w	8022078 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8021dd8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021ddc:	b29b      	uxth	r3, r3
 8021dde:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021de0:	1ad3      	subs	r3, r2, r3
 8021de2:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021de4:	6878      	ldr	r0, [r7, #4]
 8021de6:	f7fd f877 	bl	801eed8 <pbuf_clen>
 8021dea:	4603      	mov	r3, r0
 8021dec:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021dee:	4b8c      	ldr	r3, [pc, #560]	; (8022020 <ip4_reass+0x2b0>)
 8021df0:	881b      	ldrh	r3, [r3, #0]
 8021df2:	461a      	mov	r2, r3
 8021df4:	8c3b      	ldrh	r3, [r7, #32]
 8021df6:	4413      	add	r3, r2
 8021df8:	2b0a      	cmp	r3, #10
 8021dfa:	dd10      	ble.n	8021e1e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021dfc:	8c3b      	ldrh	r3, [r7, #32]
 8021dfe:	4619      	mov	r1, r3
 8021e00:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021e02:	f7ff fd81 	bl	8021908 <ip_reass_remove_oldest_datagram>
 8021e06:	4603      	mov	r3, r0
 8021e08:	2b00      	cmp	r3, #0
 8021e0a:	f000 8137 	beq.w	802207c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021e0e:	4b84      	ldr	r3, [pc, #528]	; (8022020 <ip4_reass+0x2b0>)
 8021e10:	881b      	ldrh	r3, [r3, #0]
 8021e12:	461a      	mov	r2, r3
 8021e14:	8c3b      	ldrh	r3, [r7, #32]
 8021e16:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021e18:	2b0a      	cmp	r3, #10
 8021e1a:	f300 812f 	bgt.w	802207c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021e1e:	4b81      	ldr	r3, [pc, #516]	; (8022024 <ip4_reass+0x2b4>)
 8021e20:	681b      	ldr	r3, [r3, #0]
 8021e22:	633b      	str	r3, [r7, #48]	; 0x30
 8021e24:	e015      	b.n	8021e52 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8021e26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e28:	695a      	ldr	r2, [r3, #20]
 8021e2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e2c:	68db      	ldr	r3, [r3, #12]
 8021e2e:	429a      	cmp	r2, r3
 8021e30:	d10c      	bne.n	8021e4c <ip4_reass+0xdc>
 8021e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e34:	699a      	ldr	r2, [r3, #24]
 8021e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e38:	691b      	ldr	r3, [r3, #16]
 8021e3a:	429a      	cmp	r2, r3
 8021e3c:	d106      	bne.n	8021e4c <ip4_reass+0xdc>
 8021e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e40:	899a      	ldrh	r2, [r3, #12]
 8021e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e44:	889b      	ldrh	r3, [r3, #4]
 8021e46:	b29b      	uxth	r3, r3
 8021e48:	429a      	cmp	r2, r3
 8021e4a:	d006      	beq.n	8021e5a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e4e:	681b      	ldr	r3, [r3, #0]
 8021e50:	633b      	str	r3, [r7, #48]	; 0x30
 8021e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e54:	2b00      	cmp	r3, #0
 8021e56:	d1e6      	bne.n	8021e26 <ip4_reass+0xb6>
 8021e58:	e000      	b.n	8021e5c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8021e5a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8021e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e5e:	2b00      	cmp	r3, #0
 8021e60:	d109      	bne.n	8021e76 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8021e62:	8c3b      	ldrh	r3, [r7, #32]
 8021e64:	4619      	mov	r1, r3
 8021e66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021e68:	f7ff fdb0 	bl	80219cc <ip_reass_enqueue_new_datagram>
 8021e6c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8021e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e70:	2b00      	cmp	r3, #0
 8021e72:	d11c      	bne.n	8021eae <ip4_reass+0x13e>
      goto nullreturn;
 8021e74:	e105      	b.n	8022082 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021e78:	88db      	ldrh	r3, [r3, #6]
 8021e7a:	b29b      	uxth	r3, r3
 8021e7c:	4618      	mov	r0, r3
 8021e7e:	f7fb fbc7 	bl	801d610 <lwip_htons>
 8021e82:	4603      	mov	r3, r0
 8021e84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021e88:	2b00      	cmp	r3, #0
 8021e8a:	d110      	bne.n	8021eae <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021e8e:	89db      	ldrh	r3, [r3, #14]
 8021e90:	4618      	mov	r0, r3
 8021e92:	f7fb fbbd 	bl	801d610 <lwip_htons>
 8021e96:	4603      	mov	r3, r0
 8021e98:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021e9c:	2b00      	cmp	r3, #0
 8021e9e:	d006      	beq.n	8021eae <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ea2:	3308      	adds	r3, #8
 8021ea4:	2214      	movs	r2, #20
 8021ea6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8021ea8:	4618      	mov	r0, r3
 8021eaa:	f000 fbb5 	bl	8022618 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021eb0:	88db      	ldrh	r3, [r3, #6]
 8021eb2:	b29b      	uxth	r3, r3
 8021eb4:	f003 0320 	and.w	r3, r3, #32
 8021eb8:	2b00      	cmp	r3, #0
 8021eba:	bf0c      	ite	eq
 8021ebc:	2301      	moveq	r3, #1
 8021ebe:	2300      	movne	r3, #0
 8021ec0:	b2db      	uxtb	r3, r3
 8021ec2:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021ec4:	69fb      	ldr	r3, [r7, #28]
 8021ec6:	2b00      	cmp	r3, #0
 8021ec8:	d00e      	beq.n	8021ee8 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8021eca:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021ecc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021ece:	4413      	add	r3, r2
 8021ed0:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021ed2:	8b7a      	ldrh	r2, [r7, #26]
 8021ed4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8021ed6:	429a      	cmp	r2, r3
 8021ed8:	f0c0 80a0 	bcc.w	802201c <ip4_reass+0x2ac>
 8021edc:	8b7b      	ldrh	r3, [r7, #26]
 8021ede:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021ee2:	4293      	cmp	r3, r2
 8021ee4:	f200 809a 	bhi.w	802201c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8021ee8:	69fa      	ldr	r2, [r7, #28]
 8021eea:	6879      	ldr	r1, [r7, #4]
 8021eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021eee:	f7ff fdd5 	bl	8021a9c <ip_reass_chain_frag_into_datagram_and_validate>
 8021ef2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021ef4:	697b      	ldr	r3, [r7, #20]
 8021ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8021efa:	f000 809b 	beq.w	8022034 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021efe:	4b48      	ldr	r3, [pc, #288]	; (8022020 <ip4_reass+0x2b0>)
 8021f00:	881a      	ldrh	r2, [r3, #0]
 8021f02:	8c3b      	ldrh	r3, [r7, #32]
 8021f04:	4413      	add	r3, r2
 8021f06:	b29a      	uxth	r2, r3
 8021f08:	4b45      	ldr	r3, [pc, #276]	; (8022020 <ip4_reass+0x2b0>)
 8021f0a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021f0c:	69fb      	ldr	r3, [r7, #28]
 8021f0e:	2b00      	cmp	r3, #0
 8021f10:	d00d      	beq.n	8021f2e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021f12:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021f16:	4413      	add	r3, r2
 8021f18:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8021f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f1c:	8a7a      	ldrh	r2, [r7, #18]
 8021f1e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f22:	7f9b      	ldrb	r3, [r3, #30]
 8021f24:	f043 0301 	orr.w	r3, r3, #1
 8021f28:	b2da      	uxtb	r2, r3
 8021f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f2c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8021f2e:	697b      	ldr	r3, [r7, #20]
 8021f30:	2b01      	cmp	r3, #1
 8021f32:	d171      	bne.n	8022018 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8021f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f36:	8b9b      	ldrh	r3, [r3, #28]
 8021f38:	3314      	adds	r3, #20
 8021f3a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8021f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f3e:	685b      	ldr	r3, [r3, #4]
 8021f40:	685b      	ldr	r3, [r3, #4]
 8021f42:	681b      	ldr	r3, [r3, #0]
 8021f44:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8021f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f48:	685b      	ldr	r3, [r3, #4]
 8021f4a:	685b      	ldr	r3, [r3, #4]
 8021f4c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8021f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f50:	3308      	adds	r3, #8
 8021f52:	2214      	movs	r2, #20
 8021f54:	4619      	mov	r1, r3
 8021f56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021f58:	f000 fb5e 	bl	8022618 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8021f5c:	8a3b      	ldrh	r3, [r7, #16]
 8021f5e:	4618      	mov	r0, r3
 8021f60:	f7fb fb56 	bl	801d610 <lwip_htons>
 8021f64:	4603      	mov	r3, r0
 8021f66:	461a      	mov	r2, r3
 8021f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f6a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8021f6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f6e:	2200      	movs	r2, #0
 8021f70:	719a      	strb	r2, [r3, #6]
 8021f72:	2200      	movs	r2, #0
 8021f74:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8021f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021f78:	2200      	movs	r2, #0
 8021f7a:	729a      	strb	r2, [r3, #10]
 8021f7c:	2200      	movs	r2, #0
 8021f7e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8021f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021f82:	685b      	ldr	r3, [r3, #4]
 8021f84:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8021f86:	e00d      	b.n	8021fa4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8021f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021f8a:	685b      	ldr	r3, [r3, #4]
 8021f8c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8021f8e:	2114      	movs	r1, #20
 8021f90:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021f92:	f7fc fe93 	bl	801ecbc <pbuf_remove_header>
      pbuf_cat(p, r);
 8021f96:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021f98:	6878      	ldr	r0, [r7, #4]
 8021f9a:	f7fc ffd7 	bl	801ef4c <pbuf_cat>
      r = iprh->next_pbuf;
 8021f9e:	68fb      	ldr	r3, [r7, #12]
 8021fa0:	681b      	ldr	r3, [r3, #0]
 8021fa2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021fa6:	2b00      	cmp	r3, #0
 8021fa8:	d1ee      	bne.n	8021f88 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021faa:	4b1e      	ldr	r3, [pc, #120]	; (8022024 <ip4_reass+0x2b4>)
 8021fac:	681b      	ldr	r3, [r3, #0]
 8021fae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021fb0:	429a      	cmp	r2, r3
 8021fb2:	d102      	bne.n	8021fba <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021fb4:	2300      	movs	r3, #0
 8021fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021fb8:	e010      	b.n	8021fdc <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021fba:	4b1a      	ldr	r3, [pc, #104]	; (8022024 <ip4_reass+0x2b4>)
 8021fbc:	681b      	ldr	r3, [r3, #0]
 8021fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021fc0:	e007      	b.n	8021fd2 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fc4:	681b      	ldr	r3, [r3, #0]
 8021fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021fc8:	429a      	cmp	r2, r3
 8021fca:	d006      	beq.n	8021fda <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fce:	681b      	ldr	r3, [r3, #0]
 8021fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fd4:	2b00      	cmp	r3, #0
 8021fd6:	d1f4      	bne.n	8021fc2 <ip4_reass+0x252>
 8021fd8:	e000      	b.n	8021fdc <ip4_reass+0x26c>
          break;
 8021fda:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021fdc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021fde:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021fe0:	f7ff fd2e 	bl	8021a40 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021fe4:	6878      	ldr	r0, [r7, #4]
 8021fe6:	f7fc ff77 	bl	801eed8 <pbuf_clen>
 8021fea:	4603      	mov	r3, r0
 8021fec:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8021fee:	4b0c      	ldr	r3, [pc, #48]	; (8022020 <ip4_reass+0x2b0>)
 8021ff0:	881b      	ldrh	r3, [r3, #0]
 8021ff2:	8c3a      	ldrh	r2, [r7, #32]
 8021ff4:	429a      	cmp	r2, r3
 8021ff6:	d906      	bls.n	8022006 <ip4_reass+0x296>
 8021ff8:	4b0b      	ldr	r3, [pc, #44]	; (8022028 <ip4_reass+0x2b8>)
 8021ffa:	f240 229b 	movw	r2, #667	; 0x29b
 8021ffe:	490b      	ldr	r1, [pc, #44]	; (802202c <ip4_reass+0x2bc>)
 8022000:	480b      	ldr	r0, [pc, #44]	; (8022030 <ip4_reass+0x2c0>)
 8022002:	f000 fc19 	bl	8022838 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8022006:	4b06      	ldr	r3, [pc, #24]	; (8022020 <ip4_reass+0x2b0>)
 8022008:	881a      	ldrh	r2, [r3, #0]
 802200a:	8c3b      	ldrh	r3, [r7, #32]
 802200c:	1ad3      	subs	r3, r2, r3
 802200e:	b29a      	uxth	r2, r3
 8022010:	4b03      	ldr	r3, [pc, #12]	; (8022020 <ip4_reass+0x2b0>)
 8022012:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8022014:	687b      	ldr	r3, [r7, #4]
 8022016:	e038      	b.n	802208a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8022018:	2300      	movs	r3, #0
 802201a:	e036      	b.n	802208a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 802201c:	bf00      	nop
 802201e:	e00a      	b.n	8022036 <ip4_reass+0x2c6>
 8022020:	20014670 	.word	0x20014670
 8022024:	2001466c 	.word	0x2001466c
 8022028:	080287e8 	.word	0x080287e8
 802202c:	08028958 	.word	0x08028958
 8022030:	08028830 	.word	0x08028830
    goto nullreturn_ipr;
 8022034:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8022036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022038:	2b00      	cmp	r3, #0
 802203a:	d106      	bne.n	802204a <ip4_reass+0x2da>
 802203c:	4b15      	ldr	r3, [pc, #84]	; (8022094 <ip4_reass+0x324>)
 802203e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8022042:	4915      	ldr	r1, [pc, #84]	; (8022098 <ip4_reass+0x328>)
 8022044:	4815      	ldr	r0, [pc, #84]	; (802209c <ip4_reass+0x32c>)
 8022046:	f000 fbf7 	bl	8022838 <iprintf>
  if (ipr->p == NULL) {
 802204a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802204c:	685b      	ldr	r3, [r3, #4]
 802204e:	2b00      	cmp	r3, #0
 8022050:	d116      	bne.n	8022080 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8022052:	4b13      	ldr	r3, [pc, #76]	; (80220a0 <ip4_reass+0x330>)
 8022054:	681b      	ldr	r3, [r3, #0]
 8022056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022058:	429a      	cmp	r2, r3
 802205a:	d006      	beq.n	802206a <ip4_reass+0x2fa>
 802205c:	4b0d      	ldr	r3, [pc, #52]	; (8022094 <ip4_reass+0x324>)
 802205e:	f240 22ab 	movw	r2, #683	; 0x2ab
 8022062:	4910      	ldr	r1, [pc, #64]	; (80220a4 <ip4_reass+0x334>)
 8022064:	480d      	ldr	r0, [pc, #52]	; (802209c <ip4_reass+0x32c>)
 8022066:	f000 fbe7 	bl	8022838 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 802206a:	2100      	movs	r1, #0
 802206c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802206e:	f7ff fce7 	bl	8021a40 <ip_reass_dequeue_datagram>
 8022072:	e006      	b.n	8022082 <ip4_reass+0x312>
    goto nullreturn;
 8022074:	bf00      	nop
 8022076:	e004      	b.n	8022082 <ip4_reass+0x312>
    goto nullreturn;
 8022078:	bf00      	nop
 802207a:	e002      	b.n	8022082 <ip4_reass+0x312>
      goto nullreturn;
 802207c:	bf00      	nop
 802207e:	e000      	b.n	8022082 <ip4_reass+0x312>
  }

nullreturn:
 8022080:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8022082:	6878      	ldr	r0, [r7, #4]
 8022084:	f7fc fea0 	bl	801edc8 <pbuf_free>
  return NULL;
 8022088:	2300      	movs	r3, #0
}
 802208a:	4618      	mov	r0, r3
 802208c:	3738      	adds	r7, #56	; 0x38
 802208e:	46bd      	mov	sp, r7
 8022090:	bd80      	pop	{r7, pc}
 8022092:	bf00      	nop
 8022094:	080287e8 	.word	0x080287e8
 8022098:	08028974 	.word	0x08028974
 802209c:	08028830 	.word	0x08028830
 80220a0:	2001466c 	.word	0x2001466c
 80220a4:	08028980 	.word	0x08028980

080220a8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80220a8:	b580      	push	{r7, lr}
 80220aa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80220ac:	2002      	movs	r0, #2
 80220ae:	f7fb ff0b 	bl	801dec8 <memp_malloc>
 80220b2:	4603      	mov	r3, r0
}
 80220b4:	4618      	mov	r0, r3
 80220b6:	bd80      	pop	{r7, pc}

080220b8 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80220b8:	b580      	push	{r7, lr}
 80220ba:	b082      	sub	sp, #8
 80220bc:	af00      	add	r7, sp, #0
 80220be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80220c0:	687b      	ldr	r3, [r7, #4]
 80220c2:	2b00      	cmp	r3, #0
 80220c4:	d106      	bne.n	80220d4 <ip_frag_free_pbuf_custom_ref+0x1c>
 80220c6:	4b07      	ldr	r3, [pc, #28]	; (80220e4 <ip_frag_free_pbuf_custom_ref+0x2c>)
 80220c8:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80220cc:	4906      	ldr	r1, [pc, #24]	; (80220e8 <ip_frag_free_pbuf_custom_ref+0x30>)
 80220ce:	4807      	ldr	r0, [pc, #28]	; (80220ec <ip_frag_free_pbuf_custom_ref+0x34>)
 80220d0:	f000 fbb2 	bl	8022838 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80220d4:	6879      	ldr	r1, [r7, #4]
 80220d6:	2002      	movs	r0, #2
 80220d8:	f7fb ff66 	bl	801dfa8 <memp_free>
}
 80220dc:	bf00      	nop
 80220de:	3708      	adds	r7, #8
 80220e0:	46bd      	mov	sp, r7
 80220e2:	bd80      	pop	{r7, pc}
 80220e4:	080287e8 	.word	0x080287e8
 80220e8:	080289a0 	.word	0x080289a0
 80220ec:	08028830 	.word	0x08028830

080220f0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 80220f0:	b580      	push	{r7, lr}
 80220f2:	b084      	sub	sp, #16
 80220f4:	af00      	add	r7, sp, #0
 80220f6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 80220f8:	687b      	ldr	r3, [r7, #4]
 80220fa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 80220fc:	68fb      	ldr	r3, [r7, #12]
 80220fe:	2b00      	cmp	r3, #0
 8022100:	d106      	bne.n	8022110 <ipfrag_free_pbuf_custom+0x20>
 8022102:	4b11      	ldr	r3, [pc, #68]	; (8022148 <ipfrag_free_pbuf_custom+0x58>)
 8022104:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022108:	4910      	ldr	r1, [pc, #64]	; (802214c <ipfrag_free_pbuf_custom+0x5c>)
 802210a:	4811      	ldr	r0, [pc, #68]	; (8022150 <ipfrag_free_pbuf_custom+0x60>)
 802210c:	f000 fb94 	bl	8022838 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8022110:	68fa      	ldr	r2, [r7, #12]
 8022112:	687b      	ldr	r3, [r7, #4]
 8022114:	429a      	cmp	r2, r3
 8022116:	d006      	beq.n	8022126 <ipfrag_free_pbuf_custom+0x36>
 8022118:	4b0b      	ldr	r3, [pc, #44]	; (8022148 <ipfrag_free_pbuf_custom+0x58>)
 802211a:	f240 22cf 	movw	r2, #719	; 0x2cf
 802211e:	490d      	ldr	r1, [pc, #52]	; (8022154 <ipfrag_free_pbuf_custom+0x64>)
 8022120:	480b      	ldr	r0, [pc, #44]	; (8022150 <ipfrag_free_pbuf_custom+0x60>)
 8022122:	f000 fb89 	bl	8022838 <iprintf>
  if (pcr->original != NULL) {
 8022126:	68fb      	ldr	r3, [r7, #12]
 8022128:	695b      	ldr	r3, [r3, #20]
 802212a:	2b00      	cmp	r3, #0
 802212c:	d004      	beq.n	8022138 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802212e:	68fb      	ldr	r3, [r7, #12]
 8022130:	695b      	ldr	r3, [r3, #20]
 8022132:	4618      	mov	r0, r3
 8022134:	f7fc fe48 	bl	801edc8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8022138:	68f8      	ldr	r0, [r7, #12]
 802213a:	f7ff ffbd 	bl	80220b8 <ip_frag_free_pbuf_custom_ref>
}
 802213e:	bf00      	nop
 8022140:	3710      	adds	r7, #16
 8022142:	46bd      	mov	sp, r7
 8022144:	bd80      	pop	{r7, pc}
 8022146:	bf00      	nop
 8022148:	080287e8 	.word	0x080287e8
 802214c:	080289ac 	.word	0x080289ac
 8022150:	08028830 	.word	0x08028830
 8022154:	080289b8 	.word	0x080289b8

08022158 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8022158:	b580      	push	{r7, lr}
 802215a:	b094      	sub	sp, #80	; 0x50
 802215c:	af02      	add	r7, sp, #8
 802215e:	60f8      	str	r0, [r7, #12]
 8022160:	60b9      	str	r1, [r7, #8]
 8022162:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8022164:	2300      	movs	r3, #0
 8022166:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 802216a:	68bb      	ldr	r3, [r7, #8]
 802216c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 802216e:	3b14      	subs	r3, #20
 8022170:	2b00      	cmp	r3, #0
 8022172:	da00      	bge.n	8022176 <ip4_frag+0x1e>
 8022174:	3307      	adds	r3, #7
 8022176:	10db      	asrs	r3, r3, #3
 8022178:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 802217a:	2314      	movs	r3, #20
 802217c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 802217e:	68fb      	ldr	r3, [r7, #12]
 8022180:	685b      	ldr	r3, [r3, #4]
 8022182:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8022184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8022186:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8022188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802218a:	781b      	ldrb	r3, [r3, #0]
 802218c:	f003 030f 	and.w	r3, r3, #15
 8022190:	b2db      	uxtb	r3, r3
 8022192:	009b      	lsls	r3, r3, #2
 8022194:	b2db      	uxtb	r3, r3
 8022196:	2b14      	cmp	r3, #20
 8022198:	d002      	beq.n	80221a0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 802219a:	f06f 0305 	mvn.w	r3, #5
 802219e:	e110      	b.n	80223c2 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80221a0:	68fb      	ldr	r3, [r7, #12]
 80221a2:	895b      	ldrh	r3, [r3, #10]
 80221a4:	2b13      	cmp	r3, #19
 80221a6:	d809      	bhi.n	80221bc <ip4_frag+0x64>
 80221a8:	4b88      	ldr	r3, [pc, #544]	; (80223cc <ip4_frag+0x274>)
 80221aa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80221ae:	4988      	ldr	r1, [pc, #544]	; (80223d0 <ip4_frag+0x278>)
 80221b0:	4888      	ldr	r0, [pc, #544]	; (80223d4 <ip4_frag+0x27c>)
 80221b2:	f000 fb41 	bl	8022838 <iprintf>
 80221b6:	f06f 0305 	mvn.w	r3, #5
 80221ba:	e102      	b.n	80223c2 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80221bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80221be:	88db      	ldrh	r3, [r3, #6]
 80221c0:	b29b      	uxth	r3, r3
 80221c2:	4618      	mov	r0, r3
 80221c4:	f7fb fa24 	bl	801d610 <lwip_htons>
 80221c8:	4603      	mov	r3, r0
 80221ca:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80221cc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80221ce:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80221d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80221d6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80221d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80221dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80221de:	68fb      	ldr	r3, [r7, #12]
 80221e0:	891b      	ldrh	r3, [r3, #8]
 80221e2:	3b14      	subs	r3, #20
 80221e4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80221e8:	e0e1      	b.n	80223ae <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80221ea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80221ec:	00db      	lsls	r3, r3, #3
 80221ee:	b29b      	uxth	r3, r3
 80221f0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80221f4:	4293      	cmp	r3, r2
 80221f6:	bf28      	it	cs
 80221f8:	4613      	movcs	r3, r2
 80221fa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80221fc:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022200:	2114      	movs	r1, #20
 8022202:	200e      	movs	r0, #14
 8022204:	f7fc fafe 	bl	801e804 <pbuf_alloc>
 8022208:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802220c:	2b00      	cmp	r3, #0
 802220e:	f000 80d5 	beq.w	80223bc <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022214:	895b      	ldrh	r3, [r3, #10]
 8022216:	2b13      	cmp	r3, #19
 8022218:	d806      	bhi.n	8022228 <ip4_frag+0xd0>
 802221a:	4b6c      	ldr	r3, [pc, #432]	; (80223cc <ip4_frag+0x274>)
 802221c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022220:	496d      	ldr	r1, [pc, #436]	; (80223d8 <ip4_frag+0x280>)
 8022222:	486c      	ldr	r0, [pc, #432]	; (80223d4 <ip4_frag+0x27c>)
 8022224:	f000 fb08 	bl	8022838 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802222a:	685b      	ldr	r3, [r3, #4]
 802222c:	2214      	movs	r2, #20
 802222e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022230:	4618      	mov	r0, r3
 8022232:	f000 f9f1 	bl	8022618 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8022236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022238:	685b      	ldr	r3, [r3, #4]
 802223a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 802223c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802223e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8022242:	e064      	b.n	802230e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022244:	68fb      	ldr	r3, [r7, #12]
 8022246:	895a      	ldrh	r2, [r3, #10]
 8022248:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802224a:	1ad3      	subs	r3, r2, r3
 802224c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802224e:	68fb      	ldr	r3, [r7, #12]
 8022250:	895b      	ldrh	r3, [r3, #10]
 8022252:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022254:	429a      	cmp	r2, r3
 8022256:	d906      	bls.n	8022266 <ip4_frag+0x10e>
 8022258:	4b5c      	ldr	r3, [pc, #368]	; (80223cc <ip4_frag+0x274>)
 802225a:	f240 322d 	movw	r2, #813	; 0x32d
 802225e:	495f      	ldr	r1, [pc, #380]	; (80223dc <ip4_frag+0x284>)
 8022260:	485c      	ldr	r0, [pc, #368]	; (80223d4 <ip4_frag+0x27c>)
 8022262:	f000 fae9 	bl	8022838 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8022266:	8bfa      	ldrh	r2, [r7, #30]
 8022268:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 802226c:	4293      	cmp	r3, r2
 802226e:	bf28      	it	cs
 8022270:	4613      	movcs	r3, r2
 8022272:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8022276:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802227a:	2b00      	cmp	r3, #0
 802227c:	d105      	bne.n	802228a <ip4_frag+0x132>
        poff = 0;
 802227e:	2300      	movs	r3, #0
 8022280:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022282:	68fb      	ldr	r3, [r7, #12]
 8022284:	681b      	ldr	r3, [r3, #0]
 8022286:	60fb      	str	r3, [r7, #12]
        continue;
 8022288:	e041      	b.n	802230e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 802228a:	f7ff ff0d 	bl	80220a8 <ip_frag_alloc_pbuf_custom_ref>
 802228e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8022290:	69bb      	ldr	r3, [r7, #24]
 8022292:	2b00      	cmp	r3, #0
 8022294:	d103      	bne.n	802229e <ip4_frag+0x146>
        pbuf_free(rambuf);
 8022296:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022298:	f7fc fd96 	bl	801edc8 <pbuf_free>
        goto memerr;
 802229c:	e08f      	b.n	80223be <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 802229e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80222a0:	68fb      	ldr	r3, [r7, #12]
 80222a2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80222a4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80222a6:	4413      	add	r3, r2
 80222a8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80222ac:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80222b0:	9201      	str	r2, [sp, #4]
 80222b2:	9300      	str	r3, [sp, #0]
 80222b4:	4603      	mov	r3, r0
 80222b6:	2241      	movs	r2, #65	; 0x41
 80222b8:	2000      	movs	r0, #0
 80222ba:	f7fc fbcb 	bl	801ea54 <pbuf_alloced_custom>
 80222be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80222c0:	697b      	ldr	r3, [r7, #20]
 80222c2:	2b00      	cmp	r3, #0
 80222c4:	d106      	bne.n	80222d4 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80222c6:	69b8      	ldr	r0, [r7, #24]
 80222c8:	f7ff fef6 	bl	80220b8 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80222cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222ce:	f7fc fd7b 	bl	801edc8 <pbuf_free>
        goto memerr;
 80222d2:	e074      	b.n	80223be <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80222d4:	68f8      	ldr	r0, [r7, #12]
 80222d6:	f7fc fe17 	bl	801ef08 <pbuf_ref>
      pcr->original = p;
 80222da:	69bb      	ldr	r3, [r7, #24]
 80222dc:	68fa      	ldr	r2, [r7, #12]
 80222de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80222e0:	69bb      	ldr	r3, [r7, #24]
 80222e2:	4a3f      	ldr	r2, [pc, #252]	; (80223e0 <ip4_frag+0x288>)
 80222e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80222e6:	6979      	ldr	r1, [r7, #20]
 80222e8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80222ea:	f7fc fe2f 	bl	801ef4c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80222ee:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80222f2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80222f6:	1ad3      	subs	r3, r2, r3
 80222f8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80222fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022300:	2b00      	cmp	r3, #0
 8022302:	d004      	beq.n	802230e <ip4_frag+0x1b6>
        poff = 0;
 8022304:	2300      	movs	r3, #0
 8022306:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022308:	68fb      	ldr	r3, [r7, #12]
 802230a:	681b      	ldr	r3, [r3, #0]
 802230c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802230e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022312:	2b00      	cmp	r3, #0
 8022314:	d196      	bne.n	8022244 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8022316:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022318:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802231c:	4413      	add	r3, r2
 802231e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8022320:	68bb      	ldr	r3, [r7, #8]
 8022322:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8022324:	f1a3 0213 	sub.w	r2, r3, #19
 8022328:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802232c:	429a      	cmp	r2, r3
 802232e:	bfcc      	ite	gt
 8022330:	2301      	movgt	r3, #1
 8022332:	2300      	movle	r3, #0
 8022334:	b2db      	uxtb	r3, r3
 8022336:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022338:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802233c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022340:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8022342:	6a3b      	ldr	r3, [r7, #32]
 8022344:	2b00      	cmp	r3, #0
 8022346:	d002      	beq.n	802234e <ip4_frag+0x1f6>
 8022348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802234a:	2b00      	cmp	r3, #0
 802234c:	d003      	beq.n	8022356 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802234e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022350:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8022354:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8022356:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022358:	4618      	mov	r0, r3
 802235a:	f7fb f959 	bl	801d610 <lwip_htons>
 802235e:	4603      	mov	r3, r0
 8022360:	461a      	mov	r2, r3
 8022362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022364:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8022366:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8022368:	3314      	adds	r3, #20
 802236a:	b29b      	uxth	r3, r3
 802236c:	4618      	mov	r0, r3
 802236e:	f7fb f94f 	bl	801d610 <lwip_htons>
 8022372:	4603      	mov	r3, r0
 8022374:	461a      	mov	r2, r3
 8022376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022378:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 802237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802237c:	2200      	movs	r2, #0
 802237e:	729a      	strb	r2, [r3, #10]
 8022380:	2200      	movs	r2, #0
 8022382:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8022384:	68bb      	ldr	r3, [r7, #8]
 8022386:	695b      	ldr	r3, [r3, #20]
 8022388:	687a      	ldr	r2, [r7, #4]
 802238a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 802238c:	68b8      	ldr	r0, [r7, #8]
 802238e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8022390:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8022392:	f7fc fd19 	bl	801edc8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8022396:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 802239a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802239c:	1ad3      	subs	r3, r2, r3
 802239e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80223a2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80223a6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80223a8:	4413      	add	r3, r2
 80223aa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80223ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80223b2:	2b00      	cmp	r3, #0
 80223b4:	f47f af19 	bne.w	80221ea <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80223b8:	2300      	movs	r3, #0
 80223ba:	e002      	b.n	80223c2 <ip4_frag+0x26a>
      goto memerr;
 80223bc:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80223be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80223c2:	4618      	mov	r0, r3
 80223c4:	3748      	adds	r7, #72	; 0x48
 80223c6:	46bd      	mov	sp, r7
 80223c8:	bd80      	pop	{r7, pc}
 80223ca:	bf00      	nop
 80223cc:	080287e8 	.word	0x080287e8
 80223d0:	080289c4 	.word	0x080289c4
 80223d4:	08028830 	.word	0x08028830
 80223d8:	080289e0 	.word	0x080289e0
 80223dc:	08028a00 	.word	0x08028a00
 80223e0:	080220f1 	.word	0x080220f1

080223e4 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80223e4:	b580      	push	{r7, lr}
 80223e6:	b086      	sub	sp, #24
 80223e8:	af00      	add	r7, sp, #0
 80223ea:	6078      	str	r0, [r7, #4]
 80223ec:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80223ee:	230e      	movs	r3, #14
 80223f0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80223f2:	687b      	ldr	r3, [r7, #4]
 80223f4:	895b      	ldrh	r3, [r3, #10]
 80223f6:	2b0e      	cmp	r3, #14
 80223f8:	d96e      	bls.n	80224d8 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80223fa:	687b      	ldr	r3, [r7, #4]
 80223fc:	7bdb      	ldrb	r3, [r3, #15]
 80223fe:	2b00      	cmp	r3, #0
 8022400:	d106      	bne.n	8022410 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8022402:	683b      	ldr	r3, [r7, #0]
 8022404:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8022408:	3301      	adds	r3, #1
 802240a:	b2da      	uxtb	r2, r3
 802240c:	687b      	ldr	r3, [r7, #4]
 802240e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022410:	687b      	ldr	r3, [r7, #4]
 8022412:	685b      	ldr	r3, [r3, #4]
 8022414:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022416:	693b      	ldr	r3, [r7, #16]
 8022418:	7b1a      	ldrb	r2, [r3, #12]
 802241a:	7b5b      	ldrb	r3, [r3, #13]
 802241c:	021b      	lsls	r3, r3, #8
 802241e:	4313      	orrs	r3, r2
 8022420:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022422:	693b      	ldr	r3, [r7, #16]
 8022424:	781b      	ldrb	r3, [r3, #0]
 8022426:	f003 0301 	and.w	r3, r3, #1
 802242a:	2b00      	cmp	r3, #0
 802242c:	d023      	beq.n	8022476 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802242e:	693b      	ldr	r3, [r7, #16]
 8022430:	781b      	ldrb	r3, [r3, #0]
 8022432:	2b01      	cmp	r3, #1
 8022434:	d10f      	bne.n	8022456 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022436:	693b      	ldr	r3, [r7, #16]
 8022438:	785b      	ldrb	r3, [r3, #1]
 802243a:	2b00      	cmp	r3, #0
 802243c:	d11b      	bne.n	8022476 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802243e:	693b      	ldr	r3, [r7, #16]
 8022440:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022442:	2b5e      	cmp	r3, #94	; 0x5e
 8022444:	d117      	bne.n	8022476 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022446:	687b      	ldr	r3, [r7, #4]
 8022448:	7b5b      	ldrb	r3, [r3, #13]
 802244a:	f043 0310 	orr.w	r3, r3, #16
 802244e:	b2da      	uxtb	r2, r3
 8022450:	687b      	ldr	r3, [r7, #4]
 8022452:	735a      	strb	r2, [r3, #13]
 8022454:	e00f      	b.n	8022476 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8022456:	693b      	ldr	r3, [r7, #16]
 8022458:	2206      	movs	r2, #6
 802245a:	4928      	ldr	r1, [pc, #160]	; (80224fc <ethernet_input+0x118>)
 802245c:	4618      	mov	r0, r3
 802245e:	f000 f8cb 	bl	80225f8 <memcmp>
 8022462:	4603      	mov	r3, r0
 8022464:	2b00      	cmp	r3, #0
 8022466:	d106      	bne.n	8022476 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8022468:	687b      	ldr	r3, [r7, #4]
 802246a:	7b5b      	ldrb	r3, [r3, #13]
 802246c:	f043 0308 	orr.w	r3, r3, #8
 8022470:	b2da      	uxtb	r2, r3
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8022476:	89fb      	ldrh	r3, [r7, #14]
 8022478:	2b08      	cmp	r3, #8
 802247a:	d003      	beq.n	8022484 <ethernet_input+0xa0>
 802247c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8022480:	d014      	beq.n	80224ac <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8022482:	e032      	b.n	80224ea <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8022484:	683b      	ldr	r3, [r7, #0]
 8022486:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802248a:	f003 0308 	and.w	r3, r3, #8
 802248e:	2b00      	cmp	r3, #0
 8022490:	d024      	beq.n	80224dc <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8022492:	8afb      	ldrh	r3, [r7, #22]
 8022494:	4619      	mov	r1, r3
 8022496:	6878      	ldr	r0, [r7, #4]
 8022498:	f7fc fc10 	bl	801ecbc <pbuf_remove_header>
 802249c:	4603      	mov	r3, r0
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d11e      	bne.n	80224e0 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80224a2:	6839      	ldr	r1, [r7, #0]
 80224a4:	6878      	ldr	r0, [r7, #4]
 80224a6:	f7fe fe8d 	bl	80211c4 <ip4_input>
      break;
 80224aa:	e013      	b.n	80224d4 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80224ac:	683b      	ldr	r3, [r7, #0]
 80224ae:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80224b2:	f003 0308 	and.w	r3, r3, #8
 80224b6:	2b00      	cmp	r3, #0
 80224b8:	d014      	beq.n	80224e4 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80224ba:	8afb      	ldrh	r3, [r7, #22]
 80224bc:	4619      	mov	r1, r3
 80224be:	6878      	ldr	r0, [r7, #4]
 80224c0:	f7fc fbfc 	bl	801ecbc <pbuf_remove_header>
 80224c4:	4603      	mov	r3, r0
 80224c6:	2b00      	cmp	r3, #0
 80224c8:	d10e      	bne.n	80224e8 <ethernet_input+0x104>
        etharp_input(p, netif);
 80224ca:	6839      	ldr	r1, [r7, #0]
 80224cc:	6878      	ldr	r0, [r7, #4]
 80224ce:	f7fe f82d 	bl	802052c <etharp_input>
      break;
 80224d2:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80224d4:	2300      	movs	r3, #0
 80224d6:	e00c      	b.n	80224f2 <ethernet_input+0x10e>
    goto free_and_return;
 80224d8:	bf00      	nop
 80224da:	e006      	b.n	80224ea <ethernet_input+0x106>
        goto free_and_return;
 80224dc:	bf00      	nop
 80224de:	e004      	b.n	80224ea <ethernet_input+0x106>
        goto free_and_return;
 80224e0:	bf00      	nop
 80224e2:	e002      	b.n	80224ea <ethernet_input+0x106>
        goto free_and_return;
 80224e4:	bf00      	nop
 80224e6:	e000      	b.n	80224ea <ethernet_input+0x106>
        goto free_and_return;
 80224e8:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80224ea:	6878      	ldr	r0, [r7, #4]
 80224ec:	f7fc fc6c 	bl	801edc8 <pbuf_free>
  return ERR_OK;
 80224f0:	2300      	movs	r3, #0
}
 80224f2:	4618      	mov	r0, r3
 80224f4:	3718      	adds	r7, #24
 80224f6:	46bd      	mov	sp, r7
 80224f8:	bd80      	pop	{r7, pc}
 80224fa:	bf00      	nop
 80224fc:	08028f60 	.word	0x08028f60

08022500 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022500:	b580      	push	{r7, lr}
 8022502:	b086      	sub	sp, #24
 8022504:	af00      	add	r7, sp, #0
 8022506:	60f8      	str	r0, [r7, #12]
 8022508:	60b9      	str	r1, [r7, #8]
 802250a:	607a      	str	r2, [r7, #4]
 802250c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802250e:	8c3b      	ldrh	r3, [r7, #32]
 8022510:	4618      	mov	r0, r3
 8022512:	f7fb f87d 	bl	801d610 <lwip_htons>
 8022516:	4603      	mov	r3, r0
 8022518:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802251a:	210e      	movs	r1, #14
 802251c:	68b8      	ldr	r0, [r7, #8]
 802251e:	f7fc fbbd 	bl	801ec9c <pbuf_add_header>
 8022522:	4603      	mov	r3, r0
 8022524:	2b00      	cmp	r3, #0
 8022526:	d125      	bne.n	8022574 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022528:	68bb      	ldr	r3, [r7, #8]
 802252a:	685b      	ldr	r3, [r3, #4]
 802252c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802252e:	693b      	ldr	r3, [r7, #16]
 8022530:	8afa      	ldrh	r2, [r7, #22]
 8022532:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022534:	693b      	ldr	r3, [r7, #16]
 8022536:	2206      	movs	r2, #6
 8022538:	6839      	ldr	r1, [r7, #0]
 802253a:	4618      	mov	r0, r3
 802253c:	f000 f86c 	bl	8022618 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022540:	693b      	ldr	r3, [r7, #16]
 8022542:	3306      	adds	r3, #6
 8022544:	2206      	movs	r2, #6
 8022546:	6879      	ldr	r1, [r7, #4]
 8022548:	4618      	mov	r0, r3
 802254a:	f000 f865 	bl	8022618 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802254e:	68fb      	ldr	r3, [r7, #12]
 8022550:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022554:	2b06      	cmp	r3, #6
 8022556:	d006      	beq.n	8022566 <ethernet_output+0x66>
 8022558:	4b0a      	ldr	r3, [pc, #40]	; (8022584 <ethernet_output+0x84>)
 802255a:	f44f 7299 	mov.w	r2, #306	; 0x132
 802255e:	490a      	ldr	r1, [pc, #40]	; (8022588 <ethernet_output+0x88>)
 8022560:	480a      	ldr	r0, [pc, #40]	; (802258c <ethernet_output+0x8c>)
 8022562:	f000 f969 	bl	8022838 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8022566:	68fb      	ldr	r3, [r7, #12]
 8022568:	699b      	ldr	r3, [r3, #24]
 802256a:	68b9      	ldr	r1, [r7, #8]
 802256c:	68f8      	ldr	r0, [r7, #12]
 802256e:	4798      	blx	r3
 8022570:	4603      	mov	r3, r0
 8022572:	e002      	b.n	802257a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8022574:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8022576:	f06f 0301 	mvn.w	r3, #1
}
 802257a:	4618      	mov	r0, r3
 802257c:	3718      	adds	r7, #24
 802257e:	46bd      	mov	sp, r7
 8022580:	bd80      	pop	{r7, pc}
 8022582:	bf00      	nop
 8022584:	08028a10 	.word	0x08028a10
 8022588:	08028a48 	.word	0x08028a48
 802258c:	08028a7c 	.word	0x08028a7c

08022590 <__libc_init_array>:
 8022590:	b570      	push	{r4, r5, r6, lr}
 8022592:	4d0d      	ldr	r5, [pc, #52]	; (80225c8 <__libc_init_array+0x38>)
 8022594:	4c0d      	ldr	r4, [pc, #52]	; (80225cc <__libc_init_array+0x3c>)
 8022596:	1b64      	subs	r4, r4, r5
 8022598:	10a4      	asrs	r4, r4, #2
 802259a:	2600      	movs	r6, #0
 802259c:	42a6      	cmp	r6, r4
 802259e:	d109      	bne.n	80225b4 <__libc_init_array+0x24>
 80225a0:	4d0b      	ldr	r5, [pc, #44]	; (80225d0 <__libc_init_array+0x40>)
 80225a2:	4c0c      	ldr	r4, [pc, #48]	; (80225d4 <__libc_init_array+0x44>)
 80225a4:	f001 fbfe 	bl	8023da4 <_init>
 80225a8:	1b64      	subs	r4, r4, r5
 80225aa:	10a4      	asrs	r4, r4, #2
 80225ac:	2600      	movs	r6, #0
 80225ae:	42a6      	cmp	r6, r4
 80225b0:	d105      	bne.n	80225be <__libc_init_array+0x2e>
 80225b2:	bd70      	pop	{r4, r5, r6, pc}
 80225b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80225b8:	4798      	blx	r3
 80225ba:	3601      	adds	r6, #1
 80225bc:	e7ee      	b.n	802259c <__libc_init_array+0xc>
 80225be:	f855 3b04 	ldr.w	r3, [r5], #4
 80225c2:	4798      	blx	r3
 80225c4:	3601      	adds	r6, #1
 80225c6:	e7f2      	b.n	80225ae <__libc_init_array+0x1e>
 80225c8:	080290c0 	.word	0x080290c0
 80225cc:	080290c0 	.word	0x080290c0
 80225d0:	080290c0 	.word	0x080290c0
 80225d4:	080290c4 	.word	0x080290c4

080225d8 <malloc>:
 80225d8:	4b02      	ldr	r3, [pc, #8]	; (80225e4 <malloc+0xc>)
 80225da:	4601      	mov	r1, r0
 80225dc:	6818      	ldr	r0, [r3, #0]
 80225de:	f000 b8b7 	b.w	8022750 <_malloc_r>
 80225e2:	bf00      	nop
 80225e4:	20000140 	.word	0x20000140

080225e8 <free>:
 80225e8:	4b02      	ldr	r3, [pc, #8]	; (80225f4 <free+0xc>)
 80225ea:	4601      	mov	r1, r0
 80225ec:	6818      	ldr	r0, [r3, #0]
 80225ee:	f000 b843 	b.w	8022678 <_free_r>
 80225f2:	bf00      	nop
 80225f4:	20000140 	.word	0x20000140

080225f8 <memcmp>:
 80225f8:	b510      	push	{r4, lr}
 80225fa:	3901      	subs	r1, #1
 80225fc:	4402      	add	r2, r0
 80225fe:	4290      	cmp	r0, r2
 8022600:	d101      	bne.n	8022606 <memcmp+0xe>
 8022602:	2000      	movs	r0, #0
 8022604:	e005      	b.n	8022612 <memcmp+0x1a>
 8022606:	7803      	ldrb	r3, [r0, #0]
 8022608:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802260c:	42a3      	cmp	r3, r4
 802260e:	d001      	beq.n	8022614 <memcmp+0x1c>
 8022610:	1b18      	subs	r0, r3, r4
 8022612:	bd10      	pop	{r4, pc}
 8022614:	3001      	adds	r0, #1
 8022616:	e7f2      	b.n	80225fe <memcmp+0x6>

08022618 <memcpy>:
 8022618:	440a      	add	r2, r1
 802261a:	4291      	cmp	r1, r2
 802261c:	f100 33ff 	add.w	r3, r0, #4294967295
 8022620:	d100      	bne.n	8022624 <memcpy+0xc>
 8022622:	4770      	bx	lr
 8022624:	b510      	push	{r4, lr}
 8022626:	f811 4b01 	ldrb.w	r4, [r1], #1
 802262a:	f803 4f01 	strb.w	r4, [r3, #1]!
 802262e:	4291      	cmp	r1, r2
 8022630:	d1f9      	bne.n	8022626 <memcpy+0xe>
 8022632:	bd10      	pop	{r4, pc}

08022634 <memmove>:
 8022634:	4288      	cmp	r0, r1
 8022636:	b510      	push	{r4, lr}
 8022638:	eb01 0402 	add.w	r4, r1, r2
 802263c:	d902      	bls.n	8022644 <memmove+0x10>
 802263e:	4284      	cmp	r4, r0
 8022640:	4623      	mov	r3, r4
 8022642:	d807      	bhi.n	8022654 <memmove+0x20>
 8022644:	1e43      	subs	r3, r0, #1
 8022646:	42a1      	cmp	r1, r4
 8022648:	d008      	beq.n	802265c <memmove+0x28>
 802264a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802264e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022652:	e7f8      	b.n	8022646 <memmove+0x12>
 8022654:	4402      	add	r2, r0
 8022656:	4601      	mov	r1, r0
 8022658:	428a      	cmp	r2, r1
 802265a:	d100      	bne.n	802265e <memmove+0x2a>
 802265c:	bd10      	pop	{r4, pc}
 802265e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022662:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022666:	e7f7      	b.n	8022658 <memmove+0x24>

08022668 <memset>:
 8022668:	4402      	add	r2, r0
 802266a:	4603      	mov	r3, r0
 802266c:	4293      	cmp	r3, r2
 802266e:	d100      	bne.n	8022672 <memset+0xa>
 8022670:	4770      	bx	lr
 8022672:	f803 1b01 	strb.w	r1, [r3], #1
 8022676:	e7f9      	b.n	802266c <memset+0x4>

08022678 <_free_r>:
 8022678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 802267a:	2900      	cmp	r1, #0
 802267c:	d044      	beq.n	8022708 <_free_r+0x90>
 802267e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8022682:	9001      	str	r0, [sp, #4]
 8022684:	2b00      	cmp	r3, #0
 8022686:	f1a1 0404 	sub.w	r4, r1, #4
 802268a:	bfb8      	it	lt
 802268c:	18e4      	addlt	r4, r4, r3
 802268e:	f000 fdbb 	bl	8023208 <__malloc_lock>
 8022692:	4a1e      	ldr	r2, [pc, #120]	; (802270c <_free_r+0x94>)
 8022694:	9801      	ldr	r0, [sp, #4]
 8022696:	6813      	ldr	r3, [r2, #0]
 8022698:	b933      	cbnz	r3, 80226a8 <_free_r+0x30>
 802269a:	6063      	str	r3, [r4, #4]
 802269c:	6014      	str	r4, [r2, #0]
 802269e:	b003      	add	sp, #12
 80226a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80226a4:	f000 bdb6 	b.w	8023214 <__malloc_unlock>
 80226a8:	42a3      	cmp	r3, r4
 80226aa:	d908      	bls.n	80226be <_free_r+0x46>
 80226ac:	6825      	ldr	r5, [r4, #0]
 80226ae:	1961      	adds	r1, r4, r5
 80226b0:	428b      	cmp	r3, r1
 80226b2:	bf01      	itttt	eq
 80226b4:	6819      	ldreq	r1, [r3, #0]
 80226b6:	685b      	ldreq	r3, [r3, #4]
 80226b8:	1949      	addeq	r1, r1, r5
 80226ba:	6021      	streq	r1, [r4, #0]
 80226bc:	e7ed      	b.n	802269a <_free_r+0x22>
 80226be:	461a      	mov	r2, r3
 80226c0:	685b      	ldr	r3, [r3, #4]
 80226c2:	b10b      	cbz	r3, 80226c8 <_free_r+0x50>
 80226c4:	42a3      	cmp	r3, r4
 80226c6:	d9fa      	bls.n	80226be <_free_r+0x46>
 80226c8:	6811      	ldr	r1, [r2, #0]
 80226ca:	1855      	adds	r5, r2, r1
 80226cc:	42a5      	cmp	r5, r4
 80226ce:	d10b      	bne.n	80226e8 <_free_r+0x70>
 80226d0:	6824      	ldr	r4, [r4, #0]
 80226d2:	4421      	add	r1, r4
 80226d4:	1854      	adds	r4, r2, r1
 80226d6:	42a3      	cmp	r3, r4
 80226d8:	6011      	str	r1, [r2, #0]
 80226da:	d1e0      	bne.n	802269e <_free_r+0x26>
 80226dc:	681c      	ldr	r4, [r3, #0]
 80226de:	685b      	ldr	r3, [r3, #4]
 80226e0:	6053      	str	r3, [r2, #4]
 80226e2:	4421      	add	r1, r4
 80226e4:	6011      	str	r1, [r2, #0]
 80226e6:	e7da      	b.n	802269e <_free_r+0x26>
 80226e8:	d902      	bls.n	80226f0 <_free_r+0x78>
 80226ea:	230c      	movs	r3, #12
 80226ec:	6003      	str	r3, [r0, #0]
 80226ee:	e7d6      	b.n	802269e <_free_r+0x26>
 80226f0:	6825      	ldr	r5, [r4, #0]
 80226f2:	1961      	adds	r1, r4, r5
 80226f4:	428b      	cmp	r3, r1
 80226f6:	bf04      	itt	eq
 80226f8:	6819      	ldreq	r1, [r3, #0]
 80226fa:	685b      	ldreq	r3, [r3, #4]
 80226fc:	6063      	str	r3, [r4, #4]
 80226fe:	bf04      	itt	eq
 8022700:	1949      	addeq	r1, r1, r5
 8022702:	6021      	streq	r1, [r4, #0]
 8022704:	6054      	str	r4, [r2, #4]
 8022706:	e7ca      	b.n	802269e <_free_r+0x26>
 8022708:	b003      	add	sp, #12
 802270a:	bd30      	pop	{r4, r5, pc}
 802270c:	20014674 	.word	0x20014674

08022710 <sbrk_aligned>:
 8022710:	b570      	push	{r4, r5, r6, lr}
 8022712:	4e0e      	ldr	r6, [pc, #56]	; (802274c <sbrk_aligned+0x3c>)
 8022714:	460c      	mov	r4, r1
 8022716:	6831      	ldr	r1, [r6, #0]
 8022718:	4605      	mov	r5, r0
 802271a:	b911      	cbnz	r1, 8022722 <sbrk_aligned+0x12>
 802271c:	f000 f96e 	bl	80229fc <_sbrk_r>
 8022720:	6030      	str	r0, [r6, #0]
 8022722:	4621      	mov	r1, r4
 8022724:	4628      	mov	r0, r5
 8022726:	f000 f969 	bl	80229fc <_sbrk_r>
 802272a:	1c43      	adds	r3, r0, #1
 802272c:	d00a      	beq.n	8022744 <sbrk_aligned+0x34>
 802272e:	1cc4      	adds	r4, r0, #3
 8022730:	f024 0403 	bic.w	r4, r4, #3
 8022734:	42a0      	cmp	r0, r4
 8022736:	d007      	beq.n	8022748 <sbrk_aligned+0x38>
 8022738:	1a21      	subs	r1, r4, r0
 802273a:	4628      	mov	r0, r5
 802273c:	f000 f95e 	bl	80229fc <_sbrk_r>
 8022740:	3001      	adds	r0, #1
 8022742:	d101      	bne.n	8022748 <sbrk_aligned+0x38>
 8022744:	f04f 34ff 	mov.w	r4, #4294967295
 8022748:	4620      	mov	r0, r4
 802274a:	bd70      	pop	{r4, r5, r6, pc}
 802274c:	20014678 	.word	0x20014678

08022750 <_malloc_r>:
 8022750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022754:	1ccd      	adds	r5, r1, #3
 8022756:	f025 0503 	bic.w	r5, r5, #3
 802275a:	3508      	adds	r5, #8
 802275c:	2d0c      	cmp	r5, #12
 802275e:	bf38      	it	cc
 8022760:	250c      	movcc	r5, #12
 8022762:	2d00      	cmp	r5, #0
 8022764:	4607      	mov	r7, r0
 8022766:	db01      	blt.n	802276c <_malloc_r+0x1c>
 8022768:	42a9      	cmp	r1, r5
 802276a:	d905      	bls.n	8022778 <_malloc_r+0x28>
 802276c:	230c      	movs	r3, #12
 802276e:	603b      	str	r3, [r7, #0]
 8022770:	2600      	movs	r6, #0
 8022772:	4630      	mov	r0, r6
 8022774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022778:	4e2e      	ldr	r6, [pc, #184]	; (8022834 <_malloc_r+0xe4>)
 802277a:	f000 fd45 	bl	8023208 <__malloc_lock>
 802277e:	6833      	ldr	r3, [r6, #0]
 8022780:	461c      	mov	r4, r3
 8022782:	bb34      	cbnz	r4, 80227d2 <_malloc_r+0x82>
 8022784:	4629      	mov	r1, r5
 8022786:	4638      	mov	r0, r7
 8022788:	f7ff ffc2 	bl	8022710 <sbrk_aligned>
 802278c:	1c43      	adds	r3, r0, #1
 802278e:	4604      	mov	r4, r0
 8022790:	d14d      	bne.n	802282e <_malloc_r+0xde>
 8022792:	6834      	ldr	r4, [r6, #0]
 8022794:	4626      	mov	r6, r4
 8022796:	2e00      	cmp	r6, #0
 8022798:	d140      	bne.n	802281c <_malloc_r+0xcc>
 802279a:	6823      	ldr	r3, [r4, #0]
 802279c:	4631      	mov	r1, r6
 802279e:	4638      	mov	r0, r7
 80227a0:	eb04 0803 	add.w	r8, r4, r3
 80227a4:	f000 f92a 	bl	80229fc <_sbrk_r>
 80227a8:	4580      	cmp	r8, r0
 80227aa:	d13a      	bne.n	8022822 <_malloc_r+0xd2>
 80227ac:	6821      	ldr	r1, [r4, #0]
 80227ae:	3503      	adds	r5, #3
 80227b0:	1a6d      	subs	r5, r5, r1
 80227b2:	f025 0503 	bic.w	r5, r5, #3
 80227b6:	3508      	adds	r5, #8
 80227b8:	2d0c      	cmp	r5, #12
 80227ba:	bf38      	it	cc
 80227bc:	250c      	movcc	r5, #12
 80227be:	4629      	mov	r1, r5
 80227c0:	4638      	mov	r0, r7
 80227c2:	f7ff ffa5 	bl	8022710 <sbrk_aligned>
 80227c6:	3001      	adds	r0, #1
 80227c8:	d02b      	beq.n	8022822 <_malloc_r+0xd2>
 80227ca:	6823      	ldr	r3, [r4, #0]
 80227cc:	442b      	add	r3, r5
 80227ce:	6023      	str	r3, [r4, #0]
 80227d0:	e00e      	b.n	80227f0 <_malloc_r+0xa0>
 80227d2:	6822      	ldr	r2, [r4, #0]
 80227d4:	1b52      	subs	r2, r2, r5
 80227d6:	d41e      	bmi.n	8022816 <_malloc_r+0xc6>
 80227d8:	2a0b      	cmp	r2, #11
 80227da:	d916      	bls.n	802280a <_malloc_r+0xba>
 80227dc:	1961      	adds	r1, r4, r5
 80227de:	42a3      	cmp	r3, r4
 80227e0:	6025      	str	r5, [r4, #0]
 80227e2:	bf18      	it	ne
 80227e4:	6059      	strne	r1, [r3, #4]
 80227e6:	6863      	ldr	r3, [r4, #4]
 80227e8:	bf08      	it	eq
 80227ea:	6031      	streq	r1, [r6, #0]
 80227ec:	5162      	str	r2, [r4, r5]
 80227ee:	604b      	str	r3, [r1, #4]
 80227f0:	4638      	mov	r0, r7
 80227f2:	f104 060b 	add.w	r6, r4, #11
 80227f6:	f000 fd0d 	bl	8023214 <__malloc_unlock>
 80227fa:	f026 0607 	bic.w	r6, r6, #7
 80227fe:	1d23      	adds	r3, r4, #4
 8022800:	1af2      	subs	r2, r6, r3
 8022802:	d0b6      	beq.n	8022772 <_malloc_r+0x22>
 8022804:	1b9b      	subs	r3, r3, r6
 8022806:	50a3      	str	r3, [r4, r2]
 8022808:	e7b3      	b.n	8022772 <_malloc_r+0x22>
 802280a:	6862      	ldr	r2, [r4, #4]
 802280c:	42a3      	cmp	r3, r4
 802280e:	bf0c      	ite	eq
 8022810:	6032      	streq	r2, [r6, #0]
 8022812:	605a      	strne	r2, [r3, #4]
 8022814:	e7ec      	b.n	80227f0 <_malloc_r+0xa0>
 8022816:	4623      	mov	r3, r4
 8022818:	6864      	ldr	r4, [r4, #4]
 802281a:	e7b2      	b.n	8022782 <_malloc_r+0x32>
 802281c:	4634      	mov	r4, r6
 802281e:	6876      	ldr	r6, [r6, #4]
 8022820:	e7b9      	b.n	8022796 <_malloc_r+0x46>
 8022822:	230c      	movs	r3, #12
 8022824:	603b      	str	r3, [r7, #0]
 8022826:	4638      	mov	r0, r7
 8022828:	f000 fcf4 	bl	8023214 <__malloc_unlock>
 802282c:	e7a1      	b.n	8022772 <_malloc_r+0x22>
 802282e:	6025      	str	r5, [r4, #0]
 8022830:	e7de      	b.n	80227f0 <_malloc_r+0xa0>
 8022832:	bf00      	nop
 8022834:	20014674 	.word	0x20014674

08022838 <iprintf>:
 8022838:	b40f      	push	{r0, r1, r2, r3}
 802283a:	4b0a      	ldr	r3, [pc, #40]	; (8022864 <iprintf+0x2c>)
 802283c:	b513      	push	{r0, r1, r4, lr}
 802283e:	681c      	ldr	r4, [r3, #0]
 8022840:	b124      	cbz	r4, 802284c <iprintf+0x14>
 8022842:	69a3      	ldr	r3, [r4, #24]
 8022844:	b913      	cbnz	r3, 802284c <iprintf+0x14>
 8022846:	4620      	mov	r0, r4
 8022848:	f000 fbc6 	bl	8022fd8 <__sinit>
 802284c:	ab05      	add	r3, sp, #20
 802284e:	9a04      	ldr	r2, [sp, #16]
 8022850:	68a1      	ldr	r1, [r4, #8]
 8022852:	9301      	str	r3, [sp, #4]
 8022854:	4620      	mov	r0, r4
 8022856:	f000 fe69 	bl	802352c <_vfiprintf_r>
 802285a:	b002      	add	sp, #8
 802285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022860:	b004      	add	sp, #16
 8022862:	4770      	bx	lr
 8022864:	20000140 	.word	0x20000140

08022868 <putchar>:
 8022868:	4b09      	ldr	r3, [pc, #36]	; (8022890 <putchar+0x28>)
 802286a:	b513      	push	{r0, r1, r4, lr}
 802286c:	681c      	ldr	r4, [r3, #0]
 802286e:	4601      	mov	r1, r0
 8022870:	b134      	cbz	r4, 8022880 <putchar+0x18>
 8022872:	69a3      	ldr	r3, [r4, #24]
 8022874:	b923      	cbnz	r3, 8022880 <putchar+0x18>
 8022876:	9001      	str	r0, [sp, #4]
 8022878:	4620      	mov	r0, r4
 802287a:	f000 fbad 	bl	8022fd8 <__sinit>
 802287e:	9901      	ldr	r1, [sp, #4]
 8022880:	68a2      	ldr	r2, [r4, #8]
 8022882:	4620      	mov	r0, r4
 8022884:	b002      	add	sp, #8
 8022886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802288a:	f001 b913 	b.w	8023ab4 <_putc_r>
 802288e:	bf00      	nop
 8022890:	20000140 	.word	0x20000140

08022894 <_puts_r>:
 8022894:	b570      	push	{r4, r5, r6, lr}
 8022896:	460e      	mov	r6, r1
 8022898:	4605      	mov	r5, r0
 802289a:	b118      	cbz	r0, 80228a4 <_puts_r+0x10>
 802289c:	6983      	ldr	r3, [r0, #24]
 802289e:	b90b      	cbnz	r3, 80228a4 <_puts_r+0x10>
 80228a0:	f000 fb9a 	bl	8022fd8 <__sinit>
 80228a4:	69ab      	ldr	r3, [r5, #24]
 80228a6:	68ac      	ldr	r4, [r5, #8]
 80228a8:	b913      	cbnz	r3, 80228b0 <_puts_r+0x1c>
 80228aa:	4628      	mov	r0, r5
 80228ac:	f000 fb94 	bl	8022fd8 <__sinit>
 80228b0:	4b2c      	ldr	r3, [pc, #176]	; (8022964 <_puts_r+0xd0>)
 80228b2:	429c      	cmp	r4, r3
 80228b4:	d120      	bne.n	80228f8 <_puts_r+0x64>
 80228b6:	686c      	ldr	r4, [r5, #4]
 80228b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80228ba:	07db      	lsls	r3, r3, #31
 80228bc:	d405      	bmi.n	80228ca <_puts_r+0x36>
 80228be:	89a3      	ldrh	r3, [r4, #12]
 80228c0:	0598      	lsls	r0, r3, #22
 80228c2:	d402      	bmi.n	80228ca <_puts_r+0x36>
 80228c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80228c6:	f000 fc37 	bl	8023138 <__retarget_lock_acquire_recursive>
 80228ca:	89a3      	ldrh	r3, [r4, #12]
 80228cc:	0719      	lsls	r1, r3, #28
 80228ce:	d51d      	bpl.n	802290c <_puts_r+0x78>
 80228d0:	6923      	ldr	r3, [r4, #16]
 80228d2:	b1db      	cbz	r3, 802290c <_puts_r+0x78>
 80228d4:	3e01      	subs	r6, #1
 80228d6:	68a3      	ldr	r3, [r4, #8]
 80228d8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80228dc:	3b01      	subs	r3, #1
 80228de:	60a3      	str	r3, [r4, #8]
 80228e0:	bb39      	cbnz	r1, 8022932 <_puts_r+0x9e>
 80228e2:	2b00      	cmp	r3, #0
 80228e4:	da38      	bge.n	8022958 <_puts_r+0xc4>
 80228e6:	4622      	mov	r2, r4
 80228e8:	210a      	movs	r1, #10
 80228ea:	4628      	mov	r0, r5
 80228ec:	f000 f97c 	bl	8022be8 <__swbuf_r>
 80228f0:	3001      	adds	r0, #1
 80228f2:	d011      	beq.n	8022918 <_puts_r+0x84>
 80228f4:	250a      	movs	r5, #10
 80228f6:	e011      	b.n	802291c <_puts_r+0x88>
 80228f8:	4b1b      	ldr	r3, [pc, #108]	; (8022968 <_puts_r+0xd4>)
 80228fa:	429c      	cmp	r4, r3
 80228fc:	d101      	bne.n	8022902 <_puts_r+0x6e>
 80228fe:	68ac      	ldr	r4, [r5, #8]
 8022900:	e7da      	b.n	80228b8 <_puts_r+0x24>
 8022902:	4b1a      	ldr	r3, [pc, #104]	; (802296c <_puts_r+0xd8>)
 8022904:	429c      	cmp	r4, r3
 8022906:	bf08      	it	eq
 8022908:	68ec      	ldreq	r4, [r5, #12]
 802290a:	e7d5      	b.n	80228b8 <_puts_r+0x24>
 802290c:	4621      	mov	r1, r4
 802290e:	4628      	mov	r0, r5
 8022910:	f000 f9bc 	bl	8022c8c <__swsetup_r>
 8022914:	2800      	cmp	r0, #0
 8022916:	d0dd      	beq.n	80228d4 <_puts_r+0x40>
 8022918:	f04f 35ff 	mov.w	r5, #4294967295
 802291c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802291e:	07da      	lsls	r2, r3, #31
 8022920:	d405      	bmi.n	802292e <_puts_r+0x9a>
 8022922:	89a3      	ldrh	r3, [r4, #12]
 8022924:	059b      	lsls	r3, r3, #22
 8022926:	d402      	bmi.n	802292e <_puts_r+0x9a>
 8022928:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802292a:	f000 fc06 	bl	802313a <__retarget_lock_release_recursive>
 802292e:	4628      	mov	r0, r5
 8022930:	bd70      	pop	{r4, r5, r6, pc}
 8022932:	2b00      	cmp	r3, #0
 8022934:	da04      	bge.n	8022940 <_puts_r+0xac>
 8022936:	69a2      	ldr	r2, [r4, #24]
 8022938:	429a      	cmp	r2, r3
 802293a:	dc06      	bgt.n	802294a <_puts_r+0xb6>
 802293c:	290a      	cmp	r1, #10
 802293e:	d004      	beq.n	802294a <_puts_r+0xb6>
 8022940:	6823      	ldr	r3, [r4, #0]
 8022942:	1c5a      	adds	r2, r3, #1
 8022944:	6022      	str	r2, [r4, #0]
 8022946:	7019      	strb	r1, [r3, #0]
 8022948:	e7c5      	b.n	80228d6 <_puts_r+0x42>
 802294a:	4622      	mov	r2, r4
 802294c:	4628      	mov	r0, r5
 802294e:	f000 f94b 	bl	8022be8 <__swbuf_r>
 8022952:	3001      	adds	r0, #1
 8022954:	d1bf      	bne.n	80228d6 <_puts_r+0x42>
 8022956:	e7df      	b.n	8022918 <_puts_r+0x84>
 8022958:	6823      	ldr	r3, [r4, #0]
 802295a:	250a      	movs	r5, #10
 802295c:	1c5a      	adds	r2, r3, #1
 802295e:	6022      	str	r2, [r4, #0]
 8022960:	701d      	strb	r5, [r3, #0]
 8022962:	e7db      	b.n	802291c <_puts_r+0x88>
 8022964:	08029044 	.word	0x08029044
 8022968:	08029064 	.word	0x08029064
 802296c:	08029024 	.word	0x08029024

08022970 <puts>:
 8022970:	4b02      	ldr	r3, [pc, #8]	; (802297c <puts+0xc>)
 8022972:	4601      	mov	r1, r0
 8022974:	6818      	ldr	r0, [r3, #0]
 8022976:	f7ff bf8d 	b.w	8022894 <_puts_r>
 802297a:	bf00      	nop
 802297c:	20000140 	.word	0x20000140

08022980 <rand>:
 8022980:	4b16      	ldr	r3, [pc, #88]	; (80229dc <rand+0x5c>)
 8022982:	b510      	push	{r4, lr}
 8022984:	681c      	ldr	r4, [r3, #0]
 8022986:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8022988:	b9b3      	cbnz	r3, 80229b8 <rand+0x38>
 802298a:	2018      	movs	r0, #24
 802298c:	f7ff fe24 	bl	80225d8 <malloc>
 8022990:	63a0      	str	r0, [r4, #56]	; 0x38
 8022992:	b928      	cbnz	r0, 80229a0 <rand+0x20>
 8022994:	4602      	mov	r2, r0
 8022996:	4b12      	ldr	r3, [pc, #72]	; (80229e0 <rand+0x60>)
 8022998:	4812      	ldr	r0, [pc, #72]	; (80229e4 <rand+0x64>)
 802299a:	214e      	movs	r1, #78	; 0x4e
 802299c:	f000 f9e4 	bl	8022d68 <__assert_func>
 80229a0:	4a11      	ldr	r2, [pc, #68]	; (80229e8 <rand+0x68>)
 80229a2:	4b12      	ldr	r3, [pc, #72]	; (80229ec <rand+0x6c>)
 80229a4:	e9c0 2300 	strd	r2, r3, [r0]
 80229a8:	4b11      	ldr	r3, [pc, #68]	; (80229f0 <rand+0x70>)
 80229aa:	6083      	str	r3, [r0, #8]
 80229ac:	230b      	movs	r3, #11
 80229ae:	8183      	strh	r3, [r0, #12]
 80229b0:	2201      	movs	r2, #1
 80229b2:	2300      	movs	r3, #0
 80229b4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80229b8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80229ba:	4a0e      	ldr	r2, [pc, #56]	; (80229f4 <rand+0x74>)
 80229bc:	6920      	ldr	r0, [r4, #16]
 80229be:	6963      	ldr	r3, [r4, #20]
 80229c0:	490d      	ldr	r1, [pc, #52]	; (80229f8 <rand+0x78>)
 80229c2:	4342      	muls	r2, r0
 80229c4:	fb01 2203 	mla	r2, r1, r3, r2
 80229c8:	fba0 0101 	umull	r0, r1, r0, r1
 80229cc:	1c43      	adds	r3, r0, #1
 80229ce:	eb42 0001 	adc.w	r0, r2, r1
 80229d2:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80229d6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80229da:	bd10      	pop	{r4, pc}
 80229dc:	20000140 	.word	0x20000140
 80229e0:	08028f74 	.word	0x08028f74
 80229e4:	08028f8b 	.word	0x08028f8b
 80229e8:	abcd330e 	.word	0xabcd330e
 80229ec:	e66d1234 	.word	0xe66d1234
 80229f0:	0005deec 	.word	0x0005deec
 80229f4:	5851f42d 	.word	0x5851f42d
 80229f8:	4c957f2d 	.word	0x4c957f2d

080229fc <_sbrk_r>:
 80229fc:	b538      	push	{r3, r4, r5, lr}
 80229fe:	4d06      	ldr	r5, [pc, #24]	; (8022a18 <_sbrk_r+0x1c>)
 8022a00:	2300      	movs	r3, #0
 8022a02:	4604      	mov	r4, r0
 8022a04:	4608      	mov	r0, r1
 8022a06:	602b      	str	r3, [r5, #0]
 8022a08:	f7f2 f888 	bl	8014b1c <_sbrk>
 8022a0c:	1c43      	adds	r3, r0, #1
 8022a0e:	d102      	bne.n	8022a16 <_sbrk_r+0x1a>
 8022a10:	682b      	ldr	r3, [r5, #0]
 8022a12:	b103      	cbz	r3, 8022a16 <_sbrk_r+0x1a>
 8022a14:	6023      	str	r3, [r4, #0]
 8022a16:	bd38      	pop	{r3, r4, r5, pc}
 8022a18:	2001467c 	.word	0x2001467c

08022a1c <setvbuf>:
 8022a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022a20:	461d      	mov	r5, r3
 8022a22:	4b5d      	ldr	r3, [pc, #372]	; (8022b98 <setvbuf+0x17c>)
 8022a24:	681f      	ldr	r7, [r3, #0]
 8022a26:	4604      	mov	r4, r0
 8022a28:	460e      	mov	r6, r1
 8022a2a:	4690      	mov	r8, r2
 8022a2c:	b127      	cbz	r7, 8022a38 <setvbuf+0x1c>
 8022a2e:	69bb      	ldr	r3, [r7, #24]
 8022a30:	b913      	cbnz	r3, 8022a38 <setvbuf+0x1c>
 8022a32:	4638      	mov	r0, r7
 8022a34:	f000 fad0 	bl	8022fd8 <__sinit>
 8022a38:	4b58      	ldr	r3, [pc, #352]	; (8022b9c <setvbuf+0x180>)
 8022a3a:	429c      	cmp	r4, r3
 8022a3c:	d167      	bne.n	8022b0e <setvbuf+0xf2>
 8022a3e:	687c      	ldr	r4, [r7, #4]
 8022a40:	f1b8 0f02 	cmp.w	r8, #2
 8022a44:	d006      	beq.n	8022a54 <setvbuf+0x38>
 8022a46:	f1b8 0f01 	cmp.w	r8, #1
 8022a4a:	f200 809f 	bhi.w	8022b8c <setvbuf+0x170>
 8022a4e:	2d00      	cmp	r5, #0
 8022a50:	f2c0 809c 	blt.w	8022b8c <setvbuf+0x170>
 8022a54:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022a56:	07db      	lsls	r3, r3, #31
 8022a58:	d405      	bmi.n	8022a66 <setvbuf+0x4a>
 8022a5a:	89a3      	ldrh	r3, [r4, #12]
 8022a5c:	0598      	lsls	r0, r3, #22
 8022a5e:	d402      	bmi.n	8022a66 <setvbuf+0x4a>
 8022a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022a62:	f000 fb69 	bl	8023138 <__retarget_lock_acquire_recursive>
 8022a66:	4621      	mov	r1, r4
 8022a68:	4638      	mov	r0, r7
 8022a6a:	f000 fa21 	bl	8022eb0 <_fflush_r>
 8022a6e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022a70:	b141      	cbz	r1, 8022a84 <setvbuf+0x68>
 8022a72:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022a76:	4299      	cmp	r1, r3
 8022a78:	d002      	beq.n	8022a80 <setvbuf+0x64>
 8022a7a:	4638      	mov	r0, r7
 8022a7c:	f7ff fdfc 	bl	8022678 <_free_r>
 8022a80:	2300      	movs	r3, #0
 8022a82:	6363      	str	r3, [r4, #52]	; 0x34
 8022a84:	2300      	movs	r3, #0
 8022a86:	61a3      	str	r3, [r4, #24]
 8022a88:	6063      	str	r3, [r4, #4]
 8022a8a:	89a3      	ldrh	r3, [r4, #12]
 8022a8c:	0619      	lsls	r1, r3, #24
 8022a8e:	d503      	bpl.n	8022a98 <setvbuf+0x7c>
 8022a90:	6921      	ldr	r1, [r4, #16]
 8022a92:	4638      	mov	r0, r7
 8022a94:	f7ff fdf0 	bl	8022678 <_free_r>
 8022a98:	89a3      	ldrh	r3, [r4, #12]
 8022a9a:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8022a9e:	f023 0303 	bic.w	r3, r3, #3
 8022aa2:	f1b8 0f02 	cmp.w	r8, #2
 8022aa6:	81a3      	strh	r3, [r4, #12]
 8022aa8:	d06c      	beq.n	8022b84 <setvbuf+0x168>
 8022aaa:	ab01      	add	r3, sp, #4
 8022aac:	466a      	mov	r2, sp
 8022aae:	4621      	mov	r1, r4
 8022ab0:	4638      	mov	r0, r7
 8022ab2:	f000 fb43 	bl	802313c <__swhatbuf_r>
 8022ab6:	89a3      	ldrh	r3, [r4, #12]
 8022ab8:	4318      	orrs	r0, r3
 8022aba:	81a0      	strh	r0, [r4, #12]
 8022abc:	2d00      	cmp	r5, #0
 8022abe:	d130      	bne.n	8022b22 <setvbuf+0x106>
 8022ac0:	9d00      	ldr	r5, [sp, #0]
 8022ac2:	4628      	mov	r0, r5
 8022ac4:	f7ff fd88 	bl	80225d8 <malloc>
 8022ac8:	4606      	mov	r6, r0
 8022aca:	2800      	cmp	r0, #0
 8022acc:	d155      	bne.n	8022b7a <setvbuf+0x15e>
 8022ace:	f8dd 9000 	ldr.w	r9, [sp]
 8022ad2:	45a9      	cmp	r9, r5
 8022ad4:	d14a      	bne.n	8022b6c <setvbuf+0x150>
 8022ad6:	f04f 35ff 	mov.w	r5, #4294967295
 8022ada:	2200      	movs	r2, #0
 8022adc:	60a2      	str	r2, [r4, #8]
 8022ade:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8022ae2:	6022      	str	r2, [r4, #0]
 8022ae4:	6122      	str	r2, [r4, #16]
 8022ae6:	2201      	movs	r2, #1
 8022ae8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022aec:	6162      	str	r2, [r4, #20]
 8022aee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022af0:	f043 0302 	orr.w	r3, r3, #2
 8022af4:	07d2      	lsls	r2, r2, #31
 8022af6:	81a3      	strh	r3, [r4, #12]
 8022af8:	d405      	bmi.n	8022b06 <setvbuf+0xea>
 8022afa:	f413 7f00 	tst.w	r3, #512	; 0x200
 8022afe:	d102      	bne.n	8022b06 <setvbuf+0xea>
 8022b00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022b02:	f000 fb1a 	bl	802313a <__retarget_lock_release_recursive>
 8022b06:	4628      	mov	r0, r5
 8022b08:	b003      	add	sp, #12
 8022b0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022b0e:	4b24      	ldr	r3, [pc, #144]	; (8022ba0 <setvbuf+0x184>)
 8022b10:	429c      	cmp	r4, r3
 8022b12:	d101      	bne.n	8022b18 <setvbuf+0xfc>
 8022b14:	68bc      	ldr	r4, [r7, #8]
 8022b16:	e793      	b.n	8022a40 <setvbuf+0x24>
 8022b18:	4b22      	ldr	r3, [pc, #136]	; (8022ba4 <setvbuf+0x188>)
 8022b1a:	429c      	cmp	r4, r3
 8022b1c:	bf08      	it	eq
 8022b1e:	68fc      	ldreq	r4, [r7, #12]
 8022b20:	e78e      	b.n	8022a40 <setvbuf+0x24>
 8022b22:	2e00      	cmp	r6, #0
 8022b24:	d0cd      	beq.n	8022ac2 <setvbuf+0xa6>
 8022b26:	69bb      	ldr	r3, [r7, #24]
 8022b28:	b913      	cbnz	r3, 8022b30 <setvbuf+0x114>
 8022b2a:	4638      	mov	r0, r7
 8022b2c:	f000 fa54 	bl	8022fd8 <__sinit>
 8022b30:	f1b8 0f01 	cmp.w	r8, #1
 8022b34:	bf08      	it	eq
 8022b36:	89a3      	ldrheq	r3, [r4, #12]
 8022b38:	6026      	str	r6, [r4, #0]
 8022b3a:	bf04      	itt	eq
 8022b3c:	f043 0301 	orreq.w	r3, r3, #1
 8022b40:	81a3      	strheq	r3, [r4, #12]
 8022b42:	89a2      	ldrh	r2, [r4, #12]
 8022b44:	f012 0308 	ands.w	r3, r2, #8
 8022b48:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8022b4c:	d01c      	beq.n	8022b88 <setvbuf+0x16c>
 8022b4e:	07d3      	lsls	r3, r2, #31
 8022b50:	bf41      	itttt	mi
 8022b52:	2300      	movmi	r3, #0
 8022b54:	426d      	negmi	r5, r5
 8022b56:	60a3      	strmi	r3, [r4, #8]
 8022b58:	61a5      	strmi	r5, [r4, #24]
 8022b5a:	bf58      	it	pl
 8022b5c:	60a5      	strpl	r5, [r4, #8]
 8022b5e:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8022b60:	f015 0501 	ands.w	r5, r5, #1
 8022b64:	d115      	bne.n	8022b92 <setvbuf+0x176>
 8022b66:	f412 7f00 	tst.w	r2, #512	; 0x200
 8022b6a:	e7c8      	b.n	8022afe <setvbuf+0xe2>
 8022b6c:	4648      	mov	r0, r9
 8022b6e:	f7ff fd33 	bl	80225d8 <malloc>
 8022b72:	4606      	mov	r6, r0
 8022b74:	2800      	cmp	r0, #0
 8022b76:	d0ae      	beq.n	8022ad6 <setvbuf+0xba>
 8022b78:	464d      	mov	r5, r9
 8022b7a:	89a3      	ldrh	r3, [r4, #12]
 8022b7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022b80:	81a3      	strh	r3, [r4, #12]
 8022b82:	e7d0      	b.n	8022b26 <setvbuf+0x10a>
 8022b84:	2500      	movs	r5, #0
 8022b86:	e7a8      	b.n	8022ada <setvbuf+0xbe>
 8022b88:	60a3      	str	r3, [r4, #8]
 8022b8a:	e7e8      	b.n	8022b5e <setvbuf+0x142>
 8022b8c:	f04f 35ff 	mov.w	r5, #4294967295
 8022b90:	e7b9      	b.n	8022b06 <setvbuf+0xea>
 8022b92:	2500      	movs	r5, #0
 8022b94:	e7b7      	b.n	8022b06 <setvbuf+0xea>
 8022b96:	bf00      	nop
 8022b98:	20000140 	.word	0x20000140
 8022b9c:	08029044 	.word	0x08029044
 8022ba0:	08029064 	.word	0x08029064
 8022ba4:	08029024 	.word	0x08029024

08022ba8 <siprintf>:
 8022ba8:	b40e      	push	{r1, r2, r3}
 8022baa:	b500      	push	{lr}
 8022bac:	b09c      	sub	sp, #112	; 0x70
 8022bae:	ab1d      	add	r3, sp, #116	; 0x74
 8022bb0:	9002      	str	r0, [sp, #8]
 8022bb2:	9006      	str	r0, [sp, #24]
 8022bb4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8022bb8:	4809      	ldr	r0, [pc, #36]	; (8022be0 <siprintf+0x38>)
 8022bba:	9107      	str	r1, [sp, #28]
 8022bbc:	9104      	str	r1, [sp, #16]
 8022bbe:	4909      	ldr	r1, [pc, #36]	; (8022be4 <siprintf+0x3c>)
 8022bc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8022bc4:	9105      	str	r1, [sp, #20]
 8022bc6:	6800      	ldr	r0, [r0, #0]
 8022bc8:	9301      	str	r3, [sp, #4]
 8022bca:	a902      	add	r1, sp, #8
 8022bcc:	f000 fb84 	bl	80232d8 <_svfiprintf_r>
 8022bd0:	9b02      	ldr	r3, [sp, #8]
 8022bd2:	2200      	movs	r2, #0
 8022bd4:	701a      	strb	r2, [r3, #0]
 8022bd6:	b01c      	add	sp, #112	; 0x70
 8022bd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8022bdc:	b003      	add	sp, #12
 8022bde:	4770      	bx	lr
 8022be0:	20000140 	.word	0x20000140
 8022be4:	ffff0208 	.word	0xffff0208

08022be8 <__swbuf_r>:
 8022be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022bea:	460e      	mov	r6, r1
 8022bec:	4614      	mov	r4, r2
 8022bee:	4605      	mov	r5, r0
 8022bf0:	b118      	cbz	r0, 8022bfa <__swbuf_r+0x12>
 8022bf2:	6983      	ldr	r3, [r0, #24]
 8022bf4:	b90b      	cbnz	r3, 8022bfa <__swbuf_r+0x12>
 8022bf6:	f000 f9ef 	bl	8022fd8 <__sinit>
 8022bfa:	4b21      	ldr	r3, [pc, #132]	; (8022c80 <__swbuf_r+0x98>)
 8022bfc:	429c      	cmp	r4, r3
 8022bfe:	d12b      	bne.n	8022c58 <__swbuf_r+0x70>
 8022c00:	686c      	ldr	r4, [r5, #4]
 8022c02:	69a3      	ldr	r3, [r4, #24]
 8022c04:	60a3      	str	r3, [r4, #8]
 8022c06:	89a3      	ldrh	r3, [r4, #12]
 8022c08:	071a      	lsls	r2, r3, #28
 8022c0a:	d52f      	bpl.n	8022c6c <__swbuf_r+0x84>
 8022c0c:	6923      	ldr	r3, [r4, #16]
 8022c0e:	b36b      	cbz	r3, 8022c6c <__swbuf_r+0x84>
 8022c10:	6923      	ldr	r3, [r4, #16]
 8022c12:	6820      	ldr	r0, [r4, #0]
 8022c14:	1ac0      	subs	r0, r0, r3
 8022c16:	6963      	ldr	r3, [r4, #20]
 8022c18:	b2f6      	uxtb	r6, r6
 8022c1a:	4283      	cmp	r3, r0
 8022c1c:	4637      	mov	r7, r6
 8022c1e:	dc04      	bgt.n	8022c2a <__swbuf_r+0x42>
 8022c20:	4621      	mov	r1, r4
 8022c22:	4628      	mov	r0, r5
 8022c24:	f000 f944 	bl	8022eb0 <_fflush_r>
 8022c28:	bb30      	cbnz	r0, 8022c78 <__swbuf_r+0x90>
 8022c2a:	68a3      	ldr	r3, [r4, #8]
 8022c2c:	3b01      	subs	r3, #1
 8022c2e:	60a3      	str	r3, [r4, #8]
 8022c30:	6823      	ldr	r3, [r4, #0]
 8022c32:	1c5a      	adds	r2, r3, #1
 8022c34:	6022      	str	r2, [r4, #0]
 8022c36:	701e      	strb	r6, [r3, #0]
 8022c38:	6963      	ldr	r3, [r4, #20]
 8022c3a:	3001      	adds	r0, #1
 8022c3c:	4283      	cmp	r3, r0
 8022c3e:	d004      	beq.n	8022c4a <__swbuf_r+0x62>
 8022c40:	89a3      	ldrh	r3, [r4, #12]
 8022c42:	07db      	lsls	r3, r3, #31
 8022c44:	d506      	bpl.n	8022c54 <__swbuf_r+0x6c>
 8022c46:	2e0a      	cmp	r6, #10
 8022c48:	d104      	bne.n	8022c54 <__swbuf_r+0x6c>
 8022c4a:	4621      	mov	r1, r4
 8022c4c:	4628      	mov	r0, r5
 8022c4e:	f000 f92f 	bl	8022eb0 <_fflush_r>
 8022c52:	b988      	cbnz	r0, 8022c78 <__swbuf_r+0x90>
 8022c54:	4638      	mov	r0, r7
 8022c56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022c58:	4b0a      	ldr	r3, [pc, #40]	; (8022c84 <__swbuf_r+0x9c>)
 8022c5a:	429c      	cmp	r4, r3
 8022c5c:	d101      	bne.n	8022c62 <__swbuf_r+0x7a>
 8022c5e:	68ac      	ldr	r4, [r5, #8]
 8022c60:	e7cf      	b.n	8022c02 <__swbuf_r+0x1a>
 8022c62:	4b09      	ldr	r3, [pc, #36]	; (8022c88 <__swbuf_r+0xa0>)
 8022c64:	429c      	cmp	r4, r3
 8022c66:	bf08      	it	eq
 8022c68:	68ec      	ldreq	r4, [r5, #12]
 8022c6a:	e7ca      	b.n	8022c02 <__swbuf_r+0x1a>
 8022c6c:	4621      	mov	r1, r4
 8022c6e:	4628      	mov	r0, r5
 8022c70:	f000 f80c 	bl	8022c8c <__swsetup_r>
 8022c74:	2800      	cmp	r0, #0
 8022c76:	d0cb      	beq.n	8022c10 <__swbuf_r+0x28>
 8022c78:	f04f 37ff 	mov.w	r7, #4294967295
 8022c7c:	e7ea      	b.n	8022c54 <__swbuf_r+0x6c>
 8022c7e:	bf00      	nop
 8022c80:	08029044 	.word	0x08029044
 8022c84:	08029064 	.word	0x08029064
 8022c88:	08029024 	.word	0x08029024

08022c8c <__swsetup_r>:
 8022c8c:	4b32      	ldr	r3, [pc, #200]	; (8022d58 <__swsetup_r+0xcc>)
 8022c8e:	b570      	push	{r4, r5, r6, lr}
 8022c90:	681d      	ldr	r5, [r3, #0]
 8022c92:	4606      	mov	r6, r0
 8022c94:	460c      	mov	r4, r1
 8022c96:	b125      	cbz	r5, 8022ca2 <__swsetup_r+0x16>
 8022c98:	69ab      	ldr	r3, [r5, #24]
 8022c9a:	b913      	cbnz	r3, 8022ca2 <__swsetup_r+0x16>
 8022c9c:	4628      	mov	r0, r5
 8022c9e:	f000 f99b 	bl	8022fd8 <__sinit>
 8022ca2:	4b2e      	ldr	r3, [pc, #184]	; (8022d5c <__swsetup_r+0xd0>)
 8022ca4:	429c      	cmp	r4, r3
 8022ca6:	d10f      	bne.n	8022cc8 <__swsetup_r+0x3c>
 8022ca8:	686c      	ldr	r4, [r5, #4]
 8022caa:	89a3      	ldrh	r3, [r4, #12]
 8022cac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022cb0:	0719      	lsls	r1, r3, #28
 8022cb2:	d42c      	bmi.n	8022d0e <__swsetup_r+0x82>
 8022cb4:	06dd      	lsls	r5, r3, #27
 8022cb6:	d411      	bmi.n	8022cdc <__swsetup_r+0x50>
 8022cb8:	2309      	movs	r3, #9
 8022cba:	6033      	str	r3, [r6, #0]
 8022cbc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022cc0:	81a3      	strh	r3, [r4, #12]
 8022cc2:	f04f 30ff 	mov.w	r0, #4294967295
 8022cc6:	e03e      	b.n	8022d46 <__swsetup_r+0xba>
 8022cc8:	4b25      	ldr	r3, [pc, #148]	; (8022d60 <__swsetup_r+0xd4>)
 8022cca:	429c      	cmp	r4, r3
 8022ccc:	d101      	bne.n	8022cd2 <__swsetup_r+0x46>
 8022cce:	68ac      	ldr	r4, [r5, #8]
 8022cd0:	e7eb      	b.n	8022caa <__swsetup_r+0x1e>
 8022cd2:	4b24      	ldr	r3, [pc, #144]	; (8022d64 <__swsetup_r+0xd8>)
 8022cd4:	429c      	cmp	r4, r3
 8022cd6:	bf08      	it	eq
 8022cd8:	68ec      	ldreq	r4, [r5, #12]
 8022cda:	e7e6      	b.n	8022caa <__swsetup_r+0x1e>
 8022cdc:	0758      	lsls	r0, r3, #29
 8022cde:	d512      	bpl.n	8022d06 <__swsetup_r+0x7a>
 8022ce0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022ce2:	b141      	cbz	r1, 8022cf6 <__swsetup_r+0x6a>
 8022ce4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022ce8:	4299      	cmp	r1, r3
 8022cea:	d002      	beq.n	8022cf2 <__swsetup_r+0x66>
 8022cec:	4630      	mov	r0, r6
 8022cee:	f7ff fcc3 	bl	8022678 <_free_r>
 8022cf2:	2300      	movs	r3, #0
 8022cf4:	6363      	str	r3, [r4, #52]	; 0x34
 8022cf6:	89a3      	ldrh	r3, [r4, #12]
 8022cf8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022cfc:	81a3      	strh	r3, [r4, #12]
 8022cfe:	2300      	movs	r3, #0
 8022d00:	6063      	str	r3, [r4, #4]
 8022d02:	6923      	ldr	r3, [r4, #16]
 8022d04:	6023      	str	r3, [r4, #0]
 8022d06:	89a3      	ldrh	r3, [r4, #12]
 8022d08:	f043 0308 	orr.w	r3, r3, #8
 8022d0c:	81a3      	strh	r3, [r4, #12]
 8022d0e:	6923      	ldr	r3, [r4, #16]
 8022d10:	b94b      	cbnz	r3, 8022d26 <__swsetup_r+0x9a>
 8022d12:	89a3      	ldrh	r3, [r4, #12]
 8022d14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8022d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022d1c:	d003      	beq.n	8022d26 <__swsetup_r+0x9a>
 8022d1e:	4621      	mov	r1, r4
 8022d20:	4630      	mov	r0, r6
 8022d22:	f000 fa31 	bl	8023188 <__smakebuf_r>
 8022d26:	89a0      	ldrh	r0, [r4, #12]
 8022d28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022d2c:	f010 0301 	ands.w	r3, r0, #1
 8022d30:	d00a      	beq.n	8022d48 <__swsetup_r+0xbc>
 8022d32:	2300      	movs	r3, #0
 8022d34:	60a3      	str	r3, [r4, #8]
 8022d36:	6963      	ldr	r3, [r4, #20]
 8022d38:	425b      	negs	r3, r3
 8022d3a:	61a3      	str	r3, [r4, #24]
 8022d3c:	6923      	ldr	r3, [r4, #16]
 8022d3e:	b943      	cbnz	r3, 8022d52 <__swsetup_r+0xc6>
 8022d40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8022d44:	d1ba      	bne.n	8022cbc <__swsetup_r+0x30>
 8022d46:	bd70      	pop	{r4, r5, r6, pc}
 8022d48:	0781      	lsls	r1, r0, #30
 8022d4a:	bf58      	it	pl
 8022d4c:	6963      	ldrpl	r3, [r4, #20]
 8022d4e:	60a3      	str	r3, [r4, #8]
 8022d50:	e7f4      	b.n	8022d3c <__swsetup_r+0xb0>
 8022d52:	2000      	movs	r0, #0
 8022d54:	e7f7      	b.n	8022d46 <__swsetup_r+0xba>
 8022d56:	bf00      	nop
 8022d58:	20000140 	.word	0x20000140
 8022d5c:	08029044 	.word	0x08029044
 8022d60:	08029064 	.word	0x08029064
 8022d64:	08029024 	.word	0x08029024

08022d68 <__assert_func>:
 8022d68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8022d6a:	4614      	mov	r4, r2
 8022d6c:	461a      	mov	r2, r3
 8022d6e:	4b09      	ldr	r3, [pc, #36]	; (8022d94 <__assert_func+0x2c>)
 8022d70:	681b      	ldr	r3, [r3, #0]
 8022d72:	4605      	mov	r5, r0
 8022d74:	68d8      	ldr	r0, [r3, #12]
 8022d76:	b14c      	cbz	r4, 8022d8c <__assert_func+0x24>
 8022d78:	4b07      	ldr	r3, [pc, #28]	; (8022d98 <__assert_func+0x30>)
 8022d7a:	9100      	str	r1, [sp, #0]
 8022d7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022d80:	4906      	ldr	r1, [pc, #24]	; (8022d9c <__assert_func+0x34>)
 8022d82:	462b      	mov	r3, r5
 8022d84:	f000 f9a6 	bl	80230d4 <fiprintf>
 8022d88:	f000 ff32 	bl	8023bf0 <abort>
 8022d8c:	4b04      	ldr	r3, [pc, #16]	; (8022da0 <__assert_func+0x38>)
 8022d8e:	461c      	mov	r4, r3
 8022d90:	e7f3      	b.n	8022d7a <__assert_func+0x12>
 8022d92:	bf00      	nop
 8022d94:	20000140 	.word	0x20000140
 8022d98:	08028fe6 	.word	0x08028fe6
 8022d9c:	08028ff3 	.word	0x08028ff3
 8022da0:	08029021 	.word	0x08029021

08022da4 <__sflush_r>:
 8022da4:	898a      	ldrh	r2, [r1, #12]
 8022da6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022daa:	4605      	mov	r5, r0
 8022dac:	0710      	lsls	r0, r2, #28
 8022dae:	460c      	mov	r4, r1
 8022db0:	d458      	bmi.n	8022e64 <__sflush_r+0xc0>
 8022db2:	684b      	ldr	r3, [r1, #4]
 8022db4:	2b00      	cmp	r3, #0
 8022db6:	dc05      	bgt.n	8022dc4 <__sflush_r+0x20>
 8022db8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8022dba:	2b00      	cmp	r3, #0
 8022dbc:	dc02      	bgt.n	8022dc4 <__sflush_r+0x20>
 8022dbe:	2000      	movs	r0, #0
 8022dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022dc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022dc6:	2e00      	cmp	r6, #0
 8022dc8:	d0f9      	beq.n	8022dbe <__sflush_r+0x1a>
 8022dca:	2300      	movs	r3, #0
 8022dcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022dd0:	682f      	ldr	r7, [r5, #0]
 8022dd2:	602b      	str	r3, [r5, #0]
 8022dd4:	d032      	beq.n	8022e3c <__sflush_r+0x98>
 8022dd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8022dd8:	89a3      	ldrh	r3, [r4, #12]
 8022dda:	075a      	lsls	r2, r3, #29
 8022ddc:	d505      	bpl.n	8022dea <__sflush_r+0x46>
 8022dde:	6863      	ldr	r3, [r4, #4]
 8022de0:	1ac0      	subs	r0, r0, r3
 8022de2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022de4:	b10b      	cbz	r3, 8022dea <__sflush_r+0x46>
 8022de6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8022de8:	1ac0      	subs	r0, r0, r3
 8022dea:	2300      	movs	r3, #0
 8022dec:	4602      	mov	r2, r0
 8022dee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022df0:	6a21      	ldr	r1, [r4, #32]
 8022df2:	4628      	mov	r0, r5
 8022df4:	47b0      	blx	r6
 8022df6:	1c43      	adds	r3, r0, #1
 8022df8:	89a3      	ldrh	r3, [r4, #12]
 8022dfa:	d106      	bne.n	8022e0a <__sflush_r+0x66>
 8022dfc:	6829      	ldr	r1, [r5, #0]
 8022dfe:	291d      	cmp	r1, #29
 8022e00:	d82c      	bhi.n	8022e5c <__sflush_r+0xb8>
 8022e02:	4a2a      	ldr	r2, [pc, #168]	; (8022eac <__sflush_r+0x108>)
 8022e04:	40ca      	lsrs	r2, r1
 8022e06:	07d6      	lsls	r6, r2, #31
 8022e08:	d528      	bpl.n	8022e5c <__sflush_r+0xb8>
 8022e0a:	2200      	movs	r2, #0
 8022e0c:	6062      	str	r2, [r4, #4]
 8022e0e:	04d9      	lsls	r1, r3, #19
 8022e10:	6922      	ldr	r2, [r4, #16]
 8022e12:	6022      	str	r2, [r4, #0]
 8022e14:	d504      	bpl.n	8022e20 <__sflush_r+0x7c>
 8022e16:	1c42      	adds	r2, r0, #1
 8022e18:	d101      	bne.n	8022e1e <__sflush_r+0x7a>
 8022e1a:	682b      	ldr	r3, [r5, #0]
 8022e1c:	b903      	cbnz	r3, 8022e20 <__sflush_r+0x7c>
 8022e1e:	6560      	str	r0, [r4, #84]	; 0x54
 8022e20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022e22:	602f      	str	r7, [r5, #0]
 8022e24:	2900      	cmp	r1, #0
 8022e26:	d0ca      	beq.n	8022dbe <__sflush_r+0x1a>
 8022e28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8022e2c:	4299      	cmp	r1, r3
 8022e2e:	d002      	beq.n	8022e36 <__sflush_r+0x92>
 8022e30:	4628      	mov	r0, r5
 8022e32:	f7ff fc21 	bl	8022678 <_free_r>
 8022e36:	2000      	movs	r0, #0
 8022e38:	6360      	str	r0, [r4, #52]	; 0x34
 8022e3a:	e7c1      	b.n	8022dc0 <__sflush_r+0x1c>
 8022e3c:	6a21      	ldr	r1, [r4, #32]
 8022e3e:	2301      	movs	r3, #1
 8022e40:	4628      	mov	r0, r5
 8022e42:	47b0      	blx	r6
 8022e44:	1c41      	adds	r1, r0, #1
 8022e46:	d1c7      	bne.n	8022dd8 <__sflush_r+0x34>
 8022e48:	682b      	ldr	r3, [r5, #0]
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	d0c4      	beq.n	8022dd8 <__sflush_r+0x34>
 8022e4e:	2b1d      	cmp	r3, #29
 8022e50:	d001      	beq.n	8022e56 <__sflush_r+0xb2>
 8022e52:	2b16      	cmp	r3, #22
 8022e54:	d101      	bne.n	8022e5a <__sflush_r+0xb6>
 8022e56:	602f      	str	r7, [r5, #0]
 8022e58:	e7b1      	b.n	8022dbe <__sflush_r+0x1a>
 8022e5a:	89a3      	ldrh	r3, [r4, #12]
 8022e5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e60:	81a3      	strh	r3, [r4, #12]
 8022e62:	e7ad      	b.n	8022dc0 <__sflush_r+0x1c>
 8022e64:	690f      	ldr	r7, [r1, #16]
 8022e66:	2f00      	cmp	r7, #0
 8022e68:	d0a9      	beq.n	8022dbe <__sflush_r+0x1a>
 8022e6a:	0793      	lsls	r3, r2, #30
 8022e6c:	680e      	ldr	r6, [r1, #0]
 8022e6e:	bf08      	it	eq
 8022e70:	694b      	ldreq	r3, [r1, #20]
 8022e72:	600f      	str	r7, [r1, #0]
 8022e74:	bf18      	it	ne
 8022e76:	2300      	movne	r3, #0
 8022e78:	eba6 0807 	sub.w	r8, r6, r7
 8022e7c:	608b      	str	r3, [r1, #8]
 8022e7e:	f1b8 0f00 	cmp.w	r8, #0
 8022e82:	dd9c      	ble.n	8022dbe <__sflush_r+0x1a>
 8022e84:	6a21      	ldr	r1, [r4, #32]
 8022e86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8022e88:	4643      	mov	r3, r8
 8022e8a:	463a      	mov	r2, r7
 8022e8c:	4628      	mov	r0, r5
 8022e8e:	47b0      	blx	r6
 8022e90:	2800      	cmp	r0, #0
 8022e92:	dc06      	bgt.n	8022ea2 <__sflush_r+0xfe>
 8022e94:	89a3      	ldrh	r3, [r4, #12]
 8022e96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022e9a:	81a3      	strh	r3, [r4, #12]
 8022e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8022ea0:	e78e      	b.n	8022dc0 <__sflush_r+0x1c>
 8022ea2:	4407      	add	r7, r0
 8022ea4:	eba8 0800 	sub.w	r8, r8, r0
 8022ea8:	e7e9      	b.n	8022e7e <__sflush_r+0xda>
 8022eaa:	bf00      	nop
 8022eac:	20400001 	.word	0x20400001

08022eb0 <_fflush_r>:
 8022eb0:	b538      	push	{r3, r4, r5, lr}
 8022eb2:	690b      	ldr	r3, [r1, #16]
 8022eb4:	4605      	mov	r5, r0
 8022eb6:	460c      	mov	r4, r1
 8022eb8:	b913      	cbnz	r3, 8022ec0 <_fflush_r+0x10>
 8022eba:	2500      	movs	r5, #0
 8022ebc:	4628      	mov	r0, r5
 8022ebe:	bd38      	pop	{r3, r4, r5, pc}
 8022ec0:	b118      	cbz	r0, 8022eca <_fflush_r+0x1a>
 8022ec2:	6983      	ldr	r3, [r0, #24]
 8022ec4:	b90b      	cbnz	r3, 8022eca <_fflush_r+0x1a>
 8022ec6:	f000 f887 	bl	8022fd8 <__sinit>
 8022eca:	4b14      	ldr	r3, [pc, #80]	; (8022f1c <_fflush_r+0x6c>)
 8022ecc:	429c      	cmp	r4, r3
 8022ece:	d11b      	bne.n	8022f08 <_fflush_r+0x58>
 8022ed0:	686c      	ldr	r4, [r5, #4]
 8022ed2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022ed6:	2b00      	cmp	r3, #0
 8022ed8:	d0ef      	beq.n	8022eba <_fflush_r+0xa>
 8022eda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022edc:	07d0      	lsls	r0, r2, #31
 8022ede:	d404      	bmi.n	8022eea <_fflush_r+0x3a>
 8022ee0:	0599      	lsls	r1, r3, #22
 8022ee2:	d402      	bmi.n	8022eea <_fflush_r+0x3a>
 8022ee4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022ee6:	f000 f927 	bl	8023138 <__retarget_lock_acquire_recursive>
 8022eea:	4628      	mov	r0, r5
 8022eec:	4621      	mov	r1, r4
 8022eee:	f7ff ff59 	bl	8022da4 <__sflush_r>
 8022ef2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022ef4:	07da      	lsls	r2, r3, #31
 8022ef6:	4605      	mov	r5, r0
 8022ef8:	d4e0      	bmi.n	8022ebc <_fflush_r+0xc>
 8022efa:	89a3      	ldrh	r3, [r4, #12]
 8022efc:	059b      	lsls	r3, r3, #22
 8022efe:	d4dd      	bmi.n	8022ebc <_fflush_r+0xc>
 8022f00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022f02:	f000 f91a 	bl	802313a <__retarget_lock_release_recursive>
 8022f06:	e7d9      	b.n	8022ebc <_fflush_r+0xc>
 8022f08:	4b05      	ldr	r3, [pc, #20]	; (8022f20 <_fflush_r+0x70>)
 8022f0a:	429c      	cmp	r4, r3
 8022f0c:	d101      	bne.n	8022f12 <_fflush_r+0x62>
 8022f0e:	68ac      	ldr	r4, [r5, #8]
 8022f10:	e7df      	b.n	8022ed2 <_fflush_r+0x22>
 8022f12:	4b04      	ldr	r3, [pc, #16]	; (8022f24 <_fflush_r+0x74>)
 8022f14:	429c      	cmp	r4, r3
 8022f16:	bf08      	it	eq
 8022f18:	68ec      	ldreq	r4, [r5, #12]
 8022f1a:	e7da      	b.n	8022ed2 <_fflush_r+0x22>
 8022f1c:	08029044 	.word	0x08029044
 8022f20:	08029064 	.word	0x08029064
 8022f24:	08029024 	.word	0x08029024

08022f28 <std>:
 8022f28:	2300      	movs	r3, #0
 8022f2a:	b510      	push	{r4, lr}
 8022f2c:	4604      	mov	r4, r0
 8022f2e:	e9c0 3300 	strd	r3, r3, [r0]
 8022f32:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8022f36:	6083      	str	r3, [r0, #8]
 8022f38:	8181      	strh	r1, [r0, #12]
 8022f3a:	6643      	str	r3, [r0, #100]	; 0x64
 8022f3c:	81c2      	strh	r2, [r0, #14]
 8022f3e:	6183      	str	r3, [r0, #24]
 8022f40:	4619      	mov	r1, r3
 8022f42:	2208      	movs	r2, #8
 8022f44:	305c      	adds	r0, #92	; 0x5c
 8022f46:	f7ff fb8f 	bl	8022668 <memset>
 8022f4a:	4b05      	ldr	r3, [pc, #20]	; (8022f60 <std+0x38>)
 8022f4c:	6263      	str	r3, [r4, #36]	; 0x24
 8022f4e:	4b05      	ldr	r3, [pc, #20]	; (8022f64 <std+0x3c>)
 8022f50:	62a3      	str	r3, [r4, #40]	; 0x28
 8022f52:	4b05      	ldr	r3, [pc, #20]	; (8022f68 <std+0x40>)
 8022f54:	62e3      	str	r3, [r4, #44]	; 0x2c
 8022f56:	4b05      	ldr	r3, [pc, #20]	; (8022f6c <std+0x44>)
 8022f58:	6224      	str	r4, [r4, #32]
 8022f5a:	6323      	str	r3, [r4, #48]	; 0x30
 8022f5c:	bd10      	pop	{r4, pc}
 8022f5e:	bf00      	nop
 8022f60:	08023b45 	.word	0x08023b45
 8022f64:	08023b67 	.word	0x08023b67
 8022f68:	08023b9f 	.word	0x08023b9f
 8022f6c:	08023bc3 	.word	0x08023bc3

08022f70 <_cleanup_r>:
 8022f70:	4901      	ldr	r1, [pc, #4]	; (8022f78 <_cleanup_r+0x8>)
 8022f72:	f000 b8c1 	b.w	80230f8 <_fwalk_reent>
 8022f76:	bf00      	nop
 8022f78:	08022eb1 	.word	0x08022eb1

08022f7c <__sfmoreglue>:
 8022f7c:	b570      	push	{r4, r5, r6, lr}
 8022f7e:	2268      	movs	r2, #104	; 0x68
 8022f80:	1e4d      	subs	r5, r1, #1
 8022f82:	4355      	muls	r5, r2
 8022f84:	460e      	mov	r6, r1
 8022f86:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8022f8a:	f7ff fbe1 	bl	8022750 <_malloc_r>
 8022f8e:	4604      	mov	r4, r0
 8022f90:	b140      	cbz	r0, 8022fa4 <__sfmoreglue+0x28>
 8022f92:	2100      	movs	r1, #0
 8022f94:	e9c0 1600 	strd	r1, r6, [r0]
 8022f98:	300c      	adds	r0, #12
 8022f9a:	60a0      	str	r0, [r4, #8]
 8022f9c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022fa0:	f7ff fb62 	bl	8022668 <memset>
 8022fa4:	4620      	mov	r0, r4
 8022fa6:	bd70      	pop	{r4, r5, r6, pc}

08022fa8 <__sfp_lock_acquire>:
 8022fa8:	4801      	ldr	r0, [pc, #4]	; (8022fb0 <__sfp_lock_acquire+0x8>)
 8022faa:	f000 b8c5 	b.w	8023138 <__retarget_lock_acquire_recursive>
 8022fae:	bf00      	nop
 8022fb0:	20014681 	.word	0x20014681

08022fb4 <__sfp_lock_release>:
 8022fb4:	4801      	ldr	r0, [pc, #4]	; (8022fbc <__sfp_lock_release+0x8>)
 8022fb6:	f000 b8c0 	b.w	802313a <__retarget_lock_release_recursive>
 8022fba:	bf00      	nop
 8022fbc:	20014681 	.word	0x20014681

08022fc0 <__sinit_lock_acquire>:
 8022fc0:	4801      	ldr	r0, [pc, #4]	; (8022fc8 <__sinit_lock_acquire+0x8>)
 8022fc2:	f000 b8b9 	b.w	8023138 <__retarget_lock_acquire_recursive>
 8022fc6:	bf00      	nop
 8022fc8:	20014682 	.word	0x20014682

08022fcc <__sinit_lock_release>:
 8022fcc:	4801      	ldr	r0, [pc, #4]	; (8022fd4 <__sinit_lock_release+0x8>)
 8022fce:	f000 b8b4 	b.w	802313a <__retarget_lock_release_recursive>
 8022fd2:	bf00      	nop
 8022fd4:	20014682 	.word	0x20014682

08022fd8 <__sinit>:
 8022fd8:	b510      	push	{r4, lr}
 8022fda:	4604      	mov	r4, r0
 8022fdc:	f7ff fff0 	bl	8022fc0 <__sinit_lock_acquire>
 8022fe0:	69a3      	ldr	r3, [r4, #24]
 8022fe2:	b11b      	cbz	r3, 8022fec <__sinit+0x14>
 8022fe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022fe8:	f7ff bff0 	b.w	8022fcc <__sinit_lock_release>
 8022fec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022ff0:	6523      	str	r3, [r4, #80]	; 0x50
 8022ff2:	4b13      	ldr	r3, [pc, #76]	; (8023040 <__sinit+0x68>)
 8022ff4:	4a13      	ldr	r2, [pc, #76]	; (8023044 <__sinit+0x6c>)
 8022ff6:	681b      	ldr	r3, [r3, #0]
 8022ff8:	62a2      	str	r2, [r4, #40]	; 0x28
 8022ffa:	42a3      	cmp	r3, r4
 8022ffc:	bf04      	itt	eq
 8022ffe:	2301      	moveq	r3, #1
 8023000:	61a3      	streq	r3, [r4, #24]
 8023002:	4620      	mov	r0, r4
 8023004:	f000 f820 	bl	8023048 <__sfp>
 8023008:	6060      	str	r0, [r4, #4]
 802300a:	4620      	mov	r0, r4
 802300c:	f000 f81c 	bl	8023048 <__sfp>
 8023010:	60a0      	str	r0, [r4, #8]
 8023012:	4620      	mov	r0, r4
 8023014:	f000 f818 	bl	8023048 <__sfp>
 8023018:	2200      	movs	r2, #0
 802301a:	60e0      	str	r0, [r4, #12]
 802301c:	2104      	movs	r1, #4
 802301e:	6860      	ldr	r0, [r4, #4]
 8023020:	f7ff ff82 	bl	8022f28 <std>
 8023024:	68a0      	ldr	r0, [r4, #8]
 8023026:	2201      	movs	r2, #1
 8023028:	2109      	movs	r1, #9
 802302a:	f7ff ff7d 	bl	8022f28 <std>
 802302e:	68e0      	ldr	r0, [r4, #12]
 8023030:	2202      	movs	r2, #2
 8023032:	2112      	movs	r1, #18
 8023034:	f7ff ff78 	bl	8022f28 <std>
 8023038:	2301      	movs	r3, #1
 802303a:	61a3      	str	r3, [r4, #24]
 802303c:	e7d2      	b.n	8022fe4 <__sinit+0xc>
 802303e:	bf00      	nop
 8023040:	08028f70 	.word	0x08028f70
 8023044:	08022f71 	.word	0x08022f71

08023048 <__sfp>:
 8023048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802304a:	4607      	mov	r7, r0
 802304c:	f7ff ffac 	bl	8022fa8 <__sfp_lock_acquire>
 8023050:	4b1e      	ldr	r3, [pc, #120]	; (80230cc <__sfp+0x84>)
 8023052:	681e      	ldr	r6, [r3, #0]
 8023054:	69b3      	ldr	r3, [r6, #24]
 8023056:	b913      	cbnz	r3, 802305e <__sfp+0x16>
 8023058:	4630      	mov	r0, r6
 802305a:	f7ff ffbd 	bl	8022fd8 <__sinit>
 802305e:	3648      	adds	r6, #72	; 0x48
 8023060:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023064:	3b01      	subs	r3, #1
 8023066:	d503      	bpl.n	8023070 <__sfp+0x28>
 8023068:	6833      	ldr	r3, [r6, #0]
 802306a:	b30b      	cbz	r3, 80230b0 <__sfp+0x68>
 802306c:	6836      	ldr	r6, [r6, #0]
 802306e:	e7f7      	b.n	8023060 <__sfp+0x18>
 8023070:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023074:	b9d5      	cbnz	r5, 80230ac <__sfp+0x64>
 8023076:	4b16      	ldr	r3, [pc, #88]	; (80230d0 <__sfp+0x88>)
 8023078:	60e3      	str	r3, [r4, #12]
 802307a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 802307e:	6665      	str	r5, [r4, #100]	; 0x64
 8023080:	f000 f859 	bl	8023136 <__retarget_lock_init_recursive>
 8023084:	f7ff ff96 	bl	8022fb4 <__sfp_lock_release>
 8023088:	e9c4 5501 	strd	r5, r5, [r4, #4]
 802308c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023090:	6025      	str	r5, [r4, #0]
 8023092:	61a5      	str	r5, [r4, #24]
 8023094:	2208      	movs	r2, #8
 8023096:	4629      	mov	r1, r5
 8023098:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 802309c:	f7ff fae4 	bl	8022668 <memset>
 80230a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80230a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80230a8:	4620      	mov	r0, r4
 80230aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80230ac:	3468      	adds	r4, #104	; 0x68
 80230ae:	e7d9      	b.n	8023064 <__sfp+0x1c>
 80230b0:	2104      	movs	r1, #4
 80230b2:	4638      	mov	r0, r7
 80230b4:	f7ff ff62 	bl	8022f7c <__sfmoreglue>
 80230b8:	4604      	mov	r4, r0
 80230ba:	6030      	str	r0, [r6, #0]
 80230bc:	2800      	cmp	r0, #0
 80230be:	d1d5      	bne.n	802306c <__sfp+0x24>
 80230c0:	f7ff ff78 	bl	8022fb4 <__sfp_lock_release>
 80230c4:	230c      	movs	r3, #12
 80230c6:	603b      	str	r3, [r7, #0]
 80230c8:	e7ee      	b.n	80230a8 <__sfp+0x60>
 80230ca:	bf00      	nop
 80230cc:	08028f70 	.word	0x08028f70
 80230d0:	ffff0001 	.word	0xffff0001

080230d4 <fiprintf>:
 80230d4:	b40e      	push	{r1, r2, r3}
 80230d6:	b503      	push	{r0, r1, lr}
 80230d8:	4601      	mov	r1, r0
 80230da:	ab03      	add	r3, sp, #12
 80230dc:	4805      	ldr	r0, [pc, #20]	; (80230f4 <fiprintf+0x20>)
 80230de:	f853 2b04 	ldr.w	r2, [r3], #4
 80230e2:	6800      	ldr	r0, [r0, #0]
 80230e4:	9301      	str	r3, [sp, #4]
 80230e6:	f000 fa21 	bl	802352c <_vfiprintf_r>
 80230ea:	b002      	add	sp, #8
 80230ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80230f0:	b003      	add	sp, #12
 80230f2:	4770      	bx	lr
 80230f4:	20000140 	.word	0x20000140

080230f8 <_fwalk_reent>:
 80230f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80230fc:	4606      	mov	r6, r0
 80230fe:	4688      	mov	r8, r1
 8023100:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023104:	2700      	movs	r7, #0
 8023106:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802310a:	f1b9 0901 	subs.w	r9, r9, #1
 802310e:	d505      	bpl.n	802311c <_fwalk_reent+0x24>
 8023110:	6824      	ldr	r4, [r4, #0]
 8023112:	2c00      	cmp	r4, #0
 8023114:	d1f7      	bne.n	8023106 <_fwalk_reent+0xe>
 8023116:	4638      	mov	r0, r7
 8023118:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802311c:	89ab      	ldrh	r3, [r5, #12]
 802311e:	2b01      	cmp	r3, #1
 8023120:	d907      	bls.n	8023132 <_fwalk_reent+0x3a>
 8023122:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023126:	3301      	adds	r3, #1
 8023128:	d003      	beq.n	8023132 <_fwalk_reent+0x3a>
 802312a:	4629      	mov	r1, r5
 802312c:	4630      	mov	r0, r6
 802312e:	47c0      	blx	r8
 8023130:	4307      	orrs	r7, r0
 8023132:	3568      	adds	r5, #104	; 0x68
 8023134:	e7e9      	b.n	802310a <_fwalk_reent+0x12>

08023136 <__retarget_lock_init_recursive>:
 8023136:	4770      	bx	lr

08023138 <__retarget_lock_acquire_recursive>:
 8023138:	4770      	bx	lr

0802313a <__retarget_lock_release_recursive>:
 802313a:	4770      	bx	lr

0802313c <__swhatbuf_r>:
 802313c:	b570      	push	{r4, r5, r6, lr}
 802313e:	460e      	mov	r6, r1
 8023140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023144:	2900      	cmp	r1, #0
 8023146:	b096      	sub	sp, #88	; 0x58
 8023148:	4614      	mov	r4, r2
 802314a:	461d      	mov	r5, r3
 802314c:	da08      	bge.n	8023160 <__swhatbuf_r+0x24>
 802314e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8023152:	2200      	movs	r2, #0
 8023154:	602a      	str	r2, [r5, #0]
 8023156:	061a      	lsls	r2, r3, #24
 8023158:	d410      	bmi.n	802317c <__swhatbuf_r+0x40>
 802315a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802315e:	e00e      	b.n	802317e <__swhatbuf_r+0x42>
 8023160:	466a      	mov	r2, sp
 8023162:	f000 fd5d 	bl	8023c20 <_fstat_r>
 8023166:	2800      	cmp	r0, #0
 8023168:	dbf1      	blt.n	802314e <__swhatbuf_r+0x12>
 802316a:	9a01      	ldr	r2, [sp, #4]
 802316c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8023170:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8023174:	425a      	negs	r2, r3
 8023176:	415a      	adcs	r2, r3
 8023178:	602a      	str	r2, [r5, #0]
 802317a:	e7ee      	b.n	802315a <__swhatbuf_r+0x1e>
 802317c:	2340      	movs	r3, #64	; 0x40
 802317e:	2000      	movs	r0, #0
 8023180:	6023      	str	r3, [r4, #0]
 8023182:	b016      	add	sp, #88	; 0x58
 8023184:	bd70      	pop	{r4, r5, r6, pc}
	...

08023188 <__smakebuf_r>:
 8023188:	898b      	ldrh	r3, [r1, #12]
 802318a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802318c:	079d      	lsls	r5, r3, #30
 802318e:	4606      	mov	r6, r0
 8023190:	460c      	mov	r4, r1
 8023192:	d507      	bpl.n	80231a4 <__smakebuf_r+0x1c>
 8023194:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8023198:	6023      	str	r3, [r4, #0]
 802319a:	6123      	str	r3, [r4, #16]
 802319c:	2301      	movs	r3, #1
 802319e:	6163      	str	r3, [r4, #20]
 80231a0:	b002      	add	sp, #8
 80231a2:	bd70      	pop	{r4, r5, r6, pc}
 80231a4:	ab01      	add	r3, sp, #4
 80231a6:	466a      	mov	r2, sp
 80231a8:	f7ff ffc8 	bl	802313c <__swhatbuf_r>
 80231ac:	9900      	ldr	r1, [sp, #0]
 80231ae:	4605      	mov	r5, r0
 80231b0:	4630      	mov	r0, r6
 80231b2:	f7ff facd 	bl	8022750 <_malloc_r>
 80231b6:	b948      	cbnz	r0, 80231cc <__smakebuf_r+0x44>
 80231b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80231bc:	059a      	lsls	r2, r3, #22
 80231be:	d4ef      	bmi.n	80231a0 <__smakebuf_r+0x18>
 80231c0:	f023 0303 	bic.w	r3, r3, #3
 80231c4:	f043 0302 	orr.w	r3, r3, #2
 80231c8:	81a3      	strh	r3, [r4, #12]
 80231ca:	e7e3      	b.n	8023194 <__smakebuf_r+0xc>
 80231cc:	4b0d      	ldr	r3, [pc, #52]	; (8023204 <__smakebuf_r+0x7c>)
 80231ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80231d0:	89a3      	ldrh	r3, [r4, #12]
 80231d2:	6020      	str	r0, [r4, #0]
 80231d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80231d8:	81a3      	strh	r3, [r4, #12]
 80231da:	9b00      	ldr	r3, [sp, #0]
 80231dc:	6163      	str	r3, [r4, #20]
 80231de:	9b01      	ldr	r3, [sp, #4]
 80231e0:	6120      	str	r0, [r4, #16]
 80231e2:	b15b      	cbz	r3, 80231fc <__smakebuf_r+0x74>
 80231e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80231e8:	4630      	mov	r0, r6
 80231ea:	f000 fd2b 	bl	8023c44 <_isatty_r>
 80231ee:	b128      	cbz	r0, 80231fc <__smakebuf_r+0x74>
 80231f0:	89a3      	ldrh	r3, [r4, #12]
 80231f2:	f023 0303 	bic.w	r3, r3, #3
 80231f6:	f043 0301 	orr.w	r3, r3, #1
 80231fa:	81a3      	strh	r3, [r4, #12]
 80231fc:	89a0      	ldrh	r0, [r4, #12]
 80231fe:	4305      	orrs	r5, r0
 8023200:	81a5      	strh	r5, [r4, #12]
 8023202:	e7cd      	b.n	80231a0 <__smakebuf_r+0x18>
 8023204:	08022f71 	.word	0x08022f71

08023208 <__malloc_lock>:
 8023208:	4801      	ldr	r0, [pc, #4]	; (8023210 <__malloc_lock+0x8>)
 802320a:	f7ff bf95 	b.w	8023138 <__retarget_lock_acquire_recursive>
 802320e:	bf00      	nop
 8023210:	20014680 	.word	0x20014680

08023214 <__malloc_unlock>:
 8023214:	4801      	ldr	r0, [pc, #4]	; (802321c <__malloc_unlock+0x8>)
 8023216:	f7ff bf90 	b.w	802313a <__retarget_lock_release_recursive>
 802321a:	bf00      	nop
 802321c:	20014680 	.word	0x20014680

08023220 <__ssputs_r>:
 8023220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023224:	688e      	ldr	r6, [r1, #8]
 8023226:	429e      	cmp	r6, r3
 8023228:	4682      	mov	sl, r0
 802322a:	460c      	mov	r4, r1
 802322c:	4690      	mov	r8, r2
 802322e:	461f      	mov	r7, r3
 8023230:	d838      	bhi.n	80232a4 <__ssputs_r+0x84>
 8023232:	898a      	ldrh	r2, [r1, #12]
 8023234:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8023238:	d032      	beq.n	80232a0 <__ssputs_r+0x80>
 802323a:	6825      	ldr	r5, [r4, #0]
 802323c:	6909      	ldr	r1, [r1, #16]
 802323e:	eba5 0901 	sub.w	r9, r5, r1
 8023242:	6965      	ldr	r5, [r4, #20]
 8023244:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8023248:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 802324c:	3301      	adds	r3, #1
 802324e:	444b      	add	r3, r9
 8023250:	106d      	asrs	r5, r5, #1
 8023252:	429d      	cmp	r5, r3
 8023254:	bf38      	it	cc
 8023256:	461d      	movcc	r5, r3
 8023258:	0553      	lsls	r3, r2, #21
 802325a:	d531      	bpl.n	80232c0 <__ssputs_r+0xa0>
 802325c:	4629      	mov	r1, r5
 802325e:	f7ff fa77 	bl	8022750 <_malloc_r>
 8023262:	4606      	mov	r6, r0
 8023264:	b950      	cbnz	r0, 802327c <__ssputs_r+0x5c>
 8023266:	230c      	movs	r3, #12
 8023268:	f8ca 3000 	str.w	r3, [sl]
 802326c:	89a3      	ldrh	r3, [r4, #12]
 802326e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8023272:	81a3      	strh	r3, [r4, #12]
 8023274:	f04f 30ff 	mov.w	r0, #4294967295
 8023278:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802327c:	6921      	ldr	r1, [r4, #16]
 802327e:	464a      	mov	r2, r9
 8023280:	f7ff f9ca 	bl	8022618 <memcpy>
 8023284:	89a3      	ldrh	r3, [r4, #12]
 8023286:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802328a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 802328e:	81a3      	strh	r3, [r4, #12]
 8023290:	6126      	str	r6, [r4, #16]
 8023292:	6165      	str	r5, [r4, #20]
 8023294:	444e      	add	r6, r9
 8023296:	eba5 0509 	sub.w	r5, r5, r9
 802329a:	6026      	str	r6, [r4, #0]
 802329c:	60a5      	str	r5, [r4, #8]
 802329e:	463e      	mov	r6, r7
 80232a0:	42be      	cmp	r6, r7
 80232a2:	d900      	bls.n	80232a6 <__ssputs_r+0x86>
 80232a4:	463e      	mov	r6, r7
 80232a6:	6820      	ldr	r0, [r4, #0]
 80232a8:	4632      	mov	r2, r6
 80232aa:	4641      	mov	r1, r8
 80232ac:	f7ff f9c2 	bl	8022634 <memmove>
 80232b0:	68a3      	ldr	r3, [r4, #8]
 80232b2:	1b9b      	subs	r3, r3, r6
 80232b4:	60a3      	str	r3, [r4, #8]
 80232b6:	6823      	ldr	r3, [r4, #0]
 80232b8:	4433      	add	r3, r6
 80232ba:	6023      	str	r3, [r4, #0]
 80232bc:	2000      	movs	r0, #0
 80232be:	e7db      	b.n	8023278 <__ssputs_r+0x58>
 80232c0:	462a      	mov	r2, r5
 80232c2:	f000 fce1 	bl	8023c88 <_realloc_r>
 80232c6:	4606      	mov	r6, r0
 80232c8:	2800      	cmp	r0, #0
 80232ca:	d1e1      	bne.n	8023290 <__ssputs_r+0x70>
 80232cc:	6921      	ldr	r1, [r4, #16]
 80232ce:	4650      	mov	r0, sl
 80232d0:	f7ff f9d2 	bl	8022678 <_free_r>
 80232d4:	e7c7      	b.n	8023266 <__ssputs_r+0x46>
	...

080232d8 <_svfiprintf_r>:
 80232d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232dc:	4698      	mov	r8, r3
 80232de:	898b      	ldrh	r3, [r1, #12]
 80232e0:	061b      	lsls	r3, r3, #24
 80232e2:	b09d      	sub	sp, #116	; 0x74
 80232e4:	4607      	mov	r7, r0
 80232e6:	460d      	mov	r5, r1
 80232e8:	4614      	mov	r4, r2
 80232ea:	d50e      	bpl.n	802330a <_svfiprintf_r+0x32>
 80232ec:	690b      	ldr	r3, [r1, #16]
 80232ee:	b963      	cbnz	r3, 802330a <_svfiprintf_r+0x32>
 80232f0:	2140      	movs	r1, #64	; 0x40
 80232f2:	f7ff fa2d 	bl	8022750 <_malloc_r>
 80232f6:	6028      	str	r0, [r5, #0]
 80232f8:	6128      	str	r0, [r5, #16]
 80232fa:	b920      	cbnz	r0, 8023306 <_svfiprintf_r+0x2e>
 80232fc:	230c      	movs	r3, #12
 80232fe:	603b      	str	r3, [r7, #0]
 8023300:	f04f 30ff 	mov.w	r0, #4294967295
 8023304:	e0d1      	b.n	80234aa <_svfiprintf_r+0x1d2>
 8023306:	2340      	movs	r3, #64	; 0x40
 8023308:	616b      	str	r3, [r5, #20]
 802330a:	2300      	movs	r3, #0
 802330c:	9309      	str	r3, [sp, #36]	; 0x24
 802330e:	2320      	movs	r3, #32
 8023310:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023314:	f8cd 800c 	str.w	r8, [sp, #12]
 8023318:	2330      	movs	r3, #48	; 0x30
 802331a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80234c4 <_svfiprintf_r+0x1ec>
 802331e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023322:	f04f 0901 	mov.w	r9, #1
 8023326:	4623      	mov	r3, r4
 8023328:	469a      	mov	sl, r3
 802332a:	f813 2b01 	ldrb.w	r2, [r3], #1
 802332e:	b10a      	cbz	r2, 8023334 <_svfiprintf_r+0x5c>
 8023330:	2a25      	cmp	r2, #37	; 0x25
 8023332:	d1f9      	bne.n	8023328 <_svfiprintf_r+0x50>
 8023334:	ebba 0b04 	subs.w	fp, sl, r4
 8023338:	d00b      	beq.n	8023352 <_svfiprintf_r+0x7a>
 802333a:	465b      	mov	r3, fp
 802333c:	4622      	mov	r2, r4
 802333e:	4629      	mov	r1, r5
 8023340:	4638      	mov	r0, r7
 8023342:	f7ff ff6d 	bl	8023220 <__ssputs_r>
 8023346:	3001      	adds	r0, #1
 8023348:	f000 80aa 	beq.w	80234a0 <_svfiprintf_r+0x1c8>
 802334c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802334e:	445a      	add	r2, fp
 8023350:	9209      	str	r2, [sp, #36]	; 0x24
 8023352:	f89a 3000 	ldrb.w	r3, [sl]
 8023356:	2b00      	cmp	r3, #0
 8023358:	f000 80a2 	beq.w	80234a0 <_svfiprintf_r+0x1c8>
 802335c:	2300      	movs	r3, #0
 802335e:	f04f 32ff 	mov.w	r2, #4294967295
 8023362:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023366:	f10a 0a01 	add.w	sl, sl, #1
 802336a:	9304      	str	r3, [sp, #16]
 802336c:	9307      	str	r3, [sp, #28]
 802336e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023372:	931a      	str	r3, [sp, #104]	; 0x68
 8023374:	4654      	mov	r4, sl
 8023376:	2205      	movs	r2, #5
 8023378:	f814 1b01 	ldrb.w	r1, [r4], #1
 802337c:	4851      	ldr	r0, [pc, #324]	; (80234c4 <_svfiprintf_r+0x1ec>)
 802337e:	f7dc ff77 	bl	8000270 <memchr>
 8023382:	9a04      	ldr	r2, [sp, #16]
 8023384:	b9d8      	cbnz	r0, 80233be <_svfiprintf_r+0xe6>
 8023386:	06d0      	lsls	r0, r2, #27
 8023388:	bf44      	itt	mi
 802338a:	2320      	movmi	r3, #32
 802338c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023390:	0711      	lsls	r1, r2, #28
 8023392:	bf44      	itt	mi
 8023394:	232b      	movmi	r3, #43	; 0x2b
 8023396:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802339a:	f89a 3000 	ldrb.w	r3, [sl]
 802339e:	2b2a      	cmp	r3, #42	; 0x2a
 80233a0:	d015      	beq.n	80233ce <_svfiprintf_r+0xf6>
 80233a2:	9a07      	ldr	r2, [sp, #28]
 80233a4:	4654      	mov	r4, sl
 80233a6:	2000      	movs	r0, #0
 80233a8:	f04f 0c0a 	mov.w	ip, #10
 80233ac:	4621      	mov	r1, r4
 80233ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80233b2:	3b30      	subs	r3, #48	; 0x30
 80233b4:	2b09      	cmp	r3, #9
 80233b6:	d94e      	bls.n	8023456 <_svfiprintf_r+0x17e>
 80233b8:	b1b0      	cbz	r0, 80233e8 <_svfiprintf_r+0x110>
 80233ba:	9207      	str	r2, [sp, #28]
 80233bc:	e014      	b.n	80233e8 <_svfiprintf_r+0x110>
 80233be:	eba0 0308 	sub.w	r3, r0, r8
 80233c2:	fa09 f303 	lsl.w	r3, r9, r3
 80233c6:	4313      	orrs	r3, r2
 80233c8:	9304      	str	r3, [sp, #16]
 80233ca:	46a2      	mov	sl, r4
 80233cc:	e7d2      	b.n	8023374 <_svfiprintf_r+0x9c>
 80233ce:	9b03      	ldr	r3, [sp, #12]
 80233d0:	1d19      	adds	r1, r3, #4
 80233d2:	681b      	ldr	r3, [r3, #0]
 80233d4:	9103      	str	r1, [sp, #12]
 80233d6:	2b00      	cmp	r3, #0
 80233d8:	bfbb      	ittet	lt
 80233da:	425b      	neglt	r3, r3
 80233dc:	f042 0202 	orrlt.w	r2, r2, #2
 80233e0:	9307      	strge	r3, [sp, #28]
 80233e2:	9307      	strlt	r3, [sp, #28]
 80233e4:	bfb8      	it	lt
 80233e6:	9204      	strlt	r2, [sp, #16]
 80233e8:	7823      	ldrb	r3, [r4, #0]
 80233ea:	2b2e      	cmp	r3, #46	; 0x2e
 80233ec:	d10c      	bne.n	8023408 <_svfiprintf_r+0x130>
 80233ee:	7863      	ldrb	r3, [r4, #1]
 80233f0:	2b2a      	cmp	r3, #42	; 0x2a
 80233f2:	d135      	bne.n	8023460 <_svfiprintf_r+0x188>
 80233f4:	9b03      	ldr	r3, [sp, #12]
 80233f6:	1d1a      	adds	r2, r3, #4
 80233f8:	681b      	ldr	r3, [r3, #0]
 80233fa:	9203      	str	r2, [sp, #12]
 80233fc:	2b00      	cmp	r3, #0
 80233fe:	bfb8      	it	lt
 8023400:	f04f 33ff 	movlt.w	r3, #4294967295
 8023404:	3402      	adds	r4, #2
 8023406:	9305      	str	r3, [sp, #20]
 8023408:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80234d4 <_svfiprintf_r+0x1fc>
 802340c:	7821      	ldrb	r1, [r4, #0]
 802340e:	2203      	movs	r2, #3
 8023410:	4650      	mov	r0, sl
 8023412:	f7dc ff2d 	bl	8000270 <memchr>
 8023416:	b140      	cbz	r0, 802342a <_svfiprintf_r+0x152>
 8023418:	2340      	movs	r3, #64	; 0x40
 802341a:	eba0 000a 	sub.w	r0, r0, sl
 802341e:	fa03 f000 	lsl.w	r0, r3, r0
 8023422:	9b04      	ldr	r3, [sp, #16]
 8023424:	4303      	orrs	r3, r0
 8023426:	3401      	adds	r4, #1
 8023428:	9304      	str	r3, [sp, #16]
 802342a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802342e:	4826      	ldr	r0, [pc, #152]	; (80234c8 <_svfiprintf_r+0x1f0>)
 8023430:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023434:	2206      	movs	r2, #6
 8023436:	f7dc ff1b 	bl	8000270 <memchr>
 802343a:	2800      	cmp	r0, #0
 802343c:	d038      	beq.n	80234b0 <_svfiprintf_r+0x1d8>
 802343e:	4b23      	ldr	r3, [pc, #140]	; (80234cc <_svfiprintf_r+0x1f4>)
 8023440:	bb1b      	cbnz	r3, 802348a <_svfiprintf_r+0x1b2>
 8023442:	9b03      	ldr	r3, [sp, #12]
 8023444:	3307      	adds	r3, #7
 8023446:	f023 0307 	bic.w	r3, r3, #7
 802344a:	3308      	adds	r3, #8
 802344c:	9303      	str	r3, [sp, #12]
 802344e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8023450:	4433      	add	r3, r6
 8023452:	9309      	str	r3, [sp, #36]	; 0x24
 8023454:	e767      	b.n	8023326 <_svfiprintf_r+0x4e>
 8023456:	fb0c 3202 	mla	r2, ip, r2, r3
 802345a:	460c      	mov	r4, r1
 802345c:	2001      	movs	r0, #1
 802345e:	e7a5      	b.n	80233ac <_svfiprintf_r+0xd4>
 8023460:	2300      	movs	r3, #0
 8023462:	3401      	adds	r4, #1
 8023464:	9305      	str	r3, [sp, #20]
 8023466:	4619      	mov	r1, r3
 8023468:	f04f 0c0a 	mov.w	ip, #10
 802346c:	4620      	mov	r0, r4
 802346e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023472:	3a30      	subs	r2, #48	; 0x30
 8023474:	2a09      	cmp	r2, #9
 8023476:	d903      	bls.n	8023480 <_svfiprintf_r+0x1a8>
 8023478:	2b00      	cmp	r3, #0
 802347a:	d0c5      	beq.n	8023408 <_svfiprintf_r+0x130>
 802347c:	9105      	str	r1, [sp, #20]
 802347e:	e7c3      	b.n	8023408 <_svfiprintf_r+0x130>
 8023480:	fb0c 2101 	mla	r1, ip, r1, r2
 8023484:	4604      	mov	r4, r0
 8023486:	2301      	movs	r3, #1
 8023488:	e7f0      	b.n	802346c <_svfiprintf_r+0x194>
 802348a:	ab03      	add	r3, sp, #12
 802348c:	9300      	str	r3, [sp, #0]
 802348e:	462a      	mov	r2, r5
 8023490:	4b0f      	ldr	r3, [pc, #60]	; (80234d0 <_svfiprintf_r+0x1f8>)
 8023492:	a904      	add	r1, sp, #16
 8023494:	4638      	mov	r0, r7
 8023496:	f3af 8000 	nop.w
 802349a:	1c42      	adds	r2, r0, #1
 802349c:	4606      	mov	r6, r0
 802349e:	d1d6      	bne.n	802344e <_svfiprintf_r+0x176>
 80234a0:	89ab      	ldrh	r3, [r5, #12]
 80234a2:	065b      	lsls	r3, r3, #25
 80234a4:	f53f af2c 	bmi.w	8023300 <_svfiprintf_r+0x28>
 80234a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80234aa:	b01d      	add	sp, #116	; 0x74
 80234ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80234b0:	ab03      	add	r3, sp, #12
 80234b2:	9300      	str	r3, [sp, #0]
 80234b4:	462a      	mov	r2, r5
 80234b6:	4b06      	ldr	r3, [pc, #24]	; (80234d0 <_svfiprintf_r+0x1f8>)
 80234b8:	a904      	add	r1, sp, #16
 80234ba:	4638      	mov	r0, r7
 80234bc:	f000 f9d4 	bl	8023868 <_printf_i>
 80234c0:	e7eb      	b.n	802349a <_svfiprintf_r+0x1c2>
 80234c2:	bf00      	nop
 80234c4:	08029084 	.word	0x08029084
 80234c8:	0802908e 	.word	0x0802908e
 80234cc:	00000000 	.word	0x00000000
 80234d0:	08023221 	.word	0x08023221
 80234d4:	0802908a 	.word	0x0802908a

080234d8 <__sfputc_r>:
 80234d8:	6893      	ldr	r3, [r2, #8]
 80234da:	3b01      	subs	r3, #1
 80234dc:	2b00      	cmp	r3, #0
 80234de:	b410      	push	{r4}
 80234e0:	6093      	str	r3, [r2, #8]
 80234e2:	da08      	bge.n	80234f6 <__sfputc_r+0x1e>
 80234e4:	6994      	ldr	r4, [r2, #24]
 80234e6:	42a3      	cmp	r3, r4
 80234e8:	db01      	blt.n	80234ee <__sfputc_r+0x16>
 80234ea:	290a      	cmp	r1, #10
 80234ec:	d103      	bne.n	80234f6 <__sfputc_r+0x1e>
 80234ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80234f2:	f7ff bb79 	b.w	8022be8 <__swbuf_r>
 80234f6:	6813      	ldr	r3, [r2, #0]
 80234f8:	1c58      	adds	r0, r3, #1
 80234fa:	6010      	str	r0, [r2, #0]
 80234fc:	7019      	strb	r1, [r3, #0]
 80234fe:	4608      	mov	r0, r1
 8023500:	f85d 4b04 	ldr.w	r4, [sp], #4
 8023504:	4770      	bx	lr

08023506 <__sfputs_r>:
 8023506:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023508:	4606      	mov	r6, r0
 802350a:	460f      	mov	r7, r1
 802350c:	4614      	mov	r4, r2
 802350e:	18d5      	adds	r5, r2, r3
 8023510:	42ac      	cmp	r4, r5
 8023512:	d101      	bne.n	8023518 <__sfputs_r+0x12>
 8023514:	2000      	movs	r0, #0
 8023516:	e007      	b.n	8023528 <__sfputs_r+0x22>
 8023518:	f814 1b01 	ldrb.w	r1, [r4], #1
 802351c:	463a      	mov	r2, r7
 802351e:	4630      	mov	r0, r6
 8023520:	f7ff ffda 	bl	80234d8 <__sfputc_r>
 8023524:	1c43      	adds	r3, r0, #1
 8023526:	d1f3      	bne.n	8023510 <__sfputs_r+0xa>
 8023528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802352c <_vfiprintf_r>:
 802352c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023530:	460d      	mov	r5, r1
 8023532:	b09d      	sub	sp, #116	; 0x74
 8023534:	4614      	mov	r4, r2
 8023536:	4698      	mov	r8, r3
 8023538:	4606      	mov	r6, r0
 802353a:	b118      	cbz	r0, 8023544 <_vfiprintf_r+0x18>
 802353c:	6983      	ldr	r3, [r0, #24]
 802353e:	b90b      	cbnz	r3, 8023544 <_vfiprintf_r+0x18>
 8023540:	f7ff fd4a 	bl	8022fd8 <__sinit>
 8023544:	4b89      	ldr	r3, [pc, #548]	; (802376c <_vfiprintf_r+0x240>)
 8023546:	429d      	cmp	r5, r3
 8023548:	d11b      	bne.n	8023582 <_vfiprintf_r+0x56>
 802354a:	6875      	ldr	r5, [r6, #4]
 802354c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802354e:	07d9      	lsls	r1, r3, #31
 8023550:	d405      	bmi.n	802355e <_vfiprintf_r+0x32>
 8023552:	89ab      	ldrh	r3, [r5, #12]
 8023554:	059a      	lsls	r2, r3, #22
 8023556:	d402      	bmi.n	802355e <_vfiprintf_r+0x32>
 8023558:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802355a:	f7ff fded 	bl	8023138 <__retarget_lock_acquire_recursive>
 802355e:	89ab      	ldrh	r3, [r5, #12]
 8023560:	071b      	lsls	r3, r3, #28
 8023562:	d501      	bpl.n	8023568 <_vfiprintf_r+0x3c>
 8023564:	692b      	ldr	r3, [r5, #16]
 8023566:	b9eb      	cbnz	r3, 80235a4 <_vfiprintf_r+0x78>
 8023568:	4629      	mov	r1, r5
 802356a:	4630      	mov	r0, r6
 802356c:	f7ff fb8e 	bl	8022c8c <__swsetup_r>
 8023570:	b1c0      	cbz	r0, 80235a4 <_vfiprintf_r+0x78>
 8023572:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8023574:	07dc      	lsls	r4, r3, #31
 8023576:	d50e      	bpl.n	8023596 <_vfiprintf_r+0x6a>
 8023578:	f04f 30ff 	mov.w	r0, #4294967295
 802357c:	b01d      	add	sp, #116	; 0x74
 802357e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023582:	4b7b      	ldr	r3, [pc, #492]	; (8023770 <_vfiprintf_r+0x244>)
 8023584:	429d      	cmp	r5, r3
 8023586:	d101      	bne.n	802358c <_vfiprintf_r+0x60>
 8023588:	68b5      	ldr	r5, [r6, #8]
 802358a:	e7df      	b.n	802354c <_vfiprintf_r+0x20>
 802358c:	4b79      	ldr	r3, [pc, #484]	; (8023774 <_vfiprintf_r+0x248>)
 802358e:	429d      	cmp	r5, r3
 8023590:	bf08      	it	eq
 8023592:	68f5      	ldreq	r5, [r6, #12]
 8023594:	e7da      	b.n	802354c <_vfiprintf_r+0x20>
 8023596:	89ab      	ldrh	r3, [r5, #12]
 8023598:	0598      	lsls	r0, r3, #22
 802359a:	d4ed      	bmi.n	8023578 <_vfiprintf_r+0x4c>
 802359c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 802359e:	f7ff fdcc 	bl	802313a <__retarget_lock_release_recursive>
 80235a2:	e7e9      	b.n	8023578 <_vfiprintf_r+0x4c>
 80235a4:	2300      	movs	r3, #0
 80235a6:	9309      	str	r3, [sp, #36]	; 0x24
 80235a8:	2320      	movs	r3, #32
 80235aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80235ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80235b2:	2330      	movs	r3, #48	; 0x30
 80235b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8023778 <_vfiprintf_r+0x24c>
 80235b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80235bc:	f04f 0901 	mov.w	r9, #1
 80235c0:	4623      	mov	r3, r4
 80235c2:	469a      	mov	sl, r3
 80235c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80235c8:	b10a      	cbz	r2, 80235ce <_vfiprintf_r+0xa2>
 80235ca:	2a25      	cmp	r2, #37	; 0x25
 80235cc:	d1f9      	bne.n	80235c2 <_vfiprintf_r+0x96>
 80235ce:	ebba 0b04 	subs.w	fp, sl, r4
 80235d2:	d00b      	beq.n	80235ec <_vfiprintf_r+0xc0>
 80235d4:	465b      	mov	r3, fp
 80235d6:	4622      	mov	r2, r4
 80235d8:	4629      	mov	r1, r5
 80235da:	4630      	mov	r0, r6
 80235dc:	f7ff ff93 	bl	8023506 <__sfputs_r>
 80235e0:	3001      	adds	r0, #1
 80235e2:	f000 80aa 	beq.w	802373a <_vfiprintf_r+0x20e>
 80235e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80235e8:	445a      	add	r2, fp
 80235ea:	9209      	str	r2, [sp, #36]	; 0x24
 80235ec:	f89a 3000 	ldrb.w	r3, [sl]
 80235f0:	2b00      	cmp	r3, #0
 80235f2:	f000 80a2 	beq.w	802373a <_vfiprintf_r+0x20e>
 80235f6:	2300      	movs	r3, #0
 80235f8:	f04f 32ff 	mov.w	r2, #4294967295
 80235fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023600:	f10a 0a01 	add.w	sl, sl, #1
 8023604:	9304      	str	r3, [sp, #16]
 8023606:	9307      	str	r3, [sp, #28]
 8023608:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 802360c:	931a      	str	r3, [sp, #104]	; 0x68
 802360e:	4654      	mov	r4, sl
 8023610:	2205      	movs	r2, #5
 8023612:	f814 1b01 	ldrb.w	r1, [r4], #1
 8023616:	4858      	ldr	r0, [pc, #352]	; (8023778 <_vfiprintf_r+0x24c>)
 8023618:	f7dc fe2a 	bl	8000270 <memchr>
 802361c:	9a04      	ldr	r2, [sp, #16]
 802361e:	b9d8      	cbnz	r0, 8023658 <_vfiprintf_r+0x12c>
 8023620:	06d1      	lsls	r1, r2, #27
 8023622:	bf44      	itt	mi
 8023624:	2320      	movmi	r3, #32
 8023626:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802362a:	0713      	lsls	r3, r2, #28
 802362c:	bf44      	itt	mi
 802362e:	232b      	movmi	r3, #43	; 0x2b
 8023630:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8023634:	f89a 3000 	ldrb.w	r3, [sl]
 8023638:	2b2a      	cmp	r3, #42	; 0x2a
 802363a:	d015      	beq.n	8023668 <_vfiprintf_r+0x13c>
 802363c:	9a07      	ldr	r2, [sp, #28]
 802363e:	4654      	mov	r4, sl
 8023640:	2000      	movs	r0, #0
 8023642:	f04f 0c0a 	mov.w	ip, #10
 8023646:	4621      	mov	r1, r4
 8023648:	f811 3b01 	ldrb.w	r3, [r1], #1
 802364c:	3b30      	subs	r3, #48	; 0x30
 802364e:	2b09      	cmp	r3, #9
 8023650:	d94e      	bls.n	80236f0 <_vfiprintf_r+0x1c4>
 8023652:	b1b0      	cbz	r0, 8023682 <_vfiprintf_r+0x156>
 8023654:	9207      	str	r2, [sp, #28]
 8023656:	e014      	b.n	8023682 <_vfiprintf_r+0x156>
 8023658:	eba0 0308 	sub.w	r3, r0, r8
 802365c:	fa09 f303 	lsl.w	r3, r9, r3
 8023660:	4313      	orrs	r3, r2
 8023662:	9304      	str	r3, [sp, #16]
 8023664:	46a2      	mov	sl, r4
 8023666:	e7d2      	b.n	802360e <_vfiprintf_r+0xe2>
 8023668:	9b03      	ldr	r3, [sp, #12]
 802366a:	1d19      	adds	r1, r3, #4
 802366c:	681b      	ldr	r3, [r3, #0]
 802366e:	9103      	str	r1, [sp, #12]
 8023670:	2b00      	cmp	r3, #0
 8023672:	bfbb      	ittet	lt
 8023674:	425b      	neglt	r3, r3
 8023676:	f042 0202 	orrlt.w	r2, r2, #2
 802367a:	9307      	strge	r3, [sp, #28]
 802367c:	9307      	strlt	r3, [sp, #28]
 802367e:	bfb8      	it	lt
 8023680:	9204      	strlt	r2, [sp, #16]
 8023682:	7823      	ldrb	r3, [r4, #0]
 8023684:	2b2e      	cmp	r3, #46	; 0x2e
 8023686:	d10c      	bne.n	80236a2 <_vfiprintf_r+0x176>
 8023688:	7863      	ldrb	r3, [r4, #1]
 802368a:	2b2a      	cmp	r3, #42	; 0x2a
 802368c:	d135      	bne.n	80236fa <_vfiprintf_r+0x1ce>
 802368e:	9b03      	ldr	r3, [sp, #12]
 8023690:	1d1a      	adds	r2, r3, #4
 8023692:	681b      	ldr	r3, [r3, #0]
 8023694:	9203      	str	r2, [sp, #12]
 8023696:	2b00      	cmp	r3, #0
 8023698:	bfb8      	it	lt
 802369a:	f04f 33ff 	movlt.w	r3, #4294967295
 802369e:	3402      	adds	r4, #2
 80236a0:	9305      	str	r3, [sp, #20]
 80236a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8023788 <_vfiprintf_r+0x25c>
 80236a6:	7821      	ldrb	r1, [r4, #0]
 80236a8:	2203      	movs	r2, #3
 80236aa:	4650      	mov	r0, sl
 80236ac:	f7dc fde0 	bl	8000270 <memchr>
 80236b0:	b140      	cbz	r0, 80236c4 <_vfiprintf_r+0x198>
 80236b2:	2340      	movs	r3, #64	; 0x40
 80236b4:	eba0 000a 	sub.w	r0, r0, sl
 80236b8:	fa03 f000 	lsl.w	r0, r3, r0
 80236bc:	9b04      	ldr	r3, [sp, #16]
 80236be:	4303      	orrs	r3, r0
 80236c0:	3401      	adds	r4, #1
 80236c2:	9304      	str	r3, [sp, #16]
 80236c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80236c8:	482c      	ldr	r0, [pc, #176]	; (802377c <_vfiprintf_r+0x250>)
 80236ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80236ce:	2206      	movs	r2, #6
 80236d0:	f7dc fdce 	bl	8000270 <memchr>
 80236d4:	2800      	cmp	r0, #0
 80236d6:	d03f      	beq.n	8023758 <_vfiprintf_r+0x22c>
 80236d8:	4b29      	ldr	r3, [pc, #164]	; (8023780 <_vfiprintf_r+0x254>)
 80236da:	bb1b      	cbnz	r3, 8023724 <_vfiprintf_r+0x1f8>
 80236dc:	9b03      	ldr	r3, [sp, #12]
 80236de:	3307      	adds	r3, #7
 80236e0:	f023 0307 	bic.w	r3, r3, #7
 80236e4:	3308      	adds	r3, #8
 80236e6:	9303      	str	r3, [sp, #12]
 80236e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80236ea:	443b      	add	r3, r7
 80236ec:	9309      	str	r3, [sp, #36]	; 0x24
 80236ee:	e767      	b.n	80235c0 <_vfiprintf_r+0x94>
 80236f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80236f4:	460c      	mov	r4, r1
 80236f6:	2001      	movs	r0, #1
 80236f8:	e7a5      	b.n	8023646 <_vfiprintf_r+0x11a>
 80236fa:	2300      	movs	r3, #0
 80236fc:	3401      	adds	r4, #1
 80236fe:	9305      	str	r3, [sp, #20]
 8023700:	4619      	mov	r1, r3
 8023702:	f04f 0c0a 	mov.w	ip, #10
 8023706:	4620      	mov	r0, r4
 8023708:	f810 2b01 	ldrb.w	r2, [r0], #1
 802370c:	3a30      	subs	r2, #48	; 0x30
 802370e:	2a09      	cmp	r2, #9
 8023710:	d903      	bls.n	802371a <_vfiprintf_r+0x1ee>
 8023712:	2b00      	cmp	r3, #0
 8023714:	d0c5      	beq.n	80236a2 <_vfiprintf_r+0x176>
 8023716:	9105      	str	r1, [sp, #20]
 8023718:	e7c3      	b.n	80236a2 <_vfiprintf_r+0x176>
 802371a:	fb0c 2101 	mla	r1, ip, r1, r2
 802371e:	4604      	mov	r4, r0
 8023720:	2301      	movs	r3, #1
 8023722:	e7f0      	b.n	8023706 <_vfiprintf_r+0x1da>
 8023724:	ab03      	add	r3, sp, #12
 8023726:	9300      	str	r3, [sp, #0]
 8023728:	462a      	mov	r2, r5
 802372a:	4b16      	ldr	r3, [pc, #88]	; (8023784 <_vfiprintf_r+0x258>)
 802372c:	a904      	add	r1, sp, #16
 802372e:	4630      	mov	r0, r6
 8023730:	f3af 8000 	nop.w
 8023734:	4607      	mov	r7, r0
 8023736:	1c78      	adds	r0, r7, #1
 8023738:	d1d6      	bne.n	80236e8 <_vfiprintf_r+0x1bc>
 802373a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 802373c:	07d9      	lsls	r1, r3, #31
 802373e:	d405      	bmi.n	802374c <_vfiprintf_r+0x220>
 8023740:	89ab      	ldrh	r3, [r5, #12]
 8023742:	059a      	lsls	r2, r3, #22
 8023744:	d402      	bmi.n	802374c <_vfiprintf_r+0x220>
 8023746:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023748:	f7ff fcf7 	bl	802313a <__retarget_lock_release_recursive>
 802374c:	89ab      	ldrh	r3, [r5, #12]
 802374e:	065b      	lsls	r3, r3, #25
 8023750:	f53f af12 	bmi.w	8023578 <_vfiprintf_r+0x4c>
 8023754:	9809      	ldr	r0, [sp, #36]	; 0x24
 8023756:	e711      	b.n	802357c <_vfiprintf_r+0x50>
 8023758:	ab03      	add	r3, sp, #12
 802375a:	9300      	str	r3, [sp, #0]
 802375c:	462a      	mov	r2, r5
 802375e:	4b09      	ldr	r3, [pc, #36]	; (8023784 <_vfiprintf_r+0x258>)
 8023760:	a904      	add	r1, sp, #16
 8023762:	4630      	mov	r0, r6
 8023764:	f000 f880 	bl	8023868 <_printf_i>
 8023768:	e7e4      	b.n	8023734 <_vfiprintf_r+0x208>
 802376a:	bf00      	nop
 802376c:	08029044 	.word	0x08029044
 8023770:	08029064 	.word	0x08029064
 8023774:	08029024 	.word	0x08029024
 8023778:	08029084 	.word	0x08029084
 802377c:	0802908e 	.word	0x0802908e
 8023780:	00000000 	.word	0x00000000
 8023784:	08023507 	.word	0x08023507
 8023788:	0802908a 	.word	0x0802908a

0802378c <_printf_common>:
 802378c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023790:	4616      	mov	r6, r2
 8023792:	4699      	mov	r9, r3
 8023794:	688a      	ldr	r2, [r1, #8]
 8023796:	690b      	ldr	r3, [r1, #16]
 8023798:	f8dd 8020 	ldr.w	r8, [sp, #32]
 802379c:	4293      	cmp	r3, r2
 802379e:	bfb8      	it	lt
 80237a0:	4613      	movlt	r3, r2
 80237a2:	6033      	str	r3, [r6, #0]
 80237a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80237a8:	4607      	mov	r7, r0
 80237aa:	460c      	mov	r4, r1
 80237ac:	b10a      	cbz	r2, 80237b2 <_printf_common+0x26>
 80237ae:	3301      	adds	r3, #1
 80237b0:	6033      	str	r3, [r6, #0]
 80237b2:	6823      	ldr	r3, [r4, #0]
 80237b4:	0699      	lsls	r1, r3, #26
 80237b6:	bf42      	ittt	mi
 80237b8:	6833      	ldrmi	r3, [r6, #0]
 80237ba:	3302      	addmi	r3, #2
 80237bc:	6033      	strmi	r3, [r6, #0]
 80237be:	6825      	ldr	r5, [r4, #0]
 80237c0:	f015 0506 	ands.w	r5, r5, #6
 80237c4:	d106      	bne.n	80237d4 <_printf_common+0x48>
 80237c6:	f104 0a19 	add.w	sl, r4, #25
 80237ca:	68e3      	ldr	r3, [r4, #12]
 80237cc:	6832      	ldr	r2, [r6, #0]
 80237ce:	1a9b      	subs	r3, r3, r2
 80237d0:	42ab      	cmp	r3, r5
 80237d2:	dc26      	bgt.n	8023822 <_printf_common+0x96>
 80237d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80237d8:	1e13      	subs	r3, r2, #0
 80237da:	6822      	ldr	r2, [r4, #0]
 80237dc:	bf18      	it	ne
 80237de:	2301      	movne	r3, #1
 80237e0:	0692      	lsls	r2, r2, #26
 80237e2:	d42b      	bmi.n	802383c <_printf_common+0xb0>
 80237e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80237e8:	4649      	mov	r1, r9
 80237ea:	4638      	mov	r0, r7
 80237ec:	47c0      	blx	r8
 80237ee:	3001      	adds	r0, #1
 80237f0:	d01e      	beq.n	8023830 <_printf_common+0xa4>
 80237f2:	6823      	ldr	r3, [r4, #0]
 80237f4:	68e5      	ldr	r5, [r4, #12]
 80237f6:	6832      	ldr	r2, [r6, #0]
 80237f8:	f003 0306 	and.w	r3, r3, #6
 80237fc:	2b04      	cmp	r3, #4
 80237fe:	bf08      	it	eq
 8023800:	1aad      	subeq	r5, r5, r2
 8023802:	68a3      	ldr	r3, [r4, #8]
 8023804:	6922      	ldr	r2, [r4, #16]
 8023806:	bf0c      	ite	eq
 8023808:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802380c:	2500      	movne	r5, #0
 802380e:	4293      	cmp	r3, r2
 8023810:	bfc4      	itt	gt
 8023812:	1a9b      	subgt	r3, r3, r2
 8023814:	18ed      	addgt	r5, r5, r3
 8023816:	2600      	movs	r6, #0
 8023818:	341a      	adds	r4, #26
 802381a:	42b5      	cmp	r5, r6
 802381c:	d11a      	bne.n	8023854 <_printf_common+0xc8>
 802381e:	2000      	movs	r0, #0
 8023820:	e008      	b.n	8023834 <_printf_common+0xa8>
 8023822:	2301      	movs	r3, #1
 8023824:	4652      	mov	r2, sl
 8023826:	4649      	mov	r1, r9
 8023828:	4638      	mov	r0, r7
 802382a:	47c0      	blx	r8
 802382c:	3001      	adds	r0, #1
 802382e:	d103      	bne.n	8023838 <_printf_common+0xac>
 8023830:	f04f 30ff 	mov.w	r0, #4294967295
 8023834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8023838:	3501      	adds	r5, #1
 802383a:	e7c6      	b.n	80237ca <_printf_common+0x3e>
 802383c:	18e1      	adds	r1, r4, r3
 802383e:	1c5a      	adds	r2, r3, #1
 8023840:	2030      	movs	r0, #48	; 0x30
 8023842:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8023846:	4422      	add	r2, r4
 8023848:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 802384c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8023850:	3302      	adds	r3, #2
 8023852:	e7c7      	b.n	80237e4 <_printf_common+0x58>
 8023854:	2301      	movs	r3, #1
 8023856:	4622      	mov	r2, r4
 8023858:	4649      	mov	r1, r9
 802385a:	4638      	mov	r0, r7
 802385c:	47c0      	blx	r8
 802385e:	3001      	adds	r0, #1
 8023860:	d0e6      	beq.n	8023830 <_printf_common+0xa4>
 8023862:	3601      	adds	r6, #1
 8023864:	e7d9      	b.n	802381a <_printf_common+0x8e>
	...

08023868 <_printf_i>:
 8023868:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802386c:	7e0f      	ldrb	r7, [r1, #24]
 802386e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8023870:	2f78      	cmp	r7, #120	; 0x78
 8023872:	4691      	mov	r9, r2
 8023874:	4680      	mov	r8, r0
 8023876:	460c      	mov	r4, r1
 8023878:	469a      	mov	sl, r3
 802387a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 802387e:	d807      	bhi.n	8023890 <_printf_i+0x28>
 8023880:	2f62      	cmp	r7, #98	; 0x62
 8023882:	d80a      	bhi.n	802389a <_printf_i+0x32>
 8023884:	2f00      	cmp	r7, #0
 8023886:	f000 80d8 	beq.w	8023a3a <_printf_i+0x1d2>
 802388a:	2f58      	cmp	r7, #88	; 0x58
 802388c:	f000 80a3 	beq.w	80239d6 <_printf_i+0x16e>
 8023890:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023894:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8023898:	e03a      	b.n	8023910 <_printf_i+0xa8>
 802389a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 802389e:	2b15      	cmp	r3, #21
 80238a0:	d8f6      	bhi.n	8023890 <_printf_i+0x28>
 80238a2:	a101      	add	r1, pc, #4	; (adr r1, 80238a8 <_printf_i+0x40>)
 80238a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80238a8:	08023901 	.word	0x08023901
 80238ac:	08023915 	.word	0x08023915
 80238b0:	08023891 	.word	0x08023891
 80238b4:	08023891 	.word	0x08023891
 80238b8:	08023891 	.word	0x08023891
 80238bc:	08023891 	.word	0x08023891
 80238c0:	08023915 	.word	0x08023915
 80238c4:	08023891 	.word	0x08023891
 80238c8:	08023891 	.word	0x08023891
 80238cc:	08023891 	.word	0x08023891
 80238d0:	08023891 	.word	0x08023891
 80238d4:	08023a21 	.word	0x08023a21
 80238d8:	08023945 	.word	0x08023945
 80238dc:	08023a03 	.word	0x08023a03
 80238e0:	08023891 	.word	0x08023891
 80238e4:	08023891 	.word	0x08023891
 80238e8:	08023a43 	.word	0x08023a43
 80238ec:	08023891 	.word	0x08023891
 80238f0:	08023945 	.word	0x08023945
 80238f4:	08023891 	.word	0x08023891
 80238f8:	08023891 	.word	0x08023891
 80238fc:	08023a0b 	.word	0x08023a0b
 8023900:	682b      	ldr	r3, [r5, #0]
 8023902:	1d1a      	adds	r2, r3, #4
 8023904:	681b      	ldr	r3, [r3, #0]
 8023906:	602a      	str	r2, [r5, #0]
 8023908:	f104 0542 	add.w	r5, r4, #66	; 0x42
 802390c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023910:	2301      	movs	r3, #1
 8023912:	e0a3      	b.n	8023a5c <_printf_i+0x1f4>
 8023914:	6820      	ldr	r0, [r4, #0]
 8023916:	6829      	ldr	r1, [r5, #0]
 8023918:	0606      	lsls	r6, r0, #24
 802391a:	f101 0304 	add.w	r3, r1, #4
 802391e:	d50a      	bpl.n	8023936 <_printf_i+0xce>
 8023920:	680e      	ldr	r6, [r1, #0]
 8023922:	602b      	str	r3, [r5, #0]
 8023924:	2e00      	cmp	r6, #0
 8023926:	da03      	bge.n	8023930 <_printf_i+0xc8>
 8023928:	232d      	movs	r3, #45	; 0x2d
 802392a:	4276      	negs	r6, r6
 802392c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023930:	485e      	ldr	r0, [pc, #376]	; (8023aac <_printf_i+0x244>)
 8023932:	230a      	movs	r3, #10
 8023934:	e019      	b.n	802396a <_printf_i+0x102>
 8023936:	680e      	ldr	r6, [r1, #0]
 8023938:	602b      	str	r3, [r5, #0]
 802393a:	f010 0f40 	tst.w	r0, #64	; 0x40
 802393e:	bf18      	it	ne
 8023940:	b236      	sxthne	r6, r6
 8023942:	e7ef      	b.n	8023924 <_printf_i+0xbc>
 8023944:	682b      	ldr	r3, [r5, #0]
 8023946:	6820      	ldr	r0, [r4, #0]
 8023948:	1d19      	adds	r1, r3, #4
 802394a:	6029      	str	r1, [r5, #0]
 802394c:	0601      	lsls	r1, r0, #24
 802394e:	d501      	bpl.n	8023954 <_printf_i+0xec>
 8023950:	681e      	ldr	r6, [r3, #0]
 8023952:	e002      	b.n	802395a <_printf_i+0xf2>
 8023954:	0646      	lsls	r6, r0, #25
 8023956:	d5fb      	bpl.n	8023950 <_printf_i+0xe8>
 8023958:	881e      	ldrh	r6, [r3, #0]
 802395a:	4854      	ldr	r0, [pc, #336]	; (8023aac <_printf_i+0x244>)
 802395c:	2f6f      	cmp	r7, #111	; 0x6f
 802395e:	bf0c      	ite	eq
 8023960:	2308      	moveq	r3, #8
 8023962:	230a      	movne	r3, #10
 8023964:	2100      	movs	r1, #0
 8023966:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802396a:	6865      	ldr	r5, [r4, #4]
 802396c:	60a5      	str	r5, [r4, #8]
 802396e:	2d00      	cmp	r5, #0
 8023970:	bfa2      	ittt	ge
 8023972:	6821      	ldrge	r1, [r4, #0]
 8023974:	f021 0104 	bicge.w	r1, r1, #4
 8023978:	6021      	strge	r1, [r4, #0]
 802397a:	b90e      	cbnz	r6, 8023980 <_printf_i+0x118>
 802397c:	2d00      	cmp	r5, #0
 802397e:	d04d      	beq.n	8023a1c <_printf_i+0x1b4>
 8023980:	4615      	mov	r5, r2
 8023982:	fbb6 f1f3 	udiv	r1, r6, r3
 8023986:	fb03 6711 	mls	r7, r3, r1, r6
 802398a:	5dc7      	ldrb	r7, [r0, r7]
 802398c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023990:	4637      	mov	r7, r6
 8023992:	42bb      	cmp	r3, r7
 8023994:	460e      	mov	r6, r1
 8023996:	d9f4      	bls.n	8023982 <_printf_i+0x11a>
 8023998:	2b08      	cmp	r3, #8
 802399a:	d10b      	bne.n	80239b4 <_printf_i+0x14c>
 802399c:	6823      	ldr	r3, [r4, #0]
 802399e:	07de      	lsls	r6, r3, #31
 80239a0:	d508      	bpl.n	80239b4 <_printf_i+0x14c>
 80239a2:	6923      	ldr	r3, [r4, #16]
 80239a4:	6861      	ldr	r1, [r4, #4]
 80239a6:	4299      	cmp	r1, r3
 80239a8:	bfde      	ittt	le
 80239aa:	2330      	movle	r3, #48	; 0x30
 80239ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80239b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80239b4:	1b52      	subs	r2, r2, r5
 80239b6:	6122      	str	r2, [r4, #16]
 80239b8:	f8cd a000 	str.w	sl, [sp]
 80239bc:	464b      	mov	r3, r9
 80239be:	aa03      	add	r2, sp, #12
 80239c0:	4621      	mov	r1, r4
 80239c2:	4640      	mov	r0, r8
 80239c4:	f7ff fee2 	bl	802378c <_printf_common>
 80239c8:	3001      	adds	r0, #1
 80239ca:	d14c      	bne.n	8023a66 <_printf_i+0x1fe>
 80239cc:	f04f 30ff 	mov.w	r0, #4294967295
 80239d0:	b004      	add	sp, #16
 80239d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80239d6:	4835      	ldr	r0, [pc, #212]	; (8023aac <_printf_i+0x244>)
 80239d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80239dc:	6829      	ldr	r1, [r5, #0]
 80239de:	6823      	ldr	r3, [r4, #0]
 80239e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80239e4:	6029      	str	r1, [r5, #0]
 80239e6:	061d      	lsls	r5, r3, #24
 80239e8:	d514      	bpl.n	8023a14 <_printf_i+0x1ac>
 80239ea:	07df      	lsls	r7, r3, #31
 80239ec:	bf44      	itt	mi
 80239ee:	f043 0320 	orrmi.w	r3, r3, #32
 80239f2:	6023      	strmi	r3, [r4, #0]
 80239f4:	b91e      	cbnz	r6, 80239fe <_printf_i+0x196>
 80239f6:	6823      	ldr	r3, [r4, #0]
 80239f8:	f023 0320 	bic.w	r3, r3, #32
 80239fc:	6023      	str	r3, [r4, #0]
 80239fe:	2310      	movs	r3, #16
 8023a00:	e7b0      	b.n	8023964 <_printf_i+0xfc>
 8023a02:	6823      	ldr	r3, [r4, #0]
 8023a04:	f043 0320 	orr.w	r3, r3, #32
 8023a08:	6023      	str	r3, [r4, #0]
 8023a0a:	2378      	movs	r3, #120	; 0x78
 8023a0c:	4828      	ldr	r0, [pc, #160]	; (8023ab0 <_printf_i+0x248>)
 8023a0e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023a12:	e7e3      	b.n	80239dc <_printf_i+0x174>
 8023a14:	0659      	lsls	r1, r3, #25
 8023a16:	bf48      	it	mi
 8023a18:	b2b6      	uxthmi	r6, r6
 8023a1a:	e7e6      	b.n	80239ea <_printf_i+0x182>
 8023a1c:	4615      	mov	r5, r2
 8023a1e:	e7bb      	b.n	8023998 <_printf_i+0x130>
 8023a20:	682b      	ldr	r3, [r5, #0]
 8023a22:	6826      	ldr	r6, [r4, #0]
 8023a24:	6961      	ldr	r1, [r4, #20]
 8023a26:	1d18      	adds	r0, r3, #4
 8023a28:	6028      	str	r0, [r5, #0]
 8023a2a:	0635      	lsls	r5, r6, #24
 8023a2c:	681b      	ldr	r3, [r3, #0]
 8023a2e:	d501      	bpl.n	8023a34 <_printf_i+0x1cc>
 8023a30:	6019      	str	r1, [r3, #0]
 8023a32:	e002      	b.n	8023a3a <_printf_i+0x1d2>
 8023a34:	0670      	lsls	r0, r6, #25
 8023a36:	d5fb      	bpl.n	8023a30 <_printf_i+0x1c8>
 8023a38:	8019      	strh	r1, [r3, #0]
 8023a3a:	2300      	movs	r3, #0
 8023a3c:	6123      	str	r3, [r4, #16]
 8023a3e:	4615      	mov	r5, r2
 8023a40:	e7ba      	b.n	80239b8 <_printf_i+0x150>
 8023a42:	682b      	ldr	r3, [r5, #0]
 8023a44:	1d1a      	adds	r2, r3, #4
 8023a46:	602a      	str	r2, [r5, #0]
 8023a48:	681d      	ldr	r5, [r3, #0]
 8023a4a:	6862      	ldr	r2, [r4, #4]
 8023a4c:	2100      	movs	r1, #0
 8023a4e:	4628      	mov	r0, r5
 8023a50:	f7dc fc0e 	bl	8000270 <memchr>
 8023a54:	b108      	cbz	r0, 8023a5a <_printf_i+0x1f2>
 8023a56:	1b40      	subs	r0, r0, r5
 8023a58:	6060      	str	r0, [r4, #4]
 8023a5a:	6863      	ldr	r3, [r4, #4]
 8023a5c:	6123      	str	r3, [r4, #16]
 8023a5e:	2300      	movs	r3, #0
 8023a60:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8023a64:	e7a8      	b.n	80239b8 <_printf_i+0x150>
 8023a66:	6923      	ldr	r3, [r4, #16]
 8023a68:	462a      	mov	r2, r5
 8023a6a:	4649      	mov	r1, r9
 8023a6c:	4640      	mov	r0, r8
 8023a6e:	47d0      	blx	sl
 8023a70:	3001      	adds	r0, #1
 8023a72:	d0ab      	beq.n	80239cc <_printf_i+0x164>
 8023a74:	6823      	ldr	r3, [r4, #0]
 8023a76:	079b      	lsls	r3, r3, #30
 8023a78:	d413      	bmi.n	8023aa2 <_printf_i+0x23a>
 8023a7a:	68e0      	ldr	r0, [r4, #12]
 8023a7c:	9b03      	ldr	r3, [sp, #12]
 8023a7e:	4298      	cmp	r0, r3
 8023a80:	bfb8      	it	lt
 8023a82:	4618      	movlt	r0, r3
 8023a84:	e7a4      	b.n	80239d0 <_printf_i+0x168>
 8023a86:	2301      	movs	r3, #1
 8023a88:	4632      	mov	r2, r6
 8023a8a:	4649      	mov	r1, r9
 8023a8c:	4640      	mov	r0, r8
 8023a8e:	47d0      	blx	sl
 8023a90:	3001      	adds	r0, #1
 8023a92:	d09b      	beq.n	80239cc <_printf_i+0x164>
 8023a94:	3501      	adds	r5, #1
 8023a96:	68e3      	ldr	r3, [r4, #12]
 8023a98:	9903      	ldr	r1, [sp, #12]
 8023a9a:	1a5b      	subs	r3, r3, r1
 8023a9c:	42ab      	cmp	r3, r5
 8023a9e:	dcf2      	bgt.n	8023a86 <_printf_i+0x21e>
 8023aa0:	e7eb      	b.n	8023a7a <_printf_i+0x212>
 8023aa2:	2500      	movs	r5, #0
 8023aa4:	f104 0619 	add.w	r6, r4, #25
 8023aa8:	e7f5      	b.n	8023a96 <_printf_i+0x22e>
 8023aaa:	bf00      	nop
 8023aac:	08029095 	.word	0x08029095
 8023ab0:	080290a6 	.word	0x080290a6

08023ab4 <_putc_r>:
 8023ab4:	b570      	push	{r4, r5, r6, lr}
 8023ab6:	460d      	mov	r5, r1
 8023ab8:	4614      	mov	r4, r2
 8023aba:	4606      	mov	r6, r0
 8023abc:	b118      	cbz	r0, 8023ac6 <_putc_r+0x12>
 8023abe:	6983      	ldr	r3, [r0, #24]
 8023ac0:	b90b      	cbnz	r3, 8023ac6 <_putc_r+0x12>
 8023ac2:	f7ff fa89 	bl	8022fd8 <__sinit>
 8023ac6:	4b1c      	ldr	r3, [pc, #112]	; (8023b38 <_putc_r+0x84>)
 8023ac8:	429c      	cmp	r4, r3
 8023aca:	d124      	bne.n	8023b16 <_putc_r+0x62>
 8023acc:	6874      	ldr	r4, [r6, #4]
 8023ace:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023ad0:	07d8      	lsls	r0, r3, #31
 8023ad2:	d405      	bmi.n	8023ae0 <_putc_r+0x2c>
 8023ad4:	89a3      	ldrh	r3, [r4, #12]
 8023ad6:	0599      	lsls	r1, r3, #22
 8023ad8:	d402      	bmi.n	8023ae0 <_putc_r+0x2c>
 8023ada:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023adc:	f7ff fb2c 	bl	8023138 <__retarget_lock_acquire_recursive>
 8023ae0:	68a3      	ldr	r3, [r4, #8]
 8023ae2:	3b01      	subs	r3, #1
 8023ae4:	2b00      	cmp	r3, #0
 8023ae6:	60a3      	str	r3, [r4, #8]
 8023ae8:	da05      	bge.n	8023af6 <_putc_r+0x42>
 8023aea:	69a2      	ldr	r2, [r4, #24]
 8023aec:	4293      	cmp	r3, r2
 8023aee:	db1c      	blt.n	8023b2a <_putc_r+0x76>
 8023af0:	b2eb      	uxtb	r3, r5
 8023af2:	2b0a      	cmp	r3, #10
 8023af4:	d019      	beq.n	8023b2a <_putc_r+0x76>
 8023af6:	6823      	ldr	r3, [r4, #0]
 8023af8:	1c5a      	adds	r2, r3, #1
 8023afa:	6022      	str	r2, [r4, #0]
 8023afc:	701d      	strb	r5, [r3, #0]
 8023afe:	b2ed      	uxtb	r5, r5
 8023b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023b02:	07da      	lsls	r2, r3, #31
 8023b04:	d405      	bmi.n	8023b12 <_putc_r+0x5e>
 8023b06:	89a3      	ldrh	r3, [r4, #12]
 8023b08:	059b      	lsls	r3, r3, #22
 8023b0a:	d402      	bmi.n	8023b12 <_putc_r+0x5e>
 8023b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023b0e:	f7ff fb14 	bl	802313a <__retarget_lock_release_recursive>
 8023b12:	4628      	mov	r0, r5
 8023b14:	bd70      	pop	{r4, r5, r6, pc}
 8023b16:	4b09      	ldr	r3, [pc, #36]	; (8023b3c <_putc_r+0x88>)
 8023b18:	429c      	cmp	r4, r3
 8023b1a:	d101      	bne.n	8023b20 <_putc_r+0x6c>
 8023b1c:	68b4      	ldr	r4, [r6, #8]
 8023b1e:	e7d6      	b.n	8023ace <_putc_r+0x1a>
 8023b20:	4b07      	ldr	r3, [pc, #28]	; (8023b40 <_putc_r+0x8c>)
 8023b22:	429c      	cmp	r4, r3
 8023b24:	bf08      	it	eq
 8023b26:	68f4      	ldreq	r4, [r6, #12]
 8023b28:	e7d1      	b.n	8023ace <_putc_r+0x1a>
 8023b2a:	4629      	mov	r1, r5
 8023b2c:	4622      	mov	r2, r4
 8023b2e:	4630      	mov	r0, r6
 8023b30:	f7ff f85a 	bl	8022be8 <__swbuf_r>
 8023b34:	4605      	mov	r5, r0
 8023b36:	e7e3      	b.n	8023b00 <_putc_r+0x4c>
 8023b38:	08029044 	.word	0x08029044
 8023b3c:	08029064 	.word	0x08029064
 8023b40:	08029024 	.word	0x08029024

08023b44 <__sread>:
 8023b44:	b510      	push	{r4, lr}
 8023b46:	460c      	mov	r4, r1
 8023b48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b4c:	f000 f8cc 	bl	8023ce8 <_read_r>
 8023b50:	2800      	cmp	r0, #0
 8023b52:	bfab      	itete	ge
 8023b54:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8023b56:	89a3      	ldrhlt	r3, [r4, #12]
 8023b58:	181b      	addge	r3, r3, r0
 8023b5a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8023b5e:	bfac      	ite	ge
 8023b60:	6563      	strge	r3, [r4, #84]	; 0x54
 8023b62:	81a3      	strhlt	r3, [r4, #12]
 8023b64:	bd10      	pop	{r4, pc}

08023b66 <__swrite>:
 8023b66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023b6a:	461f      	mov	r7, r3
 8023b6c:	898b      	ldrh	r3, [r1, #12]
 8023b6e:	05db      	lsls	r3, r3, #23
 8023b70:	4605      	mov	r5, r0
 8023b72:	460c      	mov	r4, r1
 8023b74:	4616      	mov	r6, r2
 8023b76:	d505      	bpl.n	8023b84 <__swrite+0x1e>
 8023b78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023b7c:	2302      	movs	r3, #2
 8023b7e:	2200      	movs	r2, #0
 8023b80:	f000 f870 	bl	8023c64 <_lseek_r>
 8023b84:	89a3      	ldrh	r3, [r4, #12]
 8023b86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8023b8a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023b8e:	81a3      	strh	r3, [r4, #12]
 8023b90:	4632      	mov	r2, r6
 8023b92:	463b      	mov	r3, r7
 8023b94:	4628      	mov	r0, r5
 8023b96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023b9a:	f000 b817 	b.w	8023bcc <_write_r>

08023b9e <__sseek>:
 8023b9e:	b510      	push	{r4, lr}
 8023ba0:	460c      	mov	r4, r1
 8023ba2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023ba6:	f000 f85d 	bl	8023c64 <_lseek_r>
 8023baa:	1c43      	adds	r3, r0, #1
 8023bac:	89a3      	ldrh	r3, [r4, #12]
 8023bae:	bf15      	itete	ne
 8023bb0:	6560      	strne	r0, [r4, #84]	; 0x54
 8023bb2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8023bb6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8023bba:	81a3      	strheq	r3, [r4, #12]
 8023bbc:	bf18      	it	ne
 8023bbe:	81a3      	strhne	r3, [r4, #12]
 8023bc0:	bd10      	pop	{r4, pc}

08023bc2 <__sclose>:
 8023bc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8023bc6:	f000 b81b 	b.w	8023c00 <_close_r>
	...

08023bcc <_write_r>:
 8023bcc:	b538      	push	{r3, r4, r5, lr}
 8023bce:	4d07      	ldr	r5, [pc, #28]	; (8023bec <_write_r+0x20>)
 8023bd0:	4604      	mov	r4, r0
 8023bd2:	4608      	mov	r0, r1
 8023bd4:	4611      	mov	r1, r2
 8023bd6:	2200      	movs	r2, #0
 8023bd8:	602a      	str	r2, [r5, #0]
 8023bda:	461a      	mov	r2, r3
 8023bdc:	f7f0 ff4d 	bl	8014a7a <_write>
 8023be0:	1c43      	adds	r3, r0, #1
 8023be2:	d102      	bne.n	8023bea <_write_r+0x1e>
 8023be4:	682b      	ldr	r3, [r5, #0]
 8023be6:	b103      	cbz	r3, 8023bea <_write_r+0x1e>
 8023be8:	6023      	str	r3, [r4, #0]
 8023bea:	bd38      	pop	{r3, r4, r5, pc}
 8023bec:	2001467c 	.word	0x2001467c

08023bf0 <abort>:
 8023bf0:	b508      	push	{r3, lr}
 8023bf2:	2006      	movs	r0, #6
 8023bf4:	f000 f8b2 	bl	8023d5c <raise>
 8023bf8:	2001      	movs	r0, #1
 8023bfa:	f7f0 ff17 	bl	8014a2c <_exit>
	...

08023c00 <_close_r>:
 8023c00:	b538      	push	{r3, r4, r5, lr}
 8023c02:	4d06      	ldr	r5, [pc, #24]	; (8023c1c <_close_r+0x1c>)
 8023c04:	2300      	movs	r3, #0
 8023c06:	4604      	mov	r4, r0
 8023c08:	4608      	mov	r0, r1
 8023c0a:	602b      	str	r3, [r5, #0]
 8023c0c:	f7f0 ff51 	bl	8014ab2 <_close>
 8023c10:	1c43      	adds	r3, r0, #1
 8023c12:	d102      	bne.n	8023c1a <_close_r+0x1a>
 8023c14:	682b      	ldr	r3, [r5, #0]
 8023c16:	b103      	cbz	r3, 8023c1a <_close_r+0x1a>
 8023c18:	6023      	str	r3, [r4, #0]
 8023c1a:	bd38      	pop	{r3, r4, r5, pc}
 8023c1c:	2001467c 	.word	0x2001467c

08023c20 <_fstat_r>:
 8023c20:	b538      	push	{r3, r4, r5, lr}
 8023c22:	4d07      	ldr	r5, [pc, #28]	; (8023c40 <_fstat_r+0x20>)
 8023c24:	2300      	movs	r3, #0
 8023c26:	4604      	mov	r4, r0
 8023c28:	4608      	mov	r0, r1
 8023c2a:	4611      	mov	r1, r2
 8023c2c:	602b      	str	r3, [r5, #0]
 8023c2e:	f7f0 ff4c 	bl	8014aca <_fstat>
 8023c32:	1c43      	adds	r3, r0, #1
 8023c34:	d102      	bne.n	8023c3c <_fstat_r+0x1c>
 8023c36:	682b      	ldr	r3, [r5, #0]
 8023c38:	b103      	cbz	r3, 8023c3c <_fstat_r+0x1c>
 8023c3a:	6023      	str	r3, [r4, #0]
 8023c3c:	bd38      	pop	{r3, r4, r5, pc}
 8023c3e:	bf00      	nop
 8023c40:	2001467c 	.word	0x2001467c

08023c44 <_isatty_r>:
 8023c44:	b538      	push	{r3, r4, r5, lr}
 8023c46:	4d06      	ldr	r5, [pc, #24]	; (8023c60 <_isatty_r+0x1c>)
 8023c48:	2300      	movs	r3, #0
 8023c4a:	4604      	mov	r4, r0
 8023c4c:	4608      	mov	r0, r1
 8023c4e:	602b      	str	r3, [r5, #0]
 8023c50:	f7f0 ff4b 	bl	8014aea <_isatty>
 8023c54:	1c43      	adds	r3, r0, #1
 8023c56:	d102      	bne.n	8023c5e <_isatty_r+0x1a>
 8023c58:	682b      	ldr	r3, [r5, #0]
 8023c5a:	b103      	cbz	r3, 8023c5e <_isatty_r+0x1a>
 8023c5c:	6023      	str	r3, [r4, #0]
 8023c5e:	bd38      	pop	{r3, r4, r5, pc}
 8023c60:	2001467c 	.word	0x2001467c

08023c64 <_lseek_r>:
 8023c64:	b538      	push	{r3, r4, r5, lr}
 8023c66:	4d07      	ldr	r5, [pc, #28]	; (8023c84 <_lseek_r+0x20>)
 8023c68:	4604      	mov	r4, r0
 8023c6a:	4608      	mov	r0, r1
 8023c6c:	4611      	mov	r1, r2
 8023c6e:	2200      	movs	r2, #0
 8023c70:	602a      	str	r2, [r5, #0]
 8023c72:	461a      	mov	r2, r3
 8023c74:	f7f0 ff44 	bl	8014b00 <_lseek>
 8023c78:	1c43      	adds	r3, r0, #1
 8023c7a:	d102      	bne.n	8023c82 <_lseek_r+0x1e>
 8023c7c:	682b      	ldr	r3, [r5, #0]
 8023c7e:	b103      	cbz	r3, 8023c82 <_lseek_r+0x1e>
 8023c80:	6023      	str	r3, [r4, #0]
 8023c82:	bd38      	pop	{r3, r4, r5, pc}
 8023c84:	2001467c 	.word	0x2001467c

08023c88 <_realloc_r>:
 8023c88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023c8c:	4680      	mov	r8, r0
 8023c8e:	4614      	mov	r4, r2
 8023c90:	460e      	mov	r6, r1
 8023c92:	b921      	cbnz	r1, 8023c9e <_realloc_r+0x16>
 8023c94:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8023c98:	4611      	mov	r1, r2
 8023c9a:	f7fe bd59 	b.w	8022750 <_malloc_r>
 8023c9e:	b92a      	cbnz	r2, 8023cac <_realloc_r+0x24>
 8023ca0:	f7fe fcea 	bl	8022678 <_free_r>
 8023ca4:	4625      	mov	r5, r4
 8023ca6:	4628      	mov	r0, r5
 8023ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023cac:	f000 f872 	bl	8023d94 <_malloc_usable_size_r>
 8023cb0:	4284      	cmp	r4, r0
 8023cb2:	4607      	mov	r7, r0
 8023cb4:	d802      	bhi.n	8023cbc <_realloc_r+0x34>
 8023cb6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8023cba:	d812      	bhi.n	8023ce2 <_realloc_r+0x5a>
 8023cbc:	4621      	mov	r1, r4
 8023cbe:	4640      	mov	r0, r8
 8023cc0:	f7fe fd46 	bl	8022750 <_malloc_r>
 8023cc4:	4605      	mov	r5, r0
 8023cc6:	2800      	cmp	r0, #0
 8023cc8:	d0ed      	beq.n	8023ca6 <_realloc_r+0x1e>
 8023cca:	42bc      	cmp	r4, r7
 8023ccc:	4622      	mov	r2, r4
 8023cce:	4631      	mov	r1, r6
 8023cd0:	bf28      	it	cs
 8023cd2:	463a      	movcs	r2, r7
 8023cd4:	f7fe fca0 	bl	8022618 <memcpy>
 8023cd8:	4631      	mov	r1, r6
 8023cda:	4640      	mov	r0, r8
 8023cdc:	f7fe fccc 	bl	8022678 <_free_r>
 8023ce0:	e7e1      	b.n	8023ca6 <_realloc_r+0x1e>
 8023ce2:	4635      	mov	r5, r6
 8023ce4:	e7df      	b.n	8023ca6 <_realloc_r+0x1e>
	...

08023ce8 <_read_r>:
 8023ce8:	b538      	push	{r3, r4, r5, lr}
 8023cea:	4d07      	ldr	r5, [pc, #28]	; (8023d08 <_read_r+0x20>)
 8023cec:	4604      	mov	r4, r0
 8023cee:	4608      	mov	r0, r1
 8023cf0:	4611      	mov	r1, r2
 8023cf2:	2200      	movs	r2, #0
 8023cf4:	602a      	str	r2, [r5, #0]
 8023cf6:	461a      	mov	r2, r3
 8023cf8:	f7f0 fea2 	bl	8014a40 <_read>
 8023cfc:	1c43      	adds	r3, r0, #1
 8023cfe:	d102      	bne.n	8023d06 <_read_r+0x1e>
 8023d00:	682b      	ldr	r3, [r5, #0]
 8023d02:	b103      	cbz	r3, 8023d06 <_read_r+0x1e>
 8023d04:	6023      	str	r3, [r4, #0]
 8023d06:	bd38      	pop	{r3, r4, r5, pc}
 8023d08:	2001467c 	.word	0x2001467c

08023d0c <_raise_r>:
 8023d0c:	291f      	cmp	r1, #31
 8023d0e:	b538      	push	{r3, r4, r5, lr}
 8023d10:	4604      	mov	r4, r0
 8023d12:	460d      	mov	r5, r1
 8023d14:	d904      	bls.n	8023d20 <_raise_r+0x14>
 8023d16:	2316      	movs	r3, #22
 8023d18:	6003      	str	r3, [r0, #0]
 8023d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8023d1e:	bd38      	pop	{r3, r4, r5, pc}
 8023d20:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023d22:	b112      	cbz	r2, 8023d2a <_raise_r+0x1e>
 8023d24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8023d28:	b94b      	cbnz	r3, 8023d3e <_raise_r+0x32>
 8023d2a:	4620      	mov	r0, r4
 8023d2c:	f000 f830 	bl	8023d90 <_getpid_r>
 8023d30:	462a      	mov	r2, r5
 8023d32:	4601      	mov	r1, r0
 8023d34:	4620      	mov	r0, r4
 8023d36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8023d3a:	f000 b817 	b.w	8023d6c <_kill_r>
 8023d3e:	2b01      	cmp	r3, #1
 8023d40:	d00a      	beq.n	8023d58 <_raise_r+0x4c>
 8023d42:	1c59      	adds	r1, r3, #1
 8023d44:	d103      	bne.n	8023d4e <_raise_r+0x42>
 8023d46:	2316      	movs	r3, #22
 8023d48:	6003      	str	r3, [r0, #0]
 8023d4a:	2001      	movs	r0, #1
 8023d4c:	e7e7      	b.n	8023d1e <_raise_r+0x12>
 8023d4e:	2400      	movs	r4, #0
 8023d50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8023d54:	4628      	mov	r0, r5
 8023d56:	4798      	blx	r3
 8023d58:	2000      	movs	r0, #0
 8023d5a:	e7e0      	b.n	8023d1e <_raise_r+0x12>

08023d5c <raise>:
 8023d5c:	4b02      	ldr	r3, [pc, #8]	; (8023d68 <raise+0xc>)
 8023d5e:	4601      	mov	r1, r0
 8023d60:	6818      	ldr	r0, [r3, #0]
 8023d62:	f7ff bfd3 	b.w	8023d0c <_raise_r>
 8023d66:	bf00      	nop
 8023d68:	20000140 	.word	0x20000140

08023d6c <_kill_r>:
 8023d6c:	b538      	push	{r3, r4, r5, lr}
 8023d6e:	4d07      	ldr	r5, [pc, #28]	; (8023d8c <_kill_r+0x20>)
 8023d70:	2300      	movs	r3, #0
 8023d72:	4604      	mov	r4, r0
 8023d74:	4608      	mov	r0, r1
 8023d76:	4611      	mov	r1, r2
 8023d78:	602b      	str	r3, [r5, #0]
 8023d7a:	f7f0 fe45 	bl	8014a08 <_kill>
 8023d7e:	1c43      	adds	r3, r0, #1
 8023d80:	d102      	bne.n	8023d88 <_kill_r+0x1c>
 8023d82:	682b      	ldr	r3, [r5, #0]
 8023d84:	b103      	cbz	r3, 8023d88 <_kill_r+0x1c>
 8023d86:	6023      	str	r3, [r4, #0]
 8023d88:	bd38      	pop	{r3, r4, r5, pc}
 8023d8a:	bf00      	nop
 8023d8c:	2001467c 	.word	0x2001467c

08023d90 <_getpid_r>:
 8023d90:	f7f0 be32 	b.w	80149f8 <_getpid>

08023d94 <_malloc_usable_size_r>:
 8023d94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8023d98:	1f18      	subs	r0, r3, #4
 8023d9a:	2b00      	cmp	r3, #0
 8023d9c:	bfbc      	itt	lt
 8023d9e:	580b      	ldrlt	r3, [r1, r0]
 8023da0:	18c0      	addlt	r0, r0, r3
 8023da2:	4770      	bx	lr

08023da4 <_init>:
 8023da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023da6:	bf00      	nop
 8023da8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023daa:	bc08      	pop	{r3}
 8023dac:	469e      	mov	lr, r3
 8023dae:	4770      	bx	lr

08023db0 <_fini>:
 8023db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023db2:	bf00      	nop
 8023db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8023db6:	bc08      	pop	{r3}
 8023db8:	469e      	mov	lr, r3
 8023dba:	4770      	bx	lr
