
EI_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00023630  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000054f0  08023830  08023830  00033830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08028d20  08028d20  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  08028d20  08028d20  00038d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08028d28  08028d28  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08028d28  08028d28  00038d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08028d2c  08028d2c  00038d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  08028d30  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08028ed4  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08028f74  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00013fbc  200002e4  08029014  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  200142a0  08029014  000442a0  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00037b9f  00000000  00000000  00040312  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000082f8  00000000  00000000  00077eb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002478  00000000  00000000  000801b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000021a8  00000000  00000000  00082628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043076  00000000  00000000  000847d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000473bb  00000000  00000000  000c7846  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0013c4a6  00000000  00000000  0010ec01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0024b0a7  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000a00c  00000000  00000000  0024b0f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200002e4 	.word	0x200002e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08023818 	.word	0x08023818

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200002e8 	.word	0x200002e8
 800023c:	08023818 	.word	0x08023818

08000240 <strcmp>:
 8000240:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000244:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000248:	2a01      	cmp	r2, #1
 800024a:	bf28      	it	cs
 800024c:	429a      	cmpcs	r2, r3
 800024e:	d0f7      	beq.n	8000240 <strcmp>
 8000250:	1ad0      	subs	r0, r2, r3
 8000252:	4770      	bx	lr

08000254 <strlen>:
 8000254:	4603      	mov	r3, r0
 8000256:	f813 2b01 	ldrb.w	r2, [r3], #1
 800025a:	2a00      	cmp	r2, #0
 800025c:	d1fb      	bne.n	8000256 <strlen+0x2>
 800025e:	1a18      	subs	r0, r3, r0
 8000260:	3801      	subs	r0, #1
 8000262:	4770      	bx	lr
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <__aeabi_uldivmod>:
 8000310:	b953      	cbnz	r3, 8000328 <__aeabi_uldivmod+0x18>
 8000312:	b94a      	cbnz	r2, 8000328 <__aeabi_uldivmod+0x18>
 8000314:	2900      	cmp	r1, #0
 8000316:	bf08      	it	eq
 8000318:	2800      	cmpeq	r0, #0
 800031a:	bf1c      	itt	ne
 800031c:	f04f 31ff 	movne.w	r1, #4294967295
 8000320:	f04f 30ff 	movne.w	r0, #4294967295
 8000324:	f000 b974 	b.w	8000610 <__aeabi_idiv0>
 8000328:	f1ad 0c08 	sub.w	ip, sp, #8
 800032c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000330:	f000 f806 	bl	8000340 <__udivmoddi4>
 8000334:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800033c:	b004      	add	sp, #16
 800033e:	4770      	bx	lr

08000340 <__udivmoddi4>:
 8000340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000344:	9d08      	ldr	r5, [sp, #32]
 8000346:	4604      	mov	r4, r0
 8000348:	468e      	mov	lr, r1
 800034a:	2b00      	cmp	r3, #0
 800034c:	d14d      	bne.n	80003ea <__udivmoddi4+0xaa>
 800034e:	428a      	cmp	r2, r1
 8000350:	4694      	mov	ip, r2
 8000352:	d969      	bls.n	8000428 <__udivmoddi4+0xe8>
 8000354:	fab2 f282 	clz	r2, r2
 8000358:	b152      	cbz	r2, 8000370 <__udivmoddi4+0x30>
 800035a:	fa01 f302 	lsl.w	r3, r1, r2
 800035e:	f1c2 0120 	rsb	r1, r2, #32
 8000362:	fa20 f101 	lsr.w	r1, r0, r1
 8000366:	fa0c fc02 	lsl.w	ip, ip, r2
 800036a:	ea41 0e03 	orr.w	lr, r1, r3
 800036e:	4094      	lsls	r4, r2
 8000370:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000374:	0c21      	lsrs	r1, r4, #16
 8000376:	fbbe f6f8 	udiv	r6, lr, r8
 800037a:	fa1f f78c 	uxth.w	r7, ip
 800037e:	fb08 e316 	mls	r3, r8, r6, lr
 8000382:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000386:	fb06 f107 	mul.w	r1, r6, r7
 800038a:	4299      	cmp	r1, r3
 800038c:	d90a      	bls.n	80003a4 <__udivmoddi4+0x64>
 800038e:	eb1c 0303 	adds.w	r3, ip, r3
 8000392:	f106 30ff 	add.w	r0, r6, #4294967295
 8000396:	f080 811f 	bcs.w	80005d8 <__udivmoddi4+0x298>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 811c 	bls.w	80005d8 <__udivmoddi4+0x298>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	4463      	add	r3, ip
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003ac:	fb08 3310 	mls	r3, r8, r0, r3
 80003b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80003b4:	fb00 f707 	mul.w	r7, r0, r7
 80003b8:	42a7      	cmp	r7, r4
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x92>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c4:	f080 810a 	bcs.w	80005dc <__udivmoddi4+0x29c>
 80003c8:	42a7      	cmp	r7, r4
 80003ca:	f240 8107 	bls.w	80005dc <__udivmoddi4+0x29c>
 80003ce:	4464      	add	r4, ip
 80003d0:	3802      	subs	r0, #2
 80003d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003d6:	1be4      	subs	r4, r4, r7
 80003d8:	2600      	movs	r6, #0
 80003da:	b11d      	cbz	r5, 80003e4 <__udivmoddi4+0xa4>
 80003dc:	40d4      	lsrs	r4, r2
 80003de:	2300      	movs	r3, #0
 80003e0:	e9c5 4300 	strd	r4, r3, [r5]
 80003e4:	4631      	mov	r1, r6
 80003e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d909      	bls.n	8000402 <__udivmoddi4+0xc2>
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	f000 80ef 	beq.w	80005d2 <__udivmoddi4+0x292>
 80003f4:	2600      	movs	r6, #0
 80003f6:	e9c5 0100 	strd	r0, r1, [r5]
 80003fa:	4630      	mov	r0, r6
 80003fc:	4631      	mov	r1, r6
 80003fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000402:	fab3 f683 	clz	r6, r3
 8000406:	2e00      	cmp	r6, #0
 8000408:	d14a      	bne.n	80004a0 <__udivmoddi4+0x160>
 800040a:	428b      	cmp	r3, r1
 800040c:	d302      	bcc.n	8000414 <__udivmoddi4+0xd4>
 800040e:	4282      	cmp	r2, r0
 8000410:	f200 80f9 	bhi.w	8000606 <__udivmoddi4+0x2c6>
 8000414:	1a84      	subs	r4, r0, r2
 8000416:	eb61 0303 	sbc.w	r3, r1, r3
 800041a:	2001      	movs	r0, #1
 800041c:	469e      	mov	lr, r3
 800041e:	2d00      	cmp	r5, #0
 8000420:	d0e0      	beq.n	80003e4 <__udivmoddi4+0xa4>
 8000422:	e9c5 4e00 	strd	r4, lr, [r5]
 8000426:	e7dd      	b.n	80003e4 <__udivmoddi4+0xa4>
 8000428:	b902      	cbnz	r2, 800042c <__udivmoddi4+0xec>
 800042a:	deff      	udf	#255	; 0xff
 800042c:	fab2 f282 	clz	r2, r2
 8000430:	2a00      	cmp	r2, #0
 8000432:	f040 8092 	bne.w	800055a <__udivmoddi4+0x21a>
 8000436:	eba1 010c 	sub.w	r1, r1, ip
 800043a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800043e:	fa1f fe8c 	uxth.w	lr, ip
 8000442:	2601      	movs	r6, #1
 8000444:	0c20      	lsrs	r0, r4, #16
 8000446:	fbb1 f3f7 	udiv	r3, r1, r7
 800044a:	fb07 1113 	mls	r1, r7, r3, r1
 800044e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000452:	fb0e f003 	mul.w	r0, lr, r3
 8000456:	4288      	cmp	r0, r1
 8000458:	d908      	bls.n	800046c <__udivmoddi4+0x12c>
 800045a:	eb1c 0101 	adds.w	r1, ip, r1
 800045e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x12a>
 8000464:	4288      	cmp	r0, r1
 8000466:	f200 80cb 	bhi.w	8000600 <__udivmoddi4+0x2c0>
 800046a:	4643      	mov	r3, r8
 800046c:	1a09      	subs	r1, r1, r0
 800046e:	b2a4      	uxth	r4, r4
 8000470:	fbb1 f0f7 	udiv	r0, r1, r7
 8000474:	fb07 1110 	mls	r1, r7, r0, r1
 8000478:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800047c:	fb0e fe00 	mul.w	lr, lr, r0
 8000480:	45a6      	cmp	lr, r4
 8000482:	d908      	bls.n	8000496 <__udivmoddi4+0x156>
 8000484:	eb1c 0404 	adds.w	r4, ip, r4
 8000488:	f100 31ff 	add.w	r1, r0, #4294967295
 800048c:	d202      	bcs.n	8000494 <__udivmoddi4+0x154>
 800048e:	45a6      	cmp	lr, r4
 8000490:	f200 80bb 	bhi.w	800060a <__udivmoddi4+0x2ca>
 8000494:	4608      	mov	r0, r1
 8000496:	eba4 040e 	sub.w	r4, r4, lr
 800049a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800049e:	e79c      	b.n	80003da <__udivmoddi4+0x9a>
 80004a0:	f1c6 0720 	rsb	r7, r6, #32
 80004a4:	40b3      	lsls	r3, r6
 80004a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80004aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80004ae:	fa20 f407 	lsr.w	r4, r0, r7
 80004b2:	fa01 f306 	lsl.w	r3, r1, r6
 80004b6:	431c      	orrs	r4, r3
 80004b8:	40f9      	lsrs	r1, r7
 80004ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004be:	fa00 f306 	lsl.w	r3, r0, r6
 80004c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004c6:	0c20      	lsrs	r0, r4, #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fb09 1118 	mls	r1, r9, r8, r1
 80004d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d4:	fb08 f00e 	mul.w	r0, r8, lr
 80004d8:	4288      	cmp	r0, r1
 80004da:	fa02 f206 	lsl.w	r2, r2, r6
 80004de:	d90b      	bls.n	80004f8 <__udivmoddi4+0x1b8>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004e8:	f080 8088 	bcs.w	80005fc <__udivmoddi4+0x2bc>
 80004ec:	4288      	cmp	r0, r1
 80004ee:	f240 8085 	bls.w	80005fc <__udivmoddi4+0x2bc>
 80004f2:	f1a8 0802 	sub.w	r8, r8, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1a09      	subs	r1, r1, r0
 80004fa:	b2a4      	uxth	r4, r4
 80004fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000500:	fb09 1110 	mls	r1, r9, r0, r1
 8000504:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000508:	fb00 fe0e 	mul.w	lr, r0, lr
 800050c:	458e      	cmp	lr, r1
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x1e2>
 8000510:	eb1c 0101 	adds.w	r1, ip, r1
 8000514:	f100 34ff 	add.w	r4, r0, #4294967295
 8000518:	d26c      	bcs.n	80005f4 <__udivmoddi4+0x2b4>
 800051a:	458e      	cmp	lr, r1
 800051c:	d96a      	bls.n	80005f4 <__udivmoddi4+0x2b4>
 800051e:	3802      	subs	r0, #2
 8000520:	4461      	add	r1, ip
 8000522:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000526:	fba0 9402 	umull	r9, r4, r0, r2
 800052a:	eba1 010e 	sub.w	r1, r1, lr
 800052e:	42a1      	cmp	r1, r4
 8000530:	46c8      	mov	r8, r9
 8000532:	46a6      	mov	lr, r4
 8000534:	d356      	bcc.n	80005e4 <__udivmoddi4+0x2a4>
 8000536:	d053      	beq.n	80005e0 <__udivmoddi4+0x2a0>
 8000538:	b15d      	cbz	r5, 8000552 <__udivmoddi4+0x212>
 800053a:	ebb3 0208 	subs.w	r2, r3, r8
 800053e:	eb61 010e 	sbc.w	r1, r1, lr
 8000542:	fa01 f707 	lsl.w	r7, r1, r7
 8000546:	fa22 f306 	lsr.w	r3, r2, r6
 800054a:	40f1      	lsrs	r1, r6
 800054c:	431f      	orrs	r7, r3
 800054e:	e9c5 7100 	strd	r7, r1, [r5]
 8000552:	2600      	movs	r6, #0
 8000554:	4631      	mov	r1, r6
 8000556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800055a:	f1c2 0320 	rsb	r3, r2, #32
 800055e:	40d8      	lsrs	r0, r3
 8000560:	fa0c fc02 	lsl.w	ip, ip, r2
 8000564:	fa21 f303 	lsr.w	r3, r1, r3
 8000568:	4091      	lsls	r1, r2
 800056a:	4301      	orrs	r1, r0
 800056c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000570:	fa1f fe8c 	uxth.w	lr, ip
 8000574:	fbb3 f0f7 	udiv	r0, r3, r7
 8000578:	fb07 3610 	mls	r6, r7, r0, r3
 800057c:	0c0b      	lsrs	r3, r1, #16
 800057e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000582:	fb00 f60e 	mul.w	r6, r0, lr
 8000586:	429e      	cmp	r6, r3
 8000588:	fa04 f402 	lsl.w	r4, r4, r2
 800058c:	d908      	bls.n	80005a0 <__udivmoddi4+0x260>
 800058e:	eb1c 0303 	adds.w	r3, ip, r3
 8000592:	f100 38ff 	add.w	r8, r0, #4294967295
 8000596:	d22f      	bcs.n	80005f8 <__udivmoddi4+0x2b8>
 8000598:	429e      	cmp	r6, r3
 800059a:	d92d      	bls.n	80005f8 <__udivmoddi4+0x2b8>
 800059c:	3802      	subs	r0, #2
 800059e:	4463      	add	r3, ip
 80005a0:	1b9b      	subs	r3, r3, r6
 80005a2:	b289      	uxth	r1, r1
 80005a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80005a8:	fb07 3316 	mls	r3, r7, r6, r3
 80005ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80005b0:	fb06 f30e 	mul.w	r3, r6, lr
 80005b4:	428b      	cmp	r3, r1
 80005b6:	d908      	bls.n	80005ca <__udivmoddi4+0x28a>
 80005b8:	eb1c 0101 	adds.w	r1, ip, r1
 80005bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80005c0:	d216      	bcs.n	80005f0 <__udivmoddi4+0x2b0>
 80005c2:	428b      	cmp	r3, r1
 80005c4:	d914      	bls.n	80005f0 <__udivmoddi4+0x2b0>
 80005c6:	3e02      	subs	r6, #2
 80005c8:	4461      	add	r1, ip
 80005ca:	1ac9      	subs	r1, r1, r3
 80005cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005d0:	e738      	b.n	8000444 <__udivmoddi4+0x104>
 80005d2:	462e      	mov	r6, r5
 80005d4:	4628      	mov	r0, r5
 80005d6:	e705      	b.n	80003e4 <__udivmoddi4+0xa4>
 80005d8:	4606      	mov	r6, r0
 80005da:	e6e3      	b.n	80003a4 <__udivmoddi4+0x64>
 80005dc:	4618      	mov	r0, r3
 80005de:	e6f8      	b.n	80003d2 <__udivmoddi4+0x92>
 80005e0:	454b      	cmp	r3, r9
 80005e2:	d2a9      	bcs.n	8000538 <__udivmoddi4+0x1f8>
 80005e4:	ebb9 0802 	subs.w	r8, r9, r2
 80005e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005ec:	3801      	subs	r0, #1
 80005ee:	e7a3      	b.n	8000538 <__udivmoddi4+0x1f8>
 80005f0:	4646      	mov	r6, r8
 80005f2:	e7ea      	b.n	80005ca <__udivmoddi4+0x28a>
 80005f4:	4620      	mov	r0, r4
 80005f6:	e794      	b.n	8000522 <__udivmoddi4+0x1e2>
 80005f8:	4640      	mov	r0, r8
 80005fa:	e7d1      	b.n	80005a0 <__udivmoddi4+0x260>
 80005fc:	46d0      	mov	r8, sl
 80005fe:	e77b      	b.n	80004f8 <__udivmoddi4+0x1b8>
 8000600:	3b02      	subs	r3, #2
 8000602:	4461      	add	r1, ip
 8000604:	e732      	b.n	800046c <__udivmoddi4+0x12c>
 8000606:	4630      	mov	r0, r6
 8000608:	e709      	b.n	800041e <__udivmoddi4+0xde>
 800060a:	4464      	add	r4, ip
 800060c:	3802      	subs	r0, #2
 800060e:	e742      	b.n	8000496 <__udivmoddi4+0x156>

08000610 <__aeabi_idiv0>:
 8000610:	4770      	bx	lr
 8000612:	bf00      	nop

08000614 <ExtractBits>:
******************************************************************************/

unsigned long ExtractBits(unsigned short int us_Start,
                            unsigned short int us_NoOfBits,
                            unsigned char *puc_Msg)
{
 8000614:	b480      	push	{r7}
 8000616:	b087      	sub	sp, #28
 8000618:	af00      	add	r7, sp, #0
 800061a:	4603      	mov	r3, r0
 800061c:	603a      	str	r2, [r7, #0]
 800061e:	80fb      	strh	r3, [r7, #6]
 8000620:	460b      	mov	r3, r1
 8000622:	80bb      	strh	r3, [r7, #4]
		0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
		0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                  /* Used for Masking */

    /* compute the offset of the farthest bit */
	us_BitPos = us_Start + us_NoOfBits;
 8000624:	88fa      	ldrh	r2, [r7, #6]
 8000626:	88bb      	ldrh	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	823b      	strh	r3, [r7, #16]

    if (us_BitPos <= EIGHT)
 800062c:	8a3b      	ldrh	r3, [r7, #16]
 800062e:	2b08      	cmp	r3, #8
 8000630:	d806      	bhi.n	8000640 <ExtractBits+0x2c>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000632:	88fb      	ldrh	r3, [r7, #6]
 8000634:	f1c3 0307 	rsb	r3, r3, #7
 8000638:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = ONE;
 800063a:	2301      	movs	r3, #1
 800063c:	827b      	strh	r3, [r7, #18]
 800063e:	e019      	b.n	8000674 <ExtractBits+0x60>
    }
    else if (us_BitPos <= SIXTEEN)
 8000640:	8a3b      	ldrh	r3, [r7, #16]
 8000642:	2b10      	cmp	r3, #16
 8000644:	d806      	bhi.n	8000654 <ExtractBits+0x40>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000646:	88fb      	ldrh	r3, [r7, #6]
 8000648:	f1c3 030f 	rsb	r3, r3, #15
 800064c:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = TWO;
 800064e:	2302      	movs	r3, #2
 8000650:	827b      	strh	r3, [r7, #18]
 8000652:	e00f      	b.n	8000674 <ExtractBits+0x60>
    }
		 else if (us_BitPos <= TWENTY_FOUR)
 8000654:	8a3b      	ldrh	r3, [r7, #16]
 8000656:	2b18      	cmp	r3, #24
 8000658:	d806      	bhi.n	8000668 <ExtractBits+0x54>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = TWENTY_THREE - us_Start;
 800065a:	88fb      	ldrh	r3, [r7, #6]
 800065c:	f1c3 0317 	rsb	r3, r3, #23
 8000660:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = THREE;
 8000662:	2303      	movs	r3, #3
 8000664:	827b      	strh	r3, [r7, #18]
 8000666:	e005      	b.n	8000674 <ExtractBits+0x60>
    }
    else
    {
	    /* Bits straddle 3 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000668:	88fb      	ldrh	r3, [r7, #6]
 800066a:	f1c3 031f 	rsb	r3, r3, #31
 800066e:	80fb      	strh	r3, [r7, #6]
	    us_NBytes = FOUR;
 8000670:	2304      	movs	r3, #4
 8000672:	827b      	strh	r3, [r7, #18]
    }
    ul_DataBits = ZERO;
 8000674:	2300      	movs	r3, #0
 8000676:	617b      	str	r3, [r7, #20]

    /* Read required no. of bytes */
    switch (us_NBytes)
 8000678:	8a7b      	ldrh	r3, [r7, #18]
 800067a:	3b01      	subs	r3, #1
 800067c:	2b03      	cmp	r3, #3
 800067e:	d834      	bhi.n	80006ea <ExtractBits+0xd6>
 8000680:	a201      	add	r2, pc, #4	; (adr r2, 8000688 <ExtractBits+0x74>)
 8000682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000686:	bf00      	nop
 8000688:	080006d5 	.word	0x080006d5
 800068c:	080006bf 	.word	0x080006bf
 8000690:	080006a9 	.word	0x080006a9
 8000694:	08000699 	.word	0x08000699
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	/* caution: Fall through */
 8000698:	683b      	ldr	r3, [r7, #0]
 800069a:	1c5a      	adds	r2, r3, #1
 800069c:	603a      	str	r2, [r7, #0]
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	461a      	mov	r2, r3
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	617b      	str	r3, [r7, #20]
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80006a8:	697b      	ldr	r3, [r7, #20]
 80006aa:	021b      	lsls	r3, r3, #8
 80006ac:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006ae:	683b      	ldr	r3, [r7, #0]
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	603a      	str	r2, [r7, #0]
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	461a      	mov	r2, r3
 80006b8:	697b      	ldr	r3, [r7, #20]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	617b      	str	r3, [r7, #20]
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	021b      	lsls	r3, r3, #8
 80006c2:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006c4:	683b      	ldr	r3, [r7, #0]
 80006c6:	1c5a      	adds	r2, r3, #1
 80006c8:	603a      	str	r2, [r7, #0]
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	461a      	mov	r2, r3
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	4313      	orrs	r3, r2
 80006d2:	617b      	str	r3, [r7, #20]
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80006d4:	697b      	ldr	r3, [r7, #20]
 80006d6:	021b      	lsls	r3, r3, #8
 80006d8:	617b      	str	r3, [r7, #20]
	        ul_DataBits |= *puc_Msg++;
 80006da:	683b      	ldr	r3, [r7, #0]
 80006dc:	1c5a      	adds	r2, r3, #1
 80006de:	603a      	str	r2, [r7, #0]
 80006e0:	781b      	ldrb	r3, [r3, #0]
 80006e2:	461a      	mov	r2, r3
 80006e4:	697b      	ldr	r3, [r7, #20]
 80006e6:	4313      	orrs	r3, r2
 80006e8:	617b      	str	r3, [r7, #20]
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 80006ea:	88fa      	ldrh	r2, [r7, #6]
 80006ec:	88bb      	ldrh	r3, [r7, #4]
 80006ee:	1ad3      	subs	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
 80006f2:	3301      	adds	r3, #1
 80006f4:	81fb      	strh	r3, [r7, #14]

    /* Get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 80006f6:	88bb      	ldrh	r3, [r7, #4]
 80006f8:	4a0b      	ldr	r2, [pc, #44]	; (8000728 <ExtractBits+0x114>)
 80006fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006fe:	60bb      	str	r3, [r7, #8]

    /* Shift the mask to required position and extract the bits */
    ul_DataBits = ((ul_BitMask << (us_ShiftCount)) & ul_DataBits);
 8000700:	89fb      	ldrh	r3, [r7, #14]
 8000702:	68ba      	ldr	r2, [r7, #8]
 8000704:	fa02 f303 	lsl.w	r3, r2, r3
 8000708:	697a      	ldr	r2, [r7, #20]
 800070a:	4013      	ands	r3, r2
 800070c:	617b      	str	r3, [r7, #20]

    /* Right adjust the extracted bits */
    ul_DataBits = (ul_DataBits >> (us_ShiftCount));
 800070e:	89fb      	ldrh	r3, [r7, #14]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	fa22 f303 	lsr.w	r3, r2, r3
 8000716:	617b      	str	r3, [r7, #20]

    return(ul_DataBits);
 8000718:	697b      	ldr	r3, [r7, #20]
}	/* End of CommExtractBits */
 800071a:	4618      	mov	r0, r3
 800071c:	371c      	adds	r7, #28
 800071e:	46bd      	mov	sp, r7
 8000720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000724:	4770      	bx	lr
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000

0800072c <InsertBits>:

unsigned long InsertBits(unsigned short int us_Start,
                        unsigned short int us_NoOfBits,
                        unsigned char *puc_Msg,
                        unsigned long ul_DataIn)
{
 800072c:	b480      	push	{r7}
 800072e:	b08b      	sub	sp, #44	; 0x2c
 8000730:	af00      	add	r7, sp, #0
 8000732:	60ba      	str	r2, [r7, #8]
 8000734:	607b      	str	r3, [r7, #4]
 8000736:	4603      	mov	r3, r0
 8000738:	81fb      	strh	r3, [r7, #14]
 800073a:	460b      	mov	r3, r1
 800073c:	81bb      	strh	r3, [r7, #12]
	    0x1FFFFFFL,0x3FFFFFFL,0x7FFFFFFL,0xFFFFFFFL,
	    0x1FFFFFFFL,0x3FFFFFFFL,0x7FFFFFFFL,0xFFFFFFFFL
    };                                   /* Used for Masking */

    /* Save current byte pointer */
	puc_Bit = puc_Msg;
 800073e:	68bb      	ldr	r3, [r7, #8]
 8000740:	61fb      	str	r3, [r7, #28]

    /* compute the offset of the farthest bit */
    us_BitPos = us_Start + us_NoOfBits;
 8000742:	89fa      	ldrh	r2, [r7, #14]
 8000744:	89bb      	ldrh	r3, [r7, #12]
 8000746:	4413      	add	r3, r2
 8000748:	837b      	strh	r3, [r7, #26]

    if (us_BitPos <= EIGHT)
 800074a:	8b7b      	ldrh	r3, [r7, #26]
 800074c:	2b08      	cmp	r3, #8
 800074e:	d806      	bhi.n	800075e <InsertBits+0x32>
    {
	    /* All bits are in the same byte */
	    us_Start = SEVEN - us_Start;
 8000750:	89fb      	ldrh	r3, [r7, #14]
 8000752:	f1c3 0307 	rsb	r3, r3, #7
 8000756:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = ONE;
 8000758:	2301      	movs	r3, #1
 800075a:	847b      	strh	r3, [r7, #34]	; 0x22
 800075c:	e019      	b.n	8000792 <InsertBits+0x66>
    }
    else if (us_BitPos <= SIXTEEN)
 800075e:	8b7b      	ldrh	r3, [r7, #26]
 8000760:	2b10      	cmp	r3, #16
 8000762:	d806      	bhi.n	8000772 <InsertBits+0x46>
    {
	    /* Bits straddle 2 bytes */
	    us_Start = FIFTEEN - us_Start;
 8000764:	89fb      	ldrh	r3, [r7, #14]
 8000766:	f1c3 030f 	rsb	r3, r3, #15
 800076a:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = TWO;
 800076c:	2302      	movs	r3, #2
 800076e:	847b      	strh	r3, [r7, #34]	; 0x22
 8000770:	e00f      	b.n	8000792 <InsertBits+0x66>
    }
		else if (us_BitPos <= TWENTY_FOUR)
 8000772:	8b7b      	ldrh	r3, [r7, #26]
 8000774:	2b18      	cmp	r3, #24
 8000776:	d806      	bhi.n	8000786 <InsertBits+0x5a>
		{
			us_Start = TWENTY_THREE - us_Start;
 8000778:	89fb      	ldrh	r3, [r7, #14]
 800077a:	f1c3 0317 	rsb	r3, r3, #23
 800077e:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = THREE;
 8000780:	2303      	movs	r3, #3
 8000782:	847b      	strh	r3, [r7, #34]	; 0x22
 8000784:	e005      	b.n	8000792 <InsertBits+0x66>
		}
    else
    {
	    /* Bits straddle 4 bytes */
	    us_Start = THIRTY_ONE - us_Start;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	f1c3 031f 	rsb	r3, r3, #31
 800078c:	81fb      	strh	r3, [r7, #14]
	    us_NBytes = FOUR;
 800078e:	2304      	movs	r3, #4
 8000790:	847b      	strh	r3, [r7, #34]	; 0x22
    }

    ul_DataBits = ZERO;
 8000792:	2300      	movs	r3, #0
 8000794:	627b      	str	r3, [r7, #36]	; 0x24

    /* Read current data */
    switch (us_NBytes)
 8000796:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000798:	3b01      	subs	r3, #1
 800079a:	2b03      	cmp	r3, #3
 800079c:	d831      	bhi.n	8000802 <InsertBits+0xd6>
 800079e:	a201      	add	r2, pc, #4	; (adr r2, 80007a4 <InsertBits+0x78>)
 80007a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007a4:	080007f1 	.word	0x080007f1
 80007a8:	080007db 	.word	0x080007db
 80007ac:	080007c5 	.word	0x080007c5
 80007b0:	080007b5 	.word	0x080007b5
    {
	    case FOUR:
	        ul_DataBits |= *puc_Msg++;	 /* Caution: Fall through */
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c0:	4313      	orrs	r3, r2
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
	    case THREE:
	        ul_DataBits <<= EIGHT;
 80007c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007c6:	021b      	lsls	r3, r3, #8
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	60ba      	str	r2, [r7, #8]
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	461a      	mov	r2, r3
 80007d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007d6:	4313      	orrs	r3, r2
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
	    case TWO:
	        ul_DataBits <<= EIGHT;
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	021b      	lsls	r3, r3, #8
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg++;
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	1c5a      	adds	r2, r3, #1
 80007e4:	60ba      	str	r2, [r7, #8]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	461a      	mov	r2, r3
 80007ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ec:	4313      	orrs	r3, r2
 80007ee:	627b      	str	r3, [r7, #36]	; 0x24
	    case ONE:
	        ul_DataBits <<= EIGHT;
 80007f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007f2:	021b      	lsls	r3, r3, #8
 80007f4:	627b      	str	r3, [r7, #36]	; 0x24
	        ul_DataBits |= *puc_Msg;
 80007f6:	68bb      	ldr	r3, [r7, #8]
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	461a      	mov	r2, r3
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	4313      	orrs	r3, r2
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
			default:
				   ;
    }

    /* Compute number of bit position to shift */
    us_ShiftCount = us_Start - us_NoOfBits + ONE;
 8000802:	89fa      	ldrh	r2, [r7, #14]
 8000804:	89bb      	ldrh	r3, [r7, #12]
 8000806:	1ad3      	subs	r3, r2, r3
 8000808:	b29b      	uxth	r3, r3
 800080a:	3301      	adds	r3, #1
 800080c:	833b      	strh	r3, [r7, #24]

    /* get bit mask which contains the 'us_NoOfBits' set to 1 */
    ul_BitMask = sul_AdMask[us_NoOfBits];
 800080e:	89bb      	ldrh	r3, [r7, #12]
 8000810:	4a23      	ldr	r2, [pc, #140]	; (80008a0 <InsertBits+0x174>)
 8000812:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000816:	617b      	str	r3, [r7, #20]

    /* Mask the unwanted bits */
    ul_DataIn &= ul_BitMask;
 8000818:	687a      	ldr	r2, [r7, #4]
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	4013      	ands	r3, r2
 800081e:	607b      	str	r3, [r7, #4]

    /* Shift the data bits to required position */
    ul_DataIn <<= us_ShiftCount;
 8000820:	8b3b      	ldrh	r3, [r7, #24]
 8000822:	687a      	ldr	r2, [r7, #4]
 8000824:	fa02 f303 	lsl.w	r3, r2, r3
 8000828:	607b      	str	r3, [r7, #4]

    /* Reset the existing bits to 0 as per the mask */
    ul_DataBits &= ~(ul_BitMask << us_ShiftCount);
 800082a:	8b3b      	ldrh	r3, [r7, #24]
 800082c:	697a      	ldr	r2, [r7, #20]
 800082e:	fa02 f303 	lsl.w	r3, r2, r3
 8000832:	43db      	mvns	r3, r3
 8000834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000836:	4013      	ands	r3, r2
 8000838:	627b      	str	r3, [r7, #36]	; 0x24

    /* Copy the bits */
    ul_DataBits |= ul_DataIn;
 800083a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	4313      	orrs	r3, r2
 8000840:	627b      	str	r3, [r7, #36]	; 0x24

    /* Update bytes */
    switch (us_NBytes)
 8000842:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000844:	3b01      	subs	r3, #1
 8000846:	2b03      	cmp	r3, #3
 8000848:	d823      	bhi.n	8000892 <InsertBits+0x166>
 800084a:	a201      	add	r2, pc, #4	; (adr r2, 8000850 <InsertBits+0x124>)
 800084c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000850:	0800088b 	.word	0x0800088b
 8000854:	0800087d 	.word	0x0800087d
 8000858:	0800086f 	.word	0x0800086f
 800085c:	08000861 	.word	0x08000861
    {
	    case FOUR:
	        *puc_Bit++ = (char)(ul_DataBits >> TWENTY_FOUR);	/* caution: Fall through */
 8000860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000862:	0e19      	lsrs	r1, r3, #24
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	1c5a      	adds	r2, r3, #1
 8000868:	61fa      	str	r2, [r7, #28]
 800086a:	b2ca      	uxtb	r2, r1
 800086c:	701a      	strb	r2, [r3, #0]
	    case THREE:
	        *puc_Bit++ = (char)(ul_DataBits >> SIXTEEN);
 800086e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000870:	0c19      	lsrs	r1, r3, #16
 8000872:	69fb      	ldr	r3, [r7, #28]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	61fa      	str	r2, [r7, #28]
 8000878:	b2ca      	uxtb	r2, r1
 800087a:	701a      	strb	r2, [r3, #0]
	    case TWO:
	        *puc_Bit++ = (char)(ul_DataBits >> EIGHT);
 800087c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800087e:	0a19      	lsrs	r1, r3, #8
 8000880:	69fb      	ldr	r3, [r7, #28]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	61fa      	str	r2, [r7, #28]
 8000886:	b2ca      	uxtb	r2, r1
 8000888:	701a      	strb	r2, [r3, #0]
	    case ONE:
	        *puc_Bit = (char)(ul_DataBits);
 800088a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800088c:	b2da      	uxtb	r2, r3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	701a      	strb	r2, [r3, #0]
			default:
				   ;
    }

    return ul_DataBits;
 8000892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}	/* End of CommInsertBits */
 8000894:	4618      	mov	r0, r3
 8000896:	372c      	adds	r7, #44	; 0x2c
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr
 80008a0:	20000084 	.word	0x20000084

080008a4 <Update_HitachiCommands>:
uint8_t Commands_List[20][50] = {{0,},};
uint8_t Commands_Count = 0;


void Update_HitachiCommands(void)
{
 80008a4:	b4b0      	push	{r4, r5, r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4a6e      	ldr	r2, [pc, #440]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008b2:	2132      	movs	r1, #50	; 0x32
 80008b4:	fb01 f303 	mul.w	r3, r1, r3
 80008b8:	4413      	add	r3, r2
 80008ba:	2224      	movs	r2, #36	; 0x24
 80008bc:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 80008be:	79fb      	ldrb	r3, [r7, #7]
 80008c0:	4a6a      	ldr	r2, [pc, #424]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008c2:	2132      	movs	r1, #50	; 0x32
 80008c4:	fb01 f303 	mul.w	r3, r1, r3
 80008c8:	4413      	add	r3, r2
 80008ca:	3301      	adds	r3, #1
 80008cc:	2201      	movs	r2, #1
 80008ce:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 80008d0:	79fb      	ldrb	r3, [r7, #7]
 80008d2:	4a66      	ldr	r2, [pc, #408]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008d4:	2132      	movs	r1, #50	; 0x32
 80008d6:	fb01 f303 	mul.w	r3, r1, r3
 80008da:	4413      	add	r3, r2
 80008dc:	3302      	adds	r3, #2
 80008de:	2230      	movs	r2, #48	; 0x30
 80008e0:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	4a61      	ldr	r2, [pc, #388]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008e6:	2132      	movs	r1, #50	; 0x32
 80008e8:	fb01 f303 	mul.w	r3, r1, r3
 80008ec:	4413      	add	r3, r2
 80008ee:	3303      	adds	r3, #3
 80008f0:	2240      	movs	r2, #64	; 0x40
 80008f2:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	4a5d      	ldr	r2, [pc, #372]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80008f8:	2132      	movs	r1, #50	; 0x32
 80008fa:	fb01 f303 	mul.w	r3, r1, r3
 80008fe:	4413      	add	r3, r2
 8000900:	3304      	adds	r3, #4
 8000902:	22c0      	movs	r2, #192	; 0xc0
 8000904:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	4a58      	ldr	r2, [pc, #352]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800090a:	2132      	movs	r1, #50	; 0x32
 800090c:	fb01 f303 	mul.w	r3, r1, r3
 8000910:	4413      	add	r3, r2
 8000912:	3305      	adds	r3, #5
 8000914:	224e      	movs	r2, #78	; 0x4e
 8000916:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	4a54      	ldr	r2, [pc, #336]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 800091c:	2132      	movs	r1, #50	; 0x32
 800091e:	fb01 f303 	mul.w	r3, r1, r3
 8000922:	4413      	add	r3, r2
 8000924:	3306      	adds	r3, #6
 8000926:	2226      	movs	r2, #38	; 0x26
 8000928:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800092a:	79fb      	ldrb	r3, [r7, #7]
 800092c:	3301      	adds	r3, #1
 800092e:	71fb      	strb	r3, [r7, #7]




	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 8000930:	79fb      	ldrb	r3, [r7, #7]
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	71fa      	strb	r2, [r7, #7]
 8000936:	461a      	mov	r2, r3
 8000938:	2332      	movs	r3, #50	; 0x32
 800093a:	fb02 f303 	mul.w	r3, r2, r3
 800093e:	4a4b      	ldr	r2, [pc, #300]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000940:	4413      	add	r3, r2
 8000942:	494b      	ldr	r1, [pc, #300]	; (8000a70 <Update_HitachiCommands+0x1cc>)
 8000944:	461a      	mov	r2, r3
 8000946:	460b      	mov	r3, r1
 8000948:	cb03      	ldmia	r3!, {r0, r1}
 800094a:	6010      	str	r0, [r2, #0]
 800094c:	6051      	str	r1, [r2, #4]
 800094e:	8819      	ldrh	r1, [r3, #0]
 8000950:	789b      	ldrb	r3, [r3, #2]
 8000952:	8111      	strh	r1, [r2, #8]
 8000954:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_ADDRESS");
 8000956:	79fb      	ldrb	r3, [r7, #7]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	71fa      	strb	r2, [r7, #7]
 800095c:	461a      	mov	r2, r3
 800095e:	2332      	movs	r3, #50	; 0x32
 8000960:	fb02 f303 	mul.w	r3, r2, r3
 8000964:	4a41      	ldr	r2, [pc, #260]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000966:	4413      	add	r3, r2
 8000968:	4a42      	ldr	r2, [pc, #264]	; (8000a74 <Update_HitachiCommands+0x1d0>)
 800096a:	461c      	mov	r4, r3
 800096c:	4615      	mov	r5, r2
 800096e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000970:	6020      	str	r0, [r4, #0]
 8000972:	6061      	str	r1, [r4, #4]
 8000974:	60a2      	str	r2, [r4, #8]
 8000976:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_BOOLEAN");
 8000978:	79fb      	ldrb	r3, [r7, #7]
 800097a:	1c5a      	adds	r2, r3, #1
 800097c:	71fa      	strb	r2, [r7, #7]
 800097e:	461a      	mov	r2, r3
 8000980:	2332      	movs	r3, #50	; 0x32
 8000982:	fb02 f303 	mul.w	r3, r2, r3
 8000986:	4a39      	ldr	r2, [pc, #228]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000988:	4413      	add	r3, r2
 800098a:	4a3b      	ldr	r2, [pc, #236]	; (8000a78 <Update_HitachiCommands+0x1d4>)
 800098c:	461c      	mov	r4, r3
 800098e:	4615      	mov	r5, r2
 8000990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000992:	6020      	str	r0, [r4, #0]
 8000994:	6061      	str	r1, [r4, #4]
 8000996:	60a2      	str	r2, [r4, #8]
 8000998:	60e3      	str	r3, [r4, #12]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"STALE_DATA_TIMEOUT");
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	1c5a      	adds	r2, r3, #1
 800099e:	71fa      	strb	r2, [r7, #7]
 80009a0:	461a      	mov	r2, r3
 80009a2:	2332      	movs	r3, #50	; 0x32
 80009a4:	fb02 f303 	mul.w	r3, r2, r3
 80009a8:	4a30      	ldr	r2, [pc, #192]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	4a33      	ldr	r2, [pc, #204]	; (8000a7c <Update_HitachiCommands+0x1d8>)
 80009ae:	461d      	mov	r5, r3
 80009b0:	4614      	mov	r4, r2
 80009b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009b4:	6028      	str	r0, [r5, #0]
 80009b6:	6069      	str	r1, [r5, #4]
 80009b8:	60aa      	str	r2, [r5, #8]
 80009ba:	60eb      	str	r3, [r5, #12]
 80009bc:	8823      	ldrh	r3, [r4, #0]
 80009be:	78a2      	ldrb	r2, [r4, #2]
 80009c0:	822b      	strh	r3, [r5, #16]
 80009c2:	4613      	mov	r3, r2
 80009c4:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"RX_VITAL_INIT_FAIL");
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	1c5a      	adds	r2, r3, #1
 80009ca:	71fa      	strb	r2, [r7, #7]
 80009cc:	461a      	mov	r2, r3
 80009ce:	2332      	movs	r3, #50	; 0x32
 80009d0:	fb02 f303 	mul.w	r3, r2, r3
 80009d4:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4a29      	ldr	r2, [pc, #164]	; (8000a80 <Update_HitachiCommands+0x1dc>)
 80009da:	461d      	mov	r5, r3
 80009dc:	4614      	mov	r4, r2
 80009de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009e0:	6028      	str	r0, [r5, #0]
 80009e2:	6069      	str	r1, [r5, #4]
 80009e4:	60aa      	str	r2, [r5, #8]
 80009e6:	60eb      	str	r3, [r5, #12]
 80009e8:	8823      	ldrh	r3, [r4, #0]
 80009ea:	78a2      	ldrb	r2, [r4, #2]
 80009ec:	822b      	strh	r3, [r5, #16]
 80009ee:	4613      	mov	r3, r2
 80009f0:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"TX_VITAL_INIT_FAIL");
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	1c5a      	adds	r2, r3, #1
 80009f6:	71fa      	strb	r2, [r7, #7]
 80009f8:	461a      	mov	r2, r3
 80009fa:	2332      	movs	r3, #50	; 0x32
 80009fc:	fb02 f303 	mul.w	r3, r2, r3
 8000a00:	4a1a      	ldr	r2, [pc, #104]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a02:	4413      	add	r3, r2
 8000a04:	4a1f      	ldr	r2, [pc, #124]	; (8000a84 <Update_HitachiCommands+0x1e0>)
 8000a06:	461d      	mov	r5, r3
 8000a08:	4614      	mov	r4, r2
 8000a0a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a0c:	6028      	str	r0, [r5, #0]
 8000a0e:	6069      	str	r1, [r5, #4]
 8000a10:	60aa      	str	r2, [r5, #8]
 8000a12:	60eb      	str	r3, [r5, #12]
 8000a14:	8823      	ldrh	r3, [r4, #0]
 8000a16:	78a2      	ldrb	r2, [r4, #2]
 8000a18:	822b      	strh	r3, [r5, #16]
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 8000a1e:	79fb      	ldrb	r3, [r7, #7]
 8000a20:	1c5a      	adds	r2, r3, #1
 8000a22:	71fa      	strb	r2, [r7, #7]
 8000a24:	461a      	mov	r2, r3
 8000a26:	2332      	movs	r3, #50	; 0x32
 8000a28:	fb02 f303 	mul.w	r3, r2, r3
 8000a2c:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a2e:	4413      	add	r3, r2
 8000a30:	4915      	ldr	r1, [pc, #84]	; (8000a88 <Update_HitachiCommands+0x1e4>)
 8000a32:	461a      	mov	r2, r3
 8000a34:	460b      	mov	r3, r1
 8000a36:	cb03      	ldmia	r3!, {r0, r1}
 8000a38:	6010      	str	r0, [r2, #0]
 8000a3a:	6051      	str	r1, [r2, #4]
 8000a3c:	881b      	ldrh	r3, [r3, #0]
 8000a3e:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	1c5a      	adds	r2, r3, #1
 8000a44:	71fa      	strb	r2, [r7, #7]
 8000a46:	461a      	mov	r2, r3
 8000a48:	2332      	movs	r3, #50	; 0x32
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <Update_HitachiCommands+0x1c8>)
 8000a50:	4413      	add	r3, r2
 8000a52:	4a0e      	ldr	r2, [pc, #56]	; (8000a8c <Update_HitachiCommands+0x1e8>)
 8000a54:	6810      	ldr	r0, [r2, #0]
 8000a56:	6018      	str	r0, [r3, #0]
 8000a58:	7912      	ldrb	r2, [r2, #4]
 8000a5a:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 8000a5c:	4a0c      	ldr	r2, [pc, #48]	; (8000a90 <Update_HitachiCommands+0x1ec>)
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bcb0      	pop	{r4, r5, r7}
 8000a6a:	4770      	bx	lr
 8000a6c:	20000a50 	.word	0x20000a50
 8000a70:	08023830 	.word	0x08023830
 8000a74:	0802383c 	.word	0x0802383c
 8000a78:	0802384c 	.word	0x0802384c
 8000a7c:	0802385c 	.word	0x0802385c
 8000a80:	08023870 	.word	0x08023870
 8000a84:	08023884 	.word	0x08023884
 8000a88:	08023898 	.word	0x08023898
 8000a8c:	080238a4 	.word	0x080238a4
 8000a90:	20000e38 	.word	0x20000e38

08000a94 <__io_putchar>:




PUTCHAR_PROTOTYPE
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8000a9c:	1d39      	adds	r1, r7, #4
 8000a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	4807      	ldr	r0, [pc, #28]	; (8000ac4 <__io_putchar+0x30>)
 8000aa6:	f01a f9bf 	bl	801ae28 <HAL_UART_Transmit>
	//HAL_UART_Transmit(&DLL_COM, (uint8_t*) &ch, 1, 0xFFFF);
	setvbuf(stdout, NULL, _IONBF, 0); //For printing even without Newline
 8000aaa:	4b07      	ldr	r3, [pc, #28]	; (8000ac8 <__io_putchar+0x34>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	6898      	ldr	r0, [r3, #8]
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	f021 fceb 	bl	8022490 <setvbuf>
	return ch;
 8000aba:	687b      	ldr	r3, [r7, #4]
}
 8000abc:	4618      	mov	r0, r3
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	2000bc40 	.word	0x2000bc40
 8000ac8:	20000140 	.word	0x20000140

08000acc <Get_Slot>:



void Get_Slot(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	uint8_t Local_SlotID = 0;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
	uint8_t *ptr = (uint8_t *)&Slot;
 8000ad6:	4b1d      	ldr	r3, [pc, #116]	; (8000b4c <Get_Slot+0x80>)
 8000ad8:	603b      	str	r3, [r7, #0]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP3_GPIO_Port, IP3_Pin)) << 0;
 8000ada:	2108      	movs	r1, #8
 8000adc:	481c      	ldr	r0, [pc, #112]	; (8000b50 <Get_Slot+0x84>)
 8000ade:	f017 f893 	bl	8017c08 <HAL_GPIO_ReadPin>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	bf0c      	ite	eq
 8000ae8:	2301      	moveq	r3, #1
 8000aea:	2300      	movne	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	b25a      	sxtb	r2, r3
 8000af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af4:	4313      	orrs	r3, r2
 8000af6:	b25b      	sxtb	r3, r3
 8000af8:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP4_GPIO_Port, IP4_Pin)) << 1;
 8000afa:	2110      	movs	r1, #16
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <Get_Slot+0x84>)
 8000afe:	f017 f883 	bl	8017c08 <HAL_GPIO_ReadPin>
 8000b02:	4603      	mov	r3, r0
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d101      	bne.n	8000b0c <Get_Slot+0x40>
 8000b08:	2302      	movs	r3, #2
 8000b0a:	e000      	b.n	8000b0e <Get_Slot+0x42>
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	b25a      	sxtb	r2, r3
 8000b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b14:	4313      	orrs	r3, r2
 8000b16:	b25b      	sxtb	r3, r3
 8000b18:	71fb      	strb	r3, [r7, #7]
	Local_SlotID |= (!HAL_GPIO_ReadPin(IP5_GPIO_Port, IP5_Pin)) << 2;
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <Get_Slot+0x88>)
 8000b20:	f017 f872 	bl	8017c08 <HAL_GPIO_ReadPin>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d101      	bne.n	8000b2e <Get_Slot+0x62>
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	e000      	b.n	8000b30 <Get_Slot+0x64>
 8000b2e:	2300      	movs	r3, #0
 8000b30:	b25a      	sxtb	r2, r3
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b25b      	sxtb	r3, r3
 8000b3a:	71fb      	strb	r3, [r7, #7]

	*ptr = Local_SlotID;
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	79fa      	ldrb	r2, [r7, #7]
 8000b40:	701a      	strb	r2, [r3, #0]

}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000a48 	.word	0x20000a48
 8000b50:	40022800 	.word	0x40022800
 8000b54:	40022000 	.word	0x40022000

08000b58 <Check_for_cmd>:




void Check_for_cmd(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b09a      	sub	sp, #104	; 0x68
 8000b5c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
 8000b74:	1d3b      	adds	r3, r7, #4
 8000b76:	2260      	movs	r2, #96	; 0x60
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f021 faae 	bl	80220dc <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 8000b80:	4bc0      	ldr	r3, [pc, #768]	; (8000e84 <Check_for_cmd+0x32c>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4618      	mov	r0, r3
 8000b86:	f00d fe3b 	bl	800e800 <HAL_Elaps_Ticks>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b09      	cmp	r3, #9
 8000b8e:	f240 8175 	bls.w	8000e7c <Check_for_cmd+0x324>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 8000b92:	e010      	b.n	8000bb6 <Check_for_cmd+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 8000b94:	2000      	movs	r0, #0
 8000b96:	f014 f857 	bl	8014c48 <Com_Get_Byte>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 8000ba0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 8000baa:	3368      	adds	r3, #104	; 0x68
 8000bac:	443b      	add	r3, r7
 8000bae:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 8000bb2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f014 f806 	bl	8014bc8 <Com_DataReady>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d1e8      	bne.n	8000b94 <Check_for_cmd+0x3c>
		}
		if(Index>0)
 8000bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	f000 814e 	beq.w	8000e68 <Check_for_cmd+0x310>
		{
			Buffer[Index] = 0;
 8000bcc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000bd0:	3368      	adds	r3, #104	; 0x68
 8000bd2:	443b      	add	r3, r7
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 8000bda:	463b      	mov	r3, r7
 8000bdc:	4619      	mov	r1, r3
 8000bde:	48aa      	ldr	r0, [pc, #680]	; (8000e88 <Check_for_cmd+0x330>)
 8000be0:	f021 fb64 	bl	80222ac <iprintf>
			switch(Is_Command_Valid(Buffer,Index))
 8000be4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 8000be8:	463b      	mov	r3, r7
 8000bea:	4611      	mov	r1, r2
 8000bec:	4618      	mov	r0, r3
 8000bee:	f000 f979 	bl	8000ee4 <Is_Command_Valid>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b09      	cmp	r3, #9
 8000bf6:	f200 8133 	bhi.w	8000e60 <Check_for_cmd+0x308>
 8000bfa:	a201      	add	r2, pc, #4	; (adr r2, 8000c00 <Check_for_cmd+0xa8>)
 8000bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c00:	08000c29 	.word	0x08000c29
 8000c04:	08000c37 	.word	0x08000c37
 8000c08:	08000c9b 	.word	0x08000c9b
 8000c0c:	08000cf1 	.word	0x08000cf1
 8000c10:	08000d4d 	.word	0x08000d4d
 8000c14:	08000d97 	.word	0x08000d97
 8000c18:	08000ddb 	.word	0x08000ddb
 8000c1c:	08000e1f 	.word	0x08000e1f
 8000c20:	08000e3b 	.word	0x08000e3b
 8000c24:	08000e45 	.word	0x08000e45
			{
			case ZERO:
				Dats_Request_Flag = 1;
 8000c28:	4b98      	ldr	r3, [pc, #608]	; (8000e8c <Check_for_cmd+0x334>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8000c2e:	4898      	ldr	r0, [pc, #608]	; (8000e90 <Check_for_cmd+0x338>)
 8000c30:	f021 fbd8 	bl	80223e4 <puts>
				break;
 8000c34:	e119      	b.n	8000e6a <Check_for_cmd+0x312>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 8000c36:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	3368      	adds	r3, #104	; 0x68
 8000c3e:	443b      	add	r3, r7
 8000c40:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c44:	3b30      	subs	r3, #48	; 0x30
 8000c46:	461a      	mov	r2, r3
 8000c48:	4992      	ldr	r1, [pc, #584]	; (8000e94 <Check_for_cmd+0x33c>)
 8000c4a:	4893      	ldr	r0, [pc, #588]	; (8000e98 <Check_for_cmd+0x340>)
 8000c4c:	f021 fb2e 	bl	80222ac <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 2)
 8000c50:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c54:	3b01      	subs	r3, #1
 8000c56:	3368      	adds	r3, #104	; 0x68
 8000c58:	443b      	add	r3, r7
 8000c5a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c5e:	2b2f      	cmp	r3, #47	; 0x2f
 8000c60:	d914      	bls.n	8000c8c <Check_for_cmd+0x134>
 8000c62:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c66:	3b01      	subs	r3, #1
 8000c68:	3368      	adds	r3, #104	; 0x68
 8000c6a:	443b      	add	r3, r7
 8000c6c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c70:	2b31      	cmp	r3, #49	; 0x31
 8000c72:	d80b      	bhi.n	8000c8c <Check_for_cmd+0x134>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 8000c74:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	3368      	adds	r3, #104	; 0x68
 8000c7c:	443b      	add	r3, r7
 8000c7e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000c82:	3b30      	subs	r3, #48	; 0x30
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	4b85      	ldr	r3, [pc, #532]	; (8000e9c <Check_for_cmd+0x344>)
 8000c88:	701a      	strb	r2, [r3, #0]
 8000c8a:	e002      	b.n	8000c92 <Check_for_cmd+0x13a>
				}
				else
				{
					printf("Please Send Valid Command\n");
 8000c8c:	4884      	ldr	r0, [pc, #528]	; (8000ea0 <Check_for_cmd+0x348>)
 8000c8e:	f021 fba9 	bl	80223e4 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 8000c92:	2301      	movs	r3, #1
 8000c94:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000c98:	e0e7      	b.n	8000e6a <Check_for_cmd+0x312>

			case TWO:
				printf("Received %s for Peer:%u\n",Commands_List[TWO],(Buffer[Index-1])-'0'); /* Invalid Address*/
 8000c9a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000c9e:	3b01      	subs	r3, #1
 8000ca0:	3368      	adds	r3, #104	; 0x68
 8000ca2:	443b      	add	r3, r7
 8000ca4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000ca8:	3b30      	subs	r3, #48	; 0x30
 8000caa:	461a      	mov	r2, r3
 8000cac:	497d      	ldr	r1, [pc, #500]	; (8000ea4 <Check_for_cmd+0x34c>)
 8000cae:	487e      	ldr	r0, [pc, #504]	; (8000ea8 <Check_for_cmd+0x350>)
 8000cb0:	f021 fafc 	bl	80222ac <iprintf>
				printf("Invalid Addess\n");
 8000cb4:	487d      	ldr	r0, [pc, #500]	; (8000eac <Check_for_cmd+0x354>)
 8000cb6:	f021 fb95 	bl	80223e4 <puts>
				SET_BIT_USER(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f043 0310 	orr.w	r3, r3, #16
 8000cc2:	4a7b      	ldr	r2, [pc, #492]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cc4:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000cc6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	3368      	adds	r3, #104	; 0x68
 8000cce:	443b      	add	r3, r7
 8000cd0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cd4:	3b30      	subs	r3, #48	; 0x30
 8000cd6:	b2da      	uxtb	r2, r3
 8000cd8:	4b75      	ldr	r3, [pc, #468]	; (8000eb0 <Check_for_cmd+0x358>)
 8000cda:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000cdc:	2301      	movs	r3, #1
 8000cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000ce2:	4b73      	ldr	r3, [pc, #460]	; (8000eb0 <Check_for_cmd+0x358>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4872      	ldr	r0, [pc, #456]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000cea:	f021 fadf 	bl	80222ac <iprintf>
				break;
 8000cee:	e0bc      	b.n	8000e6a <Check_for_cmd+0x312>

			case THREE:
				/* Invalid Boolean Inputs, To do this case 1st we Have to break the Communication of the Peer
				 * By Either Not reply to peer up to stale Data Time (or) By Rejecting Packets of the Up to stale data time out.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[THREE],(Buffer[Index-1])-'0');
 8000cf0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	3368      	adds	r3, #104	; 0x68
 8000cf8:	443b      	add	r3, r7
 8000cfa:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000cfe:	3b30      	subs	r3, #48	; 0x30
 8000d00:	461a      	mov	r2, r3
 8000d02:	496d      	ldr	r1, [pc, #436]	; (8000eb8 <Check_for_cmd+0x360>)
 8000d04:	4868      	ldr	r0, [pc, #416]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d06:	f021 fad1 	bl	80222ac <iprintf>
				printf("Invalid Boolean\n");
 8000d0a:	486c      	ldr	r0, [pc, #432]	; (8000ebc <Check_for_cmd+0x364>)
 8000d0c:	f021 fb6a 	bl	80223e4 <puts>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000d10:	4b67      	ldr	r3, [pc, #412]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d16:	4b66      	ldr	r3, [pc, #408]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	f043 0320 	orr.w	r3, r3, #32
 8000d1e:	4a64      	ldr	r2, [pc, #400]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d20:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX =  ((Buffer[Index-1])-'0');
 8000d22:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d26:	3b01      	subs	r3, #1
 8000d28:	3368      	adds	r3, #104	; 0x68
 8000d2a:	443b      	add	r3, r7
 8000d2c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d30:	3b30      	subs	r3, #48	; 0x30
 8000d32:	b2da      	uxtb	r2, r3
 8000d34:	4b5e      	ldr	r3, [pc, #376]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d36:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				printf("\nFAULT BITS:%08lx\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d3e:	4b5c      	ldr	r3, [pc, #368]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	4619      	mov	r1, r3
 8000d44:	485b      	ldr	r0, [pc, #364]	; (8000eb4 <Check_for_cmd+0x35c>)
 8000d46:	f021 fab1 	bl	80222ac <iprintf>
				break;
 8000d4a:	e08e      	b.n	8000e6a <Check_for_cmd+0x312>

			case FOUR:
				printf("Received %s for Peer:%u\n",Commands_List[FOUR],(Buffer[Index-1])-'0'); /* STALE Data Timeout by Not Replying to the Peer */
 8000d4c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d50:	3b01      	subs	r3, #1
 8000d52:	3368      	adds	r3, #104	; 0x68
 8000d54:	443b      	add	r3, r7
 8000d56:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d5a:	3b30      	subs	r3, #48	; 0x30
 8000d5c:	461a      	mov	r2, r3
 8000d5e:	4958      	ldr	r1, [pc, #352]	; (8000ec0 <Check_for_cmd+0x368>)
 8000d60:	4851      	ldr	r0, [pc, #324]	; (8000ea8 <Check_for_cmd+0x350>)
 8000d62:	f021 faa3 	bl	80222ac <iprintf>
				printf("Making Ethernet TX Disable\n");
 8000d66:	4857      	ldr	r0, [pc, #348]	; (8000ec4 <Check_for_cmd+0x36c>)
 8000d68:	f021 fb3c 	bl	80223e4 <puts>
				SET_BIT_USER(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000d6c:	4b50      	ldr	r3, [pc, #320]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d74:	4a4e      	ldr	r2, [pc, #312]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d76:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000d78:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d7c:	3b01      	subs	r3, #1
 8000d7e:	3368      	adds	r3, #104	; 0x68
 8000d80:	443b      	add	r3, r7
 8000d82:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000d86:	3b30      	subs	r3, #48	; 0x30
 8000d88:	b2da      	uxtb	r2, r3
 8000d8a:	4b49      	ldr	r3, [pc, #292]	; (8000eb0 <Check_for_cmd+0x358>)
 8000d8c:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000d94:	e069      	b.n	8000e6a <Check_for_cmd+0x312>

			case FIVE:
				/* Vital Init Value Received from MICROLOK will be Modified */
				printf("Received %s for Peer:%u\n",Commands_List[FIVE],(Buffer[Index-1])-'0');
 8000d96:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	3368      	adds	r3, #104	; 0x68
 8000d9e:	443b      	add	r3, r7
 8000da0:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000da4:	3b30      	subs	r3, #48	; 0x30
 8000da6:	461a      	mov	r2, r3
 8000da8:	4947      	ldr	r1, [pc, #284]	; (8000ec8 <Check_for_cmd+0x370>)
 8000daa:	483f      	ldr	r0, [pc, #252]	; (8000ea8 <Check_for_cmd+0x350>)
 8000dac:	f021 fa7e 	bl	80222ac <iprintf>
				SET_BIT_USER(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000db0:	4b3f      	ldr	r3, [pc, #252]	; (8000eb0 <Check_for_cmd+0x358>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f043 0301 	orr.w	r3, r3, #1
 8000db8:	4a3d      	ldr	r2, [pc, #244]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dba:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000dbc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	3368      	adds	r3, #104	; 0x68
 8000dc4:	443b      	add	r3, r7
 8000dc6:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000dca:	3b30      	subs	r3, #48	; 0x30
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	4b38      	ldr	r3, [pc, #224]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dd0:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000dd8:	e047      	b.n	8000e6a <Check_for_cmd+0x312>
			case SIX:
				/* Vital Init Value Sent by EIPC to MICROLOK
				 * is going to be Random value which will be prepend to the Message and CRC calculated and sent to MICROLOK
				 * This will make the CRC to Fail at MICROLOK end.
				 */
				printf("Received %s for Peer:%u\n",Commands_List[SIX],(Buffer[Index-1])-'0');
 8000dda:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000dde:	3b01      	subs	r3, #1
 8000de0:	3368      	adds	r3, #104	; 0x68
 8000de2:	443b      	add	r3, r7
 8000de4:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000de8:	3b30      	subs	r3, #48	; 0x30
 8000dea:	461a      	mov	r2, r3
 8000dec:	4937      	ldr	r1, [pc, #220]	; (8000ecc <Check_for_cmd+0x374>)
 8000dee:	482e      	ldr	r0, [pc, #184]	; (8000ea8 <Check_for_cmd+0x350>)
 8000df0:	f021 fa5c 	bl	80222ac <iprintf>
				SET_BIT_USER(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
 8000df4:	4b2e      	ldr	r3, [pc, #184]	; (8000eb0 <Check_for_cmd+0x358>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f043 0302 	orr.w	r3, r3, #2
 8000dfc:	4a2c      	ldr	r2, [pc, #176]	; (8000eb0 <Check_for_cmd+0x358>)
 8000dfe:	6013      	str	r3, [r2, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= ((Buffer[Index-1])-'0');
 8000e00:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e04:	3b01      	subs	r3, #1
 8000e06:	3368      	adds	r3, #104	; 0x68
 8000e08:	443b      	add	r3, r7
 8000e0a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e0e:	3b30      	subs	r3, #48	; 0x30
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e14:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e16:	2301      	movs	r3, #1
 8000e18:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 8000e1c:	e025      	b.n	8000e6a <Check_for_cmd+0x312>
			case SEVEN:
				/* CLEAR ALL */
				printf("Received %s\n",Commands_List[SEVEN]);
 8000e1e:	492c      	ldr	r1, [pc, #176]	; (8000ed0 <Check_for_cmd+0x378>)
 8000e20:	482c      	ldr	r0, [pc, #176]	; (8000ed4 <Check_for_cmd+0x37c>)
 8000e22:	f021 fa43 	bl	80222ac <iprintf>
				Hitachi_fault_injection_st.FAULT_INJECTION_BITS = 0;
 8000e26:	4b22      	ldr	r3, [pc, #136]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	601a      	str	r2, [r3, #0]
				Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX= 0XFF;
 8000e2c:	4b20      	ldr	r3, [pc, #128]	; (8000eb0 <Check_for_cmd+0x358>)
 8000e2e:	22ff      	movs	r2, #255	; 0xff
 8000e30:	711a      	strb	r2, [r3, #4]
				IS_COMMAND_RECEIVED = YES;
 8000e32:	2301      	movs	r3, #1
 8000e34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

				break;
 8000e38:	e017      	b.n	8000e6a <Check_for_cmd+0x312>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 8000e3a:	4927      	ldr	r1, [pc, #156]	; (8000ed8 <Check_for_cmd+0x380>)
 8000e3c:	4827      	ldr	r0, [pc, #156]	; (8000edc <Check_for_cmd+0x384>)
 8000e3e:	f021 fa35 	bl	80222ac <iprintf>
				break;
 8000e42:	e012      	b.n	8000e6a <Check_for_cmd+0x312>
			case NINE:
				printf("Received %s for Peer:%u\n",Commands_List[NINE],(Buffer[Index-1])-'0');
 8000e44:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8000e48:	3b01      	subs	r3, #1
 8000e4a:	3368      	adds	r3, #104	; 0x68
 8000e4c:	443b      	add	r3, r7
 8000e4e:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 8000e52:	3b30      	subs	r3, #48	; 0x30
 8000e54:	461a      	mov	r2, r3
 8000e56:	4922      	ldr	r1, [pc, #136]	; (8000ee0 <Check_for_cmd+0x388>)
 8000e58:	4813      	ldr	r0, [pc, #76]	; (8000ea8 <Check_for_cmd+0x350>)
 8000e5a:	f021 fa27 	bl	80222ac <iprintf>
				break;
 8000e5e:	e004      	b.n	8000e6a <Check_for_cmd+0x312>

			default:
				printf("Please Send Valid Command\n");
 8000e60:	480f      	ldr	r0, [pc, #60]	; (8000ea0 <Check_for_cmd+0x348>)
 8000e62:	f021 fabf 	bl	80223e4 <puts>
 8000e66:	e000      	b.n	8000e6a <Check_for_cmd+0x312>
			}
		}
 8000e68:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 8000e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000e6e:	2b01      	cmp	r3, #1
 8000e70:	d105      	bne.n	8000e7e <Check_for_cmd+0x326>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 8000e72:	f240 2005 	movw	r0, #517	; 0x205
 8000e76:	f00e fa39 	bl	800f2ec <TransmitCanPkt>
 8000e7a:	e000      	b.n	8000e7e <Check_for_cmd+0x326>
		return;
 8000e7c:	bf00      	nop
	{
		TransmitCanPkt(CAN_FAULT_INJECTION);
	}

#endif
}
 8000e7e:	3768      	adds	r7, #104	; 0x68
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	2000a000 	.word	0x2000a000
 8000e88:	080238ac 	.word	0x080238ac
 8000e8c:	20000644 	.word	0x20000644
 8000e90:	080238c4 	.word	0x080238c4
 8000e94:	20000a82 	.word	0x20000a82
 8000e98:	08023904 	.word	0x08023904
 8000e9c:	20000645 	.word	0x20000645
 8000ea0:	08023918 	.word	0x08023918
 8000ea4:	20000ab4 	.word	0x20000ab4
 8000ea8:	08023934 	.word	0x08023934
 8000eac:	08023950 	.word	0x08023950
 8000eb0:	2000195c 	.word	0x2000195c
 8000eb4:	08023960 	.word	0x08023960
 8000eb8:	20000ae6 	.word	0x20000ae6
 8000ebc:	08023974 	.word	0x08023974
 8000ec0:	20000b18 	.word	0x20000b18
 8000ec4:	08023984 	.word	0x08023984
 8000ec8:	20000b4a 	.word	0x20000b4a
 8000ecc:	20000b7c 	.word	0x20000b7c
 8000ed0:	20000bae 	.word	0x20000bae
 8000ed4:	080239a0 	.word	0x080239a0
 8000ed8:	20000be0 	.word	0x20000be0
 8000edc:	080239b0 	.word	0x080239b0
 8000ee0:	20000c12 	.word	0x20000c12

08000ee4 <Is_Command_Valid>:

uint8_t Is_Command_Valid(uint8_t *Buffer,uint8_t Length)
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	460b      	mov	r3, r1
 8000eee:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	73fb      	strb	r3, [r7, #15]
 8000ef4:	e01c      	b.n	8000f30 <Is_Command_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 8000ef6:	7bfb      	ldrb	r3, [r7, #15]
 8000ef8:	2232      	movs	r2, #50	; 0x32
 8000efa:	fb02 f303 	mul.w	r3, r2, r3
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f00:	189c      	adds	r4, r3, r2
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
 8000f04:	2232      	movs	r2, #50	; 0x32
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <Is_Command_Valid+0x60>)
 8000f0c:	4413      	add	r3, r2
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff f9a0 	bl	8000254 <strlen>
 8000f14:	4603      	mov	r3, r0
 8000f16:	461a      	mov	r2, r3
 8000f18:	4621      	mov	r1, r4
 8000f1a:	6878      	ldr	r0, [r7, #4]
 8000f1c:	f021 f8a6 	bl	802206c <memcmp>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d101      	bne.n	8000f2a <Is_Command_Valid+0x46>
		{
			return Traverser;
 8000f26:	7bfb      	ldrb	r3, [r7, #15]
 8000f28:	e008      	b.n	8000f3c <Is_Command_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 8000f2a:	7bfb      	ldrb	r3, [r7, #15]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	73fb      	strb	r3, [r7, #15]
 8000f30:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <Is_Command_Valid+0x64>)
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	7bfa      	ldrb	r2, [r7, #15]
 8000f36:	429a      	cmp	r2, r3
 8000f38:	d3dd      	bcc.n	8000ef6 <Is_Command_Valid+0x12>
		}
	}
	return 255;
 8000f3a:	23ff      	movs	r3, #255	; 0xff
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	3714      	adds	r7, #20
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	20000a50 	.word	0x20000a50
 8000f48:	20000e38 	.word	0x20000e38

08000f4c <Process_Hitachi_Packets_Eth>:
RELAYS_t							Main_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							OtherCard_Relays_st[MAX_PEER_CONNECTIONS];
RELAYS_t							Tx_Temp_Main_Relays_st,Rx_Temp_Main_Relays_st;

void Process_Hitachi_Packets_Eth(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0a2      	sub	sp, #136	; 0x88
 8000f50:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8000f58:	2300      	movs	r3, #0
 8000f5a:	607b      	str	r3, [r7, #4]
 8000f5c:	f107 0308 	add.w	r3, r7, #8
 8000f60:	227c      	movs	r2, #124	; 0x7c
 8000f62:	2100      	movs	r1, #0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f021 f8b9 	bl	80220dc <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 8000f70:	2300      	movs	r3, #0
 8000f72:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	while(Is_There_EI_Data())
 8000f76:	e03a      	b.n	8000fee <Process_Hitachi_Packets_Eth+0xa2>
	{
		Data = Get_Eth_Byte();
 8000f78:	f00d fffe 	bl	800ef78 <Get_Eth_Byte>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		switch(Data)
 8000f82:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 8000f86:	2bf4      	cmp	r3, #244	; 0xf4
 8000f88:	d002      	beq.n	8000f90 <Process_Hitachi_Packets_Eth+0x44>
 8000f8a:	2bf6      	cmp	r3, #246	; 0xf6
 8000f8c:	d00c      	beq.n	8000fa8 <Process_Hitachi_Packets_Eth+0x5c>
 8000f8e:	e01b      	b.n	8000fc8 <Process_Hitachi_Packets_Eth+0x7c>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 8000f90:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000f94:	1c5a      	adds	r2, r3, #1
 8000f96:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000f9a:	3388      	adds	r3, #136	; 0x88
 8000f9c:	443b      	add	r3, r7
 8000f9e:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fa2:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 8000fa6:	e01e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 8000fa8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fb2:	3388      	adds	r3, #136	; 0x88
 8000fb4:	443b      	add	r3, r7
 8000fb6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fba:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 8000fbe:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fc2:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 8000fc6:	e00e      	b.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
		default:
			if(Traverser >0)
 8000fc8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00a      	beq.n	8000fe6 <Process_Hitachi_Packets_Eth+0x9a>
			{
				Temp_array[Traverser++] = Data;
 8000fd0:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8000fd4:	1c5a      	adds	r2, r3, #1
 8000fd6:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 8000fda:	3388      	adds	r3, #136	; 0x88
 8000fdc:	443b      	add	r3, r7
 8000fde:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 8000fe2:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 8000fe6:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d105      	bne.n	8000ffa <Process_Hitachi_Packets_Eth+0xae>
	while(Is_There_EI_Data())
 8000fee:	f00d ffaf 	bl	800ef50 <Is_There_EI_Data>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d1bf      	bne.n	8000f78 <Process_Hitachi_Packets_Eth+0x2c>
 8000ff8:	e000      	b.n	8000ffc <Process_Hitachi_Packets_Eth+0xb0>
		{
			break;
 8000ffa:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8000ffc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001000:	2b00      	cmp	r3, #0
 8001002:	d00d      	beq.n	8001020 <Process_Hitachi_Packets_Eth+0xd4>
	{
		if(Traverser>15)
 8001004:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001008:	2b0f      	cmp	r3, #15
 800100a:	d906      	bls.n	800101a <Process_Hitachi_Packets_Eth+0xce>
		{
			Convert_Data_format(Temp_array,Traverser);
 800100c:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001010:	1d3b      	adds	r3, r7, #4
 8001012:	4611      	mov	r1, r2
 8001014:	4618      	mov	r0, r3
 8001016:	f000 f8a3 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 800101a:	2300      	movs	r3, #0
 800101c:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	}
}
 8001020:	bf00      	nop
 8001022:	3788      	adds	r7, #136	; 0x88
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <Process_Hitachi_Packets_Com>:

void Process_Hitachi_Packets_Com(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b0a2      	sub	sp, #136	; 0x88
 800102c:	af00      	add	r7, sp, #0
	uint8_t Data = 0;
 800102e:	2300      	movs	r3, #0
 8001030:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
	uint8_t Temp_array[HITACHI_MAX_PAYLOAD] = {0,};
 8001034:	2300      	movs	r3, #0
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	f107 0308 	add.w	r3, r7, #8
 800103c:	227c      	movs	r2, #124	; 0x7c
 800103e:	2100      	movs	r1, #0
 8001040:	4618      	mov	r0, r3
 8001042:	f021 f84b 	bl	80220dc <memset>
	uint8_t Traverser = 0,uc_Found = 0;
 8001046:	2300      	movs	r3, #0
 8001048:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
 800104c:	2300      	movs	r3, #0
 800104e:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86

	if(EI_data.Hitachi_st.EnableSerialPort == 0)
 8001052:	4b40      	ldr	r3, [pc, #256]	; (8001154 <Process_Hitachi_Packets_Com+0x12c>)
 8001054:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8001058:	2b00      	cmp	r3, #0
 800105a:	d074      	beq.n	8001146 <Process_Hitachi_Packets_Com+0x11e>
		return;
	}


	/* Waiting Until the Full Packet is Received this Variable will be updated in UART4 Interrupt*/
	if(HAL_Elaps_Ticks(UART4_Intr_Clk) < 20)
 800105c:	4b3e      	ldr	r3, [pc, #248]	; (8001158 <Process_Hitachi_Packets_Com+0x130>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f00d fbcd 	bl	800e800 <HAL_Elaps_Ticks>
 8001066:	4603      	mov	r3, r0
 8001068:	2b13      	cmp	r3, #19
 800106a:	d96e      	bls.n	800114a <Process_Hitachi_Packets_Com+0x122>
	{
		return;
	}

	while(Com_DataReady(THREE_PORT))
 800106c:	e04a      	b.n	8001104 <Process_Hitachi_Packets_Com+0xdc>
	{
		Data = Com_Get_Byte(THREE_PORT);
 800106e:	2003      	movs	r0, #3
 8001070:	f013 fdea 	bl	8014c48 <Com_Get_Byte>
 8001074:	4603      	mov	r3, r0
 8001076:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
		if(Traverser > (HITACHI_MAX_PAYLOAD-2))
 800107a:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 800107e:	2b7e      	cmp	r3, #126	; 0x7e
 8001080:	d90a      	bls.n	8001098 <Process_Hitachi_Packets_Com+0x70>
		{
			printf("Received data %u Bytes exceeded %u Bytes",Traverser,HITACHI_MAX_PAYLOAD);
 8001082:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001086:	2280      	movs	r2, #128	; 0x80
 8001088:	4619      	mov	r1, r3
 800108a:	4834      	ldr	r0, [pc, #208]	; (800115c <Process_Hitachi_Packets_Com+0x134>)
 800108c:	f021 f90e 	bl	80222ac <iprintf>
			Traverser = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
			break;
 8001096:	e03d      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		}
		//printf("%02X ",Data);
		switch(Data)
 8001098:	f897 3085 	ldrb.w	r3, [r7, #133]	; 0x85
 800109c:	2bf4      	cmp	r3, #244	; 0xf4
 800109e:	d002      	beq.n	80010a6 <Process_Hitachi_Packets_Com+0x7e>
 80010a0:	2bf6      	cmp	r3, #246	; 0xf6
 80010a2:	d00c      	beq.n	80010be <Process_Hitachi_Packets_Com+0x96>
 80010a4:	e01b      	b.n	80010de <Process_Hitachi_Packets_Com+0xb6>
		{
		case HITACHI_SOM:
			Temp_array[Traverser++] = Data;
 80010a6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010aa:	1c5a      	adds	r2, r3, #1
 80010ac:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010b0:	3388      	adds	r3, #136	; 0x88
 80010b2:	443b      	add	r3, r7
 80010b4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010b8:	f803 2c84 	strb.w	r2, [r3, #-132]
			break;
 80010bc:	e01e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		case HITACHI_EOM:
			Temp_array[Traverser++] = Data;
 80010be:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010c2:	1c5a      	adds	r2, r3, #1
 80010c4:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010c8:	3388      	adds	r3, #136	; 0x88
 80010ca:	443b      	add	r3, r7
 80010cc:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010d0:	f803 2c84 	strb.w	r2, [r3, #-132]
			uc_Found = Traverser;
 80010d4:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010d8:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
			break;
 80010dc:	e00e      	b.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
		default:
			if(Traverser >0)
 80010de:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d00a      	beq.n	80010fc <Process_Hitachi_Packets_Com+0xd4>
			{
				Temp_array[Traverser++] = Data;
 80010e6:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80010ea:	1c5a      	adds	r2, r3, #1
 80010ec:	f887 2087 	strb.w	r2, [r7, #135]	; 0x87
 80010f0:	3388      	adds	r3, #136	; 0x88
 80010f2:	443b      	add	r3, r7
 80010f4:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80010f8:	f803 2c84 	strb.w	r2, [r3, #-132]
			}
		}
		if(uc_Found > 0)
 80010fc:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001100:	2b00      	cmp	r3, #0
 8001102:	d106      	bne.n	8001112 <Process_Hitachi_Packets_Com+0xea>
	while(Com_DataReady(THREE_PORT))
 8001104:	2003      	movs	r0, #3
 8001106:	f013 fd5f 	bl	8014bc8 <Com_DataReady>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ae      	bne.n	800106e <Process_Hitachi_Packets_Com+0x46>
 8001110:	e000      	b.n	8001114 <Process_Hitachi_Packets_Com+0xec>
		{
			break;
 8001112:	bf00      	nop
		}
	}
	if(uc_Found > 0)
 8001114:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001118:	2b00      	cmp	r3, #0
 800111a:	d017      	beq.n	800114c <Process_Hitachi_Packets_Com+0x124>
	{
		if(Traverser>15)
 800111c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d906      	bls.n	8001132 <Process_Hitachi_Packets_Com+0x10a>
		{
			Convert_Data_format(Temp_array,Traverser);
 8001124:	f897 2087 	ldrb.w	r2, [r7, #135]	; 0x87
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	4611      	mov	r1, r2
 800112c:	4618      	mov	r0, r3
 800112e:	f000 f817 	bl	8001160 <Convert_Data_format>
		}
		Traverser = 0;
 8001132:	2300      	movs	r3, #0
 8001134:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
		memset(&Temp_array,0,sizeof(Temp_array));
 8001138:	1d3b      	adds	r3, r7, #4
 800113a:	2280      	movs	r2, #128	; 0x80
 800113c:	2100      	movs	r1, #0
 800113e:	4618      	mov	r0, r3
 8001140:	f020 ffcc 	bl	80220dc <memset>
 8001144:	e002      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 8001146:	bf00      	nop
 8001148:	e000      	b.n	800114c <Process_Hitachi_Packets_Com+0x124>
		return;
 800114a:	bf00      	nop
	}
}
 800114c:	3788      	adds	r7, #136	; 0x88
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	20000304 	.word	0x20000304
 8001158:	20009ffc 	.word	0x20009ffc
 800115c:	080239ec 	.word	0x080239ec

08001160 <Convert_Data_format>:


void Convert_Data_format(uint8_t *Data,uint8_t Length)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b0a4      	sub	sp, #144	; 0x90
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
	uint8_t Temp_Buff[128] = {0,};
 800116c:	2300      	movs	r3, #0
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	227c      	movs	r2, #124	; 0x7c
 8001176:	2100      	movs	r1, #0
 8001178:	4618      	mov	r0, r3
 800117a:	f020 ffaf 	bl	80220dc <memset>
	uint16_t des_index=0,src_index=0;
 800117e:	2300      	movs	r3, #0
 8001180:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001184:	2300      	movs	r3, #0
 8001186:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c

	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 800118a:	2300      	movs	r3, #0
 800118c:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 8001190:	2300      	movs	r3, #0
 8001192:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001196:	e034      	b.n	8001202 <Convert_Data_format+0xa2>
	{
		if(Data[src_index] == (uint8_t)0xF0)
 8001198:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800119c:	687a      	ldr	r2, [r7, #4]
 800119e:	4413      	add	r3, r2
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	2bf0      	cmp	r3, #240	; 0xf0
 80011a4:	d118      	bne.n	80011d8 <Convert_Data_format+0x78>
		{
			Temp_Buff[des_index] = Data[src_index] | Data[src_index+1];
 80011a6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	7819      	ldrb	r1, [r3, #0]
 80011b0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011b4:	3301      	adds	r3, #1
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	4413      	add	r3, r2
 80011ba:	781a      	ldrb	r2, [r3, #0]
 80011bc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011c0:	430a      	orrs	r2, r1
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	3390      	adds	r3, #144	; 0x90
 80011c6:	443b      	add	r3, r7
 80011c8:	f803 2c84 	strb.w	r2, [r3, #-132]
			++src_index;
 80011cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011d0:	3301      	adds	r3, #1
 80011d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80011d6:	e00a      	b.n	80011ee <Convert_Data_format+0x8e>
		}
		else
		{
			Temp_Buff[des_index] = Data[src_index];
 80011d8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	441a      	add	r2, r3
 80011e0:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011e4:	7812      	ldrb	r2, [r2, #0]
 80011e6:	3390      	adds	r3, #144	; 0x90
 80011e8:	443b      	add	r3, r7
 80011ea:	f803 2c84 	strb.w	r2, [r3, #-132]
	for(des_index=0,src_index=0; src_index < Length; ++des_index,++src_index)
 80011ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80011f2:	3301      	adds	r3, #1
 80011f4:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
 80011f8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80011fc:	3301      	adds	r3, #1
 80011fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8001202:	78fb      	ldrb	r3, [r7, #3]
 8001204:	b29b      	uxth	r3, r3
 8001206:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800120a:	429a      	cmp	r2, r3
 800120c:	d3c4      	bcc.n	8001198 <Convert_Data_format+0x38>
		}
	}
	EI_Data_Analyzer(Temp_Buff,des_index);
 800120e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8001212:	f107 030c 	add.w	r3, r7, #12
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f000 f805 	bl	8001228 <EI_Data_Analyzer>
}
 800121e:	bf00      	nop
 8001220:	3790      	adds	r7, #144	; 0x90
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
	...

08001228 <EI_Data_Analyzer>:

void EI_Data_Analyzer(unsigned char *Buff, unsigned short int Size)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b088      	sub	sp, #32
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	460b      	mov	r3, r1
 8001232:	807b      	strh	r3, [r7, #2]
	uint8_t Message_Type = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	75fb      	strb	r3, [r7, #23]
	uint8_t Source_Index = 0,Dest_Index = 0;
 8001238:	2300      	movs	r3, #0
 800123a:	77fb      	strb	r3, [r7, #31]
 800123c:	2300      	movs	r3, #0
 800123e:	77bb      	strb	r3, [r7, #30]
	uint32_t Destin_Address = 0;
 8001240:	2300      	movs	r3, #0
 8001242:	61bb      	str	r3, [r7, #24]
	uint32_t Source_Address = 0;
 8001244:	2300      	movs	r3, #0
 8001246:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 8001248:	f014 f826 	bl	8015298 <HAL_GetTick>
 800124c:	60f8      	str	r0, [r7, #12]

	if( (Is_CAN_Exchange_happening == NO) && (HAL_GetTick() >= TEN_SEC) )
 800124e:	4ba7      	ldr	r3, [pc, #668]	; (80014ec <EI_Data_Analyzer+0x2c4>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d111      	bne.n	800127a <EI_Data_Analyzer+0x52>
 8001256:	f014 f81f 	bl	8015298 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001260:	4293      	cmp	r3, r2
 8001262:	d90a      	bls.n	800127a <EI_Data_Analyzer+0x52>
	{
		printf("\n Not Processing Any EI Packet As CAN Packets are Not receiving\n");
 8001264:	48a2      	ldr	r0, [pc, #648]	; (80014f0 <EI_Data_Analyzer+0x2c8>)
 8001266:	f021 f8bd 	bl	80223e4 <puts>
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800126a:	49a2      	ldr	r1, [pc, #648]	; (80014f4 <EI_Data_Analyzer+0x2cc>)
 800126c:	48a2      	ldr	r0, [pc, #648]	; (80014f8 <EI_Data_Analyzer+0x2d0>)
 800126e:	f7fe ffe7 	bl	8000240 <strcmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	f040 81a1 	bne.w	80015bc <EI_Data_Analyzer+0x394>
			//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
			return;
		}		//		return;
	}

	Source_Address  = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[3]);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	3303      	adds	r3, #3
 800127e:	461a      	mov	r2, r3
 8001280:	2110      	movs	r1, #16
 8001282:	2000      	movs	r0, #0
 8001284:	f7ff f9c6 	bl	8000614 <ExtractBits>
 8001288:	4603      	mov	r3, r0
 800128a:	b29b      	uxth	r3, r3
 800128c:	613b      	str	r3, [r7, #16]
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 800128e:	e00b      	b.n	80012a8 <EI_Data_Analyzer+0x80>
	{
		if(Source_Address == EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index])
 8001290:	7ffb      	ldrb	r3, [r7, #31]
 8001292:	4a9a      	ldr	r2, [pc, #616]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001294:	3366      	adds	r3, #102	; 0x66
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	429a      	cmp	r2, r3
 80012a0:	d009      	beq.n	80012b6 <EI_Data_Analyzer+0x8e>
	for(; Source_Index < EI_data.Hitachi_st.PeersCnt; ++Source_Index)
 80012a2:	7ffb      	ldrb	r3, [r7, #31]
 80012a4:	3301      	adds	r3, #1
 80012a6:	77fb      	strb	r3, [r7, #31]
 80012a8:	4b94      	ldr	r3, [pc, #592]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012ae:	7ffa      	ldrb	r2, [r7, #31]
 80012b0:	429a      	cmp	r2, r3
 80012b2:	d3ed      	bcc.n	8001290 <EI_Data_Analyzer+0x68>
 80012b4:	e000      	b.n	80012b8 <EI_Data_Analyzer+0x90>
		{
			break;
 80012b6:	bf00      	nop
		}
	}
	if(Source_Index>= EI_data.Hitachi_st.PeersCnt)
 80012b8:	4b90      	ldr	r3, [pc, #576]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012be:	7ffa      	ldrb	r2, [r7, #31]
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d309      	bcc.n	80012d8 <EI_Data_Analyzer+0xb0>
	{
		if(Debug_flag == 1)
 80012c4:	4b8e      	ldr	r3, [pc, #568]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	f040 8179 	bne.w	80015c0 <EI_Data_Analyzer+0x398>
		{
			printf("Rejected Source Address:%lu which is Not Available in List\n",Source_Address);
 80012ce:	6939      	ldr	r1, [r7, #16]
 80012d0:	488c      	ldr	r0, [pc, #560]	; (8001504 <EI_Data_Analyzer+0x2dc>)
 80012d2:	f020 ffeb 	bl	80222ac <iprintf>
		}
		return;
 80012d6:	e173      	b.n	80015c0 <EI_Data_Analyzer+0x398>
	}

	Destin_Address = (uint16_t)ExtractBits(0, 16, (unsigned char *)&Buff[1]);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	3301      	adds	r3, #1
 80012dc:	461a      	mov	r2, r3
 80012de:	2110      	movs	r1, #16
 80012e0:	2000      	movs	r0, #0
 80012e2:	f7ff f997 	bl	8000614 <ExtractBits>
 80012e6:	4603      	mov	r3, r0
 80012e8:	b29b      	uxth	r3, r3
 80012ea:	61bb      	str	r3, [r7, #24]

	if(Destin_Address != EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index] )
 80012ec:	7ffb      	ldrb	r3, [r7, #31]
 80012ee:	4a83      	ldr	r2, [pc, #524]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80012f0:	3370      	adds	r3, #112	; 0x70
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	4413      	add	r3, r2
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d012      	beq.n	8001324 <EI_Data_Analyzer+0xfc>
	{
		printf("Packet Indexes Not matching\n");
 80012fe:	4882      	ldr	r0, [pc, #520]	; (8001508 <EI_Data_Analyzer+0x2e0>)
 8001300:	f021 f870 	bl	80223e4 <puts>
		printf("Received Destination Address:%lu\n",Destin_Address);
 8001304:	69b9      	ldr	r1, [r7, #24]
 8001306:	4881      	ldr	r0, [pc, #516]	; (800150c <EI_Data_Analyzer+0x2e4>)
 8001308:	f020 ffd0 	bl	80222ac <iprintf>
		printf("Actual Destination Address for Source Address[%lu]:%lu\n",Source_Address,EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 800130c:	7ffb      	ldrb	r3, [r7, #31]
 800130e:	4a7b      	ldr	r2, [pc, #492]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001310:	3370      	adds	r3, #112	; 0x70
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	4413      	add	r3, r2
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	461a      	mov	r2, r3
 800131a:	6939      	ldr	r1, [r7, #16]
 800131c:	487c      	ldr	r0, [pc, #496]	; (8001510 <EI_Data_Analyzer+0x2e8>)
 800131e:	f020 ffc5 	bl	80222ac <iprintf>
		return;
 8001322:	e14e      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}
	else
	{
		Dest_Index = Source_Index;
 8001324:	7ffb      	ldrb	r3, [r7, #31]
 8001326:	77bb      	strb	r3, [r7, #30]
	}
	if( (CHECKFLAG(4,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8001328:	4b7a      	ldr	r3, [pc, #488]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	091b      	lsrs	r3, r3, #4
 800132e:	f003 0301 	and.w	r3, r3, #1
 8001332:	2b00      	cmp	r3, #0
 8001334:	d016      	beq.n	8001364 <EI_Data_Analyzer+0x13c>
	{
		if(Dest_Index == Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX)
 8001336:	4b77      	ldr	r3, [pc, #476]	; (8001514 <EI_Data_Analyzer+0x2ec>)
 8001338:	791b      	ldrb	r3, [r3, #4]
 800133a:	7fba      	ldrb	r2, [r7, #30]
 800133c:	429a      	cmp	r2, r3
 800133e:	d111      	bne.n	8001364 <EI_Data_Analyzer+0x13c>
		{
			printf("\nInjected Invalid Destin_Address\n");
 8001340:	4875      	ldr	r0, [pc, #468]	; (8001518 <EI_Data_Analyzer+0x2f0>)
 8001342:	f021 f84f 	bl	80223e4 <puts>
			printf("Received:%lu\n",Destin_Address);
 8001346:	69b9      	ldr	r1, [r7, #24]
 8001348:	4874      	ldr	r0, [pc, #464]	; (800151c <EI_Data_Analyzer+0x2f4>)
 800134a:	f020 ffaf 	bl	80222ac <iprintf>
			Destin_Address = 333;
 800134e:	f240 134d 	movw	r3, #333	; 0x14d
 8001352:	61bb      	str	r3, [r7, #24]
			Dest_Index = EI_data.Hitachi_st.PeersCnt;
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001356:	f893 3020 	ldrb.w	r3, [r3, #32]
 800135a:	77bb      	strb	r3, [r7, #30]
			printf("Injected:%lu\n",Destin_Address);
 800135c:	69b9      	ldr	r1, [r7, #24]
 800135e:	4870      	ldr	r0, [pc, #448]	; (8001520 <EI_Data_Analyzer+0x2f8>)
 8001360:	f020 ffa4 	bl	80222ac <iprintf>
		}
	}
	if(Dest_Index>=EI_data.Hitachi_st.PeersCnt)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001366:	f893 3020 	ldrb.w	r3, [r3, #32]
 800136a:	7fba      	ldrb	r2, [r7, #30]
 800136c:	429a      	cmp	r2, r3
 800136e:	d307      	bcc.n	8001380 <EI_Data_Analyzer+0x158>
	{
		printf("Destin_Address is not in the List of DEST_ADDRESSES\n");
 8001370:	486c      	ldr	r0, [pc, #432]	; (8001524 <EI_Data_Analyzer+0x2fc>)
 8001372:	f021 f837 	bl	80223e4 <puts>
		printf("Received Destin_Address:%lu\n",Destin_Address);
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	486b      	ldr	r0, [pc, #428]	; (8001528 <EI_Data_Analyzer+0x300>)
 800137a:	f020 ff97 	bl	80222ac <iprintf>
		return;
 800137e:	e120      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
	}

	if(Debug_flag == 1)
 8001380:	4b5f      	ldr	r3, [pc, #380]	; (8001500 <EI_Data_Analyzer+0x2d8>)
 8001382:	781b      	ldrb	r3, [r3, #0]
 8001384:	2b01      	cmp	r3, #1
 8001386:	d121      	bne.n	80013cc <EI_Data_Analyzer+0x1a4>
	{
		switch(Recv_IP_Index[Source_Index])
 8001388:	7ffb      	ldrb	r3, [r7, #31]
 800138a:	4a68      	ldr	r2, [pc, #416]	; (800152c <EI_Data_Analyzer+0x304>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d002      	beq.n	8001398 <EI_Data_Analyzer+0x170>
 8001392:	2b02      	cmp	r3, #2
 8001394:	d004      	beq.n	80013a0 <EI_Data_Analyzer+0x178>
 8001396:	e007      	b.n	80013a8 <EI_Data_Analyzer+0x180>
		{
		case ONE:
			printf("RCV from MLK-A\n");
 8001398:	4865      	ldr	r0, [pc, #404]	; (8001530 <EI_Data_Analyzer+0x308>)
 800139a:	f021 f823 	bl	80223e4 <puts>
			break;
 800139e:	e015      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		case TWO:
			printf("RCV from MLK-B\n");
 80013a0:	4864      	ldr	r0, [pc, #400]	; (8001534 <EI_Data_Analyzer+0x30c>)
 80013a2:	f021 f81f 	bl	80223e4 <puts>
			break;
 80013a6:	e011      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
		default:
			if(EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80013a8:	7ffb      	ldrb	r3, [r7, #31]
 80013aa:	4a54      	ldr	r2, [pc, #336]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 80013ac:	4413      	add	r3, r2
 80013ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d103      	bne.n	80013be <EI_Data_Analyzer+0x196>
			{
				printf("Received from Serial\n");
 80013b6:	4860      	ldr	r0, [pc, #384]	; (8001538 <EI_Data_Analyzer+0x310>)
 80013b8:	f021 f814 	bl	80223e4 <puts>
 80013bc:	e006      	b.n	80013cc <EI_Data_Analyzer+0x1a4>
			}
			else
			{
				printf("Received from Unknown Source:%u\n",Recv_IP_Index[Source_Index]);
 80013be:	7ffb      	ldrb	r3, [r7, #31]
 80013c0:	4a5a      	ldr	r2, [pc, #360]	; (800152c <EI_Data_Analyzer+0x304>)
 80013c2:	5cd3      	ldrb	r3, [r2, r3]
 80013c4:	4619      	mov	r1, r3
 80013c6:	485d      	ldr	r0, [pc, #372]	; (800153c <EI_Data_Analyzer+0x314>)
 80013c8:	f020 ff70 	bl	80222ac <iprintf>
			}
		}
	}
	if(Prev_IP_Source[Source_Index] != Recv_IP_Index[Source_Index]) //This if condition is to Avoid data missing when MLK Primary to Secondary shifting.
 80013cc:	7ffb      	ldrb	r3, [r7, #31]
 80013ce:	4a5c      	ldr	r2, [pc, #368]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013d4:	7ffa      	ldrb	r2, [r7, #31]
 80013d6:	4955      	ldr	r1, [pc, #340]	; (800152c <EI_Data_Analyzer+0x304>)
 80013d8:	5c8a      	ldrb	r2, [r1, r2]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d014      	beq.n	8001408 <EI_Data_Analyzer+0x1e0>
	{
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 80013de:	7ffb      	ldrb	r3, [r7, #31]
 80013e0:	4958      	ldr	r1, [pc, #352]	; (8001544 <EI_Data_Analyzer+0x31c>)
 80013e2:	68fa      	ldr	r2, [r7, #12]
 80013e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 80013e8:	7ffb      	ldrb	r3, [r7, #31]
 80013ea:	4957      	ldr	r1, [pc, #348]	; (8001548 <EI_Data_Analyzer+0x320>)
 80013ec:	68fa      	ldr	r2, [r7, #12]
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Prev_IP_Source[Source_Index] = Recv_IP_Index[Source_Index];
 80013f2:	7ffb      	ldrb	r3, [r7, #31]
 80013f4:	4a4d      	ldr	r2, [pc, #308]	; (800152c <EI_Data_Analyzer+0x304>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
 80013f8:	7ffb      	ldrb	r3, [r7, #31]
 80013fa:	4611      	mov	r1, r2
 80013fc:	4a50      	ldr	r2, [pc, #320]	; (8001540 <EI_Data_Analyzer+0x318>)
 80013fe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		printf("MLK Shifting Detected\n");
 8001402:	4852      	ldr	r0, [pc, #328]	; (800154c <EI_Data_Analyzer+0x324>)
 8001404:	f020 ffee 	bl	80223e4 <puts>
	}
	IP_Source_Peer[Source_Index] = Recv_IP_Index[Source_Index];
 8001408:	7ffa      	ldrb	r2, [r7, #31]
 800140a:	7ffb      	ldrb	r3, [r7, #31]
 800140c:	4947      	ldr	r1, [pc, #284]	; (800152c <EI_Data_Analyzer+0x304>)
 800140e:	5c89      	ldrb	r1, [r1, r2]
 8001410:	4a4f      	ldr	r2, [pc, #316]	; (8001550 <EI_Data_Analyzer+0x328>)
 8001412:	54d1      	strb	r1, [r2, r3]

	if( HAL_Elaps_Ticks(Prev_INTR_Rcv_Clk[Source_Index]) >= EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Source_Index])
 8001414:	7ffb      	ldrb	r3, [r7, #31]
 8001416:	4a4f      	ldr	r2, [pc, #316]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001418:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800141c:	4618      	mov	r0, r3
 800141e:	f00d f9ef 	bl	800e800 <HAL_Elaps_Ticks>
 8001422:	4602      	mov	r2, r0
 8001424:	7ffb      	ldrb	r3, [r7, #31]
 8001426:	4935      	ldr	r1, [pc, #212]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001428:	338a      	adds	r3, #138	; 0x8a
 800142a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800142e:	429a      	cmp	r2, r3
 8001430:	d318      	bcc.n	8001464 <EI_Data_Analyzer+0x23c>
	{
		Prev_INTR_Rcv_Clk[Source_Index] =Cur_Ticks;
 8001432:	7ffb      	ldrb	r3, [r7, #31]
 8001434:	4947      	ldr	r1, [pc, #284]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001436:	68fa      	ldr	r2, [r7, #12]
 8001438:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800143c:	7ffb      	ldrb	r3, [r7, #31]
 800143e:	4941      	ldr	r1, [pc, #260]	; (8001544 <EI_Data_Analyzer+0x31c>)
 8001440:	68fa      	ldr	r2, [r7, #12]
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Last_Recevied_Clock_ValidMsgs[Source_Index] = Cur_Ticks;
 8001446:	7ffb      	ldrb	r3, [r7, #31]
 8001448:	493f      	ldr	r1, [pc, #252]	; (8001548 <EI_Data_Analyzer+0x320>)
 800144a:	68fa      	ldr	r2, [r7, #12]
 800144c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		printf("EIPC Shifting Detected:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001450:	7ffb      	ldrb	r3, [r7, #31]
 8001452:	4a2a      	ldr	r2, [pc, #168]	; (80014fc <EI_Data_Analyzer+0x2d4>)
 8001454:	3366      	adds	r3, #102	; 0x66
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	4413      	add	r3, r2
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	4619      	mov	r1, r3
 800145e:	483e      	ldr	r0, [pc, #248]	; (8001558 <EI_Data_Analyzer+0x330>)
 8001460:	f020 ff24 	bl	80222ac <iprintf>
	}
	Prev_INTR_Rcv_Clk[Source_Index] = Cur_Ticks;
 8001464:	7ffb      	ldrb	r3, [r7, #31]
 8001466:	493b      	ldr	r1, [pc, #236]	; (8001554 <EI_Data_Analyzer+0x32c>)
 8001468:	68fa      	ldr	r2, [r7, #12]
 800146a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	memset(&Rx_Print_st,0,sizeof(RX_Print_t));
 800146e:	2281      	movs	r2, #129	; 0x81
 8001470:	2100      	movs	r1, #0
 8001472:	483a      	ldr	r0, [pc, #232]	; (800155c <EI_Data_Analyzer+0x334>)
 8001474:	f020 fe32 	bl	80220dc <memset>
	memcpy(Rx_Print_st.Print_Buff,Buff,Size);
 8001478:	887b      	ldrh	r3, [r7, #2]
 800147a:	461a      	mov	r2, r3
 800147c:	6879      	ldr	r1, [r7, #4]
 800147e:	4837      	ldr	r0, [pc, #220]	; (800155c <EI_Data_Analyzer+0x334>)
 8001480:	f020 fe04 	bl	802208c <memcpy>
	Rx_Print_st.Size = Size;
 8001484:	887b      	ldrh	r3, [r7, #2]
 8001486:	b2da      	uxtb	r2, r3
 8001488:	4b34      	ldr	r3, [pc, #208]	; (800155c <EI_Data_Analyzer+0x334>)
 800148a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	//Print_EI_DATA(Buff,RCV,Size); // To Print in Hitachi Format.

	Message_Type = (uint8_t)ExtractBits(0, 8, (unsigned char *)&Buff[7]);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	3307      	adds	r3, #7
 8001492:	461a      	mov	r2, r3
 8001494:	2108      	movs	r1, #8
 8001496:	2000      	movs	r0, #0
 8001498:	f7ff f8bc 	bl	8000614 <ExtractBits>
 800149c:	4603      	mov	r3, r0
 800149e:	75fb      	strb	r3, [r7, #23]
	Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status = RECEIVED;
 80014a0:	7ffa      	ldrb	r2, [r7, #31]
 80014a2:	492f      	ldr	r1, [pc, #188]	; (8001560 <EI_Data_Analyzer+0x338>)
 80014a4:	4613      	mov	r3, r2
 80014a6:	005b      	lsls	r3, r3, #1
 80014a8:	4413      	add	r3, r2
 80014aa:	00db      	lsls	r3, r3, #3
 80014ac:	440b      	add	r3, r1
 80014ae:	3303      	adds	r3, #3
 80014b0:	2201      	movs	r2, #1
 80014b2:	701a      	strb	r2, [r3, #0]


	Last_ReceptionClk[Source_Index] = Cur_Ticks;
 80014b4:	7ffb      	ldrb	r3, [r7, #31]
 80014b6:	492b      	ldr	r1, [pc, #172]	; (8001564 <EI_Data_Analyzer+0x33c>)
 80014b8:	68fa      	ldr	r2, [r7, #12]
 80014ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Check_Other_EiPC_Packet(Source_Index);
 80014be:	7ffb      	ldrb	r3, [r7, #31]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fbd7 	bl	8007c74 <Check_Other_EiPC_Packet>
	switch (Message_Type)
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	2b05      	cmp	r3, #5
 80014cc:	d870      	bhi.n	80015b0 <EI_Data_Analyzer+0x388>
 80014ce:	a201      	add	r2, pc, #4	; (adr r2, 80014d4 <EI_Data_Analyzer+0x2ac>)
 80014d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014d4:	08001569 	.word	0x08001569
 80014d8:	08001579 	.word	0x08001579
 80014dc:	08001589 	.word	0x08001589
 80014e0:	08001591 	.word	0x08001591
 80014e4:	080015b1 	.word	0x080015b1
 80014e8:	080015a1 	.word	0x080015a1
 80014ec:	20000108 	.word	0x20000108
 80014f0:	08023a18 	.word	0x08023a18
 80014f4:	08023a58 	.word	0x08023a58
 80014f8:	20000305 	.word	0x20000305
 80014fc:	20000304 	.word	0x20000304
 8001500:	20000645 	.word	0x20000645
 8001504:	08023a64 	.word	0x08023a64
 8001508:	08023aa0 	.word	0x08023aa0
 800150c:	08023abc 	.word	0x08023abc
 8001510:	08023ae0 	.word	0x08023ae0
 8001514:	2000195c 	.word	0x2000195c
 8001518:	08023b18 	.word	0x08023b18
 800151c:	08023b3c 	.word	0x08023b3c
 8001520:	08023b4c 	.word	0x08023b4c
 8001524:	08023b5c 	.word	0x08023b5c
 8001528:	08023b90 	.word	0x08023b90
 800152c:	20001080 	.word	0x20001080
 8001530:	08023bb0 	.word	0x08023bb0
 8001534:	08023bc0 	.word	0x08023bc0
 8001538:	08023bd0 	.word	0x08023bd0
 800153c:	08023be8 	.word	0x08023be8
 8001540:	20000f7c 	.word	0x20000f7c
 8001544:	20000fa4 	.word	0x20000fa4
 8001548:	20000fcc 	.word	0x20000fcc
 800154c:	08023c0c 	.word	0x08023c0c
 8001550:	20001024 	.word	0x20001024
 8001554:	20001030 	.word	0x20001030
 8001558:	08023c24 	.word	0x08023c24
 800155c:	20001c10 	.word	0x20001c10
 8001560:	20001674 	.word	0x20001674
 8001564:	20000e74 	.word	0x20000e74
	{
	case INIT_MSG:
		//printf("\nReceived Init Message\n");
		Init_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001568:	887b      	ldrh	r3, [r7, #2]
 800156a:	b2d9      	uxtb	r1, r3
 800156c:	7fbb      	ldrb	r3, [r7, #30]
 800156e:	7ffa      	ldrb	r2, [r7, #31]
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f000 f82d 	bl	80015d0 <Init_Msg_extr>
		break;
 8001576:	e024      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case VDATAMSG:
		//printf("\nReceived VITAL DATA Message\n");
		Vital_Msg_extr(Buff, Size, Source_Index, Dest_Index);
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	b2d9      	uxtb	r1, r3
 800157c:	7fbb      	ldrb	r3, [r7, #30]
 800157e:	7ffa      	ldrb	r2, [r7, #31]
 8001580:	6878      	ldr	r0, [r7, #4]
 8001582:	f001 fbc3 	bl	8002d0c <Vital_Msg_extr>
		break;
 8001586:	e01c      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case NVDATAMSG:
		printf("\nReceived NON-VITAL DATA Message\n");
 8001588:	480f      	ldr	r0, [pc, #60]	; (80015c8 <EI_Data_Analyzer+0x3a0>)
 800158a:	f020 ff2b 	bl	80223e4 <puts>
		break;
 800158e:	e018      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case STATUSMSG:
		//printf("\nReceived STATUS Message\n");
		Status_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	b2d9      	uxtb	r1, r3
 8001594:	7fbb      	ldrb	r3, [r7, #30]
 8001596:	7ffa      	ldrb	r2, [r7, #31]
 8001598:	6878      	ldr	r0, [r7, #4]
 800159a:	f003 fe49 	bl	8005230 <Status_Msg_Extr>
		break;
 800159e:	e010      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	case SERVICEMSG:
		//printf("\nReceived SERVICE Message\n");
		Service_Msg_Extr(Buff, Size, Source_Index, Dest_Index);
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	b2d9      	uxtb	r1, r3
 80015a4:	7fbb      	ldrb	r3, [r7, #30]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	6878      	ldr	r0, [r7, #4]
 80015aa:	f005 f841 	bl	8006630 <Service_Msg_Extr>
		break;
 80015ae:	e008      	b.n	80015c2 <EI_Data_Analyzer+0x39a>

	default:
		printf("Received \"%d\" Message type\n", Message_Type);
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <EI_Data_Analyzer+0x3a4>)
 80015b6:	f020 fe79 	bl	80222ac <iprintf>
		break;
 80015ba:	e002      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
			return;
 80015bc:	bf00      	nop
 80015be:	e000      	b.n	80015c2 <EI_Data_Analyzer+0x39a>
		return;
 80015c0:	bf00      	nop
	} /* Switch */

} /*  EI_Data_Analyzer */
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	08023c40 	.word	0x08023c40
 80015cc:	08023c64 	.word	0x08023c64

080015d0 <Init_Msg_extr>:

void Init_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 80015d0:	b590      	push	{r4, r7, lr}
 80015d2:	b089      	sub	sp, #36	; 0x24
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
 80015d8:	4608      	mov	r0, r1
 80015da:	4611      	mov	r1, r2
 80015dc:	461a      	mov	r2, r3
 80015de:	4603      	mov	r3, r0
 80015e0:	70fb      	strb	r3, [r7, #3]
 80015e2:	460b      	mov	r3, r1
 80015e4:	70bb      	strb	r3, [r7, #2]
 80015e6:	4613      	mov	r3, r2
 80015e8:	707b      	strb	r3, [r7, #1]
	// unsigned int Traverser=0;
	uint16_t Recv_App_CRC = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	837b      	strh	r3, [r7, #26]
	uint8_t Recv_Inputs = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	767b      	strb	r3, [r7, #25]
	uint32_t Calc_CRC = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	617b      	str	r3, [r7, #20]
	uint32_t Recv_CRC = 0;
 80015f6:	2300      	movs	r3, #0
 80015f8:	613b      	str	r3, [r7, #16]
	uint32_t Cur_Ticks = HAL_GetTick();
 80015fa:	f013 fe4d 	bl	8015298 <HAL_GetTick>
 80015fe:	60f8      	str	r0, [r7, #12]
	BITSTUFFINIT(0, 0);
 8001600:	2300      	movs	r3, #0
 8001602:	83fb      	strh	r3, [r7, #30]
 8001604:	2300      	movs	r3, #0
 8001606:	83bb      	strh	r3, [r7, #28]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8001608:	78fb      	ldrb	r3, [r7, #3]
 800160a:	b29b      	uxth	r3, r3
 800160c:	3b05      	subs	r3, #5
 800160e:	b29b      	uxth	r3, r3
 8001610:	4619      	mov	r1, r3
 8001612:	6878      	ldr	r0, [r7, #4]
 8001614:	f011 fa68 	bl	8012ae8 <CalculateDirectReverseCrc>
 8001618:	6178      	str	r0, [r7, #20]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 800161a:	78fb      	ldrb	r3, [r7, #3]
 800161c:	3b05      	subs	r3, #5
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	441a      	add	r2, r3
 8001622:	8bbb      	ldrh	r3, [r7, #28]
 8001624:	2120      	movs	r1, #32
 8001626:	4618      	mov	r0, r3
 8001628:	f7fe fff4 	bl	8000614 <ExtractBits>
 800162c:	6138      	str	r0, [r7, #16]

	if(Recv_CRC != Calc_CRC)
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	697b      	ldr	r3, [r7, #20]
 8001632:	429a      	cmp	r2, r3
 8001634:	d013      	beq.n	800165e <Init_Msg_extr+0x8e>
	{
		printf("Init Message CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8001636:	78bb      	ldrb	r3, [r7, #2]
 8001638:	4a29      	ldr	r2, [pc, #164]	; (80016e0 <Init_Msg_extr+0x110>)
 800163a:	3366      	adds	r3, #102	; 0x66
 800163c:	009b      	lsls	r3, r3, #2
 800163e:	4413      	add	r3, r2
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	4619      	mov	r1, r3
 8001644:	4827      	ldr	r0, [pc, #156]	; (80016e4 <Init_Msg_extr+0x114>)
 8001646:	f020 fe31 	bl	80222ac <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 800164a:	6939      	ldr	r1, [r7, #16]
 800164c:	4826      	ldr	r0, [pc, #152]	; (80016e8 <Init_Msg_extr+0x118>)
 800164e:	f020 fe2d 	bl	80222ac <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 8001652:	6979      	ldr	r1, [r7, #20]
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <Init_Msg_extr+0x11c>)
 8001656:	f020 fe29 	bl	80222ac <iprintf>
		return;
 800165a:	f000 be32 	b.w	80022c2 <Init_Msg_extr+0xcf2>
	}
	else
	{
		//printf("Received CRC       :0x%06lX\n",Recv_CRC);
		INIT_Received[Source_Index] = RECEIVED;
 800165e:	78bb      	ldrb	r3, [r7, #2]
 8001660:	4a23      	ldr	r2, [pc, #140]	; (80016f0 <Init_Msg_extr+0x120>)
 8001662:	2101      	movs	r1, #1
 8001664:	54d1      	strb	r1, [r2, r3]
		Received_Init[Source_Index] = 1;
 8001666:	78bb      	ldrb	r3, [r7, #2]
 8001668:	4a22      	ldr	r2, [pc, #136]	; (80016f4 <Init_Msg_extr+0x124>)
 800166a:	2101      	movs	r1, #1
 800166c:	54d1      	strb	r1, [r2, r3]
	}

	Recv_App_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[29]);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f103 021d 	add.w	r2, r3, #29
 8001674:	8bbb      	ldrh	r3, [r7, #28]
 8001676:	2110      	movs	r1, #16
 8001678:	4618      	mov	r0, r3
 800167a:	f7fe ffcb 	bl	8000614 <ExtractBits>
 800167e:	4603      	mov	r3, r0
 8001680:	837b      	strh	r3, [r7, #26]


	if(Recv_App_CRC != EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index])
 8001682:	78bb      	ldrb	r3, [r7, #2]
 8001684:	4a16      	ldr	r2, [pc, #88]	; (80016e0 <Init_Msg_extr+0x110>)
 8001686:	33fe      	adds	r3, #254	; 0xfe
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	4413      	add	r3, r2
 800168c:	889b      	ldrh	r3, [r3, #4]
 800168e:	8b7a      	ldrh	r2, [r7, #26]
 8001690:	429a      	cmp	r2, r3
 8001692:	d03d      	beq.n	8001710 <Init_Msg_extr+0x140>
	{
		App_Identity_CRC_Fail[Source_Index] = 1;
 8001694:	78bb      	ldrb	r3, [r7, #2]
 8001696:	4a18      	ldr	r2, [pc, #96]	; (80016f8 <Init_Msg_extr+0x128>)
 8001698:	2101      	movs	r1, #1
 800169a:	54d1      	strb	r1, [r2, r3]
		printf("Received App Identity CRC is not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800169c:	78bb      	ldrb	r3, [r7, #2]
 800169e:	4a10      	ldr	r2, [pc, #64]	; (80016e0 <Init_Msg_extr+0x110>)
 80016a0:	3366      	adds	r3, #102	; 0x66
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	4619      	mov	r1, r3
 80016aa:	4814      	ldr	r0, [pc, #80]	; (80016fc <Init_Msg_extr+0x12c>)
 80016ac:	f020 fdfe 	bl	80222ac <iprintf>
		printf("Received App Identity CRC:0X%04X\n",Recv_App_CRC);
 80016b0:	8b7b      	ldrh	r3, [r7, #26]
 80016b2:	4619      	mov	r1, r3
 80016b4:	4812      	ldr	r0, [pc, #72]	; (8001700 <Init_Msg_extr+0x130>)
 80016b6:	f020 fdf9 	bl	80222ac <iprintf>
		printf("Expected App Identity CRC:0X%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Source_Index]);
 80016ba:	78bb      	ldrb	r3, [r7, #2]
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <Init_Msg_extr+0x110>)
 80016be:	33fe      	adds	r3, #254	; 0xfe
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	889b      	ldrh	r3, [r3, #4]
 80016c6:	4619      	mov	r1, r3
 80016c8:	480e      	ldr	r0, [pc, #56]	; (8001704 <Init_Msg_extr+0x134>)
 80016ca:	f020 fdef 	bl	80222ac <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 80016ce:	490e      	ldr	r1, [pc, #56]	; (8001708 <Init_Msg_extr+0x138>)
 80016d0:	480e      	ldr	r0, [pc, #56]	; (800170c <Init_Msg_extr+0x13c>)
 80016d2:	f7fe fdb5 	bl	8000240 <strcmp>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d01d      	beq.n	8001718 <Init_Msg_extr+0x148>
		{
			return;
 80016dc:	f000 bdf1 	b.w	80022c2 <Init_Msg_extr+0xcf2>
 80016e0:	20000304 	.word	0x20000304
 80016e4:	08023c80 	.word	0x08023c80
 80016e8:	08023c9c 	.word	0x08023c9c
 80016ec:	08023cac 	.word	0x08023cac
 80016f0:	20000ff4 	.word	0x20000ff4
 80016f4:	2000100c 	.word	0x2000100c
 80016f8:	20001000 	.word	0x20001000
 80016fc:	08023cbc 	.word	0x08023cbc
 8001700:	08023cf4 	.word	0x08023cf4
 8001704:	08023d18 	.word	0x08023d18
 8001708:	08023a58 	.word	0x08023a58
 800170c:	20000305 	.word	0x20000305
		}
	}
	else
	{
		App_Identity_CRC_Fail[Source_Index] = 0;
 8001710:	78bb      	ldrb	r3, [r7, #2]
 8001712:	4aab      	ldr	r2, [pc, #684]	; (80019c0 <Init_Msg_extr+0x3f0>)
 8001714:	2100      	movs	r1, #0
 8001716:	54d1      	strb	r1, [r2, r3]
	}

	Recv_Inputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[36]);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	f103 0224 	add.w	r2, r3, #36	; 0x24
 800171e:	8bbb      	ldrh	r3, [r7, #28]
 8001720:	2108      	movs	r1, #8
 8001722:	4618      	mov	r0, r3
 8001724:	f7fe ff76 	bl	8000614 <ExtractBits>
 8001728:	4603      	mov	r3, r0
 800172a:	767b      	strb	r3, [r7, #25]
	if(Recv_Inputs != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800172c:	78bb      	ldrb	r3, [r7, #2]
 800172e:	4aa5      	ldr	r2, [pc, #660]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001730:	4413      	add	r3, r2
 8001732:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8001736:	7e7a      	ldrb	r2, [r7, #25]
 8001738:	429a      	cmp	r2, r3
 800173a:	d01f      	beq.n	800177c <Init_Msg_extr+0x1ac>
	{
		printf("Vital Inputs Not Matching for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800173c:	78bb      	ldrb	r3, [r7, #2]
 800173e:	4aa1      	ldr	r2, [pc, #644]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001740:	3366      	adds	r3, #102	; 0x66
 8001742:	009b      	lsls	r3, r3, #2
 8001744:	4413      	add	r3, r2
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	4619      	mov	r1, r3
 800174a:	489f      	ldr	r0, [pc, #636]	; (80019c8 <Init_Msg_extr+0x3f8>)
 800174c:	f020 fdae 	bl	80222ac <iprintf>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8001750:	78bb      	ldrb	r3, [r7, #2]
 8001752:	4a9c      	ldr	r2, [pc, #624]	; (80019c4 <Init_Msg_extr+0x3f4>)
 8001754:	4413      	add	r3, r2
 8001756:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 800175a:	4619      	mov	r1, r3
 800175c:	489b      	ldr	r0, [pc, #620]	; (80019cc <Init_Msg_extr+0x3fc>)
 800175e:	f020 fda5 	bl	80222ac <iprintf>
		printf("Received Inputs:%u\n",Recv_Inputs);
 8001762:	7e7b      	ldrb	r3, [r7, #25]
 8001764:	4619      	mov	r1, r3
 8001766:	489a      	ldr	r0, [pc, #616]	; (80019d0 <Init_Msg_extr+0x400>)
 8001768:	f020 fda0 	bl	80222ac <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800176c:	4999      	ldr	r1, [pc, #612]	; (80019d4 <Init_Msg_extr+0x404>)
 800176e:	489a      	ldr	r0, [pc, #616]	; (80019d8 <Init_Msg_extr+0x408>)
 8001770:	f7fe fd66 	bl	8000240 <strcmp>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	f040 85a2 	bne.w	80022c0 <Init_Msg_extr+0xcf0>
			return;
		}
	}


	Last_Recevied_Clock[Source_Index] = Cur_Ticks;
 800177c:	78bb      	ldrb	r3, [r7, #2]
 800177e:	4997      	ldr	r1, [pc, #604]	; (80019dc <Init_Msg_extr+0x40c>)
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	Received_Init[Source_Index] = SET;
 8001786:	78bb      	ldrb	r3, [r7, #2]
 8001788:	4a95      	ldr	r2, [pc, #596]	; (80019e0 <Init_Msg_extr+0x410>)
 800178a:	2101      	movs	r1, #1
 800178c:	54d1      	strb	r1, [r2, r3]
	Init_Msg_Sent_After_Timeout[Source_Index] = 0;
 800178e:	78bb      	ldrb	r3, [r7, #2]
 8001790:	4a94      	ldr	r2, [pc, #592]	; (80019e4 <Init_Msg_extr+0x414>)
 8001792:	2100      	movs	r1, #0
 8001794:	54d1      	strb	r1, [r2, r3]
	Last_Received_Init_Clk[Source_Index] = Cur_Ticks;
 8001796:	78bb      	ldrb	r3, [r7, #2]
 8001798:	4993      	ldr	r1, [pc, #588]	; (80019e8 <Init_Msg_extr+0x418>)
 800179a:	68fa      	ldr	r2, [r7, #12]
 800179c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//		{
	//			Link_Establish_Clock[Source_Index] = TWO_SEC;
	//		}
	//	}

	BITSTUFFINC(8); // Incrementing to escape SOM
 80017a0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80017a4:	3308      	adds	r3, #8
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	da00      	bge.n	80017ac <Init_Msg_extr+0x1dc>
 80017aa:	3307      	adds	r3, #7
 80017ac:	10db      	asrs	r3, r3, #3
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	4413      	add	r3, r2
 80017b4:	83fb      	strh	r3, [r7, #30]
 80017b6:	8bbb      	ldrh	r3, [r7, #28]
 80017b8:	3308      	adds	r3, #8
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	b21b      	sxth	r3, r3
 80017be:	425a      	negs	r2, r3
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	f002 0207 	and.w	r2, r2, #7
 80017c8:	bf58      	it	pl
 80017ca:	4253      	negpl	r3, r2
 80017cc:	b21b      	sxth	r3, r3
 80017ce:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80017d0:	8bfb      	ldrh	r3, [r7, #30]
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	441a      	add	r2, r3
 80017d6:	8bbb      	ldrh	r3, [r7, #28]
 80017d8:	2110      	movs	r1, #16
 80017da:	4618      	mov	r0, r3
 80017dc:	f7fe ff1a 	bl	8000614 <ExtractBits>
 80017e0:	4602      	mov	r2, r0
 80017e2:	78bb      	ldrb	r3, [r7, #2]
 80017e4:	b291      	uxth	r1, r2
 80017e6:	4a81      	ldr	r2, [pc, #516]	; (80019ec <Init_Msg_extr+0x41c>)
 80017e8:	015b      	lsls	r3, r3, #5
 80017ea:	4413      	add	r3, r2
 80017ec:	3310      	adds	r3, #16
 80017ee:	460a      	mov	r2, r1
 80017f0:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ",Hitachi_Init_st[Source_Index].Des_Addr);
 80017f2:	78bb      	ldrb	r3, [r7, #2]
 80017f4:	4a7d      	ldr	r2, [pc, #500]	; (80019ec <Init_Msg_extr+0x41c>)
 80017f6:	015b      	lsls	r3, r3, #5
 80017f8:	4413      	add	r3, r2
 80017fa:	3310      	adds	r3, #16
 80017fc:	881b      	ldrh	r3, [r3, #0]
 80017fe:	4619      	mov	r1, r3
 8001800:	487b      	ldr	r0, [pc, #492]	; (80019f0 <Init_Msg_extr+0x420>)
 8001802:	f020 fd53 	bl	80222ac <iprintf>
	BITSTUFFINC(16);
 8001806:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 800180a:	3310      	adds	r3, #16
 800180c:	2b00      	cmp	r3, #0
 800180e:	da00      	bge.n	8001812 <Init_Msg_extr+0x242>
 8001810:	3307      	adds	r3, #7
 8001812:	10db      	asrs	r3, r3, #3
 8001814:	b29a      	uxth	r2, r3
 8001816:	8bfb      	ldrh	r3, [r7, #30]
 8001818:	4413      	add	r3, r2
 800181a:	83fb      	strh	r3, [r7, #30]
 800181c:	8bbb      	ldrh	r3, [r7, #28]
 800181e:	3310      	adds	r3, #16
 8001820:	b29b      	uxth	r3, r3
 8001822:	b21b      	sxth	r3, r3
 8001824:	425a      	negs	r2, r3
 8001826:	f003 0307 	and.w	r3, r3, #7
 800182a:	f002 0207 	and.w	r2, r2, #7
 800182e:	bf58      	it	pl
 8001830:	4253      	negpl	r3, r2
 8001832:	b21b      	sxth	r3, r3
 8001834:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001836:	8bfb      	ldrh	r3, [r7, #30]
 8001838:	687a      	ldr	r2, [r7, #4]
 800183a:	441a      	add	r2, r3
 800183c:	8bbb      	ldrh	r3, [r7, #28]
 800183e:	2110      	movs	r1, #16
 8001840:	4618      	mov	r0, r3
 8001842:	f7fe fee7 	bl	8000614 <ExtractBits>
 8001846:	4602      	mov	r2, r0
 8001848:	78bb      	ldrb	r3, [r7, #2]
 800184a:	b291      	uxth	r1, r2
 800184c:	4a67      	ldr	r2, [pc, #412]	; (80019ec <Init_Msg_extr+0x41c>)
 800184e:	015b      	lsls	r3, r3, #5
 8001850:	4413      	add	r3, r2
 8001852:	330e      	adds	r3, #14
 8001854:	460a      	mov	r2, r1
 8001856:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ",Hitachi_Init_st[Source_Index].Src_Addr);
 8001858:	78bb      	ldrb	r3, [r7, #2]
 800185a:	4a64      	ldr	r2, [pc, #400]	; (80019ec <Init_Msg_extr+0x41c>)
 800185c:	015b      	lsls	r3, r3, #5
 800185e:	4413      	add	r3, r2
 8001860:	330e      	adds	r3, #14
 8001862:	881b      	ldrh	r3, [r3, #0]
 8001864:	4619      	mov	r1, r3
 8001866:	4863      	ldr	r0, [pc, #396]	; (80019f4 <Init_Msg_extr+0x424>)
 8001868:	f020 fd20 	bl	80222ac <iprintf>
	BITSTUFFINC(16);
 800186c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001870:	3310      	adds	r3, #16
 8001872:	2b00      	cmp	r3, #0
 8001874:	da00      	bge.n	8001878 <Init_Msg_extr+0x2a8>
 8001876:	3307      	adds	r3, #7
 8001878:	10db      	asrs	r3, r3, #3
 800187a:	b29a      	uxth	r2, r3
 800187c:	8bfb      	ldrh	r3, [r7, #30]
 800187e:	4413      	add	r3, r2
 8001880:	83fb      	strh	r3, [r7, #30]
 8001882:	8bbb      	ldrh	r3, [r7, #28]
 8001884:	3310      	adds	r3, #16
 8001886:	b29b      	uxth	r3, r3
 8001888:	b21b      	sxth	r3, r3
 800188a:	425a      	negs	r2, r3
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	f002 0207 	and.w	r2, r2, #7
 8001894:	bf58      	it	pl
 8001896:	4253      	negpl	r3, r2
 8001898:	b21b      	sxth	r3, r3
 800189a:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800189c:	8bfb      	ldrh	r3, [r7, #30]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	441a      	add	r2, r3
 80018a2:	8bbb      	ldrh	r3, [r7, #28]
 80018a4:	2108      	movs	r1, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f7fe feb4 	bl	8000614 <ExtractBits>
 80018ac:	4602      	mov	r2, r0
 80018ae:	78bb      	ldrb	r3, [r7, #2]
 80018b0:	b2d1      	uxtb	r1, r2
 80018b2:	4a4e      	ldr	r2, [pc, #312]	; (80019ec <Init_Msg_extr+0x41c>)
 80018b4:	015b      	lsls	r3, r3, #5
 80018b6:	4413      	add	r3, r2
 80018b8:	460a      	mov	r2, r1
 80018ba:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",Hitachi_Init_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 80018bc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80018c0:	3308      	adds	r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	da00      	bge.n	80018c8 <Init_Msg_extr+0x2f8>
 80018c6:	3307      	adds	r3, #7
 80018c8:	10db      	asrs	r3, r3, #3
 80018ca:	b29a      	uxth	r2, r3
 80018cc:	8bfb      	ldrh	r3, [r7, #30]
 80018ce:	4413      	add	r3, r2
 80018d0:	83fb      	strh	r3, [r7, #30]
 80018d2:	8bbb      	ldrh	r3, [r7, #28]
 80018d4:	3308      	adds	r3, #8
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	b21b      	sxth	r3, r3
 80018da:	425a      	negs	r2, r3
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	f002 0207 	and.w	r2, r2, #7
 80018e4:	bf58      	it	pl
 80018e6:	4253      	negpl	r3, r2
 80018e8:	b21b      	sxth	r3, r3
 80018ea:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80018ec:	8bfb      	ldrh	r3, [r7, #30]
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	441a      	add	r2, r3
 80018f2:	8bbb      	ldrh	r3, [r7, #28]
 80018f4:	2108      	movs	r1, #8
 80018f6:	4618      	mov	r0, r3
 80018f8:	f7fe fe8c 	bl	8000614 <ExtractBits>
 80018fc:	4602      	mov	r2, r0
 80018fe:	78bb      	ldrb	r3, [r7, #2]
 8001900:	b2d1      	uxtb	r1, r2
 8001902:	4a3a      	ldr	r2, [pc, #232]	; (80019ec <Init_Msg_extr+0x41c>)
 8001904:	015b      	lsls	r3, r3, #5
 8001906:	4413      	add	r3, r2
 8001908:	3301      	adds	r3, #1
 800190a:	460a      	mov	r2, r1
 800190c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_Init_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 800190e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001912:	3308      	adds	r3, #8
 8001914:	2b00      	cmp	r3, #0
 8001916:	da00      	bge.n	800191a <Init_Msg_extr+0x34a>
 8001918:	3307      	adds	r3, #7
 800191a:	10db      	asrs	r3, r3, #3
 800191c:	b29a      	uxth	r2, r3
 800191e:	8bfb      	ldrh	r3, [r7, #30]
 8001920:	4413      	add	r3, r2
 8001922:	83fb      	strh	r3, [r7, #30]
 8001924:	8bbb      	ldrh	r3, [r7, #28]
 8001926:	3308      	adds	r3, #8
 8001928:	b29b      	uxth	r3, r3
 800192a:	b21b      	sxth	r3, r3
 800192c:	425a      	negs	r2, r3
 800192e:	f003 0307 	and.w	r3, r3, #7
 8001932:	f002 0207 	and.w	r2, r2, #7
 8001936:	bf58      	it	pl
 8001938:	4253      	negpl	r3, r2
 800193a:	b21b      	sxth	r3, r3
 800193c:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800193e:	8bfb      	ldrh	r3, [r7, #30]
 8001940:	687a      	ldr	r2, [r7, #4]
 8001942:	441a      	add	r2, r3
 8001944:	8bbb      	ldrh	r3, [r7, #28]
 8001946:	2108      	movs	r1, #8
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fe63 	bl	8000614 <ExtractBits>
 800194e:	4602      	mov	r2, r0
 8001950:	78bb      	ldrb	r3, [r7, #2]
 8001952:	b2d1      	uxtb	r1, r2
 8001954:	4a25      	ldr	r2, [pc, #148]	; (80019ec <Init_Msg_extr+0x41c>)
 8001956:	015b      	lsls	r3, r3, #5
 8001958:	4413      	add	r3, r2
 800195a:	3302      	adds	r3, #2
 800195c:	460a      	mov	r2, r1
 800195e:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n", Hitachi_Init_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8001960:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001964:	3308      	adds	r3, #8
 8001966:	2b00      	cmp	r3, #0
 8001968:	da00      	bge.n	800196c <Init_Msg_extr+0x39c>
 800196a:	3307      	adds	r3, #7
 800196c:	10db      	asrs	r3, r3, #3
 800196e:	b29a      	uxth	r2, r3
 8001970:	8bfb      	ldrh	r3, [r7, #30]
 8001972:	4413      	add	r3, r2
 8001974:	83fb      	strh	r3, [r7, #30]
 8001976:	8bbb      	ldrh	r3, [r7, #28]
 8001978:	3308      	adds	r3, #8
 800197a:	b29b      	uxth	r3, r3
 800197c:	b21b      	sxth	r3, r3
 800197e:	425a      	negs	r2, r3
 8001980:	f003 0307 	and.w	r3, r3, #7
 8001984:	f002 0207 	and.w	r2, r2, #7
 8001988:	bf58      	it	pl
 800198a:	4253      	negpl	r3, r2
 800198c:	b21b      	sxth	r3, r3
 800198e:	83bb      	strh	r3, [r7, #28]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001990:	8bfb      	ldrh	r3, [r7, #30]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	441a      	add	r2, r3
 8001996:	8bbb      	ldrh	r3, [r7, #28]
 8001998:	2110      	movs	r1, #16
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fe3a 	bl	8000614 <ExtractBits>
 80019a0:	4602      	mov	r2, r0
 80019a2:	78bb      	ldrb	r3, [r7, #2]
 80019a4:	b291      	uxth	r1, r2
 80019a6:	4a14      	ldr	r2, [pc, #80]	; (80019f8 <Init_Msg_extr+0x428>)
 80019a8:	011b      	lsls	r3, r3, #4
 80019aa:	4413      	add	r3, r2
 80019ac:	3304      	adds	r3, #4
 80019ae:	460a      	mov	r2, r1
 80019b0:	801a      	strh	r2, [r3, #0]
	BITSTUFFINC(16);
 80019b2:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80019b6:	3310      	adds	r3, #16
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	da1f      	bge.n	80019fc <Init_Msg_extr+0x42c>
 80019bc:	3307      	adds	r3, #7
 80019be:	e01d      	b.n	80019fc <Init_Msg_extr+0x42c>
 80019c0:	20001000 	.word	0x20001000
 80019c4:	20000304 	.word	0x20000304
 80019c8:	08023d3c 	.word	0x08023d3c
 80019cc:	08023d64 	.word	0x08023d64
 80019d0:	08023d78 	.word	0x08023d78
 80019d4:	08023a58 	.word	0x08023a58
 80019d8:	20000305 	.word	0x20000305
 80019dc:	20000fa4 	.word	0x20000fa4
 80019e0:	2000100c 	.word	0x2000100c
 80019e4:	2000108c 	.word	0x2000108c
 80019e8:	20001098 	.word	0x20001098
 80019ec:	20001264 	.word	0x20001264
 80019f0:	08023d8c 	.word	0x08023d8c
 80019f4:	08023d94 	.word	0x08023d94
 80019f8:	200011c4 	.word	0x200011c4
 80019fc:	10db      	asrs	r3, r3, #3
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	8bfb      	ldrh	r3, [r7, #30]
 8001a02:	4413      	add	r3, r2
 8001a04:	83fb      	strh	r3, [r7, #30]
 8001a06:	8bbb      	ldrh	r3, [r7, #28]
 8001a08:	3310      	adds	r3, #16
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	425a      	negs	r2, r3
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	f002 0207 	and.w	r2, r2, #7
 8001a18:	bf58      	it	pl
 8001a1a:	4253      	negpl	r3, r2
 8001a1c:	b21b      	sxth	r3, r3
 8001a1e:	83bb      	strh	r3, [r7, #28]
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Init_st[Source_Index].Msg_Type);

	if ( CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)== SET) // Time-stamp Extraction
 8001a20:	78bb      	ldrb	r3, [r7, #2]
 8001a22:	4a8e      	ldr	r2, [pc, #568]	; (8001c5c <Init_Msg_extr+0x68c>)
 8001a24:	011b      	lsls	r3, r3, #4
 8001a26:	4413      	add	r3, r2
 8001a28:	3304      	adds	r3, #4
 8001a2a:	881b      	ldrh	r3, [r3, #0]
 8001a2c:	f003 0320 	and.w	r3, r3, #32
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	f000 811d 	beq.w	8001c70 <Init_Msg_extr+0x6a0>
	{
		// printf("Time Included in the Data field\n");
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a36:	8bfb      	ldrh	r3, [r7, #30]
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	441a      	add	r2, r3
 8001a3c:	8bbb      	ldrh	r3, [r7, #28]
 8001a3e:	2108      	movs	r1, #8
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7fe fde7 	bl	8000614 <ExtractBits>
 8001a46:	4603      	mov	r3, r0
 8001a48:	78ba      	ldrb	r2, [r7, #2]
 8001a4a:	b2d8      	uxtb	r0, r3
 8001a4c:	4984      	ldr	r1, [pc, #528]	; (8001c60 <Init_Msg_extr+0x690>)
 8001a4e:	4613      	mov	r3, r2
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	4413      	add	r3, r2
 8001a54:	005b      	lsls	r3, r3, #1
 8001a56:	440b      	add	r3, r1
 8001a58:	3305      	adds	r3, #5
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8001a5e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001a62:	3308      	adds	r3, #8
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	da00      	bge.n	8001a6a <Init_Msg_extr+0x49a>
 8001a68:	3307      	adds	r3, #7
 8001a6a:	10db      	asrs	r3, r3, #3
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	8bfb      	ldrh	r3, [r7, #30]
 8001a70:	4413      	add	r3, r2
 8001a72:	83fb      	strh	r3, [r7, #30]
 8001a74:	8bbb      	ldrh	r3, [r7, #28]
 8001a76:	3308      	adds	r3, #8
 8001a78:	b29b      	uxth	r3, r3
 8001a7a:	b21b      	sxth	r3, r3
 8001a7c:	425a      	negs	r2, r3
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	f002 0207 	and.w	r2, r2, #7
 8001a86:	bf58      	it	pl
 8001a88:	4253      	negpl	r3, r2
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	83bb      	strh	r3, [r7, #28]
		//printf("YEAR               :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001a8e:	8bfb      	ldrh	r3, [r7, #30]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	441a      	add	r2, r3
 8001a94:	8bbb      	ldrh	r3, [r7, #28]
 8001a96:	2108      	movs	r1, #8
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7fe fdbb 	bl	8000614 <ExtractBits>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	78ba      	ldrb	r2, [r7, #2]
 8001aa2:	b2d8      	uxtb	r0, r3
 8001aa4:	496e      	ldr	r1, [pc, #440]	; (8001c60 <Init_Msg_extr+0x690>)
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	005b      	lsls	r3, r3, #1
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	440b      	add	r3, r1
 8001ab0:	3304      	adds	r3, #4
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8001ab6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001aba:	3308      	adds	r3, #8
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	da00      	bge.n	8001ac2 <Init_Msg_extr+0x4f2>
 8001ac0:	3307      	adds	r3, #7
 8001ac2:	10db      	asrs	r3, r3, #3
 8001ac4:	b29a      	uxth	r2, r3
 8001ac6:	8bfb      	ldrh	r3, [r7, #30]
 8001ac8:	4413      	add	r3, r2
 8001aca:	83fb      	strh	r3, [r7, #30]
 8001acc:	8bbb      	ldrh	r3, [r7, #28]
 8001ace:	3308      	adds	r3, #8
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	b21b      	sxth	r3, r3
 8001ad4:	425a      	negs	r2, r3
 8001ad6:	f003 0307 	and.w	r3, r3, #7
 8001ada:	f002 0207 	and.w	r2, r2, #7
 8001ade:	bf58      	it	pl
 8001ae0:	4253      	negpl	r3, r2
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001ae6:	8bfb      	ldrh	r3, [r7, #30]
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	441a      	add	r2, r3
 8001aec:	8bbb      	ldrh	r3, [r7, #28]
 8001aee:	2108      	movs	r1, #8
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7fe fd8f 	bl	8000614 <ExtractBits>
 8001af6:	4603      	mov	r3, r0
 8001af8:	78ba      	ldrb	r2, [r7, #2]
 8001afa:	b2d8      	uxtb	r0, r3
 8001afc:	4958      	ldr	r1, [pc, #352]	; (8001c60 <Init_Msg_extr+0x690>)
 8001afe:	4613      	mov	r3, r2
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	4413      	add	r3, r2
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	440b      	add	r3, r1
 8001b08:	3303      	adds	r3, #3
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	701a      	strb	r2, [r3, #0]
		//printf("Day                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8001b0e:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b12:	3308      	adds	r3, #8
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	da00      	bge.n	8001b1a <Init_Msg_extr+0x54a>
 8001b18:	3307      	adds	r3, #7
 8001b1a:	10db      	asrs	r3, r3, #3
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	8bfb      	ldrh	r3, [r7, #30]
 8001b20:	4413      	add	r3, r2
 8001b22:	83fb      	strh	r3, [r7, #30]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	3308      	adds	r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	425a      	negs	r2, r3
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	f002 0207 	and.w	r2, r2, #7
 8001b36:	bf58      	it	pl
 8001b38:	4253      	negpl	r3, r2
 8001b3a:	b21b      	sxth	r3, r3
 8001b3c:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b3e:	8bfb      	ldrh	r3, [r7, #30]
 8001b40:	687a      	ldr	r2, [r7, #4]
 8001b42:	441a      	add	r2, r3
 8001b44:	8bbb      	ldrh	r3, [r7, #28]
 8001b46:	2108      	movs	r1, #8
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fd63 	bl	8000614 <ExtractBits>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	78ba      	ldrb	r2, [r7, #2]
 8001b52:	b2d8      	uxtb	r0, r3
 8001b54:	4942      	ldr	r1, [pc, #264]	; (8001c60 <Init_Msg_extr+0x690>)
 8001b56:	4613      	mov	r3, r2
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	4413      	add	r3, r2
 8001b5c:	005b      	lsls	r3, r3, #1
 8001b5e:	440b      	add	r3, r1
 8001b60:	4602      	mov	r2, r0
 8001b62:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8001b64:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001b68:	3308      	adds	r3, #8
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	da00      	bge.n	8001b70 <Init_Msg_extr+0x5a0>
 8001b6e:	3307      	adds	r3, #7
 8001b70:	10db      	asrs	r3, r3, #3
 8001b72:	b29a      	uxth	r2, r3
 8001b74:	8bfb      	ldrh	r3, [r7, #30]
 8001b76:	4413      	add	r3, r2
 8001b78:	83fb      	strh	r3, [r7, #30]
 8001b7a:	8bbb      	ldrh	r3, [r7, #28]
 8001b7c:	3308      	adds	r3, #8
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	b21b      	sxth	r3, r3
 8001b82:	425a      	negs	r2, r3
 8001b84:	f003 0307 	and.w	r3, r3, #7
 8001b88:	f002 0207 	and.w	r2, r2, #7
 8001b8c:	bf58      	it	pl
 8001b8e:	4253      	negpl	r3, r2
 8001b90:	b21b      	sxth	r3, r3
 8001b92:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001b94:	8bfb      	ldrh	r3, [r7, #30]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	441a      	add	r2, r3
 8001b9a:	8bbb      	ldrh	r3, [r7, #28]
 8001b9c:	2108      	movs	r1, #8
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd38 	bl	8000614 <ExtractBits>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	78ba      	ldrb	r2, [r7, #2]
 8001ba8:	b2d8      	uxtb	r0, r3
 8001baa:	492d      	ldr	r1, [pc, #180]	; (8001c60 <Init_Msg_extr+0x690>)
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	4602      	mov	r2, r0
 8001bba:	701a      	strb	r2, [r3, #0]
		//printf("MIN                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8001bbc:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001bc0:	3308      	adds	r3, #8
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	da00      	bge.n	8001bc8 <Init_Msg_extr+0x5f8>
 8001bc6:	3307      	adds	r3, #7
 8001bc8:	10db      	asrs	r3, r3, #3
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	8bfb      	ldrh	r3, [r7, #30]
 8001bce:	4413      	add	r3, r2
 8001bd0:	83fb      	strh	r3, [r7, #30]
 8001bd2:	8bbb      	ldrh	r3, [r7, #28]
 8001bd4:	3308      	adds	r3, #8
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	425a      	negs	r2, r3
 8001bdc:	f003 0307 	and.w	r3, r3, #7
 8001be0:	f002 0207 	and.w	r2, r2, #7
 8001be4:	bf58      	it	pl
 8001be6:	4253      	negpl	r3, r2
 8001be8:	b21b      	sxth	r3, r3
 8001bea:	83bb      	strh	r3, [r7, #28]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001bec:	8bfb      	ldrh	r3, [r7, #30]
 8001bee:	687a      	ldr	r2, [r7, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	8bbb      	ldrh	r3, [r7, #28]
 8001bf4:	2108      	movs	r1, #8
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fd0c 	bl	8000614 <ExtractBits>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	78ba      	ldrb	r2, [r7, #2]
 8001c00:	b2d8      	uxtb	r0, r3
 8001c02:	4917      	ldr	r1, [pc, #92]	; (8001c60 <Init_Msg_extr+0x690>)
 8001c04:	4613      	mov	r3, r2
 8001c06:	005b      	lsls	r3, r3, #1
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	440b      	add	r3, r1
 8001c0e:	3302      	adds	r3, #2
 8001c10:	4602      	mov	r2, r0
 8001c12:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :0x%02X\n",HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8001c14:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c18:	3308      	adds	r3, #8
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	da00      	bge.n	8001c20 <Init_Msg_extr+0x650>
 8001c1e:	3307      	adds	r3, #7
 8001c20:	10db      	asrs	r3, r3, #3
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	8bfb      	ldrh	r3, [r7, #30]
 8001c26:	4413      	add	r3, r2
 8001c28:	83fb      	strh	r3, [r7, #30]
 8001c2a:	8bbb      	ldrh	r3, [r7, #28]
 8001c2c:	3308      	adds	r3, #8
 8001c2e:	b29b      	uxth	r3, r3
 8001c30:	b21b      	sxth	r3, r3
 8001c32:	425a      	negs	r2, r3
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	f002 0207 	and.w	r2, r2, #7
 8001c3c:	bf58      	it	pl
 8001c3e:	4253      	negpl	r3, r2
 8001c40:	b21b      	sxth	r3, r3
 8001c42:	83bb      	strh	r3, [r7, #28]

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8001c44:	78bb      	ldrb	r3, [r7, #2]
 8001c46:	4618      	mov	r0, r3
 8001c48:	f006 fe00 	bl	800884c <IS_MLK_EIPC_TIME_MATCHING>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d00a      	beq.n	8001c68 <Init_Msg_extr+0x698>
 8001c52:	78bb      	ldrb	r3, [r7, #2]
 8001c54:	4a03      	ldr	r2, [pc, #12]	; (8001c64 <Init_Msg_extr+0x694>)
 8001c56:	2100      	movs	r1, #0
 8001c58:	54d1      	strb	r1, [r2, r3]
 8001c5a:	e009      	b.n	8001c70 <Init_Msg_extr+0x6a0>
 8001c5c:	200011c4 	.word	0x200011c4
 8001c60:	20001188 	.word	0x20001188
 8001c64:	200010d8 	.word	0x200010d8
 8001c68:	78bb      	ldrb	r3, [r7, #2]
 8001c6a:	4aa4      	ldr	r2, [pc, #656]	; (8001efc <Init_Msg_extr+0x92c>)
 8001c6c:	2101      	movs	r1, #1
 8001c6e:	54d1      	strb	r1, [r2, r3]
	}

	Hitachi_Init_st[Source_Index].Init_Size = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001c70:	8bfb      	ldrh	r3, [r7, #30]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	441a      	add	r2, r3
 8001c76:	8bbb      	ldrh	r3, [r7, #28]
 8001c78:	2108      	movs	r1, #8
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe fcca 	bl	8000614 <ExtractBits>
 8001c80:	4602      	mov	r2, r0
 8001c82:	78bb      	ldrb	r3, [r7, #2]
 8001c84:	b2d1      	uxtb	r1, r2
 8001c86:	4a9e      	ldr	r2, [pc, #632]	; (8001f00 <Init_Msg_extr+0x930>)
 8001c88:	015b      	lsls	r3, r3, #5
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3303      	adds	r3, #3
 8001c8e:	460a      	mov	r2, r1
 8001c90:	701a      	strb	r2, [r3, #0]
	//printf("sizofInitData      :0x%02X\n", Hitachi_Init_st[Source_Index].Init_Size);
	BITSTUFFINC(8);
 8001c92:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001c96:	3308      	adds	r3, #8
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	da00      	bge.n	8001c9e <Init_Msg_extr+0x6ce>
 8001c9c:	3307      	adds	r3, #7
 8001c9e:	10db      	asrs	r3, r3, #3
 8001ca0:	b29a      	uxth	r2, r3
 8001ca2:	8bfb      	ldrh	r3, [r7, #30]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	83fb      	strh	r3, [r7, #30]
 8001ca8:	8bbb      	ldrh	r3, [r7, #28]
 8001caa:	3308      	adds	r3, #8
 8001cac:	b29b      	uxth	r3, r3
 8001cae:	b21b      	sxth	r3, r3
 8001cb0:	425a      	negs	r2, r3
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	f002 0207 	and.w	r2, r2, #7
 8001cba:	bf58      	it	pl
 8001cbc:	4253      	negpl	r3, r2
 8001cbe:	b21b      	sxth	r3, r3
 8001cc0:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Protocol_Ver = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001cc2:	8bfb      	ldrh	r3, [r7, #30]
 8001cc4:	687a      	ldr	r2, [r7, #4]
 8001cc6:	441a      	add	r2, r3
 8001cc8:	8bbb      	ldrh	r3, [r7, #28]
 8001cca:	2110      	movs	r1, #16
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7fe fca1 	bl	8000614 <ExtractBits>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	78bb      	ldrb	r3, [r7, #2]
 8001cd6:	b291      	uxth	r1, r2
 8001cd8:	4a89      	ldr	r2, [pc, #548]	; (8001f00 <Init_Msg_extr+0x930>)
 8001cda:	015b      	lsls	r3, r3, #5
 8001cdc:	4413      	add	r3, r2
 8001cde:	3312      	adds	r3, #18
 8001ce0:	460a      	mov	r2, r1
 8001ce2:	801a      	strh	r2, [r3, #0]
	//printf("Protocol_Ver       :0x%04X\n",Hitachi_Init_st[Source_Index].Protocol_Ver);
	BITSTUFFINC(16);
 8001ce4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ce8:	3310      	adds	r3, #16
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	da00      	bge.n	8001cf0 <Init_Msg_extr+0x720>
 8001cee:	3307      	adds	r3, #7
 8001cf0:	10db      	asrs	r3, r3, #3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	8bfb      	ldrh	r3, [r7, #30]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	83fb      	strh	r3, [r7, #30]
 8001cfa:	8bbb      	ldrh	r3, [r7, #28]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	b29b      	uxth	r3, r3
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	f002 0207 	and.w	r2, r2, #7
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	b21b      	sxth	r3, r3
 8001d12:	83bb      	strh	r3, [r7, #28]

	memcpy(Hitachi_Init_st[Source_Index].Exe_Ver,&Buff[ucByte],6);
 8001d14:	78bb      	ldrb	r3, [r7, #2]
 8001d16:	015b      	lsls	r3, r3, #5
 8001d18:	4a79      	ldr	r2, [pc, #484]	; (8001f00 <Init_Msg_extr+0x930>)
 8001d1a:	4413      	add	r3, r2
 8001d1c:	1d18      	adds	r0, r3, #4
 8001d1e:	8bfb      	ldrh	r3, [r7, #30]
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	2206      	movs	r2, #6
 8001d26:	4619      	mov	r1, r3
 8001d28:	f020 f9b0 	bl	802208c <memcpy>
	//	printf("Executive Version  :0x%02X%02X%02X%02X%02X%02X\n",Hitachi_Init_st[Source_Index].Exe_Ver[0],Hitachi_Init_st[Source_Index].Exe_Ver[1],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[2],Hitachi_Init_st[Source_Index].Exe_Ver[3],
	//			Hitachi_Init_st[Source_Index].Exe_Ver[4],Hitachi_Init_st[Source_Index].Exe_Ver[5]);

	BITSTUFFINC(16);
 8001d2c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d30:	3310      	adds	r3, #16
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	da00      	bge.n	8001d38 <Init_Msg_extr+0x768>
 8001d36:	3307      	adds	r3, #7
 8001d38:	10db      	asrs	r3, r3, #3
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	8bfb      	ldrh	r3, [r7, #30]
 8001d3e:	4413      	add	r3, r2
 8001d40:	83fb      	strh	r3, [r7, #30]
 8001d42:	8bbb      	ldrh	r3, [r7, #28]
 8001d44:	3310      	adds	r3, #16
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	b21b      	sxth	r3, r3
 8001d4a:	425a      	negs	r2, r3
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	f002 0207 	and.w	r2, r2, #7
 8001d54:	bf58      	it	pl
 8001d56:	4253      	negpl	r3, r2
 8001d58:	b21b      	sxth	r3, r3
 8001d5a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d5c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d60:	3310      	adds	r3, #16
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	da00      	bge.n	8001d68 <Init_Msg_extr+0x798>
 8001d66:	3307      	adds	r3, #7
 8001d68:	10db      	asrs	r3, r3, #3
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	8bfb      	ldrh	r3, [r7, #30]
 8001d6e:	4413      	add	r3, r2
 8001d70:	83fb      	strh	r3, [r7, #30]
 8001d72:	8bbb      	ldrh	r3, [r7, #28]
 8001d74:	3310      	adds	r3, #16
 8001d76:	b29b      	uxth	r3, r3
 8001d78:	b21b      	sxth	r3, r3
 8001d7a:	425a      	negs	r2, r3
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	f002 0207 	and.w	r2, r2, #7
 8001d84:	bf58      	it	pl
 8001d86:	4253      	negpl	r3, r2
 8001d88:	b21b      	sxth	r3, r3
 8001d8a:	83bb      	strh	r3, [r7, #28]
	BITSTUFFINC(16);
 8001d8c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001d90:	3310      	adds	r3, #16
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da00      	bge.n	8001d98 <Init_Msg_extr+0x7c8>
 8001d96:	3307      	adds	r3, #7
 8001d98:	10db      	asrs	r3, r3, #3
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	8bfb      	ldrh	r3, [r7, #30]
 8001d9e:	4413      	add	r3, r2
 8001da0:	83fb      	strh	r3, [r7, #30]
 8001da2:	8bbb      	ldrh	r3, [r7, #28]
 8001da4:	3310      	adds	r3, #16
 8001da6:	b29b      	uxth	r3, r3
 8001da8:	b21b      	sxth	r3, r3
 8001daa:	425a      	negs	r2, r3
 8001dac:	f003 0307 	and.w	r3, r3, #7
 8001db0:	f002 0207 	and.w	r2, r2, #7
 8001db4:	bf58      	it	pl
 8001db6:	4253      	negpl	r3, r2
 8001db8:	b21b      	sxth	r3, r3
 8001dba:	83bb      	strh	r3, [r7, #28]
	// printf("Skip Exe_ver\n");

	Hitachi_Init_st[Source_Index].App_comp = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001dbc:	8bfb      	ldrh	r3, [r7, #30]
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	8bbb      	ldrh	r3, [r7, #28]
 8001dc4:	2110      	movs	r1, #16
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7fe fc24 	bl	8000614 <ExtractBits>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	b291      	uxth	r1, r2
 8001dd2:	4a4b      	ldr	r2, [pc, #300]	; (8001f00 <Init_Msg_extr+0x930>)
 8001dd4:	015b      	lsls	r3, r3, #5
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3314      	adds	r3, #20
 8001dda:	460a      	mov	r2, r1
 8001ddc:	801a      	strh	r2, [r3, #0]
	//printf("Application_comp   :0x%04X\n",Hitachi_Init_st[Source_Index].App_comp);
	BITSTUFFINC(16);
 8001dde:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001de2:	3310      	adds	r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	da00      	bge.n	8001dea <Init_Msg_extr+0x81a>
 8001de8:	3307      	adds	r3, #7
 8001dea:	10db      	asrs	r3, r3, #3
 8001dec:	b29a      	uxth	r2, r3
 8001dee:	8bfb      	ldrh	r3, [r7, #30]
 8001df0:	4413      	add	r3, r2
 8001df2:	83fb      	strh	r3, [r7, #30]
 8001df4:	8bbb      	ldrh	r3, [r7, #28]
 8001df6:	3310      	adds	r3, #16
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	f003 0307 	and.w	r3, r3, #7
 8001e02:	f002 0207 	and.w	r2, r2, #7
 8001e06:	bf58      	it	pl
 8001e08:	4253      	negpl	r3, r2
 8001e0a:	b21b      	sxth	r3, r3
 8001e0c:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Exe_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e0e:	8bfb      	ldrh	r3, [r7, #30]
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	441a      	add	r2, r3
 8001e14:	8bbb      	ldrh	r3, [r7, #28]
 8001e16:	2110      	movs	r1, #16
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7fe fbfb 	bl	8000614 <ExtractBits>
 8001e1e:	4602      	mov	r2, r0
 8001e20:	78bb      	ldrb	r3, [r7, #2]
 8001e22:	b291      	uxth	r1, r2
 8001e24:	4a36      	ldr	r2, [pc, #216]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e26:	015b      	lsls	r3, r3, #5
 8001e28:	4413      	add	r3, r2
 8001e2a:	3316      	adds	r3, #22
 8001e2c:	460a      	mov	r2, r1
 8001e2e:	801a      	strh	r2, [r3, #0]
	//	printf("Executive_Idty_CRC :0x%04X\n",Hitachi_Init_st[Source_Index].Exe_Idty_CRC);
	BITSTUFFINC(16);
 8001e30:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e34:	3310      	adds	r3, #16
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	da00      	bge.n	8001e3c <Init_Msg_extr+0x86c>
 8001e3a:	3307      	adds	r3, #7
 8001e3c:	10db      	asrs	r3, r3, #3
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	8bfb      	ldrh	r3, [r7, #30]
 8001e42:	4413      	add	r3, r2
 8001e44:	83fb      	strh	r3, [r7, #30]
 8001e46:	8bbb      	ldrh	r3, [r7, #28]
 8001e48:	3310      	adds	r3, #16
 8001e4a:	b29b      	uxth	r3, r3
 8001e4c:	b21b      	sxth	r3, r3
 8001e4e:	425a      	negs	r2, r3
 8001e50:	f003 0307 	and.w	r3, r3, #7
 8001e54:	f002 0207 	and.w	r2, r2, #7
 8001e58:	bf58      	it	pl
 8001e5a:	4253      	negpl	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].App_Idty_CRC = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8001e60:	8bfb      	ldrh	r3, [r7, #30]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	441a      	add	r2, r3
 8001e66:	8bbb      	ldrh	r3, [r7, #28]
 8001e68:	2110      	movs	r1, #16
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f7fe fbd2 	bl	8000614 <ExtractBits>
 8001e70:	4602      	mov	r2, r0
 8001e72:	78bb      	ldrb	r3, [r7, #2]
 8001e74:	b291      	uxth	r1, r2
 8001e76:	4a22      	ldr	r2, [pc, #136]	; (8001f00 <Init_Msg_extr+0x930>)
 8001e78:	015b      	lsls	r3, r3, #5
 8001e7a:	4413      	add	r3, r2
 8001e7c:	3318      	adds	r3, #24
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]
	//printf("App_Idty_CRC       :%04u\n",Hitachi_Init_st[Source_Index].App_Idty_CRC);
	BITSTUFFINC(16);
 8001e82:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001e86:	3310      	adds	r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	da00      	bge.n	8001e8e <Init_Msg_extr+0x8be>
 8001e8c:	3307      	adds	r3, #7
 8001e8e:	10db      	asrs	r3, r3, #3
 8001e90:	b29a      	uxth	r2, r3
 8001e92:	8bfb      	ldrh	r3, [r7, #30]
 8001e94:	4413      	add	r3, r2
 8001e96:	83fb      	strh	r3, [r7, #30]
 8001e98:	8bbb      	ldrh	r3, [r7, #28]
 8001e9a:	3310      	adds	r3, #16
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	425a      	negs	r2, r3
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	f002 0207 	and.w	r2, r2, #7
 8001eaa:	bf58      	it	pl
 8001eac:	4253      	negpl	r3, r2
 8001eae:	b21b      	sxth	r3, r3
 8001eb0:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ExtractBits(ucBit, 24, (unsigned char *)&Buff[ucByte]);
 8001eb2:	8bfb      	ldrh	r3, [r7, #30]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	78bc      	ldrb	r4, [r7, #2]
 8001eba:	8bbb      	ldrh	r3, [r7, #28]
 8001ebc:	2118      	movs	r1, #24
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fba8 	bl	8000614 <ExtractBits>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	490f      	ldr	r1, [pc, #60]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ec8:	0123      	lsls	r3, r4, #4
 8001eca:	440b      	add	r3, r1
 8001ecc:	3308      	adds	r3, #8
 8001ece:	601a      	str	r2, [r3, #0]
	//printf("Vital_CRC_Init_Val :0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
	Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8001ed0:	78bb      	ldrb	r3, [r7, #2]
 8001ed2:	78ba      	ldrb	r2, [r7, #2]
 8001ed4:	490b      	ldr	r1, [pc, #44]	; (8001f04 <Init_Msg_extr+0x934>)
 8001ed6:	011b      	lsls	r3, r3, #4
 8001ed8:	440b      	add	r3, r1
 8001eda:	3308      	adds	r3, #8
 8001edc:	6819      	ldr	r1, [r3, #0]
 8001ede:	480a      	ldr	r0, [pc, #40]	; (8001f08 <Init_Msg_extr+0x938>)
 8001ee0:	4613      	mov	r3, r2
 8001ee2:	005b      	lsls	r3, r3, #1
 8001ee4:	4413      	add	r3, r2
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4403      	add	r3, r0
 8001eea:	3308      	adds	r3, #8
 8001eec:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8001eee:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ef2:	3318      	adds	r3, #24
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	da09      	bge.n	8001f0c <Init_Msg_extr+0x93c>
 8001ef8:	3307      	adds	r3, #7
 8001efa:	e007      	b.n	8001f0c <Init_Msg_extr+0x93c>
 8001efc:	200010d8 	.word	0x200010d8
 8001f00:	20001264 	.word	0x20001264
 8001f04:	200011c4 	.word	0x200011c4
 8001f08:	20001674 	.word	0x20001674
 8001f0c:	10db      	asrs	r3, r3, #3
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	8bfb      	ldrh	r3, [r7, #30]
 8001f12:	4413      	add	r3, r2
 8001f14:	83fb      	strh	r3, [r7, #30]
 8001f16:	8bbb      	ldrh	r3, [r7, #28]
 8001f18:	3318      	adds	r3, #24
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	b21b      	sxth	r3, r3
 8001f1e:	425a      	negs	r2, r3
 8001f20:	f003 0307 	and.w	r3, r3, #7
 8001f24:	f002 0207 	and.w	r2, r2, #7
 8001f28:	bf58      	it	pl
 8001f2a:	4253      	negpl	r3, r2
 8001f2c:	b21b      	sxth	r3, r3
 8001f2e:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Seq_Init_Value = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f30:	8bfb      	ldrh	r3, [r7, #30]
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	441a      	add	r2, r3
 8001f36:	8bbb      	ldrh	r3, [r7, #28]
 8001f38:	2108      	movs	r1, #8
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7fe fb6a 	bl	8000614 <ExtractBits>
 8001f40:	4602      	mov	r2, r0
 8001f42:	78bb      	ldrb	r3, [r7, #2]
 8001f44:	b2d1      	uxtb	r1, r2
 8001f46:	4ab1      	ldr	r2, [pc, #708]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f48:	011b      	lsls	r3, r3, #4
 8001f4a:	4413      	add	r3, r2
 8001f4c:	460a      	mov	r2, r1
 8001f4e:	701a      	strb	r2, [r3, #0]
	Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value;
 8001f50:	78ba      	ldrb	r2, [r7, #2]
 8001f52:	78bb      	ldrb	r3, [r7, #2]
 8001f54:	49ad      	ldr	r1, [pc, #692]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f56:	0112      	lsls	r2, r2, #4
 8001f58:	440a      	add	r2, r1
 8001f5a:	7811      	ldrb	r1, [r2, #0]
 8001f5c:	4aab      	ldr	r2, [pc, #684]	; (800220c <Init_Msg_extr+0xc3c>)
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	4413      	add	r3, r2
 8001f62:	3302      	adds	r3, #2
 8001f64:	460a      	mov	r2, r1
 8001f66:	701a      	strb	r2, [r3, #0]
	//printf("Seq_Init_Val       :%u\n",Hitachi_prms_st[Source_Index].Seq_Init_Value);
	BITSTUFFINC(8);
 8001f68:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001f6c:	3308      	adds	r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	da00      	bge.n	8001f74 <Init_Msg_extr+0x9a4>
 8001f72:	3307      	adds	r3, #7
 8001f74:	10db      	asrs	r3, r3, #3
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	8bfb      	ldrh	r3, [r7, #30]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	83fb      	strh	r3, [r7, #30]
 8001f7e:	8bbb      	ldrh	r3, [r7, #28]
 8001f80:	3308      	adds	r3, #8
 8001f82:	b29b      	uxth	r3, r3
 8001f84:	b21b      	sxth	r3, r3
 8001f86:	425a      	negs	r2, r3
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	f002 0207 	and.w	r2, r2, #7
 8001f90:	bf58      	it	pl
 8001f92:	4253      	negpl	r3, r2
 8001f94:	b21b      	sxth	r3, r3
 8001f96:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].V_NV_Flag = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001f98:	8bfb      	ldrh	r3, [r7, #30]
 8001f9a:	687a      	ldr	r2, [r7, #4]
 8001f9c:	441a      	add	r2, r3
 8001f9e:	8bbb      	ldrh	r3, [r7, #28]
 8001fa0:	2108      	movs	r1, #8
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7fe fb36 	bl	8000614 <ExtractBits>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	b2d1      	uxtb	r1, r2
 8001fae:	4a98      	ldr	r2, [pc, #608]	; (8002210 <Init_Msg_extr+0xc40>)
 8001fb0:	015b      	lsls	r3, r3, #5
 8001fb2:	4413      	add	r3, r2
 8001fb4:	330a      	adds	r3, #10
 8001fb6:	460a      	mov	r2, r1
 8001fb8:	701a      	strb	r2, [r3, #0]
	//printf("V_NV_Flag          :%u\n",Hitachi_Init_st[Source_Index].V_NV_Flag);
	BITSTUFFINC(8);
 8001fba:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001fbe:	3308      	adds	r3, #8
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	da00      	bge.n	8001fc6 <Init_Msg_extr+0x9f6>
 8001fc4:	3307      	adds	r3, #7
 8001fc6:	10db      	asrs	r3, r3, #3
 8001fc8:	b29a      	uxth	r2, r3
 8001fca:	8bfb      	ldrh	r3, [r7, #30]
 8001fcc:	4413      	add	r3, r2
 8001fce:	83fb      	strh	r3, [r7, #30]
 8001fd0:	8bbb      	ldrh	r3, [r7, #28]
 8001fd2:	3308      	adds	r3, #8
 8001fd4:	b29b      	uxth	r3, r3
 8001fd6:	b21b      	sxth	r3, r3
 8001fd8:	425a      	negs	r2, r3
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	f002 0207 	and.w	r2, r2, #7
 8001fe2:	bf58      	it	pl
 8001fe4:	4253      	negpl	r3, r2
 8001fe6:	b21b      	sxth	r3, r3
 8001fe8:	83bb      	strh	r3, [r7, #28]

	Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8001fea:	8bfb      	ldrh	r3, [r7, #30]
 8001fec:	687a      	ldr	r2, [r7, #4]
 8001fee:	441a      	add	r2, r3
 8001ff0:	8bbb      	ldrh	r3, [r7, #28]
 8001ff2:	2108      	movs	r1, #8
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe fb0d 	bl	8000614 <ExtractBits>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	78bb      	ldrb	r3, [r7, #2]
 8001ffe:	b2d1      	uxtb	r1, r2
 8002000:	4a82      	ldr	r2, [pc, #520]	; (800220c <Init_Msg_extr+0xc3c>)
 8002002:	011b      	lsls	r3, r3, #4
 8002004:	4413      	add	r3, r2
 8002006:	3303      	adds	r3, #3
 8002008:	460a      	mov	r2, r1
 800200a:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Bool_V_Data     :%u\n", Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
	BITSTUFFINC(8);
 800200c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002010:	3308      	adds	r3, #8
 8002012:	2b00      	cmp	r3, #0
 8002014:	da00      	bge.n	8002018 <Init_Msg_extr+0xa48>
 8002016:	3307      	adds	r3, #7
 8002018:	10db      	asrs	r3, r3, #3
 800201a:	b29a      	uxth	r2, r3
 800201c:	8bfb      	ldrh	r3, [r7, #30]
 800201e:	4413      	add	r3, r2
 8002020:	83fb      	strh	r3, [r7, #30]
 8002022:	8bbb      	ldrh	r3, [r7, #28]
 8002024:	3308      	adds	r3, #8
 8002026:	b29b      	uxth	r3, r3
 8002028:	b21b      	sxth	r3, r3
 800202a:	425a      	negs	r2, r3
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	f002 0207 	and.w	r2, r2, #7
 8002034:	bf58      	it	pl
 8002036:	4253      	negpl	r3, r2
 8002038:	b21b      	sxth	r3, r3
 800203a:	83bb      	strh	r3, [r7, #28]




	if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA != EI_data.Hitachi_st.Bool_outputs[Source_Index])
 800203c:	78bb      	ldrb	r3, [r7, #2]
 800203e:	4a73      	ldr	r2, [pc, #460]	; (800220c <Init_Msg_extr+0xc3c>)
 8002040:	011b      	lsls	r3, r3, #4
 8002042:	4413      	add	r3, r2
 8002044:	3303      	adds	r3, #3
 8002046:	781a      	ldrb	r2, [r3, #0]
 8002048:	78bb      	ldrb	r3, [r7, #2]
 800204a:	4972      	ldr	r1, [pc, #456]	; (8002214 <Init_Msg_extr+0xc44>)
 800204c:	440b      	add	r3, r1
 800204e:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002052:	429a      	cmp	r2, r3
 8002054:	d015      	beq.n	8002082 <Init_Msg_extr+0xab2>
	{
		printf("Vital Inputs Not Matching\n");
 8002056:	4870      	ldr	r0, [pc, #448]	; (8002218 <Init_Msg_extr+0xc48>)
 8002058:	f020 f9c4 	bl	80223e4 <puts>
		printf("Expected Inputs:%u\n",EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 800205c:	78bb      	ldrb	r3, [r7, #2]
 800205e:	4a6d      	ldr	r2, [pc, #436]	; (8002214 <Init_Msg_extr+0xc44>)
 8002060:	4413      	add	r3, r2
 8002062:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002066:	4619      	mov	r1, r3
 8002068:	486c      	ldr	r0, [pc, #432]	; (800221c <Init_Msg_extr+0xc4c>)
 800206a:	f020 f91f 	bl	80222ac <iprintf>
		printf("Received Inputs:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 800206e:	78bb      	ldrb	r3, [r7, #2]
 8002070:	4a66      	ldr	r2, [pc, #408]	; (800220c <Init_Msg_extr+0xc3c>)
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	4413      	add	r3, r2
 8002076:	3303      	adds	r3, #3
 8002078:	781b      	ldrb	r3, [r3, #0]
 800207a:	4619      	mov	r1, r3
 800207c:	4868      	ldr	r0, [pc, #416]	; (8002220 <Init_Msg_extr+0xc50>)
 800207e:	f020 f915 	bl	80222ac <iprintf>
	}

	Hitachi_Init_st[Source_Index].Sz_Num_Val_Data = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002082:	8bfb      	ldrh	r3, [r7, #30]
 8002084:	687a      	ldr	r2, [r7, #4]
 8002086:	441a      	add	r2, r3
 8002088:	8bbb      	ldrh	r3, [r7, #28]
 800208a:	2108      	movs	r1, #8
 800208c:	4618      	mov	r0, r3
 800208e:	f7fe fac1 	bl	8000614 <ExtractBits>
 8002092:	4602      	mov	r2, r0
 8002094:	78bb      	ldrb	r3, [r7, #2]
 8002096:	b2d1      	uxtb	r1, r2
 8002098:	4a5d      	ldr	r2, [pc, #372]	; (8002210 <Init_Msg_extr+0xc40>)
 800209a:	015b      	lsls	r3, r3, #5
 800209c:	4413      	add	r3, r2
 800209e:	330b      	adds	r3, #11
 80020a0:	460a      	mov	r2, r1
 80020a2:	701a      	strb	r2, [r3, #0]
	//printf("Sz_Num_Val_Data    :%u\n",Hitachi_Init_st[Source_Index].Sz_Num_Val_Data);
	BITSTUFFINC(8);
 80020a4:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020a8:	3308      	adds	r3, #8
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	da00      	bge.n	80020b0 <Init_Msg_extr+0xae0>
 80020ae:	3307      	adds	r3, #7
 80020b0:	10db      	asrs	r3, r3, #3
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	8bfb      	ldrh	r3, [r7, #30]
 80020b6:	4413      	add	r3, r2
 80020b8:	83fb      	strh	r3, [r7, #30]
 80020ba:	8bbb      	ldrh	r3, [r7, #28]
 80020bc:	3308      	adds	r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b21b      	sxth	r3, r3
 80020c2:	425a      	negs	r2, r3
 80020c4:	f003 0307 	and.w	r3, r3, #7
 80020c8:	f002 0207 	and.w	r2, r2, #7
 80020cc:	bf58      	it	pl
 80020ce:	4253      	negpl	r3, r2
 80020d0:	b21b      	sxth	r3, r3
 80020d2:	83bb      	strh	r3, [r7, #28]


	Hitachi_Init_st[Source_Index].Val_Bool_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80020d4:	8bfb      	ldrh	r3, [r7, #30]
 80020d6:	687a      	ldr	r2, [r7, #4]
 80020d8:	441a      	add	r2, r3
 80020da:	8bbb      	ldrh	r3, [r7, #28]
 80020dc:	2108      	movs	r1, #8
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa98 	bl	8000614 <ExtractBits>
 80020e4:	4602      	mov	r2, r0
 80020e6:	78bb      	ldrb	r3, [r7, #2]
 80020e8:	b2d1      	uxtb	r1, r2
 80020ea:	4a49      	ldr	r2, [pc, #292]	; (8002210 <Init_Msg_extr+0xc40>)
 80020ec:	015b      	lsls	r3, r3, #5
 80020ee:	4413      	add	r3, r2
 80020f0:	330c      	adds	r3, #12
 80020f2:	460a      	mov	r2, r1
 80020f4:	701a      	strb	r2, [r3, #0]
	//printf("Val_Bool_Ops       :%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
	BITSTUFFINC(8);
 80020f6:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80020fa:	3308      	adds	r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	da00      	bge.n	8002102 <Init_Msg_extr+0xb32>
 8002100:	3307      	adds	r3, #7
 8002102:	10db      	asrs	r3, r3, #3
 8002104:	b29a      	uxth	r2, r3
 8002106:	8bfb      	ldrh	r3, [r7, #30]
 8002108:	4413      	add	r3, r2
 800210a:	83fb      	strh	r3, [r7, #30]
 800210c:	8bbb      	ldrh	r3, [r7, #28]
 800210e:	3308      	adds	r3, #8
 8002110:	b29b      	uxth	r3, r3
 8002112:	b21b      	sxth	r3, r3
 8002114:	425a      	negs	r2, r3
 8002116:	f003 0307 	and.w	r3, r3, #7
 800211a:	f002 0207 	and.w	r2, r2, #7
 800211e:	bf58      	it	pl
 8002120:	4253      	negpl	r3, r2
 8002122:	b21b      	sxth	r3, r3
 8002124:	83bb      	strh	r3, [r7, #28]
	if(Hitachi_Init_st[Source_Index].Val_Bool_Ops != 1)
 8002126:	78bb      	ldrb	r3, [r7, #2]
 8002128:	4a39      	ldr	r2, [pc, #228]	; (8002210 <Init_Msg_extr+0xc40>)
 800212a:	015b      	lsls	r3, r3, #5
 800212c:	4413      	add	r3, r2
 800212e:	330c      	adds	r3, #12
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d00c      	beq.n	8002150 <Init_Msg_extr+0xb80>
	{
		printf("Transmitted size of Numerical Received:%u\n",Hitachi_Init_st[Source_Index].Val_Bool_Ops);
 8002136:	78bb      	ldrb	r3, [r7, #2]
 8002138:	4a35      	ldr	r2, [pc, #212]	; (8002210 <Init_Msg_extr+0xc40>)
 800213a:	015b      	lsls	r3, r3, #5
 800213c:	4413      	add	r3, r2
 800213e:	330c      	adds	r3, #12
 8002140:	781b      	ldrb	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4837      	ldr	r0, [pc, #220]	; (8002224 <Init_Msg_extr+0xc54>)
 8002146:	f020 f8b1 	bl	80222ac <iprintf>
		printf("This Value has to be \"1\"\n");
 800214a:	4837      	ldr	r0, [pc, #220]	; (8002228 <Init_Msg_extr+0xc58>)
 800214c:	f020 f94a 	bl	80223e4 <puts>
	}

	Hitachi_Init_st[Source_Index].Val_Num_Ops = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8002150:	8bfb      	ldrh	r3, [r7, #30]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	441a      	add	r2, r3
 8002156:	8bbb      	ldrh	r3, [r7, #28]
 8002158:	2108      	movs	r1, #8
 800215a:	4618      	mov	r0, r3
 800215c:	f7fe fa5a 	bl	8000614 <ExtractBits>
 8002160:	4602      	mov	r2, r0
 8002162:	78bb      	ldrb	r3, [r7, #2]
 8002164:	b2d1      	uxtb	r1, r2
 8002166:	4a2a      	ldr	r2, [pc, #168]	; (8002210 <Init_Msg_extr+0xc40>)
 8002168:	015b      	lsls	r3, r3, #5
 800216a:	4413      	add	r3, r2
 800216c:	330d      	adds	r3, #13
 800216e:	460a      	mov	r2, r1
 8002170:	701a      	strb	r2, [r3, #0]
	//printf("Val_Num_Ops        :%u\n",Hitachi_Init_st[Source_Index].Val_Num_Ops);
	BITSTUFFINC(8);
 8002172:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8002176:	3308      	adds	r3, #8
 8002178:	2b00      	cmp	r3, #0
 800217a:	da00      	bge.n	800217e <Init_Msg_extr+0xbae>
 800217c:	3307      	adds	r3, #7
 800217e:	10db      	asrs	r3, r3, #3
 8002180:	b29a      	uxth	r2, r3
 8002182:	8bfb      	ldrh	r3, [r7, #30]
 8002184:	4413      	add	r3, r2
 8002186:	83fb      	strh	r3, [r7, #30]
 8002188:	8bbb      	ldrh	r3, [r7, #28]
 800218a:	3308      	adds	r3, #8
 800218c:	b29b      	uxth	r3, r3
 800218e:	b21b      	sxth	r3, r3
 8002190:	425a      	negs	r2, r3
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	f002 0207 	and.w	r2, r2, #7
 800219a:	bf58      	it	pl
 800219c:	4253      	negpl	r3, r2
 800219e:	b21b      	sxth	r3, r3
 80021a0:	83bb      	strh	r3, [r7, #28]

	Hitachi_Init_st[Source_Index].Init_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[ucByte]);
 80021a2:	8bfb      	ldrh	r3, [r7, #30]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	441a      	add	r2, r3
 80021a8:	78bc      	ldrb	r4, [r7, #2]
 80021aa:	8bbb      	ldrh	r3, [r7, #28]
 80021ac:	2120      	movs	r1, #32
 80021ae:	4618      	mov	r0, r3
 80021b0:	f7fe fa30 	bl	8000614 <ExtractBits>
 80021b4:	4602      	mov	r2, r0
 80021b6:	4916      	ldr	r1, [pc, #88]	; (8002210 <Init_Msg_extr+0xc40>)
 80021b8:	0163      	lsls	r3, r4, #5
 80021ba:	440b      	add	r3, r1
 80021bc:	331c      	adds	r3, #28
 80021be:	601a      	str	r2, [r3, #0]
	//printf("Received CRC       :0x%08lX\n",Hitachi_Init_st[Source_Index].Init_CRC);
	BITSTUFFINC(32);
 80021c0:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80021c4:	3320      	adds	r3, #32
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	da00      	bge.n	80021cc <Init_Msg_extr+0xbfc>
 80021ca:	3307      	adds	r3, #7
 80021cc:	10db      	asrs	r3, r3, #3
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	8bfb      	ldrh	r3, [r7, #30]
 80021d2:	4413      	add	r3, r2
 80021d4:	83fb      	strh	r3, [r7, #30]
 80021d6:	8bbb      	ldrh	r3, [r7, #28]
 80021d8:	3320      	adds	r3, #32
 80021da:	b29b      	uxth	r3, r3
 80021dc:	b21b      	sxth	r3, r3
 80021de:	425a      	negs	r2, r3
 80021e0:	f003 0307 	and.w	r3, r3, #7
 80021e4:	f002 0207 	and.w	r2, r2, #7
 80021e8:	bf58      	it	pl
 80021ea:	4253      	negpl	r3, r2
 80021ec:	b21b      	sxth	r3, r3
 80021ee:	83bb      	strh	r3, [r7, #28]

	//Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);

	//printf("\n___________________________________ INIT-MSG ___________________________________\n");
	Send_Init_Msg(Source_Index,Des_Index);
 80021f0:	787a      	ldrb	r2, [r7, #1]
 80021f2:	78bb      	ldrb	r3, [r7, #2]
 80021f4:	4611      	mov	r1, r2
 80021f6:	4618      	mov	r0, r3
 80021f8:	f000 f86c 	bl	80022d4 <Send_Init_Msg>

	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 80021fc:	78ba      	ldrb	r2, [r7, #2]
 80021fe:	490b      	ldr	r1, [pc, #44]	; (800222c <Init_Msg_extr+0xc5c>)
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	00db      	lsls	r3, r3, #3
 8002208:	e012      	b.n	8002230 <Init_Msg_extr+0xc60>
 800220a:	bf00      	nop
 800220c:	200011c4 	.word	0x200011c4
 8002210:	20001264 	.word	0x20001264
 8002214:	20000304 	.word	0x20000304
 8002218:	08023d9c 	.word	0x08023d9c
 800221c:	08023d64 	.word	0x08023d64
 8002220:	08023d78 	.word	0x08023d78
 8002224:	08023db8 	.word	0x08023db8
 8002228:	08023de4 	.word	0x08023de4
 800222c:	20001674 	.word	0x20001674
 8002230:	440b      	add	r3, r1
 8002232:	3314      	adds	r3, #20
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = INIT_MSG;
 8002238:	78ba      	ldrb	r2, [r7, #2]
 800223a:	4923      	ldr	r1, [pc, #140]	; (80022c8 <Init_Msg_extr+0xcf8>)
 800223c:	4613      	mov	r3, r2
 800223e:	005b      	lsls	r3, r3, #1
 8002240:	4413      	add	r3, r2
 8002242:	00db      	lsls	r3, r3, #3
 8002244:	440b      	add	r3, r1
 8002246:	3305      	adds	r3, #5
 8002248:	2201      	movs	r2, #1
 800224a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 800224c:	78ba      	ldrb	r2, [r7, #2]
 800224e:	491e      	ldr	r1, [pc, #120]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	78ba      	ldrb	r2, [r7, #2]
 800225c:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 800225e:	78ba      	ldrb	r2, [r7, #2]
 8002260:	4919      	ldr	r1, [pc, #100]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002262:	4613      	mov	r3, r2
 8002264:	005b      	lsls	r3, r3, #1
 8002266:	4413      	add	r3, r2
 8002268:	00db      	lsls	r3, r3, #3
 800226a:	440b      	add	r3, r1
 800226c:	3301      	adds	r3, #1
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8002272:	2218      	movs	r2, #24
 8002274:	2100      	movs	r1, #0
 8002276:	4815      	ldr	r0, [pc, #84]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002278:	f01f ff30 	bl	80220dc <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 800227c:	78ba      	ldrb	r2, [r7, #2]
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4a10      	ldr	r2, [pc, #64]	; (80022c8 <Init_Msg_extr+0xcf8>)
 8002288:	4413      	add	r3, r2
 800228a:	2218      	movs	r2, #24
 800228c:	4619      	mov	r1, r3
 800228e:	480f      	ldr	r0, [pc, #60]	; (80022cc <Init_Msg_extr+0xcfc>)
 8002290:	f01f fefc 	bl	802208c <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
#endif

#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING); //for Immediate sharing of VItal CRC Init Value.
 8002294:	f240 2002 	movw	r0, #514	; 0x202
 8002298:	f00d f828 	bl	800f2ec <TransmitCanPkt>
#endif

	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 800229c:	78ba      	ldrb	r2, [r7, #2]
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <Init_Msg_extr+0xcf8>)
 80022a0:	4613      	mov	r3, r2
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	4413      	add	r3, r2
 80022a6:	00db      	lsls	r3, r3, #3
 80022a8:	440b      	add	r3, r1
 80022aa:	3301      	adds	r3, #1
 80022ac:	2200      	movs	r2, #0
 80022ae:	701a      	strb	r2, [r3, #0]

	Self_Sharing_CAN_Clk[Source_Index] = HAL_GetTick();
 80022b0:	78bc      	ldrb	r4, [r7, #2]
 80022b2:	f012 fff1 	bl	8015298 <HAL_GetTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	4a05      	ldr	r2, [pc, #20]	; (80022d0 <Init_Msg_extr+0xd00>)
 80022ba:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80022be:	e000      	b.n	80022c2 <Init_Msg_extr+0xcf2>
			return;
 80022c0:	bf00      	nop
}
 80022c2:	3724      	adds	r7, #36	; 0x24
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd90      	pop	{r4, r7, pc}
 80022c8:	20001674 	.word	0x20001674
 80022cc:	20001854 	.word	0x20001854
 80022d0:	20000e44 	.word	0x20000e44

080022d4 <Send_Init_Msg>:

void Send_Init_Msg(uint8_t Source_Index,uint8_t Des_Index)
{
 80022d4:	b590      	push	{r4, r7, lr}
 80022d6:	b097      	sub	sp, #92	; 0x5c
 80022d8:	af00      	add	r7, sp, #0
 80022da:	4603      	mov	r3, r0
 80022dc:	460a      	mov	r2, r1
 80022de:	71fb      	strb	r3, [r7, #7]
 80022e0:	4613      	mov	r3, r2
 80022e2:	71bb      	strb	r3, [r7, #6]

	uint8_t Transmit_Buff[60] = {0,};
 80022e4:	2300      	movs	r3, #0
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	f107 0310 	add.w	r3, r7, #16
 80022ec:	2238      	movs	r2, #56	; 0x38
 80022ee:	2100      	movs	r1, #0
 80022f0:	4618      	mov	r0, r3
 80022f2:	f01f fef3 	bl	80220dc <memset>
	uint32_t Calc_CRC = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	653b      	str	r3, [r7, #80]	; 0x50

	BITSTUFFINIT(0, 0);
 80022fa:	2300      	movs	r3, #0
 80022fc:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002300:	2300      	movs	r3, #0
 8002302:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0xf4);
 8002306:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800230a:	f107 020c 	add.w	r2, r7, #12
 800230e:	441a      	add	r2, r3
 8002310:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002314:	23f4      	movs	r3, #244	; 0xf4
 8002316:	2108      	movs	r1, #8
 8002318:	f7fe fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800231c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002320:	3308      	adds	r3, #8
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <Send_Init_Msg+0x54>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	b29a      	uxth	r2, r3
 800232c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002330:	4413      	add	r3, r2
 8002332:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002336:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800233a:	3308      	adds	r3, #8
 800233c:	b29b      	uxth	r3, r3
 800233e:	b21b      	sxth	r3, r3
 8002340:	425a      	negs	r2, r3
 8002342:	f003 0307 	and.w	r3, r3, #7
 8002346:	f002 0207 	and.w	r2, r2, #7
 800234a:	bf58      	it	pl
 800234c:	4253      	negpl	r3, r2
 800234e:	b21b      	sxth	r3, r3
 8002350:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002354:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002358:	f107 020c 	add.w	r2, r7, #12
 800235c:	441a      	add	r2, r3
 800235e:	79fb      	ldrb	r3, [r7, #7]
 8002360:	4977      	ldr	r1, [pc, #476]	; (8002540 <Send_Init_Msg+0x26c>)
 8002362:	3366      	adds	r3, #102	; 0x66
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800236e:	2110      	movs	r1, #16
 8002370:	f7fe f9dc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002374:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002378:	3310      	adds	r3, #16
 800237a:	2b00      	cmp	r3, #0
 800237c:	da00      	bge.n	8002380 <Send_Init_Msg+0xac>
 800237e:	3307      	adds	r3, #7
 8002380:	10db      	asrs	r3, r3, #3
 8002382:	b29a      	uxth	r2, r3
 8002384:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002388:	4413      	add	r3, r2
 800238a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800238e:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002392:	3310      	adds	r3, #16
 8002394:	b29b      	uxth	r3, r3
 8002396:	b21b      	sxth	r3, r3
 8002398:	425a      	negs	r2, r3
 800239a:	f003 0307 	and.w	r3, r3, #7
 800239e:	f002 0207 	and.w	r2, r2, #7
 80023a2:	bf58      	it	pl
 80023a4:	4253      	negpl	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 80023ac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023b0:	f107 020c 	add.w	r2, r7, #12
 80023b4:	441a      	add	r2, r3
 80023b6:	79fb      	ldrb	r3, [r7, #7]
 80023b8:	4961      	ldr	r1, [pc, #388]	; (8002540 <Send_Init_Msg+0x26c>)
 80023ba:	3370      	adds	r3, #112	; 0x70
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80023c6:	2110      	movs	r1, #16
 80023c8:	f7fe f9b0 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80023cc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80023d0:	3310      	adds	r3, #16
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	da00      	bge.n	80023d8 <Send_Init_Msg+0x104>
 80023d6:	3307      	adds	r3, #7
 80023d8:	10db      	asrs	r3, r3, #3
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80023e0:	4413      	add	r3, r2
 80023e2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80023e6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80023ea:	3310      	adds	r3, #16
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	b21b      	sxth	r3, r3
 80023f0:	425a      	negs	r2, r3
 80023f2:	f003 0307 	and.w	r3, r3, #7
 80023f6:	f002 0207 	and.w	r2, r2, #7
 80023fa:	bf58      	it	pl
 80023fc:	4253      	negpl	r3, r2
 80023fe:	b21b      	sxth	r3, r3
 8002400:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 8002404:	4b4f      	ldr	r3, [pc, #316]	; (8002544 <Send_Init_Msg+0x270>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	089b      	lsrs	r3, r3, #2
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d031      	beq.n	8002476 <Send_Init_Msg+0x1a2>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 8002412:	4b4c      	ldr	r3, [pc, #304]	; (8002544 <Send_Init_Msg+0x270>)
 8002414:	791b      	ldrb	r3, [r3, #4]
 8002416:	79fa      	ldrb	r2, [r7, #7]
 8002418:	429a      	cmp	r2, r3
 800241a:	d137      	bne.n	800248c <Send_Init_Msg+0x1b8>
		{
			uint8_t Rand_Number  = 0;
 800241c:	2300      	movs	r3, #0
 800241e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 )+1;
 8002422:	4849      	ldr	r0, [pc, #292]	; (8002548 <Send_Init_Msg+0x274>)
 8002424:	f017 fbea 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8002428:	4602      	mov	r2, r0
 800242a:	4b48      	ldr	r3, [pc, #288]	; (800254c <Send_Init_Msg+0x278>)
 800242c:	fba3 1302 	umull	r1, r3, r3, r2
 8002430:	099b      	lsrs	r3, r3, #6
 8002432:	21c8      	movs	r1, #200	; 0xc8
 8002434:	fb01 f303 	mul.w	r3, r1, r3
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	b2db      	uxtb	r3, r3
 800243c:	3301      	adds	r3, #1
 800243e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
			printf("Injected TX Sequence value failure\n");
 8002442:	4843      	ldr	r0, [pc, #268]	; (8002550 <Send_Init_Msg+0x27c>)
 8002444:	f01f ffce 	bl	80223e4 <puts>
			printf("Actual   TX Sequence value:%u\n",0);
 8002448:	2100      	movs	r1, #0
 800244a:	4842      	ldr	r0, [pc, #264]	; (8002554 <Send_Init_Msg+0x280>)
 800244c:	f01f ff2e 	bl	80222ac <iprintf>
			printf("Injected TX Sequence value:%u\n",Rand_Number);
 8002450:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8002454:	4619      	mov	r1, r3
 8002456:	4840      	ldr	r0, [pc, #256]	; (8002558 <Send_Init_Msg+0x284>)
 8002458:	f01f ff28 	bl	80222ac <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 800245c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002460:	f107 020c 	add.w	r2, r7, #12
 8002464:	441a      	add	r2, r3
 8002466:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 800246a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800246e:	2108      	movs	r1, #8
 8002470:	f7fe f95c 	bl	800072c <InsertBits>
 8002474:	e00a      	b.n	800248c <Send_Init_Msg+0x1b8>
			//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
		}
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], 0x00);
 8002476:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800247a:	f107 020c 	add.w	r2, r7, #12
 800247e:	441a      	add	r2, r3
 8002480:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002484:	2300      	movs	r3, #0
 8002486:	2108      	movs	r1, #8
 8002488:	f7fe f950 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 800248c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002490:	3308      	adds	r3, #8
 8002492:	2b00      	cmp	r3, #0
 8002494:	da00      	bge.n	8002498 <Send_Init_Msg+0x1c4>
 8002496:	3307      	adds	r3, #7
 8002498:	10db      	asrs	r3, r3, #3
 800249a:	b29a      	uxth	r2, r3
 800249c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024a0:	4413      	add	r3, r2
 80024a2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80024a6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80024aa:	3308      	adds	r3, #8
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	b21b      	sxth	r3, r3
 80024b0:	425a      	negs	r2, r3
 80024b2:	f003 0307 	and.w	r3, r3, #7
 80024b6:	f002 0207 	and.w	r2, r2, #7
 80024ba:	bf58      	it	pl
 80024bc:	4253      	negpl	r3, r2
 80024be:	b21b      	sxth	r3, r3
 80024c0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 80024c4:	4b1f      	ldr	r3, [pc, #124]	; (8002544 <Send_Init_Msg+0x270>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d04c      	beq.n	800256c <Send_Init_Msg+0x298>
	{
		if(Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index)
 80024d2:	4b1c      	ldr	r3, [pc, #112]	; (8002544 <Send_Init_Msg+0x270>)
 80024d4:	791b      	ldrb	r3, [r3, #4]
 80024d6:	79fa      	ldrb	r2, [r7, #7]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d165      	bne.n	80025a8 <Send_Init_Msg+0x2d4>
		{
			uint8_t Rand_Number  = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
			Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 80024e2:	4819      	ldr	r0, [pc, #100]	; (8002548 <Send_Init_Msg+0x274>)
 80024e4:	f017 fb8a 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 80024e8:	4602      	mov	r2, r0
 80024ea:	4b18      	ldr	r3, [pc, #96]	; (800254c <Send_Init_Msg+0x278>)
 80024ec:	fba3 1302 	umull	r1, r3, r3, r2
 80024f0:	099b      	lsrs	r3, r3, #6
 80024f2:	21c8      	movs	r1, #200	; 0xc8
 80024f4:	fb01 f303 	mul.w	r3, r1, r3
 80024f8:	1ad3      	subs	r3, r2, r3
 80024fa:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
			printf("Injected RX Sequence value failure\n");
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <Send_Init_Msg+0x288>)
 8002500:	f01f ff70 	bl	80223e4 <puts>
			printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8002504:	79fb      	ldrb	r3, [r7, #7]
 8002506:	4a16      	ldr	r2, [pc, #88]	; (8002560 <Send_Init_Msg+0x28c>)
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	4413      	add	r3, r2
 800250c:	3302      	adds	r3, #2
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4619      	mov	r1, r3
 8002512:	4814      	ldr	r0, [pc, #80]	; (8002564 <Send_Init_Msg+0x290>)
 8002514:	f01f feca 	bl	80222ac <iprintf>
			printf("Injected RX Sequence value:%u\n",Rand_Number);
 8002518:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800251c:	4619      	mov	r1, r3
 800251e:	4812      	ldr	r0, [pc, #72]	; (8002568 <Send_Init_Msg+0x294>)
 8002520:	f01f fec4 	bl	80222ac <iprintf>
			InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8002524:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002528:	f107 020c 	add.w	r2, r7, #12
 800252c:	441a      	add	r2, r3
 800252e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8002532:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002536:	2108      	movs	r1, #8
 8002538:	f7fe f8f8 	bl	800072c <InsertBits>
 800253c:	e034      	b.n	80025a8 <Send_Init_Msg+0x2d4>
 800253e:	bf00      	nop
 8002540:	20000304 	.word	0x20000304
 8002544:	2000195c 	.word	0x2000195c
 8002548:	20009c78 	.word	0x20009c78
 800254c:	51eb851f 	.word	0x51eb851f
 8002550:	08023e00 	.word	0x08023e00
 8002554:	08023e24 	.word	0x08023e24
 8002558:	08023e44 	.word	0x08023e44
 800255c:	08023e64 	.word	0x08023e64
 8002560:	200011c4 	.word	0x200011c4
 8002564:	08023e88 	.word	0x08023e88
 8002568:	08023ea8 	.word	0x08023ea8

	}
	else
	{
		// Hitachi_prms_st[Source_Index].Rx_Seq = Hitachi_prms_st[Source_Index].Seq_Init_Value + 1;
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq);
 800256c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002570:	f107 020c 	add.w	r2, r7, #12
 8002574:	18d1      	adds	r1, r2, r3
 8002576:	79fb      	ldrb	r3, [r7, #7]
 8002578:	48c4      	ldr	r0, [pc, #784]	; (800288c <Send_Init_Msg+0x5b8>)
 800257a:	011a      	lsls	r2, r3, #4
 800257c:	4402      	add	r2, r0
 800257e:	3202      	adds	r2, #2
 8002580:	7812      	ldrb	r2, [r2, #0]
 8002582:	3201      	adds	r2, #1
 8002584:	b2d4      	uxtb	r4, r2
 8002586:	48c1      	ldr	r0, [pc, #772]	; (800288c <Send_Init_Msg+0x5b8>)
 8002588:	011a      	lsls	r2, r3, #4
 800258a:	4402      	add	r2, r0
 800258c:	3202      	adds	r2, #2
 800258e:	4620      	mov	r0, r4
 8002590:	7010      	strb	r0, [r2, #0]
 8002592:	4abe      	ldr	r2, [pc, #760]	; (800288c <Send_Init_Msg+0x5b8>)
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	4413      	add	r3, r2
 8002598:	3302      	adds	r3, #2
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025a0:	460a      	mov	r2, r1
 80025a2:	2108      	movs	r1, #8
 80025a4:	f7fe f8c2 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 80025a8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025ac:	3308      	adds	r3, #8
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	da00      	bge.n	80025b4 <Send_Init_Msg+0x2e0>
 80025b2:	3307      	adds	r3, #7
 80025b4:	10db      	asrs	r3, r3, #3
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025bc:	4413      	add	r3, r2
 80025be:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80025c2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80025c6:	3308      	adds	r3, #8
 80025c8:	b29b      	uxth	r3, r3
 80025ca:	b21b      	sxth	r3, r3
 80025cc:	425a      	negs	r2, r3
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	f002 0207 	and.w	r2, r2, #7
 80025d6:	bf58      	it	pl
 80025d8:	4253      	negpl	r3, r2
 80025da:	b21b      	sxth	r3, r3
 80025dc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG);
 80025e0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80025e4:	f107 020c 	add.w	r2, r7, #12
 80025e8:	441a      	add	r2, r3
 80025ea:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80025ee:	2301      	movs	r3, #1
 80025f0:	2108      	movs	r1, #8
 80025f2:	f7fe f89b 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80025f6:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80025fa:	3308      	adds	r3, #8
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	da00      	bge.n	8002602 <Send_Init_Msg+0x32e>
 8002600:	3307      	adds	r3, #7
 8002602:	10db      	asrs	r3, r3, #3
 8002604:	b29a      	uxth	r2, r3
 8002606:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800260a:	4413      	add	r3, r2
 800260c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002610:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002614:	3308      	adds	r3, #8
 8002616:	b29b      	uxth	r3, r3
 8002618:	b21b      	sxth	r3, r3
 800261a:	425a      	negs	r2, r3
 800261c:	f003 0307 	and.w	r3, r3, #7
 8002620:	f002 0207 	and.w	r2, r2, #7
 8002624:	bf58      	it	pl
 8002626:	4253      	negpl	r3, r2
 8002628:	b21b      	sxth	r3, r3
 800262a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag = 0x0005;
 800262e:	79fb      	ldrb	r3, [r7, #7]
 8002630:	4a96      	ldr	r2, [pc, #600]	; (800288c <Send_Init_Msg+0x5b8>)
 8002632:	011b      	lsls	r3, r3, #4
 8002634:	4413      	add	r3, r2
 8002636:	3306      	adds	r3, #6
 8002638:	2205      	movs	r2, #5
 800263a:	801a      	strh	r2, [r3, #0]
	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Msg_Status_Flag);
 800263c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002640:	f107 020c 	add.w	r2, r7, #12
 8002644:	441a      	add	r2, r3
 8002646:	79fb      	ldrb	r3, [r7, #7]
 8002648:	4990      	ldr	r1, [pc, #576]	; (800288c <Send_Init_Msg+0x5b8>)
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	440b      	add	r3, r1
 800264e:	3306      	adds	r3, #6
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002656:	2110      	movs	r1, #16
 8002658:	f7fe f868 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800265c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002660:	3310      	adds	r3, #16
 8002662:	2b00      	cmp	r3, #0
 8002664:	da00      	bge.n	8002668 <Send_Init_Msg+0x394>
 8002666:	3307      	adds	r3, #7
 8002668:	10db      	asrs	r3, r3, #3
 800266a:	b29a      	uxth	r2, r3
 800266c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002670:	4413      	add	r3, r2
 8002672:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002676:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800267a:	3310      	adds	r3, #16
 800267c:	b29b      	uxth	r3, r3
 800267e:	b21b      	sxth	r3, r3
 8002680:	425a      	negs	r2, r3
 8002682:	f003 0307 	and.w	r3, r3, #7
 8002686:	f002 0207 	and.w	r2, r2, #7
 800268a:	bf58      	it	pl
 800268c:	4253      	negpl	r3, r2
 800268e:	b21b      	sxth	r3, r3
 8002690:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], INIT_MSG_SIZE);
 8002694:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002698:	f107 020c 	add.w	r2, r7, #12
 800269c:	441a      	add	r2, r3
 800269e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026a2:	2317      	movs	r3, #23
 80026a4:	2108      	movs	r1, #8
 80026a6:	f7fe f841 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80026aa:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026ae:	3308      	adds	r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	da00      	bge.n	80026b6 <Send_Init_Msg+0x3e2>
 80026b4:	3307      	adds	r3, #7
 80026b6:	10db      	asrs	r3, r3, #3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026be:	4413      	add	r3, r2
 80026c0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80026c4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80026c8:	3308      	adds	r3, #8
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	b21b      	sxth	r3, r3
 80026ce:	425a      	negs	r2, r3
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	f002 0207 	and.w	r2, r2, #7
 80026d8:	bf58      	it	pl
 80026da:	4253      	negpl	r3, r2
 80026dc:	b21b      	sxth	r3, r3
 80026de:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_PCOL_VER);
 80026e2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026e6:	f107 020c 	add.w	r2, r7, #12
 80026ea:	441a      	add	r2, r3
 80026ec:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80026f0:	2301      	movs	r3, #1
 80026f2:	2110      	movs	r1, #16
 80026f4:	f7fe f81a 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80026f8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80026fc:	3310      	adds	r3, #16
 80026fe:	2b00      	cmp	r3, #0
 8002700:	da00      	bge.n	8002704 <Send_Init_Msg+0x430>
 8002702:	3307      	adds	r3, #7
 8002704:	10db      	asrs	r3, r3, #3
 8002706:	b29a      	uxth	r2, r3
 8002708:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270c:	4413      	add	r3, r2
 800270e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002712:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002716:	3310      	adds	r3, #16
 8002718:	b29b      	uxth	r3, r3
 800271a:	b21b      	sxth	r3, r3
 800271c:	425a      	negs	r2, r3
 800271e:	f003 0307 	and.w	r3, r3, #7
 8002722:	f002 0207 	and.w	r2, r2, #7
 8002726:	bf58      	it	pl
 8002728:	4253      	negpl	r3, r2
 800272a:	b21b      	sxth	r3, r3
 800272c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//As Execuctive version is 6Bytes we divided in two parts as 32-bit AND 16-bit
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], EIPC_EXE_VER_1);
 8002730:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002734:	f107 020c 	add.w	r2, r7, #12
 8002738:	441a      	add	r2, r3
 800273a:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800273e:	4b54      	ldr	r3, [pc, #336]	; (8002890 <Send_Init_Msg+0x5bc>)
 8002740:	2120      	movs	r1, #32
 8002742:	f7fd fff3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002746:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800274a:	3320      	adds	r3, #32
 800274c:	2b00      	cmp	r3, #0
 800274e:	da00      	bge.n	8002752 <Send_Init_Msg+0x47e>
 8002750:	3307      	adds	r3, #7
 8002752:	10db      	asrs	r3, r3, #3
 8002754:	b29a      	uxth	r2, r3
 8002756:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800275a:	4413      	add	r3, r2
 800275c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002760:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002764:	3320      	adds	r3, #32
 8002766:	b29b      	uxth	r3, r3
 8002768:	b21b      	sxth	r3, r3
 800276a:	425a      	negs	r2, r3
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	f002 0207 	and.w	r2, r2, #7
 8002774:	bf58      	it	pl
 8002776:	4253      	negpl	r3, r2
 8002778:	b21b      	sxth	r3, r3
 800277a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_VER_2);
 800277e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002782:	f107 020c 	add.w	r2, r7, #12
 8002786:	441a      	add	r2, r3
 8002788:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800278c:	2300      	movs	r3, #0
 800278e:	2110      	movs	r1, #16
 8002790:	f7fd ffcc 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002794:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002798:	3310      	adds	r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	da00      	bge.n	80027a0 <Send_Init_Msg+0x4cc>
 800279e:	3307      	adds	r3, #7
 80027a0:	10db      	asrs	r3, r3, #3
 80027a2:	b29a      	uxth	r2, r3
 80027a4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027a8:	4413      	add	r3, r2
 80027aa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027ae:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80027b2:	3310      	adds	r3, #16
 80027b4:	b29b      	uxth	r3, r3
 80027b6:	b21b      	sxth	r3, r3
 80027b8:	425a      	negs	r2, r3
 80027ba:	f003 0307 	and.w	r3, r3, #7
 80027be:	f002 0207 	and.w	r2, r2, #7
 80027c2:	bf58      	it	pl
 80027c4:	4253      	negpl	r3, r2
 80027c6:	b21b      	sxth	r3, r3
 80027c8:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_COMP_STAMP);
 80027cc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027d0:	f107 020c 	add.w	r2, r7, #12
 80027d4:	441a      	add	r2, r3
 80027d6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80027da:	2300      	movs	r3, #0
 80027dc:	2110      	movs	r1, #16
 80027de:	f7fd ffa5 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 80027e2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80027e6:	3310      	adds	r3, #16
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da00      	bge.n	80027ee <Send_Init_Msg+0x51a>
 80027ec:	3307      	adds	r3, #7
 80027ee:	10db      	asrs	r3, r3, #3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80027f6:	4413      	add	r3, r2
 80027f8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80027fc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002800:	3310      	adds	r3, #16
 8002802:	b29b      	uxth	r3, r3
 8002804:	b21b      	sxth	r3, r3
 8002806:	425a      	negs	r2, r3
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	f002 0207 	and.w	r2, r2, #7
 8002810:	bf58      	it	pl
 8002812:	4253      	negpl	r3, r2
 8002814:	b21b      	sxth	r3, r3
 8002816:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_EXE_IDEN_CRC);
 800281a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800281e:	f107 020c 	add.w	r2, r7, #12
 8002822:	441a      	add	r2, r3
 8002824:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002828:	2300      	movs	r3, #0
 800282a:	2110      	movs	r1, #16
 800282c:	f7fd ff7e 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8002830:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002834:	3310      	adds	r3, #16
 8002836:	2b00      	cmp	r3, #0
 8002838:	da00      	bge.n	800283c <Send_Init_Msg+0x568>
 800283a:	3307      	adds	r3, #7
 800283c:	10db      	asrs	r3, r3, #3
 800283e:	b29a      	uxth	r2, r3
 8002840:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002844:	4413      	add	r3, r2
 8002846:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800284a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800284e:	3310      	adds	r3, #16
 8002850:	b29b      	uxth	r3, r3
 8002852:	b21b      	sxth	r3, r3
 8002854:	425a      	negs	r2, r3
 8002856:	f003 0307 	and.w	r3, r3, #7
 800285a:	f002 0207 	and.w	r2, r2, #7
 800285e:	bf58      	it	pl
 8002860:	4253      	negpl	r3, r2
 8002862:	b21b      	sxth	r3, r3
 8002864:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EIPC_APP_IDEN_CRC);
 8002868:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800286c:	f107 020c 	add.w	r2, r7, #12
 8002870:	441a      	add	r2, r3
 8002872:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002876:	2300      	movs	r3, #0
 8002878:	2110      	movs	r1, #16
 800287a:	f7fd ff57 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 800287e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002882:	3310      	adds	r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	da05      	bge.n	8002894 <Send_Init_Msg+0x5c0>
 8002888:	3307      	adds	r3, #7
 800288a:	e003      	b.n	8002894 <Send_Init_Msg+0x5c0>
 800288c:	200011c4 	.word	0x200011c4
 8002890:	33e232af 	.word	0x33e232af
 8002894:	10db      	asrs	r3, r3, #3
 8002896:	b29a      	uxth	r2, r3
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	4413      	add	r3, r2
 800289e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80028a2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028a6:	3310      	adds	r3, #16
 80028a8:	b29b      	uxth	r3, r3
 80028aa:	b21b      	sxth	r3, r3
 80028ac:	425a      	negs	r2, r3
 80028ae:	f003 0307 	and.w	r3, r3, #7
 80028b2:	f002 0207 	and.w	r2, r2, #7
 80028b6:	bf58      	it	pl
 80028b8:	4253      	negpl	r3, r2
 80028ba:	b21b      	sxth	r3, r3
 80028bc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//we are sending VITAL CRC INIT VALUE by adding 1 to the Vital_CRC_Init_Value in INIT_MESSAGE from Hitachi
	if(Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value >= 0xfffff0)
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4ab2      	ldr	r2, [pc, #712]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028c4:	011b      	lsls	r3, r3, #4
 80028c6:	4413      	add	r3, r2
 80028c8:	3308      	adds	r3, #8
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4ab0      	ldr	r2, [pc, #704]	; (8002b90 <Send_Init_Msg+0x8bc>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d90d      	bls.n	80028ee <Send_Init_Msg+0x61a>
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value - 1;
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4aad      	ldr	r2, [pc, #692]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028d6:	011b      	lsls	r3, r3, #4
 80028d8:	4413      	add	r3, r2
 80028da:	3308      	adds	r3, #8
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	3a01      	subs	r2, #1
 80028e2:	49aa      	ldr	r1, [pc, #680]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028e4:	011b      	lsls	r3, r3, #4
 80028e6:	440b      	add	r3, r1
 80028e8:	330c      	adds	r3, #12
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e00c      	b.n	8002908 <Send_Init_Msg+0x634>
	}
	else
	{
		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value + 1;
 80028ee:	79fb      	ldrb	r3, [r7, #7]
 80028f0:	4aa6      	ldr	r2, [pc, #664]	; (8002b8c <Send_Init_Msg+0x8b8>)
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	3308      	adds	r3, #8
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	79fb      	ldrb	r3, [r7, #7]
 80028fc:	3201      	adds	r2, #1
 80028fe:	49a3      	ldr	r1, [pc, #652]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002900:	011b      	lsls	r3, r3, #4
 8002902:	440b      	add	r3, r1
 8002904:	330c      	adds	r3, #12
 8002906:	601a      	str	r2, [r3, #0]
	}

	InsertBits(ucBit, 24, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8002908:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800290c:	f107 020c 	add.w	r2, r7, #12
 8002910:	441a      	add	r2, r3
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	499d      	ldr	r1, [pc, #628]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	440b      	add	r3, r1
 800291a:	330c      	adds	r3, #12
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002922:	2118      	movs	r1, #24
 8002924:	f7fd ff02 	bl	800072c <InsertBits>
	Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	79fa      	ldrb	r2, [r7, #7]
 800292c:	4997      	ldr	r1, [pc, #604]	; (8002b8c <Send_Init_Msg+0x8b8>)
 800292e:	011b      	lsls	r3, r3, #4
 8002930:	440b      	add	r3, r1
 8002932:	330c      	adds	r3, #12
 8002934:	6819      	ldr	r1, [r3, #0]
 8002936:	4897      	ldr	r0, [pc, #604]	; (8002b94 <Send_Init_Msg+0x8c0>)
 8002938:	4613      	mov	r3, r2
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	4413      	add	r3, r2
 800293e:	00db      	lsls	r3, r3, #3
 8002940:	4403      	add	r3, r0
 8002942:	330c      	adds	r3, #12
 8002944:	6019      	str	r1, [r3, #0]
	BITSTUFFINC(24);
 8002946:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800294a:	3318      	adds	r3, #24
 800294c:	2b00      	cmp	r3, #0
 800294e:	da00      	bge.n	8002952 <Send_Init_Msg+0x67e>
 8002950:	3307      	adds	r3, #7
 8002952:	10db      	asrs	r3, r3, #3
 8002954:	b29a      	uxth	r2, r3
 8002956:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800295a:	4413      	add	r3, r2
 800295c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002960:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002964:	3318      	adds	r3, #24
 8002966:	b29b      	uxth	r3, r3
 8002968:	b21b      	sxth	r3, r3
 800296a:	425a      	negs	r2, r3
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	f002 0207 	and.w	r2, r2, #7
 8002974:	bf58      	it	pl
 8002976:	4253      	negpl	r3, r2
 8002978:	b21b      	sxth	r3, r3
 800297a:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	++Self_Seq_Init_Value[Source_Index];
 800297e:	79fb      	ldrb	r3, [r7, #7]
 8002980:	4a85      	ldr	r2, [pc, #532]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002982:	5cd2      	ldrb	r2, [r2, r3]
 8002984:	3201      	adds	r2, #1
 8002986:	b2d1      	uxtb	r1, r2
 8002988:	4a83      	ldr	r2, [pc, #524]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800298a:	54d1      	strb	r1, [r2, r3]
	if((Self_Seq_Init_Value[Source_Index]>= 180) || (Self_Seq_Init_Value[Source_Index] == 0) )
 800298c:	79fb      	ldrb	r3, [r7, #7]
 800298e:	4a82      	ldr	r2, [pc, #520]	; (8002b98 <Send_Init_Msg+0x8c4>)
 8002990:	5cd3      	ldrb	r3, [r2, r3]
 8002992:	2bb3      	cmp	r3, #179	; 0xb3
 8002994:	d804      	bhi.n	80029a0 <Send_Init_Msg+0x6cc>
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <Send_Init_Msg+0x8c4>)
 800299a:	5cd3      	ldrb	r3, [r2, r3]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d103      	bne.n	80029a8 <Send_Init_Msg+0x6d4>
	{
		Self_Seq_Init_Value[Source_Index] = 10;
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	4a7d      	ldr	r2, [pc, #500]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029a4:	210a      	movs	r1, #10
 80029a6:	54d1      	strb	r1, [r2, r3]
	}

	//printf("\nSelf Seq Init Value:%u\n",Self_Seq_Init_Value[Source_Index]);
	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Self_Seq_Init_Value[Source_Index]);
 80029a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029ac:	f107 020c 	add.w	r2, r7, #12
 80029b0:	441a      	add	r2, r3
 80029b2:	79fb      	ldrb	r3, [r7, #7]
 80029b4:	4978      	ldr	r1, [pc, #480]	; (8002b98 <Send_Init_Msg+0x8c4>)
 80029b6:	5ccb      	ldrb	r3, [r1, r3]
 80029b8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80029bc:	2108      	movs	r1, #8
 80029be:	f7fd feb5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80029c2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80029c6:	3308      	adds	r3, #8
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	da00      	bge.n	80029ce <Send_Init_Msg+0x6fa>
 80029cc:	3307      	adds	r3, #7
 80029ce:	10db      	asrs	r3, r3, #3
 80029d0:	b29a      	uxth	r2, r3
 80029d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029d6:	4413      	add	r3, r2
 80029d8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80029dc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80029e0:	3308      	adds	r3, #8
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	b21b      	sxth	r3, r3
 80029e6:	425a      	negs	r2, r3
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	f002 0207 	and.w	r2, r2, #7
 80029f0:	bf58      	it	pl
 80029f2:	4253      	negpl	r3, r2
 80029f4:	b21b      	sxth	r3, r3
 80029f6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], V_NV_FLAG);
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	f107 020c 	add.w	r2, r7, #12
 8002a02:	441a      	add	r2, r3
 8002a04:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a08:	2301      	movs	r3, #1
 8002a0a:	2108      	movs	r1, #8
 8002a0c:	f7fd fe8e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a10:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a14:	3308      	adds	r3, #8
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	da00      	bge.n	8002a1c <Send_Init_Msg+0x748>
 8002a1a:	3307      	adds	r3, #7
 8002a1c:	10db      	asrs	r3, r3, #3
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	4413      	add	r3, r2
 8002a26:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a2e:	3308      	adds	r3, #8
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	b21b      	sxth	r3, r3
 8002a34:	425a      	negs	r2, r3
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	f002 0207 	and.w	r2, r2, #7
 8002a3e:	bf58      	it	pl
 8002a40:	4253      	negpl	r3, r2
 8002a42:	b21b      	sxth	r3, r3
 8002a44:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_BOOL_VAL_DATA);
 8002a48:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a4c:	f107 020c 	add.w	r2, r7, #12
 8002a50:	441a      	add	r2, r3
 8002a52:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002a56:	2301      	movs	r3, #1
 8002a58:	2108      	movs	r1, #8
 8002a5a:	f7fd fe67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002a5e:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002a62:	3308      	adds	r3, #8
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	da00      	bge.n	8002a6a <Send_Init_Msg+0x796>
 8002a68:	3307      	adds	r3, #7
 8002a6a:	10db      	asrs	r3, r3, #3
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	4413      	add	r3, r2
 8002a74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002a78:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a7c:	3308      	adds	r3, #8
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	b21b      	sxth	r3, r3
 8002a82:	425a      	negs	r2, r3
 8002a84:	f003 0307 	and.w	r3, r3, #7
 8002a88:	f002 0207 	and.w	r2, r2, #7
 8002a8c:	bf58      	it	pl
 8002a8e:	4253      	negpl	r3, r2
 8002a90:	b21b      	sxth	r3, r3
 8002a92:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SIZE_NUMER_VAL_DATA);
 8002a96:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a9a:	f107 020c 	add.w	r2, r7, #12
 8002a9e:	441a      	add	r2, r3
 8002aa0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2108      	movs	r1, #8
 8002aa8:	f7fd fe40 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002aac:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002ab0:	3308      	adds	r3, #8
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	da00      	bge.n	8002ab8 <Send_Init_Msg+0x7e4>
 8002ab6:	3307      	adds	r3, #7
 8002ab8:	10db      	asrs	r3, r3, #3
 8002aba:	b29a      	uxth	r2, r3
 8002abc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ac0:	4413      	add	r3, r2
 8002ac2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002ac6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002aca:	3308      	adds	r3, #8
 8002acc:	b29b      	uxth	r3, r3
 8002ace:	b21b      	sxth	r3, r3
 8002ad0:	425a      	negs	r2, r3
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	f002 0207 	and.w	r2, r2, #7
 8002ada:	bf58      	it	pl
 8002adc:	4253      	negpl	r3, r2
 8002ade:	b21b      	sxth	r3, r3
 8002ae0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	//printf("Hitachi_fault_injection_st.FAULT_INJECTION_BITS:%lu\n",Hitachi_fault_injection_st.FAULT_INJECTION_BITS);
	//printf("Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX:%u\n",Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX);

	if( ( (CHECKFLAG(5,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002ae4:	4b2d      	ldr	r3, [pc, #180]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d060      	beq.n	8002bb4 <Send_Init_Msg+0x8e0>
 8002af2:	4b2a      	ldr	r3, [pc, #168]	; (8002b9c <Send_Init_Msg+0x8c8>)
 8002af4:	791b      	ldrb	r3, [r3, #4]
 8002af6:	79fa      	ldrb	r2, [r7, #7]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d15b      	bne.n	8002bb4 <Send_Init_Msg+0x8e0>
	{
		uint8_t Rand_Number = 12;
 8002afc:	230c      	movs	r3, #12
 8002afe:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#ifdef STM_32
		Rand_Number  = (HAL_RNG_GetRandomNumber(&hrng) % 125) + 1;
 8002b02:	4827      	ldr	r0, [pc, #156]	; (8002ba0 <Send_Init_Msg+0x8cc>)
 8002b04:	f017 f87a 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8002b08:	4601      	mov	r1, r0
 8002b0a:	4b26      	ldr	r3, [pc, #152]	; (8002ba4 <Send_Init_Msg+0x8d0>)
 8002b0c:	fba3 2301 	umull	r2, r3, r3, r1
 8002b10:	08da      	lsrs	r2, r3, #3
 8002b12:	4613      	mov	r3, r2
 8002b14:	015b      	lsls	r3, r3, #5
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	4413      	add	r3, r2
 8002b1c:	1aca      	subs	r2, r1, r3
 8002b1e:	b2d3      	uxtb	r3, r2
 8002b20:	3301      	adds	r3, #1
 8002b22:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
#endif
		printf("Injecting Invalid Boolean value Outputs failure\n");
 8002b26:	4820      	ldr	r0, [pc, #128]	; (8002ba8 <Send_Init_Msg+0x8d4>)
 8002b28:	f01f fc5c 	bl	80223e4 <puts>
		printf("Actual Boolean value:%u\n",Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
 8002b2c:	79fb      	ldrb	r3, [r7, #7]
 8002b2e:	4a17      	ldr	r2, [pc, #92]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b30:	011b      	lsls	r3, r3, #4
 8002b32:	4413      	add	r3, r2
 8002b34:	3303      	adds	r3, #3
 8002b36:	781b      	ldrb	r3, [r3, #0]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	481c      	ldr	r0, [pc, #112]	; (8002bac <Send_Init_Msg+0x8d8>)
 8002b3c:	f01f fbb6 	bl	80222ac <iprintf>
		if(Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA == Rand_Number)
 8002b40:	79fb      	ldrb	r3, [r7, #7]
 8002b42:	4a12      	ldr	r2, [pc, #72]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b44:	011b      	lsls	r3, r3, #4
 8002b46:	4413      	add	r3, r2
 8002b48:	3303      	adds	r3, #3
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d108      	bne.n	8002b66 <Send_Init_Msg+0x892>
		{
			Rand_Number = Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA-2;
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	4a0d      	ldr	r2, [pc, #52]	; (8002b8c <Send_Init_Msg+0x8b8>)
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	4413      	add	r3, r2
 8002b5c:	3303      	adds	r3, #3
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	3b02      	subs	r3, #2
 8002b62:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		}
		printf("Injected Boolean value:%u\n",Rand_Number);
 8002b66:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	4810      	ldr	r0, [pc, #64]	; (8002bb0 <Send_Init_Msg+0x8dc>)
 8002b6e:	f01f fb9d 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8002b72:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002b76:	f107 020c 	add.w	r2, r7, #12
 8002b7a:	441a      	add	r2, r3
 8002b7c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8002b80:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002b84:	2108      	movs	r1, #8
 8002b86:	f7fd fdd1 	bl	800072c <InsertBits>
	{
 8002b8a:	e022      	b.n	8002bd2 <Send_Init_Msg+0x8fe>
 8002b8c:	200011c4 	.word	0x200011c4
 8002b90:	00ffffef 	.word	0x00ffffef
 8002b94:	20001674 	.word	0x20001674
 8002b98:	2000010c 	.word	0x2000010c
 8002b9c:	2000195c 	.word	0x2000195c
 8002ba0:	20009c78 	.word	0x20009c78
 8002ba4:	10624dd3 	.word	0x10624dd3
 8002ba8:	08023ec8 	.word	0x08023ec8
 8002bac:	08023ef8 	.word	0x08023ef8
 8002bb0:	08023f14 	.word	0x08023f14
	}
	else
	{
		//InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Size_of_VITAL_DATA);
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], EI_data.Hitachi_st.Bool_outputs[Source_Index]);
 8002bb4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bb8:	f107 020c 	add.w	r2, r7, #12
 8002bbc:	441a      	add	r2, r3
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	494e      	ldr	r1, [pc, #312]	; (8002cfc <Send_Init_Msg+0xa28>)
 8002bc2:	440b      	add	r3, r1
 8002bc4:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 8002bc8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002bcc:	2108      	movs	r1, #8
 8002bce:	f7fd fdad 	bl	800072c <InsertBits>
	}
	BITSTUFFINC(8);
 8002bd2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002bd6:	3308      	adds	r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	da00      	bge.n	8002bde <Send_Init_Msg+0x90a>
 8002bdc:	3307      	adds	r3, #7
 8002bde:	10db      	asrs	r3, r3, #3
 8002be0:	b29a      	uxth	r2, r3
 8002be2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002be6:	4413      	add	r3, r2
 8002be8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002bec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002bf0:	3308      	adds	r3, #8
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	b21b      	sxth	r3, r3
 8002bf6:	425a      	negs	r2, r3
 8002bf8:	f003 0307 	and.w	r3, r3, #7
 8002bfc:	f002 0207 	and.w	r2, r2, #7
 8002c00:	bf58      	it	pl
 8002c02:	4253      	negpl	r3, r2
 8002c04:	b21b      	sxth	r3, r3
 8002c06:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VAL_NUM_OUTPUTS);
 8002c0a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c0e:	f107 020c 	add.w	r2, r7, #12
 8002c12:	441a      	add	r2, r3
 8002c14:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c18:	2300      	movs	r3, #0
 8002c1a:	2108      	movs	r1, #8
 8002c1c:	f7fd fd86 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8002c20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c24:	3308      	adds	r3, #8
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	da00      	bge.n	8002c2c <Send_Init_Msg+0x958>
 8002c2a:	3307      	adds	r3, #7
 8002c2c:	10db      	asrs	r3, r3, #3
 8002c2e:	b29a      	uxth	r2, r3
 8002c30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c34:	4413      	add	r3, r2
 8002c36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c3e:	3308      	adds	r3, #8
 8002c40:	b29b      	uxth	r3, r3
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	425a      	negs	r2, r3
 8002c46:	f003 0307 	and.w	r3, r3, #7
 8002c4a:	f002 0207 	and.w	r2, r2, #7
 8002c4e:	bf58      	it	pl
 8002c50:	4253      	negpl	r3, r2
 8002c52:	b21b      	sxth	r3, r3
 8002c54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	Calc_CRC = CalculateDirectReverseCrc(Transmit_Buff, ucByte);
 8002c58:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c5c:	f107 030c 	add.w	r3, r7, #12
 8002c60:	4611      	mov	r1, r2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f00f ff40 	bl	8012ae8 <CalculateDirectReverseCrc>
 8002c68:	6538      	str	r0, [r7, #80]	; 0x50
	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], Calc_CRC);
 8002c6a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c6e:	f107 020c 	add.w	r2, r7, #12
 8002c72:	441a      	add	r2, r3
 8002c74:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8002c78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c7a:	2120      	movs	r1, #32
 8002c7c:	f7fd fd56 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8002c80:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8002c84:	3320      	adds	r3, #32
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	da00      	bge.n	8002c8c <Send_Init_Msg+0x9b8>
 8002c8a:	3307      	adds	r3, #7
 8002c8c:	10db      	asrs	r3, r3, #3
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c94:	4413      	add	r3, r2
 8002c96:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8002c9a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c9e:	3320      	adds	r3, #32
 8002ca0:	b29b      	uxth	r3, r3
 8002ca2:	b21b      	sxth	r3, r3
 8002ca4:	425a      	negs	r2, r3
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	f002 0207 	and.w	r2, r2, #7
 8002cae:	bf58      	it	pl
 8002cb0:	4253      	negpl	r3, r2
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	0a5b      	lsrs	r3, r3, #9
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00b      	beq.n	8002cde <Send_Init_Msg+0xa0a>
 8002cc6:	4b0e      	ldr	r3, [pc, #56]	; (8002d00 <Send_Init_Msg+0xa2c>)
 8002cc8:	791b      	ldrb	r3, [r3, #4]
 8002cca:	79fa      	ldrb	r2, [r7, #7]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d106      	bne.n	8002cde <Send_Init_Msg+0xa0a>
	{
		printf("Injected ETH tx Fail\n");
 8002cd0:	480c      	ldr	r0, [pc, #48]	; (8002d04 <Send_Init_Msg+0xa30>)
 8002cd2:	f01f fb87 	bl	80223e4 <puts>
		printf("Not Sending Reply");
 8002cd6:	480c      	ldr	r0, [pc, #48]	; (8002d08 <Send_Init_Msg+0xa34>)
 8002cd8:	f01f fae8 	bl	80222ac <iprintf>
 8002cdc:	e009      	b.n	8002cf2 <Send_Init_Msg+0xa1e>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 8002cde:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ce2:	b2d9      	uxtb	r1, r3
 8002ce4:	79fa      	ldrb	r2, [r7, #7]
 8002ce6:	f107 030c 	add.w	r3, r7, #12
 8002cea:	4618      	mov	r0, r3
 8002cec:	f004 fc3e 	bl	800756c <Process_Sending_Reply>
	}
}
 8002cf0:	bf00      	nop
 8002cf2:	bf00      	nop
 8002cf4:	375c      	adds	r7, #92	; 0x5c
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bd90      	pop	{r4, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	20000304 	.word	0x20000304
 8002d00:	2000195c 	.word	0x2000195c
 8002d04:	08023f30 	.word	0x08023f30
 8002d08:	08023f48 	.word	0x08023f48

08002d0c <Vital_Msg_extr>:

void Vital_Msg_extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8002d0c:	b590      	push	{r4, r7, lr}
 8002d0e:	b099      	sub	sp, #100	; 0x64
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	4608      	mov	r0, r1
 8002d16:	4611      	mov	r1, r2
 8002d18:	461a      	mov	r2, r3
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	70fb      	strb	r3, [r7, #3]
 8002d1e:	460b      	mov	r3, r1
 8002d20:	70bb      	strb	r3, [r7, #2]
 8002d22:	4613      	mov	r3, r2
 8002d24:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 8002d26:	2300      	movs	r3, #0
 8002d28:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	uint32_t Calc_CRC = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
	uint32_t Recv_CRC = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	65bb      	str	r3, [r7, #88]	; 0x58
	uint32_t Ticks = HAL_GetTick();
 8002d34:	f012 fab0 	bl	8015298 <HAL_GetTick>
 8002d38:	64b8      	str	r0, [r7, #72]	; 0x48
	uint8_t noofIP = 0, uc_index = 0;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 8002d40:	2300      	movs	r3, #0
 8002d42:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t LinkEstablishFlag = CLEAR;
 8002d46:	2300      	movs	r3, #0
 8002d48:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
 8002d50:	f107 030c 	add.w	r3, r7, #12
 8002d54:	2238      	movs	r2, #56	; 0x38
 8002d56:	2100      	movs	r1, #0
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f01f f9bf 	bl	80220dc <memset>
	BITSTUFFINIT(0, 0);
 8002d5e:	2300      	movs	r3, #0
 8002d60:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8002d64:	2300      	movs	r3, #0
 8002d66:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8002d6a:	49a1      	ldr	r1, [pc, #644]	; (8002ff0 <Vital_Msg_extr+0x2e4>)
 8002d6c:	48a1      	ldr	r0, [pc, #644]	; (8002ff4 <Vital_Msg_extr+0x2e8>)
 8002d6e:	f7fd fa67 	bl	8000240 <strcmp>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 8138 	beq.w	8002fea <Vital_Msg_extr+0x2de>
		//Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = 0x123456;
		goto ROLLOVER_VITAL;
	}


	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8002d7a:	4b9f      	ldr	r3, [pc, #636]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0301 	and.w	r3, r3, #1
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d02d      	beq.n	8002de2 <Vital_Msg_extr+0xd6>
 8002d86:	4b9c      	ldr	r3, [pc, #624]	; (8002ff8 <Vital_Msg_extr+0x2ec>)
 8002d88:	791b      	ldrb	r3, [r3, #4]
 8002d8a:	78ba      	ldrb	r2, [r7, #2]
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d128      	bne.n	8002de2 <Vital_Msg_extr+0xd6>
	{
		uint32_t Rand_Number = 22;
 8002d90:	2316      	movs	r3, #22
 8002d92:	647b      	str	r3, [r7, #68]	; 0x44
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8002d94:	4899      	ldr	r0, [pc, #612]	; (8002ffc <Vital_Msg_extr+0x2f0>)
 8002d96:	f016 ff31 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	4b98      	ldr	r3, [pc, #608]	; (8003000 <Vital_Msg_extr+0x2f4>)
 8002d9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002da2:	0dd9      	lsrs	r1, r3, #23
 8002da4:	460b      	mov	r3, r1
 8002da6:	041b      	lsls	r3, r3, #16
 8002da8:	1a5b      	subs	r3, r3, r1
 8002daa:	021b      	lsls	r3, r3, #8
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	647b      	str	r3, [r7, #68]	; 0x44
#endif
		printf("\nInjected RX Vital CRC failure\n");
 8002db0:	4894      	ldr	r0, [pc, #592]	; (8003004 <Vital_Msg_extr+0x2f8>)
 8002db2:	f01f fb17 	bl	80223e4 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002db6:	78bb      	ldrb	r3, [r7, #2]
 8002db8:	4a93      	ldr	r2, [pc, #588]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002dba:	011b      	lsls	r3, r3, #4
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3308      	adds	r3, #8
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4891      	ldr	r0, [pc, #580]	; (800300c <Vital_Msg_extr+0x300>)
 8002dc6:	f01f fa71 	bl	80222ac <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8002dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dcc:	4890      	ldr	r0, [pc, #576]	; (8003010 <Vital_Msg_extr+0x304>)
 8002dce:	f01f fa6d 	bl	80222ac <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8002dd2:	f107 0208 	add.w	r2, r7, #8
 8002dd6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dd8:	2118      	movs	r1, #24
 8002dda:	2000      	movs	r0, #0
 8002ddc:	f7fd fca6 	bl	800072c <InsertBits>
	{
 8002de0:	e00b      	b.n	8002dfa <Vital_Msg_extr+0xee>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002de2:	78bb      	ldrb	r3, [r7, #2]
 8002de4:	4a88      	ldr	r2, [pc, #544]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	4413      	add	r3, r2
 8002dea:	3308      	adds	r3, #8
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f107 0208 	add.w	r2, r7, #8
 8002df2:	2118      	movs	r1, #24
 8002df4:	2000      	movs	r0, #0
 8002df6:	f7fd fc99 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002dfa:	2300      	movs	r3, #0
 8002dfc:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e00:	e010      	b.n	8002e24 <Vital_Msg_extr+0x118>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002e02:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	441a      	add	r2, r3
 8002e0a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e0e:	3303      	adds	r3, #3
 8002e10:	7812      	ldrb	r2, [r2, #0]
 8002e12:	3360      	adds	r3, #96	; 0x60
 8002e14:	443b      	add	r3, r7
 8002e16:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002e1a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e1e:	3301      	adds	r3, #1
 8002e20:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002e24:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002e28:	78fb      	ldrb	r3, [r7, #3]
 8002e2a:	3b05      	subs	r3, #5
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	dbe8      	blt.n	8002e02 <Vital_Msg_extr+0xf6>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002e30:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3303      	adds	r3, #3
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	f107 0308 	add.w	r3, r7, #8
 8002e3e:	4611      	mov	r1, r2
 8002e40:	4618      	mov	r0, r3
 8002e42:	f00f fe51 	bl	8012ae8 <CalculateDirectReverseCrc>
 8002e46:	64f8      	str	r0, [r7, #76]	; 0x4c
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	3b05      	subs	r3, #5
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	441a      	add	r2, r3
 8002e50:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002e54:	2120      	movs	r1, #32
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fd fbdc 	bl	8000614 <ExtractBits>
 8002e5c:	65b8      	str	r0, [r7, #88]	; 0x58

	//	printf("\n___________________________________ VITAL-MSG ___________________________________\n");
	if(Calc_CRC != Recv_CRC)
 8002e5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e62:	429a      	cmp	r2, r3
 8002e64:	f000 80ec 	beq.w	8003040 <Vital_Msg_extr+0x334>
	{
		if( ( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00) || (ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x01) )
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3305      	adds	r3, #5
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2108      	movs	r1, #8
 8002e70:	2000      	movs	r0, #0
 8002e72:	f7fd fbcf 	bl	8000614 <ExtractBits>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d00a      	beq.n	8002e92 <Vital_Msg_extr+0x186>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3305      	adds	r3, #5
 8002e80:	461a      	mov	r2, r3
 8002e82:	2108      	movs	r1, #8
 8002e84:	2000      	movs	r0, #0
 8002e86:	f7fd fbc5 	bl	8000614 <ExtractBits>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	f040 8098 	bne.w	8002fc2 <Vital_Msg_extr+0x2b6>
		{
			printf("Tx seq Roll over Detected\n");
 8002e92:	4860      	ldr	r0, [pc, #384]	; (8003014 <Vital_Msg_extr+0x308>)
 8002e94:	f01f faa6 	bl	80223e4 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 8002e98:	f107 0308 	add.w	r3, r7, #8
 8002e9c:	223c      	movs	r2, #60	; 0x3c
 8002e9e:	2100      	movs	r1, #0
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f01f f91b 	bl	80220dc <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 8002ea6:	78bb      	ldrb	r3, [r7, #2]
 8002ea8:	4a57      	ldr	r2, [pc, #348]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002eaa:	011b      	lsls	r3, r3, #4
 8002eac:	4413      	add	r3, r2
 8002eae:	3308      	adds	r3, #8
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	3301      	adds	r3, #1
 8002eb4:	f107 0208 	add.w	r2, r7, #8
 8002eb8:	2118      	movs	r1, #24
 8002eba:	2000      	movs	r0, #0
 8002ebc:	f7fd fc36 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002ec6:	e010      	b.n	8002eea <Vital_Msg_extr+0x1de>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8002ec8:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	441a      	add	r2, r3
 8002ed0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ed4:	3303      	adds	r3, #3
 8002ed6:	7812      	ldrb	r2, [r2, #0]
 8002ed8:	3360      	adds	r3, #96	; 0x60
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8002ee0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8002eea:	f897 2056 	ldrb.w	r2, [r7, #86]	; 0x56
 8002eee:	78fb      	ldrb	r3, [r7, #3]
 8002ef0:	3b05      	subs	r3, #5
 8002ef2:	429a      	cmp	r2, r3
 8002ef4:	dbe8      	blt.n	8002ec8 <Vital_Msg_extr+0x1bc>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 8002ef6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8002efa:	b29b      	uxth	r3, r3
 8002efc:	3303      	adds	r3, #3
 8002efe:	b29a      	uxth	r2, r3
 8002f00:	f107 0308 	add.w	r3, r7, #8
 8002f04:	4611      	mov	r1, r2
 8002f06:	4618      	mov	r0, r3
 8002f08:	f00f fdee 	bl	8012ae8 <CalculateDirectReverseCrc>
 8002f0c:	64f8      	str	r0, [r7, #76]	; 0x4c
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8002f0e:	78fb      	ldrb	r3, [r7, #3]
 8002f10:	3b05      	subs	r3, #5
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	441a      	add	r2, r3
 8002f16:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8002f1a:	2120      	movs	r1, #32
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb79 	bl	8000614 <ExtractBits>
 8002f22:	65b8      	str	r0, [r7, #88]	; 0x58

			if(Calc_CRC == Recv_CRC)
 8002f24:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002f26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d136      	bne.n	8002f9a <Vital_Msg_extr+0x28e>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <Vital_Msg_extr+0x30c>)
 8002f2e:	f01f fa59 	bl	80223e4 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 8002f32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f34:	4839      	ldr	r0, [pc, #228]	; (800301c <Vital_Msg_extr+0x310>)
 8002f36:	f01f f9b9 	bl	80222ac <iprintf>
				printf("Previous Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f3a:	78bb      	ldrb	r3, [r7, #2]
 8002f3c:	4a32      	ldr	r2, [pc, #200]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	4413      	add	r3, r2
 8002f42:	3308      	adds	r3, #8
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4619      	mov	r1, r3
 8002f48:	4835      	ldr	r0, [pc, #212]	; (8003020 <Vital_Msg_extr+0x314>)
 8002f4a:	f01f f9af 	bl	80222ac <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f4e:	78bb      	ldrb	r3, [r7, #2]
 8002f50:	492d      	ldr	r1, [pc, #180]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f52:	011a      	lsls	r2, r3, #4
 8002f54:	440a      	add	r2, r1
 8002f56:	3208      	adds	r2, #8
 8002f58:	6812      	ldr	r2, [r2, #0]
 8002f5a:	3201      	adds	r2, #1
 8002f5c:	492a      	ldr	r1, [pc, #168]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f5e:	011b      	lsls	r3, r3, #4
 8002f60:	440b      	add	r3, r1
 8002f62:	3308      	adds	r3, #8
 8002f64:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8002f66:	78bb      	ldrb	r3, [r7, #2]
 8002f68:	4a27      	ldr	r2, [pc, #156]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3308      	adds	r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4619      	mov	r1, r3
 8002f74:	482b      	ldr	r0, [pc, #172]	; (8003024 <Vital_Msg_extr+0x318>)
 8002f76:	f01f f999 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8002f7a:	78bb      	ldrb	r3, [r7, #2]
 8002f7c:	78ba      	ldrb	r2, [r7, #2]
 8002f7e:	4922      	ldr	r1, [pc, #136]	; (8003008 <Vital_Msg_extr+0x2fc>)
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	440b      	add	r3, r1
 8002f84:	3308      	adds	r3, #8
 8002f86:	6819      	ldr	r1, [r3, #0]
 8002f88:	4827      	ldr	r0, [pc, #156]	; (8003028 <Vital_Msg_extr+0x31c>)
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	4413      	add	r3, r2
 8002f90:	00db      	lsls	r3, r3, #3
 8002f92:	4403      	add	r3, r0
 8002f94:	3308      	adds	r3, #8
 8002f96:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL;
 8002f98:	e053      	b.n	8003042 <Vital_Msg_extr+0x336>
			}
			else
			{
				printf("Vital CRC Fail_Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002f9a:	78bb      	ldrb	r3, [r7, #2]
 8002f9c:	4a23      	ldr	r2, [pc, #140]	; (800302c <Vital_Msg_extr+0x320>)
 8002f9e:	3366      	adds	r3, #102	; 0x66
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	4413      	add	r3, r2
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	4619      	mov	r1, r3
 8002fa8:	4821      	ldr	r0, [pc, #132]	; (8003030 <Vital_Msg_extr+0x324>)
 8002faa:	f01f f97f 	bl	80222ac <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fae:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fb0:	4820      	ldr	r0, [pc, #128]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fb2:	f01f f97b 	bl	80222ac <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fb6:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fb8:	481f      	ldr	r0, [pc, #124]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fba:	f01f f977 	bl	80222ac <iprintf>
				return;
 8002fbe:	f000 bea2 	b.w	8003d06 <Vital_Msg_extr+0xffa>
			}
		}
		else
		{
			printf("Vital CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8002fc2:	78bb      	ldrb	r3, [r7, #2]
 8002fc4:	4a19      	ldr	r2, [pc, #100]	; (800302c <Vital_Msg_extr+0x320>)
 8002fc6:	3366      	adds	r3, #102	; 0x66
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4413      	add	r3, r2
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	4619      	mov	r1, r3
 8002fd0:	481a      	ldr	r0, [pc, #104]	; (800303c <Vital_Msg_extr+0x330>)
 8002fd2:	f01f f96b 	bl	80222ac <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 8002fd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002fd8:	4816      	ldr	r0, [pc, #88]	; (8003034 <Vital_Msg_extr+0x328>)
 8002fda:	f01f f967 	bl	80222ac <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 8002fde:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002fe0:	4815      	ldr	r0, [pc, #84]	; (8003038 <Vital_Msg_extr+0x32c>)
 8002fe2:	f01f f963 	bl	80222ac <iprintf>
			return;
 8002fe6:	f000 be8e 	b.w	8003d06 <Vital_Msg_extr+0xffa>
		goto ROLLOVER_VITAL;
 8002fea:	bf00      	nop
 8002fec:	e029      	b.n	8003042 <Vital_Msg_extr+0x336>
 8002fee:	bf00      	nop
 8002ff0:	08023a58 	.word	0x08023a58
 8002ff4:	20000305 	.word	0x20000305
 8002ff8:	2000195c 	.word	0x2000195c
 8002ffc:	20009c78 	.word	0x20009c78
 8003000:	80008001 	.word	0x80008001
 8003004:	08023f5c 	.word	0x08023f5c
 8003008:	200011c4 	.word	0x200011c4
 800300c:	08023f7c 	.word	0x08023f7c
 8003010:	08023fa4 	.word	0x08023fa4
 8003014:	08023fcc 	.word	0x08023fcc
 8003018:	08023fe8 	.word	0x08023fe8
 800301c:	08024000 	.word	0x08024000
 8003020:	08024020 	.word	0x08024020
 8003024:	08024040 	.word	0x08024040
 8003028:	20001674 	.word	0x20001674
 800302c:	20000304 	.word	0x20000304
 8003030:	0802406c 	.word	0x0802406c
 8003034:	08023c9c 	.word	0x08023c9c
 8003038:	08023cac 	.word	0x08023cac
 800303c:	0802408c 	.word	0x0802408c
		}
	}

	ROLLOVER_VITAL:
 8003040:	bf00      	nop
	Last_Recevied_Clock[Source_Index] = Ticks;
 8003042:	78bb      	ldrb	r3, [r7, #2]
 8003044:	49c3      	ldr	r1, [pc, #780]	; (8003354 <Vital_Msg_extr+0x648>)
 8003046:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003048:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 800304c:	78bb      	ldrb	r3, [r7, #2]
 800304e:	49c2      	ldr	r1, [pc, #776]	; (8003358 <Vital_Msg_extr+0x64c>)
 8003050:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Received_Vital[Source_Index] = SET;
 8003056:	78bb      	ldrb	r3, [r7, #2]
 8003058:	4ac0      	ldr	r2, [pc, #768]	; (800335c <Vital_Msg_extr+0x650>)
 800305a:	2101      	movs	r1, #1
 800305c:	54d1      	strb	r1, [r2, r3]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster

	//------| To have a copy and check if the data received on Ethernet and CAN are same.
	//------| If both same no need extract data again in CAN.
	//------| This buffer will be cleared in VITAL-MSG-CAN Function After checking.
	memset(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,0,sizeof(Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata));
 800305e:	78ba      	ldrb	r2, [r7, #2]
 8003060:	4613      	mov	r3, r2
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	4413      	add	r3, r2
 8003066:	005b      	lsls	r3, r3, #1
 8003068:	4abd      	ldr	r2, [pc, #756]	; (8003360 <Vital_Msg_extr+0x654>)
 800306a:	4413      	add	r3, r2
 800306c:	2240      	movs	r2, #64	; 0x40
 800306e:	2100      	movs	r1, #0
 8003070:	4618      	mov	r0, r3
 8003072:	f01f f833 	bl	80220dc <memset>
	memcpy(&Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Buff,Length);
 8003076:	78ba      	ldrb	r2, [r7, #2]
 8003078:	4613      	mov	r3, r2
 800307a:	015b      	lsls	r3, r3, #5
 800307c:	4413      	add	r3, r2
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	4ab7      	ldr	r2, [pc, #732]	; (8003360 <Vital_Msg_extr+0x654>)
 8003082:	4413      	add	r3, r2
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4618      	mov	r0, r3
 800308a:	f01e ffff 	bl	802208c <memcpy>
	Last_Rcv_Vdata_st[Source_Index].Length = Length;
 800308e:	78ba      	ldrb	r2, [r7, #2]
 8003090:	78fb      	ldrb	r3, [r7, #3]
 8003092:	b298      	uxth	r0, r3
 8003094:	49b2      	ldr	r1, [pc, #712]	; (8003360 <Vital_Msg_extr+0x654>)
 8003096:	4613      	mov	r3, r2
 8003098:	015b      	lsls	r3, r3, #5
 800309a:	4413      	add	r3, r2
 800309c:	005b      	lsls	r3, r3, #1
 800309e:	440b      	add	r3, r1
 80030a0:	3340      	adds	r3, #64	; 0x40
 80030a2:	4602      	mov	r2, r0
 80030a4:	801a      	strh	r2, [r3, #0]
	/////////////////////////////////////////////////////////////////////////////////////////////////////

	BITSTUFFINC(8); // Incrementing to escape SOM
 80030a6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80030aa:	3308      	adds	r3, #8
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	da00      	bge.n	80030b2 <Vital_Msg_extr+0x3a6>
 80030b0:	3307      	adds	r3, #7
 80030b2:	10db      	asrs	r3, r3, #3
 80030b4:	b29a      	uxth	r2, r3
 80030b6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030ba:	4413      	add	r3, r2
 80030bc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80030c0:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030c4:	3308      	adds	r3, #8
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	425a      	negs	r2, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	f002 0207 	and.w	r2, r2, #7
 80030d4:	bf58      	it	pl
 80030d6:	4253      	negpl	r3, r2
 80030d8:	b21b      	sxth	r3, r3
 80030da:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80030de:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	441a      	add	r2, r3
 80030e6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80030ea:	2110      	movs	r1, #16
 80030ec:	4618      	mov	r0, r3
 80030ee:	f7fd fa91 	bl	8000614 <ExtractBits>
 80030f2:	4603      	mov	r3, r0
 80030f4:	78ba      	ldrb	r2, [r7, #2]
 80030f6:	b298      	uxth	r0, r3
 80030f8:	499a      	ldr	r1, [pc, #616]	; (8003364 <Vital_Msg_extr+0x658>)
 80030fa:	4613      	mov	r3, r2
 80030fc:	005b      	lsls	r3, r3, #1
 80030fe:	4413      	add	r3, r2
 8003100:	011b      	lsls	r3, r3, #4
 8003102:	440b      	add	r3, r1
 8003104:	3328      	adds	r3, #40	; 0x28
 8003106:	4602      	mov	r2, r0
 8003108:	801a      	strh	r2, [r3, #0]
	printf("DA:%u ", Hitachi_Vital_st[Source_Index].Des_Addr);
 800310a:	78ba      	ldrb	r2, [r7, #2]
 800310c:	4995      	ldr	r1, [pc, #596]	; (8003364 <Vital_Msg_extr+0x658>)
 800310e:	4613      	mov	r3, r2
 8003110:	005b      	lsls	r3, r3, #1
 8003112:	4413      	add	r3, r2
 8003114:	011b      	lsls	r3, r3, #4
 8003116:	440b      	add	r3, r1
 8003118:	3328      	adds	r3, #40	; 0x28
 800311a:	881b      	ldrh	r3, [r3, #0]
 800311c:	4619      	mov	r1, r3
 800311e:	4892      	ldr	r0, [pc, #584]	; (8003368 <Vital_Msg_extr+0x65c>)
 8003120:	f01f f8c4 	bl	80222ac <iprintf>
	BITSTUFFINC(16);
 8003124:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003128:	3310      	adds	r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	da00      	bge.n	8003130 <Vital_Msg_extr+0x424>
 800312e:	3307      	adds	r3, #7
 8003130:	10db      	asrs	r3, r3, #3
 8003132:	b29a      	uxth	r2, r3
 8003134:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003138:	4413      	add	r3, r2
 800313a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800313e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003142:	3310      	adds	r3, #16
 8003144:	b29b      	uxth	r3, r3
 8003146:	b21b      	sxth	r3, r3
 8003148:	425a      	negs	r2, r3
 800314a:	f003 0307 	and.w	r3, r3, #7
 800314e:	f002 0207 	and.w	r2, r2, #7
 8003152:	bf58      	it	pl
 8003154:	4253      	negpl	r3, r2
 8003156:	b21b      	sxth	r3, r3
 8003158:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800315c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	441a      	add	r2, r3
 8003164:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003168:	2110      	movs	r1, #16
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd fa52 	bl	8000614 <ExtractBits>
 8003170:	4603      	mov	r3, r0
 8003172:	78ba      	ldrb	r2, [r7, #2]
 8003174:	b298      	uxth	r0, r3
 8003176:	497b      	ldr	r1, [pc, #492]	; (8003364 <Vital_Msg_extr+0x658>)
 8003178:	4613      	mov	r3, r2
 800317a:	005b      	lsls	r3, r3, #1
 800317c:	4413      	add	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	440b      	add	r3, r1
 8003182:	3326      	adds	r3, #38	; 0x26
 8003184:	4602      	mov	r2, r0
 8003186:	801a      	strh	r2, [r3, #0]
	printf("SA:%u ", Hitachi_Vital_st[Source_Index].Src_Addr);
 8003188:	78ba      	ldrb	r2, [r7, #2]
 800318a:	4976      	ldr	r1, [pc, #472]	; (8003364 <Vital_Msg_extr+0x658>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	440b      	add	r3, r1
 8003196:	3326      	adds	r3, #38	; 0x26
 8003198:	881b      	ldrh	r3, [r3, #0]
 800319a:	4619      	mov	r1, r3
 800319c:	4873      	ldr	r0, [pc, #460]	; (800336c <Vital_Msg_extr+0x660>)
 800319e:	f01f f885 	bl	80222ac <iprintf>
	BITSTUFFINC(16);
 80031a2:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80031a6:	3310      	adds	r3, #16
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	da00      	bge.n	80031ae <Vital_Msg_extr+0x4a2>
 80031ac:	3307      	adds	r3, #7
 80031ae:	10db      	asrs	r3, r3, #3
 80031b0:	b29a      	uxth	r2, r3
 80031b2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031b6:	4413      	add	r3, r2
 80031b8:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80031bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031c0:	3310      	adds	r3, #16
 80031c2:	b29b      	uxth	r3, r3
 80031c4:	b21b      	sxth	r3, r3
 80031c6:	425a      	negs	r2, r3
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	f002 0207 	and.w	r2, r2, #7
 80031d0:	bf58      	it	pl
 80031d2:	4253      	negpl	r3, r2
 80031d4:	b21b      	sxth	r3, r3
 80031d6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80031da:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80031de:	687a      	ldr	r2, [r7, #4]
 80031e0:	441a      	add	r2, r3
 80031e2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80031e6:	2108      	movs	r1, #8
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7fd fa13 	bl	8000614 <ExtractBits>
 80031ee:	4602      	mov	r2, r0
 80031f0:	78bb      	ldrb	r3, [r7, #2]
 80031f2:	b2d1      	uxtb	r1, r2
 80031f4:	4a5e      	ldr	r2, [pc, #376]	; (8003370 <Vital_Msg_extr+0x664>)
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	4413      	add	r3, r2
 80031fa:	3302      	adds	r3, #2
 80031fc:	460a      	mov	r2, r1
 80031fe:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8003200:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003204:	3308      	adds	r3, #8
 8003206:	2b00      	cmp	r3, #0
 8003208:	da00      	bge.n	800320c <Vital_Msg_extr+0x500>
 800320a:	3307      	adds	r3, #7
 800320c:	10db      	asrs	r3, r3, #3
 800320e:	b29a      	uxth	r2, r3
 8003210:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003214:	4413      	add	r3, r2
 8003216:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800321a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800321e:	3308      	adds	r3, #8
 8003220:	b29b      	uxth	r3, r3
 8003222:	b21b      	sxth	r3, r3
 8003224:	425a      	negs	r2, r3
 8003226:	f003 0307 	and.w	r3, r3, #7
 800322a:	f002 0207 	and.w	r2, r2, #7
 800322e:	bf58      	it	pl
 8003230:	4253      	negpl	r3, r2
 8003232:	b21b      	sxth	r3, r3
 8003234:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	441a      	add	r2, r3
 8003240:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003244:	2108      	movs	r1, #8
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f9e4 	bl	8000614 <ExtractBits>
 800324c:	4602      	mov	r2, r0
 800324e:	78bb      	ldrb	r3, [r7, #2]
 8003250:	b2d1      	uxtb	r1, r2
 8003252:	4a47      	ldr	r2, [pc, #284]	; (8003370 <Vital_Msg_extr+0x664>)
 8003254:	011b      	lsls	r3, r3, #4
 8003256:	4413      	add	r3, r2
 8003258:	3301      	adds	r3, #1
 800325a:	460a      	mov	r2, r1
 800325c:	701a      	strb	r2, [r3, #0]
	//printf("Rx_seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 800325e:	78bb      	ldrb	r3, [r7, #2]
 8003260:	4a43      	ldr	r2, [pc, #268]	; (8003370 <Vital_Msg_extr+0x664>)
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	4413      	add	r3, r2
 8003266:	3301      	adds	r3, #1
 8003268:	781b      	ldrb	r3, [r3, #0]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d138      	bne.n	80032e0 <Vital_Msg_extr+0x5d4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800326e:	78bb      	ldrb	r3, [r7, #2]
 8003270:	4a40      	ldr	r2, [pc, #256]	; (8003374 <Vital_Msg_extr+0x668>)
 8003272:	3366      	adds	r3, #102	; 0x66
 8003274:	009b      	lsls	r3, r3, #2
 8003276:	4413      	add	r3, r2
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	4619      	mov	r1, r3
 800327c:	483e      	ldr	r0, [pc, #248]	; (8003378 <Vital_Msg_extr+0x66c>)
 800327e:	f01f f815 	bl	80222ac <iprintf>
		printf("Prev Val:%06lx:",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8003282:	78bb      	ldrb	r3, [r7, #2]
 8003284:	4a3a      	ldr	r2, [pc, #232]	; (8003370 <Vital_Msg_extr+0x664>)
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	4413      	add	r3, r2
 800328a:	330c      	adds	r3, #12
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4619      	mov	r1, r3
 8003290:	483a      	ldr	r0, [pc, #232]	; (800337c <Vital_Msg_extr+0x670>)
 8003292:	f01f f80b 	bl	80222ac <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 8003296:	78bb      	ldrb	r3, [r7, #2]
 8003298:	4935      	ldr	r1, [pc, #212]	; (8003370 <Vital_Msg_extr+0x664>)
 800329a:	011a      	lsls	r2, r3, #4
 800329c:	440a      	add	r2, r1
 800329e:	320c      	adds	r2, #12
 80032a0:	6812      	ldr	r2, [r2, #0]
 80032a2:	3201      	adds	r2, #1
 80032a4:	4932      	ldr	r1, [pc, #200]	; (8003370 <Vital_Msg_extr+0x664>)
 80032a6:	011b      	lsls	r3, r3, #4
 80032a8:	440b      	add	r3, r1
 80032aa:	330c      	adds	r3, #12
 80032ac:	601a      	str	r2, [r3, #0]
		printf("Cur Val:%06lx\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80032ae:	78bb      	ldrb	r3, [r7, #2]
 80032b0:	4a2f      	ldr	r2, [pc, #188]	; (8003370 <Vital_Msg_extr+0x664>)
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	4413      	add	r3, r2
 80032b6:	330c      	adds	r3, #12
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4619      	mov	r1, r3
 80032bc:	4830      	ldr	r0, [pc, #192]	; (8003380 <Vital_Msg_extr+0x674>)
 80032be:	f01e fff5 	bl	80222ac <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80032c2:	78bb      	ldrb	r3, [r7, #2]
 80032c4:	78ba      	ldrb	r2, [r7, #2]
 80032c6:	492a      	ldr	r1, [pc, #168]	; (8003370 <Vital_Msg_extr+0x664>)
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	440b      	add	r3, r1
 80032cc:	330c      	adds	r3, #12
 80032ce:	6819      	ldr	r1, [r3, #0]
 80032d0:	482c      	ldr	r0, [pc, #176]	; (8003384 <Vital_Msg_extr+0x678>)
 80032d2:	4613      	mov	r3, r2
 80032d4:	005b      	lsls	r3, r3, #1
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4403      	add	r3, r0
 80032dc:	330c      	adds	r3, #12
 80032de:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 80032e0:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80032e4:	3308      	adds	r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	da00      	bge.n	80032ec <Vital_Msg_extr+0x5e0>
 80032ea:	3307      	adds	r3, #7
 80032ec:	10db      	asrs	r3, r3, #3
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80032f4:	4413      	add	r3, r2
 80032f6:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80032fa:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80032fe:	3308      	adds	r3, #8
 8003300:	b29b      	uxth	r3, r3
 8003302:	b21b      	sxth	r3, r3
 8003304:	425a      	negs	r2, r3
 8003306:	f003 0307 	and.w	r3, r3, #7
 800330a:	f002 0207 	and.w	r2, r2, #7
 800330e:	bf58      	it	pl
 8003310:	4253      	negpl	r3, r2
 8003312:	b21b      	sxth	r3, r3
 8003314:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_Vital_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003318:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800331c:	687a      	ldr	r2, [r7, #4]
 800331e:	441a      	add	r2, r3
 8003320:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003324:	2108      	movs	r1, #8
 8003326:	4618      	mov	r0, r3
 8003328:	f7fd f974 	bl	8000614 <ExtractBits>
 800332c:	4603      	mov	r3, r0
 800332e:	78ba      	ldrb	r2, [r7, #2]
 8003330:	b2d8      	uxtb	r0, r3
 8003332:	490c      	ldr	r1, [pc, #48]	; (8003364 <Vital_Msg_extr+0x658>)
 8003334:	4613      	mov	r3, r2
 8003336:	005b      	lsls	r3, r3, #1
 8003338:	4413      	add	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	440b      	add	r3, r1
 800333e:	3302      	adds	r3, #2
 8003340:	4602      	mov	r2, r0
 8003342:	701a      	strb	r2, [r3, #0]
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8003344:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003348:	3308      	adds	r3, #8
 800334a:	2b00      	cmp	r3, #0
 800334c:	da1c      	bge.n	8003388 <Vital_Msg_extr+0x67c>
 800334e:	3307      	adds	r3, #7
 8003350:	e01a      	b.n	8003388 <Vital_Msg_extr+0x67c>
 8003352:	bf00      	nop
 8003354:	20000fa4 	.word	0x20000fa4
 8003358:	20000fcc 	.word	0x20000fcc
 800335c:	20001018 	.word	0x20001018
 8003360:	2000197c 	.word	0x2000197c
 8003364:	200013a4 	.word	0x200013a4
 8003368:	08023d8c 	.word	0x08023d8c
 800336c:	08023d94 	.word	0x08023d94
 8003370:	200011c4 	.word	0x200011c4
 8003374:	20000304 	.word	0x20000304
 8003378:	080240a0 	.word	0x080240a0
 800337c:	080240e4 	.word	0x080240e4
 8003380:	080240f4 	.word	0x080240f4
 8003384:	20001674 	.word	0x20001674
 8003388:	10db      	asrs	r3, r3, #3
 800338a:	b29a      	uxth	r2, r3
 800338c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003390:	4413      	add	r3, r2
 8003392:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003396:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800339a:	3308      	adds	r3, #8
 800339c:	b29b      	uxth	r3, r3
 800339e:	b21b      	sxth	r3, r3
 80033a0:	425a      	negs	r2, r3
 80033a2:	f003 0307 	and.w	r3, r3, #7
 80033a6:	f002 0207 	and.w	r2, r2, #7
 80033aa:	bf58      	it	pl
 80033ac:	4253      	negpl	r3, r2
 80033ae:	b21b      	sxth	r3, r3
 80033b0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	Hitachi_prms_st[Source_Index].Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80033b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	441a      	add	r2, r3
 80033bc:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80033c0:	2110      	movs	r1, #16
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fd f926 	bl	8000614 <ExtractBits>
 80033c8:	4602      	mov	r2, r0
 80033ca:	78bb      	ldrb	r3, [r7, #2]
 80033cc:	b291      	uxth	r1, r2
 80033ce:	4abd      	ldr	r2, [pc, #756]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	4413      	add	r3, r2
 80033d4:	3304      	adds	r3, #4
 80033d6:	460a      	mov	r2, r1
 80033d8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80033da:	49bb      	ldr	r1, [pc, #748]	; (80036c8 <Vital_Msg_extr+0x9bc>)
 80033dc:	48bb      	ldr	r0, [pc, #748]	; (80036cc <Vital_Msg_extr+0x9c0>)
 80033de:	f7fc ff2f 	bl	8000240 <strcmp>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d10f      	bne.n	8003408 <Vital_Msg_extr+0x6fc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80033e8:	78bb      	ldrb	r3, [r7, #2]
 80033ea:	4ab6      	ldr	r2, [pc, #728]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	4413      	add	r3, r2
 80033f0:	3304      	adds	r3, #4
 80033f2:	881a      	ldrh	r2, [r3, #0]
 80033f4:	78bb      	ldrb	r3, [r7, #2]
 80033f6:	f042 0208 	orr.w	r2, r2, #8
 80033fa:	b291      	uxth	r1, r2
 80033fc:	4ab1      	ldr	r2, [pc, #708]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	4413      	add	r3, r2
 8003402:	3304      	adds	r3, #4
 8003404:	460a      	mov	r2, r1
 8003406:	801a      	strh	r2, [r3, #0]
	}
	//printf("Msg_sts_flag       :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8003408:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800340c:	3310      	adds	r3, #16
 800340e:	2b00      	cmp	r3, #0
 8003410:	da00      	bge.n	8003414 <Vital_Msg_extr+0x708>
 8003412:	3307      	adds	r3, #7
 8003414:	10db      	asrs	r3, r3, #3
 8003416:	b29a      	uxth	r2, r3
 8003418:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800341c:	4413      	add	r3, r2
 800341e:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003422:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003426:	3310      	adds	r3, #16
 8003428:	b29b      	uxth	r3, r3
 800342a:	b21b      	sxth	r3, r3
 800342c:	425a      	negs	r2, r3
 800342e:	f003 0307 	and.w	r3, r3, #7
 8003432:	f002 0207 	and.w	r2, r2, #7
 8003436:	bf58      	it	pl
 8003438:	4253      	negpl	r3, r2
 800343a:	b21b      	sxth	r3, r3
 800343c:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag, Hitachi_Vital_st[Source_Index].Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) ) // Time-stamp Extraction
 8003440:	78bb      	ldrb	r3, [r7, #2]
 8003442:	4aa0      	ldr	r2, [pc, #640]	; (80036c4 <Vital_Msg_extr+0x9b8>)
 8003444:	011b      	lsls	r3, r3, #4
 8003446:	4413      	add	r3, r2
 8003448:	3304      	adds	r3, #4
 800344a:	881b      	ldrh	r3, [r3, #0]
 800344c:	f003 0320 	and.w	r3, r3, #32
 8003450:	2b00      	cmp	r3, #0
 8003452:	f000 8145 	beq.w	80036e0 <Vital_Msg_extr+0x9d4>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003456:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	441a      	add	r2, r3
 800345e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003462:	2108      	movs	r1, #8
 8003464:	4618      	mov	r0, r3
 8003466:	f7fd f8d5 	bl	8000614 <ExtractBits>
 800346a:	4603      	mov	r3, r0
 800346c:	78ba      	ldrb	r2, [r7, #2]
 800346e:	b2d8      	uxtb	r0, r3
 8003470:	4997      	ldr	r1, [pc, #604]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003472:	4613      	mov	r3, r2
 8003474:	005b      	lsls	r3, r3, #1
 8003476:	4413      	add	r3, r2
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	440b      	add	r3, r1
 800347c:	3305      	adds	r3, #5
 800347e:	4602      	mov	r2, r0
 8003480:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8003482:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003486:	3308      	adds	r3, #8
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <Vital_Msg_extr+0x782>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	b29a      	uxth	r2, r3
 8003492:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003496:	4413      	add	r3, r2
 8003498:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800349c:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034a0:	3308      	adds	r3, #8
 80034a2:	b29b      	uxth	r3, r3
 80034a4:	b21b      	sxth	r3, r3
 80034a6:	425a      	negs	r2, r3
 80034a8:	f003 0307 	and.w	r3, r3, #7
 80034ac:	f002 0207 	and.w	r2, r2, #7
 80034b0:	bf58      	it	pl
 80034b2:	4253      	negpl	r3, r2
 80034b4:	b21b      	sxth	r3, r3
 80034b6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80034ba:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	441a      	add	r2, r3
 80034c2:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80034c6:	2108      	movs	r1, #8
 80034c8:	4618      	mov	r0, r3
 80034ca:	f7fd f8a3 	bl	8000614 <ExtractBits>
 80034ce:	4603      	mov	r3, r0
 80034d0:	78ba      	ldrb	r2, [r7, #2]
 80034d2:	b2d8      	uxtb	r0, r3
 80034d4:	497e      	ldr	r1, [pc, #504]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 80034d6:	4613      	mov	r3, r2
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	4413      	add	r3, r2
 80034dc:	005b      	lsls	r3, r3, #1
 80034de:	440b      	add	r3, r1
 80034e0:	3304      	adds	r3, #4
 80034e2:	4602      	mov	r2, r0
 80034e4:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80034e6:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80034ea:	3308      	adds	r3, #8
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	da00      	bge.n	80034f2 <Vital_Msg_extr+0x7e6>
 80034f0:	3307      	adds	r3, #7
 80034f2:	10db      	asrs	r3, r3, #3
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80034fa:	4413      	add	r3, r2
 80034fc:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003500:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003504:	3308      	adds	r3, #8
 8003506:	b29b      	uxth	r3, r3
 8003508:	b21b      	sxth	r3, r3
 800350a:	425a      	negs	r2, r3
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	f002 0207 	and.w	r2, r2, #7
 8003514:	bf58      	it	pl
 8003516:	4253      	negpl	r3, r2
 8003518:	b21b      	sxth	r3, r3
 800351a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800351e:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003522:	687a      	ldr	r2, [r7, #4]
 8003524:	441a      	add	r2, r3
 8003526:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800352a:	2108      	movs	r1, #8
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f871 	bl	8000614 <ExtractBits>
 8003532:	4603      	mov	r3, r0
 8003534:	78ba      	ldrb	r2, [r7, #2]
 8003536:	b2d8      	uxtb	r0, r3
 8003538:	4965      	ldr	r1, [pc, #404]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800353a:	4613      	mov	r3, r2
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	4413      	add	r3, r2
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	440b      	add	r3, r1
 8003544:	3303      	adds	r3, #3
 8003546:	4602      	mov	r2, r0
 8003548:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 800354a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800354e:	3308      	adds	r3, #8
 8003550:	2b00      	cmp	r3, #0
 8003552:	da00      	bge.n	8003556 <Vital_Msg_extr+0x84a>
 8003554:	3307      	adds	r3, #7
 8003556:	10db      	asrs	r3, r3, #3
 8003558:	b29a      	uxth	r2, r3
 800355a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800355e:	4413      	add	r3, r2
 8003560:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003564:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003568:	3308      	adds	r3, #8
 800356a:	b29b      	uxth	r3, r3
 800356c:	b21b      	sxth	r3, r3
 800356e:	425a      	negs	r2, r3
 8003570:	f003 0307 	and.w	r3, r3, #7
 8003574:	f002 0207 	and.w	r2, r2, #7
 8003578:	bf58      	it	pl
 800357a:	4253      	negpl	r3, r2
 800357c:	b21b      	sxth	r3, r3
 800357e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003582:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	441a      	add	r2, r3
 800358a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800358e:	2108      	movs	r1, #8
 8003590:	4618      	mov	r0, r3
 8003592:	f7fd f83f 	bl	8000614 <ExtractBits>
 8003596:	4603      	mov	r3, r0
 8003598:	78ba      	ldrb	r2, [r7, #2]
 800359a:	b2d8      	uxtb	r0, r3
 800359c:	494c      	ldr	r1, [pc, #304]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	005b      	lsls	r3, r3, #1
 80035a6:	440b      	add	r3, r1
 80035a8:	4602      	mov	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
		//printf("HOURS              :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 80035ac:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80035b0:	3308      	adds	r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	da00      	bge.n	80035b8 <Vital_Msg_extr+0x8ac>
 80035b6:	3307      	adds	r3, #7
 80035b8:	10db      	asrs	r3, r3, #3
 80035ba:	b29a      	uxth	r2, r3
 80035bc:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035c0:	4413      	add	r3, r2
 80035c2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80035c6:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035ca:	3308      	adds	r3, #8
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	b21b      	sxth	r3, r3
 80035d0:	425a      	negs	r2, r3
 80035d2:	f003 0307 	and.w	r3, r3, #7
 80035d6:	f002 0207 	and.w	r2, r2, #7
 80035da:	bf58      	it	pl
 80035dc:	4253      	negpl	r3, r2
 80035de:	b21b      	sxth	r3, r3
 80035e0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80035e4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	441a      	add	r2, r3
 80035ec:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80035f0:	2108      	movs	r1, #8
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd f80e 	bl	8000614 <ExtractBits>
 80035f8:	4603      	mov	r3, r0
 80035fa:	78ba      	ldrb	r2, [r7, #2]
 80035fc:	b2d8      	uxtb	r0, r3
 80035fe:	4934      	ldr	r1, [pc, #208]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003600:	4613      	mov	r3, r2
 8003602:	005b      	lsls	r3, r3, #1
 8003604:	4413      	add	r3, r2
 8003606:	005b      	lsls	r3, r3, #1
 8003608:	440b      	add	r3, r1
 800360a:	3301      	adds	r3, #1
 800360c:	4602      	mov	r2, r0
 800360e:	701a      	strb	r2, [r3, #0]
		//printf("MINS               :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8003610:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003614:	3308      	adds	r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	da00      	bge.n	800361c <Vital_Msg_extr+0x910>
 800361a:	3307      	adds	r3, #7
 800361c:	10db      	asrs	r3, r3, #3
 800361e:	b29a      	uxth	r2, r3
 8003620:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003624:	4413      	add	r3, r2
 8003626:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800362a:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 800362e:	3308      	adds	r3, #8
 8003630:	b29b      	uxth	r3, r3
 8003632:	b21b      	sxth	r3, r3
 8003634:	425a      	negs	r2, r3
 8003636:	f003 0307 	and.w	r3, r3, #7
 800363a:	f002 0207 	and.w	r2, r2, #7
 800363e:	bf58      	it	pl
 8003640:	4253      	negpl	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003648:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	441a      	add	r2, r3
 8003650:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003654:	2108      	movs	r1, #8
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ffdc 	bl	8000614 <ExtractBits>
 800365c:	4603      	mov	r3, r0
 800365e:	78ba      	ldrb	r2, [r7, #2]
 8003660:	b2d8      	uxtb	r0, r3
 8003662:	491b      	ldr	r1, [pc, #108]	; (80036d0 <Vital_Msg_extr+0x9c4>)
 8003664:	4613      	mov	r3, r2
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	4413      	add	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	440b      	add	r3, r1
 800366e:	3302      	adds	r3, #2
 8003670:	4602      	mov	r2, r0
 8003672:	701a      	strb	r2, [r3, #0]
		//printf("SEC                :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8003674:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003678:	3308      	adds	r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	da00      	bge.n	8003680 <Vital_Msg_extr+0x974>
 800367e:	3307      	adds	r3, #7
 8003680:	10db      	asrs	r3, r3, #3
 8003682:	b29a      	uxth	r2, r3
 8003684:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003688:	4413      	add	r3, r2
 800368a:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 800368e:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003692:	3308      	adds	r3, #8
 8003694:	b29b      	uxth	r3, r3
 8003696:	b21b      	sxth	r3, r3
 8003698:	425a      	negs	r2, r3
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	f002 0207 	and.w	r2, r2, #7
 80036a2:	bf58      	it	pl
 80036a4:	4253      	negpl	r3, r2
 80036a6:	b21b      	sxth	r3, r3
 80036a8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 80036ac:	78bb      	ldrb	r3, [r7, #2]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f005 f8cc 	bl	800884c <IS_MLK_EIPC_TIME_MATCHING>
 80036b4:	4603      	mov	r3, r0
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d00e      	beq.n	80036d8 <Vital_Msg_extr+0x9cc>
 80036ba:	78bb      	ldrb	r3, [r7, #2]
 80036bc:	4a05      	ldr	r2, [pc, #20]	; (80036d4 <Vital_Msg_extr+0x9c8>)
 80036be:	2100      	movs	r1, #0
 80036c0:	54d1      	strb	r1, [r2, r3]
 80036c2:	e00d      	b.n	80036e0 <Vital_Msg_extr+0x9d4>
 80036c4:	200011c4 	.word	0x200011c4
 80036c8:	08023a58 	.word	0x08023a58
 80036cc:	20000305 	.word	0x20000305
 80036d0:	20001188 	.word	0x20001188
 80036d4:	200010d8 	.word	0x200010d8
 80036d8:	78bb      	ldrb	r3, [r7, #2]
 80036da:	4a86      	ldr	r2, [pc, #536]	; (80038f4 <Vital_Msg_extr+0xbe8>)
 80036dc:	2101      	movs	r1, #1
 80036de:	54d1      	strb	r1, [r2, r3]


	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 80036e0:	78bb      	ldrb	r3, [r7, #2]
 80036e2:	4a85      	ldr	r2, [pc, #532]	; (80038f8 <Vital_Msg_extr+0xbec>)
 80036e4:	011b      	lsls	r3, r3, #4
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	881b      	ldrh	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d002      	beq.n	80036fa <Vital_Msg_extr+0x9ee>
	{
		LinkEstablishFlag = SET;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	}

	Hitachi_Vital_st[Source_Index].No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80036fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	441a      	add	r2, r3
 8003702:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003706:	2108      	movs	r1, #8
 8003708:	4618      	mov	r0, r3
 800370a:	f7fc ff83 	bl	8000614 <ExtractBits>
 800370e:	4603      	mov	r3, r0
 8003710:	78ba      	ldrb	r2, [r7, #2]
 8003712:	b2d8      	uxtb	r0, r3
 8003714:	4979      	ldr	r1, [pc, #484]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003716:	4613      	mov	r3, r2
 8003718:	005b      	lsls	r3, r3, #1
 800371a:	4413      	add	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	440b      	add	r3, r1
 8003720:	3303      	adds	r3, #3
 8003722:	4602      	mov	r2, r0
 8003724:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 8003726:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800372a:	3308      	adds	r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	da00      	bge.n	8003732 <Vital_Msg_extr+0xa26>
 8003730:	3307      	adds	r3, #7
 8003732:	10db      	asrs	r3, r3, #3
 8003734:	b29a      	uxth	r2, r3
 8003736:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800373a:	4413      	add	r3, r2
 800373c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003740:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003744:	3308      	adds	r3, #8
 8003746:	b29b      	uxth	r3, r3
 8003748:	b21b      	sxth	r3, r3
 800374a:	425a      	negs	r2, r3
 800374c:	f003 0307 	and.w	r3, r3, #7
 8003750:	f002 0207 	and.w	r2, r2, #7
 8003754:	bf58      	it	pl
 8003756:	4253      	negpl	r3, r2
 8003758:	b21b      	sxth	r3, r3
 800375a:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	printf("OP:%u ", Hitachi_Vital_st[Source_Index].No_Outputs);
 800375e:	78ba      	ldrb	r2, [r7, #2]
 8003760:	4966      	ldr	r1, [pc, #408]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003762:	4613      	mov	r3, r2
 8003764:	005b      	lsls	r3, r3, #1
 8003766:	4413      	add	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	440b      	add	r3, r1
 800376c:	3303      	adds	r3, #3
 800376e:	781b      	ldrb	r3, [r3, #0]
 8003770:	4619      	mov	r1, r3
 8003772:	4863      	ldr	r0, [pc, #396]	; (8003900 <Vital_Msg_extr+0xbf4>)
 8003774:	f01e fd9a 	bl	80222ac <iprintf>

	Hitachi_Vital_st[Source_Index].Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	441a      	add	r2, r3
 8003780:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003784:	2108      	movs	r1, #8
 8003786:	4618      	mov	r0, r3
 8003788:	f7fc ff44 	bl	8000614 <ExtractBits>
 800378c:	4603      	mov	r3, r0
 800378e:	78ba      	ldrb	r2, [r7, #2]
 8003790:	b2d8      	uxtb	r0, r3
 8003792:	495a      	ldr	r1, [pc, #360]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	011b      	lsls	r3, r3, #4
 800379c:	440b      	add	r3, r1
 800379e:	3304      	adds	r3, #4
 80037a0:	4602      	mov	r2, r0
 80037a2:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(8);
 80037a4:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 80037a8:	3308      	adds	r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	da00      	bge.n	80037b0 <Vital_Msg_extr+0xaa4>
 80037ae:	3307      	adds	r3, #7
 80037b0:	10db      	asrs	r3, r3, #3
 80037b2:	b29a      	uxth	r2, r3
 80037b4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80037b8:	4413      	add	r3, r2
 80037ba:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80037be:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80037c2:	3308      	adds	r3, #8
 80037c4:	b29b      	uxth	r3, r3
 80037c6:	b21b      	sxth	r3, r3
 80037c8:	425a      	negs	r2, r3
 80037ca:	f003 0307 	and.w	r3, r3, #7
 80037ce:	f002 0207 	and.w	r2, r2, #7
 80037d2:	bf58      	it	pl
 80037d4:	4253      	negpl	r3, r2
 80037d6:	b21b      	sxth	r3, r3
 80037d8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	//printf("Sz_Num_Val_Data    :%u\n", Hitachi_Vital_st[Source_Index].Size_Num_val);

	noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs % 8);
 80037dc:	78ba      	ldrb	r2, [r7, #2]
 80037de:	4947      	ldr	r1, [pc, #284]	; (80038fc <Vital_Msg_extr+0xbf0>)
 80037e0:	4613      	mov	r3, r2
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	4413      	add	r3, r2
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	440b      	add	r3, r1
 80037ea:	3303      	adds	r3, #3
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (noofIP != 0)
 80037f6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d00e      	beq.n	800381c <Vital_Msg_extr+0xb10>
	{
		noofIP = ((Hitachi_Vital_st[Source_Index].No_Outputs / 8)) + 1; //	including 0th buffer
 80037fe:	78ba      	ldrb	r2, [r7, #2]
 8003800:	493e      	ldr	r1, [pc, #248]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003802:	4613      	mov	r3, r2
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	4413      	add	r3, r2
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	440b      	add	r3, r1
 800380c:	3303      	adds	r3, #3
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	08db      	lsrs	r3, r3, #3
 8003812:	b2db      	uxtb	r3, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800381a:	e00b      	b.n	8003834 <Vital_Msg_extr+0xb28>
	}
	else
	{
		noofIP = (Hitachi_Vital_st[Source_Index].No_Outputs / 8);
 800381c:	78ba      	ldrb	r2, [r7, #2]
 800381e:	4937      	ldr	r1, [pc, #220]	; (80038fc <Vital_Msg_extr+0xbf0>)
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	440b      	add	r3, r1
 800382a:	3303      	adds	r3, #3
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	08db      	lsrs	r3, r3, #3
 8003830:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8003834:	2300      	movs	r3, #0
 8003836:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800383a:	e04c      	b.n	80038d6 <Vital_Msg_extr+0xbca>
	{
		Hitachi_Vital_st[Source_Index].Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800383c:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	441a      	add	r2, r3
 8003844:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003848:	2108      	movs	r1, #8
 800384a:	4618      	mov	r0, r3
 800384c:	f7fc fee2 	bl	8000614 <ExtractBits>
 8003850:	4603      	mov	r3, r0
 8003852:	78ba      	ldrb	r2, [r7, #2]
 8003854:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003858:	b2dc      	uxtb	r4, r3
 800385a:	4828      	ldr	r0, [pc, #160]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800385c:	4613      	mov	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	4413      	add	r3, r2
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	4403      	add	r3, r0
 8003866:	440b      	add	r3, r1
 8003868:	3305      	adds	r3, #5
 800386a:	4622      	mov	r2, r4
 800386c:	701a      	strb	r2, [r3, #0]
		printf("[%02u]:%02X ", Traverser,Hitachi_Vital_st[Source_Index].Outputs[Traverser]);
 800386e:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
 8003872:	78ba      	ldrb	r2, [r7, #2]
 8003874:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003878:	4c20      	ldr	r4, [pc, #128]	; (80038fc <Vital_Msg_extr+0xbf0>)
 800387a:	4613      	mov	r3, r2
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	4413      	add	r3, r2
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	4423      	add	r3, r4
 8003884:	440b      	add	r3, r1
 8003886:	3305      	adds	r3, #5
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	461a      	mov	r2, r3
 800388c:	4601      	mov	r1, r0
 800388e:	481d      	ldr	r0, [pc, #116]	; (8003904 <Vital_Msg_extr+0xbf8>)
 8003890:	f01e fd0c 	bl	80222ac <iprintf>
		BITSTUFFINC(8);
 8003894:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8003898:	3308      	adds	r3, #8
 800389a:	2b00      	cmp	r3, #0
 800389c:	da00      	bge.n	80038a0 <Vital_Msg_extr+0xb94>
 800389e:	3307      	adds	r3, #7
 80038a0:	10db      	asrs	r3, r3, #3
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80038a8:	4413      	add	r3, r2
 80038aa:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 80038ae:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 80038b2:	3308      	adds	r3, #8
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	b21b      	sxth	r3, r3
 80038b8:	425a      	negs	r2, r3
 80038ba:	f003 0307 	and.w	r3, r3, #7
 80038be:	f002 0207 	and.w	r2, r2, #7
 80038c2:	bf58      	it	pl
 80038c4:	4253      	negpl	r3, r2
 80038c6:	b21b      	sxth	r3, r3
 80038c8:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 80038cc:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80038d0:	3301      	adds	r3, #1
 80038d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d3ab      	bcc.n	800383c <Vital_Msg_extr+0xb30>
	}
	printf("\n");
 80038e4:	200a      	movs	r0, #10
 80038e6:	f01e fcf9 	bl	80222dc <putchar>

	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 80038ea:	2300      	movs	r3, #0
 80038ec:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80038f0:	e044      	b.n	800397c <Vital_Msg_extr+0xc70>
 80038f2:	bf00      	nop
 80038f4:	200010d8 	.word	0x200010d8
 80038f8:	200011c4 	.word	0x200011c4
 80038fc:	200013a4 	.word	0x200013a4
 8003900:	08024104 	.word	0x08024104
 8003904:	0802410c 	.word	0x0802410c
	{
		Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8003908:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	441a      	add	r2, r3
 8003910:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003914:	2108      	movs	r1, #8
 8003916:	4618      	mov	r0, r3
 8003918:	f7fc fe7c 	bl	8000614 <ExtractBits>
 800391c:	4603      	mov	r3, r0
 800391e:	78ba      	ldrb	r2, [r7, #2]
 8003920:	f8b7 105e 	ldrh.w	r1, [r7, #94]	; 0x5e
 8003924:	b2dc      	uxtb	r4, r3
 8003926:	48c4      	ldr	r0, [pc, #784]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	011b      	lsls	r3, r3, #4
 8003930:	4403      	add	r3, r0
 8003932:	440b      	add	r3, r1
 8003934:	3315      	adds	r3, #21
 8003936:	4622      	mov	r2, r4
 8003938:	701a      	strb	r2, [r3, #0]
		//printf("Num op Values      :0x%02X\n",  Hitachi_Vital_st[Source_Index].Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 800393a:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 800393e:	3308      	adds	r3, #8
 8003940:	2b00      	cmp	r3, #0
 8003942:	da00      	bge.n	8003946 <Vital_Msg_extr+0xc3a>
 8003944:	3307      	adds	r3, #7
 8003946:	10db      	asrs	r3, r3, #3
 8003948:	b29a      	uxth	r2, r3
 800394a:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800394e:	4413      	add	r3, r2
 8003950:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52
 8003954:	f8b7 3050 	ldrh.w	r3, [r7, #80]	; 0x50
 8003958:	3308      	adds	r3, #8
 800395a:	b29b      	uxth	r3, r3
 800395c:	b21b      	sxth	r3, r3
 800395e:	425a      	negs	r2, r3
 8003960:	f003 0307 	and.w	r3, r3, #7
 8003964:	f002 0207 	and.w	r2, r2, #7
 8003968:	bf58      	it	pl
 800396a:	4253      	negpl	r3, r2
 800396c:	b21b      	sxth	r3, r3
 800396e:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
	for (Traverser = 0; Traverser < Hitachi_Vital_st[Source_Index].Size_Num_val; ++Traverser)
 8003972:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8003976:	3301      	adds	r3, #1
 8003978:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800397c:	78ba      	ldrb	r2, [r7, #2]
 800397e:	49ae      	ldr	r1, [pc, #696]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003980:	4613      	mov	r3, r2
 8003982:	005b      	lsls	r3, r3, #1
 8003984:	4413      	add	r3, r2
 8003986:	011b      	lsls	r3, r3, #4
 8003988:	440b      	add	r3, r1
 800398a:	3304      	adds	r3, #4
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	b29b      	uxth	r3, r3
 8003990:	f8b7 205e 	ldrh.w	r2, [r7, #94]	; 0x5e
 8003994:	429a      	cmp	r2, r3
 8003996:	d3b7      	bcc.n	8003908 <Vital_Msg_extr+0xbfc>
	}

	/* Reply to Vital Message */
	Send_Service_Signal_Message(Source_Index,Des_Index);
 8003998:	787a      	ldrb	r2, [r7, #1]
 800399a:	78bb      	ldrb	r3, [r7, #2]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f003 fa44 	bl	8006e2c <Send_Service_Signal_Message>
	/* Reply to Vital Message */

	/* To Send VITAL Message after Some Time say 500ms Later */
	Send_Vital_MSG_st.flag[Source_Index] = SET;
 80039a4:	78bb      	ldrb	r3, [r7, #2]
 80039a6:	4aa5      	ldr	r2, [pc, #660]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039a8:	2101      	movs	r1, #1
 80039aa:	54d1      	strb	r1, [r2, r3]
	Send_Vital_MSG_st.Clk[Source_Index] = Ticks;
 80039ac:	78bb      	ldrb	r3, [r7, #2]
 80039ae:	4aa3      	ldr	r2, [pc, #652]	; (8003c3c <Vital_Msg_extr+0xf30>)
 80039b0:	3302      	adds	r3, #2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039b8:	605a      	str	r2, [r3, #4]
	/* To Send VITAL Message after Some Time say 500ms Later */

	/*To Send VITAL DATA MESSAGE TO OTHER CARD*/
	if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED)
 80039ba:	78ba      	ldrb	r2, [r7, #2]
 80039bc:	49a0      	ldr	r1, [pc, #640]	; (8003c40 <Vital_Msg_extr+0xf34>)
 80039be:	4613      	mov	r3, r2
 80039c0:	005b      	lsls	r3, r3, #1
 80039c2:	4413      	add	r3, r2
 80039c4:	00db      	lsls	r3, r3, #3
 80039c6:	440b      	add	r3, r1
 80039c8:	3304      	adds	r3, #4
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d116      	bne.n	80039fe <Vital_Msg_extr+0xcf2>
	{
		memset(&Tx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 80039d0:	2246      	movs	r2, #70	; 0x46
 80039d2:	2100      	movs	r1, #0
 80039d4:	489b      	ldr	r0, [pc, #620]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039d6:	f01e fb81 	bl	80220dc <memset>
		Tx_VITAL_MSG_CAN_st.Source_Peer_Index = Source_Index;
 80039da:	78bb      	ldrb	r3, [r7, #2]
 80039dc:	b29a      	uxth	r2, r3
 80039de:	4b99      	ldr	r3, [pc, #612]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e0:	801a      	strh	r2, [r3, #0]
		Tx_VITAL_MSG_CAN_st.Packet_Length = Length;
 80039e2:	78fb      	ldrb	r3, [r7, #3]
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	4b97      	ldr	r3, [pc, #604]	; (8003c44 <Vital_Msg_extr+0xf38>)
 80039e8:	809a      	strh	r2, [r3, #4]
		memcpy(Tx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Buff,Length);
 80039ea:	78fb      	ldrb	r3, [r7, #3]
 80039ec:	461a      	mov	r2, r3
 80039ee:	6879      	ldr	r1, [r7, #4]
 80039f0:	4895      	ldr	r0, [pc, #596]	; (8003c48 <Vital_Msg_extr+0xf3c>)
 80039f2:	f01e fb4b 	bl	802208c <memcpy>
#ifdef EI_1
		TransmitCanPkt(SEND_VITAL_MSG_1);
#endif
#ifdef EI_2
		TransmitCanPkt(SEND_VITAL_MSG_2);
 80039f6:	f44f 7001 	mov.w	r0, #516	; 0x204
 80039fa:	f00b fc77 	bl	800f2ec <TransmitCanPkt>




	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Relays_st[Source_Index].RelayIPS_Buff));
 80039fe:	78ba      	ldrb	r2, [r7, #2]
 8003a00:	4613      	mov	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4413      	add	r3, r2
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	4a90      	ldr	r2, [pc, #576]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a0a:	4413      	add	r3, r2
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	2210      	movs	r2, #16
 8003a10:	2100      	movs	r1, #0
 8003a12:	4618      	mov	r0, r3
 8003a14:	f01e fb62 	bl	80220dc <memset>
	memcpy(Relays_st[Source_Index].RelayIPS_Buff,Hitachi_Vital_st[Source_Index].Outputs,noofIP);
 8003a18:	78ba      	ldrb	r2, [r7, #2]
 8003a1a:	4613      	mov	r3, r2
 8003a1c:	009b      	lsls	r3, r3, #2
 8003a1e:	4413      	add	r3, r2
 8003a20:	009b      	lsls	r3, r3, #2
 8003a22:	4a8a      	ldr	r2, [pc, #552]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a24:	4413      	add	r3, r2
 8003a26:	1c58      	adds	r0, r3, #1
 8003a28:	78ba      	ldrb	r2, [r7, #2]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	005b      	lsls	r3, r3, #1
 8003a2e:	4413      	add	r3, r2
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4a81      	ldr	r2, [pc, #516]	; (8003c38 <Vital_Msg_extr+0xf2c>)
 8003a34:	4413      	add	r3, r2
 8003a36:	3305      	adds	r3, #5
 8003a38:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	f01e fb25 	bl	802208c <memcpy>
	Relays_st[Source_Index].RelayIPS_CRC = GetCRC16(0,Relays_st[Source_Index].RelayIPS_Buff,noofIP);
 8003a42:	78ba      	ldrb	r2, [r7, #2]
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	4a7f      	ldr	r2, [pc, #508]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a4e:	4413      	add	r3, r2
 8003a50:	3301      	adds	r3, #1
 8003a52:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a56:	b212      	sxth	r2, r2
 8003a58:	78bc      	ldrb	r4, [r7, #2]
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	2000      	movs	r0, #0
 8003a5e:	f00e ff89 	bl	8012974 <GetCRC16>
 8003a62:	4603      	mov	r3, r0
 8003a64:	4619      	mov	r1, r3
 8003a66:	4a79      	ldr	r2, [pc, #484]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a68:	4623      	mov	r3, r4
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	4423      	add	r3, r4
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3312      	adds	r3, #18
 8003a74:	460a      	mov	r2, r1
 8003a76:	801a      	strh	r2, [r3, #0]
	Relays_st[Source_Index].No_ofIps = noofIP;
 8003a78:	78ba      	ldrb	r2, [r7, #2]
 8003a7a:	4974      	ldr	r1, [pc, #464]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	4413      	add	r3, r2
 8003a82:	009b      	lsls	r3, r3, #2
 8003a84:	440b      	add	r3, r1
 8003a86:	3311      	adds	r3, #17
 8003a88:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003a8c:	701a      	strb	r2, [r3, #0]
	Relays_st[Source_Index].Peer_Index = Source_Index;
 8003a8e:	78ba      	ldrb	r2, [r7, #2]
 8003a90:	496e      	ldr	r1, [pc, #440]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003a92:	4613      	mov	r3, r2
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	4413      	add	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	440b      	add	r3, r1
 8003a9c:	78ba      	ldrb	r2, [r7, #2]
 8003a9e:	701a      	strb	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if(LinkEstablishFlag == SET)
 8003aa0:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d16b      	bne.n	8003b80 <Vital_Msg_extr+0xe74>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003aa8:	78ba      	ldrb	r2, [r7, #2]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	4a67      	ldr	r2, [pc, #412]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	2210      	movs	r2, #16
 8003aba:	2100      	movs	r1, #0
 8003abc:	4618      	mov	r0, r3
 8003abe:	f01e fb0d 	bl	80220dc <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8003ac2:	78ba      	ldrb	r2, [r7, #2]
 8003ac4:	4613      	mov	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	4413      	add	r3, r2
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	4a60      	ldr	r2, [pc, #384]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003ace:	1898      	adds	r0, r3, r2
 8003ad0:	78ba      	ldrb	r2, [r7, #2]
 8003ad2:	4613      	mov	r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	4413      	add	r3, r2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4a5c      	ldr	r2, [pc, #368]	; (8003c4c <Vital_Msg_extr+0xf40>)
 8003adc:	4413      	add	r3, r2
 8003ade:	2214      	movs	r2, #20
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	f01e fad3 	bl	802208c <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 8003ae6:	78bb      	ldrb	r3, [r7, #2]
 8003ae8:	495a      	ldr	r1, [pc, #360]	; (8003c54 <Vital_Msg_extr+0xf48>)
 8003aea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8003af0:	78bb      	ldrb	r3, [r7, #2]
 8003af2:	4a59      	ldr	r2, [pc, #356]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003af4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8003af8:	78ba      	ldrb	r2, [r7, #2]
 8003afa:	4855      	ldr	r0, [pc, #340]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003afc:	4613      	mov	r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	4413      	add	r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	4403      	add	r3, r0
 8003b06:	3312      	adds	r3, #18
 8003b08:	881b      	ldrh	r3, [r3, #0]
 8003b0a:	4299      	cmp	r1, r3
 8003b0c:	d038      	beq.n	8003b80 <Vital_Msg_extr+0xe74>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b0e:	78ba      	ldrb	r2, [r7, #2]
 8003b10:	78b9      	ldrb	r1, [r7, #2]
 8003b12:	484f      	ldr	r0, [pc, #316]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b14:	4613      	mov	r3, r2
 8003b16:	009b      	lsls	r3, r3, #2
 8003b18:	4413      	add	r3, r2
 8003b1a:	009b      	lsls	r3, r3, #2
 8003b1c:	4403      	add	r3, r0
 8003b1e:	3312      	adds	r3, #18
 8003b20:	881a      	ldrh	r2, [r3, #0]
 8003b22:	4b4d      	ldr	r3, [pc, #308]	; (8003c58 <Vital_Msg_extr+0xf4c>)
 8003b24:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8003b28:	2214      	movs	r2, #20
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	484b      	ldr	r0, [pc, #300]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b2e:	f01e fad5 	bl	80220dc <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8003b32:	78ba      	ldrb	r2, [r7, #2]
 8003b34:	4613      	mov	r3, r2
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	4413      	add	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4a44      	ldr	r2, [pc, #272]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b3e:	4413      	add	r3, r2
 8003b40:	2214      	movs	r2, #20
 8003b42:	4619      	mov	r1, r3
 8003b44:	4845      	ldr	r0, [pc, #276]	; (8003c5c <Vital_Msg_extr+0xf50>)
 8003b46:	f01e faa1 	bl	802208c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8003b4a:	f44f 7002 	mov.w	r0, #520	; 0x208
 8003b4e:	f00b fbcd 	bl	800f2ec <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8003b52:	78bb      	ldrb	r3, [r7, #2]
 8003b54:	4a42      	ldr	r2, [pc, #264]	; (8003c60 <Vital_Msg_extr+0xf54>)
 8003b56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d110      	bne.n	8003b80 <Vital_Msg_extr+0xe74>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8003b5e:	78bb      	ldrb	r3, [r7, #2]
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	4a40      	ldr	r2, [pc, #256]	; (8003c64 <Vital_Msg_extr+0xf58>)
 8003b64:	4413      	add	r3, r2
 8003b66:	1c98      	adds	r0, r3, #2
 8003b68:	78ba      	ldrb	r2, [r7, #2]
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	009b      	lsls	r3, r3, #2
 8003b72:	4a37      	ldr	r2, [pc, #220]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b74:	4413      	add	r3, r2
 8003b76:	3301      	adds	r3, #1
 8003b78:	2210      	movs	r2, #16
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	f01e fa86 	bl	802208c <memcpy>

		}
	}

	/*	Sending Message Details to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8003b80:	78b9      	ldrb	r1, [r7, #2]
 8003b82:	78ba      	ldrb	r2, [r7, #2]
 8003b84:	4832      	ldr	r0, [pc, #200]	; (8003c50 <Vital_Msg_extr+0xf44>)
 8003b86:	460b      	mov	r3, r1
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	009b      	lsls	r3, r3, #2
 8003b8e:	4403      	add	r3, r0
 8003b90:	3312      	adds	r3, #18
 8003b92:	8818      	ldrh	r0, [r3, #0]
 8003b94:	492a      	ldr	r1, [pc, #168]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003b96:	4613      	mov	r3, r2
 8003b98:	005b      	lsls	r3, r3, #1
 8003b9a:	4413      	add	r3, r2
 8003b9c:	00db      	lsls	r3, r3, #3
 8003b9e:	440b      	add	r3, r1
 8003ba0:	3306      	adds	r3, #6
 8003ba2:	4602      	mov	r2, r0
 8003ba4:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8003ba6:	78ba      	ldrb	r2, [r7, #2]
 8003ba8:	4925      	ldr	r1, [pc, #148]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003baa:	4613      	mov	r3, r2
 8003bac:	005b      	lsls	r3, r3, #1
 8003bae:	4413      	add	r3, r2
 8003bb0:	00db      	lsls	r3, r3, #3
 8003bb2:	440b      	add	r3, r1
 8003bb4:	3314      	adds	r3, #20
 8003bb6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bb8:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = VDATAMSG;
 8003bba:	78ba      	ldrb	r2, [r7, #2]
 8003bbc:	4920      	ldr	r1, [pc, #128]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bbe:	4613      	mov	r3, r2
 8003bc0:	005b      	lsls	r3, r3, #1
 8003bc2:	4413      	add	r3, r2
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	440b      	add	r3, r1
 8003bc8:	3305      	adds	r3, #5
 8003bca:	2202      	movs	r2, #2
 8003bcc:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8003bce:	78ba      	ldrb	r2, [r7, #2]
 8003bd0:	491b      	ldr	r1, [pc, #108]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	00db      	lsls	r3, r3, #3
 8003bda:	440b      	add	r3, r1
 8003bdc:	78ba      	ldrb	r2, [r7, #2]
 8003bde:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8003be0:	78ba      	ldrb	r2, [r7, #2]
 8003be2:	4917      	ldr	r1, [pc, #92]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003be4:	4613      	mov	r3, r2
 8003be6:	005b      	lsls	r3, r3, #1
 8003be8:	4413      	add	r3, r2
 8003bea:	00db      	lsls	r3, r3, #3
 8003bec:	440b      	add	r3, r1
 8003bee:	3301      	adds	r3, #1
 8003bf0:	2201      	movs	r2, #1
 8003bf2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8003bf4:	78ba      	ldrb	r2, [r7, #2]
 8003bf6:	4912      	ldr	r1, [pc, #72]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	005b      	lsls	r3, r3, #1
 8003bfc:	4413      	add	r3, r2
 8003bfe:	00db      	lsls	r3, r3, #3
 8003c00:	440b      	add	r3, r1
 8003c02:	3302      	adds	r3, #2
 8003c04:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8003c08:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8003c0a:	2218      	movs	r2, #24
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	4816      	ldr	r0, [pc, #88]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003c10:	f01e fa64 	bl	80220dc <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8003c14:	78ba      	ldrb	r2, [r7, #2]
 8003c16:	4613      	mov	r3, r2
 8003c18:	005b      	lsls	r3, r3, #1
 8003c1a:	4413      	add	r3, r2
 8003c1c:	00db      	lsls	r3, r3, #3
 8003c1e:	4a08      	ldr	r2, [pc, #32]	; (8003c40 <Vital_Msg_extr+0xf34>)
 8003c20:	4413      	add	r3, r2
 8003c22:	2218      	movs	r2, #24
 8003c24:	4619      	mov	r1, r3
 8003c26:	4810      	ldr	r0, [pc, #64]	; (8003c68 <Vital_Msg_extr+0xf5c>)
 8003c28:	f01e fa30 	bl	802208c <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8003c2c:	f240 2002 	movw	r0, #514	; 0x202
 8003c30:	f00b fb5c 	bl	800f2ec <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8003c34:	78ba      	ldrb	r2, [r7, #2]
 8003c36:	e019      	b.n	8003c6c <Vital_Msg_extr+0xf60>
 8003c38:	200013a4 	.word	0x200013a4
 8003c3c:	20001c94 	.word	0x20001c94
 8003c40:	20001674 	.word	0x20001674
 8003c44:	20001884 	.word	0x20001884
 8003c48:	2000188a 	.word	0x2000188a
 8003c4c:	20001db8 	.word	0x20001db8
 8003c50:	20001e80 	.word	0x20001e80
 8003c54:	20000ed8 	.word	0x20000ed8
 8003c58:	20000f00 	.word	0x20000f00
 8003c5c:	20002010 	.word	0x20002010
 8003c60:	20000ec4 	.word	0x20000ec4
 8003c64:	200010e4 	.word	0x200010e4
 8003c68:	20001854 	.word	0x20001854
 8003c6c:	4927      	ldr	r1, [pc, #156]	; (8003d0c <Vital_Msg_extr+0x1000>)
 8003c6e:	4613      	mov	r3, r2
 8003c70:	005b      	lsls	r3, r3, #1
 8003c72:	4413      	add	r3, r2
 8003c74:	00db      	lsls	r3, r3, #3
 8003c76:	440b      	add	r3, r1
 8003c78:	3301      	adds	r3, #1
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8003c7e:	78bb      	ldrb	r3, [r7, #2]
 8003c80:	4923      	ldr	r1, [pc, #140]	; (8003d10 <Vital_Msg_extr+0x1004>)
 8003c82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/*	Sending Message Details to Other Card */


	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8003c88:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d11d      	bne.n	8003ccc <Vital_Msg_extr+0xfc0>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8003c90:	78bb      	ldrb	r3, [r7, #2]
 8003c92:	4920      	ldr	r1, [pc, #128]	; (8003d14 <Vital_Msg_extr+0x1008>)
 8003c94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8003c9a:	78ba      	ldrb	r2, [r7, #2]
 8003c9c:	491e      	ldr	r1, [pc, #120]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003c9e:	4613      	mov	r3, r2
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	4413      	add	r3, r2
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	440b      	add	r3, r1
 8003ca8:	3304      	adds	r3, #4
 8003caa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003cac:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8003cae:	78ba      	ldrb	r2, [r7, #2]
 8003cb0:	4919      	ldr	r1, [pc, #100]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003cb2:	4613      	mov	r3, r2
 8003cb4:	005b      	lsls	r3, r3, #1
 8003cb6:	4413      	add	r3, r2
 8003cb8:	009b      	lsls	r3, r3, #2
 8003cba:	440b      	add	r3, r1
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8003cc2:	78bb      	ldrb	r3, [r7, #2]
 8003cc4:	4a15      	ldr	r2, [pc, #84]	; (8003d1c <Vital_Msg_extr+0x1010>)
 8003cc6:	2101      	movs	r1, #1
 8003cc8:	54d1      	strb	r1, [r2, r3]
 8003cca:	e017      	b.n	8003cfc <Vital_Msg_extr+0xff0>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8003ccc:	78bb      	ldrb	r3, [r7, #2]
 8003cce:	4a13      	ldr	r2, [pc, #76]	; (8003d1c <Vital_Msg_extr+0x1010>)
 8003cd0:	2100      	movs	r1, #0
 8003cd2:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8003cd4:	78ba      	ldrb	r2, [r7, #2]
 8003cd6:	4910      	ldr	r1, [pc, #64]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003cd8:	4613      	mov	r3, r2
 8003cda:	005b      	lsls	r3, r3, #1
 8003cdc:	4413      	add	r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3308      	adds	r3, #8
 8003ce4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ce6:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8003ce8:	78ba      	ldrb	r2, [r7, #2]
 8003cea:	490b      	ldr	r1, [pc, #44]	; (8003d18 <Vital_Msg_extr+0x100c>)
 8003cec:	4613      	mov	r3, r2
 8003cee:	005b      	lsls	r3, r3, #1
 8003cf0:	4413      	add	r3, r2
 8003cf2:	009b      	lsls	r3, r3, #2
 8003cf4:	440b      	add	r3, r1
 8003cf6:	3301      	adds	r3, #1
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8003cfc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003d00:	4807      	ldr	r0, [pc, #28]	; (8003d20 <Vital_Msg_extr+0x1014>)
 8003d02:	f013 ffb2 	bl	8017c6a <HAL_GPIO_TogglePin>

}
 8003d06:	3764      	adds	r7, #100	; 0x64
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd90      	pop	{r4, r7, pc}
 8003d0c:	20001674 	.word	0x20001674
 8003d10:	20000e44 	.word	0x20000e44
 8003d14:	20000f14 	.word	0x20000f14
 8003d18:	20001cc8 	.word	0x20001cc8
 8003d1c:	20000f64 	.word	0x20000f64
 8003d20:	40021c00 	.word	0x40021c00

08003d24 <Send_Vital_Data_Message>:

void Send_Vital_Data_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8003d24:	b590      	push	{r4, r7, lr}
 8003d26:	b0a5      	sub	sp, #148	; 0x94
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	460a      	mov	r2, r1
 8003d2e:	71fb      	strb	r3, [r7, #7]
 8003d30:	4613      	mov	r3, r2
 8003d32:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8003d34:	2300      	movs	r3, #0
 8003d36:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d38:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d3c:	2238      	movs	r2, #56	; 0x38
 8003d3e:	2100      	movs	r1, #0
 8003d40:	4618      	mov	r0, r3
 8003d42:	f01e f9cb 	bl	80220dc <memset>
	uint8_t Temp_Buff[60] = {0,};
 8003d46:	2300      	movs	r3, #0
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	f107 0310 	add.w	r3, r7, #16
 8003d4e:	2238      	movs	r2, #56	; 0x38
 8003d50:	2100      	movs	r1, #0
 8003d52:	4618      	mov	r0, r3
 8003d54:	f01e f9c2 	bl	80220dc <memset>
	uint8_t uc_index = 0;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0, 0);
 8003d5e:	2300      	movs	r3, #0
 8003d60:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003d64:	2300      	movs	r3, #0
 8003d66:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	memset(Transmit_Buff,0,sizeof(Transmit_Buff));
 8003d6a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8003d6e:	223c      	movs	r2, #60	; 0x3c
 8003d70:	2100      	movs	r1, #0
 8003d72:	4618      	mov	r0, r3
 8003d74:	f01e f9b2 	bl	80220dc <memset>

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8003d78:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003d7c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003d80:	441a      	add	r2, r3
 8003d82:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003d86:	23f4      	movs	r3, #244	; 0xf4
 8003d88:	2108      	movs	r1, #8
 8003d8a:	f7fc fccf 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8003d8e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003d92:	3308      	adds	r3, #8
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	da00      	bge.n	8003d9a <Send_Vital_Data_Message+0x76>
 8003d98:	3307      	adds	r3, #7
 8003d9a:	10db      	asrs	r3, r3, #3
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003da2:	4413      	add	r3, r2
 8003da4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003da8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003dac:	3308      	adds	r3, #8
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b21b      	sxth	r3, r3
 8003db2:	425a      	negs	r2, r3
 8003db4:	f003 0307 	and.w	r3, r3, #7
 8003db8:	f002 0207 	and.w	r2, r2, #7
 8003dbc:	bf58      	it	pl
 8003dbe:	4253      	negpl	r3, r2
 8003dc0:	b21b      	sxth	r3, r3
 8003dc2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8003dc6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003dce:	441a      	add	r2, r3
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	49c6      	ldr	r1, [pc, #792]	; (80040ec <Send_Vital_Data_Message+0x3c8>)
 8003dd4:	3366      	adds	r3, #102	; 0x66
 8003dd6:	009b      	lsls	r3, r3, #2
 8003dd8:	440b      	add	r3, r1
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003de0:	2110      	movs	r1, #16
 8003de2:	f7fc fca3 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003de6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003dea:	3310      	adds	r3, #16
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	da00      	bge.n	8003df2 <Send_Vital_Data_Message+0xce>
 8003df0:	3307      	adds	r3, #7
 8003df2:	10db      	asrs	r3, r3, #3
 8003df4:	b29a      	uxth	r2, r3
 8003df6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e00:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e04:	3310      	adds	r3, #16
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	b21b      	sxth	r3, r3
 8003e0a:	425a      	negs	r2, r3
 8003e0c:	f003 0307 	and.w	r3, r3, #7
 8003e10:	f002 0207 	and.w	r2, r2, #7
 8003e14:	bf58      	it	pl
 8003e16:	4253      	negpl	r3, r2
 8003e18:	b21b      	sxth	r3, r3
 8003e1a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8003e1e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e22:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003e26:	441a      	add	r2, r3
 8003e28:	79fb      	ldrb	r3, [r7, #7]
 8003e2a:	49b0      	ldr	r1, [pc, #704]	; (80040ec <Send_Vital_Data_Message+0x3c8>)
 8003e2c:	3370      	adds	r3, #112	; 0x70
 8003e2e:	009b      	lsls	r3, r3, #2
 8003e30:	440b      	add	r3, r1
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003e38:	2110      	movs	r1, #16
 8003e3a:	f7fc fc77 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8003e3e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003e42:	3310      	adds	r3, #16
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	da00      	bge.n	8003e4a <Send_Vital_Data_Message+0x126>
 8003e48:	3307      	adds	r3, #7
 8003e4a:	10db      	asrs	r3, r3, #3
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003e52:	4413      	add	r3, r2
 8003e54:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003e58:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003e5c:	3310      	adds	r3, #16
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	b21b      	sxth	r3, r3
 8003e62:	425a      	negs	r2, r3
 8003e64:	f003 0307 	and.w	r3, r3, #7
 8003e68:	f002 0207 	and.w	r2, r2, #7
 8003e6c:	bf58      	it	pl
 8003e6e:	4253      	negpl	r3, r2
 8003e70:	b21b      	sxth	r3, r3
 8003e72:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003e76:	4b9e      	ldr	r3, [pc, #632]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	089b      	lsrs	r3, r3, #2
 8003e7c:	f003 0301 	and.w	r3, r3, #1
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d035      	beq.n	8003ef0 <Send_Vital_Data_Message+0x1cc>
 8003e84:	4b9a      	ldr	r3, [pc, #616]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003e86:	791b      	ldrb	r3, [r3, #4]
 8003e88:	79fa      	ldrb	r2, [r7, #7]
 8003e8a:	429a      	cmp	r2, r3
 8003e8c:	d130      	bne.n	8003ef0 <Send_Vital_Data_Message+0x1cc>
	{
		uint8_t Rand_Number = 0;
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8003e94:	4897      	ldr	r0, [pc, #604]	; (80040f4 <Send_Vital_Data_Message+0x3d0>)
 8003e96:	f015 feb1 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	4b96      	ldr	r3, [pc, #600]	; (80040f8 <Send_Vital_Data_Message+0x3d4>)
 8003e9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003ea2:	099b      	lsrs	r3, r3, #6
 8003ea4:	21c8      	movs	r1, #200	; 0xc8
 8003ea6:	fb01 f303 	mul.w	r3, r1, r3
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected Tx Sequence value failure\n");
 8003eb0:	4892      	ldr	r0, [pc, #584]	; (80040fc <Send_Vital_Data_Message+0x3d8>)
 8003eb2:	f01e fa97 	bl	80223e4 <puts>
		printf("Actual   Tx Sequence vale:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	4a91      	ldr	r2, [pc, #580]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	4413      	add	r3, r2
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	4619      	mov	r1, r3
 8003ec4:	488f      	ldr	r0, [pc, #572]	; (8004104 <Send_Vital_Data_Message+0x3e0>)
 8003ec6:	f01e f9f1 	bl	80222ac <iprintf>
		printf("Injected Tx Sequence value:%u\n",Rand_Number);
 8003eca:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ece:	4619      	mov	r1, r3
 8003ed0:	488d      	ldr	r0, [pc, #564]	; (8004108 <Send_Vital_Data_Message+0x3e4>)
 8003ed2:	f01e f9eb 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number);
 8003ed6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003eda:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ede:	441a      	add	r2, r3
 8003ee0:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8003ee4:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003ee8:	2108      	movs	r1, #8
 8003eea:	f7fc fc1f 	bl	800072c <InsertBits>
	{
 8003eee:	e00f      	b.n	8003f10 <Send_Vital_Data_Message+0x1ec>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8003ef0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ef4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003ef8:	441a      	add	r2, r3
 8003efa:	79fb      	ldrb	r3, [r7, #7]
 8003efc:	4980      	ldr	r1, [pc, #512]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	440b      	add	r3, r1
 8003f02:	3301      	adds	r3, #1
 8003f04:	781b      	ldrb	r3, [r3, #0]
 8003f06:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003f0a:	2108      	movs	r1, #8
 8003f0c:	f7fc fc0e 	bl	800072c <InsertBits>
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8003f10:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003f14:	3308      	adds	r3, #8
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	da00      	bge.n	8003f1c <Send_Vital_Data_Message+0x1f8>
 8003f1a:	3307      	adds	r3, #7
 8003f1c:	10db      	asrs	r3, r3, #3
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003f24:	4413      	add	r3, r2
 8003f26:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003f2a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8003f2e:	3308      	adds	r3, #8
 8003f30:	b29b      	uxth	r3, r3
 8003f32:	b21b      	sxth	r3, r3
 8003f34:	425a      	negs	r2, r3
 8003f36:	f003 0307 	and.w	r3, r3, #7
 8003f3a:	f002 0207 	and.w	r2, r2, #7
 8003f3e:	bf58      	it	pl
 8003f40:	4253      	negpl	r3, r2
 8003f42:	b21b      	sxth	r3, r3
 8003f44:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8003f48:	4b69      	ldr	r3, [pc, #420]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	08db      	lsrs	r3, r3, #3
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d035      	beq.n	8003fc2 <Send_Vital_Data_Message+0x29e>
 8003f56:	4b66      	ldr	r3, [pc, #408]	; (80040f0 <Send_Vital_Data_Message+0x3cc>)
 8003f58:	791b      	ldrb	r3, [r3, #4]
 8003f5a:	79fa      	ldrb	r2, [r7, #7]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d130      	bne.n	8003fc2 <Send_Vital_Data_Message+0x29e>
	{
		uint8_t Rand_Number  = 0;
 8003f60:	2300      	movs	r3, #0
 8003f62:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 200 );
 8003f66:	4863      	ldr	r0, [pc, #396]	; (80040f4 <Send_Vital_Data_Message+0x3d0>)
 8003f68:	f015 fe48 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8003f6c:	4602      	mov	r2, r0
 8003f6e:	4b62      	ldr	r3, [pc, #392]	; (80040f8 <Send_Vital_Data_Message+0x3d4>)
 8003f70:	fba3 1302 	umull	r1, r3, r3, r2
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	21c8      	movs	r1, #200	; 0xc8
 8003f78:	fb01 f303 	mul.w	r3, r1, r3
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8003f82:	4862      	ldr	r0, [pc, #392]	; (800410c <Send_Vital_Data_Message+0x3e8>)
 8003f84:	f01e fa2e 	bl	80223e4 <puts>
		printf("Actual   RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8003f88:	79fb      	ldrb	r3, [r7, #7]
 8003f8a:	4a5d      	ldr	r2, [pc, #372]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003f8c:	011b      	lsls	r3, r3, #4
 8003f8e:	4413      	add	r3, r2
 8003f90:	3302      	adds	r3, #2
 8003f92:	781b      	ldrb	r3, [r3, #0]
 8003f94:	4619      	mov	r1, r3
 8003f96:	485e      	ldr	r0, [pc, #376]	; (8004110 <Send_Vital_Data_Message+0x3ec>)
 8003f98:	f01e f988 	bl	80222ac <iprintf>
		printf("Injected RX Sequence value:%u\n",Rand_Number);
 8003f9c:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fa0:	4619      	mov	r1, r3
 8003fa2:	485c      	ldr	r0, [pc, #368]	; (8004114 <Send_Vital_Data_Message+0x3f0>)
 8003fa4:	f01e f982 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_Number); // Rx Seq Number
 8003fa8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fb0:	441a      	add	r2, r3
 8003fb2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8003fb6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fba:	2108      	movs	r1, #8
 8003fbc:	f7fc fbb6 	bl	800072c <InsertBits>
	{
 8003fc0:	e00f      	b.n	8003fe2 <Send_Vital_Data_Message+0x2be>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8003fc2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003fc6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8003fca:	441a      	add	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	494c      	ldr	r1, [pc, #304]	; (8004100 <Send_Vital_Data_Message+0x3dc>)
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	440b      	add	r3, r1
 8003fd4:	3302      	adds	r3, #2
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8003fdc:	2108      	movs	r1, #8
 8003fde:	f7fc fba5 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number for VITAL_Message we don't Increment Sequence Number.
	}
	BITSTUFFINC(8);
 8003fe2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8003fe6:	3308      	adds	r3, #8
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	da00      	bge.n	8003fee <Send_Vital_Data_Message+0x2ca>
 8003fec:	3307      	adds	r3, #7
 8003fee:	10db      	asrs	r3, r3, #3
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ff6:	4413      	add	r3, r2
 8003ff8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8003ffc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004000:	3308      	adds	r3, #8
 8004002:	b29b      	uxth	r3, r3
 8004004:	b21b      	sxth	r3, r3
 8004006:	425a      	negs	r2, r3
 8004008:	f003 0307 	and.w	r3, r3, #7
 800400c:	f002 0207 	and.w	r2, r2, #7
 8004010:	bf58      	it	pl
 8004012:	4253      	negpl	r3, r2
 8004014:	b21b      	sxth	r3, r3
 8004016:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], VDATAMSG);
 800401a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800401e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004022:	441a      	add	r2, r3
 8004024:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004028:	2302      	movs	r3, #2
 800402a:	2108      	movs	r1, #8
 800402c:	f7fc fb7e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004030:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004034:	3308      	adds	r3, #8
 8004036:	2b00      	cmp	r3, #0
 8004038:	da00      	bge.n	800403c <Send_Vital_Data_Message+0x318>
 800403a:	3307      	adds	r3, #7
 800403c:	10db      	asrs	r3, r3, #3
 800403e:	b29a      	uxth	r2, r3
 8004040:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004044:	4413      	add	r3, r2
 8004046:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800404a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800404e:	3308      	adds	r3, #8
 8004050:	b29b      	uxth	r3, r3
 8004052:	b21b      	sxth	r3, r3
 8004054:	425a      	negs	r2, r3
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	f002 0207 	and.w	r2, r2, #7
 800405e:	bf58      	it	pl
 8004060:	4253      	negpl	r3, r2
 8004062:	b21b      	sxth	r3, r3
 8004064:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	//Inserting Message Status Flag
	//InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x002C);


	if(Change_MLK_TIME[Source_Index]== 1)
 8004068:	79fb      	ldrb	r3, [r7, #7]
 800406a:	4a2b      	ldr	r2, [pc, #172]	; (8004118 <Send_Vital_Data_Message+0x3f4>)
 800406c:	5cd3      	ldrb	r3, [r2, r3]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d15a      	bne.n	8004128 <Send_Vital_Data_Message+0x404>
	{
		Get_time();
 8004072:	f006 ff85 	bl	800af80 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 8004076:	79fa      	ldrb	r2, [r7, #7]
 8004078:	4613      	mov	r3, r2
 800407a:	005b      	lsls	r3, r3, #1
 800407c:	4413      	add	r3, r2
 800407e:	005b      	lsls	r3, r3, #1
 8004080:	4a26      	ldr	r2, [pc, #152]	; (800411c <Send_Vital_Data_Message+0x3f8>)
 8004082:	4413      	add	r3, r2
 8004084:	4a26      	ldr	r2, [pc, #152]	; (8004120 <Send_Vital_Data_Message+0x3fc>)
 8004086:	6811      	ldr	r1, [r2, #0]
 8004088:	6019      	str	r1, [r3, #0]
 800408a:	8892      	ldrh	r2, [r2, #4]
 800408c:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 800408e:	4825      	ldr	r0, [pc, #148]	; (8004124 <Send_Vital_Data_Message+0x400>)
 8004090:	f01e f9a8 	bl	80223e4 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 8004094:	79fb      	ldrb	r3, [r7, #7]
 8004096:	4a20      	ldr	r2, [pc, #128]	; (8004118 <Send_Vital_Data_Message+0x3f4>)
 8004098:	2100      	movs	r1, #0
 800409a:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0068);
 800409c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040a0:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80040a4:	441a      	add	r2, r3
 80040a6:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80040aa:	2368      	movs	r3, #104	; 0x68
 80040ac:	2110      	movs	r1, #16
 80040ae:	f7fc fb3d 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80040b2:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80040b6:	3310      	adds	r3, #16
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	da00      	bge.n	80040be <Send_Vital_Data_Message+0x39a>
 80040bc:	3307      	adds	r3, #7
 80040be:	10db      	asrs	r3, r3, #3
 80040c0:	b29a      	uxth	r2, r3
 80040c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80040c6:	4413      	add	r3, r2
 80040c8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80040cc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80040d0:	3310      	adds	r3, #16
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	b21b      	sxth	r3, r3
 80040d6:	425a      	negs	r2, r3
 80040d8:	f003 0307 	and.w	r3, r3, #7
 80040dc:	f002 0207 	and.w	r2, r2, #7
 80040e0:	bf58      	it	pl
 80040e2:	4253      	negpl	r3, r2
 80040e4:	b21b      	sxth	r3, r3
 80040e6:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 80040ea:	e044      	b.n	8004176 <Send_Vital_Data_Message+0x452>
 80040ec:	20000304 	.word	0x20000304
 80040f0:	2000195c 	.word	0x2000195c
 80040f4:	20009c78 	.word	0x20009c78
 80040f8:	51eb851f 	.word	0x51eb851f
 80040fc:	0802411c 	.word	0x0802411c
 8004100:	200011c4 	.word	0x200011c4
 8004104:	08024140 	.word	0x08024140
 8004108:	08024160 	.word	0x08024160
 800410c:	08023e64 	.word	0x08023e64
 8004110:	08023e88 	.word	0x08023e88
 8004114:	08023ea8 	.word	0x08023ea8
 8004118:	200010d8 	.word	0x200010d8
 800411c:	20001188 	.word	0x20001188
 8004120:	200027e8 	.word	0x200027e8
 8004124:	08024180 	.word	0x08024180
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0028);
 8004128:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800412c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004130:	441a      	add	r2, r3
 8004132:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004136:	2328      	movs	r3, #40	; 0x28
 8004138:	2110      	movs	r1, #16
 800413a:	f7fc faf7 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 800413e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004142:	3310      	adds	r3, #16
 8004144:	2b00      	cmp	r3, #0
 8004146:	da00      	bge.n	800414a <Send_Vital_Data_Message+0x426>
 8004148:	3307      	adds	r3, #7
 800414a:	10db      	asrs	r3, r3, #3
 800414c:	b29a      	uxth	r2, r3
 800414e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004152:	4413      	add	r3, r2
 8004154:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004158:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800415c:	3310      	adds	r3, #16
 800415e:	b29b      	uxth	r3, r3
 8004160:	b21b      	sxth	r3, r3
 8004162:	425a      	negs	r2, r3
 8004164:	f003 0307 	and.w	r3, r3, #7
 8004168:	f002 0207 	and.w	r2, r2, #7
 800416c:	bf58      	it	pl
 800416e:	4253      	negpl	r3, r2
 8004170:	b21b      	sxth	r3, r3
 8004172:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}



	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8004176:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800417a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800417e:	18d1      	adds	r1, r2, r3
 8004180:	79fa      	ldrb	r2, [r7, #7]
 8004182:	48cd      	ldr	r0, [pc, #820]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	005b      	lsls	r3, r3, #1
 800418c:	4403      	add	r3, r0
 800418e:	3305      	adds	r3, #5
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004196:	460a      	mov	r2, r1
 8004198:	2108      	movs	r1, #8
 800419a:	f7fc fac7 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800419e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80041a2:	3308      	adds	r3, #8
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	da00      	bge.n	80041aa <Send_Vital_Data_Message+0x486>
 80041a8:	3307      	adds	r3, #7
 80041aa:	10db      	asrs	r3, r3, #3
 80041ac:	b29a      	uxth	r2, r3
 80041ae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041b2:	4413      	add	r3, r2
 80041b4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80041b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80041bc:	3308      	adds	r3, #8
 80041be:	b29b      	uxth	r3, r3
 80041c0:	b21b      	sxth	r3, r3
 80041c2:	425a      	negs	r2, r3
 80041c4:	f003 0307 	and.w	r3, r3, #7
 80041c8:	f002 0207 	and.w	r2, r2, #7
 80041cc:	bf58      	it	pl
 80041ce:	4253      	negpl	r3, r2
 80041d0:	b21b      	sxth	r3, r3
 80041d2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80041d6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80041da:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80041de:	18d1      	adds	r1, r2, r3
 80041e0:	79fa      	ldrb	r2, [r7, #7]
 80041e2:	48b5      	ldr	r0, [pc, #724]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	005b      	lsls	r3, r3, #1
 80041ec:	4403      	add	r3, r0
 80041ee:	3304      	adds	r3, #4
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80041f6:	460a      	mov	r2, r1
 80041f8:	2108      	movs	r1, #8
 80041fa:	f7fc fa97 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80041fe:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004202:	3308      	adds	r3, #8
 8004204:	2b00      	cmp	r3, #0
 8004206:	da00      	bge.n	800420a <Send_Vital_Data_Message+0x4e6>
 8004208:	3307      	adds	r3, #7
 800420a:	10db      	asrs	r3, r3, #3
 800420c:	b29a      	uxth	r2, r3
 800420e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004212:	4413      	add	r3, r2
 8004214:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004218:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800421c:	3308      	adds	r3, #8
 800421e:	b29b      	uxth	r3, r3
 8004220:	b21b      	sxth	r3, r3
 8004222:	425a      	negs	r2, r3
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	f002 0207 	and.w	r2, r2, #7
 800422c:	bf58      	it	pl
 800422e:	4253      	negpl	r3, r2
 8004230:	b21b      	sxth	r3, r3
 8004232:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8004236:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800423a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800423e:	18d1      	adds	r1, r2, r3
 8004240:	79fa      	ldrb	r2, [r7, #7]
 8004242:	489d      	ldr	r0, [pc, #628]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4403      	add	r3, r0
 800424e:	3303      	adds	r3, #3
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004256:	460a      	mov	r2, r1
 8004258:	2108      	movs	r1, #8
 800425a:	f7fc fa67 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800425e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004262:	3308      	adds	r3, #8
 8004264:	2b00      	cmp	r3, #0
 8004266:	da00      	bge.n	800426a <Send_Vital_Data_Message+0x546>
 8004268:	3307      	adds	r3, #7
 800426a:	10db      	asrs	r3, r3, #3
 800426c:	b29a      	uxth	r2, r3
 800426e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004272:	4413      	add	r3, r2
 8004274:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004278:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800427c:	3308      	adds	r3, #8
 800427e:	b29b      	uxth	r3, r3
 8004280:	b21b      	sxth	r3, r3
 8004282:	425a      	negs	r2, r3
 8004284:	f003 0307 	and.w	r3, r3, #7
 8004288:	f002 0207 	and.w	r2, r2, #7
 800428c:	bf58      	it	pl
 800428e:	4253      	negpl	r3, r2
 8004290:	b21b      	sxth	r3, r3
 8004292:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8004296:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800429a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800429e:	18d1      	adds	r1, r2, r3
 80042a0:	79fa      	ldrb	r2, [r7, #7]
 80042a2:	4885      	ldr	r0, [pc, #532]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 80042a4:	4613      	mov	r3, r2
 80042a6:	005b      	lsls	r3, r3, #1
 80042a8:	4413      	add	r3, r2
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4403      	add	r3, r0
 80042ae:	781b      	ldrb	r3, [r3, #0]
 80042b0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80042b4:	460a      	mov	r2, r1
 80042b6:	2108      	movs	r1, #8
 80042b8:	f7fc fa38 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80042bc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80042c0:	3308      	adds	r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	da00      	bge.n	80042c8 <Send_Vital_Data_Message+0x5a4>
 80042c6:	3307      	adds	r3, #7
 80042c8:	10db      	asrs	r3, r3, #3
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042d0:	4413      	add	r3, r2
 80042d2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80042d6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80042da:	3308      	adds	r3, #8
 80042dc:	b29b      	uxth	r3, r3
 80042de:	b21b      	sxth	r3, r3
 80042e0:	425a      	negs	r2, r3
 80042e2:	f003 0307 	and.w	r3, r3, #7
 80042e6:	f002 0207 	and.w	r2, r2, #7
 80042ea:	bf58      	it	pl
 80042ec:	4253      	negpl	r3, r2
 80042ee:	b21b      	sxth	r3, r3
 80042f0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80042f4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80042f8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80042fc:	18d1      	adds	r1, r2, r3
 80042fe:	79fa      	ldrb	r2, [r7, #7]
 8004300:	486d      	ldr	r0, [pc, #436]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004302:	4613      	mov	r3, r2
 8004304:	005b      	lsls	r3, r3, #1
 8004306:	4413      	add	r3, r2
 8004308:	005b      	lsls	r3, r3, #1
 800430a:	4403      	add	r3, r0
 800430c:	3301      	adds	r3, #1
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004314:	460a      	mov	r2, r1
 8004316:	2108      	movs	r1, #8
 8004318:	f7fc fa08 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800431c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004320:	3308      	adds	r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	da00      	bge.n	8004328 <Send_Vital_Data_Message+0x604>
 8004326:	3307      	adds	r3, #7
 8004328:	10db      	asrs	r3, r3, #3
 800432a:	b29a      	uxth	r2, r3
 800432c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004330:	4413      	add	r3, r2
 8004332:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004336:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800433a:	3308      	adds	r3, #8
 800433c:	b29b      	uxth	r3, r3
 800433e:	b21b      	sxth	r3, r3
 8004340:	425a      	negs	r2, r3
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	f002 0207 	and.w	r2, r2, #7
 800434a:	bf58      	it	pl
 800434c:	4253      	negpl	r3, r2
 800434e:	b21b      	sxth	r3, r3
 8004350:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8004354:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004358:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800435c:	18d1      	adds	r1, r2, r3
 800435e:	79fa      	ldrb	r2, [r7, #7]
 8004360:	4855      	ldr	r0, [pc, #340]	; (80044b8 <Send_Vital_Data_Message+0x794>)
 8004362:	4613      	mov	r3, r2
 8004364:	005b      	lsls	r3, r3, #1
 8004366:	4413      	add	r3, r2
 8004368:	005b      	lsls	r3, r3, #1
 800436a:	4403      	add	r3, r0
 800436c:	3302      	adds	r3, #2
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004374:	460a      	mov	r2, r1
 8004376:	2108      	movs	r1, #8
 8004378:	f7fc f9d8 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800437c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8004380:	3308      	adds	r3, #8
 8004382:	2b00      	cmp	r3, #0
 8004384:	da00      	bge.n	8004388 <Send_Vital_Data_Message+0x664>
 8004386:	3307      	adds	r3, #7
 8004388:	10db      	asrs	r3, r3, #3
 800438a:	b29a      	uxth	r2, r3
 800438c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004390:	4413      	add	r3, r2
 8004392:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004396:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800439a:	3308      	adds	r3, #8
 800439c:	b29b      	uxth	r3, r3
 800439e:	b21b      	sxth	r3, r3
 80043a0:	425a      	negs	r2, r3
 80043a2:	f003 0307 	and.w	r3, r3, #7
 80043a6:	f002 0207 	and.w	r2, r2, #7
 80043aa:	bf58      	it	pl
 80043ac:	4253      	negpl	r3, r2
 80043ae:	b21b      	sxth	r3, r3
 80043b0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_SIZE_BOOL_OPS);
 80043b4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043b8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80043bc:	441a      	add	r2, r3
 80043be:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80043c2:	2301      	movs	r3, #1
 80043c4:	2108      	movs	r1, #8
 80043c6:	f7fc f9b1 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80043ca:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80043ce:	3308      	adds	r3, #8
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	da00      	bge.n	80043d6 <Send_Vital_Data_Message+0x6b2>
 80043d4:	3307      	adds	r3, #7
 80043d6:	10db      	asrs	r3, r3, #3
 80043d8:	b29a      	uxth	r2, r3
 80043da:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80043de:	4413      	add	r3, r2
 80043e0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80043e4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80043e8:	3308      	adds	r3, #8
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	b21b      	sxth	r3, r3
 80043ee:	425a      	negs	r2, r3
 80043f0:	f003 0307 	and.w	r3, r3, #7
 80043f4:	f002 0207 	and.w	r2, r2, #7
 80043f8:	bf58      	it	pl
 80043fa:	4253      	negpl	r3, r2
 80043fc:	b21b      	sxth	r3, r3
 80043fe:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_NUM_VAL_OPS);
 8004402:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004406:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800440a:	441a      	add	r2, r3
 800440c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8004410:	2300      	movs	r3, #0
 8004412:	2108      	movs	r1, #8
 8004414:	f7fc f98a 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004418:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800441c:	3308      	adds	r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	da00      	bge.n	8004424 <Send_Vital_Data_Message+0x700>
 8004422:	3307      	adds	r3, #7
 8004424:	10db      	asrs	r3, r3, #3
 8004426:	b29a      	uxth	r2, r3
 8004428:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800442c:	4413      	add	r3, r2
 800442e:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004432:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004436:	3308      	adds	r3, #8
 8004438:	b29b      	uxth	r3, r3
 800443a:	b21b      	sxth	r3, r3
 800443c:	425a      	negs	r2, r3
 800443e:	f003 0307 	and.w	r3, r3, #7
 8004442:	f002 0207 	and.w	r2, r2, #7
 8004446:	bf58      	it	pl
 8004448:	4253      	negpl	r3, r2
 800444a:	b21b      	sxth	r3, r3
 800444c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], TX_BOOL_VAL_STATE);
 8004450:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8004454:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004458:	441a      	add	r2, r3
 800445a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800445e:	2301      	movs	r3, #1
 8004460:	2108      	movs	r1, #8
 8004462:	f7fc f963 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8004466:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800446a:	3308      	adds	r3, #8
 800446c:	2b00      	cmp	r3, #0
 800446e:	da00      	bge.n	8004472 <Send_Vital_Data_Message+0x74e>
 8004470:	3307      	adds	r3, #7
 8004472:	10db      	asrs	r3, r3, #3
 8004474:	b29a      	uxth	r2, r3
 8004476:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800447a:	4413      	add	r3, r2
 800447c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8004480:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8004484:	3308      	adds	r3, #8
 8004486:	b29b      	uxth	r3, r3
 8004488:	b21b      	sxth	r3, r3
 800448a:	425a      	negs	r2, r3
 800448c:	f003 0307 	and.w	r3, r3, #7
 8004490:	f002 0207 	and.w	r2, r2, #7
 8004494:	bf58      	it	pl
 8004496:	4253      	negpl	r3, r2
 8004498:	b21b      	sxth	r3, r3
 800449a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	//	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
	//	{
	//		Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = 0x654321;
	//	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <Send_Vital_Data_Message+0x798>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	085b      	lsrs	r3, r3, #1
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d02c      	beq.n	8004506 <Send_Vital_Data_Message+0x7e2>
 80044ac:	4b03      	ldr	r3, [pc, #12]	; (80044bc <Send_Vital_Data_Message+0x798>)
 80044ae:	791b      	ldrb	r3, [r3, #4]
 80044b0:	79fa      	ldrb	r2, [r7, #7]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d127      	bne.n	8004506 <Send_Vital_Data_Message+0x7e2>
 80044b6:	e003      	b.n	80044c0 <Send_Vital_Data_Message+0x79c>
 80044b8:	20001188 	.word	0x20001188
 80044bc:	2000195c 	.word	0x2000195c
	{
		uint32_t Rand_Number = 0;
 80044c0:	2300      	movs	r3, #0
 80044c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_Number = HAL_RNG_GetRandomNumber(&hrng);
 80044c6:	484e      	ldr	r0, [pc, #312]	; (8004600 <Send_Vital_Data_Message+0x8dc>)
 80044c8:	f015 fb98 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 80044cc:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80044d0:	484c      	ldr	r0, [pc, #304]	; (8004604 <Send_Vital_Data_Message+0x8e0>)
 80044d2:	f01d ff87 	bl	80223e4 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80044d6:	79fb      	ldrb	r3, [r7, #7]
 80044d8:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <Send_Vital_Data_Message+0x8e4>)
 80044da:	011b      	lsls	r3, r3, #4
 80044dc:	4413      	add	r3, r2
 80044de:	330c      	adds	r3, #12
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4619      	mov	r1, r3
 80044e4:	4849      	ldr	r0, [pc, #292]	; (800460c <Send_Vital_Data_Message+0x8e8>)
 80044e6:	f01d fee1 	bl	80222ac <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_Number);
 80044ea:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80044ee:	4848      	ldr	r0, [pc, #288]	; (8004610 <Send_Vital_Data_Message+0x8ec>)
 80044f0:	f01d fedc 	bl	80222ac <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_Number);
 80044f4:	f107 020c 	add.w	r2, r7, #12
 80044f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044fc:	2118      	movs	r1, #24
 80044fe:	2000      	movs	r0, #0
 8004500:	f7fc f914 	bl	800072c <InsertBits>
	{
 8004504:	e00b      	b.n	800451e <Send_Vital_Data_Message+0x7fa>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 8004506:	79fb      	ldrb	r3, [r7, #7]
 8004508:	4a3f      	ldr	r2, [pc, #252]	; (8004608 <Send_Vital_Data_Message+0x8e4>)
 800450a:	011b      	lsls	r3, r3, #4
 800450c:	4413      	add	r3, r2
 800450e:	330c      	adds	r3, #12
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f107 020c 	add.w	r2, r7, #12
 8004516:	2118      	movs	r1, #24
 8004518:	2000      	movs	r0, #0
 800451a:	f7fc f907 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800451e:	2300      	movs	r3, #0
 8004520:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004524:	e011      	b.n	800454a <Send_Vital_Data_Message+0x826>
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8004526:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800452a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800452e:	3303      	adds	r3, #3
 8004530:	3290      	adds	r2, #144	; 0x90
 8004532:	443a      	add	r2, r7
 8004534:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8004538:	3390      	adds	r3, #144	; 0x90
 800453a:	443b      	add	r3, r7
 800453c:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 8004540:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004544:	3301      	adds	r3, #1
 8004546:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800454a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800454e:	b29b      	uxth	r3, r3
 8004550:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 8004554:	429a      	cmp	r2, r3
 8004556:	d8e6      	bhi.n	8004526 <Send_Vital_Data_Message+0x802>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8004558:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800455c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8004560:	18d4      	adds	r4, r2, r3
 8004562:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8004566:	b29b      	uxth	r3, r3
 8004568:	3303      	adds	r3, #3
 800456a:	b29a      	uxth	r2, r3
 800456c:	f107 030c 	add.w	r3, r7, #12
 8004570:	4611      	mov	r1, r2
 8004572:	4618      	mov	r0, r3
 8004574:	f00e fab8 	bl	8012ae8 <CalculateDirectReverseCrc>
 8004578:	4603      	mov	r3, r0
 800457a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800457e:	4622      	mov	r2, r4
 8004580:	2120      	movs	r1, #32
 8004582:	f7fc f8d3 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 8004586:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800458a:	3320      	adds	r3, #32
 800458c:	2b00      	cmp	r3, #0
 800458e:	da00      	bge.n	8004592 <Send_Vital_Data_Message+0x86e>
 8004590:	3307      	adds	r3, #7
 8004592:	10db      	asrs	r3, r3, #3
 8004594:	b29a      	uxth	r2, r3
 8004596:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800459a:	4413      	add	r3, r2
 800459c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80045a0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80045a4:	3320      	adds	r3, #32
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	b21b      	sxth	r3, r3
 80045aa:	425a      	negs	r2, r3
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	f002 0207 	and.w	r2, r2, #7
 80045b4:	bf58      	it	pl
 80045b6:	4253      	negpl	r3, r2
 80045b8:	b21b      	sxth	r3, r3
 80045ba:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

#if ENABLE_FAULT_INJECTION
	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80045be:	4b15      	ldr	r3, [pc, #84]	; (8004614 <Send_Vital_Data_Message+0x8f0>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	0a5b      	lsrs	r3, r3, #9
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d00b      	beq.n	80045e4 <Send_Vital_Data_Message+0x8c0>
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <Send_Vital_Data_Message+0x8f0>)
 80045ce:	791b      	ldrb	r3, [r3, #4]
 80045d0:	79fa      	ldrb	r2, [r7, #7]
 80045d2:	429a      	cmp	r2, r3
 80045d4:	d106      	bne.n	80045e4 <Send_Vital_Data_Message+0x8c0>
	{
		printf("Injected ETH tx Fail\n");
 80045d6:	4810      	ldr	r0, [pc, #64]	; (8004618 <Send_Vital_Data_Message+0x8f4>)
 80045d8:	f01d ff04 	bl	80223e4 <puts>
		printf("Not Sending Reply");
 80045dc:	480f      	ldr	r0, [pc, #60]	; (800461c <Send_Vital_Data_Message+0x8f8>)
 80045de:	f01d fe65 	bl	80222ac <iprintf>
 80045e2:	e009      	b.n	80045f8 <Send_Vital_Data_Message+0x8d4>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 80045e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80045e8:	b2d9      	uxtb	r1, r3
 80045ea:	79fa      	ldrb	r2, [r7, #7]
 80045ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80045f0:	4618      	mov	r0, r3
 80045f2:	f002 ffbb 	bl	800756c <Process_Sending_Reply>
	}
#else
	Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
#endif
}
 80045f6:	bf00      	nop
 80045f8:	bf00      	nop
 80045fa:	3794      	adds	r7, #148	; 0x94
 80045fc:	46bd      	mov	sp, r7
 80045fe:	bd90      	pop	{r4, r7, pc}
 8004600:	20009c78 	.word	0x20009c78
 8004604:	08024198 	.word	0x08024198
 8004608:	200011c4 	.word	0x200011c4
 800460c:	080241bc 	.word	0x080241bc
 8004610:	080241e0 	.word	0x080241e0
 8004614:	2000195c 	.word	0x2000195c
 8004618:	08023f30 	.word	0x08023f30
 800461c:	08023f48 	.word	0x08023f48

08004620 <Vital_Msg_extr_from_CAN>:


void Vital_Msg_extr_from_CAN(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b0b0      	sub	sp, #192	; 0xc0
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	4608      	mov	r0, r1
 800462a:	4611      	mov	r1, r2
 800462c:	461a      	mov	r2, r3
 800462e:	4603      	mov	r3, r0
 8004630:	70fb      	strb	r3, [r7, #3]
 8004632:	460b      	mov	r3, r1
 8004634:	70bb      	strb	r3, [r7, #2]
 8004636:	4613      	mov	r3, r2
 8004638:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800463a:	2300      	movs	r3, #0
 800463c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	uint32_t Calc_CRC = 0;
 8004640:	2300      	movs	r3, #0
 8004642:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	uint32_t Recv_CRC = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	uint32_t Ticks = HAL_GetTick();
 800464c:	f010 fe24 	bl	8015298 <HAL_GetTick>
 8004650:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	uint8_t noofIP = 0, uc_index = 0;
 8004654:	2300      	movs	r3, #0
 8004656:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 800465a:	2300      	movs	r3, #0
 800465c:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
	uint8_t LinkEstablishFlag = 0;
 8004660:	2300      	movs	r3, #0
 8004662:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	uint8_t Temp_Vital_Data_Buff[60] = {0,};
 8004666:	2300      	movs	r3, #0
 8004668:	66bb      	str	r3, [r7, #104]	; 0x68
 800466a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800466e:	2238      	movs	r2, #56	; 0x38
 8004670:	2100      	movs	r1, #0
 8004672:	4618      	mov	r0, r3
 8004674:	f01d fd32 	bl	80220dc <memset>
	HITACHI_VITAL_t CAN_Hitachi_Vital_st;
	HITACHI_PARAMETERS_t CAN_Hitachi_Parameters_t;
	HITACHI_TIME_t CAN_HITACHI_time_Stamp_st;
	RELAYS_t CAN_Relay_st;

	BITSTUFFINIT(0, 0);
 8004678:	2300      	movs	r3, #0
 800467a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 800467e:	2300      	movs	r3, #0
 8004680:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	if(Length == Last_Rcv_Vdata_st[Source_Index].Length)
 8004684:	78fb      	ldrb	r3, [r7, #3]
 8004686:	b299      	uxth	r1, r3
 8004688:	78ba      	ldrb	r2, [r7, #2]
 800468a:	48c2      	ldr	r0, [pc, #776]	; (8004994 <Vital_Msg_extr_from_CAN+0x374>)
 800468c:	4613      	mov	r3, r2
 800468e:	015b      	lsls	r3, r3, #5
 8004690:	4413      	add	r3, r2
 8004692:	005b      	lsls	r3, r3, #1
 8004694:	4403      	add	r3, r0
 8004696:	3340      	adds	r3, #64	; 0x40
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	4299      	cmp	r1, r3
 800469c:	d11a      	bne.n	80046d4 <Vital_Msg_extr_from_CAN+0xb4>
	{
		if(memcmp(Buff,Last_Rcv_Vdata_st[Source_Index].Last_Rcv_vdata,Length) == 0)
 800469e:	78ba      	ldrb	r2, [r7, #2]
 80046a0:	4613      	mov	r3, r2
 80046a2:	015b      	lsls	r3, r3, #5
 80046a4:	4413      	add	r3, r2
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	4aba      	ldr	r2, [pc, #744]	; (8004994 <Vital_Msg_extr_from_CAN+0x374>)
 80046aa:	4413      	add	r3, r2
 80046ac:	78fa      	ldrb	r2, [r7, #3]
 80046ae:	4619      	mov	r1, r3
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f01d fcdb 	bl	802206c <memcmp>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <Vital_Msg_extr_from_CAN+0xb4>
		{
			printf("\nBoth Ethernet Vdata Msg and CAN Vdata Msg Matched for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80046bc:	78bb      	ldrb	r3, [r7, #2]
 80046be:	4ab6      	ldr	r2, [pc, #728]	; (8004998 <Vital_Msg_extr_from_CAN+0x378>)
 80046c0:	3366      	adds	r3, #102	; 0x66
 80046c2:	009b      	lsls	r3, r3, #2
 80046c4:	4413      	add	r3, r2
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	4619      	mov	r1, r3
 80046ca:	48b4      	ldr	r0, [pc, #720]	; (800499c <Vital_Msg_extr_from_CAN+0x37c>)
 80046cc:	f01d fdee 	bl	80222ac <iprintf>
			return;
 80046d0:	f000 bd97 	b.w	8005202 <Vital_Msg_extr_from_CAN+0xbe2>
		}
	}

	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 80046d4:	78fb      	ldrb	r3, [r7, #3]
 80046d6:	3b05      	subs	r3, #5
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	441a      	add	r2, r3
 80046dc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80046e0:	2120      	movs	r1, #32
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7fb ff96 	bl	8000614 <ExtractBits>
 80046e8:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac


#if ENABLE_FAULT_INJECTION
	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80046ec:	4bac      	ldr	r3, [pc, #688]	; (80049a0 <Vital_Msg_extr_from_CAN+0x380>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0301 	and.w	r3, r3, #1
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d034      	beq.n	8004762 <Vital_Msg_extr_from_CAN+0x142>
 80046f8:	4ba9      	ldr	r3, [pc, #676]	; (80049a0 <Vital_Msg_extr_from_CAN+0x380>)
 80046fa:	791b      	ldrb	r3, [r3, #4]
 80046fc:	78ba      	ldrb	r2, [r7, #2]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d12f      	bne.n	8004762 <Vital_Msg_extr_from_CAN+0x142>
	{
		uint32_t Rand_Number = 22;
 8004702:	2316      	movs	r3, #22
 8004704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff00);
 8004708:	48a6      	ldr	r0, [pc, #664]	; (80049a4 <Vital_Msg_extr_from_CAN+0x384>)
 800470a:	f015 fa77 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800470e:	4602      	mov	r2, r0
 8004710:	4ba5      	ldr	r3, [pc, #660]	; (80049a8 <Vital_Msg_extr_from_CAN+0x388>)
 8004712:	fba3 1302 	umull	r1, r3, r3, r2
 8004716:	0dd9      	lsrs	r1, r3, #23
 8004718:	460b      	mov	r3, r1
 800471a:	041b      	lsls	r3, r3, #16
 800471c:	1a5b      	subs	r3, r3, r1
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	1ad3      	subs	r3, r2, r3
 8004722:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		printf("\nInjected RX Vital CRC failure\n");
 8004726:	48a1      	ldr	r0, [pc, #644]	; (80049ac <Vital_Msg_extr_from_CAN+0x38c>)
 8004728:	f01d fe5c 	bl	80223e4 <puts>
		printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 800472c:	78ba      	ldrb	r2, [r7, #2]
 800472e:	49a0      	ldr	r1, [pc, #640]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 8004730:	4613      	mov	r3, r2
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	4413      	add	r3, r2
 8004736:	00db      	lsls	r3, r3, #3
 8004738:	440b      	add	r3, r1
 800473a:	3308      	adds	r3, #8
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4619      	mov	r1, r3
 8004740:	489c      	ldr	r0, [pc, #624]	; (80049b4 <Vital_Msg_extr_from_CAN+0x394>)
 8004742:	f01d fdb3 	bl	80222ac <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 8004746:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800474a:	489b      	ldr	r0, [pc, #620]	; (80049b8 <Vital_Msg_extr_from_CAN+0x398>)
 800474c:	f01d fdae 	bl	80222ac <iprintf>
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0],Rand_Number);
 8004750:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004754:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004758:	2118      	movs	r1, #24
 800475a:	2000      	movs	r0, #0
 800475c:	f7fb ffe6 	bl	800072c <InsertBits>
	{
 8004760:	e00e      	b.n	8004780 <Vital_Msg_extr_from_CAN+0x160>
	}
	else
	{
		InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8004762:	78ba      	ldrb	r2, [r7, #2]
 8004764:	4992      	ldr	r1, [pc, #584]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 8004766:	4613      	mov	r3, r2
 8004768:	005b      	lsls	r3, r3, #1
 800476a:	4413      	add	r3, r2
 800476c:	00db      	lsls	r3, r3, #3
 800476e:	440b      	add	r3, r1
 8004770:	3308      	adds	r3, #8
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004778:	2118      	movs	r1, #24
 800477a:	2000      	movs	r0, #0
 800477c:	f7fb ffd6 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Vital_Data_Buff[0], Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
#endif
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004780:	2300      	movs	r3, #0
 8004782:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8004786:	e010      	b.n	80047aa <Vital_Msg_extr_from_CAN+0x18a>
	{
		Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004788:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800478c:	687a      	ldr	r2, [r7, #4]
 800478e:	441a      	add	r2, r3
 8004790:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8004794:	3303      	adds	r3, #3
 8004796:	7812      	ldrb	r2, [r2, #0]
 8004798:	33c0      	adds	r3, #192	; 0xc0
 800479a:	443b      	add	r3, r7
 800479c:	f803 2c58 	strb.w	r2, [r3, #-88]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80047a0:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80047a4:	3301      	adds	r3, #1
 80047a6:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 80047aa:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	3b05      	subs	r3, #5
 80047b2:	429a      	cmp	r2, r3
 80047b4:	dbe8      	blt.n	8004788 <Vital_Msg_extr_from_CAN+0x168>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 80047b6:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3303      	adds	r3, #3
 80047be:	b29a      	uxth	r2, r3
 80047c0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047c4:	4611      	mov	r1, r2
 80047c6:	4618      	mov	r0, r3
 80047c8:	f00e f98e 	bl	8012ae8 <CalculateDirectReverseCrc>
 80047cc:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0

	if(Calc_CRC != Recv_CRC)
 80047d0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80047d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047d8:	429a      	cmp	r2, r3
 80047da:	f000 8103 	beq.w	80049e4 <Vital_Msg_extr_from_CAN+0x3c4>
	{
		if( ExtractBits(0, 8, (unsigned char *)&Buff[5]) == 0x00)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	3305      	adds	r3, #5
 80047e2:	461a      	mov	r2, r3
 80047e4:	2108      	movs	r1, #8
 80047e6:	2000      	movs	r0, #0
 80047e8:	f7fb ff14 	bl	8000614 <ExtractBits>
 80047ec:	4603      	mov	r3, r0
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f040 80b9 	bne.w	8004966 <Vital_Msg_extr_from_CAN+0x346>
		{
			printf("Tx seq Roll over Detected\n");
 80047f4:	4871      	ldr	r0, [pc, #452]	; (80049bc <Vital_Msg_extr_from_CAN+0x39c>)
 80047f6:	f01d fdf5 	bl	80223e4 <puts>
			memset(Temp_Vital_Data_Buff,0,sizeof(Temp_Vital_Data_Buff));
 80047fa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80047fe:	223c      	movs	r2, #60	; 0x3c
 8004800:	2100      	movs	r1, #0
 8004802:	4618      	mov	r0, r3
 8004804:	f01d fc6a 	bl	80220dc <memset>
			InsertBits(0, 24, &Temp_Vital_Data_Buff[0], (Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val+1));
 8004808:	78ba      	ldrb	r2, [r7, #2]
 800480a:	4969      	ldr	r1, [pc, #420]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 800480c:	4613      	mov	r3, r2
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	4413      	add	r3, r2
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	440b      	add	r3, r1
 8004816:	3308      	adds	r3, #8
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	3301      	adds	r3, #1
 800481c:	f107 0268 	add.w	r2, r7, #104	; 0x68
 8004820:	2118      	movs	r1, #24
 8004822:	2000      	movs	r0, #0
 8004824:	f7fb ff82 	bl	800072c <InsertBits>
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004828:	2300      	movs	r3, #0
 800482a:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 800482e:	e010      	b.n	8004852 <Vital_Msg_extr_from_CAN+0x232>
			{
				Temp_Vital_Data_Buff[uc_index + 3] = Buff[uc_index];
 8004830:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8004834:	687a      	ldr	r2, [r7, #4]
 8004836:	441a      	add	r2, r3
 8004838:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800483c:	3303      	adds	r3, #3
 800483e:	7812      	ldrb	r2, [r2, #0]
 8004840:	33c0      	adds	r3, #192	; 0xc0
 8004842:	443b      	add	r3, r7
 8004844:	f803 2c58 	strb.w	r2, [r3, #-88]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8004848:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 800484c:	3301      	adds	r3, #1
 800484e:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8004852:	f897 20bc 	ldrb.w	r2, [r7, #188]	; 0xbc
 8004856:	78fb      	ldrb	r3, [r7, #3]
 8004858:	3b05      	subs	r3, #5
 800485a:	429a      	cmp	r2, r3
 800485c:	dbe8      	blt.n	8004830 <Vital_Msg_extr_from_CAN+0x210>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Vital_Data_Buff, uc_index + 3);
 800485e:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8004862:	b29b      	uxth	r3, r3
 8004864:	3303      	adds	r3, #3
 8004866:	b29a      	uxth	r2, r3
 8004868:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800486c:	4611      	mov	r1, r2
 800486e:	4618      	mov	r0, r3
 8004870:	f00e f93a 	bl	8012ae8 <CalculateDirectReverseCrc>
 8004874:	f8c7 00b0 	str.w	r0, [r7, #176]	; 0xb0
			Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8004878:	78fb      	ldrb	r3, [r7, #3]
 800487a:	3b05      	subs	r3, #5
 800487c:	687a      	ldr	r2, [r7, #4]
 800487e:	441a      	add	r2, r3
 8004880:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004884:	2120      	movs	r1, #32
 8004886:	4618      	mov	r0, r3
 8004888:	f7fb fec4 	bl	8000614 <ExtractBits>
 800488c:	f8c7 00ac 	str.w	r0, [r7, #172]	; 0xac

			if(Calc_CRC == Recv_CRC)
 8004890:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004894:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004898:	429a      	cmp	r2, r3
 800489a:	d14e      	bne.n	800493a <Vital_Msg_extr_from_CAN+0x31a>
			{
				printf("CRC OK AFTER ROLL OVER @VITAL_CAN\n");
 800489c:	4848      	ldr	r0, [pc, #288]	; (80049c0 <Vital_Msg_extr_from_CAN+0x3a0>)
 800489e:	f01d fda1 	bl	80223e4 <puts>
				printf("Received CRC       :0x%08lX\n",Recv_CRC);
 80048a2:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 80048a6:	4847      	ldr	r0, [pc, #284]	; (80049c4 <Vital_Msg_extr_from_CAN+0x3a4>)
 80048a8:	f01d fd00 	bl	80222ac <iprintf>
				printf("Previous Init Value:%lu\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80048ac:	78ba      	ldrb	r2, [r7, #2]
 80048ae:	4940      	ldr	r1, [pc, #256]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 80048b0:	4613      	mov	r3, r2
 80048b2:	005b      	lsls	r3, r3, #1
 80048b4:	4413      	add	r3, r2
 80048b6:	00db      	lsls	r3, r3, #3
 80048b8:	440b      	add	r3, r1
 80048ba:	3308      	adds	r3, #8
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	4841      	ldr	r0, [pc, #260]	; (80049c8 <Vital_Msg_extr_from_CAN+0x3a8>)
 80048c2:	f01d fcf3 	bl	80222ac <iprintf>
				Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = ++Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 80048c6:	78ba      	ldrb	r2, [r7, #2]
 80048c8:	4939      	ldr	r1, [pc, #228]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 80048ca:	4613      	mov	r3, r2
 80048cc:	005b      	lsls	r3, r3, #1
 80048ce:	4413      	add	r3, r2
 80048d0:	00db      	lsls	r3, r3, #3
 80048d2:	440b      	add	r3, r1
 80048d4:	3308      	adds	r3, #8
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	1c59      	adds	r1, r3, #1
 80048da:	4835      	ldr	r0, [pc, #212]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 80048dc:	4613      	mov	r3, r2
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	4413      	add	r3, r2
 80048e2:	00db      	lsls	r3, r3, #3
 80048e4:	4403      	add	r3, r0
 80048e6:	3308      	adds	r3, #8
 80048e8:	6019      	str	r1, [r3, #0]
 80048ea:	78b9      	ldrb	r1, [r7, #2]
 80048ec:	4830      	ldr	r0, [pc, #192]	; (80049b0 <Vital_Msg_extr_from_CAN+0x390>)
 80048ee:	4613      	mov	r3, r2
 80048f0:	005b      	lsls	r3, r3, #1
 80048f2:	4413      	add	r3, r2
 80048f4:	00db      	lsls	r3, r3, #3
 80048f6:	4403      	add	r3, r0
 80048f8:	3308      	adds	r3, #8
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4833      	ldr	r0, [pc, #204]	; (80049cc <Vital_Msg_extr_from_CAN+0x3ac>)
 80048fe:	010b      	lsls	r3, r1, #4
 8004900:	4403      	add	r3, r0
 8004902:	3308      	adds	r3, #8
 8004904:	601a      	str	r2, [r3, #0]
				printf("Incremented Vital_CRC Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8004906:	78bb      	ldrb	r3, [r7, #2]
 8004908:	4a30      	ldr	r2, [pc, #192]	; (80049cc <Vital_Msg_extr_from_CAN+0x3ac>)
 800490a:	011b      	lsls	r3, r3, #4
 800490c:	4413      	add	r3, r2
 800490e:	3308      	adds	r3, #8
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4619      	mov	r1, r3
 8004914:	482e      	ldr	r0, [pc, #184]	; (80049d0 <Vital_Msg_extr_from_CAN+0x3b0>)
 8004916:	f01d fcc9 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800491a:	78bb      	ldrb	r3, [r7, #2]
 800491c:	78ba      	ldrb	r2, [r7, #2]
 800491e:	492b      	ldr	r1, [pc, #172]	; (80049cc <Vital_Msg_extr_from_CAN+0x3ac>)
 8004920:	011b      	lsls	r3, r3, #4
 8004922:	440b      	add	r3, r1
 8004924:	3308      	adds	r3, #8
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	482a      	ldr	r0, [pc, #168]	; (80049d4 <Vital_Msg_extr_from_CAN+0x3b4>)
 800492a:	4613      	mov	r3, r2
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	4413      	add	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4403      	add	r3, r0
 8004934:	3308      	adds	r3, #8
 8004936:	6019      	str	r1, [r3, #0]
				goto ROLLOVER_VITAL_CAN;
 8004938:	e055      	b.n	80049e6 <Vital_Msg_extr_from_CAN+0x3c6>
			}
			else
			{
				printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800493a:	78bb      	ldrb	r3, [r7, #2]
 800493c:	4a16      	ldr	r2, [pc, #88]	; (8004998 <Vital_Msg_extr_from_CAN+0x378>)
 800493e:	3366      	adds	r3, #102	; 0x66
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	4619      	mov	r1, r3
 8004948:	4823      	ldr	r0, [pc, #140]	; (80049d8 <Vital_Msg_extr_from_CAN+0x3b8>)
 800494a:	f01d fcaf 	bl	80222ac <iprintf>
				printf("R-CRC:0x%08lX\n", Recv_CRC);
 800494e:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8004952:	4822      	ldr	r0, [pc, #136]	; (80049dc <Vital_Msg_extr_from_CAN+0x3bc>)
 8004954:	f01d fcaa 	bl	80222ac <iprintf>
				printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004958:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 800495c:	4820      	ldr	r0, [pc, #128]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3c0>)
 800495e:	f01d fca5 	bl	80222ac <iprintf>
				return;
 8004962:	f000 bc4e 	b.w	8005202 <Vital_Msg_extr_from_CAN+0xbe2>
			}
		}
		else
		{
			printf("CAN VITAL MSG CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8004966:	78bb      	ldrb	r3, [r7, #2]
 8004968:	4a0b      	ldr	r2, [pc, #44]	; (8004998 <Vital_Msg_extr_from_CAN+0x378>)
 800496a:	3366      	adds	r3, #102	; 0x66
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4413      	add	r3, r2
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	4619      	mov	r1, r3
 8004974:	4818      	ldr	r0, [pc, #96]	; (80049d8 <Vital_Msg_extr_from_CAN+0x3b8>)
 8004976:	f01d fc99 	bl	80222ac <iprintf>
			printf("R-CRC:0x%08lX\n", Recv_CRC);
 800497a:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 800497e:	4817      	ldr	r0, [pc, #92]	; (80049dc <Vital_Msg_extr_from_CAN+0x3bc>)
 8004980:	f01d fc94 	bl	80222ac <iprintf>
			printf("C-CRC:0x%08lX\n", Calc_CRC);
 8004984:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8004988:	4815      	ldr	r0, [pc, #84]	; (80049e0 <Vital_Msg_extr_from_CAN+0x3c0>)
 800498a:	f01d fc8f 	bl	80222ac <iprintf>
			return;
 800498e:	f000 bc38 	b.w	8005202 <Vital_Msg_extr_from_CAN+0xbe2>
 8004992:	bf00      	nop
 8004994:	2000197c 	.word	0x2000197c
 8004998:	20000304 	.word	0x20000304
 800499c:	08024204 	.word	0x08024204
 80049a0:	2000195c 	.word	0x2000195c
 80049a4:	20009c78 	.word	0x20009c78
 80049a8:	80008001 	.word	0x80008001
 80049ac:	08023f5c 	.word	0x08023f5c
 80049b0:	20001764 	.word	0x20001764
 80049b4:	08023f7c 	.word	0x08023f7c
 80049b8:	08023fa4 	.word	0x08023fa4
 80049bc:	08023fcc 	.word	0x08023fcc
 80049c0:	08024248 	.word	0x08024248
 80049c4:	08024000 	.word	0x08024000
 80049c8:	0802426c 	.word	0x0802426c
 80049cc:	200011c4 	.word	0x200011c4
 80049d0:	08024040 	.word	0x08024040
 80049d4:	20001674 	.word	0x20001674
 80049d8:	08024288 	.word	0x08024288
 80049dc:	08023c9c 	.word	0x08023c9c
 80049e0:	08023cac 	.word	0x08023cac
		}
	}
	ROLLOVER_VITAL_CAN:
 80049e4:	bf00      	nop
	//printf("Actual   RX Vital Init Value:0x%06lX\n",Rx_Ei_self_sharing_st.Vital_CRC_Init_Value[Source_Index]);
	BITSTUFFINC(8); // Incrementing to escape SOM
 80049e6:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 80049ea:	3308      	adds	r3, #8
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	da00      	bge.n	80049f2 <Vital_Msg_extr_from_CAN+0x3d2>
 80049f0:	3307      	adds	r3, #7
 80049f2:	10db      	asrs	r3, r3, #3
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 80049fa:	4413      	add	r3, r2
 80049fc:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004a00:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004a04:	3308      	adds	r3, #8
 8004a06:	b29b      	uxth	r3, r3
 8004a08:	b21b      	sxth	r3, r3
 8004a0a:	425a      	negs	r2, r3
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	f002 0207 	and.w	r2, r2, #7
 8004a14:	bf58      	it	pl
 8004a16:	4253      	negpl	r3, r2
 8004a18:	b21b      	sxth	r3, r3
 8004a1a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	CAN_Hitachi_Vital_st.Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a1e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	441a      	add	r2, r3
 8004a26:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004a2a:	2110      	movs	r1, #16
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fb fdf1 	bl	8000614 <ExtractBits>
 8004a32:	4603      	mov	r3, r0
 8004a34:	b29b      	uxth	r3, r3
 8004a36:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
	printf("DA:%u ",CAN_Hitachi_Vital_st.Des_Addr);
 8004a3a:	f8b7 3060 	ldrh.w	r3, [r7, #96]	; 0x60
 8004a3e:	4619      	mov	r1, r3
 8004a40:	48c7      	ldr	r0, [pc, #796]	; (8004d60 <Vital_Msg_extr_from_CAN+0x740>)
 8004a42:	f01d fc33 	bl	80222ac <iprintf>
	BITSTUFFINC(16);
 8004a46:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004a4a:	3310      	adds	r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	da00      	bge.n	8004a52 <Vital_Msg_extr_from_CAN+0x432>
 8004a50:	3307      	adds	r3, #7
 8004a52:	10db      	asrs	r3, r3, #3
 8004a54:	b29a      	uxth	r2, r3
 8004a56:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004a60:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004a64:	3310      	adds	r3, #16
 8004a66:	b29b      	uxth	r3, r3
 8004a68:	b21b      	sxth	r3, r3
 8004a6a:	425a      	negs	r2, r3
 8004a6c:	f003 0307 	and.w	r3, r3, #7
 8004a70:	f002 0207 	and.w	r2, r2, #7
 8004a74:	bf58      	it	pl
 8004a76:	4253      	negpl	r3, r2
 8004a78:	b21b      	sxth	r3, r3
 8004a7a:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	CAN_Hitachi_Vital_st.Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004a7e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	441a      	add	r2, r3
 8004a86:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004a8a:	2110      	movs	r1, #16
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7fb fdc1 	bl	8000614 <ExtractBits>
 8004a92:	4603      	mov	r3, r0
 8004a94:	b29b      	uxth	r3, r3
 8004a96:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
	printf("SA:%u ",CAN_Hitachi_Vital_st.Src_Addr);
 8004a9a:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004a9e:	4619      	mov	r1, r3
 8004aa0:	48b0      	ldr	r0, [pc, #704]	; (8004d64 <Vital_Msg_extr_from_CAN+0x744>)
 8004aa2:	f01d fc03 	bl	80222ac <iprintf>
	BITSTUFFINC(16);
 8004aa6:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004aaa:	3310      	adds	r3, #16
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	da00      	bge.n	8004ab2 <Vital_Msg_extr_from_CAN+0x492>
 8004ab0:	3307      	adds	r3, #7
 8004ab2:	10db      	asrs	r3, r3, #3
 8004ab4:	b29a      	uxth	r2, r3
 8004ab6:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004aba:	4413      	add	r3, r2
 8004abc:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004ac0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ac4:	3310      	adds	r3, #16
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	b21b      	sxth	r3, r3
 8004aca:	425a      	negs	r2, r3
 8004acc:	f003 0307 	and.w	r3, r3, #7
 8004ad0:	f002 0207 	and.w	r2, r2, #7
 8004ad4:	bf58      	it	pl
 8004ad6:	4253      	negpl	r3, r2
 8004ad8:	b21b      	sxth	r3, r3
 8004ada:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	CAN_Hitachi_Parameters_t.Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ade:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004ae2:	687a      	ldr	r2, [r7, #4]
 8004ae4:	441a      	add	r2, r3
 8004ae6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004aea:	2108      	movs	r1, #8
 8004aec:	4618      	mov	r0, r3
 8004aee:	f7fb fd91 	bl	8000614 <ExtractBits>
 8004af2:	4603      	mov	r3, r0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
	//printf("Tx_seq             :%u\n", CAN_Hitachi_Parameters_t.Tx_Seq);
	BITSTUFFINC(8);
 8004afa:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004afe:	3308      	adds	r3, #8
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	da00      	bge.n	8004b06 <Vital_Msg_extr_from_CAN+0x4e6>
 8004b04:	3307      	adds	r3, #7
 8004b06:	10db      	asrs	r3, r3, #3
 8004b08:	b29a      	uxth	r2, r3
 8004b0a:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004b0e:	4413      	add	r3, r2
 8004b10:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004b14:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b18:	3308      	adds	r3, #8
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	b21b      	sxth	r3, r3
 8004b1e:	425a      	negs	r2, r3
 8004b20:	f003 0307 	and.w	r3, r3, #7
 8004b24:	f002 0207 	and.w	r2, r2, #7
 8004b28:	bf58      	it	pl
 8004b2a:	4253      	negpl	r3, r2
 8004b2c:	b21b      	sxth	r3, r3
 8004b2e:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	CAN_Hitachi_Parameters_t.Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b32:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004b36:	687a      	ldr	r2, [r7, #4]
 8004b38:	441a      	add	r2, r3
 8004b3a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b3e:	2108      	movs	r1, #8
 8004b40:	4618      	mov	r0, r3
 8004b42:	f7fb fd67 	bl	8000614 <ExtractBits>
 8004b46:	4603      	mov	r3, r0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
	//printf("Rx_seq             :%u\n", CAN_Hitachi_Parameters_t.Rx_Seq);
	BITSTUFFINC(8);
 8004b4e:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004b52:	3308      	adds	r3, #8
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	da00      	bge.n	8004b5a <Vital_Msg_extr_from_CAN+0x53a>
 8004b58:	3307      	adds	r3, #7
 8004b5a:	10db      	asrs	r3, r3, #3
 8004b5c:	b29a      	uxth	r2, r3
 8004b5e:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004b62:	4413      	add	r3, r2
 8004b64:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004b68:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	b29b      	uxth	r3, r3
 8004b70:	b21b      	sxth	r3, r3
 8004b72:	425a      	negs	r2, r3
 8004b74:	f003 0307 	and.w	r3, r3, #7
 8004b78:	f002 0207 	and.w	r2, r2, #7
 8004b7c:	bf58      	it	pl
 8004b7e:	4253      	negpl	r3, r2
 8004b80:	b21b      	sxth	r3, r3
 8004b82:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	CAN_Hitachi_Vital_st.Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004b86:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	441a      	add	r2, r3
 8004b8e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004b92:	2108      	movs	r1, #8
 8004b94:	4618      	mov	r0, r3
 8004b96:	f7fb fd3d 	bl	8000614 <ExtractBits>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	b2db      	uxtb	r3, r3
 8004b9e:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
	//printf("Msg_Type           :%u\n",Hitachi_Vital_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8004ba2:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004ba6:	3308      	adds	r3, #8
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	da00      	bge.n	8004bae <Vital_Msg_extr_from_CAN+0x58e>
 8004bac:	3307      	adds	r3, #7
 8004bae:	10db      	asrs	r3, r3, #3
 8004bb0:	b29a      	uxth	r2, r3
 8004bb2:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004bb6:	4413      	add	r3, r2
 8004bb8:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004bbc:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004bc0:	3308      	adds	r3, #8
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	b21b      	sxth	r3, r3
 8004bc6:	425a      	negs	r2, r3
 8004bc8:	f003 0307 	and.w	r3, r3, #7
 8004bcc:	f002 0207 	and.w	r2, r2, #7
 8004bd0:	bf58      	it	pl
 8004bd2:	4253      	negpl	r3, r2
 8004bd4:	b21b      	sxth	r3, r3
 8004bd6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	CAN_Hitachi_Parameters_t.Msg_Status_Flag= ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8004bda:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004bde:	687a      	ldr	r2, [r7, #4]
 8004be0:	441a      	add	r2, r3
 8004be2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004be6:	2110      	movs	r1, #16
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7fb fd13 	bl	8000614 <ExtractBits>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	85bb      	strh	r3, [r7, #44]	; 0x2c
	//printf("Msg_sts_flag       :0x%04X\n", CAN_Hitachi_Parameters_t.Msg_Status_Flag);
	BITSTUFFINC(16);
 8004bf4:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004bf8:	3310      	adds	r3, #16
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	da00      	bge.n	8004c00 <Vital_Msg_extr_from_CAN+0x5e0>
 8004bfe:	3307      	adds	r3, #7
 8004c00:	10db      	asrs	r3, r3, #3
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004c08:	4413      	add	r3, r2
 8004c0a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004c0e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004c12:	3310      	adds	r3, #16
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	b21b      	sxth	r3, r3
 8004c18:	425a      	negs	r2, r3
 8004c1a:	f003 0307 	and.w	r3, r3, #7
 8004c1e:	f002 0207 	and.w	r2, r2, #7
 8004c22:	bf58      	it	pl
 8004c24:	4253      	negpl	r3, r2
 8004c26:	b21b      	sxth	r3, r3
 8004c28:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

	//Debug_Status_Flag(CAN_Hitachi_Parameters_t.Msg_Status_Flag,CAN_Hitachi_Vital_st.Msg_Type);

	if ( ( SET == (CHECKFLAG(TIME_STAMP,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) ) // Time-stamp Extraction
 8004c2c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004c2e:	f003 0320 	and.w	r3, r3, #32
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	f000 8102 	beq.w	8004e3c <Vital_Msg_extr_from_CAN+0x81c>
	{
		CAN_HITACHI_time_Stamp_st.YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c38:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	441a      	add	r2, r3
 8004c40:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004c44:	2108      	movs	r1, #8
 8004c46:	4618      	mov	r0, r3
 8004c48:	f7fb fce4 	bl	8000614 <ExtractBits>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	b2db      	uxtb	r3, r3
 8004c50:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		//printf("YEAR               :0x%02X\n", CAN_HITACHI_time_Stamp_st.YY);
		BITSTUFFINC(8);
 8004c54:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004c58:	3308      	adds	r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	da00      	bge.n	8004c60 <Vital_Msg_extr_from_CAN+0x640>
 8004c5e:	3307      	adds	r3, #7
 8004c60:	10db      	asrs	r3, r3, #3
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004c68:	4413      	add	r3, r2
 8004c6a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004c6e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004c72:	3308      	adds	r3, #8
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	b21b      	sxth	r3, r3
 8004c78:	425a      	negs	r2, r3
 8004c7a:	f003 0307 	and.w	r3, r3, #7
 8004c7e:	f002 0207 	and.w	r2, r2, #7
 8004c82:	bf58      	it	pl
 8004c84:	4253      	negpl	r3, r2
 8004c86:	b21b      	sxth	r3, r3
 8004c88:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		CAN_HITACHI_time_Stamp_st.MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004c8c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	441a      	add	r2, r3
 8004c94:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004c98:	2108      	movs	r1, #8
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fb fcba 	bl	8000614 <ExtractBits>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		//printf("Month              :0x%02X\n", CAN_HITACHI_time_Stamp_st.MM);
		BITSTUFFINC(8);
 8004ca8:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004cac:	3308      	adds	r3, #8
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	da00      	bge.n	8004cb4 <Vital_Msg_extr_from_CAN+0x694>
 8004cb2:	3307      	adds	r3, #7
 8004cb4:	10db      	asrs	r3, r3, #3
 8004cb6:	b29a      	uxth	r2, r3
 8004cb8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004cc2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cc6:	3308      	adds	r3, #8
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	b21b      	sxth	r3, r3
 8004ccc:	425a      	negs	r2, r3
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	f002 0207 	and.w	r2, r2, #7
 8004cd6:	bf58      	it	pl
 8004cd8:	4253      	negpl	r3, r2
 8004cda:	b21b      	sxth	r3, r3
 8004cdc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		CAN_HITACHI_time_Stamp_st.DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004ce0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	441a      	add	r2, r3
 8004ce8:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004cec:	2108      	movs	r1, #8
 8004cee:	4618      	mov	r0, r3
 8004cf0:	f7fb fc90 	bl	8000614 <ExtractBits>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		//printf("Date               :0x%02X\n", CAN_HITACHI_time_Stamp_st.DD);
		BITSTUFFINC(8);
 8004cfc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004d00:	3308      	adds	r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	da00      	bge.n	8004d08 <Vital_Msg_extr_from_CAN+0x6e8>
 8004d06:	3307      	adds	r3, #7
 8004d08:	10db      	asrs	r3, r3, #3
 8004d0a:	b29a      	uxth	r2, r3
 8004d0c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004d10:	4413      	add	r3, r2
 8004d12:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004d16:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004d1a:	3308      	adds	r3, #8
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	b21b      	sxth	r3, r3
 8004d20:	425a      	negs	r2, r3
 8004d22:	f003 0307 	and.w	r3, r3, #7
 8004d26:	f002 0207 	and.w	r2, r2, #7
 8004d2a:	bf58      	it	pl
 8004d2c:	4253      	negpl	r3, r2
 8004d2e:	b21b      	sxth	r3, r3
 8004d30:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		CAN_HITACHI_time_Stamp_st.hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d34:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	441a      	add	r2, r3
 8004d3c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004d40:	2108      	movs	r1, #8
 8004d42:	4618      	mov	r0, r3
 8004d44:	f7fb fc66 	bl	8000614 <ExtractBits>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	b2db      	uxtb	r3, r3
 8004d4c:	f887 3020 	strb.w	r3, [r7, #32]
		//printf("HOURS              :0x%02X\n", CAN_HITACHI_time_Stamp_st.hh);
		BITSTUFFINC(8);
 8004d50:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004d54:	3308      	adds	r3, #8
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	da06      	bge.n	8004d68 <Vital_Msg_extr_from_CAN+0x748>
 8004d5a:	3307      	adds	r3, #7
 8004d5c:	e004      	b.n	8004d68 <Vital_Msg_extr_from_CAN+0x748>
 8004d5e:	bf00      	nop
 8004d60:	08023d8c 	.word	0x08023d8c
 8004d64:	08023d94 	.word	0x08023d94
 8004d68:	10db      	asrs	r3, r3, #3
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004d70:	4413      	add	r3, r2
 8004d72:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004d76:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	b29b      	uxth	r3, r3
 8004d7e:	b21b      	sxth	r3, r3
 8004d80:	425a      	negs	r2, r3
 8004d82:	f003 0307 	and.w	r3, r3, #7
 8004d86:	f002 0207 	and.w	r2, r2, #7
 8004d8a:	bf58      	it	pl
 8004d8c:	4253      	negpl	r3, r2
 8004d8e:	b21b      	sxth	r3, r3
 8004d90:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		CAN_HITACHI_time_Stamp_st.mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004d94:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	441a      	add	r2, r3
 8004d9c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004da0:	2108      	movs	r1, #8
 8004da2:	4618      	mov	r0, r3
 8004da4:	f7fb fc36 	bl	8000614 <ExtractBits>
 8004da8:	4603      	mov	r3, r0
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
		//printf("MINS               :0x%02X\n", CAN_HITACHI_time_Stamp_st.mm);
		BITSTUFFINC(8);
 8004db0:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004db4:	3308      	adds	r3, #8
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	da00      	bge.n	8004dbc <Vital_Msg_extr_from_CAN+0x79c>
 8004dba:	3307      	adds	r3, #7
 8004dbc:	10db      	asrs	r3, r3, #3
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004dc4:	4413      	add	r3, r2
 8004dc6:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004dca:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004dce:	3308      	adds	r3, #8
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	b21b      	sxth	r3, r3
 8004dd4:	425a      	negs	r2, r3
 8004dd6:	f003 0307 	and.w	r3, r3, #7
 8004dda:	f002 0207 	and.w	r2, r2, #7
 8004dde:	bf58      	it	pl
 8004de0:	4253      	negpl	r3, r2
 8004de2:	b21b      	sxth	r3, r3
 8004de4:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		CAN_HITACHI_time_Stamp_st.ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004de8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004dec:	687a      	ldr	r2, [r7, #4]
 8004dee:	441a      	add	r2, r3
 8004df0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004df4:	2108      	movs	r1, #8
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fb fc0c 	bl	8000614 <ExtractBits>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		//printf("SEC                :0x%02X\n", CAN_HITACHI_time_Stamp_st.ss);
		BITSTUFFINC(8);
 8004e04:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004e08:	3308      	adds	r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	da00      	bge.n	8004e10 <Vital_Msg_extr_from_CAN+0x7f0>
 8004e0e:	3307      	adds	r3, #7
 8004e10:	10db      	asrs	r3, r3, #3
 8004e12:	b29a      	uxth	r2, r3
 8004e14:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004e18:	4413      	add	r3, r2
 8004e1a:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004e1e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004e22:	3308      	adds	r3, #8
 8004e24:	b29b      	uxth	r3, r3
 8004e26:	b21b      	sxth	r3, r3
 8004e28:	425a      	negs	r2, r3
 8004e2a:	f003 0307 	and.w	r3, r3, #7
 8004e2e:	f002 0207 	and.w	r2, r2, #7
 8004e32:	bf58      	it	pl
 8004e34:	4253      	negpl	r3, r2
 8004e36:	b21b      	sxth	r3, r3
 8004e38:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

		//		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,CAN_Hitachi_Parameters_t.Msg_Status_Flag))) )
 8004e3c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d002      	beq.n	8004e4c <Vital_Msg_extr_from_CAN+0x82c>
	{
		LinkEstablishFlag = SET;
 8004e46:	2301      	movs	r3, #1
 8004e48:	f887 30bb 	strb.w	r3, [r7, #187]	; 0xbb
	}


	CAN_Hitachi_Vital_st.No_Outputs = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004e4c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	441a      	add	r2, r3
 8004e54:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004e58:	2108      	movs	r1, #8
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fb fbda 	bl	8000614 <ExtractBits>
 8004e60:	4603      	mov	r3, r0
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
	BITSTUFFINC(8);
 8004e68:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004e6c:	3308      	adds	r3, #8
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	da00      	bge.n	8004e74 <Vital_Msg_extr_from_CAN+0x854>
 8004e72:	3307      	adds	r3, #7
 8004e74:	10db      	asrs	r3, r3, #3
 8004e76:	b29a      	uxth	r2, r3
 8004e78:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004e7c:	4413      	add	r3, r2
 8004e7e:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004e82:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004e86:	3308      	adds	r3, #8
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	b21b      	sxth	r3, r3
 8004e8c:	425a      	negs	r2, r3
 8004e8e:	f003 0307 	and.w	r3, r3, #7
 8004e92:	f002 0207 	and.w	r2, r2, #7
 8004e96:	bf58      	it	pl
 8004e98:	4253      	negpl	r3, r2
 8004e9a:	b21b      	sxth	r3, r3
 8004e9c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	printf("OPS:%u ",CAN_Hitachi_Vital_st.No_Outputs);
 8004ea0:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	484a      	ldr	r0, [pc, #296]	; (8004fd0 <Vital_Msg_extr_from_CAN+0x9b0>)
 8004ea8:	f01d fa00 	bl	80222ac <iprintf>

	CAN_Hitachi_Vital_st.Size_Num_val = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004eac:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004eb0:	687a      	ldr	r2, [r7, #4]
 8004eb2:	441a      	add	r2, r3
 8004eb4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004eb8:	2108      	movs	r1, #8
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fb fbaa 	bl	8000614 <ExtractBits>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
	BITSTUFFINC(8);
 8004ec8:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004ecc:	3308      	adds	r3, #8
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	da00      	bge.n	8004ed4 <Vital_Msg_extr_from_CAN+0x8b4>
 8004ed2:	3307      	adds	r3, #7
 8004ed4:	10db      	asrs	r3, r3, #3
 8004ed6:	b29a      	uxth	r2, r3
 8004ed8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004edc:	4413      	add	r3, r2
 8004ede:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004ee2:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004ee6:	3308      	adds	r3, #8
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	b21b      	sxth	r3, r3
 8004eec:	425a      	negs	r2, r3
 8004eee:	f003 0307 	and.w	r3, r3, #7
 8004ef2:	f002 0207 	and.w	r2, r2, #7
 8004ef6:	bf58      	it	pl
 8004ef8:	4253      	negpl	r3, r2
 8004efa:	b21b      	sxth	r3, r3
 8004efc:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	//printf("Sz_Num_Val_Data    :%u\n",CAN_Hitachi_Vital_st.Size_Num_val);

	noofIP = (CAN_Hitachi_Vital_st.No_Outputs% 8);
 8004f00:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f04:	f003 0307 	and.w	r3, r3, #7
 8004f08:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	if (noofIP != 0)
 8004f0c:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d007      	beq.n	8004f24 <Vital_Msg_extr_from_CAN+0x904>
	{
		noofIP = ((CAN_Hitachi_Vital_st.No_Outputs / 8)) + 1; //	including 0th buffer
 8004f14:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f18:	08db      	lsrs	r3, r3, #3
 8004f1a:	b2db      	uxtb	r3, r3
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 8004f22:	e004      	b.n	8004f2e <Vital_Msg_extr_from_CAN+0x90e>
	}
	else
	{
		noofIP = (CAN_Hitachi_Vital_st.No_Outputs / 8);
 8004f24:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004f28:	08db      	lsrs	r3, r3, #3
 8004f2a:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	}
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004f34:	e03e      	b.n	8004fb4 <Vital_Msg_extr_from_CAN+0x994>
	{
		CAN_Hitachi_Vital_st.Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004f36:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004f3a:	687a      	ldr	r2, [r7, #4]
 8004f3c:	441a      	add	r2, r3
 8004f3e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004f42:	2108      	movs	r1, #8
 8004f44:	4618      	mov	r0, r3
 8004f46:	f7fb fb65 	bl	8000614 <ExtractBits>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f50:	b2d2      	uxtb	r2, r2
 8004f52:	33c0      	adds	r3, #192	; 0xc0
 8004f54:	443b      	add	r3, r7
 8004f56:	f803 2c83 	strb.w	r2, [r3, #-131]
		printf("[%02u]:0x%02X ", Traverser,CAN_Hitachi_Vital_st.Outputs[Traverser]);
 8004f5a:	f8b7 10be 	ldrh.w	r1, [r7, #190]	; 0xbe
 8004f5e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004f62:	33c0      	adds	r3, #192	; 0xc0
 8004f64:	443b      	add	r3, r7
 8004f66:	f813 3c83 	ldrb.w	r3, [r3, #-131]
 8004f6a:	461a      	mov	r2, r3
 8004f6c:	4819      	ldr	r0, [pc, #100]	; (8004fd4 <Vital_Msg_extr_from_CAN+0x9b4>)
 8004f6e:	f01d f99d 	bl	80222ac <iprintf>
		BITSTUFFINC(8);
 8004f72:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8004f76:	3308      	adds	r3, #8
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	da00      	bge.n	8004f7e <Vital_Msg_extr_from_CAN+0x95e>
 8004f7c:	3307      	adds	r3, #7
 8004f7e:	10db      	asrs	r3, r3, #3
 8004f80:	b29a      	uxth	r2, r3
 8004f82:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004f86:	4413      	add	r3, r2
 8004f88:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8004f8c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004f90:	3308      	adds	r3, #8
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	b21b      	sxth	r3, r3
 8004f96:	425a      	negs	r2, r3
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	f002 0207 	and.w	r2, r2, #7
 8004fa0:	bf58      	it	pl
 8004fa2:	4253      	negpl	r3, r2
 8004fa4:	b21b      	sxth	r3, r3
 8004fa6:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	for (Traverser = 0; Traverser < noofIP; ++Traverser)
 8004faa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fae:	3301      	adds	r3, #1
 8004fb0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004fb4:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	d3b9      	bcc.n	8004f36 <Vital_Msg_extr_from_CAN+0x916>
	}
	printf("\n");
 8004fc2:	200a      	movs	r0, #10
 8004fc4:	f01d f98a 	bl	80222dc <putchar>

	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 8004fce:	e036      	b.n	800503e <Vital_Msg_extr_from_CAN+0xa1e>
 8004fd0:	080242a4 	.word	0x080242a4
 8004fd4:	080242ac 	.word	0x080242ac
	{
		CAN_Hitachi_Vital_st.Num_Outputs[Traverser] = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8004fd8:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	441a      	add	r2, r3
 8004fe0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8004fe4:	2108      	movs	r1, #8
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fb fb14 	bl	8000614 <ExtractBits>
 8004fec:	4602      	mov	r2, r0
 8004fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004ff2:	b2d2      	uxtb	r2, r2
 8004ff4:	33c0      	adds	r3, #192	; 0xc0
 8004ff6:	443b      	add	r3, r7
 8004ff8:	f803 2c73 	strb.w	r2, [r3, #-115]
		//printf("Num op Values      :0x%02X\n", CAN_Hitachi_Vital_st.Num_Outputs[Traverser]);
		BITSTUFFINC(8);
 8004ffc:	f9b7 30b6 	ldrsh.w	r3, [r7, #182]	; 0xb6
 8005000:	3308      	adds	r3, #8
 8005002:	2b00      	cmp	r3, #0
 8005004:	da00      	bge.n	8005008 <Vital_Msg_extr_from_CAN+0x9e8>
 8005006:	3307      	adds	r3, #7
 8005008:	10db      	asrs	r3, r3, #3
 800500a:	b29a      	uxth	r2, r3
 800500c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8005010:	4413      	add	r3, r2
 8005012:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
 8005016:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800501a:	3308      	adds	r3, #8
 800501c:	b29b      	uxth	r3, r3
 800501e:	b21b      	sxth	r3, r3
 8005020:	425a      	negs	r2, r3
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	f002 0207 	and.w	r2, r2, #7
 800502a:	bf58      	it	pl
 800502c:	4253      	negpl	r3, r2
 800502e:	b21b      	sxth	r3, r3
 8005030:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
	for (Traverser = 0; Traverser <CAN_Hitachi_Vital_st.Size_Num_val; ++Traverser)
 8005034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005038:	3301      	adds	r3, #1
 800503a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
 800503e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8005042:	b29b      	uxth	r3, r3
 8005044:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005048:	429a      	cmp	r2, r3
 800504a:	d3c5      	bcc.n	8004fd8 <Vital_Msg_extr_from_CAN+0x9b8>
	}

	/* COPYING RELAYS INFO 2 Temporary Buffer */
	memset(&CAN_Relay_st.RelayIPS_Buff,0,sizeof(CAN_Relay_st.RelayIPS_Buff));
 800504c:	f107 030c 	add.w	r3, r7, #12
 8005050:	3301      	adds	r3, #1
 8005052:	2210      	movs	r2, #16
 8005054:	2100      	movs	r1, #0
 8005056:	4618      	mov	r0, r3
 8005058:	f01d f840 	bl	80220dc <memset>
	memcpy(CAN_Relay_st.RelayIPS_Buff,CAN_Hitachi_Vital_st.Outputs,noofIP);
 800505c:	f897 20bd 	ldrb.w	r2, [r7, #189]	; 0xbd
 8005060:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005064:	1d59      	adds	r1, r3, #5
 8005066:	f107 030c 	add.w	r3, r7, #12
 800506a:	3301      	adds	r3, #1
 800506c:	4618      	mov	r0, r3
 800506e:	f01d f80d 	bl	802208c <memcpy>
	CAN_Relay_st.RelayIPS_CRC = GetCRC16(0,CAN_Relay_st.RelayIPS_Buff,noofIP);
 8005072:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8005076:	b21a      	sxth	r2, r3
 8005078:	f107 030c 	add.w	r3, r7, #12
 800507c:	3301      	adds	r3, #1
 800507e:	4619      	mov	r1, r3
 8005080:	2000      	movs	r0, #0
 8005082:	f00d fc77 	bl	8012974 <GetCRC16>
 8005086:	4603      	mov	r3, r0
 8005088:	83fb      	strh	r3, [r7, #30]
	CAN_Relay_st.No_ofIps = noofIP;
 800508a:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 800508e:	777b      	strb	r3, [r7, #29]
	CAN_Relay_st.Peer_Index = Source_Index;
 8005090:	78bb      	ldrb	r3, [r7, #2]
 8005092:	733b      	strb	r3, [r7, #12]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if ( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && (LinkEstablishFlag == SET) && (CAN_Relay_st.RelayIPS_CRC != Main_Relays_st[Source_Index].RelayIPS_CRC) )
 8005094:	78bb      	ldrb	r3, [r7, #2]
 8005096:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <Vital_Msg_extr_from_CAN+0xbe8>)
 8005098:	4413      	add	r3, r2
 800509a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800509e:	2b01      	cmp	r3, #1
 80050a0:	d177      	bne.n	8005192 <Vital_Msg_extr_from_CAN+0xb72>
 80050a2:	f897 30bb 	ldrb.w	r3, [r7, #187]	; 0xbb
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d173      	bne.n	8005192 <Vital_Msg_extr_from_CAN+0xb72>
 80050aa:	8bf9      	ldrh	r1, [r7, #30]
 80050ac:	78ba      	ldrb	r2, [r7, #2]
 80050ae:	4857      	ldr	r0, [pc, #348]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 80050b0:	4613      	mov	r3, r2
 80050b2:	009b      	lsls	r3, r3, #2
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	4403      	add	r3, r0
 80050ba:	3312      	adds	r3, #18
 80050bc:	881b      	ldrh	r3, [r3, #0]
 80050be:	4299      	cmp	r1, r3
 80050c0:	d067      	beq.n	8005192 <Vital_Msg_extr_from_CAN+0xb72>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 80050c2:	78ba      	ldrb	r2, [r7, #2]
 80050c4:	4613      	mov	r3, r2
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	4413      	add	r3, r2
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	4a4f      	ldr	r2, [pc, #316]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 80050ce:	4413      	add	r3, r2
 80050d0:	3301      	adds	r3, #1
 80050d2:	2210      	movs	r2, #16
 80050d4:	2100      	movs	r1, #0
 80050d6:	4618      	mov	r0, r3
 80050d8:	f01d f800 	bl	80220dc <memset>
		memcpy(&Main_Relays_st[Source_Index],&CAN_Relay_st,sizeof(RELAYS_t));
 80050dc:	78ba      	ldrb	r2, [r7, #2]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4a49      	ldr	r2, [pc, #292]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 80050e8:	4413      	add	r3, r2
 80050ea:	f107 010c 	add.w	r1, r7, #12
 80050ee:	2214      	movs	r2, #20
 80050f0:	4618      	mov	r0, r3
 80050f2:	f01c ffcb 	bl	802208c <memcpy>
		Last_Vital_Received_Clk[Source_Index] = Ticks;
 80050f6:	78bb      	ldrb	r3, [r7, #2]
 80050f8:	4945      	ldr	r1, [pc, #276]	; (8005210 <Vital_Msg_extr_from_CAN+0xbf0>)
 80050fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80050fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005102:	78bb      	ldrb	r3, [r7, #2]
 8005104:	4a43      	ldr	r2, [pc, #268]	; (8005214 <Vital_Msg_extr_from_CAN+0xbf4>)
 8005106:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800510a:	78ba      	ldrb	r2, [r7, #2]
 800510c:	483f      	ldr	r0, [pc, #252]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 800510e:	4613      	mov	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	4413      	add	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4403      	add	r3, r0
 8005118:	3312      	adds	r3, #18
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	4299      	cmp	r1, r3
 800511e:	d038      	beq.n	8005192 <Vital_Msg_extr_from_CAN+0xb72>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005120:	78ba      	ldrb	r2, [r7, #2]
 8005122:	78b9      	ldrb	r1, [r7, #2]
 8005124:	4839      	ldr	r0, [pc, #228]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 8005126:	4613      	mov	r3, r2
 8005128:	009b      	lsls	r3, r3, #2
 800512a:	4413      	add	r3, r2
 800512c:	009b      	lsls	r3, r3, #2
 800512e:	4403      	add	r3, r0
 8005130:	3312      	adds	r3, #18
 8005132:	881a      	ldrh	r2, [r3, #0]
 8005134:	4b37      	ldr	r3, [pc, #220]	; (8005214 <Vital_Msg_extr_from_CAN+0xbf4>)
 8005136:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 800513a:	2214      	movs	r2, #20
 800513c:	2100      	movs	r1, #0
 800513e:	4836      	ldr	r0, [pc, #216]	; (8005218 <Vital_Msg_extr_from_CAN+0xbf8>)
 8005140:	f01c ffcc 	bl	80220dc <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005144:	78ba      	ldrb	r2, [r7, #2]
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4a2f      	ldr	r2, [pc, #188]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 8005150:	4413      	add	r3, r2
 8005152:	2214      	movs	r2, #20
 8005154:	4619      	mov	r1, r3
 8005156:	4830      	ldr	r0, [pc, #192]	; (8005218 <Vital_Msg_extr_from_CAN+0xbf8>)
 8005158:	f01c ff98 	bl	802208c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800515c:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005160:	f00a f8c4 	bl	800f2ec <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == CLEAR)
 8005164:	78bb      	ldrb	r3, [r7, #2]
 8005166:	4a2d      	ldr	r2, [pc, #180]	; (800521c <Vital_Msg_extr_from_CAN+0xbfc>)
 8005168:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d110      	bne.n	8005192 <Vital_Msg_extr_from_CAN+0xb72>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005170:	78bb      	ldrb	r3, [r7, #2]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	4a2a      	ldr	r2, [pc, #168]	; (8005220 <Vital_Msg_extr_from_CAN+0xc00>)
 8005176:	4413      	add	r3, r2
 8005178:	1c98      	adds	r0, r3, #2
 800517a:	78ba      	ldrb	r2, [r7, #2]
 800517c:	4613      	mov	r3, r2
 800517e:	009b      	lsls	r3, r3, #2
 8005180:	4413      	add	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4a21      	ldr	r2, [pc, #132]	; (800520c <Vital_Msg_extr_from_CAN+0xbec>)
 8005186:	4413      	add	r3, r2
 8005188:	3301      	adds	r3, #1
 800518a:	2210      	movs	r2, #16
 800518c:	4619      	mov	r1, r3
 800518e:	f01c ff7d 	bl	802208c <memcpy>





	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005192:	78ba      	ldrb	r2, [r7, #2]
 8005194:	4923      	ldr	r1, [pc, #140]	; (8005224 <Vital_Msg_extr_from_CAN+0xc04>)
 8005196:	4613      	mov	r3, r2
 8005198:	005b      	lsls	r3, r3, #1
 800519a:	4413      	add	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	440b      	add	r3, r1
 80051a0:	78ba      	ldrb	r2, [r7, #2]
 80051a2:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 80051a4:	78ba      	ldrb	r2, [r7, #2]
 80051a6:	491f      	ldr	r1, [pc, #124]	; (8005224 <Vital_Msg_extr_from_CAN+0xc04>)
 80051a8:	4613      	mov	r3, r2
 80051aa:	005b      	lsls	r3, r3, #1
 80051ac:	4413      	add	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	440b      	add	r3, r1
 80051b2:	3301      	adds	r3, #1
 80051b4:	2201      	movs	r2, #1
 80051b6:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 80051b8:	2218      	movs	r2, #24
 80051ba:	2100      	movs	r1, #0
 80051bc:	481a      	ldr	r0, [pc, #104]	; (8005228 <Vital_Msg_extr_from_CAN+0xc08>)
 80051be:	f01c ff8d 	bl	80220dc <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 80051c2:	78ba      	ldrb	r2, [r7, #2]
 80051c4:	4613      	mov	r3, r2
 80051c6:	005b      	lsls	r3, r3, #1
 80051c8:	4413      	add	r3, r2
 80051ca:	00db      	lsls	r3, r3, #3
 80051cc:	4a15      	ldr	r2, [pc, #84]	; (8005224 <Vital_Msg_extr_from_CAN+0xc04>)
 80051ce:	4413      	add	r3, r2
 80051d0:	2218      	movs	r2, #24
 80051d2:	4619      	mov	r1, r3
 80051d4:	4814      	ldr	r0, [pc, #80]	; (8005228 <Vital_Msg_extr_from_CAN+0xc08>)
 80051d6:	f01c ff59 	bl	802208c <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 80051da:	f240 2002 	movw	r0, #514	; 0x202
 80051de:	f00a f885 	bl	800f2ec <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 80051e2:	78ba      	ldrb	r2, [r7, #2]
 80051e4:	490f      	ldr	r1, [pc, #60]	; (8005224 <Vital_Msg_extr_from_CAN+0xc04>)
 80051e6:	4613      	mov	r3, r2
 80051e8:	005b      	lsls	r3, r3, #1
 80051ea:	4413      	add	r3, r2
 80051ec:	00db      	lsls	r3, r3, #3
 80051ee:	440b      	add	r3, r1
 80051f0:	3301      	adds	r3, #1
 80051f2:	2200      	movs	r2, #0
 80051f4:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 80051f6:	78bb      	ldrb	r3, [r7, #2]
 80051f8:	490c      	ldr	r1, [pc, #48]	; (800522c <Vital_Msg_extr_from_CAN+0xc0c>)
 80051fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80051fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	UNUSED(CAN_HITACHI_time_Stamp_st);
}
 8005202:	37c0      	adds	r7, #192	; 0xc0
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	20000304 	.word	0x20000304
 800520c:	20001e80 	.word	0x20001e80
 8005210:	20000ed8 	.word	0x20000ed8
 8005214:	20000f00 	.word	0x20000f00
 8005218:	20002010 	.word	0x20002010
 800521c:	20000ec4 	.word	0x20000ec4
 8005220:	200010e4 	.word	0x200010e4
 8005224:	20001674 	.word	0x20001674
 8005228:	20001854 	.word	0x20001854
 800522c:	20000e44 	.word	0x20000e44

08005230 <Status_Msg_Extr>:


void Status_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8005230:	b590      	push	{r4, r7, lr}
 8005232:	b095      	sub	sp, #84	; 0x54
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	4608      	mov	r0, r1
 800523a:	4611      	mov	r1, r2
 800523c:	461a      	mov	r2, r3
 800523e:	4603      	mov	r3, r0
 8005240:	70fb      	strb	r3, [r7, #3]
 8005242:	460b      	mov	r3, r1
 8005244:	70bb      	strb	r3, [r7, #2]
 8005246:	4613      	mov	r3, r2
 8005248:	707b      	strb	r3, [r7, #1]
	uint8_t Temp_Buff[40] = {0,};
 800524a:	2300      	movs	r3, #0
 800524c:	60bb      	str	r3, [r7, #8]
 800524e:	f107 030c 	add.w	r3, r7, #12
 8005252:	2224      	movs	r2, #36	; 0x24
 8005254:	2100      	movs	r1, #0
 8005256:	4618      	mov	r0, r3
 8005258:	f01c ff40 	bl	80220dc <memset>
	uint8_t uc_index = 0;
 800525c:	2300      	movs	r3, #0
 800525e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint32_t Calc_CRC = 0;
 8005262:	2300      	movs	r3, #0
 8005264:	643b      	str	r3, [r7, #64]	; 0x40
	uint32_t Recv_CRC = 0;
 8005266:	2300      	movs	r3, #0
 8005268:	64bb      	str	r3, [r7, #72]	; 0x48
	uint8_t LinkEstablishFlag = CLEAR;
 800526a:	2300      	movs	r3, #0
 800526c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint32_t Ticks = HAL_GetTick();
 8005270:	f010 f812 	bl	8015298 <HAL_GetTick>
 8005274:	63f8      	str	r0, [r7, #60]	; 0x3c
	uint8_t Seq_Num_2_Detect_Roll_over = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b

	BITSTUFFINIT(0, 0);
 800527c:	2300      	movs	r3, #0
 800527e:	873b      	strh	r3, [r7, #56]	; 0x38
 8005280:	2300      	movs	r3, #0
 8005282:	86fb      	strh	r3, [r7, #54]	; 0x36

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8005284:	499a      	ldr	r1, [pc, #616]	; (80054f0 <Status_Msg_Extr+0x2c0>)
 8005286:	489b      	ldr	r0, [pc, #620]	; (80054f4 <Status_Msg_Extr+0x2c4>)
 8005288:	f7fa ffda 	bl	8000240 <strcmp>
 800528c:	4603      	mov	r3, r0
 800528e:	2b00      	cmp	r3, #0
 8005290:	f000 812c 	beq.w	80054ec <Status_Msg_Extr+0x2bc>
	}


#if ENABLE_FAULT_INJECTION

	if( ( (CHECKFLAG(0,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005294:	4b98      	ldr	r3, [pc, #608]	; (80054f8 <Status_Msg_Extr+0x2c8>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b00      	cmp	r3, #0
 800529e:	d02c      	beq.n	80052fa <Status_Msg_Extr+0xca>
 80052a0:	4b95      	ldr	r3, [pc, #596]	; (80054f8 <Status_Msg_Extr+0x2c8>)
 80052a2:	791b      	ldrb	r3, [r3, #4]
 80052a4:	78ba      	ldrb	r2, [r7, #2]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d127      	bne.n	80052fa <Status_Msg_Extr+0xca>
	{
		uint32_t Rand_Number = 0;
 80052aa:	2300      	movs	r3, #0
 80052ac:	633b      	str	r3, [r7, #48]	; 0x30
#ifdef STM_32
		Rand_Number = (HAL_RNG_GetRandomNumber(&hrng) % 0xffff);
 80052ae:	4893      	ldr	r0, [pc, #588]	; (80054fc <Status_Msg_Extr+0x2cc>)
 80052b0:	f014 fca4 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 80052b4:	4602      	mov	r2, r0
 80052b6:	4b92      	ldr	r3, [pc, #584]	; (8005500 <Status_Msg_Extr+0x2d0>)
 80052b8:	fba3 1302 	umull	r1, r3, r3, r2
 80052bc:	0bd9      	lsrs	r1, r3, #15
 80052be:	460b      	mov	r3, r1
 80052c0:	041b      	lsls	r3, r3, #16
 80052c2:	1a5b      	subs	r3, r3, r1
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	633b      	str	r3, [r7, #48]	; 0x30
#endif
		printf("Injected RX Vital CRC failure\n");
 80052c8:	488e      	ldr	r0, [pc, #568]	; (8005504 <Status_Msg_Extr+0x2d4>)
 80052ca:	f01d f88b 	bl	80223e4 <puts>
		printf("Actual RX Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052ce:	78bb      	ldrb	r3, [r7, #2]
 80052d0:	4a8d      	ldr	r2, [pc, #564]	; (8005508 <Status_Msg_Extr+0x2d8>)
 80052d2:	011b      	lsls	r3, r3, #4
 80052d4:	4413      	add	r3, r2
 80052d6:	3308      	adds	r3, #8
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4619      	mov	r1, r3
 80052dc:	488b      	ldr	r0, [pc, #556]	; (800550c <Status_Msg_Extr+0x2dc>)
 80052de:	f01c ffe5 	bl	80222ac <iprintf>
		printf("Injected RX Vital Init Value:0x%06lX\n",Rand_Number);
 80052e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052e4:	488a      	ldr	r0, [pc, #552]	; (8005510 <Status_Msg_Extr+0x2e0>)
 80052e6:	f01c ffe1 	bl	80222ac <iprintf>
		InsertBits(0, 24, &Temp_Buff[0],Rand_Number);
 80052ea:	f107 0208 	add.w	r2, r7, #8
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	2118      	movs	r1, #24
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7fb fa1a 	bl	800072c <InsertBits>
	{
 80052f8:	e00b      	b.n	8005312 <Status_Msg_Extr+0xe2>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 80052fa:	78bb      	ldrb	r3, [r7, #2]
 80052fc:	4a82      	ldr	r2, [pc, #520]	; (8005508 <Status_Msg_Extr+0x2d8>)
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	4413      	add	r3, r2
 8005302:	3308      	adds	r3, #8
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f107 0208 	add.w	r2, r7, #8
 800530a:	2118      	movs	r1, #24
 800530c:	2000      	movs	r0, #0
 800530e:	f7fb fa0d 	bl	800072c <InsertBits>
	}
#else
	InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
#endif
	//memcpy(&Temp_Buff[3],Buff,(Length-5));
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005312:	2300      	movs	r3, #0
 8005314:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005318:	e010      	b.n	800533c <Status_Msg_Extr+0x10c>
	{
		Temp_Buff[uc_index + 3] = Buff[uc_index];
 800531a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	441a      	add	r2, r3
 8005322:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005326:	3303      	adds	r3, #3
 8005328:	7812      	ldrb	r2, [r2, #0]
 800532a:	3350      	adds	r3, #80	; 0x50
 800532c:	443b      	add	r3, r7
 800532e:	f803 2c48 	strb.w	r2, [r3, #-72]
	for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005332:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005336:	3301      	adds	r3, #1
 8005338:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800533c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	3b05      	subs	r3, #5
 8005344:	429a      	cmp	r2, r3
 8005346:	dbe8      	blt.n	800531a <Status_Msg_Extr+0xea>
	}
	Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005348:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800534c:	b29b      	uxth	r3, r3
 800534e:	3303      	adds	r3, #3
 8005350:	b29a      	uxth	r2, r3
 8005352:	f107 0308 	add.w	r3, r7, #8
 8005356:	4611      	mov	r1, r2
 8005358:	4618      	mov	r0, r3
 800535a:	f00d fbc5 	bl	8012ae8 <CalculateDirectReverseCrc>
 800535e:	6438      	str	r0, [r7, #64]	; 0x40
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length-5]);
 8005360:	78fb      	ldrb	r3, [r7, #3]
 8005362:	3b05      	subs	r3, #5
 8005364:	687a      	ldr	r2, [r7, #4]
 8005366:	441a      	add	r2, r3
 8005368:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800536a:	2120      	movs	r1, #32
 800536c:	4618      	mov	r0, r3
 800536e:	f7fb f951 	bl	8000614 <ExtractBits>
 8005372:	64b8      	str	r0, [r7, #72]	; 0x48
	if(Calc_CRC != Recv_CRC)
 8005374:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005376:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005378:	429a      	cmp	r2, r3
 800537a:	f000 80df 	beq.w	800553c <Status_Msg_Extr+0x30c>
	{
		Seq_Num_2_Detect_Roll_over = ExtractBits(0, 8, (unsigned char *)&Buff[5]);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	3305      	adds	r3, #5
 8005382:	461a      	mov	r2, r3
 8005384:	2108      	movs	r1, #8
 8005386:	2000      	movs	r0, #0
 8005388:	f7fb f944 	bl	8000614 <ExtractBits>
 800538c:	4603      	mov	r3, r0
 800538e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
		if( (Seq_Num_2_Detect_Roll_over ==0) || (Seq_Num_2_Detect_Roll_over == 1) )
 8005392:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005396:	2b00      	cmp	r3, #0
 8005398:	d004      	beq.n	80053a4 <Status_Msg_Extr+0x174>
 800539a:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800539e:	2b01      	cmp	r3, #1
 80053a0:	f040 8090 	bne.w	80054c4 <Status_Msg_Extr+0x294>
		{
			printf("Tx seq Rollover Found for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80053a4:	78bb      	ldrb	r3, [r7, #2]
 80053a6:	4a5b      	ldr	r2, [pc, #364]	; (8005514 <Status_Msg_Extr+0x2e4>)
 80053a8:	3366      	adds	r3, #102	; 0x66
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4413      	add	r3, r2
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	4619      	mov	r1, r3
 80053b2:	4859      	ldr	r0, [pc, #356]	; (8005518 <Status_Msg_Extr+0x2e8>)
 80053b4:	f01c ff7a 	bl	80222ac <iprintf>
			memset(Temp_Buff,0,sizeof(Temp_Buff));
 80053b8:	f107 0308 	add.w	r3, r7, #8
 80053bc:	2228      	movs	r2, #40	; 0x28
 80053be:	2100      	movs	r1, #0
 80053c0:	4618      	mov	r0, r3
 80053c2:	f01c fe8b 	bl	80220dc <memset>
			InsertBits(0, 24, &Temp_Buff[0], (Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value+1));
 80053c6:	78bb      	ldrb	r3, [r7, #2]
 80053c8:	4a4f      	ldr	r2, [pc, #316]	; (8005508 <Status_Msg_Extr+0x2d8>)
 80053ca:	011b      	lsls	r3, r3, #4
 80053cc:	4413      	add	r3, r2
 80053ce:	3308      	adds	r3, #8
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	f107 0208 	add.w	r2, r7, #8
 80053d8:	2118      	movs	r1, #24
 80053da:	2000      	movs	r0, #0
 80053dc:	f7fb f9a6 	bl	800072c <InsertBits>
			//memcpy(&Temp_Buff[3],Buff,(Length-5));
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 80053e0:	2300      	movs	r3, #0
 80053e2:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80053e6:	e010      	b.n	800540a <Status_Msg_Extr+0x1da>
			{
				Temp_Buff[uc_index + 3] = Buff[uc_index];
 80053e8:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053ec:	687a      	ldr	r2, [r7, #4]
 80053ee:	441a      	add	r2, r3
 80053f0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80053f4:	3303      	adds	r3, #3
 80053f6:	7812      	ldrb	r2, [r2, #0]
 80053f8:	3350      	adds	r3, #80	; 0x50
 80053fa:	443b      	add	r3, r7
 80053fc:	f803 2c48 	strb.w	r2, [r3, #-72]
			for (uc_index = 0; uc_index < (Length-5); uc_index++)
 8005400:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005404:	3301      	adds	r3, #1
 8005406:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800540a:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 800540e:	78fb      	ldrb	r3, [r7, #3]
 8005410:	3b05      	subs	r3, #5
 8005412:	429a      	cmp	r2, r3
 8005414:	dbe8      	blt.n	80053e8 <Status_Msg_Extr+0x1b8>
			}
			Calc_CRC = CalculateDirectReverseCrc(Temp_Buff, uc_index + 3);
 8005416:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800541a:	b29b      	uxth	r3, r3
 800541c:	3303      	adds	r3, #3
 800541e:	b29a      	uxth	r2, r3
 8005420:	f107 0308 	add.w	r3, r7, #8
 8005424:	4611      	mov	r1, r2
 8005426:	4618      	mov	r0, r3
 8005428:	f00d fb5e 	bl	8012ae8 <CalculateDirectReverseCrc>
 800542c:	6438      	str	r0, [r7, #64]	; 0x40
			if(Calc_CRC == Recv_CRC)
 800542e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	429a      	cmp	r2, r3
 8005434:	d132      	bne.n	800549c <Status_Msg_Extr+0x26c>
			{
				printf("CRC OK AFTER ROLL OVER\n");
 8005436:	4839      	ldr	r0, [pc, #228]	; (800551c <Status_Msg_Extr+0x2ec>)
 8005438:	f01c ffd4 	bl	80223e4 <puts>
				printf("Prev Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 800543c:	78bb      	ldrb	r3, [r7, #2]
 800543e:	4a32      	ldr	r2, [pc, #200]	; (8005508 <Status_Msg_Extr+0x2d8>)
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4413      	add	r3, r2
 8005444:	3308      	adds	r3, #8
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4619      	mov	r1, r3
 800544a:	4835      	ldr	r0, [pc, #212]	; (8005520 <Status_Msg_Extr+0x2f0>)
 800544c:	f01c ff2e 	bl	80222ac <iprintf>
				++Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 8005450:	78bb      	ldrb	r3, [r7, #2]
 8005452:	492d      	ldr	r1, [pc, #180]	; (8005508 <Status_Msg_Extr+0x2d8>)
 8005454:	011a      	lsls	r2, r3, #4
 8005456:	440a      	add	r2, r1
 8005458:	3208      	adds	r2, #8
 800545a:	6812      	ldr	r2, [r2, #0]
 800545c:	3201      	adds	r2, #1
 800545e:	492a      	ldr	r1, [pc, #168]	; (8005508 <Status_Msg_Extr+0x2d8>)
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	440b      	add	r3, r1
 8005464:	3308      	adds	r3, #8
 8005466:	601a      	str	r2, [r3, #0]
				printf("After Init Val:0x%06lX\n",Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value);
 8005468:	78bb      	ldrb	r3, [r7, #2]
 800546a:	4a27      	ldr	r2, [pc, #156]	; (8005508 <Status_Msg_Extr+0x2d8>)
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	4413      	add	r3, r2
 8005470:	3308      	adds	r3, #8
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	4619      	mov	r1, r3
 8005476:	482b      	ldr	r0, [pc, #172]	; (8005524 <Status_Msg_Extr+0x2f4>)
 8005478:	f01c ff18 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value;
 800547c:	78bb      	ldrb	r3, [r7, #2]
 800547e:	78ba      	ldrb	r2, [r7, #2]
 8005480:	4921      	ldr	r1, [pc, #132]	; (8005508 <Status_Msg_Extr+0x2d8>)
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	440b      	add	r3, r1
 8005486:	3308      	adds	r3, #8
 8005488:	6819      	ldr	r1, [r3, #0]
 800548a:	4827      	ldr	r0, [pc, #156]	; (8005528 <Status_Msg_Extr+0x2f8>)
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	4403      	add	r3, r0
 8005496:	3308      	adds	r3, #8
 8005498:	6019      	str	r1, [r3, #0]
			if(Calc_CRC == Recv_CRC)
 800549a:	e050      	b.n	800553e <Status_Msg_Extr+0x30e>
			}
			else
			{
				printf("Status CRC fail Rollover:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800549c:	78bb      	ldrb	r3, [r7, #2]
 800549e:	4a1d      	ldr	r2, [pc, #116]	; (8005514 <Status_Msg_Extr+0x2e4>)
 80054a0:	3366      	adds	r3, #102	; 0x66
 80054a2:	009b      	lsls	r3, r3, #2
 80054a4:	4413      	add	r3, r2
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4619      	mov	r1, r3
 80054aa:	4820      	ldr	r0, [pc, #128]	; (800552c <Status_Msg_Extr+0x2fc>)
 80054ac:	f01c fefe 	bl	80222ac <iprintf>
				printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054b0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054b2:	481f      	ldr	r0, [pc, #124]	; (8005530 <Status_Msg_Extr+0x300>)
 80054b4:	f01c fefa 	bl	80222ac <iprintf>
				printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054ba:	481e      	ldr	r0, [pc, #120]	; (8005534 <Status_Msg_Extr+0x304>)
 80054bc:	f01c fef6 	bl	80222ac <iprintf>
				return;
 80054c0:	f000 bc2c 	b.w	8005d1c <Status_Msg_Extr+0xaec>
			}
		}
		else
		{
			printf("Status  CRC fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80054c4:	78bb      	ldrb	r3, [r7, #2]
 80054c6:	4a13      	ldr	r2, [pc, #76]	; (8005514 <Status_Msg_Extr+0x2e4>)
 80054c8:	3366      	adds	r3, #102	; 0x66
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	4413      	add	r3, r2
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4619      	mov	r1, r3
 80054d2:	4819      	ldr	r0, [pc, #100]	; (8005538 <Status_Msg_Extr+0x308>)
 80054d4:	f01c feea 	bl	80222ac <iprintf>
			printf("R-CRC:0x%08lX\n",Recv_CRC);
 80054d8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80054da:	4815      	ldr	r0, [pc, #84]	; (8005530 <Status_Msg_Extr+0x300>)
 80054dc:	f01c fee6 	bl	80222ac <iprintf>
			printf("C-CRC:0x%08lX\n",Calc_CRC);
 80054e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80054e2:	4814      	ldr	r0, [pc, #80]	; (8005534 <Status_Msg_Extr+0x304>)
 80054e4:	f01c fee2 	bl	80222ac <iprintf>
			return;
 80054e8:	f000 bc18 	b.w	8005d1c <Status_Msg_Extr+0xaec>
		goto ROLLOVER_STATUS;
 80054ec:	bf00      	nop
 80054ee:	e026      	b.n	800553e <Status_Msg_Extr+0x30e>
 80054f0:	08023a58 	.word	0x08023a58
 80054f4:	20000305 	.word	0x20000305
 80054f8:	2000195c 	.word	0x2000195c
 80054fc:	20009c78 	.word	0x20009c78
 8005500:	80008001 	.word	0x80008001
 8005504:	080242bc 	.word	0x080242bc
 8005508:	200011c4 	.word	0x200011c4
 800550c:	080242dc 	.word	0x080242dc
 8005510:	08023fa4 	.word	0x08023fa4
 8005514:	20000304 	.word	0x20000304
 8005518:	08024300 	.word	0x08024300
 800551c:	08023fe8 	.word	0x08023fe8
 8005520:	08024324 	.word	0x08024324
 8005524:	0802433c 	.word	0x0802433c
 8005528:	20001674 	.word	0x20001674
 800552c:	08024354 	.word	0x08024354
 8005530:	08023c9c 	.word	0x08023c9c
 8005534:	08023cac 	.word	0x08023cac
 8005538:	08024374 	.word	0x08024374
	else
	{
		//printf("Received CRC       :0x%08lX\n",Recv_CRC);
	}

	ROLLOVER_STATUS:
 800553c:	bf00      	nop

	BITSTUFFINC(8);
 800553e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005542:	3308      	adds	r3, #8
 8005544:	2b00      	cmp	r3, #0
 8005546:	da00      	bge.n	800554a <Status_Msg_Extr+0x31a>
 8005548:	3307      	adds	r3, #7
 800554a:	10db      	asrs	r3, r3, #3
 800554c:	b29a      	uxth	r2, r3
 800554e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005550:	4413      	add	r3, r2
 8005552:	873b      	strh	r3, [r7, #56]	; 0x38
 8005554:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005556:	3308      	adds	r3, #8
 8005558:	b29b      	uxth	r3, r3
 800555a:	b21b      	sxth	r3, r3
 800555c:	425a      	negs	r2, r3
 800555e:	f003 0307 	and.w	r3, r3, #7
 8005562:	f002 0207 	and.w	r2, r2, #7
 8005566:	bf58      	it	pl
 8005568:	4253      	negpl	r3, r2
 800556a:	b21b      	sxth	r3, r3
 800556c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800556e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005570:	687a      	ldr	r2, [r7, #4]
 8005572:	441a      	add	r2, r3
 8005574:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005576:	2110      	movs	r1, #16
 8005578:	4618      	mov	r0, r3
 800557a:	f7fb f84b 	bl	8000614 <ExtractBits>
 800557e:	4603      	mov	r3, r0
 8005580:	78ba      	ldrb	r2, [r7, #2]
 8005582:	b298      	uxth	r0, r3
 8005584:	49ab      	ldr	r1, [pc, #684]	; (8005834 <Status_Msg_Extr+0x604>)
 8005586:	4613      	mov	r3, r2
 8005588:	005b      	lsls	r3, r3, #1
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	3306      	adds	r3, #6
 8005592:	4602      	mov	r2, r0
 8005594:	801a      	strh	r2, [r3, #0]
	//printf("Des_Addr           :%u\n", Hitachi_Status_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8005596:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800559a:	3310      	adds	r3, #16
 800559c:	2b00      	cmp	r3, #0
 800559e:	da00      	bge.n	80055a2 <Status_Msg_Extr+0x372>
 80055a0:	3307      	adds	r3, #7
 80055a2:	10db      	asrs	r3, r3, #3
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055a8:	4413      	add	r3, r2
 80055aa:	873b      	strh	r3, [r7, #56]	; 0x38
 80055ac:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ae:	3310      	adds	r3, #16
 80055b0:	b29b      	uxth	r3, r3
 80055b2:	b21b      	sxth	r3, r3
 80055b4:	425a      	negs	r2, r3
 80055b6:	f003 0307 	and.w	r3, r3, #7
 80055ba:	f002 0207 	and.w	r2, r2, #7
 80055be:	bf58      	it	pl
 80055c0:	4253      	negpl	r3, r2
 80055c2:	b21b      	sxth	r3, r3
 80055c4:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80055c6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80055c8:	687a      	ldr	r2, [r7, #4]
 80055ca:	441a      	add	r2, r3
 80055cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80055ce:	2110      	movs	r1, #16
 80055d0:	4618      	mov	r0, r3
 80055d2:	f7fb f81f 	bl	8000614 <ExtractBits>
 80055d6:	4603      	mov	r3, r0
 80055d8:	78ba      	ldrb	r2, [r7, #2]
 80055da:	b298      	uxth	r0, r3
 80055dc:	4995      	ldr	r1, [pc, #596]	; (8005834 <Status_Msg_Extr+0x604>)
 80055de:	4613      	mov	r3, r2
 80055e0:	005b      	lsls	r3, r3, #1
 80055e2:	4413      	add	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	440b      	add	r3, r1
 80055e8:	3304      	adds	r3, #4
 80055ea:	4602      	mov	r2, r0
 80055ec:	801a      	strh	r2, [r3, #0]
	//printf("Src_Addr           :%u\n", Hitachi_Status_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 80055ee:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80055f2:	3310      	adds	r3, #16
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	da00      	bge.n	80055fa <Status_Msg_Extr+0x3ca>
 80055f8:	3307      	adds	r3, #7
 80055fa:	10db      	asrs	r3, r3, #3
 80055fc:	b29a      	uxth	r2, r3
 80055fe:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005600:	4413      	add	r3, r2
 8005602:	873b      	strh	r3, [r7, #56]	; 0x38
 8005604:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005606:	3310      	adds	r3, #16
 8005608:	b29b      	uxth	r3, r3
 800560a:	b21b      	sxth	r3, r3
 800560c:	425a      	negs	r2, r3
 800560e:	f003 0307 	and.w	r3, r3, #7
 8005612:	f002 0207 	and.w	r2, r2, #7
 8005616:	bf58      	it	pl
 8005618:	4253      	negpl	r3, r2
 800561a:	b21b      	sxth	r3, r3
 800561c:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800561e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	441a      	add	r2, r3
 8005624:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005626:	2108      	movs	r1, #8
 8005628:	4618      	mov	r0, r3
 800562a:	f7fa fff3 	bl	8000614 <ExtractBits>
 800562e:	4602      	mov	r2, r0
 8005630:	78bb      	ldrb	r3, [r7, #2]
 8005632:	b2d1      	uxtb	r1, r2
 8005634:	4a80      	ldr	r2, [pc, #512]	; (8005838 <Status_Msg_Extr+0x608>)
 8005636:	011b      	lsls	r3, r3, #4
 8005638:	4413      	add	r3, r2
 800563a:	3302      	adds	r3, #2
 800563c:	460a      	mov	r2, r1
 800563e:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n", Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 8005640:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005644:	3308      	adds	r3, #8
 8005646:	2b00      	cmp	r3, #0
 8005648:	da00      	bge.n	800564c <Status_Msg_Extr+0x41c>
 800564a:	3307      	adds	r3, #7
 800564c:	10db      	asrs	r3, r3, #3
 800564e:	b29a      	uxth	r2, r3
 8005650:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005652:	4413      	add	r3, r2
 8005654:	873b      	strh	r3, [r7, #56]	; 0x38
 8005656:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005658:	3308      	adds	r3, #8
 800565a:	b29b      	uxth	r3, r3
 800565c:	b21b      	sxth	r3, r3
 800565e:	425a      	negs	r2, r3
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	f002 0207 	and.w	r2, r2, #7
 8005668:	bf58      	it	pl
 800566a:	4253      	negpl	r3, r2
 800566c:	b21b      	sxth	r3, r3
 800566e:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005670:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	441a      	add	r2, r3
 8005676:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005678:	2108      	movs	r1, #8
 800567a:	4618      	mov	r0, r3
 800567c:	f7fa ffca 	bl	8000614 <ExtractBits>
 8005680:	4602      	mov	r2, r0
 8005682:	78bb      	ldrb	r3, [r7, #2]
 8005684:	b2d1      	uxtb	r1, r2
 8005686:	4a6c      	ldr	r2, [pc, #432]	; (8005838 <Status_Msg_Extr+0x608>)
 8005688:	011b      	lsls	r3, r3, #4
 800568a:	4413      	add	r3, r2
 800568c:	3301      	adds	r3, #1
 800568e:	460a      	mov	r2, r1
 8005690:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n", Hitachi_prms_st[Source_Index].Tx_Seq);
	if(Hitachi_prms_st[Source_Index].Tx_Seq == 0)
 8005692:	78bb      	ldrb	r3, [r7, #2]
 8005694:	4a68      	ldr	r2, [pc, #416]	; (8005838 <Status_Msg_Extr+0x608>)
 8005696:	011b      	lsls	r3, r3, #4
 8005698:	4413      	add	r3, r2
 800569a:	3301      	adds	r3, #1
 800569c:	781b      	ldrb	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d138      	bne.n	8005714 <Status_Msg_Extr+0x4e4>
	{
		printf("\nRX_Seq Roll over Detected Incremented self Vital Init Value:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80056a2:	78bb      	ldrb	r3, [r7, #2]
 80056a4:	4a65      	ldr	r2, [pc, #404]	; (800583c <Status_Msg_Extr+0x60c>)
 80056a6:	3366      	adds	r3, #102	; 0x66
 80056a8:	009b      	lsls	r3, r3, #2
 80056aa:	4413      	add	r3, r2
 80056ac:	685b      	ldr	r3, [r3, #4]
 80056ae:	4619      	mov	r1, r3
 80056b0:	4863      	ldr	r0, [pc, #396]	; (8005840 <Status_Msg_Extr+0x610>)
 80056b2:	f01c fdfb 	bl	80222ac <iprintf>
		printf("Prev:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056b6:	78bb      	ldrb	r3, [r7, #2]
 80056b8:	4a5f      	ldr	r2, [pc, #380]	; (8005838 <Status_Msg_Extr+0x608>)
 80056ba:	011b      	lsls	r3, r3, #4
 80056bc:	4413      	add	r3, r2
 80056be:	330c      	adds	r3, #12
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	4619      	mov	r1, r3
 80056c4:	485f      	ldr	r0, [pc, #380]	; (8005844 <Status_Msg_Extr+0x614>)
 80056c6:	f01c fdf1 	bl	80222ac <iprintf>
		++Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056ca:	78bb      	ldrb	r3, [r7, #2]
 80056cc:	495a      	ldr	r1, [pc, #360]	; (8005838 <Status_Msg_Extr+0x608>)
 80056ce:	011a      	lsls	r2, r3, #4
 80056d0:	440a      	add	r2, r1
 80056d2:	320c      	adds	r2, #12
 80056d4:	6812      	ldr	r2, [r2, #0]
 80056d6:	3201      	adds	r2, #1
 80056d8:	4957      	ldr	r1, [pc, #348]	; (8005838 <Status_Msg_Extr+0x608>)
 80056da:	011b      	lsls	r3, r3, #4
 80056dc:	440b      	add	r3, r1
 80056de:	330c      	adds	r3, #12
 80056e0:	601a      	str	r2, [r3, #0]
		printf("Curr:%06lx",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80056e2:	78bb      	ldrb	r3, [r7, #2]
 80056e4:	4a54      	ldr	r2, [pc, #336]	; (8005838 <Status_Msg_Extr+0x608>)
 80056e6:	011b      	lsls	r3, r3, #4
 80056e8:	4413      	add	r3, r2
 80056ea:	330c      	adds	r3, #12
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	4619      	mov	r1, r3
 80056f0:	4855      	ldr	r0, [pc, #340]	; (8005848 <Status_Msg_Extr+0x618>)
 80056f2:	f01c fddb 	bl	80222ac <iprintf>
		Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value;
 80056f6:	78bb      	ldrb	r3, [r7, #2]
 80056f8:	78ba      	ldrb	r2, [r7, #2]
 80056fa:	494f      	ldr	r1, [pc, #316]	; (8005838 <Status_Msg_Extr+0x608>)
 80056fc:	011b      	lsls	r3, r3, #4
 80056fe:	440b      	add	r3, r1
 8005700:	330c      	adds	r3, #12
 8005702:	6819      	ldr	r1, [r3, #0]
 8005704:	4851      	ldr	r0, [pc, #324]	; (800584c <Status_Msg_Extr+0x61c>)
 8005706:	4613      	mov	r3, r2
 8005708:	005b      	lsls	r3, r3, #1
 800570a:	4413      	add	r3, r2
 800570c:	00db      	lsls	r3, r3, #3
 800570e:	4403      	add	r3, r0
 8005710:	330c      	adds	r3, #12
 8005712:	6019      	str	r1, [r3, #0]
	}
	BITSTUFFINC(8);
 8005714:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005718:	3308      	adds	r3, #8
 800571a:	2b00      	cmp	r3, #0
 800571c:	da00      	bge.n	8005720 <Status_Msg_Extr+0x4f0>
 800571e:	3307      	adds	r3, #7
 8005720:	10db      	asrs	r3, r3, #3
 8005722:	b29a      	uxth	r2, r3
 8005724:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005726:	4413      	add	r3, r2
 8005728:	873b      	strh	r3, [r7, #56]	; 0x38
 800572a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800572c:	3308      	adds	r3, #8
 800572e:	b29b      	uxth	r3, r3
 8005730:	b21b      	sxth	r3, r3
 8005732:	425a      	negs	r2, r3
 8005734:	f003 0307 	and.w	r3, r3, #7
 8005738:	f002 0207 	and.w	r2, r2, #7
 800573c:	bf58      	it	pl
 800573e:	4253      	negpl	r3, r2
 8005740:	b21b      	sxth	r3, r3
 8005742:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_Status_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005744:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005746:	687a      	ldr	r2, [r7, #4]
 8005748:	441a      	add	r2, r3
 800574a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800574c:	2108      	movs	r1, #8
 800574e:	4618      	mov	r0, r3
 8005750:	f7fa ff60 	bl	8000614 <ExtractBits>
 8005754:	4603      	mov	r3, r0
 8005756:	78ba      	ldrb	r2, [r7, #2]
 8005758:	b2d8      	uxtb	r0, r3
 800575a:	4936      	ldr	r1, [pc, #216]	; (8005834 <Status_Msg_Extr+0x604>)
 800575c:	4613      	mov	r3, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	4413      	add	r3, r2
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	440b      	add	r3, r1
 8005766:	3302      	adds	r3, #2
 8005768:	4602      	mov	r2, r0
 800576a:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Status_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 800576c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005770:	3308      	adds	r3, #8
 8005772:	2b00      	cmp	r3, #0
 8005774:	da00      	bge.n	8005778 <Status_Msg_Extr+0x548>
 8005776:	3307      	adds	r3, #7
 8005778:	10db      	asrs	r3, r3, #3
 800577a:	b29a      	uxth	r2, r3
 800577c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800577e:	4413      	add	r3, r2
 8005780:	873b      	strh	r3, [r7, #56]	; 0x38
 8005782:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005784:	3308      	adds	r3, #8
 8005786:	b29b      	uxth	r3, r3
 8005788:	b21b      	sxth	r3, r3
 800578a:	425a      	negs	r2, r3
 800578c:	f003 0307 	and.w	r3, r3, #7
 8005790:	f002 0207 	and.w	r2, r2, #7
 8005794:	bf58      	it	pl
 8005796:	4253      	negpl	r3, r2
 8005798:	b21b      	sxth	r3, r3
 800579a:	86fb      	strh	r3, [r7, #54]	; 0x36

	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800579c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	441a      	add	r2, r3
 80057a2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057a4:	2110      	movs	r1, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f7fa ff34 	bl	8000614 <ExtractBits>
 80057ac:	4602      	mov	r2, r0
 80057ae:	78bb      	ldrb	r3, [r7, #2]
 80057b0:	b291      	uxth	r1, r2
 80057b2:	4a21      	ldr	r2, [pc, #132]	; (8005838 <Status_Msg_Extr+0x608>)
 80057b4:	011b      	lsls	r3, r3, #4
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	460a      	mov	r2, r1
 80057bc:	801a      	strh	r2, [r3, #0]
	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80057be:	4924      	ldr	r1, [pc, #144]	; (8005850 <Status_Msg_Extr+0x620>)
 80057c0:	4824      	ldr	r0, [pc, #144]	; (8005854 <Status_Msg_Extr+0x624>)
 80057c2:	f7fa fd3d 	bl	8000240 <strcmp>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d10f      	bne.n	80057ec <Status_Msg_Extr+0x5bc>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80057cc:	78bb      	ldrb	r3, [r7, #2]
 80057ce:	4a1a      	ldr	r2, [pc, #104]	; (8005838 <Status_Msg_Extr+0x608>)
 80057d0:	011b      	lsls	r3, r3, #4
 80057d2:	4413      	add	r3, r2
 80057d4:	3304      	adds	r3, #4
 80057d6:	881a      	ldrh	r2, [r3, #0]
 80057d8:	78bb      	ldrb	r3, [r7, #2]
 80057da:	f042 0208 	orr.w	r2, r2, #8
 80057de:	b291      	uxth	r1, r2
 80057e0:	4a15      	ldr	r2, [pc, #84]	; (8005838 <Status_Msg_Extr+0x608>)
 80057e2:	011b      	lsls	r3, r3, #4
 80057e4:	4413      	add	r3, r2
 80057e6:	3304      	adds	r3, #4
 80057e8:	460a      	mov	r2, r1
 80057ea:	801a      	strh	r2, [r3, #0]
	}

	BITSTUFFINC(16);
 80057ec:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80057f0:	3310      	adds	r3, #16
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	da00      	bge.n	80057f8 <Status_Msg_Extr+0x5c8>
 80057f6:	3307      	adds	r3, #7
 80057f8:	10db      	asrs	r3, r3, #3
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80057fe:	4413      	add	r3, r2
 8005800:	873b      	strh	r3, [r7, #56]	; 0x38
 8005802:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005804:	3310      	adds	r3, #16
 8005806:	b29b      	uxth	r3, r3
 8005808:	b21b      	sxth	r3, r3
 800580a:	425a      	negs	r2, r3
 800580c:	f003 0307 	and.w	r3, r3, #7
 8005810:	f002 0207 	and.w	r2, r2, #7
 8005814:	bf58      	it	pl
 8005816:	4253      	negpl	r3, r2
 8005818:	b21b      	sxth	r3, r3
 800581a:	86fb      	strh	r3, [r7, #54]	; 0x36

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Status_st[Source_Index].Msg_Type);

	if ( SET == (CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag)) ) // Time-stamp Extraction
 800581c:	78bb      	ldrb	r3, [r7, #2]
 800581e:	4a06      	ldr	r2, [pc, #24]	; (8005838 <Status_Msg_Extr+0x608>)
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	4413      	add	r3, r2
 8005824:	3304      	adds	r3, #4
 8005826:	881b      	ldrh	r3, [r3, #0]
 8005828:	f003 0320 	and.w	r3, r3, #32
 800582c:	2b00      	cmp	r3, #0
 800582e:	f000 812f 	beq.w	8005a90 <Status_Msg_Extr+0x860>
 8005832:	e011      	b.n	8005858 <Status_Msg_Extr+0x628>
 8005834:	200015fc 	.word	0x200015fc
 8005838:	200011c4 	.word	0x200011c4
 800583c:	20000304 	.word	0x20000304
 8005840:	080240a0 	.word	0x080240a0
 8005844:	0802438c 	.word	0x0802438c
 8005848:	08024398 	.word	0x08024398
 800584c:	20001674 	.word	0x20001674
 8005850:	08023a58 	.word	0x08023a58
 8005854:	20000305 	.word	0x20000305
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005858:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	441a      	add	r2, r3
 800585e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005860:	2108      	movs	r1, #8
 8005862:	4618      	mov	r0, r3
 8005864:	f7fa fed6 	bl	8000614 <ExtractBits>
 8005868:	4603      	mov	r3, r0
 800586a:	78ba      	ldrb	r2, [r7, #2]
 800586c:	b2d8      	uxtb	r0, r3
 800586e:	4984      	ldr	r1, [pc, #528]	; (8005a80 <Status_Msg_Extr+0x850>)
 8005870:	4613      	mov	r3, r2
 8005872:	005b      	lsls	r3, r3, #1
 8005874:	4413      	add	r3, r2
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	440b      	add	r3, r1
 800587a:	3305      	adds	r3, #5
 800587c:	4602      	mov	r2, r0
 800587e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005880:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005884:	3308      	adds	r3, #8
 8005886:	2b00      	cmp	r3, #0
 8005888:	da00      	bge.n	800588c <Status_Msg_Extr+0x65c>
 800588a:	3307      	adds	r3, #7
 800588c:	10db      	asrs	r3, r3, #3
 800588e:	b29a      	uxth	r2, r3
 8005890:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005892:	4413      	add	r3, r2
 8005894:	873b      	strh	r3, [r7, #56]	; 0x38
 8005896:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005898:	3308      	adds	r3, #8
 800589a:	b29b      	uxth	r3, r3
 800589c:	b21b      	sxth	r3, r3
 800589e:	425a      	negs	r2, r3
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	f002 0207 	and.w	r2, r2, #7
 80058a8:	bf58      	it	pl
 80058aa:	4253      	negpl	r3, r2
 80058ac:	b21b      	sxth	r3, r3
 80058ae:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80058b0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	441a      	add	r2, r3
 80058b6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058b8:	2108      	movs	r1, #8
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fa feaa 	bl	8000614 <ExtractBits>
 80058c0:	4603      	mov	r3, r0
 80058c2:	78ba      	ldrb	r2, [r7, #2]
 80058c4:	b2d8      	uxtb	r0, r3
 80058c6:	496e      	ldr	r1, [pc, #440]	; (8005a80 <Status_Msg_Extr+0x850>)
 80058c8:	4613      	mov	r3, r2
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	4413      	add	r3, r2
 80058ce:	005b      	lsls	r3, r3, #1
 80058d0:	440b      	add	r3, r1
 80058d2:	3304      	adds	r3, #4
 80058d4:	4602      	mov	r2, r0
 80058d6:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80058d8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80058dc:	3308      	adds	r3, #8
 80058de:	2b00      	cmp	r3, #0
 80058e0:	da00      	bge.n	80058e4 <Status_Msg_Extr+0x6b4>
 80058e2:	3307      	adds	r3, #7
 80058e4:	10db      	asrs	r3, r3, #3
 80058e6:	b29a      	uxth	r2, r3
 80058e8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80058ea:	4413      	add	r3, r2
 80058ec:	873b      	strh	r3, [r7, #56]	; 0x38
 80058ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80058f0:	3308      	adds	r3, #8
 80058f2:	b29b      	uxth	r3, r3
 80058f4:	b21b      	sxth	r3, r3
 80058f6:	425a      	negs	r2, r3
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	f002 0207 	and.w	r2, r2, #7
 8005900:	bf58      	it	pl
 8005902:	4253      	negpl	r3, r2
 8005904:	b21b      	sxth	r3, r3
 8005906:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005908:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	441a      	add	r2, r3
 800590e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005910:	2108      	movs	r1, #8
 8005912:	4618      	mov	r0, r3
 8005914:	f7fa fe7e 	bl	8000614 <ExtractBits>
 8005918:	4603      	mov	r3, r0
 800591a:	78ba      	ldrb	r2, [r7, #2]
 800591c:	b2d8      	uxtb	r0, r3
 800591e:	4958      	ldr	r1, [pc, #352]	; (8005a80 <Status_Msg_Extr+0x850>)
 8005920:	4613      	mov	r3, r2
 8005922:	005b      	lsls	r3, r3, #1
 8005924:	4413      	add	r3, r2
 8005926:	005b      	lsls	r3, r3, #1
 8005928:	440b      	add	r3, r1
 800592a:	3303      	adds	r3, #3
 800592c:	4602      	mov	r2, r0
 800592e:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005930:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005934:	3308      	adds	r3, #8
 8005936:	2b00      	cmp	r3, #0
 8005938:	da00      	bge.n	800593c <Status_Msg_Extr+0x70c>
 800593a:	3307      	adds	r3, #7
 800593c:	10db      	asrs	r3, r3, #3
 800593e:	b29a      	uxth	r2, r3
 8005940:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005942:	4413      	add	r3, r2
 8005944:	873b      	strh	r3, [r7, #56]	; 0x38
 8005946:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005948:	3308      	adds	r3, #8
 800594a:	b29b      	uxth	r3, r3
 800594c:	b21b      	sxth	r3, r3
 800594e:	425a      	negs	r2, r3
 8005950:	f003 0307 	and.w	r3, r3, #7
 8005954:	f002 0207 	and.w	r2, r2, #7
 8005958:	bf58      	it	pl
 800595a:	4253      	negpl	r3, r2
 800595c:	b21b      	sxth	r3, r3
 800595e:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005960:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	441a      	add	r2, r3
 8005966:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005968:	2108      	movs	r1, #8
 800596a:	4618      	mov	r0, r3
 800596c:	f7fa fe52 	bl	8000614 <ExtractBits>
 8005970:	4603      	mov	r3, r0
 8005972:	78ba      	ldrb	r2, [r7, #2]
 8005974:	b2d8      	uxtb	r0, r3
 8005976:	4942      	ldr	r1, [pc, #264]	; (8005a80 <Status_Msg_Extr+0x850>)
 8005978:	4613      	mov	r3, r2
 800597a:	005b      	lsls	r3, r3, #1
 800597c:	4413      	add	r3, r2
 800597e:	005b      	lsls	r3, r3, #1
 8005980:	440b      	add	r3, r1
 8005982:	4602      	mov	r2, r0
 8005984:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005986:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800598a:	3308      	adds	r3, #8
 800598c:	2b00      	cmp	r3, #0
 800598e:	da00      	bge.n	8005992 <Status_Msg_Extr+0x762>
 8005990:	3307      	adds	r3, #7
 8005992:	10db      	asrs	r3, r3, #3
 8005994:	b29a      	uxth	r2, r3
 8005996:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005998:	4413      	add	r3, r2
 800599a:	873b      	strh	r3, [r7, #56]	; 0x38
 800599c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800599e:	3308      	adds	r3, #8
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	b21b      	sxth	r3, r3
 80059a4:	425a      	negs	r2, r3
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	f002 0207 	and.w	r2, r2, #7
 80059ae:	bf58      	it	pl
 80059b0:	4253      	negpl	r3, r2
 80059b2:	b21b      	sxth	r3, r3
 80059b4:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80059b6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	441a      	add	r2, r3
 80059bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059be:	2108      	movs	r1, #8
 80059c0:	4618      	mov	r0, r3
 80059c2:	f7fa fe27 	bl	8000614 <ExtractBits>
 80059c6:	4603      	mov	r3, r0
 80059c8:	78ba      	ldrb	r2, [r7, #2]
 80059ca:	b2d8      	uxtb	r0, r3
 80059cc:	492c      	ldr	r1, [pc, #176]	; (8005a80 <Status_Msg_Extr+0x850>)
 80059ce:	4613      	mov	r3, r2
 80059d0:	005b      	lsls	r3, r3, #1
 80059d2:	4413      	add	r3, r2
 80059d4:	005b      	lsls	r3, r3, #1
 80059d6:	440b      	add	r3, r1
 80059d8:	3301      	adds	r3, #1
 80059da:	4602      	mov	r2, r0
 80059dc:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 80059de:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80059e2:	3308      	adds	r3, #8
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	da00      	bge.n	80059ea <Status_Msg_Extr+0x7ba>
 80059e8:	3307      	adds	r3, #7
 80059ea:	10db      	asrs	r3, r3, #3
 80059ec:	b29a      	uxth	r2, r3
 80059ee:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80059f0:	4413      	add	r3, r2
 80059f2:	873b      	strh	r3, [r7, #56]	; 0x38
 80059f4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80059f6:	3308      	adds	r3, #8
 80059f8:	b29b      	uxth	r3, r3
 80059fa:	b21b      	sxth	r3, r3
 80059fc:	425a      	negs	r2, r3
 80059fe:	f003 0307 	and.w	r3, r3, #7
 8005a02:	f002 0207 	and.w	r2, r2, #7
 8005a06:	bf58      	it	pl
 8005a08:	4253      	negpl	r3, r2
 8005a0a:	b21b      	sxth	r3, r3
 8005a0c:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8005a0e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a10:	687a      	ldr	r2, [r7, #4]
 8005a12:	441a      	add	r2, r3
 8005a14:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a16:	2108      	movs	r1, #8
 8005a18:	4618      	mov	r0, r3
 8005a1a:	f7fa fdfb 	bl	8000614 <ExtractBits>
 8005a1e:	4603      	mov	r3, r0
 8005a20:	78ba      	ldrb	r2, [r7, #2]
 8005a22:	b2d8      	uxtb	r0, r3
 8005a24:	4916      	ldr	r1, [pc, #88]	; (8005a80 <Status_Msg_Extr+0x850>)
 8005a26:	4613      	mov	r3, r2
 8005a28:	005b      	lsls	r3, r3, #1
 8005a2a:	4413      	add	r3, r2
 8005a2c:	005b      	lsls	r3, r3, #1
 8005a2e:	440b      	add	r3, r1
 8005a30:	3302      	adds	r3, #2
 8005a32:	4602      	mov	r2, r0
 8005a34:	701a      	strb	r2, [r3, #0]
		BITSTUFFINC(8);
 8005a36:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8005a3a:	3308      	adds	r3, #8
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	da00      	bge.n	8005a42 <Status_Msg_Extr+0x812>
 8005a40:	3307      	adds	r3, #7
 8005a42:	10db      	asrs	r3, r3, #3
 8005a44:	b29a      	uxth	r2, r3
 8005a46:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8005a48:	4413      	add	r3, r2
 8005a4a:	873b      	strh	r3, [r7, #56]	; 0x38
 8005a4c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8005a4e:	3308      	adds	r3, #8
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	b21b      	sxth	r3, r3
 8005a54:	425a      	negs	r2, r3
 8005a56:	f003 0307 	and.w	r3, r3, #7
 8005a5a:	f002 0207 	and.w	r2, r2, #7
 8005a5e:	bf58      	it	pl
 8005a60:	4253      	negpl	r3, r2
 8005a62:	b21b      	sxth	r3, r3
 8005a64:	86fb      	strh	r3, [r7, #54]	; 0x36
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);

		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8005a66:	78bb      	ldrb	r3, [r7, #2]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f002 feef 	bl	800884c <IS_MLK_EIPC_TIME_MATCHING>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d009      	beq.n	8005a88 <Status_Msg_Extr+0x858>
 8005a74:	78bb      	ldrb	r3, [r7, #2]
 8005a76:	4a03      	ldr	r2, [pc, #12]	; (8005a84 <Status_Msg_Extr+0x854>)
 8005a78:	2100      	movs	r1, #0
 8005a7a:	54d1      	strb	r1, [r2, r3]
 8005a7c:	e008      	b.n	8005a90 <Status_Msg_Extr+0x860>
 8005a7e:	bf00      	nop
 8005a80:	20001188 	.word	0x20001188
 8005a84:	200010d8 	.word	0x200010d8
 8005a88:	78bb      	ldrb	r3, [r7, #2]
 8005a8a:	4aa6      	ldr	r2, [pc, #664]	; (8005d24 <Status_Msg_Extr+0xaf4>)
 8005a8c:	2101      	movs	r1, #1
 8005a8e:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8005a90:	78bb      	ldrb	r3, [r7, #2]
 8005a92:	4aa5      	ldr	r2, [pc, #660]	; (8005d28 <Status_Msg_Extr+0xaf8>)
 8005a94:	011b      	lsls	r3, r3, #4
 8005a96:	4413      	add	r3, r2
 8005a98:	3304      	adds	r3, #4
 8005a9a:	881b      	ldrh	r3, [r3, #0]
 8005a9c:	f003 0308 	and.w	r3, r3, #8
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d002      	beq.n	8005aaa <Status_Msg_Extr+0x87a>
	{
		LinkEstablishFlag = SET;
 8005aa4:	2301      	movs	r3, #1
 8005aa6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}


	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index,Des_Index);
 8005aaa:	787a      	ldrb	r2, [r7, #1]
 8005aac:	78bb      	ldrb	r3, [r7, #2]
 8005aae:	4611      	mov	r1, r2
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	f000 f959 	bl	8005d68 <Send_Status_Message>
	/* Preparing and Sending Reply */

	/* Updating the Clocks */
	Last_Recevied_Clock[Source_Index] = Ticks;
 8005ab6:	78bb      	ldrb	r3, [r7, #2]
 8005ab8:	499c      	ldr	r1, [pc, #624]	; (8005d2c <Status_Msg_Extr+0xafc>)
 8005aba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 8005ac0:	78bb      	ldrb	r3, [r7, #2]
 8005ac2:	499b      	ldr	r1, [pc, #620]	; (8005d30 <Status_Msg_Extr+0xb00>)
 8005ac4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//	Recv_Init_Msg_cnt[Source_Index] = 0;
	Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8005aca:	78ba      	ldrb	r2, [r7, #2]
 8005acc:	4999      	ldr	r1, [pc, #612]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005ace:	4613      	mov	r3, r2
 8005ad0:	005b      	lsls	r3, r3, #1
 8005ad2:	4413      	add	r3, r2
 8005ad4:	00db      	lsls	r3, r3, #3
 8005ad6:	440b      	add	r3, r1
 8005ad8:	3310      	adds	r3, #16
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	78bc      	ldrb	r4, [r7, #2]
 8005ade:	4618      	mov	r0, r3
 8005ae0:	f008 fe8e 	bl	800e800 <HAL_Elaps_Ticks>
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4993      	ldr	r1, [pc, #588]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005ae8:	4623      	mov	r3, r4
 8005aea:	005b      	lsls	r3, r3, #1
 8005aec:	4423      	add	r3, r4
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	440b      	add	r3, r1
 8005af2:	3310      	adds	r3, #16
 8005af4:	601a      	str	r2, [r3, #0]


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if( LinkEstablishFlag == SET )
 8005af6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d166      	bne.n	8005bcc <Status_Msg_Extr+0x99c>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005afe:	78ba      	ldrb	r2, [r7, #2]
 8005b00:	4613      	mov	r3, r2
 8005b02:	009b      	lsls	r3, r3, #2
 8005b04:	4413      	add	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4a8b      	ldr	r2, [pc, #556]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005b0a:	4413      	add	r3, r2
 8005b0c:	3301      	adds	r3, #1
 8005b0e:	2210      	movs	r2, #16
 8005b10:	2100      	movs	r1, #0
 8005b12:	4618      	mov	r0, r3
 8005b14:	f01c fae2 	bl	80220dc <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8005b18:	78ba      	ldrb	r2, [r7, #2]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a85      	ldr	r2, [pc, #532]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005b24:	1898      	adds	r0, r3, r2
 8005b26:	78ba      	ldrb	r2, [r7, #2]
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	009b      	lsls	r3, r3, #2
 8005b30:	4a82      	ldr	r2, [pc, #520]	; (8005d3c <Status_Msg_Extr+0xb0c>)
 8005b32:	4413      	add	r3, r2
 8005b34:	2214      	movs	r2, #20
 8005b36:	4619      	mov	r1, r3
 8005b38:	f01c faa8 	bl	802208c <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8005b3c:	78bb      	ldrb	r3, [r7, #2]
 8005b3e:	4a80      	ldr	r2, [pc, #512]	; (8005d40 <Status_Msg_Extr+0xb10>)
 8005b40:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8005b44:	78ba      	ldrb	r2, [r7, #2]
 8005b46:	487c      	ldr	r0, [pc, #496]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005b48:	4613      	mov	r3, r2
 8005b4a:	009b      	lsls	r3, r3, #2
 8005b4c:	4413      	add	r3, r2
 8005b4e:	009b      	lsls	r3, r3, #2
 8005b50:	4403      	add	r3, r0
 8005b52:	3312      	adds	r3, #18
 8005b54:	881b      	ldrh	r3, [r3, #0]
 8005b56:	4299      	cmp	r1, r3
 8005b58:	d038      	beq.n	8005bcc <Status_Msg_Extr+0x99c>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005b5a:	78ba      	ldrb	r2, [r7, #2]
 8005b5c:	78b9      	ldrb	r1, [r7, #2]
 8005b5e:	4876      	ldr	r0, [pc, #472]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005b60:	4613      	mov	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	4413      	add	r3, r2
 8005b66:	009b      	lsls	r3, r3, #2
 8005b68:	4403      	add	r3, r0
 8005b6a:	3312      	adds	r3, #18
 8005b6c:	881a      	ldrh	r2, [r3, #0]
 8005b6e:	4b74      	ldr	r3, [pc, #464]	; (8005d40 <Status_Msg_Extr+0xb10>)
 8005b70:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8005b74:	2214      	movs	r2, #20
 8005b76:	2100      	movs	r1, #0
 8005b78:	4872      	ldr	r0, [pc, #456]	; (8005d44 <Status_Msg_Extr+0xb14>)
 8005b7a:	f01c faaf 	bl	80220dc <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8005b7e:	78ba      	ldrb	r2, [r7, #2]
 8005b80:	4613      	mov	r3, r2
 8005b82:	009b      	lsls	r3, r3, #2
 8005b84:	4413      	add	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4a6b      	ldr	r2, [pc, #428]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005b8a:	4413      	add	r3, r2
 8005b8c:	2214      	movs	r2, #20
 8005b8e:	4619      	mov	r1, r3
 8005b90:	486c      	ldr	r0, [pc, #432]	; (8005d44 <Status_Msg_Extr+0xb14>)
 8005b92:	f01c fa7b 	bl	802208c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8005b96:	f44f 7002 	mov.w	r0, #520	; 0x208
 8005b9a:	f009 fba7 	bl	800f2ec <TransmitCanPkt>
#endif

			if(MisMatchFlag[Source_Index] == 0)
 8005b9e:	78bb      	ldrb	r3, [r7, #2]
 8005ba0:	4a69      	ldr	r2, [pc, #420]	; (8005d48 <Status_Msg_Extr+0xb18>)
 8005ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d110      	bne.n	8005bcc <Status_Msg_Extr+0x99c>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8005baa:	78bb      	ldrb	r3, [r7, #2]
 8005bac:	011b      	lsls	r3, r3, #4
 8005bae:	4a67      	ldr	r2, [pc, #412]	; (8005d4c <Status_Msg_Extr+0xb1c>)
 8005bb0:	4413      	add	r3, r2
 8005bb2:	1c98      	adds	r0, r3, #2
 8005bb4:	78ba      	ldrb	r2, [r7, #2]
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	009b      	lsls	r3, r3, #2
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4a5e      	ldr	r2, [pc, #376]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005bc0:	4413      	add	r3, r2
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	2210      	movs	r2, #16
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	f01c fa60 	bl	802208c <memcpy>
		}
	}


	/* Sending Information to Other Card */
	Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8005bcc:	78b9      	ldrb	r1, [r7, #2]
 8005bce:	78ba      	ldrb	r2, [r7, #2]
 8005bd0:	4859      	ldr	r0, [pc, #356]	; (8005d38 <Status_Msg_Extr+0xb08>)
 8005bd2:	460b      	mov	r3, r1
 8005bd4:	009b      	lsls	r3, r3, #2
 8005bd6:	440b      	add	r3, r1
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4403      	add	r3, r0
 8005bdc:	3312      	adds	r3, #18
 8005bde:	8818      	ldrh	r0, [r3, #0]
 8005be0:	4954      	ldr	r1, [pc, #336]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005be2:	4613      	mov	r3, r2
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	4413      	add	r3, r2
 8005be8:	00db      	lsls	r3, r3, #3
 8005bea:	440b      	add	r3, r1
 8005bec:	3306      	adds	r3, #6
 8005bee:	4602      	mov	r2, r0
 8005bf0:	801a      	strh	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8005bf2:	78ba      	ldrb	r2, [r7, #2]
 8005bf4:	494f      	ldr	r1, [pc, #316]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005bf6:	4613      	mov	r3, r2
 8005bf8:	005b      	lsls	r3, r3, #1
 8005bfa:	4413      	add	r3, r2
 8005bfc:	00db      	lsls	r3, r3, #3
 8005bfe:	440b      	add	r3, r1
 8005c00:	3314      	adds	r3, #20
 8005c02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c04:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = STATUSMSG;
 8005c06:	78ba      	ldrb	r2, [r7, #2]
 8005c08:	494a      	ldr	r1, [pc, #296]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005c0a:	4613      	mov	r3, r2
 8005c0c:	005b      	lsls	r3, r3, #1
 8005c0e:	4413      	add	r3, r2
 8005c10:	00db      	lsls	r3, r3, #3
 8005c12:	440b      	add	r3, r1
 8005c14:	3305      	adds	r3, #5
 8005c16:	2204      	movs	r2, #4
 8005c18:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8005c1a:	78ba      	ldrb	r2, [r7, #2]
 8005c1c:	4945      	ldr	r1, [pc, #276]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005c1e:	4613      	mov	r3, r2
 8005c20:	005b      	lsls	r3, r3, #1
 8005c22:	4413      	add	r3, r2
 8005c24:	00db      	lsls	r3, r3, #3
 8005c26:	440b      	add	r3, r1
 8005c28:	78ba      	ldrb	r2, [r7, #2]
 8005c2a:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8005c2c:	78ba      	ldrb	r2, [r7, #2]
 8005c2e:	4941      	ldr	r1, [pc, #260]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005c30:	4613      	mov	r3, r2
 8005c32:	005b      	lsls	r3, r3, #1
 8005c34:	4413      	add	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	440b      	add	r3, r1
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	2201      	movs	r2, #1
 8005c3e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8005c40:	78ba      	ldrb	r2, [r7, #2]
 8005c42:	493c      	ldr	r1, [pc, #240]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005c44:	4613      	mov	r3, r2
 8005c46:	005b      	lsls	r3, r3, #1
 8005c48:	4413      	add	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	440b      	add	r3, r1
 8005c4e:	3302      	adds	r3, #2
 8005c50:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8005c54:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8005c56:	2218      	movs	r2, #24
 8005c58:	2100      	movs	r1, #0
 8005c5a:	483d      	ldr	r0, [pc, #244]	; (8005d50 <Status_Msg_Extr+0xb20>)
 8005c5c:	f01c fa3e 	bl	80220dc <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8005c60:	78ba      	ldrb	r2, [r7, #2]
 8005c62:	4613      	mov	r3, r2
 8005c64:	005b      	lsls	r3, r3, #1
 8005c66:	4413      	add	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	4a32      	ldr	r2, [pc, #200]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005c6c:	4413      	add	r3, r2
 8005c6e:	2218      	movs	r2, #24
 8005c70:	4619      	mov	r1, r3
 8005c72:	4837      	ldr	r0, [pc, #220]	; (8005d50 <Status_Msg_Extr+0xb20>)
 8005c74:	f01c fa0a 	bl	802208c <memcpy>

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8005c78:	f240 2002 	movw	r0, #514	; 0x202
 8005c7c:	f009 fb36 	bl	800f2ec <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8005c80:	78ba      	ldrb	r2, [r7, #2]
 8005c82:	492c      	ldr	r1, [pc, #176]	; (8005d34 <Status_Msg_Extr+0xb04>)
 8005c84:	4613      	mov	r3, r2
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	4413      	add	r3, r2
 8005c8a:	00db      	lsls	r3, r3, #3
 8005c8c:	440b      	add	r3, r1
 8005c8e:	3301      	adds	r3, #1
 8005c90:	2200      	movs	r2, #0
 8005c92:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8005c94:	78bb      	ldrb	r3, [r7, #2]
 8005c96:	492f      	ldr	r1, [pc, #188]	; (8005d54 <Status_Msg_Extr+0xb24>)
 8005c98:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other Card */



	/* Checking the Link Status */
	if(LinkEstablishFlag == SET)
 8005c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8005ca2:	2b01      	cmp	r3, #1
 8005ca4:	d11d      	bne.n	8005ce2 <Status_Msg_Extr+0xab2>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8005ca6:	78bb      	ldrb	r3, [r7, #2]
 8005ca8:	492b      	ldr	r1, [pc, #172]	; (8005d58 <Status_Msg_Extr+0xb28>)
 8005caa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8005cb0:	78ba      	ldrb	r2, [r7, #2]
 8005cb2:	492a      	ldr	r1, [pc, #168]	; (8005d5c <Status_Msg_Extr+0xb2c>)
 8005cb4:	4613      	mov	r3, r2
 8005cb6:	005b      	lsls	r3, r3, #1
 8005cb8:	4413      	add	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	440b      	add	r3, r1
 8005cbe:	3304      	adds	r3, #4
 8005cc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cc2:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8005cc4:	78ba      	ldrb	r2, [r7, #2]
 8005cc6:	4925      	ldr	r1, [pc, #148]	; (8005d5c <Status_Msg_Extr+0xb2c>)
 8005cc8:	4613      	mov	r3, r2
 8005cca:	005b      	lsls	r3, r3, #1
 8005ccc:	4413      	add	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	440b      	add	r3, r1
 8005cd2:	3301      	adds	r3, #1
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	701a      	strb	r2, [r3, #0]
		Link_Flag[Source_Index] = SET;
 8005cd8:	78bb      	ldrb	r3, [r7, #2]
 8005cda:	4a21      	ldr	r2, [pc, #132]	; (8005d60 <Status_Msg_Extr+0xb30>)
 8005cdc:	2101      	movs	r1, #1
 8005cde:	54d1      	strb	r1, [r2, r3]
 8005ce0:	e017      	b.n	8005d12 <Status_Msg_Extr+0xae2>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8005ce2:	78bb      	ldrb	r3, [r7, #2]
 8005ce4:	4a1e      	ldr	r2, [pc, #120]	; (8005d60 <Status_Msg_Extr+0xb30>)
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8005cea:	78ba      	ldrb	r2, [r7, #2]
 8005cec:	491b      	ldr	r1, [pc, #108]	; (8005d5c <Status_Msg_Extr+0xb2c>)
 8005cee:	4613      	mov	r3, r2
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	4413      	add	r3, r2
 8005cf4:	009b      	lsls	r3, r3, #2
 8005cf6:	440b      	add	r3, r1
 8005cf8:	3308      	adds	r3, #8
 8005cfa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cfc:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8005cfe:	78ba      	ldrb	r2, [r7, #2]
 8005d00:	4916      	ldr	r1, [pc, #88]	; (8005d5c <Status_Msg_Extr+0xb2c>)
 8005d02:	4613      	mov	r3, r2
 8005d04:	005b      	lsls	r3, r3, #1
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3301      	adds	r3, #1
 8005d0e:	2200      	movs	r2, #0
 8005d10:	701a      	strb	r2, [r3, #0]
	}
	/* Checking the Link Status */
	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8005d12:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005d16:	4813      	ldr	r0, [pc, #76]	; (8005d64 <Status_Msg_Extr+0xb34>)
 8005d18:	f011 ffa7 	bl	8017c6a <HAL_GPIO_TogglePin>

}
 8005d1c:	3754      	adds	r7, #84	; 0x54
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd90      	pop	{r4, r7, pc}
 8005d22:	bf00      	nop
 8005d24:	200010d8 	.word	0x200010d8
 8005d28:	200011c4 	.word	0x200011c4
 8005d2c:	20000fa4 	.word	0x20000fa4
 8005d30:	20000fcc 	.word	0x20000fcc
 8005d34:	20001674 	.word	0x20001674
 8005d38:	20001e80 	.word	0x20001e80
 8005d3c:	20001db8 	.word	0x20001db8
 8005d40:	20000f00 	.word	0x20000f00
 8005d44:	20002010 	.word	0x20002010
 8005d48:	20000ec4 	.word	0x20000ec4
 8005d4c:	200010e4 	.word	0x200010e4
 8005d50:	20001854 	.word	0x20001854
 8005d54:	20000e44 	.word	0x20000e44
 8005d58:	20000f14 	.word	0x20000f14
 8005d5c:	20001cc8 	.word	0x20001cc8
 8005d60:	20000f64 	.word	0x20000f64
 8005d64:	40021c00 	.word	0x40021c00

08005d68 <Send_Status_Message>:

void Send_Status_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8005d68:	b590      	push	{r4, r7, lr}
 8005d6a:	b0a5      	sub	sp, #148	; 0x94
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	4603      	mov	r3, r0
 8005d70:	460a      	mov	r2, r1
 8005d72:	71fb      	strb	r3, [r7, #7]
 8005d74:	4613      	mov	r3, r2
 8005d76:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8005d78:	2300      	movs	r3, #0
 8005d7a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8005d80:	2238      	movs	r2, #56	; 0x38
 8005d82:	2100      	movs	r1, #0
 8005d84:	4618      	mov	r0, r3
 8005d86:	f01c f9a9 	bl	80220dc <memset>
	uint8_t Temp_Buff[60] = {0,};
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	60fb      	str	r3, [r7, #12]
 8005d8e:	f107 0310 	add.w	r3, r7, #16
 8005d92:	2238      	movs	r2, #56	; 0x38
 8005d94:	2100      	movs	r1, #0
 8005d96:	4618      	mov	r0, r3
 8005d98:	f01c f9a0 	bl	80220dc <memset>
	uint8_t uc_index = 0;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

	BITSTUFFINIT(0,0);
 8005da2:	2300      	movs	r3, #0
 8005da4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005da8:	2300      	movs	r3, #0
 8005daa:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM);
 8005dae:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005db2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005db6:	441a      	add	r2, r3
 8005db8:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005dbc:	23f4      	movs	r3, #244	; 0xf4
 8005dbe:	2108      	movs	r1, #8
 8005dc0:	f7fa fcb4 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8005dc4:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005dc8:	3308      	adds	r3, #8
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	da00      	bge.n	8005dd0 <Send_Status_Message+0x68>
 8005dce:	3307      	adds	r3, #7
 8005dd0:	10db      	asrs	r3, r3, #3
 8005dd2:	b29a      	uxth	r2, r3
 8005dd4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005dd8:	4413      	add	r3, r2
 8005dda:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005dde:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005de2:	3308      	adds	r3, #8
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	b21b      	sxth	r3, r3
 8005de8:	425a      	negs	r2, r3
 8005dea:	f003 0307 	and.w	r3, r3, #7
 8005dee:	f002 0207 	and.w	r2, r2, #7
 8005df2:	bf58      	it	pl
 8005df4:	4253      	negpl	r3, r2
 8005df6:	b21b      	sxth	r3, r3
 8005df8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8005dfc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e00:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e04:	441a      	add	r2, r3
 8005e06:	79fb      	ldrb	r3, [r7, #7]
 8005e08:	49bc      	ldr	r1, [pc, #752]	; (80060fc <Send_Status_Message+0x394>)
 8005e0a:	3366      	adds	r3, #102	; 0x66
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e16:	2110      	movs	r1, #16
 8005e18:	f7fa fc88 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e1c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e20:	3310      	adds	r3, #16
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	da00      	bge.n	8005e28 <Send_Status_Message+0xc0>
 8005e26:	3307      	adds	r3, #7
 8005e28:	10db      	asrs	r3, r3, #3
 8005e2a:	b29a      	uxth	r2, r3
 8005e2c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e30:	4413      	add	r3, r2
 8005e32:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e36:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e3a:	3310      	adds	r3, #16
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	b21b      	sxth	r3, r3
 8005e40:	425a      	negs	r2, r3
 8005e42:	f003 0307 	and.w	r3, r3, #7
 8005e46:	f002 0207 	and.w	r2, r2, #7
 8005e4a:	bf58      	it	pl
 8005e4c:	4253      	negpl	r3, r2
 8005e4e:	b21b      	sxth	r3, r3
 8005e50:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]);
 8005e54:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e58:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005e5c:	441a      	add	r2, r3
 8005e5e:	79fb      	ldrb	r3, [r7, #7]
 8005e60:	49a6      	ldr	r1, [pc, #664]	; (80060fc <Send_Status_Message+0x394>)
 8005e62:	3370      	adds	r3, #112	; 0x70
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	440b      	add	r3, r1
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005e6e:	2110      	movs	r1, #16
 8005e70:	f7fa fc5c 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8005e74:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005e78:	3310      	adds	r3, #16
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	da00      	bge.n	8005e80 <Send_Status_Message+0x118>
 8005e7e:	3307      	adds	r3, #7
 8005e80:	10db      	asrs	r3, r3, #3
 8005e82:	b29a      	uxth	r2, r3
 8005e84:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005e88:	4413      	add	r3, r2
 8005e8a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005e8e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005e92:	3310      	adds	r3, #16
 8005e94:	b29b      	uxth	r3, r3
 8005e96:	b21b      	sxth	r3, r3
 8005e98:	425a      	negs	r2, r3
 8005e9a:	f003 0307 	and.w	r3, r3, #7
 8005e9e:	f002 0207 	and.w	r2, r2, #7
 8005ea2:	bf58      	it	pl
 8005ea4:	4253      	negpl	r3, r2
 8005ea6:	b21b      	sxth	r3, r3
 8005ea8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005eac:	4b94      	ldr	r3, [pc, #592]	; (8006100 <Send_Status_Message+0x398>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	089b      	lsrs	r3, r3, #2
 8005eb2:	f003 0301 	and.w	r3, r3, #1
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d035      	beq.n	8005f26 <Send_Status_Message+0x1be>
 8005eba:	4b91      	ldr	r3, [pc, #580]	; (8006100 <Send_Status_Message+0x398>)
 8005ebc:	791b      	ldrb	r3, [r3, #4]
 8005ebe:	79fa      	ldrb	r2, [r7, #7]
 8005ec0:	429a      	cmp	r2, r3
 8005ec2:	d130      	bne.n	8005f26 <Send_Status_Message+0x1be>
	{
		uint8_t Rand_number = 0;
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 200;
 8005eca:	488e      	ldr	r0, [pc, #568]	; (8006104 <Send_Status_Message+0x39c>)
 8005ecc:	f013 fe96 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	4b8d      	ldr	r3, [pc, #564]	; (8006108 <Send_Status_Message+0x3a0>)
 8005ed4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ed8:	099b      	lsrs	r3, r3, #6
 8005eda:	21c8      	movs	r1, #200	; 0xc8
 8005edc:	fb01 f303 	mul.w	r3, r1, r3
 8005ee0:	1ad3      	subs	r3, r2, r3
 8005ee2:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89
#endif
		printf("Injected TX Sequence value failure\n");
 8005ee6:	4889      	ldr	r0, [pc, #548]	; (800610c <Send_Status_Message+0x3a4>)
 8005ee8:	f01c fa7c 	bl	80223e4 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8005eec:	79fb      	ldrb	r3, [r7, #7]
 8005eee:	4a88      	ldr	r2, [pc, #544]	; (8006110 <Send_Status_Message+0x3a8>)
 8005ef0:	011b      	lsls	r3, r3, #4
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3301      	adds	r3, #1
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4886      	ldr	r0, [pc, #536]	; (8006114 <Send_Status_Message+0x3ac>)
 8005efc:	f01c f9d6 	bl	80222ac <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8005f00:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f04:	4619      	mov	r1, r3
 8005f06:	4884      	ldr	r0, [pc, #528]	; (8006118 <Send_Status_Message+0x3b0>)
 8005f08:	f01c f9d0 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte],Rand_number);
 8005f0c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f10:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f14:	441a      	add	r2, r3
 8005f16:	f897 3089 	ldrb.w	r3, [r7, #137]	; 0x89
 8005f1a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f1e:	2108      	movs	r1, #8
 8005f20:	f7fa fc04 	bl	800072c <InsertBits>
	{
 8005f24:	e00f      	b.n	8005f46 <Send_Status_Message+0x1de>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8005f26:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f2a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005f2e:	441a      	add	r2, r3
 8005f30:	79fb      	ldrb	r3, [r7, #7]
 8005f32:	4977      	ldr	r1, [pc, #476]	; (8006110 <Send_Status_Message+0x3a8>)
 8005f34:	011b      	lsls	r3, r3, #4
 8005f36:	440b      	add	r3, r1
 8005f38:	3301      	adds	r3, #1
 8005f3a:	781b      	ldrb	r3, [r3, #0]
 8005f3c:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005f40:	2108      	movs	r1, #8
 8005f42:	f7fa fbf3 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	BITSTUFFINC(8);
 8005f46:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8005f4a:	3308      	adds	r3, #8
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	da00      	bge.n	8005f52 <Send_Status_Message+0x1ea>
 8005f50:	3307      	adds	r3, #7
 8005f52:	10db      	asrs	r3, r3, #3
 8005f54:	b29a      	uxth	r2, r3
 8005f56:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005f5a:	4413      	add	r3, r2
 8005f5c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8005f60:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005f64:	3308      	adds	r3, #8
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	b21b      	sxth	r3, r3
 8005f6a:	425a      	negs	r2, r3
 8005f6c:	f003 0307 	and.w	r3, r3, #7
 8005f70:	f002 0207 	and.w	r2, r2, #7
 8005f74:	bf58      	it	pl
 8005f76:	4253      	negpl	r3, r2
 8005f78:	b21b      	sxth	r3, r3
 8005f7a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8005f7e:	4b60      	ldr	r3, [pc, #384]	; (8006100 <Send_Status_Message+0x398>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	08db      	lsrs	r3, r3, #3
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d038      	beq.n	8005ffe <Send_Status_Message+0x296>
 8005f8c:	4b5c      	ldr	r3, [pc, #368]	; (8006100 <Send_Status_Message+0x398>)
 8005f8e:	791b      	ldrb	r3, [r3, #4]
 8005f90:	79fa      	ldrb	r2, [r7, #7]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d133      	bne.n	8005ffe <Send_Status_Message+0x296>
	{
		uint8_t Rand_number = 0;
 8005f96:	2300      	movs	r3, #0
 8005f98:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8005f9c:	4859      	ldr	r0, [pc, #356]	; (8006104 <Send_Status_Message+0x39c>)
 8005f9e:	f013 fe2d 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8005fa2:	4602      	mov	r2, r0
 8005fa4:	4b58      	ldr	r3, [pc, #352]	; (8006108 <Send_Status_Message+0x3a0>)
 8005fa6:	fba3 1302 	umull	r1, r3, r3, r2
 8005faa:	099b      	lsrs	r3, r3, #6
 8005fac:	21c8      	movs	r1, #200	; 0xc8
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	1ad3      	subs	r3, r2, r3
 8005fb4:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
#endif
		printf("Injected RX Sequence value failure\n");
 8005fb8:	4858      	ldr	r0, [pc, #352]	; (800611c <Send_Status_Message+0x3b4>)
 8005fba:	f01c fa13 	bl	80223e4 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 8005fbe:	79fb      	ldrb	r3, [r7, #7]
 8005fc0:	4a53      	ldr	r2, [pc, #332]	; (8006110 <Send_Status_Message+0x3a8>)
 8005fc2:	011b      	lsls	r3, r3, #4
 8005fc4:	4413      	add	r3, r2
 8005fc6:	3302      	adds	r3, #2
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	4854      	ldr	r0, [pc, #336]	; (8006120 <Send_Status_Message+0x3b8>)
 8005fce:	f01c f96d 	bl	80222ac <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 8005fd2:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	4852      	ldr	r0, [pc, #328]	; (8006124 <Send_Status_Message+0x3bc>)
 8005fda:	f01c f967 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 8005fde:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8005fe2:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8005fe6:	441a      	add	r2, r3
 8005fe8:	f897 3088 	ldrb.w	r3, [r7, #136]	; 0x88
 8005fec:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8005ff0:	2108      	movs	r1, #8
 8005ff2:	f7fa fb9b 	bl	800072c <InsertBits>
		Rx_Seq_failure = 1;
 8005ff6:	4b4c      	ldr	r3, [pc, #304]	; (8006128 <Send_Status_Message+0x3c0>)
 8005ff8:	2201      	movs	r2, #1
 8005ffa:	701a      	strb	r2, [r3, #0]
	{
 8005ffc:	e020      	b.n	8006040 <Send_Status_Message+0x2d8>
	}
	else
	{
		Rx_Seq_failure = 0;
 8005ffe:	4b4a      	ldr	r3, [pc, #296]	; (8006128 <Send_Status_Message+0x3c0>)
 8006000:	2200      	movs	r2, #0
 8006002:	701a      	strb	r2, [r3, #0]
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 8006004:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006008:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800600c:	18d1      	adds	r1, r2, r3
 800600e:	79fb      	ldrb	r3, [r7, #7]
 8006010:	483f      	ldr	r0, [pc, #252]	; (8006110 <Send_Status_Message+0x3a8>)
 8006012:	011a      	lsls	r2, r3, #4
 8006014:	4402      	add	r2, r0
 8006016:	3202      	adds	r2, #2
 8006018:	7812      	ldrb	r2, [r2, #0]
 800601a:	3201      	adds	r2, #1
 800601c:	b2d4      	uxtb	r4, r2
 800601e:	483c      	ldr	r0, [pc, #240]	; (8006110 <Send_Status_Message+0x3a8>)
 8006020:	011a      	lsls	r2, r3, #4
 8006022:	4402      	add	r2, r0
 8006024:	3202      	adds	r2, #2
 8006026:	4620      	mov	r0, r4
 8006028:	7010      	strb	r0, [r2, #0]
 800602a:	4a39      	ldr	r2, [pc, #228]	; (8006110 <Send_Status_Message+0x3a8>)
 800602c:	011b      	lsls	r3, r3, #4
 800602e:	4413      	add	r3, r2
 8006030:	3302      	adds	r3, #2
 8006032:	781b      	ldrb	r3, [r3, #0]
 8006034:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006038:	460a      	mov	r2, r1
 800603a:	2108      	movs	r1, #8
 800603c:	f7fa fb76 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 8006040:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006044:	3308      	adds	r3, #8
 8006046:	2b00      	cmp	r3, #0
 8006048:	da00      	bge.n	800604c <Send_Status_Message+0x2e4>
 800604a:	3307      	adds	r3, #7
 800604c:	10db      	asrs	r3, r3, #3
 800604e:	b29a      	uxth	r2, r3
 8006050:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006054:	4413      	add	r3, r2
 8006056:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 800605a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800605e:	3308      	adds	r3, #8
 8006060:	b29b      	uxth	r3, r3
 8006062:	b21b      	sxth	r3, r3
 8006064:	425a      	negs	r2, r3
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	f002 0207 	and.w	r2, r2, #7
 800606e:	bf58      	it	pl
 8006070:	4253      	negpl	r3, r2
 8006072:	b21b      	sxth	r3, r3
 8006074:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], STATUSMSG);
 8006078:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800607c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006080:	441a      	add	r2, r3
 8006082:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006086:	2304      	movs	r3, #4
 8006088:	2108      	movs	r1, #8
 800608a:	f7fa fb4f 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800608e:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006092:	3308      	adds	r3, #8
 8006094:	2b00      	cmp	r3, #0
 8006096:	da00      	bge.n	800609a <Send_Status_Message+0x332>
 8006098:	3307      	adds	r3, #7
 800609a:	10db      	asrs	r3, r3, #3
 800609c:	b29a      	uxth	r2, r3
 800609e:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060a2:	4413      	add	r3, r2
 80060a4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80060a8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80060ac:	3308      	adds	r3, #8
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	b21b      	sxth	r3, r3
 80060b2:	425a      	negs	r2, r3
 80060b4:	f003 0307 	and.w	r3, r3, #7
 80060b8:	f002 0207 	and.w	r2, r2, #7
 80060bc:	bf58      	it	pl
 80060be:	4253      	negpl	r3, r2
 80060c0:	b21b      	sxth	r3, r3
 80060c2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a


	if(SET == CHECKFLAG(3,Hitachi_prms_st[Source_Index].Msg_Status_Flag))
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	4a11      	ldr	r2, [pc, #68]	; (8006110 <Send_Status_Message+0x3a8>)
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4413      	add	r3, r2
 80060ce:	3304      	adds	r3, #4
 80060d0:	881b      	ldrh	r3, [r3, #0]
 80060d2:	f003 0308 	and.w	r3, r3, #8
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d052      	beq.n	8006180 <Send_Status_Message+0x418>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 80060da:	79fb      	ldrb	r3, [r7, #7]
 80060dc:	4a13      	ldr	r2, [pc, #76]	; (800612c <Send_Status_Message+0x3c4>)
 80060de:	5cd3      	ldrb	r3, [r2, r3]
 80060e0:	2b01      	cmp	r3, #1
 80060e2:	d125      	bne.n	8006130 <Send_Status_Message+0x3c8>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0068);
 80060e4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80060e8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80060ec:	441a      	add	r2, r3
 80060ee:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80060f2:	2368      	movs	r3, #104	; 0x68
 80060f4:	2110      	movs	r1, #16
 80060f6:	f7fa fb19 	bl	800072c <InsertBits>
 80060fa:	e024      	b.n	8006146 <Send_Status_Message+0x3de>
 80060fc:	20000304 	.word	0x20000304
 8006100:	2000195c 	.word	0x2000195c
 8006104:	20009c78 	.word	0x20009c78
 8006108:	51eb851f 	.word	0x51eb851f
 800610c:	08023e00 	.word	0x08023e00
 8006110:	200011c4 	.word	0x200011c4
 8006114:	080243a4 	.word	0x080243a4
 8006118:	080243c4 	.word	0x080243c4
 800611c:	08023e64 	.word	0x08023e64
 8006120:	080243e4 	.word	0x080243e4
 8006124:	08024404 	.word	0x08024404
 8006128:	20000e39 	.word	0x20000e39
 800612c:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0028);
 8006130:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006134:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006138:	441a      	add	r2, r3
 800613a:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 800613e:	2328      	movs	r3, #40	; 0x28
 8006140:	2110      	movs	r1, #16
 8006142:	f7fa faf3 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 8006146:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800614a:	3310      	adds	r3, #16
 800614c:	2b00      	cmp	r3, #0
 800614e:	da00      	bge.n	8006152 <Send_Status_Message+0x3ea>
 8006150:	3307      	adds	r3, #7
 8006152:	10db      	asrs	r3, r3, #3
 8006154:	b29a      	uxth	r2, r3
 8006156:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800615a:	4413      	add	r3, r2
 800615c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006160:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006164:	3310      	adds	r3, #16
 8006166:	b29b      	uxth	r3, r3
 8006168:	b21b      	sxth	r3, r3
 800616a:	425a      	negs	r2, r3
 800616c:	f003 0307 	and.w	r3, r3, #7
 8006170:	f002 0207 	and.w	r2, r2, #7
 8006174:	bf58      	it	pl
 8006176:	4253      	negpl	r3, r2
 8006178:	b21b      	sxth	r3, r3
 800617a:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 800617e:	e03a      	b.n	80061f6 <Send_Status_Message+0x48e>
	}
	else
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006180:	79fb      	ldrb	r3, [r7, #7]
 8006182:	4a08      	ldr	r2, [pc, #32]	; (80061a4 <Send_Status_Message+0x43c>)
 8006184:	5cd3      	ldrb	r3, [r2, r3]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d10e      	bne.n	80061a8 <Send_Status_Message+0x440>
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0064);
 800618a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800618e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8006192:	441a      	add	r2, r3
 8006194:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006198:	2364      	movs	r3, #100	; 0x64
 800619a:	2110      	movs	r1, #16
 800619c:	f7fa fac6 	bl	800072c <InsertBits>
 80061a0:	e00d      	b.n	80061be <Send_Status_Message+0x456>
 80061a2:	bf00      	nop
 80061a4:	200010d8 	.word	0x200010d8
		}
		else
		{
			InsertBits(ucBit, 16, &Transmit_Buff[ucByte],0x0024);
 80061a8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061ac:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80061b0:	441a      	add	r2, r3
 80061b2:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80061b6:	2324      	movs	r3, #36	; 0x24
 80061b8:	2110      	movs	r1, #16
 80061ba:	f7fa fab7 	bl	800072c <InsertBits>
		}
		BITSTUFFINC(16);
 80061be:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80061c2:	3310      	adds	r3, #16
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	da00      	bge.n	80061ca <Send_Status_Message+0x462>
 80061c8:	3307      	adds	r3, #7
 80061ca:	10db      	asrs	r3, r3, #3
 80061cc:	b29a      	uxth	r2, r3
 80061ce:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80061d2:	4413      	add	r3, r2
 80061d4:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80061d8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80061dc:	3310      	adds	r3, #16
 80061de:	b29b      	uxth	r3, r3
 80061e0:	b21b      	sxth	r3, r3
 80061e2:	425a      	negs	r2, r3
 80061e4:	f003 0307 	and.w	r3, r3, #7
 80061e8:	f002 0207 	and.w	r2, r2, #7
 80061ec:	bf58      	it	pl
 80061ee:	4253      	negpl	r3, r2
 80061f0:	b21b      	sxth	r3, r3
 80061f2:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	}

	if (((Hitachi_prms_st[Source_Index].Msg_Status_Flag >> 5) & 1)) // Time-stamp Extraction
 80061f6:	79fb      	ldrb	r3, [r7, #7]
 80061f8:	4ac6      	ldr	r2, [pc, #792]	; (8006514 <Send_Status_Message+0x7ac>)
 80061fa:	011b      	lsls	r3, r3, #4
 80061fc:	4413      	add	r3, r2
 80061fe:	3304      	adds	r3, #4
 8006200:	881b      	ldrh	r3, [r3, #0]
 8006202:	095b      	lsrs	r3, r3, #5
 8006204:	b29b      	uxth	r3, r3
 8006206:	f003 0301 	and.w	r3, r3, #1
 800620a:	2b00      	cmp	r3, #0
 800620c:	f000 8139 	beq.w	8006482 <Send_Status_Message+0x71a>
	{
		if(Change_MLK_TIME[Source_Index]== 1)
 8006210:	79fb      	ldrb	r3, [r7, #7]
 8006212:	4ac1      	ldr	r2, [pc, #772]	; (8006518 <Send_Status_Message+0x7b0>)
 8006214:	5cd3      	ldrb	r3, [r2, r3]
 8006216:	2b01      	cmp	r3, #1
 8006218:	d114      	bne.n	8006244 <Send_Status_Message+0x4dc>
		{
			Get_time();
 800621a:	f004 feb1 	bl	800af80 <Get_time>
			memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 800621e:	79fa      	ldrb	r2, [r7, #7]
 8006220:	4613      	mov	r3, r2
 8006222:	005b      	lsls	r3, r3, #1
 8006224:	4413      	add	r3, r2
 8006226:	005b      	lsls	r3, r3, #1
 8006228:	4abc      	ldr	r2, [pc, #752]	; (800651c <Send_Status_Message+0x7b4>)
 800622a:	4413      	add	r3, r2
 800622c:	4abc      	ldr	r2, [pc, #752]	; (8006520 <Send_Status_Message+0x7b8>)
 800622e:	6811      	ldr	r1, [r2, #0]
 8006230:	6019      	str	r1, [r3, #0]
 8006232:	8892      	ldrh	r2, [r2, #4]
 8006234:	809a      	strh	r2, [r3, #4]
			printf("Sending Updated Time\n");
 8006236:	48bb      	ldr	r0, [pc, #748]	; (8006524 <Send_Status_Message+0x7bc>)
 8006238:	f01c f8d4 	bl	80223e4 <puts>
			Change_MLK_TIME[Source_Index] = 0;
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	4ab6      	ldr	r2, [pc, #728]	; (8006518 <Send_Status_Message+0x7b0>)
 8006240:	2100      	movs	r1, #0
 8006242:	54d1      	strb	r1, [r2, r3]
		}
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 8006244:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006248:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800624c:	18d1      	adds	r1, r2, r3
 800624e:	79fa      	ldrb	r2, [r7, #7]
 8006250:	48b2      	ldr	r0, [pc, #712]	; (800651c <Send_Status_Message+0x7b4>)
 8006252:	4613      	mov	r3, r2
 8006254:	005b      	lsls	r3, r3, #1
 8006256:	4413      	add	r3, r2
 8006258:	005b      	lsls	r3, r3, #1
 800625a:	4403      	add	r3, r0
 800625c:	3305      	adds	r3, #5
 800625e:	781b      	ldrb	r3, [r3, #0]
 8006260:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006264:	460a      	mov	r2, r1
 8006266:	2108      	movs	r1, #8
 8006268:	f7fa fa60 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800626c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006270:	3308      	adds	r3, #8
 8006272:	2b00      	cmp	r3, #0
 8006274:	da00      	bge.n	8006278 <Send_Status_Message+0x510>
 8006276:	3307      	adds	r3, #7
 8006278:	10db      	asrs	r3, r3, #3
 800627a:	b29a      	uxth	r2, r3
 800627c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006280:	4413      	add	r3, r2
 8006282:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006286:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800628a:	3308      	adds	r3, #8
 800628c:	b29b      	uxth	r3, r3
 800628e:	b21b      	sxth	r3, r3
 8006290:	425a      	negs	r2, r3
 8006292:	f003 0307 	and.w	r3, r3, #7
 8006296:	f002 0207 	and.w	r2, r2, #7
 800629a:	bf58      	it	pl
 800629c:	4253      	negpl	r3, r2
 800629e:	b21b      	sxth	r3, r3
 80062a0:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80062a4:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062a8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80062ac:	18d1      	adds	r1, r2, r3
 80062ae:	79fa      	ldrb	r2, [r7, #7]
 80062b0:	489a      	ldr	r0, [pc, #616]	; (800651c <Send_Status_Message+0x7b4>)
 80062b2:	4613      	mov	r3, r2
 80062b4:	005b      	lsls	r3, r3, #1
 80062b6:	4413      	add	r3, r2
 80062b8:	005b      	lsls	r3, r3, #1
 80062ba:	4403      	add	r3, r0
 80062bc:	3304      	adds	r3, #4
 80062be:	781b      	ldrb	r3, [r3, #0]
 80062c0:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80062c4:	460a      	mov	r2, r1
 80062c6:	2108      	movs	r1, #8
 80062c8:	f7fa fa30 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80062cc:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80062d0:	3308      	adds	r3, #8
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da00      	bge.n	80062d8 <Send_Status_Message+0x570>
 80062d6:	3307      	adds	r3, #7
 80062d8:	10db      	asrs	r3, r3, #3
 80062da:	b29a      	uxth	r2, r3
 80062dc:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80062e0:	4413      	add	r3, r2
 80062e2:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80062e6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80062ea:	3308      	adds	r3, #8
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	b21b      	sxth	r3, r3
 80062f0:	425a      	negs	r2, r3
 80062f2:	f003 0307 	and.w	r3, r3, #7
 80062f6:	f002 0207 	and.w	r2, r2, #7
 80062fa:	bf58      	it	pl
 80062fc:	4253      	negpl	r3, r2
 80062fe:	b21b      	sxth	r3, r3
 8006300:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 8006304:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006308:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800630c:	18d1      	adds	r1, r2, r3
 800630e:	79fa      	ldrb	r2, [r7, #7]
 8006310:	4882      	ldr	r0, [pc, #520]	; (800651c <Send_Status_Message+0x7b4>)
 8006312:	4613      	mov	r3, r2
 8006314:	005b      	lsls	r3, r3, #1
 8006316:	4413      	add	r3, r2
 8006318:	005b      	lsls	r3, r3, #1
 800631a:	4403      	add	r3, r0
 800631c:	3303      	adds	r3, #3
 800631e:	781b      	ldrb	r3, [r3, #0]
 8006320:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006324:	460a      	mov	r2, r1
 8006326:	2108      	movs	r1, #8
 8006328:	f7fa fa00 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800632c:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 8006330:	3308      	adds	r3, #8
 8006332:	2b00      	cmp	r3, #0
 8006334:	da00      	bge.n	8006338 <Send_Status_Message+0x5d0>
 8006336:	3307      	adds	r3, #7
 8006338:	10db      	asrs	r3, r3, #3
 800633a:	b29a      	uxth	r2, r3
 800633c:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006340:	4413      	add	r3, r2
 8006342:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006346:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800634a:	3308      	adds	r3, #8
 800634c:	b29b      	uxth	r3, r3
 800634e:	b21b      	sxth	r3, r3
 8006350:	425a      	negs	r2, r3
 8006352:	f003 0307 	and.w	r3, r3, #7
 8006356:	f002 0207 	and.w	r2, r2, #7
 800635a:	bf58      	it	pl
 800635c:	4253      	negpl	r3, r2
 800635e:	b21b      	sxth	r3, r3
 8006360:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 8006364:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006368:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800636c:	18d1      	adds	r1, r2, r3
 800636e:	79fa      	ldrb	r2, [r7, #7]
 8006370:	486a      	ldr	r0, [pc, #424]	; (800651c <Send_Status_Message+0x7b4>)
 8006372:	4613      	mov	r3, r2
 8006374:	005b      	lsls	r3, r3, #1
 8006376:	4413      	add	r3, r2
 8006378:	005b      	lsls	r3, r3, #1
 800637a:	4403      	add	r3, r0
 800637c:	781b      	ldrb	r3, [r3, #0]
 800637e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006382:	460a      	mov	r2, r1
 8006384:	2108      	movs	r1, #8
 8006386:	f7fa f9d1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800638a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800638e:	3308      	adds	r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	da00      	bge.n	8006396 <Send_Status_Message+0x62e>
 8006394:	3307      	adds	r3, #7
 8006396:	10db      	asrs	r3, r3, #3
 8006398:	b29a      	uxth	r2, r3
 800639a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800639e:	4413      	add	r3, r2
 80063a0:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80063a4:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80063a8:	3308      	adds	r3, #8
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	b21b      	sxth	r3, r3
 80063ae:	425a      	negs	r2, r3
 80063b0:	f003 0307 	and.w	r3, r3, #7
 80063b4:	f002 0207 	and.w	r2, r2, #7
 80063b8:	bf58      	it	pl
 80063ba:	4253      	negpl	r3, r2
 80063bc:	b21b      	sxth	r3, r3
 80063be:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80063c2:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063c6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80063ca:	18d1      	adds	r1, r2, r3
 80063cc:	79fa      	ldrb	r2, [r7, #7]
 80063ce:	4853      	ldr	r0, [pc, #332]	; (800651c <Send_Status_Message+0x7b4>)
 80063d0:	4613      	mov	r3, r2
 80063d2:	005b      	lsls	r3, r3, #1
 80063d4:	4413      	add	r3, r2
 80063d6:	005b      	lsls	r3, r3, #1
 80063d8:	4403      	add	r3, r0
 80063da:	3301      	adds	r3, #1
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 80063e2:	460a      	mov	r2, r1
 80063e4:	2108      	movs	r1, #8
 80063e6:	f7fa f9a1 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 80063ea:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80063ee:	3308      	adds	r3, #8
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	da00      	bge.n	80063f6 <Send_Status_Message+0x68e>
 80063f4:	3307      	adds	r3, #7
 80063f6:	10db      	asrs	r3, r3, #3
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80063fe:	4413      	add	r3, r2
 8006400:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006404:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006408:	3308      	adds	r3, #8
 800640a:	b29b      	uxth	r3, r3
 800640c:	b21b      	sxth	r3, r3
 800640e:	425a      	negs	r2, r3
 8006410:	f003 0307 	and.w	r3, r3, #7
 8006414:	f002 0207 	and.w	r2, r2, #7
 8006418:	bf58      	it	pl
 800641a:	4253      	negpl	r3, r2
 800641c:	b21b      	sxth	r3, r3
 800641e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8006422:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006426:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800642a:	18d1      	adds	r1, r2, r3
 800642c:	79fa      	ldrb	r2, [r7, #7]
 800642e:	483b      	ldr	r0, [pc, #236]	; (800651c <Send_Status_Message+0x7b4>)
 8006430:	4613      	mov	r3, r2
 8006432:	005b      	lsls	r3, r3, #1
 8006434:	4413      	add	r3, r2
 8006436:	005b      	lsls	r3, r3, #1
 8006438:	4403      	add	r3, r0
 800643a:	3302      	adds	r3, #2
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006442:	460a      	mov	r2, r1
 8006444:	2108      	movs	r1, #8
 8006446:	f7fa f971 	bl	800072c <InsertBits>
		BITSTUFFINC(8);
 800644a:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 800644e:	3308      	adds	r3, #8
 8006450:	2b00      	cmp	r3, #0
 8006452:	da00      	bge.n	8006456 <Send_Status_Message+0x6ee>
 8006454:	3307      	adds	r3, #7
 8006456:	10db      	asrs	r3, r3, #3
 8006458:	b29a      	uxth	r2, r3
 800645a:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 800645e:	4413      	add	r3, r2
 8006460:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 8006464:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8006468:	3308      	adds	r3, #8
 800646a:	b29b      	uxth	r3, r3
 800646c:	b21b      	sxth	r3, r3
 800646e:	425a      	negs	r2, r3
 8006470:	f003 0307 	and.w	r3, r3, #7
 8006474:	f002 0207 	and.w	r2, r2, #7
 8006478:	bf58      	it	pl
 800647a:	4253      	negpl	r3, r2
 800647c:	b21b      	sxth	r3, r3
 800647e:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	}

	if( ( (CHECKFLAG(1,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006482:	4b29      	ldr	r3, [pc, #164]	; (8006528 <Send_Status_Message+0x7c0>)
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	085b      	lsrs	r3, r3, #1
 8006488:	f003 0301 	and.w	r3, r3, #1
 800648c:	2b00      	cmp	r3, #0
 800648e:	d031      	beq.n	80064f4 <Send_Status_Message+0x78c>
 8006490:	4b25      	ldr	r3, [pc, #148]	; (8006528 <Send_Status_Message+0x7c0>)
 8006492:	791b      	ldrb	r3, [r3, #4]
 8006494:	79fa      	ldrb	r2, [r7, #7]
 8006496:	429a      	cmp	r2, r3
 8006498:	d12c      	bne.n	80064f4 <Send_Status_Message+0x78c>
	{
		uint32_t Rand_number = 0;
 800649a:	2300      	movs	r3, #0
 800649c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#ifdef STM_32
		Rand_number = HAL_RNG_GetRandomNumber(&hrng) % 0xffff00;
 80064a0:	4822      	ldr	r0, [pc, #136]	; (800652c <Send_Status_Message+0x7c4>)
 80064a2:	f013 fbab 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 80064a6:	4602      	mov	r2, r0
 80064a8:	4b21      	ldr	r3, [pc, #132]	; (8006530 <Send_Status_Message+0x7c8>)
 80064aa:	fba3 1302 	umull	r1, r3, r3, r2
 80064ae:	0dd9      	lsrs	r1, r3, #23
 80064b0:	460b      	mov	r3, r1
 80064b2:	041b      	lsls	r3, r3, #16
 80064b4:	1a5b      	subs	r3, r3, r1
 80064b6:	021b      	lsls	r3, r3, #8
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
#endif
		printf("\nInjected Vital Init Value Failure\n");
 80064be:	481d      	ldr	r0, [pc, #116]	; (8006534 <Send_Status_Message+0x7cc>)
 80064c0:	f01b ff90 	bl	80223e4 <puts>
		printf("Actual Vital Init Value:0x%06lX\n",Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80064c4:	79fb      	ldrb	r3, [r7, #7]
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <Send_Status_Message+0x7ac>)
 80064c8:	011b      	lsls	r3, r3, #4
 80064ca:	4413      	add	r3, r2
 80064cc:	330c      	adds	r3, #12
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	4819      	ldr	r0, [pc, #100]	; (8006538 <Send_Status_Message+0x7d0>)
 80064d4:	f01b feea 	bl	80222ac <iprintf>
		printf("Injected Vital Init Value:0x%06lX\n",Rand_number);
 80064d8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80064dc:	4817      	ldr	r0, [pc, #92]	; (800653c <Send_Status_Message+0x7d4>)
 80064de:	f01b fee5 	bl	80222ac <iprintf>
		InsertBits(0, 24, &Temp_Buff[0], Rand_number);
 80064e2:	f107 020c 	add.w	r2, r7, #12
 80064e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80064ea:	2118      	movs	r1, #24
 80064ec:	2000      	movs	r0, #0
 80064ee:	f7fa f91d 	bl	800072c <InsertBits>
	{
 80064f2:	e00b      	b.n	800650c <Send_Status_Message+0x7a4>
	}
	else
	{
		InsertBits(0, 24, &Temp_Buff[0], Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value);
 80064f4:	79fb      	ldrb	r3, [r7, #7]
 80064f6:	4a07      	ldr	r2, [pc, #28]	; (8006514 <Send_Status_Message+0x7ac>)
 80064f8:	011b      	lsls	r3, r3, #4
 80064fa:	4413      	add	r3, r2
 80064fc:	330c      	adds	r3, #12
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	f107 020c 	add.w	r2, r7, #12
 8006504:	2118      	movs	r1, #24
 8006506:	2000      	movs	r0, #0
 8006508:	f7fa f910 	bl	800072c <InsertBits>
	}
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800650c:	2300      	movs	r3, #0
 800650e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006512:	e027      	b.n	8006564 <Send_Status_Message+0x7fc>
 8006514:	200011c4 	.word	0x200011c4
 8006518:	200010d8 	.word	0x200010d8
 800651c:	20001188 	.word	0x20001188
 8006520:	200027e8 	.word	0x200027e8
 8006524:	08024180 	.word	0x08024180
 8006528:	2000195c 	.word	0x2000195c
 800652c:	20009c78 	.word	0x20009c78
 8006530:	80008001 	.word	0x80008001
 8006534:	08024198 	.word	0x08024198
 8006538:	080241bc 	.word	0x080241bc
 800653c:	080241e0 	.word	0x080241e0
	{
		Temp_Buff[uc_index + 3] = Transmit_Buff[uc_index];
 8006540:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 8006544:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006548:	3303      	adds	r3, #3
 800654a:	3290      	adds	r2, #144	; 0x90
 800654c:	443a      	add	r2, r7
 800654e:	f812 2c48 	ldrb.w	r2, [r2, #-72]
 8006552:	3390      	adds	r3, #144	; 0x90
 8006554:	443b      	add	r3, r7
 8006556:	f803 2c84 	strb.w	r2, [r3, #-132]
	for (uc_index = 0; uc_index < ucByte; uc_index++)
 800655a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800655e:	3301      	adds	r3, #1
 8006560:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8006564:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006568:	b29b      	uxth	r3, r3
 800656a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800656e:	429a      	cmp	r2, r3
 8006570:	d8e6      	bhi.n	8006540 <Send_Status_Message+0x7d8>
	}

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Temp_Buff, uc_index + 3));
 8006572:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006576:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800657a:	18d4      	adds	r4, r2, r3
 800657c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8006580:	b29b      	uxth	r3, r3
 8006582:	3303      	adds	r3, #3
 8006584:	b29a      	uxth	r2, r3
 8006586:	f107 030c 	add.w	r3, r7, #12
 800658a:	4611      	mov	r1, r2
 800658c:	4618      	mov	r0, r3
 800658e:	f00c faab 	bl	8012ae8 <CalculateDirectReverseCrc>
 8006592:	4603      	mov	r3, r0
 8006594:	f8b7 008a 	ldrh.w	r0, [r7, #138]	; 0x8a
 8006598:	4622      	mov	r2, r4
 800659a:	2120      	movs	r1, #32
 800659c:	f7fa f8c6 	bl	800072c <InsertBits>
	Rx_Seq_failure = 0;
 80065a0:	4b1f      	ldr	r3, [pc, #124]	; (8006620 <Send_Status_Message+0x8b8>)
 80065a2:	2200      	movs	r2, #0
 80065a4:	701a      	strb	r2, [r3, #0]
	BITSTUFFINC(32);
 80065a6:	f9b7 308a 	ldrsh.w	r3, [r7, #138]	; 0x8a
 80065aa:	3320      	adds	r3, #32
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	da00      	bge.n	80065b2 <Send_Status_Message+0x84a>
 80065b0:	3307      	adds	r3, #7
 80065b2:	10db      	asrs	r3, r3, #3
 80065b4:	b29a      	uxth	r2, r3
 80065b6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80065ba:	4413      	add	r3, r2
 80065bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
 80065c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80065c4:	3320      	adds	r3, #32
 80065c6:	b29b      	uxth	r3, r3
 80065c8:	b21b      	sxth	r3, r3
 80065ca:	425a      	negs	r2, r3
 80065cc:	f003 0307 	and.w	r3, r3, #7
 80065d0:	f002 0207 	and.w	r2, r2, #7
 80065d4:	bf58      	it	pl
 80065d6:	4253      	negpl	r3, r2
 80065d8:	b21b      	sxth	r3, r3
 80065da:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 80065de:	4b11      	ldr	r3, [pc, #68]	; (8006624 <Send_Status_Message+0x8bc>)
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	0a5b      	lsrs	r3, r3, #9
 80065e4:	f003 0301 	and.w	r3, r3, #1
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00b      	beq.n	8006604 <Send_Status_Message+0x89c>
 80065ec:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <Send_Status_Message+0x8bc>)
 80065ee:	791b      	ldrb	r3, [r3, #4]
 80065f0:	79fa      	ldrb	r2, [r7, #7]
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d106      	bne.n	8006604 <Send_Status_Message+0x89c>
	{
		printf("Injected ETH tx Fail\n");
 80065f6:	480c      	ldr	r0, [pc, #48]	; (8006628 <Send_Status_Message+0x8c0>)
 80065f8:	f01b fef4 	bl	80223e4 <puts>
		printf("Not Sending Reply");
 80065fc:	480b      	ldr	r0, [pc, #44]	; (800662c <Send_Status_Message+0x8c4>)
 80065fe:	f01b fe55 	bl	80222ac <iprintf>
 8006602:	e009      	b.n	8006618 <Send_Status_Message+0x8b0>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff, ucByte,Source_Index);
 8006604:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8006608:	b2d9      	uxtb	r1, r3
 800660a:	79fa      	ldrb	r2, [r7, #7]
 800660c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8006610:	4618      	mov	r0, r3
 8006612:	f000 ffab 	bl	800756c <Process_Sending_Reply>
	}
}
 8006616:	bf00      	nop
 8006618:	bf00      	nop
 800661a:	3794      	adds	r7, #148	; 0x94
 800661c:	46bd      	mov	sp, r7
 800661e:	bd90      	pop	{r4, r7, pc}
 8006620:	20000e39 	.word	0x20000e39
 8006624:	2000195c 	.word	0x2000195c
 8006628:	08023f30 	.word	0x08023f30
 800662c:	08023f48 	.word	0x08023f48

08006630 <Service_Msg_Extr>:

void Service_Msg_Extr(unsigned char *Buff, unsigned char Length,uint8_t Source_Index,uint8_t Des_Index)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b088      	sub	sp, #32
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	4608      	mov	r0, r1
 800663a:	4611      	mov	r1, r2
 800663c:	461a      	mov	r2, r3
 800663e:	4603      	mov	r3, r0
 8006640:	70fb      	strb	r3, [r7, #3]
 8006642:	460b      	mov	r3, r1
 8006644:	70bb      	strb	r3, [r7, #2]
 8006646:	4613      	mov	r3, r2
 8006648:	707b      	strb	r3, [r7, #1]
	uint32_t Calc_CRC = 0;
 800664a:	2300      	movs	r3, #0
 800664c:	61bb      	str	r3, [r7, #24]
	uint32_t Recv_CRC = 0;
 800664e:	2300      	movs	r3, #0
 8006650:	617b      	str	r3, [r7, #20]
	uint8_t LinkEstablishFlag = CLEAR;
 8006652:	2300      	movs	r3, #0
 8006654:	77fb      	strb	r3, [r7, #31]
	uint32_t Ticks = HAL_GetTick();
 8006656:	f00e fe1f 	bl	8015298 <HAL_GetTick>
 800665a:	6138      	str	r0, [r7, #16]
	BITSTUFFINIT(0, 0);
 800665c:	2300      	movs	r3, #0
 800665e:	81fb      	strh	r3, [r7, #14]
 8006660:	2300      	movs	r3, #0
 8006662:	81bb      	strh	r3, [r7, #12]

	Calc_CRC = CalculateDirectReverseCrc(Buff, Length - 5);
 8006664:	78fb      	ldrb	r3, [r7, #3]
 8006666:	b29b      	uxth	r3, r3
 8006668:	3b05      	subs	r3, #5
 800666a:	b29b      	uxth	r3, r3
 800666c:	4619      	mov	r1, r3
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f00c fa3a 	bl	8012ae8 <CalculateDirectReverseCrc>
 8006674:	61b8      	str	r0, [r7, #24]
	Recv_CRC = ExtractBits(ucBit, 32, (unsigned char *)&Buff[Length - 5]);
 8006676:	78fb      	ldrb	r3, [r7, #3]
 8006678:	3b05      	subs	r3, #5
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	441a      	add	r2, r3
 800667e:	89bb      	ldrh	r3, [r7, #12]
 8006680:	2120      	movs	r1, #32
 8006682:	4618      	mov	r0, r3
 8006684:	f7f9 ffc6 	bl	8000614 <ExtractBits>
 8006688:	6178      	str	r0, [r7, #20]

	if(Recv_CRC != Calc_CRC)
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	429a      	cmp	r2, r3
 8006690:	d01a      	beq.n	80066c8 <Service_Msg_Extr+0x98>
	{
		printf("Service Message CRC Fail:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8006692:	78bb      	ldrb	r3, [r7, #2]
 8006694:	4a08      	ldr	r2, [pc, #32]	; (80066b8 <Service_Msg_Extr+0x88>)
 8006696:	3366      	adds	r3, #102	; 0x66
 8006698:	009b      	lsls	r3, r3, #2
 800669a:	4413      	add	r3, r2
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	4619      	mov	r1, r3
 80066a0:	4806      	ldr	r0, [pc, #24]	; (80066bc <Service_Msg_Extr+0x8c>)
 80066a2:	f01b fe03 	bl	80222ac <iprintf>
		printf("R-CRC:0x%08lX\n",Recv_CRC);
 80066a6:	6979      	ldr	r1, [r7, #20]
 80066a8:	4805      	ldr	r0, [pc, #20]	; (80066c0 <Service_Msg_Extr+0x90>)
 80066aa:	f01b fdff 	bl	80222ac <iprintf>
		printf("C-CRC:0x%08lX\n",Calc_CRC);
 80066ae:	69b9      	ldr	r1, [r7, #24]
 80066b0:	4804      	ldr	r0, [pc, #16]	; (80066c4 <Service_Msg_Extr+0x94>)
 80066b2:	f01b fdfb 	bl	80222ac <iprintf>
		return;
 80066b6:	e397      	b.n	8006de8 <Service_Msg_Extr+0x7b8>
 80066b8:	20000304 	.word	0x20000304
 80066bc:	08024428 	.word	0x08024428
 80066c0:	08023c9c 	.word	0x08023c9c
 80066c4:	08023cac 	.word	0x08023cac
	}

	Last_Recevied_Clock[Source_Index] = Ticks;
 80066c8:	78bb      	ldrb	r3, [r7, #2]
 80066ca:	49ae      	ldr	r1, [pc, #696]	; (8006984 <Service_Msg_Extr+0x354>)
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	Last_Recevied_Clock_ValidMsgs[Source_Index] = Ticks;
 80066d2:	78bb      	ldrb	r3, [r7, #2]
 80066d4:	49ac      	ldr	r1, [pc, #688]	; (8006988 <Service_Msg_Extr+0x358>)
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	//Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
	BITSTUFFINC(8);
 80066dc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80066e0:	3308      	adds	r3, #8
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	da00      	bge.n	80066e8 <Service_Msg_Extr+0xb8>
 80066e6:	3307      	adds	r3, #7
 80066e8:	10db      	asrs	r3, r3, #3
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	89fb      	ldrh	r3, [r7, #14]
 80066ee:	4413      	add	r3, r2
 80066f0:	81fb      	strh	r3, [r7, #14]
 80066f2:	89bb      	ldrh	r3, [r7, #12]
 80066f4:	3308      	adds	r3, #8
 80066f6:	b29b      	uxth	r3, r3
 80066f8:	b21b      	sxth	r3, r3
 80066fa:	425a      	negs	r2, r3
 80066fc:	f003 0307 	and.w	r3, r3, #7
 8006700:	f002 0207 	and.w	r2, r2, #7
 8006704:	bf58      	it	pl
 8006706:	4253      	negpl	r3, r2
 8006708:	b21b      	sxth	r3, r3
 800670a:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Des_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 800670c:	89fb      	ldrh	r3, [r7, #14]
 800670e:	687a      	ldr	r2, [r7, #4]
 8006710:	441a      	add	r2, r3
 8006712:	89bb      	ldrh	r3, [r7, #12]
 8006714:	2110      	movs	r1, #16
 8006716:	4618      	mov	r0, r3
 8006718:	f7f9 ff7c 	bl	8000614 <ExtractBits>
 800671c:	4603      	mov	r3, r0
 800671e:	78ba      	ldrb	r2, [r7, #2]
 8006720:	b298      	uxth	r0, r3
 8006722:	499a      	ldr	r1, [pc, #616]	; (800698c <Service_Msg_Extr+0x35c>)
 8006724:	4613      	mov	r3, r2
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	440b      	add	r3, r1
 800672e:	3306      	adds	r3, #6
 8006730:	4602      	mov	r2, r0
 8006732:	801a      	strh	r2, [r3, #0]
	//	printf("Des_Addr:%u\n", Hitachi_Service_st[Source_Index].Des_Addr);
	BITSTUFFINC(16);
 8006734:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006738:	3310      	adds	r3, #16
 800673a:	2b00      	cmp	r3, #0
 800673c:	da00      	bge.n	8006740 <Service_Msg_Extr+0x110>
 800673e:	3307      	adds	r3, #7
 8006740:	10db      	asrs	r3, r3, #3
 8006742:	b29a      	uxth	r2, r3
 8006744:	89fb      	ldrh	r3, [r7, #14]
 8006746:	4413      	add	r3, r2
 8006748:	81fb      	strh	r3, [r7, #14]
 800674a:	89bb      	ldrh	r3, [r7, #12]
 800674c:	3310      	adds	r3, #16
 800674e:	b29b      	uxth	r3, r3
 8006750:	b21b      	sxth	r3, r3
 8006752:	425a      	negs	r2, r3
 8006754:	f003 0307 	and.w	r3, r3, #7
 8006758:	f002 0207 	and.w	r2, r2, #7
 800675c:	bf58      	it	pl
 800675e:	4253      	negpl	r3, r2
 8006760:	b21b      	sxth	r3, r3
 8006762:	81bb      	strh	r3, [r7, #12]

	Hitachi_Service_st[Source_Index].Src_Addr = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 8006764:	89fb      	ldrh	r3, [r7, #14]
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	441a      	add	r2, r3
 800676a:	89bb      	ldrh	r3, [r7, #12]
 800676c:	2110      	movs	r1, #16
 800676e:	4618      	mov	r0, r3
 8006770:	f7f9 ff50 	bl	8000614 <ExtractBits>
 8006774:	4603      	mov	r3, r0
 8006776:	78ba      	ldrb	r2, [r7, #2]
 8006778:	b298      	uxth	r0, r3
 800677a:	4984      	ldr	r1, [pc, #528]	; (800698c <Service_Msg_Extr+0x35c>)
 800677c:	4613      	mov	r3, r2
 800677e:	005b      	lsls	r3, r3, #1
 8006780:	4413      	add	r3, r2
 8006782:	009b      	lsls	r3, r3, #2
 8006784:	440b      	add	r3, r1
 8006786:	3304      	adds	r3, #4
 8006788:	4602      	mov	r2, r0
 800678a:	801a      	strh	r2, [r3, #0]
	//	printf("Src_Addr:%u\n", Hitachi_Service_st[Source_Index].Src_Addr);
	BITSTUFFINC(16);
 800678c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006790:	3310      	adds	r3, #16
 8006792:	2b00      	cmp	r3, #0
 8006794:	da00      	bge.n	8006798 <Service_Msg_Extr+0x168>
 8006796:	3307      	adds	r3, #7
 8006798:	10db      	asrs	r3, r3, #3
 800679a:	b29a      	uxth	r2, r3
 800679c:	89fb      	ldrh	r3, [r7, #14]
 800679e:	4413      	add	r3, r2
 80067a0:	81fb      	strh	r3, [r7, #14]
 80067a2:	89bb      	ldrh	r3, [r7, #12]
 80067a4:	3310      	adds	r3, #16
 80067a6:	b29b      	uxth	r3, r3
 80067a8:	b21b      	sxth	r3, r3
 80067aa:	425a      	negs	r2, r3
 80067ac:	f003 0307 	and.w	r3, r3, #7
 80067b0:	f002 0207 	and.w	r2, r2, #7
 80067b4:	bf58      	it	pl
 80067b6:	4253      	negpl	r3, r2
 80067b8:	b21b      	sxth	r3, r3
 80067ba:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Rx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80067bc:	89fb      	ldrh	r3, [r7, #14]
 80067be:	687a      	ldr	r2, [r7, #4]
 80067c0:	441a      	add	r2, r3
 80067c2:	89bb      	ldrh	r3, [r7, #12]
 80067c4:	2108      	movs	r1, #8
 80067c6:	4618      	mov	r0, r3
 80067c8:	f7f9 ff24 	bl	8000614 <ExtractBits>
 80067cc:	4602      	mov	r2, r0
 80067ce:	78bb      	ldrb	r3, [r7, #2]
 80067d0:	b2d1      	uxtb	r1, r2
 80067d2:	4a6f      	ldr	r2, [pc, #444]	; (8006990 <Service_Msg_Extr+0x360>)
 80067d4:	011b      	lsls	r3, r3, #4
 80067d6:	4413      	add	r3, r2
 80067d8:	3302      	adds	r3, #2
 80067da:	460a      	mov	r2, r1
 80067dc:	701a      	strb	r2, [r3, #0]
	//printf("Tx_seq             :%u\n",  Hitachi_prms_st[Source_Index].Rx_Seq);
	BITSTUFFINC(8);
 80067de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80067e2:	3308      	adds	r3, #8
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	da00      	bge.n	80067ea <Service_Msg_Extr+0x1ba>
 80067e8:	3307      	adds	r3, #7
 80067ea:	10db      	asrs	r3, r3, #3
 80067ec:	b29a      	uxth	r2, r3
 80067ee:	89fb      	ldrh	r3, [r7, #14]
 80067f0:	4413      	add	r3, r2
 80067f2:	81fb      	strh	r3, [r7, #14]
 80067f4:	89bb      	ldrh	r3, [r7, #12]
 80067f6:	3308      	adds	r3, #8
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	b21b      	sxth	r3, r3
 80067fc:	425a      	negs	r2, r3
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	f002 0207 	and.w	r2, r2, #7
 8006806:	bf58      	it	pl
 8006808:	4253      	negpl	r3, r2
 800680a:	b21b      	sxth	r3, r3
 800680c:	81bb      	strh	r3, [r7, #12]

	Hitachi_prms_st[Source_Index].Tx_Seq = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800680e:	89fb      	ldrh	r3, [r7, #14]
 8006810:	687a      	ldr	r2, [r7, #4]
 8006812:	441a      	add	r2, r3
 8006814:	89bb      	ldrh	r3, [r7, #12]
 8006816:	2108      	movs	r1, #8
 8006818:	4618      	mov	r0, r3
 800681a:	f7f9 fefb 	bl	8000614 <ExtractBits>
 800681e:	4602      	mov	r2, r0
 8006820:	78bb      	ldrb	r3, [r7, #2]
 8006822:	b2d1      	uxtb	r1, r2
 8006824:	4a5a      	ldr	r2, [pc, #360]	; (8006990 <Service_Msg_Extr+0x360>)
 8006826:	011b      	lsls	r3, r3, #4
 8006828:	4413      	add	r3, r2
 800682a:	3301      	adds	r3, #1
 800682c:	460a      	mov	r2, r1
 800682e:	701a      	strb	r2, [r3, #0]
	//printf("Rx_Seq             :%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
	BITSTUFFINC(8);
 8006830:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006834:	3308      	adds	r3, #8
 8006836:	2b00      	cmp	r3, #0
 8006838:	da00      	bge.n	800683c <Service_Msg_Extr+0x20c>
 800683a:	3307      	adds	r3, #7
 800683c:	10db      	asrs	r3, r3, #3
 800683e:	b29a      	uxth	r2, r3
 8006840:	89fb      	ldrh	r3, [r7, #14]
 8006842:	4413      	add	r3, r2
 8006844:	81fb      	strh	r3, [r7, #14]
 8006846:	89bb      	ldrh	r3, [r7, #12]
 8006848:	3308      	adds	r3, #8
 800684a:	b29b      	uxth	r3, r3
 800684c:	b21b      	sxth	r3, r3
 800684e:	425a      	negs	r2, r3
 8006850:	f003 0307 	and.w	r3, r3, #7
 8006854:	f002 0207 	and.w	r2, r2, #7
 8006858:	bf58      	it	pl
 800685a:	4253      	negpl	r3, r2
 800685c:	b21b      	sxth	r3, r3
 800685e:	81bb      	strh	r3, [r7, #12]


	Hitachi_Service_st[Source_Index].Msg_Type = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006860:	89fb      	ldrh	r3, [r7, #14]
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	441a      	add	r2, r3
 8006866:	89bb      	ldrh	r3, [r7, #12]
 8006868:	2108      	movs	r1, #8
 800686a:	4618      	mov	r0, r3
 800686c:	f7f9 fed2 	bl	8000614 <ExtractBits>
 8006870:	4603      	mov	r3, r0
 8006872:	78ba      	ldrb	r2, [r7, #2]
 8006874:	b2d8      	uxtb	r0, r3
 8006876:	4945      	ldr	r1, [pc, #276]	; (800698c <Service_Msg_Extr+0x35c>)
 8006878:	4613      	mov	r3, r2
 800687a:	005b      	lsls	r3, r3, #1
 800687c:	4413      	add	r3, r2
 800687e:	009b      	lsls	r3, r3, #2
 8006880:	440b      	add	r3, r1
 8006882:	3302      	adds	r3, #2
 8006884:	4602      	mov	r2, r0
 8006886:	701a      	strb	r2, [r3, #0]
	//printf("Msg_type           :%u\n", Hitachi_Service_st[Source_Index].Msg_Type);
	BITSTUFFINC(8);
 8006888:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800688c:	3308      	adds	r3, #8
 800688e:	2b00      	cmp	r3, #0
 8006890:	da00      	bge.n	8006894 <Service_Msg_Extr+0x264>
 8006892:	3307      	adds	r3, #7
 8006894:	10db      	asrs	r3, r3, #3
 8006896:	b29a      	uxth	r2, r3
 8006898:	89fb      	ldrh	r3, [r7, #14]
 800689a:	4413      	add	r3, r2
 800689c:	81fb      	strh	r3, [r7, #14]
 800689e:	89bb      	ldrh	r3, [r7, #12]
 80068a0:	3308      	adds	r3, #8
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	b21b      	sxth	r3, r3
 80068a6:	425a      	negs	r2, r3
 80068a8:	f003 0307 	and.w	r3, r3, #7
 80068ac:	f002 0207 	and.w	r2, r2, #7
 80068b0:	bf58      	it	pl
 80068b2:	4253      	negpl	r3, r2
 80068b4:	b21b      	sxth	r3, r3
 80068b6:	81bb      	strh	r3, [r7, #12]


	Hitachi_prms_st[Source_Index].Msg_Status_Flag = ExtractBits(ucBit, 16, (unsigned char *)&Buff[ucByte]);
 80068b8:	89fb      	ldrh	r3, [r7, #14]
 80068ba:	687a      	ldr	r2, [r7, #4]
 80068bc:	441a      	add	r2, r3
 80068be:	89bb      	ldrh	r3, [r7, #12]
 80068c0:	2110      	movs	r1, #16
 80068c2:	4618      	mov	r0, r3
 80068c4:	f7f9 fea6 	bl	8000614 <ExtractBits>
 80068c8:	4602      	mov	r2, r0
 80068ca:	78bb      	ldrb	r3, [r7, #2]
 80068cc:	b291      	uxth	r1, r2
 80068ce:	4a30      	ldr	r2, [pc, #192]	; (8006990 <Service_Msg_Extr+0x360>)
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	4413      	add	r3, r2
 80068d4:	3304      	adds	r3, #4
 80068d6:	460a      	mov	r2, r1
 80068d8:	801a      	strh	r2, [r3, #0]

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 80068da:	492e      	ldr	r1, [pc, #184]	; (8006994 <Service_Msg_Extr+0x364>)
 80068dc:	482e      	ldr	r0, [pc, #184]	; (8006998 <Service_Msg_Extr+0x368>)
 80068de:	f7f9 fcaf 	bl	8000240 <strcmp>
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10f      	bne.n	8006908 <Service_Msg_Extr+0x2d8>
	{
		SET_BIT_USER(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag);
 80068e8:	78bb      	ldrb	r3, [r7, #2]
 80068ea:	4a29      	ldr	r2, [pc, #164]	; (8006990 <Service_Msg_Extr+0x360>)
 80068ec:	011b      	lsls	r3, r3, #4
 80068ee:	4413      	add	r3, r2
 80068f0:	3304      	adds	r3, #4
 80068f2:	881a      	ldrh	r2, [r3, #0]
 80068f4:	78bb      	ldrb	r3, [r7, #2]
 80068f6:	f042 0208 	orr.w	r2, r2, #8
 80068fa:	b291      	uxth	r1, r2
 80068fc:	4a24      	ldr	r2, [pc, #144]	; (8006990 <Service_Msg_Extr+0x360>)
 80068fe:	011b      	lsls	r3, r3, #4
 8006900:	4413      	add	r3, r2
 8006902:	3304      	adds	r3, #4
 8006904:	460a      	mov	r2, r1
 8006906:	801a      	strh	r2, [r3, #0]
	}

	//printf("Msg_Flag           :0x%04X\n", Hitachi_prms_st[Source_Index].Msg_Status_Flag);
	BITSTUFFINC(16);
 8006908:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800690c:	3310      	adds	r3, #16
 800690e:	2b00      	cmp	r3, #0
 8006910:	da00      	bge.n	8006914 <Service_Msg_Extr+0x2e4>
 8006912:	3307      	adds	r3, #7
 8006914:	10db      	asrs	r3, r3, #3
 8006916:	b29a      	uxth	r2, r3
 8006918:	89fb      	ldrh	r3, [r7, #14]
 800691a:	4413      	add	r3, r2
 800691c:	81fb      	strh	r3, [r7, #14]
 800691e:	89bb      	ldrh	r3, [r7, #12]
 8006920:	3310      	adds	r3, #16
 8006922:	b29b      	uxth	r3, r3
 8006924:	b21b      	sxth	r3, r3
 8006926:	425a      	negs	r2, r3
 8006928:	f003 0307 	and.w	r3, r3, #7
 800692c:	f002 0207 	and.w	r2, r2, #7
 8006930:	bf58      	it	pl
 8006932:	4253      	negpl	r3, r2
 8006934:	b21b      	sxth	r3, r3
 8006936:	81bb      	strh	r3, [r7, #12]

	//Debug_Status_Flag(Hitachi_prms_st[Source_Index].Msg_Status_Flag,Hitachi_Service_st[Source_Index].Msg_Type);

	if ( SET == CHECKFLAG(TIME_STAMP,Hitachi_prms_st[Source_Index].Msg_Status_Flag) ) // Time-stamp Extraction
 8006938:	78bb      	ldrb	r3, [r7, #2]
 800693a:	4a15      	ldr	r2, [pc, #84]	; (8006990 <Service_Msg_Extr+0x360>)
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	4413      	add	r3, r2
 8006940:	3304      	adds	r3, #4
 8006942:	881b      	ldrh	r3, [r3, #0]
 8006944:	f003 0320 	and.w	r3, r3, #32
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 812b 	beq.w	8006ba4 <Service_Msg_Extr+0x574>
	{
		HITACHI_time_Stamp_st[Source_Index].YY = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 800694e:	89fb      	ldrh	r3, [r7, #14]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	441a      	add	r2, r3
 8006954:	89bb      	ldrh	r3, [r7, #12]
 8006956:	2108      	movs	r1, #8
 8006958:	4618      	mov	r0, r3
 800695a:	f7f9 fe5b 	bl	8000614 <ExtractBits>
 800695e:	4603      	mov	r3, r0
 8006960:	78ba      	ldrb	r2, [r7, #2]
 8006962:	b2d8      	uxtb	r0, r3
 8006964:	490d      	ldr	r1, [pc, #52]	; (800699c <Service_Msg_Extr+0x36c>)
 8006966:	4613      	mov	r3, r2
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	4413      	add	r3, r2
 800696c:	005b      	lsls	r3, r3, #1
 800696e:	440b      	add	r3, r1
 8006970:	3305      	adds	r3, #5
 8006972:	4602      	mov	r2, r0
 8006974:	701a      	strb	r2, [r3, #0]
		//printf("YEAR               :%02X\n", HITACHI_time_Stamp_st[Source_Index].YY);
		BITSTUFFINC(8);
 8006976:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800697a:	3308      	adds	r3, #8
 800697c:	2b00      	cmp	r3, #0
 800697e:	da0f      	bge.n	80069a0 <Service_Msg_Extr+0x370>
 8006980:	3307      	adds	r3, #7
 8006982:	e00d      	b.n	80069a0 <Service_Msg_Extr+0x370>
 8006984:	20000fa4 	.word	0x20000fa4
 8006988:	20000fcc 	.word	0x20000fcc
 800698c:	20001584 	.word	0x20001584
 8006990:	200011c4 	.word	0x200011c4
 8006994:	08023a58 	.word	0x08023a58
 8006998:	20000305 	.word	0x20000305
 800699c:	20001188 	.word	0x20001188
 80069a0:	10db      	asrs	r3, r3, #3
 80069a2:	b29a      	uxth	r2, r3
 80069a4:	89fb      	ldrh	r3, [r7, #14]
 80069a6:	4413      	add	r3, r2
 80069a8:	81fb      	strh	r3, [r7, #14]
 80069aa:	89bb      	ldrh	r3, [r7, #12]
 80069ac:	3308      	adds	r3, #8
 80069ae:	b29b      	uxth	r3, r3
 80069b0:	b21b      	sxth	r3, r3
 80069b2:	425a      	negs	r2, r3
 80069b4:	f003 0307 	and.w	r3, r3, #7
 80069b8:	f002 0207 	and.w	r2, r2, #7
 80069bc:	bf58      	it	pl
 80069be:	4253      	negpl	r3, r2
 80069c0:	b21b      	sxth	r3, r3
 80069c2:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].MM = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 80069c4:	89fb      	ldrh	r3, [r7, #14]
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	441a      	add	r2, r3
 80069ca:	89bb      	ldrh	r3, [r7, #12]
 80069cc:	2108      	movs	r1, #8
 80069ce:	4618      	mov	r0, r3
 80069d0:	f7f9 fe20 	bl	8000614 <ExtractBits>
 80069d4:	4603      	mov	r3, r0
 80069d6:	78ba      	ldrb	r2, [r7, #2]
 80069d8:	b2d8      	uxtb	r0, r3
 80069da:	496e      	ldr	r1, [pc, #440]	; (8006b94 <Service_Msg_Extr+0x564>)
 80069dc:	4613      	mov	r3, r2
 80069de:	005b      	lsls	r3, r3, #1
 80069e0:	4413      	add	r3, r2
 80069e2:	005b      	lsls	r3, r3, #1
 80069e4:	440b      	add	r3, r1
 80069e6:	3304      	adds	r3, #4
 80069e8:	4602      	mov	r2, r0
 80069ea:	701a      	strb	r2, [r3, #0]
		//printf("Month              :%02X\n", HITACHI_time_Stamp_st[Source_Index].MM);
		BITSTUFFINC(8);
 80069ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80069f0:	3308      	adds	r3, #8
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	da00      	bge.n	80069f8 <Service_Msg_Extr+0x3c8>
 80069f6:	3307      	adds	r3, #7
 80069f8:	10db      	asrs	r3, r3, #3
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	89fb      	ldrh	r3, [r7, #14]
 80069fe:	4413      	add	r3, r2
 8006a00:	81fb      	strh	r3, [r7, #14]
 8006a02:	89bb      	ldrh	r3, [r7, #12]
 8006a04:	3308      	adds	r3, #8
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	b21b      	sxth	r3, r3
 8006a0a:	425a      	negs	r2, r3
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	f002 0207 	and.w	r2, r2, #7
 8006a14:	bf58      	it	pl
 8006a16:	4253      	negpl	r3, r2
 8006a18:	b21b      	sxth	r3, r3
 8006a1a:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].DD = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a1c:	89fb      	ldrh	r3, [r7, #14]
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	441a      	add	r2, r3
 8006a22:	89bb      	ldrh	r3, [r7, #12]
 8006a24:	2108      	movs	r1, #8
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7f9 fdf4 	bl	8000614 <ExtractBits>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	78ba      	ldrb	r2, [r7, #2]
 8006a30:	b2d8      	uxtb	r0, r3
 8006a32:	4958      	ldr	r1, [pc, #352]	; (8006b94 <Service_Msg_Extr+0x564>)
 8006a34:	4613      	mov	r3, r2
 8006a36:	005b      	lsls	r3, r3, #1
 8006a38:	4413      	add	r3, r2
 8006a3a:	005b      	lsls	r3, r3, #1
 8006a3c:	440b      	add	r3, r1
 8006a3e:	3303      	adds	r3, #3
 8006a40:	4602      	mov	r2, r0
 8006a42:	701a      	strb	r2, [r3, #0]
		//printf("Date               :%02X\n", HITACHI_time_Stamp_st[Source_Index].DD);
		BITSTUFFINC(8);
 8006a44:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a48:	3308      	adds	r3, #8
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	da00      	bge.n	8006a50 <Service_Msg_Extr+0x420>
 8006a4e:	3307      	adds	r3, #7
 8006a50:	10db      	asrs	r3, r3, #3
 8006a52:	b29a      	uxth	r2, r3
 8006a54:	89fb      	ldrh	r3, [r7, #14]
 8006a56:	4413      	add	r3, r2
 8006a58:	81fb      	strh	r3, [r7, #14]
 8006a5a:	89bb      	ldrh	r3, [r7, #12]
 8006a5c:	3308      	adds	r3, #8
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	b21b      	sxth	r3, r3
 8006a62:	425a      	negs	r2, r3
 8006a64:	f003 0307 	and.w	r3, r3, #7
 8006a68:	f002 0207 	and.w	r2, r2, #7
 8006a6c:	bf58      	it	pl
 8006a6e:	4253      	negpl	r3, r2
 8006a70:	b21b      	sxth	r3, r3
 8006a72:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].hh = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006a74:	89fb      	ldrh	r3, [r7, #14]
 8006a76:	687a      	ldr	r2, [r7, #4]
 8006a78:	441a      	add	r2, r3
 8006a7a:	89bb      	ldrh	r3, [r7, #12]
 8006a7c:	2108      	movs	r1, #8
 8006a7e:	4618      	mov	r0, r3
 8006a80:	f7f9 fdc8 	bl	8000614 <ExtractBits>
 8006a84:	4603      	mov	r3, r0
 8006a86:	78ba      	ldrb	r2, [r7, #2]
 8006a88:	b2d8      	uxtb	r0, r3
 8006a8a:	4942      	ldr	r1, [pc, #264]	; (8006b94 <Service_Msg_Extr+0x564>)
 8006a8c:	4613      	mov	r3, r2
 8006a8e:	005b      	lsls	r3, r3, #1
 8006a90:	4413      	add	r3, r2
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	440b      	add	r3, r1
 8006a96:	4602      	mov	r2, r0
 8006a98:	701a      	strb	r2, [r3, #0]
		//printf("Hour               :%02X\n", HITACHI_time_Stamp_st[Source_Index].hh);
		BITSTUFFINC(8);
 8006a9a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006a9e:	3308      	adds	r3, #8
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	da00      	bge.n	8006aa6 <Service_Msg_Extr+0x476>
 8006aa4:	3307      	adds	r3, #7
 8006aa6:	10db      	asrs	r3, r3, #3
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	89fb      	ldrh	r3, [r7, #14]
 8006aac:	4413      	add	r3, r2
 8006aae:	81fb      	strh	r3, [r7, #14]
 8006ab0:	89bb      	ldrh	r3, [r7, #12]
 8006ab2:	3308      	adds	r3, #8
 8006ab4:	b29b      	uxth	r3, r3
 8006ab6:	b21b      	sxth	r3, r3
 8006ab8:	425a      	negs	r2, r3
 8006aba:	f003 0307 	and.w	r3, r3, #7
 8006abe:	f002 0207 	and.w	r2, r2, #7
 8006ac2:	bf58      	it	pl
 8006ac4:	4253      	negpl	r3, r2
 8006ac6:	b21b      	sxth	r3, r3
 8006ac8:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].mm = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006aca:	89fb      	ldrh	r3, [r7, #14]
 8006acc:	687a      	ldr	r2, [r7, #4]
 8006ace:	441a      	add	r2, r3
 8006ad0:	89bb      	ldrh	r3, [r7, #12]
 8006ad2:	2108      	movs	r1, #8
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7f9 fd9d 	bl	8000614 <ExtractBits>
 8006ada:	4603      	mov	r3, r0
 8006adc:	78ba      	ldrb	r2, [r7, #2]
 8006ade:	b2d8      	uxtb	r0, r3
 8006ae0:	492c      	ldr	r1, [pc, #176]	; (8006b94 <Service_Msg_Extr+0x564>)
 8006ae2:	4613      	mov	r3, r2
 8006ae4:	005b      	lsls	r3, r3, #1
 8006ae6:	4413      	add	r3, r2
 8006ae8:	005b      	lsls	r3, r3, #1
 8006aea:	440b      	add	r3, r1
 8006aec:	3301      	adds	r3, #1
 8006aee:	4602      	mov	r2, r0
 8006af0:	701a      	strb	r2, [r3, #0]
		//printf("Minutes            :%02X\n", HITACHI_time_Stamp_st[Source_Index].mm);
		BITSTUFFINC(8);
 8006af2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006af6:	3308      	adds	r3, #8
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	da00      	bge.n	8006afe <Service_Msg_Extr+0x4ce>
 8006afc:	3307      	adds	r3, #7
 8006afe:	10db      	asrs	r3, r3, #3
 8006b00:	b29a      	uxth	r2, r3
 8006b02:	89fb      	ldrh	r3, [r7, #14]
 8006b04:	4413      	add	r3, r2
 8006b06:	81fb      	strh	r3, [r7, #14]
 8006b08:	89bb      	ldrh	r3, [r7, #12]
 8006b0a:	3308      	adds	r3, #8
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	b21b      	sxth	r3, r3
 8006b10:	425a      	negs	r2, r3
 8006b12:	f003 0307 	and.w	r3, r3, #7
 8006b16:	f002 0207 	and.w	r2, r2, #7
 8006b1a:	bf58      	it	pl
 8006b1c:	4253      	negpl	r3, r2
 8006b1e:	b21b      	sxth	r3, r3
 8006b20:	81bb      	strh	r3, [r7, #12]

		HITACHI_time_Stamp_st[Source_Index].ss = ExtractBits(ucBit, 8, (unsigned char *)&Buff[ucByte]);
 8006b22:	89fb      	ldrh	r3, [r7, #14]
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	441a      	add	r2, r3
 8006b28:	89bb      	ldrh	r3, [r7, #12]
 8006b2a:	2108      	movs	r1, #8
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7f9 fd71 	bl	8000614 <ExtractBits>
 8006b32:	4603      	mov	r3, r0
 8006b34:	78ba      	ldrb	r2, [r7, #2]
 8006b36:	b2d8      	uxtb	r0, r3
 8006b38:	4916      	ldr	r1, [pc, #88]	; (8006b94 <Service_Msg_Extr+0x564>)
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	005b      	lsls	r3, r3, #1
 8006b3e:	4413      	add	r3, r2
 8006b40:	005b      	lsls	r3, r3, #1
 8006b42:	440b      	add	r3, r1
 8006b44:	3302      	adds	r3, #2
 8006b46:	4602      	mov	r2, r0
 8006b48:	701a      	strb	r2, [r3, #0]
		//printf("Seconds            :%02X\n", HITACHI_time_Stamp_st[Source_Index].ss);
		BITSTUFFINC(8);
 8006b4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8006b4e:	3308      	adds	r3, #8
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	da00      	bge.n	8006b56 <Service_Msg_Extr+0x526>
 8006b54:	3307      	adds	r3, #7
 8006b56:	10db      	asrs	r3, r3, #3
 8006b58:	b29a      	uxth	r2, r3
 8006b5a:	89fb      	ldrh	r3, [r7, #14]
 8006b5c:	4413      	add	r3, r2
 8006b5e:	81fb      	strh	r3, [r7, #14]
 8006b60:	89bb      	ldrh	r3, [r7, #12]
 8006b62:	3308      	adds	r3, #8
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	b21b      	sxth	r3, r3
 8006b68:	425a      	negs	r2, r3
 8006b6a:	f003 0307 	and.w	r3, r3, #7
 8006b6e:	f002 0207 	and.w	r2, r2, #7
 8006b72:	bf58      	it	pl
 8006b74:	4253      	negpl	r3, r2
 8006b76:	b21b      	sxth	r3, r3
 8006b78:	81bb      	strh	r3, [r7, #12]


		(IS_MLK_EIPC_TIME_MATCHING(Source_Index))?(Change_MLK_TIME[Source_Index]=0):(Change_MLK_TIME[Source_Index]=1);
 8006b7a:	78bb      	ldrb	r3, [r7, #2]
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	f001 fe65 	bl	800884c <IS_MLK_EIPC_TIME_MATCHING>
 8006b82:	4603      	mov	r3, r0
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d009      	beq.n	8006b9c <Service_Msg_Extr+0x56c>
 8006b88:	78bb      	ldrb	r3, [r7, #2]
 8006b8a:	4a03      	ldr	r2, [pc, #12]	; (8006b98 <Service_Msg_Extr+0x568>)
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	54d1      	strb	r1, [r2, r3]
 8006b90:	e008      	b.n	8006ba4 <Service_Msg_Extr+0x574>
 8006b92:	bf00      	nop
 8006b94:	20001188 	.word	0x20001188
 8006b98:	200010d8 	.word	0x200010d8
 8006b9c:	78bb      	ldrb	r3, [r7, #2]
 8006b9e:	4a94      	ldr	r2, [pc, #592]	; (8006df0 <Service_Msg_Extr+0x7c0>)
 8006ba0:	2101      	movs	r1, #1
 8006ba2:	54d1      	strb	r1, [r2, r3]

	}
	if ( ( SET == (CHECKFLAG(LINK_ESTABLISHED,Hitachi_prms_st[Source_Index].Msg_Status_Flag))) )
 8006ba4:	78bb      	ldrb	r3, [r7, #2]
 8006ba6:	4a93      	ldr	r2, [pc, #588]	; (8006df4 <Service_Msg_Extr+0x7c4>)
 8006ba8:	011b      	lsls	r3, r3, #4
 8006baa:	4413      	add	r3, r2
 8006bac:	3304      	adds	r3, #4
 8006bae:	881b      	ldrh	r3, [r3, #0]
 8006bb0:	f003 0308 	and.w	r3, r3, #8
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d001      	beq.n	8006bbc <Service_Msg_Extr+0x58c>
	{
		LinkEstablishFlag = SET;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	77fb      	strb	r3, [r7, #31]
	}

	/* Preparing and Sending Reply */
	Send_Status_Message(Source_Index, Des_Index);
 8006bbc:	787a      	ldrb	r2, [r7, #1]
 8006bbe:	78bb      	ldrb	r3, [r7, #2]
 8006bc0:	4611      	mov	r1, r2
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7ff f8d0 	bl	8005d68 <Send_Status_Message>


	/*	Checking whether the Link is Established or Not
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */
	if (LinkEstablishFlag == SET )
 8006bc8:	7ffb      	ldrb	r3, [r7, #31]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d179      	bne.n	8006cc2 <Service_Msg_Extr+0x692>
	{
		memset(&Main_Relays_st[Source_Index].RelayIPS_Buff,0,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006bce:	78ba      	ldrb	r2, [r7, #2]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	4a87      	ldr	r2, [pc, #540]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006bda:	4413      	add	r3, r2
 8006bdc:	3301      	adds	r3, #1
 8006bde:	2210      	movs	r2, #16
 8006be0:	2100      	movs	r1, #0
 8006be2:	4618      	mov	r0, r3
 8006be4:	f01b fa7a 	bl	80220dc <memset>
		memcpy(&Main_Relays_st[Source_Index],&Relays_st[Source_Index],sizeof(Relays_st[Source_Index]));
 8006be8:	78ba      	ldrb	r2, [r7, #2]
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a81      	ldr	r2, [pc, #516]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006bf4:	1898      	adds	r0, r3, r2
 8006bf6:	78ba      	ldrb	r2, [r7, #2]
 8006bf8:	4613      	mov	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	4413      	add	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4a7e      	ldr	r2, [pc, #504]	; (8006dfc <Service_Msg_Extr+0x7cc>)
 8006c02:	4413      	add	r3, r2
 8006c04:	2214      	movs	r2, #20
 8006c06:	4619      	mov	r1, r3
 8006c08:	f01b fa40 	bl	802208c <memcpy>

		if(Prev_Relay_CRC[Source_Index] != Main_Relays_st[Source_Index].RelayIPS_CRC)
 8006c0c:	78bb      	ldrb	r3, [r7, #2]
 8006c0e:	4a7c      	ldr	r2, [pc, #496]	; (8006e00 <Service_Msg_Extr+0x7d0>)
 8006c10:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8006c14:	78ba      	ldrb	r2, [r7, #2]
 8006c16:	4878      	ldr	r0, [pc, #480]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006c18:	4613      	mov	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	4413      	add	r3, r2
 8006c1e:	009b      	lsls	r3, r3, #2
 8006c20:	4403      	add	r3, r0
 8006c22:	3312      	adds	r3, #18
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	4299      	cmp	r1, r3
 8006c28:	d04b      	beq.n	8006cc2 <Service_Msg_Extr+0x692>
		{
			Prev_Relay_CRC[Source_Index] = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c2a:	78ba      	ldrb	r2, [r7, #2]
 8006c2c:	78b9      	ldrb	r1, [r7, #2]
 8006c2e:	4872      	ldr	r0, [pc, #456]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006c30:	4613      	mov	r3, r2
 8006c32:	009b      	lsls	r3, r3, #2
 8006c34:	4413      	add	r3, r2
 8006c36:	009b      	lsls	r3, r3, #2
 8006c38:	4403      	add	r3, r0
 8006c3a:	3312      	adds	r3, #18
 8006c3c:	881a      	ldrh	r2, [r3, #0]
 8006c3e:	4b70      	ldr	r3, [pc, #448]	; (8006e00 <Service_Msg_Extr+0x7d0>)
 8006c40:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
			memset(&Tx_Temp_Main_Relays_st,0,sizeof(Tx_Temp_Main_Relays_st));
 8006c44:	2214      	movs	r2, #20
 8006c46:	2100      	movs	r1, #0
 8006c48:	486e      	ldr	r0, [pc, #440]	; (8006e04 <Service_Msg_Extr+0x7d4>)
 8006c4a:	f01b fa47 	bl	80220dc <memset>
			memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Source_Index],sizeof(Tx_Temp_Main_Relays_st));
 8006c4e:	78ba      	ldrb	r2, [r7, #2]
 8006c50:	4613      	mov	r3, r2
 8006c52:	009b      	lsls	r3, r3, #2
 8006c54:	4413      	add	r3, r2
 8006c56:	009b      	lsls	r3, r3, #2
 8006c58:	4a67      	ldr	r2, [pc, #412]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006c5a:	4413      	add	r3, r2
 8006c5c:	2214      	movs	r2, #20
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4868      	ldr	r0, [pc, #416]	; (8006e04 <Service_Msg_Extr+0x7d4>)
 8006c62:	f01b fa13 	bl	802208c <memcpy>

#ifdef EI_1
			TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
			TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8006c66:	f44f 7002 	mov.w	r0, #520	; 0x208
 8006c6a:	f008 fb3f 	bl	800f2ec <TransmitCanPkt>
#endif

			Tx_Ei_self_sharing_st[Source_Index].VITAL_DATA_CRC = Main_Relays_st[Source_Index].RelayIPS_CRC;
 8006c6e:	78b9      	ldrb	r1, [r7, #2]
 8006c70:	78ba      	ldrb	r2, [r7, #2]
 8006c72:	4861      	ldr	r0, [pc, #388]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006c74:	460b      	mov	r3, r1
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	440b      	add	r3, r1
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4403      	add	r3, r0
 8006c7e:	3312      	adds	r3, #18
 8006c80:	8818      	ldrh	r0, [r3, #0]
 8006c82:	4961      	ldr	r1, [pc, #388]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006c84:	4613      	mov	r3, r2
 8006c86:	005b      	lsls	r3, r3, #1
 8006c88:	4413      	add	r3, r2
 8006c8a:	00db      	lsls	r3, r3, #3
 8006c8c:	440b      	add	r3, r1
 8006c8e:	3306      	adds	r3, #6
 8006c90:	4602      	mov	r2, r0
 8006c92:	801a      	strh	r2, [r3, #0]

			if(MisMatchFlag[Source_Index] == 0)
 8006c94:	78bb      	ldrb	r3, [r7, #2]
 8006c96:	4a5d      	ldr	r2, [pc, #372]	; (8006e0c <Service_Msg_Extr+0x7dc>)
 8006c98:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d110      	bne.n	8006cc2 <Service_Msg_Extr+0x692>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Source_Index * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Source_Index].RelayIPS_Buff,sizeof(Main_Relays_st[Source_Index].RelayIPS_Buff));
 8006ca0:	78bb      	ldrb	r3, [r7, #2]
 8006ca2:	011b      	lsls	r3, r3, #4
 8006ca4:	4a5a      	ldr	r2, [pc, #360]	; (8006e10 <Service_Msg_Extr+0x7e0>)
 8006ca6:	4413      	add	r3, r2
 8006ca8:	1c98      	adds	r0, r3, #2
 8006caa:	78ba      	ldrb	r2, [r7, #2]
 8006cac:	4613      	mov	r3, r2
 8006cae:	009b      	lsls	r3, r3, #2
 8006cb0:	4413      	add	r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	4a50      	ldr	r2, [pc, #320]	; (8006df8 <Service_Msg_Extr+0x7c8>)
 8006cb6:	4413      	add	r3, r2
 8006cb8:	3301      	adds	r3, #1
 8006cba:	2210      	movs	r2, #16
 8006cbc:	4619      	mov	r1, r3
 8006cbe:	f01b f9e5 	bl	802208c <memcpy>
	 *	If Link is Established and CRC's Differ then only Copy to Main Buffer & Send to other EIPC
	 */


	/* Sending Information to Other card */
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_CRC = Recv_CRC;
 8006cc2:	78ba      	ldrb	r2, [r7, #2]
 8006cc4:	4950      	ldr	r1, [pc, #320]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006cc6:	4613      	mov	r3, r2
 8006cc8:	005b      	lsls	r3, r3, #1
 8006cca:	4413      	add	r3, r2
 8006ccc:	00db      	lsls	r3, r3, #3
 8006cce:	440b      	add	r3, r1
 8006cd0:	3314      	adds	r3, #20
 8006cd2:	697a      	ldr	r2, [r7, #20]
 8006cd4:	601a      	str	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Last_Recv_Msg_Type = SERVICEMSG;
 8006cd6:	78ba      	ldrb	r2, [r7, #2]
 8006cd8:	494b      	ldr	r1, [pc, #300]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006cda:	4613      	mov	r3, r2
 8006cdc:	005b      	lsls	r3, r3, #1
 8006cde:	4413      	add	r3, r2
 8006ce0:	00db      	lsls	r3, r3, #3
 8006ce2:	440b      	add	r3, r1
 8006ce4:	3305      	adds	r3, #5
 8006ce6:	2206      	movs	r2, #6
 8006ce8:	701a      	strb	r2, [r3, #0]

	Tx_Ei_self_sharing_st[Source_Index].Peer_Index = Source_Index;
 8006cea:	78ba      	ldrb	r2, [r7, #2]
 8006cec:	4946      	ldr	r1, [pc, #280]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006cee:	4613      	mov	r3, r2
 8006cf0:	005b      	lsls	r3, r3, #1
 8006cf2:	4413      	add	r3, r2
 8006cf4:	00db      	lsls	r3, r3, #3
 8006cf6:	440b      	add	r3, r1
 8006cf8:	78ba      	ldrb	r2, [r7, #2]
 8006cfa:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = RECEIVED;
 8006cfc:	78ba      	ldrb	r2, [r7, #2]
 8006cfe:	4942      	ldr	r1, [pc, #264]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006d00:	4613      	mov	r3, r2
 8006d02:	005b      	lsls	r3, r3, #1
 8006d04:	4413      	add	r3, r2
 8006d06:	00db      	lsls	r3, r3, #3
 8006d08:	440b      	add	r3, r1
 8006d0a:	3301      	adds	r3, #1
 8006d0c:	2201      	movs	r2, #1
 8006d0e:	701a      	strb	r2, [r3, #0]
	Tx_Ei_self_sharing_st[Source_Index].LinkEstablishFlag = LinkEstablishFlag;
 8006d10:	78ba      	ldrb	r2, [r7, #2]
 8006d12:	493d      	ldr	r1, [pc, #244]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006d14:	4613      	mov	r3, r2
 8006d16:	005b      	lsls	r3, r3, #1
 8006d18:	4413      	add	r3, r2
 8006d1a:	00db      	lsls	r3, r3, #3
 8006d1c:	440b      	add	r3, r1
 8006d1e:	3302      	adds	r3, #2
 8006d20:	7ffa      	ldrb	r2, [r7, #31]
 8006d22:	701a      	strb	r2, [r3, #0]
	memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8006d24:	2218      	movs	r2, #24
 8006d26:	2100      	movs	r1, #0
 8006d28:	483a      	ldr	r0, [pc, #232]	; (8006e14 <Service_Msg_Extr+0x7e4>)
 8006d2a:	f01b f9d7 	bl	80220dc <memset>
	memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Source_Index],sizeof(EI_SELF_SHARING_t));
 8006d2e:	78ba      	ldrb	r2, [r7, #2]
 8006d30:	4613      	mov	r3, r2
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	4413      	add	r3, r2
 8006d36:	00db      	lsls	r3, r3, #3
 8006d38:	4a33      	ldr	r2, [pc, #204]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006d3a:	4413      	add	r3, r2
 8006d3c:	2218      	movs	r2, #24
 8006d3e:	4619      	mov	r1, r3
 8006d40:	4834      	ldr	r0, [pc, #208]	; (8006e14 <Service_Msg_Extr+0x7e4>)
 8006d42:	f01b f9a3 	bl	802208c <memcpy>
#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 8006d46:	f240 2002 	movw	r0, #514	; 0x202
 8006d4a:	f008 facf 	bl	800f2ec <TransmitCanPkt>
#endif
	Tx_Ei_self_sharing_st[Source_Index].Msg_Rcv_Flag = NOT_RECEIVED;
 8006d4e:	78ba      	ldrb	r2, [r7, #2]
 8006d50:	492d      	ldr	r1, [pc, #180]	; (8006e08 <Service_Msg_Extr+0x7d8>)
 8006d52:	4613      	mov	r3, r2
 8006d54:	005b      	lsls	r3, r3, #1
 8006d56:	4413      	add	r3, r2
 8006d58:	00db      	lsls	r3, r3, #3
 8006d5a:	440b      	add	r3, r1
 8006d5c:	3301      	adds	r3, #1
 8006d5e:	2200      	movs	r2, #0
 8006d60:	701a      	strb	r2, [r3, #0]
	Self_Sharing_CAN_Clk[Source_Index] = Ticks;
 8006d62:	78bb      	ldrb	r3, [r7, #2]
 8006d64:	492c      	ldr	r1, [pc, #176]	; (8006e18 <Service_Msg_Extr+0x7e8>)
 8006d66:	693a      	ldr	r2, [r7, #16]
 8006d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	/* Sending Information to Other card */


	/*	Checking Link Status */
	if( LinkEstablishFlag == SET)
 8006d6c:	7ffb      	ldrb	r3, [r7, #31]
 8006d6e:	2b01      	cmp	r3, #1
 8006d70:	d11d      	bne.n	8006dae <Service_Msg_Extr+0x77e>
	{
		Link_Establish_Clock[Source_Index] = Ticks;
 8006d72:	78bb      	ldrb	r3, [r7, #2]
 8006d74:	4929      	ldr	r1, [pc, #164]	; (8006e1c <Service_Msg_Extr+0x7ec>)
 8006d76:	693a      	ldr	r2, [r7, #16]
 8006d78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Link_Flag[Source_Index] = SET;
 8006d7c:	78bb      	ldrb	r3, [r7, #2]
 8006d7e:	4a28      	ldr	r2, [pc, #160]	; (8006e20 <Service_Msg_Extr+0x7f0>)
 8006d80:	2101      	movs	r1, #1
 8006d82:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = SET;
 8006d84:	78ba      	ldrb	r2, [r7, #2]
 8006d86:	4927      	ldr	r1, [pc, #156]	; (8006e24 <Service_Msg_Extr+0x7f4>)
 8006d88:	4613      	mov	r3, r2
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	4413      	add	r3, r2
 8006d8e:	009b      	lsls	r3, r3, #2
 8006d90:	440b      	add	r3, r1
 8006d92:	3301      	adds	r3, #1
 8006d94:	2201      	movs	r2, #1
 8006d96:	701a      	strb	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishClk = Ticks;
 8006d98:	78ba      	ldrb	r2, [r7, #2]
 8006d9a:	4922      	ldr	r1, [pc, #136]	; (8006e24 <Service_Msg_Extr+0x7f4>)
 8006d9c:	4613      	mov	r3, r2
 8006d9e:	005b      	lsls	r3, r3, #1
 8006da0:	4413      	add	r3, r2
 8006da2:	009b      	lsls	r3, r3, #2
 8006da4:	440b      	add	r3, r1
 8006da6:	3304      	adds	r3, #4
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	601a      	str	r2, [r3, #0]
 8006dac:	e017      	b.n	8006dde <Service_Msg_Extr+0x7ae>
	}
	else
	{
		Link_Flag[Source_Index] = CLEAR;
 8006dae:	78bb      	ldrb	r3, [r7, #2]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	; (8006e20 <Service_Msg_Extr+0x7f0>)
 8006db2:	2100      	movs	r1, #0
 8006db4:	54d1      	strb	r1, [r2, r3]
		Hitachi_clk_flags_st[Source_Index].Link_FailClk = Ticks;
 8006db6:	78ba      	ldrb	r2, [r7, #2]
 8006db8:	491a      	ldr	r1, [pc, #104]	; (8006e24 <Service_Msg_Extr+0x7f4>)
 8006dba:	4613      	mov	r3, r2
 8006dbc:	005b      	lsls	r3, r3, #1
 8006dbe:	4413      	add	r3, r2
 8006dc0:	009b      	lsls	r3, r3, #2
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3308      	adds	r3, #8
 8006dc6:	693a      	ldr	r2, [r7, #16]
 8006dc8:	601a      	str	r2, [r3, #0]
		Hitachi_clk_flags_st[Source_Index].Link_EstablishFlag = CLEAR;
 8006dca:	78ba      	ldrb	r2, [r7, #2]
 8006dcc:	4915      	ldr	r1, [pc, #84]	; (8006e24 <Service_Msg_Extr+0x7f4>)
 8006dce:	4613      	mov	r3, r2
 8006dd0:	005b      	lsls	r3, r3, #1
 8006dd2:	4413      	add	r3, r2
 8006dd4:	009b      	lsls	r3, r3, #2
 8006dd6:	440b      	add	r3, r1
 8006dd8:	3301      	adds	r3, #1
 8006dda:	2200      	movs	r2, #0
 8006ddc:	701a      	strb	r2, [r3, #0]
	}
	/*	Checking Link Status */

	HAL_GPIO_TogglePin(S1_LED_GPIO_Port, S1_LED_Pin);
 8006dde:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006de2:	4811      	ldr	r0, [pc, #68]	; (8006e28 <Service_Msg_Extr+0x7f8>)
 8006de4:	f010 ff41 	bl	8017c6a <HAL_GPIO_TogglePin>

}
 8006de8:	3720      	adds	r7, #32
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	200010d8 	.word	0x200010d8
 8006df4:	200011c4 	.word	0x200011c4
 8006df8:	20001e80 	.word	0x20001e80
 8006dfc:	20001db8 	.word	0x20001db8
 8006e00:	20000f00 	.word	0x20000f00
 8006e04:	20002010 	.word	0x20002010
 8006e08:	20001674 	.word	0x20001674
 8006e0c:	20000ec4 	.word	0x20000ec4
 8006e10:	200010e4 	.word	0x200010e4
 8006e14:	20001854 	.word	0x20001854
 8006e18:	20000e44 	.word	0x20000e44
 8006e1c:	20000f14 	.word	0x20000f14
 8006e20:	20000f64 	.word	0x20000f64
 8006e24:	20001cc8 	.word	0x20001cc8
 8006e28:	40021c00 	.word	0x40021c00

08006e2c <Send_Service_Signal_Message>:

void Send_Service_Signal_Message(uint8_t Source_Index,uint8_t Des_Index)
{
 8006e2c:	b590      	push	{r4, r7, lr}
 8006e2e:	b095      	sub	sp, #84	; 0x54
 8006e30:	af00      	add	r7, sp, #0
 8006e32:	4603      	mov	r3, r0
 8006e34:	460a      	mov	r2, r1
 8006e36:	71fb      	strb	r3, [r7, #7]
 8006e38:	4613      	mov	r3, r2
 8006e3a:	71bb      	strb	r3, [r7, #6]
	uint8_t Transmit_Buff[60] = {0,};
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	60fb      	str	r3, [r7, #12]
 8006e40:	f107 0310 	add.w	r3, r7, #16
 8006e44:	2238      	movs	r2, #56	; 0x38
 8006e46:	2100      	movs	r1, #0
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f01b f947 	bl	80220dc <memset>

	BITSTUFFINIT(0, 0);
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e54:	2300      	movs	r3, #0
 8006e56:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_SOM); //Destination Address
 8006e5a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e5e:	f107 020c 	add.w	r2, r7, #12
 8006e62:	441a      	add	r2, r3
 8006e64:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006e68:	23f4      	movs	r3, #244	; 0xf4
 8006e6a:	2108      	movs	r1, #8
 8006e6c:	f7f9 fc5e 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8006e70:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006e74:	3308      	adds	r3, #8
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	da00      	bge.n	8006e7c <Send_Service_Signal_Message+0x50>
 8006e7a:	3307      	adds	r3, #7
 8006e7c:	10db      	asrs	r3, r3, #3
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e84:	4413      	add	r3, r2
 8006e86:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006e8a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006e8e:	3308      	adds	r3, #8
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	b21b      	sxth	r3, r3
 8006e94:	425a      	negs	r2, r3
 8006e96:	f003 0307 	and.w	r3, r3, #7
 8006e9a:	f002 0207 	and.w	r2, r2, #7
 8006e9e:	bf58      	it	pl
 8006ea0:	4253      	negpl	r3, r2
 8006ea2:	b21b      	sxth	r3, r3
 8006ea4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]); //Destination Address
 8006ea8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006eac:	f107 020c 	add.w	r2, r7, #12
 8006eb0:	441a      	add	r2, r3
 8006eb2:	79fb      	ldrb	r3, [r7, #7]
 8006eb4:	497b      	ldr	r1, [pc, #492]	; (80070a4 <Send_Service_Signal_Message+0x278>)
 8006eb6:	3366      	adds	r3, #102	; 0x66
 8006eb8:	009b      	lsls	r3, r3, #2
 8006eba:	440b      	add	r3, r1
 8006ebc:	685b      	ldr	r3, [r3, #4]
 8006ebe:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006ec2:	2110      	movs	r1, #16
 8006ec4:	f7f9 fc32 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006ec8:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ecc:	3310      	adds	r3, #16
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	da00      	bge.n	8006ed4 <Send_Service_Signal_Message+0xa8>
 8006ed2:	3307      	adds	r3, #7
 8006ed4:	10db      	asrs	r3, r3, #3
 8006ed6:	b29a      	uxth	r2, r3
 8006ed8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006edc:	4413      	add	r3, r2
 8006ede:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006ee2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006ee6:	3310      	adds	r3, #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	b21b      	sxth	r3, r3
 8006eec:	425a      	negs	r2, r3
 8006eee:	f003 0307 	and.w	r3, r3, #7
 8006ef2:	f002 0207 	and.w	r2, r2, #7
 8006ef6:	bf58      	it	pl
 8006ef8:	4253      	negpl	r3, r2
 8006efa:	b21b      	sxth	r3, r3
 8006efc:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 16, &Transmit_Buff[ucByte], EI_data.Hitachi_st.DEST_ADDRESSES[Source_Index]); //Source Address
 8006f00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f04:	f107 020c 	add.w	r2, r7, #12
 8006f08:	441a      	add	r2, r3
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
 8006f0c:	4965      	ldr	r1, [pc, #404]	; (80070a4 <Send_Service_Signal_Message+0x278>)
 8006f0e:	3370      	adds	r3, #112	; 0x70
 8006f10:	009b      	lsls	r3, r3, #2
 8006f12:	440b      	add	r3, r1
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006f1a:	2110      	movs	r1, #16
 8006f1c:	f7f9 fc06 	bl	800072c <InsertBits>
	BITSTUFFINC(16);
 8006f20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006f24:	3310      	adds	r3, #16
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	da00      	bge.n	8006f2c <Send_Service_Signal_Message+0x100>
 8006f2a:	3307      	adds	r3, #7
 8006f2c:	10db      	asrs	r3, r3, #3
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f34:	4413      	add	r3, r2
 8006f36:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006f3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8006f3e:	3310      	adds	r3, #16
 8006f40:	b29b      	uxth	r3, r3
 8006f42:	b21b      	sxth	r3, r3
 8006f44:	425a      	negs	r2, r3
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	f002 0207 	and.w	r2, r2, #7
 8006f4e:	bf58      	it	pl
 8006f50:	4253      	negpl	r3, r2
 8006f52:	b21b      	sxth	r3, r3
 8006f54:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(2,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8006f58:	4b53      	ldr	r3, [pc, #332]	; (80070a8 <Send_Service_Signal_Message+0x27c>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	089b      	lsrs	r3, r3, #2
 8006f5e:	f003 0301 	and.w	r3, r3, #1
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d035      	beq.n	8006fd2 <Send_Service_Signal_Message+0x1a6>
 8006f66:	4b50      	ldr	r3, [pc, #320]	; (80070a8 <Send_Service_Signal_Message+0x27c>)
 8006f68:	791b      	ldrb	r3, [r3, #4]
 8006f6a:	79fa      	ldrb	r2, [r7, #7]
 8006f6c:	429a      	cmp	r2, r3
 8006f6e:	d130      	bne.n	8006fd2 <Send_Service_Signal_Message+0x1a6>
	{
		uint8_t Rand_number = 0;
 8006f70:	2300      	movs	r3, #0
 8006f72:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8006f76:	484d      	ldr	r0, [pc, #308]	; (80070ac <Send_Service_Signal_Message+0x280>)
 8006f78:	f012 fe40 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	4b4c      	ldr	r3, [pc, #304]	; (80070b0 <Send_Service_Signal_Message+0x284>)
 8006f80:	fba3 1302 	umull	r1, r3, r3, r2
 8006f84:	099b      	lsrs	r3, r3, #6
 8006f86:	21c8      	movs	r1, #200	; 0xc8
 8006f88:	fb01 f303 	mul.w	r3, r1, r3
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
#endif
		printf("Injected TX Sequence value failure\n");
 8006f92:	4848      	ldr	r0, [pc, #288]	; (80070b4 <Send_Service_Signal_Message+0x288>)
 8006f94:	f01b fa26 	bl	80223e4 <puts>
		printf("Actual TX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Tx_Seq);
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	4a47      	ldr	r2, [pc, #284]	; (80070b8 <Send_Service_Signal_Message+0x28c>)
 8006f9c:	011b      	lsls	r3, r3, #4
 8006f9e:	4413      	add	r3, r2
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	4845      	ldr	r0, [pc, #276]	; (80070bc <Send_Service_Signal_Message+0x290>)
 8006fa8:	f01b f980 	bl	80222ac <iprintf>
		printf("Injected TX Sequence Value:%u\n",Rand_number);
 8006fac:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fb0:	4619      	mov	r1, r3
 8006fb2:	4843      	ldr	r0, [pc, #268]	; (80070c0 <Send_Service_Signal_Message+0x294>)
 8006fb4:	f01b f97a 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // TX Seq Number
 8006fb8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fbc:	f107 020c 	add.w	r2, r7, #12
 8006fc0:	441a      	add	r2, r3
 8006fc2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8006fc6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006fca:	2108      	movs	r1, #8
 8006fcc:	f7f9 fbae 	bl	800072c <InsertBits>
	{
 8006fd0:	e00f      	b.n	8006ff2 <Send_Service_Signal_Message+0x1c6>
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Hitachi_prms_st[Source_Index].Tx_Seq); // TX Seq Number
 8006fd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006fd6:	f107 020c 	add.w	r2, r7, #12
 8006fda:	441a      	add	r2, r3
 8006fdc:	79fb      	ldrb	r3, [r7, #7]
 8006fde:	4936      	ldr	r1, [pc, #216]	; (80070b8 <Send_Service_Signal_Message+0x28c>)
 8006fe0:	011b      	lsls	r3, r3, #4
 8006fe2:	440b      	add	r3, r1
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8006fec:	2108      	movs	r1, #8
 8006fee:	f7f9 fb9d 	bl	800072c <InsertBits>
		//Last Received Packet Rx_seq number is our TX_Seq Number
	}
	//Last Received Packet Rx_seq number is our TX_Seq Number
	BITSTUFFINC(8);
 8006ff2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8006ff6:	3308      	adds	r3, #8
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	da00      	bge.n	8006ffe <Send_Service_Signal_Message+0x1d2>
 8006ffc:	3307      	adds	r3, #7
 8006ffe:	10db      	asrs	r3, r3, #3
 8007000:	b29a      	uxth	r2, r3
 8007002:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007006:	4413      	add	r3, r2
 8007008:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800700c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007010:	3308      	adds	r3, #8
 8007012:	b29b      	uxth	r3, r3
 8007014:	b21b      	sxth	r3, r3
 8007016:	425a      	negs	r2, r3
 8007018:	f003 0307 	and.w	r3, r3, #7
 800701c:	f002 0207 	and.w	r2, r2, #7
 8007020:	bf58      	it	pl
 8007022:	4253      	negpl	r3, r2
 8007024:	b21b      	sxth	r3, r3
 8007026:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( (CHECKFLAG(3,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 800702a:	4b1f      	ldr	r3, [pc, #124]	; (80070a8 <Send_Service_Signal_Message+0x27c>)
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	08db      	lsrs	r3, r3, #3
 8007030:	f003 0301 	and.w	r3, r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	d04b      	beq.n	80070d0 <Send_Service_Signal_Message+0x2a4>
 8007038:	4b1b      	ldr	r3, [pc, #108]	; (80070a8 <Send_Service_Signal_Message+0x27c>)
 800703a:	791b      	ldrb	r3, [r3, #4]
 800703c:	79fa      	ldrb	r2, [r7, #7]
 800703e:	429a      	cmp	r2, r3
 8007040:	d146      	bne.n	80070d0 <Send_Service_Signal_Message+0x2a4>
	{
		uint8_t Rand_number = 0;
 8007042:	2300      	movs	r3, #0
 8007044:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#ifdef STM_32
		Rand_number = (HAL_RNG_GetRandomNumber(&hrng) % 200);
 8007048:	4818      	ldr	r0, [pc, #96]	; (80070ac <Send_Service_Signal_Message+0x280>)
 800704a:	f012 fdd7 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800704e:	4602      	mov	r2, r0
 8007050:	4b17      	ldr	r3, [pc, #92]	; (80070b0 <Send_Service_Signal_Message+0x284>)
 8007052:	fba3 1302 	umull	r1, r3, r3, r2
 8007056:	099b      	lsrs	r3, r3, #6
 8007058:	21c8      	movs	r1, #200	; 0xc8
 800705a:	fb01 f303 	mul.w	r3, r1, r3
 800705e:	1ad3      	subs	r3, r2, r3
 8007060:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
#endif
		printf("Injected RX Sequence value failure\n");
 8007064:	4817      	ldr	r0, [pc, #92]	; (80070c4 <Send_Service_Signal_Message+0x298>)
 8007066:	f01b f9bd 	bl	80223e4 <puts>
		printf("Actual RX Sequence value:%u\n",Hitachi_prms_st[Source_Index].Rx_Seq);
 800706a:	79fb      	ldrb	r3, [r7, #7]
 800706c:	4a12      	ldr	r2, [pc, #72]	; (80070b8 <Send_Service_Signal_Message+0x28c>)
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	4413      	add	r3, r2
 8007072:	3302      	adds	r3, #2
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	4619      	mov	r1, r3
 8007078:	4813      	ldr	r0, [pc, #76]	; (80070c8 <Send_Service_Signal_Message+0x29c>)
 800707a:	f01b f917 	bl	80222ac <iprintf>
		printf("Injected RX Vital Init Value:%u\n",Rand_number);
 800707e:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007082:	4619      	mov	r1, r3
 8007084:	4811      	ldr	r0, [pc, #68]	; (80070cc <Send_Service_Signal_Message+0x2a0>)
 8007086:	f01b f911 	bl	80222ac <iprintf>
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], Rand_number); // Rx Seq Number
 800708a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800708e:	f107 020c 	add.w	r2, r7, #12
 8007092:	441a      	add	r2, r3
 8007094:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 8007098:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800709c:	2108      	movs	r1, #8
 800709e:	f7f9 fb45 	bl	800072c <InsertBits>
	{
 80070a2:	e033      	b.n	800710c <Send_Service_Signal_Message+0x2e0>
 80070a4:	20000304 	.word	0x20000304
 80070a8:	2000195c 	.word	0x2000195c
 80070ac:	20009c78 	.word	0x20009c78
 80070b0:	51eb851f 	.word	0x51eb851f
 80070b4:	08023e00 	.word	0x08023e00
 80070b8:	200011c4 	.word	0x200011c4
 80070bc:	080243a4 	.word	0x080243a4
 80070c0:	080243c4 	.word	0x080243c4
 80070c4:	08023e64 	.word	0x08023e64
 80070c8:	080243e4 	.word	0x080243e4
 80070cc:	08024404 	.word	0x08024404
	}
	else
	{
		InsertBits(ucBit, 8, &Transmit_Buff[ucByte], ++Hitachi_prms_st[Source_Index].Rx_Seq); // Rx Seq Number
 80070d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070d4:	f107 020c 	add.w	r2, r7, #12
 80070d8:	18d1      	adds	r1, r2, r3
 80070da:	79fb      	ldrb	r3, [r7, #7]
 80070dc:	484e      	ldr	r0, [pc, #312]	; (8007218 <Send_Service_Signal_Message+0x3ec>)
 80070de:	011a      	lsls	r2, r3, #4
 80070e0:	4402      	add	r2, r0
 80070e2:	3202      	adds	r2, #2
 80070e4:	7812      	ldrb	r2, [r2, #0]
 80070e6:	3201      	adds	r2, #1
 80070e8:	b2d4      	uxtb	r4, r2
 80070ea:	484b      	ldr	r0, [pc, #300]	; (8007218 <Send_Service_Signal_Message+0x3ec>)
 80070ec:	011a      	lsls	r2, r3, #4
 80070ee:	4402      	add	r2, r0
 80070f0:	3202      	adds	r2, #2
 80070f2:	4620      	mov	r0, r4
 80070f4:	7010      	strb	r0, [r2, #0]
 80070f6:	4a48      	ldr	r2, [pc, #288]	; (8007218 <Send_Service_Signal_Message+0x3ec>)
 80070f8:	011b      	lsls	r3, r3, #4
 80070fa:	4413      	add	r3, r2
 80070fc:	3302      	adds	r3, #2
 80070fe:	781b      	ldrb	r3, [r3, #0]
 8007100:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007104:	460a      	mov	r2, r1
 8007106:	2108      	movs	r1, #8
 8007108:	f7f9 fb10 	bl	800072c <InsertBits>
		//Last Received Packet Tx_seq number is our Rx_Seq Number incremented by 1.
	}
	BITSTUFFINC(8);
 800710c:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007110:	3308      	adds	r3, #8
 8007112:	2b00      	cmp	r3, #0
 8007114:	da00      	bge.n	8007118 <Send_Service_Signal_Message+0x2ec>
 8007116:	3307      	adds	r3, #7
 8007118:	10db      	asrs	r3, r3, #3
 800711a:	b29a      	uxth	r2, r3
 800711c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007120:	4413      	add	r3, r2
 8007122:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007126:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800712a:	3308      	adds	r3, #8
 800712c:	b29b      	uxth	r3, r3
 800712e:	b21b      	sxth	r3, r3
 8007130:	425a      	negs	r2, r3
 8007132:	f003 0307 	and.w	r3, r3, #7
 8007136:	f002 0207 	and.w	r2, r2, #7
 800713a:	bf58      	it	pl
 800713c:	4253      	negpl	r3, r2
 800713e:	b21b      	sxth	r3, r3
 8007140:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], SERVICEMSG);
 8007144:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007148:	f107 020c 	add.w	r2, r7, #12
 800714c:	441a      	add	r2, r3
 800714e:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007152:	2306      	movs	r3, #6
 8007154:	2108      	movs	r1, #8
 8007156:	f7f9 fae9 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 800715a:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 800715e:	3308      	adds	r3, #8
 8007160:	2b00      	cmp	r3, #0
 8007162:	da00      	bge.n	8007166 <Send_Service_Signal_Message+0x33a>
 8007164:	3307      	adds	r3, #7
 8007166:	10db      	asrs	r3, r3, #3
 8007168:	b29a      	uxth	r2, r3
 800716a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800716e:	4413      	add	r3, r2
 8007170:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8007174:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007178:	3308      	adds	r3, #8
 800717a:	b29b      	uxth	r3, r3
 800717c:	b21b      	sxth	r3, r3
 800717e:	425a      	negs	r2, r3
 8007180:	f003 0307 	and.w	r3, r3, #7
 8007184:	f002 0207 	and.w	r2, r2, #7
 8007188:	bf58      	it	pl
 800718a:	4253      	negpl	r3, r2
 800718c:	b21b      	sxth	r3, r3
 800718e:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c



	if(Change_MLK_TIME[Source_Index]== 1)
 8007192:	79fb      	ldrb	r3, [r7, #7]
 8007194:	4a21      	ldr	r2, [pc, #132]	; (800721c <Send_Service_Signal_Message+0x3f0>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d147      	bne.n	800722c <Send_Service_Signal_Message+0x400>
	{
		Get_time();
 800719c:	f003 fef0 	bl	800af80 <Get_time>
		memcpy(&HITACHI_time_Stamp_st[Source_Index],&RTC_Date_time_BCD_st,sizeof(GPS_DATE_TIME_t));
 80071a0:	79fa      	ldrb	r2, [r7, #7]
 80071a2:	4613      	mov	r3, r2
 80071a4:	005b      	lsls	r3, r3, #1
 80071a6:	4413      	add	r3, r2
 80071a8:	005b      	lsls	r3, r3, #1
 80071aa:	4a1d      	ldr	r2, [pc, #116]	; (8007220 <Send_Service_Signal_Message+0x3f4>)
 80071ac:	4413      	add	r3, r2
 80071ae:	4a1d      	ldr	r2, [pc, #116]	; (8007224 <Send_Service_Signal_Message+0x3f8>)
 80071b0:	6811      	ldr	r1, [r2, #0]
 80071b2:	6019      	str	r1, [r3, #0]
 80071b4:	8892      	ldrh	r2, [r2, #4]
 80071b6:	809a      	strh	r2, [r3, #4]
		printf("Sending Updated Time\n");
 80071b8:	481b      	ldr	r0, [pc, #108]	; (8007228 <Send_Service_Signal_Message+0x3fc>)
 80071ba:	f01b f913 	bl	80223e4 <puts>
		Change_MLK_TIME[Source_Index] = 0;
 80071be:	79fb      	ldrb	r3, [r7, #7]
 80071c0:	4a16      	ldr	r2, [pc, #88]	; (800721c <Send_Service_Signal_Message+0x3f0>)
 80071c2:	2100      	movs	r1, #0
 80071c4:	54d1      	strb	r1, [r2, r3]
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0069);
 80071c6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071ca:	f107 020c 	add.w	r2, r7, #12
 80071ce:	441a      	add	r2, r3
 80071d0:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80071d4:	2369      	movs	r3, #105	; 0x69
 80071d6:	2110      	movs	r1, #16
 80071d8:	f7f9 faa8 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 80071dc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80071e0:	3310      	adds	r3, #16
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	da00      	bge.n	80071e8 <Send_Service_Signal_Message+0x3bc>
 80071e6:	3307      	adds	r3, #7
 80071e8:	10db      	asrs	r3, r3, #3
 80071ea:	b29a      	uxth	r2, r3
 80071ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80071f0:	4413      	add	r3, r2
 80071f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80071f6:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80071fa:	3310      	adds	r3, #16
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	b21b      	sxth	r3, r3
 8007200:	425a      	negs	r2, r3
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	f002 0207 	and.w	r2, r2, #7
 800720a:	bf58      	it	pl
 800720c:	4253      	negpl	r3, r2
 800720e:	b21b      	sxth	r3, r3
 8007210:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007214:	e031      	b.n	800727a <Send_Service_Signal_Message+0x44e>
 8007216:	bf00      	nop
 8007218:	200011c4 	.word	0x200011c4
 800721c:	200010d8 	.word	0x200010d8
 8007220:	20001188 	.word	0x20001188
 8007224:	200027e8 	.word	0x200027e8
 8007228:	08024180 	.word	0x08024180
	}
	else
	{
		InsertBits(ucBit, 16, &Transmit_Buff[ucByte], 0x0029);
 800722c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007230:	f107 020c 	add.w	r2, r7, #12
 8007234:	441a      	add	r2, r3
 8007236:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800723a:	2329      	movs	r3, #41	; 0x29
 800723c:	2110      	movs	r1, #16
 800723e:	f7f9 fa75 	bl	800072c <InsertBits>
		BITSTUFFINC(16);
 8007242:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007246:	3310      	adds	r3, #16
 8007248:	2b00      	cmp	r3, #0
 800724a:	da00      	bge.n	800724e <Send_Service_Signal_Message+0x422>
 800724c:	3307      	adds	r3, #7
 800724e:	10db      	asrs	r3, r3, #3
 8007250:	b29a      	uxth	r2, r3
 8007252:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007256:	4413      	add	r3, r2
 8007258:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800725c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007260:	3310      	adds	r3, #16
 8007262:	b29b      	uxth	r3, r3
 8007264:	b21b      	sxth	r3, r3
 8007266:	425a      	negs	r2, r3
 8007268:	f003 0307 	and.w	r3, r3, #7
 800726c:	f002 0207 	and.w	r2, r2, #7
 8007270:	bf58      	it	pl
 8007272:	4253      	negpl	r3, r2
 8007274:	b21b      	sxth	r3, r3
 8007276:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	}

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].YY);
 800727a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800727e:	f107 020c 	add.w	r2, r7, #12
 8007282:	18d1      	adds	r1, r2, r3
 8007284:	79fa      	ldrb	r2, [r7, #7]
 8007286:	48b5      	ldr	r0, [pc, #724]	; (800755c <Send_Service_Signal_Message+0x730>)
 8007288:	4613      	mov	r3, r2
 800728a:	005b      	lsls	r3, r3, #1
 800728c:	4413      	add	r3, r2
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	4403      	add	r3, r0
 8007292:	3305      	adds	r3, #5
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800729a:	460a      	mov	r2, r1
 800729c:	2108      	movs	r1, #8
 800729e:	f7f9 fa45 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80072a2:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80072a6:	3308      	adds	r3, #8
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	da00      	bge.n	80072ae <Send_Service_Signal_Message+0x482>
 80072ac:	3307      	adds	r3, #7
 80072ae:	10db      	asrs	r3, r3, #3
 80072b0:	b29a      	uxth	r2, r3
 80072b2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072b6:	4413      	add	r3, r2
 80072b8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80072bc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80072c0:	3308      	adds	r3, #8
 80072c2:	b29b      	uxth	r3, r3
 80072c4:	b21b      	sxth	r3, r3
 80072c6:	425a      	negs	r2, r3
 80072c8:	f003 0307 	and.w	r3, r3, #7
 80072cc:	f002 0207 	and.w	r2, r2, #7
 80072d0:	bf58      	it	pl
 80072d2:	4253      	negpl	r3, r2
 80072d4:	b21b      	sxth	r3, r3
 80072d6:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].MM);
 80072da:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80072de:	f107 020c 	add.w	r2, r7, #12
 80072e2:	18d1      	adds	r1, r2, r3
 80072e4:	79fa      	ldrb	r2, [r7, #7]
 80072e6:	489d      	ldr	r0, [pc, #628]	; (800755c <Send_Service_Signal_Message+0x730>)
 80072e8:	4613      	mov	r3, r2
 80072ea:	005b      	lsls	r3, r3, #1
 80072ec:	4413      	add	r3, r2
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	4403      	add	r3, r0
 80072f2:	3304      	adds	r3, #4
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80072fa:	460a      	mov	r2, r1
 80072fc:	2108      	movs	r1, #8
 80072fe:	f7f9 fa15 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007302:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007306:	3308      	adds	r3, #8
 8007308:	2b00      	cmp	r3, #0
 800730a:	da00      	bge.n	800730e <Send_Service_Signal_Message+0x4e2>
 800730c:	3307      	adds	r3, #7
 800730e:	10db      	asrs	r3, r3, #3
 8007310:	b29a      	uxth	r2, r3
 8007312:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007316:	4413      	add	r3, r2
 8007318:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800731c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007320:	3308      	adds	r3, #8
 8007322:	b29b      	uxth	r3, r3
 8007324:	b21b      	sxth	r3, r3
 8007326:	425a      	negs	r2, r3
 8007328:	f003 0307 	and.w	r3, r3, #7
 800732c:	f002 0207 	and.w	r2, r2, #7
 8007330:	bf58      	it	pl
 8007332:	4253      	negpl	r3, r2
 8007334:	b21b      	sxth	r3, r3
 8007336:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].DD);
 800733a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800733e:	f107 020c 	add.w	r2, r7, #12
 8007342:	18d1      	adds	r1, r2, r3
 8007344:	79fa      	ldrb	r2, [r7, #7]
 8007346:	4885      	ldr	r0, [pc, #532]	; (800755c <Send_Service_Signal_Message+0x730>)
 8007348:	4613      	mov	r3, r2
 800734a:	005b      	lsls	r3, r3, #1
 800734c:	4413      	add	r3, r2
 800734e:	005b      	lsls	r3, r3, #1
 8007350:	4403      	add	r3, r0
 8007352:	3303      	adds	r3, #3
 8007354:	781b      	ldrb	r3, [r3, #0]
 8007356:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 800735a:	460a      	mov	r2, r1
 800735c:	2108      	movs	r1, #8
 800735e:	f7f9 f9e5 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007362:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007366:	3308      	adds	r3, #8
 8007368:	2b00      	cmp	r3, #0
 800736a:	da00      	bge.n	800736e <Send_Service_Signal_Message+0x542>
 800736c:	3307      	adds	r3, #7
 800736e:	10db      	asrs	r3, r3, #3
 8007370:	b29a      	uxth	r2, r3
 8007372:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007376:	4413      	add	r3, r2
 8007378:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800737c:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8007380:	3308      	adds	r3, #8
 8007382:	b29b      	uxth	r3, r3
 8007384:	b21b      	sxth	r3, r3
 8007386:	425a      	negs	r2, r3
 8007388:	f003 0307 	and.w	r3, r3, #7
 800738c:	f002 0207 	and.w	r2, r2, #7
 8007390:	bf58      	it	pl
 8007392:	4253      	negpl	r3, r2
 8007394:	b21b      	sxth	r3, r3
 8007396:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].hh);
 800739a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800739e:	f107 020c 	add.w	r2, r7, #12
 80073a2:	18d1      	adds	r1, r2, r3
 80073a4:	79fa      	ldrb	r2, [r7, #7]
 80073a6:	486d      	ldr	r0, [pc, #436]	; (800755c <Send_Service_Signal_Message+0x730>)
 80073a8:	4613      	mov	r3, r2
 80073aa:	005b      	lsls	r3, r3, #1
 80073ac:	4413      	add	r3, r2
 80073ae:	005b      	lsls	r3, r3, #1
 80073b0:	4403      	add	r3, r0
 80073b2:	781b      	ldrb	r3, [r3, #0]
 80073b4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80073b8:	460a      	mov	r2, r1
 80073ba:	2108      	movs	r1, #8
 80073bc:	f7f9 f9b6 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 80073c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80073c4:	3308      	adds	r3, #8
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	da00      	bge.n	80073cc <Send_Service_Signal_Message+0x5a0>
 80073ca:	3307      	adds	r3, #7
 80073cc:	10db      	asrs	r3, r3, #3
 80073ce:	b29a      	uxth	r2, r3
 80073d0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073d4:	4413      	add	r3, r2
 80073d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80073da:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80073de:	3308      	adds	r3, #8
 80073e0:	b29b      	uxth	r3, r3
 80073e2:	b21b      	sxth	r3, r3
 80073e4:	425a      	negs	r2, r3
 80073e6:	f003 0307 	and.w	r3, r3, #7
 80073ea:	f002 0207 	and.w	r2, r2, #7
 80073ee:	bf58      	it	pl
 80073f0:	4253      	negpl	r3, r2
 80073f2:	b21b      	sxth	r3, r3
 80073f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].mm);
 80073f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80073fc:	f107 020c 	add.w	r2, r7, #12
 8007400:	18d1      	adds	r1, r2, r3
 8007402:	79fa      	ldrb	r2, [r7, #7]
 8007404:	4855      	ldr	r0, [pc, #340]	; (800755c <Send_Service_Signal_Message+0x730>)
 8007406:	4613      	mov	r3, r2
 8007408:	005b      	lsls	r3, r3, #1
 800740a:	4413      	add	r3, r2
 800740c:	005b      	lsls	r3, r3, #1
 800740e:	4403      	add	r3, r0
 8007410:	3301      	adds	r3, #1
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007418:	460a      	mov	r2, r1
 800741a:	2108      	movs	r1, #8
 800741c:	f7f9 f986 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007420:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007424:	3308      	adds	r3, #8
 8007426:	2b00      	cmp	r3, #0
 8007428:	da00      	bge.n	800742c <Send_Service_Signal_Message+0x600>
 800742a:	3307      	adds	r3, #7
 800742c:	10db      	asrs	r3, r3, #3
 800742e:	b29a      	uxth	r2, r3
 8007430:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007434:	4413      	add	r3, r2
 8007436:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800743a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800743e:	3308      	adds	r3, #8
 8007440:	b29b      	uxth	r3, r3
 8007442:	b21b      	sxth	r3, r3
 8007444:	425a      	negs	r2, r3
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	f002 0207 	and.w	r2, r2, #7
 800744e:	bf58      	it	pl
 8007450:	4253      	negpl	r3, r2
 8007452:	b21b      	sxth	r3, r3
 8007454:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 8, &Transmit_Buff[ucByte], HITACHI_time_Stamp_st[Source_Index].ss);
 8007458:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800745c:	f107 020c 	add.w	r2, r7, #12
 8007460:	18d1      	adds	r1, r2, r3
 8007462:	79fa      	ldrb	r2, [r7, #7]
 8007464:	483d      	ldr	r0, [pc, #244]	; (800755c <Send_Service_Signal_Message+0x730>)
 8007466:	4613      	mov	r3, r2
 8007468:	005b      	lsls	r3, r3, #1
 800746a:	4413      	add	r3, r2
 800746c:	005b      	lsls	r3, r3, #1
 800746e:	4403      	add	r3, r0
 8007470:	3302      	adds	r3, #2
 8007472:	781b      	ldrb	r3, [r3, #0]
 8007474:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 8007478:	460a      	mov	r2, r1
 800747a:	2108      	movs	r1, #8
 800747c:	f7f9 f956 	bl	800072c <InsertBits>
	BITSTUFFINC(8);
 8007480:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8007484:	3308      	adds	r3, #8
 8007486:	2b00      	cmp	r3, #0
 8007488:	da00      	bge.n	800748c <Send_Service_Signal_Message+0x660>
 800748a:	3307      	adds	r3, #7
 800748c:	10db      	asrs	r3, r3, #3
 800748e:	b29a      	uxth	r2, r3
 8007490:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007494:	4413      	add	r3, r2
 8007496:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800749a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800749e:	3308      	adds	r3, #8
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	b21b      	sxth	r3, r3
 80074a4:	425a      	negs	r2, r3
 80074a6:	f003 0307 	and.w	r3, r3, #7
 80074aa:	f002 0207 	and.w	r2, r2, #7
 80074ae:	bf58      	it	pl
 80074b0:	4253      	negpl	r3, r2
 80074b2:	b21b      	sxth	r3, r3
 80074b4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	InsertBits(ucBit, 32, &Transmit_Buff[ucByte], CalculateDirectReverseCrc(Transmit_Buff, ucByte));
 80074b8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074bc:	f107 020c 	add.w	r2, r7, #12
 80074c0:	18d4      	adds	r4, r2, r3
 80074c2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80074c6:	f107 030c 	add.w	r3, r7, #12
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f00b fb0b 	bl	8012ae8 <CalculateDirectReverseCrc>
 80074d2:	4603      	mov	r3, r0
 80074d4:	f8b7 004c 	ldrh.w	r0, [r7, #76]	; 0x4c
 80074d8:	4622      	mov	r2, r4
 80074da:	2120      	movs	r1, #32
 80074dc:	f7f9 f926 	bl	800072c <InsertBits>
	BITSTUFFINC(32);
 80074e0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 80074e4:	3320      	adds	r3, #32
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	da00      	bge.n	80074ec <Send_Service_Signal_Message+0x6c0>
 80074ea:	3307      	adds	r3, #7
 80074ec:	10db      	asrs	r3, r3, #3
 80074ee:	b29a      	uxth	r2, r3
 80074f0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074f4:	4413      	add	r3, r2
 80074f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 80074fa:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80074fe:	3320      	adds	r3, #32
 8007500:	b29b      	uxth	r3, r3
 8007502:	b21b      	sxth	r3, r3
 8007504:	425a      	negs	r2, r3
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	f002 0207 	and.w	r2, r2, #7
 800750e:	bf58      	it	pl
 8007510:	4253      	negpl	r3, r2
 8007512:	b21b      	sxth	r3, r3
 8007514:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c

	if( ( CHECKFLAG(9,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)== SET) && (Hitachi_fault_injection_st.FOR_WHICH_PEER_INDEX == Source_Index) )
 8007518:	4b11      	ldr	r3, [pc, #68]	; (8007560 <Send_Service_Signal_Message+0x734>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	0a5b      	lsrs	r3, r3, #9
 800751e:	f003 0301 	and.w	r3, r3, #1
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00b      	beq.n	800753e <Send_Service_Signal_Message+0x712>
 8007526:	4b0e      	ldr	r3, [pc, #56]	; (8007560 <Send_Service_Signal_Message+0x734>)
 8007528:	791b      	ldrb	r3, [r3, #4]
 800752a:	79fa      	ldrb	r2, [r7, #7]
 800752c:	429a      	cmp	r2, r3
 800752e:	d106      	bne.n	800753e <Send_Service_Signal_Message+0x712>
	{
		printf("Injected ETH tx Fail\n");
 8007530:	480c      	ldr	r0, [pc, #48]	; (8007564 <Send_Service_Signal_Message+0x738>)
 8007532:	f01a ff57 	bl	80223e4 <puts>
		printf("Not Sending Reply");
 8007536:	480c      	ldr	r0, [pc, #48]	; (8007568 <Send_Service_Signal_Message+0x73c>)
 8007538:	f01a feb8 	bl	80222ac <iprintf>
 800753c:	e009      	b.n	8007552 <Send_Service_Signal_Message+0x726>
	}
	else
	{
		Process_Sending_Reply(Transmit_Buff,ucByte,Source_Index);
 800753e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007542:	b2d9      	uxtb	r1, r3
 8007544:	79fa      	ldrb	r2, [r7, #7]
 8007546:	f107 030c 	add.w	r3, r7, #12
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f80e 	bl	800756c <Process_Sending_Reply>
	}
}
 8007550:	bf00      	nop
 8007552:	bf00      	nop
 8007554:	3754      	adds	r7, #84	; 0x54
 8007556:	46bd      	mov	sp, r7
 8007558:	bd90      	pop	{r4, r7, pc}
 800755a:	bf00      	nop
 800755c:	20001188 	.word	0x20001188
 8007560:	2000195c 	.word	0x2000195c
 8007564:	08023f30 	.word	0x08023f30
 8007568:	08023f48 	.word	0x08023f48

0800756c <Process_Sending_Reply>:

void Process_Sending_Reply(uint8_t *Transmit_Buff, uint8_t Length,uint8_t Source_Index)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b09c      	sub	sp, #112	; 0x70
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	460b      	mov	r3, r1
 8007576:	70fb      	strb	r3, [r7, #3]
 8007578:	4613      	mov	r3, r2
 800757a:	70bb      	strb	r3, [r7, #2]
	uint8_t Temp_Buff[100] = {0,};
 800757c:	2300      	movs	r3, #0
 800757e:	60bb      	str	r3, [r7, #8]
 8007580:	f107 030c 	add.w	r3, r7, #12
 8007584:	2260      	movs	r2, #96	; 0x60
 8007586:	2100      	movs	r1, #0
 8007588:	4618      	mov	r0, r3
 800758a:	f01a fda7 	bl	80220dc <memset>
	uint8_t uc_index = 0;
 800758e:	2300      	movs	r3, #0
 8007590:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	uint8_t Temp_Index = 0;
 8007594:	2300      	movs	r3, #0
 8007596:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e

	//memset(Temp_Buff,0,sizeof(Temp_Buff));
	//Print_EI_DATA(Transmit_Buff,XMT,Length);

	//	printf("Reply Packet:\n");
	Temp_Buff[Temp_Index++] = Transmit_Buff[0];
 800759a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800759e:	1c5a      	adds	r2, r3, #1
 80075a0:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 80075a4:	4619      	mov	r1, r3
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	781a      	ldrb	r2, [r3, #0]
 80075aa:	f101 0370 	add.w	r3, r1, #112	; 0x70
 80075ae:	443b      	add	r3, r7
 80075b0:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 80075b4:	2301      	movs	r3, #1
 80075b6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 80075ba:	e03c      	b.n	8007636 <Process_Sending_Reply+0xca>
	{
		if ((Transmit_Buff[uc_index] >= 0xF0) && (Transmit_Buff[uc_index] <= 0xFF))
 80075bc:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	4413      	add	r3, r2
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2bef      	cmp	r3, #239	; 0xef
 80075c8:	d922      	bls.n	8007610 <Process_Sending_Reply+0xa4>
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0xF0;
 80075ca:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	4413      	add	r3, r2
 80075d2:	781a      	ldrb	r2, [r3, #0]
 80075d4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075d8:	1c59      	adds	r1, r3, #1
 80075da:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 80075de:	f022 020f 	bic.w	r2, r2, #15
 80075e2:	b2d2      	uxtb	r2, r2
 80075e4:	3370      	adds	r3, #112	; 0x70
 80075e6:	443b      	add	r3, r7
 80075e8:	f803 2c68 	strb.w	r2, [r3, #-104]
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index] & 0x0F;
 80075ec:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 80075f0:	687a      	ldr	r2, [r7, #4]
 80075f2:	4413      	add	r3, r2
 80075f4:	781a      	ldrb	r2, [r3, #0]
 80075f6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80075fa:	1c59      	adds	r1, r3, #1
 80075fc:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007600:	f002 020f 	and.w	r2, r2, #15
 8007604:	b2d2      	uxtb	r2, r2
 8007606:	3370      	adds	r3, #112	; 0x70
 8007608:	443b      	add	r3, r7
 800760a:	f803 2c68 	strb.w	r2, [r3, #-104]
 800760e:	e00d      	b.n	800762c <Process_Sending_Reply+0xc0>
		}
		else
		{
			Temp_Buff[Temp_Index++] = Transmit_Buff[uc_index];
 8007610:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007614:	687a      	ldr	r2, [r7, #4]
 8007616:	441a      	add	r2, r3
 8007618:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 800761c:	1c59      	adds	r1, r3, #1
 800761e:	f887 106e 	strb.w	r1, [r7, #110]	; 0x6e
 8007622:	7812      	ldrb	r2, [r2, #0]
 8007624:	3370      	adds	r3, #112	; 0x70
 8007626:	443b      	add	r3, r7
 8007628:	f803 2c68 	strb.w	r2, [r3, #-104]
	for (uc_index = 1; uc_index < Length; ++uc_index)
 800762c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8007630:	3301      	adds	r3, #1
 8007632:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8007636:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800763a:	78fb      	ldrb	r3, [r7, #3]
 800763c:	429a      	cmp	r2, r3
 800763e:	d3bd      	bcc.n	80075bc <Process_Sending_Reply+0x50>
		}
	}
	Temp_Buff[Temp_Index++] = 0xf6;
 8007640:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8007644:	1c5a      	adds	r2, r3, #1
 8007646:	f887 206e 	strb.w	r2, [r7, #110]	; 0x6e
 800764a:	3370      	adds	r3, #112	; 0x70
 800764c:	443b      	add	r3, r7
 800764e:	22f6      	movs	r2, #246	; 0xf6
 8007650:	f803 2c68 	strb.w	r2, [r3, #-104]
	//	{
	//		printf("0x%02X|", Temp_Buff[uc_index]);
	//	}
	//	printf("\n");

	if( (SEND_FORCE_REPLY[Source_Index] == SET) && (Rx_Print_st.Size == 0) && (Debug_flag == 1) )
 8007654:	78bb      	ldrb	r3, [r7, #2]
 8007656:	4a37      	ldr	r2, [pc, #220]	; (8007734 <Process_Sending_Reply+0x1c8>)
 8007658:	5cd3      	ldrb	r3, [r2, r3]
 800765a:	2b01      	cmp	r3, #1
 800765c:	d10b      	bne.n	8007676 <Process_Sending_Reply+0x10a>
 800765e:	4b36      	ldr	r3, [pc, #216]	; (8007738 <Process_Sending_Reply+0x1cc>)
 8007660:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007664:	2b00      	cmp	r3, #0
 8007666:	d106      	bne.n	8007676 <Process_Sending_Reply+0x10a>
 8007668:	4b34      	ldr	r3, [pc, #208]	; (800773c <Process_Sending_Reply+0x1d0>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b01      	cmp	r3, #1
 800766e:	d102      	bne.n	8007676 <Process_Sending_Reply+0x10a>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 8007670:	4833      	ldr	r0, [pc, #204]	; (8007740 <Process_Sending_Reply+0x1d4>)
 8007672:	f000 fe3b 	bl	80082ec <Display>
	}

	//	if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) && ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	//if( (EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET) || ((Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY == RECEIVED) || (SEND_FORCE_REPLY[Source_Index] == SET)))
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] == ETHERNET)
 8007676:	78bb      	ldrb	r3, [r7, #2]
 8007678:	4a32      	ldr	r2, [pc, #200]	; (8007744 <Process_Sending_Reply+0x1d8>)
 800767a:	4413      	add	r3, r2
 800767c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007680:	2b01      	cmp	r3, #1
 8007682:	d10d      	bne.n	80076a0 <Process_Sending_Reply+0x134>
		//printf("Sending Reply:%s\n",ipaddr_ntoa(&Recv_IP_List[0]));
		//printf("\n");
		//		char *SendingIP = ipaddr_ntoa(&Recv_IP_List[Source_Index]);
		//		printf("\nSent IP[%lu]:%s\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index], SendingIP);

		udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[Source_Index]);
 8007684:	78bb      	ldrb	r3, [r7, #2]
 8007686:	4a30      	ldr	r2, [pc, #192]	; (8007748 <Process_Sending_Reply+0x1dc>)
 8007688:	f897 106e 	ldrb.w	r1, [r7, #110]	; 0x6e
 800768c:	f107 0008 	add.w	r0, r7, #8
 8007690:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007694:	f007 fc1e 	bl	800eed4 <udpClient_send>
		//udpClient_send(Temp_Buff, Temp_Index,Recv_IP_List[0]); //Only for IRISET
		SEND_FORCE_REPLY[Source_Index] = CLEAR;
 8007698:	78bb      	ldrb	r3, [r7, #2]
 800769a:	4a26      	ldr	r2, [pc, #152]	; (8007734 <Process_Sending_Reply+0x1c8>)
 800769c:	2100      	movs	r1, #0
 800769e:	54d1      	strb	r1, [r2, r3]
	//	else
	//	{
	//		printf("\nNot sending:%u\n",Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY);
	//	}

	if(	EI_data.Hitachi_st.Interface_Type[Source_Index] == SERIAL)
 80076a0:	78bb      	ldrb	r3, [r7, #2]
 80076a2:	4a28      	ldr	r2, [pc, #160]	; (8007744 <Process_Sending_Reply+0x1d8>)
 80076a4:	4413      	add	r3, r2
 80076a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80076aa:	2b02      	cmp	r3, #2
 80076ac:	d119      	bne.n	80076e2 <Process_Sending_Reply+0x176>
	{
		for(uint16_t i=0;i<Temp_Index;++i)
 80076ae:	2300      	movs	r3, #0
 80076b0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80076b4:	e00e      	b.n	80076d4 <Process_Sending_Reply+0x168>
		{
			Com_SendByte(THREE_PORT, Temp_Buff[i]);
 80076b6:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076ba:	3370      	adds	r3, #112	; 0x70
 80076bc:	443b      	add	r3, r7
 80076be:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 80076c2:	4619      	mov	r1, r3
 80076c4:	2003      	movs	r0, #3
 80076c6:	f00d fb8f 	bl	8014de8 <Com_SendByte>
		for(uint16_t i=0;i<Temp_Index;++i)
 80076ca:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80076ce:	3301      	adds	r3, #1
 80076d0:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 80076d4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80076d8:	b29b      	uxth	r3, r3
 80076da:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80076de:	429a      	cmp	r2, r3
 80076e0:	d3e9      	bcc.n	80076b6 <Process_Sending_Reply+0x14a>
			//printf("%02X ",Temp_Buff[i]);
		}
	}


	if(Debug_flag == 1)
 80076e2:	4b16      	ldr	r3, [pc, #88]	; (800773c <Process_Sending_Reply+0x1d0>)
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d102      	bne.n	80076f0 <Process_Sending_Reply+0x184>
	{
		Display("\n________________________________________MSG DETAILS________________________________________\n");
 80076ea:	4815      	ldr	r0, [pc, #84]	; (8007740 <Process_Sending_Reply+0x1d4>)
 80076ec:	f000 fdfe 	bl	80082ec <Display>
	//	else
	//	{
	//		Display("\n");
	//	}

	if(Rx_Print_st.Size)//To Print Received Data
 80076f0:	4b11      	ldr	r3, [pc, #68]	; (8007738 <Process_Sending_Reply+0x1cc>)
 80076f2:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d00b      	beq.n	8007712 <Process_Sending_Reply+0x1a6>
	{
		Print_EI_DATA(Rx_Print_st.Print_Buff, RCV, Rx_Print_st.Size);
 80076fa:	4b0f      	ldr	r3, [pc, #60]	; (8007738 <Process_Sending_Reply+0x1cc>)
 80076fc:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007700:	461a      	mov	r2, r3
 8007702:	2101      	movs	r1, #1
 8007704:	480c      	ldr	r0, [pc, #48]	; (8007738 <Process_Sending_Reply+0x1cc>)
 8007706:	f000 fca1 	bl	800804c <Print_EI_DATA>
		Rx_Print_st.Size = 0;
 800770a:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <Process_Sending_Reply+0x1cc>)
 800770c:	2200      	movs	r2, #0
 800770e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	}

	Print_EI_DATA(Transmit_Buff,XMT,Length); //To Print Transmitted data
 8007712:	78fb      	ldrb	r3, [r7, #3]
 8007714:	461a      	mov	r2, r3
 8007716:	2100      	movs	r1, #0
 8007718:	6878      	ldr	r0, [r7, #4]
 800771a:	f000 fc97 	bl	800804c <Print_EI_DATA>

	if(Debug_flag == 1)
 800771e:	4b07      	ldr	r3, [pc, #28]	; (800773c <Process_Sending_Reply+0x1d0>)
 8007720:	781b      	ldrb	r3, [r3, #0]
 8007722:	2b01      	cmp	r3, #1
 8007724:	d102      	bne.n	800772c <Process_Sending_Reply+0x1c0>
	{
		Display("___________________________________________________________________________________________\n");
 8007726:	4809      	ldr	r0, [pc, #36]	; (800774c <Process_Sending_Reply+0x1e0>)
 8007728:	f000 fde0 	bl	80082ec <Display>
	}
	//	else
	//	{
	//		Display("\n");
	//	}
}
 800772c:	bf00      	nop
 800772e:	3770      	adds	r7, #112	; 0x70
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	200010cc 	.word	0x200010cc
 8007738:	20001c10 	.word	0x20001c10
 800773c:	20000645 	.word	0x20000645
 8007740:	08024448 	.word	0x08024448
 8007744:	20000304 	.word	0x20000304
 8007748:	20001058 	.word	0x20001058
 800774c:	080244a8 	.word	0x080244a8

08007750 <Check_Primary_r_Secondary>:
	printf("\n");
}


void Check_Primary_r_Secondary(uint8_t Source_Index)
{
 8007750:	b580      	push	{r7, lr}
 8007752:	b084      	sub	sp, #16
 8007754:	af00      	add	r7, sp, #0
 8007756:	4603      	mov	r3, r0
 8007758:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 800775a:	f00d fd9d 	bl	8015298 <HAL_GetTick>
 800775e:	60f8      	str	r0, [r7, #12]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007760:	79fb      	ldrb	r3, [r7, #7]
 8007762:	4a7c      	ldr	r2, [pc, #496]	; (8007954 <Check_Primary_r_Secondary+0x204>)
 8007764:	4413      	add	r3, r2
 8007766:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800776a:	2b02      	cmp	r3, #2
 800776c:	f000 80ee 	beq.w	800794c <Check_Primary_r_Secondary+0x1fc>
		return;
	}
	else
	{
		//_______________________ DECIDING PRIMARY OR SECONDARY _________________________________________
		if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 8007770:	79fa      	ldrb	r2, [r7, #7]
 8007772:	4979      	ldr	r1, [pc, #484]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 8007774:	4613      	mov	r3, r2
 8007776:	005b      	lsls	r3, r3, #1
 8007778:	4413      	add	r3, r2
 800777a:	00db      	lsls	r3, r3, #3
 800777c:	440b      	add	r3, r1
 800777e:	3303      	adds	r3, #3
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	2b00      	cmp	r3, #0
 8007784:	d12b      	bne.n	80077de <Check_Primary_r_Secondary+0x8e>
 8007786:	79fa      	ldrb	r2, [r7, #7]
 8007788:	4974      	ldr	r1, [pc, #464]	; (800795c <Check_Primary_r_Secondary+0x20c>)
 800778a:	4613      	mov	r3, r2
 800778c:	005b      	lsls	r3, r3, #1
 800778e:	4413      	add	r3, r2
 8007790:	00db      	lsls	r3, r3, #3
 8007792:	440b      	add	r3, r1
 8007794:	3303      	adds	r3, #3
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d120      	bne.n	80077de <Check_Primary_r_Secondary+0x8e>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800779c:	79fa      	ldrb	r2, [r7, #7]
 800779e:	496e      	ldr	r1, [pc, #440]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 80077a0:	4613      	mov	r3, r2
 80077a2:	005b      	lsls	r3, r3, #1
 80077a4:	4413      	add	r3, r2
 80077a6:	00db      	lsls	r3, r3, #3
 80077a8:	440b      	add	r3, r1
 80077aa:	3304      	adds	r3, #4
 80077ac:	781b      	ldrb	r3, [r3, #0]
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 80cd 	beq.w	800794e <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 80077b4:	79fb      	ldrb	r3, [r7, #7]
 80077b6:	4a67      	ldr	r2, [pc, #412]	; (8007954 <Check_Primary_r_Secondary+0x204>)
 80077b8:	3366      	adds	r3, #102	; 0x66
 80077ba:	009b      	lsls	r3, r3, #2
 80077bc:	4413      	add	r3, r2
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	4619      	mov	r1, r3
 80077c2:	4867      	ldr	r0, [pc, #412]	; (8007960 <Check_Primary_r_Secondary+0x210>)
 80077c4:	f01a fd72 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 80077c8:	79fa      	ldrb	r2, [r7, #7]
 80077ca:	4963      	ldr	r1, [pc, #396]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 80077cc:	4613      	mov	r3, r2
 80077ce:	005b      	lsls	r3, r3, #1
 80077d0:	4413      	add	r3, r2
 80077d2:	00db      	lsls	r3, r3, #3
 80077d4:	440b      	add	r3, r1
 80077d6:	3304      	adds	r3, #4
 80077d8:	2200      	movs	r2, #0
 80077da:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 80077dc:	e0b7      	b.n	800794e <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80077de:	79fa      	ldrb	r2, [r7, #7]
 80077e0:	495d      	ldr	r1, [pc, #372]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 80077e2:	4613      	mov	r3, r2
 80077e4:	005b      	lsls	r3, r3, #1
 80077e6:	4413      	add	r3, r2
 80077e8:	00db      	lsls	r3, r3, #3
 80077ea:	440b      	add	r3, r1
 80077ec:	3303      	adds	r3, #3
 80077ee:	781b      	ldrb	r3, [r3, #0]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d12b      	bne.n	800784c <Check_Primary_r_Secondary+0xfc>
 80077f4:	79fa      	ldrb	r2, [r7, #7]
 80077f6:	4959      	ldr	r1, [pc, #356]	; (800795c <Check_Primary_r_Secondary+0x20c>)
 80077f8:	4613      	mov	r3, r2
 80077fa:	005b      	lsls	r3, r3, #1
 80077fc:	4413      	add	r3, r2
 80077fe:	00db      	lsls	r3, r3, #3
 8007800:	440b      	add	r3, r1
 8007802:	3303      	adds	r3, #3
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d120      	bne.n	800784c <Check_Primary_r_Secondary+0xfc>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800780a:	79fa      	ldrb	r2, [r7, #7]
 800780c:	4952      	ldr	r1, [pc, #328]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 800780e:	4613      	mov	r3, r2
 8007810:	005b      	lsls	r3, r3, #1
 8007812:	4413      	add	r3, r2
 8007814:	00db      	lsls	r3, r3, #3
 8007816:	440b      	add	r3, r1
 8007818:	3304      	adds	r3, #4
 800781a:	781b      	ldrb	r3, [r3, #0]
 800781c:	2b00      	cmp	r3, #0
 800781e:	f000 8096 	beq.w	800794e <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card not Receiving data, Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007822:	79fb      	ldrb	r3, [r7, #7]
 8007824:	4a4b      	ldr	r2, [pc, #300]	; (8007954 <Check_Primary_r_Secondary+0x204>)
 8007826:	3366      	adds	r3, #102	; 0x66
 8007828:	009b      	lsls	r3, r3, #2
 800782a:	4413      	add	r3, r2
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	4619      	mov	r1, r3
 8007830:	484c      	ldr	r0, [pc, #304]	; (8007964 <Check_Primary_r_Secondary+0x214>)
 8007832:	f01a fd3b 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007836:	79fa      	ldrb	r2, [r7, #7]
 8007838:	4947      	ldr	r1, [pc, #284]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 800783a:	4613      	mov	r3, r2
 800783c:	005b      	lsls	r3, r3, #1
 800783e:	4413      	add	r3, r2
 8007840:	00db      	lsls	r3, r3, #3
 8007842:	440b      	add	r3, r1
 8007844:	3304      	adds	r3, #4
 8007846:	2200      	movs	r2, #0
 8007848:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800784a:	e080      	b.n	800794e <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == NOT_RECEIVED) )
 800784c:	79fa      	ldrb	r2, [r7, #7]
 800784e:	4942      	ldr	r1, [pc, #264]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 8007850:	4613      	mov	r3, r2
 8007852:	005b      	lsls	r3, r3, #1
 8007854:	4413      	add	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	440b      	add	r3, r1
 800785a:	3303      	adds	r3, #3
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b01      	cmp	r3, #1
 8007860:	d13e      	bne.n	80078e0 <Check_Primary_r_Secondary+0x190>
 8007862:	79fa      	ldrb	r2, [r7, #7]
 8007864:	493d      	ldr	r1, [pc, #244]	; (800795c <Check_Primary_r_Secondary+0x20c>)
 8007866:	4613      	mov	r3, r2
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	4413      	add	r3, r2
 800786c:	00db      	lsls	r3, r3, #3
 800786e:	440b      	add	r3, r1
 8007870:	3303      	adds	r3, #3
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d133      	bne.n	80078e0 <Check_Primary_r_Secondary+0x190>
		{
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 8007878:	79fa      	ldrb	r2, [r7, #7]
 800787a:	4937      	ldr	r1, [pc, #220]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 800787c:	4613      	mov	r3, r2
 800787e:	005b      	lsls	r3, r3, #1
 8007880:	4413      	add	r3, r2
 8007882:	00db      	lsls	r3, r3, #3
 8007884:	440b      	add	r3, r1
 8007886:	3304      	adds	r3, #4
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d05f      	beq.n	800794e <Check_Primary_r_Secondary+0x1fe>
			{
				printf("This Card Only Receiving data, Shifting to Primary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4a30      	ldr	r2, [pc, #192]	; (8007954 <Check_Primary_r_Secondary+0x204>)
 8007892:	3366      	adds	r3, #102	; 0x66
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	4413      	add	r3, r2
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	4619      	mov	r1, r3
 800789c:	4832      	ldr	r0, [pc, #200]	; (8007968 <Check_Primary_r_Secondary+0x218>)
 800789e:	f01a fd05 	bl	80222ac <iprintf>
				Last_Recevied_Clock[Source_Index] = CurTicks;
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	4931      	ldr	r1, [pc, #196]	; (800796c <Check_Primary_r_Secondary+0x21c>)
 80078a6:	68fa      	ldr	r2, [r7, #12]
 80078a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				Last_Recevied_Clock_ValidMsgs[Source_Index] = CurTicks;
 80078ac:	79fb      	ldrb	r3, [r7, #7]
 80078ae:	4930      	ldr	r1, [pc, #192]	; (8007970 <Check_Primary_r_Secondary+0x220>)
 80078b0:	68fa      	ldr	r2, [r7, #12]
 80078b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				//				Link_Establish_Clock[Source_Index] = CurTicks;

				Tx_Ei_self_sharing_st[Source_Index].Last_RCV_Clk_diff = 0;
 80078b6:	79fa      	ldrb	r2, [r7, #7]
 80078b8:	4927      	ldr	r1, [pc, #156]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 80078ba:	4613      	mov	r3, r2
 80078bc:	005b      	lsls	r3, r3, #1
 80078be:	4413      	add	r3, r2
 80078c0:	00db      	lsls	r3, r3, #3
 80078c2:	440b      	add	r3, r1
 80078c4:	3310      	adds	r3, #16
 80078c6:	2200      	movs	r2, #0
 80078c8:	601a      	str	r2, [r3, #0]
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = PRIMARY;
 80078ca:	79fa      	ldrb	r2, [r7, #7]
 80078cc:	4922      	ldr	r1, [pc, #136]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 80078ce:	4613      	mov	r3, r2
 80078d0:	005b      	lsls	r3, r3, #1
 80078d2:	4413      	add	r3, r2
 80078d4:	00db      	lsls	r3, r3, #3
 80078d6:	440b      	add	r3, r1
 80078d8:	3304      	adds	r3, #4
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY)
 80078de:	e036      	b.n	800794e <Check_Primary_r_Secondary+0x1fe>
			}
		}
		else if( (Tx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) && (Rx_Ei_self_sharing_st[Source_Index].EI_Receiving_Status == RECEIVED) )
 80078e0:	79fa      	ldrb	r2, [r7, #7]
 80078e2:	491d      	ldr	r1, [pc, #116]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 80078e4:	4613      	mov	r3, r2
 80078e6:	005b      	lsls	r3, r3, #1
 80078e8:	4413      	add	r3, r2
 80078ea:	00db      	lsls	r3, r3, #3
 80078ec:	440b      	add	r3, r1
 80078ee:	3303      	adds	r3, #3
 80078f0:	781b      	ldrb	r3, [r3, #0]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	d12b      	bne.n	800794e <Check_Primary_r_Secondary+0x1fe>
 80078f6:	79fa      	ldrb	r2, [r7, #7]
 80078f8:	4918      	ldr	r1, [pc, #96]	; (800795c <Check_Primary_r_Secondary+0x20c>)
 80078fa:	4613      	mov	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	4413      	add	r3, r2
 8007900:	00db      	lsls	r3, r3, #3
 8007902:	440b      	add	r3, r1
 8007904:	3303      	adds	r3, #3
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	2b01      	cmp	r3, #1
 800790a:	d120      	bne.n	800794e <Check_Primary_r_Secondary+0x1fe>
			//				Link_Establish_Clock[Source_Index] = CurTicks;
			//			}
#endif

#ifdef EI_2
			if(Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != SECONDARY)
 800790c:	79fa      	ldrb	r2, [r7, #7]
 800790e:	4912      	ldr	r1, [pc, #72]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 8007910:	4613      	mov	r3, r2
 8007912:	005b      	lsls	r3, r3, #1
 8007914:	4413      	add	r3, r2
 8007916:	00db      	lsls	r3, r3, #3
 8007918:	440b      	add	r3, r1
 800791a:	3304      	adds	r3, #4
 800791c:	781b      	ldrb	r3, [r3, #0]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d015      	beq.n	800794e <Check_Primary_r_Secondary+0x1fe>
			{
				printf("Both Cards Receiving data,EiPC_2 Shifting to Secondary:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007922:	79fb      	ldrb	r3, [r7, #7]
 8007924:	4a0b      	ldr	r2, [pc, #44]	; (8007954 <Check_Primary_r_Secondary+0x204>)
 8007926:	3366      	adds	r3, #102	; 0x66
 8007928:	009b      	lsls	r3, r3, #2
 800792a:	4413      	add	r3, r2
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	4619      	mov	r1, r3
 8007930:	4810      	ldr	r0, [pc, #64]	; (8007974 <Check_Primary_r_Secondary+0x224>)
 8007932:	f01a fcbb 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY = SECONDARY;
 8007936:	79fa      	ldrb	r2, [r7, #7]
 8007938:	4907      	ldr	r1, [pc, #28]	; (8007958 <Check_Primary_r_Secondary+0x208>)
 800793a:	4613      	mov	r3, r2
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	00db      	lsls	r3, r3, #3
 8007942:	440b      	add	r3, r1
 8007944:	3304      	adds	r3, #4
 8007946:	2200      	movs	r2, #0
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	e000      	b.n	800794e <Check_Primary_r_Secondary+0x1fe>
		return;
 800794c:	bf00      	nop
			//			}
#endif

		}
	}
}
 800794e:	3710      	adds	r7, #16
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}
 8007954:	20000304 	.word	0x20000304
 8007958:	20001674 	.word	0x20001674
 800795c:	20001764 	.word	0x20001764
 8007960:	08024660 	.word	0x08024660
 8007964:	0802469c 	.word	0x0802469c
 8007968:	080246d8 	.word	0x080246d8
 800796c:	20000fa4 	.word	0x20000fa4
 8007970:	20000fcc 	.word	0x20000fcc
 8007974:	08024710 	.word	0x08024710

08007978 <Check_Vital_CRC>:

void Check_Vital_CRC(uint8_t Source_Index)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	71fb      	strb	r3, [r7, #7]
	static uint8_t Diff_Cnt_Rx[MAX_PEER_CONNECTIONS] = {0,};
	static uint8_t Diff_Cnt_Tx[MAX_PEER_CONNECTIONS] = {0,};


	if(EI_data.Hitachi_st.Interface_Type[Source_Index] ==  SERIAL)
 8007982:	79fb      	ldrb	r3, [r7, #7]
 8007984:	4aac      	ldr	r2, [pc, #688]	; (8007c38 <Check_Vital_CRC+0x2c0>)
 8007986:	4413      	add	r3, r2
 8007988:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800798c:	2b02      	cmp	r3, #2
 800798e:	f000 814f 	beq.w	8007c30 <Check_Vital_CRC+0x2b8>
	{
		return;
	}
	else
	{
		if(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val )
 8007992:	79fa      	ldrb	r2, [r7, #7]
 8007994:	49a9      	ldr	r1, [pc, #676]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007996:	4613      	mov	r3, r2
 8007998:	005b      	lsls	r3, r3, #1
 800799a:	4413      	add	r3, r2
 800799c:	00db      	lsls	r3, r3, #3
 800799e:	440b      	add	r3, r1
 80079a0:	3308      	adds	r3, #8
 80079a2:	6819      	ldr	r1, [r3, #0]
 80079a4:	79fa      	ldrb	r2, [r7, #7]
 80079a6:	48a6      	ldr	r0, [pc, #664]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 80079a8:	4613      	mov	r3, r2
 80079aa:	005b      	lsls	r3, r3, #1
 80079ac:	4413      	add	r3, r2
 80079ae:	00db      	lsls	r3, r3, #3
 80079b0:	4403      	add	r3, r0
 80079b2:	3308      	adds	r3, #8
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4299      	cmp	r1, r3
 80079b8:	f000 8092 	beq.w	8007ae0 <Check_Vital_CRC+0x168>
		{
			if(Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val != 0)
 80079bc:	79fa      	ldrb	r2, [r7, #7]
 80079be:	49a0      	ldr	r1, [pc, #640]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 80079c0:	4613      	mov	r3, r2
 80079c2:	005b      	lsls	r3, r3, #1
 80079c4:	4413      	add	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	440b      	add	r3, r1
 80079ca:	3308      	adds	r3, #8
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	f000 8086 	beq.w	8007ae0 <Check_Vital_CRC+0x168>
			{
				if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 80079d4:	79fa      	ldrb	r2, [r7, #7]
 80079d6:	4999      	ldr	r1, [pc, #612]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 80079d8:	4613      	mov	r3, r2
 80079da:	005b      	lsls	r3, r3, #1
 80079dc:	4413      	add	r3, r2
 80079de:	00db      	lsls	r3, r3, #3
 80079e0:	440b      	add	r3, r1
 80079e2:	3304      	adds	r3, #4
 80079e4:	781b      	ldrb	r3, [r3, #0]
 80079e6:	2b01      	cmp	r3, #1
 80079e8:	d104      	bne.n	80079f4 <Check_Vital_CRC+0x7c>
 80079ea:	79fb      	ldrb	r3, [r7, #7]
 80079ec:	4a95      	ldr	r2, [pc, #596]	; (8007c44 <Check_Vital_CRC+0x2cc>)
 80079ee:	5cd3      	ldrb	r3, [r2, r3]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d175      	bne.n	8007ae0 <Check_Vital_CRC+0x168>
				{
					uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 80079f4:	79fa      	ldrb	r2, [r7, #7]
 80079f6:	4991      	ldr	r1, [pc, #580]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 80079f8:	4613      	mov	r3, r2
 80079fa:	005b      	lsls	r3, r3, #1
 80079fc:	4413      	add	r3, r2
 80079fe:	00db      	lsls	r3, r3, #3
 8007a00:	440b      	add	r3, r1
 8007a02:	3308      	adds	r3, #8
 8007a04:	6819      	ldr	r1, [r3, #0]
 8007a06:	79fa      	ldrb	r2, [r7, #7]
 8007a08:	488d      	ldr	r0, [pc, #564]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	005b      	lsls	r3, r3, #1
 8007a0e:	4413      	add	r3, r2
 8007a10:	00db      	lsls	r3, r3, #3
 8007a12:	4403      	add	r3, r0
 8007a14:	3308      	adds	r3, #8
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	1acb      	subs	r3, r1, r3
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	bfb8      	it	lt
 8007a1e:	425b      	neglt	r3, r3
 8007a20:	60fb      	str	r3, [r7, #12]

					if( (Diff != 1 ) || (Diff_Cnt_Rx[Source_Index] == 3) )
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2b01      	cmp	r3, #1
 8007a26:	d104      	bne.n	8007a32 <Check_Vital_CRC+0xba>
 8007a28:	79fb      	ldrb	r3, [r7, #7]
 8007a2a:	4a87      	ldr	r2, [pc, #540]	; (8007c48 <Check_Vital_CRC+0x2d0>)
 8007a2c:	5cd3      	ldrb	r3, [r2, r3]
 8007a2e:	2b03      	cmp	r3, #3
 8007a30:	d14c      	bne.n	8007acc <Check_Vital_CRC+0x154>
					{
						Diff_Cnt_Rx[Source_Index] = 0;
 8007a32:	79fb      	ldrb	r3, [r7, #7]
 8007a34:	4a84      	ldr	r2, [pc, #528]	; (8007c48 <Check_Vital_CRC+0x2d0>)
 8007a36:	2100      	movs	r1, #0
 8007a38:	54d1      	strb	r1, [r2, r3]
						printf("RX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007a3a:	79fb      	ldrb	r3, [r7, #7]
 8007a3c:	4a7e      	ldr	r2, [pc, #504]	; (8007c38 <Check_Vital_CRC+0x2c0>)
 8007a3e:	3366      	adds	r3, #102	; 0x66
 8007a40:	009b      	lsls	r3, r3, #2
 8007a42:	4413      	add	r3, r2
 8007a44:	685b      	ldr	r3, [r3, #4]
 8007a46:	4619      	mov	r1, r3
 8007a48:	4880      	ldr	r0, [pc, #512]	; (8007c4c <Check_Vital_CRC+0x2d4>)
 8007a4a:	f01a fc2f 	bl	80222ac <iprintf>
						printf("RX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a4e:	79fa      	ldrb	r2, [r7, #7]
 8007a50:	497a      	ldr	r1, [pc, #488]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007a52:	4613      	mov	r3, r2
 8007a54:	005b      	lsls	r3, r3, #1
 8007a56:	4413      	add	r3, r2
 8007a58:	00db      	lsls	r3, r3, #3
 8007a5a:	440b      	add	r3, r1
 8007a5c:	3308      	adds	r3, #8
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4619      	mov	r1, r3
 8007a62:	487b      	ldr	r0, [pc, #492]	; (8007c50 <Check_Vital_CRC+0x2d8>)
 8007a64:	f01a fc22 	bl	80222ac <iprintf>
						printf("RX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val);
 8007a68:	79fa      	ldrb	r2, [r7, #7]
 8007a6a:	4975      	ldr	r1, [pc, #468]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007a6c:	4613      	mov	r3, r2
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	4413      	add	r3, r2
 8007a72:	00db      	lsls	r3, r3, #3
 8007a74:	440b      	add	r3, r1
 8007a76:	3308      	adds	r3, #8
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	4875      	ldr	r0, [pc, #468]	; (8007c54 <Check_Vital_CRC+0x2dc>)
 8007a7e:	f01a fc15 	bl	80222ac <iprintf>
						printf("\nCopied RX_Vital Init Value from O-EiPC\n");
 8007a82:	4875      	ldr	r0, [pc, #468]	; (8007c58 <Check_Vital_CRC+0x2e0>)
 8007a84:	f01a fcae 	bl	80223e4 <puts>
						Hitachi_prms_st[Source_Index].Rx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007a88:	79fa      	ldrb	r2, [r7, #7]
 8007a8a:	79f9      	ldrb	r1, [r7, #7]
 8007a8c:	486c      	ldr	r0, [pc, #432]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007a8e:	4613      	mov	r3, r2
 8007a90:	005b      	lsls	r3, r3, #1
 8007a92:	4413      	add	r3, r2
 8007a94:	00db      	lsls	r3, r3, #3
 8007a96:	4403      	add	r3, r0
 8007a98:	3308      	adds	r3, #8
 8007a9a:	681a      	ldr	r2, [r3, #0]
 8007a9c:	486f      	ldr	r0, [pc, #444]	; (8007c5c <Check_Vital_CRC+0x2e4>)
 8007a9e:	010b      	lsls	r3, r1, #4
 8007aa0:	4403      	add	r3, r0
 8007aa2:	3308      	adds	r3, #8
 8007aa4:	601a      	str	r2, [r3, #0]
						Tx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Rx_Vital_Init_Val;
 8007aa6:	79f9      	ldrb	r1, [r7, #7]
 8007aa8:	79fa      	ldrb	r2, [r7, #7]
 8007aaa:	4865      	ldr	r0, [pc, #404]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007aac:	460b      	mov	r3, r1
 8007aae:	005b      	lsls	r3, r3, #1
 8007ab0:	440b      	add	r3, r1
 8007ab2:	00db      	lsls	r3, r3, #3
 8007ab4:	4403      	add	r3, r0
 8007ab6:	3308      	adds	r3, #8
 8007ab8:	6819      	ldr	r1, [r3, #0]
 8007aba:	4860      	ldr	r0, [pc, #384]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007abc:	4613      	mov	r3, r2
 8007abe:	005b      	lsls	r3, r3, #1
 8007ac0:	4413      	add	r3, r2
 8007ac2:	00db      	lsls	r3, r3, #3
 8007ac4:	4403      	add	r3, r0
 8007ac6:	3308      	adds	r3, #8
 8007ac8:	6019      	str	r1, [r3, #0]
 8007aca:	e009      	b.n	8007ae0 <Check_Vital_CRC+0x168>
					}
					else if(Diff == 1)
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d106      	bne.n	8007ae0 <Check_Vital_CRC+0x168>
					{
						Diff_Cnt_Rx[Source_Index]++;
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	4a5c      	ldr	r2, [pc, #368]	; (8007c48 <Check_Vital_CRC+0x2d0>)
 8007ad6:	5cd2      	ldrb	r2, [r2, r3]
 8007ad8:	3201      	adds	r2, #1
 8007ada:	b2d1      	uxtb	r1, r2
 8007adc:	4a5a      	ldr	r2, [pc, #360]	; (8007c48 <Check_Vital_CRC+0x2d0>)
 8007ade:	54d1      	strb	r1, [r2, r3]
				}
			}
		}
	}

	if(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val )
 8007ae0:	79fa      	ldrb	r2, [r7, #7]
 8007ae2:	4956      	ldr	r1, [pc, #344]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007ae4:	4613      	mov	r3, r2
 8007ae6:	005b      	lsls	r3, r3, #1
 8007ae8:	4413      	add	r3, r2
 8007aea:	00db      	lsls	r3, r3, #3
 8007aec:	440b      	add	r3, r1
 8007aee:	330c      	adds	r3, #12
 8007af0:	6819      	ldr	r1, [r3, #0]
 8007af2:	79fa      	ldrb	r2, [r7, #7]
 8007af4:	4852      	ldr	r0, [pc, #328]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007af6:	4613      	mov	r3, r2
 8007af8:	005b      	lsls	r3, r3, #1
 8007afa:	4413      	add	r3, r2
 8007afc:	00db      	lsls	r3, r3, #3
 8007afe:	4403      	add	r3, r0
 8007b00:	330c      	adds	r3, #12
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4299      	cmp	r1, r3
 8007b06:	f000 8094 	beq.w	8007c32 <Check_Vital_CRC+0x2ba>
	{
		if(Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val != 0)
 8007b0a:	79fa      	ldrb	r2, [r7, #7]
 8007b0c:	494c      	ldr	r1, [pc, #304]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007b0e:	4613      	mov	r3, r2
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	4413      	add	r3, r2
 8007b14:	00db      	lsls	r3, r3, #3
 8007b16:	440b      	add	r3, r1
 8007b18:	330c      	adds	r3, #12
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	f000 8088 	beq.w	8007c32 <Check_Vital_CRC+0x2ba>
		{
			if( (Tx_Ei_self_sharing_st[Source_Index].IS_PRIMARY != PRIMARY) || (INIT_Received[Source_Index] == NOT_RECEIVED) )
 8007b22:	79fa      	ldrb	r2, [r7, #7]
 8007b24:	4945      	ldr	r1, [pc, #276]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007b26:	4613      	mov	r3, r2
 8007b28:	005b      	lsls	r3, r3, #1
 8007b2a:	4413      	add	r3, r2
 8007b2c:	00db      	lsls	r3, r3, #3
 8007b2e:	440b      	add	r3, r1
 8007b30:	3304      	adds	r3, #4
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d104      	bne.n	8007b42 <Check_Vital_CRC+0x1ca>
 8007b38:	79fb      	ldrb	r3, [r7, #7]
 8007b3a:	4a42      	ldr	r2, [pc, #264]	; (8007c44 <Check_Vital_CRC+0x2cc>)
 8007b3c:	5cd3      	ldrb	r3, [r2, r3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d177      	bne.n	8007c32 <Check_Vital_CRC+0x2ba>
			{
				uint32_t Diff = abs(Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val - Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007b42:	79fa      	ldrb	r2, [r7, #7]
 8007b44:	493d      	ldr	r1, [pc, #244]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007b46:	4613      	mov	r3, r2
 8007b48:	005b      	lsls	r3, r3, #1
 8007b4a:	4413      	add	r3, r2
 8007b4c:	00db      	lsls	r3, r3, #3
 8007b4e:	440b      	add	r3, r1
 8007b50:	330c      	adds	r3, #12
 8007b52:	6819      	ldr	r1, [r3, #0]
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	483a      	ldr	r0, [pc, #232]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007b58:	4613      	mov	r3, r2
 8007b5a:	005b      	lsls	r3, r3, #1
 8007b5c:	4413      	add	r3, r2
 8007b5e:	00db      	lsls	r3, r3, #3
 8007b60:	4403      	add	r3, r0
 8007b62:	330c      	adds	r3, #12
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	1acb      	subs	r3, r1, r3
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	bfb8      	it	lt
 8007b6c:	425b      	neglt	r3, r3
 8007b6e:	60bb      	str	r3, [r7, #8]
				if( (Diff != 1 ) || (Diff_Cnt_Tx[Source_Index] == 3) )
 8007b70:	68bb      	ldr	r3, [r7, #8]
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d104      	bne.n	8007b80 <Check_Vital_CRC+0x208>
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	4a39      	ldr	r2, [pc, #228]	; (8007c60 <Check_Vital_CRC+0x2e8>)
 8007b7a:	5cd3      	ldrb	r3, [r2, r3]
 8007b7c:	2b03      	cmp	r3, #3
 8007b7e:	d14c      	bne.n	8007c1a <Check_Vital_CRC+0x2a2>
				{
					Diff_Cnt_Tx[Source_Index] = 0;
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	4a37      	ldr	r2, [pc, #220]	; (8007c60 <Check_Vital_CRC+0x2e8>)
 8007b84:	2100      	movs	r1, #0
 8007b86:	54d1      	strb	r1, [r2, r3]
					printf("TX_Vital Init Value is not same in Self and Other EiPC Cards:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 8007b88:	79fb      	ldrb	r3, [r7, #7]
 8007b8a:	4a2b      	ldr	r2, [pc, #172]	; (8007c38 <Check_Vital_CRC+0x2c0>)
 8007b8c:	3366      	adds	r3, #102	; 0x66
 8007b8e:	009b      	lsls	r3, r3, #2
 8007b90:	4413      	add	r3, r2
 8007b92:	685b      	ldr	r3, [r3, #4]
 8007b94:	4619      	mov	r1, r3
 8007b96:	4833      	ldr	r0, [pc, #204]	; (8007c64 <Check_Vital_CRC+0x2ec>)
 8007b98:	f01a fb88 	bl	80222ac <iprintf>
					printf("TX_Vital Init Value S-EiPC:0x%06lX\n",Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007b9c:	79fa      	ldrb	r2, [r7, #7]
 8007b9e:	4927      	ldr	r1, [pc, #156]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007ba0:	4613      	mov	r3, r2
 8007ba2:	005b      	lsls	r3, r3, #1
 8007ba4:	4413      	add	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	440b      	add	r3, r1
 8007baa:	330c      	adds	r3, #12
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4619      	mov	r1, r3
 8007bb0:	482d      	ldr	r0, [pc, #180]	; (8007c68 <Check_Vital_CRC+0x2f0>)
 8007bb2:	f01a fb7b 	bl	80222ac <iprintf>
					printf("TX_Vital Init Value O-EiPC:0x%06lX\n",Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val);
 8007bb6:	79fa      	ldrb	r2, [r7, #7]
 8007bb8:	4921      	ldr	r1, [pc, #132]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007bba:	4613      	mov	r3, r2
 8007bbc:	005b      	lsls	r3, r3, #1
 8007bbe:	4413      	add	r3, r2
 8007bc0:	00db      	lsls	r3, r3, #3
 8007bc2:	440b      	add	r3, r1
 8007bc4:	330c      	adds	r3, #12
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4619      	mov	r1, r3
 8007bca:	4828      	ldr	r0, [pc, #160]	; (8007c6c <Check_Vital_CRC+0x2f4>)
 8007bcc:	f01a fb6e 	bl	80222ac <iprintf>
					printf("\nCopied TX Vital Init Value from O-EiPC\n");
 8007bd0:	4827      	ldr	r0, [pc, #156]	; (8007c70 <Check_Vital_CRC+0x2f8>)
 8007bd2:	f01a fc07 	bl	80223e4 <puts>
					Hitachi_prms_st[Source_Index].Tx_Vital_CRC_Init_Value = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007bd6:	79fa      	ldrb	r2, [r7, #7]
 8007bd8:	79f9      	ldrb	r1, [r7, #7]
 8007bda:	4819      	ldr	r0, [pc, #100]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007bdc:	4613      	mov	r3, r2
 8007bde:	005b      	lsls	r3, r3, #1
 8007be0:	4413      	add	r3, r2
 8007be2:	00db      	lsls	r3, r3, #3
 8007be4:	4403      	add	r3, r0
 8007be6:	330c      	adds	r3, #12
 8007be8:	681a      	ldr	r2, [r3, #0]
 8007bea:	481c      	ldr	r0, [pc, #112]	; (8007c5c <Check_Vital_CRC+0x2e4>)
 8007bec:	010b      	lsls	r3, r1, #4
 8007bee:	4403      	add	r3, r0
 8007bf0:	330c      	adds	r3, #12
 8007bf2:	601a      	str	r2, [r3, #0]
					Tx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val = Rx_Ei_self_sharing_st[Source_Index].Tx_Vital_Init_Val;
 8007bf4:	79f9      	ldrb	r1, [r7, #7]
 8007bf6:	79fa      	ldrb	r2, [r7, #7]
 8007bf8:	4811      	ldr	r0, [pc, #68]	; (8007c40 <Check_Vital_CRC+0x2c8>)
 8007bfa:	460b      	mov	r3, r1
 8007bfc:	005b      	lsls	r3, r3, #1
 8007bfe:	440b      	add	r3, r1
 8007c00:	00db      	lsls	r3, r3, #3
 8007c02:	4403      	add	r3, r0
 8007c04:	330c      	adds	r3, #12
 8007c06:	6819      	ldr	r1, [r3, #0]
 8007c08:	480c      	ldr	r0, [pc, #48]	; (8007c3c <Check_Vital_CRC+0x2c4>)
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	005b      	lsls	r3, r3, #1
 8007c0e:	4413      	add	r3, r2
 8007c10:	00db      	lsls	r3, r3, #3
 8007c12:	4403      	add	r3, r0
 8007c14:	330c      	adds	r3, #12
 8007c16:	6019      	str	r1, [r3, #0]
 8007c18:	e00b      	b.n	8007c32 <Check_Vital_CRC+0x2ba>
				}
				else if(Diff == 1)
 8007c1a:	68bb      	ldr	r3, [r7, #8]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	d108      	bne.n	8007c32 <Check_Vital_CRC+0x2ba>
				{
					Diff_Cnt_Tx[Source_Index]++;
 8007c20:	79fb      	ldrb	r3, [r7, #7]
 8007c22:	4a0f      	ldr	r2, [pc, #60]	; (8007c60 <Check_Vital_CRC+0x2e8>)
 8007c24:	5cd2      	ldrb	r2, [r2, r3]
 8007c26:	3201      	adds	r2, #1
 8007c28:	b2d1      	uxtb	r1, r2
 8007c2a:	4a0d      	ldr	r2, [pc, #52]	; (8007c60 <Check_Vital_CRC+0x2e8>)
 8007c2c:	54d1      	strb	r1, [r2, r3]
 8007c2e:	e000      	b.n	8007c32 <Check_Vital_CRC+0x2ba>
		return;
 8007c30:	bf00      	nop
				}
			}
		}
	}
}
 8007c32:	3710      	adds	r7, #16
 8007c34:	46bd      	mov	sp, r7
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20000304 	.word	0x20000304
 8007c3c:	20001674 	.word	0x20001674
 8007c40:	20001764 	.word	0x20001764
 8007c44:	20000ff4 	.word	0x20000ff4
 8007c48:	20002038 	.word	0x20002038
 8007c4c:	0802474c 	.word	0x0802474c
 8007c50:	08024790 	.word	0x08024790
 8007c54:	080247b4 	.word	0x080247b4
 8007c58:	080247d8 	.word	0x080247d8
 8007c5c:	200011c4 	.word	0x200011c4
 8007c60:	20002044 	.word	0x20002044
 8007c64:	08024800 	.word	0x08024800
 8007c68:	08024844 	.word	0x08024844
 8007c6c:	08024868 	.word	0x08024868
 8007c70:	0802488c 	.word	0x0802488c

08007c74 <Check_Other_EiPC_Packet>:

void Check_Other_EiPC_Packet(uint8_t Source_Index)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	71fb      	strb	r3, [r7, #7]
	if(EI_data.Hitachi_st.Interface_Type[Source_Index] !=  SERIAL)
 8007c7e:	79fb      	ldrb	r3, [r7, #7]
 8007c80:	4a0a      	ldr	r2, [pc, #40]	; (8007cac <Check_Other_EiPC_Packet+0x38>)
 8007c82:	4413      	add	r3, r2
 8007c84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8007c88:	2b02      	cmp	r3, #2
 8007c8a:	d007      	beq.n	8007c9c <Check_Other_EiPC_Packet+0x28>
	{
		Check_Primary_r_Secondary(Source_Index);
 8007c8c:	79fb      	ldrb	r3, [r7, #7]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff fd5e 	bl	8007750 <Check_Primary_r_Secondary>
		Check_Vital_CRC(Source_Index);
 8007c94:	79fb      	ldrb	r3, [r7, #7]
 8007c96:	4618      	mov	r0, r3
 8007c98:	f7ff fe6e 	bl	8007978 <Check_Vital_CRC>
	}
	CheckOtherLinkStatus(Source_Index);
 8007c9c:	79fb      	ldrb	r3, [r7, #7]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f000 ff6c 	bl	8008b7c <CheckOtherLinkStatus>
}
 8007ca4:	bf00      	nop
 8007ca6:	3708      	adds	r7, #8
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}
 8007cac:	20000304 	.word	0x20000304

08007cb0 <CheckLinkEstablishTimeout>:

void CheckLinkEstablishTimeout(void)
{
 8007cb0:	b590      	push	{r4, r7, lr}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 8007cb6:	2300      	movs	r3, #0
 8007cb8:	71fb      	strb	r3, [r7, #7]
	static uint32_t Prev_Last_LinkEstablish_CLK[MAX_PEER_CONNECTIONS] = {0,};

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007cba:	4930      	ldr	r1, [pc, #192]	; (8007d7c <CheckLinkEstablishTimeout+0xcc>)
 8007cbc:	4830      	ldr	r0, [pc, #192]	; (8007d80 <CheckLinkEstablishTimeout+0xd0>)
 8007cbe:	f7f8 fabf 	bl	8000240 <strcmp>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d055      	beq.n	8007d74 <CheckLinkEstablishTimeout+0xc4>
		return;
	}



	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007cc8:	2300      	movs	r3, #0
 8007cca:	71fb      	strb	r3, [r7, #7]
 8007ccc:	e04b      	b.n	8007d66 <CheckLinkEstablishTimeout+0xb6>
	{
		if( (HAL_Elaps_Ticks(Link_Establish_Clock[Traverser]) > EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]) && (Prev_Last_LinkEstablish_CLK[Traverser] != Link_Establish_Clock[Traverser]) )
 8007cce:	79fb      	ldrb	r3, [r7, #7]
 8007cd0:	4a2c      	ldr	r2, [pc, #176]	; (8007d84 <CheckLinkEstablishTimeout+0xd4>)
 8007cd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f006 fd92 	bl	800e800 <HAL_Elaps_Ticks>
 8007cdc:	4602      	mov	r2, r0
 8007cde:	79fb      	ldrb	r3, [r7, #7]
 8007ce0:	4929      	ldr	r1, [pc, #164]	; (8007d88 <CheckLinkEstablishTimeout+0xd8>)
 8007ce2:	339e      	adds	r3, #158	; 0x9e
 8007ce4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d939      	bls.n	8007d60 <CheckLinkEstablishTimeout+0xb0>
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	4a27      	ldr	r2, [pc, #156]	; (8007d8c <CheckLinkEstablishTimeout+0xdc>)
 8007cf0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007cf4:	79fb      	ldrb	r3, [r7, #7]
 8007cf6:	4923      	ldr	r1, [pc, #140]	; (8007d84 <CheckLinkEstablishTimeout+0xd4>)
 8007cf8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007cfc:	429a      	cmp	r2, r3
 8007cfe:	d02f      	beq.n	8007d60 <CheckLinkEstablishTimeout+0xb0>
		{
			Prev_Last_LinkEstablish_CLK[Traverser] = Link_Establish_Clock[Traverser];
 8007d00:	79fa      	ldrb	r2, [r7, #7]
 8007d02:	79fb      	ldrb	r3, [r7, #7]
 8007d04:	491f      	ldr	r1, [pc, #124]	; (8007d84 <CheckLinkEstablishTimeout+0xd4>)
 8007d06:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007d0a:	4920      	ldr	r1, [pc, #128]	; (8007d8c <CheckLinkEstablishTimeout+0xdc>)
 8007d0c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			printf("Link Establish Timeout for:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	4a1d      	ldr	r2, [pc, #116]	; (8007d88 <CheckLinkEstablishTimeout+0xd8>)
 8007d14:	3366      	adds	r3, #102	; 0x66
 8007d16:	009b      	lsls	r3, r3, #2
 8007d18:	4413      	add	r3, r2
 8007d1a:	685b      	ldr	r3, [r3, #4]
 8007d1c:	4619      	mov	r1, r3
 8007d1e:	481c      	ldr	r0, [pc, #112]	; (8007d90 <CheckLinkEstablishTimeout+0xe0>)
 8007d20:	f01a fac4 	bl	80222ac <iprintf>
			Link_Flag[Traverser] = CLEAR;
 8007d24:	79fb      	ldrb	r3, [r7, #7]
 8007d26:	4a1b      	ldr	r2, [pc, #108]	; (8007d94 <CheckLinkEstablishTimeout+0xe4>)
 8007d28:	2100      	movs	r1, #0
 8007d2a:	54d1      	strb	r1, [r2, r3]
			Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff = HAL_Elaps_Ticks(Tx_Ei_self_sharing_st[Traverser].Last_RCV_Clk_diff); // To detected EiPC shifting Faster
 8007d2c:	79fa      	ldrb	r2, [r7, #7]
 8007d2e:	491a      	ldr	r1, [pc, #104]	; (8007d98 <CheckLinkEstablishTimeout+0xe8>)
 8007d30:	4613      	mov	r3, r2
 8007d32:	005b      	lsls	r3, r3, #1
 8007d34:	4413      	add	r3, r2
 8007d36:	00db      	lsls	r3, r3, #3
 8007d38:	440b      	add	r3, r1
 8007d3a:	3310      	adds	r3, #16
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	79fc      	ldrb	r4, [r7, #7]
 8007d40:	4618      	mov	r0, r3
 8007d42:	f006 fd5d 	bl	800e800 <HAL_Elaps_Ticks>
 8007d46:	4602      	mov	r2, r0
 8007d48:	4913      	ldr	r1, [pc, #76]	; (8007d98 <CheckLinkEstablishTimeout+0xe8>)
 8007d4a:	4623      	mov	r3, r4
 8007d4c:	005b      	lsls	r3, r3, #1
 8007d4e:	4423      	add	r3, r4
 8007d50:	00db      	lsls	r3, r3, #3
 8007d52:	440b      	add	r3, r1
 8007d54:	3310      	adds	r3, #16
 8007d56:	601a      	str	r2, [r3, #0]
			CheckOtherLinkStatus(Traverser);
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f000 ff0e 	bl	8008b7c <CheckOtherLinkStatus>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007d60:	79fb      	ldrb	r3, [r7, #7]
 8007d62:	3301      	adds	r3, #1
 8007d64:	71fb      	strb	r3, [r7, #7]
 8007d66:	4b08      	ldr	r3, [pc, #32]	; (8007d88 <CheckLinkEstablishTimeout+0xd8>)
 8007d68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007d6c:	79fa      	ldrb	r2, [r7, #7]
 8007d6e:	429a      	cmp	r2, r3
 8007d70:	d3ad      	bcc.n	8007cce <CheckLinkEstablishTimeout+0x1e>
 8007d72:	e000      	b.n	8007d76 <CheckLinkEstablishTimeout+0xc6>
		return;
 8007d74:	bf00      	nop
		}
	}
}
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd90      	pop	{r4, r7, pc}
 8007d7c:	08023a58 	.word	0x08023a58
 8007d80:	20000305 	.word	0x20000305
 8007d84:	20000f14 	.word	0x20000f14
 8007d88:	20000304 	.word	0x20000304
 8007d8c:	20002050 	.word	0x20002050
 8007d90:	080248b4 	.word	0x080248b4
 8007d94:	20000f64 	.word	0x20000f64
 8007d98:	20001674 	.word	0x20001674

08007d9c <Send_Self_Sharing>:


void Send_Self_Sharing(void)
{
 8007d9c:	b590      	push	{r4, r7, lr}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007da2:	2300      	movs	r3, #0
 8007da4:	71fb      	strb	r3, [r7, #7]
 8007da6:	e049      	b.n	8007e3c <Send_Self_Sharing+0xa0>
	{
		if(HAL_Elaps_Ticks(Self_Sharing_CAN_Clk[Traverser]) > (EI_data.Hitachi_st.CAN_Xchange_Time) )
 8007da8:	79fb      	ldrb	r3, [r7, #7]
 8007daa:	4a29      	ldr	r2, [pc, #164]	; (8007e50 <Send_Self_Sharing+0xb4>)
 8007dac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007db0:	4618      	mov	r0, r3
 8007db2:	f006 fd25 	bl	800e800 <HAL_Elaps_Ticks>
 8007db6:	4602      	mov	r2, r0
 8007db8:	4b26      	ldr	r3, [pc, #152]	; (8007e54 <Send_Self_Sharing+0xb8>)
 8007dba:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 8007dbe:	429a      	cmp	r2, r3
 8007dc0:	d939      	bls.n	8007e36 <Send_Self_Sharing+0x9a>
		{
			Tx_Ei_self_sharing_st[Traverser].Msg_Rcv_Flag = NOT_RECEIVED;
 8007dc2:	79fa      	ldrb	r2, [r7, #7]
 8007dc4:	4924      	ldr	r1, [pc, #144]	; (8007e58 <Send_Self_Sharing+0xbc>)
 8007dc6:	4613      	mov	r3, r2
 8007dc8:	005b      	lsls	r3, r3, #1
 8007dca:	4413      	add	r3, r2
 8007dcc:	00db      	lsls	r3, r3, #3
 8007dce:	440b      	add	r3, r1
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	701a      	strb	r2, [r3, #0]
			Tx_Ei_self_sharing_st[Traverser].LinkEstablishFlag = Hitachi_clk_flags_st[Traverser].Link_EstablishFlag;
 8007dd6:	79f9      	ldrb	r1, [r7, #7]
 8007dd8:	79fa      	ldrb	r2, [r7, #7]
 8007dda:	4820      	ldr	r0, [pc, #128]	; (8007e5c <Send_Self_Sharing+0xc0>)
 8007ddc:	460b      	mov	r3, r1
 8007dde:	005b      	lsls	r3, r3, #1
 8007de0:	440b      	add	r3, r1
 8007de2:	009b      	lsls	r3, r3, #2
 8007de4:	4403      	add	r3, r0
 8007de6:	3301      	adds	r3, #1
 8007de8:	7818      	ldrb	r0, [r3, #0]
 8007dea:	491b      	ldr	r1, [pc, #108]	; (8007e58 <Send_Self_Sharing+0xbc>)
 8007dec:	4613      	mov	r3, r2
 8007dee:	005b      	lsls	r3, r3, #1
 8007df0:	4413      	add	r3, r2
 8007df2:	00db      	lsls	r3, r3, #3
 8007df4:	440b      	add	r3, r1
 8007df6:	3302      	adds	r3, #2
 8007df8:	4602      	mov	r2, r0
 8007dfa:	701a      	strb	r2, [r3, #0]

			memset(&Temp_Tx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007dfc:	2218      	movs	r2, #24
 8007dfe:	2100      	movs	r1, #0
 8007e00:	4817      	ldr	r0, [pc, #92]	; (8007e60 <Send_Self_Sharing+0xc4>)
 8007e02:	f01a f96b 	bl	80220dc <memset>
			memcpy(&Temp_Tx_Ei_self_sharing_st,&Tx_Ei_self_sharing_st[Traverser],sizeof(EI_SELF_SHARING_t));
 8007e06:	79fa      	ldrb	r2, [r7, #7]
 8007e08:	4613      	mov	r3, r2
 8007e0a:	005b      	lsls	r3, r3, #1
 8007e0c:	4413      	add	r3, r2
 8007e0e:	00db      	lsls	r3, r3, #3
 8007e10:	4a11      	ldr	r2, [pc, #68]	; (8007e58 <Send_Self_Sharing+0xbc>)
 8007e12:	4413      	add	r3, r2
 8007e14:	2218      	movs	r2, #24
 8007e16:	4619      	mov	r1, r3
 8007e18:	4811      	ldr	r0, [pc, #68]	; (8007e60 <Send_Self_Sharing+0xc4>)
 8007e1a:	f01a f937 	bl	802208c <memcpy>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 8007e1e:	f240 2002 	movw	r0, #514	; 0x202
 8007e22:	f007 fa63 	bl	800f2ec <TransmitCanPkt>
#endif
			Self_Sharing_CAN_Clk[Traverser] = HAL_GetTick();
 8007e26:	79fc      	ldrb	r4, [r7, #7]
 8007e28:	f00d fa36 	bl	8015298 <HAL_GetTick>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	4a08      	ldr	r2, [pc, #32]	; (8007e50 <Send_Self_Sharing+0xb4>)
 8007e30:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
			return; /* Returning from the function because to avoid the Data Mismatch at Receiption end*/
 8007e34:	e008      	b.n	8007e48 <Send_Self_Sharing+0xac>
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007e36:	79fb      	ldrb	r3, [r7, #7]
 8007e38:	3301      	adds	r3, #1
 8007e3a:	71fb      	strb	r3, [r7, #7]
 8007e3c:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <Send_Self_Sharing+0xb8>)
 8007e3e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e42:	79fa      	ldrb	r2, [r7, #7]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d3af      	bcc.n	8007da8 <Send_Self_Sharing+0xc>
		}
	}
}
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	bd90      	pop	{r4, r7, pc}
 8007e4e:	bf00      	nop
 8007e50:	20000e44 	.word	0x20000e44
 8007e54:	20000304 	.word	0x20000304
 8007e58:	20001674 	.word	0x20001674
 8007e5c:	20001cc8 	.word	0x20001cc8
 8007e60:	20001854 	.word	0x20001854

08007e64 <Detect_CAN_Xchange_Failure>:

void Detect_CAN_Xchange_Failure(void)
{
 8007e64:	b580      	push	{r7, lr}
 8007e66:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(Is_CAN_Exchange_happening == YES)
 8007e68:	4b24      	ldr	r3, [pc, #144]	; (8007efc <Detect_CAN_Xchange_Failure+0x98>)
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <Detect_CAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 8007e70:	f00b f8ea 	bl	8013048 <Blink_S2>
	}

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8007e74:	4922      	ldr	r1, [pc, #136]	; (8007f00 <Detect_CAN_Xchange_Failure+0x9c>)
 8007e76:	4823      	ldr	r0, [pc, #140]	; (8007f04 <Detect_CAN_Xchange_Failure+0xa0>)
 8007e78:	f7f8 f9e2 	bl	8000240 <strcmp>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d103      	bne.n	8007e8a <Detect_CAN_Xchange_Failure+0x26>
	{
		Is_CAN_Exchange_happening = YES;
 8007e82:	4b1e      	ldr	r3, [pc, #120]	; (8007efc <Detect_CAN_Xchange_Failure+0x98>)
 8007e84:	2201      	movs	r2, #1
 8007e86:	701a      	strb	r2, [r3, #0]
		return;
 8007e88:	e036      	b.n	8007ef8 <Detect_CAN_Xchange_Failure+0x94>
	}
	if(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)>= EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT)
 8007e8a:	4b1f      	ldr	r3, [pc, #124]	; (8007f08 <Detect_CAN_Xchange_Failure+0xa4>)
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	4618      	mov	r0, r3
 8007e90:	f006 fcb6 	bl	800e800 <HAL_Elaps_Ticks>
 8007e94:	4602      	mov	r2, r0
 8007e96:	4b1d      	ldr	r3, [pc, #116]	; (8007f0c <Detect_CAN_Xchange_Failure+0xa8>)
 8007e98:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d32b      	bcc.n	8007ef8 <Detect_CAN_Xchange_Failure+0x94>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != RCV_SELF_XCHG_CLK)
 8007ea0:	4b1b      	ldr	r3, [pc, #108]	; (8007f10 <Detect_CAN_Xchange_Failure+0xac>)
 8007ea2:	681a      	ldr	r2, [r3, #0]
 8007ea4:	4b18      	ldr	r3, [pc, #96]	; (8007f08 <Detect_CAN_Xchange_Failure+0xa4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d025      	beq.n	8007ef8 <Detect_CAN_Xchange_Failure+0x94>
		{
			Is_CAN_Exchange_happening = NO;
 8007eac:	4b13      	ldr	r3, [pc, #76]	; (8007efc <Detect_CAN_Xchange_Failure+0x98>)
 8007eae:	2200      	movs	r2, #0
 8007eb0:	701a      	strb	r2, [r3, #0]
			Previous_Clock_RCV_SELF_XCHG_CLK = RCV_SELF_XCHG_CLK;
 8007eb2:	4b15      	ldr	r3, [pc, #84]	; (8007f08 <Detect_CAN_Xchange_Failure+0xa4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	4a16      	ldr	r2, [pc, #88]	; (8007f10 <Detect_CAN_Xchange_Failure+0xac>)
 8007eb8:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(RCV_SELF_XCHG_CLK)/1000));
 8007eba:	4b13      	ldr	r3, [pc, #76]	; (8007f08 <Detect_CAN_Xchange_Failure+0xa4>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	f006 fc9e 	bl	800e800 <HAL_Elaps_Ticks>
 8007ec4:	4603      	mov	r3, r0
 8007ec6:	4a13      	ldr	r2, [pc, #76]	; (8007f14 <Detect_CAN_Xchange_Failure+0xb0>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	099b      	lsrs	r3, r3, #6
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4811      	ldr	r0, [pc, #68]	; (8007f18 <Detect_CAN_Xchange_Failure+0xb4>)
 8007ed2:	f01a f9eb 	bl	80222ac <iprintf>
			printf("Mem setting Rx_Ei_self_sharing_st\n");
 8007ed6:	4811      	ldr	r0, [pc, #68]	; (8007f1c <Detect_CAN_Xchange_Failure+0xb8>)
 8007ed8:	f01a fa84 	bl	80223e4 <puts>
			memset(&Rx_Ei_self_sharing_st,0,sizeof(EI_SELF_SHARING_t));
 8007edc:	2218      	movs	r2, #24
 8007ede:	2100      	movs	r1, #0
 8007ee0:	480f      	ldr	r0, [pc, #60]	; (8007f20 <Detect_CAN_Xchange_Failure+0xbc>)
 8007ee2:	f01a f8fb 	bl	80220dc <memset>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t));
 8007ee6:	22a2      	movs	r2, #162	; 0xa2
 8007ee8:	2100      	movs	r1, #0
 8007eea:	480e      	ldr	r0, [pc, #56]	; (8007f24 <Detect_CAN_Xchange_Failure+0xc0>)
 8007eec:	f01a f8f6 	bl	80220dc <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007ef0:	f240 1019 	movw	r0, #281	; 0x119
 8007ef4:	f007 f9fa 	bl	800f2ec <TransmitCanPkt>
		}
	}
}
 8007ef8:	bd80      	pop	{r7, pc}
 8007efa:	bf00      	nop
 8007efc:	20000108 	.word	0x20000108
 8007f00:	08023a58 	.word	0x08023a58
 8007f04:	20000305 	.word	0x20000305
 8007f08:	20000e40 	.word	0x20000e40
 8007f0c:	20000304 	.word	0x20000304
 8007f10:	20002078 	.word	0x20002078
 8007f14:	10624dd3 	.word	0x10624dd3
 8007f18:	080248d4 	.word	0x080248d4
 8007f1c:	08024904 	.word	0x08024904
 8007f20:	20001764 	.word	0x20001764
 8007f24:	200010e4 	.word	0x200010e4

08007f28 <Process_Send_Signals_2_MIE>:

void Process_Send_Signals_2_MIE(void)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
	static uint8_t Prev_Buff[MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS] = {0,};
	uint8_t Serial_Send_Buffer[(MAX_OUTPUTS_PER_PEER * MAX_PEER_CONNECTIONS) + 10] = {0,};
	uint16_t Serial_Byte=0;
#endif

	if(HAL_Elaps_Ticks(MIE_Signal_Send_CLK) > (EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK))
 8007f2e:	4b3c      	ldr	r3, [pc, #240]	; (8008020 <Process_Send_Signals_2_MIE+0xf8>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f006 fc64 	bl	800e800 <HAL_Elaps_Ticks>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	4b3a      	ldr	r3, [pc, #232]	; (8008024 <Process_Send_Signals_2_MIE+0xfc>)
 8007f3c:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8007f40:	429a      	cmp	r2, r3
 8007f42:	d969      	bls.n	8008018 <Process_Send_Signals_2_MIE+0xf0>
	{
		uint8_t Traverser = 0;
 8007f44:	2300      	movs	r3, #0
 8007f46:	71fb      	strb	r3, [r7, #7]
		uint8_t Choice = 0;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	70fb      	strb	r3, [r7, #3]



#endif
#ifdef EI_2
		if(Is_CAN_Exchange_happening == NO)
 8007f4c:	4b36      	ldr	r3, [pc, #216]	; (8008028 <Process_Send_Signals_2_MIE+0x100>)
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d10f      	bne.n	8007f74 <Process_Send_Signals_2_MIE+0x4c>
		{
			printf("CAN Packet Not Receiving from EIPC1\n");
 8007f54:	4835      	ldr	r0, [pc, #212]	; (800802c <Process_Send_Signals_2_MIE+0x104>)
 8007f56:	f01a fa45 	bl	80223e4 <puts>
			printf("Sending Blank Relay statuses\n");
 8007f5a:	4835      	ldr	r0, [pc, #212]	; (8008030 <Process_Send_Signals_2_MIE+0x108>)
 8007f5c:	f01a fa42 	bl	80223e4 <puts>
			memset(&vEI_Transver_EI_To_MIE,0,sizeof(vEI_Transver_EI_To_MIE));
 8007f60:	22a2      	movs	r2, #162	; 0xa2
 8007f62:	2100      	movs	r1, #0
 8007f64:	4833      	ldr	r0, [pc, #204]	; (8008034 <Process_Send_Signals_2_MIE+0x10c>)
 8007f66:	f01a f8b9 	bl	80220dc <memset>
			TransmitCanPkt(EI_PROCESS_DATA);
 8007f6a:	f240 1019 	movw	r0, #281	; 0x119
 8007f6e:	f007 f9bd 	bl	800f2ec <TransmitCanPkt>
 8007f72:	e01c      	b.n	8007fae <Process_Send_Signals_2_MIE+0x86>
		}
		else
		{
			for(Traverser =0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007f74:	2300      	movs	r3, #0
 8007f76:	71fb      	strb	r3, [r7, #7]
 8007f78:	e013      	b.n	8007fa2 <Process_Send_Signals_2_MIE+0x7a>
			{
				memcpy(&vEI_Transver_EI_To_MIE.Inputs[Traverser * MAX_OUTPUTS_PER_PEER],Main_Relays_st[Traverser].RelayIPS_Buff,MAX_OUTPUTS_PER_PEER);
 8007f7a:	79fb      	ldrb	r3, [r7, #7]
 8007f7c:	011b      	lsls	r3, r3, #4
 8007f7e:	4a2d      	ldr	r2, [pc, #180]	; (8008034 <Process_Send_Signals_2_MIE+0x10c>)
 8007f80:	4413      	add	r3, r2
 8007f82:	1c98      	adds	r0, r3, #2
 8007f84:	79fa      	ldrb	r2, [r7, #7]
 8007f86:	4613      	mov	r3, r2
 8007f88:	009b      	lsls	r3, r3, #2
 8007f8a:	4413      	add	r3, r2
 8007f8c:	009b      	lsls	r3, r3, #2
 8007f8e:	4a2a      	ldr	r2, [pc, #168]	; (8008038 <Process_Send_Signals_2_MIE+0x110>)
 8007f90:	4413      	add	r3, r2
 8007f92:	3301      	adds	r3, #1
 8007f94:	2210      	movs	r2, #16
 8007f96:	4619      	mov	r1, r3
 8007f98:	f01a f878 	bl	802208c <memcpy>
			for(Traverser =0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8007f9c:	79fb      	ldrb	r3, [r7, #7]
 8007f9e:	3301      	adds	r3, #1
 8007fa0:	71fb      	strb	r3, [r7, #7]
 8007fa2:	4b20      	ldr	r3, [pc, #128]	; (8008024 <Process_Send_Signals_2_MIE+0xfc>)
 8007fa4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007fa8:	79fa      	ldrb	r2, [r7, #7]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d3e5      	bcc.n	8007f7a <Process_Send_Signals_2_MIE+0x52>
		//			{
		//				if()
		//			}
		//		}

		if(Debug_flag == 1)
 8007fae:	4b23      	ldr	r3, [pc, #140]	; (800803c <Process_Send_Signals_2_MIE+0x114>)
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	2b01      	cmp	r3, #1
 8007fb4:	d12b      	bne.n	800800e <Process_Send_Signals_2_MIE+0xe6>
		{
			printf("Data Sending 2 MIE T:%02u:%02u:%02u\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
 8007fb6:	4b22      	ldr	r3, [pc, #136]	; (8008040 <Process_Send_Signals_2_MIE+0x118>)
 8007fb8:	781b      	ldrb	r3, [r3, #0]
 8007fba:	4619      	mov	r1, r3
 8007fbc:	4b20      	ldr	r3, [pc, #128]	; (8008040 <Process_Send_Signals_2_MIE+0x118>)
 8007fbe:	785b      	ldrb	r3, [r3, #1]
 8007fc0:	461a      	mov	r2, r3
 8007fc2:	4b1f      	ldr	r3, [pc, #124]	; (8008040 <Process_Send_Signals_2_MIE+0x118>)
 8007fc4:	789b      	ldrb	r3, [r3, #2]
 8007fc6:	481f      	ldr	r0, [pc, #124]	; (8008044 <Process_Send_Signals_2_MIE+0x11c>)
 8007fc8:	f01a f970 	bl	80222ac <iprintf>
			//		for(uint16_t Byte = 0; Byte<Num_of_Bytes;++Byte )
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8007fcc:	2300      	movs	r3, #0
 8007fce:	80bb      	strh	r3, [r7, #4]
 8007fd0:	e013      	b.n	8007ffa <Process_Send_Signals_2_MIE+0xd2>

			{
				printf("%02X ",vEI_Transver_EI_To_MIE.Inputs[Byte]);
 8007fd2:	88bb      	ldrh	r3, [r7, #4]
 8007fd4:	4a17      	ldr	r2, [pc, #92]	; (8008034 <Process_Send_Signals_2_MIE+0x10c>)
 8007fd6:	4413      	add	r3, r2
 8007fd8:	789b      	ldrb	r3, [r3, #2]
 8007fda:	4619      	mov	r1, r3
 8007fdc:	481a      	ldr	r0, [pc, #104]	; (8008048 <Process_Send_Signals_2_MIE+0x120>)
 8007fde:	f01a f965 	bl	80222ac <iprintf>
				if(((Byte+1)%16)==0)
 8007fe2:	88bb      	ldrh	r3, [r7, #4]
 8007fe4:	3301      	adds	r3, #1
 8007fe6:	f003 030f 	and.w	r3, r3, #15
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d102      	bne.n	8007ff4 <Process_Send_Signals_2_MIE+0xcc>
				{
					printf("\n");
 8007fee:	200a      	movs	r0, #10
 8007ff0:	f01a f974 	bl	80222dc <putchar>
			for(uint16_t Byte = 0; Byte<(EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);++Byte )
 8007ff4:	88bb      	ldrh	r3, [r7, #4]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	80bb      	strh	r3, [r7, #4]
 8007ffa:	88ba      	ldrh	r2, [r7, #4]
 8007ffc:	4b09      	ldr	r3, [pc, #36]	; (8008024 <Process_Send_Signals_2_MIE+0xfc>)
 8007ffe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008002:	011b      	lsls	r3, r3, #4
 8008004:	429a      	cmp	r2, r3
 8008006:	dbe4      	blt.n	8007fd2 <Process_Send_Signals_2_MIE+0xaa>
				}
			}
			printf("\n");
 8008008:	200a      	movs	r0, #10
 800800a:	f01a f967 	bl	80222dc <putchar>
		}

#endif
		MIE_Signal_Send_CLK = HAL_GetTick();
 800800e:	f00d f943 	bl	8015298 <HAL_GetTick>
 8008012:	4603      	mov	r3, r0
 8008014:	4a02      	ldr	r2, [pc, #8]	; (8008020 <Process_Send_Signals_2_MIE+0xf8>)
 8008016:	6013      	str	r3, [r2, #0]
		UNUSED(Choice);
	}
}
 8008018:	bf00      	nop
 800801a:	3708      	adds	r7, #8
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000e70 	.word	0x20000e70
 8008024:	20000304 	.word	0x20000304
 8008028:	20000108 	.word	0x20000108
 800802c:	08024928 	.word	0x08024928
 8008030:	0802494c 	.word	0x0802494c
 8008034:	200010e4 	.word	0x200010e4
 8008038:	20001e80 	.word	0x20001e80
 800803c:	20000645 	.word	0x20000645
 8008040:	200027e0 	.word	0x200027e0
 8008044:	0802496c 	.word	0x0802496c
 8008048:	08024994 	.word	0x08024994

0800804c <Print_EI_DATA>:
	Display("\n___________________________________________________\n");
}
#endif

void Print_EI_DATA(uint8_t *Msg,uint8_t Msg_Status,uint8_t Length)
{
 800804c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800804e:	b0a1      	sub	sp, #132	; 0x84
 8008050:	af04      	add	r7, sp, #16
 8008052:	6078      	str	r0, [r7, #4]
 8008054:	460b      	mov	r3, r1
 8008056:	70fb      	strb	r3, [r7, #3]
 8008058:	4613      	mov	r3, r2
 800805a:	70bb      	strb	r3, [r7, #2]
	char Print_buff[100] = {0,};
 800805c:	2300      	movs	r3, #0
 800805e:	60bb      	str	r3, [r7, #8]
 8008060:	f107 030c 	add.w	r3, r7, #12
 8008064:	2260      	movs	r2, #96	; 0x60
 8008066:	2100      	movs	r1, #0
 8008068:	4618      	mov	r0, r3
 800806a:	f01a f837 	bl	80220dc <memset>
	uint8_t Msg_type;
	uint16_t Msg_status_flag;
	uint8_t Traverser = 0;
 800806e:	2300      	movs	r3, #0
 8008070:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f

	//	Display("\n________________________________________MSG DETAILS________________________________________\n");
	//Display("\nMSG STATUS:");

	Msg_Status?Display("\nRCV|"):Display("\nXMT|");
 8008074:	78fb      	ldrb	r3, [r7, #3]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d003      	beq.n	8008082 <Print_EI_DATA+0x36>
 800807a:	4889      	ldr	r0, [pc, #548]	; (80082a0 <Print_EI_DATA+0x254>)
 800807c:	f000 f936 	bl	80082ec <Display>
 8008080:	e002      	b.n	8008088 <Print_EI_DATA+0x3c>
 8008082:	4888      	ldr	r0, [pc, #544]	; (80082a4 <Print_EI_DATA+0x258>)
 8008084:	f000 f932 	bl	80082ec <Display>

	//sprintf(Print_buff,"D_ADDR: %04lX  |",ExtractBits(0,16,&Msg[1]));
	sprintf(Print_buff,"D_A:%lu|",ExtractBits(0,16,&Msg[1]));
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	3301      	adds	r3, #1
 800808c:	461a      	mov	r2, r3
 800808e:	2110      	movs	r1, #16
 8008090:	2000      	movs	r0, #0
 8008092:	f7f8 fabf 	bl	8000614 <ExtractBits>
 8008096:	4602      	mov	r2, r0
 8008098:	f107 0308 	add.w	r3, r7, #8
 800809c:	4982      	ldr	r1, [pc, #520]	; (80082a8 <Print_EI_DATA+0x25c>)
 800809e:	4618      	mov	r0, r3
 80080a0:	f01a fabc 	bl	802261c <siprintf>
	Display(Print_buff);
 80080a4:	f107 0308 	add.w	r3, r7, #8
 80080a8:	4618      	mov	r0, r3
 80080aa:	f000 f91f 	bl	80082ec <Display>

	//sprintf(Print_buff,"S_ADDR: %04lX|\n",ExtractBits(0,16,&Msg[3]));
	sprintf(Print_buff,"S_A:%lu|",ExtractBits(0,16,&Msg[3]));
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	3303      	adds	r3, #3
 80080b2:	461a      	mov	r2, r3
 80080b4:	2110      	movs	r1, #16
 80080b6:	2000      	movs	r0, #0
 80080b8:	f7f8 faac 	bl	8000614 <ExtractBits>
 80080bc:	4602      	mov	r2, r0
 80080be:	f107 0308 	add.w	r3, r7, #8
 80080c2:	497a      	ldr	r1, [pc, #488]	; (80082ac <Print_EI_DATA+0x260>)
 80080c4:	4618      	mov	r0, r3
 80080c6:	f01a faa9 	bl	802261c <siprintf>
	Display(Print_buff);
 80080ca:	f107 0308 	add.w	r3, r7, #8
 80080ce:	4618      	mov	r0, r3
 80080d0:	f000 f90c 	bl	80082ec <Display>

	Msg_type = ExtractBits(0,8,&Msg[7]);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	3307      	adds	r3, #7
 80080d8:	461a      	mov	r2, r3
 80080da:	2108      	movs	r1, #8
 80080dc:	2000      	movs	r0, #0
 80080de:	f7f8 fa99 	bl	8000614 <ExtractBits>
 80080e2:	4603      	mov	r3, r0
 80080e4:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
	Display("MT:");
 80080e8:	4871      	ldr	r0, [pc, #452]	; (80082b0 <Print_EI_DATA+0x264>)
 80080ea:	f000 f8ff 	bl	80082ec <Display>
	switch(Msg_type)
 80080ee:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80080f2:	3b01      	subs	r3, #1
 80080f4:	2b05      	cmp	r3, #5
 80080f6:	d826      	bhi.n	8008146 <Print_EI_DATA+0xfa>
 80080f8:	a201      	add	r2, pc, #4	; (adr r2, 8008100 <Print_EI_DATA+0xb4>)
 80080fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080fe:	bf00      	nop
 8008100:	08008119 	.word	0x08008119
 8008104:	0800812f 	.word	0x0800812f
 8008108:	08008147 	.word	0x08008147
 800810c:	08008137 	.word	0x08008137
 8008110:	08008147 	.word	0x08008147
 8008114:	0800813f 	.word	0x0800813f
	{
	case 1:
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008118:	78fb      	ldrb	r3, [r7, #3]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d003      	beq.n	8008126 <Print_EI_DATA+0xda>
 800811e:	4865      	ldr	r0, [pc, #404]	; (80082b4 <Print_EI_DATA+0x268>)
 8008120:	f000 f8e4 	bl	80082ec <Display>
		//Display("INIT     ");
		break;
 8008124:	e012      	b.n	800814c <Print_EI_DATA+0x100>
		Msg_Status?Display("INIT_R"):Display("INIT_X");
 8008126:	4864      	ldr	r0, [pc, #400]	; (80082b8 <Print_EI_DATA+0x26c>)
 8008128:	f000 f8e0 	bl	80082ec <Display>
		break;
 800812c:	e00e      	b.n	800814c <Print_EI_DATA+0x100>
	case 2:
		Display("VIT");
 800812e:	4863      	ldr	r0, [pc, #396]	; (80082bc <Print_EI_DATA+0x270>)
 8008130:	f000 f8dc 	bl	80082ec <Display>
		break;
 8008134:	e00a      	b.n	800814c <Print_EI_DATA+0x100>
	case 4:
		Display("STS");
 8008136:	4862      	ldr	r0, [pc, #392]	; (80082c0 <Print_EI_DATA+0x274>)
 8008138:	f000 f8d8 	bl	80082ec <Display>
		break;
 800813c:	e006      	b.n	800814c <Print_EI_DATA+0x100>
	case 6:
		Display("SER");
 800813e:	4861      	ldr	r0, [pc, #388]	; (80082c4 <Print_EI_DATA+0x278>)
 8008140:	f000 f8d4 	bl	80082ec <Display>
		break;
 8008144:	e002      	b.n	800814c <Print_EI_DATA+0x100>
	default:
		Display("UNKNOWN MESSAGE\n");
 8008146:	4860      	ldr	r0, [pc, #384]	; (80082c8 <Print_EI_DATA+0x27c>)
 8008148:	f000 f8d0 	bl	80082ec <Display>
	}
	Display("|");
 800814c:	485f      	ldr	r0, [pc, #380]	; (80082cc <Print_EI_DATA+0x280>)
 800814e:	f000 f8cd 	bl	80082ec <Display>

	sprintf(Print_buff,"TX:%02lX|",ExtractBits(0,8,&Msg[5]));
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	3305      	adds	r3, #5
 8008156:	461a      	mov	r2, r3
 8008158:	2108      	movs	r1, #8
 800815a:	2000      	movs	r0, #0
 800815c:	f7f8 fa5a 	bl	8000614 <ExtractBits>
 8008160:	4602      	mov	r2, r0
 8008162:	f107 0308 	add.w	r3, r7, #8
 8008166:	495a      	ldr	r1, [pc, #360]	; (80082d0 <Print_EI_DATA+0x284>)
 8008168:	4618      	mov	r0, r3
 800816a:	f01a fa57 	bl	802261c <siprintf>
	Display(Print_buff);
 800816e:	f107 0308 	add.w	r3, r7, #8
 8008172:	4618      	mov	r0, r3
 8008174:	f000 f8ba 	bl	80082ec <Display>

	sprintf(Print_buff,"RX:%02lX|",ExtractBits(0,8,&Msg[6]));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	3306      	adds	r3, #6
 800817c:	461a      	mov	r2, r3
 800817e:	2108      	movs	r1, #8
 8008180:	2000      	movs	r0, #0
 8008182:	f7f8 fa47 	bl	8000614 <ExtractBits>
 8008186:	4602      	mov	r2, r0
 8008188:	f107 0308 	add.w	r3, r7, #8
 800818c:	4951      	ldr	r1, [pc, #324]	; (80082d4 <Print_EI_DATA+0x288>)
 800818e:	4618      	mov	r0, r3
 8008190:	f01a fa44 	bl	802261c <siprintf>
	Display(Print_buff);
 8008194:	f107 0308 	add.w	r3, r7, #8
 8008198:	4618      	mov	r0, r3
 800819a:	f000 f8a7 	bl	80082ec <Display>

	Msg_status_flag = ExtractBits(0,16,&Msg[8]);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	3308      	adds	r3, #8
 80081a2:	461a      	mov	r2, r3
 80081a4:	2110      	movs	r1, #16
 80081a6:	2000      	movs	r0, #0
 80081a8:	f7f8 fa34 	bl	8000614 <ExtractBits>
 80081ac:	4603      	mov	r3, r0
 80081ae:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
	sprintf(Print_buff,"MSF:%04X|",Msg_status_flag);
 80081b2:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 80081b6:	f107 0308 	add.w	r3, r7, #8
 80081ba:	4947      	ldr	r1, [pc, #284]	; (80082d8 <Print_EI_DATA+0x28c>)
 80081bc:	4618      	mov	r0, r3
 80081be:	f01a fa2d 	bl	802261c <siprintf>
	Display(Print_buff);
 80081c2:	f107 0308 	add.w	r3, r7, #8
 80081c6:	4618      	mov	r0, r3
 80081c8:	f000 f890 	bl	80082ec <Display>
	if( ((Msg_status_flag >> 5)&1) == 1)
 80081cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80081d0:	095b      	lsrs	r3, r3, #5
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d027      	beq.n	800822c <Print_EI_DATA+0x1e0>
	{
		sprintf(Print_buff,"DT:%02X%02X%02X|T:%02X:%02X:%02X\n",Msg[10],Msg[11],Msg[12],Msg[13],Msg[14],Msg[15]);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	330a      	adds	r3, #10
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	461d      	mov	r5, r3
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	330b      	adds	r3, #11
 80081e8:	781b      	ldrb	r3, [r3, #0]
 80081ea:	461e      	mov	r6, r3
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	330c      	adds	r3, #12
 80081f0:	781b      	ldrb	r3, [r3, #0]
 80081f2:	461a      	mov	r2, r3
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	330d      	adds	r3, #13
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	4619      	mov	r1, r3
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	330e      	adds	r3, #14
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	461c      	mov	r4, r3
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	330f      	adds	r3, #15
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	f107 0008 	add.w	r0, r7, #8
 800820e:	9303      	str	r3, [sp, #12]
 8008210:	9402      	str	r4, [sp, #8]
 8008212:	9101      	str	r1, [sp, #4]
 8008214:	9200      	str	r2, [sp, #0]
 8008216:	4633      	mov	r3, r6
 8008218:	462a      	mov	r2, r5
 800821a:	4930      	ldr	r1, [pc, #192]	; (80082dc <Print_EI_DATA+0x290>)
 800821c:	f01a f9fe 	bl	802261c <siprintf>
		Display(Print_buff);
 8008220:	f107 0308 	add.w	r3, r7, #8
 8008224:	4618      	mov	r0, r3
 8008226:	f000 f861 	bl	80082ec <Display>
 800822a:	e002      	b.n	8008232 <Print_EI_DATA+0x1e6>
	}
	else
	{
		Display("NO TIME SPECIFIED\n");
 800822c:	482c      	ldr	r0, [pc, #176]	; (80082e0 <Print_EI_DATA+0x294>)
 800822e:	f000 f85d 	bl	80082ec <Display>
	}
	if(Debug_flag == 1)
 8008232:	4b2c      	ldr	r3, [pc, #176]	; (80082e4 <Print_EI_DATA+0x298>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	2b01      	cmp	r3, #1
 8008238:	d12d      	bne.n	8008296 <Print_EI_DATA+0x24a>
	{
		for(Traverser = 0;Traverser<Length;++Traverser)
 800823a:	2300      	movs	r3, #0
 800823c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8008240:	e015      	b.n	800826e <Print_EI_DATA+0x222>
		{
			sprintf(Print_buff,"%02X ",Msg[Traverser]);
 8008242:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008246:	687a      	ldr	r2, [r7, #4]
 8008248:	4413      	add	r3, r2
 800824a:	781b      	ldrb	r3, [r3, #0]
 800824c:	461a      	mov	r2, r3
 800824e:	f107 0308 	add.w	r3, r7, #8
 8008252:	4925      	ldr	r1, [pc, #148]	; (80082e8 <Print_EI_DATA+0x29c>)
 8008254:	4618      	mov	r0, r3
 8008256:	f01a f9e1 	bl	802261c <siprintf>
			Display(Print_buff);
 800825a:	f107 0308 	add.w	r3, r7, #8
 800825e:	4618      	mov	r0, r3
 8008260:	f000 f844 	bl	80082ec <Display>
		for(Traverser = 0;Traverser<Length;++Traverser)
 8008264:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8008268:	3301      	adds	r3, #1
 800826a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 800826e:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 8008272:	78bb      	ldrb	r3, [r7, #2]
 8008274:	429a      	cmp	r2, r3
 8008276:	d3e4      	bcc.n	8008242 <Print_EI_DATA+0x1f6>
			//		if( (Traverser>0) && ((Traverser%16) == 0) )
			//		{
			//			Display("\n");
			//		}
		}
		if(Msg_Status == XMT)
 8008278:	78fb      	ldrb	r3, [r7, #3]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d10b      	bne.n	8008296 <Print_EI_DATA+0x24a>
		{
			sprintf(Print_buff,"%02X ",0xF6);
 800827e:	f107 0308 	add.w	r3, r7, #8
 8008282:	22f6      	movs	r2, #246	; 0xf6
 8008284:	4918      	ldr	r1, [pc, #96]	; (80082e8 <Print_EI_DATA+0x29c>)
 8008286:	4618      	mov	r0, r3
 8008288:	f01a f9c8 	bl	802261c <siprintf>
			Display(Print_buff);
 800828c:	f107 0308 	add.w	r3, r7, #8
 8008290:	4618      	mov	r0, r3
 8008292:	f000 f82b 	bl	80082ec <Display>
		}
	}
	//	Display("\n");
	//Display("\n__________ MSG DETAILS __________\n");
}
 8008296:	bf00      	nop
 8008298:	3774      	adds	r7, #116	; 0x74
 800829a:	46bd      	mov	sp, r7
 800829c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800829e:	bf00      	nop
 80082a0:	0802499c 	.word	0x0802499c
 80082a4:	080249a4 	.word	0x080249a4
 80082a8:	080249ac 	.word	0x080249ac
 80082ac:	080249b8 	.word	0x080249b8
 80082b0:	080249c4 	.word	0x080249c4
 80082b4:	080249c8 	.word	0x080249c8
 80082b8:	080249d0 	.word	0x080249d0
 80082bc:	080249d8 	.word	0x080249d8
 80082c0:	080249dc 	.word	0x080249dc
 80082c4:	080249e0 	.word	0x080249e0
 80082c8:	080249e4 	.word	0x080249e4
 80082cc:	080249f8 	.word	0x080249f8
 80082d0:	080249fc 	.word	0x080249fc
 80082d4:	08024a08 	.word	0x08024a08
 80082d8:	08024a14 	.word	0x08024a14
 80082dc:	08024a20 	.word	0x08024a20
 80082e0:	08024a44 	.word	0x08024a44
 80082e4:	20000645 	.word	0x20000645
 80082e8:	08024994 	.word	0x08024994

080082ec <Display>:

void Display(char *Data)
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b084      	sub	sp, #16
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
	uint8_t Traverser = 0;
 80082f4:	2300      	movs	r3, #0
 80082f6:	73fb      	strb	r3, [r7, #15]
	for(;Data[Traverser];++Traverser)
 80082f8:	e00a      	b.n	8008310 <Display+0x24>
	{
		Com_SendByte(0,Data[Traverser]);
 80082fa:	7bfb      	ldrb	r3, [r7, #15]
 80082fc:	687a      	ldr	r2, [r7, #4]
 80082fe:	4413      	add	r3, r2
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	4619      	mov	r1, r3
 8008304:	2000      	movs	r0, #0
 8008306:	f00c fd6f 	bl	8014de8 <Com_SendByte>
	for(;Data[Traverser];++Traverser)
 800830a:	7bfb      	ldrb	r3, [r7, #15]
 800830c:	3301      	adds	r3, #1
 800830e:	73fb      	strb	r3, [r7, #15]
 8008310:	7bfb      	ldrb	r3, [r7, #15]
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	4413      	add	r3, r2
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d1ee      	bne.n	80082fa <Display+0xe>
	}
}
 800831c:	bf00      	nop
 800831e:	bf00      	nop
 8008320:	3710      	adds	r7, #16
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}
	...

08008328 <print_self_Details>:
	}

}

void print_self_Details(void)
{
 8008328:	b5b0      	push	{r4, r5, r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af04      	add	r7, sp, #16
	uint8_t Traverser = 0;
 800832e:	2300      	movs	r3, #0
 8008330:	71fb      	strb	r3, [r7, #7]

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 8008332:	4890      	ldr	r0, [pc, #576]	; (8008574 <print_self_Details+0x24c>)
 8008334:	f01a f856 	bl	80223e4 <puts>
#endif

	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 8008338:	4b8f      	ldr	r3, [pc, #572]	; (8008578 <print_self_Details+0x250>)
 800833a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800833e:	4619      	mov	r1, r3
 8008340:	488e      	ldr	r0, [pc, #568]	; (800857c <print_self_Details+0x254>)
 8008342:	f019 ffb3 	bl	80222ac <iprintf>
	printf("EI_data.Hitachi_st.CanXchange:%lu\n",EI_data.Hitachi_st.CAN_Xchange_Time);
 8008346:	4b8c      	ldr	r3, [pc, #560]	; (8008578 <print_self_Details+0x250>)
 8008348:	f8d3 3218 	ldr.w	r3, [r3, #536]	; 0x218
 800834c:	4619      	mov	r1, r3
 800834e:	488c      	ldr	r0, [pc, #560]	; (8008580 <print_self_Details+0x258>)
 8008350:	f019 ffac 	bl	80222ac <iprintf>
	printf("EI_data.Hitachi_st.CanXchangeTimeout:%lu\n",EI_data.Hitachi_st.CAN_EXCHANGE_TIME_OUT);
 8008354:	4b88      	ldr	r3, [pc, #544]	; (8008578 <print_self_Details+0x250>)
 8008356:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 800835a:	4619      	mov	r1, r3
 800835c:	4889      	ldr	r0, [pc, #548]	; (8008584 <print_self_Details+0x25c>)
 800835e:	f019 ffa5 	bl	80222ac <iprintf>
	printf("EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Hitachi_st.MIE_SIGNAL_SEND_CLK);
 8008362:	4b85      	ldr	r3, [pc, #532]	; (8008578 <print_self_Details+0x250>)
 8008364:	f8d3 3220 	ldr.w	r3, [r3, #544]	; 0x220
 8008368:	4619      	mov	r1, r3
 800836a:	4887      	ldr	r0, [pc, #540]	; (8008588 <print_self_Details+0x260>)
 800836c:	f019 ff9e 	bl	80222ac <iprintf>
	printf("EI_data.Hitachi_st.HEALTH_PACKET_TIME:%lu\n",EI_data.Hitachi_st.HEALTH_PACKET_TIME);
 8008370:	4b81      	ldr	r3, [pc, #516]	; (8008578 <print_self_Details+0x250>)
 8008372:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8008376:	4619      	mov	r1, r3
 8008378:	4884      	ldr	r0, [pc, #528]	; (800858c <print_self_Details+0x264>)
 800837a:	f019 ff97 	bl	80222ac <iprintf>
	printf("EI_data.Hitachi_st.Self_Listening_Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800837e:	4b7e      	ldr	r3, [pc, #504]	; (8008578 <print_self_Details+0x250>)
 8008380:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008384:	4619      	mov	r1, r3
 8008386:	4882      	ldr	r0, [pc, #520]	; (8008590 <print_self_Details+0x268>)
 8008388:	f019 ff90 	bl	80222ac <iprintf>
	printf("EI_data.Hitachi_st.No_of_IP_s:%u\n",EI_data.Hitachi_st.No_of_IP_s);
 800838c:	4b7a      	ldr	r3, [pc, #488]	; (8008578 <print_self_Details+0x250>)
 800838e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008392:	4619      	mov	r1, r3
 8008394:	4879      	ldr	r0, [pc, #484]	; (800857c <print_self_Details+0x254>)
 8008396:	f019 ff89 	bl	80222ac <iprintf>


	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800839a:	2300      	movs	r3, #0
 800839c:	71fb      	strb	r3, [r7, #7]
 800839e:	e03b      	b.n	8008418 <print_self_Details+0xf0>
	{
		printf("Source IP[%u]  :%u.%u.%u.%u\n",Traverser,EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2],EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 80083a0:	79f9      	ldrb	r1, [r7, #7]
 80083a2:	79fb      	ldrb	r3, [r7, #7]
 80083a4:	4a74      	ldr	r2, [pc, #464]	; (8008578 <print_self_Details+0x250>)
 80083a6:	3326      	adds	r3, #38	; 0x26
 80083a8:	009b      	lsls	r3, r3, #2
 80083aa:	4413      	add	r3, r2
 80083ac:	78db      	ldrb	r3, [r3, #3]
 80083ae:	461c      	mov	r4, r3
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	4a71      	ldr	r2, [pc, #452]	; (8008578 <print_self_Details+0x250>)
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	4413      	add	r3, r2
 80083b8:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 80083bc:	461d      	mov	r5, r3
 80083be:	79fb      	ldrb	r3, [r7, #7]
 80083c0:	4a6d      	ldr	r2, [pc, #436]	; (8008578 <print_self_Details+0x250>)
 80083c2:	009b      	lsls	r3, r3, #2
 80083c4:	4413      	add	r3, r2
 80083c6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80083ca:	4618      	mov	r0, r3
 80083cc:	79fb      	ldrb	r3, [r7, #7]
 80083ce:	4a6a      	ldr	r2, [pc, #424]	; (8008578 <print_self_Details+0x250>)
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4413      	add	r3, r2
 80083d4:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 80083d8:	9301      	str	r3, [sp, #4]
 80083da:	9000      	str	r0, [sp, #0]
 80083dc:	462b      	mov	r3, r5
 80083de:	4622      	mov	r2, r4
 80083e0:	486c      	ldr	r0, [pc, #432]	; (8008594 <print_self_Details+0x26c>)
 80083e2:	f019 ff63 	bl	80222ac <iprintf>
		printf("TX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][TX_PORT]);
 80083e6:	79f9      	ldrb	r1, [r7, #7]
 80083e8:	79fb      	ldrb	r3, [r7, #7]
 80083ea:	4a63      	ldr	r2, [pc, #396]	; (8008578 <print_self_Details+0x250>)
 80083ec:	3352      	adds	r3, #82	; 0x52
 80083ee:	009b      	lsls	r3, r3, #2
 80083f0:	4413      	add	r3, r2
 80083f2:	885b      	ldrh	r3, [r3, #2]
 80083f4:	461a      	mov	r2, r3
 80083f6:	4868      	ldr	r0, [pc, #416]	; (8008598 <print_self_Details+0x270>)
 80083f8:	f019 ff58 	bl	80222ac <iprintf>
		printf("RX_Port[%u]:%u\n",Traverser,EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT]);
 80083fc:	79f9      	ldrb	r1, [r7, #7]
 80083fe:	79fb      	ldrb	r3, [r7, #7]
 8008400:	4a5d      	ldr	r2, [pc, #372]	; (8008578 <print_self_Details+0x250>)
 8008402:	009b      	lsls	r3, r3, #2
 8008404:	4413      	add	r3, r2
 8008406:	f8b3 314c 	ldrh.w	r3, [r3, #332]	; 0x14c
 800840a:	461a      	mov	r2, r3
 800840c:	4863      	ldr	r0, [pc, #396]	; (800859c <print_self_Details+0x274>)
 800840e:	f019 ff4d 	bl	80222ac <iprintf>
	for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 8008412:	79fb      	ldrb	r3, [r7, #7]
 8008414:	3301      	adds	r3, #1
 8008416:	71fb      	strb	r3, [r7, #7]
 8008418:	4b57      	ldr	r3, [pc, #348]	; (8008578 <print_self_Details+0x250>)
 800841a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800841e:	79fa      	ldrb	r2, [r7, #7]
 8008420:	429a      	cmp	r2, r3
 8008422:	d3bd      	bcc.n	80083a0 <print_self_Details+0x78>
	}
	printf("Self IP       :%u.%u.%u.%u\n",EI_data.Hitachi_st.Self_IP[CARD_INDEX][0],EI_data.Hitachi_st.Self_IP[CARD_INDEX][1],EI_data.Hitachi_st.Self_IP[CARD_INDEX][2],EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 8008424:	4b54      	ldr	r3, [pc, #336]	; (8008578 <print_self_Details+0x250>)
 8008426:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800842a:	4619      	mov	r1, r3
 800842c:	4b52      	ldr	r3, [pc, #328]	; (8008578 <print_self_Details+0x250>)
 800842e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008432:	461a      	mov	r2, r3
 8008434:	4b50      	ldr	r3, [pc, #320]	; (8008578 <print_self_Details+0x250>)
 8008436:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800843a:	4618      	mov	r0, r3
 800843c:	4b4e      	ldr	r3, [pc, #312]	; (8008578 <print_self_Details+0x250>)
 800843e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008442:	9300      	str	r3, [sp, #0]
 8008444:	4603      	mov	r3, r0
 8008446:	4856      	ldr	r0, [pc, #344]	; (80085a0 <print_self_Details+0x278>)
 8008448:	f019 ff30 	bl	80222ac <iprintf>
	printf("Self MAC      :%02X:%02X:%02X:%02X:%02X:%02X\n",EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][1],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][2],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][3],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][4],EI_data.Hitachi_st.Self_MAC[CARD_INDEX][5]);
 800844c:	4b4a      	ldr	r3, [pc, #296]	; (8008578 <print_self_Details+0x250>)
 800844e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008452:	4618      	mov	r0, r3
 8008454:	4b48      	ldr	r3, [pc, #288]	; (8008578 <print_self_Details+0x250>)
 8008456:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800845a:	461c      	mov	r4, r3
 800845c:	4b46      	ldr	r3, [pc, #280]	; (8008578 <print_self_Details+0x250>)
 800845e:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 8008462:	461d      	mov	r5, r3
 8008464:	4b44      	ldr	r3, [pc, #272]	; (8008578 <print_self_Details+0x250>)
 8008466:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 800846a:	461a      	mov	r2, r3
 800846c:	4b42      	ldr	r3, [pc, #264]	; (8008578 <print_self_Details+0x250>)
 800846e:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 8008472:	4619      	mov	r1, r3
 8008474:	4b40      	ldr	r3, [pc, #256]	; (8008578 <print_self_Details+0x250>)
 8008476:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 800847a:	9302      	str	r3, [sp, #8]
 800847c:	9101      	str	r1, [sp, #4]
 800847e:	9200      	str	r2, [sp, #0]
 8008480:	462b      	mov	r3, r5
 8008482:	4622      	mov	r2, r4
 8008484:	4601      	mov	r1, r0
 8008486:	4847      	ldr	r0, [pc, #284]	; (80085a4 <print_self_Details+0x27c>)
 8008488:	f019 ff10 	bl	80222ac <iprintf>

	printf("Listening Port:%u\n",EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);
 800848c:	4b3a      	ldr	r3, [pc, #232]	; (8008578 <print_self_Details+0x250>)
 800848e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008492:	4619      	mov	r1, r3
 8008494:	4844      	ldr	r0, [pc, #272]	; (80085a8 <print_self_Details+0x280>)
 8008496:	f019 ff09 	bl	80222ac <iprintf>

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 800849a:	2300      	movs	r3, #0
 800849c:	71fb      	strb	r3, [r7, #7]
 800849e:	e05c      	b.n	800855a <print_self_Details+0x232>
	{
		printf("\nPEER:%u Details:\n",Traverser+1);
 80084a0:	79fb      	ldrb	r3, [r7, #7]
 80084a2:	3301      	adds	r3, #1
 80084a4:	4619      	mov	r1, r3
 80084a6:	4841      	ldr	r0, [pc, #260]	; (80085ac <print_self_Details+0x284>)
 80084a8:	f019 ff00 	bl	80222ac <iprintf>
		printf("Source Peer Address:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 80084ac:	79fb      	ldrb	r3, [r7, #7]
 80084ae:	4a32      	ldr	r2, [pc, #200]	; (8008578 <print_self_Details+0x250>)
 80084b0:	3366      	adds	r3, #102	; 0x66
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4413      	add	r3, r2
 80084b6:	685b      	ldr	r3, [r3, #4]
 80084b8:	4619      	mov	r1, r3
 80084ba:	483d      	ldr	r0, [pc, #244]	; (80085b0 <print_self_Details+0x288>)
 80084bc:	f019 fef6 	bl	80222ac <iprintf>
		printf("Dest   Peer Address:%lu\n",EI_data.Hitachi_st.DEST_ADDRESSES[Traverser]);
 80084c0:	79fb      	ldrb	r3, [r7, #7]
 80084c2:	4a2d      	ldr	r2, [pc, #180]	; (8008578 <print_self_Details+0x250>)
 80084c4:	3370      	adds	r3, #112	; 0x70
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	4413      	add	r3, r2
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4619      	mov	r1, r3
 80084ce:	4839      	ldr	r0, [pc, #228]	; (80085b4 <print_self_Details+0x28c>)
 80084d0:	f019 feec 	bl	80222ac <iprintf>
		printf("MLK Application CRC:0x%04X\n",EI_data.Hitachi_st.App_Identity_CRC[CARD_INDEX][Traverser]);
 80084d4:	79fb      	ldrb	r3, [r7, #7]
 80084d6:	4a28      	ldr	r2, [pc, #160]	; (8008578 <print_self_Details+0x250>)
 80084d8:	33fe      	adds	r3, #254	; 0xfe
 80084da:	005b      	lsls	r3, r3, #1
 80084dc:	4413      	add	r3, r2
 80084de:	889b      	ldrh	r3, [r3, #4]
 80084e0:	4619      	mov	r1, r3
 80084e2:	4835      	ldr	r0, [pc, #212]	; (80085b8 <print_self_Details+0x290>)
 80084e4:	f019 fee2 	bl	80222ac <iprintf>
		printf("Number of Outputs  :%u\n",EI_data.Hitachi_st.Bool_outputs[Traverser]);
 80084e8:	79fb      	ldrb	r3, [r7, #7]
 80084ea:	4a23      	ldr	r2, [pc, #140]	; (8008578 <print_self_Details+0x250>)
 80084ec:	4413      	add	r3, r2
 80084ee:	f893 30eb 	ldrb.w	r3, [r3, #235]	; 0xeb
 80084f2:	4619      	mov	r1, r3
 80084f4:	4831      	ldr	r0, [pc, #196]	; (80085bc <print_self_Details+0x294>)
 80084f6:	f019 fed9 	bl	80222ac <iprintf>
		printf("Clock Master:%u\n",EI_data.Hitachi_st.ClockMaster[Traverser]);
 80084fa:	79fb      	ldrb	r3, [r7, #7]
 80084fc:	4a1e      	ldr	r2, [pc, #120]	; (8008578 <print_self_Details+0x250>)
 80084fe:	4413      	add	r3, r2
 8008500:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8008504:	4619      	mov	r1, r3
 8008506:	482e      	ldr	r0, [pc, #184]	; (80085c0 <print_self_Details+0x298>)
 8008508:	f019 fed0 	bl	80222ac <iprintf>
		printf("Interface Type:%u\n",EI_data.Hitachi_st.Interface_Type[Traverser]);
 800850c:	79fb      	ldrb	r3, [r7, #7]
 800850e:	4a1a      	ldr	r2, [pc, #104]	; (8008578 <print_self_Details+0x250>)
 8008510:	4413      	add	r3, r2
 8008512:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008516:	4619      	mov	r1, r3
 8008518:	482a      	ldr	r0, [pc, #168]	; (80085c4 <print_self_Details+0x29c>)
 800851a:	f019 fec7 	bl	80222ac <iprintf>
		printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]);
 800851e:	79fb      	ldrb	r3, [r7, #7]
 8008520:	4a15      	ldr	r2, [pc, #84]	; (8008578 <print_self_Details+0x250>)
 8008522:	338a      	adds	r3, #138	; 0x8a
 8008524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008528:	4619      	mov	r1, r3
 800852a:	4827      	ldr	r0, [pc, #156]	; (80085c8 <print_self_Details+0x2a0>)
 800852c:	f019 febe 	bl	80222ac <iprintf>
		printf("STALE_DATA_TIME_OUT:%lu\n",EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser]);
 8008530:	79fb      	ldrb	r3, [r7, #7]
 8008532:	4a11      	ldr	r2, [pc, #68]	; (8008578 <print_self_Details+0x250>)
 8008534:	3394      	adds	r3, #148	; 0x94
 8008536:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800853a:	4619      	mov	r1, r3
 800853c:	4823      	ldr	r0, [pc, #140]	; (80085cc <print_self_Details+0x2a4>)
 800853e:	f019 feb5 	bl	80222ac <iprintf>
		printf("LinkEstablishTimeout:%lu\n",EI_data.Hitachi_st.LinkEstablishTimeout[Traverser]);
 8008542:	79fb      	ldrb	r3, [r7, #7]
 8008544:	4a0c      	ldr	r2, [pc, #48]	; (8008578 <print_self_Details+0x250>)
 8008546:	339e      	adds	r3, #158	; 0x9e
 8008548:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800854c:	4619      	mov	r1, r3
 800854e:	4820      	ldr	r0, [pc, #128]	; (80085d0 <print_self_Details+0x2a8>)
 8008550:	f019 feac 	bl	80222ac <iprintf>
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008554:	79fb      	ldrb	r3, [r7, #7]
 8008556:	3301      	adds	r3, #1
 8008558:	71fb      	strb	r3, [r7, #7]
 800855a:	4b07      	ldr	r3, [pc, #28]	; (8008578 <print_self_Details+0x250>)
 800855c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008560:	79fa      	ldrb	r2, [r7, #7]
 8008562:	429a      	cmp	r2, r3
 8008564:	d39c      	bcc.n	80084a0 <print_self_Details+0x178>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 8008566:	4803      	ldr	r0, [pc, #12]	; (8008574 <print_self_Details+0x24c>)
 8008568:	f019 ff3c 	bl	80223e4 <puts>
#endif
}
 800856c:	bf00      	nop
 800856e:	3708      	adds	r7, #8
 8008570:	46bd      	mov	sp, r7
 8008572:	bdb0      	pop	{r4, r5, r7, pc}
 8008574:	08024ab8 	.word	0x08024ab8
 8008578:	20000304 	.word	0x20000304
 800857c:	08024b0c 	.word	0x08024b0c
 8008580:	08024b30 	.word	0x08024b30
 8008584:	08024b54 	.word	0x08024b54
 8008588:	08024b80 	.word	0x08024b80
 800858c:	08024bac 	.word	0x08024bac
 8008590:	08024bd8 	.word	0x08024bd8
 8008594:	08024c04 	.word	0x08024c04
 8008598:	08024c24 	.word	0x08024c24
 800859c:	08024c34 	.word	0x08024c34
 80085a0:	08024c44 	.word	0x08024c44
 80085a4:	08024c60 	.word	0x08024c60
 80085a8:	08024c90 	.word	0x08024c90
 80085ac:	08024ca4 	.word	0x08024ca4
 80085b0:	08024cb8 	.word	0x08024cb8
 80085b4:	08024cd4 	.word	0x08024cd4
 80085b8:	08024cf0 	.word	0x08024cf0
 80085bc:	08024d0c 	.word	0x08024d0c
 80085c0:	08024d24 	.word	0x08024d24
 80085c4:	08024d38 	.word	0x08024d38
 80085c8:	08024d4c 	.word	0x08024d4c
 80085cc:	08024d68 	.word	0x08024d68
 80085d0:	08024d84 	.word	0x08024d84

080085d4 <Send_Init_After_Timeout>:

void Send_Init_After_Timeout(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b082      	sub	sp, #8
 80085d8:	af00      	add	r7, sp, #0
	uint8_t Traverser =0;
 80085da:	2300      	movs	r3, #0
 80085dc:	71fb      	strb	r3, [r7, #7]

	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80085de:	2300      	movs	r3, #0
 80085e0:	71fb      	strb	r3, [r7, #7]
 80085e2:	e058      	b.n	8008696 <Send_Init_After_Timeout+0xc2>
	{
		if(Last_Recevied_Clock[Traverser] != 0)
 80085e4:	79fb      	ldrb	r3, [r7, #7]
 80085e6:	4a31      	ldr	r2, [pc, #196]	; (80086ac <Send_Init_After_Timeout+0xd8>)
 80085e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d04f      	beq.n	8008690 <Send_Init_After_Timeout+0xbc>
			}
#endif
#ifdef EI_2
			if(
					(
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 80085f0:	79fb      	ldrb	r3, [r7, #7]
 80085f2:	4a2e      	ldr	r2, [pc, #184]	; (80086ac <Send_Init_After_Timeout+0xd8>)
 80085f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80085f8:	4618      	mov	r0, r3
 80085fa:	f006 f901 	bl	800e800 <HAL_Elaps_Ticks>
 80085fe:	4602      	mov	r2, r0
 8008600:	79fb      	ldrb	r3, [r7, #7]
 8008602:	492b      	ldr	r1, [pc, #172]	; (80086b0 <Send_Init_After_Timeout+0xdc>)
 8008604:	3394      	adds	r3, #148	; 0x94
 8008606:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800860a:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
			if(
 800860e:	429a      	cmp	r2, r3
 8008610:	d93e      	bls.n	8008690 <Send_Init_After_Timeout+0xbc>
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 8008612:	79fb      	ldrb	r3, [r7, #7]
 8008614:	4a27      	ldr	r2, [pc, #156]	; (80086b4 <Send_Init_After_Timeout+0xe0>)
 8008616:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800861a:	4618      	mov	r0, r3
 800861c:	f006 f8f0 	bl	800e800 <HAL_Elaps_Ticks>
 8008620:	4602      	mov	r2, r0
 8008622:	79fb      	ldrb	r3, [r7, #7]
 8008624:	4922      	ldr	r1, [pc, #136]	; (80086b0 <Send_Init_After_Timeout+0xdc>)
 8008626:	3394      	adds	r3, #148	; 0x94
 8008628:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800862c:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
							( (HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC)) &&
 8008630:	429a      	cmp	r2, r3
 8008632:	d92d      	bls.n	8008690 <Send_Init_After_Timeout+0xbc>

									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008634:	79fb      	ldrb	r3, [r7, #7]
 8008636:	4a20      	ldr	r2, [pc, #128]	; (80086b8 <Send_Init_After_Timeout+0xe4>)
 8008638:	5cd3      	ldrb	r3, [r2, r3]
									(HAL_Elaps_Ticks(OtherCardReceptionClk[Traverser]) > (EI_data.Hitachi_st.STALE_DATA_TIME_OUT[Traverser] + ONE_SEC))) &&
 800863a:	2b01      	cmp	r3, #1
 800863c:	d028      	beq.n	8008690 <Send_Init_After_Timeout+0xbc>
									(Last_Received_Init_Clk[Traverser] > ONE_SEC) )
 800863e:	79fb      	ldrb	r3, [r7, #7]
 8008640:	4a1e      	ldr	r2, [pc, #120]	; (80086bc <Send_Init_After_Timeout+0xe8>)
 8008642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
									(Init_Msg_Sent_After_Timeout[Traverser] != 1) &&
 8008646:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800864a:	d921      	bls.n	8008690 <Send_Init_After_Timeout+0xbc>
			)
			{

				printf("Sending INIT-MSG After Timeout:%lu Seconds\n",HAL_Elaps_Ticks(Last_Recevied_Clock[Traverser])/1000);
 800864c:	79fb      	ldrb	r3, [r7, #7]
 800864e:	4a17      	ldr	r2, [pc, #92]	; (80086ac <Send_Init_After_Timeout+0xd8>)
 8008650:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008654:	4618      	mov	r0, r3
 8008656:	f006 f8d3 	bl	800e800 <HAL_Elaps_Ticks>
 800865a:	4603      	mov	r3, r0
 800865c:	4a18      	ldr	r2, [pc, #96]	; (80086c0 <Send_Init_After_Timeout+0xec>)
 800865e:	fba2 2303 	umull	r2, r3, r2, r3
 8008662:	099b      	lsrs	r3, r3, #6
 8008664:	4619      	mov	r1, r3
 8008666:	4817      	ldr	r0, [pc, #92]	; (80086c4 <Send_Init_After_Timeout+0xf0>)
 8008668:	f019 fe20 	bl	80222ac <iprintf>
				SEND_FORCE_REPLY[Traverser] = 1;
 800866c:	79fb      	ldrb	r3, [r7, #7]
 800866e:	4a16      	ldr	r2, [pc, #88]	; (80086c8 <Send_Init_After_Timeout+0xf4>)
 8008670:	2101      	movs	r1, #1
 8008672:	54d1      	strb	r1, [r2, r3]
				Send_Init_Msg(Traverser, Traverser);
 8008674:	79fa      	ldrb	r2, [r7, #7]
 8008676:	79fb      	ldrb	r3, [r7, #7]
 8008678:	4611      	mov	r1, r2
 800867a:	4618      	mov	r0, r3
 800867c:	f7f9 fe2a 	bl	80022d4 <Send_Init_Msg>
				Init_Msg_Sent_After_Timeout[Traverser] = 1;
 8008680:	79fb      	ldrb	r3, [r7, #7]
 8008682:	4a0d      	ldr	r2, [pc, #52]	; (80086b8 <Send_Init_After_Timeout+0xe4>)
 8008684:	2101      	movs	r1, #1
 8008686:	54d1      	strb	r1, [r2, r3]
				INIT_REQ_SENT_Flag[Traverser] = 1;
 8008688:	79fb      	ldrb	r3, [r7, #7]
 800868a:	4a10      	ldr	r2, [pc, #64]	; (80086cc <Send_Init_After_Timeout+0xf8>)
 800868c:	2101      	movs	r1, #1
 800868e:	54d1      	strb	r1, [r2, r3]
	for(Traverser=0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008690:	79fb      	ldrb	r3, [r7, #7]
 8008692:	3301      	adds	r3, #1
 8008694:	71fb      	strb	r3, [r7, #7]
 8008696:	4b06      	ldr	r3, [pc, #24]	; (80086b0 <Send_Init_After_Timeout+0xdc>)
 8008698:	f893 3020 	ldrb.w	r3, [r3, #32]
 800869c:	79fa      	ldrb	r2, [r7, #7]
 800869e:	429a      	cmp	r2, r3
 80086a0:	d3a0      	bcc.n	80085e4 <Send_Init_After_Timeout+0x10>
			}
#endif
		}
	}
}
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	3708      	adds	r7, #8
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}
 80086ac:	20000fa4 	.word	0x20000fa4
 80086b0:	20000304 	.word	0x20000304
 80086b4:	20000e9c 	.word	0x20000e9c
 80086b8:	2000108c 	.word	0x2000108c
 80086bc:	20001098 	.word	0x20001098
 80086c0:	10624dd3 	.word	0x10624dd3
 80086c4:	08024da0 	.word	0x08024da0
 80086c8:	200010cc 	.word	0x200010cc
 80086cc:	200010c0 	.word	0x200010c0

080086d0 <Send_Vital_Msg_After_Rx_VITAL>:

void Send_Vital_Msg_After_Rx_VITAL(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b082      	sub	sp, #8
 80086d4:	af00      	add	r7, sp, #0
	uint8_t Traverser = 0;
 80086d6:	2300      	movs	r3, #0
 80086d8:	71fb      	strb	r3, [r7, #7]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80086da:	e037      	b.n	800874c <Send_Vital_Msg_After_Rx_VITAL+0x7c>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
			Send_Vital_MSG_st.Clk[Traverser] = -1;
		}*/

		if(
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80086dc:	79fa      	ldrb	r2, [r7, #7]
 80086de:	4921      	ldr	r1, [pc, #132]	; (8008764 <Send_Vital_Msg_After_Rx_VITAL+0x94>)
 80086e0:	4613      	mov	r3, r2
 80086e2:	005b      	lsls	r3, r3, #1
 80086e4:	4413      	add	r3, r2
 80086e6:	00db      	lsls	r3, r3, #3
 80086e8:	440b      	add	r3, r1
 80086ea:	3304      	adds	r3, #4
 80086ec:	781b      	ldrb	r3, [r3, #0]
		if(
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d006      	beq.n	8008700 <Send_Vital_Msg_After_Rx_VITAL+0x30>
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 80086f2:	79fb      	ldrb	r3, [r7, #7]
 80086f4:	4a1c      	ldr	r2, [pc, #112]	; (8008768 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 80086f6:	4413      	add	r3, r2
 80086f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80086fc:	2b02      	cmp	r3, #2
 80086fe:	d122      	bne.n	8008746 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 8008700:	79fb      	ldrb	r3, [r7, #7]
 8008702:	4a1a      	ldr	r2, [pc, #104]	; (800876c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008704:	5cd3      	ldrb	r3, [r2, r3]
				((Tx_Ei_self_sharing_st[Traverser].IS_PRIMARY == PRIMARY) || (EI_data.Hitachi_st.Interface_Type[Traverser] == SERIAL)) &&
 8008706:	2b01      	cmp	r3, #1
 8008708:	d11d      	bne.n	8008746 <Send_Vital_Msg_After_Rx_VITAL+0x76>
				(HAL_Elaps_Ticks(Send_Vital_MSG_st.Clk[Traverser]) > 150 )
 800870a:	79fb      	ldrb	r3, [r7, #7]
 800870c:	4a17      	ldr	r2, [pc, #92]	; (800876c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800870e:	3302      	adds	r3, #2
 8008710:	009b      	lsls	r3, r3, #2
 8008712:	4413      	add	r3, r2
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	4618      	mov	r0, r3
 8008718:	f006 f872 	bl	800e800 <HAL_Elaps_Ticks>
 800871c:	4603      	mov	r3, r0
				(Send_Vital_MSG_st.flag[Traverser] == SET) &&
 800871e:	2b96      	cmp	r3, #150	; 0x96
 8008720:	d911      	bls.n	8008746 <Send_Vital_Msg_After_Rx_VITAL+0x76>
		)
		{
			Send_Vital_Data_Message(Traverser, Traverser);
 8008722:	79fa      	ldrb	r2, [r7, #7]
 8008724:	79fb      	ldrb	r3, [r7, #7]
 8008726:	4611      	mov	r1, r2
 8008728:	4618      	mov	r0, r3
 800872a:	f7fb fafb 	bl	8003d24 <Send_Vital_Data_Message>
			Send_Vital_MSG_st.flag[Traverser] = CLEAR;
 800872e:	79fb      	ldrb	r3, [r7, #7]
 8008730:	4a0e      	ldr	r2, [pc, #56]	; (800876c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 8008732:	2100      	movs	r1, #0
 8008734:	54d1      	strb	r1, [r2, r3]
			Send_Vital_MSG_st.Clk[Traverser] = -1;
 8008736:	79fb      	ldrb	r3, [r7, #7]
 8008738:	4a0c      	ldr	r2, [pc, #48]	; (800876c <Send_Vital_Msg_After_Rx_VITAL+0x9c>)
 800873a:	3302      	adds	r3, #2
 800873c:	009b      	lsls	r3, r3, #2
 800873e:	4413      	add	r3, r2
 8008740:	f04f 32ff 	mov.w	r2, #4294967295
 8008744:	605a      	str	r2, [r3, #4]
	for(;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	3301      	adds	r3, #1
 800874a:	71fb      	strb	r3, [r7, #7]
 800874c:	4b06      	ldr	r3, [pc, #24]	; (8008768 <Send_Vital_Msg_After_Rx_VITAL+0x98>)
 800874e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008752:	79fa      	ldrb	r2, [r7, #7]
 8008754:	429a      	cmp	r2, r3
 8008756:	d3c1      	bcc.n	80086dc <Send_Vital_Msg_After_Rx_VITAL+0xc>
		}
	}
}
 8008758:	bf00      	nop
 800875a:	bf00      	nop
 800875c:	3708      	adds	r7, #8
 800875e:	46bd      	mov	sp, r7
 8008760:	bd80      	pop	{r7, pc}
 8008762:	bf00      	nop
 8008764:	20001674 	.word	0x20001674
 8008768:	20000304 	.word	0x20000304
 800876c:	20001c94 	.word	0x20001c94

08008770 <Check_Recv_Status_fail>:

void Check_Recv_Status_fail(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b082      	sub	sp, #8
 8008774:	af00      	add	r7, sp, #0
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008776:	2300      	movs	r3, #0
 8008778:	71fb      	strb	r3, [r7, #7]
 800877a:	e04e      	b.n	800881a <Check_Recv_Status_fail+0xaa>
	{
		if( (Last_Recevied_Clock_ValidMsgs[Traverser] != 0) && (Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status != NOT_RECEIVED) )
 800877c:	79fb      	ldrb	r3, [r7, #7]
 800877e:	4a2c      	ldr	r2, [pc, #176]	; (8008830 <Check_Recv_Status_fail+0xc0>)
 8008780:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008784:	2b00      	cmp	r3, #0
 8008786:	d045      	beq.n	8008814 <Check_Recv_Status_fail+0xa4>
 8008788:	79fa      	ldrb	r2, [r7, #7]
 800878a:	492a      	ldr	r1, [pc, #168]	; (8008834 <Check_Recv_Status_fail+0xc4>)
 800878c:	4613      	mov	r3, r2
 800878e:	005b      	lsls	r3, r3, #1
 8008790:	4413      	add	r3, r2
 8008792:	00db      	lsls	r3, r3, #3
 8008794:	440b      	add	r3, r1
 8008796:	3303      	adds	r3, #3
 8008798:	781b      	ldrb	r3, [r3, #0]
 800879a:	2b00      	cmp	r3, #0
 800879c:	d03a      	beq.n	8008814 <Check_Recv_Status_fail+0xa4>
		{
			if(HAL_Elaps_Ticks(Last_Recevied_Clock_ValidMsgs[Traverser]) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 800879e:	79fb      	ldrb	r3, [r7, #7]
 80087a0:	4a23      	ldr	r2, [pc, #140]	; (8008830 <Check_Recv_Status_fail+0xc0>)
 80087a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f006 f82a 	bl	800e800 <HAL_Elaps_Ticks>
 80087ac:	4602      	mov	r2, r0
 80087ae:	79fb      	ldrb	r3, [r7, #7]
 80087b0:	4921      	ldr	r1, [pc, #132]	; (8008838 <Check_Recv_Status_fail+0xc8>)
 80087b2:	338a      	adds	r3, #138	; 0x8a
 80087b4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80087b8:	429a      	cmp	r2, r3
 80087ba:	d92b      	bls.n	8008814 <Check_Recv_Status_fail+0xa4>
			{
				printf("!Received any Packet of:%lu from last %lu Seconds\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser],(EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser]/1000));
 80087bc:	79fb      	ldrb	r3, [r7, #7]
 80087be:	4a1e      	ldr	r2, [pc, #120]	; (8008838 <Check_Recv_Status_fail+0xc8>)
 80087c0:	3366      	adds	r3, #102	; 0x66
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	6859      	ldr	r1, [r3, #4]
 80087c8:	79fb      	ldrb	r3, [r7, #7]
 80087ca:	4a1b      	ldr	r2, [pc, #108]	; (8008838 <Check_Recv_Status_fail+0xc8>)
 80087cc:	338a      	adds	r3, #138	; 0x8a
 80087ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087d2:	4a1a      	ldr	r2, [pc, #104]	; (800883c <Check_Recv_Status_fail+0xcc>)
 80087d4:	fba2 2303 	umull	r2, r3, r2, r3
 80087d8:	099b      	lsrs	r3, r3, #6
 80087da:	461a      	mov	r2, r3
 80087dc:	4818      	ldr	r0, [pc, #96]	; (8008840 <Check_Recv_Status_fail+0xd0>)
 80087de:	f019 fd65 	bl	80222ac <iprintf>
				printf("Last_Recevied_Clock_ValidMsgs[Traverser]:%lu\n",Last_Recevied_Clock_ValidMsgs[Traverser]);
 80087e2:	79fb      	ldrb	r3, [r7, #7]
 80087e4:	4a12      	ldr	r2, [pc, #72]	; (8008830 <Check_Recv_Status_fail+0xc0>)
 80087e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087ea:	4619      	mov	r1, r3
 80087ec:	4815      	ldr	r0, [pc, #84]	; (8008844 <Check_Recv_Status_fail+0xd4>)
 80087ee:	f019 fd5d 	bl	80222ac <iprintf>
				printf("Ticks:%lu\n",HAL_GetTick());
 80087f2:	f00c fd51 	bl	8015298 <HAL_GetTick>
 80087f6:	4603      	mov	r3, r0
 80087f8:	4619      	mov	r1, r3
 80087fa:	4813      	ldr	r0, [pc, #76]	; (8008848 <Check_Recv_Status_fail+0xd8>)
 80087fc:	f019 fd56 	bl	80222ac <iprintf>
				Tx_Ei_self_sharing_st[Traverser].EI_Receiving_Status = NOT_RECEIVED;
 8008800:	79fa      	ldrb	r2, [r7, #7]
 8008802:	490c      	ldr	r1, [pc, #48]	; (8008834 <Check_Recv_Status_fail+0xc4>)
 8008804:	4613      	mov	r3, r2
 8008806:	005b      	lsls	r3, r3, #1
 8008808:	4413      	add	r3, r2
 800880a:	00db      	lsls	r3, r3, #3
 800880c:	440b      	add	r3, r1
 800880e:	3303      	adds	r3, #3
 8008810:	2200      	movs	r2, #0
 8008812:	701a      	strb	r2, [r3, #0]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008814:	79fb      	ldrb	r3, [r7, #7]
 8008816:	3301      	adds	r3, #1
 8008818:	71fb      	strb	r3, [r7, #7]
 800881a:	4b07      	ldr	r3, [pc, #28]	; (8008838 <Check_Recv_Status_fail+0xc8>)
 800881c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008820:	79fa      	ldrb	r2, [r7, #7]
 8008822:	429a      	cmp	r2, r3
 8008824:	d3aa      	bcc.n	800877c <Check_Recv_Status_fail+0xc>
			}
		}
	}
}
 8008826:	bf00      	nop
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}
 8008830:	20000fcc 	.word	0x20000fcc
 8008834:	20001674 	.word	0x20001674
 8008838:	20000304 	.word	0x20000304
 800883c:	10624dd3 	.word	0x10624dd3
 8008840:	08024dcc 	.word	0x08024dcc
 8008844:	08024e00 	.word	0x08024e00
 8008848:	08024e30 	.word	0x08024e30

0800884c <IS_MLK_EIPC_TIME_MATCHING>:

uint8_t IS_MLK_EIPC_TIME_MATCHING(uint8_t Source_Index)
{
 800884c:	b590      	push	{r4, r7, lr}
 800884e:	b087      	sub	sp, #28
 8008850:	af00      	add	r7, sp, #0
 8008852:	4603      	mov	r3, r0
 8008854:	71fb      	strb	r3, [r7, #7]
	uint32_t Hitachi_Frame = 0;
 8008856:	2300      	movs	r3, #0
 8008858:	613b      	str	r3, [r7, #16]
	uint32_t Self_Frame = 0;
 800885a:	2300      	movs	r3, #0
 800885c:	60fb      	str	r3, [r7, #12]
	uint8_t Return_Value = 1;
 800885e:	2301      	movs	r3, #1
 8008860:	75fb      	strb	r3, [r7, #23]

	if( (EI_data.Hitachi_st.ClockMaster[Source_Index] == SET) && (Is_GPS_Packet_Received == 1) )
 8008862:	79fb      	ldrb	r3, [r7, #7]
 8008864:	4a39      	ldr	r2, [pc, #228]	; (800894c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 8008866:	4413      	add	r3, r2
 8008868:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 800886c:	2b01      	cmp	r3, #1
 800886e:	d168      	bne.n	8008942 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
 8008870:	4b37      	ldr	r3, [pc, #220]	; (8008950 <IS_MLK_EIPC_TIME_MATCHING+0x104>)
 8008872:	781b      	ldrb	r3, [r3, #0]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d164      	bne.n	8008942 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
	{
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 8008878:	79fa      	ldrb	r2, [r7, #7]
 800887a:	4936      	ldr	r1, [pc, #216]	; (8008954 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800887c:	4613      	mov	r3, r2
 800887e:	005b      	lsls	r3, r3, #1
 8008880:	4413      	add	r3, r2
 8008882:	005b      	lsls	r3, r3, #1
 8008884:	440b      	add	r3, r1
 8008886:	781b      	ldrb	r3, [r3, #0]
 8008888:	4618      	mov	r0, r3
 800888a:	f002 fa7d 	bl	800ad88 <bcdToDec>
 800888e:	4603      	mov	r3, r0
 8008890:	461a      	mov	r2, r3
 8008892:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8008896:	fb03 f402 	mul.w	r4, r3, r2
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 800889a:	79fa      	ldrb	r2, [r7, #7]
 800889c:	492d      	ldr	r1, [pc, #180]	; (8008954 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 800889e:	4613      	mov	r3, r2
 80088a0:	005b      	lsls	r3, r3, #1
 80088a2:	4413      	add	r3, r2
 80088a4:	005b      	lsls	r3, r3, #1
 80088a6:	440b      	add	r3, r1
 80088a8:	3301      	adds	r3, #1
 80088aa:	781b      	ldrb	r3, [r3, #0]
 80088ac:	4618      	mov	r0, r3
 80088ae:	f002 fa6b 	bl	800ad88 <bcdToDec>
 80088b2:	4603      	mov	r3, r0
 80088b4:	461a      	mov	r2, r3
 80088b6:	4613      	mov	r3, r2
 80088b8:	011b      	lsls	r3, r3, #4
 80088ba:	1a9b      	subs	r3, r3, r2
 80088bc:	009b      	lsls	r3, r3, #2
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80088be:	441c      	add	r4, r3
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80088c0:	79fa      	ldrb	r2, [r7, #7]
 80088c2:	4924      	ldr	r1, [pc, #144]	; (8008954 <IS_MLK_EIPC_TIME_MATCHING+0x108>)
 80088c4:	4613      	mov	r3, r2
 80088c6:	005b      	lsls	r3, r3, #1
 80088c8:	4413      	add	r3, r2
 80088ca:	005b      	lsls	r3, r3, #1
 80088cc:	440b      	add	r3, r1
 80088ce:	3302      	adds	r3, #2
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	f002 fa58 	bl	800ad88 <bcdToDec>
 80088d8:	4603      	mov	r3, r0
				(bcdToDec(HITACHI_time_Stamp_st[Source_Index].mm) * 60) +
 80088da:	4423      	add	r3, r4
				bcdToDec(HITACHI_time_Stamp_st[Source_Index].ss)) + 1);
 80088dc:	3301      	adds	r3, #1
		Hitachi_Frame = ( ( (bcdToDec(HITACHI_time_Stamp_st[Source_Index].hh) * 3600) +
 80088de:	613b      	str	r3, [r7, #16]

		Get_time();
 80088e0:	f002 fb4e 	bl	800af80 <Get_time>

		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 80088e4:	4b1c      	ldr	r3, [pc, #112]	; (8008958 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	461a      	mov	r2, r3
 80088ea:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80088ee:	fb03 f202 	mul.w	r2, r3, r2
				(RTC_Date_time_Dec_st.Mins * 60) +
 80088f2:	4b19      	ldr	r3, [pc, #100]	; (8008958 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 80088f4:	785b      	ldrb	r3, [r3, #1]
 80088f6:	4619      	mov	r1, r3
 80088f8:	460b      	mov	r3, r1
 80088fa:	011b      	lsls	r3, r3, #4
 80088fc:	1a5b      	subs	r3, r3, r1
 80088fe:	009b      	lsls	r3, r3, #2
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 8008900:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008902:	4a15      	ldr	r2, [pc, #84]	; (8008958 <IS_MLK_EIPC_TIME_MATCHING+0x10c>)
 8008904:	7892      	ldrb	r2, [r2, #2]
				(RTC_Date_time_Dec_st.Mins * 60) +
 8008906:	4413      	add	r3, r2
				(RTC_Date_time_Dec_st.Secs) + 1);
 8008908:	3301      	adds	r3, #1
		Self_Frame = ( (RTC_Date_time_Dec_st.Hour * 3600) +
 800890a:	60fb      	str	r3, [r7, #12]


		if(abs(Hitachi_Frame - Self_Frame) > 1)
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	1ad3      	subs	r3, r2, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	bfb8      	it	lt
 8008916:	425b      	neglt	r3, r3
 8008918:	2b01      	cmp	r3, #1
 800891a:	dd12      	ble.n	8008942 <IS_MLK_EIPC_TIME_MATCHING+0xf6>
		{
			printf("Time Difference %lu Seconds found in MLK & EIPC for Peer:%lu\n",labs(Hitachi_Frame - Self_Frame),EI_data.Hitachi_st.SOURCE_ADDRESSES[Source_Index]);
 800891c:	693a      	ldr	r2, [r7, #16]
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	1ad3      	subs	r3, r2, r3
 8008922:	ea83 71e3 	eor.w	r1, r3, r3, asr #31
 8008926:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800892a:	79fb      	ldrb	r3, [r7, #7]
 800892c:	4a07      	ldr	r2, [pc, #28]	; (800894c <IS_MLK_EIPC_TIME_MATCHING+0x100>)
 800892e:	3366      	adds	r3, #102	; 0x66
 8008930:	009b      	lsls	r3, r3, #2
 8008932:	4413      	add	r3, r2
 8008934:	685b      	ldr	r3, [r3, #4]
 8008936:	461a      	mov	r2, r3
 8008938:	4808      	ldr	r0, [pc, #32]	; (800895c <IS_MLK_EIPC_TIME_MATCHING+0x110>)
 800893a:	f019 fcb7 	bl	80222ac <iprintf>
			Return_Value  = 0;
 800893e:	2300      	movs	r3, #0
 8008940:	75fb      	strb	r3, [r7, #23]
		}
	}

	return Return_Value;
 8008942:	7dfb      	ldrb	r3, [r7, #23]
}
 8008944:	4618      	mov	r0, r3
 8008946:	371c      	adds	r7, #28
 8008948:	46bd      	mov	sp, r7
 800894a:	bd90      	pop	{r4, r7, pc}
 800894c:	20000304 	.word	0x20000304
 8008950:	20000e6c 	.word	0x20000e6c
 8008954:	20001188 	.word	0x20001188
 8008958:	200027e0 	.word	0x200027e0
 800895c:	08024e3c 	.word	0x08024e3c

08008960 <Check_All_Peers>:

void Check_All_Peers(void)
{
 8008960:	b590      	push	{r4, r7, lr}
 8008962:	b083      	sub	sp, #12
 8008964:	af00      	add	r7, sp, #0
	static uint32_t PrevLinkFailClk[MAX_PEER_CONNECTIONS] = {0,};

	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008966:	2300      	movs	r3, #0
 8008968:	71fb      	strb	r3, [r7, #7]
 800896a:	e045      	b.n	80089f8 <Check_All_Peers+0x98>
	{
		Check_Vital_CRC(Traverser);
 800896c:	79fb      	ldrb	r3, [r7, #7]
 800896e:	4618      	mov	r0, r3
 8008970:	f7ff f802 	bl	8007978 <Check_Vital_CRC>

		if( (HAL_Elaps_Ticks(Hitachi_clk_flags_st[Traverser].Link_EstablishClk)) > EI_data.Hitachi_st.COMM_FAILURE_TIME_OUT[Traverser])
 8008974:	79fa      	ldrb	r2, [r7, #7]
 8008976:	4926      	ldr	r1, [pc, #152]	; (8008a10 <Check_All_Peers+0xb0>)
 8008978:	4613      	mov	r3, r2
 800897a:	005b      	lsls	r3, r3, #1
 800897c:	4413      	add	r3, r2
 800897e:	009b      	lsls	r3, r3, #2
 8008980:	440b      	add	r3, r1
 8008982:	3304      	adds	r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	4618      	mov	r0, r3
 8008988:	f005 ff3a 	bl	800e800 <HAL_Elaps_Ticks>
 800898c:	4602      	mov	r2, r0
 800898e:	79fb      	ldrb	r3, [r7, #7]
 8008990:	4920      	ldr	r1, [pc, #128]	; (8008a14 <Check_All_Peers+0xb4>)
 8008992:	338a      	adds	r3, #138	; 0x8a
 8008994:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008998:	429a      	cmp	r2, r3
 800899a:	d92a      	bls.n	80089f2 <Check_All_Peers+0x92>
		{
			if((Hitachi_clk_flags_st[Traverser].Link_EstablishFlag == SET) && (PrevLinkFailClk[Traverser] != Hitachi_clk_flags_st[Traverser].Link_EstablishClk) )
 800899c:	79fa      	ldrb	r2, [r7, #7]
 800899e:	491c      	ldr	r1, [pc, #112]	; (8008a10 <Check_All_Peers+0xb0>)
 80089a0:	4613      	mov	r3, r2
 80089a2:	005b      	lsls	r3, r3, #1
 80089a4:	4413      	add	r3, r2
 80089a6:	009b      	lsls	r3, r3, #2
 80089a8:	440b      	add	r3, r1
 80089aa:	3301      	adds	r3, #1
 80089ac:	781b      	ldrb	r3, [r3, #0]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d11f      	bne.n	80089f2 <Check_All_Peers+0x92>
 80089b2:	79fb      	ldrb	r3, [r7, #7]
 80089b4:	4a18      	ldr	r2, [pc, #96]	; (8008a18 <Check_All_Peers+0xb8>)
 80089b6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80089ba:	79fa      	ldrb	r2, [r7, #7]
 80089bc:	4814      	ldr	r0, [pc, #80]	; (8008a10 <Check_All_Peers+0xb0>)
 80089be:	4613      	mov	r3, r2
 80089c0:	005b      	lsls	r3, r3, #1
 80089c2:	4413      	add	r3, r2
 80089c4:	009b      	lsls	r3, r3, #2
 80089c6:	4403      	add	r3, r0
 80089c8:	3304      	adds	r3, #4
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	4299      	cmp	r1, r3
 80089ce:	d010      	beq.n	80089f2 <Check_All_Peers+0x92>
			{
				Hitachi_clk_flags_st[Traverser].Link_EstablishFlag = CLEAR;
 80089d0:	79fa      	ldrb	r2, [r7, #7]
 80089d2:	490f      	ldr	r1, [pc, #60]	; (8008a10 <Check_All_Peers+0xb0>)
 80089d4:	4613      	mov	r3, r2
 80089d6:	005b      	lsls	r3, r3, #1
 80089d8:	4413      	add	r3, r2
 80089da:	009b      	lsls	r3, r3, #2
 80089dc:	440b      	add	r3, r1
 80089de:	3301      	adds	r3, #1
 80089e0:	2200      	movs	r2, #0
 80089e2:	701a      	strb	r2, [r3, #0]
				PrevLinkFailClk[Traverser] = HAL_GetTick();
 80089e4:	79fc      	ldrb	r4, [r7, #7]
 80089e6:	f00c fc57 	bl	8015298 <HAL_GetTick>
 80089ea:	4603      	mov	r3, r0
 80089ec:	4a0a      	ldr	r2, [pc, #40]	; (8008a18 <Check_All_Peers+0xb8>)
 80089ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for(uint8_t Traverser = 0;Traverser<EI_data.Hitachi_st.PeersCnt;++Traverser)
 80089f2:	79fb      	ldrb	r3, [r7, #7]
 80089f4:	3301      	adds	r3, #1
 80089f6:	71fb      	strb	r3, [r7, #7]
 80089f8:	4b06      	ldr	r3, [pc, #24]	; (8008a14 <Check_All_Peers+0xb4>)
 80089fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089fe:	79fa      	ldrb	r2, [r7, #7]
 8008a00:	429a      	cmp	r2, r3
 8008a02:	d3b3      	bcc.n	800896c <Check_All_Peers+0xc>
			}
		}
	}
}
 8008a04:	bf00      	nop
 8008a06:	bf00      	nop
 8008a08:	370c      	adds	r7, #12
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd90      	pop	{r4, r7, pc}
 8008a0e:	bf00      	nop
 8008a10:	20001cc8 	.word	0x20001cc8
 8008a14:	20000304 	.word	0x20000304
 8008a18:	2000207c 	.word	0x2000207c

08008a1c <Check_for_RelayMisMatch>:

void Check_for_RelayMisMatch(void)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b082      	sub	sp, #8
 8008a20:	af00      	add	r7, sp, #0
	static uint32_t Check_Clk = 0;

	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8008a22:	4949      	ldr	r1, [pc, #292]	; (8008b48 <Check_for_RelayMisMatch+0x12c>)
 8008a24:	4849      	ldr	r0, [pc, #292]	; (8008b4c <Check_for_RelayMisMatch+0x130>)
 8008a26:	f7f7 fc0b 	bl	8000240 <strcmp>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f000 8086 	beq.w	8008b3e <Check_for_RelayMisMatch+0x122>
	{
		return;
	}


	if(HAL_Elaps_Ticks(Check_Clk) > TWO_HUNDRED_MS )
 8008a32:	4b47      	ldr	r3, [pc, #284]	; (8008b50 <Check_for_RelayMisMatch+0x134>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4618      	mov	r0, r3
 8008a38:	f005 fee2 	bl	800e800 <HAL_Elaps_Ticks>
 8008a3c:	4603      	mov	r3, r0
 8008a3e:	2bc8      	cmp	r3, #200	; 0xc8
 8008a40:	d97e      	bls.n	8008b40 <Check_for_RelayMisMatch+0x124>
	{
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008a42:	2300      	movs	r3, #0
 8008a44:	71fb      	strb	r3, [r7, #7]
 8008a46:	e06e      	b.n	8008b26 <Check_for_RelayMisMatch+0x10a>
		{
			if( (OtherCardLink_Flag[Traverser] == SET) && (Link_Flag[Traverser] == CLEAR))
 8008a48:	79fb      	ldrb	r3, [r7, #7]
 8008a4a:	4a42      	ldr	r2, [pc, #264]	; (8008b54 <Check_for_RelayMisMatch+0x138>)
 8008a4c:	5cd3      	ldrb	r3, [r2, r3]
 8008a4e:	2b01      	cmp	r3, #1
 8008a50:	d116      	bne.n	8008a80 <Check_for_RelayMisMatch+0x64>
 8008a52:	79fb      	ldrb	r3, [r7, #7]
 8008a54:	4a40      	ldr	r2, [pc, #256]	; (8008b58 <Check_for_RelayMisMatch+0x13c>)
 8008a56:	5cd3      	ldrb	r3, [r2, r3]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d111      	bne.n	8008a80 <Check_for_RelayMisMatch+0x64>
			{
				//				printf("This Card Link is Clear and Other Link is SET for Peer:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
				//				printf("Copying from Other Card\n");
				memcpy(&Main_Relays_st[Traverser],&OtherCard_Relays_st[Traverser],sizeof(RELAYS_t));
 8008a5c:	79fa      	ldrb	r2, [r7, #7]
 8008a5e:	4613      	mov	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4413      	add	r3, r2
 8008a64:	009b      	lsls	r3, r3, #2
 8008a66:	4a3d      	ldr	r2, [pc, #244]	; (8008b5c <Check_for_RelayMisMatch+0x140>)
 8008a68:	1898      	adds	r0, r3, r2
 8008a6a:	79fa      	ldrb	r2, [r7, #7]
 8008a6c:	4613      	mov	r3, r2
 8008a6e:	009b      	lsls	r3, r3, #2
 8008a70:	4413      	add	r3, r2
 8008a72:	009b      	lsls	r3, r3, #2
 8008a74:	4a3a      	ldr	r2, [pc, #232]	; (8008b60 <Check_for_RelayMisMatch+0x144>)
 8008a76:	4413      	add	r3, r2
 8008a78:	2214      	movs	r2, #20
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	f019 fb06 	bl	802208c <memcpy>
				//				printf("Self CRC:%04x\n",Main_Relays_st[Traverser].RelayIPS_CRC);
			}

			if(Main_Relays_st[Traverser].RelayIPS_CRC !=  OtherCard_Relays_st[Traverser].RelayIPS_CRC)
 8008a80:	79fa      	ldrb	r2, [r7, #7]
 8008a82:	4936      	ldr	r1, [pc, #216]	; (8008b5c <Check_for_RelayMisMatch+0x140>)
 8008a84:	4613      	mov	r3, r2
 8008a86:	009b      	lsls	r3, r3, #2
 8008a88:	4413      	add	r3, r2
 8008a8a:	009b      	lsls	r3, r3, #2
 8008a8c:	440b      	add	r3, r1
 8008a8e:	3312      	adds	r3, #18
 8008a90:	8819      	ldrh	r1, [r3, #0]
 8008a92:	79fa      	ldrb	r2, [r7, #7]
 8008a94:	4832      	ldr	r0, [pc, #200]	; (8008b60 <Check_for_RelayMisMatch+0x144>)
 8008a96:	4613      	mov	r3, r2
 8008a98:	009b      	lsls	r3, r3, #2
 8008a9a:	4413      	add	r3, r2
 8008a9c:	009b      	lsls	r3, r3, #2
 8008a9e:	4403      	add	r3, r0
 8008aa0:	3312      	adds	r3, #18
 8008aa2:	881b      	ldrh	r3, [r3, #0]
 8008aa4:	4299      	cmp	r1, r3
 8008aa6:	d034      	beq.n	8008b12 <Check_for_RelayMisMatch+0xf6>
			{
				/* If Signals are Recently updated we are waiting to check CRC after ONE_SEC */
				if(HAL_Elaps_Ticks(Last_Vital_Received_Clk[Traverser]) < ONE_SEC)
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	4a2e      	ldr	r2, [pc, #184]	; (8008b64 <Check_for_RelayMisMatch+0x148>)
 8008aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f005 fea5 	bl	800e800 <HAL_Elaps_Ticks>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008abc:	d32f      	bcc.n	8008b1e <Check_for_RelayMisMatch+0x102>
				{
					continue;
				}
				else
				{
					printf("Peer:%lu ",EI_data.Hitachi_st.SOURCE_ADDRESSES[Traverser]);
 8008abe:	79fb      	ldrb	r3, [r7, #7]
 8008ac0:	4a29      	ldr	r2, [pc, #164]	; (8008b68 <Check_for_RelayMisMatch+0x14c>)
 8008ac2:	3366      	adds	r3, #102	; 0x66
 8008ac4:	009b      	lsls	r3, r3, #2
 8008ac6:	4413      	add	r3, r2
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	4619      	mov	r1, r3
 8008acc:	4827      	ldr	r0, [pc, #156]	; (8008b6c <Check_for_RelayMisMatch+0x150>)
 8008ace:	f019 fbed 	bl	80222ac <iprintf>
					printf("SelfCRC:%04x ",Main_Relays_st[Traverser].RelayIPS_CRC);
 8008ad2:	79fa      	ldrb	r2, [r7, #7]
 8008ad4:	4921      	ldr	r1, [pc, #132]	; (8008b5c <Check_for_RelayMisMatch+0x140>)
 8008ad6:	4613      	mov	r3, r2
 8008ad8:	009b      	lsls	r3, r3, #2
 8008ada:	4413      	add	r3, r2
 8008adc:	009b      	lsls	r3, r3, #2
 8008ade:	440b      	add	r3, r1
 8008ae0:	3312      	adds	r3, #18
 8008ae2:	881b      	ldrh	r3, [r3, #0]
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	4822      	ldr	r0, [pc, #136]	; (8008b70 <Check_for_RelayMisMatch+0x154>)
 8008ae8:	f019 fbe0 	bl	80222ac <iprintf>
					printf("OtherCRC:%04x\n",OtherCard_Relays_st[Traverser].RelayIPS_CRC);
 8008aec:	79fa      	ldrb	r2, [r7, #7]
 8008aee:	491c      	ldr	r1, [pc, #112]	; (8008b60 <Check_for_RelayMisMatch+0x144>)
 8008af0:	4613      	mov	r3, r2
 8008af2:	009b      	lsls	r3, r3, #2
 8008af4:	4413      	add	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	440b      	add	r3, r1
 8008afa:	3312      	adds	r3, #18
 8008afc:	881b      	ldrh	r3, [r3, #0]
 8008afe:	4619      	mov	r1, r3
 8008b00:	481c      	ldr	r0, [pc, #112]	; (8008b74 <Check_for_RelayMisMatch+0x158>)
 8008b02:	f019 fbd3 	bl	80222ac <iprintf>

					MisMatchFlag[Traverser] = SET;
 8008b06:	79fb      	ldrb	r3, [r7, #7]
 8008b08:	4a1b      	ldr	r2, [pc, #108]	; (8008b78 <Check_for_RelayMisMatch+0x15c>)
 8008b0a:	2101      	movs	r1, #1
 8008b0c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008b10:	e006      	b.n	8008b20 <Check_for_RelayMisMatch+0x104>
					//					Tx_Peer_Index_To_SignalReq = 0xff;
				}
			}
			else
			{
				MisMatchFlag[Traverser] = CLEAR; /* If both Relay CRC is Matching MisMatch will be CLEAR */
 8008b12:	79fb      	ldrb	r3, [r7, #7]
 8008b14:	4a18      	ldr	r2, [pc, #96]	; (8008b78 <Check_for_RelayMisMatch+0x15c>)
 8008b16:	2100      	movs	r1, #0
 8008b18:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8008b1c:	e000      	b.n	8008b20 <Check_for_RelayMisMatch+0x104>
					continue;
 8008b1e:	bf00      	nop
		for(uint8_t Traverser = 0;Traverser <EI_data.Hitachi_st.PeersCnt;++Traverser)
 8008b20:	79fb      	ldrb	r3, [r7, #7]
 8008b22:	3301      	adds	r3, #1
 8008b24:	71fb      	strb	r3, [r7, #7]
 8008b26:	4b10      	ldr	r3, [pc, #64]	; (8008b68 <Check_for_RelayMisMatch+0x14c>)
 8008b28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008b2c:	79fa      	ldrb	r2, [r7, #7]
 8008b2e:	429a      	cmp	r2, r3
 8008b30:	d38a      	bcc.n	8008a48 <Check_for_RelayMisMatch+0x2c>
			}
		}
		Check_Clk = HAL_GetTick();
 8008b32:	f00c fbb1 	bl	8015298 <HAL_GetTick>
 8008b36:	4603      	mov	r3, r0
 8008b38:	4a05      	ldr	r2, [pc, #20]	; (8008b50 <Check_for_RelayMisMatch+0x134>)
 8008b3a:	6013      	str	r3, [r2, #0]
 8008b3c:	e000      	b.n	8008b40 <Check_for_RelayMisMatch+0x124>
		return;
 8008b3e:	bf00      	nop
	}
}
 8008b40:	3708      	adds	r7, #8
 8008b42:	46bd      	mov	sp, r7
 8008b44:	bd80      	pop	{r7, pc}
 8008b46:	bf00      	nop
 8008b48:	08023a58 	.word	0x08023a58
 8008b4c:	20000305 	.word	0x20000305
 8008b50:	200020a4 	.word	0x200020a4
 8008b54:	20000f70 	.word	0x20000f70
 8008b58:	20000f64 	.word	0x20000f64
 8008b5c:	20001e80 	.word	0x20001e80
 8008b60:	20001f48 	.word	0x20001f48
 8008b64:	20000ed8 	.word	0x20000ed8
 8008b68:	20000304 	.word	0x20000304
 8008b6c:	08024e7c 	.word	0x08024e7c
 8008b70:	08024e88 	.word	0x08024e88
 8008b74:	08024e98 	.word	0x08024e98
 8008b78:	20000ec4 	.word	0x20000ec4

08008b7c <CheckOtherLinkStatus>:

void CheckOtherLinkStatus(uint8_t SourceIndex)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b084      	sub	sp, #16
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	4603      	mov	r3, r0
 8008b84:	71fb      	strb	r3, [r7, #7]
	uint32_t CurTicks = HAL_GetTick();
 8008b86:	f00c fb87 	bl	8015298 <HAL_GetTick>
 8008b8a:	60f8      	str	r0, [r7, #12]

	if(Rx_Ei_self_sharing_st[SourceIndex].LinkEstablishFlag == SET)
 8008b8c:	79fa      	ldrb	r2, [r7, #7]
 8008b8e:	492a      	ldr	r1, [pc, #168]	; (8008c38 <CheckOtherLinkStatus+0xbc>)
 8008b90:	4613      	mov	r3, r2
 8008b92:	005b      	lsls	r3, r3, #1
 8008b94:	4413      	add	r3, r2
 8008b96:	00db      	lsls	r3, r3, #3
 8008b98:	440b      	add	r3, r1
 8008b9a:	3302      	adds	r3, #2
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	2b01      	cmp	r3, #1
 8008ba0:	d11d      	bne.n	8008bde <CheckOtherLinkStatus+0x62>
	{
		OtherCardLink_Establish_Clock[SourceIndex] = CurTicks;
 8008ba2:	79fb      	ldrb	r3, [r7, #7]
 8008ba4:	4925      	ldr	r1, [pc, #148]	; (8008c3c <CheckOtherLinkStatus+0xc0>)
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishClk = CurTicks;
 8008bac:	79fa      	ldrb	r2, [r7, #7]
 8008bae:	4924      	ldr	r1, [pc, #144]	; (8008c40 <CheckOtherLinkStatus+0xc4>)
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	005b      	lsls	r3, r3, #1
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	3304      	adds	r3, #4
 8008bbc:	68fa      	ldr	r2, [r7, #12]
 8008bbe:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = SET;
 8008bc0:	79fa      	ldrb	r2, [r7, #7]
 8008bc2:	491f      	ldr	r1, [pc, #124]	; (8008c40 <CheckOtherLinkStatus+0xc4>)
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	005b      	lsls	r3, r3, #1
 8008bc8:	4413      	add	r3, r2
 8008bca:	009b      	lsls	r3, r3, #2
 8008bcc:	440b      	add	r3, r1
 8008bce:	3301      	adds	r3, #1
 8008bd0:	2201      	movs	r2, #1
 8008bd2:	701a      	strb	r2, [r3, #0]
		OtherCardLink_Flag[SourceIndex] = SET;
 8008bd4:	79fb      	ldrb	r3, [r7, #7]
 8008bd6:	4a1b      	ldr	r2, [pc, #108]	; (8008c44 <CheckOtherLinkStatus+0xc8>)
 8008bd8:	2101      	movs	r1, #1
 8008bda:	54d1      	strb	r1, [r2, r3]
 8008bdc:	e017      	b.n	8008c0e <CheckOtherLinkStatus+0x92>
		/* Checking the Link Status */
	}
	else
	{
		OtherCardLink_Flag[SourceIndex] = CLEAR;
 8008bde:	79fb      	ldrb	r3, [r7, #7]
 8008be0:	4a18      	ldr	r2, [pc, #96]	; (8008c44 <CheckOtherLinkStatus+0xc8>)
 8008be2:	2100      	movs	r1, #0
 8008be4:	54d1      	strb	r1, [r2, r3]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_FailClk = CurTicks;
 8008be6:	79fa      	ldrb	r2, [r7, #7]
 8008be8:	4915      	ldr	r1, [pc, #84]	; (8008c40 <CheckOtherLinkStatus+0xc4>)
 8008bea:	4613      	mov	r3, r2
 8008bec:	005b      	lsls	r3, r3, #1
 8008bee:	4413      	add	r3, r2
 8008bf0:	009b      	lsls	r3, r3, #2
 8008bf2:	440b      	add	r3, r1
 8008bf4:	3308      	adds	r3, #8
 8008bf6:	68fa      	ldr	r2, [r7, #12]
 8008bf8:	601a      	str	r2, [r3, #0]
		Other_Hitachi_clk_flags_st[SourceIndex].Link_EstablishFlag = CLEAR;
 8008bfa:	79fa      	ldrb	r2, [r7, #7]
 8008bfc:	4910      	ldr	r1, [pc, #64]	; (8008c40 <CheckOtherLinkStatus+0xc4>)
 8008bfe:	4613      	mov	r3, r2
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	4413      	add	r3, r2
 8008c04:	009b      	lsls	r3, r3, #2
 8008c06:	440b      	add	r3, r1
 8008c08:	3301      	adds	r3, #1
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	701a      	strb	r2, [r3, #0]
	}


	if(Rx_Ei_self_sharing_st[SourceIndex].Msg_Rcv_Flag == SET)
 8008c0e:	79fa      	ldrb	r2, [r7, #7]
 8008c10:	4909      	ldr	r1, [pc, #36]	; (8008c38 <CheckOtherLinkStatus+0xbc>)
 8008c12:	4613      	mov	r3, r2
 8008c14:	005b      	lsls	r3, r3, #1
 8008c16:	4413      	add	r3, r2
 8008c18:	00db      	lsls	r3, r3, #3
 8008c1a:	440b      	add	r3, r1
 8008c1c:	3301      	adds	r3, #1
 8008c1e:	781b      	ldrb	r3, [r3, #0]
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d104      	bne.n	8008c2e <CheckOtherLinkStatus+0xb2>
	{
		OtherCardReceptionClk[SourceIndex] = CurTicks;
 8008c24:	79fb      	ldrb	r3, [r7, #7]
 8008c26:	4908      	ldr	r1, [pc, #32]	; (8008c48 <CheckOtherLinkStatus+0xcc>)
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}


}
 8008c2e:	bf00      	nop
 8008c30:	3710      	adds	r7, #16
 8008c32:	46bd      	mov	sp, r7
 8008c34:	bd80      	pop	{r7, pc}
 8008c36:	bf00      	nop
 8008c38:	20001764 	.word	0x20001764
 8008c3c:	20000f3c 	.word	0x20000f3c
 8008c40:	20001d40 	.word	0x20001d40
 8008c44:	20000f70 	.word	0x20000f70
 8008c48:	20000e9c 	.word	0x20000e9c

08008c4c <SendRelay2_Other>:

void SendRelay2_Other(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	af00      	add	r7, sp, #0
	static uint32_t RelaySendClk =0;
	static uint32_t Traverser = 0;

	if(HAL_Elaps_Ticks(RelaySendClk) > ONE_SEC)
 8008c50:	4b1a      	ldr	r3, [pc, #104]	; (8008cbc <SendRelay2_Other+0x70>)
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f005 fdd3 	bl	800e800 <HAL_Elaps_Ticks>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c60:	d92a      	bls.n	8008cb8 <SendRelay2_Other+0x6c>
	{

		memset(&Tx_Temp_Main_Relays_st,0,sizeof(RELAYS_t));
 8008c62:	2214      	movs	r2, #20
 8008c64:	2100      	movs	r1, #0
 8008c66:	4816      	ldr	r0, [pc, #88]	; (8008cc0 <SendRelay2_Other+0x74>)
 8008c68:	f019 fa38 	bl	80220dc <memset>
		memcpy(&Tx_Temp_Main_Relays_st,&Main_Relays_st[Traverser],sizeof(RELAYS_t));
 8008c6c:	4b15      	ldr	r3, [pc, #84]	; (8008cc4 <SendRelay2_Other+0x78>)
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	4613      	mov	r3, r2
 8008c72:	009b      	lsls	r3, r3, #2
 8008c74:	4413      	add	r3, r2
 8008c76:	009b      	lsls	r3, r3, #2
 8008c78:	4a13      	ldr	r2, [pc, #76]	; (8008cc8 <SendRelay2_Other+0x7c>)
 8008c7a:	4413      	add	r3, r2
 8008c7c:	2214      	movs	r2, #20
 8008c7e:	4619      	mov	r1, r3
 8008c80:	480f      	ldr	r0, [pc, #60]	; (8008cc0 <SendRelay2_Other+0x74>)
 8008c82:	f019 fa03 	bl	802208c <memcpy>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 8008c86:	f44f 7002 	mov.w	r0, #520	; 0x208
 8008c8a:	f006 fb2f 	bl	800f2ec <TransmitCanPkt>
#endif

		++Traverser;
 8008c8e:	4b0d      	ldr	r3, [pc, #52]	; (8008cc4 <SendRelay2_Other+0x78>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a0b      	ldr	r2, [pc, #44]	; (8008cc4 <SendRelay2_Other+0x78>)
 8008c96:	6013      	str	r3, [r2, #0]
		if(Traverser == EI_data.Hitachi_st.PeersCnt)
 8008c98:	4b0c      	ldr	r3, [pc, #48]	; (8008ccc <SendRelay2_Other+0x80>)
 8008c9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008c9e:	461a      	mov	r2, r3
 8008ca0:	4b08      	ldr	r3, [pc, #32]	; (8008cc4 <SendRelay2_Other+0x78>)
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	429a      	cmp	r2, r3
 8008ca6:	d102      	bne.n	8008cae <SendRelay2_Other+0x62>
		{
			Traverser = 0;
 8008ca8:	4b06      	ldr	r3, [pc, #24]	; (8008cc4 <SendRelay2_Other+0x78>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	601a      	str	r2, [r3, #0]
		}

		RelaySendClk = HAL_GetTick();
 8008cae:	f00c faf3 	bl	8015298 <HAL_GetTick>
 8008cb2:	4603      	mov	r3, r0
 8008cb4:	4a01      	ldr	r2, [pc, #4]	; (8008cbc <SendRelay2_Other+0x70>)
 8008cb6:	6013      	str	r3, [r2, #0]
	}
}
 8008cb8:	bf00      	nop
 8008cba:	bd80      	pop	{r7, pc}
 8008cbc:	200020a8 	.word	0x200020a8
 8008cc0:	20002010 	.word	0x20002010
 8008cc4:	200020ac 	.word	0x200020ac
 8008cc8:	20001e80 	.word	0x20001e80
 8008ccc:	20000304 	.word	0x20000304

08008cd0 <Process_HitachiEI>:

void Process_HitachiEI(void)
{
 8008cd0:	b580      	push	{r7, lr}
 8008cd2:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8008cd4:	f013 fdce 	bl	801c874 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 8008cd8:	481a      	ldr	r0, [pc, #104]	; (8008d44 <Process_HitachiEI+0x74>)
 8008cda:	f00f fe43 	bl	8018964 <HAL_IWDG_Refresh>

		Feed_wdt();
 8008cde:	f00a f997 	bl	8013010 <Feed_wdt>

		readCanToStructs();
 8008ce2:	f006 ff85 	bl	800fbf0 <readCanToStructs>

		Check_for_cmd();
 8008ce6:	f7f7 ff37 	bl	8000b58 <Check_for_cmd>

		Process_Hitachi_Packets_Eth();
 8008cea:	f7f8 f92f 	bl	8000f4c <Process_Hitachi_Packets_Eth>

		Process_Hitachi_Packets_Com();
 8008cee:	f7f8 f99b 	bl	8001028 <Process_Hitachi_Packets_Com>

		Process_Send_Signals_2_MIE();
 8008cf2:	f7ff f919 	bl	8007f28 <Process_Send_Signals_2_MIE>

		Send_Self_Sharing();
 8008cf6:	f7ff f851 	bl	8007d9c <Send_Self_Sharing>

		Detect_CAN_Xchange_Failure();
 8008cfa:	f7ff f8b3 	bl	8007e64 <Detect_CAN_Xchange_Failure>

		//		Send_Health_Status();

		CheckLinkEstablishTimeout();
 8008cfe:	f7fe ffd7 	bl	8007cb0 <CheckLinkEstablishTimeout>

		Check_All_Peers();
 8008d02:	f7ff fe2d 	bl	8008960 <Check_All_Peers>

		Send_Vital_Msg_After_Rx_VITAL();
 8008d06:	f7ff fce3 	bl	80086d0 <Send_Vital_Msg_After_Rx_VITAL>

		Send_Init_After_Timeout();
 8008d0a:	f7ff fc63 	bl	80085d4 <Send_Init_After_Timeout>

		Check_Recv_Status_fail();
 8008d0e:	f7ff fd2f 	bl	8008770 <Check_Recv_Status_fail>

		Update_Time_Every_Sec();
 8008d12:	f002 f997 	bl	800b044 <Update_Time_Every_Sec>

		Check_for_RelayMisMatch();
 8008d16:	f7ff fe81 	bl	8008a1c <Check_for_RelayMisMatch>

		SendRelay2_Other();
 8008d1a:	f7ff ff97 	bl	8008c4c <SendRelay2_Other>
		//Dats_Request_Flag = CheckDocklightForRqst(ISP_PORT);

		Print_BuildDat_Details();
 8008d1e:	f00b fa89 	bl	8014234 <Print_BuildDat_Details>

		if(Dats_Request_Flag > 0)
 8008d22:	4b09      	ldr	r3, [pc, #36]	; (8008d48 <Process_HitachiEI+0x78>)
 8008d24:	781b      	ldrb	r3, [r3, #0]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <Process_HitachiEI+0x62>
		{
			gucFlagUpdate = 3;
 8008d2a:	4b08      	ldr	r3, [pc, #32]	; (8008d4c <Process_HitachiEI+0x7c>)
 8008d2c:	2203      	movs	r2, #3
 8008d2e:	701a      	strb	r2, [r3, #0]
			break;
 8008d30:	e002      	b.n	8008d38 <Process_HitachiEI+0x68>
		}

		Enable_UART_Interrupts();
 8008d32:	f00c f89f 	bl	8014e74 <Enable_UART_Interrupts>
		MX_LWIP_Process(); //This funtion will get the Ethernet data.
 8008d36:	e7cd      	b.n	8008cd4 <Process_HitachiEI+0x4>

	}

	while(1)
	{
		Data_Processing();
 8008d38:	f00b f97a 	bl	8014030 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8008d3c:	4801      	ldr	r0, [pc, #4]	; (8008d44 <Process_HitachiEI+0x74>)
 8008d3e:	f00f fe11 	bl	8018964 <HAL_IWDG_Refresh>
		Data_Processing();
 8008d42:	e7f9      	b.n	8008d38 <Process_HitachiEI+0x68>
 8008d44:	20009c68 	.word	0x20009c68
 8008d48:	20000644 	.word	0x20000644
 8008d4c:	20000a49 	.word	0x20000a49

08008d50 <reset_cause_get>:

/// @brief      Obtain the STM32 system reset cause
/// @param      None
/// @return     The system reset cause
reset_cause_t reset_cause_get(void)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
    reset_cause_t reset_cause;

    if (__HAL_RCC_GET_FLAG(RCC_FLAG_LPWRRST))
 8008d56:	4b26      	ldr	r3, [pc, #152]	; (8008df0 <reset_cause_get+0xa0>)
 8008d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	da02      	bge.n	8008d64 <reset_cause_get+0x14>
    {
        reset_cause = RESET_CAUSE_LOW_POWER_RESET;
 8008d5e:	2301      	movs	r3, #1
 8008d60:	71fb      	strb	r3, [r7, #7]
 8008d62:	e037      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_WWDGRST))
 8008d64:	4b22      	ldr	r3, [pc, #136]	; (8008df0 <reset_cause_get+0xa0>)
 8008d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d68:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d002      	beq.n	8008d76 <reset_cause_get+0x26>
    {
        reset_cause = RESET_CAUSE_WINDOW_WATCHDOG_RESET;
 8008d70:	2302      	movs	r3, #2
 8008d72:	71fb      	strb	r3, [r7, #7]
 8008d74:	e02e      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_IWDGRST))
 8008d76:	4b1e      	ldr	r3, [pc, #120]	; (8008df0 <reset_cause_get+0xa0>)
 8008d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d7a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d002      	beq.n	8008d88 <reset_cause_get+0x38>
    {
        reset_cause = RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET;
 8008d82:	2303      	movs	r3, #3
 8008d84:	71fb      	strb	r3, [r7, #7]
 8008d86:	e025      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_SFTRST))
 8008d88:	4b19      	ldr	r3, [pc, #100]	; (8008df0 <reset_cause_get+0xa0>)
 8008d8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d002      	beq.n	8008d9a <reset_cause_get+0x4a>
    {
        // This reset is induced by calling the ARM CMSIS
        // `NVIC_SystemReset()` function!
        reset_cause = RESET_CAUSE_SOFTWARE_RESET;
 8008d94:	2304      	movs	r3, #4
 8008d96:	71fb      	strb	r3, [r7, #7]
 8008d98:	e01c      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PORRST))
 8008d9a:	4b15      	ldr	r3, [pc, #84]	; (8008df0 <reset_cause_get+0xa0>)
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d002      	beq.n	8008dac <reset_cause_get+0x5c>
    {
        reset_cause = RESET_CAUSE_POWER_ON_POWER_DOWN_RESET;
 8008da6:	2305      	movs	r3, #5
 8008da8:	71fb      	strb	r3, [r7, #7]
 8008daa:	e013      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_PINRST))
 8008dac:	4b10      	ldr	r3, [pc, #64]	; (8008df0 <reset_cause_get+0xa0>)
 8008dae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d002      	beq.n	8008dbe <reset_cause_get+0x6e>
    {
        reset_cause = RESET_CAUSE_EXTERNAL_RESET_PIN_RESET;
 8008db8:	2306      	movs	r3, #6
 8008dba:	71fb      	strb	r3, [r7, #7]
 8008dbc:	e00a      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    // Needs to come *after* checking the `RCC_FLAG_PORRST` flag in order to
    // ensure first that the reset cause is NOT a POR/PDR reset. See note
    // below.
    else if (__HAL_RCC_GET_FLAG(RCC_FLAG_BORRST))
 8008dbe:	4b0c      	ldr	r3, [pc, #48]	; (8008df0 <reset_cause_get+0xa0>)
 8008dc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d002      	beq.n	8008dd0 <reset_cause_get+0x80>
    {
        reset_cause = RESET_CAUSE_BROWNOUT_RESET;
 8008dca:	2307      	movs	r3, #7
 8008dcc:	71fb      	strb	r3, [r7, #7]
 8008dce:	e001      	b.n	8008dd4 <reset_cause_get+0x84>
    }
    else
    {
        reset_cause = RESET_CAUSE_UNKNOWN;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	71fb      	strb	r3, [r7, #7]
    }

    // Clear all the reset flags or else they will remain set during future
    // resets until system power is fully removed.
    __HAL_RCC_CLEAR_RESET_FLAGS();
 8008dd4:	4b06      	ldr	r3, [pc, #24]	; (8008df0 <reset_cause_get+0xa0>)
 8008dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd8:	4a05      	ldr	r2, [pc, #20]	; (8008df0 <reset_cause_get+0xa0>)
 8008dda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008dde:	6753      	str	r3, [r2, #116]	; 0x74

    return reset_cause;
 8008de0:	79fb      	ldrb	r3, [r7, #7]
}
 8008de2:	4618      	mov	r0, r3
 8008de4:	370c      	adds	r7, #12
 8008de6:	46bd      	mov	sp, r7
 8008de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dec:	4770      	bx	lr
 8008dee:	bf00      	nop
 8008df0:	40023800 	.word	0x40023800

08008df4 <reset_cause_get_name>:
char * reset_cause_get_name(reset_cause_t reset_cause)
{
 8008df4:	b480      	push	{r7}
 8008df6:	b085      	sub	sp, #20
 8008df8:	af00      	add	r7, sp, #0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	71fb      	strb	r3, [r7, #7]
    char * reset_cause_name = "TBD";
 8008dfe:	4b1c      	ldr	r3, [pc, #112]	; (8008e70 <reset_cause_get_name+0x7c>)
 8008e00:	60fb      	str	r3, [r7, #12]

    switch (reset_cause)
 8008e02:	79fb      	ldrb	r3, [r7, #7]
 8008e04:	2b07      	cmp	r3, #7
 8008e06:	d82b      	bhi.n	8008e60 <reset_cause_get_name+0x6c>
 8008e08:	a201      	add	r2, pc, #4	; (adr r2, 8008e10 <reset_cause_get_name+0x1c>)
 8008e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e0e:	bf00      	nop
 8008e10:	08008e31 	.word	0x08008e31
 8008e14:	08008e37 	.word	0x08008e37
 8008e18:	08008e3d 	.word	0x08008e3d
 8008e1c:	08008e43 	.word	0x08008e43
 8008e20:	08008e49 	.word	0x08008e49
 8008e24:	08008e4f 	.word	0x08008e4f
 8008e28:	08008e55 	.word	0x08008e55
 8008e2c:	08008e5b 	.word	0x08008e5b
    {
        case RESET_CAUSE_UNKNOWN:
            reset_cause_name = "UNKNOWN";
 8008e30:	4b10      	ldr	r3, [pc, #64]	; (8008e74 <reset_cause_get_name+0x80>)
 8008e32:	60fb      	str	r3, [r7, #12]
            break;
 8008e34:	e014      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_LOW_POWER_RESET:
            reset_cause_name = "LOW_POWER_RESET";
 8008e36:	4b10      	ldr	r3, [pc, #64]	; (8008e78 <reset_cause_get_name+0x84>)
 8008e38:	60fb      	str	r3, [r7, #12]
            break;
 8008e3a:	e011      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_WINDOW_WATCHDOG_RESET:
            reset_cause_name = "WINDOW_WATCHDOG_RESET";
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <reset_cause_get_name+0x88>)
 8008e3e:	60fb      	str	r3, [r7, #12]
            break;
 8008e40:	e00e      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_INDEPENDENT_WATCHDOG_RESET:
            reset_cause_name = "INDEPENDENT_WATCHDOG_RESET";
 8008e42:	4b0f      	ldr	r3, [pc, #60]	; (8008e80 <reset_cause_get_name+0x8c>)
 8008e44:	60fb      	str	r3, [r7, #12]
            break;
 8008e46:	e00b      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_SOFTWARE_RESET:
            reset_cause_name = "SOFTWARE_RESET";
 8008e48:	4b0e      	ldr	r3, [pc, #56]	; (8008e84 <reset_cause_get_name+0x90>)
 8008e4a:	60fb      	str	r3, [r7, #12]
            break;
 8008e4c:	e008      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_POWER_ON_POWER_DOWN_RESET:
            reset_cause_name = "POWER-ON_RESET (POR) / POWER-DOWN_RESET (PDR)";
 8008e4e:	4b0e      	ldr	r3, [pc, #56]	; (8008e88 <reset_cause_get_name+0x94>)
 8008e50:	60fb      	str	r3, [r7, #12]
            break;
 8008e52:	e005      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_EXTERNAL_RESET_PIN_RESET:
            reset_cause_name = "EXTERNAL_RESET_PIN_RESET";
 8008e54:	4b0d      	ldr	r3, [pc, #52]	; (8008e8c <reset_cause_get_name+0x98>)
 8008e56:	60fb      	str	r3, [r7, #12]
            break;
 8008e58:	e002      	b.n	8008e60 <reset_cause_get_name+0x6c>
        case RESET_CAUSE_BROWNOUT_RESET:
            reset_cause_name = "BROWNOUT_RESET (BOR)";
 8008e5a:	4b0d      	ldr	r3, [pc, #52]	; (8008e90 <reset_cause_get_name+0x9c>)
 8008e5c:	60fb      	str	r3, [r7, #12]
            break;
 8008e5e:	bf00      	nop
    }

    return reset_cause_name;
 8008e60:	68fb      	ldr	r3, [r7, #12]
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
 8008e6e:	bf00      	nop
 8008e70:	08024ea8 	.word	0x08024ea8
 8008e74:	08024eac 	.word	0x08024eac
 8008e78:	08024eb4 	.word	0x08024eb4
 8008e7c:	08024ec4 	.word	0x08024ec4
 8008e80:	08024edc 	.word	0x08024edc
 8008e84:	08024ef8 	.word	0x08024ef8
 8008e88:	08024f08 	.word	0x08024f08
 8008e8c:	08024f38 	.word	0x08024f38
 8008e90:	08024f54 	.word	0x08024f54

08008e94 <Process_Medha_EI>:
		0xB40BBE37,0xC30C8EA1,0x5A05DF1B,0x2D02EF8D
};


void Process_Medha_EI(void)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	af00      	add	r7, sp, #0
	while(1)
	{
		Print_BuildDat_Details();
 8008e98:	f00b f9cc 	bl	8014234 <Print_BuildDat_Details>

		readCanToStructs();
 8008e9c:	f006 fea8 	bl	800fbf0 <readCanToStructs>

		Feed_wdt();
 8008ea0:	f00a f8b6 	bl	8013010 <Feed_wdt>

		HAL_IWDG_Refresh(&hiwdg);
 8008ea4:	480f      	ldr	r0, [pc, #60]	; (8008ee4 <Process_Medha_EI+0x50>)
 8008ea6:	f00f fd5d 	bl	8018964 <HAL_IWDG_Refresh>

		Medha_EI_Analyser();
 8008eaa:	f000 f91d 	bl	80090e8 <Medha_EI_Analyser>

		Send_Relay_Statuses_2_MIE();
 8008eae:	f000 fecf 	bl	8009c50 <Send_Relay_Statuses_2_MIE>

		Process_Clear_Relays();
 8008eb2:	f000 ff31 	bl	8009d18 <Process_Clear_Relays>

		Send_Data_to_Other();
 8008eb6:	f000 ffc7 	bl	8009e48 <Send_Data_to_Other>

		Process_Data_from_Other();
 8008eba:	f001 f81f 	bl	8009efc <Process_Data_from_Other>

		CheckforMedhaCMD();
 8008ebe:	f001 f9e5 	bl	800a28c <CheckforMedhaCMD>


		if(Dats_Request_Flag > 0)
 8008ec2:	4b09      	ldr	r3, [pc, #36]	; (8008ee8 <Process_Medha_EI+0x54>)
 8008ec4:	781b      	ldrb	r3, [r3, #0]
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <Process_Medha_EI+0x3e>
		{
			gucFlagUpdate = 3;
 8008eca:	4b08      	ldr	r3, [pc, #32]	; (8008eec <Process_Medha_EI+0x58>)
 8008ecc:	2203      	movs	r2, #3
 8008ece:	701a      	strb	r2, [r3, #0]
			break;
 8008ed0:	e002      	b.n	8008ed8 <Process_Medha_EI+0x44>
		}

#if FAULT_INJECTION_ENABLED
		Get_Command();
#endif
		Enable_UART_Interrupts();
 8008ed2:	f00b ffcf 	bl	8014e74 <Enable_UART_Interrupts>
		Print_BuildDat_Details();
 8008ed6:	e7df      	b.n	8008e98 <Process_Medha_EI+0x4>
	}
	while(1)
	{
		HAL_IWDG_Refresh(&hiwdg);
 8008ed8:	4802      	ldr	r0, [pc, #8]	; (8008ee4 <Process_Medha_EI+0x50>)
 8008eda:	f00f fd43 	bl	8018964 <HAL_IWDG_Refresh>
		Data_Processing();
 8008ede:	f00b f8a7 	bl	8014030 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 8008ee2:	e7f9      	b.n	8008ed8 <Process_Medha_EI+0x44>
 8008ee4:	20009c68 	.word	0x20009c68
 8008ee8:	20000644 	.word	0x20000644
 8008eec:	20000a49 	.word	0x20000a49

08008ef0 <Get_Medha_EI_Message>:
	}
}

uint16_t Get_Medha_EI_Message(uint8_t ComPort,uint8_t *Buffer,uint16_t Buffer_Size)
{
 8008ef0:	b580      	push	{r7, lr}
 8008ef2:	b084      	sub	sp, #16
 8008ef4:	af00      	add	r7, sp, #0
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	6039      	str	r1, [r7, #0]
 8008efa:	71fb      	strb	r3, [r7, #7]
 8008efc:	4613      	mov	r3, r2
 8008efe:	80bb      	strh	r3, [r7, #4]
	static uint8_t suc_RcvStatus = ONE;
	uint16_t EI_pktlength=0;
 8008f00:	2300      	movs	r3, #0
 8008f02:	81bb      	strh	r3, [r7, #12]
	static uint8_t suc_RByte = ZERO;
	static uint16_t i = ZERO,j=ZERO;
	static uint16_t sus_CRC = ZERO;
	uint16_t us_ReturnBytes = ZERO;
 8008f04:	2300      	movs	r3, #0
 8008f06:	81fb      	strh	r3, [r7, #14]
	static uint16_t SuiBuffer_Index = ZERO;
	/* If data available on port read and store data */
	while(Com_DataReady(ComPort))
 8008f08:	e0d0      	b.n	80090ac <Get_Medha_EI_Message+0x1bc>
	{
		suc_RByte = Com_Get_Byte(ComPort);
 8008f0a:	79fb      	ldrb	r3, [r7, #7]
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f00b fe9b 	bl	8014c48 <Com_Get_Byte>
 8008f12:	4603      	mov	r3, r0
 8008f14:	461a      	mov	r2, r3
 8008f16:	4b6c      	ldr	r3, [pc, #432]	; (80090c8 <Get_Medha_EI_Message+0x1d8>)
 8008f18:	701a      	strb	r2, [r3, #0]
		//printf("0x%02x ",suc_RByte);
		switch(suc_RcvStatus)
 8008f1a:	4b6c      	ldr	r3, [pc, #432]	; (80090cc <Get_Medha_EI_Message+0x1dc>)
 8008f1c:	781b      	ldrb	r3, [r3, #0]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	f200 80c2 	bhi.w	80090aa <Get_Medha_EI_Message+0x1ba>
 8008f26:	a201      	add	r2, pc, #4	; (adr r2, 8008f2c <Get_Medha_EI_Message+0x3c>)
 8008f28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f2c:	08008f41 	.word	0x08008f41
 8008f30:	08008f59 	.word	0x08008f59
 8008f34:	080090ab 	.word	0x080090ab
 8008f38:	08008fa5 	.word	0x08008fa5
 8008f3c:	08008ffd 	.word	0x08008ffd
		{
		case ONE: /* Receive Start of Message */
			if(SOM_MEDHA == suc_RByte)
 8008f40:	4b61      	ldr	r3, [pc, #388]	; (80090c8 <Get_Medha_EI_Message+0x1d8>)
 8008f42:	781b      	ldrb	r3, [r3, #0]
 8008f44:	2b53      	cmp	r3, #83	; 0x53
 8008f46:	f040 80b1 	bne.w	80090ac <Get_Medha_EI_Message+0x1bc>
			{
				//Buffer[ZERO] = suc_RByte;
				i = ONE;
 8008f4a:	4b61      	ldr	r3, [pc, #388]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f4c:	2201      	movs	r2, #1
 8008f4e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 8008f50:	4b5e      	ldr	r3, [pc, #376]	; (80090cc <Get_Medha_EI_Message+0x1dc>)
 8008f52:	2202      	movs	r2, #2
 8008f54:	701a      	strb	r2, [r3, #0]
			}
			break;
 8008f56:	e0a9      	b.n	80090ac <Get_Medha_EI_Message+0x1bc>
			switch(suc_RByte)
			{
			//			case THREE:
			//				break;
			default:
				if(EIGHT == i )
 8008f58:	4b5d      	ldr	r3, [pc, #372]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f5a:	881b      	ldrh	r3, [r3, #0]
 8008f5c:	2b08      	cmp	r3, #8
 8008f5e:	d111      	bne.n	8008f84 <Get_Medha_EI_Message+0x94>
				{
					Buffer[i] = suc_RByte;
 8008f60:	4b5b      	ldr	r3, [pc, #364]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f62:	881b      	ldrh	r3, [r3, #0]
 8008f64:	461a      	mov	r2, r3
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	4413      	add	r3, r2
 8008f6a:	4a57      	ldr	r2, [pc, #348]	; (80090c8 <Get_Medha_EI_Message+0x1d8>)
 8008f6c:	7812      	ldrb	r2, [r2, #0]
 8008f6e:	701a      	strb	r2, [r3, #0]
					i++;
 8008f70:	4b57      	ldr	r3, [pc, #348]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	3301      	adds	r3, #1
 8008f76:	b29a      	uxth	r2, r3
 8008f78:	4b55      	ldr	r3, [pc, #340]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f7a:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus = FOUR;
 8008f7c:	4b53      	ldr	r3, [pc, #332]	; (80090cc <Get_Medha_EI_Message+0x1dc>)
 8008f7e:	2204      	movs	r2, #4
 8008f80:	701a      	strb	r2, [r3, #0]
				else
				{
					Buffer[i] = suc_RByte;
					i++;
				}
				break;
 8008f82:	e00d      	b.n	8008fa0 <Get_Medha_EI_Message+0xb0>
					Buffer[i] = suc_RByte;
 8008f84:	4b52      	ldr	r3, [pc, #328]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f86:	881b      	ldrh	r3, [r3, #0]
 8008f88:	461a      	mov	r2, r3
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	4a4e      	ldr	r2, [pc, #312]	; (80090c8 <Get_Medha_EI_Message+0x1d8>)
 8008f90:	7812      	ldrb	r2, [r2, #0]
 8008f92:	701a      	strb	r2, [r3, #0]
					i++;
 8008f94:	4b4e      	ldr	r3, [pc, #312]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f96:	881b      	ldrh	r3, [r3, #0]
 8008f98:	3301      	adds	r3, #1
 8008f9a:	b29a      	uxth	r2, r3
 8008f9c:	4b4c      	ldr	r3, [pc, #304]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008f9e:	801a      	strh	r2, [r3, #0]
				break;
 8008fa0:	bf00      	nop
			}
			break;
 8008fa2:	e083      	b.n	80090ac <Get_Medha_EI_Message+0x1bc>
			case FOUR:
				memcpy(&EI_pktlength,&Buffer[i-2],2);
 8008fa4:	4b4a      	ldr	r3, [pc, #296]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008fa6:	881b      	ldrh	r3, [r3, #0]
 8008fa8:	3b02      	subs	r3, #2
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	4413      	add	r3, r2
 8008fae:	881b      	ldrh	r3, [r3, #0]
 8008fb0:	b29b      	uxth	r3, r3
 8008fb2:	81bb      	strh	r3, [r7, #12]
				//printf("PKT LENGTH:%u\n",EI_pktlength);
				SuiBuffer_Index  = 0;
 8008fb4:	4b47      	ldr	r3, [pc, #284]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 8008fb6:	2200      	movs	r2, #0
 8008fb8:	801a      	strh	r2, [r3, #0]
				j=1;
 8008fba:	4b47      	ldr	r3, [pc, #284]	; (80090d8 <Get_Medha_EI_Message+0x1e8>)
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	801a      	strh	r2, [r3, #0]
				Buffer[i] = suc_RByte;
 8008fc0:	4b43      	ldr	r3, [pc, #268]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008fc2:	881b      	ldrh	r3, [r3, #0]
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	4413      	add	r3, r2
 8008fca:	4a3f      	ldr	r2, [pc, #252]	; (80090c8 <Get_Medha_EI_Message+0x1d8>)
 8008fcc:	7812      	ldrb	r2, [r2, #0]
 8008fce:	701a      	strb	r2, [r3, #0]
				SuiBuffer_Index++;
 8008fd0:	4b40      	ldr	r3, [pc, #256]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 8008fd2:	881b      	ldrh	r3, [r3, #0]
 8008fd4:	3301      	adds	r3, #1
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	4b3e      	ldr	r3, [pc, #248]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 8008fda:	801a      	strh	r2, [r3, #0]
				i++;
 8008fdc:	4b3c      	ldr	r3, [pc, #240]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008fde:	881b      	ldrh	r3, [r3, #0]
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	4b3a      	ldr	r3, [pc, #232]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008fe6:	801a      	strh	r2, [r3, #0]
				j++;
 8008fe8:	4b3b      	ldr	r3, [pc, #236]	; (80090d8 <Get_Medha_EI_Message+0x1e8>)
 8008fea:	881b      	ldrh	r3, [r3, #0]
 8008fec:	3301      	adds	r3, #1
 8008fee:	b29a      	uxth	r2, r3
 8008ff0:	4b39      	ldr	r3, [pc, #228]	; (80090d8 <Get_Medha_EI_Message+0x1e8>)
 8008ff2:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = FIVE;
 8008ff4:	4b35      	ldr	r3, [pc, #212]	; (80090cc <Get_Medha_EI_Message+0x1dc>)
 8008ff6:	2205      	movs	r2, #5
 8008ff8:	701a      	strb	r2, [r3, #0]
				break;
 8008ffa:	e057      	b.n	80090ac <Get_Medha_EI_Message+0x1bc>
			case FIVE:
				Buffer[i] = suc_RByte;
 8008ffc:	4b34      	ldr	r3, [pc, #208]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8008ffe:	881b      	ldrh	r3, [r3, #0]
 8009000:	461a      	mov	r2, r3
 8009002:	683b      	ldr	r3, [r7, #0]
 8009004:	4413      	add	r3, r2
 8009006:	4a30      	ldr	r2, [pc, #192]	; (80090c8 <Get_Medha_EI_Message+0x1d8>)
 8009008:	7812      	ldrb	r2, [r2, #0]
 800900a:	701a      	strb	r2, [r3, #0]
				if ((EI_pktlength) > SuiBuffer_Index)
 800900c:	89ba      	ldrh	r2, [r7, #12]
 800900e:	4b31      	ldr	r3, [pc, #196]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 8009010:	881b      	ldrh	r3, [r3, #0]
 8009012:	429a      	cmp	r2, r3
 8009014:	d940      	bls.n	8009098 <Get_Medha_EI_Message+0x1a8>
				{
					SuiBuffer_Index++;
 8009016:	4b2f      	ldr	r3, [pc, #188]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 8009018:	881b      	ldrh	r3, [r3, #0]
 800901a:	3301      	adds	r3, #1
 800901c:	b29a      	uxth	r2, r3
 800901e:	4b2d      	ldr	r3, [pc, #180]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 8009020:	801a      	strh	r2, [r3, #0]
					i++;
 8009022:	4b2b      	ldr	r3, [pc, #172]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8009024:	881b      	ldrh	r3, [r3, #0]
 8009026:	3301      	adds	r3, #1
 8009028:	b29a      	uxth	r2, r3
 800902a:	4b29      	ldr	r3, [pc, #164]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 800902c:	801a      	strh	r2, [r3, #0]
					j++;
 800902e:	4b2a      	ldr	r3, [pc, #168]	; (80090d8 <Get_Medha_EI_Message+0x1e8>)
 8009030:	881b      	ldrh	r3, [r3, #0]
 8009032:	3301      	adds	r3, #1
 8009034:	b29a      	uxth	r2, r3
 8009036:	4b28      	ldr	r3, [pc, #160]	; (80090d8 <Get_Medha_EI_Message+0x1e8>)
 8009038:	801a      	strh	r2, [r3, #0]
					if ((EI_pktlength) == (SuiBuffer_Index) )
 800903a:	89ba      	ldrh	r2, [r7, #12]
 800903c:	4b25      	ldr	r3, [pc, #148]	; (80090d4 <Get_Medha_EI_Message+0x1e4>)
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	429a      	cmp	r2, r3
 8009042:	d133      	bne.n	80090ac <Get_Medha_EI_Message+0x1bc>
					{
						sus_CRC = i - FOUR;
 8009044:	4b22      	ldr	r3, [pc, #136]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8009046:	881b      	ldrh	r3, [r3, #0]
 8009048:	3b04      	subs	r3, #4
 800904a:	b29a      	uxth	r2, r3
 800904c:	4b23      	ldr	r3, [pc, #140]	; (80090dc <Get_Medha_EI_Message+0x1ec>)
 800904e:	801a      	strh	r2, [r3, #0]
						us_ReturnBytes = sus_CRC;
 8009050:	4b22      	ldr	r3, [pc, #136]	; (80090dc <Get_Medha_EI_Message+0x1ec>)
 8009052:	881b      	ldrh	r3, [r3, #0]
 8009054:	81fb      	strh	r3, [r7, #14]
						i = 0;
 8009056:	4b1e      	ldr	r3, [pc, #120]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 8009058:	2200      	movs	r2, #0
 800905a:	801a      	strh	r2, [r3, #0]
						suc_RcvStatus = ONE;
 800905c:	4b1b      	ldr	r3, [pc, #108]	; (80090cc <Get_Medha_EI_Message+0x1dc>)
 800905e:	2201      	movs	r2, #1
 8009060:	701a      	strb	r2, [r3, #0]
						EI_pktlength = 0;
 8009062:	2300      	movs	r3, #0
 8009064:	81bb      	strh	r3, [r7, #12]
						if(us_ReturnBytes <= FOUR)
 8009066:	89fb      	ldrh	r3, [r7, #14]
 8009068:	2b04      	cmp	r3, #4
 800906a:	d804      	bhi.n	8009076 <Get_Medha_EI_Message+0x186>
						{
							printf("\nHERE\n");
 800906c:	481c      	ldr	r0, [pc, #112]	; (80090e0 <Get_Medha_EI_Message+0x1f0>)
 800906e:	f019 f9b9 	bl	80223e4 <puts>
							return ZERO;
 8009072:	2300      	movs	r3, #0
 8009074:	e023      	b.n	80090be <Get_Medha_EI_Message+0x1ce>
						}
						if(CheckCRC32(0,Buffer,sus_CRC))
 8009076:	4b19      	ldr	r3, [pc, #100]	; (80090dc <Get_Medha_EI_Message+0x1ec>)
 8009078:	881b      	ldrh	r3, [r3, #0]
 800907a:	461a      	mov	r2, r3
 800907c:	6839      	ldr	r1, [r7, #0]
 800907e:	2000      	movs	r0, #0
 8009080:	f001 fbc6 	bl	800a810 <CheckCRC32>
 8009084:	4603      	mov	r3, r0
 8009086:	2b00      	cmp	r3, #0
 8009088:	d001      	beq.n	800908e <Get_Medha_EI_Message+0x19e>
						{
							/*							printf("\nCRC OK\n");*/
							return us_ReturnBytes;
 800908a:	89fb      	ldrh	r3, [r7, #14]
 800908c:	e017      	b.n	80090be <Get_Medha_EI_Message+0x1ce>
						}
						else
						{
							printf("CRC NOK\n");
 800908e:	4815      	ldr	r0, [pc, #84]	; (80090e4 <Get_Medha_EI_Message+0x1f4>)
 8009090:	f019 f9a8 	bl	80223e4 <puts>
							return ZERO;
 8009094:	2300      	movs	r3, #0
 8009096:	e012      	b.n	80090be <Get_Medha_EI_Message+0x1ce>
						}
					}
				}
				else
				{
					i = 0;
 8009098:	4b0d      	ldr	r3, [pc, #52]	; (80090d0 <Get_Medha_EI_Message+0x1e0>)
 800909a:	2200      	movs	r2, #0
 800909c:	801a      	strh	r2, [r3, #0]
					suc_RcvStatus= 1;
 800909e:	4b0b      	ldr	r3, [pc, #44]	; (80090cc <Get_Medha_EI_Message+0x1dc>)
 80090a0:	2201      	movs	r2, #1
 80090a2:	701a      	strb	r2, [r3, #0]
					EI_pktlength = 0;
 80090a4:	2300      	movs	r3, #0
 80090a6:	81bb      	strh	r3, [r7, #12]
				}
				break;
 80090a8:	e000      	b.n	80090ac <Get_Medha_EI_Message+0x1bc>
			default:
				break;
 80090aa:	bf00      	nop
	while(Com_DataReady(ComPort))
 80090ac:	79fb      	ldrb	r3, [r7, #7]
 80090ae:	4618      	mov	r0, r3
 80090b0:	f00b fd8a 	bl	8014bc8 <Com_DataReady>
 80090b4:	4603      	mov	r3, r0
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	f47f af27 	bne.w	8008f0a <Get_Medha_EI_Message+0x1a>
		}
	}	    /* End of While data ready */
	return ZERO;
 80090bc:	2300      	movs	r3, #0
}
 80090be:	4618      	mov	r0, r3
 80090c0:	3710      	adds	r7, #16
 80090c2:	46bd      	mov	sp, r7
 80090c4:	bd80      	pop	{r7, pc}
 80090c6:	bf00      	nop
 80090c8:	200027ac 	.word	0x200027ac
 80090cc:	20000116 	.word	0x20000116
 80090d0:	200027ae 	.word	0x200027ae
 80090d4:	200027b0 	.word	0x200027b0
 80090d8:	200027b2 	.word	0x200027b2
 80090dc:	200027b4 	.word	0x200027b4
 80090e0:	08024f6c 	.word	0x08024f6c
 80090e4:	08024f74 	.word	0x08024f74

080090e8 <Medha_EI_Analyser>:
void Medha_EI_Analyser(void)
{
 80090e8:	b5b0      	push	{r4, r5, r7, lr}
 80090ea:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 80090ee:	af04      	add	r7, sp, #16

	uint16_t NoofBuffBytes 		= 0;
 80090f0:	2300      	movs	r3, #0
 80090f2:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6
	uint8_t EI_Buffer[300]		= "\0";
 80090f6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80090fa:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
 8009102:	3304      	adds	r3, #4
 8009104:	f44f 7294 	mov.w	r2, #296	; 0x128
 8009108:	2100      	movs	r1, #0
 800910a:	4618      	mov	r0, r3
 800910c:	f018 ffe6 	bl	80220dc <memset>
	uint16_t NoOfInputs 		= 0;
 8009110:	2300      	movs	r3, #0
 8009112:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
	uint16_t Traverser 			= 0;
 8009116:	2300      	movs	r3, #0
 8009118:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
	uint8_t TempCompliment[128] = {0,};
 800911c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009120:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8009124:	2200      	movs	r2, #0
 8009126:	601a      	str	r2, [r3, #0]
 8009128:	3304      	adds	r3, #4
 800912a:	227c      	movs	r2, #124	; 0x7c
 800912c:	2100      	movs	r1, #0
 800912e:	4618      	mov	r0, r3
 8009130:	f018 ffd4 	bl	80220dc <memset>
	uint16_t VitalCrcStartLoc 	= 0;
 8009134:	2300      	movs	r3, #0
 8009136:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
	uint32_t CalcVitalCrc 		= 0;
 800913a:	2300      	movs	r3, #0
 800913c:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
	MEDHA_EI_PKT_t Medha_EI_Temp_Rx_st;

	NoofBuffBytes= Get_Medha_EI_Message(EI_data.Medha_Prms_st.Comport,EI_Buffer,sizeof(EI_Buffer));
 8009140:	4bbf      	ldr	r3, [pc, #764]	; (8009440 <Medha_EI_Analyser+0x358>)
 8009142:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8009146:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 800914a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800914e:	4618      	mov	r0, r3
 8009150:	f7ff fece 	bl	8008ef0 <Get_Medha_EI_Message>
 8009154:	4603      	mov	r3, r0
 8009156:	f8a7 32d6 	strh.w	r3, [r7, #726]	; 0x2d6

	if(NoofBuffBytes > 5)
 800915a:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 800915e:	2b05      	cmp	r3, #5
 8009160:	d934      	bls.n	80091cc <Medha_EI_Analyser+0xe4>
	{
		printf("Raw Data:\n");
 8009162:	48b8      	ldr	r0, [pc, #736]	; (8009444 <Medha_EI_Analyser+0x35c>)
 8009164:	f019 f93e 	bl	80223e4 <puts>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 8009168:	2300      	movs	r3, #0
 800916a:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 800916e:	e024      	b.n	80091ba <Medha_EI_Analyser+0xd2>
		{

			if((i!=0) && ((i%10)==0))
 8009170:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 8009174:	2b00      	cmp	r3, #0
 8009176:	d010      	beq.n	800919a <Medha_EI_Analyser+0xb2>
 8009178:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 800917c:	4bb2      	ldr	r3, [pc, #712]	; (8009448 <Medha_EI_Analyser+0x360>)
 800917e:	fba3 1302 	umull	r1, r3, r3, r2
 8009182:	08d9      	lsrs	r1, r3, #3
 8009184:	460b      	mov	r3, r1
 8009186:	009b      	lsls	r3, r3, #2
 8009188:	440b      	add	r3, r1
 800918a:	005b      	lsls	r3, r3, #1
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	b29b      	uxth	r3, r3
 8009190:	2b00      	cmp	r3, #0
 8009192:	d102      	bne.n	800919a <Medha_EI_Analyser+0xb2>
			{
				printf("\n");
 8009194:	200a      	movs	r0, #10
 8009196:	f019 f8a1 	bl	80222dc <putchar>
			}
			printf("%02X ",EI_Buffer[i]);
 800919a:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 800919e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80091a2:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 80091a6:	5cd3      	ldrb	r3, [r2, r3]
 80091a8:	4619      	mov	r1, r3
 80091aa:	48a8      	ldr	r0, [pc, #672]	; (800944c <Medha_EI_Analyser+0x364>)
 80091ac:	f019 f87e 	bl	80222ac <iprintf>
		for(uint16_t i=0;i<NoofBuffBytes;++i)
 80091b0:	f8b7 32da 	ldrh.w	r3, [r7, #730]	; 0x2da
 80091b4:	3301      	adds	r3, #1
 80091b6:	f8a7 32da 	strh.w	r3, [r7, #730]	; 0x2da
 80091ba:	f8b7 22da 	ldrh.w	r2, [r7, #730]	; 0x2da
 80091be:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d3d4      	bcc.n	8009170 <Medha_EI_Analyser+0x88>
		}
		printf("\n");
 80091c6:	200a      	movs	r0, #10
 80091c8:	f019 f888 	bl	80222dc <putchar>
		printf("Injected EIPC_RX_FAILURE\n");
		NoofBuffBytes  =0;
	}
#endif

	if(NoofBuffBytes > 0)
 80091cc:	f8b7 32d6 	ldrh.w	r3, [r7, #726]	; 0x2d6
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	f000 83b6 	beq.w	8009942 <Medha_EI_Analyser+0x85a>
	{
		memset(&Medha_EI_Temp_Rx_st,0,sizeof(MEDHA_EI_PKT_t));
 80091d6:	463b      	mov	r3, r7
 80091d8:	f44f 7292 	mov.w	r2, #292	; 0x124
 80091dc:	2100      	movs	r1, #0
 80091de:	4618      	mov	r0, r3
 80091e0:	f018 ff7c 	bl	80220dc <memset>

		BYTEINIT(0);
 80091e4:	2300      	movs	r3, #0
 80091e6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		memcpy(&Medha_EI_Temp_Rx_st.SOM,&EI_Buffer[ucByte],1);
 80091ea:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80091ee:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80091f2:	4413      	add	r3, r2
 80091f4:	781a      	ldrb	r2, [r3, #0]
 80091f6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80091fa:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80091fe:	701a      	strb	r2, [r3, #0]
		BYTEINC(1);
 8009200:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009204:	3301      	adds	r3, #1
 8009206:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Dest_Addr,&EI_Buffer[ucByte],2);
 800920a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800920e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009212:	4413      	add	r3, r2
 8009214:	881b      	ldrh	r3, [r3, #0]
 8009216:	b29a      	uxth	r2, r3
 8009218:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800921c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009220:	809a      	strh	r2, [r3, #4]
			}
			printf("Injected Destination Address:%u\n",Medha_EI_Temp_Rx_st.Dest_Addr);
		}
#endif

		if(EI_data.Medha_Prms_st.Dest_Addr != Medha_EI_Temp_Rx_st.Dest_Addr)
 8009222:	4b87      	ldr	r3, [pc, #540]	; (8009440 <Medha_EI_Analyser+0x358>)
 8009224:	f8b3 2324 	ldrh.w	r2, [r3, #804]	; 0x324
 8009228:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800922c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009230:	889b      	ldrh	r3, [r3, #4]
 8009232:	429a      	cmp	r2, r3
 8009234:	d010      	beq.n	8009258 <Medha_EI_Analyser+0x170>
		{
			printf("Destination Address Not Matched - Packet Rejected\n");
 8009236:	4886      	ldr	r0, [pc, #536]	; (8009450 <Medha_EI_Analyser+0x368>)
 8009238:	f019 f8d4 	bl	80223e4 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Dest_Addr,Medha_EI_Temp_Rx_st.Dest_Addr);
 800923c:	4b80      	ldr	r3, [pc, #512]	; (8009440 <Medha_EI_Analyser+0x358>)
 800923e:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 8009242:	4619      	mov	r1, r3
 8009244:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009248:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800924c:	889b      	ldrh	r3, [r3, #4]
 800924e:	461a      	mov	r2, r3
 8009250:	4880      	ldr	r0, [pc, #512]	; (8009454 <Medha_EI_Analyser+0x36c>)
 8009252:	f019 f82b 	bl	80222ac <iprintf>
			return;
 8009256:	e377      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}
		BYTEINC(2);
 8009258:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800925c:	3302      	adds	r3, #2
 800925e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8



		memcpy(&Medha_EI_Temp_Rx_st.Source_Addr,&EI_Buffer[ucByte],2);
 8009262:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009266:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800926a:	4413      	add	r3, r2
 800926c:	881b      	ldrh	r3, [r3, #0]
 800926e:	b29a      	uxth	r2, r3
 8009270:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009274:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009278:	805a      	strh	r2, [r3, #2]

		}

#endif

		if(EI_data.Medha_Prms_st.Source_Addr != Medha_EI_Temp_Rx_st.Source_Addr)
 800927a:	4b71      	ldr	r3, [pc, #452]	; (8009440 <Medha_EI_Analyser+0x358>)
 800927c:	f8b3 2322 	ldrh.w	r2, [r3, #802]	; 0x322
 8009280:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009284:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009288:	885b      	ldrh	r3, [r3, #2]
 800928a:	429a      	cmp	r2, r3
 800928c:	d010      	beq.n	80092b0 <Medha_EI_Analyser+0x1c8>
		{
			printf("Source Address Not Matched - Packet Rejected\n");
 800928e:	4872      	ldr	r0, [pc, #456]	; (8009458 <Medha_EI_Analyser+0x370>)
 8009290:	f019 f8a8 	bl	80223e4 <puts>
			printf("Configured:\"%u\" - Received:\"%u\"\n",EI_data.Medha_Prms_st.Source_Addr,Medha_EI_Temp_Rx_st.Source_Addr);
 8009294:	4b6a      	ldr	r3, [pc, #424]	; (8009440 <Medha_EI_Analyser+0x358>)
 8009296:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800929a:	4619      	mov	r1, r3
 800929c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092a0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092a4:	885b      	ldrh	r3, [r3, #2]
 80092a6:	461a      	mov	r2, r3
 80092a8:	486a      	ldr	r0, [pc, #424]	; (8009454 <Medha_EI_Analyser+0x36c>)
 80092aa:	f018 ffff 	bl	80222ac <iprintf>
			return;
 80092ae:	e34b      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}
		BYTEINC(2);
 80092b0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80092b4:	3302      	adds	r3, #2
 80092b6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Channel_Type,&EI_Buffer[ucByte],1);
 80092ba:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80092be:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80092c2:	4413      	add	r3, r2
 80092c4:	781a      	ldrb	r2, [r3, #0]
 80092c6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092ca:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092ce:	719a      	strb	r2, [r3, #6]
			printf("Injected Channel_Type:%02X\n",Medha_EI_Temp_Rx_st.Channel_Type);
		}

#endif

		if( ! ( (Medha_EI_Temp_Rx_st.Channel_Type == CHANNEL_A) || (Medha_EI_Temp_Rx_st.Channel_Type ==CHANNEL_B) ) )
 80092d0:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092d4:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092d8:	799b      	ldrb	r3, [r3, #6]
 80092da:	2baa      	cmp	r3, #170	; 0xaa
 80092dc:	d010      	beq.n	8009300 <Medha_EI_Analyser+0x218>
 80092de:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092e2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092e6:	799b      	ldrb	r3, [r3, #6]
 80092e8:	2bbb      	cmp	r3, #187	; 0xbb
 80092ea:	d009      	beq.n	8009300 <Medha_EI_Analyser+0x218>
		{
			printf("Received from Unknown Channel:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Channel_Type);
 80092ec:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80092f0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80092f4:	799b      	ldrb	r3, [r3, #6]
 80092f6:	4619      	mov	r1, r3
 80092f8:	4858      	ldr	r0, [pc, #352]	; (800945c <Medha_EI_Analyser+0x374>)
 80092fa:	f018 ffd7 	bl	80222ac <iprintf>
			return;
 80092fe:	e323      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}
		BYTEINC(1);
 8009300:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009304:	3301      	adds	r3, #1
 8009306:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Control_Byte,&EI_Buffer[ucByte],1);
 800930a:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800930e:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009312:	4413      	add	r3, r2
 8009314:	781a      	ldrb	r2, [r3, #0]
 8009316:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800931a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800931e:	71da      	strb	r2, [r3, #7]
			printf("Injected Control_Byte:%02X\n",Medha_EI_Temp_Rx_st.Control_Byte);
		}

#endif

		if( Medha_EI_Temp_Rx_st.Control_Byte != CONTROL_BYTE_RX )
 8009320:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009324:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009328:	79db      	ldrb	r3, [r3, #7]
 800932a:	2be1      	cmp	r3, #225	; 0xe1
 800932c:	d009      	beq.n	8009342 <Medha_EI_Analyser+0x25a>
		{
			printf("Received Unknown ControlByte:%02X - Packet Rejected\n",Medha_EI_Temp_Rx_st.Control_Byte);
 800932e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009332:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009336:	79db      	ldrb	r3, [r3, #7]
 8009338:	4619      	mov	r1, r3
 800933a:	4849      	ldr	r0, [pc, #292]	; (8009460 <Medha_EI_Analyser+0x378>)
 800933c:	f018 ffb6 	bl	80222ac <iprintf>
			return;
 8009340:	e302      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}

		BYTEINC(1);
 8009342:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009346:	3301      	adds	r3, #1
 8009348:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8


		memcpy(&Medha_EI_Temp_Rx_st.Length,&EI_Buffer[ucByte],2);
 800934c:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009350:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009354:	4413      	add	r3, r2
 8009356:	881b      	ldrh	r3, [r3, #0]
 8009358:	b29a      	uxth	r2, r3
 800935a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800935e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009362:	811a      	strh	r2, [r3, #8]
		BYTEINC(2);
 8009364:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009368:	3302      	adds	r3, #2
 800936a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Packet_Number,&EI_Buffer[ucByte],1);
 800936e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009372:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009376:	4413      	add	r3, r2
 8009378:	781a      	ldrb	r2, [r3, #0]
 800937a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800937e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009382:	729a      	strb	r2, [r3, #10]
		BYTEINC(1);
 8009384:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009388:	3301      	adds	r3, #1
 800938a:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved1,&EI_Buffer[ucByte],7);
 800938e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009392:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 8009396:	441a      	add	r2, r3
 8009398:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800939c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093a0:	330b      	adds	r3, #11
 80093a2:	6811      	ldr	r1, [r2, #0]
 80093a4:	6019      	str	r1, [r3, #0]
 80093a6:	8891      	ldrh	r1, [r2, #4]
 80093a8:	7992      	ldrb	r2, [r2, #6]
 80093aa:	8099      	strh	r1, [r3, #4]
 80093ac:	719a      	strb	r2, [r3, #6]
		BYTEINC(7);
 80093ae:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093b2:	3307      	adds	r3, #7
 80093b4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Health_Status,&EI_Buffer[ucByte],1);
 80093b8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093bc:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80093c0:	4413      	add	r3, r2
 80093c2:	781a      	ldrb	r2, [r3, #0]
 80093c4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093c8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093cc:	749a      	strb	r2, [r3, #18]
			printf("Injected Health_Status:%02X\n",Medha_EI_Temp_Rx_st.Health_Status);
		}

#endif

		if(Medha_EI_Temp_Rx_st.Health_Status != HEALTH_OK)
 80093ce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093d2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093d6:	7c9b      	ldrb	r3, [r3, #18]
 80093d8:	2b11      	cmp	r3, #17
 80093da:	d009      	beq.n	80093f0 <Medha_EI_Analyser+0x308>
		{
			printf("MEDHA-EI HEALTH \"NOT-OK\"... \nReceived Health:%02x\nPacket Rejected.\n",Medha_EI_Temp_Rx_st.Health_Status);
 80093dc:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80093e0:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80093e4:	7c9b      	ldrb	r3, [r3, #18]
 80093e6:	4619      	mov	r1, r3
 80093e8:	481e      	ldr	r0, [pc, #120]	; (8009464 <Medha_EI_Analyser+0x37c>)
 80093ea:	f018 ff5f 	bl	80222ac <iprintf>
			return;
 80093ee:	e2ab      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}

		BYTEINC(1);
 80093f0:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093f4:	3301      	adds	r3, #1
 80093f6:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		VitalCrcStartLoc = ucByte;
 80093fa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80093fe:	f8a7 32d4 	strh.w	r3, [r7, #724]	; 0x2d4
		memcpy(&Medha_EI_Temp_Rx_st.NoofRelays,&EI_Buffer[ucByte],2);
 8009402:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009406:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800940a:	4413      	add	r3, r2
 800940c:	881b      	ldrh	r3, [r3, #0]
 800940e:	b29a      	uxth	r2, r3
 8009410:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009414:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009418:	829a      	strh	r2, [r3, #20]
			printf("Injected NoofRelays:%u\n",Medha_EI_Temp_Rx_st.NoofRelays);
		}

#endif

		if(Medha_EI_Temp_Rx_st.NoofRelays>1024)
 800941a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800941e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009422:	8a9b      	ldrh	r3, [r3, #20]
 8009424:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009428:	d920      	bls.n	800946c <Medha_EI_Analyser+0x384>
		{
			printf("No of Relays Exceeding 1024 Inputs\nNo of Relays Received:%u\nSo Packet Rejected\n",Medha_EI_Temp_Rx_st.NoofRelays);
 800942a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800942e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009432:	8a9b      	ldrh	r3, [r3, #20]
 8009434:	4619      	mov	r1, r3
 8009436:	480c      	ldr	r0, [pc, #48]	; (8009468 <Medha_EI_Analyser+0x380>)
 8009438:	f018 ff38 	bl	80222ac <iprintf>
			return;
 800943c:	e284      	b.n	8009948 <Medha_EI_Analyser+0x860>
 800943e:	bf00      	nop
 8009440:	20000304 	.word	0x20000304
 8009444:	08024f7c 	.word	0x08024f7c
 8009448:	cccccccd 	.word	0xcccccccd
 800944c:	08024f88 	.word	0x08024f88
 8009450:	08024f90 	.word	0x08024f90
 8009454:	08024fc4 	.word	0x08024fc4
 8009458:	08024fe8 	.word	0x08024fe8
 800945c:	08025018 	.word	0x08025018
 8009460:	08025050 	.word	0x08025050
 8009464:	08025088 	.word	0x08025088
 8009468:	080250cc 	.word	0x080250cc
		}

		if(Medha_EI_Temp_Rx_st.NoofRelays != EI_data.Medha_Prms_st.NoofRelays)
 800946c:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009470:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009474:	8a9a      	ldrh	r2, [r3, #20]
 8009476:	4ba6      	ldr	r3, [pc, #664]	; (8009710 <Medha_EI_Analyser+0x628>)
 8009478:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800947c:	429a      	cmp	r2, r3
 800947e:	d014      	beq.n	80094aa <Medha_EI_Analyser+0x3c2>
		{
			printf("No of Relays Not Matching...\nConfigured:%u - Received:%u\n",EI_data.Medha_Prms_st.NoofRelays,Medha_EI_Temp_Rx_st.NoofRelays);
 8009480:	4ba3      	ldr	r3, [pc, #652]	; (8009710 <Medha_EI_Analyser+0x628>)
 8009482:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009486:	4619      	mov	r1, r3
 8009488:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800948c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009490:	8a9b      	ldrh	r3, [r3, #20]
 8009492:	461a      	mov	r2, r3
 8009494:	489f      	ldr	r0, [pc, #636]	; (8009714 <Medha_EI_Analyser+0x62c>)
 8009496:	f018 ff09 	bl	80222ac <iprintf>

			if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800949a:	499f      	ldr	r1, [pc, #636]	; (8009718 <Medha_EI_Analyser+0x630>)
 800949c:	489f      	ldr	r0, [pc, #636]	; (800971c <Medha_EI_Analyser+0x634>)
 800949e:	f7f6 fecf 	bl	8000240 <strcmp>
 80094a2:	4603      	mov	r3, r0
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	f000 824e 	beq.w	8009946 <Medha_EI_Analyser+0x85e>
			{
				return;
			}
		}

		BYTEINC(2);
 80094aa:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80094ae:	3302      	adds	r3, #2
 80094b0:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/*		printf("MedhaEI_Rx_Temp_Pkt_st.NoofRelays:%u\n",MedhaEI_Rx_Temp_Pkt_st.NoofRelays); */

		NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays % 8);
 80094b4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094b8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094bc:	8a9b      	ldrh	r3, [r3, #20]
 80094be:	f003 0307 	and.w	r3, r3, #7
 80094c2:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		if (NoOfInputs != 0)
 80094c6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d00a      	beq.n	80094e4 <Medha_EI_Analyser+0x3fc>
		{
			NoOfInputs = ((Medha_EI_Temp_Rx_st.NoofRelays / 8)) + 1; //	including 0th buffer
 80094ce:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094d2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094d6:	8a9b      	ldrh	r3, [r3, #20]
 80094d8:	08db      	lsrs	r3, r3, #3
 80094da:	b29b      	uxth	r3, r3
 80094dc:	3301      	adds	r3, #1
 80094de:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
 80094e2:	e007      	b.n	80094f4 <Medha_EI_Analyser+0x40c>
		}
		else
		{
			NoOfInputs = (Medha_EI_Temp_Rx_st.NoofRelays / 8);
 80094e4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80094e8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80094ec:	8a9b      	ldrh	r3, [r3, #20]
 80094ee:	08db      	lsrs	r3, r3, #3
 80094f0:	f8a7 32de 	strh.w	r3, [r7, #734]	; 0x2de
		}

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80094f4:	2300      	movs	r3, #0
 80094f6:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80094fa:	e02a      	b.n	8009552 <Medha_EI_Analyser+0x46a>
		{
			Medha_EI_Temp_Rx_st.RelayStatus[Traverser] = EI_Buffer[ucByte];
 80094fc:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009500:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009504:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009508:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 800950c:	5c89      	ldrb	r1, [r1, r2]
 800950e:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009512:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009516:	4413      	add	r3, r2
 8009518:	460a      	mov	r2, r1
 800951a:	759a      	strb	r2, [r3, #22]
			TempCompliment[Traverser] = ~(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 800951c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009520:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009524:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009528:	4413      	add	r3, r2
 800952a:	7d9a      	ldrb	r2, [r3, #22]
 800952c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009530:	43d2      	mvns	r2, r2
 8009532:	b2d1      	uxtb	r1, r2
 8009534:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009538:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 800953c:	54d1      	strb	r1, [r2, r3]
			BYTEINC(1);
 800953e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 8009542:	3301      	adds	r3, #1
 8009544:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009548:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800954c:	3301      	adds	r3, #1
 800954e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009552:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009556:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800955a:	429a      	cmp	r2, r3
 800955c:	d3ce      	bcc.n	80094fc <Medha_EI_Analyser+0x414>
		 * printf("\n");
		 * printf("Compliement Data\n");
		 *
		 */

		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800955e:	2300      	movs	r3, #0
 8009560:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009564:	e01a      	b.n	800959c <Medha_EI_Analyser+0x4b4>
		{
			Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser] = EI_Buffer[ucByte];
 8009566:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 800956a:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800956e:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 8009572:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 8009576:	5c89      	ldrb	r1, [r1, r2]
 8009578:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 800957c:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 8009580:	4413      	add	r3, r2
 8009582:	460a      	mov	r2, r1
 8009584:	f883 2096 	strb.w	r2, [r3, #150]	; 0x96
			BYTEINC(1);
 8009588:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800958c:	3301      	adds	r3, #1
 800958e:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009592:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009596:	3301      	adds	r3, #1
 8009598:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800959c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80095a0:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80095a4:	429a      	cmp	r2, r3
 80095a6:	d3de      	bcc.n	8009566 <Medha_EI_Analyser+0x47e>
			printf("Injected Received Compliment value:%02X\n",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Index]);
		}

#endif

		if(memcmp(Medha_EI_Temp_Rx_st.Comp_RelayStatus,TempCompliment,NoOfInputs) != 0)
 80095a8:	f8b7 22de 	ldrh.w	r2, [r7, #734]	; 0x2de
 80095ac:	f507 7192 	add.w	r1, r7, #292	; 0x124
 80095b0:	463b      	mov	r3, r7
 80095b2:	3396      	adds	r3, #150	; 0x96
 80095b4:	4618      	mov	r0, r3
 80095b6:	f018 fd59 	bl	802206c <memcmp>
 80095ba:	4603      	mov	r3, r0
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d03f      	beq.n	8009640 <Medha_EI_Analyser+0x558>
		{
			printf("Relay Data Compliment Verification Failed\nReceived Relay Compliment Status:\n");
 80095c0:	4857      	ldr	r0, [pc, #348]	; (8009720 <Medha_EI_Analyser+0x638>)
 80095c2:	f018 ff0f 	bl	80223e4 <puts>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80095c6:	2300      	movs	r3, #0
 80095c8:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80095cc:	e011      	b.n	80095f2 <Medha_EI_Analyser+0x50a>
			{
				printf("%02X ",Medha_EI_Temp_Rx_st.Comp_RelayStatus[Traverser]);
 80095ce:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80095d2:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 80095d6:	f5a2 7238 	sub.w	r2, r2, #736	; 0x2e0
 80095da:	4413      	add	r3, r2
 80095dc:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 80095e0:	4619      	mov	r1, r3
 80095e2:	4850      	ldr	r0, [pc, #320]	; (8009724 <Medha_EI_Analyser+0x63c>)
 80095e4:	f018 fe62 	bl	80222ac <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 80095e8:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80095ec:	3301      	adds	r3, #1
 80095ee:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80095f2:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80095f6:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80095fa:	429a      	cmp	r2, r3
 80095fc:	d3e7      	bcc.n	80095ce <Medha_EI_Analyser+0x4e6>
			}

			printf("\nExpected Compliment Relay Status:\n");
 80095fe:	484a      	ldr	r0, [pc, #296]	; (8009728 <Medha_EI_Analyser+0x640>)
 8009600:	f018 fef0 	bl	80223e4 <puts>

			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009604:	2300      	movs	r3, #0
 8009606:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800960a:	e00f      	b.n	800962c <Medha_EI_Analyser+0x544>
			{
				printf("%02X ",TempCompliment[Traverser]);
 800960c:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009610:	f507 7238 	add.w	r2, r7, #736	; 0x2e0
 8009614:	f5a2 72de 	sub.w	r2, r2, #444	; 0x1bc
 8009618:	5cd3      	ldrb	r3, [r2, r3]
 800961a:	4619      	mov	r1, r3
 800961c:	4841      	ldr	r0, [pc, #260]	; (8009724 <Medha_EI_Analyser+0x63c>)
 800961e:	f018 fe45 	bl	80222ac <iprintf>
			for(Traverser = 0;Traverser<NoOfInputs;++Traverser)
 8009622:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009626:	3301      	adds	r3, #1
 8009628:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800962c:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009630:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009634:	429a      	cmp	r2, r3
 8009636:	d3e9      	bcc.n	800960c <Medha_EI_Analyser+0x524>
			}

			printf("\nPACKET Rejected\n");
 8009638:	483c      	ldr	r0, [pc, #240]	; (800972c <Medha_EI_Analyser+0x644>)
 800963a:	f018 fed3 	bl	80223e4 <puts>
			return;
 800963e:	e183      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}


		CalcVitalCrc = GetCRC32(VitalCrcStartLoc, EI_Buffer, ucByte);
 8009640:	f8b7 22d8 	ldrh.w	r2, [r7, #728]	; 0x2d8
 8009644:	f507 71d2 	add.w	r1, r7, #420	; 0x1a4
 8009648:	f8b7 32d4 	ldrh.w	r3, [r7, #724]	; 0x2d4
 800964c:	4618      	mov	r0, r3
 800964e:	f001 f8ab 	bl	800a7a8 <GetCRC32>
 8009652:	f8c7 02d0 	str.w	r0, [r7, #720]	; 0x2d0
		memcpy(&Medha_EI_Temp_Rx_st.Vital_CRC, &EI_Buffer[ucByte],4);
 8009656:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 800965a:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 800965e:	4413      	add	r3, r2
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	461a      	mov	r2, r3
 8009664:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009668:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800966c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

#endif



		if(CalcVitalCrc != Medha_EI_Temp_Rx_st.Vital_CRC)
 8009670:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009674:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009678:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800967c:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8009680:	429a      	cmp	r2, r3
 8009682:	d00c      	beq.n	800969e <Medha_EI_Analyser+0x5b6>
		{
			printf("Vital CRC Failed....\nCalc:0X%08lX|Recv:0X%08lX\nPacket Rejected\n",CalcVitalCrc,Medha_EI_Temp_Rx_st.Vital_CRC);
 8009684:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009688:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800968c:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009690:	461a      	mov	r2, r3
 8009692:	f8d7 12d0 	ldr.w	r1, [r7, #720]	; 0x2d0
 8009696:	4826      	ldr	r0, [pc, #152]	; (8009730 <Medha_EI_Analyser+0x648>)
 8009698:	f018 fe08 	bl	80222ac <iprintf>
			return;
 800969c:	e154      	b.n	8009948 <Medha_EI_Analyser+0x860>
		}
		BYTEINC(4);
 800969e:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096a2:	3304      	adds	r3, #4
 80096a4:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		memcpy(&Medha_EI_Temp_Rx_st.Reserved2, &EI_Buffer[ucByte],2);
 80096a8:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096ac:	f507 72d2 	add.w	r2, r7, #420	; 0x1a4
 80096b0:	4413      	add	r3, r2
 80096b2:	881b      	ldrh	r3, [r3, #0]
 80096b4:	b29a      	uxth	r2, r3
 80096b6:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096ba:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096be:	f8a3 211c 	strh.w	r2, [r3, #284]	; 0x11c
		BYTEINC(2);
 80096c2:	f8b7 32d8 	ldrh.w	r3, [r7, #728]	; 0x2d8
 80096c6:	3302      	adds	r3, #2
 80096c8:	f8a7 32d8 	strh.w	r3, [r7, #728]	; 0x2d8

		/* ******************************************************* PROCESS VALID PACKET STEPS ↓ ******************************************************* */

		//printf("\n                     ELAPSED_TICKS:%lu\n",HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
		Medha_Fault_Handler_st.Pkt_Rcv_clk = HAL_GetTick();
 80096cc:	f00b fde4 	bl	8015298 <HAL_GetTick>
 80096d0:	4603      	mov	r3, r0
 80096d2:	4a18      	ldr	r2, [pc, #96]	; (8009734 <Medha_EI_Analyser+0x64c>)
 80096d4:	6053      	str	r3, [r2, #4]
		memcpy(&Medha_EI_Rx_Pkt_st,&Medha_EI_Temp_Rx_st,sizeof(MEDHA_EI_PKT_t));
 80096d6:	4a18      	ldr	r2, [pc, #96]	; (8009738 <Medha_EI_Analyser+0x650>)
 80096d8:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80096dc:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80096e0:	4610      	mov	r0, r2
 80096e2:	4619      	mov	r1, r3
 80096e4:	f44f 7392 	mov.w	r3, #292	; 0x124
 80096e8:	461a      	mov	r2, r3
 80096ea:	f018 fccf 	bl	802208c <memcpy>

		Medha_ei_self_sharing_TX_st.Receiving_Status = RECEIVED;
 80096ee:	4b13      	ldr	r3, [pc, #76]	; (800973c <Medha_EI_Analyser+0x654>)
 80096f0:	2201      	movs	r2, #1
 80096f2:	701a      	strb	r2, [r3, #0]
		Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 80096f4:	4b10      	ldr	r3, [pc, #64]	; (8009738 <Medha_EI_Analyser+0x650>)
 80096f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80096fa:	4a10      	ldr	r2, [pc, #64]	; (800973c <Medha_EI_Analyser+0x654>)
 80096fc:	6053      	str	r3, [r2, #4]

		Send_Medha_EI_Reply(NoOfInputs); /* TO ACKNOWLEDGE THE PACKET */
 80096fe:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009702:	4618      	mov	r0, r3
 8009704:	f000 f950 	bl	80099a8 <Send_Medha_EI_Reply>


		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009708:	2300      	movs	r3, #0
 800970a:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 800970e:	e028      	b.n	8009762 <Medha_EI_Analyser+0x67a>
 8009710:	20000304 	.word	0x20000304
 8009714:	0802511c 	.word	0x0802511c
 8009718:	08025158 	.word	0x08025158
 800971c:	20000305 	.word	0x20000305
 8009720:	08025164 	.word	0x08025164
 8009724:	08024f88 	.word	0x08024f88
 8009728:	080251b0 	.word	0x080251b0
 800972c:	080251d4 	.word	0x080251d4
 8009730:	080251e8 	.word	0x080251e8
 8009734:	200025f8 	.word	0x200025f8
 8009738:	200024a4 	.word	0x200024a4
 800973c:	20002608 	.word	0x20002608
		{
			//Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = ROTATE_BYTE(Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
			Medha_Cur_Relay_Status_st.Relay_Status[Traverser] = (Medha_EI_Temp_Rx_st.RelayStatus[Traverser]);
 8009740:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009744:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009748:	f507 7138 	add.w	r1, r7, #736	; 0x2e0
 800974c:	f5a1 7138 	sub.w	r1, r1, #736	; 0x2e0
 8009750:	440a      	add	r2, r1
 8009752:	7d91      	ldrb	r1, [r2, #22]
 8009754:	4a7e      	ldr	r2, [pc, #504]	; (8009950 <Medha_EI_Analyser+0x868>)
 8009756:	54d1      	strb	r1, [r2, r3]
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 8009758:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 800975c:	3301      	adds	r3, #1
 800975e:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009762:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 8009766:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800976a:	429a      	cmp	r2, r3
 800976c:	d3e8      	bcc.n	8009740 <Medha_EI_Analyser+0x658>
		}
		Medha_Cur_Relay_Status_st.Vital_CRC = Medha_EI_Rx_Pkt_st.Vital_CRC;
 800976e:	4b79      	ldr	r3, [pc, #484]	; (8009954 <Medha_EI_Analyser+0x86c>)
 8009770:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8009774:	4a76      	ldr	r2, [pc, #472]	; (8009950 <Medha_EI_Analyser+0x868>)
 8009776:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

		if(memcmp(Medha_Temp_relay_sts_t.Relay_Status,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs)!=0)
 800977a:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 800977e:	461a      	mov	r2, r3
 8009780:	4973      	ldr	r1, [pc, #460]	; (8009950 <Medha_EI_Analyser+0x868>)
 8009782:	4875      	ldr	r0, [pc, #468]	; (8009958 <Medha_EI_Analyser+0x870>)
 8009784:	f018 fc72 	bl	802206c <memcmp>
 8009788:	4603      	mov	r3, r0
 800978a:	2b00      	cmp	r3, #0
 800978c:	d02c      	beq.n	80097e8 <Medha_EI_Analyser+0x700>
		{
			memcpy(&Medha_Temp_relay_sts_t.Relay_Status,&Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 800978e:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009792:	461a      	mov	r2, r3
 8009794:	496e      	ldr	r1, [pc, #440]	; (8009950 <Medha_EI_Analyser+0x868>)
 8009796:	4870      	ldr	r0, [pc, #448]	; (8009958 <Medha_EI_Analyser+0x870>)
 8009798:	f018 fc78 	bl	802208c <memcpy>
			Medha_Temp_relay_sts_t.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800979c:	4b6c      	ldr	r3, [pc, #432]	; (8009950 <Medha_EI_Analyser+0x868>)
 800979e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80097a2:	4a6d      	ldr	r2, [pc, #436]	; (8009958 <Medha_EI_Analyser+0x870>)
 80097a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

			memset(&Medha_Relay_Sts_st.Relay_Sts,0,sizeof(MEDHA_RELAY_STS_t));
 80097a8:	2230      	movs	r2, #48	; 0x30
 80097aa:	2100      	movs	r1, #0
 80097ac:	486b      	ldr	r0, [pc, #428]	; (800995c <Medha_EI_Analyser+0x874>)
 80097ae:	f018 fc95 	bl	80220dc <memset>
			//InsertBits(0, 16, &Medha_Relay_Sts_st.Relay_Sts[0], Medha_Prms_st.NoofRelays);
			memcpy(&Medha_Relay_Sts_st.Relay_Sts,Medha_Cur_Relay_Status_st.Relay_Status,NoOfInputs);
 80097b2:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 80097b6:	461a      	mov	r2, r3
 80097b8:	4965      	ldr	r1, [pc, #404]	; (8009950 <Medha_EI_Analyser+0x868>)
 80097ba:	4868      	ldr	r0, [pc, #416]	; (800995c <Medha_EI_Analyser+0x874>)
 80097bc:	f018 fc66 	bl	802208c <memcpy>
#ifdef EI_1
			TransmitCanPkt(EI_PROCESS_DATA);
#endif
			Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 80097c0:	f00b fd6a 	bl	8015298 <HAL_GetTick>
 80097c4:	4603      	mov	r3, r0
 80097c6:	4a66      	ldr	r2, [pc, #408]	; (8009960 <Medha_EI_Analyser+0x878>)
 80097c8:	6093      	str	r3, [r2, #8]

			printf("CAN Packet sent to MIE\n");
 80097ca:	4866      	ldr	r0, [pc, #408]	; (8009964 <Medha_EI_Analyser+0x87c>)
 80097cc:	f018 fe0a 	bl	80223e4 <puts>

#ifdef EI_1
			TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
			TransmitCanPkt(EI_2_SELF_SHARING);
 80097d0:	f240 2002 	movw	r0, #514	; 0x202
 80097d4:	f005 fd8a 	bl	800f2ec <TransmitCanPkt>
#endif

			if(Medha_ei_self_sharing_RX_st.Vital_CRC == 0)
 80097d8:	4b63      	ldr	r3, [pc, #396]	; (8009968 <Medha_EI_Analyser+0x880>)
 80097da:	685b      	ldr	r3, [r3, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d103      	bne.n	80097e8 <Medha_EI_Analyser+0x700>
			{
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 80097e0:	f44f 7002 	mov.w	r0, #520	; 0x208
 80097e4:	f005 fd82 	bl	800f2ec <TransmitCanPkt>
#endif
			}

		}

		printf("\n__________ RCV MSG DETAILS __________\n");
 80097e8:	4860      	ldr	r0, [pc, #384]	; (800996c <Medha_EI_Analyser+0x884>)
 80097ea:	f018 fdfb 	bl	80223e4 <puts>
		printf("DA:%5u|",Medha_EI_Temp_Rx_st.Dest_Addr);
 80097ee:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80097f2:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80097f6:	889b      	ldrh	r3, [r3, #4]
 80097f8:	4619      	mov	r1, r3
 80097fa:	485d      	ldr	r0, [pc, #372]	; (8009970 <Medha_EI_Analyser+0x888>)
 80097fc:	f018 fd56 	bl	80222ac <iprintf>
		printf("SA:%5u|",Medha_EI_Temp_Rx_st.Source_Addr);
 8009800:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009804:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009808:	885b      	ldrh	r3, [r3, #2]
 800980a:	4619      	mov	r1, r3
 800980c:	4859      	ldr	r0, [pc, #356]	; (8009974 <Medha_EI_Analyser+0x88c>)
 800980e:	f018 fd4d 	bl	80222ac <iprintf>
		printf("CT:%02X|",Medha_EI_Temp_Rx_st.Channel_Type);
 8009812:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009816:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800981a:	799b      	ldrb	r3, [r3, #6]
 800981c:	4619      	mov	r1, r3
 800981e:	4856      	ldr	r0, [pc, #344]	; (8009978 <Medha_EI_Analyser+0x890>)
 8009820:	f018 fd44 	bl	80222ac <iprintf>
		printf("CB:%02X|",Medha_EI_Temp_Rx_st.Control_Byte);
 8009824:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009828:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800982c:	79db      	ldrb	r3, [r3, #7]
 800982e:	4619      	mov	r1, r3
 8009830:	4852      	ldr	r0, [pc, #328]	; (800997c <Medha_EI_Analyser+0x894>)
 8009832:	f018 fd3b 	bl	80222ac <iprintf>
		printf("L :%5u|",Medha_EI_Temp_Rx_st.Length);
 8009836:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800983a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800983e:	891b      	ldrh	r3, [r3, #8]
 8009840:	4619      	mov	r1, r3
 8009842:	484f      	ldr	r0, [pc, #316]	; (8009980 <Medha_EI_Analyser+0x898>)
 8009844:	f018 fd32 	bl	80222ac <iprintf>
		printf("PN:%3u|",Medha_EI_Temp_Rx_st.Packet_Number);
 8009848:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800984c:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009850:	7a9b      	ldrb	r3, [r3, #10]
 8009852:	4619      	mov	r1, r3
 8009854:	484b      	ldr	r0, [pc, #300]	; (8009984 <Medha_EI_Analyser+0x89c>)
 8009856:	f018 fd29 	bl	80222ac <iprintf>
		printf("TS:%02x:%02x:%02x|%02x/%02x/%02x|",Medha_EI_Temp_Rx_st.Reserved1[3],Medha_EI_Temp_Rx_st.Reserved1[2],Medha_EI_Temp_Rx_st.Reserved1[1],Medha_EI_Temp_Rx_st.Reserved1[4],Medha_EI_Temp_Rx_st.Reserved1[5],Medha_EI_Temp_Rx_st.Reserved1[6]);
 800985a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800985e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009862:	7b9b      	ldrb	r3, [r3, #14]
 8009864:	4618      	mov	r0, r3
 8009866:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800986a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800986e:	7b5b      	ldrb	r3, [r3, #13]
 8009870:	461c      	mov	r4, r3
 8009872:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009876:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800987a:	7b1b      	ldrb	r3, [r3, #12]
 800987c:	461d      	mov	r5, r3
 800987e:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 8009882:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009886:	7bdb      	ldrb	r3, [r3, #15]
 8009888:	461a      	mov	r2, r3
 800988a:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800988e:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 8009892:	7c1b      	ldrb	r3, [r3, #16]
 8009894:	4619      	mov	r1, r3
 8009896:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 800989a:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 800989e:	7c5b      	ldrb	r3, [r3, #17]
 80098a0:	9302      	str	r3, [sp, #8]
 80098a2:	9101      	str	r1, [sp, #4]
 80098a4:	9200      	str	r2, [sp, #0]
 80098a6:	462b      	mov	r3, r5
 80098a8:	4622      	mov	r2, r4
 80098aa:	4601      	mov	r1, r0
 80098ac:	4836      	ldr	r0, [pc, #216]	; (8009988 <Medha_EI_Analyser+0x8a0>)
 80098ae:	f018 fcfd 	bl	80222ac <iprintf>
		printf("HS:%02X|",Medha_EI_Temp_Rx_st.Health_Status);
 80098b2:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098b6:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098ba:	7c9b      	ldrb	r3, [r3, #18]
 80098bc:	4619      	mov	r1, r3
 80098be:	4833      	ldr	r0, [pc, #204]	; (800998c <Medha_EI_Analyser+0x8a4>)
 80098c0:	f018 fcf4 	bl	80222ac <iprintf>
		printf("RC:%5u\n",Medha_EI_Temp_Rx_st.NoofRelays);
 80098c4:	f507 7338 	add.w	r3, r7, #736	; 0x2e0
 80098c8:	f5a3 7338 	sub.w	r3, r3, #736	; 0x2e0
 80098cc:	8a9b      	ldrh	r3, [r3, #20]
 80098ce:	4619      	mov	r1, r3
 80098d0:	482f      	ldr	r0, [pc, #188]	; (8009990 <Medha_EI_Analyser+0x8a8>)
 80098d2:	f018 fceb 	bl	80222ac <iprintf>
		printf("SIGNAL DATA       :");
 80098d6:	482f      	ldr	r0, [pc, #188]	; (8009994 <Medha_EI_Analyser+0x8ac>)
 80098d8:	f018 fce8 	bl	80222ac <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 80098dc:	2300      	movs	r3, #0
 80098de:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 80098e2:	e021      	b.n	8009928 <Medha_EI_Analyser+0x840>
		{
			if((Traverser!=0) && ((Traverser%10)==0))
 80098e4:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d010      	beq.n	800990e <Medha_EI_Analyser+0x826>
 80098ec:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 80098f0:	4b29      	ldr	r3, [pc, #164]	; (8009998 <Medha_EI_Analyser+0x8b0>)
 80098f2:	fba3 1302 	umull	r1, r3, r3, r2
 80098f6:	08d9      	lsrs	r1, r3, #3
 80098f8:	460b      	mov	r3, r1
 80098fa:	009b      	lsls	r3, r3, #2
 80098fc:	440b      	add	r3, r1
 80098fe:	005b      	lsls	r3, r3, #1
 8009900:	1ad3      	subs	r3, r2, r3
 8009902:	b29b      	uxth	r3, r3
 8009904:	2b00      	cmp	r3, #0
 8009906:	d102      	bne.n	800990e <Medha_EI_Analyser+0x826>
			{
				printf("\n                   ");
 8009908:	4824      	ldr	r0, [pc, #144]	; (800999c <Medha_EI_Analyser+0x8b4>)
 800990a:	f018 fccf 	bl	80222ac <iprintf>
			}
			printf("%02X ",Medha_Cur_Relay_Status_st.Relay_Status[Traverser]);
 800990e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009912:	4a0f      	ldr	r2, [pc, #60]	; (8009950 <Medha_EI_Analyser+0x868>)
 8009914:	5cd3      	ldrb	r3, [r2, r3]
 8009916:	4619      	mov	r1, r3
 8009918:	4821      	ldr	r0, [pc, #132]	; (80099a0 <Medha_EI_Analyser+0x8b8>)
 800991a:	f018 fcc7 	bl	80222ac <iprintf>
		for(Traverser=0;Traverser<NoOfInputs;++Traverser)
 800991e:	f8b7 32dc 	ldrh.w	r3, [r7, #732]	; 0x2dc
 8009922:	3301      	adds	r3, #1
 8009924:	f8a7 32dc 	strh.w	r3, [r7, #732]	; 0x2dc
 8009928:	f8b7 22dc 	ldrh.w	r2, [r7, #732]	; 0x2dc
 800992c:	f8b7 32de 	ldrh.w	r3, [r7, #734]	; 0x2de
 8009930:	429a      	cmp	r2, r3
 8009932:	d3d7      	bcc.n	80098e4 <Medha_EI_Analyser+0x7fc>
		}
		printf("\n");
 8009934:	200a      	movs	r0, #10
 8009936:	f018 fcd1 	bl	80222dc <putchar>
		printf("__________ RCV MSG DETAILS __________\n");
 800993a:	481a      	ldr	r0, [pc, #104]	; (80099a4 <Medha_EI_Analyser+0x8bc>)
 800993c:	f018 fd52 	bl	80223e4 <puts>
		return;
 8009940:	e002      	b.n	8009948 <Medha_EI_Analyser+0x860>
	}
	else
	{
		return;
 8009942:	bf00      	nop
 8009944:	e000      	b.n	8009948 <Medha_EI_Analyser+0x860>
				return;
 8009946:	bf00      	nop
	}
}
 8009948:	f507 7738 	add.w	r7, r7, #736	; 0x2e0
 800994c:	46bd      	mov	sp, r7
 800994e:	bdb0      	pop	{r4, r5, r7, pc}
 8009950:	20002620 	.word	0x20002620
 8009954:	200024a4 	.word	0x200024a4
 8009958:	20002728 	.word	0x20002728
 800995c:	200025c8 	.word	0x200025c8
 8009960:	200025f8 	.word	0x200025f8
 8009964:	08025228 	.word	0x08025228
 8009968:	20002610 	.word	0x20002610
 800996c:	08025240 	.word	0x08025240
 8009970:	08025268 	.word	0x08025268
 8009974:	08025270 	.word	0x08025270
 8009978:	08025278 	.word	0x08025278
 800997c:	08025284 	.word	0x08025284
 8009980:	08025290 	.word	0x08025290
 8009984:	08025298 	.word	0x08025298
 8009988:	080252a0 	.word	0x080252a0
 800998c:	080252c4 	.word	0x080252c4
 8009990:	080252d0 	.word	0x080252d0
 8009994:	080252d8 	.word	0x080252d8
 8009998:	cccccccd 	.word	0xcccccccd
 800999c:	080252ec 	.word	0x080252ec
 80099a0:	08024f88 	.word	0x08024f88
 80099a4:	08025304 	.word	0x08025304

080099a8 <Send_Medha_EI_Reply>:

void Send_Medha_EI_Reply(uint16_t Outputs)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b0d2      	sub	sp, #328	; 0x148
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	4602      	mov	r2, r0
 80099b0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099b4:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 80099b8:	801a      	strh	r2, [r3, #0]
	uint8_t Transmit_Buff[300] = {0,};
 80099ba:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099be:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
 80099c6:	3304      	adds	r3, #4
 80099c8:	f44f 7294 	mov.w	r2, #296	; 0x128
 80099cc:	2100      	movs	r1, #0
 80099ce:	4618      	mov	r0, r3
 80099d0:	f018 fb84 	bl	80220dc <memset>
	uint32_t Cal_Crc =0;
 80099d4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099d8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80099dc:	2200      	movs	r2, #0
 80099de:	601a      	str	r2, [r3, #0]
	uint8_t Message_Length_Loc = 0;
 80099e0:	2300      	movs	r3, #0
 80099e2:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	uint16_t Message_Lengh = 0;
 80099e6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 80099ea:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 80099ee:	2200      	movs	r2, #0
 80099f0:	801a      	strh	r2, [r3, #0]
	BYTEINIT(0);
 80099f2:	2300      	movs	r3, #0
 80099f4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = SOM_MEDHA;
 80099f8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 80099fc:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009a00:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009a04:	2153      	movs	r1, #83	; 0x53
 8009a06:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009a08:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a0c:	3301      	adds	r3, #1
 8009a0e:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Source_Addr,2);
 8009a12:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a16:	f107 0214 	add.w	r2, r7, #20
 8009a1a:	4413      	add	r3, r2
 8009a1c:	4a88      	ldr	r2, [pc, #544]	; (8009c40 <Send_Medha_EI_Reply+0x298>)
 8009a1e:	8852      	ldrh	r2, [r2, #2]
 8009a20:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009a22:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a26:	3302      	adds	r3, #2
 8009a28:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Dest_Addr,2);
 8009a2c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a30:	f107 0214 	add.w	r2, r7, #20
 8009a34:	4413      	add	r3, r2
 8009a36:	4a82      	ldr	r2, [pc, #520]	; (8009c40 <Send_Medha_EI_Reply+0x298>)
 8009a38:	8892      	ldrh	r2, [r2, #4]
 8009a3a:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009a3c:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a40:	3302      	adds	r3, #2
 8009a42:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Channel_Type,1);
 8009a46:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a4a:	f107 0214 	add.w	r2, r7, #20
 8009a4e:	4413      	add	r3, r2
 8009a50:	4a7b      	ldr	r2, [pc, #492]	; (8009c40 <Send_Medha_EI_Reply+0x298>)
 8009a52:	7992      	ldrb	r2, [r2, #6]
 8009a54:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009a56:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a5a:	3301      	adds	r3, #1
 8009a5c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte] = CONTROL_BYTE_TX;
 8009a60:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a64:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009a68:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009a6c:	21e2      	movs	r1, #226	; 0xe2
 8009a6e:	54d1      	strb	r1, [r2, r3]
	BYTEINC(1);
 8009a70:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a74:	3301      	adds	r3, #1
 8009a76:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Message_Length_Loc = ucByte;
 8009a7a:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a7e:	f887 3145 	strb.w	r3, [r7, #325]	; 0x145
	Transmit_Buff[ucByte] = 0;
 8009a82:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a86:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009a8a:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009a8e:	2100      	movs	r1, #0
 8009a90:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte+1] = 0;
 8009a92:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009a96:	3301      	adds	r3, #1
 8009a98:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009a9c:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	54d1      	strb	r1, [r2, r3]
	/*	 Add Message Length at Last.*/
	BYTEINC(2);
 8009aa4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009aa8:	3302      	adds	r3, #2
 8009aaa:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Packet_Number,1);
 8009aae:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ab2:	f107 0214 	add.w	r2, r7, #20
 8009ab6:	4413      	add	r3, r2
 8009ab8:	4a61      	ldr	r2, [pc, #388]	; (8009c40 <Send_Medha_EI_Reply+0x298>)
 8009aba:	7a92      	ldrb	r2, [r2, #10]
 8009abc:	701a      	strb	r2, [r3, #0]
	BYTEINC(1);
 8009abe:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	/*	/////////////////////////////////////////////////////////////////*/
	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Reserved1,7);
 8009ac8:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009acc:	f107 0214 	add.w	r2, r7, #20
 8009ad0:	441a      	add	r2, r3
 8009ad2:	4b5b      	ldr	r3, [pc, #364]	; (8009c40 <Send_Medha_EI_Reply+0x298>)
 8009ad4:	330b      	adds	r3, #11
 8009ad6:	6819      	ldr	r1, [r3, #0]
 8009ad8:	6011      	str	r1, [r2, #0]
 8009ada:	8899      	ldrh	r1, [r3, #4]
 8009adc:	799b      	ldrb	r3, [r3, #6]
 8009ade:	8091      	strh	r1, [r2, #4]
 8009ae0:	7193      	strb	r3, [r2, #6]
	BYTEINC(7);
 8009ae2:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009ae6:	3307      	adds	r3, #7
 8009ae8:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	/*	/////////////////////////////////////////////////////////////////*/

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.NoofRelays,2);
 8009aec:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009af0:	f107 0214 	add.w	r2, r7, #20
 8009af4:	4413      	add	r3, r2
 8009af6:	4a52      	ldr	r2, [pc, #328]	; (8009c40 <Send_Medha_EI_Reply+0x298>)
 8009af8:	8a92      	ldrh	r2, [r2, #20]
 8009afa:	801a      	strh	r2, [r3, #0]
	BYTEINC(2);
 8009afc:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b00:	3302      	adds	r3, #2
 8009b02:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.RelayStatus,Outputs);
 8009b06:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b0a:	f107 0214 	add.w	r2, r7, #20
 8009b0e:	18d0      	adds	r0, r2, r3
 8009b10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b14:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009b18:	881b      	ldrh	r3, [r3, #0]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	4949      	ldr	r1, [pc, #292]	; (8009c44 <Send_Medha_EI_Reply+0x29c>)
 8009b1e:	f018 fab5 	bl	802208c <memcpy>
	BYTEINC(Outputs);
 8009b22:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b26:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009b2a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009b2e:	881b      	ldrh	r3, [r3, #0]
 8009b30:	4413      	add	r3, r2
 8009b32:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	memcpy(&Transmit_Buff[ucByte],&Medha_EI_Rx_Pkt_st.Comp_RelayStatus,Outputs);
 8009b36:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b3a:	f107 0214 	add.w	r2, r7, #20
 8009b3e:	18d0      	adds	r0, r2, r3
 8009b40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b44:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009b48:	881b      	ldrh	r3, [r3, #0]
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	493e      	ldr	r1, [pc, #248]	; (8009c48 <Send_Medha_EI_Reply+0x2a0>)
 8009b4e:	f018 fa9d 	bl	802208c <memcpy>
	BYTEINC(Outputs);
 8009b52:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009b56:	f5a3 73a1 	sub.w	r3, r3, #322	; 0x142
 8009b5a:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	4413      	add	r3, r2
 8009b62:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142

	Transmit_Buff[ucByte]=0;
 8009b66:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b6a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009b6e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009b72:	2100      	movs	r1, #0
 8009b74:	54d1      	strb	r1, [r2, r3]
	Transmit_Buff[ucByte]=0;
 8009b76:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b7a:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009b7e:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009b82:	2100      	movs	r1, #0
 8009b84:	54d1      	strb	r1, [r2, r3]
	BYTEINC(2); /*RESERVED2*/
 8009b86:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009b8a:	3302      	adds	r3, #2
 8009b8c:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
	 * "Message_Length_Loc" is Size before Message_length field excluding the Length 2 Bytes.
	 * To get Message Length we calculated like below.
	 *
	 * Message_Length = (     (current Packet Length+"CRC_SIZE") - (Message_Length_Location + "MSG_LEN_SIZE") )
	 */
	Message_Lengh = ( (ucByte+4)-(Message_Length_Loc+2));
 8009b90:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009b9a:	1ad3      	subs	r3, r2, r3
 8009b9c:	b29b      	uxth	r3, r3
 8009b9e:	3302      	adds	r3, #2
 8009ba0:	b29a      	uxth	r2, r3
 8009ba2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009ba6:	f5a3 739d 	sub.w	r3, r3, #314	; 0x13a
 8009baa:	801a      	strh	r2, [r3, #0]
	memcpy(&Transmit_Buff[Message_Length_Loc],&Message_Lengh,2);
 8009bac:	f897 3145 	ldrb.w	r3, [r7, #325]	; 0x145
 8009bb0:	f107 0214 	add.w	r2, r7, #20
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009bba:	f5a2 729d 	sub.w	r2, r2, #314	; 0x13a
 8009bbe:	8812      	ldrh	r2, [r2, #0]
 8009bc0:	801a      	strh	r2, [r3, #0]

	Cal_Crc = GetCRC32(0,Transmit_Buff,ucByte);
 8009bc2:	f8b7 2142 	ldrh.w	r2, [r7, #322]	; 0x142
 8009bc6:	f107 0314 	add.w	r3, r7, #20
 8009bca:	4619      	mov	r1, r3
 8009bcc:	2000      	movs	r0, #0
 8009bce:	f000 fdeb 	bl	800a7a8 <GetCRC32>
 8009bd2:	4602      	mov	r2, r0
 8009bd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8009bd8:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8009bdc:	601a      	str	r2, [r3, #0]
	memcpy(&Transmit_Buff[ucByte],&Cal_Crc,4);
 8009bde:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009be2:	f107 0214 	add.w	r2, r7, #20
 8009be6:	4413      	add	r3, r2
 8009be8:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009bec:	f5a2 729c 	sub.w	r2, r2, #312	; 0x138
 8009bf0:	6812      	ldr	r2, [r2, #0]
 8009bf2:	601a      	str	r2, [r3, #0]
	BYTEINC(4);
 8009bf4:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009bf8:	3304      	adds	r3, #4
 8009bfa:	f8a7 3142 	strh.w	r3, [r7, #322]	; 0x142
		printf("%02x ",Transmit_Buff[Traverser]);
	}
	printf("\n");
	 */

	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 8009bfe:	2300      	movs	r3, #0
 8009c00:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8009c04:	e011      	b.n	8009c2a <Send_Medha_EI_Reply+0x282>
	{
		Com_SendByte(EI_data.Medha_Prms_st.Comport, Transmit_Buff[Traverser]);
 8009c06:	4b11      	ldr	r3, [pc, #68]	; (8009c4c <Send_Medha_EI_Reply+0x2a4>)
 8009c08:	f893 0320 	ldrb.w	r0, [r3, #800]	; 0x320
 8009c0c:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8009c10:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 8009c14:	f5a2 729a 	sub.w	r2, r2, #308	; 0x134
 8009c18:	5cd3      	ldrb	r3, [r2, r3]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	f00b f8e4 	bl	8014de8 <Com_SendByte>
	for(uint16_t Traverser = 0;Traverser<ucByte;++Traverser)
 8009c20:	f8b7 3146 	ldrh.w	r3, [r7, #326]	; 0x146
 8009c24:	3301      	adds	r3, #1
 8009c26:	f8a7 3146 	strh.w	r3, [r7, #326]	; 0x146
 8009c2a:	f8b7 2146 	ldrh.w	r2, [r7, #326]	; 0x146
 8009c2e:	f8b7 3142 	ldrh.w	r3, [r7, #322]	; 0x142
 8009c32:	429a      	cmp	r2, r3
 8009c34:	d3e7      	bcc.n	8009c06 <Send_Medha_EI_Reply+0x25e>
	}
	return;
 8009c36:	bf00      	nop
}
 8009c38:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	200024a4 	.word	0x200024a4
 8009c44:	200024ba 	.word	0x200024ba
 8009c48:	2000253a 	.word	0x2000253a
 8009c4c:	20000304 	.word	0x20000304

08009c50 <Send_Relay_Statuses_2_MIE>:


void Send_Relay_Statuses_2_MIE(void)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Relay_sending_clk) >= EI_data.Medha_Prms_st.SendSignal2MIE_CLK)
 8009c56:	4b2a      	ldr	r3, [pc, #168]	; (8009d00 <Send_Relay_Statuses_2_MIE+0xb0>)
 8009c58:	689b      	ldr	r3, [r3, #8]
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f004 fdd0 	bl	800e800 <HAL_Elaps_Ticks>
 8009c60:	4602      	mov	r2, r0
 8009c62:	4b28      	ldr	r3, [pc, #160]	; (8009d04 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009c64:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d345      	bcc.n	8009cf8 <Send_Relay_Statuses_2_MIE+0xa8>
	{
		uint16_t NoOfInputs = 0;
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	80fb      	strh	r3, [r7, #6]
		(EI_data.Medha_Prms_st.NoofRelays%8)?(NoOfInputs=((EI_data.Medha_Prms_st.NoofRelays / 8)) + 1):(NoOfInputs = (EI_data.Medha_Prms_st.NoofRelays / 8));
 8009c70:	4b24      	ldr	r3, [pc, #144]	; (8009d04 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009c72:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009c76:	f003 0307 	and.w	r3, r3, #7
 8009c7a:	b29b      	uxth	r3, r3
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d007      	beq.n	8009c90 <Send_Relay_Statuses_2_MIE+0x40>
 8009c80:	4b20      	ldr	r3, [pc, #128]	; (8009d04 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009c82:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009c86:	08db      	lsrs	r3, r3, #3
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	3301      	adds	r3, #1
 8009c8c:	80fb      	strh	r3, [r7, #6]
 8009c8e:	e004      	b.n	8009c9a <Send_Relay_Statuses_2_MIE+0x4a>
 8009c90:	4b1c      	ldr	r3, [pc, #112]	; (8009d04 <Send_Relay_Statuses_2_MIE+0xb4>)
 8009c92:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 8009c96:	08db      	lsrs	r3, r3, #3
 8009c98:	80fb      	strh	r3, [r7, #6]

		Medha_Fault_Handler_st.Relay_sending_clk = HAL_GetTick();
 8009c9a:	f00b fafd 	bl	8015298 <HAL_GetTick>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	4a17      	ldr	r2, [pc, #92]	; (8009d00 <Send_Relay_Statuses_2_MIE+0xb0>)
 8009ca2:	6093      	str	r3, [r2, #8]
		printf("SendingRelaysToMIE:\n");
 8009ca4:	4818      	ldr	r0, [pc, #96]	; (8009d08 <Send_Relay_Statuses_2_MIE+0xb8>)
 8009ca6:	f018 fb9d 	bl	80223e4 <puts>
		//		for(uint32_t Traverser=0;Traverser<(sizeof(Medha_Relay_Sts_st));++Traverser)


		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 8009caa:	2300      	movs	r3, #0
 8009cac:	603b      	str	r3, [r7, #0]
 8009cae:	e01c      	b.n	8009cea <Send_Relay_Statuses_2_MIE+0x9a>

		{
			if( (Traverser!=0) && ( (Traverser%20)==0) )
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00e      	beq.n	8009cd4 <Send_Relay_Statuses_2_MIE+0x84>
 8009cb6:	6839      	ldr	r1, [r7, #0]
 8009cb8:	4b14      	ldr	r3, [pc, #80]	; (8009d0c <Send_Relay_Statuses_2_MIE+0xbc>)
 8009cba:	fba3 2301 	umull	r2, r3, r3, r1
 8009cbe:	091a      	lsrs	r2, r3, #4
 8009cc0:	4613      	mov	r3, r2
 8009cc2:	009b      	lsls	r3, r3, #2
 8009cc4:	4413      	add	r3, r2
 8009cc6:	009b      	lsls	r3, r3, #2
 8009cc8:	1aca      	subs	r2, r1, r3
 8009cca:	2a00      	cmp	r2, #0
 8009ccc:	d102      	bne.n	8009cd4 <Send_Relay_Statuses_2_MIE+0x84>
			{
				printf("\n");
 8009cce:	200a      	movs	r0, #10
 8009cd0:	f018 fb04 	bl	80222dc <putchar>
			}
			printf("%02X ",Medha_Relay_Sts_st.Relay_Sts[Traverser]);
 8009cd4:	4a0e      	ldr	r2, [pc, #56]	; (8009d10 <Send_Relay_Statuses_2_MIE+0xc0>)
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	4413      	add	r3, r2
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	4619      	mov	r1, r3
 8009cde:	480d      	ldr	r0, [pc, #52]	; (8009d14 <Send_Relay_Statuses_2_MIE+0xc4>)
 8009ce0:	f018 fae4 	bl	80222ac <iprintf>
		for(uint32_t Traverser=0;Traverser<(NoOfInputs);++Traverser)
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	3301      	adds	r3, #1
 8009ce8:	603b      	str	r3, [r7, #0]
 8009cea:	88fb      	ldrh	r3, [r7, #6]
 8009cec:	683a      	ldr	r2, [r7, #0]
 8009cee:	429a      	cmp	r2, r3
 8009cf0:	d3de      	bcc.n	8009cb0 <Send_Relay_Statuses_2_MIE+0x60>
		}
		printf("\n");
 8009cf2:	200a      	movs	r0, #10
 8009cf4:	f018 faf2 	bl	80222dc <putchar>

#ifdef EI_1
		TransmitCanPkt(EI_PROCESS_DATA);
#endif
	}
}
 8009cf8:	bf00      	nop
 8009cfa:	3708      	adds	r7, #8
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	bd80      	pop	{r7, pc}
 8009d00:	200025f8 	.word	0x200025f8
 8009d04:	20000304 	.word	0x20000304
 8009d08:	0802532c 	.word	0x0802532c
 8009d0c:	cccccccd 	.word	0xcccccccd
 8009d10:	200025c8 	.word	0x200025c8
 8009d14:	08024f88 	.word	0x08024f88

08009d18 <Process_Clear_Relays>:

void Process_Clear_Relays(void)
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b082      	sub	sp, #8
 8009d1c:	af00      	add	r7, sp, #0
	static uint32_t Last_Clear_clk = 0;
	uint32_t Last_Received_Elaps = (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk));
 8009d1e:	4b3d      	ldr	r3, [pc, #244]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009d20:	685b      	ldr	r3, [r3, #4]
 8009d22:	4618      	mov	r0, r3
 8009d24:	f004 fd6c 	bl	800e800 <HAL_Elaps_Ticks>
 8009d28:	6078      	str	r0, [r7, #4]
	uint32_t Timeout =  (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count);
 8009d2a:	4b3b      	ldr	r3, [pc, #236]	; (8009e18 <Process_Clear_Relays+0x100>)
 8009d2c:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8009d30:	4a39      	ldr	r2, [pc, #228]	; (8009e18 <Process_Clear_Relays+0x100>)
 8009d32:	f8b2 2326 	ldrh.w	r2, [r2, #806]	; 0x326
 8009d36:	fb02 f303 	mul.w	r3, r2, r3
 8009d3a:	603b      	str	r3, [r7, #0]


	if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 8009d3c:	4937      	ldr	r1, [pc, #220]	; (8009e1c <Process_Clear_Relays+0x104>)
 8009d3e:	4838      	ldr	r0, [pc, #224]	; (8009e20 <Process_Clear_Relays+0x108>)
 8009d40:	f7f6 fa7e 	bl	8000240 <strcmp>
 8009d44:	4603      	mov	r3, r0
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d05f      	beq.n	8009e0a <Process_Clear_Relays+0xf2>
	}




	if( ( (Last_Received_Elaps >= Timeout) && (Last_Clear_clk != Medha_Fault_Handler_st.Pkt_Rcv_clk) && (Medha_ei_self_sharing_RX_st.MisMatch_CNT > EI_data.Medha_Prms_st.Max_Mismatch_value) )
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d30c      	bcc.n	8009d6c <Process_Clear_Relays+0x54>
 8009d52:	4b30      	ldr	r3, [pc, #192]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009d54:	685a      	ldr	r2, [r3, #4]
 8009d56:	4b33      	ldr	r3, [pc, #204]	; (8009e24 <Process_Clear_Relays+0x10c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	429a      	cmp	r2, r3
 8009d5c:	d006      	beq.n	8009d6c <Process_Clear_Relays+0x54>
 8009d5e:	4b32      	ldr	r3, [pc, #200]	; (8009e28 <Process_Clear_Relays+0x110>)
 8009d60:	785a      	ldrb	r2, [r3, #1]
 8009d62:	4b2d      	ldr	r3, [pc, #180]	; (8009e18 <Process_Clear_Relays+0x100>)
 8009d64:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009d68:	429a      	cmp	r2, r3
 8009d6a:	d808      	bhi.n	8009d7e <Process_Clear_Relays+0x66>
			||((Medha_Fault_Handler_st.Clear_Relay_Statuses >= 1) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0))
 8009d6c:	4b29      	ldr	r3, [pc, #164]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009d6e:	781b      	ldrb	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d04b      	beq.n	8009e0c <Process_Clear_Relays+0xf4>
 8009d74:	4b2d      	ldr	r3, [pc, #180]	; (8009e2c <Process_Clear_Relays+0x114>)
 8009d76:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d046      	beq.n	8009e0c <Process_Clear_Relays+0xf4>
	)
	{


		printf("Medha_Fault_Handler_st.Clear_Relay_Statuses:%u\n",Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009d7e:	4b25      	ldr	r3, [pc, #148]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	4619      	mov	r1, r3
 8009d84:	482a      	ldr	r0, [pc, #168]	; (8009e30 <Process_Clear_Relays+0x118>)
 8009d86:	f018 fa91 	bl	80222ac <iprintf>

		if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 8009d8a:	4b22      	ldr	r3, [pc, #136]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009d8c:	781b      	ldrb	r3, [r3, #0]
 8009d8e:	f003 0301 	and.w	r3, r3, #1
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d006      	beq.n	8009da4 <Process_Clear_Relays+0x8c>
		{
			CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009d96:	4b1f      	ldr	r3, [pc, #124]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	f023 0301 	bic.w	r3, r3, #1
 8009d9e:	b2da      	uxtb	r2, r3
 8009da0:	4b1c      	ldr	r3, [pc, #112]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009da2:	701a      	strb	r2, [r3, #0]
		}
		if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == SET)
 8009da4:	4b1b      	ldr	r3, [pc, #108]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	f003 0302 	and.w	r3, r3, #2
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d006      	beq.n	8009dbe <Process_Clear_Relays+0xa6>
		{
			CLEAR_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 8009db0:	4b18      	ldr	r3, [pc, #96]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009db2:	781b      	ldrb	r3, [r3, #0]
 8009db4:	f023 0302 	bic.w	r3, r3, #2
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	4b16      	ldr	r3, [pc, #88]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009dbc:	701a      	strb	r2, [r3, #0]
		}
		memset(&Medha_Cur_Relay_Status_st,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009dbe:	2284      	movs	r2, #132	; 0x84
 8009dc0:	2100      	movs	r1, #0
 8009dc2:	481a      	ldr	r0, [pc, #104]	; (8009e2c <Process_Clear_Relays+0x114>)
 8009dc4:	f018 f98a 	bl	80220dc <memset>
		memset(&Medha_Relay_Sts_st,0,sizeof(MEDHA_RELAY_STS_t));
 8009dc8:	2230      	movs	r2, #48	; 0x30
 8009dca:	2100      	movs	r1, #0
 8009dcc:	4819      	ldr	r0, [pc, #100]	; (8009e34 <Process_Clear_Relays+0x11c>)
 8009dce:	f018 f985 	bl	80220dc <memset>
		memset(&Medha_Temp_relay_sts_t,0,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009dd2:	2284      	movs	r2, #132	; 0x84
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	4818      	ldr	r0, [pc, #96]	; (8009e38 <Process_Clear_Relays+0x120>)
 8009dd8:	f018 f980 	bl	80220dc <memset>
		memset(&Medha_ei_self_sharing_TX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009ddc:	2208      	movs	r2, #8
 8009dde:	2100      	movs	r1, #0
 8009de0:	4816      	ldr	r0, [pc, #88]	; (8009e3c <Process_Clear_Relays+0x124>)
 8009de2:	f018 f97b 	bl	80220dc <memset>
		memset(&Medha_ei_self_sharing_RX_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009de6:	2208      	movs	r2, #8
 8009de8:	2100      	movs	r1, #0
 8009dea:	480f      	ldr	r0, [pc, #60]	; (8009e28 <Process_Clear_Relays+0x110>)
 8009dec:	f018 f976 	bl	80220dc <memset>
		memset(&Medha_ei_self_sharing_Temp_st,0,sizeof(MEDHA_EI_SELF_SHARING_t));
 8009df0:	2208      	movs	r2, #8
 8009df2:	2100      	movs	r1, #0
 8009df4:	4812      	ldr	r0, [pc, #72]	; (8009e40 <Process_Clear_Relays+0x128>)
 8009df6:	f018 f971 	bl	80220dc <memset>
		printf("Cleared Relay Statuses\n");
 8009dfa:	4812      	ldr	r0, [pc, #72]	; (8009e44 <Process_Clear_Relays+0x12c>)
 8009dfc:	f018 faf2 	bl	80223e4 <puts>
		Last_Clear_clk =Medha_Fault_Handler_st.Pkt_Rcv_clk;
 8009e00:	4b04      	ldr	r3, [pc, #16]	; (8009e14 <Process_Clear_Relays+0xfc>)
 8009e02:	685b      	ldr	r3, [r3, #4]
 8009e04:	4a07      	ldr	r2, [pc, #28]	; (8009e24 <Process_Clear_Relays+0x10c>)
 8009e06:	6013      	str	r3, [r2, #0]
 8009e08:	e000      	b.n	8009e0c <Process_Clear_Relays+0xf4>
		return;
 8009e0a:	bf00      	nop
	}
}
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	200025f8 	.word	0x200025f8
 8009e18:	20000304 	.word	0x20000304
 8009e1c:	08025158 	.word	0x08025158
 8009e20:	20000305 	.word	0x20000305
 8009e24:	200027b8 	.word	0x200027b8
 8009e28:	20002610 	.word	0x20002610
 8009e2c:	20002620 	.word	0x20002620
 8009e30:	08025340 	.word	0x08025340
 8009e34:	200025c8 	.word	0x200025c8
 8009e38:	20002728 	.word	0x20002728
 8009e3c:	20002608 	.word	0x20002608
 8009e40:	20002618 	.word	0x20002618
 8009e44:	08025370 	.word	0x08025370

08009e48 <Send_Data_to_Other>:


void Send_Data_to_Other(void)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	af00      	add	r7, sp, #0
	}
#else



	if(HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) >= (EI_data.Medha_Prms_st.Packet_Interval_ms * EI_data.Medha_Prms_st.Packet_Timeout_Count ) )
 8009e4c:	4b26      	ldr	r3, [pc, #152]	; (8009ee8 <Send_Data_to_Other+0xa0>)
 8009e4e:	685b      	ldr	r3, [r3, #4]
 8009e50:	4618      	mov	r0, r3
 8009e52:	f004 fcd5 	bl	800e800 <HAL_Elaps_Ticks>
 8009e56:	4602      	mov	r2, r0
 8009e58:	4b24      	ldr	r3, [pc, #144]	; (8009eec <Send_Data_to_Other+0xa4>)
 8009e5a:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 8009e5e:	4923      	ldr	r1, [pc, #140]	; (8009eec <Send_Data_to_Other+0xa4>)
 8009e60:	f8b1 1326 	ldrh.w	r1, [r1, #806]	; 0x326
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	429a      	cmp	r2, r3
 8009e6a:	d306      	bcc.n	8009e7a <Send_Data_to_Other+0x32>
	{
		if(Medha_ei_self_sharing_TX_st.Receiving_Status != NOT_RECEIVED)
 8009e6c:	4b20      	ldr	r3, [pc, #128]	; (8009ef0 <Send_Data_to_Other+0xa8>)
 8009e6e:	781b      	ldrb	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d002      	beq.n	8009e7a <Send_Data_to_Other+0x32>
		{
			Medha_ei_self_sharing_TX_st.Receiving_Status = NOT_RECEIVED;
 8009e74:	4b1e      	ldr	r3, [pc, #120]	; (8009ef0 <Send_Data_to_Other+0xa8>)
 8009e76:	2200      	movs	r2, #0
 8009e78:	701a      	strb	r2, [r3, #0]
		}
	}


	if( (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > EI_data.Medha_Prms_st.CAN_Xchange_Time) && (Send_Sharing_CLK1 != Medha_Fault_Handler_st.Pkt_Rcv_clk) )
 8009e7a:	4b1b      	ldr	r3, [pc, #108]	; (8009ee8 <Send_Data_to_Other+0xa0>)
 8009e7c:	685b      	ldr	r3, [r3, #4]
 8009e7e:	4618      	mov	r0, r3
 8009e80:	f004 fcbe 	bl	800e800 <HAL_Elaps_Ticks>
 8009e84:	4602      	mov	r2, r0
 8009e86:	4b19      	ldr	r3, [pc, #100]	; (8009eec <Send_Data_to_Other+0xa4>)
 8009e88:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 8009e8c:	429a      	cmp	r2, r3
 8009e8e:	d90e      	bls.n	8009eae <Send_Data_to_Other+0x66>
 8009e90:	4b15      	ldr	r3, [pc, #84]	; (8009ee8 <Send_Data_to_Other+0xa0>)
 8009e92:	685a      	ldr	r2, [r3, #4]
 8009e94:	4b17      	ldr	r3, [pc, #92]	; (8009ef4 <Send_Data_to_Other+0xac>)
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	429a      	cmp	r2, r3
 8009e9a:	d008      	beq.n	8009eae <Send_Data_to_Other+0x66>
	{
		Send_Sharing_CLK1 = Medha_Fault_Handler_st.Pkt_Rcv_clk;
 8009e9c:	4b12      	ldr	r3, [pc, #72]	; (8009ee8 <Send_Data_to_Other+0xa0>)
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	4a14      	ldr	r2, [pc, #80]	; (8009ef4 <Send_Data_to_Other+0xac>)
 8009ea2:	6013      	str	r3, [r2, #0]
#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 8009ea4:	f240 2002 	movw	r0, #514	; 0x202
 8009ea8:	f005 fa20 	bl	800f2ec <TransmitCanPkt>
		TransmitCanPkt(EI_2_SELF_SHARING);
#endif

	}
#endif
}
 8009eac:	e01a      	b.n	8009ee4 <Send_Data_to_Other+0x9c>
	else if(  (HAL_Elaps_Ticks(Send_Sharing_CLK2) > ONE_SEC)  && (HAL_Elaps_Ticks(Medha_Fault_Handler_st.Pkt_Rcv_clk) > TWO_SEC ))
 8009eae:	4b12      	ldr	r3, [pc, #72]	; (8009ef8 <Send_Data_to_Other+0xb0>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f004 fca4 	bl	800e800 <HAL_Elaps_Ticks>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009ebe:	d911      	bls.n	8009ee4 <Send_Data_to_Other+0x9c>
 8009ec0:	4b09      	ldr	r3, [pc, #36]	; (8009ee8 <Send_Data_to_Other+0xa0>)
 8009ec2:	685b      	ldr	r3, [r3, #4]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f004 fc9b 	bl	800e800 <HAL_Elaps_Ticks>
 8009eca:	4603      	mov	r3, r0
 8009ecc:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8009ed0:	d908      	bls.n	8009ee4 <Send_Data_to_Other+0x9c>
		Send_Sharing_CLK2 = HAL_GetTick();
 8009ed2:	f00b f9e1 	bl	8015298 <HAL_GetTick>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	4a07      	ldr	r2, [pc, #28]	; (8009ef8 <Send_Data_to_Other+0xb0>)
 8009eda:	6013      	str	r3, [r2, #0]
		TransmitCanPkt(EI_2_SELF_SHARING);
 8009edc:	f240 2002 	movw	r0, #514	; 0x202
 8009ee0:	f005 fa04 	bl	800f2ec <TransmitCanPkt>
}
 8009ee4:	bf00      	nop
 8009ee6:	bd80      	pop	{r7, pc}
 8009ee8:	200025f8 	.word	0x200025f8
 8009eec:	20000304 	.word	0x20000304
 8009ef0:	20002608 	.word	0x20002608
 8009ef4:	200027bc 	.word	0x200027bc
 8009ef8:	200027c0 	.word	0x200027c0

08009efc <Process_Data_from_Other>:

void Process_Data_from_Other(void)
{
 8009efc:	b5b0      	push	{r4, r5, r7, lr}
 8009efe:	af00      	add	r7, sp, #0
	static uint32_t Prev_Receive_CLK = 0;
	//static uint8_t MisMatch_CNT = 0;
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;


	if( (Prev_Receive_CLK != Last_Received_Medha_Self_sharing) || ( (HAL_Elaps_Ticks(Prev_Receive_CLK)) >= ONE_SEC) )
 8009f00:	4b95      	ldr	r3, [pc, #596]	; (800a158 <Process_Data_from_Other+0x25c>)
 8009f02:	681a      	ldr	r2, [r3, #0]
 8009f04:	4b95      	ldr	r3, [pc, #596]	; (800a15c <Process_Data_from_Other+0x260>)
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	429a      	cmp	r2, r3
 8009f0a:	d109      	bne.n	8009f20 <Process_Data_from_Other+0x24>
 8009f0c:	4b92      	ldr	r3, [pc, #584]	; (800a158 <Process_Data_from_Other+0x25c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4618      	mov	r0, r3
 8009f12:	f004 fc75 	bl	800e800 <HAL_Elaps_Ticks>
 8009f16:	4603      	mov	r3, r0
 8009f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f1c:	f0c0 80e4 	bcc.w	800a0e8 <Process_Data_from_Other+0x1ec>
	{
		Prev_Receive_CLK = HAL_GetTick();
 8009f20:	f00b f9ba 	bl	8015298 <HAL_GetTick>
 8009f24:	4603      	mov	r3, r0
 8009f26:	4a8c      	ldr	r2, [pc, #560]	; (800a158 <Process_Data_from_Other+0x25c>)
 8009f28:	6013      	str	r3, [r2, #0]
		if(Medha_ei_self_sharing_TX_st.Receiving_Status)
 8009f2a:	4b8d      	ldr	r3, [pc, #564]	; (800a160 <Process_Data_from_Other+0x264>)
 8009f2c:	781b      	ldrb	r3, [r3, #0]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d007      	beq.n	8009f42 <Process_Data_from_Other+0x46>
		{
			SET_BIT_USER(0,EIPC_1_2_STATUS);
 8009f32:	4b8c      	ldr	r3, [pc, #560]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f34:	781b      	ldrb	r3, [r3, #0]
 8009f36:	f043 0301 	orr.w	r3, r3, #1
 8009f3a:	b2da      	uxtb	r2, r3
 8009f3c:	4b89      	ldr	r3, [pc, #548]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f3e:	701a      	strb	r2, [r3, #0]
 8009f40:	e006      	b.n	8009f50 <Process_Data_from_Other+0x54>
		}
		else
		{
			CLEAR_BIT_USER(0,EIPC_1_2_STATUS);
 8009f42:	4b88      	ldr	r3, [pc, #544]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f44:	781b      	ldrb	r3, [r3, #0]
 8009f46:	f023 0301 	bic.w	r3, r3, #1
 8009f4a:	b2da      	uxtb	r2, r3
 8009f4c:	4b85      	ldr	r3, [pc, #532]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f4e:	701a      	strb	r2, [r3, #0]
		}
		if(Medha_ei_self_sharing_RX_st.Receiving_Status)
 8009f50:	4b85      	ldr	r3, [pc, #532]	; (800a168 <Process_Data_from_Other+0x26c>)
 8009f52:	781b      	ldrb	r3, [r3, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d007      	beq.n	8009f68 <Process_Data_from_Other+0x6c>
		{
			SET_BIT_USER(1,EIPC_1_2_STATUS);
 8009f58:	4b82      	ldr	r3, [pc, #520]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f5a:	781b      	ldrb	r3, [r3, #0]
 8009f5c:	f043 0302 	orr.w	r3, r3, #2
 8009f60:	b2da      	uxtb	r2, r3
 8009f62:	4b80      	ldr	r3, [pc, #512]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f64:	701a      	strb	r2, [r3, #0]
 8009f66:	e006      	b.n	8009f76 <Process_Data_from_Other+0x7a>
		}
		else
		{
			CLEAR_BIT_USER(1,EIPC_1_2_STATUS);
 8009f68:	4b7e      	ldr	r3, [pc, #504]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f6a:	781b      	ldrb	r3, [r3, #0]
 8009f6c:	f023 0302 	bic.w	r3, r3, #2
 8009f70:	b2da      	uxtb	r2, r3
 8009f72:	4b7c      	ldr	r3, [pc, #496]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f74:	701a      	strb	r2, [r3, #0]
		}

		switch(EIPC_1_2_STATUS)
 8009f76:	4b7b      	ldr	r3, [pc, #492]	; (800a164 <Process_Data_from_Other+0x268>)
 8009f78:	781b      	ldrb	r3, [r3, #0]
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	f200 809a 	bhi.w	800a0b4 <Process_Data_from_Other+0x1b8>
 8009f80:	a201      	add	r2, pc, #4	; (adr r2, 8009f88 <Process_Data_from_Other+0x8c>)
 8009f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f86:	bf00      	nop
 8009f88:	08009f99 	.word	0x08009f99
 8009f8c:	0800a029 	.word	0x0800a029
 8009f90:	08009fa7 	.word	0x08009fa7
 8009f94:	0800a079 	.word	0x0800a079
		{
		case SELF_NRCV_OTHER_NRCV:
			Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 8009f98:	4b71      	ldr	r3, [pc, #452]	; (800a160 <Process_Data_from_Other+0x264>)
 8009f9a:	785b      	ldrb	r3, [r3, #1]
 8009f9c:	3301      	adds	r3, #1
 8009f9e:	b2da      	uxtb	r2, r3
 8009fa0:	4b6f      	ldr	r3, [pc, #444]	; (800a160 <Process_Data_from_Other+0x264>)
 8009fa2:	705a      	strb	r2, [r3, #1]
			break;
 8009fa4:	e086      	b.n	800a0b4 <Process_Data_from_Other+0x1b8>

		case SELF_NRCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 8009fa6:	4b70      	ldr	r3, [pc, #448]	; (800a168 <Process_Data_from_Other+0x26c>)
 8009fa8:	685a      	ldr	r2, [r3, #4]
 8009faa:	4b6d      	ldr	r3, [pc, #436]	; (800a160 <Process_Data_from_Other+0x264>)
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	429a      	cmp	r2, r3
 8009fb0:	d02f      	beq.n	800a012 <Process_Data_from_Other+0x116>
			{
				if( (Received_CAN_Relay_Status == YES) )
 8009fb2:	4b6e      	ldr	r3, [pc, #440]	; (800a16c <Process_Data_from_Other+0x270>)
 8009fb4:	781b      	ldrb	r3, [r3, #0]
 8009fb6:	2b01      	cmp	r3, #1
 8009fb8:	d179      	bne.n	800a0ae <Process_Data_from_Other+0x1b2>
				{

					printf("Self_Vital_CRC :%08lx\n",Medha_ei_self_sharing_TX_st.Vital_CRC);
 8009fba:	4b69      	ldr	r3, [pc, #420]	; (800a160 <Process_Data_from_Other+0x264>)
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	4619      	mov	r1, r3
 8009fc0:	486b      	ldr	r0, [pc, #428]	; (800a170 <Process_Data_from_Other+0x274>)
 8009fc2:	f018 f973 	bl	80222ac <iprintf>
					printf("Other_Vital_CRC:%08lx\n",Medha_ei_self_sharing_RX_st.Vital_CRC);
 8009fc6:	4b68      	ldr	r3, [pc, #416]	; (800a168 <Process_Data_from_Other+0x26c>)
 8009fc8:	685b      	ldr	r3, [r3, #4]
 8009fca:	4619      	mov	r1, r3
 8009fcc:	4869      	ldr	r0, [pc, #420]	; (800a174 <Process_Data_from_Other+0x278>)
 8009fce:	f018 f96d 	bl	80222ac <iprintf>
					Received_CAN_Relay_Status=NO;
 8009fd2:	4b66      	ldr	r3, [pc, #408]	; (800a16c <Process_Data_from_Other+0x270>)
 8009fd4:	2200      	movs	r2, #0
 8009fd6:	701a      	strb	r2, [r3, #0]
					printf("Copies Relays status and VITAL CRC from Other Card\n");
 8009fd8:	4867      	ldr	r0, [pc, #412]	; (800a178 <Process_Data_from_Other+0x27c>)
 8009fda:	f018 fa03 	bl	80223e4 <puts>
					memcpy(&Medha_Cur_Relay_Status_st,&Medha_CAN_Relay_Status_st,sizeof(MEDHA_CUR_RELAY_STS_t));
 8009fde:	4a67      	ldr	r2, [pc, #412]	; (800a17c <Process_Data_from_Other+0x280>)
 8009fe0:	4b67      	ldr	r3, [pc, #412]	; (800a180 <Process_Data_from_Other+0x284>)
 8009fe2:	4610      	mov	r0, r2
 8009fe4:	4619      	mov	r1, r3
 8009fe6:	2384      	movs	r3, #132	; 0x84
 8009fe8:	461a      	mov	r2, r3
 8009fea:	f018 f84f 	bl	802208c <memcpy>
					memcpy(&Medha_Relay_Sts_st,&Medha_Cur_Relay_Status_st,sizeof(Medha_Relay_Sts_st));
 8009fee:	4a65      	ldr	r2, [pc, #404]	; (800a184 <Process_Data_from_Other+0x288>)
 8009ff0:	4b62      	ldr	r3, [pc, #392]	; (800a17c <Process_Data_from_Other+0x280>)
 8009ff2:	4614      	mov	r4, r2
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ffa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009ffc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009ffe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800a002:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
					Medha_ei_self_sharing_TX_st.Vital_CRC = Medha_Cur_Relay_Status_st.Vital_CRC;
 800a006:	4b5d      	ldr	r3, [pc, #372]	; (800a17c <Process_Data_from_Other+0x280>)
 800a008:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a00c:	4a54      	ldr	r2, [pc, #336]	; (800a160 <Process_Data_from_Other+0x264>)
 800a00e:	6053      	str	r3, [r2, #4]
			{
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 1\n");
			}
			break;
 800a010:	e04d      	b.n	800a0ae <Process_Data_from_Other+0x1b2>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a012:	4b53      	ldr	r3, [pc, #332]	; (800a160 <Process_Data_from_Other+0x264>)
 800a014:	2200      	movs	r2, #0
 800a016:	705a      	strb	r2, [r3, #1]
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a018:	4b5b      	ldr	r3, [pc, #364]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a01a:	781b      	ldrb	r3, [r3, #0]
 800a01c:	f023 0301 	bic.w	r3, r3, #1
 800a020:	b2da      	uxtb	r2, r3
 800a022:	4b59      	ldr	r3, [pc, #356]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a024:	701a      	strb	r2, [r3, #0]
			break;
 800a026:	e042      	b.n	800a0ae <Process_Data_from_Other+0x1b2>

		case SELF_RCV_OTHER_NRCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a028:	4b4f      	ldr	r3, [pc, #316]	; (800a168 <Process_Data_from_Other+0x26c>)
 800a02a:	685a      	ldr	r2, [r3, #4]
 800a02c:	4b4c      	ldr	r3, [pc, #304]	; (800a160 <Process_Data_from_Other+0x264>)
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	429a      	cmp	r2, r3
 800a032:	d016      	beq.n	800a062 <Process_Data_from_Other+0x166>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a034:	4855      	ldr	r0, [pc, #340]	; (800a18c <Process_Data_from_Other+0x290>)
 800a036:	f018 f9d5 	bl	80223e4 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a03a:	4b49      	ldr	r3, [pc, #292]	; (800a160 <Process_Data_from_Other+0x264>)
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	3301      	adds	r3, #1
 800a040:	b2da      	uxtb	r2, r3
 800a042:	4b47      	ldr	r3, [pc, #284]	; (800a160 <Process_Data_from_Other+0x264>)
 800a044:	705a      	strb	r2, [r3, #1]

				if( (Medha_ei_self_sharing_TX_st.MisMatch_CNT > 2) && (Medha_Cur_Relay_Status_st.Vital_CRC != 0) )
 800a046:	4b46      	ldr	r3, [pc, #280]	; (800a160 <Process_Data_from_Other+0x264>)
 800a048:	785b      	ldrb	r3, [r3, #1]
 800a04a:	2b02      	cmp	r3, #2
 800a04c:	d931      	bls.n	800a0b2 <Process_Data_from_Other+0x1b6>
 800a04e:	4b4b      	ldr	r3, [pc, #300]	; (800a17c <Process_Data_from_Other+0x280>)
 800a050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a054:	2b00      	cmp	r3, #0
 800a056:	d02c      	beq.n	800a0b2 <Process_Data_from_Other+0x1b6>
				{
#ifdef EI_1
					TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
					TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800a058:	f44f 7002 	mov.w	r0, #520	; 0x208
 800a05c:	f005 f946 	bl	800f2ec <TransmitCanPkt>
			{
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				//printf("\nCLEAR 2\n");
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a060:	e027      	b.n	800a0b2 <Process_Data_from_Other+0x1b6>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a062:	4b49      	ldr	r3, [pc, #292]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a064:	781b      	ldrb	r3, [r3, #0]
 800a066:	f023 0301 	bic.w	r3, r3, #1
 800a06a:	b2da      	uxtb	r2, r3
 800a06c:	4b46      	ldr	r3, [pc, #280]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a06e:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a070:	4b3b      	ldr	r3, [pc, #236]	; (800a160 <Process_Data_from_Other+0x264>)
 800a072:	2200      	movs	r2, #0
 800a074:	705a      	strb	r2, [r3, #1]
			break;
 800a076:	e01c      	b.n	800a0b2 <Process_Data_from_Other+0x1b6>

		case SELF_RCV_OTHER_RCV:
			if(Medha_ei_self_sharing_RX_st.Vital_CRC != Medha_ei_self_sharing_TX_st.Vital_CRC)
 800a078:	4b3b      	ldr	r3, [pc, #236]	; (800a168 <Process_Data_from_Other+0x26c>)
 800a07a:	685a      	ldr	r2, [r3, #4]
 800a07c:	4b38      	ldr	r3, [pc, #224]	; (800a160 <Process_Data_from_Other+0x264>)
 800a07e:	685b      	ldr	r3, [r3, #4]
 800a080:	429a      	cmp	r2, r3
 800a082:	d009      	beq.n	800a098 <Process_Data_from_Other+0x19c>
			{
				printf("Self & Other Vital CRC Not Matching\n");
 800a084:	4841      	ldr	r0, [pc, #260]	; (800a18c <Process_Data_from_Other+0x290>)
 800a086:	f018 f9ad 	bl	80223e4 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT++;
 800a08a:	4b35      	ldr	r3, [pc, #212]	; (800a160 <Process_Data_from_Other+0x264>)
 800a08c:	785b      	ldrb	r3, [r3, #1]
 800a08e:	3301      	adds	r3, #1
 800a090:	b2da      	uxtb	r2, r3
 800a092:	4b33      	ldr	r3, [pc, #204]	; (800a160 <Process_Data_from_Other+0x264>)
 800a094:	705a      	strb	r2, [r3, #1]
			{
				//printf("\nCLEAR 3\n");
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
			}
			break;
 800a096:	e00d      	b.n	800a0b4 <Process_Data_from_Other+0x1b8>
				CLEAR_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a098:	4b3b      	ldr	r3, [pc, #236]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a09a:	781b      	ldrb	r3, [r3, #0]
 800a09c:	f023 0301 	bic.w	r3, r3, #1
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	4b39      	ldr	r3, [pc, #228]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a0a4:	701a      	strb	r2, [r3, #0]
				Medha_ei_self_sharing_TX_st.MisMatch_CNT=0;
 800a0a6:	4b2e      	ldr	r3, [pc, #184]	; (800a160 <Process_Data_from_Other+0x264>)
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	705a      	strb	r2, [r3, #1]
			break;
 800a0ac:	e002      	b.n	800a0b4 <Process_Data_from_Other+0x1b8>
			break;
 800a0ae:	bf00      	nop
 800a0b0:	e000      	b.n	800a0b4 <Process_Data_from_Other+0x1b8>
			break;
 800a0b2:	bf00      	nop
		}

		if(Medha_ei_self_sharing_TX_st.MisMatch_CNT >= EI_data.Medha_Prms_st.Max_Mismatch_value)
 800a0b4:	4b2a      	ldr	r3, [pc, #168]	; (800a160 <Process_Data_from_Other+0x264>)
 800a0b6:	785a      	ldrb	r2, [r3, #1]
 800a0b8:	4b35      	ldr	r3, [pc, #212]	; (800a190 <Process_Data_from_Other+0x294>)
 800a0ba:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a0be:	429a      	cmp	r2, r3
 800a0c0:	d312      	bcc.n	800a0e8 <Process_Data_from_Other+0x1ec>
		{
			if(CHECKFLAG(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a0c2:	4b31      	ldr	r3, [pc, #196]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a0c4:	781b      	ldrb	r3, [r3, #0]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10c      	bne.n	800a0e8 <Process_Data_from_Other+0x1ec>
			{
				printf("MisMatch Count Reached\n");
 800a0ce:	4831      	ldr	r0, [pc, #196]	; (800a194 <Process_Data_from_Other+0x298>)
 800a0d0:	f018 f988 	bl	80223e4 <puts>
				Medha_ei_self_sharing_TX_st.MisMatch_CNT = 0;
 800a0d4:	4b22      	ldr	r3, [pc, #136]	; (800a160 <Process_Data_from_Other+0x264>)
 800a0d6:	2200      	movs	r2, #0
 800a0d8:	705a      	strb	r2, [r3, #1]
				SET_BIT_USER(MISMATCH_CNT_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a0da:	4b2b      	ldr	r3, [pc, #172]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	f043 0301 	orr.w	r3, r3, #1
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	4b28      	ldr	r3, [pc, #160]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a0e6:	701a      	strb	r2, [r3, #0]
		//		{
		//			//printf("\nMisMatch_CNT:%u\n",Medha_ei_self_sharing_TX_st.MisMatch_CNT);
		//		}
	}

	if(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing) > EI_data.Medha_Prms_st.CAN_Xchange_Tout)
 800a0e8:	4b1c      	ldr	r3, [pc, #112]	; (800a15c <Process_Data_from_Other+0x260>)
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	f004 fb87 	bl	800e800 <HAL_Elaps_Ticks>
 800a0f2:	4602      	mov	r2, r0
 800a0f4:	4b26      	ldr	r3, [pc, #152]	; (800a190 <Process_Data_from_Other+0x294>)
 800a0f6:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a0fa:	429a      	cmp	r2, r3
 800a0fc:	d92a      	bls.n	800a154 <Process_Data_from_Other+0x258>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != Last_Received_Medha_Self_sharing)
 800a0fe:	4b26      	ldr	r3, [pc, #152]	; (800a198 <Process_Data_from_Other+0x29c>)
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	4b16      	ldr	r3, [pc, #88]	; (800a15c <Process_Data_from_Other+0x260>)
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	429a      	cmp	r2, r3
 800a108:	d024      	beq.n	800a154 <Process_Data_from_Other+0x258>
		{
			Previous_Clock_RCV_SELF_XCHG_CLK = Last_Received_Medha_Self_sharing;
 800a10a:	4b14      	ldr	r3, [pc, #80]	; (800a15c <Process_Data_from_Other+0x260>)
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	4a22      	ldr	r2, [pc, #136]	; (800a198 <Process_Data_from_Other+0x29c>)
 800a110:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(Last_Received_Medha_Self_sharing)/1000));
 800a112:	4b12      	ldr	r3, [pc, #72]	; (800a15c <Process_Data_from_Other+0x260>)
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	4618      	mov	r0, r3
 800a118:	f004 fb72 	bl	800e800 <HAL_Elaps_Ticks>
 800a11c:	4603      	mov	r3, r0
 800a11e:	4a1f      	ldr	r2, [pc, #124]	; (800a19c <Process_Data_from_Other+0x2a0>)
 800a120:	fba2 2303 	umull	r2, r3, r2, r3
 800a124:	099b      	lsrs	r3, r3, #6
 800a126:	4619      	mov	r1, r3
 800a128:	481d      	ldr	r0, [pc, #116]	; (800a1a0 <Process_Data_from_Other+0x2a4>)
 800a12a:	f018 f8bf 	bl	80222ac <iprintf>
			printf("Last_Received_Medha_Self_sharing:%lu\n",Last_Received_Medha_Self_sharing);
 800a12e:	4b0b      	ldr	r3, [pc, #44]	; (800a15c <Process_Data_from_Other+0x260>)
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4619      	mov	r1, r3
 800a134:	481b      	ldr	r0, [pc, #108]	; (800a1a4 <Process_Data_from_Other+0x2a8>)
 800a136:	f018 f8b9 	bl	80222ac <iprintf>
			if(CHECKFLAG(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses) == CLEAR)
 800a13a:	4b13      	ldr	r3, [pc, #76]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a13c:	781b      	ldrb	r3, [r3, #0]
 800a13e:	f003 0302 	and.w	r3, r3, #2
 800a142:	2b00      	cmp	r3, #0
 800a144:	d106      	bne.n	800a154 <Process_Data_from_Other+0x258>
			{
				SET_BIT_USER(CAN_EXCHANGE_FAIL,Medha_Fault_Handler_st.Clear_Relay_Statuses);
 800a146:	4b10      	ldr	r3, [pc, #64]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a148:	781b      	ldrb	r3, [r3, #0]
 800a14a:	f043 0302 	orr.w	r3, r3, #2
 800a14e:	b2da      	uxtb	r2, r3
 800a150:	4b0d      	ldr	r3, [pc, #52]	; (800a188 <Process_Data_from_Other+0x28c>)
 800a152:	701a      	strb	r2, [r3, #0]
			}
		}
	}
}
 800a154:	bf00      	nop
 800a156:	bdb0      	pop	{r4, r5, r7, pc}
 800a158:	200027c4 	.word	0x200027c4
 800a15c:	200020b4 	.word	0x200020b4
 800a160:	20002608 	.word	0x20002608
 800a164:	200020b2 	.word	0x200020b2
 800a168:	20002610 	.word	0x20002610
 800a16c:	200020b1 	.word	0x200020b1
 800a170:	08025388 	.word	0x08025388
 800a174:	080253a0 	.word	0x080253a0
 800a178:	080253b8 	.word	0x080253b8
 800a17c:	20002620 	.word	0x20002620
 800a180:	200026a4 	.word	0x200026a4
 800a184:	200025c8 	.word	0x200025c8
 800a188:	200025f8 	.word	0x200025f8
 800a18c:	080253ec 	.word	0x080253ec
 800a190:	20000304 	.word	0x20000304
 800a194:	08025410 	.word	0x08025410
 800a198:	200027c8 	.word	0x200027c8
 800a19c:	10624dd3 	.word	0x10624dd3
 800a1a0:	08025428 	.word	0x08025428
 800a1a4:	08025458 	.word	0x08025458

0800a1a8 <Print_Medha_Self_Details>:


void Print_Medha_Self_Details(void)
{
 800a1a8:	b580      	push	{r7, lr}
 800a1aa:	af00      	add	r7, sp, #0
#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800a1ac:	482a      	ldr	r0, [pc, #168]	; (800a258 <Print_Medha_Self_Details+0xb0>)
 800a1ae:	f018 f919 	bl	80223e4 <puts>
#endif

	printf("Source Address                :%u\n",EI_data.Medha_Prms_st.Source_Addr);
 800a1b2:	4b2a      	ldr	r3, [pc, #168]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a1b4:	f8b3 3322 	ldrh.w	r3, [r3, #802]	; 0x322
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	4829      	ldr	r0, [pc, #164]	; (800a260 <Print_Medha_Self_Details+0xb8>)
 800a1bc:	f018 f876 	bl	80222ac <iprintf>
	printf("Destination Address           :%u\n",EI_data.Medha_Prms_st.Dest_Addr);
 800a1c0:	4b26      	ldr	r3, [pc, #152]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a1c2:	f8b3 3324 	ldrh.w	r3, [r3, #804]	; 0x324
 800a1c6:	4619      	mov	r1, r3
 800a1c8:	4826      	ldr	r0, [pc, #152]	; (800a264 <Print_Medha_Self_Details+0xbc>)
 800a1ca:	f018 f86f 	bl	80222ac <iprintf>
	printf("Configured RS-485 port Number :%u\n",EI_data.Medha_Prms_st.Comport);
 800a1ce:	4b23      	ldr	r3, [pc, #140]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a1d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800a1d4:	4619      	mov	r1, r3
 800a1d6:	4824      	ldr	r0, [pc, #144]	; (800a268 <Print_Medha_Self_Details+0xc0>)
 800a1d8:	f018 f868 	bl	80222ac <iprintf>
	printf("RS-485_BaudRate               :%lu\n",EI_data.Medha_Prms_st.BaudRate);
 800a1dc:	4b1f      	ldr	r3, [pc, #124]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a1de:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 800a1e2:	4619      	mov	r1, r3
 800a1e4:	4821      	ldr	r0, [pc, #132]	; (800a26c <Print_Medha_Self_Details+0xc4>)
 800a1e6:	f018 f861 	bl	80222ac <iprintf>
	printf("ExchangeAfter PKT Reception_ms:%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Time);
 800a1ea:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a1ec:	f8d3 3338 	ldr.w	r3, [r3, #824]	; 0x338
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	481f      	ldr	r0, [pc, #124]	; (800a270 <Print_Medha_Self_Details+0xc8>)
 800a1f4:	f018 f85a 	bl	80222ac <iprintf>
	printf("ExchangeAfter PKT Timeout_ms  :%lu\n",EI_data.Medha_Prms_st.CAN_Xchange_Tout);
 800a1f8:	4b18      	ldr	r3, [pc, #96]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a1fa:	f8d3 333c 	ldr.w	r3, [r3, #828]	; 0x33c
 800a1fe:	4619      	mov	r1, r3
 800a200:	481c      	ldr	r0, [pc, #112]	; (800a274 <Print_Medha_Self_Details+0xcc>)
 800a202:	f018 f853 	bl	80222ac <iprintf>
	printf("Max_Mismatch_value            :%u\n",EI_data.Medha_Prms_st.Max_Mismatch_value);
 800a206:	4b15      	ldr	r3, [pc, #84]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a208:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800a20c:	4619      	mov	r1, r3
 800a20e:	481a      	ldr	r0, [pc, #104]	; (800a278 <Print_Medha_Self_Details+0xd0>)
 800a210:	f018 f84c 	bl	80222ac <iprintf>
	printf("NoofRelays                    :%u\n",EI_data.Medha_Prms_st.NoofRelays);
 800a214:	4b11      	ldr	r3, [pc, #68]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a216:	f8b3 3328 	ldrh.w	r3, [r3, #808]	; 0x328
 800a21a:	4619      	mov	r1, r3
 800a21c:	4817      	ldr	r0, [pc, #92]	; (800a27c <Print_Medha_Self_Details+0xd4>)
 800a21e:	f018 f845 	bl	80222ac <iprintf>
	printf("Packet_Interval_ms            :%lu\n",EI_data.Medha_Prms_st.Packet_Interval_ms);
 800a222:	4b0e      	ldr	r3, [pc, #56]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a224:	f8d3 332c 	ldr.w	r3, [r3, #812]	; 0x32c
 800a228:	4619      	mov	r1, r3
 800a22a:	4815      	ldr	r0, [pc, #84]	; (800a280 <Print_Medha_Self_Details+0xd8>)
 800a22c:	f018 f83e 	bl	80222ac <iprintf>
	printf("Packet_Timeout_Count          :%u\n",EI_data.Medha_Prms_st.Packet_Timeout_Count);
 800a230:	4b0a      	ldr	r3, [pc, #40]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a232:	f8b3 3326 	ldrh.w	r3, [r3, #806]	; 0x326
 800a236:	4619      	mov	r1, r3
 800a238:	4812      	ldr	r0, [pc, #72]	; (800a284 <Print_Medha_Self_Details+0xdc>)
 800a23a:	f018 f837 	bl	80222ac <iprintf>
	printf("SendSignal2MIE_CLK            :%lu\n",EI_data.Medha_Prms_st.SendSignal2MIE_CLK);
 800a23e:	4b07      	ldr	r3, [pc, #28]	; (800a25c <Print_Medha_Self_Details+0xb4>)
 800a240:	f8d3 3334 	ldr.w	r3, [r3, #820]	; 0x334
 800a244:	4619      	mov	r1, r3
 800a246:	4810      	ldr	r0, [pc, #64]	; (800a288 <Print_Medha_Self_Details+0xe0>)
 800a248:	f018 f830 	bl	80222ac <iprintf>

#ifdef EI_1
	printf("\n ______________________________ EI_1_SELF_DETAILS ______________________________ \n");
#endif
#ifdef EI_2
	printf("\n ______________________________ EI_2_SELF_DETAILS ______________________________ \n");
 800a24c:	4802      	ldr	r0, [pc, #8]	; (800a258 <Print_Medha_Self_Details+0xb0>)
 800a24e:	f018 f8c9 	bl	80223e4 <puts>
#endif
}
 800a252:	bf00      	nop
 800a254:	bd80      	pop	{r7, pc}
 800a256:	bf00      	nop
 800a258:	08025480 	.word	0x08025480
 800a25c:	20000304 	.word	0x20000304
 800a260:	080254d4 	.word	0x080254d4
 800a264:	080254f8 	.word	0x080254f8
 800a268:	0802551c 	.word	0x0802551c
 800a26c:	08025540 	.word	0x08025540
 800a270:	08025564 	.word	0x08025564
 800a274:	08025588 	.word	0x08025588
 800a278:	080255ac 	.word	0x080255ac
 800a27c:	080255d0 	.word	0x080255d0
 800a280:	080255f4 	.word	0x080255f4
 800a284:	08025618 	.word	0x08025618
 800a288:	0802563c 	.word	0x0802563c

0800a28c <CheckforMedhaCMD>:


void CheckforMedhaCMD(void)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b09a      	sub	sp, #104	; 0x68
 800a290:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800a292:	2300      	movs	r3, #0
 800a294:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800a29e:	2300      	movs	r3, #0
 800a2a0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	603b      	str	r3, [r7, #0]
 800a2a8:	1d3b      	adds	r3, r7, #4
 800a2aa:	2260      	movs	r2, #96	; 0x60
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	4618      	mov	r0, r3
 800a2b0:	f017 ff14 	bl	80220dc <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800a2b4:	4bb9      	ldr	r3, [pc, #740]	; (800a59c <CheckforMedhaCMD+0x310>)
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	4618      	mov	r0, r3
 800a2ba:	f004 faa1 	bl	800e800 <HAL_Elaps_Ticks>
 800a2be:	4603      	mov	r3, r0
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	f240 81ad 	bls.w	800a620 <CheckforMedhaCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800a2c6:	e010      	b.n	800a2ea <CheckforMedhaCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f00a fcbd 	bl	8014c48 <Com_Get_Byte>
 800a2ce:	4603      	mov	r3, r0
 800a2d0:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800a2d4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a2d8:	1c5a      	adds	r2, r3, #1
 800a2da:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800a2de:	3368      	adds	r3, #104	; 0x68
 800a2e0:	443b      	add	r3, r7
 800a2e2:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800a2e6:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f00a fc6c 	bl	8014bc8 <Com_DataReady>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d1e8      	bne.n	800a2c8 <CheckforMedhaCMD+0x3c>
		}
		if(Index>0)
 800a2f6:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	f000 8144 	beq.w	800a588 <CheckforMedhaCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800a300:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a304:	3368      	adds	r3, #104	; 0x68
 800a306:	443b      	add	r3, r7
 800a308:	2200      	movs	r2, #0
 800a30a:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800a30e:	463b      	mov	r3, r7
 800a310:	4619      	mov	r1, r3
 800a312:	48a3      	ldr	r0, [pc, #652]	; (800a5a0 <CheckforMedhaCMD+0x314>)
 800a314:	f017 ffca 	bl	80222ac <iprintf>
			switch(Is_MedhaCommand_Valid(Buffer,Index))
 800a318:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800a31c:	463b      	mov	r3, r7
 800a31e:	4611      	mov	r1, r2
 800a320:	4618      	mov	r0, r3
 800a322:	f000 fa0d 	bl	800a740 <Is_MedhaCommand_Valid>
 800a326:	4603      	mov	r3, r0
 800a328:	2b0c      	cmp	r3, #12
 800a32a:	f200 8129 	bhi.w	800a580 <CheckforMedhaCMD+0x2f4>
 800a32e:	a201      	add	r2, pc, #4	; (adr r2, 800a334 <CheckforMedhaCMD+0xa8>)
 800a330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a334:	0800a369 	.word	0x0800a369
 800a338:	0800a377 	.word	0x0800a377
 800a33c:	0800a3db 	.word	0x0800a3db
 800a340:	0800a3fd 	.word	0x0800a3fd
 800a344:	0800a425 	.word	0x0800a425
 800a348:	0800a44d 	.word	0x0800a44d
 800a34c:	0800a475 	.word	0x0800a475
 800a350:	0800a49d 	.word	0x0800a49d
 800a354:	0800a4c5 	.word	0x0800a4c5
 800a358:	0800a4ed 	.word	0x0800a4ed
 800a35c:	0800a515 	.word	0x0800a515
 800a360:	0800a53d 	.word	0x0800a53d
 800a364:	0800a565 	.word	0x0800a565
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800a368:	4b8e      	ldr	r3, [pc, #568]	; (800a5a4 <CheckforMedhaCMD+0x318>)
 800a36a:	2201      	movs	r2, #1
 800a36c:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800a36e:	488e      	ldr	r0, [pc, #568]	; (800a5a8 <CheckforMedhaCMD+0x31c>)
 800a370:	f018 f838 	bl	80223e4 <puts>
				break;
 800a374:	e109      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_ListMedha[ONE],(Buffer[Index-1])-'0');
 800a376:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a37a:	3b01      	subs	r3, #1
 800a37c:	3368      	adds	r3, #104	; 0x68
 800a37e:	443b      	add	r3, r7
 800a380:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a384:	3b30      	subs	r3, #48	; 0x30
 800a386:	461a      	mov	r2, r3
 800a388:	4988      	ldr	r1, [pc, #544]	; (800a5ac <CheckforMedhaCMD+0x320>)
 800a38a:	4889      	ldr	r0, [pc, #548]	; (800a5b0 <CheckforMedhaCMD+0x324>)
 800a38c:	f017 ff8e 	bl	80222ac <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800a390:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a394:	3b01      	subs	r3, #1
 800a396:	3368      	adds	r3, #104	; 0x68
 800a398:	443b      	add	r3, r7
 800a39a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a39e:	2b2f      	cmp	r3, #47	; 0x2f
 800a3a0:	d914      	bls.n	800a3cc <CheckforMedhaCMD+0x140>
 800a3a2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a3a6:	3b01      	subs	r3, #1
 800a3a8:	3368      	adds	r3, #104	; 0x68
 800a3aa:	443b      	add	r3, r7
 800a3ac:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a3b0:	2b32      	cmp	r3, #50	; 0x32
 800a3b2:	d80b      	bhi.n	800a3cc <CheckforMedhaCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800a3b4:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	3368      	adds	r3, #104	; 0x68
 800a3bc:	443b      	add	r3, r7
 800a3be:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800a3c2:	3b30      	subs	r3, #48	; 0x30
 800a3c4:	b2da      	uxtb	r2, r3
 800a3c6:	4b7b      	ldr	r3, [pc, #492]	; (800a5b4 <CheckforMedhaCMD+0x328>)
 800a3c8:	701a      	strb	r2, [r3, #0]
 800a3ca:	e002      	b.n	800a3d2 <CheckforMedhaCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800a3cc:	487a      	ldr	r0, [pc, #488]	; (800a5b8 <CheckforMedhaCMD+0x32c>)
 800a3ce:	f018 f809 	bl	80223e4 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800a3d2:	2301      	movs	r3, #1
 800a3d4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a3d8:	e0d7      	b.n	800a58a <CheckforMedhaCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_ListMedha[TWO]);
 800a3da:	4978      	ldr	r1, [pc, #480]	; (800a5bc <CheckforMedhaCMD+0x330>)
 800a3dc:	4878      	ldr	r0, [pc, #480]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a3de:	f017 ff65 	bl	80222ac <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800a3e2:	4878      	ldr	r0, [pc, #480]	; (800a5c4 <CheckforMedhaCMD+0x338>)
 800a3e4:	f017 fffe 	bl	80223e4 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a3e8:	4b77      	ldr	r3, [pc, #476]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f043 0301 	orr.w	r3, r3, #1
 800a3f0:	4a75      	ldr	r2, [pc, #468]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a3f2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a3fa:	e0c6      	b.n	800a58a <CheckforMedhaCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_ListMedha[THREE]);
 800a3fc:	4973      	ldr	r1, [pc, #460]	; (800a5cc <CheckforMedhaCMD+0x340>)
 800a3fe:	4870      	ldr	r0, [pc, #448]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a400:	f017 ff54 	bl	80222ac <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800a404:	4872      	ldr	r0, [pc, #456]	; (800a5d0 <CheckforMedhaCMD+0x344>)
 800a406:	f017 ffed 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a40a:	4b6f      	ldr	r3, [pc, #444]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a40c:	2200      	movs	r2, #0
 800a40e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a410:	4b6d      	ldr	r3, [pc, #436]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f043 0302 	orr.w	r3, r3, #2
 800a418:	4a6b      	ldr	r2, [pc, #428]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a41a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a41c:	2301      	movs	r3, #1
 800a41e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a422:	e0b2      	b.n	800a58a <CheckforMedhaCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_ListMedha[FOUR]);
 800a424:	496b      	ldr	r1, [pc, #428]	; (800a5d4 <CheckforMedhaCMD+0x348>)
 800a426:	4866      	ldr	r0, [pc, #408]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a428:	f017 ff40 	bl	80222ac <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800a42c:	486a      	ldr	r0, [pc, #424]	; (800a5d8 <CheckforMedhaCMD+0x34c>)
 800a42e:	f017 ffd9 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a432:	4b65      	ldr	r3, [pc, #404]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a434:	2200      	movs	r2, #0
 800a436:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a438:	4b63      	ldr	r3, [pc, #396]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f043 0304 	orr.w	r3, r3, #4
 800a440:	4a61      	ldr	r2, [pc, #388]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a442:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a444:	2301      	movs	r3, #1
 800a446:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a44a:	e09e      	b.n	800a58a <CheckforMedhaCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_ListMedha[FIVE]);
 800a44c:	4963      	ldr	r1, [pc, #396]	; (800a5dc <CheckforMedhaCMD+0x350>)
 800a44e:	485c      	ldr	r0, [pc, #368]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a450:	f017 ff2c 	bl	80222ac <iprintf>
				printf("INVALID_DES_PORT\n");
 800a454:	4862      	ldr	r0, [pc, #392]	; (800a5e0 <CheckforMedhaCMD+0x354>)
 800a456:	f017 ffc5 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a45a:	4b5b      	ldr	r3, [pc, #364]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a45c:	2200      	movs	r2, #0
 800a45e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a460:	4b59      	ldr	r3, [pc, #356]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f043 0308 	orr.w	r3, r3, #8
 800a468:	4a57      	ldr	r2, [pc, #348]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a46a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a46c:	2301      	movs	r3, #1
 800a46e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a472:	e08a      	b.n	800a58a <CheckforMedhaCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_ListMedha[SIX]);
 800a474:	495b      	ldr	r1, [pc, #364]	; (800a5e4 <CheckforMedhaCMD+0x358>)
 800a476:	4852      	ldr	r0, [pc, #328]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a478:	f017 ff18 	bl	80222ac <iprintf>
				printf("INVALID_SRC_PORT\n");
 800a47c:	485a      	ldr	r0, [pc, #360]	; (800a5e8 <CheckforMedhaCMD+0x35c>)
 800a47e:	f017 ffb1 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a482:	4b51      	ldr	r3, [pc, #324]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a484:	2200      	movs	r2, #0
 800a486:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a488:	4b4f      	ldr	r3, [pc, #316]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	f043 0310 	orr.w	r3, r3, #16
 800a490:	4a4d      	ldr	r2, [pc, #308]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a492:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a494:	2301      	movs	r3, #1
 800a496:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a49a:	e076      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_ListMedha[SEVEN]);
 800a49c:	4953      	ldr	r1, [pc, #332]	; (800a5ec <CheckforMedhaCMD+0x360>)
 800a49e:	4848      	ldr	r0, [pc, #288]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a4a0:	f017 ff04 	bl	80222ac <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800a4a4:	4852      	ldr	r0, [pc, #328]	; (800a5f0 <CheckforMedhaCMD+0x364>)
 800a4a6:	f017 ff9d 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a4aa:	4b47      	ldr	r3, [pc, #284]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4ac:	2200      	movs	r2, #0
 800a4ae:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a4b0:	4b45      	ldr	r3, [pc, #276]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	f043 0320 	orr.w	r3, r3, #32
 800a4b8:	4a43      	ldr	r2, [pc, #268]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4ba:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a4bc:	2301      	movs	r3, #1
 800a4be:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a4c2:	e062      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_ListMedha[EIGHT]);
 800a4c4:	494b      	ldr	r1, [pc, #300]	; (800a5f4 <CheckforMedhaCMD+0x368>)
 800a4c6:	484c      	ldr	r0, [pc, #304]	; (800a5f8 <CheckforMedhaCMD+0x36c>)
 800a4c8:	f017 fef0 	bl	80222ac <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800a4cc:	484b      	ldr	r0, [pc, #300]	; (800a5fc <CheckforMedhaCMD+0x370>)
 800a4ce:	f017 ff89 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a4d2:	4b3d      	ldr	r3, [pc, #244]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a4d8:	4b3b      	ldr	r3, [pc, #236]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a4e0:	4a39      	ldr	r2, [pc, #228]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4e2:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a4e4:	2301      	movs	r3, #1
 800a4e6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a4ea:	e04e      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_ListMedha[NINE]);
 800a4ec:	4944      	ldr	r1, [pc, #272]	; (800a600 <CheckforMedhaCMD+0x374>)
 800a4ee:	4834      	ldr	r0, [pc, #208]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a4f0:	f017 fedc 	bl	80222ac <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800a4f4:	4843      	ldr	r0, [pc, #268]	; (800a604 <CheckforMedhaCMD+0x378>)
 800a4f6:	f017 ff75 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a4fa:	4b33      	ldr	r3, [pc, #204]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a500:	4b31      	ldr	r3, [pc, #196]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a508:	4a2f      	ldr	r2, [pc, #188]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a50a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a50c:	2301      	movs	r3, #1
 800a50e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a512:	e03a      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_ListMedha[TEN]);
 800a514:	493c      	ldr	r1, [pc, #240]	; (800a608 <CheckforMedhaCMD+0x37c>)
 800a516:	482a      	ldr	r0, [pc, #168]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a518:	f017 fec8 	bl	80222ac <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800a51c:	483b      	ldr	r0, [pc, #236]	; (800a60c <CheckforMedhaCMD+0x380>)
 800a51e:	f017 ff61 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a522:	4b29      	ldr	r3, [pc, #164]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a524:	2200      	movs	r2, #0
 800a526:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a528:	4b27      	ldr	r3, [pc, #156]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a530:	4a25      	ldr	r2, [pc, #148]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a532:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a534:	2301      	movs	r3, #1
 800a536:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a53a:	e026      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_ListMedha[ELEVEN]);
 800a53c:	4934      	ldr	r1, [pc, #208]	; (800a610 <CheckforMedhaCMD+0x384>)
 800a53e:	4820      	ldr	r0, [pc, #128]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a540:	f017 feb4 	bl	80222ac <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800a544:	4833      	ldr	r0, [pc, #204]	; (800a614 <CheckforMedhaCMD+0x388>)
 800a546:	f017 ff4d 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a54a:	4b1f      	ldr	r3, [pc, #124]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a54c:	2200      	movs	r2, #0
 800a54e:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800a550:	4b1d      	ldr	r3, [pc, #116]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a558:	4a1b      	ldr	r2, [pc, #108]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a55a:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800a55c:	2301      	movs	r3, #1
 800a55e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a562:	e012      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_ListMedha[TWELVE]);
 800a564:	492c      	ldr	r1, [pc, #176]	; (800a618 <CheckforMedhaCMD+0x38c>)
 800a566:	4816      	ldr	r0, [pc, #88]	; (800a5c0 <CheckforMedhaCMD+0x334>)
 800a568:	f017 fea0 	bl	80222ac <iprintf>
				printf("CLEAR ALL\n");
 800a56c:	482b      	ldr	r0, [pc, #172]	; (800a61c <CheckforMedhaCMD+0x390>)
 800a56e:	f017 ff39 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800a572:	4b15      	ldr	r3, [pc, #84]	; (800a5c8 <CheckforMedhaCMD+0x33c>)
 800a574:	2200      	movs	r2, #0
 800a576:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800a578:	2301      	movs	r3, #1
 800a57a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800a57e:	e004      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800a580:	480d      	ldr	r0, [pc, #52]	; (800a5b8 <CheckforMedhaCMD+0x32c>)
 800a582:	f017 ff2f 	bl	80223e4 <puts>
 800a586:	e000      	b.n	800a58a <CheckforMedhaCMD+0x2fe>
			}
		}
 800a588:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800a58a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800a58e:	2b01      	cmp	r3, #1
 800a590:	d147      	bne.n	800a622 <CheckforMedhaCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800a592:	f240 2005 	movw	r0, #517	; 0x205
 800a596:	f004 fea9 	bl	800f2ec <TransmitCanPkt>
 800a59a:	e042      	b.n	800a622 <CheckforMedhaCMD+0x396>
 800a59c:	2000a000 	.word	0x2000a000
 800a5a0:	08025660 	.word	0x08025660
 800a5a4:	20000644 	.word	0x20000644
 800a5a8:	08025678 	.word	0x08025678
 800a5ac:	200020ea 	.word	0x200020ea
 800a5b0:	080256b8 	.word	0x080256b8
 800a5b4:	20000645 	.word	0x20000645
 800a5b8:	080256cc 	.word	0x080256cc
 800a5bc:	2000211c 	.word	0x2000211c
 800a5c0:	080256e8 	.word	0x080256e8
 800a5c4:	080256f8 	.word	0x080256f8
 800a5c8:	20003470 	.word	0x20003470
 800a5cc:	2000214e 	.word	0x2000214e
 800a5d0:	08025710 	.word	0x08025710
 800a5d4:	20002180 	.word	0x20002180
 800a5d8:	08025728 	.word	0x08025728
 800a5dc:	200021b2 	.word	0x200021b2
 800a5e0:	0802573c 	.word	0x0802573c
 800a5e4:	200021e4 	.word	0x200021e4
 800a5e8:	08025750 	.word	0x08025750
 800a5ec:	20002216 	.word	0x20002216
 800a5f0:	08025764 	.word	0x08025764
 800a5f4:	20002248 	.word	0x20002248
 800a5f8:	08025780 	.word	0x08025780
 800a5fc:	08025798 	.word	0x08025798
 800a600:	2000227a 	.word	0x2000227a
 800a604:	080257ac 	.word	0x080257ac
 800a608:	200022ac 	.word	0x200022ac
 800a60c:	080257c4 	.word	0x080257c4
 800a610:	200022de 	.word	0x200022de
 800a614:	080257e4 	.word	0x080257e4
 800a618:	20002310 	.word	0x20002310
 800a61c:	08025804 	.word	0x08025804
		return;
 800a620:	bf00      	nop
		}
	}
}
 800a622:	3768      	adds	r7, #104	; 0x68
 800a624:	46bd      	mov	sp, r7
 800a626:	bd80      	pop	{r7, pc}

0800a628 <Update_MedhaCommands>:


void Update_MedhaCommands(void)
{
 800a628:	b480      	push	{r7}
 800a62a:	b083      	sub	sp, #12
 800a62c:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800a62e:	2300      	movs	r3, #0
 800a630:	71fb      	strb	r3, [r7, #7]

	Commands_ListMedha[CmdCnt][0] = 0X24;
 800a632:	79fb      	ldrb	r3, [r7, #7]
 800a634:	4a3d      	ldr	r2, [pc, #244]	; (800a72c <Update_MedhaCommands+0x104>)
 800a636:	2132      	movs	r1, #50	; 0x32
 800a638:	fb01 f303 	mul.w	r3, r1, r3
 800a63c:	4413      	add	r3, r2
 800a63e:	2224      	movs	r2, #36	; 0x24
 800a640:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][1] = 0X01;
 800a642:	79fb      	ldrb	r3, [r7, #7]
 800a644:	4a39      	ldr	r2, [pc, #228]	; (800a72c <Update_MedhaCommands+0x104>)
 800a646:	2132      	movs	r1, #50	; 0x32
 800a648:	fb01 f303 	mul.w	r3, r1, r3
 800a64c:	4413      	add	r3, r2
 800a64e:	3301      	adds	r3, #1
 800a650:	2201      	movs	r2, #1
 800a652:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][2] = 0X30;
 800a654:	79fb      	ldrb	r3, [r7, #7]
 800a656:	4a35      	ldr	r2, [pc, #212]	; (800a72c <Update_MedhaCommands+0x104>)
 800a658:	2132      	movs	r1, #50	; 0x32
 800a65a:	fb01 f303 	mul.w	r3, r1, r3
 800a65e:	4413      	add	r3, r2
 800a660:	3302      	adds	r3, #2
 800a662:	2230      	movs	r2, #48	; 0x30
 800a664:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][3] = 0X40;
 800a666:	79fb      	ldrb	r3, [r7, #7]
 800a668:	4a30      	ldr	r2, [pc, #192]	; (800a72c <Update_MedhaCommands+0x104>)
 800a66a:	2132      	movs	r1, #50	; 0x32
 800a66c:	fb01 f303 	mul.w	r3, r1, r3
 800a670:	4413      	add	r3, r2
 800a672:	3303      	adds	r3, #3
 800a674:	2240      	movs	r2, #64	; 0x40
 800a676:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][4] = 0XC0;
 800a678:	79fb      	ldrb	r3, [r7, #7]
 800a67a:	4a2c      	ldr	r2, [pc, #176]	; (800a72c <Update_MedhaCommands+0x104>)
 800a67c:	2132      	movs	r1, #50	; 0x32
 800a67e:	fb01 f303 	mul.w	r3, r1, r3
 800a682:	4413      	add	r3, r2
 800a684:	3304      	adds	r3, #4
 800a686:	22c0      	movs	r2, #192	; 0xc0
 800a688:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][5] = 0X4E;
 800a68a:	79fb      	ldrb	r3, [r7, #7]
 800a68c:	4a27      	ldr	r2, [pc, #156]	; (800a72c <Update_MedhaCommands+0x104>)
 800a68e:	2132      	movs	r1, #50	; 0x32
 800a690:	fb01 f303 	mul.w	r3, r1, r3
 800a694:	4413      	add	r3, r2
 800a696:	3305      	adds	r3, #5
 800a698:	224e      	movs	r2, #78	; 0x4e
 800a69a:	701a      	strb	r2, [r3, #0]
	Commands_ListMedha[CmdCnt][6] = 0X26;
 800a69c:	79fb      	ldrb	r3, [r7, #7]
 800a69e:	4a23      	ldr	r2, [pc, #140]	; (800a72c <Update_MedhaCommands+0x104>)
 800a6a0:	2132      	movs	r1, #50	; 0x32
 800a6a2:	fb01 f303 	mul.w	r3, r1, r3
 800a6a6:	4413      	add	r3, r2
 800a6a8:	3306      	adds	r3, #6
 800a6aa:	2226      	movs	r2, #38	; 0x26
 800a6ac:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800a6ae:	79fb      	ldrb	r3, [r7, #7]
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"DEBUG_MODE");
 800a6b4:	79fb      	ldrb	r3, [r7, #7]
 800a6b6:	1c5a      	adds	r2, r3, #1
 800a6b8:	71fa      	strb	r2, [r7, #7]
 800a6ba:	461a      	mov	r2, r3
 800a6bc:	2332      	movs	r3, #50	; 0x32
 800a6be:	fb02 f303 	mul.w	r3, r2, r3
 800a6c2:	4a1a      	ldr	r2, [pc, #104]	; (800a72c <Update_MedhaCommands+0x104>)
 800a6c4:	4413      	add	r3, r2
 800a6c6:	491a      	ldr	r1, [pc, #104]	; (800a730 <Update_MedhaCommands+0x108>)
 800a6c8:	461a      	mov	r2, r3
 800a6ca:	460b      	mov	r3, r1
 800a6cc:	cb03      	ldmia	r3!, {r0, r1}
 800a6ce:	6010      	str	r0, [r2, #0]
 800a6d0:	6051      	str	r1, [r2, #4]
 800a6d2:	8819      	ldrh	r1, [r3, #0]
 800a6d4:	789b      	ldrb	r3, [r3, #2]
 800a6d6:	8111      	strh	r1, [r2, #8]
 800a6d8:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"CLEAR_ALL");
 800a6da:	79fb      	ldrb	r3, [r7, #7]
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	71fa      	strb	r2, [r7, #7]
 800a6e0:	461a      	mov	r2, r3
 800a6e2:	2332      	movs	r3, #50	; 0x32
 800a6e4:	fb02 f303 	mul.w	r3, r2, r3
 800a6e8:	4a10      	ldr	r2, [pc, #64]	; (800a72c <Update_MedhaCommands+0x104>)
 800a6ea:	4413      	add	r3, r2
 800a6ec:	4911      	ldr	r1, [pc, #68]	; (800a734 <Update_MedhaCommands+0x10c>)
 800a6ee:	461a      	mov	r2, r3
 800a6f0:	460b      	mov	r3, r1
 800a6f2:	cb03      	ldmia	r3!, {r0, r1}
 800a6f4:	6010      	str	r0, [r2, #0]
 800a6f6:	6051      	str	r1, [r2, #4]
 800a6f8:	881b      	ldrh	r3, [r3, #0]
 800a6fa:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_ListMedha[CmdCnt++], (const char *)"HELP");
 800a6fc:	79fb      	ldrb	r3, [r7, #7]
 800a6fe:	1c5a      	adds	r2, r3, #1
 800a700:	71fa      	strb	r2, [r7, #7]
 800a702:	461a      	mov	r2, r3
 800a704:	2332      	movs	r3, #50	; 0x32
 800a706:	fb02 f303 	mul.w	r3, r2, r3
 800a70a:	4a08      	ldr	r2, [pc, #32]	; (800a72c <Update_MedhaCommands+0x104>)
 800a70c:	4413      	add	r3, r2
 800a70e:	4a0a      	ldr	r2, [pc, #40]	; (800a738 <Update_MedhaCommands+0x110>)
 800a710:	6810      	ldr	r0, [r2, #0]
 800a712:	6018      	str	r0, [r3, #0]
 800a714:	7912      	ldrb	r2, [r2, #4]
 800a716:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800a718:	4a08      	ldr	r2, [pc, #32]	; (800a73c <Update_MedhaCommands+0x114>)
 800a71a:	79fb      	ldrb	r3, [r7, #7]
 800a71c:	7013      	strb	r3, [r2, #0]
}
 800a71e:	bf00      	nop
 800a720:	370c      	adds	r7, #12
 800a722:	46bd      	mov	sp, r7
 800a724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a728:	4770      	bx	lr
 800a72a:	bf00      	nop
 800a72c:	200020b8 	.word	0x200020b8
 800a730:	08025810 	.word	0x08025810
 800a734:	0802581c 	.word	0x0802581c
 800a738:	08025828 	.word	0x08025828
 800a73c:	200024a0 	.word	0x200024a0

0800a740 <Is_MedhaCommand_Valid>:

uint8_t Is_MedhaCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800a740:	b590      	push	{r4, r7, lr}
 800a742:	b085      	sub	sp, #20
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800a74c:	2300      	movs	r3, #0
 800a74e:	73fb      	strb	r3, [r7, #15]
 800a750:	e01c      	b.n	800a78c <Is_MedhaCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_ListMedha[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_ListMedha[Traverser],strlen((char *)Commands_ListMedha[Traverser])) == 0)
 800a752:	7bfb      	ldrb	r3, [r7, #15]
 800a754:	2232      	movs	r2, #50	; 0x32
 800a756:	fb02 f303 	mul.w	r3, r2, r3
 800a75a:	4a11      	ldr	r2, [pc, #68]	; (800a7a0 <Is_MedhaCommand_Valid+0x60>)
 800a75c:	189c      	adds	r4, r3, r2
 800a75e:	7bfb      	ldrb	r3, [r7, #15]
 800a760:	2232      	movs	r2, #50	; 0x32
 800a762:	fb02 f303 	mul.w	r3, r2, r3
 800a766:	4a0e      	ldr	r2, [pc, #56]	; (800a7a0 <Is_MedhaCommand_Valid+0x60>)
 800a768:	4413      	add	r3, r2
 800a76a:	4618      	mov	r0, r3
 800a76c:	f7f5 fd72 	bl	8000254 <strlen>
 800a770:	4603      	mov	r3, r0
 800a772:	461a      	mov	r2, r3
 800a774:	4621      	mov	r1, r4
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f017 fc78 	bl	802206c <memcmp>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d101      	bne.n	800a786 <Is_MedhaCommand_Valid+0x46>
		{
			return Traverser;
 800a782:	7bfb      	ldrb	r3, [r7, #15]
 800a784:	e008      	b.n	800a798 <Is_MedhaCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800a786:	7bfb      	ldrb	r3, [r7, #15]
 800a788:	3301      	adds	r3, #1
 800a78a:	73fb      	strb	r3, [r7, #15]
 800a78c:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <Is_MedhaCommand_Valid+0x64>)
 800a78e:	781b      	ldrb	r3, [r3, #0]
 800a790:	7bfa      	ldrb	r2, [r7, #15]
 800a792:	429a      	cmp	r2, r3
 800a794:	d3dd      	bcc.n	800a752 <Is_MedhaCommand_Valid+0x12>
		}
	}
	return 255;
 800a796:	23ff      	movs	r3, #255	; 0xff
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd90      	pop	{r4, r7, pc}
 800a7a0:	200020b8 	.word	0x200020b8
 800a7a4:	200024a0 	.word	0x200024a0

0800a7a8 <GetCRC32>:

#endif

/* __________________________________  CRC FUNCTIONS _______________________________ */
uint32_t GetCRC32(unsigned short us_Start,uint8_t *ucPtr,unsigned short us_End)
{
 800a7a8:	b480      	push	{r7}
 800a7aa:	b087      	sub	sp, #28
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	6039      	str	r1, [r7, #0]
 800a7b2:	80fb      	strh	r3, [r7, #6]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	80bb      	strh	r3, [r7, #4]
	uint32_t Crc = 0;
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	617b      	str	r3, [r7, #20]
	uint32_t i = 0;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	613b      	str	r3, [r7, #16]
	uint32_t LookUpIndex = 0;
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	60fb      	str	r3, [r7, #12]

	//	printf("\nstart cRc us_Start=%d end =%d\n",us_Start,us_End);
	for(i = us_Start ;i < us_End;i++)
 800a7c4:	88fb      	ldrh	r3, [r7, #6]
 800a7c6:	613b      	str	r3, [r7, #16]
 800a7c8:	e015      	b.n	800a7f6 <GetCRC32+0x4e>
	{
		LookUpIndex = (uint8_t)(Crc ^ ucPtr[i]);
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	6839      	ldr	r1, [r7, #0]
 800a7d0:	693b      	ldr	r3, [r7, #16]
 800a7d2:	440b      	add	r3, r1
 800a7d4:	781b      	ldrb	r3, [r3, #0]
 800a7d6:	4053      	eors	r3, r2
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	60fb      	str	r3, [r7, #12]
		Crc = (Crc >> 8);
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	0a1b      	lsrs	r3, r3, #8
 800a7e0:	617b      	str	r3, [r7, #20]
		Crc = Crc ^ Crc32_LookUp[LookUpIndex];
 800a7e2:	4a0a      	ldr	r2, [pc, #40]	; (800a80c <GetCRC32+0x64>)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a7ea:	697a      	ldr	r2, [r7, #20]
 800a7ec:	4053      	eors	r3, r2
 800a7ee:	617b      	str	r3, [r7, #20]
	for(i = us_Start ;i < us_End;i++)
 800a7f0:	693b      	ldr	r3, [r7, #16]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	613b      	str	r3, [r7, #16]
 800a7f6:	88bb      	ldrh	r3, [r7, #4]
 800a7f8:	693a      	ldr	r2, [r7, #16]
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d3e5      	bcc.n	800a7ca <GetCRC32+0x22>
	}

	return Crc;
 800a7fe:	697b      	ldr	r3, [r7, #20]
}
 800a800:	4618      	mov	r0, r3
 800a802:	371c      	adds	r7, #28
 800a804:	46bd      	mov	sp, r7
 800a806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80a:	4770      	bx	lr
 800a80c:	0802870c 	.word	0x0802870c

0800a810 <CheckCRC32>:

uint32_t CheckCRC32(uint16_t us_Start, uint8_t *ucPtr,uint16_t us_End)
{
 800a810:	b580      	push	{r7, lr}
 800a812:	b084      	sub	sp, #16
 800a814:	af00      	add	r7, sp, #0
 800a816:	4603      	mov	r3, r0
 800a818:	6039      	str	r1, [r7, #0]
 800a81a:	80fb      	strh	r3, [r7, #6]
 800a81c:	4613      	mov	r3, r2
 800a81e:	80bb      	strh	r3, [r7, #4]
	uint32_t Pkt_Crc = 0;
 800a820:	2300      	movs	r3, #0
 800a822:	60bb      	str	r3, [r7, #8]
	uint32_t Cal_Crc = 0;
 800a824:	2300      	movs	r3, #0
 800a826:	60fb      	str	r3, [r7, #12]

	Cal_Crc = GetCRC32(us_Start,ucPtr,us_End);
 800a828:	88ba      	ldrh	r2, [r7, #4]
 800a82a:	88fb      	ldrh	r3, [r7, #6]
 800a82c:	6839      	ldr	r1, [r7, #0]
 800a82e:	4618      	mov	r0, r3
 800a830:	f7ff ffba 	bl	800a7a8 <GetCRC32>
 800a834:	60f8      	str	r0, [r7, #12]
	memcpy(&Pkt_Crc,&ucPtr[us_End],4);
 800a836:	88bb      	ldrh	r3, [r7, #4]
 800a838:	683a      	ldr	r2, [r7, #0]
 800a83a:	4413      	add	r3, r2
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	60bb      	str	r3, [r7, #8]
	}

#endif


	if(Pkt_Crc == Cal_Crc)
 800a840:	68bb      	ldr	r3, [r7, #8]
 800a842:	68fa      	ldr	r2, [r7, #12]
 800a844:	429a      	cmp	r2, r3
 800a846:	d101      	bne.n	800a84c <CheckCRC32+0x3c>
	{
		return OK;
 800a848:	2301      	movs	r3, #1
 800a84a:	e009      	b.n	800a860 <CheckCRC32+0x50>
	}
	else
	{
		printf("\nReceived CRC:0x%08lx\n",Pkt_Crc);
 800a84c:	68bb      	ldr	r3, [r7, #8]
 800a84e:	4619      	mov	r1, r3
 800a850:	4805      	ldr	r0, [pc, #20]	; (800a868 <CheckCRC32+0x58>)
 800a852:	f017 fd2b 	bl	80222ac <iprintf>
		printf("Calculated CRC:0x%08lx\n",Cal_Crc);
 800a856:	68f9      	ldr	r1, [r7, #12]
 800a858:	4804      	ldr	r0, [pc, #16]	; (800a86c <CheckCRC32+0x5c>)
 800a85a:	f017 fd27 	bl	80222ac <iprintf>
		return NOT_OK;
 800a85e:	2300      	movs	r3, #0
	}

}
 800a860:	4618      	mov	r0, r3
 800a862:	3710      	adds	r7, #16
 800a864:	46bd      	mov	sp, r7
 800a866:	bd80      	pop	{r7, pc}
 800a868:	08025830 	.word	0x08025830
 800a86c:	08025848 	.word	0x08025848

0800a870 <CheckForRqst>:

#include "Headers.h"


unsigned char CheckForRqst(unsigned char uc_port)
{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	4603      	mov	r3, r0
 800a878:	71fb      	strb	r3, [r7, #7]
	unsigned char buffer[10] = "\0";//index=0,data=0;
 800a87a:	2300      	movs	r3, #0
 800a87c:	60fb      	str	r3, [r7, #12]
 800a87e:	f107 0310 	add.w	r3, r7, #16
 800a882:	2200      	movs	r2, #0
 800a884:	601a      	str	r2, [r3, #0]
 800a886:	809a      	strh	r2, [r3, #4]
	if(ReadAndFormMsg(uc_port, buffer,sizeof(buffer)) > 0)
 800a888:	79fb      	ldrb	r3, [r7, #7]
 800a88a:	b29b      	uxth	r3, r3
 800a88c:	f107 010c 	add.w	r1, r7, #12
 800a890:	220a      	movs	r2, #10
 800a892:	4618      	mov	r0, r3
 800a894:	f000 f846 	bl	800a924 <ReadAndFormMsg>
 800a898:	4603      	mov	r3, r0
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	dd34      	ble.n	800a908 <CheckForRqst+0x98>
	{
		if( (buffer[1] == ((DATLOADING>>8)&0XFF)) && (buffer[2] ==(DATLOADING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800a89e:	7b7b      	ldrb	r3, [r7, #13]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d115      	bne.n	800a8d0 <CheckForRqst+0x60>
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d112      	bne.n	800a8d0 <CheckForRqst+0x60>
 800a8aa:	7bfb      	ldrb	r3, [r7, #15]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d10f      	bne.n	800a8d0 <CheckForRqst+0x60>
		{
			printf("\nUPLOADING REQUEST OK\n");
 800a8b0:	4818      	ldr	r0, [pc, #96]	; (800a914 <CheckForRqst+0xa4>)
 800a8b2:	f017 fd97 	bl	80223e4 <puts>
			SendAck(uc_port,DATLOADING, ACKOK);
 800a8b6:	79fb      	ldrb	r3, [r7, #7]
 800a8b8:	2202      	movs	r2, #2
 800a8ba:	2101      	movs	r1, #1
 800a8bc:	4618      	mov	r0, r3
 800a8be:	f000 f933 	bl	800ab28 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800a8c2:	f00a fce9 	bl	8015298 <HAL_GetTick>
 800a8c6:	4603      	mov	r3, r0
 800a8c8:	4a13      	ldr	r2, [pc, #76]	; (800a918 <CheckForRqst+0xa8>)
 800a8ca:	6013      	str	r3, [r2, #0]
			return 0x01;
 800a8cc:	2301      	movs	r3, #1
 800a8ce:	e01c      	b.n	800a90a <CheckForRqst+0x9a>
		}
		else if( (buffer[1] == ((DATSENDING>>8)&0XFF)) && (buffer[2] ==(DATSENDING & 0XFF)) && (buffer[3] == DATREQUEST) )
 800a8d0:	7b7b      	ldrb	r3, [r7, #13]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d115      	bne.n	800a902 <CheckForRqst+0x92>
 800a8d6:	7bbb      	ldrb	r3, [r7, #14]
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d112      	bne.n	800a902 <CheckForRqst+0x92>
 800a8dc:	7bfb      	ldrb	r3, [r7, #15]
 800a8de:	2b01      	cmp	r3, #1
 800a8e0:	d10f      	bne.n	800a902 <CheckForRqst+0x92>
		{
			printf("\nDOWNLOADING REQUEST OK\n");
 800a8e2:	480e      	ldr	r0, [pc, #56]	; (800a91c <CheckForRqst+0xac>)
 800a8e4:	f017 fd7e 	bl	80223e4 <puts>
			SendAck(uc_port,DATSENDING, ACKOK);
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	2202      	movs	r2, #2
 800a8ec:	2102      	movs	r1, #2
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f000 f91a 	bl	800ab28 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 800a8f4:	f00a fcd0 	bl	8015298 <HAL_GetTick>
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	4a07      	ldr	r2, [pc, #28]	; (800a918 <CheckForRqst+0xa8>)
 800a8fc:	6013      	str	r3, [r2, #0]
			return 0x02;
 800a8fe:	2302      	movs	r3, #2
 800a900:	e003      	b.n	800a90a <CheckForRqst+0x9a>
		}
		else
			printf("\nREQUEST NOT OK\n");
 800a902:	4807      	ldr	r0, [pc, #28]	; (800a920 <CheckForRqst+0xb0>)
 800a904:	f017 fd6e 	bl	80223e4 <puts>
	}
	return 0x00;
 800a908:	2300      	movs	r3, #0
}
 800a90a:	4618      	mov	r0, r3
 800a90c:	3718      	adds	r7, #24
 800a90e:	46bd      	mov	sp, r7
 800a910:	bd80      	pop	{r7, pc}
 800a912:	bf00      	nop
 800a914:	08025860 	.word	0x08025860
 800a918:	20000a4c 	.word	0x20000a4c
 800a91c:	08025878 	.word	0x08025878
 800a920:	08025890 	.word	0x08025890

0800a924 <ReadAndFormMsg>:



short int ReadAndFormMsg(unsigned short int us_Port,unsigned char *puc_ReadMsg,unsigned short int us_MaxSize)
{
 800a924:	b590      	push	{r4, r7, lr}
 800a926:	b087      	sub	sp, #28
 800a928:	af02      	add	r7, sp, #8
 800a92a:	4603      	mov	r3, r0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	80fb      	strh	r3, [r7, #6]
 800a930:	4613      	mov	r3, r2
 800a932:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800a934:	2300      	movs	r3, #0
 800a936:	73fb      	strb	r3, [r7, #15]
	static unsigned short int j = ZERO;
	short int sus_CRC = ZERO;
 800a938:	2300      	movs	r3, #0
 800a93a:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800a93c:	2300      	movs	r3, #0
 800a93e:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800a940:	e0d4      	b.n	800aaec <ReadAndFormMsg+0x1c8>
	{
		gucUpdateFlag = 1;
 800a942:	4b71      	ldr	r3, [pc, #452]	; (800ab08 <ReadAndFormMsg+0x1e4>)
 800a944:	2201      	movs	r2, #1
 800a946:	701a      	strb	r2, [r3, #0]
		// updateClk = SpoiGetSysTICs();

		HAL_IWDG_Refresh(&hiwdg);
 800a948:	4870      	ldr	r0, [pc, #448]	; (800ab0c <ReadAndFormMsg+0x1e8>)
 800a94a:	f00e f80b 	bl	8018964 <HAL_IWDG_Refresh>
		suc_RByte = Com_Get_Byte(us_Port);
 800a94e:	88fb      	ldrh	r3, [r7, #6]
 800a950:	b2db      	uxtb	r3, r3
 800a952:	4618      	mov	r0, r3
 800a954:	f00a f978 	bl	8014c48 <Com_Get_Byte>
 800a958:	4603      	mov	r3, r0
 800a95a:	73fb      	strb	r3, [r7, #15]

		//Delay_SRAM(1000);

		//printf("%x|* ",suc_RByte);
		Enable_UART_Interrupts();
 800a95c:	f00a fa8a 	bl	8014e74 <Enable_UART_Interrupts>
		//printf("%d:%x ",index++,suc_RByte);
		//SpoiPause(1);
		//index++	   ;
		//#endif /*PRINTF_DEBUG*/

		switch(suc_RcvStatus)
 800a960:	4b6b      	ldr	r3, [pc, #428]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800a962:	781b      	ldrb	r3, [r3, #0]
 800a964:	2b03      	cmp	r3, #3
 800a966:	f000 8099 	beq.w	800aa9c <ReadAndFormMsg+0x178>
 800a96a:	2b03      	cmp	r3, #3
 800a96c:	f300 80b0 	bgt.w	800aad0 <ReadAndFormMsg+0x1ac>
 800a970:	2b01      	cmp	r3, #1
 800a972:	d002      	beq.n	800a97a <ReadAndFormMsg+0x56>
 800a974:	2b02      	cmp	r3, #2
 800a976:	d00e      	beq.n	800a996 <ReadAndFormMsg+0x72>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800a978:	e0aa      	b.n	800aad0 <ReadAndFormMsg+0x1ac>
			if(START_OF_MESSAGE == suc_RByte)
 800a97a:	7bfb      	ldrb	r3, [r7, #15]
 800a97c:	2b24      	cmp	r3, #36	; 0x24
 800a97e:	f040 80a9 	bne.w	800aad4 <ReadAndFormMsg+0x1b0>
				puc_ReadMsg[ZERO] = suc_RByte;
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	7bfa      	ldrb	r2, [r7, #15]
 800a986:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800a988:	4b62      	ldr	r3, [pc, #392]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800a98a:	2201      	movs	r2, #1
 800a98c:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800a98e:	4b60      	ldr	r3, [pc, #384]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800a990:	2202      	movs	r2, #2
 800a992:	701a      	strb	r2, [r3, #0]
			break;
 800a994:	e09e      	b.n	800aad4 <ReadAndFormMsg+0x1b0>
			switch(suc_RByte)
 800a996:	7bfb      	ldrb	r3, [r7, #15]
 800a998:	2b26      	cmp	r3, #38	; 0x26
 800a99a:	d006      	beq.n	800a9aa <ReadAndFormMsg+0x86>
 800a99c:	2b26      	cmp	r3, #38	; 0x26
 800a99e:	dc6e      	bgt.n	800aa7e <ReadAndFormMsg+0x15a>
 800a9a0:	2b05      	cmp	r3, #5
 800a9a2:	d068      	beq.n	800aa76 <ReadAndFormMsg+0x152>
 800a9a4:	2b24      	cmp	r3, #36	; 0x24
 800a9a6:	d05c      	beq.n	800aa62 <ReadAndFormMsg+0x13e>
 800a9a8:	e069      	b.n	800aa7e <ReadAndFormMsg+0x15a>
				sus_CRC = j-2;
 800a9aa:	4b5a      	ldr	r3, [pc, #360]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800a9ac:	881b      	ldrh	r3, [r3, #0]
 800a9ae:	3b02      	subs	r3, #2
 800a9b0:	b29b      	uxth	r3, r3
 800a9b2:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = j;
 800a9b4:	4b57      	ldr	r3, [pc, #348]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800a9b6:	881b      	ldrh	r3, [r3, #0]
 800a9b8:	817b      	strh	r3, [r7, #10]
				j = ZERO;
 800a9ba:	4b56      	ldr	r3, [pc, #344]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800a9bc:	2200      	movs	r2, #0
 800a9be:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800a9c0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	da01      	bge.n	800a9cc <ReadAndFormMsg+0xa8>
					return 0;
 800a9c8:	2300      	movs	r3, #0
 800a9ca:	e099      	b.n	800ab00 <ReadAndFormMsg+0x1dc>
				suc_RcvStatus = ONE;
 800a9cc:	4b50      	ldr	r3, [pc, #320]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	701a      	strb	r2, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800a9d2:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
						puc_ReadMsg[sus_CRC],
 800a9d6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	4413      	add	r3, r2
 800a9de:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800a9e0:	461c      	mov	r4, r3
 800a9e2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a9e6:	1c58      	adds	r0, r3, #1
						puc_ReadMsg[sus_CRC+1]);
 800a9e8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800a9ec:	3301      	adds	r3, #1
 800a9ee:	683a      	ldr	r2, [r7, #0]
 800a9f0:	4413      	add	r3, r2
 800a9f2:	781b      	ldrb	r3, [r3, #0]
				printf("\n SDM Check sum IRDMI: [%d]%x [%d]%x",sus_CRC,
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	4603      	mov	r3, r0
 800a9f8:	4622      	mov	r2, r4
 800a9fa:	4847      	ldr	r0, [pc, #284]	; (800ab18 <ReadAndFormMsg+0x1f4>)
 800a9fc:	f017 fc56 	bl	80222ac <iprintf>
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800aa00:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa04:	4619      	mov	r1, r3
 800aa06:	6838      	ldr	r0, [r7, #0]
 800aa08:	f007 ff60 	bl	80128cc <CheckCRC>
 800aa0c:	4603      	mov	r3, r0
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d012      	beq.n	800aa38 <ReadAndFormMsg+0x114>
					printf("CRC OK [%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800aa12:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa16:	683a      	ldr	r2, [r7, #0]
 800aa18:	4413      	add	r3, r2
 800aa1a:	781b      	ldrb	r3, [r3, #0]
 800aa1c:	4619      	mov	r1, r3
 800aa1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa22:	3301      	adds	r3, #1
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	4413      	add	r3, r2
 800aa28:	781b      	ldrb	r3, [r3, #0]
 800aa2a:	461a      	mov	r2, r3
 800aa2c:	483b      	ldr	r0, [pc, #236]	; (800ab1c <ReadAndFormMsg+0x1f8>)
 800aa2e:	f017 fc3d 	bl	80222ac <iprintf>
					return us_ReturnBytes;
 800aa32:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800aa36:	e063      	b.n	800ab00 <ReadAndFormMsg+0x1dc>
					printf("\nCRC NOK ");
 800aa38:	4839      	ldr	r0, [pc, #228]	; (800ab20 <ReadAndFormMsg+0x1fc>)
 800aa3a:	f017 fc37 	bl	80222ac <iprintf>
					printf("[%x] [%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800aa3e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa42:	683a      	ldr	r2, [r7, #0]
 800aa44:	4413      	add	r3, r2
 800aa46:	781b      	ldrb	r3, [r3, #0]
 800aa48:	4619      	mov	r1, r3
 800aa4a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800aa4e:	3301      	adds	r3, #1
 800aa50:	683a      	ldr	r2, [r7, #0]
 800aa52:	4413      	add	r3, r2
 800aa54:	781b      	ldrb	r3, [r3, #0]
 800aa56:	461a      	mov	r2, r3
 800aa58:	4832      	ldr	r0, [pc, #200]	; (800ab24 <ReadAndFormMsg+0x200>)
 800aa5a:	f017 fc27 	bl	80222ac <iprintf>
					return 0;
 800aa5e:	2300      	movs	r3, #0
 800aa60:	e04e      	b.n	800ab00 <ReadAndFormMsg+0x1dc>
				puc_ReadMsg[ZERO] = suc_RByte;
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	7bfa      	ldrb	r2, [r7, #15]
 800aa66:	701a      	strb	r2, [r3, #0]
				j = ONE;
 800aa68:	4b2a      	ldr	r3, [pc, #168]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800aa6e:	4b28      	ldr	r3, [pc, #160]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800aa70:	2202      	movs	r2, #2
 800aa72:	701a      	strb	r2, [r3, #0]
				break;
 800aa74:	e011      	b.n	800aa9a <ReadAndFormMsg+0x176>
				suc_RcvStatus = THREE;
 800aa76:	4b26      	ldr	r3, [pc, #152]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800aa78:	2203      	movs	r2, #3
 800aa7a:	701a      	strb	r2, [r3, #0]
				break;
 800aa7c:	e00d      	b.n	800aa9a <ReadAndFormMsg+0x176>
				puc_ReadMsg[j] = suc_RByte;
 800aa7e:	4b25      	ldr	r3, [pc, #148]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aa80:	881b      	ldrh	r3, [r3, #0]
 800aa82:	461a      	mov	r2, r3
 800aa84:	683b      	ldr	r3, [r7, #0]
 800aa86:	4413      	add	r3, r2
 800aa88:	7bfa      	ldrb	r2, [r7, #15]
 800aa8a:	701a      	strb	r2, [r3, #0]
				j++;
 800aa8c:	4b21      	ldr	r3, [pc, #132]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aa8e:	881b      	ldrh	r3, [r3, #0]
 800aa90:	3301      	adds	r3, #1
 800aa92:	b29a      	uxth	r2, r3
 800aa94:	4b1f      	ldr	r3, [pc, #124]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aa96:	801a      	strh	r2, [r3, #0]
				break;
 800aa98:	bf00      	nop
			break;
 800aa9a:	e01c      	b.n	800aad6 <ReadAndFormMsg+0x1b2>
				if((START_OF_MESSAGE == suc_RByte)
 800aa9c:	7bfb      	ldrb	r3, [r7, #15]
 800aa9e:	2b24      	cmp	r3, #36	; 0x24
 800aaa0:	d005      	beq.n	800aaae <ReadAndFormMsg+0x18a>
						|| (END_OF_MESSAGE == suc_RByte)
 800aaa2:	7bfb      	ldrb	r3, [r7, #15]
 800aaa4:	2b26      	cmp	r3, #38	; 0x26
 800aaa6:	d002      	beq.n	800aaae <ReadAndFormMsg+0x18a>
						|| (DLE == suc_RByte))
 800aaa8:	7bfb      	ldrb	r3, [r7, #15]
 800aaaa:	2b05      	cmp	r3, #5
 800aaac:	d10c      	bne.n	800aac8 <ReadAndFormMsg+0x1a4>
					puc_ReadMsg[j] = suc_RByte;
 800aaae:	4b19      	ldr	r3, [pc, #100]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aab0:	881b      	ldrh	r3, [r3, #0]
 800aab2:	461a      	mov	r2, r3
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	4413      	add	r3, r2
 800aab8:	7bfa      	ldrb	r2, [r7, #15]
 800aaba:	701a      	strb	r2, [r3, #0]
					j++;
 800aabc:	4b15      	ldr	r3, [pc, #84]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aabe:	881b      	ldrh	r3, [r3, #0]
 800aac0:	3301      	adds	r3, #1
 800aac2:	b29a      	uxth	r2, r3
 800aac4:	4b13      	ldr	r3, [pc, #76]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aac6:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800aac8:	4b11      	ldr	r3, [pc, #68]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800aaca:	2202      	movs	r2, #2
 800aacc:	701a      	strb	r2, [r3, #0]
				break;
 800aace:	e002      	b.n	800aad6 <ReadAndFormMsg+0x1b2>
				break;
 800aad0:	bf00      	nop
 800aad2:	e000      	b.n	800aad6 <ReadAndFormMsg+0x1b2>
			break;
 800aad4:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( j >= us_MaxSize)
 800aad6:	4b0f      	ldr	r3, [pc, #60]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aad8:	881b      	ldrh	r3, [r3, #0]
 800aada:	88ba      	ldrh	r2, [r7, #4]
 800aadc:	429a      	cmp	r2, r3
 800aade:	d805      	bhi.n	800aaec <ReadAndFormMsg+0x1c8>
		{
			suc_RcvStatus = ONE;
 800aae0:	4b0b      	ldr	r3, [pc, #44]	; (800ab10 <ReadAndFormMsg+0x1ec>)
 800aae2:	2201      	movs	r2, #1
 800aae4:	701a      	strb	r2, [r3, #0]
			j = ZERO;
 800aae6:	4b0b      	ldr	r3, [pc, #44]	; (800ab14 <ReadAndFormMsg+0x1f0>)
 800aae8:	2200      	movs	r2, #0
 800aaea:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800aaec:	88fb      	ldrh	r3, [r7, #6]
 800aaee:	b2db      	uxtb	r3, r3
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	f00a f869 	bl	8014bc8 <Com_DataReady>
 800aaf6:	4603      	mov	r3, r0
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	f47f af22 	bne.w	800a942 <ReadAndFormMsg+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800aafe:	2300      	movs	r3, #0
}
 800ab00:	4618      	mov	r0, r3
 800ab02:	3714      	adds	r7, #20
 800ab04:	46bd      	mov	sp, r7
 800ab06:	bd90      	pop	{r4, r7, pc}
 800ab08:	20000a4a 	.word	0x20000a4a
 800ab0c:	20009c68 	.word	0x20009c68
 800ab10:	20000117 	.word	0x20000117
 800ab14:	200027cc 	.word	0x200027cc
 800ab18:	080258a0 	.word	0x080258a0
 800ab1c:	080258c8 	.word	0x080258c8
 800ab20:	080258dc 	.word	0x080258dc
 800ab24:	080258e8 	.word	0x080258e8

0800ab28 <SendAck>:


void SendAck(unsigned char uc_port, unsigned char Opcode, unsigned char ACK)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b086      	sub	sp, #24
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	4603      	mov	r3, r0
 800ab30:	71fb      	strb	r3, [r7, #7]
 800ab32:	460b      	mov	r3, r1
 800ab34:	71bb      	strb	r3, [r7, #6]
 800ab36:	4613      	mov	r3, r2
 800ab38:	717b      	strb	r3, [r7, #5]
	uint32_t AckTim=0;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	617b      	str	r3, [r7, #20]
	unsigned char puc_Message[10] = {0,};
 800ab3e:	2300      	movs	r3, #0
 800ab40:	60bb      	str	r3, [r7, #8]
 800ab42:	f107 030c 	add.w	r3, r7, #12
 800ab46:	2200      	movs	r2, #0
 800ab48:	601a      	str	r2, [r3, #0]
 800ab4a:	809a      	strh	r2, [r3, #4]

	puc_Message[0]= '$';
 800ab4c:	2324      	movs	r3, #36	; 0x24
 800ab4e:	723b      	strb	r3, [r7, #8]
	puc_Message[1]=((unsigned char ) (Opcode >> 8) & 0xff);
 800ab50:	79bb      	ldrb	r3, [r7, #6]
 800ab52:	121b      	asrs	r3, r3, #8
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	727b      	strb	r3, [r7, #9]
	puc_Message[2]= (unsigned char ) (Opcode & 0xff);
 800ab58:	79bb      	ldrb	r3, [r7, #6]
 800ab5a:	72bb      	strb	r3, [r7, #10]
	puc_Message[3]= ACK;
 800ab5c:	797b      	ldrb	r3, [r7, #5]
 800ab5e:	72fb      	strb	r3, [r7, #11]

	ComputeCRC(puc_Message, 4);
 800ab60:	f107 0308 	add.w	r3, r7, #8
 800ab64:	2104      	movs	r1, #4
 800ab66:	4618      	mov	r0, r3
 800ab68:	f007 ff5a 	bl	8012a20 <ComputeCRC>
	puc_Message[6]= '&';
 800ab6c:	2326      	movs	r3, #38	; 0x26
 800ab6e:	73bb      	strb	r3, [r7, #14]
	printf("\nSending Ack CRC [%x][%x]\n",puc_Message[4],puc_Message[5]);
 800ab70:	7b3b      	ldrb	r3, [r7, #12]
 800ab72:	4619      	mov	r1, r3
 800ab74:	7b7b      	ldrb	r3, [r7, #13]
 800ab76:	461a      	mov	r2, r3
 800ab78:	480f      	ldr	r0, [pc, #60]	; (800abb8 <SendAck+0x90>)
 800ab7a:	f017 fb97 	bl	80222ac <iprintf>

	AckTim=HAL_GetTick();
 800ab7e:	f00a fb8b 	bl	8015298 <HAL_GetTick>
 800ab82:	6178      	str	r0, [r7, #20]

	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800ab84:	e002      	b.n	800ab8c <SendAck+0x64>
	{
		HAL_IWDG_Refresh(&hiwdg);
 800ab86:	480d      	ldr	r0, [pc, #52]	; (800abbc <SendAck+0x94>)
 800ab88:	f00d feec 	bl	8018964 <HAL_IWDG_Refresh>
	while( HAL_Elaps_Ticks(AckTim) < 1500)
 800ab8c:	6978      	ldr	r0, [r7, #20]
 800ab8e:	f003 fe37 	bl	800e800 <HAL_Elaps_Ticks>
 800ab92:	4603      	mov	r3, r0
 800ab94:	f240 52db 	movw	r2, #1499	; 0x5db
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d9f4      	bls.n	800ab86 <SendAck+0x5e>
	}

	CommTransmitMessage(uc_port,puc_Message, 6);
 800ab9c:	f107 0108 	add.w	r1, r7, #8
 800aba0:	79fb      	ldrb	r3, [r7, #7]
 800aba2:	2206      	movs	r2, #6
 800aba4:	4618      	mov	r0, r3
 800aba6:	f00a f8cf 	bl	8014d48 <CommTransmitMessage>

	AckTim = 0;
 800abaa:	2300      	movs	r3, #0
 800abac:	617b      	str	r3, [r7, #20]
}
 800abae:	bf00      	nop
 800abb0:	3718      	adds	r7, #24
 800abb2:	46bd      	mov	sp, r7
 800abb4:	bd80      	pop	{r7, pc}
 800abb6:	bf00      	nop
 800abb8:	080258f4 	.word	0x080258f4
 800abbc:	20009c68 	.word	0x20009c68

0800abc0 <ReadAndFormConfig>:

short int ReadAndFormConfig(unsigned short int us_Port,
		unsigned char*puc_ReadMsg,unsigned short int us_MaxSize)
{
 800abc0:	b580      	push	{r7, lr}
 800abc2:	b084      	sub	sp, #16
 800abc4:	af00      	add	r7, sp, #0
 800abc6:	4603      	mov	r3, r0
 800abc8:	6039      	str	r1, [r7, #0]
 800abca:	80fb      	strh	r3, [r7, #6]
 800abcc:	4613      	mov	r3, r2
 800abce:	80bb      	strh	r3, [r7, #4]
	static unsigned char suc_RcvStatus = ONE;
	unsigned char suc_RByte = ZERO;
 800abd0:	2300      	movs	r3, #0
 800abd2:	73fb      	strb	r3, [r7, #15]
	static unsigned short int i = ZERO;
	short int sus_CRC = ZERO;
 800abd4:	2300      	movs	r3, #0
 800abd6:	81bb      	strh	r3, [r7, #12]
	unsigned short int us_ReturnBytes = ZERO;
 800abd8:	2300      	movs	r3, #0
 800abda:	817b      	strh	r3, [r7, #10]
	/* If data available on port read and store data */
	//	if(SpoiElapsTICs(updateClk) > 5000 )
	//		*UpdateFlag = 0;


	while(Com_DataReady(us_Port))
 800abdc:	e0ba      	b.n	800ad54 <ReadAndFormConfig+0x194>
	{
		// *UpdateFlag = 1;
		// updateClk = SpoiGetSysTICs();


		suc_RByte = Com_Get_Byte(us_Port);
 800abde:	88fb      	ldrh	r3, [r7, #6]
 800abe0:	b2db      	uxtb	r3, r3
 800abe2:	4618      	mov	r0, r3
 800abe4:	f00a f830 	bl	8014c48 <Com_Get_Byte>
 800abe8:	4603      	mov	r3, r0
 800abea:	73fb      	strb	r3, [r7, #15]
		Enable_UART_Interrupts();
 800abec:	f00a f942 	bl	8014e74 <Enable_UART_Interrupts>

		HAL_IWDG_Refresh(&hiwdg);
 800abf0:	485f      	ldr	r0, [pc, #380]	; (800ad70 <ReadAndFormConfig+0x1b0>)
 800abf2:	f00d feb7 	bl	8018964 <HAL_IWDG_Refresh>
		//	Delay_SRAM(1000);
		//printf("DaTA\n");
		//printf("%x ",suc_RByte);
		switch(suc_RcvStatus)
 800abf6:	4b5f      	ldr	r3, [pc, #380]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800abf8:	781b      	ldrb	r3, [r3, #0]
 800abfa:	2b03      	cmp	r3, #3
 800abfc:	f000 8082 	beq.w	800ad04 <ReadAndFormConfig+0x144>
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	f300 8099 	bgt.w	800ad38 <ReadAndFormConfig+0x178>
 800ac06:	2b01      	cmp	r3, #1
 800ac08:	d002      	beq.n	800ac10 <ReadAndFormConfig+0x50>
 800ac0a:	2b02      	cmp	r3, #2
 800ac0c:	d00e      	beq.n	800ac2c <ReadAndFormConfig+0x6c>
				}
				suc_RcvStatus = TWO;
				break;

			default:
				break;
 800ac0e:	e093      	b.n	800ad38 <ReadAndFormConfig+0x178>
			if(START_OF_MESSAGE == suc_RByte)
 800ac10:	7bfb      	ldrb	r3, [r7, #15]
 800ac12:	2b24      	cmp	r3, #36	; 0x24
 800ac14:	f040 8092 	bne.w	800ad3c <ReadAndFormConfig+0x17c>
				puc_ReadMsg[ZERO] = suc_RByte;
 800ac18:	683b      	ldr	r3, [r7, #0]
 800ac1a:	7bfa      	ldrb	r2, [r7, #15]
 800ac1c:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800ac1e:	4b56      	ldr	r3, [pc, #344]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ac20:	2201      	movs	r2, #1
 800ac22:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ac24:	4b53      	ldr	r3, [pc, #332]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800ac26:	2202      	movs	r2, #2
 800ac28:	701a      	strb	r2, [r3, #0]
			break;
 800ac2a:	e087      	b.n	800ad3c <ReadAndFormConfig+0x17c>
			switch(suc_RByte)
 800ac2c:	7bfb      	ldrb	r3, [r7, #15]
 800ac2e:	2b26      	cmp	r3, #38	; 0x26
 800ac30:	d006      	beq.n	800ac40 <ReadAndFormConfig+0x80>
 800ac32:	2b26      	cmp	r3, #38	; 0x26
 800ac34:	dc57      	bgt.n	800ace6 <ReadAndFormConfig+0x126>
 800ac36:	2b05      	cmp	r3, #5
 800ac38:	d051      	beq.n	800acde <ReadAndFormConfig+0x11e>
 800ac3a:	2b24      	cmp	r3, #36	; 0x24
 800ac3c:	d045      	beq.n	800acca <ReadAndFormConfig+0x10a>
 800ac3e:	e052      	b.n	800ace6 <ReadAndFormConfig+0x126>
				sus_CRC = i-2;
 800ac40:	4b4d      	ldr	r3, [pc, #308]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ac42:	881b      	ldrh	r3, [r3, #0]
 800ac44:	3b02      	subs	r3, #2
 800ac46:	b29b      	uxth	r3, r3
 800ac48:	81bb      	strh	r3, [r7, #12]
				us_ReturnBytes = i;
 800ac4a:	4b4b      	ldr	r3, [pc, #300]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ac4c:	881b      	ldrh	r3, [r3, #0]
 800ac4e:	817b      	strh	r3, [r7, #10]
				i = ZERO;
 800ac50:	4b49      	ldr	r3, [pc, #292]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ac52:	2200      	movs	r2, #0
 800ac54:	801a      	strh	r2, [r3, #0]
				if (sus_CRC < 0)
 800ac56:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	da01      	bge.n	800ac62 <ReadAndFormConfig+0xa2>
					return 0;
 800ac5e:	2300      	movs	r3, #0
 800ac60:	e082      	b.n	800ad68 <ReadAndFormConfig+0x1a8>
				suc_RcvStatus = ONE;
 800ac62:	4b44      	ldr	r3, [pc, #272]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800ac64:	2201      	movs	r2, #1
 800ac66:	701a      	strb	r2, [r3, #0]
				if(CheckCRC(puc_ReadMsg, sus_CRC))
 800ac68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac6c:	4619      	mov	r1, r3
 800ac6e:	6838      	ldr	r0, [r7, #0]
 800ac70:	f007 fe2c 	bl	80128cc <CheckCRC>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d012      	beq.n	800aca0 <ReadAndFormConfig+0xe0>
					printf("CRC OK [%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800ac7a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	4413      	add	r3, r2
 800ac82:	781b      	ldrb	r3, [r3, #0]
 800ac84:	4619      	mov	r1, r3
 800ac86:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800ac8a:	3301      	adds	r3, #1
 800ac8c:	683a      	ldr	r2, [r7, #0]
 800ac8e:	4413      	add	r3, r2
 800ac90:	781b      	ldrb	r3, [r3, #0]
 800ac92:	461a      	mov	r2, r3
 800ac94:	4839      	ldr	r0, [pc, #228]	; (800ad7c <ReadAndFormConfig+0x1bc>)
 800ac96:	f017 fb09 	bl	80222ac <iprintf>
					return us_ReturnBytes;
 800ac9a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800ac9e:	e063      	b.n	800ad68 <ReadAndFormConfig+0x1a8>
					printf("\nCRC NOK ");
 800aca0:	4837      	ldr	r0, [pc, #220]	; (800ad80 <ReadAndFormConfig+0x1c0>)
 800aca2:	f017 fb03 	bl	80222ac <iprintf>
					printf("[%x][%x]\n",puc_ReadMsg[sus_CRC], puc_ReadMsg[sus_CRC+1]);
 800aca6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800acaa:	683a      	ldr	r2, [r7, #0]
 800acac:	4413      	add	r3, r2
 800acae:	781b      	ldrb	r3, [r3, #0]
 800acb0:	4619      	mov	r1, r3
 800acb2:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800acb6:	3301      	adds	r3, #1
 800acb8:	683a      	ldr	r2, [r7, #0]
 800acba:	4413      	add	r3, r2
 800acbc:	781b      	ldrb	r3, [r3, #0]
 800acbe:	461a      	mov	r2, r3
 800acc0:	4830      	ldr	r0, [pc, #192]	; (800ad84 <ReadAndFormConfig+0x1c4>)
 800acc2:	f017 faf3 	bl	80222ac <iprintf>
					return 0;
 800acc6:	2300      	movs	r3, #0
 800acc8:	e04e      	b.n	800ad68 <ReadAndFormConfig+0x1a8>
				puc_ReadMsg[ZERO] = suc_RByte;
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	7bfa      	ldrb	r2, [r7, #15]
 800acce:	701a      	strb	r2, [r3, #0]
				i = ONE;
 800acd0:	4b29      	ldr	r3, [pc, #164]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800acd2:	2201      	movs	r2, #1
 800acd4:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800acd6:	4b27      	ldr	r3, [pc, #156]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800acd8:	2202      	movs	r2, #2
 800acda:	701a      	strb	r2, [r3, #0]
				break;
 800acdc:	e011      	b.n	800ad02 <ReadAndFormConfig+0x142>
				suc_RcvStatus = THREE;
 800acde:	4b25      	ldr	r3, [pc, #148]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800ace0:	2203      	movs	r2, #3
 800ace2:	701a      	strb	r2, [r3, #0]
				break;
 800ace4:	e00d      	b.n	800ad02 <ReadAndFormConfig+0x142>
				puc_ReadMsg[i] = suc_RByte;
 800ace6:	4b24      	ldr	r3, [pc, #144]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ace8:	881b      	ldrh	r3, [r3, #0]
 800acea:	461a      	mov	r2, r3
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	4413      	add	r3, r2
 800acf0:	7bfa      	ldrb	r2, [r7, #15]
 800acf2:	701a      	strb	r2, [r3, #0]
				i++;
 800acf4:	4b20      	ldr	r3, [pc, #128]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800acf6:	881b      	ldrh	r3, [r3, #0]
 800acf8:	3301      	adds	r3, #1
 800acfa:	b29a      	uxth	r2, r3
 800acfc:	4b1e      	ldr	r3, [pc, #120]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800acfe:	801a      	strh	r2, [r3, #0]
				break;
 800ad00:	bf00      	nop
			break;
 800ad02:	e01c      	b.n	800ad3e <ReadAndFormConfig+0x17e>
				if((START_OF_MESSAGE == suc_RByte)
 800ad04:	7bfb      	ldrb	r3, [r7, #15]
 800ad06:	2b24      	cmp	r3, #36	; 0x24
 800ad08:	d005      	beq.n	800ad16 <ReadAndFormConfig+0x156>
						|| (END_OF_MESSAGE == suc_RByte)
 800ad0a:	7bfb      	ldrb	r3, [r7, #15]
 800ad0c:	2b26      	cmp	r3, #38	; 0x26
 800ad0e:	d002      	beq.n	800ad16 <ReadAndFormConfig+0x156>
						|| (DLE == suc_RByte))
 800ad10:	7bfb      	ldrb	r3, [r7, #15]
 800ad12:	2b05      	cmp	r3, #5
 800ad14:	d10c      	bne.n	800ad30 <ReadAndFormConfig+0x170>
					puc_ReadMsg[i] = suc_RByte;
 800ad16:	4b18      	ldr	r3, [pc, #96]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ad18:	881b      	ldrh	r3, [r3, #0]
 800ad1a:	461a      	mov	r2, r3
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	4413      	add	r3, r2
 800ad20:	7bfa      	ldrb	r2, [r7, #15]
 800ad22:	701a      	strb	r2, [r3, #0]
					i++;
 800ad24:	4b14      	ldr	r3, [pc, #80]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ad26:	881b      	ldrh	r3, [r3, #0]
 800ad28:	3301      	adds	r3, #1
 800ad2a:	b29a      	uxth	r2, r3
 800ad2c:	4b12      	ldr	r3, [pc, #72]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ad2e:	801a      	strh	r2, [r3, #0]
				suc_RcvStatus = TWO;
 800ad30:	4b10      	ldr	r3, [pc, #64]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800ad32:	2202      	movs	r2, #2
 800ad34:	701a      	strb	r2, [r3, #0]
				break;
 800ad36:	e002      	b.n	800ad3e <ReadAndFormConfig+0x17e>
				break;
 800ad38:	bf00      	nop
 800ad3a:	e000      	b.n	800ad3e <ReadAndFormConfig+0x17e>
			break;
 800ad3c:	bf00      	nop
		}    /* End of switch*/

		/* If receiving invalid message, ZERO message buffer */

		if( i >= us_MaxSize)
 800ad3e:	4b0e      	ldr	r3, [pc, #56]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ad40:	881b      	ldrh	r3, [r3, #0]
 800ad42:	88ba      	ldrh	r2, [r7, #4]
 800ad44:	429a      	cmp	r2, r3
 800ad46:	d805      	bhi.n	800ad54 <ReadAndFormConfig+0x194>
		{
			suc_RcvStatus = ONE;
 800ad48:	4b0a      	ldr	r3, [pc, #40]	; (800ad74 <ReadAndFormConfig+0x1b4>)
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	701a      	strb	r2, [r3, #0]
			i = ZERO;
 800ad4e:	4b0a      	ldr	r3, [pc, #40]	; (800ad78 <ReadAndFormConfig+0x1b8>)
 800ad50:	2200      	movs	r2, #0
 800ad52:	801a      	strh	r2, [r3, #0]
	while(Com_DataReady(us_Port))
 800ad54:	88fb      	ldrh	r3, [r7, #6]
 800ad56:	b2db      	uxtb	r3, r3
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f009 ff35 	bl	8014bc8 <Com_DataReady>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	2b00      	cmp	r3, #0
 800ad62:	f47f af3c 	bne.w	800abde <ReadAndFormConfig+0x1e>
		}
	}	    /* End of While data ready */

	return ZERO;
 800ad66:	2300      	movs	r3, #0
}
 800ad68:	4618      	mov	r0, r3
 800ad6a:	3710      	adds	r7, #16
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	bd80      	pop	{r7, pc}
 800ad70:	20009c68 	.word	0x20009c68
 800ad74:	20000118 	.word	0x20000118
 800ad78:	200027ce 	.word	0x200027ce
 800ad7c:	08025910 	.word	0x08025910
 800ad80:	080258dc 	.word	0x080258dc
 800ad84:	08025924 	.word	0x08025924

0800ad88 <bcdToDec>:
#define RTC_I2C_ADDR 			0xD0 //0x68<<1
#define TEMPERATURE_I2C_ADDR 	0x90 //0x48<<1


uint8_t bcdToDec(const uint8_t Kuc_bcd)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	4603      	mov	r3, r0
 800ad90:	71fb      	strb	r3, [r7, #7]
	return (((Kuc_bcd/16)*10) + (Kuc_bcd%16));
 800ad92:	79fb      	ldrb	r3, [r7, #7]
 800ad94:	091b      	lsrs	r3, r3, #4
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	461a      	mov	r2, r3
 800ad9a:	0092      	lsls	r2, r2, #2
 800ad9c:	4413      	add	r3, r2
 800ad9e:	005b      	lsls	r3, r3, #1
 800ada0:	b2da      	uxtb	r2, r3
 800ada2:	79fb      	ldrb	r3, [r7, #7]
 800ada4:	f003 030f 	and.w	r3, r3, #15
 800ada8:	b2db      	uxtb	r3, r3
 800adaa:	4413      	add	r3, r2
 800adac:	b2db      	uxtb	r3, r3
}
 800adae:	4618      	mov	r0, r3
 800adb0:	370c      	adds	r7, #12
 800adb2:	46bd      	mov	sp, r7
 800adb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb8:	4770      	bx	lr
	...

0800adbc <Dec_to_BCD>:

uint8_t Dec_to_BCD(uint8_t c)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b083      	sub	sp, #12
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	4603      	mov	r3, r0
 800adc4:	71fb      	strb	r3, [r7, #7]
	c=((c/10)*16)+(c%10);
 800adc6:	79fb      	ldrb	r3, [r7, #7]
 800adc8:	4a0d      	ldr	r2, [pc, #52]	; (800ae00 <Dec_to_BCD+0x44>)
 800adca:	fba2 2303 	umull	r2, r3, r2, r3
 800adce:	08db      	lsrs	r3, r3, #3
 800add0:	b2db      	uxtb	r3, r3
 800add2:	011b      	lsls	r3, r3, #4
 800add4:	b2d8      	uxtb	r0, r3
 800add6:	79fa      	ldrb	r2, [r7, #7]
 800add8:	4b09      	ldr	r3, [pc, #36]	; (800ae00 <Dec_to_BCD+0x44>)
 800adda:	fba3 1302 	umull	r1, r3, r3, r2
 800adde:	08d9      	lsrs	r1, r3, #3
 800ade0:	460b      	mov	r3, r1
 800ade2:	009b      	lsls	r3, r3, #2
 800ade4:	440b      	add	r3, r1
 800ade6:	005b      	lsls	r3, r3, #1
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	b2db      	uxtb	r3, r3
 800adec:	4403      	add	r3, r0
 800adee:	71fb      	strb	r3, [r7, #7]
	return c;
 800adf0:	79fb      	ldrb	r3, [r7, #7]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	370c      	adds	r7, #12
 800adf6:	46bd      	mov	sp, r7
 800adf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	cccccccd 	.word	0xcccccccd

0800ae04 <Is_GPS_Valid>:

uint8_t Is_GPS_Valid(void)
{
 800ae04:	b480      	push	{r7}
 800ae06:	af00      	add	r7, sp, #0
	//printf("\n%u:%u:%u|%u/%u/%u\n",Gps_date_time_st.ucHour,Gps_date_time_st.ucMin,Gps_date_time_st.ucSec,Gps_date_time_st.ucDate,Gps_date_time_st.ucMonth,Gps_date_time_st.ucYear);

	if(Gps_date_time_st.Year < 10)
 800ae08:	4b0b      	ldr	r3, [pc, #44]	; (800ae38 <Is_GPS_Valid+0x34>)
 800ae0a:	795b      	ldrb	r3, [r3, #5]
 800ae0c:	2b09      	cmp	r3, #9
 800ae0e:	d801      	bhi.n	800ae14 <Is_GPS_Valid+0x10>
	{
		return 0;
 800ae10:	2300      	movs	r3, #0
 800ae12:	e00c      	b.n	800ae2e <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Mont == 0 )
 800ae14:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <Is_GPS_Valid+0x34>)
 800ae16:	791b      	ldrb	r3, [r3, #4]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d101      	bne.n	800ae20 <Is_GPS_Valid+0x1c>
	{
		return 0;
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e006      	b.n	800ae2e <Is_GPS_Valid+0x2a>
	}
	if(Gps_date_time_st.Date == 0 )
 800ae20:	4b05      	ldr	r3, [pc, #20]	; (800ae38 <Is_GPS_Valid+0x34>)
 800ae22:	78db      	ldrb	r3, [r3, #3]
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d101      	bne.n	800ae2c <Is_GPS_Valid+0x28>
	{
		return 0;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	e000      	b.n	800ae2e <Is_GPS_Valid+0x2a>
	}
	return 1;
 800ae2c:	2301      	movs	r3, #1
}
 800ae2e:	4618      	mov	r0, r3
 800ae30:	46bd      	mov	sp, r7
 800ae32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae36:	4770      	bx	lr
 800ae38:	200027d0 	.word	0x200027d0

0800ae3c <Write_RTC>:


void Write_RTC(void)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af04      	add	r7, sp, #16
	uint8_t set_time[7] = {0,};
 800ae42:	2300      	movs	r3, #0
 800ae44:	603b      	str	r3, [r7, #0]
 800ae46:	1d3b      	adds	r3, r7, #4
 800ae48:	2100      	movs	r1, #0
 800ae4a:	460a      	mov	r2, r1
 800ae4c:	801a      	strh	r2, [r3, #0]
 800ae4e:	460a      	mov	r2, r1
 800ae50:	709a      	strb	r2, [r3, #2]

	if(Is_GPS_Valid() ==0)
 800ae52:	f7ff ffd7 	bl	800ae04 <Is_GPS_Valid>
 800ae56:	4603      	mov	r3, r0
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d103      	bne.n	800ae64 <Write_RTC+0x28>
	{
		printf("Invalid DATE received from MIE\n");
 800ae5c:	4844      	ldr	r0, [pc, #272]	; (800af70 <Write_RTC+0x134>)
 800ae5e:	f017 fac1 	bl	80223e4 <puts>
 800ae62:	e081      	b.n	800af68 <Write_RTC+0x12c>
		return;
	}


	Is_GPS_Packet_Received = 1;
 800ae64:	4b43      	ldr	r3, [pc, #268]	; (800af74 <Write_RTC+0x138>)
 800ae66:	2201      	movs	r2, #1
 800ae68:	701a      	strb	r2, [r3, #0]

	set_time[0] = Dec_to_BCD(Gps_date_time_st.Secs);
 800ae6a:	4b43      	ldr	r3, [pc, #268]	; (800af78 <Write_RTC+0x13c>)
 800ae6c:	789b      	ldrb	r3, [r3, #2]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f7ff ffa4 	bl	800adbc <Dec_to_BCD>
 800ae74:	4603      	mov	r3, r0
 800ae76:	703b      	strb	r3, [r7, #0]
	set_time[1] = Dec_to_BCD(Gps_date_time_st.Mins);
 800ae78:	4b3f      	ldr	r3, [pc, #252]	; (800af78 <Write_RTC+0x13c>)
 800ae7a:	785b      	ldrb	r3, [r3, #1]
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f7ff ff9d 	bl	800adbc <Dec_to_BCD>
 800ae82:	4603      	mov	r3, r0
 800ae84:	707b      	strb	r3, [r7, #1]
	set_time[2] = Dec_to_BCD(Gps_date_time_st.Hour);
 800ae86:	4b3c      	ldr	r3, [pc, #240]	; (800af78 <Write_RTC+0x13c>)
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	4618      	mov	r0, r3
 800ae8c:	f7ff ff96 	bl	800adbc <Dec_to_BCD>
 800ae90:	4603      	mov	r3, r0
 800ae92:	70bb      	strb	r3, [r7, #2]

	set_time[3] = Dec_to_BCD(Gps_date_time_st.Date);
 800ae94:	4b38      	ldr	r3, [pc, #224]	; (800af78 <Write_RTC+0x13c>)
 800ae96:	78db      	ldrb	r3, [r3, #3]
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f7ff ff8f 	bl	800adbc <Dec_to_BCD>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	70fb      	strb	r3, [r7, #3]
	set_time[4] = Dec_to_BCD(Gps_date_time_st.Mont);
 800aea2:	4b35      	ldr	r3, [pc, #212]	; (800af78 <Write_RTC+0x13c>)
 800aea4:	791b      	ldrb	r3, [r3, #4]
 800aea6:	4618      	mov	r0, r3
 800aea8:	f7ff ff88 	bl	800adbc <Dec_to_BCD>
 800aeac:	4603      	mov	r3, r0
 800aeae:	713b      	strb	r3, [r7, #4]
	set_time[5] = Dec_to_BCD(Gps_date_time_st.Year);
 800aeb0:	4b31      	ldr	r3, [pc, #196]	; (800af78 <Write_RTC+0x13c>)
 800aeb2:	795b      	ldrb	r3, [r3, #5]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	f7ff ff81 	bl	800adbc <Dec_to_BCD>
 800aeba:	4603      	mov	r3, r0
 800aebc:	717b      	strb	r3, [r7, #5]

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X00,1,&set_time[0],1,1000); //Seconds
 800aebe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aec2:	9302      	str	r3, [sp, #8]
 800aec4:	2301      	movs	r3, #1
 800aec6:	9301      	str	r3, [sp, #4]
 800aec8:	463b      	mov	r3, r7
 800aeca:	9300      	str	r3, [sp, #0]
 800aecc:	2301      	movs	r3, #1
 800aece:	2200      	movs	r2, #0
 800aed0:	21d0      	movs	r1, #208	; 0xd0
 800aed2:	482a      	ldr	r0, [pc, #168]	; (800af7c <Write_RTC+0x140>)
 800aed4:	f00c ff98 	bl	8017e08 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X01,1,&set_time[1],1,1000); //Minutes
 800aed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aedc:	9302      	str	r3, [sp, #8]
 800aede:	2301      	movs	r3, #1
 800aee0:	9301      	str	r3, [sp, #4]
 800aee2:	463b      	mov	r3, r7
 800aee4:	3301      	adds	r3, #1
 800aee6:	9300      	str	r3, [sp, #0]
 800aee8:	2301      	movs	r3, #1
 800aeea:	2201      	movs	r2, #1
 800aeec:	21d0      	movs	r1, #208	; 0xd0
 800aeee:	4823      	ldr	r0, [pc, #140]	; (800af7c <Write_RTC+0x140>)
 800aef0:	f00c ff8a 	bl	8017e08 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X02,1,&set_time[2],1,1000); //Hour
 800aef4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800aef8:	9302      	str	r3, [sp, #8]
 800aefa:	2301      	movs	r3, #1
 800aefc:	9301      	str	r3, [sp, #4]
 800aefe:	463b      	mov	r3, r7
 800af00:	3302      	adds	r3, #2
 800af02:	9300      	str	r3, [sp, #0]
 800af04:	2301      	movs	r3, #1
 800af06:	2202      	movs	r2, #2
 800af08:	21d0      	movs	r1, #208	; 0xd0
 800af0a:	481c      	ldr	r0, [pc, #112]	; (800af7c <Write_RTC+0x140>)
 800af0c:	f00c ff7c 	bl	8017e08 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X04,1,&set_time[3],1,1000); //Date
 800af10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af14:	9302      	str	r3, [sp, #8]
 800af16:	2301      	movs	r3, #1
 800af18:	9301      	str	r3, [sp, #4]
 800af1a:	463b      	mov	r3, r7
 800af1c:	3303      	adds	r3, #3
 800af1e:	9300      	str	r3, [sp, #0]
 800af20:	2301      	movs	r3, #1
 800af22:	2204      	movs	r2, #4
 800af24:	21d0      	movs	r1, #208	; 0xd0
 800af26:	4815      	ldr	r0, [pc, #84]	; (800af7c <Write_RTC+0x140>)
 800af28:	f00c ff6e 	bl	8017e08 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X05,1,&set_time[4],1,1000); //Month
 800af2c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af30:	9302      	str	r3, [sp, #8]
 800af32:	2301      	movs	r3, #1
 800af34:	9301      	str	r3, [sp, #4]
 800af36:	463b      	mov	r3, r7
 800af38:	3304      	adds	r3, #4
 800af3a:	9300      	str	r3, [sp, #0]
 800af3c:	2301      	movs	r3, #1
 800af3e:	2205      	movs	r2, #5
 800af40:	21d0      	movs	r1, #208	; 0xd0
 800af42:	480e      	ldr	r0, [pc, #56]	; (800af7c <Write_RTC+0x140>)
 800af44:	f00c ff60 	bl	8017e08 <HAL_I2C_Mem_Write>

	HAL_I2C_Mem_Write(&hi2c1, RTC_I2C_ADDR,0X06,1,&set_time[5],1,1000); //Year
 800af48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af4c:	9302      	str	r3, [sp, #8]
 800af4e:	2301      	movs	r3, #1
 800af50:	9301      	str	r3, [sp, #4]
 800af52:	463b      	mov	r3, r7
 800af54:	3305      	adds	r3, #5
 800af56:	9300      	str	r3, [sp, #0]
 800af58:	2301      	movs	r3, #1
 800af5a:	2206      	movs	r2, #6
 800af5c:	21d0      	movs	r1, #208	; 0xd0
 800af5e:	4807      	ldr	r0, [pc, #28]	; (800af7c <Write_RTC+0x140>)
 800af60:	f00c ff52 	bl	8017e08 <HAL_I2C_Mem_Write>

	Get_time();
 800af64:	f000 f80c 	bl	800af80 <Get_time>

}
 800af68:	3708      	adds	r7, #8
 800af6a:	46bd      	mov	sp, r7
 800af6c:	bd80      	pop	{r7, pc}
 800af6e:	bf00      	nop
 800af70:	08025984 	.word	0x08025984
 800af74:	20000e6c 	.word	0x20000e6c
 800af78:	200027d0 	.word	0x200027d0
 800af7c:	20009bc0 	.word	0x20009bc0

0800af80 <Get_time>:


void Get_time(void)
{
 800af80:	b580      	push	{r7, lr}
 800af82:	b086      	sub	sp, #24
 800af84:	af04      	add	r7, sp, #16
	uint8_t get_time[7];

	memset(get_time,0,sizeof(get_time));
 800af86:	463b      	mov	r3, r7
 800af88:	2207      	movs	r2, #7
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f017 f8a5 	bl	80220dc <memset>
	HAL_I2C_Mem_Read(&hi2c1, RTC_I2C_ADDR,0X00,1,get_time,7,1000);
 800af92:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800af96:	9302      	str	r3, [sp, #8]
 800af98:	2307      	movs	r3, #7
 800af9a:	9301      	str	r3, [sp, #4]
 800af9c:	463b      	mov	r3, r7
 800af9e:	9300      	str	r3, [sp, #0]
 800afa0:	2301      	movs	r3, #1
 800afa2:	2200      	movs	r2, #0
 800afa4:	21d0      	movs	r1, #208	; 0xd0
 800afa6:	4824      	ldr	r0, [pc, #144]	; (800b038 <Get_time+0xb8>)
 800afa8:	f00d f842 	bl	8018030 <HAL_I2C_Mem_Read>

	RTC_Date_time_Dec_st.Secs = bcdToDec(get_time[0]);
 800afac:	783b      	ldrb	r3, [r7, #0]
 800afae:	4618      	mov	r0, r3
 800afb0:	f7ff feea 	bl	800ad88 <bcdToDec>
 800afb4:	4603      	mov	r3, r0
 800afb6:	461a      	mov	r2, r3
 800afb8:	4b20      	ldr	r3, [pc, #128]	; (800b03c <Get_time+0xbc>)
 800afba:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_Dec_st.Mins = bcdToDec(get_time[1]);
 800afbc:	787b      	ldrb	r3, [r7, #1]
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff fee2 	bl	800ad88 <bcdToDec>
 800afc4:	4603      	mov	r3, r0
 800afc6:	461a      	mov	r2, r3
 800afc8:	4b1c      	ldr	r3, [pc, #112]	; (800b03c <Get_time+0xbc>)
 800afca:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_Dec_st.Hour = bcdToDec(get_time[2]);
 800afcc:	78bb      	ldrb	r3, [r7, #2]
 800afce:	4618      	mov	r0, r3
 800afd0:	f7ff feda 	bl	800ad88 <bcdToDec>
 800afd4:	4603      	mov	r3, r0
 800afd6:	461a      	mov	r2, r3
 800afd8:	4b18      	ldr	r3, [pc, #96]	; (800b03c <Get_time+0xbc>)
 800afda:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_Dec_st.Date = bcdToDec(get_time[4]);
 800afdc:	793b      	ldrb	r3, [r7, #4]
 800afde:	4618      	mov	r0, r3
 800afe0:	f7ff fed2 	bl	800ad88 <bcdToDec>
 800afe4:	4603      	mov	r3, r0
 800afe6:	461a      	mov	r2, r3
 800afe8:	4b14      	ldr	r3, [pc, #80]	; (800b03c <Get_time+0xbc>)
 800afea:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_Dec_st.Mont = bcdToDec(get_time[5]);
 800afec:	797b      	ldrb	r3, [r7, #5]
 800afee:	4618      	mov	r0, r3
 800aff0:	f7ff feca 	bl	800ad88 <bcdToDec>
 800aff4:	4603      	mov	r3, r0
 800aff6:	461a      	mov	r2, r3
 800aff8:	4b10      	ldr	r3, [pc, #64]	; (800b03c <Get_time+0xbc>)
 800affa:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_Dec_st.Year = bcdToDec(get_time[6]);
 800affc:	79bb      	ldrb	r3, [r7, #6]
 800affe:	4618      	mov	r0, r3
 800b000:	f7ff fec2 	bl	800ad88 <bcdToDec>
 800b004:	4603      	mov	r3, r0
 800b006:	461a      	mov	r2, r3
 800b008:	4b0c      	ldr	r3, [pc, #48]	; (800b03c <Get_time+0xbc>)
 800b00a:	715a      	strb	r2, [r3, #5]


	RTC_Date_time_BCD_st.Secs = (get_time[0]);
 800b00c:	783a      	ldrb	r2, [r7, #0]
 800b00e:	4b0c      	ldr	r3, [pc, #48]	; (800b040 <Get_time+0xc0>)
 800b010:	709a      	strb	r2, [r3, #2]
	RTC_Date_time_BCD_st.Mins = (get_time[1]);
 800b012:	787a      	ldrb	r2, [r7, #1]
 800b014:	4b0a      	ldr	r3, [pc, #40]	; (800b040 <Get_time+0xc0>)
 800b016:	705a      	strb	r2, [r3, #1]
	RTC_Date_time_BCD_st.Hour = (get_time[2]);
 800b018:	78ba      	ldrb	r2, [r7, #2]
 800b01a:	4b09      	ldr	r3, [pc, #36]	; (800b040 <Get_time+0xc0>)
 800b01c:	701a      	strb	r2, [r3, #0]
	RTC_Date_time_BCD_st.Date = (get_time[4]);
 800b01e:	793a      	ldrb	r2, [r7, #4]
 800b020:	4b07      	ldr	r3, [pc, #28]	; (800b040 <Get_time+0xc0>)
 800b022:	70da      	strb	r2, [r3, #3]
	RTC_Date_time_BCD_st.Mont = (get_time[5]);
 800b024:	797a      	ldrb	r2, [r7, #5]
 800b026:	4b06      	ldr	r3, [pc, #24]	; (800b040 <Get_time+0xc0>)
 800b028:	711a      	strb	r2, [r3, #4]
	RTC_Date_time_BCD_st.Year = (get_time[6]);
 800b02a:	79ba      	ldrb	r2, [r7, #6]
 800b02c:	4b04      	ldr	r3, [pc, #16]	; (800b040 <Get_time+0xc0>)
 800b02e:	715a      	strb	r2, [r3, #5]
	//printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);

	//printf(" CURRENT TIME: 	");
	//printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);

	return;
 800b030:	bf00      	nop
}
 800b032:	3708      	adds	r7, #8
 800b034:	46bd      	mov	sp, r7
 800b036:	bd80      	pop	{r7, pc}
 800b038:	20009bc0 	.word	0x20009bc0
 800b03c:	200027e0 	.word	0x200027e0
 800b040:	200027e8 	.word	0x200027e8

0800b044 <Update_Time_Every_Sec>:


void Update_Time_Every_Sec(void)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	af00      	add	r7, sp, #0
	static uint32_t RTC_CLK=0;

	if( HAL_Elaps_Ticks(RTC_CLK) >=1000)
 800b048:	4b09      	ldr	r3, [pc, #36]	; (800b070 <Update_Time_Every_Sec+0x2c>)
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	4618      	mov	r0, r3
 800b04e:	f003 fbd7 	bl	800e800 <HAL_Elaps_Ticks>
 800b052:	4603      	mov	r3, r0
 800b054:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800b058:	d307      	bcc.n	800b06a <Update_Time_Every_Sec+0x26>
	{
		Get_time();
 800b05a:	f7ff ff91 	bl	800af80 <Get_time>
		//		printf("\n CURRENT DATE: 	");
		//		printf("%02u/%02u/%02u\n",RTC_Date_time_Dec_st.Date,RTC_Date_time_Dec_st.Mont,RTC_Date_time_Dec_st.Year);
		//
		//		printf(" CURRENT TIME: 	");
		//		printf("%02u:%02u:%02u\n\n",RTC_Date_time_Dec_st.Hour,RTC_Date_time_Dec_st.Mins,RTC_Date_time_Dec_st.Secs);
		RTC_CLK=HAL_GetTick();
 800b05e:	f00a f91b 	bl	8015298 <HAL_GetTick>
 800b062:	4603      	mov	r3, r0
 800b064:	4a02      	ldr	r2, [pc, #8]	; (800b070 <Update_Time_Every_Sec+0x2c>)
 800b066:	6013      	str	r3, [r2, #0]
	}
	return;
 800b068:	bf00      	nop
 800b06a:	bf00      	nop
}
 800b06c:	bd80      	pop	{r7, pc}
 800b06e:	bf00      	nop
 800b070:	200027f0 	.word	0x200027f0

0800b074 <Process_SiemensEI>:

uint8_t SendReply = 0;


void Process_SiemensEI(void)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	af00      	add	r7, sp, #0
	while(1)
	{
		MX_LWIP_Process();
 800b078:	f011 fbfc 	bl	801c874 <MX_LWIP_Process>

		HAL_IWDG_Refresh(&hiwdg);
 800b07c:	4813      	ldr	r0, [pc, #76]	; (800b0cc <Process_SiemensEI+0x58>)
 800b07e:	f00d fc71 	bl	8018964 <HAL_IWDG_Refresh>

		Feed_wdt();
 800b082:	f007 ffc5 	bl	8013010 <Feed_wdt>

		readCanToStructs();
 800b086:	f004 fdb3 	bl	800fbf0 <readCanToStructs>

		Chech_forSiemensCMD();
 800b08a:	f001 fded 	bl	800cc68 <Chech_forSiemensCMD>

		ProcessSendingSignals2MIE();
 800b08e:	f001 fb7d 	bl	800c78c <ProcessSendingSignals2MIE>

		ProcessSelfSharing();
 800b092:	f001 fc31 	bl	800c8f8 <ProcessSelfSharing>

		Siemens_Data_Analyser();
 800b096:	f000 f81f 	bl	800b0d8 <Siemens_Data_Analyser>

		ProcessDetectNoValidDataReceive();
 800b09a:	f001 fc4f 	bl	800c93c <ProcessDetectNoValidDataReceive>

		SendRelays2Other();
 800b09e:	f001 fc91 	bl	800c9c4 <SendRelays2Other>

		CheckRelayMisMatch();
 800b0a2:	f001 fca7 	bl	800c9f4 <CheckRelayMisMatch>

		Detect_SiemensCAN_Xchange_Failure();
 800b0a6:	f001 fcdf 	bl	800ca68 <Detect_SiemensCAN_Xchange_Failure>

		Print_BuildDat_Details();
 800b0aa:	f009 f8c3 	bl	8014234 <Print_BuildDat_Details>

		GetTimeStamp();
 800b0ae:	f002 fd65 	bl	800db7c <GetTimeStamp>

		if(Dats_Request_Flag > 0)
 800b0b2:	4b07      	ldr	r3, [pc, #28]	; (800b0d0 <Process_SiemensEI+0x5c>)
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d0de      	beq.n	800b078 <Process_SiemensEI+0x4>
		{
			gucFlagUpdate = 3;
 800b0ba:	4b06      	ldr	r3, [pc, #24]	; (800b0d4 <Process_SiemensEI+0x60>)
 800b0bc:	2203      	movs	r2, #3
 800b0be:	701a      	strb	r2, [r3, #0]

	}

	while(1)
	{
		Data_Processing();
 800b0c0:	f008 ffb6 	bl	8014030 <Data_Processing>
		HAL_IWDG_Refresh(&hiwdg);
 800b0c4:	4801      	ldr	r0, [pc, #4]	; (800b0cc <Process_SiemensEI+0x58>)
 800b0c6:	f00d fc4d 	bl	8018964 <HAL_IWDG_Refresh>
		Data_Processing();
 800b0ca:	e7f9      	b.n	800b0c0 <Process_SiemensEI+0x4c>
 800b0cc:	20009c68 	.word	0x20009c68
 800b0d0:	20000644 	.word	0x20000644
 800b0d4:	20000a49 	.word	0x20000a49

0800b0d8 <Siemens_Data_Analyser>:
	}
}

void Siemens_Data_Analyser(void)
{
 800b0d8:	b580      	push	{r7, lr}
 800b0da:	f6ad 2d58 	subw	sp, sp, #2648	; 0xa58
 800b0de:	af00      	add	r7, sp, #0

	uint8_t Data_Traverser =0;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
	uint16_t Cal_CRC=0,Cal_CRC_Compliment=0;
 800b0e6:	2300      	movs	r3, #0
 800b0e8:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42
	uint16_t Recv_CRC=0,Recv_CRC_Compliment=0;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
 800b0f8:	2300      	movs	r3, #0
 800b0fa:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	uint16_t Recv_CRC_Loc=0,Recv_CRC_Compliment_Loc = 0,Recv_CRC_Compliment_Size=0;
 800b0fe:	2300      	movs	r3, #0
 800b100:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
 800b104:	2300      	movs	r3, #0
 800b106:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
 800b10a:	2300      	movs	r3, #0
 800b10c:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	uint16_t Compliment_Data_Start_Loc = 0;
 800b110:	2300      	movs	r3, #0
 800b112:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a
	uint16_t App_data_Traverser = 0;
 800b116:	2300      	movs	r3, #0
 800b118:	f8a7 3a50 	strh.w	r3, [r7, #2640]	; 0xa50
	uint16_t VitalCRC = 0;
 800b11c:	2300      	movs	r3, #0
 800b11e:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38
	uint16_t App_data_Size = 0;
 800b122:	2300      	movs	r3, #0
 800b124:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	uint16_t TempApp_data_Size = 0;
 800b128:	2300      	movs	r3, #0
 800b12a:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	uint8_t App_Data[SIEMENS_MAX_RELAY_SIZE];
	SIEMENS_PKT_t Temp_Siemens_RX_st;
	uint8_t Buff[MAX_SIEMENS_PKT_LENGTH] = {0,};
 800b12e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b132:	f6a3 234c 	subw	r3, r3, #2636	; 0xa4c
 800b136:	2200      	movs	r2, #0
 800b138:	601a      	str	r2, [r3, #0]
 800b13a:	3304      	adds	r3, #4
 800b13c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 800b140:	2100      	movs	r1, #0
 800b142:	4618      	mov	r0, r3
 800b144:	f016 ffca 	bl	80220dc <memset>
	uint16_t Size = 0;
 800b148:	2300      	movs	r3, #0
 800b14a:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
	uint8_t RejectPacketFlag = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b


	if(Ethernet_Circle_buff_st.Write_end > 10)
 800b154:	4b7c      	ldr	r3, [pc, #496]	; (800b348 <Siemens_Data_Analyser+0x270>)
 800b156:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b15a:	2b0a      	cmp	r3, #10
 800b15c:	f240 86d4 	bls.w	800bf08 <Siemens_Data_Analyser+0xe30>
	{
		memcpy(&Buff,Ethernet_Circle_buff_st.Ethernet_Buffers,Ethernet_Circle_buff_st.Write_end);
 800b160:	4b79      	ldr	r3, [pc, #484]	; (800b348 <Siemens_Data_Analyser+0x270>)
 800b162:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b166:	461a      	mov	r2, r3
 800b168:	f107 030c 	add.w	r3, r7, #12
 800b16c:	4976      	ldr	r1, [pc, #472]	; (800b348 <Siemens_Data_Analyser+0x270>)
 800b16e:	4618      	mov	r0, r3
 800b170:	f016 ff8c 	bl	802208c <memcpy>
		Size = Ethernet_Circle_buff_st.Write_end;
 800b174:	4b74      	ldr	r3, [pc, #464]	; (800b348 <Siemens_Data_Analyser+0x270>)
 800b176:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800b17a:	f8a7 3a36 	strh.w	r3, [r7, #2614]	; 0xa36
		memset(&Ethernet_Circle_buff_st,0,sizeof(ETHERNET_Circle_t));
 800b17e:	f240 6204 	movw	r2, #1540	; 0x604
 800b182:	2100      	movs	r1, #0
 800b184:	4870      	ldr	r0, [pc, #448]	; (800b348 <Siemens_Data_Analyser+0x270>)
 800b186:	f016 ffa9 	bl	80220dc <memset>
	else
	{
		return;
	}

	memset(&Temp_Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800b18a:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800b18e:	f44f 720a 	mov.w	r2, #552	; 0x228
 800b192:	2100      	movs	r1, #0
 800b194:	4618      	mov	r0, r3
 800b196:	f016 ffa1 	bl	80220dc <memset>


	BITSTUFFINIT(0,0);
 800b19a:	2300      	movs	r3, #0
 800b19c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b1a0:	2300      	movs	r3, #0
 800b1a2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Recv_CRC_Loc = ((Size/2)-2);
 800b1a6:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b1aa:	085b      	lsrs	r3, r3, #1
 800b1ac:	b29b      	uxth	r3, r3
 800b1ae:	3b02      	subs	r3, #2
 800b1b0:	f8a7 3a40 	strh.w	r3, [r7, #2624]	; 0xa40
	Recv_CRC_Compliment_Size = ((Size/2)-2);
 800b1b4:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b1b8:	085b      	lsrs	r3, r3, #1
 800b1ba:	b29b      	uxth	r3, r3
 800b1bc:	3b02      	subs	r3, #2
 800b1be:	f8a7 3a3c 	strh.w	r3, [r7, #2620]	; 0xa3c
	Recv_CRC_Compliment_Loc = ((Size)-2);
 800b1c2:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b1c6:	3b02      	subs	r3, #2
 800b1c8:	f8a7 3a3e 	strh.w	r3, [r7, #2622]	; 0xa3e
	Compliment_Data_Start_Loc = (Size/2);
 800b1cc:	f8b7 3a36 	ldrh.w	r3, [r7, #2614]	; 0xa36
 800b1d0:	085b      	lsrs	r3, r3, #1
 800b1d2:	f8a7 3a3a 	strh.w	r3, [r7, #2618]	; 0xa3a


	if(  Data_Compliment(Buff,Size,VERIFY)  != 1)
 800b1d6:	f8b7 1a36 	ldrh.w	r1, [r7, #2614]	; 0xa36
 800b1da:	f107 030c 	add.w	r3, r7, #12
 800b1de:	2200      	movs	r2, #0
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	f002 fbb1 	bl	800d948 <Data_Compliment>
 800b1e6:	4603      	mov	r3, r0
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d004      	beq.n	800b1f6 <Siemens_Data_Analyser+0x11e>
	{
		printf("Compliment Data Not Verified\n");
 800b1ec:	4857      	ldr	r0, [pc, #348]	; (800b34c <Siemens_Data_Analyser+0x274>)
 800b1ee:	f017 f8f9 	bl	80223e4 <puts>
		return ;
 800b1f2:	f000 be8c 	b.w	800bf0e <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC = ExtractBits(0,16,&Buff[Recv_CRC_Loc]);
 800b1f6:	f8b7 3a40 	ldrh.w	r3, [r7, #2624]	; 0xa40
 800b1fa:	f107 020c 	add.w	r2, r7, #12
 800b1fe:	4413      	add	r3, r2
 800b200:	461a      	mov	r2, r3
 800b202:	2110      	movs	r1, #16
 800b204:	2000      	movs	r0, #0
 800b206:	f7f5 fa05 	bl	8000614 <ExtractBits>
 800b20a:	4603      	mov	r3, r0
 800b20c:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
	Cal_CRC = Siemens_CRC(&Buff[0],Recv_CRC_Loc);
 800b210:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800b214:	f107 030c 	add.w	r3, r7, #12
 800b218:	4611      	mov	r1, r2
 800b21a:	4618      	mov	r0, r3
 800b21c:	f002 f898 	bl	800d350 <Siemens_CRC>
 800b220:	4603      	mov	r3, r0
 800b222:	f8a7 3a44 	strh.w	r3, [r7, #2628]	; 0xa44

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b226:	4b4a      	ldr	r3, [pc, #296]	; (800b350 <Siemens_Data_Analyser+0x278>)
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	095b      	lsrs	r3, r3, #5
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b00      	cmp	r3, #0
 800b232:	d01c      	beq.n	800b26e <Siemens_Data_Analyser+0x196>
	{
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800b234:	4847      	ldr	r0, [pc, #284]	; (800b354 <Siemens_Data_Analyser+0x27c>)
 800b236:	f017 f8d5 	bl	80223e4 <puts>
		Recv_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b23a:	4847      	ldr	r0, [pc, #284]	; (800b358 <Siemens_Data_Analyser+0x280>)
 800b23c:	f00e fcde 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800b240:	4601      	mov	r1, r0
 800b242:	4b46      	ldr	r3, [pc, #280]	; (800b35c <Siemens_Data_Analyser+0x284>)
 800b244:	fba3 2301 	umull	r2, r3, r3, r1
 800b248:	0bda      	lsrs	r2, r3, #15
 800b24a:	4613      	mov	r3, r2
 800b24c:	041b      	lsls	r3, r3, #16
 800b24e:	1a9b      	subs	r3, r3, r2
 800b250:	1aca      	subs	r2, r1, r3
 800b252:	4613      	mov	r3, r2
 800b254:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		if(Recv_CRC == Cal_CRC)
 800b258:	f8b7 2a54 	ldrh.w	r2, [r7, #2644]	; 0xa54
 800b25c:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b260:	429a      	cmp	r2, r3
 800b262:	d104      	bne.n	800b26e <Siemens_Data_Analyser+0x196>
		{
			Recv_CRC += 4;
 800b264:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b268:	3304      	adds	r3, #4
 800b26a:	f8a7 3a54 	strh.w	r3, [r7, #2644]	; 0xa54
		}
	}
#endif

	if(Cal_CRC != Recv_CRC)
 800b26e:	f8b7 2a44 	ldrh.w	r2, [r7, #2628]	; 0xa44
 800b272:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b276:	429a      	cmp	r2, r3
 800b278:	d010      	beq.n	800b29c <Siemens_Data_Analyser+0x1c4>
	{
		printf("1st CRC Fail\n");
 800b27a:	4839      	ldr	r0, [pc, #228]	; (800b360 <Siemens_Data_Analyser+0x288>)
 800b27c:	f017 f8b2 	bl	80223e4 <puts>
		printf("Calculated:0x%04x\n",Cal_CRC);
 800b280:	f8b7 3a44 	ldrh.w	r3, [r7, #2628]	; 0xa44
 800b284:	4619      	mov	r1, r3
 800b286:	4837      	ldr	r0, [pc, #220]	; (800b364 <Siemens_Data_Analyser+0x28c>)
 800b288:	f017 f810 	bl	80222ac <iprintf>
		printf("Received:0x%04x\n",Recv_CRC);
 800b28c:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	; 0xa54
 800b290:	4619      	mov	r1, r3
 800b292:	4835      	ldr	r0, [pc, #212]	; (800b368 <Siemens_Data_Analyser+0x290>)
 800b294:	f017 f80a 	bl	80222ac <iprintf>
		return;
 800b298:	f000 be39 	b.w	800bf0e <Siemens_Data_Analyser+0xe36>
	}

	Recv_CRC_Compliment = ExtractBits(0,16,&Buff[Recv_CRC_Compliment_Loc]);
 800b29c:	f8b7 3a3e 	ldrh.w	r3, [r7, #2622]	; 0xa3e
 800b2a0:	f107 020c 	add.w	r2, r7, #12
 800b2a4:	4413      	add	r3, r2
 800b2a6:	461a      	mov	r2, r3
 800b2a8:	2110      	movs	r1, #16
 800b2aa:	2000      	movs	r0, #0
 800b2ac:	f7f5 f9b2 	bl	8000614 <ExtractBits>
 800b2b0:	4603      	mov	r3, r0
 800b2b2:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
	Cal_CRC_Compliment = Siemens_CRC(&Buff[Compliment_Data_Start_Loc],Recv_CRC_Compliment_Size);
 800b2b6:	f8b7 3a3a 	ldrh.w	r3, [r7, #2618]	; 0xa3a
 800b2ba:	f107 020c 	add.w	r2, r7, #12
 800b2be:	4413      	add	r3, r2
 800b2c0:	f8b7 2a3c 	ldrh.w	r2, [r7, #2620]	; 0xa3c
 800b2c4:	4611      	mov	r1, r2
 800b2c6:	4618      	mov	r0, r3
 800b2c8:	f002 f842 	bl	800d350 <Siemens_CRC>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	f8a7 3a42 	strh.w	r3, [r7, #2626]	; 0xa42

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b2d2:	4b1f      	ldr	r3, [pc, #124]	; (800b350 <Siemens_Data_Analyser+0x278>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	0a1b      	lsrs	r3, r3, #8
 800b2d8:	f003 0301 	and.w	r3, r3, #1
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d01c      	beq.n	800b31a <Siemens_Data_Analyser+0x242>
	{
		printf("Injecting INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800b2e0:	4822      	ldr	r0, [pc, #136]	; (800b36c <Siemens_Data_Analyser+0x294>)
 800b2e2:	f017 f87f 	bl	80223e4 <puts>
		Recv_CRC_Compliment = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800b2e6:	481c      	ldr	r0, [pc, #112]	; (800b358 <Siemens_Data_Analyser+0x280>)
 800b2e8:	f00e fc88 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800b2ec:	4601      	mov	r1, r0
 800b2ee:	4b1b      	ldr	r3, [pc, #108]	; (800b35c <Siemens_Data_Analyser+0x284>)
 800b2f0:	fba3 2301 	umull	r2, r3, r3, r1
 800b2f4:	0bda      	lsrs	r2, r3, #15
 800b2f6:	4613      	mov	r3, r2
 800b2f8:	041b      	lsls	r3, r3, #16
 800b2fa:	1a9b      	subs	r3, r3, r2
 800b2fc:	1aca      	subs	r2, r1, r3
 800b2fe:	4613      	mov	r3, r2
 800b300:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		if(Recv_CRC_Compliment == Cal_CRC_Compliment)
 800b304:	f8b7 2a52 	ldrh.w	r2, [r7, #2642]	; 0xa52
 800b308:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b30c:	429a      	cmp	r2, r3
 800b30e:	d104      	bne.n	800b31a <Siemens_Data_Analyser+0x242>
		{
			Recv_CRC_Compliment += 4;
 800b310:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b314:	3304      	adds	r3, #4
 800b316:	f8a7 3a52 	strh.w	r3, [r7, #2642]	; 0xa52
		}
	}
#endif

	if(Cal_CRC_Compliment != Recv_CRC_Compliment)
 800b31a:	f8b7 2a42 	ldrh.w	r2, [r7, #2626]	; 0xa42
 800b31e:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b322:	429a      	cmp	r2, r3
 800b324:	d02a      	beq.n	800b37c <Siemens_Data_Analyser+0x2a4>
	{
		printf("2nd CRC Fail\n");
 800b326:	4812      	ldr	r0, [pc, #72]	; (800b370 <Siemens_Data_Analyser+0x298>)
 800b328:	f017 f85c 	bl	80223e4 <puts>
		printf("Cal_CRC_Compliment:0x%04x\n",Cal_CRC_Compliment);
 800b32c:	f8b7 3a42 	ldrh.w	r3, [r7, #2626]	; 0xa42
 800b330:	4619      	mov	r1, r3
 800b332:	4810      	ldr	r0, [pc, #64]	; (800b374 <Siemens_Data_Analyser+0x29c>)
 800b334:	f016 ffba 	bl	80222ac <iprintf>
		printf("Recv_CRC_Compliment:0x%04x\n",Recv_CRC_Compliment);
 800b338:	f8b7 3a52 	ldrh.w	r3, [r7, #2642]	; 0xa52
 800b33c:	4619      	mov	r1, r3
 800b33e:	480e      	ldr	r0, [pc, #56]	; (800b378 <Siemens_Data_Analyser+0x2a0>)
 800b340:	f016 ffb4 	bl	80222ac <iprintf>
		return;
 800b344:	f000 bde3 	b.w	800bf0e <Siemens_Data_Analyser+0xe36>
 800b348:	20004bac 	.word	0x20004bac
 800b34c:	080259a4 	.word	0x080259a4
 800b350:	20003470 	.word	0x20003470
 800b354:	080259c4 	.word	0x080259c4
 800b358:	20009c78 	.word	0x20009c78
 800b35c:	80008001 	.word	0x80008001
 800b360:	080259ec 	.word	0x080259ec
 800b364:	080259fc 	.word	0x080259fc
 800b368:	08025a10 	.word	0x08025a10
 800b36c:	08025a24 	.word	0x08025a24
 800b370:	08025a50 	.word	0x08025a50
 800b374:	08025a60 	.word	0x08025a60
 800b378:	08025a7c 	.word	0x08025a7c
	}

	Temp_Siemens_RX_st.DesSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b37c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b380:	b2d8      	uxtb	r0, r3
 800b382:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b386:	f107 020c 	add.w	r2, r7, #12
 800b38a:	441a      	add	r2, r3
 800b38c:	2301      	movs	r3, #1
 800b38e:	2108      	movs	r1, #8
 800b390:	f002 f832 	bl	800d3f8 <Extract_Parity_Data>
 800b394:	4603      	mov	r3, r0
 800b396:	b2da      	uxtb	r2, r3
 800b398:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b39c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b3a0:	701a      	strb	r2, [r3, #0]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b3a2:	4b56      	ldr	r3, [pc, #344]	; (800b4fc <Siemens_Data_Analyser+0x424>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	f003 0301 	and.w	r3, r3, #1
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d02a      	beq.n	800b404 <Siemens_Data_Analyser+0x32c>
	{
		printf("Injecting INVALID_DES_SYS_TYPE\n");
 800b3ae:	4854      	ldr	r0, [pc, #336]	; (800b500 <Siemens_Data_Analyser+0x428>)
 800b3b0:	f017 f818 	bl	80223e4 <puts>
		Temp_Siemens_RX_st.DesSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b3b4:	4853      	ldr	r0, [pc, #332]	; (800b504 <Siemens_Data_Analyser+0x42c>)
 800b3b6:	f00e fc21 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800b3ba:	4601      	mov	r1, r0
 800b3bc:	4b52      	ldr	r3, [pc, #328]	; (800b508 <Siemens_Data_Analyser+0x430>)
 800b3be:	fba3 2301 	umull	r2, r3, r3, r1
 800b3c2:	09da      	lsrs	r2, r3, #7
 800b3c4:	4613      	mov	r3, r2
 800b3c6:	021b      	lsls	r3, r3, #8
 800b3c8:	1a9b      	subs	r3, r3, r2
 800b3ca:	1aca      	subs	r2, r1, r3
 800b3cc:	b2d2      	uxtb	r2, r2
 800b3ce:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3d2:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b3d6:	701a      	strb	r2, [r3, #0]
		if(Temp_Siemens_RX_st.DesSysType == EI_data.Siemens_st.DestSysType)
 800b3d8:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3dc:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b3e0:	781a      	ldrb	r2, [r3, #0]
 800b3e2:	4b4a      	ldr	r3, [pc, #296]	; (800b50c <Siemens_Data_Analyser+0x434>)
 800b3e4:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d10b      	bne.n	800b404 <Siemens_Data_Analyser+0x32c>
		{
			Temp_Siemens_RX_st.DesSysType += 4;
 800b3ec:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3f0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b3f4:	781b      	ldrb	r3, [r3, #0]
 800b3f6:	3304      	adds	r3, #4
 800b3f8:	b2da      	uxtb	r2, r3
 800b3fa:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b3fe:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b402:	701a      	strb	r2, [r3, #0]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DesSysType != EI_data.Siemens_st.DestSysType)
 800b404:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b408:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b40c:	781a      	ldrb	r2, [r3, #0]
 800b40e:	4b3f      	ldr	r3, [pc, #252]	; (800b50c <Siemens_Data_Analyser+0x434>)
 800b410:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b414:	429a      	cmp	r2, r3
 800b416:	d015      	beq.n	800b444 <Siemens_Data_Analyser+0x36c>
	{
		printf("Destination System Type Not Matched\n");
 800b418:	483d      	ldr	r0, [pc, #244]	; (800b510 <Siemens_Data_Analyser+0x438>)
 800b41a:	f016 ffe3 	bl	80223e4 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DesSysType);
 800b41e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b422:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	4619      	mov	r1, r3
 800b42a:	483a      	ldr	r0, [pc, #232]	; (800b514 <Siemens_Data_Analyser+0x43c>)
 800b42c:	f016 ff3e 	bl	80222ac <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestSysType);
 800b430:	4b36      	ldr	r3, [pc, #216]	; (800b50c <Siemens_Data_Analyser+0x434>)
 800b432:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800b436:	4619      	mov	r1, r3
 800b438:	4837      	ldr	r0, [pc, #220]	; (800b518 <Siemens_Data_Analyser+0x440>)
 800b43a:	f016 ff37 	bl	80222ac <iprintf>
		RejectPacketFlag = 1;
 800b43e:	2301      	movs	r3, #1
 800b440:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Des_type:%u\n",Temp_Siemens_RX_st.dst_sys_typ);
	BITSTUFFINC(8);//Destination System Type
 800b444:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b448:	3308      	adds	r3, #8
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	da00      	bge.n	800b450 <Siemens_Data_Analyser+0x378>
 800b44e:	3307      	adds	r3, #7
 800b450:	10db      	asrs	r3, r3, #3
 800b452:	b29a      	uxth	r2, r3
 800b454:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b458:	4413      	add	r3, r2
 800b45a:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b45e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b462:	3308      	adds	r3, #8
 800b464:	b29b      	uxth	r3, r3
 800b466:	b21b      	sxth	r3, r3
 800b468:	425a      	negs	r2, r3
 800b46a:	f003 0307 	and.w	r3, r3, #7
 800b46e:	f002 0207 	and.w	r2, r2, #7
 800b472:	bf58      	it	pl
 800b474:	4253      	negpl	r3, r2
 800b476:	b21b      	sxth	r3, r3
 800b478:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b47c:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b480:	b2d8      	uxtb	r0, r3
 800b482:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b486:	f107 020c 	add.w	r2, r7, #12
 800b48a:	441a      	add	r2, r3
 800b48c:	2300      	movs	r3, #0
 800b48e:	2118      	movs	r1, #24
 800b490:	f001 ffb2 	bl	800d3f8 <Extract_Parity_Data>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b49c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b4a0:	605a      	str	r2, [r3, #4]

	if(Temp_Siemens_RX_st.DestAddr != -1)
 800b4a2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b4a6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b4aa:	685b      	ldr	r3, [r3, #4]
 800b4ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b4b0:	d036      	beq.n	800b520 <Siemens_Data_Analyser+0x448>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b4b2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b4b6:	f5a3 6325 	sub.w	r3, r3, #2640	; 0xa50
 800b4ba:	4a18      	ldr	r2, [pc, #96]	; (800b51c <Siemens_Data_Analyser+0x444>)
 800b4bc:	8812      	ldrh	r2, [r2, #0]
 800b4be:	801a      	strh	r2, [r3, #0]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b4c4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b4c8:	f107 020c 	add.w	r2, r7, #12
 800b4cc:	4413      	add	r3, r2
 800b4ce:	f107 0208 	add.w	r2, r7, #8
 800b4d2:	2103      	movs	r1, #3
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	f000 fd45 	bl	800bf64 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtDestAddr,&ExtractBuffer, 3);
 800b4da:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b4de:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b4e2:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b4e6:	f5a2 6225 	sub.w	r2, r2, #2640	; 0xa50
 800b4ea:	3308      	adds	r3, #8
 800b4ec:	6812      	ldr	r2, [r2, #0]
 800b4ee:	4611      	mov	r1, r2
 800b4f0:	8019      	strh	r1, [r3, #0]
 800b4f2:	3302      	adds	r3, #2
 800b4f4:	0c12      	lsrs	r2, r2, #16
 800b4f6:	701a      	strb	r2, [r3, #0]
 800b4f8:	e015      	b.n	800b526 <Siemens_Data_Analyser+0x44e>
 800b4fa:	bf00      	nop
 800b4fc:	20003470 	.word	0x20003470
 800b500:	08025a98 	.word	0x08025a98
 800b504:	20009c78 	.word	0x20009c78
 800b508:	80808081 	.word	0x80808081
 800b50c:	20000304 	.word	0x20000304
 800b510:	08025ab8 	.word	0x08025ab8
 800b514:	08025adc 	.word	0x08025adc
 800b518:	08025aec 	.word	0x08025aec
 800b51c:	08025c70 	.word	0x08025c70
	}
	else
	{
		RejectPacketFlag = 1;
 800b520:	2301      	movs	r3, #1
 800b522:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	//			Temp_Siemens_RX_st.DesSysType += 4;
	//		}
	//	}
	//#endif

	if(Temp_Siemens_RX_st.ExtDestAddr != EI_data.Siemens_st.DestAddress)
 800b526:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b52a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b52e:	689a      	ldr	r2, [r3, #8]
 800b530:	4bbf      	ldr	r3, [pc, #764]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b532:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b536:	429a      	cmp	r2, r3
 800b538:	d015      	beq.n	800b566 <Siemens_Data_Analyser+0x48e>
	{
		printf("Destination Address Not Matched\n");
 800b53a:	48be      	ldr	r0, [pc, #760]	; (800b834 <Siemens_Data_Analyser+0x75c>)
 800b53c:	f016 ff52 	bl	80223e4 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.DestAddr);
 800b540:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b544:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	4619      	mov	r1, r3
 800b54c:	48ba      	ldr	r0, [pc, #744]	; (800b838 <Siemens_Data_Analyser+0x760>)
 800b54e:	f016 fead 	bl	80222ac <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.DestAddress);
 800b552:	4bb7      	ldr	r3, [pc, #732]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b554:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800b558:	4619      	mov	r1, r3
 800b55a:	48b8      	ldr	r0, [pc, #736]	; (800b83c <Siemens_Data_Analyser+0x764>)
 800b55c:	f016 fea6 	bl	80222ac <iprintf>
		RejectPacketFlag = 1;
 800b560:	2301      	movs	r3, #1
 800b562:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_add:%lu\n",Temp_Siemens_RX_st.dst_add);
	BITSTUFFINC(24);//Destination Address
 800b566:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b56a:	3318      	adds	r3, #24
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	da00      	bge.n	800b572 <Siemens_Data_Analyser+0x49a>
 800b570:	3307      	adds	r3, #7
 800b572:	10db      	asrs	r3, r3, #3
 800b574:	b29a      	uxth	r2, r3
 800b576:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b57a:	4413      	add	r3, r2
 800b57c:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b580:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b584:	3318      	adds	r3, #24
 800b586:	b29b      	uxth	r3, r3
 800b588:	b21b      	sxth	r3, r3
 800b58a:	425a      	negs	r2, r3
 800b58c:	f003 0307 	and.w	r3, r3, #7
 800b590:	f002 0207 	and.w	r2, r2, #7
 800b594:	bf58      	it	pl
 800b596:	4253      	negpl	r3, r2
 800b598:	b21b      	sxth	r3, r3
 800b59a:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SrcSysType = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b59e:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b5a2:	b2d8      	uxtb	r0, r3
 800b5a4:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b5a8:	f107 020c 	add.w	r2, r7, #12
 800b5ac:	441a      	add	r2, r3
 800b5ae:	2301      	movs	r3, #1
 800b5b0:	2108      	movs	r1, #8
 800b5b2:	f001 ff21 	bl	800d3f8 <Extract_Parity_Data>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	b2da      	uxtb	r2, r3
 800b5ba:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5be:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b5c2:	731a      	strb	r2, [r3, #12]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b5c4:	4b9e      	ldr	r3, [pc, #632]	; (800b840 <Siemens_Data_Analyser+0x768>)
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	085b      	lsrs	r3, r3, #1
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d02a      	beq.n	800b628 <Siemens_Data_Analyser+0x550>
	{
		printf("Injecting INVALID_SRC_SYS_TYPE\n");
 800b5d2:	489c      	ldr	r0, [pc, #624]	; (800b844 <Siemens_Data_Analyser+0x76c>)
 800b5d4:	f016 ff06 	bl	80223e4 <puts>
		Temp_Siemens_RX_st.SrcSysType = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b5d8:	489b      	ldr	r0, [pc, #620]	; (800b848 <Siemens_Data_Analyser+0x770>)
 800b5da:	f00e fb0f 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800b5de:	4601      	mov	r1, r0
 800b5e0:	4b9a      	ldr	r3, [pc, #616]	; (800b84c <Siemens_Data_Analyser+0x774>)
 800b5e2:	fba3 2301 	umull	r2, r3, r3, r1
 800b5e6:	09da      	lsrs	r2, r3, #7
 800b5e8:	4613      	mov	r3, r2
 800b5ea:	021b      	lsls	r3, r3, #8
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	1aca      	subs	r2, r1, r3
 800b5f0:	b2d2      	uxtb	r2, r2
 800b5f2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b5f6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b5fa:	731a      	strb	r2, [r3, #12]
		if(Temp_Siemens_RX_st.SrcSysType == EI_data.Siemens_st.SourceSysType)
 800b5fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b600:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b604:	7b1a      	ldrb	r2, [r3, #12]
 800b606:	4b8a      	ldr	r3, [pc, #552]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b608:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d10b      	bne.n	800b628 <Siemens_Data_Analyser+0x550>
		{
			Temp_Siemens_RX_st.SrcSysType += 4;
 800b610:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b614:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b618:	7b1b      	ldrb	r3, [r3, #12]
 800b61a:	3304      	adds	r3, #4
 800b61c:	b2da      	uxtb	r2, r3
 800b61e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b622:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b626:	731a      	strb	r2, [r3, #12]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SrcSysType != EI_data.Siemens_st.SourceSysType)
 800b628:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b62c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b630:	7b1a      	ldrb	r2, [r3, #12]
 800b632:	4b7f      	ldr	r3, [pc, #508]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b634:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b638:	429a      	cmp	r2, r3
 800b63a:	d015      	beq.n	800b668 <Siemens_Data_Analyser+0x590>
	{
		printf("Source System Type Not Matched\n");
 800b63c:	4884      	ldr	r0, [pc, #528]	; (800b850 <Siemens_Data_Analyser+0x778>)
 800b63e:	f016 fed1 	bl	80223e4 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SrcSysType);
 800b642:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b646:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b64a:	7b1b      	ldrb	r3, [r3, #12]
 800b64c:	4619      	mov	r1, r3
 800b64e:	4881      	ldr	r0, [pc, #516]	; (800b854 <Siemens_Data_Analyser+0x77c>)
 800b650:	f016 fe2c 	bl	80222ac <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourceSysType);
 800b654:	4b76      	ldr	r3, [pc, #472]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b656:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800b65a:	4619      	mov	r1, r3
 800b65c:	487e      	ldr	r0, [pc, #504]	; (800b858 <Siemens_Data_Analyser+0x780>)
 800b65e:	f016 fe25 	bl	80222ac <iprintf>
		RejectPacketFlag = 1;
 800b662:	2301      	movs	r3, #1
 800b664:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("Src_sys_type:%u\n",Temp_Siemens_RX_st.Src_sys_type);
	BITSTUFFINC(8);//Source System Type
 800b668:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b66c:	3308      	adds	r3, #8
 800b66e:	2b00      	cmp	r3, #0
 800b670:	da00      	bge.n	800b674 <Siemens_Data_Analyser+0x59c>
 800b672:	3307      	adds	r3, #7
 800b674:	10db      	asrs	r3, r3, #3
 800b676:	b29a      	uxth	r2, r3
 800b678:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b67c:	4413      	add	r3, r2
 800b67e:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b682:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b686:	3308      	adds	r3, #8
 800b688:	b29b      	uxth	r3, r3
 800b68a:	b21b      	sxth	r3, r3
 800b68c:	425a      	negs	r2, r3
 800b68e:	f003 0307 	and.w	r3, r3, #7
 800b692:	f002 0207 	and.w	r2, r2, #7
 800b696:	bf58      	it	pl
 800b698:	4253      	negpl	r3, r2
 800b69a:	b21b      	sxth	r3, r3
 800b69c:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourceAddr = Extract_Parity_Data(ucBit,24,&Buff[ucByte],EVEN_PARITY);
 800b6a0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b6a4:	b2d8      	uxtb	r0, r3
 800b6a6:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b6aa:	f107 020c 	add.w	r2, r7, #12
 800b6ae:	441a      	add	r2, r3
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	2118      	movs	r1, #24
 800b6b4:	f001 fea0 	bl	800d3f8 <Extract_Parity_Data>
 800b6b8:	4603      	mov	r3, r0
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6c0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6c4:	611a      	str	r2, [r3, #16]

	if(Temp_Siemens_RX_st.SourceAddr != -1)
 800b6c6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6ca:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b6ce:	691b      	ldr	r3, [r3, #16]
 800b6d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b6d4:	d021      	beq.n	800b71a <Siemens_Data_Analyser+0x642>
	{
		uint8_t ExtractBuffer[3] = {0,};
 800b6d6:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b6da:	f6a3 2354 	subw	r3, r3, #2644	; 0xa54
 800b6de:	4a5f      	ldr	r2, [pc, #380]	; (800b85c <Siemens_Data_Analyser+0x784>)
 800b6e0:	8812      	ldrh	r2, [r2, #0]
 800b6e2:	801a      	strh	r2, [r3, #0]
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	709a      	strb	r2, [r3, #2]
		ExtractAppData(&Buff[ucByte], 3, ExtractBuffer);
 800b6e8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b6ec:	f107 020c 	add.w	r2, r7, #12
 800b6f0:	4413      	add	r3, r2
 800b6f2:	1d3a      	adds	r2, r7, #4
 800b6f4:	2103      	movs	r1, #3
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	f000 fc34 	bl	800bf64 <ExtractAppData>
		memcpy(&Temp_Siemens_RX_st.ExtSourceAddr,&ExtractBuffer, 3);
 800b6fc:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b700:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b704:	f607 2258 	addw	r2, r7, #2648	; 0xa58
 800b708:	f6a2 2254 	subw	r2, r2, #2644	; 0xa54
 800b70c:	3314      	adds	r3, #20
 800b70e:	6812      	ldr	r2, [r2, #0]
 800b710:	4611      	mov	r1, r2
 800b712:	8019      	strh	r1, [r3, #0]
 800b714:	3302      	adds	r3, #2
 800b716:	0c12      	lsrs	r2, r2, #16
 800b718:	701a      	strb	r2, [r3, #0]
	}

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b71a:	4b49      	ldr	r3, [pc, #292]	; (800b840 <Siemens_Data_Analyser+0x768>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	089b      	lsrs	r3, r3, #2
 800b720:	f003 0301 	and.w	r3, r3, #1
 800b724:	2b00      	cmp	r3, #0
 800b726:	d02c      	beq.n	800b782 <Siemens_Data_Analyser+0x6aa>
	{
		printf("Injecting INVALID_SRC_ADDR\n");
 800b728:	484d      	ldr	r0, [pc, #308]	; (800b860 <Siemens_Data_Analyser+0x788>)
 800b72a:	f016 fe5b 	bl	80223e4 <puts>
		Temp_Siemens_RX_st.SourceAddr = HAL_RNG_GetRandomNumber(&hrng) % 0xffffff;
 800b72e:	4846      	ldr	r0, [pc, #280]	; (800b848 <Siemens_Data_Analyser+0x770>)
 800b730:	f00e fa64 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800b734:	4601      	mov	r1, r0
 800b736:	f240 1301 	movw	r3, #257	; 0x101
 800b73a:	fba3 2301 	umull	r2, r3, r3, r1
 800b73e:	1aca      	subs	r2, r1, r3
 800b740:	0852      	lsrs	r2, r2, #1
 800b742:	4413      	add	r3, r2
 800b744:	0dda      	lsrs	r2, r3, #23
 800b746:	4613      	mov	r3, r2
 800b748:	061b      	lsls	r3, r3, #24
 800b74a:	1a9b      	subs	r3, r3, r2
 800b74c:	1aca      	subs	r2, r1, r3
 800b74e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b752:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b756:	611a      	str	r2, [r3, #16]
		if(Temp_Siemens_RX_st.ExtSourceAddr == EI_data.Siemens_st.SourceAddress)
 800b758:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b75c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b760:	695a      	ldr	r2, [r3, #20]
 800b762:	4b33      	ldr	r3, [pc, #204]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b764:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b768:	429a      	cmp	r2, r3
 800b76a:	d10a      	bne.n	800b782 <Siemens_Data_Analyser+0x6aa>
		{
			Temp_Siemens_RX_st.ExtSourceAddr += 4;
 800b76c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b770:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b774:	695b      	ldr	r3, [r3, #20]
 800b776:	1d1a      	adds	r2, r3, #4
 800b778:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b77c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b780:	615a      	str	r2, [r3, #20]
		}
	}
#endif


	if(Temp_Siemens_RX_st.ExtSourceAddr != EI_data.Siemens_st.SourceAddress)
 800b782:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b786:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b78a:	695a      	ldr	r2, [r3, #20]
 800b78c:	4b28      	ldr	r3, [pc, #160]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b78e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b792:	429a      	cmp	r2, r3
 800b794:	d015      	beq.n	800b7c2 <Siemens_Data_Analyser+0x6ea>
	{
		printf("Source Address Not Matched\n");
 800b796:	4833      	ldr	r0, [pc, #204]	; (800b864 <Siemens_Data_Analyser+0x78c>)
 800b798:	f016 fe24 	bl	80223e4 <puts>
		printf("Received:%lu\n",Temp_Siemens_RX_st.ExtSourceAddr);
 800b79c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b7a0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	4823      	ldr	r0, [pc, #140]	; (800b838 <Siemens_Data_Analyser+0x760>)
 800b7aa:	f016 fd7f 	bl	80222ac <iprintf>
		printf("Expected:%lu\n",EI_data.Siemens_st.SourceAddress);
 800b7ae:	4b20      	ldr	r3, [pc, #128]	; (800b830 <Siemens_Data_Analyser+0x758>)
 800b7b0:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b7b4:	4619      	mov	r1, r3
 800b7b6:	4821      	ldr	r0, [pc, #132]	; (800b83c <Siemens_Data_Analyser+0x764>)
 800b7b8:	f016 fd78 	bl	80222ac <iprintf>
		RejectPacketFlag = 1;
 800b7bc:	2301      	movs	r3, #1
 800b7be:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_add:%lu\n",Temp_Siemens_RX_st.src_add);
	BITSTUFFINC(24);//Source Address
 800b7c2:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b7c6:	3318      	adds	r3, #24
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	da00      	bge.n	800b7ce <Siemens_Data_Analyser+0x6f6>
 800b7cc:	3307      	adds	r3, #7
 800b7ce:	10db      	asrs	r3, r3, #3
 800b7d0:	b29a      	uxth	r2, r3
 800b7d2:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b7d6:	4413      	add	r3, r2
 800b7d8:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b7dc:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b7e0:	3318      	adds	r3, #24
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	b21b      	sxth	r3, r3
 800b7e6:	425a      	negs	r2, r3
 800b7e8:	f003 0307 	and.w	r3, r3, #7
 800b7ec:	f002 0207 	and.w	r2, r2, #7
 800b7f0:	bf58      	it	pl
 800b7f2:	4253      	negpl	r3, r2
 800b7f4:	b21b      	sxth	r3, r3
 800b7f6:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.ProdDataVer = Extract_Parity_Data(ucBit,8,&Buff[ucByte],EVEN_PARITY);
 800b7fa:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b7fe:	b2d8      	uxtb	r0, r3
 800b800:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b804:	f107 020c 	add.w	r2, r7, #12
 800b808:	441a      	add	r2, r3
 800b80a:	2300      	movs	r3, #0
 800b80c:	2108      	movs	r1, #8
 800b80e:	f001 fdf3 	bl	800d3f8 <Extract_Parity_Data>
 800b812:	4603      	mov	r3, r0
 800b814:	b2da      	uxtb	r2, r3
 800b816:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b81a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b81e:	761a      	strb	r2, [r3, #24]
	//	printf("prod_data_ver:%u\n",Temp_Siemens_RX_st.prod_data_ver);
	BITSTUFFINC(8);//Product Data Version
 800b820:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b824:	3308      	adds	r3, #8
 800b826:	2b00      	cmp	r3, #0
 800b828:	da1e      	bge.n	800b868 <Siemens_Data_Analyser+0x790>
 800b82a:	3307      	adds	r3, #7
 800b82c:	e01c      	b.n	800b868 <Siemens_Data_Analyser+0x790>
 800b82e:	bf00      	nop
 800b830:	20000304 	.word	0x20000304
 800b834:	08025afc 	.word	0x08025afc
 800b838:	08025b1c 	.word	0x08025b1c
 800b83c:	08025b2c 	.word	0x08025b2c
 800b840:	20003470 	.word	0x20003470
 800b844:	08025b3c 	.word	0x08025b3c
 800b848:	20009c78 	.word	0x20009c78
 800b84c:	80808081 	.word	0x80808081
 800b850:	08025b5c 	.word	0x08025b5c
 800b854:	08025adc 	.word	0x08025adc
 800b858:	08025aec 	.word	0x08025aec
 800b85c:	08025c70 	.word	0x08025c70
 800b860:	08025b7c 	.word	0x08025b7c
 800b864:	08025b98 	.word	0x08025b98
 800b868:	10db      	asrs	r3, r3, #3
 800b86a:	b29a      	uxth	r2, r3
 800b86c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b870:	4413      	add	r3, r2
 800b872:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b876:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b87a:	3308      	adds	r3, #8
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	b21b      	sxth	r3, r3
 800b880:	425a      	negs	r2, r3
 800b882:	f003 0307 	and.w	r3, r3, #7
 800b886:	f002 0207 	and.w	r2, r2, #7
 800b88a:	bf58      	it	pl
 800b88c:	4253      	negpl	r3, r2
 800b88e:	b21b      	sxth	r3, r3
 800b890:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.CompIndex = Extract_Parity_Data(ucBit,8,&Buff[ucByte],ODD_PARITY);
 800b894:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b898:	b2d8      	uxtb	r0, r3
 800b89a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b89e:	f107 020c 	add.w	r2, r7, #12
 800b8a2:	441a      	add	r2, r3
 800b8a4:	2301      	movs	r3, #1
 800b8a6:	2108      	movs	r1, #8
 800b8a8:	f001 fda6 	bl	800d3f8 <Extract_Parity_Data>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	b2da      	uxtb	r2, r3
 800b8b0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b8b4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b8b8:	765a      	strb	r2, [r3, #25]
	//	printf("comp_index:%u\n",Temp_Siemens_RX_st.comp_index);
	BITSTUFFINC(8);//Compatability Index
 800b8ba:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b8be:	3308      	adds	r3, #8
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da00      	bge.n	800b8c6 <Siemens_Data_Analyser+0x7ee>
 800b8c4:	3307      	adds	r3, #7
 800b8c6:	10db      	asrs	r3, r3, #3
 800b8c8:	b29a      	uxth	r2, r3
 800b8ca:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b8d4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b8d8:	3308      	adds	r3, #8
 800b8da:	b29b      	uxth	r3, r3
 800b8dc:	b21b      	sxth	r3, r3
 800b8de:	425a      	negs	r2, r3
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	f002 0207 	and.w	r2, r2, #7
 800b8e8:	bf58      	it	pl
 800b8ea:	4253      	negpl	r3, r2
 800b8ec:	b21b      	sxth	r3, r3
 800b8ee:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.DestPort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800b8f2:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b8f6:	b2d8      	uxtb	r0, r3
 800b8f8:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b8fc:	f107 020c 	add.w	r2, r7, #12
 800b900:	441a      	add	r2, r3
 800b902:	2302      	movs	r3, #2
 800b904:	2108      	movs	r1, #8
 800b906:	f001 fd77 	bl	800d3f8 <Extract_Parity_Data>
 800b90a:	4603      	mov	r3, r0
 800b90c:	b2da      	uxtb	r2, r3
 800b90e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b912:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b916:	769a      	strb	r2, [r3, #26]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800b918:	4bab      	ldr	r3, [pc, #684]	; (800bbc8 <Siemens_Data_Analyser+0xaf0>)
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	08db      	lsrs	r3, r3, #3
 800b91e:	f003 0301 	and.w	r3, r3, #1
 800b922:	2b00      	cmp	r3, #0
 800b924:	d02a      	beq.n	800b97c <Siemens_Data_Analyser+0x8a4>
	{
		printf("Injecting INVALID_DES_PORT\n");
 800b926:	48a9      	ldr	r0, [pc, #676]	; (800bbcc <Siemens_Data_Analyser+0xaf4>)
 800b928:	f016 fd5c 	bl	80223e4 <puts>
		Temp_Siemens_RX_st.DestPort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800b92c:	48a8      	ldr	r0, [pc, #672]	; (800bbd0 <Siemens_Data_Analyser+0xaf8>)
 800b92e:	f00e f965 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800b932:	4601      	mov	r1, r0
 800b934:	4ba7      	ldr	r3, [pc, #668]	; (800bbd4 <Siemens_Data_Analyser+0xafc>)
 800b936:	fba3 2301 	umull	r2, r3, r3, r1
 800b93a:	09da      	lsrs	r2, r3, #7
 800b93c:	4613      	mov	r3, r2
 800b93e:	021b      	lsls	r3, r3, #8
 800b940:	1a9b      	subs	r3, r3, r2
 800b942:	1aca      	subs	r2, r1, r3
 800b944:	b2d2      	uxtb	r2, r2
 800b946:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b94a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b94e:	769a      	strb	r2, [r3, #26]
		if(Temp_Siemens_RX_st.DestPort == EI_data.Siemens_st.DestPort)
 800b950:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b954:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b958:	7e9a      	ldrb	r2, [r3, #26]
 800b95a:	4b9f      	ldr	r3, [pc, #636]	; (800bbd8 <Siemens_Data_Analyser+0xb00>)
 800b95c:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800b960:	429a      	cmp	r2, r3
 800b962:	d10b      	bne.n	800b97c <Siemens_Data_Analyser+0x8a4>
		{
			Temp_Siemens_RX_st.DestPort += 4;
 800b964:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b968:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b96c:	7e9b      	ldrb	r3, [r3, #26]
 800b96e:	3304      	adds	r3, #4
 800b970:	b2da      	uxtb	r2, r3
 800b972:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b976:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b97a:	769a      	strb	r2, [r3, #26]
		}
	}
#endif

	if(Temp_Siemens_RX_st.DestPort != EI_data.Siemens_st.DestPort)
 800b97c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b980:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b984:	7e9a      	ldrb	r2, [r3, #26]
 800b986:	4b94      	ldr	r3, [pc, #592]	; (800bbd8 <Siemens_Data_Analyser+0xb00>)
 800b988:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800b98c:	429a      	cmp	r2, r3
 800b98e:	d015      	beq.n	800b9bc <Siemens_Data_Analyser+0x8e4>
	{
		printf("Destination Port Not Matched\n");
 800b990:	4892      	ldr	r0, [pc, #584]	; (800bbdc <Siemens_Data_Analyser+0xb04>)
 800b992:	f016 fd27 	bl	80223e4 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.DestPort);
 800b996:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800b99a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800b99e:	7e9b      	ldrb	r3, [r3, #26]
 800b9a0:	4619      	mov	r1, r3
 800b9a2:	488f      	ldr	r0, [pc, #572]	; (800bbe0 <Siemens_Data_Analyser+0xb08>)
 800b9a4:	f016 fc82 	bl	80222ac <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.DestPort);
 800b9a8:	4b8b      	ldr	r3, [pc, #556]	; (800bbd8 <Siemens_Data_Analyser+0xb00>)
 800b9aa:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800b9ae:	4619      	mov	r1, r3
 800b9b0:	488c      	ldr	r0, [pc, #560]	; (800bbe4 <Siemens_Data_Analyser+0xb0c>)
 800b9b2:	f016 fc7b 	bl	80222ac <iprintf>
		RejectPacketFlag = 1;
 800b9b6:	2301      	movs	r3, #1
 800b9b8:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("dst_port:%u\n",Temp_Siemens_RX_st.dst_port);
	BITSTUFFINC(8); //Dest Port.
 800b9bc:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800b9c0:	3308      	adds	r3, #8
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	da00      	bge.n	800b9c8 <Siemens_Data_Analyser+0x8f0>
 800b9c6:	3307      	adds	r3, #7
 800b9c8:	10db      	asrs	r3, r3, #3
 800b9ca:	b29a      	uxth	r2, r3
 800b9cc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b9d0:	4413      	add	r3, r2
 800b9d2:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800b9d6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b9da:	3308      	adds	r3, #8
 800b9dc:	b29b      	uxth	r3, r3
 800b9de:	b21b      	sxth	r3, r3
 800b9e0:	425a      	negs	r2, r3
 800b9e2:	f003 0307 	and.w	r3, r3, #7
 800b9e6:	f002 0207 	and.w	r2, r2, #7
 800b9ea:	bf58      	it	pl
 800b9ec:	4253      	negpl	r3, r2
 800b9ee:	b21b      	sxth	r3, r3
 800b9f0:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	Temp_Siemens_RX_st.SourcePort = Extract_Parity_Data(ucBit,8,&Buff[ucByte],NO_PARITY);
 800b9f4:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800b9f8:	b2d8      	uxtb	r0, r3
 800b9fa:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800b9fe:	f107 020c 	add.w	r2, r7, #12
 800ba02:	441a      	add	r2, r3
 800ba04:	2302      	movs	r3, #2
 800ba06:	2108      	movs	r1, #8
 800ba08:	f001 fcf6 	bl	800d3f8 <Extract_Parity_Data>
 800ba0c:	4603      	mov	r3, r0
 800ba0e:	b2da      	uxtb	r2, r3
 800ba10:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba14:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba18:	76da      	strb	r2, [r3, #27]

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800ba1a:	4b6b      	ldr	r3, [pc, #428]	; (800bbc8 <Siemens_Data_Analyser+0xaf0>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	091b      	lsrs	r3, r3, #4
 800ba20:	f003 0301 	and.w	r3, r3, #1
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d02a      	beq.n	800ba7e <Siemens_Data_Analyser+0x9a6>
	{
		printf("Injecting INVALID_SRC_PORT\n");
 800ba28:	486f      	ldr	r0, [pc, #444]	; (800bbe8 <Siemens_Data_Analyser+0xb10>)
 800ba2a:	f016 fcdb 	bl	80223e4 <puts>
		Temp_Siemens_RX_st.SourcePort = HAL_RNG_GetRandomNumber(&hrng) % 0xff;
 800ba2e:	4868      	ldr	r0, [pc, #416]	; (800bbd0 <Siemens_Data_Analyser+0xaf8>)
 800ba30:	f00e f8e4 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800ba34:	4601      	mov	r1, r0
 800ba36:	4b67      	ldr	r3, [pc, #412]	; (800bbd4 <Siemens_Data_Analyser+0xafc>)
 800ba38:	fba3 2301 	umull	r2, r3, r3, r1
 800ba3c:	09da      	lsrs	r2, r3, #7
 800ba3e:	4613      	mov	r3, r2
 800ba40:	021b      	lsls	r3, r3, #8
 800ba42:	1a9b      	subs	r3, r3, r2
 800ba44:	1aca      	subs	r2, r1, r3
 800ba46:	b2d2      	uxtb	r2, r2
 800ba48:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba4c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba50:	76da      	strb	r2, [r3, #27]
		if(Temp_Siemens_RX_st.SourcePort == EI_data.Siemens_st.SourcePort)
 800ba52:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba56:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba5a:	7eda      	ldrb	r2, [r3, #27]
 800ba5c:	4b5e      	ldr	r3, [pc, #376]	; (800bbd8 <Siemens_Data_Analyser+0xb00>)
 800ba5e:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800ba62:	429a      	cmp	r2, r3
 800ba64:	d10b      	bne.n	800ba7e <Siemens_Data_Analyser+0x9a6>
		{
			Temp_Siemens_RX_st.SourcePort += 4;
 800ba66:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba6a:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba6e:	7edb      	ldrb	r3, [r3, #27]
 800ba70:	3304      	adds	r3, #4
 800ba72:	b2da      	uxtb	r2, r3
 800ba74:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba78:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba7c:	76da      	strb	r2, [r3, #27]
		}
	}
#endif

	if(Temp_Siemens_RX_st.SourcePort != EI_data.Siemens_st.SourcePort)
 800ba7e:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba82:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800ba86:	7eda      	ldrb	r2, [r3, #27]
 800ba88:	4b53      	ldr	r3, [pc, #332]	; (800bbd8 <Siemens_Data_Analyser+0xb00>)
 800ba8a:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d015      	beq.n	800babe <Siemens_Data_Analyser+0x9e6>
	{
		printf("Source Port Not Matched\n");
 800ba92:	4856      	ldr	r0, [pc, #344]	; (800bbec <Siemens_Data_Analyser+0xb14>)
 800ba94:	f016 fca6 	bl	80223e4 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.SourcePort);
 800ba98:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800ba9c:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800baa0:	7edb      	ldrb	r3, [r3, #27]
 800baa2:	4619      	mov	r1, r3
 800baa4:	484e      	ldr	r0, [pc, #312]	; (800bbe0 <Siemens_Data_Analyser+0xb08>)
 800baa6:	f016 fc01 	bl	80222ac <iprintf>
		printf("Expected:%u\n",EI_data.Siemens_st.SourcePort);
 800baaa:	4b4b      	ldr	r3, [pc, #300]	; (800bbd8 <Siemens_Data_Analyser+0xb00>)
 800baac:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800bab0:	4619      	mov	r1, r3
 800bab2:	484c      	ldr	r0, [pc, #304]	; (800bbe4 <Siemens_Data_Analyser+0xb0c>)
 800bab4:	f016 fbfa 	bl	80222ac <iprintf>
		RejectPacketFlag = 1;
 800bab8:	2301      	movs	r3, #1
 800baba:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
	}
	//	printf("src_port:%u\n",Temp_Siemens_RX_st.src_port);
	BITSTUFFINC(8); // Source Port.
 800babe:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bac2:	3308      	adds	r3, #8
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	da00      	bge.n	800baca <Siemens_Data_Analyser+0x9f2>
 800bac8:	3307      	adds	r3, #7
 800baca:	10db      	asrs	r3, r3, #3
 800bacc:	b29a      	uxth	r2, r3
 800bace:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bad2:	4413      	add	r3, r2
 800bad4:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bad8:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800badc:	3308      	adds	r3, #8
 800bade:	b29b      	uxth	r3, r3
 800bae0:	b21b      	sxth	r3, r3
 800bae2:	425a      	negs	r2, r3
 800bae4:	f003 0307 	and.w	r3, r3, #7
 800bae8:	f002 0207 	and.w	r2, r2, #7
 800baec:	bf58      	it	pl
 800baee:	4253      	negpl	r3, r2
 800baf0:	b21b      	sxth	r3, r3
 800baf2:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.RxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800baf6:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bafa:	b2d8      	uxtb	r0, r3
 800bafc:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb00:	f107 020c 	add.w	r2, r7, #12
 800bb04:	441a      	add	r2, r3
 800bb06:	2302      	movs	r3, #2
 800bb08:	2120      	movs	r1, #32
 800bb0a:	f001 fc75 	bl	800d3f8 <Extract_Parity_Data>
 800bb0e:	4603      	mov	r3, r0
 800bb10:	461a      	mov	r2, r3
 800bb12:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb16:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb1a:	61da      	str	r2, [r3, #28]
	//	printf("Rx_time_stamp:%lu\n",Temp_Siemens_RX_st.Rx_time_stamp);
	BITSTUFFINC(32);//RX_TIME STAMP
 800bb1c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bb20:	3320      	adds	r3, #32
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	da00      	bge.n	800bb28 <Siemens_Data_Analyser+0xa50>
 800bb26:	3307      	adds	r3, #7
 800bb28:	10db      	asrs	r3, r3, #3
 800bb2a:	b29a      	uxth	r2, r3
 800bb2c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb30:	4413      	add	r3, r2
 800bb32:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bb36:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb3a:	3320      	adds	r3, #32
 800bb3c:	b29b      	uxth	r3, r3
 800bb3e:	b21b      	sxth	r3, r3
 800bb40:	425a      	negs	r2, r3
 800bb42:	f003 0307 	and.w	r3, r3, #7
 800bb46:	f002 0207 	and.w	r2, r2, #7
 800bb4a:	bf58      	it	pl
 800bb4c:	4253      	negpl	r3, r2
 800bb4e:	b21b      	sxth	r3, r3
 800bb50:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46


	Temp_Siemens_RX_st.TxTimeStamp = Extract_Parity_Data(ucBit,32,&Buff[ucByte],NO_PARITY);
 800bb54:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb58:	b2d8      	uxtb	r0, r3
 800bb5a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb5e:	f107 020c 	add.w	r2, r7, #12
 800bb62:	441a      	add	r2, r3
 800bb64:	2302      	movs	r3, #2
 800bb66:	2120      	movs	r1, #32
 800bb68:	f001 fc46 	bl	800d3f8 <Extract_Parity_Data>
 800bb6c:	4603      	mov	r3, r0
 800bb6e:	461a      	mov	r2, r3
 800bb70:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bb74:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bb78:	621a      	str	r2, [r3, #32]
	//	printf("Tx_time_stamp:%lu\n",Temp_Siemens_RX_st.Tx_time_stamp);
	BITSTUFFINC(32);//TX_TIME STAMP
 800bb7a:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bb7e:	3320      	adds	r3, #32
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	da00      	bge.n	800bb86 <Siemens_Data_Analyser+0xaae>
 800bb84:	3307      	adds	r3, #7
 800bb86:	10db      	asrs	r3, r3, #3
 800bb88:	b29a      	uxth	r2, r3
 800bb8a:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bb8e:	4413      	add	r3, r2
 800bb90:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bb94:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bb98:	3320      	adds	r3, #32
 800bb9a:	b29b      	uxth	r3, r3
 800bb9c:	b21b      	sxth	r3, r3
 800bb9e:	425a      	negs	r2, r3
 800bba0:	f003 0307 	and.w	r3, r3, #7
 800bba4:	f002 0207 	and.w	r2, r2, #7
 800bba8:	bf58      	it	pl
 800bbaa:	4253      	negpl	r3, r2
 800bbac:	b21b      	sxth	r3, r3
 800bbae:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46

	//TO DO WRITE DATA EXTRACTION
	App_data_Size = 0;
 800bbb2:	2300      	movs	r3, #0
 800bbb4:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
	printf("\n");
 800bbb8:	200a      	movs	r0, #10
 800bbba:	f016 fb8f 	bl	80222dc <putchar>
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800bbbe:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bbc2:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800bbc6:	e052      	b.n	800bc6e <Siemens_Data_Analyser+0xb96>
 800bbc8:	20003470 	.word	0x20003470
 800bbcc:	08025bb4 	.word	0x08025bb4
 800bbd0:	20009c78 	.word	0x20009c78
 800bbd4:	80808081 	.word	0x80808081
 800bbd8:	20000304 	.word	0x20000304
 800bbdc:	08025bd0 	.word	0x08025bd0
 800bbe0:	08025adc 	.word	0x08025adc
 800bbe4:	08025aec 	.word	0x08025aec
 800bbe8:	08025bf0 	.word	0x08025bf0
 800bbec:	08025c0c 	.word	0x08025c0c
	{
		App_Data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
 800bbf0:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bbf4:	b2d8      	uxtb	r0, r3
 800bbf6:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800bbfa:	f107 020c 	add.w	r2, r7, #12
 800bbfe:	441a      	add	r2, r3
 800bc00:	2300      	movs	r3, #0
 800bc02:	2108      	movs	r1, #8
 800bc04:	f001 fbf8 	bl	800d3f8 <Extract_Parity_Data>
 800bc08:	4601      	mov	r1, r0
 800bc0a:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	; 0xa50
 800bc0e:	1c5a      	adds	r2, r3, #1
 800bc10:	f8a7 2a50 	strh.w	r2, [r7, #2640]	; 0xa50
 800bc14:	461a      	mov	r2, r3
 800bc16:	b2c9      	uxtb	r1, r1
 800bc18:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bc1c:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 800bc20:	5499      	strb	r1, [r3, r2]
		//printf("D[%02u]:%02x|",App_data_Size,App_Data[App_data_Size]);
		//Temp_Siemens_RX_st.app_data[App_data_Traverser++] = Extract_Parity_Data(ucBit,8,&Buff[Data_Traverser],EVEN_PARITY);
		//Extract the Received application data into buffer and checking parity and Removing Parity.
		++App_data_Size; //This variable is to know the Latest Size of Received Application Data
 800bc22:	f8b7 3a4e 	ldrh.w	r3, [r7, #2638]	; 0xa4e
 800bc26:	3301      	adds	r3, #1
 800bc28:	f8a7 3a4e 	strh.w	r3, [r7, #2638]	; 0xa4e
		BITSTUFFINC(8);
 800bc2c:	f9b7 3a46 	ldrsh.w	r3, [r7, #2630]	; 0xa46
 800bc30:	3308      	adds	r3, #8
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	da00      	bge.n	800bc38 <Siemens_Data_Analyser+0xb60>
 800bc36:	3307      	adds	r3, #7
 800bc38:	10db      	asrs	r3, r3, #3
 800bc3a:	b29a      	uxth	r2, r3
 800bc3c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bc40:	4413      	add	r3, r2
 800bc42:	f8a7 3a48 	strh.w	r3, [r7, #2632]	; 0xa48
 800bc46:	f8b7 3a46 	ldrh.w	r3, [r7, #2630]	; 0xa46
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	b21b      	sxth	r3, r3
 800bc50:	425a      	negs	r2, r3
 800bc52:	f003 0307 	and.w	r3, r3, #7
 800bc56:	f002 0207 	and.w	r2, r2, #7
 800bc5a:	bf58      	it	pl
 800bc5c:	4253      	negpl	r3, r2
 800bc5e:	b21b      	sxth	r3, r3
 800bc60:	f8a7 3a46 	strh.w	r3, [r7, #2630]	; 0xa46
	for(Data_Traverser = ucByte; Data_Traverser <Recv_CRC_Loc; Data_Traverser++)
 800bc64:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800bc68:	3301      	adds	r3, #1
 800bc6a:	f887 3a57 	strb.w	r3, [r7, #2647]	; 0xa57
 800bc6e:	f897 3a57 	ldrb.w	r3, [r7, #2647]	; 0xa57
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	f8b7 2a40 	ldrh.w	r2, [r7, #2624]	; 0xa40
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d8b9      	bhi.n	800bbf0 <Siemens_Data_Analyser+0xb18>
	}
	printf("\n");
 800bc7c:	200a      	movs	r0, #10
 800bc7e:	f016 fb2d 	bl	80222dc <putchar>



	Temp_Siemens_RX_st.No_ofDataBytes = ExtractAppData(App_Data, App_data_Size, Temp_Siemens_RX_st.AppData);
 800bc82:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800bc86:	f103 0226 	add.w	r2, r3, #38	; 0x26
 800bc8a:	f8b7 1a4e 	ldrh.w	r1, [r7, #2638]	; 0xa4e
 800bc8e:	f607 0334 	addw	r3, r7, #2100	; 0x834
 800bc92:	4618      	mov	r0, r3
 800bc94:	f000 f966 	bl	800bf64 <ExtractAppData>
 800bc98:	4603      	mov	r3, r0
 800bc9a:	461a      	mov	r2, r3
 800bc9c:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bca0:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bca4:	849a      	strh	r2, [r3, #36]	; 0x24

	//	Temp_Siemens_RX_st.No_ofDataBytes = App_data_Size;

	TempApp_data_Size  = EI_data.Siemens_st.Booloutputs % 8;
 800bca6:	4b9c      	ldr	r3, [pc, #624]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800bca8:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bcac:	f003 0307 	and.w	r3, r3, #7
 800bcb0:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	if(TempApp_data_Size!= 0)
 800bcb4:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800bcb8:	2b00      	cmp	r3, #0
 800bcba:	d008      	beq.n	800bcce <Siemens_Data_Analyser+0xbf6>
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800bcbc:	4b96      	ldr	r3, [pc, #600]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800bcbe:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bcc2:	08db      	lsrs	r3, r3, #3
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
 800bccc:	e005      	b.n	800bcda <Siemens_Data_Analyser+0xc02>
	}
	else
	{
		TempApp_data_Size  = (EI_data.Siemens_st.Booloutputs/8);
 800bcce:	4b92      	ldr	r3, [pc, #584]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800bcd0:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800bcd4:	08db      	lsrs	r3, r3, #3
 800bcd6:	f8a7 3a4c 	strh.w	r3, [r7, #2636]	; 0xa4c
	}


	if(Temp_Siemens_RX_st.No_ofDataBytes != TempApp_data_Size)
 800bcda:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcde:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bce2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bce4:	f8b7 2a4c 	ldrh.w	r2, [r7, #2636]	; 0xa4c
 800bce8:	429a      	cmp	r2, r3
 800bcea:	d02c      	beq.n	800bd46 <Siemens_Data_Analyser+0xc6e>
	{
		printf("Application Data Not Matched\n");
 800bcec:	488b      	ldr	r0, [pc, #556]	; (800bf1c <Siemens_Data_Analyser+0xe44>)
 800bcee:	f016 fb79 	bl	80223e4 <puts>
		printf("Received:%u\n",Temp_Siemens_RX_st.No_ofDataBytes);
 800bcf2:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bcf6:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bcfa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bcfc:	4619      	mov	r1, r3
 800bcfe:	4888      	ldr	r0, [pc, #544]	; (800bf20 <Siemens_Data_Analyser+0xe48>)
 800bd00:	f016 fad4 	bl	80222ac <iprintf>
		printf("Expected:%u\n",TempApp_data_Size);
 800bd04:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	; 0xa4c
 800bd08:	4619      	mov	r1, r3
 800bd0a:	4886      	ldr	r0, [pc, #536]	; (800bf24 <Siemens_Data_Analyser+0xe4c>)
 800bd0c:	f016 face 	bl	80222ac <iprintf>

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)
 800bd10:	4985      	ldr	r1, [pc, #532]	; (800bf28 <Siemens_Data_Analyser+0xe50>)
 800bd12:	4886      	ldr	r0, [pc, #536]	; (800bf2c <Siemens_Data_Analyser+0xe54>)
 800bd14:	f7f4 fa94 	bl	8000240 <strcmp>
 800bd18:	4603      	mov	r3, r0
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d002      	beq.n	800bd24 <Siemens_Data_Analyser+0xc4c>
		{
			RejectPacketFlag = 1;
 800bd1e:	2301      	movs	r3, #1
 800bd20:	f887 3a4b 	strb.w	r3, [r7, #2635]	; 0xa4b
		}
		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800bd24:	4980      	ldr	r1, [pc, #512]	; (800bf28 <Siemens_Data_Analyser+0xe50>)
 800bd26:	4881      	ldr	r0, [pc, #516]	; (800bf2c <Siemens_Data_Analyser+0xe54>)
 800bd28:	f7f4 fa8a 	bl	8000240 <strcmp>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d109      	bne.n	800bd46 <Siemens_Data_Analyser+0xc6e>
		{
			EI_data.Siemens_st.Booloutputs = (Temp_Siemens_RX_st.No_ofDataBytes * 8);
 800bd32:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd36:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800bd3c:	00db      	lsls	r3, r3, #3
 800bd3e:	b29a      	uxth	r2, r3
 800bd40:	4b75      	ldr	r3, [pc, #468]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800bd42:	f8a3 22fe 	strh.w	r2, [r3, #766]	; 0x2fe
		}
	}

	if(RejectPacketFlag == 1)
 800bd46:	f897 3a4b 	ldrb.w	r3, [r7, #2635]	; 0xa4b
 800bd4a:	2b01      	cmp	r3, #1
 800bd4c:	f000 80de 	beq.w	800bf0c <Siemens_Data_Analyser+0xe34>
	{
		return;
	}

	VitalCRC = GetCRC16(0, Temp_Siemens_RX_st.AppData, App_data_Size); /* Calculating Application Data CRC */
 800bd50:	f9b7 2a4e 	ldrsh.w	r2, [r7, #2638]	; 0xa4e
 800bd54:	f207 630c 	addw	r3, r7, #1548	; 0x60c
 800bd58:	3326      	adds	r3, #38	; 0x26
 800bd5a:	4619      	mov	r1, r3
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f006 fe09 	bl	8012974 <GetCRC16>
 800bd62:	4603      	mov	r3, r0
 800bd64:	f8a7 3a38 	strh.w	r3, [r7, #2616]	; 0xa38

	Temp_Siemens_RX_st.crc = ExtractBits(0,16,&Buff[ucByte]); /* Extraction of Packet CRC */
 800bd68:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	; 0xa48
 800bd6c:	f107 020c 	add.w	r2, r7, #12
 800bd70:	4413      	add	r3, r2
 800bd72:	461a      	mov	r2, r3
 800bd74:	2110      	movs	r1, #16
 800bd76:	2000      	movs	r0, #0
 800bd78:	f7f4 fc4c 	bl	8000614 <ExtractBits>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	b29a      	uxth	r2, r3
 800bd80:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd84:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bd88:	f8a3 2226 	strh.w	r2, [r3, #550]	; 0x226




	/* if Everything is Okay copy to Main Rx Structure */
	memset(&Siemens_RX_st,0,sizeof(SIEMENS_PKT_t));
 800bd8c:	f44f 720a 	mov.w	r2, #552	; 0x228
 800bd90:	2100      	movs	r1, #0
 800bd92:	4867      	ldr	r0, [pc, #412]	; (800bf30 <Siemens_Data_Analyser+0xe58>)
 800bd94:	f016 f9a2 	bl	80220dc <memset>
	memcpy(&Siemens_RX_st,&Temp_Siemens_RX_st,sizeof(SIEMENS_PKT_t));
 800bd98:	4a65      	ldr	r2, [pc, #404]	; (800bf30 <Siemens_Data_Analyser+0xe58>)
 800bd9a:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bd9e:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bda2:	4610      	mov	r0, r2
 800bda4:	4619      	mov	r1, r3
 800bda6:	f44f 730a 	mov.w	r3, #552	; 0x228
 800bdaa:	461a      	mov	r2, r3
 800bdac:	f016 f96e 	bl	802208c <memcpy>

	/* Send Reply to Received Packet */
	Form_Siemens_Reply();
 800bdb0:	f000 f92e 	bl	800c010 <Form_Siemens_Reply>




	//	if( (RxTimeStampNotUpdatedCount <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)  ) /* Consider the Packet If our Time stamp is Updating only (or) up to Certain count */
	if( abs(RxTimeStampNotUpdatedCount - EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) <= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800bdb4:	4b5f      	ldr	r3, [pc, #380]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800bdb6:	881b      	ldrh	r3, [r3, #0]
 800bdb8:	461a      	mov	r2, r3
 800bdba:	4b57      	ldr	r3, [pc, #348]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800bdbc:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bdc0:	1ad3      	subs	r3, r2, r3
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	bfb8      	it	lt
 800bdc6:	425b      	neglt	r3, r3
 800bdc8:	461a      	mov	r2, r3
 800bdca:	4b53      	ldr	r3, [pc, #332]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800bdcc:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800bdd0:	429a      	cmp	r2, r3
 800bdd2:	d869      	bhi.n	800bea8 <Siemens_Data_Analyser+0xdd0>
	{
		if(Prev_RxTimeStampSiemens != Temp_Siemens_RX_st.RxTimeStamp)
 800bdd4:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdd8:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bddc:	69da      	ldr	r2, [r3, #28]
 800bdde:	4b56      	ldr	r3, [pc, #344]	; (800bf38 <Siemens_Data_Analyser+0xe60>)
 800bde0:	681b      	ldr	r3, [r3, #0]
 800bde2:	429a      	cmp	r2, r3
 800bde4:	d044      	beq.n	800be70 <Siemens_Data_Analyser+0xd98>
		{
			/* Update Clocks if Any */
			//			printf("Updating...\n");
			SiemensClocks_st.LastReceiveClk = HAL_GetTick();
 800bde6:	f009 fa57 	bl	8015298 <HAL_GetTick>
 800bdea:	4603      	mov	r3, r0
 800bdec:	4a53      	ldr	r2, [pc, #332]	; (800bf3c <Siemens_Data_Analyser+0xe64>)
 800bdee:	60d3      	str	r3, [r2, #12]



			Prev_RxTimeStampSiemens = Temp_Siemens_RX_st.RxTimeStamp;
 800bdf0:	f607 2358 	addw	r3, r7, #2648	; 0xa58
 800bdf4:	f2a3 434c 	subw	r3, r3, #1100	; 0x44c
 800bdf8:	69db      	ldr	r3, [r3, #28]
 800bdfa:	4a4f      	ldr	r2, [pc, #316]	; (800bf38 <Siemens_Data_Analyser+0xe60>)
 800bdfc:	6013      	str	r3, [r2, #0]
			RxTimeStampNotUpdatedCount = 0;
 800bdfe:	4b4d      	ldr	r3, [pc, #308]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800be00:	2200      	movs	r2, #0
 800be02:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS Updating:%u\n",RxTimeStampNotUpdatedCount);
			if(SiemensMain_Relays_st.VitalCRC != VitalCRC)
 800be04:	4b4e      	ldr	r3, [pc, #312]	; (800bf40 <Siemens_Data_Analyser+0xe68>)
 800be06:	885b      	ldrh	r3, [r3, #2]
 800be08:	f8b7 2a38 	ldrh.w	r2, [r7, #2616]	; 0xa38
 800be0c:	429a      	cmp	r2, r3
 800be0e:	d04b      	beq.n	800bea8 <Siemens_Data_Analyser+0xdd0>
			{
				memset(&SiemensMain_Relays_st,0,sizeof(VITAL_DATA_SHARING_t));
 800be10:	f44f 7201 	mov.w	r2, #516	; 0x204
 800be14:	2100      	movs	r1, #0
 800be16:	484a      	ldr	r0, [pc, #296]	; (800bf40 <Siemens_Data_Analyser+0xe68>)
 800be18:	f016 f960 	bl	80220dc <memset>
				memset(&VitalData2MIE_st,0,sizeof(VITAL_DATA_t));
 800be1c:	f240 2202 	movw	r2, #514	; 0x202
 800be20:	2100      	movs	r1, #0
 800be22:	4848      	ldr	r0, [pc, #288]	; (800bf44 <Siemens_Data_Analyser+0xe6c>)
 800be24:	f016 f95a 	bl	80220dc <memset>

				SiemensMain_Relays_st.VitalCRC = VitalCRC;
 800be28:	4a45      	ldr	r2, [pc, #276]	; (800bf40 <Siemens_Data_Analyser+0xe68>)
 800be2a:	f8b7 3a38 	ldrh.w	r3, [r7, #2616]	; 0xa38
 800be2e:	8053      	strh	r3, [r2, #2]
				SiemensMain_Relays_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800be30:	4b3f      	ldr	r3, [pc, #252]	; (800bf30 <Siemens_Data_Analyser+0xe58>)
 800be32:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800be34:	4b42      	ldr	r3, [pc, #264]	; (800bf40 <Siemens_Data_Analyser+0xe68>)
 800be36:	801a      	strh	r2, [r3, #0]
				memcpy(&SiemensMain_Relays_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800be38:	4b3d      	ldr	r3, [pc, #244]	; (800bf30 <Siemens_Data_Analyser+0xe58>)
 800be3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be3c:	461a      	mov	r2, r3
 800be3e:	4942      	ldr	r1, [pc, #264]	; (800bf48 <Siemens_Data_Analyser+0xe70>)
 800be40:	4842      	ldr	r0, [pc, #264]	; (800bf4c <Siemens_Data_Analyser+0xe74>)
 800be42:	f016 f923 	bl	802208c <memcpy>

				VitalData2MIE_st.NoofDataBytes = Siemens_RX_st.No_ofDataBytes;
 800be46:	4b3a      	ldr	r3, [pc, #232]	; (800bf30 <Siemens_Data_Analyser+0xe58>)
 800be48:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 800be4a:	4b3e      	ldr	r3, [pc, #248]	; (800bf44 <Siemens_Data_Analyser+0xe6c>)
 800be4c:	801a      	strh	r2, [r3, #0]
				memcpy(&VitalData2MIE_st.Relays,&Siemens_RX_st.AppData,Siemens_RX_st.No_ofDataBytes);
 800be4e:	4b38      	ldr	r3, [pc, #224]	; (800bf30 <Siemens_Data_Analyser+0xe58>)
 800be50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800be52:	461a      	mov	r2, r3
 800be54:	493c      	ldr	r1, [pc, #240]	; (800bf48 <Siemens_Data_Analyser+0xe70>)
 800be56:	483e      	ldr	r0, [pc, #248]	; (800bf50 <Siemens_Data_Analyser+0xe78>)
 800be58:	f016 f918 	bl	802208c <memcpy>
#ifdef EI_1
				TransmitCanPkt(EIPC1_RELAYS_2_OTHER);

#endif
#ifdef EI_2
				TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800be5c:	f44f 7002 	mov.w	r0, #520	; 0x208
 800be60:	f003 fa44 	bl	800f2ec <TransmitCanPkt>
#endif

				SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800be64:	f009 fa18 	bl	8015298 <HAL_GetTick>
 800be68:	4603      	mov	r3, r0
 800be6a:	4a34      	ldr	r2, [pc, #208]	; (800bf3c <Siemens_Data_Analyser+0xe64>)
 800be6c:	6113      	str	r3, [r2, #16]
 800be6e:	e01b      	b.n	800bea8 <Siemens_Data_Analyser+0xdd0>

			}
		}
		else
		{
			RxTimeStampNotUpdatedCount++;
 800be70:	4b30      	ldr	r3, [pc, #192]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800be72:	881b      	ldrh	r3, [r3, #0]
 800be74:	3301      	adds	r3, #1
 800be76:	b29a      	uxth	r2, r3
 800be78:	4b2e      	ldr	r3, [pc, #184]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800be7a:	801a      	strh	r2, [r3, #0]
			//			printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);

			if(RxTimeStampNotUpdatedCount >  EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount)
 800be7c:	4b2d      	ldr	r3, [pc, #180]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800be7e:	881b      	ldrh	r3, [r3, #0]
 800be80:	461a      	mov	r2, r3
 800be82:	4b25      	ldr	r3, [pc, #148]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800be84:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800be88:	429a      	cmp	r2, r3
 800be8a:	d90d      	bls.n	800bea8 <Siemens_Data_Analyser+0xdd0>
			{
				printf("Siemens RxTS not Updating:%u\n",RxTimeStampNotUpdatedCount);
 800be8c:	4b29      	ldr	r3, [pc, #164]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800be8e:	881b      	ldrh	r3, [r3, #0]
 800be90:	4619      	mov	r1, r3
 800be92:	4830      	ldr	r0, [pc, #192]	; (800bf54 <Siemens_Data_Analyser+0xe7c>)
 800be94:	f016 fa0a 	bl	80222ac <iprintf>
				RxTimeStampNotUpdatedCount = EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount + 1; /* To Avoid Overflow */
 800be98:	4b1f      	ldr	r3, [pc, #124]	; (800bf18 <Siemens_Data_Analyser+0xe40>)
 800be9a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	3301      	adds	r3, #1
 800bea2:	b29a      	uxth	r2, r3
 800bea4:	4b23      	ldr	r3, [pc, #140]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800bea6:	801a      	strh	r2, [r3, #0]
			}
		}
	}


	Print_Siemens_MSG(&Temp_Siemens_RX_st,Buff,Size,RX);
 800bea8:	f8b7 2a36 	ldrh.w	r2, [r7, #2614]	; 0xa36
 800beac:	f107 010c 	add.w	r1, r7, #12
 800beb0:	f207 600c 	addw	r0, r7, #1548	; 0x60c
 800beb4:	2302      	movs	r3, #2
 800beb6:	f000 fe11 	bl	800cadc <Print_Siemens_MSG>
	if(Siemens_tx_Buffer_st.Tx_Length > 0)
 800beba:	4b27      	ldr	r3, [pc, #156]	; (800bf58 <Siemens_Data_Analyser+0xe80>)
 800bebc:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00d      	beq.n	800bee0 <Siemens_Data_Analyser+0xe08>
	{
		Print_Siemens_MSG(&Temp_SiemensTx_st,Siemens_tx_Buffer_st.Tx_Buff,Siemens_tx_Buffer_st.Tx_Length,TX);
 800bec4:	4b24      	ldr	r3, [pc, #144]	; (800bf58 <Siemens_Data_Analyser+0xe80>)
 800bec6:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800beca:	2301      	movs	r3, #1
 800becc:	4922      	ldr	r1, [pc, #136]	; (800bf58 <Siemens_Data_Analyser+0xe80>)
 800bece:	4823      	ldr	r0, [pc, #140]	; (800bf5c <Siemens_Data_Analyser+0xe84>)
 800bed0:	f000 fe04 	bl	800cadc <Print_Siemens_MSG>
		memset(&Siemens_tx_Buffer_st,0,sizeof(SIEMENS_TX_PKT_t));
 800bed4:	f240 6202 	movw	r2, #1538	; 0x602
 800bed8:	2100      	movs	r1, #0
 800beda:	481f      	ldr	r0, [pc, #124]	; (800bf58 <Siemens_Data_Analyser+0xe80>)
 800bedc:	f016 f8fe 	bl	80220dc <memset>
	}

	Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount = RxTimeStampNotUpdatedCount;
 800bee0:	4b14      	ldr	r3, [pc, #80]	; (800bf34 <Siemens_Data_Analyser+0xe5c>)
 800bee2:	881a      	ldrh	r2, [r3, #0]
 800bee4:	4b1e      	ldr	r3, [pc, #120]	; (800bf60 <Siemens_Data_Analyser+0xe88>)
 800bee6:	805a      	strh	r2, [r3, #2]
	Tx_Siemens_self_sharing_st.DataReceving = RECEIVING;
 800bee8:	4b1d      	ldr	r3, [pc, #116]	; (800bf60 <Siemens_Data_Analyser+0xe88>)
 800beea:	2201      	movs	r2, #1
 800beec:	701a      	strb	r2, [r3, #0]
	Tx_Siemens_self_sharing_st.MesgReceived = RECEIVED;
 800beee:	4b1c      	ldr	r3, [pc, #112]	; (800bf60 <Siemens_Data_Analyser+0xe88>)
 800bef0:	2201      	movs	r2, #1
 800bef2:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
	TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
	TransmitCanPkt(EI_2_SELF_SHARING);
 800bef4:	f240 2002 	movw	r0, #514	; 0x202
 800bef8:	f003 f9f8 	bl	800f2ec <TransmitCanPkt>
#endif
	SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800befc:	f009 f9cc 	bl	8015298 <HAL_GetTick>
 800bf00:	4603      	mov	r3, r0
 800bf02:	4a0e      	ldr	r2, [pc, #56]	; (800bf3c <Siemens_Data_Analyser+0xe64>)
 800bf04:	6093      	str	r3, [r2, #8]

	return;
 800bf06:	e002      	b.n	800bf0e <Siemens_Data_Analyser+0xe36>
		return;
 800bf08:	bf00      	nop
 800bf0a:	e000      	b.n	800bf0e <Siemens_Data_Analyser+0xe36>
		return;
 800bf0c:	bf00      	nop
}
 800bf0e:	f607 2758 	addw	r7, r7, #2648	; 0xa58
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}
 800bf16:	bf00      	nop
 800bf18:	20000304 	.word	0x20000304
 800bf1c:	08025c24 	.word	0x08025c24
 800bf20:	08025adc 	.word	0x08025adc
 800bf24:	08025aec 	.word	0x08025aec
 800bf28:	08025c44 	.word	0x08025c44
 800bf2c:	20000305 	.word	0x20000305
 800bf30:	200027f4 	.word	0x200027f4
 800bf34:	20003cb4 	.word	0x20003cb4
 800bf38:	20003cb0 	.word	0x20003cb0
 800bf3c:	20003484 	.word	0x20003484
 800bf40:	200036a4 	.word	0x200036a4
 800bf44:	200034a0 	.word	0x200034a0
 800bf48:	2000281a 	.word	0x2000281a
 800bf4c:	200036a8 	.word	0x200036a8
 800bf50:	200034a2 	.word	0x200034a2
 800bf54:	08025c50 	.word	0x08025c50
 800bf58:	20002e6c 	.word	0x20002e6c
 800bf5c:	20002c44 	.word	0x20002c44
 800bf60:	20003478 	.word	0x20003478

0800bf64 <ExtractAppData>:

uint16_t ExtractAppData(uint8_t *MainBuffer, uint16_t MainBufferLength, uint8_t *ExtractBuffer)
{
 800bf64:	b480      	push	{r7}
 800bf66:	b089      	sub	sp, #36	; 0x24
 800bf68:	af00      	add	r7, sp, #0
 800bf6a:	60f8      	str	r0, [r7, #12]
 800bf6c:	460b      	mov	r3, r1
 800bf6e:	607a      	str	r2, [r7, #4]
 800bf70:	817b      	strh	r3, [r7, #10]
	uint16_t ExtractBufferByteIndex = 0;
 800bf72:	2300      	movs	r3, #0
 800bf74:	83fb      	strh	r3, [r7, #30]
	uint8_t ExtractBufferBitIndex = 0;
 800bf76:	2300      	movs	r3, #0
 800bf78:	777b      	strb	r3, [r7, #29]
	uint16_t TotalMainBits = (MainBufferLength * 8);
 800bf7a:	897b      	ldrh	r3, [r7, #10]
 800bf7c:	00db      	lsls	r3, r3, #3
 800bf7e:	833b      	strh	r3, [r7, #24]

	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800bf80:	2300      	movs	r3, #0
 800bf82:	837b      	strh	r3, [r7, #26]
 800bf84:	e039      	b.n	800bffa <ExtractAppData+0x96>
	{
		int Temp = (Traverser / 8);
 800bf86:	8b7b      	ldrh	r3, [r7, #26]
 800bf88:	08db      	lsrs	r3, r3, #3
 800bf8a:	b29b      	uxth	r3, r3
 800bf8c:	617b      	str	r3, [r7, #20]
		int BitJump = (Traverser % 8);
 800bf8e:	8b7b      	ldrh	r3, [r7, #26]
 800bf90:	f003 0307 	and.w	r3, r3, #7
 800bf94:	613b      	str	r3, [r7, #16]
		if (BitJump == 7)
 800bf96:	693b      	ldr	r3, [r7, #16]
 800bf98:	2b07      	cmp	r3, #7
 800bf9a:	d02a      	beq.n	800bff2 <ExtractAppData+0x8e>
		{
			continue;
		}
		if ((MainBuffer[Temp] >> (Traverser % 8)) & 1)
 800bf9c:	697b      	ldr	r3, [r7, #20]
 800bf9e:	68fa      	ldr	r2, [r7, #12]
 800bfa0:	4413      	add	r3, r2
 800bfa2:	781b      	ldrb	r3, [r3, #0]
 800bfa4:	461a      	mov	r2, r3
 800bfa6:	8b7b      	ldrh	r3, [r7, #26]
 800bfa8:	f003 0307 	and.w	r3, r3, #7
 800bfac:	fa42 f303 	asr.w	r3, r2, r3
 800bfb0:	f003 0301 	and.w	r3, r3, #1
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d010      	beq.n	800bfda <ExtractAppData+0x76>
		{
			SET_BIT_USER(ExtractBufferBitIndex, ExtractBuffer[ExtractBufferByteIndex]);
 800bfb8:	8bfb      	ldrh	r3, [r7, #30]
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	781b      	ldrb	r3, [r3, #0]
 800bfc0:	b25a      	sxtb	r2, r3
 800bfc2:	7f7b      	ldrb	r3, [r7, #29]
 800bfc4:	2101      	movs	r1, #1
 800bfc6:	fa01 f303 	lsl.w	r3, r1, r3
 800bfca:	b25b      	sxtb	r3, r3
 800bfcc:	4313      	orrs	r3, r2
 800bfce:	b259      	sxtb	r1, r3
 800bfd0:	8bfb      	ldrh	r3, [r7, #30]
 800bfd2:	687a      	ldr	r2, [r7, #4]
 800bfd4:	4413      	add	r3, r2
 800bfd6:	b2ca      	uxtb	r2, r1
 800bfd8:	701a      	strb	r2, [r3, #0]
		}
		++ExtractBufferBitIndex;
 800bfda:	7f7b      	ldrb	r3, [r7, #29]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	777b      	strb	r3, [r7, #29]
		if (ExtractBufferBitIndex == 8)
 800bfe0:	7f7b      	ldrb	r3, [r7, #29]
 800bfe2:	2b08      	cmp	r3, #8
 800bfe4:	d106      	bne.n	800bff4 <ExtractAppData+0x90>
		{
			ExtractBufferBitIndex = 0;
 800bfe6:	2300      	movs	r3, #0
 800bfe8:	777b      	strb	r3, [r7, #29]
			++ExtractBufferByteIndex;
 800bfea:	8bfb      	ldrh	r3, [r7, #30]
 800bfec:	3301      	adds	r3, #1
 800bfee:	83fb      	strh	r3, [r7, #30]
 800bff0:	e000      	b.n	800bff4 <ExtractAppData+0x90>
			continue;
 800bff2:	bf00      	nop
	for (uint16_t Traverser = 0; Traverser < TotalMainBits; ++Traverser)
 800bff4:	8b7b      	ldrh	r3, [r7, #26]
 800bff6:	3301      	adds	r3, #1
 800bff8:	837b      	strh	r3, [r7, #26]
 800bffa:	8b7a      	ldrh	r2, [r7, #26]
 800bffc:	8b3b      	ldrh	r3, [r7, #24]
 800bffe:	429a      	cmp	r2, r3
 800c000:	d3c1      	bcc.n	800bf86 <ExtractAppData+0x22>
		}
	}
	return (ExtractBufferByteIndex);
 800c002:	8bfb      	ldrh	r3, [r7, #30]
}
 800c004:	4618      	mov	r0, r3
 800c006:	3724      	adds	r7, #36	; 0x24
 800c008:	46bd      	mov	sp, r7
 800c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00e:	4770      	bx	lr

0800c010 <Form_Siemens_Reply>:

void Form_Siemens_Reply(void)
{
 800c010:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c014:	f5ad 6dcd 	sub.w	sp, sp, #1640	; 0x668
 800c018:	af04      	add	r7, sp, #16

	uint8_t Buffer[REPLY_MAX_SIZE] = {0,};
 800c01a:	f507 63cb 	add.w	r3, r7, #1624	; 0x658
 800c01e:	f5a3 62c2 	sub.w	r2, r3, #1552	; 0x610
 800c022:	2300      	movs	r3, #0
 800c024:	6013      	str	r3, [r2, #0]
 800c026:	1d10      	adds	r0, r2, #4
 800c028:	f240 53fc 	movw	r3, #1532	; 0x5fc
 800c02c:	461a      	mov	r2, r3
 800c02e:	2100      	movs	r1, #0
 800c030:	f016 f854 	bl	80220dc <memset>
	uint16_t App_data_Traverser = 0;
 800c034:	2300      	movs	r3, #0
 800c036:	f8a7 3652 	strh.w	r3, [r7, #1618]	; 0x652
	uint16_t Calc_CRC =0;
 800c03a:	2300      	movs	r3, #0
 800c03c:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
	uint16_t Calc_Compliment_CRC = 0;
 800c040:	2300      	movs	r3, #0
 800c042:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
	uint16_t CRC_Compliment_Loc  = 0;
 800c046:	2300      	movs	r3, #0
 800c048:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650
	BITSTUFFINIT(0,0);
 800c04c:	2300      	movs	r3, #0
 800c04e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c052:	2300      	movs	r3, #0
 800c054:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	//	printf("\nSending Packet Data:\n");
	memset(&Siemens_TX_st,0,sizeof(SIEMENS_PKT_t));
 800c058:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c05c:	2100      	movs	r1, #0
 800c05e:	48ba      	ldr	r0, [pc, #744]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c060:	f016 f83c 	bl	80220dc <memset>


	Siemens_TX_st.DesSysType = Siemens_RX_st.SrcSysType; //Destination System_Type
 800c064:	4bb9      	ldr	r3, [pc, #740]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c066:	7b1b      	ldrb	r3, [r3, #12]
 800c068:	4ab7      	ldr	r2, [pc, #732]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c06a:	7013      	strb	r3, [r2, #0]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DesSysType,ODD_PARITY);
 800c06c:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c070:	b2d8      	uxtb	r0, r3
 800c072:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c076:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c07a:	1899      	adds	r1, r3, r2
 800c07c:	4bb2      	ldr	r3, [pc, #712]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c07e:	781b      	ldrb	r3, [r3, #0]
 800c080:	b2db      	uxtb	r3, r3
 800c082:	2200      	movs	r2, #0
 800c084:	461c      	mov	r4, r3
 800c086:	4615      	mov	r5, r2
 800c088:	2301      	movs	r3, #1
 800c08a:	9302      	str	r3, [sp, #8]
 800c08c:	e9cd 4500 	strd	r4, r5, [sp]
 800c090:	460a      	mov	r2, r1
 800c092:	2108      	movs	r1, #8
 800c094:	f001 faf2 	bl	800d67c <Insert_cal_parity>
	//	printf("Dst_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c098:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c09c:	3308      	adds	r3, #8
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da00      	bge.n	800c0a4 <Form_Siemens_Reply+0x94>
 800c0a2:	3307      	adds	r3, #7
 800c0a4:	10db      	asrs	r3, r3, #3
 800c0a6:	b29a      	uxth	r2, r3
 800c0a8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c0ac:	4413      	add	r3, r2
 800c0ae:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c0b2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c0b6:	3308      	adds	r3, #8
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	b21b      	sxth	r3, r3
 800c0bc:	425a      	negs	r2, r3
 800c0be:	f003 0107 	and.w	r1, r3, #7
 800c0c2:	f002 0307 	and.w	r3, r2, #7
 800c0c6:	bf58      	it	pl
 800c0c8:	4259      	negpl	r1, r3
 800c0ca:	b20b      	sxth	r3, r1
 800c0cc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.DestAddr = Siemens_RX_st.SourceAddr; //Destination Address
 800c0d0:	4b9e      	ldr	r3, [pc, #632]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c0d2:	691a      	ldr	r2, [r3, #16]
 800c0d4:	4b9c      	ldr	r3, [pc, #624]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c0d6:	605a      	str	r2, [r3, #4]
	Siemens_TX_st.ExtDestAddr = Siemens_RX_st.ExtSourceAddr;
 800c0d8:	4b9c      	ldr	r3, [pc, #624]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c0da:	695a      	ldr	r2, [r3, #20]
 800c0dc:	4b9a      	ldr	r3, [pc, #616]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c0de:	609a      	str	r2, [r3, #8]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.DestAddr,EVEN_PARITY);
 800c0e0:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c0e4:	b2d8      	uxtb	r0, r3
 800c0e6:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c0ea:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c0ee:	1899      	adds	r1, r3, r2
 800c0f0:	4b95      	ldr	r3, [pc, #596]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c0f2:	685b      	ldr	r3, [r3, #4]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	4698      	mov	r8, r3
 800c0f8:	4691      	mov	r9, r2
 800c0fa:	2300      	movs	r3, #0
 800c0fc:	9302      	str	r3, [sp, #8]
 800c0fe:	e9cd 8900 	strd	r8, r9, [sp]
 800c102:	460a      	mov	r2, r1
 800c104:	2118      	movs	r1, #24
 800c106:	f001 fab9 	bl	800d67c <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.DestAddr = %lu\n",Siemens_TX_st.DestAddr);
	BITSTUFFINC(24);
 800c10a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c10e:	3318      	adds	r3, #24
 800c110:	2b00      	cmp	r3, #0
 800c112:	da00      	bge.n	800c116 <Form_Siemens_Reply+0x106>
 800c114:	3307      	adds	r3, #7
 800c116:	10db      	asrs	r3, r3, #3
 800c118:	b29a      	uxth	r2, r3
 800c11a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c11e:	4413      	add	r3, r2
 800c120:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c124:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c128:	3318      	adds	r3, #24
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	b21b      	sxth	r3, r3
 800c12e:	425a      	negs	r2, r3
 800c130:	f003 0107 	and.w	r1, r3, #7
 800c134:	f002 0307 	and.w	r3, r2, #7
 800c138:	bf58      	it	pl
 800c13a:	4259      	negpl	r1, r3
 800c13c:	b20b      	sxth	r3, r1
 800c13e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SrcSysType = Siemens_RX_st.DesSysType; //Destination Address
 800c142:	4b82      	ldr	r3, [pc, #520]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c144:	781b      	ldrb	r3, [r3, #0]
 800c146:	4a80      	ldr	r2, [pc, #512]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c148:	7313      	strb	r3, [r2, #12]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SrcSysType,ODD_PARITY);
 800c14a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c14e:	b2d8      	uxtb	r0, r3
 800c150:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c154:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c158:	1899      	adds	r1, r3, r2
 800c15a:	4b7b      	ldr	r3, [pc, #492]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c15c:	7b1b      	ldrb	r3, [r3, #12]
 800c15e:	b2db      	uxtb	r3, r3
 800c160:	2200      	movs	r2, #0
 800c162:	469a      	mov	sl, r3
 800c164:	4693      	mov	fp, r2
 800c166:	2301      	movs	r3, #1
 800c168:	9302      	str	r3, [sp, #8]
 800c16a:	e9cd ab00 	strd	sl, fp, [sp]
 800c16e:	460a      	mov	r2, r1
 800c170:	2108      	movs	r1, #8
 800c172:	f001 fa83 	bl	800d67c <Insert_cal_parity>
	//	printf("Src_sys_type:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c176:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c17a:	3308      	adds	r3, #8
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	da00      	bge.n	800c182 <Form_Siemens_Reply+0x172>
 800c180:	3307      	adds	r3, #7
 800c182:	10db      	asrs	r3, r3, #3
 800c184:	b29a      	uxth	r2, r3
 800c186:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c18a:	4413      	add	r3, r2
 800c18c:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c190:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c194:	3308      	adds	r3, #8
 800c196:	b29b      	uxth	r3, r3
 800c198:	b21b      	sxth	r3, r3
 800c19a:	425a      	negs	r2, r3
 800c19c:	f003 0107 	and.w	r1, r3, #7
 800c1a0:	f002 0307 	and.w	r3, r2, #7
 800c1a4:	bf58      	it	pl
 800c1a6:	4259      	negpl	r1, r3
 800c1a8:	b20b      	sxth	r3, r1
 800c1aa:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourceAddr = Siemens_RX_st.DestAddr;
 800c1ae:	4b67      	ldr	r3, [pc, #412]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c1b0:	685a      	ldr	r2, [r3, #4]
 800c1b2:	4b65      	ldr	r3, [pc, #404]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c1b4:	611a      	str	r2, [r3, #16]
	Siemens_TX_st.ExtSourceAddr = Siemens_RX_st.ExtDestAddr;
 800c1b6:	4b65      	ldr	r3, [pc, #404]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c1b8:	689a      	ldr	r2, [r3, #8]
 800c1ba:	4b63      	ldr	r3, [pc, #396]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c1bc:	615a      	str	r2, [r3, #20]
	Insert_cal_parity(ucBit,24,&Buffer[ucByte],Siemens_TX_st.SourceAddr,EVEN_PARITY);
 800c1be:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c1c2:	b2d8      	uxtb	r0, r3
 800c1c4:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c1c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c1cc:	1899      	adds	r1, r3, r2
 800c1ce:	4b5e      	ldr	r3, [pc, #376]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c1d0:	691b      	ldr	r3, [r3, #16]
 800c1d2:	2200      	movs	r2, #0
 800c1d4:	643b      	str	r3, [r7, #64]	; 0x40
 800c1d6:	647a      	str	r2, [r7, #68]	; 0x44
 800c1d8:	2300      	movs	r3, #0
 800c1da:	9302      	str	r3, [sp, #8]
 800c1dc:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800c1e0:	e9cd 3400 	strd	r3, r4, [sp]
 800c1e4:	460a      	mov	r2, r1
 800c1e6:	2118      	movs	r1, #24
 800c1e8:	f001 fa48 	bl	800d67c <Insert_cal_parity>
	//	printf("\nSiemens_TX_st.SourceAddr = %lu\n",Siemens_TX_st.SourceAddr);
	BITSTUFFINC(24);
 800c1ec:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c1f0:	3318      	adds	r3, #24
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	da00      	bge.n	800c1f8 <Form_Siemens_Reply+0x1e8>
 800c1f6:	3307      	adds	r3, #7
 800c1f8:	10db      	asrs	r3, r3, #3
 800c1fa:	b29a      	uxth	r2, r3
 800c1fc:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c200:	4413      	add	r3, r2
 800c202:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c206:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c20a:	3318      	adds	r3, #24
 800c20c:	b29b      	uxth	r3, r3
 800c20e:	b21b      	sxth	r3, r3
 800c210:	425a      	negs	r2, r3
 800c212:	f003 0107 	and.w	r1, r3, #7
 800c216:	f002 0307 	and.w	r3, r2, #7
 800c21a:	bf58      	it	pl
 800c21c:	4259      	negpl	r1, r3
 800c21e:	b20b      	sxth	r3, r1
 800c220:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.ProdDataVer = PROD_VERSION; //Self Product Version
 800c224:	4a48      	ldr	r2, [pc, #288]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c226:	230a      	movs	r3, #10
 800c228:	7613      	strb	r3, [r2, #24]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.ProdDataVer,EVEN_PARITY);
 800c22a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c22e:	b2d8      	uxtb	r0, r3
 800c230:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c234:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c238:	1899      	adds	r1, r3, r2
 800c23a:	4b43      	ldr	r3, [pc, #268]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c23c:	7e1b      	ldrb	r3, [r3, #24]
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	2200      	movs	r2, #0
 800c242:	63bb      	str	r3, [r7, #56]	; 0x38
 800c244:	63fa      	str	r2, [r7, #60]	; 0x3c
 800c246:	2300      	movs	r3, #0
 800c248:	9302      	str	r3, [sp, #8]
 800c24a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800c24e:	e9cd 3400 	strd	r3, r4, [sp]
 800c252:	460a      	mov	r2, r1
 800c254:	2108      	movs	r1, #8
 800c256:	f001 fa11 	bl	800d67c <Insert_cal_parity>
	//	printf("prod_data_ver:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c25a:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c25e:	3308      	adds	r3, #8
 800c260:	2b00      	cmp	r3, #0
 800c262:	da00      	bge.n	800c266 <Form_Siemens_Reply+0x256>
 800c264:	3307      	adds	r3, #7
 800c266:	10db      	asrs	r3, r3, #3
 800c268:	b29a      	uxth	r2, r3
 800c26a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c26e:	4413      	add	r3, r2
 800c270:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c274:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c278:	3308      	adds	r3, #8
 800c27a:	b29b      	uxth	r3, r3
 800c27c:	b21b      	sxth	r3, r3
 800c27e:	425a      	negs	r2, r3
 800c280:	f003 0107 	and.w	r1, r3, #7
 800c284:	f002 0307 	and.w	r3, r2, #7
 800c288:	bf58      	it	pl
 800c28a:	4259      	negpl	r1, r3
 800c28c:	b20b      	sxth	r3, r1
 800c28e:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.CompIndex = COMP_INDEX; //Self Compatability Index
 800c292:	4a2d      	ldr	r2, [pc, #180]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c294:	2301      	movs	r3, #1
 800c296:	7653      	strb	r3, [r2, #25]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.CompIndex,ODD_PARITY);
 800c298:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c29c:	b2d8      	uxtb	r0, r3
 800c29e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c2a2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c2a6:	1899      	adds	r1, r3, r2
 800c2a8:	4b27      	ldr	r3, [pc, #156]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c2aa:	7e5b      	ldrb	r3, [r3, #25]
 800c2ac:	b2db      	uxtb	r3, r3
 800c2ae:	2200      	movs	r2, #0
 800c2b0:	633b      	str	r3, [r7, #48]	; 0x30
 800c2b2:	637a      	str	r2, [r7, #52]	; 0x34
 800c2b4:	2301      	movs	r3, #1
 800c2b6:	9302      	str	r3, [sp, #8]
 800c2b8:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 800c2bc:	e9cd 3400 	strd	r3, r4, [sp]
 800c2c0:	460a      	mov	r2, r1
 800c2c2:	2108      	movs	r1, #8
 800c2c4:	f001 f9da 	bl	800d67c <Insert_cal_parity>
	//	printf("comp_index:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c2c8:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c2cc:	3308      	adds	r3, #8
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	da00      	bge.n	800c2d4 <Form_Siemens_Reply+0x2c4>
 800c2d2:	3307      	adds	r3, #7
 800c2d4:	10db      	asrs	r3, r3, #3
 800c2d6:	b29a      	uxth	r2, r3
 800c2d8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c2dc:	4413      	add	r3, r2
 800c2de:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c2e2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c2e6:	3308      	adds	r3, #8
 800c2e8:	b29b      	uxth	r3, r3
 800c2ea:	b21b      	sxth	r3, r3
 800c2ec:	425a      	negs	r2, r3
 800c2ee:	f003 0307 	and.w	r3, r3, #7
 800c2f2:	f002 0207 	and.w	r2, r2, #7
 800c2f6:	bf58      	it	pl
 800c2f8:	4253      	negpl	r3, r2
 800c2fa:	b21b      	sxth	r3, r3
 800c2fc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	Siemens_TX_st.DestPort = Siemens_RX_st.SourcePort; //Destination Port
 800c300:	4b12      	ldr	r3, [pc, #72]	; (800c34c <Form_Siemens_Reply+0x33c>)
 800c302:	7edb      	ldrb	r3, [r3, #27]
 800c304:	4a10      	ldr	r2, [pc, #64]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c306:	7693      	strb	r3, [r2, #26]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.DestPort,NO_PARITY);
 800c308:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c30c:	b2d8      	uxtb	r0, r3
 800c30e:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c312:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c316:	1899      	adds	r1, r3, r2
 800c318:	4b0b      	ldr	r3, [pc, #44]	; (800c348 <Form_Siemens_Reply+0x338>)
 800c31a:	7e9b      	ldrb	r3, [r3, #26]
 800c31c:	b2db      	uxtb	r3, r3
 800c31e:	2200      	movs	r2, #0
 800c320:	62bb      	str	r3, [r7, #40]	; 0x28
 800c322:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c324:	2302      	movs	r3, #2
 800c326:	9302      	str	r3, [sp, #8]
 800c328:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	; 0x28
 800c32c:	e9cd 3400 	strd	r3, r4, [sp]
 800c330:	460a      	mov	r2, r1
 800c332:	2108      	movs	r1, #8
 800c334:	f001 f9a2 	bl	800d67c <Insert_cal_parity>
	//	printf("dst_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c338:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c33c:	3308      	adds	r3, #8
 800c33e:	2b00      	cmp	r3, #0
 800c340:	da06      	bge.n	800c350 <Form_Siemens_Reply+0x340>
 800c342:	3307      	adds	r3, #7
 800c344:	e004      	b.n	800c350 <Form_Siemens_Reply+0x340>
 800c346:	bf00      	nop
 800c348:	20002a1c 	.word	0x20002a1c
 800c34c:	200027f4 	.word	0x200027f4
 800c350:	10db      	asrs	r3, r3, #3
 800c352:	b29a      	uxth	r2, r3
 800c354:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c358:	4413      	add	r3, r2
 800c35a:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c35e:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c362:	3308      	adds	r3, #8
 800c364:	b29b      	uxth	r3, r3
 800c366:	b21b      	sxth	r3, r3
 800c368:	425a      	negs	r2, r3
 800c36a:	f003 0307 	and.w	r3, r3, #7
 800c36e:	f002 0207 	and.w	r2, r2, #7
 800c372:	bf58      	it	pl
 800c374:	4253      	negpl	r3, r2
 800c376:	b21b      	sxth	r3, r3
 800c378:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.SourcePort = Siemens_RX_st.DestPort; //Source Port
 800c37c:	4bc4      	ldr	r3, [pc, #784]	; (800c690 <Form_Siemens_Reply+0x680>)
 800c37e:	7e9a      	ldrb	r2, [r3, #26]
 800c380:	4bc4      	ldr	r3, [pc, #784]	; (800c694 <Form_Siemens_Reply+0x684>)
 800c382:	76da      	strb	r2, [r3, #27]
	Insert_cal_parity(ucBit,8,&Buffer[ucByte],Siemens_TX_st.SourcePort,NO_PARITY);
 800c384:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c388:	b2d8      	uxtb	r0, r3
 800c38a:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c38e:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c392:	441a      	add	r2, r3
 800c394:	4bbf      	ldr	r3, [pc, #764]	; (800c694 <Form_Siemens_Reply+0x684>)
 800c396:	7edb      	ldrb	r3, [r3, #27]
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	2100      	movs	r1, #0
 800c39c:	623b      	str	r3, [r7, #32]
 800c39e:	6279      	str	r1, [r7, #36]	; 0x24
 800c3a0:	2302      	movs	r3, #2
 800c3a2:	9302      	str	r3, [sp, #8]
 800c3a4:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800c3a8:	e9cd 3400 	strd	r3, r4, [sp]
 800c3ac:	2108      	movs	r1, #8
 800c3ae:	f001 f965 	bl	800d67c <Insert_cal_parity>
	//	printf("src_port:%u\n",Buffer[ucByte]);
	BITSTUFFINC(8);
 800c3b2:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c3b6:	3308      	adds	r3, #8
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	da00      	bge.n	800c3be <Form_Siemens_Reply+0x3ae>
 800c3bc:	3307      	adds	r3, #7
 800c3be:	10db      	asrs	r3, r3, #3
 800c3c0:	b29a      	uxth	r2, r3
 800c3c2:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c3c6:	4413      	add	r3, r2
 800c3c8:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c3cc:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c3d0:	3308      	adds	r3, #8
 800c3d2:	b29b      	uxth	r3, r3
 800c3d4:	b21b      	sxth	r3, r3
 800c3d6:	425a      	negs	r2, r3
 800c3d8:	f003 0307 	and.w	r3, r3, #7
 800c3dc:	f002 0207 	and.w	r2, r2, #7
 800c3e0:	bf58      	it	pl
 800c3e2:	4253      	negpl	r3, r2
 800c3e4:	b21b      	sxth	r3, r3
 800c3e6:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.RxTimeStamp = Siemens_RX_st.TxTimeStamp; //Source Port
 800c3ea:	4ba9      	ldr	r3, [pc, #676]	; (800c690 <Form_Siemens_Reply+0x680>)
 800c3ec:	6a1b      	ldr	r3, [r3, #32]
 800c3ee:	4aa9      	ldr	r2, [pc, #676]	; (800c694 <Form_Siemens_Reply+0x684>)
 800c3f0:	61d3      	str	r3, [r2, #28]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.RxTimeStamp,NO_PARITY);
 800c3f2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c3f6:	b2d8      	uxtb	r0, r3
 800c3f8:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c3fc:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c400:	4413      	add	r3, r2
 800c402:	4aa4      	ldr	r2, [pc, #656]	; (800c694 <Form_Siemens_Reply+0x684>)
 800c404:	69d2      	ldr	r2, [r2, #28]
 800c406:	2100      	movs	r1, #0
 800c408:	61ba      	str	r2, [r7, #24]
 800c40a:	61f9      	str	r1, [r7, #28]
 800c40c:	2202      	movs	r2, #2
 800c40e:	9202      	str	r2, [sp, #8]
 800c410:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c414:	e9cd 1200 	strd	r1, r2, [sp]
 800c418:	461a      	mov	r2, r3
 800c41a:	2120      	movs	r1, #32
 800c41c:	f001 f92e 	bl	800d67c <Insert_cal_parity>
	//	printf("Rx_time_stamp:%lu\n",Siemens_TX_st.Rx_time_stamp);
	BITSTUFFINC(32);
 800c420:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c424:	3320      	adds	r3, #32
 800c426:	2b00      	cmp	r3, #0
 800c428:	da00      	bge.n	800c42c <Form_Siemens_Reply+0x41c>
 800c42a:	3307      	adds	r3, #7
 800c42c:	10db      	asrs	r3, r3, #3
 800c42e:	b29a      	uxth	r2, r3
 800c430:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c434:	4413      	add	r3, r2
 800c436:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c43a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c43e:	3320      	adds	r3, #32
 800c440:	b29b      	uxth	r3, r3
 800c442:	b21b      	sxth	r3, r3
 800c444:	425a      	negs	r2, r3
 800c446:	f003 0307 	and.w	r3, r3, #7
 800c44a:	f002 0207 	and.w	r2, r2, #7
 800c44e:	bf58      	it	pl
 800c450:	4253      	negpl	r3, r2
 800c452:	b21b      	sxth	r3, r3
 800c454:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Siemens_TX_st.TxTimeStamp = SelfTimeStamp;//(uint32_t)(HAL_GetTick()/100);//Temp_Siemens_RX_st.Tx_time_stamp; //Source Port
 800c458:	4b8f      	ldr	r3, [pc, #572]	; (800c698 <Form_Siemens_Reply+0x688>)
 800c45a:	681b      	ldr	r3, [r3, #0]
 800c45c:	4a8d      	ldr	r2, [pc, #564]	; (800c694 <Form_Siemens_Reply+0x684>)
 800c45e:	6213      	str	r3, [r2, #32]
	Insert_cal_parity(ucBit,32,&Buffer[ucByte],Siemens_TX_st.TxTimeStamp,NO_PARITY);
 800c460:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c464:	b2d8      	uxtb	r0, r3
 800c466:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c46a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c46e:	4413      	add	r3, r2
 800c470:	4a88      	ldr	r2, [pc, #544]	; (800c694 <Form_Siemens_Reply+0x684>)
 800c472:	6a12      	ldr	r2, [r2, #32]
 800c474:	2100      	movs	r1, #0
 800c476:	613a      	str	r2, [r7, #16]
 800c478:	6179      	str	r1, [r7, #20]
 800c47a:	2202      	movs	r2, #2
 800c47c:	9202      	str	r2, [sp, #8]
 800c47e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c482:	e9cd 1200 	strd	r1, r2, [sp]
 800c486:	461a      	mov	r2, r3
 800c488:	2120      	movs	r1, #32
 800c48a:	f001 f8f7 	bl	800d67c <Insert_cal_parity>
	//	printf("Tx_time_stamp:%lu\n",Siemens_TX_st.Tx_time_stamp);
	BITSTUFFINC(32);
 800c48e:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c492:	3320      	adds	r3, #32
 800c494:	2b00      	cmp	r3, #0
 800c496:	da00      	bge.n	800c49a <Form_Siemens_Reply+0x48a>
 800c498:	3307      	adds	r3, #7
 800c49a:	10db      	asrs	r3, r3, #3
 800c49c:	b29a      	uxth	r2, r3
 800c49e:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c4a2:	4413      	add	r3, r2
 800c4a4:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c4a8:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c4ac:	3320      	adds	r3, #32
 800c4ae:	b29b      	uxth	r3, r3
 800c4b0:	b21b      	sxth	r3, r3
 800c4b2:	425a      	negs	r2, r3
 800c4b4:	f003 0307 	and.w	r3, r3, #7
 800c4b8:	f002 0207 	and.w	r2, r2, #7
 800c4bc:	bf58      	it	pl
 800c4be:	4253      	negpl	r3, r2
 800c4c0:	b21b      	sxth	r3, r3
 800c4c2:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	CRC_Compliment_Loc = Data_Compliment(Buffer,ucByte,CONVERT); //ucByte = 30;
 800c4c6:	f8b7 164e 	ldrh.w	r1, [r7, #1614]	; 0x64e
 800c4ca:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c4ce:	2201      	movs	r2, #1
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	f001 fa39 	bl	800d948 <Data_Compliment>
 800c4d6:	4603      	mov	r3, r0
 800c4d8:	f8a7 3650 	strh.w	r3, [r7, #1616]	; 0x650

	Calc_CRC = Siemens_CRC(Buffer,ucByte); //30
 800c4dc:	f8b7 264e 	ldrh.w	r2, [r7, #1614]	; 0x64e
 800c4e0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c4e4:	4611      	mov	r1, r2
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	f000 ff32 	bl	800d350 <Siemens_CRC>
 800c4ec:	4603      	mov	r3, r0
 800c4ee:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656


#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c4f2:	4b6a      	ldr	r3, [pc, #424]	; (800c69c <Form_Siemens_Reply+0x68c>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	09db      	lsrs	r3, r3, #7
 800c4f8:	f003 0301 	and.w	r3, r3, #1
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d02c      	beq.n	800c55a <Form_Siemens_Reply+0x54a>
	{
		uint16_t Temp_Crc = Calc_CRC;
 800c500:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c504:	f8a7 364a 	strh.w	r3, [r7, #1610]	; 0x64a
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c508:	4865      	ldr	r0, [pc, #404]	; (800c6a0 <Form_Siemens_Reply+0x690>)
 800c50a:	f015 ff6b 	bl	80223e4 <puts>
		printf("Actual CRC:%04x\n",Calc_CRC);
 800c50e:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c512:	4619      	mov	r1, r3
 800c514:	4863      	ldr	r0, [pc, #396]	; (800c6a4 <Form_Siemens_Reply+0x694>)
 800c516:	f015 fec9 	bl	80222ac <iprintf>

		Calc_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c51a:	4863      	ldr	r0, [pc, #396]	; (800c6a8 <Form_Siemens_Reply+0x698>)
 800c51c:	f00d fb6e 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800c520:	4601      	mov	r1, r0
 800c522:	4b62      	ldr	r3, [pc, #392]	; (800c6ac <Form_Siemens_Reply+0x69c>)
 800c524:	fba3 2301 	umull	r2, r3, r3, r1
 800c528:	0bda      	lsrs	r2, r3, #15
 800c52a:	4613      	mov	r3, r2
 800c52c:	041b      	lsls	r3, r3, #16
 800c52e:	1a9b      	subs	r3, r3, r2
 800c530:	1aca      	subs	r2, r1, r3
 800c532:	4613      	mov	r3, r2
 800c534:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		if(Calc_CRC == Temp_Crc)
 800c538:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c53c:	f8b7 364a 	ldrh.w	r3, [r7, #1610]	; 0x64a
 800c540:	429a      	cmp	r2, r3
 800c542:	d104      	bne.n	800c54e <Form_Siemens_Reply+0x53e>
		{
			Calc_CRC += 4;
 800c544:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c548:	3304      	adds	r3, #4
 800c54a:	f8a7 3656 	strh.w	r3, [r7, #1622]	; 0x656
		}
		printf("Injected CRC:%04x\n",Calc_CRC);
 800c54e:	f8b7 3656 	ldrh.w	r3, [r7, #1622]	; 0x656
 800c552:	4619      	mov	r1, r3
 800c554:	4856      	ldr	r0, [pc, #344]	; (800c6b0 <Form_Siemens_Reply+0x6a0>)
 800c556:	f015 fea9 	bl	80222ac <iprintf>




	//	printf("Cal_CRC:0x%04x\n",Calc_CRC);
	Insert_cal_parity(ucBit,16,&Buffer[ucByte],Calc_CRC,NO_PARITY);
 800c55a:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c55e:	b2d8      	uxtb	r0, r3
 800c560:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c564:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c568:	4413      	add	r3, r2
 800c56a:	f8b7 2656 	ldrh.w	r2, [r7, #1622]	; 0x656
 800c56e:	2100      	movs	r1, #0
 800c570:	60ba      	str	r2, [r7, #8]
 800c572:	60f9      	str	r1, [r7, #12]
 800c574:	2202      	movs	r2, #2
 800c576:	9202      	str	r2, [sp, #8]
 800c578:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c57c:	e9cd 1200 	strd	r1, r2, [sp]
 800c580:	461a      	mov	r2, r3
 800c582:	2110      	movs	r1, #16
 800c584:	f001 f87a 	bl	800d67c <Insert_cal_parity>
	BITSTUFFINC(16);
 800c588:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c58c:	3310      	adds	r3, #16
 800c58e:	2b00      	cmp	r3, #0
 800c590:	da00      	bge.n	800c594 <Form_Siemens_Reply+0x584>
 800c592:	3307      	adds	r3, #7
 800c594:	10db      	asrs	r3, r3, #3
 800c596:	b29a      	uxth	r2, r3
 800c598:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c59c:	4413      	add	r3, r2
 800c59e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c5a2:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c5a6:	3310      	adds	r3, #16
 800c5a8:	b29b      	uxth	r3, r3
 800c5aa:	b21b      	sxth	r3, r3
 800c5ac:	425a      	negs	r2, r3
 800c5ae:	f003 0307 	and.w	r3, r3, #7
 800c5b2:	f002 0207 	and.w	r2, r2, #7
 800c5b6:	bf58      	it	pl
 800c5b8:	4253      	negpl	r3, r2
 800c5ba:	b21b      	sxth	r3, r3
 800c5bc:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c

	Calc_Compliment_CRC = Siemens_CRC(&Buffer[ucByte],ucByte-2);//32,30
 800c5c0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c5c4:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c5c8:	441a      	add	r2, r3
 800c5ca:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c5ce:	3b02      	subs	r3, #2
 800c5d0:	b29b      	uxth	r3, r3
 800c5d2:	4619      	mov	r1, r3
 800c5d4:	4610      	mov	r0, r2
 800c5d6:	f000 febb 	bl	800d350 <Siemens_CRC>
 800c5da:	4603      	mov	r3, r0
 800c5dc:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c5e0:	4b2e      	ldr	r3, [pc, #184]	; (800c69c <Form_Siemens_Reply+0x68c>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	0a5b      	lsrs	r3, r3, #9
 800c5e6:	f003 0301 	and.w	r3, r3, #1
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	d02c      	beq.n	800c648 <Form_Siemens_Reply+0x638>
	{
		uint16_t Temp_Crc = Calc_Compliment_CRC;
 800c5ee:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c5f2:	f8a7 3648 	strh.w	r3, [r7, #1608]	; 0x648
		printf("Injecting INVALID_PACKET_CRC_SIEMENS\n");
 800c5f6:	482a      	ldr	r0, [pc, #168]	; (800c6a0 <Form_Siemens_Reply+0x690>)
 800c5f8:	f015 fef4 	bl	80223e4 <puts>
		printf("Actual Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800c5fc:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c600:	4619      	mov	r1, r3
 800c602:	482c      	ldr	r0, [pc, #176]	; (800c6b4 <Form_Siemens_Reply+0x6a4>)
 800c604:	f015 fe52 	bl	80222ac <iprintf>
		Calc_Compliment_CRC = HAL_RNG_GetRandomNumber(&hrng) % 0xffff;
 800c608:	4827      	ldr	r0, [pc, #156]	; (800c6a8 <Form_Siemens_Reply+0x698>)
 800c60a:	f00d faf7 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 800c60e:	4601      	mov	r1, r0
 800c610:	4b26      	ldr	r3, [pc, #152]	; (800c6ac <Form_Siemens_Reply+0x69c>)
 800c612:	fba3 2301 	umull	r2, r3, r3, r1
 800c616:	0bda      	lsrs	r2, r3, #15
 800c618:	4613      	mov	r3, r2
 800c61a:	041b      	lsls	r3, r3, #16
 800c61c:	1a9b      	subs	r3, r3, r2
 800c61e:	1aca      	subs	r2, r1, r3
 800c620:	4613      	mov	r3, r2
 800c622:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		if(Calc_Compliment_CRC == Temp_Crc)
 800c626:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800c62a:	f8b7 3648 	ldrh.w	r3, [r7, #1608]	; 0x648
 800c62e:	429a      	cmp	r2, r3
 800c630:	d104      	bne.n	800c63c <Form_Siemens_Reply+0x62c>
		{
			Calc_Compliment_CRC += 4;
 800c632:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c636:	3304      	adds	r3, #4
 800c638:	f8a7 3654 	strh.w	r3, [r7, #1620]	; 0x654
		}
		printf("Injected Compliment CRC:%04x\n",Calc_Compliment_CRC);
 800c63c:	f8b7 3654 	ldrh.w	r3, [r7, #1620]	; 0x654
 800c640:	4619      	mov	r1, r3
 800c642:	481d      	ldr	r0, [pc, #116]	; (800c6b8 <Form_Siemens_Reply+0x6a8>)
 800c644:	f015 fe32 	bl	80222ac <iprintf>
	}
#endif
	//	printf("Calc_Compliment_CRC:0x%04x\n",Calc_Compliment_CRC);
	ucByte+=ucByte;
 800c648:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c64c:	005b      	lsls	r3, r3, #1
 800c64e:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
	Insert_cal_parity(ucBit,16,&Buffer[CRC_Compliment_Loc],Calc_Compliment_CRC,NO_PARITY);
 800c652:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c656:	b2d8      	uxtb	r0, r3
 800c658:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c65c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800c660:	4413      	add	r3, r2
 800c662:	f8b7 2654 	ldrh.w	r2, [r7, #1620]	; 0x654
 800c666:	2100      	movs	r1, #0
 800c668:	603a      	str	r2, [r7, #0]
 800c66a:	6079      	str	r1, [r7, #4]
 800c66c:	2202      	movs	r2, #2
 800c66e:	9202      	str	r2, [sp, #8]
 800c670:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c674:	e9cd 1200 	strd	r1, r2, [sp]
 800c678:	461a      	mov	r2, r3
 800c67a:	2110      	movs	r1, #16
 800c67c:	f000 fffe 	bl	800d67c <Insert_cal_parity>
	BITSTUFFINC(16);
 800c680:	f9b7 364c 	ldrsh.w	r3, [r7, #1612]	; 0x64c
 800c684:	3310      	adds	r3, #16
 800c686:	2b00      	cmp	r3, #0
 800c688:	da18      	bge.n	800c6bc <Form_Siemens_Reply+0x6ac>
 800c68a:	3307      	adds	r3, #7
 800c68c:	e016      	b.n	800c6bc <Form_Siemens_Reply+0x6ac>
 800c68e:	bf00      	nop
 800c690:	200027f4 	.word	0x200027f4
 800c694:	20002a1c 	.word	0x20002a1c
 800c698:	20003cb8 	.word	0x20003cb8
 800c69c:	20003470 	.word	0x20003470
 800c6a0:	080259c4 	.word	0x080259c4
 800c6a4:	08025c74 	.word	0x08025c74
 800c6a8:	20009c78 	.word	0x20009c78
 800c6ac:	80008001 	.word	0x80008001
 800c6b0:	08025c88 	.word	0x08025c88
 800c6b4:	08025c9c 	.word	0x08025c9c
 800c6b8:	08025cb8 	.word	0x08025cb8
 800c6bc:	10db      	asrs	r3, r3, #3
 800c6be:	b29a      	uxth	r2, r3
 800c6c0:	f8b7 364e 	ldrh.w	r3, [r7, #1614]	; 0x64e
 800c6c4:	4413      	add	r3, r2
 800c6c6:	f8a7 364e 	strh.w	r3, [r7, #1614]	; 0x64e
 800c6ca:	f8b7 364c 	ldrh.w	r3, [r7, #1612]	; 0x64c
 800c6ce:	3310      	adds	r3, #16
 800c6d0:	b29b      	uxth	r3, r3
 800c6d2:	b21b      	sxth	r3, r3
 800c6d4:	425a      	negs	r2, r3
 800c6d6:	f003 0307 	and.w	r3, r3, #7
 800c6da:	f002 0207 	and.w	r2, r2, #7
 800c6de:	bf58      	it	pl
 800c6e0:	4253      	negpl	r3, r2
 800c6e2:	b21b      	sxth	r3, r3
 800c6e4:	f8a7 364c 	strh.w	r3, [r7, #1612]	; 0x64c


	memcpy(Siemens_tx_Buffer_st.Tx_Buff,Buffer,CRC_Compliment_Loc+2);
 800c6e8:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c6ec:	3302      	adds	r3, #2
 800c6ee:	461a      	mov	r2, r3
 800c6f0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c6f4:	4619      	mov	r1, r3
 800c6f6:	481e      	ldr	r0, [pc, #120]	; (800c770 <Form_Siemens_Reply+0x760>)
 800c6f8:	f015 fcc8 	bl	802208c <memcpy>
	Siemens_tx_Buffer_st.Tx_Length = (CRC_Compliment_Loc+2);
 800c6fc:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c700:	3302      	adds	r3, #2
 800c702:	b29a      	uxth	r2, r3
 800c704:	4b1a      	ldr	r3, [pc, #104]	; (800c770 <Form_Siemens_Reply+0x760>)
 800c706:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600

	CheckToSendReplyorNot();
 800c70a:	f001 f989 	bl	800da20 <CheckToSendReplyorNot>

#if EN_SIEMENS_FAULTINJECTION
	if(  (CHECKFLAG(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800c70e:	4b19      	ldr	r3, [pc, #100]	; (800c774 <Form_Siemens_Reply+0x764>)
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	099b      	lsrs	r3, r3, #6
 800c714:	f003 0301 	and.w	r3, r3, #1
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d003      	beq.n	800c724 <Form_Siemens_Reply+0x714>
	{
		printf("Injecting NO REPLY FROM EIPC Failure\n");
 800c71c:	4816      	ldr	r0, [pc, #88]	; (800c778 <Form_Siemens_Reply+0x768>)
 800c71e:	f015 fe61 	bl	80223e4 <puts>
 800c722:	e00f      	b.n	800c744 <Form_Siemens_Reply+0x734>
	}
	else
	{
		if(SendReply == 1)
 800c724:	4b15      	ldr	r3, [pc, #84]	; (800c77c <Form_Siemens_Reply+0x76c>)
 800c726:	781b      	ldrb	r3, [r3, #0]
 800c728:	2b01      	cmp	r3, #1
 800c72a:	d10b      	bne.n	800c744 <Form_Siemens_Reply+0x734>
		{
			udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
 800c72c:	f8b7 3650 	ldrh.w	r3, [r7, #1616]	; 0x650
 800c730:	b2db      	uxtb	r3, r3
 800c732:	3302      	adds	r3, #2
 800c734:	b2d9      	uxtb	r1, r3
 800c736:	4a12      	ldr	r2, [pc, #72]	; (800c780 <Form_Siemens_Reply+0x770>)
 800c738:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800c73c:	6812      	ldr	r2, [r2, #0]
 800c73e:	4618      	mov	r0, r3
 800c740:	f002 fbc8 	bl	800eed4 <udpClient_send>
	{
		udpClient_send(Buffer,CRC_Compliment_Loc+2,Source_IP);
	}
#endif

	memset(&Temp_SiemensTx_st,0,sizeof(SIEMENS_PKT_t));
 800c744:	f44f 720a 	mov.w	r2, #552	; 0x228
 800c748:	2100      	movs	r1, #0
 800c74a:	480e      	ldr	r0, [pc, #56]	; (800c784 <Form_Siemens_Reply+0x774>)
 800c74c:	f015 fcc6 	bl	80220dc <memset>
	memcpy(&Temp_SiemensTx_st,&Siemens_TX_st,sizeof(SIEMENS_PKT_t));
 800c750:	4a0c      	ldr	r2, [pc, #48]	; (800c784 <Form_Siemens_Reply+0x774>)
 800c752:	4b0d      	ldr	r3, [pc, #52]	; (800c788 <Form_Siemens_Reply+0x778>)
 800c754:	4610      	mov	r0, r2
 800c756:	4619      	mov	r1, r3
 800c758:	f44f 730a 	mov.w	r3, #552	; 0x228
 800c75c:	461a      	mov	r2, r3
 800c75e:	f015 fc95 	bl	802208c <memcpy>
	UNUSED(App_data_Traverser);
}
 800c762:	bf00      	nop
 800c764:	f507 67cb 	add.w	r7, r7, #1624	; 0x658
 800c768:	46bd      	mov	sp, r7
 800c76a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c76e:	bf00      	nop
 800c770:	20002e6c 	.word	0x20002e6c
 800c774:	20003470 	.word	0x20003470
 800c778:	08025cd8 	.word	0x08025cd8
 800c77c:	20004b99 	.word	0x20004b99
 800c780:	20005200 	.word	0x20005200
 800c784:	20002c44 	.word	0x20002c44
 800c788:	20002a1c 	.word	0x20002a1c

0800c78c <ProcessSendingSignals2MIE>:

void ProcessSendingSignals2MIE(void)
{
 800c78c:	b580      	push	{r7, lr}
 800c78e:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.Signal2MIE_Clk) > EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK)
 800c790:	4b4d      	ldr	r3, [pc, #308]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c792:	685b      	ldr	r3, [r3, #4]
 800c794:	4618      	mov	r0, r3
 800c796:	f002 f833 	bl	800e800 <HAL_Elaps_Ticks>
 800c79a:	4602      	mov	r2, r0
 800c79c:	4b4b      	ldr	r3, [pc, #300]	; (800c8cc <ProcessSendingSignals2MIE+0x140>)
 800c79e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	f240 808d 	bls.w	800c8c2 <ProcessSendingSignals2MIE+0x136>
	{
		if(
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800c7a8:	4b47      	ldr	r3, [pc, #284]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c7aa:	781b      	ldrb	r3, [r3, #0]
		if(
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d113      	bne.n	800c7d8 <ProcessSendingSignals2MIE+0x4c>
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800c7b0:	4b45      	ldr	r3, [pc, #276]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c7b2:	785b      	ldrb	r3, [r3, #1]
				(SiemensClocks_st.MisMatchFlag == CLEAR) &&
 800c7b4:	2b01      	cmp	r3, #1
 800c7b6:	d10f      	bne.n	800c7d8 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800c7b8:	4b45      	ldr	r3, [pc, #276]	; (800c8d0 <ProcessSendingSignals2MIE+0x144>)
 800c7ba:	781b      	ldrb	r3, [r3, #0]
				(SiemensClocks_st.SiemensCanXchangeHappening == YES) &&
 800c7bc:	2b01      	cmp	r3, #1
 800c7be:	d10b      	bne.n	800c7d8 <ProcessSendingSignals2MIE+0x4c>
				( (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800c7c0:	4b44      	ldr	r3, [pc, #272]	; (800c8d4 <ProcessSendingSignals2MIE+0x148>)
 800c7c2:	781b      	ldrb	r3, [r3, #0]
 800c7c4:	2b01      	cmp	r3, #1
 800c7c6:	d107      	bne.n	800c7d8 <ProcessSendingSignals2MIE+0x4c>
			/*
			 * CAN Exchange Happening.
			 * No MisMatch Found
			 */
			//			printf("\n1\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800c7c8:	4b43      	ldr	r3, [pc, #268]	; (800c8d8 <ProcessSendingSignals2MIE+0x14c>)
 800c7ca:	881b      	ldrh	r3, [r3, #0]
 800c7cc:	461a      	mov	r2, r3
 800c7ce:	4943      	ldr	r1, [pc, #268]	; (800c8dc <ProcessSendingSignals2MIE+0x150>)
 800c7d0:	4843      	ldr	r0, [pc, #268]	; (800c8e0 <ProcessSendingSignals2MIE+0x154>)
 800c7d2:	f015 fc5b 	bl	802208c <memcpy>
 800c7d6:	e02d      	b.n	800c834 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800c7d8:	4b3d      	ldr	r3, [pc, #244]	; (800c8d0 <ProcessSendingSignals2MIE+0x144>)
 800c7da:	781b      	ldrb	r3, [r3, #0]
 800c7dc:	2b01      	cmp	r3, #1
 800c7de:	d10f      	bne.n	800c800 <ProcessSendingSignals2MIE+0x74>
 800c7e0:	4b3c      	ldr	r3, [pc, #240]	; (800c8d4 <ProcessSendingSignals2MIE+0x148>)
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d10b      	bne.n	800c800 <ProcessSendingSignals2MIE+0x74>
 800c7e8:	4b37      	ldr	r3, [pc, #220]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c7ea:	785b      	ldrb	r3, [r3, #1]
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d107      	bne.n	800c800 <ProcessSendingSignals2MIE+0x74>
			 * CAN Exchange Happening
			 * MisMatch Found because of Other Card is Receiving,
			 * This Card is Not Receiving
			 */
			//			printf("\n2\n");
			memcpy(&VitalData2MIE_st.Relays,&Siemens_OtherRelays_st.Relays,Siemens_OtherRelays_st.NoofDataBytes);
 800c7f0:	4b3c      	ldr	r3, [pc, #240]	; (800c8e4 <ProcessSendingSignals2MIE+0x158>)
 800c7f2:	881b      	ldrh	r3, [r3, #0]
 800c7f4:	461a      	mov	r2, r3
 800c7f6:	493c      	ldr	r1, [pc, #240]	; (800c8e8 <ProcessSendingSignals2MIE+0x15c>)
 800c7f8:	4839      	ldr	r0, [pc, #228]	; (800c8e0 <ProcessSendingSignals2MIE+0x154>)
 800c7fa:	f015 fc47 	bl	802208c <memcpy>
 800c7fe:	e019      	b.n	800c834 <ProcessSendingSignals2MIE+0xa8>
		}
		else if( ((Tx_Siemens_self_sharing_st.DataReceving == RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING)) && (SiemensClocks_st.SiemensCanXchangeHappening == YES) )
 800c800:	4b34      	ldr	r3, [pc, #208]	; (800c8d4 <ProcessSendingSignals2MIE+0x148>)
 800c802:	781b      	ldrb	r3, [r3, #0]
 800c804:	2b01      	cmp	r3, #1
 800c806:	d10f      	bne.n	800c828 <ProcessSendingSignals2MIE+0x9c>
 800c808:	4b31      	ldr	r3, [pc, #196]	; (800c8d0 <ProcessSendingSignals2MIE+0x144>)
 800c80a:	781b      	ldrb	r3, [r3, #0]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d10b      	bne.n	800c828 <ProcessSendingSignals2MIE+0x9c>
 800c810:	4b2d      	ldr	r3, [pc, #180]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c812:	785b      	ldrb	r3, [r3, #1]
 800c814:	2b01      	cmp	r3, #1
 800c816:	d107      	bne.n	800c828 <ProcessSendingSignals2MIE+0x9c>
			 * CAN Exchange Happening
			 * MisMatch Found because of This Card is Receiving,
			 * Other Card is Not Receiving
			 */
			//			printf("\n4\n");
			memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800c818:	4b2f      	ldr	r3, [pc, #188]	; (800c8d8 <ProcessSendingSignals2MIE+0x14c>)
 800c81a:	881b      	ldrh	r3, [r3, #0]
 800c81c:	461a      	mov	r2, r3
 800c81e:	492f      	ldr	r1, [pc, #188]	; (800c8dc <ProcessSendingSignals2MIE+0x150>)
 800c820:	482f      	ldr	r0, [pc, #188]	; (800c8e0 <ProcessSendingSignals2MIE+0x154>)
 800c822:	f015 fc33 	bl	802208c <memcpy>
 800c826:	e005      	b.n	800c834 <ProcessSendingSignals2MIE+0xa8>
		}
		else
		{
			//			printf("\n5\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800c828:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c82c:	2100      	movs	r1, #0
 800c82e:	482c      	ldr	r0, [pc, #176]	; (800c8e0 <ProcessSendingSignals2MIE+0x154>)
 800c830:	f015 fc54 	bl	80220dc <memset>
		}


		if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount >= EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800c834:	4b27      	ldr	r3, [pc, #156]	; (800c8d4 <ProcessSendingSignals2MIE+0x148>)
 800c836:	885b      	ldrh	r3, [r3, #2]
 800c838:	461a      	mov	r2, r3
 800c83a:	4b24      	ldr	r3, [pc, #144]	; (800c8cc <ProcessSendingSignals2MIE+0x140>)
 800c83c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c840:	429a      	cmp	r2, r3
 800c842:	d30d      	bcc.n	800c860 <ProcessSendingSignals2MIE+0xd4>
 800c844:	4b22      	ldr	r3, [pc, #136]	; (800c8d0 <ProcessSendingSignals2MIE+0x144>)
 800c846:	885b      	ldrh	r3, [r3, #2]
 800c848:	461a      	mov	r2, r3
 800c84a:	4b20      	ldr	r3, [pc, #128]	; (800c8cc <ProcessSendingSignals2MIE+0x140>)
 800c84c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c850:	429a      	cmp	r2, r3
 800c852:	d305      	bcc.n	800c860 <ProcessSendingSignals2MIE+0xd4>
		{
			//			printf("\n6\n");
			memset(&VitalData2MIE_st.Relays,0,sizeof(VitalData2MIE_st.Relays));
 800c854:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c858:	2100      	movs	r1, #0
 800c85a:	4821      	ldr	r0, [pc, #132]	; (800c8e0 <ProcessSendingSignals2MIE+0x154>)
 800c85c:	f015 fc3e 	bl	80220dc <memset>
		}

		VitalData2MIE_st.NoofDataBytes = EI_data.Siemens_st.Booloutputs  % 8;
 800c860:	4b1a      	ldr	r3, [pc, #104]	; (800c8cc <ProcessSendingSignals2MIE+0x140>)
 800c862:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c866:	f003 0307 	and.w	r3, r3, #7
 800c86a:	b29a      	uxth	r2, r3
 800c86c:	4b1f      	ldr	r3, [pc, #124]	; (800c8ec <ProcessSendingSignals2MIE+0x160>)
 800c86e:	801a      	strh	r2, [r3, #0]

		if(VitalData2MIE_st.NoofDataBytes != 0)
 800c870:	4b1e      	ldr	r3, [pc, #120]	; (800c8ec <ProcessSendingSignals2MIE+0x160>)
 800c872:	881b      	ldrh	r3, [r3, #0]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d009      	beq.n	800c88c <ProcessSendingSignals2MIE+0x100>
		{
			VitalData2MIE_st.NoofDataBytes  = (EI_data.Siemens_st.Booloutputs / 8) + 1;
 800c878:	4b14      	ldr	r3, [pc, #80]	; (800c8cc <ProcessSendingSignals2MIE+0x140>)
 800c87a:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c87e:	08db      	lsrs	r3, r3, #3
 800c880:	b29b      	uxth	r3, r3
 800c882:	3301      	adds	r3, #1
 800c884:	b29a      	uxth	r2, r3
 800c886:	4b19      	ldr	r3, [pc, #100]	; (800c8ec <ProcessSendingSignals2MIE+0x160>)
 800c888:	801a      	strh	r2, [r3, #0]
 800c88a:	e006      	b.n	800c89a <ProcessSendingSignals2MIE+0x10e>
		}
		else
		{
			VitalData2MIE_st.NoofDataBytes = (EI_data.Siemens_st.Booloutputs / 8);
 800c88c:	4b0f      	ldr	r3, [pc, #60]	; (800c8cc <ProcessSendingSignals2MIE+0x140>)
 800c88e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800c892:	08db      	lsrs	r3, r3, #3
 800c894:	b29a      	uxth	r2, r3
 800c896:	4b15      	ldr	r3, [pc, #84]	; (800c8ec <ProcessSendingSignals2MIE+0x160>)
 800c898:	801a      	strh	r2, [r3, #0]
		}

		if(((strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") != 0)) && (SiemensClocks_st.SiemensCanXchangeHappening == NO))
 800c89a:	4915      	ldr	r1, [pc, #84]	; (800c8f0 <ProcessSendingSignals2MIE+0x164>)
 800c89c:	4815      	ldr	r0, [pc, #84]	; (800c8f4 <ProcessSendingSignals2MIE+0x168>)
 800c89e:	f7f3 fccf 	bl	8000240 <strcmp>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d007      	beq.n	800c8b8 <ProcessSendingSignals2MIE+0x12c>
 800c8a8:	4b07      	ldr	r3, [pc, #28]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c8aa:	785b      	ldrb	r3, [r3, #1]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d103      	bne.n	800c8b8 <ProcessSendingSignals2MIE+0x12c>
		{
			TransmitCanPkt(EI_PROCESS_DATA);
 800c8b0:	f240 1019 	movw	r0, #281	; 0x119
 800c8b4:	f002 fd1a 	bl	800f2ec <TransmitCanPkt>




#endif
		SiemensClocks_st.Signal2MIE_Clk = HAL_GetTick();
 800c8b8:	f008 fcee 	bl	8015298 <HAL_GetTick>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	4a02      	ldr	r2, [pc, #8]	; (800c8c8 <ProcessSendingSignals2MIE+0x13c>)
 800c8c0:	6053      	str	r3, [r2, #4]
	}
}
 800c8c2:	bf00      	nop
 800c8c4:	bd80      	pop	{r7, pc}
 800c8c6:	bf00      	nop
 800c8c8:	20003484 	.word	0x20003484
 800c8cc:	20000304 	.word	0x20000304
 800c8d0:	2000347c 	.word	0x2000347c
 800c8d4:	20003478 	.word	0x20003478
 800c8d8:	200036a4 	.word	0x200036a4
 800c8dc:	200036a8 	.word	0x200036a8
 800c8e0:	200034a2 	.word	0x200034a2
 800c8e4:	200038a8 	.word	0x200038a8
 800c8e8:	200038ac 	.word	0x200038ac
 800c8ec:	200034a0 	.word	0x200034a0
 800c8f0:	08025c44 	.word	0x08025c44
 800c8f4:	20000305 	.word	0x20000305

0800c8f8 <ProcessSelfSharing>:


void ProcessSelfSharing(void)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.SelfSharingClk) > EI_data.Siemens_st.CAN_Xchange_Time)
 800c8fc:	4b0c      	ldr	r3, [pc, #48]	; (800c930 <ProcessSelfSharing+0x38>)
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	4618      	mov	r0, r3
 800c902:	f001 ff7d 	bl	800e800 <HAL_Elaps_Ticks>
 800c906:	4602      	mov	r2, r0
 800c908:	4b0a      	ldr	r3, [pc, #40]	; (800c934 <ProcessSelfSharing+0x3c>)
 800c90a:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800c90e:	429a      	cmp	r2, r3
 800c910:	d90b      	bls.n	800c92a <ProcessSelfSharing+0x32>
	{
		Tx_Siemens_self_sharing_st.MesgReceived = NOT_RECEIVED;
 800c912:	4b09      	ldr	r3, [pc, #36]	; (800c938 <ProcessSelfSharing+0x40>)
 800c914:	2200      	movs	r2, #0
 800c916:	705a      	strb	r2, [r3, #1]

#ifdef EI_1
		TransmitCanPkt(EI_1_SELF_SHARING);
#endif
#ifdef EI_2
		TransmitCanPkt(EI_2_SELF_SHARING);
 800c918:	f240 2002 	movw	r0, #514	; 0x202
 800c91c:	f002 fce6 	bl	800f2ec <TransmitCanPkt>
#endif

		SiemensClocks_st.SelfSharingClk = HAL_GetTick();
 800c920:	f008 fcba 	bl	8015298 <HAL_GetTick>
 800c924:	4603      	mov	r3, r0
 800c926:	4a02      	ldr	r2, [pc, #8]	; (800c930 <ProcessSelfSharing+0x38>)
 800c928:	6093      	str	r3, [r2, #8]
	}
}
 800c92a:	bf00      	nop
 800c92c:	bd80      	pop	{r7, pc}
 800c92e:	bf00      	nop
 800c930:	20003484 	.word	0x20003484
 800c934:	20000304 	.word	0x20000304
 800c938:	20003478 	.word	0x20003478

0800c93c <ProcessDetectNoValidDataReceive>:

void ProcessDetectNoValidDataReceive(void)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	af00      	add	r7, sp, #0

	if((SiemensClocks_st.LastReceiveClk != 0) && (HAL_Elaps_Ticks(SiemensClocks_st.LastReceiveClk) > EI_data.Siemens_st.COMM_FAILURE_TIME_OUT) )
 800c940:	4b1a      	ldr	r3, [pc, #104]	; (800c9ac <ProcessDetectNoValidDataReceive+0x70>)
 800c942:	68db      	ldr	r3, [r3, #12]
 800c944:	2b00      	cmp	r3, #0
 800c946:	d014      	beq.n	800c972 <ProcessDetectNoValidDataReceive+0x36>
 800c948:	4b18      	ldr	r3, [pc, #96]	; (800c9ac <ProcessDetectNoValidDataReceive+0x70>)
 800c94a:	68db      	ldr	r3, [r3, #12]
 800c94c:	4618      	mov	r0, r3
 800c94e:	f001 ff57 	bl	800e800 <HAL_Elaps_Ticks>
 800c952:	4602      	mov	r2, r0
 800c954:	4b16      	ldr	r3, [pc, #88]	; (800c9b0 <ProcessDetectNoValidDataReceive+0x74>)
 800c956:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d909      	bls.n	800c972 <ProcessDetectNoValidDataReceive+0x36>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800c95e:	4b15      	ldr	r3, [pc, #84]	; (800c9b4 <ProcessDetectNoValidDataReceive+0x78>)
 800c960:	781b      	ldrb	r3, [r3, #0]
 800c962:	2b00      	cmp	r3, #0
 800c964:	d005      	beq.n	800c972 <ProcessDetectNoValidDataReceive+0x36>
		{
			printf("This Card Not Receiving Data\n");
 800c966:	4814      	ldr	r0, [pc, #80]	; (800c9b8 <ProcessDetectNoValidDataReceive+0x7c>)
 800c968:	f015 fd3c 	bl	80223e4 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800c96c:	4b11      	ldr	r3, [pc, #68]	; (800c9b4 <ProcessDetectNoValidDataReceive+0x78>)
 800c96e:	2200      	movs	r2, #0
 800c970:	701a      	strb	r2, [r3, #0]
		}
	}

	if((Tx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) && (Rx_Siemens_self_sharing_st.RxTimeStampNotUpdatedCount > EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount) )
 800c972:	4b10      	ldr	r3, [pc, #64]	; (800c9b4 <ProcessDetectNoValidDataReceive+0x78>)
 800c974:	885b      	ldrh	r3, [r3, #2]
 800c976:	461a      	mov	r2, r3
 800c978:	4b0d      	ldr	r3, [pc, #52]	; (800c9b0 <ProcessDetectNoValidDataReceive+0x74>)
 800c97a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c97e:	429a      	cmp	r2, r3
 800c980:	d911      	bls.n	800c9a6 <ProcessDetectNoValidDataReceive+0x6a>
 800c982:	4b0e      	ldr	r3, [pc, #56]	; (800c9bc <ProcessDetectNoValidDataReceive+0x80>)
 800c984:	885b      	ldrh	r3, [r3, #2]
 800c986:	461a      	mov	r2, r3
 800c988:	4b09      	ldr	r3, [pc, #36]	; (800c9b0 <ProcessDetectNoValidDataReceive+0x74>)
 800c98a:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800c98e:	429a      	cmp	r2, r3
 800c990:	d909      	bls.n	800c9a6 <ProcessDetectNoValidDataReceive+0x6a>
	{
		if(Tx_Siemens_self_sharing_st.DataReceving != NOT_RECEIVED)
 800c992:	4b08      	ldr	r3, [pc, #32]	; (800c9b4 <ProcessDetectNoValidDataReceive+0x78>)
 800c994:	781b      	ldrb	r3, [r3, #0]
 800c996:	2b00      	cmp	r3, #0
 800c998:	d005      	beq.n	800c9a6 <ProcessDetectNoValidDataReceive+0x6a>
		{
			printf("This Card Not Valid Receiving Data\n");
 800c99a:	4809      	ldr	r0, [pc, #36]	; (800c9c0 <ProcessDetectNoValidDataReceive+0x84>)
 800c99c:	f015 fd22 	bl	80223e4 <puts>
			Tx_Siemens_self_sharing_st.DataReceving = NOT_RECEIVED;
 800c9a0:	4b04      	ldr	r3, [pc, #16]	; (800c9b4 <ProcessDetectNoValidDataReceive+0x78>)
 800c9a2:	2200      	movs	r2, #0
 800c9a4:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800c9a6:	bf00      	nop
 800c9a8:	bd80      	pop	{r7, pc}
 800c9aa:	bf00      	nop
 800c9ac:	20003484 	.word	0x20003484
 800c9b0:	20000304 	.word	0x20000304
 800c9b4:	20003478 	.word	0x20003478
 800c9b8:	08025d00 	.word	0x08025d00
 800c9bc:	2000347c 	.word	0x2000347c
 800c9c0:	08025d20 	.word	0x08025d20

0800c9c4 <SendRelays2Other>:

void SendRelays2Other(void)
{
 800c9c4:	b580      	push	{r7, lr}
 800c9c6:	af00      	add	r7, sp, #0
	if( HAL_Elaps_Ticks(SiemensClocks_st.Relays2OtheClk) > ONE_SEC)
 800c9c8:	4b09      	ldr	r3, [pc, #36]	; (800c9f0 <SendRelays2Other+0x2c>)
 800c9ca:	691b      	ldr	r3, [r3, #16]
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	f001 ff17 	bl	800e800 <HAL_Elaps_Ticks>
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c9d8:	d908      	bls.n	800c9ec <SendRelays2Other+0x28>

#ifdef EI_1
		TransmitCanPkt(EIPC1_RELAYS_2_OTHER);
#endif
#ifdef EI_2
		TransmitCanPkt(EIPC2_RELAYS_2_OTHER);
 800c9da:	f44f 7002 	mov.w	r0, #520	; 0x208
 800c9de:	f002 fc85 	bl	800f2ec <TransmitCanPkt>
#endif
		SiemensClocks_st.Relays2OtheClk = HAL_GetTick();
 800c9e2:	f008 fc59 	bl	8015298 <HAL_GetTick>
 800c9e6:	4603      	mov	r3, r0
 800c9e8:	4a01      	ldr	r2, [pc, #4]	; (800c9f0 <SendRelays2Other+0x2c>)
 800c9ea:	6113      	str	r3, [r2, #16]

	}
}
 800c9ec:	bf00      	nop
 800c9ee:	bd80      	pop	{r7, pc}
 800c9f0:	20003484 	.word	0x20003484

0800c9f4 <CheckRelayMisMatch>:

void CheckRelayMisMatch(void)
{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	af00      	add	r7, sp, #0
	if(HAL_Elaps_Ticks(SiemensClocks_st.RelayMisMatchCheckClk) > FIVE_HUNDRED_MS)
 800c9f8:	4b16      	ldr	r3, [pc, #88]	; (800ca54 <CheckRelayMisMatch+0x60>)
 800c9fa:	695b      	ldr	r3, [r3, #20]
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	f001 feff 	bl	800e800 <HAL_Elaps_Ticks>
 800ca02:	4603      	mov	r3, r0
 800ca04:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800ca08:	d922      	bls.n	800ca50 <CheckRelayMisMatch+0x5c>
	{
		if( (Tx_Siemens_self_sharing_st.DataReceving == NOT_RECEIVING) && (Rx_Siemens_self_sharing_st.DataReceving == RECEIVING) )
 800ca0a:	4b13      	ldr	r3, [pc, #76]	; (800ca58 <CheckRelayMisMatch+0x64>)
 800ca0c:	781b      	ldrb	r3, [r3, #0]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d10c      	bne.n	800ca2c <CheckRelayMisMatch+0x38>
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <CheckRelayMisMatch+0x68>)
 800ca14:	781b      	ldrb	r3, [r3, #0]
 800ca16:	2b01      	cmp	r3, #1
 800ca18:	d108      	bne.n	800ca2c <CheckRelayMisMatch+0x38>
		{
			memcpy(&SiemensMain_Relays_st,&Siemens_OtherRelays_st,sizeof(VITAL_DATA_SHARING_t));
 800ca1a:	4a11      	ldr	r2, [pc, #68]	; (800ca60 <CheckRelayMisMatch+0x6c>)
 800ca1c:	4b11      	ldr	r3, [pc, #68]	; (800ca64 <CheckRelayMisMatch+0x70>)
 800ca1e:	4610      	mov	r0, r2
 800ca20:	4619      	mov	r1, r3
 800ca22:	f44f 7301 	mov.w	r3, #516	; 0x204
 800ca26:	461a      	mov	r2, r3
 800ca28:	f015 fb30 	bl	802208c <memcpy>
		}
		if(Siemens_OtherRelays_st.VitalCRC != SiemensMain_Relays_st.VitalCRC)
 800ca2c:	4b0d      	ldr	r3, [pc, #52]	; (800ca64 <CheckRelayMisMatch+0x70>)
 800ca2e:	885a      	ldrh	r2, [r3, #2]
 800ca30:	4b0b      	ldr	r3, [pc, #44]	; (800ca60 <CheckRelayMisMatch+0x6c>)
 800ca32:	885b      	ldrh	r3, [r3, #2]
 800ca34:	429a      	cmp	r2, r3
 800ca36:	d003      	beq.n	800ca40 <CheckRelayMisMatch+0x4c>
		{
			SiemensClocks_st.MisMatchFlag = SET;
 800ca38:	4b06      	ldr	r3, [pc, #24]	; (800ca54 <CheckRelayMisMatch+0x60>)
 800ca3a:	2201      	movs	r2, #1
 800ca3c:	701a      	strb	r2, [r3, #0]
 800ca3e:	e002      	b.n	800ca46 <CheckRelayMisMatch+0x52>
		}
		else
		{
			SiemensClocks_st.MisMatchFlag = CLEAR;
 800ca40:	4b04      	ldr	r3, [pc, #16]	; (800ca54 <CheckRelayMisMatch+0x60>)
 800ca42:	2200      	movs	r2, #0
 800ca44:	701a      	strb	r2, [r3, #0]
		}

		SiemensClocks_st.RelayMisMatchCheckClk = HAL_GetTick();
 800ca46:	f008 fc27 	bl	8015298 <HAL_GetTick>
 800ca4a:	4603      	mov	r3, r0
 800ca4c:	4a01      	ldr	r2, [pc, #4]	; (800ca54 <CheckRelayMisMatch+0x60>)
 800ca4e:	6153      	str	r3, [r2, #20]
	}
}
 800ca50:	bf00      	nop
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	20003484 	.word	0x20003484
 800ca58:	20003478 	.word	0x20003478
 800ca5c:	2000347c 	.word	0x2000347c
 800ca60:	200036a4 	.word	0x200036a4
 800ca64:	200038a8 	.word	0x200038a8

0800ca68 <Detect_SiemensCAN_Xchange_Failure>:

void Detect_SiemensCAN_Xchange_Failure(void)
{
 800ca68:	b580      	push	{r7, lr}
 800ca6a:	af00      	add	r7, sp, #0
	static uint32_t Previous_Clock_RCV_SELF_XCHG_CLK = 0;

	if(SiemensClocks_st.SiemensCanXchangeHappening == YES)
 800ca6c:	4b16      	ldr	r3, [pc, #88]	; (800cac8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ca6e:	785b      	ldrb	r3, [r3, #1]
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d101      	bne.n	800ca78 <Detect_SiemensCAN_Xchange_Failure+0x10>
	{
		Blink_S2();
 800ca74:	f006 fae8 	bl	8013048 <Blink_S2>
	}

	if(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)>= EI_data.Siemens_st.CAN_EXCHANGE_TIME_OUT)
 800ca78:	4b13      	ldr	r3, [pc, #76]	; (800cac8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ca7a:	699b      	ldr	r3, [r3, #24]
 800ca7c:	4618      	mov	r0, r3
 800ca7e:	f001 febf 	bl	800e800 <HAL_Elaps_Ticks>
 800ca82:	4602      	mov	r2, r0
 800ca84:	4b11      	ldr	r3, [pc, #68]	; (800cacc <Detect_SiemensCAN_Xchange_Failure+0x64>)
 800ca86:	f8d3 330c 	ldr.w	r3, [r3, #780]	; 0x30c
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d31a      	bcc.n	800cac4 <Detect_SiemensCAN_Xchange_Failure+0x5c>
	{
		if(Previous_Clock_RCV_SELF_XCHG_CLK != SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)
 800ca8e:	4b0e      	ldr	r3, [pc, #56]	; (800cac8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ca90:	699a      	ldr	r2, [r3, #24]
 800ca92:	4b0f      	ldr	r3, [pc, #60]	; (800cad0 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d014      	beq.n	800cac4 <Detect_SiemensCAN_Xchange_Failure+0x5c>
		{
			SiemensClocks_st.SiemensCanXchangeHappening = NO;
 800ca9a:	4b0b      	ldr	r3, [pc, #44]	; (800cac8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800ca9c:	2200      	movs	r2, #0
 800ca9e:	705a      	strb	r2, [r3, #1]
			Previous_Clock_RCV_SELF_XCHG_CLK = SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK;
 800caa0:	4b09      	ldr	r3, [pc, #36]	; (800cac8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800caa2:	699b      	ldr	r3, [r3, #24]
 800caa4:	4a0a      	ldr	r2, [pc, #40]	; (800cad0 <Detect_SiemensCAN_Xchange_Failure+0x68>)
 800caa6:	6013      	str	r3, [r2, #0]
			printf("CAN Data Not Received from last %lu Seconds\n",(HAL_Elaps_Ticks(SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK)/1000));
 800caa8:	4b07      	ldr	r3, [pc, #28]	; (800cac8 <Detect_SiemensCAN_Xchange_Failure+0x60>)
 800caaa:	699b      	ldr	r3, [r3, #24]
 800caac:	4618      	mov	r0, r3
 800caae:	f001 fea7 	bl	800e800 <HAL_Elaps_Ticks>
 800cab2:	4603      	mov	r3, r0
 800cab4:	4a07      	ldr	r2, [pc, #28]	; (800cad4 <Detect_SiemensCAN_Xchange_Failure+0x6c>)
 800cab6:	fba2 2303 	umull	r2, r3, r2, r3
 800caba:	099b      	lsrs	r3, r3, #6
 800cabc:	4619      	mov	r1, r3
 800cabe:	4806      	ldr	r0, [pc, #24]	; (800cad8 <Detect_SiemensCAN_Xchange_Failure+0x70>)
 800cac0:	f015 fbf4 	bl	80222ac <iprintf>
		}
	}
}
 800cac4:	bf00      	nop
 800cac6:	bd80      	pop	{r7, pc}
 800cac8:	20003484 	.word	0x20003484
 800cacc:	20000304 	.word	0x20000304
 800cad0:	20004b9c 	.word	0x20004b9c
 800cad4:	10624dd3 	.word	0x10624dd3
 800cad8:	08025d44 	.word	0x08025d44

0800cadc <Print_Siemens_MSG>:

void Print_Siemens_MSG(SIEMENS_PKT_t *SiemensPrint_st,uint8_t *Buff,uint16_t Length,uint8_t TX_RX)
{
 800cadc:	b580      	push	{r7, lr}
 800cade:	b086      	sub	sp, #24
 800cae0:	af00      	add	r7, sp, #0
 800cae2:	60f8      	str	r0, [r7, #12]
 800cae4:	60b9      	str	r1, [r7, #8]
 800cae6:	4611      	mov	r1, r2
 800cae8:	461a      	mov	r2, r3
 800caea:	460b      	mov	r3, r1
 800caec:	80fb      	strh	r3, [r7, #6]
 800caee:	4613      	mov	r3, r2
 800caf0:	717b      	strb	r3, [r7, #5]

	//	printf("\n________________________________________________________________________________________________\n");
	printf("\nTX_RX:");
 800caf2:	484d      	ldr	r0, [pc, #308]	; (800cc28 <Print_Siemens_MSG+0x14c>)
 800caf4:	f015 fbda 	bl	80222ac <iprintf>
	if(TX_RX == TX)
 800caf8:	797b      	ldrb	r3, [r7, #5]
 800cafa:	2b01      	cmp	r3, #1
 800cafc:	d103      	bne.n	800cb06 <Print_Siemens_MSG+0x2a>
	{
		printf("TX|");
 800cafe:	484b      	ldr	r0, [pc, #300]	; (800cc2c <Print_Siemens_MSG+0x150>)
 800cb00:	f015 fbd4 	bl	80222ac <iprintf>
 800cb04:	e005      	b.n	800cb12 <Print_Siemens_MSG+0x36>
	}
	else if(TX_RX == RX)
 800cb06:	797b      	ldrb	r3, [r7, #5]
 800cb08:	2b02      	cmp	r3, #2
 800cb0a:	d102      	bne.n	800cb12 <Print_Siemens_MSG+0x36>
	{
		printf("RX|");
 800cb0c:	4848      	ldr	r0, [pc, #288]	; (800cc30 <Print_Siemens_MSG+0x154>)
 800cb0e:	f015 fbcd 	bl	80222ac <iprintf>
	}
	printf("DT:%u|",SiemensPrint_st->DesSysType);
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	781b      	ldrb	r3, [r3, #0]
 800cb16:	4619      	mov	r1, r3
 800cb18:	4846      	ldr	r0, [pc, #280]	; (800cc34 <Print_Siemens_MSG+0x158>)
 800cb1a:	f015 fbc7 	bl	80222ac <iprintf>
	printf("DA:%lu|",SiemensPrint_st->ExtDestAddr);
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	689b      	ldr	r3, [r3, #8]
 800cb22:	4619      	mov	r1, r3
 800cb24:	4844      	ldr	r0, [pc, #272]	; (800cc38 <Print_Siemens_MSG+0x15c>)
 800cb26:	f015 fbc1 	bl	80222ac <iprintf>
	printf("ST:%u|",SiemensPrint_st->SrcSysType);
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	7b1b      	ldrb	r3, [r3, #12]
 800cb2e:	4619      	mov	r1, r3
 800cb30:	4842      	ldr	r0, [pc, #264]	; (800cc3c <Print_Siemens_MSG+0x160>)
 800cb32:	f015 fbbb 	bl	80222ac <iprintf>
	printf("SA:%lu|",SiemensPrint_st->ExtSourceAddr);
 800cb36:	68fb      	ldr	r3, [r7, #12]
 800cb38:	695b      	ldr	r3, [r3, #20]
 800cb3a:	4619      	mov	r1, r3
 800cb3c:	4840      	ldr	r0, [pc, #256]	; (800cc40 <Print_Siemens_MSG+0x164>)
 800cb3e:	f015 fbb5 	bl	80222ac <iprintf>
	printf("PD_V:%u|",SiemensPrint_st->ProdDataVer);
 800cb42:	68fb      	ldr	r3, [r7, #12]
 800cb44:	7e1b      	ldrb	r3, [r3, #24]
 800cb46:	4619      	mov	r1, r3
 800cb48:	483e      	ldr	r0, [pc, #248]	; (800cc44 <Print_Siemens_MSG+0x168>)
 800cb4a:	f015 fbaf 	bl	80222ac <iprintf>
	printf("CI:%u|",SiemensPrint_st->CompIndex);
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	7e5b      	ldrb	r3, [r3, #25]
 800cb52:	4619      	mov	r1, r3
 800cb54:	483c      	ldr	r0, [pc, #240]	; (800cc48 <Print_Siemens_MSG+0x16c>)
 800cb56:	f015 fba9 	bl	80222ac <iprintf>
	printf("DP:%u|",SiemensPrint_st->DestPort);
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	7e9b      	ldrb	r3, [r3, #26]
 800cb5e:	4619      	mov	r1, r3
 800cb60:	483a      	ldr	r0, [pc, #232]	; (800cc4c <Print_Siemens_MSG+0x170>)
 800cb62:	f015 fba3 	bl	80222ac <iprintf>
	printf("SP:%u|",SiemensPrint_st->SourcePort);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	7edb      	ldrb	r3, [r3, #27]
 800cb6a:	4619      	mov	r1, r3
 800cb6c:	4838      	ldr	r0, [pc, #224]	; (800cc50 <Print_Siemens_MSG+0x174>)
 800cb6e:	f015 fb9d 	bl	80222ac <iprintf>
	printf("RX_TS:%lu|",SiemensPrint_st->RxTimeStamp);
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	69db      	ldr	r3, [r3, #28]
 800cb76:	4619      	mov	r1, r3
 800cb78:	4836      	ldr	r0, [pc, #216]	; (800cc54 <Print_Siemens_MSG+0x178>)
 800cb7a:	f015 fb97 	bl	80222ac <iprintf>
	printf("TX_TS:%lu\n",SiemensPrint_st->TxTimeStamp);
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	6a1b      	ldr	r3, [r3, #32]
 800cb82:	4619      	mov	r1, r3
 800cb84:	4834      	ldr	r0, [pc, #208]	; (800cc58 <Print_Siemens_MSG+0x17c>)
 800cb86:	f015 fb91 	bl	80222ac <iprintf>
	if(TX_RX == RX)
 800cb8a:	797b      	ldrb	r3, [r7, #5]
 800cb8c:	2b02      	cmp	r3, #2
 800cb8e:	d122      	bne.n	800cbd6 <Print_Siemens_MSG+0xfa>
	{
		printf("RC:%u|",SiemensPrint_st->No_ofDataBytes);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cb94:	4619      	mov	r1, r3
 800cb96:	4831      	ldr	r0, [pc, #196]	; (800cc5c <Print_Siemens_MSG+0x180>)
 800cb98:	f015 fb88 	bl	80222ac <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800cb9c:	2300      	movs	r3, #0
 800cb9e:	82fb      	strh	r3, [r7, #22]
 800cba0:	e00b      	b.n	800cbba <Print_Siemens_MSG+0xde>
		{
			printf("%02X ",SiemensPrint_st->AppData[Traverser]);
 800cba2:	8afb      	ldrh	r3, [r7, #22]
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	4413      	add	r3, r2
 800cba8:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800cbac:	4619      	mov	r1, r3
 800cbae:	482c      	ldr	r0, [pc, #176]	; (800cc60 <Print_Siemens_MSG+0x184>)
 800cbb0:	f015 fb7c 	bl	80222ac <iprintf>
		for(uint16_t Traverser = 0;Traverser <SiemensPrint_st->No_ofDataBytes;++Traverser)
 800cbb4:	8afb      	ldrh	r3, [r7, #22]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	82fb      	strh	r3, [r7, #22]
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800cbbe:	8afa      	ldrh	r2, [r7, #22]
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	d3ee      	bcc.n	800cba2 <Print_Siemens_MSG+0xc6>
		}
		printf("\n");
 800cbc4:	200a      	movs	r0, #10
 800cbc6:	f015 fb89 	bl	80222dc <putchar>

		if(Debug_flag == 2)
 800cbca:	4b26      	ldr	r3, [pc, #152]	; (800cc64 <Print_Siemens_MSG+0x188>)
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	2b02      	cmp	r3, #2
 800cbd0:	d101      	bne.n	800cbd6 <Print_Siemens_MSG+0xfa>
		{
			PrintSignals();
 800cbd2:	f000 ff65 	bl	800daa0 <PrintSignals>
		//		}
		//		printf("\n____________________________________ \n");


	}
	if(Debug_flag == 1)
 800cbd6:	4b23      	ldr	r3, [pc, #140]	; (800cc64 <Print_Siemens_MSG+0x188>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d120      	bne.n	800cc20 <Print_Siemens_MSG+0x144>
	{
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800cbde:	2300      	movs	r3, #0
 800cbe0:	82bb      	strh	r3, [r7, #20]
 800cbe2:	e016      	b.n	800cc12 <Print_Siemens_MSG+0x136>
		{
			if((Byte != 0) && ( (Byte % 32) == 0) )
 800cbe4:	8abb      	ldrh	r3, [r7, #20]
 800cbe6:	2b00      	cmp	r3, #0
 800cbe8:	d008      	beq.n	800cbfc <Print_Siemens_MSG+0x120>
 800cbea:	8abb      	ldrh	r3, [r7, #20]
 800cbec:	f003 031f 	and.w	r3, r3, #31
 800cbf0:	b29b      	uxth	r3, r3
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d102      	bne.n	800cbfc <Print_Siemens_MSG+0x120>
			{
				printf("\n");
 800cbf6:	200a      	movs	r0, #10
 800cbf8:	f015 fb70 	bl	80222dc <putchar>
			}
			printf("%02X ",Buff[Byte]);
 800cbfc:	8abb      	ldrh	r3, [r7, #20]
 800cbfe:	68ba      	ldr	r2, [r7, #8]
 800cc00:	4413      	add	r3, r2
 800cc02:	781b      	ldrb	r3, [r3, #0]
 800cc04:	4619      	mov	r1, r3
 800cc06:	4816      	ldr	r0, [pc, #88]	; (800cc60 <Print_Siemens_MSG+0x184>)
 800cc08:	f015 fb50 	bl	80222ac <iprintf>
		for(uint16_t Byte = 0;Byte<Length;++Byte)
 800cc0c:	8abb      	ldrh	r3, [r7, #20]
 800cc0e:	3301      	adds	r3, #1
 800cc10:	82bb      	strh	r3, [r7, #20]
 800cc12:	8aba      	ldrh	r2, [r7, #20]
 800cc14:	88fb      	ldrh	r3, [r7, #6]
 800cc16:	429a      	cmp	r2, r3
 800cc18:	d3e4      	bcc.n	800cbe4 <Print_Siemens_MSG+0x108>
		}
		printf("\n");
 800cc1a:	200a      	movs	r0, #10
 800cc1c:	f015 fb5e 	bl	80222dc <putchar>
	}
	//	printf("\n");
	//	printf("\n________________________________________________________________________________________________\n");
}
 800cc20:	bf00      	nop
 800cc22:	3718      	adds	r7, #24
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	08025d74 	.word	0x08025d74
 800cc2c:	08025d7c 	.word	0x08025d7c
 800cc30:	08025d80 	.word	0x08025d80
 800cc34:	08025d84 	.word	0x08025d84
 800cc38:	08025d8c 	.word	0x08025d8c
 800cc3c:	08025d94 	.word	0x08025d94
 800cc40:	08025d9c 	.word	0x08025d9c
 800cc44:	08025da4 	.word	0x08025da4
 800cc48:	08025db0 	.word	0x08025db0
 800cc4c:	08025db8 	.word	0x08025db8
 800cc50:	08025dc0 	.word	0x08025dc0
 800cc54:	08025dc8 	.word	0x08025dc8
 800cc58:	08025dd4 	.word	0x08025dd4
 800cc5c:	08025de0 	.word	0x08025de0
 800cc60:	08025de8 	.word	0x08025de8
 800cc64:	20000645 	.word	0x20000645

0800cc68 <Chech_forSiemensCMD>:



void Chech_forSiemensCMD(void)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b09a      	sub	sp, #104	; 0x68
 800cc6c:	af00      	add	r7, sp, #0
	//	unsigned char ch[20] = {0,},i=0;
	uint8_t IS_COMMAND_RECEIVED = NO;
 800cc6e:	2300      	movs	r3, #0
 800cc70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	uint8_t Index = 0;
 800cc74:	2300      	movs	r3, #0
 800cc76:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
	uint8_t Byte = 0;
 800cc7a:	2300      	movs	r3, #0
 800cc7c:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
	uint8_t Buffer[100] = {0,};
 800cc80:	2300      	movs	r3, #0
 800cc82:	603b      	str	r3, [r7, #0]
 800cc84:	1d3b      	adds	r3, r7, #4
 800cc86:	2260      	movs	r2, #96	; 0x60
 800cc88:	2100      	movs	r1, #0
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f015 fa26 	bl	80220dc <memset>
	if(HAL_Elaps_Ticks(Isp_Intr_Clk) < 10)
 800cc90:	4bb9      	ldr	r3, [pc, #740]	; (800cf78 <Chech_forSiemensCMD+0x310>)
 800cc92:	681b      	ldr	r3, [r3, #0]
 800cc94:	4618      	mov	r0, r3
 800cc96:	f001 fdb3 	bl	800e800 <HAL_Elaps_Ticks>
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	2b09      	cmp	r3, #9
 800cc9e:	f240 81ad 	bls.w	800cffc <Chech_forSiemensCMD+0x394>
	{
		return;
	}
	else
	{
		while(Com_DataReady(ISP_PORT))
 800cca2:	e010      	b.n	800ccc6 <Chech_forSiemensCMD+0x5e>
		{
			Byte = Com_Get_Byte(ISP_PORT);
 800cca4:	2000      	movs	r0, #0
 800cca6:	f007 ffcf 	bl	8014c48 <Com_Get_Byte>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
			Buffer[Index++] = Byte;
 800ccb0:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ccb4:	1c5a      	adds	r2, r3, #1
 800ccb6:	f887 2066 	strb.w	r2, [r7, #102]	; 0x66
 800ccba:	3368      	adds	r3, #104	; 0x68
 800ccbc:	443b      	add	r3, r7
 800ccbe:	f897 2065 	ldrb.w	r2, [r7, #101]	; 0x65
 800ccc2:	f803 2c68 	strb.w	r2, [r3, #-104]
		while(Com_DataReady(ISP_PORT))
 800ccc6:	2000      	movs	r0, #0
 800ccc8:	f007 ff7e 	bl	8014bc8 <Com_DataReady>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d1e8      	bne.n	800cca4 <Chech_forSiemensCMD+0x3c>
		}
		if(Index>0)
 800ccd2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	f000 8144 	beq.w	800cf64 <Chech_forSiemensCMD+0x2fc>
		{
			Buffer[Index] = 0;
 800ccdc:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cce0:	3368      	adds	r3, #104	; 0x68
 800cce2:	443b      	add	r3, r7
 800cce4:	2200      	movs	r2, #0
 800cce6:	f803 2c68 	strb.w	r2, [r3, #-104]
			printf("Received from ISP:%s\n",Buffer);
 800ccea:	463b      	mov	r3, r7
 800ccec:	4619      	mov	r1, r3
 800ccee:	48a3      	ldr	r0, [pc, #652]	; (800cf7c <Chech_forSiemensCMD+0x314>)
 800ccf0:	f015 fadc 	bl	80222ac <iprintf>
			switch(Is_SiemensCommand_Valid(Buffer,Index))
 800ccf4:	f897 2066 	ldrb.w	r2, [r7, #102]	; 0x66
 800ccf8:	463b      	mov	r3, r7
 800ccfa:	4611      	mov	r1, r2
 800ccfc:	4618      	mov	r0, r3
 800ccfe:	f000 faf3 	bl	800d2e8 <Is_SiemensCommand_Valid>
 800cd02:	4603      	mov	r3, r0
 800cd04:	2b0c      	cmp	r3, #12
 800cd06:	f200 8129 	bhi.w	800cf5c <Chech_forSiemensCMD+0x2f4>
 800cd0a:	a201      	add	r2, pc, #4	; (adr r2, 800cd10 <Chech_forSiemensCMD+0xa8>)
 800cd0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd10:	0800cd45 	.word	0x0800cd45
 800cd14:	0800cd53 	.word	0x0800cd53
 800cd18:	0800cdb7 	.word	0x0800cdb7
 800cd1c:	0800cdd9 	.word	0x0800cdd9
 800cd20:	0800ce01 	.word	0x0800ce01
 800cd24:	0800ce29 	.word	0x0800ce29
 800cd28:	0800ce51 	.word	0x0800ce51
 800cd2c:	0800ce79 	.word	0x0800ce79
 800cd30:	0800cea1 	.word	0x0800cea1
 800cd34:	0800cec9 	.word	0x0800cec9
 800cd38:	0800cef1 	.word	0x0800cef1
 800cd3c:	0800cf19 	.word	0x0800cf19
 800cd40:	0800cf41 	.word	0x0800cf41
			{
			case ZERO:
				Dats_Request_Flag = 1;
 800cd44:	4b8e      	ldr	r3, [pc, #568]	; (800cf80 <Chech_forSiemensCMD+0x318>)
 800cd46:	2201      	movs	r2, #1
 800cd48:	701a      	strb	r2, [r3, #0]
				printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 800cd4a:	488e      	ldr	r0, [pc, #568]	; (800cf84 <Chech_forSiemensCMD+0x31c>)
 800cd4c:	f015 fb4a 	bl	80223e4 <puts>
				break;
 800cd50:	e109      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case ONE:
				printf("Received \"%s\":%u\n",Commands_List[ONE],(Buffer[Index-1])-'0');
 800cd52:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cd56:	3b01      	subs	r3, #1
 800cd58:	3368      	adds	r3, #104	; 0x68
 800cd5a:	443b      	add	r3, r7
 800cd5c:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cd60:	3b30      	subs	r3, #48	; 0x30
 800cd62:	461a      	mov	r2, r3
 800cd64:	4988      	ldr	r1, [pc, #544]	; (800cf88 <Chech_forSiemensCMD+0x320>)
 800cd66:	4889      	ldr	r0, [pc, #548]	; (800cf8c <Chech_forSiemensCMD+0x324>)
 800cd68:	f015 faa0 	bl	80222ac <iprintf>
				if( (((Buffer[Index-1])-'0') >= 0) && ((Buffer[Index-1])-'0') < 3)
 800cd6c:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cd70:	3b01      	subs	r3, #1
 800cd72:	3368      	adds	r3, #104	; 0x68
 800cd74:	443b      	add	r3, r7
 800cd76:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cd7a:	2b2f      	cmp	r3, #47	; 0x2f
 800cd7c:	d914      	bls.n	800cda8 <Chech_forSiemensCMD+0x140>
 800cd7e:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cd82:	3b01      	subs	r3, #1
 800cd84:	3368      	adds	r3, #104	; 0x68
 800cd86:	443b      	add	r3, r7
 800cd88:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cd8c:	2b32      	cmp	r3, #50	; 0x32
 800cd8e:	d80b      	bhi.n	800cda8 <Chech_forSiemensCMD+0x140>
				{
					Debug_flag = (Buffer[Index-1])-'0';
 800cd90:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 800cd94:	3b01      	subs	r3, #1
 800cd96:	3368      	adds	r3, #104	; 0x68
 800cd98:	443b      	add	r3, r7
 800cd9a:	f813 3c68 	ldrb.w	r3, [r3, #-104]
 800cd9e:	3b30      	subs	r3, #48	; 0x30
 800cda0:	b2da      	uxtb	r2, r3
 800cda2:	4b7b      	ldr	r3, [pc, #492]	; (800cf90 <Chech_forSiemensCMD+0x328>)
 800cda4:	701a      	strb	r2, [r3, #0]
 800cda6:	e002      	b.n	800cdae <Chech_forSiemensCMD+0x146>
				}
				else
				{
					printf("Please Send Valid Command\n");
 800cda8:	487a      	ldr	r0, [pc, #488]	; (800cf94 <Chech_forSiemensCMD+0x32c>)
 800cdaa:	f015 fb1b 	bl	80223e4 <puts>
				}
				IS_COMMAND_RECEIVED = YES;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cdb4:	e0d7      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>

			case TWO:
				printf("Received %s\n",Commands_List[TWO]);
 800cdb6:	4978      	ldr	r1, [pc, #480]	; (800cf98 <Chech_forSiemensCMD+0x330>)
 800cdb8:	4878      	ldr	r0, [pc, #480]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800cdba:	f015 fa77 	bl	80222ac <iprintf>
				printf("INVALID_DES_SYS_TYPE\n");
 800cdbe:	4878      	ldr	r0, [pc, #480]	; (800cfa0 <Chech_forSiemensCMD+0x338>)
 800cdc0:	f015 fb10 	bl	80223e4 <puts>
				SET_BIT_USER(INVALID_DES_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cdc4:	4b77      	ldr	r3, [pc, #476]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f043 0301 	orr.w	r3, r3, #1
 800cdcc:	4a75      	ldr	r2, [pc, #468]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cdce:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cdd0:	2301      	movs	r3, #1
 800cdd2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cdd6:	e0c6      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>

			case THREE:
				printf("Received %s\n",Commands_List[THREE]);
 800cdd8:	4973      	ldr	r1, [pc, #460]	; (800cfa8 <Chech_forSiemensCMD+0x340>)
 800cdda:	4870      	ldr	r0, [pc, #448]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800cddc:	f015 fa66 	bl	80222ac <iprintf>
				printf("INVALID_SRC_SYS_TYPE\n");
 800cde0:	4872      	ldr	r0, [pc, #456]	; (800cfac <Chech_forSiemensCMD+0x344>)
 800cde2:	f015 faff 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cde6:	4b6f      	ldr	r3, [pc, #444]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cde8:	2200      	movs	r2, #0
 800cdea:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_SYS_TYPE,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cdec:	4b6d      	ldr	r3, [pc, #436]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	f043 0302 	orr.w	r3, r3, #2
 800cdf4:	4a6b      	ldr	r2, [pc, #428]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cdf6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cdfe:	e0b2      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>

			case FOUR:
				printf("Received %s\n",Commands_List[FOUR]);
 800ce00:	496b      	ldr	r1, [pc, #428]	; (800cfb0 <Chech_forSiemensCMD+0x348>)
 800ce02:	4866      	ldr	r0, [pc, #408]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800ce04:	f015 fa52 	bl	80222ac <iprintf>
				printf("INVALID_SRC_ADDR\n");
 800ce08:	486a      	ldr	r0, [pc, #424]	; (800cfb4 <Chech_forSiemensCMD+0x34c>)
 800ce0a:	f015 faeb 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ce0e:	4b65      	ldr	r3, [pc, #404]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce10:	2200      	movs	r2, #0
 800ce12:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_ADDR,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ce14:	4b63      	ldr	r3, [pc, #396]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	f043 0304 	orr.w	r3, r3, #4
 800ce1c:	4a61      	ldr	r2, [pc, #388]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce1e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ce20:	2301      	movs	r3, #1
 800ce22:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ce26:	e09e      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>

			case FIVE:
				printf("Received %s\n",Commands_List[FIVE]);
 800ce28:	4963      	ldr	r1, [pc, #396]	; (800cfb8 <Chech_forSiemensCMD+0x350>)
 800ce2a:	485c      	ldr	r0, [pc, #368]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800ce2c:	f015 fa3e 	bl	80222ac <iprintf>
				printf("INVALID_DES_PORT\n");
 800ce30:	4862      	ldr	r0, [pc, #392]	; (800cfbc <Chech_forSiemensCMD+0x354>)
 800ce32:	f015 fad7 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ce36:	4b5b      	ldr	r3, [pc, #364]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_DES_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ce3c:	4b59      	ldr	r3, [pc, #356]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	f043 0308 	orr.w	r3, r3, #8
 800ce44:	4a57      	ldr	r2, [pc, #348]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce46:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ce48:	2301      	movs	r3, #1
 800ce4a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ce4e:	e08a      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>

			case SIX:
				printf("Received %s\n",Commands_List[SIX]);
 800ce50:	495b      	ldr	r1, [pc, #364]	; (800cfc0 <Chech_forSiemensCMD+0x358>)
 800ce52:	4852      	ldr	r0, [pc, #328]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800ce54:	f015 fa2a 	bl	80222ac <iprintf>
				printf("INVALID_SRC_PORT\n");
 800ce58:	485a      	ldr	r0, [pc, #360]	; (800cfc4 <Chech_forSiemensCMD+0x35c>)
 800ce5a:	f015 fac3 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ce5e:	4b51      	ldr	r3, [pc, #324]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce60:	2200      	movs	r2, #0
 800ce62:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_SRC_PORT,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ce64:	4b4f      	ldr	r3, [pc, #316]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f043 0310 	orr.w	r3, r3, #16
 800ce6c:	4a4d      	ldr	r2, [pc, #308]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce6e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ce70:	2301      	movs	r3, #1
 800ce72:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ce76:	e076      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case SEVEN:
				printf("Received %s\n",Commands_List[SEVEN]);
 800ce78:	4953      	ldr	r1, [pc, #332]	; (800cfc8 <Chech_forSiemensCMD+0x360>)
 800ce7a:	4848      	ldr	r0, [pc, #288]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800ce7c:	f015 fa16 	bl	80222ac <iprintf>
				printf("INVALID_PACKET_CRC_SIEMENS\n");
 800ce80:	4852      	ldr	r0, [pc, #328]	; (800cfcc <Chech_forSiemensCMD+0x364>)
 800ce82:	f015 faaf 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ce86:	4b47      	ldr	r3, [pc, #284]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce88:	2200      	movs	r2, #0
 800ce8a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ce8c:	4b45      	ldr	r3, [pc, #276]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f043 0320 	orr.w	r3, r3, #32
 800ce94:	4a43      	ldr	r2, [pc, #268]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ce96:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800ce98:	2301      	movs	r3, #1
 800ce9a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ce9e:	e062      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case EIGHT:
				printf("Received %s Command\n",Commands_List[EIGHT]);
 800cea0:	494b      	ldr	r1, [pc, #300]	; (800cfd0 <Chech_forSiemensCMD+0x368>)
 800cea2:	484c      	ldr	r0, [pc, #304]	; (800cfd4 <Chech_forSiemensCMD+0x36c>)
 800cea4:	f015 fa02 	bl	80222ac <iprintf>
				printf("NO_REPLY_FROM_EIPC\n");
 800cea8:	484b      	ldr	r0, [pc, #300]	; (800cfd8 <Chech_forSiemensCMD+0x370>)
 800ceaa:	f015 fa9b 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ceae:	4b3d      	ldr	r3, [pc, #244]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(NO_REPLY_FROM_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800ceb4:	4b3b      	ldr	r3, [pc, #236]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ceb6:	681b      	ldr	r3, [r3, #0]
 800ceb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cebc:	4a39      	ldr	r2, [pc, #228]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cebe:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cec0:	2301      	movs	r3, #1
 800cec2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cec6:	e04e      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case NINE:
				printf("Received %s\n",Commands_List[NINE]);
 800cec8:	4944      	ldr	r1, [pc, #272]	; (800cfdc <Chech_forSiemensCMD+0x374>)
 800ceca:	4834      	ldr	r0, [pc, #208]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800cecc:	f015 f9ee 	bl	80222ac <iprintf>
				printf("INVALID_PACKET_CRC_EIPC\n");
 800ced0:	4843      	ldr	r0, [pc, #268]	; (800cfe0 <Chech_forSiemensCMD+0x378>)
 800ced2:	f015 fa87 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800ced6:	4b33      	ldr	r3, [pc, #204]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800ced8:	2200      	movs	r2, #0
 800ceda:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cedc:	4b31      	ldr	r3, [pc, #196]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cee4:	4a2f      	ldr	r2, [pc, #188]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cee6:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cee8:	2301      	movs	r3, #1
 800ceea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800ceee:	e03a      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case TEN:
				printf("Received %s\n",Commands_List[TEN]);
 800cef0:	493c      	ldr	r1, [pc, #240]	; (800cfe4 <Chech_forSiemensCMD+0x37c>)
 800cef2:	482a      	ldr	r0, [pc, #168]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800cef4:	f015 f9da 	bl	80222ac <iprintf>
				printf("INVALID_COMP_PACKET_CRC_SIEMENS\n");
 800cef8:	483b      	ldr	r0, [pc, #236]	; (800cfe8 <Chech_forSiemensCMD+0x380>)
 800cefa:	f015 fa73 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cefe:	4b29      	ldr	r3, [pc, #164]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_SIEMENS,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cf04:	4b27      	ldr	r3, [pc, #156]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf0c:	4a25      	ldr	r2, [pc, #148]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf0e:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cf10:	2301      	movs	r3, #1
 800cf12:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf16:	e026      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case ELEVEN:
				printf("Received %s\n",Commands_List[ELEVEN]);
 800cf18:	4934      	ldr	r1, [pc, #208]	; (800cfec <Chech_forSiemensCMD+0x384>)
 800cf1a:	4820      	ldr	r0, [pc, #128]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800cf1c:	f015 f9c6 	bl	80222ac <iprintf>
				printf("INVALID_COMP_PACKET_CRC_EIPC\n");
 800cf20:	4833      	ldr	r0, [pc, #204]	; (800cff0 <Chech_forSiemensCMD+0x388>)
 800cf22:	f015 fa5f 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cf26:	4b1f      	ldr	r3, [pc, #124]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf28:	2200      	movs	r2, #0
 800cf2a:	601a      	str	r2, [r3, #0]
				SET_BIT_USER(INVALID_COMP_PACKET_CRC_EIPC,Siemens_fault_injection_st.FAULT_INJECTION_BITS);
 800cf2c:	4b1d      	ldr	r3, [pc, #116]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf34:	4a1b      	ldr	r2, [pc, #108]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf36:	6013      	str	r3, [r2, #0]
				IS_COMMAND_RECEIVED = YES;
 800cf38:	2301      	movs	r3, #1
 800cf3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf3e:	e012      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			case TWELVE:
				printf("Received %s\n",Commands_List[TWELVE]);
 800cf40:	492c      	ldr	r1, [pc, #176]	; (800cff4 <Chech_forSiemensCMD+0x38c>)
 800cf42:	4816      	ldr	r0, [pc, #88]	; (800cf9c <Chech_forSiemensCMD+0x334>)
 800cf44:	f015 f9b2 	bl	80222ac <iprintf>
				printf("CLEAR ALL\n");
 800cf48:	482b      	ldr	r0, [pc, #172]	; (800cff8 <Chech_forSiemensCMD+0x390>)
 800cf4a:	f015 fa4b 	bl	80223e4 <puts>
				Siemens_fault_injection_st.FAULT_INJECTION_BITS = 0;
 800cf4e:	4b15      	ldr	r3, [pc, #84]	; (800cfa4 <Chech_forSiemensCMD+0x33c>)
 800cf50:	2200      	movs	r2, #0
 800cf52:	601a      	str	r2, [r3, #0]
				IS_COMMAND_RECEIVED = YES;
 800cf54:	2301      	movs	r3, #1
 800cf56:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				break;
 800cf5a:	e004      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			default:
				printf("Please Send Valid Command\n");
 800cf5c:	480d      	ldr	r0, [pc, #52]	; (800cf94 <Chech_forSiemensCMD+0x32c>)
 800cf5e:	f015 fa41 	bl	80223e4 <puts>
 800cf62:	e000      	b.n	800cf66 <Chech_forSiemensCMD+0x2fe>
			}
		}
 800cf64:	bf00      	nop

		if(IS_COMMAND_RECEIVED == YES)
 800cf66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800cf6a:	2b01      	cmp	r3, #1
 800cf6c:	d147      	bne.n	800cffe <Chech_forSiemensCMD+0x396>
		{
			TransmitCanPkt(CAN_FAULT_INJECTION);
 800cf6e:	f240 2005 	movw	r0, #517	; 0x205
 800cf72:	f002 f9bb 	bl	800f2ec <TransmitCanPkt>
 800cf76:	e042      	b.n	800cffe <Chech_forSiemensCMD+0x396>
 800cf78:	2000a000 	.word	0x2000a000
 800cf7c:	08025df0 	.word	0x08025df0
 800cf80:	20000644 	.word	0x20000644
 800cf84:	08025e08 	.word	0x08025e08
 800cf88:	200047e2 	.word	0x200047e2
 800cf8c:	08025e48 	.word	0x08025e48
 800cf90:	20000645 	.word	0x20000645
 800cf94:	08025e5c 	.word	0x08025e5c
 800cf98:	20004814 	.word	0x20004814
 800cf9c:	08025e78 	.word	0x08025e78
 800cfa0:	08025e88 	.word	0x08025e88
 800cfa4:	20003470 	.word	0x20003470
 800cfa8:	20004846 	.word	0x20004846
 800cfac:	08025ea0 	.word	0x08025ea0
 800cfb0:	20004878 	.word	0x20004878
 800cfb4:	08025eb8 	.word	0x08025eb8
 800cfb8:	200048aa 	.word	0x200048aa
 800cfbc:	08025ecc 	.word	0x08025ecc
 800cfc0:	200048dc 	.word	0x200048dc
 800cfc4:	08025ee0 	.word	0x08025ee0
 800cfc8:	2000490e 	.word	0x2000490e
 800cfcc:	08025ef4 	.word	0x08025ef4
 800cfd0:	20004940 	.word	0x20004940
 800cfd4:	08025f10 	.word	0x08025f10
 800cfd8:	08025f28 	.word	0x08025f28
 800cfdc:	20004972 	.word	0x20004972
 800cfe0:	08025f3c 	.word	0x08025f3c
 800cfe4:	200049a4 	.word	0x200049a4
 800cfe8:	08025f54 	.word	0x08025f54
 800cfec:	200049d6 	.word	0x200049d6
 800cff0:	08025f74 	.word	0x08025f74
 800cff4:	20004a08 	.word	0x20004a08
 800cff8:	08025f94 	.word	0x08025f94
		return;
 800cffc:	bf00      	nop
		}
	}
}
 800cffe:	3768      	adds	r7, #104	; 0x68
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <Update_SiemensCommands>:


void Update_SiemensCommands(void)
{
 800d004:	b4b0      	push	{r4, r5, r7}
 800d006:	b083      	sub	sp, #12
 800d008:	af00      	add	r7, sp, #0
	uint8_t CmdCnt = 0;
 800d00a:	2300      	movs	r3, #0
 800d00c:	71fb      	strb	r3, [r7, #7]

	Commands_List[CmdCnt][0] = 0X24;
 800d00e:	79fb      	ldrb	r3, [r7, #7]
 800d010:	4aa6      	ldr	r2, [pc, #664]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d012:	2132      	movs	r1, #50	; 0x32
 800d014:	fb01 f303 	mul.w	r3, r1, r3
 800d018:	4413      	add	r3, r2
 800d01a:	2224      	movs	r2, #36	; 0x24
 800d01c:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][1] = 0X01;
 800d01e:	79fb      	ldrb	r3, [r7, #7]
 800d020:	4aa2      	ldr	r2, [pc, #648]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d022:	2132      	movs	r1, #50	; 0x32
 800d024:	fb01 f303 	mul.w	r3, r1, r3
 800d028:	4413      	add	r3, r2
 800d02a:	3301      	adds	r3, #1
 800d02c:	2201      	movs	r2, #1
 800d02e:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][2] = 0X30;
 800d030:	79fb      	ldrb	r3, [r7, #7]
 800d032:	4a9e      	ldr	r2, [pc, #632]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d034:	2132      	movs	r1, #50	; 0x32
 800d036:	fb01 f303 	mul.w	r3, r1, r3
 800d03a:	4413      	add	r3, r2
 800d03c:	3302      	adds	r3, #2
 800d03e:	2230      	movs	r2, #48	; 0x30
 800d040:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][3] = 0X40;
 800d042:	79fb      	ldrb	r3, [r7, #7]
 800d044:	4a99      	ldr	r2, [pc, #612]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d046:	2132      	movs	r1, #50	; 0x32
 800d048:	fb01 f303 	mul.w	r3, r1, r3
 800d04c:	4413      	add	r3, r2
 800d04e:	3303      	adds	r3, #3
 800d050:	2240      	movs	r2, #64	; 0x40
 800d052:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][4] = 0XC0;
 800d054:	79fb      	ldrb	r3, [r7, #7]
 800d056:	4a95      	ldr	r2, [pc, #596]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d058:	2132      	movs	r1, #50	; 0x32
 800d05a:	fb01 f303 	mul.w	r3, r1, r3
 800d05e:	4413      	add	r3, r2
 800d060:	3304      	adds	r3, #4
 800d062:	22c0      	movs	r2, #192	; 0xc0
 800d064:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][5] = 0X4E;
 800d066:	79fb      	ldrb	r3, [r7, #7]
 800d068:	4a90      	ldr	r2, [pc, #576]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d06a:	2132      	movs	r1, #50	; 0x32
 800d06c:	fb01 f303 	mul.w	r3, r1, r3
 800d070:	4413      	add	r3, r2
 800d072:	3305      	adds	r3, #5
 800d074:	224e      	movs	r2, #78	; 0x4e
 800d076:	701a      	strb	r2, [r3, #0]
	Commands_List[CmdCnt][6] = 0X26;
 800d078:	79fb      	ldrb	r3, [r7, #7]
 800d07a:	4a8c      	ldr	r2, [pc, #560]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d07c:	2132      	movs	r1, #50	; 0x32
 800d07e:	fb01 f303 	mul.w	r3, r1, r3
 800d082:	4413      	add	r3, r2
 800d084:	3306      	adds	r3, #6
 800d086:	2226      	movs	r2, #38	; 0x26
 800d088:	701a      	strb	r2, [r3, #0]
	++CmdCnt;
 800d08a:	79fb      	ldrb	r3, [r7, #7]
 800d08c:	3301      	adds	r3, #1
 800d08e:	71fb      	strb	r3, [r7, #7]

	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"DEBUG_MODE");
 800d090:	79fb      	ldrb	r3, [r7, #7]
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	71fa      	strb	r2, [r7, #7]
 800d096:	461a      	mov	r2, r3
 800d098:	2332      	movs	r3, #50	; 0x32
 800d09a:	fb02 f303 	mul.w	r3, r2, r3
 800d09e:	4a83      	ldr	r2, [pc, #524]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d0a0:	4413      	add	r3, r2
 800d0a2:	4983      	ldr	r1, [pc, #524]	; (800d2b0 <Update_SiemensCommands+0x2ac>)
 800d0a4:	461a      	mov	r2, r3
 800d0a6:	460b      	mov	r3, r1
 800d0a8:	cb03      	ldmia	r3!, {r0, r1}
 800d0aa:	6010      	str	r0, [r2, #0]
 800d0ac:	6051      	str	r1, [r2, #4]
 800d0ae:	8819      	ldrh	r1, [r3, #0]
 800d0b0:	789b      	ldrb	r3, [r3, #2]
 800d0b2:	8111      	strh	r1, [r2, #8]
 800d0b4:	7293      	strb	r3, [r2, #10]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_SYS_TYPE");
 800d0b6:	79fb      	ldrb	r3, [r7, #7]
 800d0b8:	1c5a      	adds	r2, r3, #1
 800d0ba:	71fa      	strb	r2, [r7, #7]
 800d0bc:	461a      	mov	r2, r3
 800d0be:	2332      	movs	r3, #50	; 0x32
 800d0c0:	fb02 f303 	mul.w	r3, r2, r3
 800d0c4:	4a79      	ldr	r2, [pc, #484]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d0c6:	4413      	add	r3, r2
 800d0c8:	4a7a      	ldr	r2, [pc, #488]	; (800d2b4 <Update_SiemensCommands+0x2b0>)
 800d0ca:	461d      	mov	r5, r3
 800d0cc:	4614      	mov	r4, r2
 800d0ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0d0:	6028      	str	r0, [r5, #0]
 800d0d2:	6069      	str	r1, [r5, #4]
 800d0d4:	60aa      	str	r2, [r5, #8]
 800d0d6:	60eb      	str	r3, [r5, #12]
 800d0d8:	6820      	ldr	r0, [r4, #0]
 800d0da:	6128      	str	r0, [r5, #16]
 800d0dc:	7923      	ldrb	r3, [r4, #4]
 800d0de:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_SYS_TYPE");
 800d0e0:	79fb      	ldrb	r3, [r7, #7]
 800d0e2:	1c5a      	adds	r2, r3, #1
 800d0e4:	71fa      	strb	r2, [r7, #7]
 800d0e6:	461a      	mov	r2, r3
 800d0e8:	2332      	movs	r3, #50	; 0x32
 800d0ea:	fb02 f303 	mul.w	r3, r2, r3
 800d0ee:	4a6f      	ldr	r2, [pc, #444]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d0f0:	4413      	add	r3, r2
 800d0f2:	4a71      	ldr	r2, [pc, #452]	; (800d2b8 <Update_SiemensCommands+0x2b4>)
 800d0f4:	461d      	mov	r5, r3
 800d0f6:	4614      	mov	r4, r2
 800d0f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d0fa:	6028      	str	r0, [r5, #0]
 800d0fc:	6069      	str	r1, [r5, #4]
 800d0fe:	60aa      	str	r2, [r5, #8]
 800d100:	60eb      	str	r3, [r5, #12]
 800d102:	6820      	ldr	r0, [r4, #0]
 800d104:	6128      	str	r0, [r5, #16]
 800d106:	7923      	ldrb	r3, [r4, #4]
 800d108:	752b      	strb	r3, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_ADDR");
 800d10a:	79fb      	ldrb	r3, [r7, #7]
 800d10c:	1c5a      	adds	r2, r3, #1
 800d10e:	71fa      	strb	r2, [r7, #7]
 800d110:	461a      	mov	r2, r3
 800d112:	2332      	movs	r3, #50	; 0x32
 800d114:	fb02 f303 	mul.w	r3, r2, r3
 800d118:	4a64      	ldr	r2, [pc, #400]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d11a:	4413      	add	r3, r2
 800d11c:	4a67      	ldr	r2, [pc, #412]	; (800d2bc <Update_SiemensCommands+0x2b8>)
 800d11e:	461d      	mov	r5, r3
 800d120:	4614      	mov	r4, r2
 800d122:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d124:	6028      	str	r0, [r5, #0]
 800d126:	6069      	str	r1, [r5, #4]
 800d128:	60aa      	str	r2, [r5, #8]
 800d12a:	60eb      	str	r3, [r5, #12]
 800d12c:	7823      	ldrb	r3, [r4, #0]
 800d12e:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_DES_PORT");
 800d130:	79fb      	ldrb	r3, [r7, #7]
 800d132:	1c5a      	adds	r2, r3, #1
 800d134:	71fa      	strb	r2, [r7, #7]
 800d136:	461a      	mov	r2, r3
 800d138:	2332      	movs	r3, #50	; 0x32
 800d13a:	fb02 f303 	mul.w	r3, r2, r3
 800d13e:	4a5b      	ldr	r2, [pc, #364]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d140:	4413      	add	r3, r2
 800d142:	4a5f      	ldr	r2, [pc, #380]	; (800d2c0 <Update_SiemensCommands+0x2bc>)
 800d144:	461d      	mov	r5, r3
 800d146:	4614      	mov	r4, r2
 800d148:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d14a:	6028      	str	r0, [r5, #0]
 800d14c:	6069      	str	r1, [r5, #4]
 800d14e:	60aa      	str	r2, [r5, #8]
 800d150:	60eb      	str	r3, [r5, #12]
 800d152:	7823      	ldrb	r3, [r4, #0]
 800d154:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_SRC_PORT");
 800d156:	79fb      	ldrb	r3, [r7, #7]
 800d158:	1c5a      	adds	r2, r3, #1
 800d15a:	71fa      	strb	r2, [r7, #7]
 800d15c:	461a      	mov	r2, r3
 800d15e:	2332      	movs	r3, #50	; 0x32
 800d160:	fb02 f303 	mul.w	r3, r2, r3
 800d164:	4a51      	ldr	r2, [pc, #324]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d166:	4413      	add	r3, r2
 800d168:	4a56      	ldr	r2, [pc, #344]	; (800d2c4 <Update_SiemensCommands+0x2c0>)
 800d16a:	461d      	mov	r5, r3
 800d16c:	4614      	mov	r4, r2
 800d16e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d170:	6028      	str	r0, [r5, #0]
 800d172:	6069      	str	r1, [r5, #4]
 800d174:	60aa      	str	r2, [r5, #8]
 800d176:	60eb      	str	r3, [r5, #12]
 800d178:	7823      	ldrb	r3, [r4, #0]
 800d17a:	742b      	strb	r3, [r5, #16]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INAVLID_PACKET_CRC_SIEMENS");
 800d17c:	79fb      	ldrb	r3, [r7, #7]
 800d17e:	1c5a      	adds	r2, r3, #1
 800d180:	71fa      	strb	r2, [r7, #7]
 800d182:	461a      	mov	r2, r3
 800d184:	2332      	movs	r3, #50	; 0x32
 800d186:	fb02 f303 	mul.w	r3, r2, r3
 800d18a:	4a48      	ldr	r2, [pc, #288]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d18c:	4413      	add	r3, r2
 800d18e:	4a4e      	ldr	r2, [pc, #312]	; (800d2c8 <Update_SiemensCommands+0x2c4>)
 800d190:	461d      	mov	r5, r3
 800d192:	4614      	mov	r4, r2
 800d194:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d196:	6028      	str	r0, [r5, #0]
 800d198:	6069      	str	r1, [r5, #4]
 800d19a:	60aa      	str	r2, [r5, #8]
 800d19c:	60eb      	str	r3, [r5, #12]
 800d19e:	cc03      	ldmia	r4!, {r0, r1}
 800d1a0:	6128      	str	r0, [r5, #16]
 800d1a2:	6169      	str	r1, [r5, #20]
 800d1a4:	8823      	ldrh	r3, [r4, #0]
 800d1a6:	78a2      	ldrb	r2, [r4, #2]
 800d1a8:	832b      	strh	r3, [r5, #24]
 800d1aa:	4613      	mov	r3, r2
 800d1ac:	76ab      	strb	r3, [r5, #26]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"NO_REPLY_FROM_EIPC");
 800d1ae:	79fb      	ldrb	r3, [r7, #7]
 800d1b0:	1c5a      	adds	r2, r3, #1
 800d1b2:	71fa      	strb	r2, [r7, #7]
 800d1b4:	461a      	mov	r2, r3
 800d1b6:	2332      	movs	r3, #50	; 0x32
 800d1b8:	fb02 f303 	mul.w	r3, r2, r3
 800d1bc:	4a3b      	ldr	r2, [pc, #236]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d1be:	4413      	add	r3, r2
 800d1c0:	4a42      	ldr	r2, [pc, #264]	; (800d2cc <Update_SiemensCommands+0x2c8>)
 800d1c2:	461d      	mov	r5, r3
 800d1c4:	4614      	mov	r4, r2
 800d1c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1c8:	6028      	str	r0, [r5, #0]
 800d1ca:	6069      	str	r1, [r5, #4]
 800d1cc:	60aa      	str	r2, [r5, #8]
 800d1ce:	60eb      	str	r3, [r5, #12]
 800d1d0:	8823      	ldrh	r3, [r4, #0]
 800d1d2:	78a2      	ldrb	r2, [r4, #2]
 800d1d4:	822b      	strh	r3, [r5, #16]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	74ab      	strb	r3, [r5, #18]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_PACKET_CRC_EIPC");
 800d1da:	79fb      	ldrb	r3, [r7, #7]
 800d1dc:	1c5a      	adds	r2, r3, #1
 800d1de:	71fa      	strb	r2, [r7, #7]
 800d1e0:	461a      	mov	r2, r3
 800d1e2:	2332      	movs	r3, #50	; 0x32
 800d1e4:	fb02 f303 	mul.w	r3, r2, r3
 800d1e8:	4a30      	ldr	r2, [pc, #192]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d1ea:	4413      	add	r3, r2
 800d1ec:	4a38      	ldr	r2, [pc, #224]	; (800d2d0 <Update_SiemensCommands+0x2cc>)
 800d1ee:	461d      	mov	r5, r3
 800d1f0:	4614      	mov	r4, r2
 800d1f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d1f4:	6028      	str	r0, [r5, #0]
 800d1f6:	6069      	str	r1, [r5, #4]
 800d1f8:	60aa      	str	r2, [r5, #8]
 800d1fa:	60eb      	str	r3, [r5, #12]
 800d1fc:	cc03      	ldmia	r4!, {r0, r1}
 800d1fe:	6128      	str	r0, [r5, #16]
 800d200:	6169      	str	r1, [r5, #20]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_SIEMENS");
 800d202:	79fb      	ldrb	r3, [r7, #7]
 800d204:	1c5a      	adds	r2, r3, #1
 800d206:	71fa      	strb	r2, [r7, #7]
 800d208:	461a      	mov	r2, r3
 800d20a:	2332      	movs	r3, #50	; 0x32
 800d20c:	fb02 f303 	mul.w	r3, r2, r3
 800d210:	4a26      	ldr	r2, [pc, #152]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d212:	4413      	add	r3, r2
 800d214:	4a2f      	ldr	r2, [pc, #188]	; (800d2d4 <Update_SiemensCommands+0x2d0>)
 800d216:	461c      	mov	r4, r3
 800d218:	4615      	mov	r5, r2
 800d21a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d21c:	6020      	str	r0, [r4, #0]
 800d21e:	6061      	str	r1, [r4, #4]
 800d220:	60a2      	str	r2, [r4, #8]
 800d222:	60e3      	str	r3, [r4, #12]
 800d224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d226:	6120      	str	r0, [r4, #16]
 800d228:	6161      	str	r1, [r4, #20]
 800d22a:	61a2      	str	r2, [r4, #24]
 800d22c:	61e3      	str	r3, [r4, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"INVALID_COMP_PACKET_CRC_EIPC");
 800d22e:	79fb      	ldrb	r3, [r7, #7]
 800d230:	1c5a      	adds	r2, r3, #1
 800d232:	71fa      	strb	r2, [r7, #7]
 800d234:	461a      	mov	r2, r3
 800d236:	2332      	movs	r3, #50	; 0x32
 800d238:	fb02 f303 	mul.w	r3, r2, r3
 800d23c:	4a1b      	ldr	r2, [pc, #108]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d23e:	4413      	add	r3, r2
 800d240:	4a25      	ldr	r2, [pc, #148]	; (800d2d8 <Update_SiemensCommands+0x2d4>)
 800d242:	461d      	mov	r5, r3
 800d244:	4614      	mov	r4, r2
 800d246:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d248:	6028      	str	r0, [r5, #0]
 800d24a:	6069      	str	r1, [r5, #4]
 800d24c:	60aa      	str	r2, [r5, #8]
 800d24e:	60eb      	str	r3, [r5, #12]
 800d250:	cc07      	ldmia	r4!, {r0, r1, r2}
 800d252:	6128      	str	r0, [r5, #16]
 800d254:	6169      	str	r1, [r5, #20]
 800d256:	61aa      	str	r2, [r5, #24]
 800d258:	7823      	ldrb	r3, [r4, #0]
 800d25a:	772b      	strb	r3, [r5, #28]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"CLEAR_ALL");
 800d25c:	79fb      	ldrb	r3, [r7, #7]
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	71fa      	strb	r2, [r7, #7]
 800d262:	461a      	mov	r2, r3
 800d264:	2332      	movs	r3, #50	; 0x32
 800d266:	fb02 f303 	mul.w	r3, r2, r3
 800d26a:	4a10      	ldr	r2, [pc, #64]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d26c:	4413      	add	r3, r2
 800d26e:	491b      	ldr	r1, [pc, #108]	; (800d2dc <Update_SiemensCommands+0x2d8>)
 800d270:	461a      	mov	r2, r3
 800d272:	460b      	mov	r3, r1
 800d274:	cb03      	ldmia	r3!, {r0, r1}
 800d276:	6010      	str	r0, [r2, #0]
 800d278:	6051      	str	r1, [r2, #4]
 800d27a:	881b      	ldrh	r3, [r3, #0]
 800d27c:	8113      	strh	r3, [r2, #8]
	strcpy( (char *)Commands_List[CmdCnt++], (const char *)"HELP");
 800d27e:	79fb      	ldrb	r3, [r7, #7]
 800d280:	1c5a      	adds	r2, r3, #1
 800d282:	71fa      	strb	r2, [r7, #7]
 800d284:	461a      	mov	r2, r3
 800d286:	2332      	movs	r3, #50	; 0x32
 800d288:	fb02 f303 	mul.w	r3, r2, r3
 800d28c:	4a07      	ldr	r2, [pc, #28]	; (800d2ac <Update_SiemensCommands+0x2a8>)
 800d28e:	4413      	add	r3, r2
 800d290:	4a13      	ldr	r2, [pc, #76]	; (800d2e0 <Update_SiemensCommands+0x2dc>)
 800d292:	6810      	ldr	r0, [r2, #0]
 800d294:	6018      	str	r0, [r3, #0]
 800d296:	7912      	ldrb	r2, [r2, #4]
 800d298:	711a      	strb	r2, [r3, #4]
	Commands_Count =  CmdCnt;
 800d29a:	4a12      	ldr	r2, [pc, #72]	; (800d2e4 <Update_SiemensCommands+0x2e0>)
 800d29c:	79fb      	ldrb	r3, [r7, #7]
 800d29e:	7013      	strb	r3, [r2, #0]
}
 800d2a0:	bf00      	nop
 800d2a2:	370c      	adds	r7, #12
 800d2a4:	46bd      	mov	sp, r7
 800d2a6:	bcb0      	pop	{r4, r5, r7}
 800d2a8:	4770      	bx	lr
 800d2aa:	bf00      	nop
 800d2ac:	200047b0 	.word	0x200047b0
 800d2b0:	08025fa0 	.word	0x08025fa0
 800d2b4:	08025e88 	.word	0x08025e88
 800d2b8:	08025ea0 	.word	0x08025ea0
 800d2bc:	08025eb8 	.word	0x08025eb8
 800d2c0:	08025ecc 	.word	0x08025ecc
 800d2c4:	08025ee0 	.word	0x08025ee0
 800d2c8:	08025fac 	.word	0x08025fac
 800d2cc:	08025f28 	.word	0x08025f28
 800d2d0:	08025f3c 	.word	0x08025f3c
 800d2d4:	08025f54 	.word	0x08025f54
 800d2d8:	08025f74 	.word	0x08025f74
 800d2dc:	08025fc8 	.word	0x08025fc8
 800d2e0:	08025fd4 	.word	0x08025fd4
 800d2e4:	20004b98 	.word	0x20004b98

0800d2e8 <Is_SiemensCommand_Valid>:

uint8_t Is_SiemensCommand_Valid(uint8_t *Buffer,uint8_t Length)
{
 800d2e8:	b590      	push	{r4, r7, lr}
 800d2ea:	b085      	sub	sp, #20
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	460b      	mov	r3, r1
 800d2f2:	70fb      	strb	r3, [r7, #3]
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d2f4:	2300      	movs	r3, #0
 800d2f6:	73fb      	strb	r3, [r7, #15]
 800d2f8:	e01c      	b.n	800d334 <Is_SiemensCommand_Valid+0x4c>
	{
		//		if(strstr((char *)Buffer,(char *)Commands_List[Traverser]) != NULL)
		if(memcmp(Buffer,Commands_List[Traverser],strlen((char *)Commands_List[Traverser])) == 0)
 800d2fa:	7bfb      	ldrb	r3, [r7, #15]
 800d2fc:	2232      	movs	r2, #50	; 0x32
 800d2fe:	fb02 f303 	mul.w	r3, r2, r3
 800d302:	4a11      	ldr	r2, [pc, #68]	; (800d348 <Is_SiemensCommand_Valid+0x60>)
 800d304:	189c      	adds	r4, r3, r2
 800d306:	7bfb      	ldrb	r3, [r7, #15]
 800d308:	2232      	movs	r2, #50	; 0x32
 800d30a:	fb02 f303 	mul.w	r3, r2, r3
 800d30e:	4a0e      	ldr	r2, [pc, #56]	; (800d348 <Is_SiemensCommand_Valid+0x60>)
 800d310:	4413      	add	r3, r2
 800d312:	4618      	mov	r0, r3
 800d314:	f7f2 ff9e 	bl	8000254 <strlen>
 800d318:	4603      	mov	r3, r0
 800d31a:	461a      	mov	r2, r3
 800d31c:	4621      	mov	r1, r4
 800d31e:	6878      	ldr	r0, [r7, #4]
 800d320:	f014 fea4 	bl	802206c <memcmp>
 800d324:	4603      	mov	r3, r0
 800d326:	2b00      	cmp	r3, #0
 800d328:	d101      	bne.n	800d32e <Is_SiemensCommand_Valid+0x46>
		{
			return Traverser;
 800d32a:	7bfb      	ldrb	r3, [r7, #15]
 800d32c:	e008      	b.n	800d340 <Is_SiemensCommand_Valid+0x58>
	for(uint8_t Traverser = 0; Traverser < Commands_Count; ++Traverser)
 800d32e:	7bfb      	ldrb	r3, [r7, #15]
 800d330:	3301      	adds	r3, #1
 800d332:	73fb      	strb	r3, [r7, #15]
 800d334:	4b05      	ldr	r3, [pc, #20]	; (800d34c <Is_SiemensCommand_Valid+0x64>)
 800d336:	781b      	ldrb	r3, [r3, #0]
 800d338:	7bfa      	ldrb	r2, [r7, #15]
 800d33a:	429a      	cmp	r2, r3
 800d33c:	d3dd      	bcc.n	800d2fa <Is_SiemensCommand_Valid+0x12>
		}
	}
	return 255;
 800d33e:	23ff      	movs	r3, #255	; 0xff
}
 800d340:	4618      	mov	r0, r3
 800d342:	3714      	adds	r7, #20
 800d344:	46bd      	mov	sp, r7
 800d346:	bd90      	pop	{r4, r7, pc}
 800d348:	200047b0 	.word	0x200047b0
 800d34c:	20004b98 	.word	0x20004b98

0800d350 <Siemens_CRC>:
/*
 * SIEMENS CRC & Data Extract FUNTIONS
 */

uint16_t Siemens_CRC(uint8_t *data, uint16_t len)
{
 800d350:	b480      	push	{r7}
 800d352:	b087      	sub	sp, #28
 800d354:	af00      	add	r7, sp, #0
 800d356:	6078      	str	r0, [r7, #4]
 800d358:	460b      	mov	r3, r1
 800d35a:	807b      	strh	r3, [r7, #2]
	uint16_t crc = 0xFFFF;
 800d35c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d360:	82fb      	strh	r3, [r7, #22]
	uint16_t i=0;
 800d362:	2300      	movs	r3, #0
 800d364:	82bb      	strh	r3, [r7, #20]
	int j =0;
 800d366:	2300      	movs	r3, #0
 800d368:	613b      	str	r3, [r7, #16]
		printf("0x%02x|",data[i]);
	}
	printf("\n");
#endif

	for ( i = 0; i < len; i++)
 800d36a:	2300      	movs	r3, #0
 800d36c:	82bb      	strh	r3, [r7, #20]
 800d36e:	e022      	b.n	800d3b6 <Siemens_CRC+0x66>
	{
		crc ^= data[i];
 800d370:	8abb      	ldrh	r3, [r7, #20]
 800d372:	687a      	ldr	r2, [r7, #4]
 800d374:	4413      	add	r3, r2
 800d376:	781b      	ldrb	r3, [r3, #0]
 800d378:	b29a      	uxth	r2, r3
 800d37a:	8afb      	ldrh	r3, [r7, #22]
 800d37c:	4053      	eors	r3, r2
 800d37e:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d380:	2300      	movs	r3, #0
 800d382:	613b      	str	r3, [r7, #16]
 800d384:	e011      	b.n	800d3aa <Siemens_CRC+0x5a>
		{
			if (crc & 0x0001)
 800d386:	8afb      	ldrh	r3, [r7, #22]
 800d388:	f003 0301 	and.w	r3, r3, #1
 800d38c:	2b00      	cmp	r3, #0
 800d38e:	d006      	beq.n	800d39e <Siemens_CRC+0x4e>
			{
				crc = (crc >> 1) ^ 0x8408;
 800d390:	8afb      	ldrh	r3, [r7, #22]
 800d392:	085b      	lsrs	r3, r3, #1
 800d394:	b29a      	uxth	r2, r3
 800d396:	4b17      	ldr	r3, [pc, #92]	; (800d3f4 <Siemens_CRC+0xa4>)
 800d398:	4053      	eors	r3, r2
 800d39a:	82fb      	strh	r3, [r7, #22]
 800d39c:	e002      	b.n	800d3a4 <Siemens_CRC+0x54>
			}
			else
			{
				crc >>= 1;
 800d39e:	8afb      	ldrh	r3, [r7, #22]
 800d3a0:	085b      	lsrs	r3, r3, #1
 800d3a2:	82fb      	strh	r3, [r7, #22]
		for ( j = 0; j < 8; j++)
 800d3a4:	693b      	ldr	r3, [r7, #16]
 800d3a6:	3301      	adds	r3, #1
 800d3a8:	613b      	str	r3, [r7, #16]
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	2b07      	cmp	r3, #7
 800d3ae:	ddea      	ble.n	800d386 <Siemens_CRC+0x36>
	for ( i = 0; i < len; i++)
 800d3b0:	8abb      	ldrh	r3, [r7, #20]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	82bb      	strh	r3, [r7, #20]
 800d3b6:	8aba      	ldrh	r2, [r7, #20]
 800d3b8:	887b      	ldrh	r3, [r7, #2]
 800d3ba:	429a      	cmp	r2, r3
 800d3bc:	d3d8      	bcc.n	800d370 <Siemens_CRC+0x20>
			}
		}
	}

	crc_le[0] = crc & 0xFF;
 800d3be:	8afb      	ldrh	r3, [r7, #22]
 800d3c0:	b2db      	uxtb	r3, r3
 800d3c2:	733b      	strb	r3, [r7, #12]
	crc_le[1] = (crc >> 8) & 0xFF;
 800d3c4:	8afb      	ldrh	r3, [r7, #22]
 800d3c6:	0a1b      	lsrs	r3, r3, #8
 800d3c8:	b29b      	uxth	r3, r3
 800d3ca:	b2db      	uxtb	r3, r3
 800d3cc:	737b      	strb	r3, [r7, #13]
	//printf("Before Reverse 1:0x%02x|0x%02x\n",crc_le[0],crc_le[1]);



	crc = crc_le[0] << 8 | crc_le[1]; // reverse CRC bytes
 800d3ce:	7b3b      	ldrb	r3, [r7, #12]
 800d3d0:	021b      	lsls	r3, r3, #8
 800d3d2:	b21a      	sxth	r2, r3
 800d3d4:	7b7b      	ldrb	r3, [r7, #13]
 800d3d6:	b21b      	sxth	r3, r3
 800d3d8:	4313      	orrs	r3, r2
 800d3da:	b21b      	sxth	r3, r3
 800d3dc:	82fb      	strh	r3, [r7, #22]
	crc ^= 0xFFFF; // perform final XOR with 0xFFFF
 800d3de:	8afb      	ldrh	r3, [r7, #22]
 800d3e0:	43db      	mvns	r3, r3
 800d3e2:	82fb      	strh	r3, [r7, #22]
	//printf("Before Reverse 2:0x%02x\n",crc);


	// crc = crc_le[1] << 8 | crc_le[0]; // reverse CRC bytes
	// crc ^= 0xFFFF; // perform final XOR with 0xFFFF
	return crc;
 800d3e4:	8afb      	ldrh	r3, [r7, #22]
}
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	371c      	adds	r7, #28
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3f0:	4770      	bx	lr
 800d3f2:	bf00      	nop
 800d3f4:	ffff8408 	.word	0xffff8408

0800d3f8 <Extract_Parity_Data>:


int32_t Extract_Parity_Data(uint8_t Start,uint8_t No_of_Bits,uint8_t *DataIn,uint8_t Parity_Type)
{
 800d3f8:	b580      	push	{r7, lr}
 800d3fa:	b086      	sub	sp, #24
 800d3fc:	af00      	add	r7, sp, #0
 800d3fe:	603a      	str	r2, [r7, #0]
 800d400:	461a      	mov	r2, r3
 800d402:	4603      	mov	r3, r0
 800d404:	71fb      	strb	r3, [r7, #7]
 800d406:	460b      	mov	r3, r1
 800d408:	71bb      	strb	r3, [r7, #6]
 800d40a:	4613      	mov	r3, r2
 800d40c:	717b      	strb	r3, [r7, #5]
	uint8_t Temp_val = 0,t1,t2,t3;
 800d40e:	2300      	movs	r3, #0
 800d410:	75fb      	strb	r3, [r7, #23]
	uint32_t Return_value = 0;
 800d412:	2300      	movs	r3, #0
 800d414:	613b      	str	r3, [r7, #16]

	if(Parity_Type != NO_PARITY)
 800d416:	797b      	ldrb	r3, [r7, #5]
 800d418:	2b02      	cmp	r3, #2
 800d41a:	d010      	beq.n	800d43e <Extract_Parity_Data+0x46>
	{
		if(Verify_parity(DataIn,(No_of_Bits/8),Parity_Type)==0)
 800d41c:	79bb      	ldrb	r3, [r7, #6]
 800d41e:	08db      	lsrs	r3, r3, #3
 800d420:	b2db      	uxtb	r3, r3
 800d422:	797a      	ldrb	r2, [r7, #5]
 800d424:	4619      	mov	r1, r3
 800d426:	6838      	ldr	r0, [r7, #0]
 800d428:	f000 f8d0 	bl	800d5cc <Verify_parity>
 800d42c:	4603      	mov	r3, r0
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d110      	bne.n	800d454 <Extract_Parity_Data+0x5c>
		{
			printf("Parity Verfication Failed\n");
 800d432:	4840      	ldr	r0, [pc, #256]	; (800d534 <Extract_Parity_Data+0x13c>)
 800d434:	f014 ffd6 	bl	80223e4 <puts>
			return -1;
 800d438:	f04f 33ff 	mov.w	r3, #4294967295
 800d43c:	e075      	b.n	800d52a <Extract_Parity_Data+0x132>
			//printf("Parity Verfication Success\n");
		}
	}
	else
	{
		Return_value = ExtractBits(Start,No_of_Bits,DataIn);
 800d43e:	79fb      	ldrb	r3, [r7, #7]
 800d440:	b29b      	uxth	r3, r3
 800d442:	79ba      	ldrb	r2, [r7, #6]
 800d444:	b291      	uxth	r1, r2
 800d446:	683a      	ldr	r2, [r7, #0]
 800d448:	4618      	mov	r0, r3
 800d44a:	f7f3 f8e3 	bl	8000614 <ExtractBits>
 800d44e:	6138      	str	r0, [r7, #16]
		return Return_value;
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	e06a      	b.n	800d52a <Extract_Parity_Data+0x132>
	}



	if(No_of_Bits==8)
 800d454:	79bb      	ldrb	r3, [r7, #6]
 800d456:	2b08      	cmp	r3, #8
 800d458:	d108      	bne.n	800d46c <Extract_Parity_Data+0x74>
	{
		//printf("Data:0x%02x\n",DataIn[0]);
		Temp_val = DataIn[0];
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	781b      	ldrb	r3, [r3, #0]
 800d45e:	75fb      	strb	r3, [r7, #23]
		Temp_val &= ~(1<<7);
 800d460:	7dfb      	ldrb	r3, [r7, #23]
 800d462:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d466:	75fb      	strb	r3, [r7, #23]
		return (Temp_val);
 800d468:	7dfb      	ldrb	r3, [r7, #23]
 800d46a:	e05e      	b.n	800d52a <Extract_Parity_Data+0x132>
	}
	else if(No_of_Bits==24)
 800d46c:	79bb      	ldrb	r3, [r7, #6]
 800d46e:	2b18      	cmp	r3, #24
 800d470:	d15a      	bne.n	800d528 <Extract_Parity_Data+0x130>
	{
		//printf("24 bit extraction\n");
		Temp_val = DataIn[0];
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[0]);
		t1 = ((Temp_val>>0)&1); //copy of 0th bit
 800d478:	7dfb      	ldrb	r3, [r7, #23]
 800d47a:	f003 0301 	and.w	r3, r3, #1
 800d47e:	73fb      	strb	r3, [r7, #15]
		t2 = ((Temp_val>>1)&1); //copy of 1st bit
 800d480:	7dfb      	ldrb	r3, [r7, #23]
 800d482:	085b      	lsrs	r3, r3, #1
 800d484:	b2db      	uxtb	r3, r3
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	73bb      	strb	r3, [r7, #14]
		Temp_val &= ~(1<<7); //clearing 7th bit
 800d48c:	7dfb      	ldrb	r3, [r7, #23]
 800d48e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d492:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=2; //Shift two times.
 800d494:	7dfb      	ldrb	r3, [r7, #23]
 800d496:	089b      	lsrs	r3, r3, #2
 800d498:	75fb      	strb	r3, [r7, #23]
		//printf("Temp:0x%02x\n",Temp_val);
		Return_value = Temp_val;
 800d49a:	7dfb      	ldrb	r3, [r7, #23]
 800d49c:	613b      	str	r3, [r7, #16]

		Temp_val = DataIn[1];
 800d49e:	683b      	ldr	r3, [r7, #0]
 800d4a0:	785b      	ldrb	r3, [r3, #1]
 800d4a2:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[1]);
		t3 = ((Temp_val>>0)&1);//copy of 0th bit.
 800d4a4:	7dfb      	ldrb	r3, [r7, #23]
 800d4a6:	f003 0301 	and.w	r3, r3, #1
 800d4aa:	737b      	strb	r3, [r7, #13]
		Temp_val &= ~(1<<7); //clearing 7th bit.
 800d4ac:	7dfb      	ldrb	r3, [r7, #23]
 800d4ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4b2:	75fb      	strb	r3, [r7, #23]
		Temp_val>>=1; //Shift one time.
 800d4b4:	7dfb      	ldrb	r3, [r7, #23]
 800d4b6:	085b      	lsrs	r3, r3, #1
 800d4b8:	75fb      	strb	r3, [r7, #23]

		(t2==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d4ba:	7bbb      	ldrb	r3, [r7, #14]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d104      	bne.n	800d4ca <Extract_Parity_Data+0xd2>
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d4c6:	75fb      	strb	r3, [r7, #23]
 800d4c8:	e003      	b.n	800d4d2 <Extract_Parity_Data+0xda>
 800d4ca:	7dfb      	ldrb	r3, [r7, #23]
 800d4cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d4d0:	75fb      	strb	r3, [r7, #23]
		(t1==0)?(Temp_val &= ~(1 << 6)):(Temp_val|= 1 << 6);//copying Previous bit
 800d4d2:	7bfb      	ldrb	r3, [r7, #15]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d104      	bne.n	800d4e2 <Extract_Parity_Data+0xea>
 800d4d8:	7dfb      	ldrb	r3, [r7, #23]
 800d4da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4de:	75fb      	strb	r3, [r7, #23]
 800d4e0:	e003      	b.n	800d4ea <Extract_Parity_Data+0xf2>
 800d4e2:	7dfb      	ldrb	r3, [r7, #23]
 800d4e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4e8:	75fb      	strb	r3, [r7, #23]
		//printf("Temp2:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d4ea:	693b      	ldr	r3, [r7, #16]
 800d4ec:	021b      	lsls	r3, r3, #8
 800d4ee:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d4f0:	7dfb      	ldrb	r3, [r7, #23]
 800d4f2:	693a      	ldr	r2, [r7, #16]
 800d4f4:	4413      	add	r3, r2
 800d4f6:	613b      	str	r3, [r7, #16]


		Temp_val = DataIn[2];
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	789b      	ldrb	r3, [r3, #2]
 800d4fc:	75fb      	strb	r3, [r7, #23]
		//printf("Data:0x%02x\n",DataIn[2]);
		(t3==0)?(Temp_val &= ~(1 << 7)):(Temp_val|= 1 << 7);//copying Previous bit
 800d4fe:	7b7b      	ldrb	r3, [r7, #13]
 800d500:	2b00      	cmp	r3, #0
 800d502:	d104      	bne.n	800d50e <Extract_Parity_Data+0x116>
 800d504:	7dfb      	ldrb	r3, [r7, #23]
 800d506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d50a:	75fb      	strb	r3, [r7, #23]
 800d50c:	e003      	b.n	800d516 <Extract_Parity_Data+0x11e>
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
 800d510:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d514:	75fb      	strb	r3, [r7, #23]
		//printf("Temp3:0x%02x\n",Temp_val);
		Return_value<<=8;
 800d516:	693b      	ldr	r3, [r7, #16]
 800d518:	021b      	lsls	r3, r3, #8
 800d51a:	613b      	str	r3, [r7, #16]
		Return_value+=Temp_val;
 800d51c:	7dfb      	ldrb	r3, [r7, #23]
 800d51e:	693a      	ldr	r2, [r7, #16]
 800d520:	4413      	add	r3, r2
 800d522:	613b      	str	r3, [r7, #16]
		//printf("Data:0x%02x\n",DataIn[2]);
		//printf("Data:0x%02x\n",DataIn[1]);
		//printf("Data:0x%02x\n",DataIn[0]);
		return Return_value;
 800d524:	693b      	ldr	r3, [r7, #16]
 800d526:	e000      	b.n	800d52a <Extract_Parity_Data+0x132>
	}
	return 0;
 800d528:	2300      	movs	r3, #0
}
 800d52a:	4618      	mov	r0, r3
 800d52c:	3718      	adds	r7, #24
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd80      	pop	{r7, pc}
 800d532:	bf00      	nop
 800d534:	08025fdc 	.word	0x08025fdc

0800d538 <Calculate_Parity>:

uint8_t Calculate_Parity(uint8_t Buff, uint8_t Parity_Type)
{
 800d538:	b480      	push	{r7}
 800d53a:	b085      	sub	sp, #20
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	4603      	mov	r3, r0
 800d540:	460a      	mov	r2, r1
 800d542:	71fb      	strb	r3, [r7, #7]
 800d544:	4613      	mov	r3, r2
 800d546:	71bb      	strb	r3, [r7, #6]
	int8_t bit = 0;
 800d548:	2300      	movs	r3, #0
 800d54a:	73fb      	strb	r3, [r7, #15]
	int8_t count = 0;
 800d54c:	2300      	movs	r3, #0
 800d54e:	73bb      	strb	r3, [r7, #14]

	// printf("For Value:0x%02x\n", Buff);
	for (bit = 6; bit >= 0; bit--)
 800d550:	2306      	movs	r3, #6
 800d552:	73fb      	strb	r3, [r7, #15]
 800d554:	e014      	b.n	800d580 <Calculate_Parity+0x48>
	{
		//printf("[%02u]:%u| ", bit, ((Buff >> bit) & 1));
		if ((Buff >> bit) & 1)
 800d556:	79fa      	ldrb	r2, [r7, #7]
 800d558:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d55c:	fa42 f303 	asr.w	r3, r2, r3
 800d560:	f003 0301 	and.w	r3, r3, #1
 800d564:	2b00      	cmp	r3, #0
 800d566:	d005      	beq.n	800d574 <Calculate_Parity+0x3c>
		{
			count++;
 800d568:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	3301      	adds	r3, #1
 800d570:	b2db      	uxtb	r3, r3
 800d572:	73bb      	strb	r3, [r7, #14]
	for (bit = 6; bit >= 0; bit--)
 800d574:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d578:	b2db      	uxtb	r3, r3
 800d57a:	3b01      	subs	r3, #1
 800d57c:	b2db      	uxtb	r3, r3
 800d57e:	73fb      	strb	r3, [r7, #15]
 800d580:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d584:	2b00      	cmp	r3, #0
 800d586:	dae6      	bge.n	800d556 <Calculate_Parity+0x1e>
		}
	}
	//printf("\n");
	if (Parity_Type == 0)
 800d588:	79bb      	ldrb	r3, [r7, #6]
 800d58a:	2b00      	cmp	r3, #0
 800d58c:	d109      	bne.n	800d5a2 <Calculate_Parity+0x6a>
	{
		if ((count % 2) == 0)
 800d58e:	7bbb      	ldrb	r3, [r7, #14]
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	b2db      	uxtb	r3, r3
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <Calculate_Parity+0x66>
		{
			return 0;
 800d59a:	2300      	movs	r3, #0
 800d59c:	e00f      	b.n	800d5be <Calculate_Parity+0x86>
		}
		else
		{
			return 1;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	e00d      	b.n	800d5be <Calculate_Parity+0x86>
		}
	}
	if (Parity_Type == 1)
 800d5a2:	79bb      	ldrb	r3, [r7, #6]
 800d5a4:	2b01      	cmp	r3, #1
 800d5a6:	d109      	bne.n	800d5bc <Calculate_Parity+0x84>
	{
		if ((count % 2) == 0)
 800d5a8:	7bbb      	ldrb	r3, [r7, #14]
 800d5aa:	f003 0301 	and.w	r3, r3, #1
 800d5ae:	b2db      	uxtb	r3, r3
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d101      	bne.n	800d5b8 <Calculate_Parity+0x80>
		{
			return 1;
 800d5b4:	2301      	movs	r3, #1
 800d5b6:	e002      	b.n	800d5be <Calculate_Parity+0x86>
		}
		else
		{
			return 0;
 800d5b8:	2300      	movs	r3, #0
 800d5ba:	e000      	b.n	800d5be <Calculate_Parity+0x86>
		}
	}
	return 0;
 800d5bc:	2300      	movs	r3, #0
}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	3714      	adds	r7, #20
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c8:	4770      	bx	lr
	...

0800d5cc <Verify_parity>:

uint8_t Verify_parity(uint8_t *Data,uint8_t Length,uint8_t Parity_Type)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	460b      	mov	r3, r1
 800d5d6:	70fb      	strb	r3, [r7, #3]
 800d5d8:	4613      	mov	r3, r2
 800d5da:	70bb      	strb	r3, [r7, #2]
	uint8_t Byte_Traverser = 0;
 800d5dc:	2300      	movs	r3, #0
 800d5de:	73fb      	strb	r3, [r7, #15]

	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800d5e0:	2300      	movs	r3, #0
 800d5e2:	73fb      	strb	r3, [r7, #15]
 800d5e4:	e03b      	b.n	800d65e <Verify_parity+0x92>
	{
		if( (Calculate_Parity(Data[Byte_Traverser],Parity_Type)) != ((Data[Byte_Traverser]>>7)&1))
 800d5e6:	7bfb      	ldrb	r3, [r7, #15]
 800d5e8:	687a      	ldr	r2, [r7, #4]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	78ba      	ldrb	r2, [r7, #2]
 800d5f0:	4611      	mov	r1, r2
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	f7ff ffa0 	bl	800d538 <Calculate_Parity>
 800d5f8:	4603      	mov	r3, r0
 800d5fa:	4619      	mov	r1, r3
 800d5fc:	7bfb      	ldrb	r3, [r7, #15]
 800d5fe:	687a      	ldr	r2, [r7, #4]
 800d600:	4413      	add	r3, r2
 800d602:	781b      	ldrb	r3, [r3, #0]
 800d604:	09db      	lsrs	r3, r3, #7
 800d606:	b2db      	uxtb	r3, r3
 800d608:	f003 0301 	and.w	r3, r3, #1
 800d60c:	4299      	cmp	r1, r3
 800d60e:	d023      	beq.n	800d658 <Verify_parity+0x8c>
		{
			printf("Failed for data:0x%02x\n",Data[Byte_Traverser]);
 800d610:	7bfb      	ldrb	r3, [r7, #15]
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	4413      	add	r3, r2
 800d616:	781b      	ldrb	r3, [r3, #0]
 800d618:	4619      	mov	r1, r3
 800d61a:	4815      	ldr	r0, [pc, #84]	; (800d670 <Verify_parity+0xa4>)
 800d61c:	f014 fe46 	bl	80222ac <iprintf>
			printf("Expected Parity:%u\n",Calculate_Parity(Data[Byte_Traverser],Parity_Type));
 800d620:	7bfb      	ldrb	r3, [r7, #15]
 800d622:	687a      	ldr	r2, [r7, #4]
 800d624:	4413      	add	r3, r2
 800d626:	781b      	ldrb	r3, [r3, #0]
 800d628:	78ba      	ldrb	r2, [r7, #2]
 800d62a:	4611      	mov	r1, r2
 800d62c:	4618      	mov	r0, r3
 800d62e:	f7ff ff83 	bl	800d538 <Calculate_Parity>
 800d632:	4603      	mov	r3, r0
 800d634:	4619      	mov	r1, r3
 800d636:	480f      	ldr	r0, [pc, #60]	; (800d674 <Verify_parity+0xa8>)
 800d638:	f014 fe38 	bl	80222ac <iprintf>
			printf("Available Parity:%u\n",((Data[Byte_Traverser]>>7)&1));
 800d63c:	7bfb      	ldrb	r3, [r7, #15]
 800d63e:	687a      	ldr	r2, [r7, #4]
 800d640:	4413      	add	r3, r2
 800d642:	781b      	ldrb	r3, [r3, #0]
 800d644:	09db      	lsrs	r3, r3, #7
 800d646:	b2db      	uxtb	r3, r3
 800d648:	f003 0301 	and.w	r3, r3, #1
 800d64c:	4619      	mov	r1, r3
 800d64e:	480a      	ldr	r0, [pc, #40]	; (800d678 <Verify_parity+0xac>)
 800d650:	f014 fe2c 	bl	80222ac <iprintf>
			return 0;
 800d654:	2300      	movs	r3, #0
 800d656:	e007      	b.n	800d668 <Verify_parity+0x9c>
	for(Byte_Traverser= 0; Byte_Traverser < Length; ++Byte_Traverser)
 800d658:	7bfb      	ldrb	r3, [r7, #15]
 800d65a:	3301      	adds	r3, #1
 800d65c:	73fb      	strb	r3, [r7, #15]
 800d65e:	7bfa      	ldrb	r2, [r7, #15]
 800d660:	78fb      	ldrb	r3, [r7, #3]
 800d662:	429a      	cmp	r2, r3
 800d664:	d3bf      	bcc.n	800d5e6 <Verify_parity+0x1a>
		}
	}
	return 1;
 800d666:	2301      	movs	r3, #1
}
 800d668:	4618      	mov	r0, r3
 800d66a:	3710      	adds	r7, #16
 800d66c:	46bd      	mov	sp, r7
 800d66e:	bd80      	pop	{r7, pc}
 800d670:	08025ff8 	.word	0x08025ff8
 800d674:	08026010 	.word	0x08026010
 800d678:	08026024 	.word	0x08026024

0800d67c <Insert_cal_parity>:


void Insert_cal_parity(uint8_t start, uint8_t No_of_Bits, uint8_t *Dest_Buff, uint64_t DataIn, uint8_t Parity_Type)
{
 800d67c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d680:	b089      	sub	sp, #36	; 0x24
 800d682:	af00      	add	r7, sp, #0
 800d684:	4603      	mov	r3, r0
 800d686:	60ba      	str	r2, [r7, #8]
 800d688:	73fb      	strb	r3, [r7, #15]
 800d68a:	460b      	mov	r3, r1
 800d68c:	73bb      	strb	r3, [r7, #14]
	uint16_t t1 = 0, t2 = 0, t3 = 0, t4 = 0;
 800d68e:	2300      	movs	r3, #0
 800d690:	83fb      	strh	r3, [r7, #30]
 800d692:	2300      	movs	r3, #0
 800d694:	83bb      	strh	r3, [r7, #28]
 800d696:	2300      	movs	r3, #0
 800d698:	833b      	strh	r3, [r7, #24]
 800d69a:	2300      	movs	r3, #0
 800d69c:	82fb      	strh	r3, [r7, #22]
	uint8_t Temp_Data = 0;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	76fb      	strb	r3, [r7, #27]

	if(Parity_Type == NO_PARITY)
 800d6a2:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800d6a6:	2b02      	cmp	r3, #2
 800d6a8:	d108      	bne.n	800d6bc <Insert_cal_parity+0x40>
	{
		InsertBits(start,No_of_Bits,Dest_Buff,DataIn);
 800d6aa:	7bfb      	ldrb	r3, [r7, #15]
 800d6ac:	b298      	uxth	r0, r3
 800d6ae:	7bbb      	ldrb	r3, [r7, #14]
 800d6b0:	b299      	uxth	r1, r3
 800d6b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d6b4:	68ba      	ldr	r2, [r7, #8]
 800d6b6:	f7f3 f839 	bl	800072c <InsertBits>
		return;
 800d6ba:	e13b      	b.n	800d934 <Insert_cal_parity+0x2b8>
	}

	if (No_of_Bits == 8)
 800d6bc:	7bbb      	ldrb	r3, [r7, #14]
 800d6be:	2b08      	cmp	r3, #8
 800d6c0:	d12c      	bne.n	800d71c <Insert_cal_parity+0xa0>
	{
		// printf("One Byte Calculation\n");
		if (DataIn > 0x7f)
 800d6c2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d6c6:	2a80      	cmp	r2, #128	; 0x80
 800d6c8:	f173 0300 	sbcs.w	r3, r3, #0
 800d6cc:	d303      	bcc.n	800d6d6 <Insert_cal_parity+0x5a>
		{
			printf("Can't Insert Data as it is more than 7 Bits Length\n");
 800d6ce:	489b      	ldr	r0, [pc, #620]	; (800d93c <Insert_cal_parity+0x2c0>)
 800d6d0:	f014 fe88 	bl	80223e4 <puts>
			return;
 800d6d4:	e12e      	b.n	800d934 <Insert_cal_parity+0x2b8>
		}
		else
		{
			if (Calculate_Parity(DataIn, Parity_Type) == 1)
 800d6d6:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800d6da:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d6de:	4611      	mov	r1, r2
 800d6e0:	4618      	mov	r0, r3
 800d6e2:	f7ff ff29 	bl	800d538 <Calculate_Parity>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	2b01      	cmp	r3, #1
 800d6ea:	d10b      	bne.n	800d704 <Insert_cal_parity+0x88>
			{
				//printf("\nSET\n");
				Dest_Buff[0] = DataIn;
 800d6ec:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d6f0:	68bb      	ldr	r3, [r7, #8]
 800d6f2:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] |= 1 << 7;
 800d6f4:	68bb      	ldr	r3, [r7, #8]
 800d6f6:	781b      	ldrb	r3, [r3, #0]
 800d6f8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	701a      	strb	r2, [r3, #0]
 800d702:	e117      	b.n	800d934 <Insert_cal_parity+0x2b8>
			}
			else
			{
				//printf("\nCLEAR\n");
				Dest_Buff[0] = DataIn;
 800d704:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 800d708:	68bb      	ldr	r3, [r7, #8]
 800d70a:	701a      	strb	r2, [r3, #0]
				Dest_Buff[0] &= ~(1 << 7);
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	781b      	ldrb	r3, [r3, #0]
 800d710:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d714:	b2da      	uxtb	r2, r3
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	701a      	strb	r2, [r3, #0]
 800d71a:	e10b      	b.n	800d934 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else if (No_of_Bits == 24)
 800d71c:	7bbb      	ldrb	r3, [r7, #14]
 800d71e:	2b18      	cmp	r3, #24
 800d720:	f040 8104 	bne.w	800d92c <Insert_cal_parity+0x2b0>
	{
		// printf("Three Byte's Calculation\n");
		if (DataIn > 0x1fffff)
 800d724:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d728:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
 800d72c:	f173 0300 	sbcs.w	r3, r3, #0
 800d730:	d303      	bcc.n	800d73a <Insert_cal_parity+0xbe>
		{
			printf("Can't Insert Data as it is more than 21 Bits Length\n");
 800d732:	4883      	ldr	r0, [pc, #524]	; (800d940 <Insert_cal_parity+0x2c4>)
 800d734:	f014 fe56 	bl	80223e4 <puts>
			return;
 800d738:	e0fc      	b.n	800d934 <Insert_cal_parity+0x2b8>
		}
		else
		{
			uint8_t Byte_Traverser = 0;
 800d73a:	2300      	movs	r3, #0
 800d73c:	76bb      	strb	r3, [r7, #26]

			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800d73e:	2300      	movs	r3, #0
 800d740:	76bb      	strb	r3, [r7, #26]
 800d742:	e0ee      	b.n	800d922 <Insert_cal_parity+0x2a6>
			{
				Temp_Data = DataIn >> (((Byte_Traverser * 8)));
 800d744:	7ebb      	ldrb	r3, [r7, #26]
 800d746:	00d9      	lsls	r1, r3, #3
 800d748:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d74c:	f1c1 0620 	rsb	r6, r1, #32
 800d750:	f1a1 0c20 	sub.w	ip, r1, #32
 800d754:	fa22 f001 	lsr.w	r0, r2, r1
 800d758:	6038      	str	r0, [r7, #0]
 800d75a:	fa03 f606 	lsl.w	r6, r3, r6
 800d75e:	6838      	ldr	r0, [r7, #0]
 800d760:	4330      	orrs	r0, r6
 800d762:	6038      	str	r0, [r7, #0]
 800d764:	fa23 fc0c 	lsr.w	ip, r3, ip
 800d768:	6838      	ldr	r0, [r7, #0]
 800d76a:	ea40 000c 	orr.w	r0, r0, ip
 800d76e:	6038      	str	r0, [r7, #0]
 800d770:	40cb      	lsrs	r3, r1
 800d772:	607b      	str	r3, [r7, #4]
 800d774:	783b      	ldrb	r3, [r7, #0]
 800d776:	76fb      	strb	r3, [r7, #27]
				// printf("#Temp_Data:0x%02x\n",Temp_Data);
				switch (Byte_Traverser)
 800d778:	7ebb      	ldrb	r3, [r7, #26]
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d07a      	beq.n	800d874 <Insert_cal_parity+0x1f8>
 800d77e:	2b02      	cmp	r3, #2
 800d780:	f300 8094 	bgt.w	800d8ac <Insert_cal_parity+0x230>
 800d784:	2b00      	cmp	r3, #0
 800d786:	d002      	beq.n	800d78e <Insert_cal_parity+0x112>
 800d788:	2b01      	cmp	r3, #1
 800d78a:	d01f      	beq.n	800d7cc <Insert_cal_parity+0x150>
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
					//printf("Temp_Data:%u\n",Temp_Data);
					break;
				default:
					break;
 800d78c:	e08e      	b.n	800d8ac <Insert_cal_parity+0x230>
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800d78e:	7ebb      	ldrb	r3, [r7, #26]
 800d790:	00d9      	lsls	r1, r3, #3
 800d792:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d796:	f1c1 0620 	rsb	r6, r1, #32
 800d79a:	f1a1 0020 	sub.w	r0, r1, #32
 800d79e:	fa22 f401 	lsr.w	r4, r2, r1
 800d7a2:	fa03 f606 	lsl.w	r6, r3, r6
 800d7a6:	4334      	orrs	r4, r6
 800d7a8:	fa23 f000 	lsr.w	r0, r3, r0
 800d7ac:	4304      	orrs	r4, r0
 800d7ae:	fa23 f501 	lsr.w	r5, r3, r1
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	f04f 0300 	mov.w	r3, #0
 800d7ba:	09e2      	lsrs	r2, r4, #7
 800d7bc:	ea42 6245 	orr.w	r2, r2, r5, lsl #25
 800d7c0:	09eb      	lsrs	r3, r5, #7
 800d7c2:	b293      	uxth	r3, r2
 800d7c4:	f003 0301 	and.w	r3, r3, #1
 800d7c8:	83fb      	strh	r3, [r7, #30]
					break;
 800d7ca:	e070      	b.n	800d8ae <Insert_cal_parity+0x232>
					Temp_Data<<=1; //Shifting data by 1 bit
 800d7cc:	7efb      	ldrb	r3, [r7, #27]
 800d7ce:	005b      	lsls	r3, r3, #1
 800d7d0:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800d7d2:	8bfb      	ldrh	r3, [r7, #30]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d104      	bne.n	800d7e2 <Insert_cal_parity+0x166>
 800d7d8:	7efb      	ldrb	r3, [r7, #27]
 800d7da:	f023 0301 	bic.w	r3, r3, #1
 800d7de:	76fb      	strb	r3, [r7, #27]
 800d7e0:	e003      	b.n	800d7ea <Insert_cal_parity+0x16e>
 800d7e2:	7efb      	ldrb	r3, [r7, #27]
 800d7e4:	f043 0301 	orr.w	r3, r3, #1
 800d7e8:	76fb      	strb	r3, [r7, #27]
					t1 = (((DataIn >> (((Byte_Traverser * 8)))) >> 7) & 1);
 800d7ea:	7ebb      	ldrb	r3, [r7, #26]
 800d7ec:	00d9      	lsls	r1, r3, #3
 800d7ee:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d7f2:	f1c1 0620 	rsb	r6, r1, #32
 800d7f6:	f1a1 0020 	sub.w	r0, r1, #32
 800d7fa:	fa22 f801 	lsr.w	r8, r2, r1
 800d7fe:	fa03 f606 	lsl.w	r6, r3, r6
 800d802:	ea48 0806 	orr.w	r8, r8, r6
 800d806:	fa23 f000 	lsr.w	r0, r3, r0
 800d80a:	ea48 0800 	orr.w	r8, r8, r0
 800d80e:	fa23 f901 	lsr.w	r9, r3, r1
 800d812:	f04f 0200 	mov.w	r2, #0
 800d816:	f04f 0300 	mov.w	r3, #0
 800d81a:	ea4f 12d8 	mov.w	r2, r8, lsr #7
 800d81e:	ea42 6249 	orr.w	r2, r2, r9, lsl #25
 800d822:	ea4f 13d9 	mov.w	r3, r9, lsr #7
 800d826:	b293      	uxth	r3, r2
 800d828:	f003 0301 	and.w	r3, r3, #1
 800d82c:	83fb      	strh	r3, [r7, #30]
					t2 = (((DataIn >> (((Byte_Traverser * 8)))) >> 6) & 1);
 800d82e:	7ebb      	ldrb	r3, [r7, #26]
 800d830:	00d9      	lsls	r1, r3, #3
 800d832:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800d836:	f1c1 0620 	rsb	r6, r1, #32
 800d83a:	f1a1 0020 	sub.w	r0, r1, #32
 800d83e:	fa22 fa01 	lsr.w	sl, r2, r1
 800d842:	fa03 f606 	lsl.w	r6, r3, r6
 800d846:	ea4a 0a06 	orr.w	sl, sl, r6
 800d84a:	fa23 f000 	lsr.w	r0, r3, r0
 800d84e:	ea4a 0a00 	orr.w	sl, sl, r0
 800d852:	fa23 fb01 	lsr.w	fp, r3, r1
 800d856:	f04f 0200 	mov.w	r2, #0
 800d85a:	f04f 0300 	mov.w	r3, #0
 800d85e:	ea4f 129a 	mov.w	r2, sl, lsr #6
 800d862:	ea42 628b 	orr.w	r2, r2, fp, lsl #26
 800d866:	ea4f 139b 	mov.w	r3, fp, lsr #6
 800d86a:	b293      	uxth	r3, r2
 800d86c:	f003 0301 	and.w	r3, r3, #1
 800d870:	83bb      	strh	r3, [r7, #28]
					break;
 800d872:	e01c      	b.n	800d8ae <Insert_cal_parity+0x232>
					Temp_Data<<=2; //Shifting data by 2 bit
 800d874:	7efb      	ldrb	r3, [r7, #27]
 800d876:	009b      	lsls	r3, r3, #2
 800d878:	76fb      	strb	r3, [r7, #27]
					(t2==0)?(Temp_Data &= ~(1 << 0)):(Temp_Data|= 1 << 0);//copying Previous bit
 800d87a:	8bbb      	ldrh	r3, [r7, #28]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d104      	bne.n	800d88a <Insert_cal_parity+0x20e>
 800d880:	7efb      	ldrb	r3, [r7, #27]
 800d882:	f023 0301 	bic.w	r3, r3, #1
 800d886:	76fb      	strb	r3, [r7, #27]
 800d888:	e003      	b.n	800d892 <Insert_cal_parity+0x216>
 800d88a:	7efb      	ldrb	r3, [r7, #27]
 800d88c:	f043 0301 	orr.w	r3, r3, #1
 800d890:	76fb      	strb	r3, [r7, #27]
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800d892:	8bfb      	ldrh	r3, [r7, #30]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d104      	bne.n	800d8a2 <Insert_cal_parity+0x226>
 800d898:	7efb      	ldrb	r3, [r7, #27]
 800d89a:	f023 0302 	bic.w	r3, r3, #2
 800d89e:	76fb      	strb	r3, [r7, #27]
					break;
 800d8a0:	e005      	b.n	800d8ae <Insert_cal_parity+0x232>
					(t1==0)?(Temp_Data &= ~(1 << 1)):(Temp_Data|= 1 << 1);//copying Previous bit
 800d8a2:	7efb      	ldrb	r3, [r7, #27]
 800d8a4:	f043 0302 	orr.w	r3, r3, #2
 800d8a8:	76fb      	strb	r3, [r7, #27]
					break;
 800d8aa:	e000      	b.n	800d8ae <Insert_cal_parity+0x232>
					break;
 800d8ac:	bf00      	nop
				}
				//if (Calculate_Parity(DataIn >> ((16 - (Byte_Traverser * 8))), Parity_Type) == 1)
				if (Calculate_Parity(Temp_Data, Parity_Type) == 1)
 800d8ae:	f897 2050 	ldrb.w	r2, [r7, #80]	; 0x50
 800d8b2:	7efb      	ldrb	r3, [r7, #27]
 800d8b4:	4611      	mov	r1, r2
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	f7ff fe3e 	bl	800d538 <Calculate_Parity>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	2b01      	cmp	r3, #1
 800d8c0:	d116      	bne.n	800d8f0 <Insert_cal_parity+0x274>
				{
					// printf("SET\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800d8c2:	7ebb      	ldrb	r3, [r7, #26]
 800d8c4:	f1c3 0302 	rsb	r3, r3, #2
 800d8c8:	68ba      	ldr	r2, [r7, #8]
 800d8ca:	4413      	add	r3, r2
 800d8cc:	7efa      	ldrb	r2, [r7, #27]
 800d8ce:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3- Byte_Traverser-1] |= 1 << 7;
 800d8d0:	7ebb      	ldrb	r3, [r7, #26]
 800d8d2:	f1c3 0302 	rsb	r3, r3, #2
 800d8d6:	68ba      	ldr	r2, [r7, #8]
 800d8d8:	4413      	add	r3, r2
 800d8da:	781a      	ldrb	r2, [r3, #0]
 800d8dc:	7ebb      	ldrb	r3, [r7, #26]
 800d8de:	f1c3 0302 	rsb	r3, r3, #2
 800d8e2:	68b9      	ldr	r1, [r7, #8]
 800d8e4:	440b      	add	r3, r1
 800d8e6:	f062 027f 	orn	r2, r2, #127	; 0x7f
 800d8ea:	b2d2      	uxtb	r2, r2
 800d8ec:	701a      	strb	r2, [r3, #0]
 800d8ee:	e015      	b.n	800d91c <Insert_cal_parity+0x2a0>
				}
				else
				{
					// printf("CLEAR\n");
					//Dest_Buff[Byte_Traverser] = DataIn >> ((16 - (Byte_Traverser * 8)));
					Dest_Buff[3- Byte_Traverser-1] = Temp_Data;
 800d8f0:	7ebb      	ldrb	r3, [r7, #26]
 800d8f2:	f1c3 0302 	rsb	r3, r3, #2
 800d8f6:	68ba      	ldr	r2, [r7, #8]
 800d8f8:	4413      	add	r3, r2
 800d8fa:	7efa      	ldrb	r2, [r7, #27]
 800d8fc:	701a      	strb	r2, [r3, #0]
					Dest_Buff[3 -Byte_Traverser-1] &= ~(1 << 7);
 800d8fe:	7ebb      	ldrb	r3, [r7, #26]
 800d900:	f1c3 0302 	rsb	r3, r3, #2
 800d904:	68ba      	ldr	r2, [r7, #8]
 800d906:	4413      	add	r3, r2
 800d908:	781a      	ldrb	r2, [r3, #0]
 800d90a:	7ebb      	ldrb	r3, [r7, #26]
 800d90c:	f1c3 0302 	rsb	r3, r3, #2
 800d910:	68b9      	ldr	r1, [r7, #8]
 800d912:	440b      	add	r3, r1
 800d914:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800d918:	b2d2      	uxtb	r2, r2
 800d91a:	701a      	strb	r2, [r3, #0]
			for (Byte_Traverser = 0; Byte_Traverser < 3; Byte_Traverser++)
 800d91c:	7ebb      	ldrb	r3, [r7, #26]
 800d91e:	3301      	adds	r3, #1
 800d920:	76bb      	strb	r3, [r7, #26]
 800d922:	7ebb      	ldrb	r3, [r7, #26]
 800d924:	2b02      	cmp	r3, #2
 800d926:	f67f af0d 	bls.w	800d744 <Insert_cal_parity+0xc8>
 800d92a:	e003      	b.n	800d934 <Insert_cal_parity+0x2b8>
			}
		}
	}
	else
	{
		printf("Selection Wrong\n");
 800d92c:	4805      	ldr	r0, [pc, #20]	; (800d944 <Insert_cal_parity+0x2c8>)
 800d92e:	f014 fd59 	bl	80223e4 <puts>
		return;
 800d932:	bf00      	nop
	}
	UNUSED(t1);UNUSED(t2);UNUSED(t3);UNUSED(t4);
}
 800d934:	3724      	adds	r7, #36	; 0x24
 800d936:	46bd      	mov	sp, r7
 800d938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d93c:	0802603c 	.word	0x0802603c
 800d940:	08026070 	.word	0x08026070
 800d944:	080260a4 	.word	0x080260a4

0800d948 <Data_Compliment>:

uint16_t Data_Compliment(uint8_t *Buff,uint16_t Size,uint8_t Type)
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b084      	sub	sp, #16
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
 800d950:	460b      	mov	r3, r1
 800d952:	807b      	strh	r3, [r7, #2]
 800d954:	4613      	mov	r3, r2
 800d956:	707b      	strb	r3, [r7, #1]
	uint16_t Traverser = 0;
 800d958:	2300      	movs	r3, #0
 800d95a:	81fb      	strh	r3, [r7, #14]
	uint16_t Actual_Size = 0;
 800d95c:	2300      	movs	r3, #0
 800d95e:	81bb      	strh	r3, [r7, #12]

#if (SIEMENS_DEBUG==1)
	printf("Size:%u\n",Size);
#endif

	if(Type == VERIFY)
 800d960:	787b      	ldrb	r3, [r7, #1]
 800d962:	2b00      	cmp	r3, #0
 800d964:	d133      	bne.n	800d9ce <Data_Compliment+0x86>
	{
		Actual_Size = ((Size/2)-2);
 800d966:	887b      	ldrh	r3, [r7, #2]
 800d968:	085b      	lsrs	r3, r3, #1
 800d96a:	b29b      	uxth	r3, r3
 800d96c:	3b02      	subs	r3, #2
 800d96e:	81bb      	strh	r3, [r7, #12]
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800d970:	2300      	movs	r3, #0
 800d972:	81fb      	strh	r3, [r7, #14]
 800d974:	e025      	b.n	800d9c2 <Data_Compliment+0x7a>
		{
			// printf("0x%02x|Compliment:0x%02x\n",Buff[Traverser],Buff[Traverser+Actual_Size+2]);
			if(Buff[Traverser] != (uint8_t)~Buff[Traverser+Actual_Size+2])
 800d976:	89fb      	ldrh	r3, [r7, #14]
 800d978:	687a      	ldr	r2, [r7, #4]
 800d97a:	4413      	add	r3, r2
 800d97c:	781a      	ldrb	r2, [r3, #0]
 800d97e:	89f9      	ldrh	r1, [r7, #14]
 800d980:	89bb      	ldrh	r3, [r7, #12]
 800d982:	440b      	add	r3, r1
 800d984:	3302      	adds	r3, #2
 800d986:	6879      	ldr	r1, [r7, #4]
 800d988:	440b      	add	r3, r1
 800d98a:	781b      	ldrb	r3, [r3, #0]
 800d98c:	43db      	mvns	r3, r3
 800d98e:	b2db      	uxtb	r3, r3
 800d990:	429a      	cmp	r2, r3
 800d992:	d013      	beq.n	800d9bc <Data_Compliment+0x74>
			{
				printf("Compliment failed for DATA\n0x%02x|Compliment:0x%02x\n",Buff[Traverser],(uint8_t)~Buff[Traverser+Actual_Size+2]);
 800d994:	89fb      	ldrh	r3, [r7, #14]
 800d996:	687a      	ldr	r2, [r7, #4]
 800d998:	4413      	add	r3, r2
 800d99a:	781b      	ldrb	r3, [r3, #0]
 800d99c:	4619      	mov	r1, r3
 800d99e:	89fa      	ldrh	r2, [r7, #14]
 800d9a0:	89bb      	ldrh	r3, [r7, #12]
 800d9a2:	4413      	add	r3, r2
 800d9a4:	3302      	adds	r3, #2
 800d9a6:	687a      	ldr	r2, [r7, #4]
 800d9a8:	4413      	add	r3, r2
 800d9aa:	781b      	ldrb	r3, [r3, #0]
 800d9ac:	43db      	mvns	r3, r3
 800d9ae:	b2db      	uxtb	r3, r3
 800d9b0:	461a      	mov	r2, r3
 800d9b2:	481a      	ldr	r0, [pc, #104]	; (800da1c <Data_Compliment+0xd4>)
 800d9b4:	f014 fc7a 	bl	80222ac <iprintf>
				return 0;
 800d9b8:	2300      	movs	r3, #0
 800d9ba:	e02b      	b.n	800da14 <Data_Compliment+0xcc>
		for(Traverser = 0; Traverser < Actual_Size; ++Traverser)
 800d9bc:	89fb      	ldrh	r3, [r7, #14]
 800d9be:	3301      	adds	r3, #1
 800d9c0:	81fb      	strh	r3, [r7, #14]
 800d9c2:	89fa      	ldrh	r2, [r7, #14]
 800d9c4:	89bb      	ldrh	r3, [r7, #12]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d3d5      	bcc.n	800d976 <Data_Compliment+0x2e>
			}
		}
		return 1;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	e022      	b.n	800da14 <Data_Compliment+0xcc>
	}
	else if(Type == CONVERT)
 800d9ce:	787b      	ldrb	r3, [r7, #1]
 800d9d0:	2b01      	cmp	r3, #1
 800d9d2:	d11e      	bne.n	800da12 <Data_Compliment+0xca>
		{
			printf("0x%02x|",Buff[Traverser]);
		}
		printf("Compliment Data:\n");
#endif
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800d9d4:	2300      	movs	r3, #0
 800d9d6:	81fb      	strh	r3, [r7, #14]
 800d9d8:	e010      	b.n	800d9fc <Data_Compliment+0xb4>
		{
			Buff[Traverser+2+Size] = ~Buff[Traverser];
 800d9da:	89fb      	ldrh	r3, [r7, #14]
 800d9dc:	687a      	ldr	r2, [r7, #4]
 800d9de:	4413      	add	r3, r2
 800d9e0:	781a      	ldrb	r2, [r3, #0]
 800d9e2:	89fb      	ldrh	r3, [r7, #14]
 800d9e4:	1c99      	adds	r1, r3, #2
 800d9e6:	887b      	ldrh	r3, [r7, #2]
 800d9e8:	440b      	add	r3, r1
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	440b      	add	r3, r1
 800d9f0:	43d2      	mvns	r2, r2
 800d9f2:	b2d2      	uxtb	r2, r2
 800d9f4:	701a      	strb	r2, [r3, #0]
		for(Traverser = 0; Traverser <(Size); ++Traverser)
 800d9f6:	89fb      	ldrh	r3, [r7, #14]
 800d9f8:	3301      	adds	r3, #1
 800d9fa:	81fb      	strh	r3, [r7, #14]
 800d9fc:	89fa      	ldrh	r2, [r7, #14]
 800d9fe:	887b      	ldrh	r3, [r7, #2]
 800da00:	429a      	cmp	r2, r3
 800da02:	d3ea      	bcc.n	800d9da <Data_Compliment+0x92>
#if (SIEMENS_DEBUG==1)
			printf("0x%02x|",Buff[Traverser+2+Size]);
#endif
		}
		return (Traverser+Size+2);
 800da04:	89fa      	ldrh	r2, [r7, #14]
 800da06:	887b      	ldrh	r3, [r7, #2]
 800da08:	4413      	add	r3, r2
 800da0a:	b29b      	uxth	r3, r3
 800da0c:	3302      	adds	r3, #2
 800da0e:	b29b      	uxth	r3, r3
 800da10:	e000      	b.n	800da14 <Data_Compliment+0xcc>
	}
	return 0;
 800da12:	2300      	movs	r3, #0
}
 800da14:	4618      	mov	r0, r3
 800da16:	3710      	adds	r7, #16
 800da18:	46bd      	mov	sp, r7
 800da1a:	bd80      	pop	{r7, pc}
 800da1c:	080260b4 	.word	0x080260b4

0800da20 <CheckToSendReplyorNot>:

void CheckToSendReplyorNot(void)
{
 800da20:	b480      	push	{r7}
 800da22:	b083      	sub	sp, #12
 800da24:	af00      	add	r7, sp, #0
	uint8_t Value = 0;
 800da26:	2300      	movs	r3, #0
 800da28:	71fb      	strb	r3, [r7, #7]

	if(Tx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800da2a:	4b1a      	ldr	r3, [pc, #104]	; (800da94 <CheckToSendReplyorNot+0x74>)
 800da2c:	785b      	ldrb	r3, [r3, #1]
 800da2e:	2b01      	cmp	r3, #1
 800da30:	d104      	bne.n	800da3c <CheckToSendReplyorNot+0x1c>
	{
		SET_BIT_USER(0,Value);
 800da32:	79fb      	ldrb	r3, [r7, #7]
 800da34:	f043 0301 	orr.w	r3, r3, #1
 800da38:	71fb      	strb	r3, [r7, #7]
 800da3a:	e003      	b.n	800da44 <CheckToSendReplyorNot+0x24>
	}
	else
	{
		CLEAR_BIT_USER(0,Value);
 800da3c:	79fb      	ldrb	r3, [r7, #7]
 800da3e:	f023 0301 	bic.w	r3, r3, #1
 800da42:	71fb      	strb	r3, [r7, #7]
	}
	if(Rx_Siemens_self_sharing_st.MesgReceived == RECEIVED)
 800da44:	4b14      	ldr	r3, [pc, #80]	; (800da98 <CheckToSendReplyorNot+0x78>)
 800da46:	785b      	ldrb	r3, [r3, #1]
 800da48:	2b01      	cmp	r3, #1
 800da4a:	d104      	bne.n	800da56 <CheckToSendReplyorNot+0x36>
	{
		SET_BIT_USER(1,Value);
 800da4c:	79fb      	ldrb	r3, [r7, #7]
 800da4e:	f043 0302 	orr.w	r3, r3, #2
 800da52:	71fb      	strb	r3, [r7, #7]
 800da54:	e003      	b.n	800da5e <CheckToSendReplyorNot+0x3e>
	}
	else
	{
		CLEAR_BIT_USER(1,Value);
 800da56:	79fb      	ldrb	r3, [r7, #7]
 800da58:	f023 0302 	bic.w	r3, r3, #2
 800da5c:	71fb      	strb	r3, [r7, #7]
	}

	//	printf("Value:%u\n",Value);

	switch(Value)
 800da5e:	79fb      	ldrb	r3, [r7, #7]
 800da60:	2b02      	cmp	r3, #2
 800da62:	dc02      	bgt.n	800da6a <CheckToSendReplyorNot+0x4a>
 800da64:	2b00      	cmp	r3, #0
 800da66:	da03      	bge.n	800da70 <CheckToSendReplyorNot+0x50>
 800da68:	e00a      	b.n	800da80 <CheckToSendReplyorNot+0x60>
 800da6a:	2b03      	cmp	r3, #3
 800da6c:	d004      	beq.n	800da78 <CheckToSendReplyorNot+0x58>
 800da6e:	e007      	b.n	800da80 <CheckToSendReplyorNot+0x60>
	{
	case ZERO:
	case ONE:
	case TWO:
		SendReply = 1;
 800da70:	4b0a      	ldr	r3, [pc, #40]	; (800da9c <CheckToSendReplyorNot+0x7c>)
 800da72:	2201      	movs	r2, #1
 800da74:	701a      	strb	r2, [r3, #0]
		break;
 800da76:	e007      	b.n	800da88 <CheckToSendReplyorNot+0x68>
	case THREE:
#ifdef EI_1
		SendReply = 1;
#endif
#ifdef EI_2
		SendReply = 0;
 800da78:	4b08      	ldr	r3, [pc, #32]	; (800da9c <CheckToSendReplyorNot+0x7c>)
 800da7a:	2200      	movs	r2, #0
 800da7c:	701a      	strb	r2, [r3, #0]
#endif
		break;
 800da7e:	e003      	b.n	800da88 <CheckToSendReplyorNot+0x68>
	default:
		SendReply = 1;
 800da80:	4b06      	ldr	r3, [pc, #24]	; (800da9c <CheckToSendReplyorNot+0x7c>)
 800da82:	2201      	movs	r2, #1
 800da84:	701a      	strb	r2, [r3, #0]
		break;
 800da86:	bf00      	nop
	}

}
 800da88:	bf00      	nop
 800da8a:	370c      	adds	r7, #12
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr
 800da94:	20003478 	.word	0x20003478
 800da98:	2000347c 	.word	0x2000347c
 800da9c:	20004b99 	.word	0x20004b99

0800daa0 <PrintSignals>:



void PrintSignals(void)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
	memcpy(&VitalData2MIE_st.Relays,&SiemensMain_Relays_st.Relays,SiemensMain_Relays_st.NoofDataBytes);
 800daa6:	4b2d      	ldr	r3, [pc, #180]	; (800db5c <PrintSignals+0xbc>)
 800daa8:	881b      	ldrh	r3, [r3, #0]
 800daaa:	461a      	mov	r2, r3
 800daac:	492c      	ldr	r1, [pc, #176]	; (800db60 <PrintSignals+0xc0>)
 800daae:	482d      	ldr	r0, [pc, #180]	; (800db64 <PrintSignals+0xc4>)
 800dab0:	f014 faec 	bl	802208c <memcpy>

	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800dab4:	2301      	movs	r3, #1
 800dab6:	80fb      	strh	r3, [r7, #6]
 800dab8:	e045      	b.n	800db46 <PrintSignals+0xa6>
	{
		if(Traverser > TotalSigCount)
 800daba:	4b2b      	ldr	r3, [pc, #172]	; (800db68 <PrintSignals+0xc8>)
 800dabc:	881b      	ldrh	r3, [r3, #0]
 800dabe:	88fa      	ldrh	r2, [r7, #6]
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d83c      	bhi.n	800db3e <PrintSignals+0x9e>
		{
			continue;
		}

		if(GETPIN(Traverser) > 0)
 800dac4:	88fb      	ldrh	r3, [r7, #6]
 800dac6:	3b01      	subs	r3, #1
 800dac8:	2b00      	cmp	r3, #0
 800daca:	da00      	bge.n	800dace <PrintSignals+0x2e>
 800dacc:	3307      	adds	r3, #7
 800dace:	10db      	asrs	r3, r3, #3
 800dad0:	461a      	mov	r2, r3
 800dad2:	4b26      	ldr	r3, [pc, #152]	; (800db6c <PrintSignals+0xcc>)
 800dad4:	4413      	add	r3, r2
 800dad6:	789b      	ldrb	r3, [r3, #2]
 800dad8:	4619      	mov	r1, r3
 800dada:	88fb      	ldrh	r3, [r7, #6]
 800dadc:	3b01      	subs	r3, #1
 800dade:	425a      	negs	r2, r3
 800dae0:	f003 0307 	and.w	r3, r3, #7
 800dae4:	f002 0207 	and.w	r2, r2, #7
 800dae8:	bf58      	it	pl
 800daea:	4253      	negpl	r3, r2
 800daec:	2201      	movs	r2, #1
 800daee:	fa02 f303 	lsl.w	r3, r2, r3
 800daf2:	400b      	ands	r3, r1
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	dd0c      	ble.n	800db12 <PrintSignals+0x72>
		{
			printf("%15s:PICKUP   ",Signals[Traverser-1]);
 800daf8:	88fb      	ldrh	r3, [r7, #6]
 800dafa:	1e5a      	subs	r2, r3, #1
 800dafc:	4613      	mov	r3, r2
 800dafe:	009b      	lsls	r3, r3, #2
 800db00:	4413      	add	r3, r2
 800db02:	00db      	lsls	r3, r3, #3
 800db04:	4a1a      	ldr	r2, [pc, #104]	; (800db70 <PrintSignals+0xd0>)
 800db06:	4413      	add	r3, r2
 800db08:	4619      	mov	r1, r3
 800db0a:	481a      	ldr	r0, [pc, #104]	; (800db74 <PrintSignals+0xd4>)
 800db0c:	f014 fbce 	bl	80222ac <iprintf>
 800db10:	e00b      	b.n	800db2a <PrintSignals+0x8a>
		}
		else
		{
			printf("%15s:DROP      ",Signals[Traverser-1]);
 800db12:	88fb      	ldrh	r3, [r7, #6]
 800db14:	1e5a      	subs	r2, r3, #1
 800db16:	4613      	mov	r3, r2
 800db18:	009b      	lsls	r3, r3, #2
 800db1a:	4413      	add	r3, r2
 800db1c:	00db      	lsls	r3, r3, #3
 800db1e:	4a14      	ldr	r2, [pc, #80]	; (800db70 <PrintSignals+0xd0>)
 800db20:	4413      	add	r3, r2
 800db22:	4619      	mov	r1, r3
 800db24:	4814      	ldr	r0, [pc, #80]	; (800db78 <PrintSignals+0xd8>)
 800db26:	f014 fbc1 	bl	80222ac <iprintf>
		}

		if( (Traverser%2) == 0)
 800db2a:	88fb      	ldrh	r3, [r7, #6]
 800db2c:	f003 0301 	and.w	r3, r3, #1
 800db30:	b29b      	uxth	r3, r3
 800db32:	2b00      	cmp	r3, #0
 800db34:	d104      	bne.n	800db40 <PrintSignals+0xa0>
		{
			printf("\n");
 800db36:	200a      	movs	r0, #10
 800db38:	f014 fbd0 	bl	80222dc <putchar>
 800db3c:	e000      	b.n	800db40 <PrintSignals+0xa0>
			continue;
 800db3e:	bf00      	nop
	for(uint16_t Traverser = 1;Traverser<=(VitalData2MIE_st.NoofDataBytes * 8);++Traverser)
 800db40:	88fb      	ldrh	r3, [r7, #6]
 800db42:	3301      	adds	r3, #1
 800db44:	80fb      	strh	r3, [r7, #6]
 800db46:	88fa      	ldrh	r2, [r7, #6]
 800db48:	4b08      	ldr	r3, [pc, #32]	; (800db6c <PrintSignals+0xcc>)
 800db4a:	881b      	ldrh	r3, [r3, #0]
 800db4c:	00db      	lsls	r3, r3, #3
 800db4e:	429a      	cmp	r2, r3
 800db50:	ddb3      	ble.n	800daba <PrintSignals+0x1a>
		}
	}
}
 800db52:	bf00      	nop
 800db54:	bf00      	nop
 800db56:	3708      	adds	r7, #8
 800db58:	46bd      	mov	sp, r7
 800db5a:	bd80      	pop	{r7, pc}
 800db5c:	200036a4 	.word	0x200036a4
 800db60:	200036a8 	.word	0x200036a8
 800db64:	200034a2 	.word	0x200034a2
 800db68:	200047ac 	.word	0x200047ac
 800db6c:	200034a0 	.word	0x200034a0
 800db70:	20003cbc 	.word	0x20003cbc
 800db74:	080260ec 	.word	0x080260ec
 800db78:	080260fc 	.word	0x080260fc

0800db7c <GetTimeStamp>:

void GetTimeStamp(void)
{
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b084      	sub	sp, #16
 800db80:	af00      	add	r7, sp, #0
	uint32_t TimeFrame = 0;
 800db82:	2300      	movs	r3, #0
 800db84:	60fb      	str	r3, [r7, #12]
	static uint32_t PrevTimeFrame = 0;
	uint32_t TimeStamp = 0;
 800db86:	2300      	movs	r3, #0
 800db88:	60bb      	str	r3, [r7, #8]
	static 	uint32_t PrevTimeStamp = 0;
	static uint32_t TickswhenTimeChanged = 0;
	uint32_t ElapsTicksAfterTimeChange = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	607b      	str	r3, [r7, #4]

	Get_time();
 800db8e:	f7fd f9f7 	bl	800af80 <Get_time>
	TimeFrame = (((RTC_Date_time_Dec_st.Hour * 3600) +(RTC_Date_time_Dec_st.Mins * 60) + (RTC_Date_time_Dec_st.Secs)));
 800db92:	4b21      	ldr	r3, [pc, #132]	; (800dc18 <GetTimeStamp+0x9c>)
 800db94:	781b      	ldrb	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 800db9c:	fb03 f202 	mul.w	r2, r3, r2
 800dba0:	4b1d      	ldr	r3, [pc, #116]	; (800dc18 <GetTimeStamp+0x9c>)
 800dba2:	785b      	ldrb	r3, [r3, #1]
 800dba4:	4619      	mov	r1, r3
 800dba6:	460b      	mov	r3, r1
 800dba8:	011b      	lsls	r3, r3, #4
 800dbaa:	1a5b      	subs	r3, r3, r1
 800dbac:	009b      	lsls	r3, r3, #2
 800dbae:	4413      	add	r3, r2
 800dbb0:	4a19      	ldr	r2, [pc, #100]	; (800dc18 <GetTimeStamp+0x9c>)
 800dbb2:	7892      	ldrb	r2, [r2, #2]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	60fb      	str	r3, [r7, #12]

	if(TimeFrame != PrevTimeFrame)
 800dbb8:	4b18      	ldr	r3, [pc, #96]	; (800dc1c <GetTimeStamp+0xa0>)
 800dbba:	681b      	ldr	r3, [r3, #0]
 800dbbc:	68fa      	ldr	r2, [r7, #12]
 800dbbe:	429a      	cmp	r2, r3
 800dbc0:	d007      	beq.n	800dbd2 <GetTimeStamp+0x56>
	{
		PrevTimeFrame = TimeFrame;
 800dbc2:	4a16      	ldr	r2, [pc, #88]	; (800dc1c <GetTimeStamp+0xa0>)
 800dbc4:	68fb      	ldr	r3, [r7, #12]
 800dbc6:	6013      	str	r3, [r2, #0]
		TickswhenTimeChanged = HAL_GetTick();
 800dbc8:	f007 fb66 	bl	8015298 <HAL_GetTick>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	4a14      	ldr	r2, [pc, #80]	; (800dc20 <GetTimeStamp+0xa4>)
 800dbd0:	6013      	str	r3, [r2, #0]
	}

	ElapsTicksAfterTimeChange = HAL_Elaps_Ticks(TickswhenTimeChanged);
 800dbd2:	4b13      	ldr	r3, [pc, #76]	; (800dc20 <GetTimeStamp+0xa4>)
 800dbd4:	681b      	ldr	r3, [r3, #0]
 800dbd6:	4618      	mov	r0, r3
 800dbd8:	f000 fe12 	bl	800e800 <HAL_Elaps_Ticks>
 800dbdc:	6078      	str	r0, [r7, #4]

	TimeStamp  = (TimeFrame * 10) + (ElapsTicksAfterTimeChange/100);
 800dbde:	68fa      	ldr	r2, [r7, #12]
 800dbe0:	4613      	mov	r3, r2
 800dbe2:	009b      	lsls	r3, r3, #2
 800dbe4:	4413      	add	r3, r2
 800dbe6:	005b      	lsls	r3, r3, #1
 800dbe8:	4619      	mov	r1, r3
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	4a0d      	ldr	r2, [pc, #52]	; (800dc24 <GetTimeStamp+0xa8>)
 800dbee:	fba2 2303 	umull	r2, r3, r2, r3
 800dbf2:	095b      	lsrs	r3, r3, #5
 800dbf4:	440b      	add	r3, r1
 800dbf6:	60bb      	str	r3, [r7, #8]
	if(TimeStamp != PrevTimeStamp)
 800dbf8:	4b0b      	ldr	r3, [pc, #44]	; (800dc28 <GetTimeStamp+0xac>)
 800dbfa:	681b      	ldr	r3, [r3, #0]
 800dbfc:	68ba      	ldr	r2, [r7, #8]
 800dbfe:	429a      	cmp	r2, r3
 800dc00:	d005      	beq.n	800dc0e <GetTimeStamp+0x92>
	{
		PrevTimeStamp = TimeStamp;
 800dc02:	4a09      	ldr	r2, [pc, #36]	; (800dc28 <GetTimeStamp+0xac>)
 800dc04:	68bb      	ldr	r3, [r7, #8]
 800dc06:	6013      	str	r3, [r2, #0]
		SelfTimeStamp = TimeStamp;
 800dc08:	4a08      	ldr	r2, [pc, #32]	; (800dc2c <GetTimeStamp+0xb0>)
 800dc0a:	68bb      	ldr	r3, [r7, #8]
 800dc0c:	6013      	str	r3, [r2, #0]
		//		printf("Ticks:%lu|ms:%lu|%lu\n",HAL_GetTick(),	TimeStamp,(ElapsTicksAfterTimeChange));
	}
}
 800dc0e:	bf00      	nop
 800dc10:	3710      	adds	r7, #16
 800dc12:	46bd      	mov	sp, r7
 800dc14:	bd80      	pop	{r7, pc}
 800dc16:	bf00      	nop
 800dc18:	200027e0 	.word	0x200027e0
 800dc1c:	20004ba0 	.word	0x20004ba0
 800dc20:	20004ba4 	.word	0x20004ba4
 800dc24:	51eb851f 	.word	0x51eb851f
 800dc28:	20004ba8 	.word	0x20004ba8
 800dc2c:	20003cb8 	.word	0x20003cb8

0800dc30 <UpdateSIGNALSNames>:


void UpdateSIGNALSNames(void)
{
 800dc30:	b490      	push	{r4, r7}
 800dc32:	b082      	sub	sp, #8
 800dc34:	af00      	add	r7, sp, #0
	uint8_t Signals_Cnt = 0;
 800dc36:	2300      	movs	r3, #0
 800dc38:	71fb      	strb	r3, [r7, #7]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"CLTPR");
 800dc3a:	79fb      	ldrb	r3, [r7, #7]
 800dc3c:	1c5a      	adds	r2, r3, #1
 800dc3e:	71fa      	strb	r2, [r7, #7]
 800dc40:	461a      	mov	r2, r3
 800dc42:	4613      	mov	r3, r2
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	4413      	add	r3, r2
 800dc48:	00db      	lsls	r3, r3, #3
 800dc4a:	4acd      	ldr	r2, [pc, #820]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dc4c:	4413      	add	r3, r2
 800dc4e:	4acd      	ldr	r2, [pc, #820]	; (800df84 <UpdateSIGNALSNames+0x354>)
 800dc50:	6810      	ldr	r0, [r2, #0]
 800dc52:	6018      	str	r0, [r3, #0]
 800dc54:	8892      	ldrh	r2, [r2, #4]
 800dc56:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"DMTPR");
 800dc58:	79fb      	ldrb	r3, [r7, #7]
 800dc5a:	1c5a      	adds	r2, r3, #1
 800dc5c:	71fa      	strb	r2, [r7, #7]
 800dc5e:	461a      	mov	r2, r3
 800dc60:	4613      	mov	r3, r2
 800dc62:	009b      	lsls	r3, r3, #2
 800dc64:	4413      	add	r3, r2
 800dc66:	00db      	lsls	r3, r3, #3
 800dc68:	4ac5      	ldr	r2, [pc, #788]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dc6a:	4413      	add	r3, r2
 800dc6c:	4ac6      	ldr	r2, [pc, #792]	; (800df88 <UpdateSIGNALSNames+0x358>)
 800dc6e:	6810      	ldr	r0, [r2, #0]
 800dc70:	6018      	str	r0, [r3, #0]
 800dc72:	8892      	ldrh	r2, [r2, #4]
 800dc74:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"UMTPR");
 800dc76:	79fb      	ldrb	r3, [r7, #7]
 800dc78:	1c5a      	adds	r2, r3, #1
 800dc7a:	71fa      	strb	r2, [r7, #7]
 800dc7c:	461a      	mov	r2, r3
 800dc7e:	4613      	mov	r3, r2
 800dc80:	009b      	lsls	r3, r3, #2
 800dc82:	4413      	add	r3, r2
 800dc84:	00db      	lsls	r3, r3, #3
 800dc86:	4abe      	ldr	r2, [pc, #760]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dc88:	4413      	add	r3, r2
 800dc8a:	4ac0      	ldr	r2, [pc, #768]	; (800df8c <UpdateSIGNALSNames+0x35c>)
 800dc8c:	6810      	ldr	r0, [r2, #0]
 800dc8e:	6018      	str	r0, [r3, #0]
 800dc90:	8892      	ldrh	r2, [r2, #4]
 800dc92:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"ULTPR");
 800dc94:	79fb      	ldrb	r3, [r7, #7]
 800dc96:	1c5a      	adds	r2, r3, #1
 800dc98:	71fa      	strb	r2, [r7, #7]
 800dc9a:	461a      	mov	r2, r3
 800dc9c:	4613      	mov	r3, r2
 800dc9e:	009b      	lsls	r3, r3, #2
 800dca0:	4413      	add	r3, r2
 800dca2:	00db      	lsls	r3, r3, #3
 800dca4:	4ab6      	ldr	r2, [pc, #728]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dca6:	4413      	add	r3, r2
 800dca8:	4ab9      	ldr	r2, [pc, #740]	; (800df90 <UpdateSIGNALSNames+0x360>)
 800dcaa:	6810      	ldr	r0, [r2, #0]
 800dcac:	6018      	str	r0, [r3, #0]
 800dcae:	8892      	ldrh	r2, [r2, #4]
 800dcb0:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"1ATPR");
 800dcb2:	79fb      	ldrb	r3, [r7, #7]
 800dcb4:	1c5a      	adds	r2, r3, #1
 800dcb6:	71fa      	strb	r2, [r7, #7]
 800dcb8:	461a      	mov	r2, r3
 800dcba:	4613      	mov	r3, r2
 800dcbc:	009b      	lsls	r3, r3, #2
 800dcbe:	4413      	add	r3, r2
 800dcc0:	00db      	lsls	r3, r3, #3
 800dcc2:	4aaf      	ldr	r2, [pc, #700]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dcc4:	4413      	add	r3, r2
 800dcc6:	4ab3      	ldr	r2, [pc, #716]	; (800df94 <UpdateSIGNALSNames+0x364>)
 800dcc8:	6810      	ldr	r0, [r2, #0]
 800dcca:	6018      	str	r0, [r3, #0]
 800dccc:	8892      	ldrh	r2, [r2, #4]
 800dcce:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"30ATPR");
 800dcd0:	79fb      	ldrb	r3, [r7, #7]
 800dcd2:	1c5a      	adds	r2, r3, #1
 800dcd4:	71fa      	strb	r2, [r7, #7]
 800dcd6:	461a      	mov	r2, r3
 800dcd8:	4613      	mov	r3, r2
 800dcda:	009b      	lsls	r3, r3, #2
 800dcdc:	4413      	add	r3, r2
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	4aa7      	ldr	r2, [pc, #668]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dce2:	4413      	add	r3, r2
 800dce4:	4aac      	ldr	r2, [pc, #688]	; (800df98 <UpdateSIGNALSNames+0x368>)
 800dce6:	6810      	ldr	r0, [r2, #0]
 800dce8:	6018      	str	r0, [r3, #0]
 800dcea:	8891      	ldrh	r1, [r2, #4]
 800dcec:	7992      	ldrb	r2, [r2, #6]
 800dcee:	8099      	strh	r1, [r3, #4]
 800dcf0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"3_4TPR");
 800dcf2:	79fb      	ldrb	r3, [r7, #7]
 800dcf4:	1c5a      	adds	r2, r3, #1
 800dcf6:	71fa      	strb	r2, [r7, #7]
 800dcf8:	461a      	mov	r2, r3
 800dcfa:	4613      	mov	r3, r2
 800dcfc:	009b      	lsls	r3, r3, #2
 800dcfe:	4413      	add	r3, r2
 800dd00:	00db      	lsls	r3, r3, #3
 800dd02:	4a9f      	ldr	r2, [pc, #636]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dd04:	4413      	add	r3, r2
 800dd06:	4aa5      	ldr	r2, [pc, #660]	; (800df9c <UpdateSIGNALSNames+0x36c>)
 800dd08:	6810      	ldr	r0, [r2, #0]
 800dd0a:	6018      	str	r0, [r3, #0]
 800dd0c:	8891      	ldrh	r1, [r2, #4]
 800dd0e:	7992      	ldrb	r2, [r2, #6]
 800dd10:	8099      	strh	r1, [r3, #4]
 800dd12:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"6TPR");
 800dd14:	79fb      	ldrb	r3, [r7, #7]
 800dd16:	1c5a      	adds	r2, r3, #1
 800dd18:	71fa      	strb	r2, [r7, #7]
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	4613      	mov	r3, r2
 800dd1e:	009b      	lsls	r3, r3, #2
 800dd20:	4413      	add	r3, r2
 800dd22:	00db      	lsls	r3, r3, #3
 800dd24:	4a96      	ldr	r2, [pc, #600]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dd26:	4413      	add	r3, r2
 800dd28:	4a9d      	ldr	r2, [pc, #628]	; (800dfa0 <UpdateSIGNALSNames+0x370>)
 800dd2a:	6810      	ldr	r0, [r2, #0]
 800dd2c:	6018      	str	r0, [r3, #0]
 800dd2e:	7912      	ldrb	r2, [r2, #4]
 800dd30:	711a      	strb	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"26_28TPR");
 800dd32:	79fb      	ldrb	r3, [r7, #7]
 800dd34:	1c5a      	adds	r2, r3, #1
 800dd36:	71fa      	strb	r2, [r7, #7]
 800dd38:	461a      	mov	r2, r3
 800dd3a:	4613      	mov	r3, r2
 800dd3c:	009b      	lsls	r3, r3, #2
 800dd3e:	4413      	add	r3, r2
 800dd40:	00db      	lsls	r3, r3, #3
 800dd42:	4a8f      	ldr	r2, [pc, #572]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dd44:	4413      	add	r3, r2
 800dd46:	4997      	ldr	r1, [pc, #604]	; (800dfa4 <UpdateSIGNALSNames+0x374>)
 800dd48:	461a      	mov	r2, r3
 800dd4a:	460b      	mov	r3, r1
 800dd4c:	cb03      	ldmia	r3!, {r0, r1}
 800dd4e:	6010      	str	r0, [r2, #0]
 800dd50:	6051      	str	r1, [r2, #4]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	7213      	strb	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"25TPR");
 800dd56:	79fb      	ldrb	r3, [r7, #7]
 800dd58:	1c5a      	adds	r2, r3, #1
 800dd5a:	71fa      	strb	r2, [r7, #7]
 800dd5c:	461a      	mov	r2, r3
 800dd5e:	4613      	mov	r3, r2
 800dd60:	009b      	lsls	r3, r3, #2
 800dd62:	4413      	add	r3, r2
 800dd64:	00db      	lsls	r3, r3, #3
 800dd66:	4a86      	ldr	r2, [pc, #536]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dd68:	4413      	add	r3, r2
 800dd6a:	4a8f      	ldr	r2, [pc, #572]	; (800dfa8 <UpdateSIGNALSNames+0x378>)
 800dd6c:	6810      	ldr	r0, [r2, #0]
 800dd6e:	6018      	str	r0, [r3, #0]
 800dd70:	8892      	ldrh	r2, [r2, #4]
 800dd72:	809a      	strh	r2, [r3, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_DECR");
 800dd74:	79fb      	ldrb	r3, [r7, #7]
 800dd76:	1c5a      	adds	r2, r3, #1
 800dd78:	71fa      	strb	r2, [r7, #7]
 800dd7a:	461a      	mov	r2, r3
 800dd7c:	4613      	mov	r3, r2
 800dd7e:	009b      	lsls	r3, r3, #2
 800dd80:	4413      	add	r3, r2
 800dd82:	00db      	lsls	r3, r3, #3
 800dd84:	4a7e      	ldr	r2, [pc, #504]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800dd86:	4413      	add	r3, r2
 800dd88:	4988      	ldr	r1, [pc, #544]	; (800dfac <UpdateSIGNALSNames+0x37c>)
 800dd8a:	461a      	mov	r2, r3
 800dd8c:	460b      	mov	r3, r1
 800dd8e:	cb03      	ldmia	r3!, {r0, r1}
 800dd90:	6010      	str	r0, [r2, #0]
 800dd92:	6051      	str	r1, [r2, #4]
 800dd94:	881b      	ldrh	r3, [r3, #0]
 800dd96:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HHECR");
 800dd98:	79fb      	ldrb	r3, [r7, #7]
 800dd9a:	1c5a      	adds	r2, r3, #1
 800dd9c:	71fa      	strb	r2, [r7, #7]
 800dd9e:	461a      	mov	r2, r3
 800dda0:	4613      	mov	r3, r2
 800dda2:	009b      	lsls	r3, r3, #2
 800dda4:	4413      	add	r3, r2
 800dda6:	00db      	lsls	r3, r3, #3
 800dda8:	4a75      	ldr	r2, [pc, #468]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800ddaa:	4413      	add	r3, r2
 800ddac:	4980      	ldr	r1, [pc, #512]	; (800dfb0 <UpdateSIGNALSNames+0x380>)
 800ddae:	461a      	mov	r2, r3
 800ddb0:	460b      	mov	r3, r1
 800ddb2:	cb03      	ldmia	r3!, {r0, r1}
 800ddb4:	6010      	str	r0, [r2, #0]
 800ddb6:	6051      	str	r1, [r2, #4]
 800ddb8:	8819      	ldrh	r1, [r3, #0]
 800ddba:	789b      	ldrb	r3, [r3, #2]
 800ddbc:	8111      	strh	r1, [r2, #8]
 800ddbe:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D1_HECR");
 800ddc0:	79fb      	ldrb	r3, [r7, #7]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	71fa      	strb	r2, [r7, #7]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	4613      	mov	r3, r2
 800ddca:	009b      	lsls	r3, r3, #2
 800ddcc:	4413      	add	r3, r2
 800ddce:	00db      	lsls	r3, r3, #3
 800ddd0:	4a6b      	ldr	r2, [pc, #428]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800ddd2:	4413      	add	r3, r2
 800ddd4:	4977      	ldr	r1, [pc, #476]	; (800dfb4 <UpdateSIGNALSNames+0x384>)
 800ddd6:	461a      	mov	r2, r3
 800ddd8:	460b      	mov	r3, r1
 800ddda:	cb03      	ldmia	r3!, {r0, r1}
 800dddc:	6010      	str	r0, [r2, #0]
 800ddde:	6051      	str	r1, [r2, #4]
 800dde0:	881b      	ldrh	r3, [r3, #0]
 800dde2:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_DECR");
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	1c5a      	adds	r2, r3, #1
 800dde8:	71fa      	strb	r2, [r7, #7]
 800ddea:	461a      	mov	r2, r3
 800ddec:	4613      	mov	r3, r2
 800ddee:	009b      	lsls	r3, r3, #2
 800ddf0:	4413      	add	r3, r2
 800ddf2:	00db      	lsls	r3, r3, #3
 800ddf4:	4a62      	ldr	r2, [pc, #392]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800ddf6:	4413      	add	r3, r2
 800ddf8:	496f      	ldr	r1, [pc, #444]	; (800dfb8 <UpdateSIGNALSNames+0x388>)
 800ddfa:	461a      	mov	r2, r3
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	cb03      	ldmia	r3!, {r0, r1}
 800de00:	6010      	str	r0, [r2, #0]
 800de02:	6051      	str	r1, [r2, #4]
 800de04:	881b      	ldrh	r3, [r3, #0]
 800de06:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HHECR");
 800de08:	79fb      	ldrb	r3, [r7, #7]
 800de0a:	1c5a      	adds	r2, r3, #1
 800de0c:	71fa      	strb	r2, [r7, #7]
 800de0e:	461a      	mov	r2, r3
 800de10:	4613      	mov	r3, r2
 800de12:	009b      	lsls	r3, r3, #2
 800de14:	4413      	add	r3, r2
 800de16:	00db      	lsls	r3, r3, #3
 800de18:	4a59      	ldr	r2, [pc, #356]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800de1a:	4413      	add	r3, r2
 800de1c:	4967      	ldr	r1, [pc, #412]	; (800dfbc <UpdateSIGNALSNames+0x38c>)
 800de1e:	461a      	mov	r2, r3
 800de20:	460b      	mov	r3, r1
 800de22:	cb03      	ldmia	r3!, {r0, r1}
 800de24:	6010      	str	r0, [r2, #0]
 800de26:	6051      	str	r1, [r2, #4]
 800de28:	8819      	ldrh	r1, [r3, #0]
 800de2a:	789b      	ldrb	r3, [r3, #2]
 800de2c:	8111      	strh	r1, [r2, #8]
 800de2e:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1D2_HECR");
 800de30:	79fb      	ldrb	r3, [r7, #7]
 800de32:	1c5a      	adds	r2, r3, #1
 800de34:	71fa      	strb	r2, [r7, #7]
 800de36:	461a      	mov	r2, r3
 800de38:	4613      	mov	r3, r2
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	4413      	add	r3, r2
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	4a4f      	ldr	r2, [pc, #316]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800de42:	4413      	add	r3, r2
 800de44:	495e      	ldr	r1, [pc, #376]	; (800dfc0 <UpdateSIGNALSNames+0x390>)
 800de46:	461a      	mov	r2, r3
 800de48:	460b      	mov	r3, r1
 800de4a:	cb03      	ldmia	r3!, {r0, r1}
 800de4c:	6010      	str	r0, [r2, #0]
 800de4e:	6051      	str	r1, [r2, #4]
 800de50:	881b      	ldrh	r3, [r3, #0]
 800de52:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1DECR");
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	1c5a      	adds	r2, r3, #1
 800de58:	71fa      	strb	r2, [r7, #7]
 800de5a:	461a      	mov	r2, r3
 800de5c:	4613      	mov	r3, r2
 800de5e:	009b      	lsls	r3, r3, #2
 800de60:	4413      	add	r3, r2
 800de62:	00db      	lsls	r3, r3, #3
 800de64:	4a46      	ldr	r2, [pc, #280]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800de66:	4413      	add	r3, r2
 800de68:	4a56      	ldr	r2, [pc, #344]	; (800dfc4 <UpdateSIGNALSNames+0x394>)
 800de6a:	6810      	ldr	r0, [r2, #0]
 800de6c:	6018      	str	r0, [r3, #0]
 800de6e:	8891      	ldrh	r1, [r2, #4]
 800de70:	7992      	ldrb	r2, [r2, #6]
 800de72:	8099      	strh	r1, [r3, #4]
 800de74:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1HECR");
 800de76:	79fb      	ldrb	r3, [r7, #7]
 800de78:	1c5a      	adds	r2, r3, #1
 800de7a:	71fa      	strb	r2, [r7, #7]
 800de7c:	461a      	mov	r2, r3
 800de7e:	4613      	mov	r3, r2
 800de80:	009b      	lsls	r3, r3, #2
 800de82:	4413      	add	r3, r2
 800de84:	00db      	lsls	r3, r3, #3
 800de86:	4a3e      	ldr	r2, [pc, #248]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800de88:	4413      	add	r3, r2
 800de8a:	4a4f      	ldr	r2, [pc, #316]	; (800dfc8 <UpdateSIGNALSNames+0x398>)
 800de8c:	6810      	ldr	r0, [r2, #0]
 800de8e:	6018      	str	r0, [r3, #0]
 800de90:	8891      	ldrh	r1, [r2, #4]
 800de92:	7992      	ldrb	r2, [r2, #6]
 800de94:	8099      	strh	r1, [r3, #4]
 800de96:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1RECR");
 800de98:	79fb      	ldrb	r3, [r7, #7]
 800de9a:	1c5a      	adds	r2, r3, #1
 800de9c:	71fa      	strb	r2, [r7, #7]
 800de9e:	461a      	mov	r2, r3
 800dea0:	4613      	mov	r3, r2
 800dea2:	009b      	lsls	r3, r3, #2
 800dea4:	4413      	add	r3, r2
 800dea6:	00db      	lsls	r3, r3, #3
 800dea8:	4a35      	ldr	r2, [pc, #212]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800deaa:	4413      	add	r3, r2
 800deac:	4a47      	ldr	r2, [pc, #284]	; (800dfcc <UpdateSIGNALSNames+0x39c>)
 800deae:	6810      	ldr	r0, [r2, #0]
 800deb0:	6018      	str	r0, [r3, #0]
 800deb2:	8891      	ldrh	r1, [r2, #4]
 800deb4:	7992      	ldrb	r2, [r2, #6]
 800deb6:	8099      	strh	r1, [r3, #4]
 800deb8:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1UECR");
 800deba:	79fb      	ldrb	r3, [r7, #7]
 800debc:	1c5a      	adds	r2, r3, #1
 800debe:	71fa      	strb	r2, [r7, #7]
 800dec0:	461a      	mov	r2, r3
 800dec2:	4613      	mov	r3, r2
 800dec4:	009b      	lsls	r3, r3, #2
 800dec6:	4413      	add	r3, r2
 800dec8:	00db      	lsls	r3, r3, #3
 800deca:	4a2d      	ldr	r2, [pc, #180]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800decc:	4413      	add	r3, r2
 800dece:	4a40      	ldr	r2, [pc, #256]	; (800dfd0 <UpdateSIGNALSNames+0x3a0>)
 800ded0:	6810      	ldr	r0, [r2, #0]
 800ded2:	6018      	str	r0, [r3, #0]
 800ded4:	8891      	ldrh	r1, [r2, #4]
 800ded6:	7992      	ldrb	r2, [r2, #6]
 800ded8:	8099      	strh	r1, [r3, #4]
 800deda:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S1A_COHECR");
 800dedc:	79fb      	ldrb	r3, [r7, #7]
 800dede:	1c5a      	adds	r2, r3, #1
 800dee0:	71fa      	strb	r2, [r7, #7]
 800dee2:	461a      	mov	r2, r3
 800dee4:	4613      	mov	r3, r2
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	4413      	add	r3, r2
 800deea:	00db      	lsls	r3, r3, #3
 800deec:	4a24      	ldr	r2, [pc, #144]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800deee:	4413      	add	r3, r2
 800def0:	4938      	ldr	r1, [pc, #224]	; (800dfd4 <UpdateSIGNALSNames+0x3a4>)
 800def2:	461a      	mov	r2, r3
 800def4:	460b      	mov	r3, r1
 800def6:	cb03      	ldmia	r3!, {r0, r1}
 800def8:	6010      	str	r0, [r2, #0]
 800defa:	6051      	str	r1, [r2, #4]
 800defc:	8819      	ldrh	r1, [r3, #0]
 800defe:	789b      	ldrb	r3, [r3, #2]
 800df00:	8111      	strh	r1, [r2, #8]
 800df02:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3DECR");
 800df04:	79fb      	ldrb	r3, [r7, #7]
 800df06:	1c5a      	adds	r2, r3, #1
 800df08:	71fa      	strb	r2, [r7, #7]
 800df0a:	461a      	mov	r2, r3
 800df0c:	4613      	mov	r3, r2
 800df0e:	009b      	lsls	r3, r3, #2
 800df10:	4413      	add	r3, r2
 800df12:	00db      	lsls	r3, r3, #3
 800df14:	4a1a      	ldr	r2, [pc, #104]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800df16:	4413      	add	r3, r2
 800df18:	4a2f      	ldr	r2, [pc, #188]	; (800dfd8 <UpdateSIGNALSNames+0x3a8>)
 800df1a:	6810      	ldr	r0, [r2, #0]
 800df1c:	6018      	str	r0, [r3, #0]
 800df1e:	8891      	ldrh	r1, [r2, #4]
 800df20:	7992      	ldrb	r2, [r2, #6]
 800df22:	8099      	strh	r1, [r3, #4]
 800df24:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3HECR");
 800df26:	79fb      	ldrb	r3, [r7, #7]
 800df28:	1c5a      	adds	r2, r3, #1
 800df2a:	71fa      	strb	r2, [r7, #7]
 800df2c:	461a      	mov	r2, r3
 800df2e:	4613      	mov	r3, r2
 800df30:	009b      	lsls	r3, r3, #2
 800df32:	4413      	add	r3, r2
 800df34:	00db      	lsls	r3, r3, #3
 800df36:	4a12      	ldr	r2, [pc, #72]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800df38:	4413      	add	r3, r2
 800df3a:	4a28      	ldr	r2, [pc, #160]	; (800dfdc <UpdateSIGNALSNames+0x3ac>)
 800df3c:	6810      	ldr	r0, [r2, #0]
 800df3e:	6018      	str	r0, [r3, #0]
 800df40:	8891      	ldrh	r1, [r2, #4]
 800df42:	7992      	ldrb	r2, [r2, #6]
 800df44:	8099      	strh	r1, [r3, #4]
 800df46:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S3RECR");
 800df48:	79fb      	ldrb	r3, [r7, #7]
 800df4a:	1c5a      	adds	r2, r3, #1
 800df4c:	71fa      	strb	r2, [r7, #7]
 800df4e:	461a      	mov	r2, r3
 800df50:	4613      	mov	r3, r2
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	00db      	lsls	r3, r3, #3
 800df58:	4a09      	ldr	r2, [pc, #36]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800df5a:	4413      	add	r3, r2
 800df5c:	4a20      	ldr	r2, [pc, #128]	; (800dfe0 <UpdateSIGNALSNames+0x3b0>)
 800df5e:	6810      	ldr	r0, [r2, #0]
 800df60:	6018      	str	r0, [r3, #0]
 800df62:	8891      	ldrh	r1, [r2, #4]
 800df64:	7992      	ldrb	r2, [r2, #6]
 800df66:	8099      	strh	r1, [r3, #4]
 800df68:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4HECR");
 800df6a:	79fb      	ldrb	r3, [r7, #7]
 800df6c:	1c5a      	adds	r2, r3, #1
 800df6e:	71fa      	strb	r2, [r7, #7]
 800df70:	461a      	mov	r2, r3
 800df72:	4613      	mov	r3, r2
 800df74:	009b      	lsls	r3, r3, #2
 800df76:	4413      	add	r3, r2
 800df78:	00db      	lsls	r3, r3, #3
 800df7a:	4a01      	ldr	r2, [pc, #4]	; (800df80 <UpdateSIGNALSNames+0x350>)
 800df7c:	4413      	add	r3, r2
 800df7e:	e031      	b.n	800dfe4 <UpdateSIGNALSNames+0x3b4>
 800df80:	20003cbc 	.word	0x20003cbc
 800df84:	0802610c 	.word	0x0802610c
 800df88:	08026114 	.word	0x08026114
 800df8c:	0802611c 	.word	0x0802611c
 800df90:	08026124 	.word	0x08026124
 800df94:	0802612c 	.word	0x0802612c
 800df98:	08026134 	.word	0x08026134
 800df9c:	0802613c 	.word	0x0802613c
 800dfa0:	08026144 	.word	0x08026144
 800dfa4:	0802614c 	.word	0x0802614c
 800dfa8:	08026158 	.word	0x08026158
 800dfac:	08026160 	.word	0x08026160
 800dfb0:	0802616c 	.word	0x0802616c
 800dfb4:	08026178 	.word	0x08026178
 800dfb8:	08026184 	.word	0x08026184
 800dfbc:	08026190 	.word	0x08026190
 800dfc0:	0802619c 	.word	0x0802619c
 800dfc4:	080261a8 	.word	0x080261a8
 800dfc8:	080261b0 	.word	0x080261b0
 800dfcc:	080261b8 	.word	0x080261b8
 800dfd0:	080261c0 	.word	0x080261c0
 800dfd4:	080261c8 	.word	0x080261c8
 800dfd8:	080261d4 	.word	0x080261d4
 800dfdc:	080261dc 	.word	0x080261dc
 800dfe0:	080261e4 	.word	0x080261e4
 800dfe4:	4acd      	ldr	r2, [pc, #820]	; (800e31c <UpdateSIGNALSNames+0x6ec>)
 800dfe6:	6810      	ldr	r0, [r2, #0]
 800dfe8:	6018      	str	r0, [r3, #0]
 800dfea:	8891      	ldrh	r1, [r2, #4]
 800dfec:	7992      	ldrb	r2, [r2, #6]
 800dfee:	8099      	strh	r1, [r3, #4]
 800dff0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S4RECR");
 800dff2:	79fb      	ldrb	r3, [r7, #7]
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	71fa      	strb	r2, [r7, #7]
 800dff8:	461a      	mov	r2, r3
 800dffa:	4613      	mov	r3, r2
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	4413      	add	r3, r2
 800e000:	00db      	lsls	r3, r3, #3
 800e002:	4ac7      	ldr	r2, [pc, #796]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e004:	4413      	add	r3, r2
 800e006:	4ac7      	ldr	r2, [pc, #796]	; (800e324 <UpdateSIGNALSNames+0x6f4>)
 800e008:	6810      	ldr	r0, [r2, #0]
 800e00a:	6018      	str	r0, [r3, #0]
 800e00c:	8891      	ldrh	r1, [r2, #4]
 800e00e:	7992      	ldrb	r2, [r2, #6]
 800e010:	8099      	strh	r1, [r3, #4]
 800e012:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6DECR");
 800e014:	79fb      	ldrb	r3, [r7, #7]
 800e016:	1c5a      	adds	r2, r3, #1
 800e018:	71fa      	strb	r2, [r7, #7]
 800e01a:	461a      	mov	r2, r3
 800e01c:	4613      	mov	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	00db      	lsls	r3, r3, #3
 800e024:	4abe      	ldr	r2, [pc, #760]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e026:	4413      	add	r3, r2
 800e028:	4abf      	ldr	r2, [pc, #764]	; (800e328 <UpdateSIGNALSNames+0x6f8>)
 800e02a:	6810      	ldr	r0, [r2, #0]
 800e02c:	6018      	str	r0, [r3, #0]
 800e02e:	8891      	ldrh	r1, [r2, #4]
 800e030:	7992      	ldrb	r2, [r2, #6]
 800e032:	8099      	strh	r1, [r3, #4]
 800e034:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S6RECR");
 800e036:	79fb      	ldrb	r3, [r7, #7]
 800e038:	1c5a      	adds	r2, r3, #1
 800e03a:	71fa      	strb	r2, [r7, #7]
 800e03c:	461a      	mov	r2, r3
 800e03e:	4613      	mov	r3, r2
 800e040:	009b      	lsls	r3, r3, #2
 800e042:	4413      	add	r3, r2
 800e044:	00db      	lsls	r3, r3, #3
 800e046:	4ab6      	ldr	r2, [pc, #728]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e048:	4413      	add	r3, r2
 800e04a:	4ab8      	ldr	r2, [pc, #736]	; (800e32c <UpdateSIGNALSNames+0x6fc>)
 800e04c:	6810      	ldr	r0, [r2, #0]
 800e04e:	6018      	str	r0, [r3, #0]
 800e050:	8891      	ldrh	r1, [r2, #4]
 800e052:	7992      	ldrb	r2, [r2, #6]
 800e054:	8099      	strh	r1, [r3, #4]
 800e056:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25DECR");
 800e058:	79fb      	ldrb	r3, [r7, #7]
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	71fa      	strb	r2, [r7, #7]
 800e05e:	461a      	mov	r2, r3
 800e060:	4613      	mov	r3, r2
 800e062:	009b      	lsls	r3, r3, #2
 800e064:	4413      	add	r3, r2
 800e066:	00db      	lsls	r3, r3, #3
 800e068:	4aad      	ldr	r2, [pc, #692]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e06a:	4413      	add	r3, r2
 800e06c:	49b0      	ldr	r1, [pc, #704]	; (800e330 <UpdateSIGNALSNames+0x700>)
 800e06e:	461a      	mov	r2, r3
 800e070:	460b      	mov	r3, r1
 800e072:	cb03      	ldmia	r3!, {r0, r1}
 800e074:	6010      	str	r0, [r2, #0]
 800e076:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S25RECR");
 800e078:	79fb      	ldrb	r3, [r7, #7]
 800e07a:	1c5a      	adds	r2, r3, #1
 800e07c:	71fa      	strb	r2, [r7, #7]
 800e07e:	461a      	mov	r2, r3
 800e080:	4613      	mov	r3, r2
 800e082:	009b      	lsls	r3, r3, #2
 800e084:	4413      	add	r3, r2
 800e086:	00db      	lsls	r3, r3, #3
 800e088:	4aa5      	ldr	r2, [pc, #660]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e08a:	4413      	add	r3, r2
 800e08c:	49a9      	ldr	r1, [pc, #676]	; (800e334 <UpdateSIGNALSNames+0x704>)
 800e08e:	461a      	mov	r2, r3
 800e090:	460b      	mov	r3, r1
 800e092:	cb03      	ldmia	r3!, {r0, r1}
 800e094:	6010      	str	r0, [r2, #0]
 800e096:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26HECR");
 800e098:	79fb      	ldrb	r3, [r7, #7]
 800e09a:	1c5a      	adds	r2, r3, #1
 800e09c:	71fa      	strb	r2, [r7, #7]
 800e09e:	461a      	mov	r2, r3
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	009b      	lsls	r3, r3, #2
 800e0a4:	4413      	add	r3, r2
 800e0a6:	00db      	lsls	r3, r3, #3
 800e0a8:	4a9d      	ldr	r2, [pc, #628]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e0aa:	4413      	add	r3, r2
 800e0ac:	49a2      	ldr	r1, [pc, #648]	; (800e338 <UpdateSIGNALSNames+0x708>)
 800e0ae:	461a      	mov	r2, r3
 800e0b0:	460b      	mov	r3, r1
 800e0b2:	cb03      	ldmia	r3!, {r0, r1}
 800e0b4:	6010      	str	r0, [r2, #0]
 800e0b6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S26RECR");
 800e0b8:	79fb      	ldrb	r3, [r7, #7]
 800e0ba:	1c5a      	adds	r2, r3, #1
 800e0bc:	71fa      	strb	r2, [r7, #7]
 800e0be:	461a      	mov	r2, r3
 800e0c0:	4613      	mov	r3, r2
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	00db      	lsls	r3, r3, #3
 800e0c8:	4a95      	ldr	r2, [pc, #596]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e0ca:	4413      	add	r3, r2
 800e0cc:	499b      	ldr	r1, [pc, #620]	; (800e33c <UpdateSIGNALSNames+0x70c>)
 800e0ce:	461a      	mov	r2, r3
 800e0d0:	460b      	mov	r3, r1
 800e0d2:	cb03      	ldmia	r3!, {r0, r1}
 800e0d4:	6010      	str	r0, [r2, #0]
 800e0d6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27HECR");
 800e0d8:	79fb      	ldrb	r3, [r7, #7]
 800e0da:	1c5a      	adds	r2, r3, #1
 800e0dc:	71fa      	strb	r2, [r7, #7]
 800e0de:	461a      	mov	r2, r3
 800e0e0:	4613      	mov	r3, r2
 800e0e2:	009b      	lsls	r3, r3, #2
 800e0e4:	4413      	add	r3, r2
 800e0e6:	00db      	lsls	r3, r3, #3
 800e0e8:	4a8d      	ldr	r2, [pc, #564]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e0ea:	4413      	add	r3, r2
 800e0ec:	4994      	ldr	r1, [pc, #592]	; (800e340 <UpdateSIGNALSNames+0x710>)
 800e0ee:	461a      	mov	r2, r3
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	cb03      	ldmia	r3!, {r0, r1}
 800e0f4:	6010      	str	r0, [r2, #0]
 800e0f6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S27RECR");
 800e0f8:	79fb      	ldrb	r3, [r7, #7]
 800e0fa:	1c5a      	adds	r2, r3, #1
 800e0fc:	71fa      	strb	r2, [r7, #7]
 800e0fe:	461a      	mov	r2, r3
 800e100:	4613      	mov	r3, r2
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	4413      	add	r3, r2
 800e106:	00db      	lsls	r3, r3, #3
 800e108:	4a85      	ldr	r2, [pc, #532]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e10a:	4413      	add	r3, r2
 800e10c:	498d      	ldr	r1, [pc, #564]	; (800e344 <UpdateSIGNALSNames+0x714>)
 800e10e:	461a      	mov	r2, r3
 800e110:	460b      	mov	r3, r1
 800e112:	cb03      	ldmia	r3!, {r0, r1}
 800e114:	6010      	str	r0, [r2, #0]
 800e116:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28DECR");
 800e118:	79fb      	ldrb	r3, [r7, #7]
 800e11a:	1c5a      	adds	r2, r3, #1
 800e11c:	71fa      	strb	r2, [r7, #7]
 800e11e:	461a      	mov	r2, r3
 800e120:	4613      	mov	r3, r2
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	4413      	add	r3, r2
 800e126:	00db      	lsls	r3, r3, #3
 800e128:	4a7d      	ldr	r2, [pc, #500]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e12a:	4413      	add	r3, r2
 800e12c:	4986      	ldr	r1, [pc, #536]	; (800e348 <UpdateSIGNALSNames+0x718>)
 800e12e:	461a      	mov	r2, r3
 800e130:	460b      	mov	r3, r1
 800e132:	cb03      	ldmia	r3!, {r0, r1}
 800e134:	6010      	str	r0, [r2, #0]
 800e136:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28HECR");
 800e138:	79fb      	ldrb	r3, [r7, #7]
 800e13a:	1c5a      	adds	r2, r3, #1
 800e13c:	71fa      	strb	r2, [r7, #7]
 800e13e:	461a      	mov	r2, r3
 800e140:	4613      	mov	r3, r2
 800e142:	009b      	lsls	r3, r3, #2
 800e144:	4413      	add	r3, r2
 800e146:	00db      	lsls	r3, r3, #3
 800e148:	4a75      	ldr	r2, [pc, #468]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e14a:	4413      	add	r3, r2
 800e14c:	497f      	ldr	r1, [pc, #508]	; (800e34c <UpdateSIGNALSNames+0x71c>)
 800e14e:	461a      	mov	r2, r3
 800e150:	460b      	mov	r3, r1
 800e152:	cb03      	ldmia	r3!, {r0, r1}
 800e154:	6010      	str	r0, [r2, #0]
 800e156:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S28RECR");
 800e158:	79fb      	ldrb	r3, [r7, #7]
 800e15a:	1c5a      	adds	r2, r3, #1
 800e15c:	71fa      	strb	r2, [r7, #7]
 800e15e:	461a      	mov	r2, r3
 800e160:	4613      	mov	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4413      	add	r3, r2
 800e166:	00db      	lsls	r3, r3, #3
 800e168:	4a6d      	ldr	r2, [pc, #436]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e16a:	4413      	add	r3, r2
 800e16c:	4978      	ldr	r1, [pc, #480]	; (800e350 <UpdateSIGNALSNames+0x720>)
 800e16e:	461a      	mov	r2, r3
 800e170:	460b      	mov	r3, r1
 800e172:	cb03      	ldmia	r3!, {r0, r1}
 800e174:	6010      	str	r0, [r2, #0]
 800e176:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30DECR");
 800e178:	79fb      	ldrb	r3, [r7, #7]
 800e17a:	1c5a      	adds	r2, r3, #1
 800e17c:	71fa      	strb	r2, [r7, #7]
 800e17e:	461a      	mov	r2, r3
 800e180:	4613      	mov	r3, r2
 800e182:	009b      	lsls	r3, r3, #2
 800e184:	4413      	add	r3, r2
 800e186:	00db      	lsls	r3, r3, #3
 800e188:	4a65      	ldr	r2, [pc, #404]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e18a:	4413      	add	r3, r2
 800e18c:	4971      	ldr	r1, [pc, #452]	; (800e354 <UpdateSIGNALSNames+0x724>)
 800e18e:	461a      	mov	r2, r3
 800e190:	460b      	mov	r3, r1
 800e192:	cb03      	ldmia	r3!, {r0, r1}
 800e194:	6010      	str	r0, [r2, #0]
 800e196:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30HECR");
 800e198:	79fb      	ldrb	r3, [r7, #7]
 800e19a:	1c5a      	adds	r2, r3, #1
 800e19c:	71fa      	strb	r2, [r7, #7]
 800e19e:	461a      	mov	r2, r3
 800e1a0:	4613      	mov	r3, r2
 800e1a2:	009b      	lsls	r3, r3, #2
 800e1a4:	4413      	add	r3, r2
 800e1a6:	00db      	lsls	r3, r3, #3
 800e1a8:	4a5d      	ldr	r2, [pc, #372]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e1aa:	4413      	add	r3, r2
 800e1ac:	496a      	ldr	r1, [pc, #424]	; (800e358 <UpdateSIGNALSNames+0x728>)
 800e1ae:	461a      	mov	r2, r3
 800e1b0:	460b      	mov	r3, r1
 800e1b2:	cb03      	ldmia	r3!, {r0, r1}
 800e1b4:	6010      	str	r0, [r2, #0]
 800e1b6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30RECR");
 800e1b8:	79fb      	ldrb	r3, [r7, #7]
 800e1ba:	1c5a      	adds	r2, r3, #1
 800e1bc:	71fa      	strb	r2, [r7, #7]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	4613      	mov	r3, r2
 800e1c2:	009b      	lsls	r3, r3, #2
 800e1c4:	4413      	add	r3, r2
 800e1c6:	00db      	lsls	r3, r3, #3
 800e1c8:	4a55      	ldr	r2, [pc, #340]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e1ca:	4413      	add	r3, r2
 800e1cc:	4963      	ldr	r1, [pc, #396]	; (800e35c <UpdateSIGNALSNames+0x72c>)
 800e1ce:	461a      	mov	r2, r3
 800e1d0:	460b      	mov	r3, r1
 800e1d2:	cb03      	ldmia	r3!, {r0, r1}
 800e1d4:	6010      	str	r0, [r2, #0]
 800e1d6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30UECR");
 800e1d8:	79fb      	ldrb	r3, [r7, #7]
 800e1da:	1c5a      	adds	r2, r3, #1
 800e1dc:	71fa      	strb	r2, [r7, #7]
 800e1de:	461a      	mov	r2, r3
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	00db      	lsls	r3, r3, #3
 800e1e8:	4a4d      	ldr	r2, [pc, #308]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e1ea:	4413      	add	r3, r2
 800e1ec:	495c      	ldr	r1, [pc, #368]	; (800e360 <UpdateSIGNALSNames+0x730>)
 800e1ee:	461a      	mov	r2, r3
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	cb03      	ldmia	r3!, {r0, r1}
 800e1f4:	6010      	str	r0, [r2, #0]
 800e1f6:	6051      	str	r1, [r2, #4]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30A_COHECR");
 800e1f8:	79fb      	ldrb	r3, [r7, #7]
 800e1fa:	1c5a      	adds	r2, r3, #1
 800e1fc:	71fa      	strb	r2, [r7, #7]
 800e1fe:	461a      	mov	r2, r3
 800e200:	4613      	mov	r3, r2
 800e202:	009b      	lsls	r3, r3, #2
 800e204:	4413      	add	r3, r2
 800e206:	00db      	lsls	r3, r3, #3
 800e208:	4a45      	ldr	r2, [pc, #276]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e20a:	4413      	add	r3, r2
 800e20c:	4a55      	ldr	r2, [pc, #340]	; (800e364 <UpdateSIGNALSNames+0x734>)
 800e20e:	461c      	mov	r4, r3
 800e210:	4613      	mov	r3, r2
 800e212:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e214:	6020      	str	r0, [r4, #0]
 800e216:	6061      	str	r1, [r4, #4]
 800e218:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_DECR");
 800e21a:	79fb      	ldrb	r3, [r7, #7]
 800e21c:	1c5a      	adds	r2, r3, #1
 800e21e:	71fa      	strb	r2, [r7, #7]
 800e220:	461a      	mov	r2, r3
 800e222:	4613      	mov	r3, r2
 800e224:	009b      	lsls	r3, r3, #2
 800e226:	4413      	add	r3, r2
 800e228:	00db      	lsls	r3, r3, #3
 800e22a:	4a3d      	ldr	r2, [pc, #244]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e22c:	4413      	add	r3, r2
 800e22e:	494e      	ldr	r1, [pc, #312]	; (800e368 <UpdateSIGNALSNames+0x738>)
 800e230:	461a      	mov	r2, r3
 800e232:	460b      	mov	r3, r1
 800e234:	cb03      	ldmia	r3!, {r0, r1}
 800e236:	6010      	str	r0, [r2, #0]
 800e238:	6051      	str	r1, [r2, #4]
 800e23a:	8819      	ldrh	r1, [r3, #0]
 800e23c:	789b      	ldrb	r3, [r3, #2]
 800e23e:	8111      	strh	r1, [r2, #8]
 800e240:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HHECR");
 800e242:	79fb      	ldrb	r3, [r7, #7]
 800e244:	1c5a      	adds	r2, r3, #1
 800e246:	71fa      	strb	r2, [r7, #7]
 800e248:	461a      	mov	r2, r3
 800e24a:	4613      	mov	r3, r2
 800e24c:	009b      	lsls	r3, r3, #2
 800e24e:	4413      	add	r3, r2
 800e250:	00db      	lsls	r3, r3, #3
 800e252:	4a33      	ldr	r2, [pc, #204]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e254:	4413      	add	r3, r2
 800e256:	4a45      	ldr	r2, [pc, #276]	; (800e36c <UpdateSIGNALSNames+0x73c>)
 800e258:	461c      	mov	r4, r3
 800e25a:	4613      	mov	r3, r2
 800e25c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e25e:	6020      	str	r0, [r4, #0]
 800e260:	6061      	str	r1, [r4, #4]
 800e262:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D2_HECR");
 800e264:	79fb      	ldrb	r3, [r7, #7]
 800e266:	1c5a      	adds	r2, r3, #1
 800e268:	71fa      	strb	r2, [r7, #7]
 800e26a:	461a      	mov	r2, r3
 800e26c:	4613      	mov	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	4413      	add	r3, r2
 800e272:	00db      	lsls	r3, r3, #3
 800e274:	4a2a      	ldr	r2, [pc, #168]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e276:	4413      	add	r3, r2
 800e278:	493d      	ldr	r1, [pc, #244]	; (800e370 <UpdateSIGNALSNames+0x740>)
 800e27a:	461a      	mov	r2, r3
 800e27c:	460b      	mov	r3, r1
 800e27e:	cb03      	ldmia	r3!, {r0, r1}
 800e280:	6010      	str	r0, [r2, #0]
 800e282:	6051      	str	r1, [r2, #4]
 800e284:	8819      	ldrh	r1, [r3, #0]
 800e286:	789b      	ldrb	r3, [r3, #2]
 800e288:	8111      	strh	r1, [r2, #8]
 800e28a:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_DECR");
 800e28c:	79fb      	ldrb	r3, [r7, #7]
 800e28e:	1c5a      	adds	r2, r3, #1
 800e290:	71fa      	strb	r2, [r7, #7]
 800e292:	461a      	mov	r2, r3
 800e294:	4613      	mov	r3, r2
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	4413      	add	r3, r2
 800e29a:	00db      	lsls	r3, r3, #3
 800e29c:	4a20      	ldr	r2, [pc, #128]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e29e:	4413      	add	r3, r2
 800e2a0:	4934      	ldr	r1, [pc, #208]	; (800e374 <UpdateSIGNALSNames+0x744>)
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	460b      	mov	r3, r1
 800e2a6:	cb03      	ldmia	r3!, {r0, r1}
 800e2a8:	6010      	str	r0, [r2, #0]
 800e2aa:	6051      	str	r1, [r2, #4]
 800e2ac:	8819      	ldrh	r1, [r3, #0]
 800e2ae:	789b      	ldrb	r3, [r3, #2]
 800e2b0:	8111      	strh	r1, [r2, #8]
 800e2b2:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HHECR");
 800e2b4:	79fb      	ldrb	r3, [r7, #7]
 800e2b6:	1c5a      	adds	r2, r3, #1
 800e2b8:	71fa      	strb	r2, [r7, #7]
 800e2ba:	461a      	mov	r2, r3
 800e2bc:	4613      	mov	r3, r2
 800e2be:	009b      	lsls	r3, r3, #2
 800e2c0:	4413      	add	r3, r2
 800e2c2:	00db      	lsls	r3, r3, #3
 800e2c4:	4a16      	ldr	r2, [pc, #88]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e2c6:	4413      	add	r3, r2
 800e2c8:	4a2b      	ldr	r2, [pc, #172]	; (800e378 <UpdateSIGNALSNames+0x748>)
 800e2ca:	461c      	mov	r4, r3
 800e2cc:	4613      	mov	r3, r2
 800e2ce:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e2d0:	6020      	str	r0, [r4, #0]
 800e2d2:	6061      	str	r1, [r4, #4]
 800e2d4:	60a2      	str	r2, [r4, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"S30D1_HECR");
 800e2d6:	79fb      	ldrb	r3, [r7, #7]
 800e2d8:	1c5a      	adds	r2, r3, #1
 800e2da:	71fa      	strb	r2, [r7, #7]
 800e2dc:	461a      	mov	r2, r3
 800e2de:	4613      	mov	r3, r2
 800e2e0:	009b      	lsls	r3, r3, #2
 800e2e2:	4413      	add	r3, r2
 800e2e4:	00db      	lsls	r3, r3, #3
 800e2e6:	4a0e      	ldr	r2, [pc, #56]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e2e8:	4413      	add	r3, r2
 800e2ea:	4924      	ldr	r1, [pc, #144]	; (800e37c <UpdateSIGNALSNames+0x74c>)
 800e2ec:	461a      	mov	r2, r3
 800e2ee:	460b      	mov	r3, r1
 800e2f0:	cb03      	ldmia	r3!, {r0, r1}
 800e2f2:	6010      	str	r0, [r2, #0]
 800e2f4:	6051      	str	r1, [r2, #4]
 800e2f6:	8819      	ldrh	r1, [r3, #0]
 800e2f8:	789b      	ldrb	r3, [r3, #2]
 800e2fa:	8111      	strh	r1, [r2, #8]
 800e2fc:	7293      	strb	r3, [r2, #10]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11NWKR");
 800e2fe:	79fb      	ldrb	r3, [r7, #7]
 800e300:	1c5a      	adds	r2, r3, #1
 800e302:	71fa      	strb	r2, [r7, #7]
 800e304:	461a      	mov	r2, r3
 800e306:	4613      	mov	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4413      	add	r3, r2
 800e30c:	00db      	lsls	r3, r3, #3
 800e30e:	4a04      	ldr	r2, [pc, #16]	; (800e320 <UpdateSIGNALSNames+0x6f0>)
 800e310:	4413      	add	r3, r2
 800e312:	4a1b      	ldr	r2, [pc, #108]	; (800e380 <UpdateSIGNALSNames+0x750>)
 800e314:	6810      	ldr	r0, [r2, #0]
 800e316:	6018      	str	r0, [r3, #0]
 800e318:	e034      	b.n	800e384 <UpdateSIGNALSNames+0x754>
 800e31a:	bf00      	nop
 800e31c:	080261ec 	.word	0x080261ec
 800e320:	20003cbc 	.word	0x20003cbc
 800e324:	080261f4 	.word	0x080261f4
 800e328:	080261fc 	.word	0x080261fc
 800e32c:	08026204 	.word	0x08026204
 800e330:	0802620c 	.word	0x0802620c
 800e334:	08026214 	.word	0x08026214
 800e338:	0802621c 	.word	0x0802621c
 800e33c:	08026224 	.word	0x08026224
 800e340:	0802622c 	.word	0x0802622c
 800e344:	08026234 	.word	0x08026234
 800e348:	0802623c 	.word	0x0802623c
 800e34c:	08026244 	.word	0x08026244
 800e350:	0802624c 	.word	0x0802624c
 800e354:	08026254 	.word	0x08026254
 800e358:	0802625c 	.word	0x0802625c
 800e35c:	08026264 	.word	0x08026264
 800e360:	0802626c 	.word	0x0802626c
 800e364:	08026274 	.word	0x08026274
 800e368:	08026280 	.word	0x08026280
 800e36c:	0802628c 	.word	0x0802628c
 800e370:	08026298 	.word	0x08026298
 800e374:	080262a4 	.word	0x080262a4
 800e378:	080262b0 	.word	0x080262b0
 800e37c:	080262bc 	.word	0x080262bc
 800e380:	080262c8 	.word	0x080262c8
 800e384:	8891      	ldrh	r1, [r2, #4]
 800e386:	7992      	ldrb	r2, [r2, #6]
 800e388:	8099      	strh	r1, [r3, #4]
 800e38a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"11RWKR");
 800e38c:	79fb      	ldrb	r3, [r7, #7]
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	71fa      	strb	r2, [r7, #7]
 800e392:	461a      	mov	r2, r3
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	4a82      	ldr	r2, [pc, #520]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e39e:	4413      	add	r3, r2
 800e3a0:	4a82      	ldr	r2, [pc, #520]	; (800e5ac <UpdateSIGNALSNames+0x97c>)
 800e3a2:	6810      	ldr	r0, [r2, #0]
 800e3a4:	6018      	str	r0, [r3, #0]
 800e3a6:	8891      	ldrh	r1, [r2, #4]
 800e3a8:	7992      	ldrb	r2, [r2, #6]
 800e3aa:	8099      	strh	r1, [r3, #4]
 800e3ac:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12NWKR");
 800e3ae:	79fb      	ldrb	r3, [r7, #7]
 800e3b0:	1c5a      	adds	r2, r3, #1
 800e3b2:	71fa      	strb	r2, [r7, #7]
 800e3b4:	461a      	mov	r2, r3
 800e3b6:	4613      	mov	r3, r2
 800e3b8:	009b      	lsls	r3, r3, #2
 800e3ba:	4413      	add	r3, r2
 800e3bc:	00db      	lsls	r3, r3, #3
 800e3be:	4a7a      	ldr	r2, [pc, #488]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e3c0:	4413      	add	r3, r2
 800e3c2:	4a7b      	ldr	r2, [pc, #492]	; (800e5b0 <UpdateSIGNALSNames+0x980>)
 800e3c4:	6810      	ldr	r0, [r2, #0]
 800e3c6:	6018      	str	r0, [r3, #0]
 800e3c8:	8891      	ldrh	r1, [r2, #4]
 800e3ca:	7992      	ldrb	r2, [r2, #6]
 800e3cc:	8099      	strh	r1, [r3, #4]
 800e3ce:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"12RWKR");
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	1c5a      	adds	r2, r3, #1
 800e3d4:	71fa      	strb	r2, [r7, #7]
 800e3d6:	461a      	mov	r2, r3
 800e3d8:	4613      	mov	r3, r2
 800e3da:	009b      	lsls	r3, r3, #2
 800e3dc:	4413      	add	r3, r2
 800e3de:	00db      	lsls	r3, r3, #3
 800e3e0:	4a71      	ldr	r2, [pc, #452]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e3e2:	4413      	add	r3, r2
 800e3e4:	4a73      	ldr	r2, [pc, #460]	; (800e5b4 <UpdateSIGNALSNames+0x984>)
 800e3e6:	6810      	ldr	r0, [r2, #0]
 800e3e8:	6018      	str	r0, [r3, #0]
 800e3ea:	8891      	ldrh	r1, [r2, #4]
 800e3ec:	7992      	ldrb	r2, [r2, #6]
 800e3ee:	8099      	strh	r1, [r3, #4]
 800e3f0:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13NWKR");
 800e3f2:	79fb      	ldrb	r3, [r7, #7]
 800e3f4:	1c5a      	adds	r2, r3, #1
 800e3f6:	71fa      	strb	r2, [r7, #7]
 800e3f8:	461a      	mov	r2, r3
 800e3fa:	4613      	mov	r3, r2
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	4413      	add	r3, r2
 800e400:	00db      	lsls	r3, r3, #3
 800e402:	4a69      	ldr	r2, [pc, #420]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e404:	4413      	add	r3, r2
 800e406:	4a6c      	ldr	r2, [pc, #432]	; (800e5b8 <UpdateSIGNALSNames+0x988>)
 800e408:	6810      	ldr	r0, [r2, #0]
 800e40a:	6018      	str	r0, [r3, #0]
 800e40c:	8891      	ldrh	r1, [r2, #4]
 800e40e:	7992      	ldrb	r2, [r2, #6]
 800e410:	8099      	strh	r1, [r3, #4]
 800e412:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"13RWKR");
 800e414:	79fb      	ldrb	r3, [r7, #7]
 800e416:	1c5a      	adds	r2, r3, #1
 800e418:	71fa      	strb	r2, [r7, #7]
 800e41a:	461a      	mov	r2, r3
 800e41c:	4613      	mov	r3, r2
 800e41e:	009b      	lsls	r3, r3, #2
 800e420:	4413      	add	r3, r2
 800e422:	00db      	lsls	r3, r3, #3
 800e424:	4a60      	ldr	r2, [pc, #384]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e426:	4413      	add	r3, r2
 800e428:	4a64      	ldr	r2, [pc, #400]	; (800e5bc <UpdateSIGNALSNames+0x98c>)
 800e42a:	6810      	ldr	r0, [r2, #0]
 800e42c:	6018      	str	r0, [r3, #0]
 800e42e:	8891      	ldrh	r1, [r2, #4]
 800e430:	7992      	ldrb	r2, [r2, #6]
 800e432:	8099      	strh	r1, [r3, #4]
 800e434:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18NWKR");
 800e436:	79fb      	ldrb	r3, [r7, #7]
 800e438:	1c5a      	adds	r2, r3, #1
 800e43a:	71fa      	strb	r2, [r7, #7]
 800e43c:	461a      	mov	r2, r3
 800e43e:	4613      	mov	r3, r2
 800e440:	009b      	lsls	r3, r3, #2
 800e442:	4413      	add	r3, r2
 800e444:	00db      	lsls	r3, r3, #3
 800e446:	4a58      	ldr	r2, [pc, #352]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e448:	4413      	add	r3, r2
 800e44a:	4a5d      	ldr	r2, [pc, #372]	; (800e5c0 <UpdateSIGNALSNames+0x990>)
 800e44c:	6810      	ldr	r0, [r2, #0]
 800e44e:	6018      	str	r0, [r3, #0]
 800e450:	8891      	ldrh	r1, [r2, #4]
 800e452:	7992      	ldrb	r2, [r2, #6]
 800e454:	8099      	strh	r1, [r3, #4]
 800e456:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"18RWKR");
 800e458:	79fb      	ldrb	r3, [r7, #7]
 800e45a:	1c5a      	adds	r2, r3, #1
 800e45c:	71fa      	strb	r2, [r7, #7]
 800e45e:	461a      	mov	r2, r3
 800e460:	4613      	mov	r3, r2
 800e462:	009b      	lsls	r3, r3, #2
 800e464:	4413      	add	r3, r2
 800e466:	00db      	lsls	r3, r3, #3
 800e468:	4a4f      	ldr	r2, [pc, #316]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e46a:	4413      	add	r3, r2
 800e46c:	4a55      	ldr	r2, [pc, #340]	; (800e5c4 <UpdateSIGNALSNames+0x994>)
 800e46e:	6810      	ldr	r0, [r2, #0]
 800e470:	6018      	str	r0, [r3, #0]
 800e472:	8891      	ldrh	r1, [r2, #4]
 800e474:	7992      	ldrb	r2, [r2, #6]
 800e476:	8099      	strh	r1, [r3, #4]
 800e478:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19NWKR");
 800e47a:	79fb      	ldrb	r3, [r7, #7]
 800e47c:	1c5a      	adds	r2, r3, #1
 800e47e:	71fa      	strb	r2, [r7, #7]
 800e480:	461a      	mov	r2, r3
 800e482:	4613      	mov	r3, r2
 800e484:	009b      	lsls	r3, r3, #2
 800e486:	4413      	add	r3, r2
 800e488:	00db      	lsls	r3, r3, #3
 800e48a:	4a47      	ldr	r2, [pc, #284]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e48c:	4413      	add	r3, r2
 800e48e:	4a4e      	ldr	r2, [pc, #312]	; (800e5c8 <UpdateSIGNALSNames+0x998>)
 800e490:	6810      	ldr	r0, [r2, #0]
 800e492:	6018      	str	r0, [r3, #0]
 800e494:	8891      	ldrh	r1, [r2, #4]
 800e496:	7992      	ldrb	r2, [r2, #6]
 800e498:	8099      	strh	r1, [r3, #4]
 800e49a:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"19RWKR");
 800e49c:	79fb      	ldrb	r3, [r7, #7]
 800e49e:	1c5a      	adds	r2, r3, #1
 800e4a0:	71fa      	strb	r2, [r7, #7]
 800e4a2:	461a      	mov	r2, r3
 800e4a4:	4613      	mov	r3, r2
 800e4a6:	009b      	lsls	r3, r3, #2
 800e4a8:	4413      	add	r3, r2
 800e4aa:	00db      	lsls	r3, r3, #3
 800e4ac:	4a3e      	ldr	r2, [pc, #248]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e4ae:	4413      	add	r3, r2
 800e4b0:	4a46      	ldr	r2, [pc, #280]	; (800e5cc <UpdateSIGNALSNames+0x99c>)
 800e4b2:	6810      	ldr	r0, [r2, #0]
 800e4b4:	6018      	str	r0, [r3, #0]
 800e4b6:	8891      	ldrh	r1, [r2, #4]
 800e4b8:	7992      	ldrb	r2, [r2, #6]
 800e4ba:	8099      	strh	r1, [r3, #4]
 800e4bc:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20NWKR");
 800e4be:	79fb      	ldrb	r3, [r7, #7]
 800e4c0:	1c5a      	adds	r2, r3, #1
 800e4c2:	71fa      	strb	r2, [r7, #7]
 800e4c4:	461a      	mov	r2, r3
 800e4c6:	4613      	mov	r3, r2
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	00db      	lsls	r3, r3, #3
 800e4ce:	4a36      	ldr	r2, [pc, #216]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e4d0:	4413      	add	r3, r2
 800e4d2:	4a3f      	ldr	r2, [pc, #252]	; (800e5d0 <UpdateSIGNALSNames+0x9a0>)
 800e4d4:	6810      	ldr	r0, [r2, #0]
 800e4d6:	6018      	str	r0, [r3, #0]
 800e4d8:	8891      	ldrh	r1, [r2, #4]
 800e4da:	7992      	ldrb	r2, [r2, #6]
 800e4dc:	8099      	strh	r1, [r3, #4]
 800e4de:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"20RWKR");
 800e4e0:	79fb      	ldrb	r3, [r7, #7]
 800e4e2:	1c5a      	adds	r2, r3, #1
 800e4e4:	71fa      	strb	r2, [r7, #7]
 800e4e6:	461a      	mov	r2, r3
 800e4e8:	4613      	mov	r3, r2
 800e4ea:	009b      	lsls	r3, r3, #2
 800e4ec:	4413      	add	r3, r2
 800e4ee:	00db      	lsls	r3, r3, #3
 800e4f0:	4a2d      	ldr	r2, [pc, #180]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e4f2:	4413      	add	r3, r2
 800e4f4:	4a37      	ldr	r2, [pc, #220]	; (800e5d4 <UpdateSIGNALSNames+0x9a4>)
 800e4f6:	6810      	ldr	r0, [r2, #0]
 800e4f8:	6018      	str	r0, [r3, #0]
 800e4fa:	8891      	ldrh	r1, [r2, #4]
 800e4fc:	7992      	ldrb	r2, [r2, #6]
 800e4fe:	8099      	strh	r1, [r3, #4]
 800e500:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"15KL_NWKR");
 800e502:	79fb      	ldrb	r3, [r7, #7]
 800e504:	1c5a      	adds	r2, r3, #1
 800e506:	71fa      	strb	r2, [r7, #7]
 800e508:	461a      	mov	r2, r3
 800e50a:	4613      	mov	r3, r2
 800e50c:	009b      	lsls	r3, r3, #2
 800e50e:	4413      	add	r3, r2
 800e510:	00db      	lsls	r3, r3, #3
 800e512:	4a25      	ldr	r2, [pc, #148]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e514:	4413      	add	r3, r2
 800e516:	4930      	ldr	r1, [pc, #192]	; (800e5d8 <UpdateSIGNALSNames+0x9a8>)
 800e518:	461a      	mov	r2, r3
 800e51a:	460b      	mov	r3, r1
 800e51c:	cb03      	ldmia	r3!, {r0, r1}
 800e51e:	6010      	str	r0, [r2, #0]
 800e520:	6051      	str	r1, [r2, #4]
 800e522:	881b      	ldrh	r3, [r3, #0]
 800e524:	8113      	strh	r3, [r2, #8]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"22LXCR");
 800e526:	79fb      	ldrb	r3, [r7, #7]
 800e528:	1c5a      	adds	r2, r3, #1
 800e52a:	71fa      	strb	r2, [r7, #7]
 800e52c:	461a      	mov	r2, r3
 800e52e:	4613      	mov	r3, r2
 800e530:	009b      	lsls	r3, r3, #2
 800e532:	4413      	add	r3, r2
 800e534:	00db      	lsls	r3, r3, #3
 800e536:	4a1c      	ldr	r2, [pc, #112]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e538:	4413      	add	r3, r2
 800e53a:	4a28      	ldr	r2, [pc, #160]	; (800e5dc <UpdateSIGNALSNames+0x9ac>)
 800e53c:	6810      	ldr	r0, [r2, #0]
 800e53e:	6018      	str	r0, [r3, #0]
 800e540:	8891      	ldrh	r1, [r2, #4]
 800e542:	7992      	ldrb	r2, [r2, #6]
 800e544:	8099      	strh	r1, [r3, #4]
 800e546:	719a      	strb	r2, [r3, #6]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNA");
 800e548:	79fb      	ldrb	r3, [r7, #7]
 800e54a:	1c5a      	adds	r2, r3, #1
 800e54c:	71fa      	strb	r2, [r7, #7]
 800e54e:	461a      	mov	r2, r3
 800e550:	4613      	mov	r3, r2
 800e552:	009b      	lsls	r3, r3, #2
 800e554:	4413      	add	r3, r2
 800e556:	00db      	lsls	r3, r3, #3
 800e558:	4a13      	ldr	r2, [pc, #76]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e55a:	4413      	add	r3, r2
 800e55c:	4a20      	ldr	r2, [pc, #128]	; (800e5e0 <UpdateSIGNALSNames+0x9b0>)
 800e55e:	461c      	mov	r4, r3
 800e560:	4613      	mov	r3, r2
 800e562:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e564:	6020      	str	r0, [r4, #0]
 800e566:	6061      	str	r1, [r4, #4]
 800e568:	60a2      	str	r2, [r4, #8]
 800e56a:	781b      	ldrb	r3, [r3, #0]
 800e56c:	7323      	strb	r3, [r4, #12]
	strcpy((char *)Signals[Signals_Cnt++], (const char *)"BR_LCPR_STNC");
 800e56e:	79fb      	ldrb	r3, [r7, #7]
 800e570:	1c5a      	adds	r2, r3, #1
 800e572:	71fa      	strb	r2, [r7, #7]
 800e574:	461a      	mov	r2, r3
 800e576:	4613      	mov	r3, r2
 800e578:	009b      	lsls	r3, r3, #2
 800e57a:	4413      	add	r3, r2
 800e57c:	00db      	lsls	r3, r3, #3
 800e57e:	4a0a      	ldr	r2, [pc, #40]	; (800e5a8 <UpdateSIGNALSNames+0x978>)
 800e580:	4413      	add	r3, r2
 800e582:	4a18      	ldr	r2, [pc, #96]	; (800e5e4 <UpdateSIGNALSNames+0x9b4>)
 800e584:	461c      	mov	r4, r3
 800e586:	4613      	mov	r3, r2
 800e588:	cb07      	ldmia	r3!, {r0, r1, r2}
 800e58a:	6020      	str	r0, [r4, #0]
 800e58c:	6061      	str	r1, [r4, #4]
 800e58e:	60a2      	str	r2, [r4, #8]
 800e590:	781b      	ldrb	r3, [r3, #0]
 800e592:	7323      	strb	r3, [r4, #12]
	TotalSigCount = Signals_Cnt;
 800e594:	79fb      	ldrb	r3, [r7, #7]
 800e596:	b29a      	uxth	r2, r3
 800e598:	4b13      	ldr	r3, [pc, #76]	; (800e5e8 <UpdateSIGNALSNames+0x9b8>)
 800e59a:	801a      	strh	r2, [r3, #0]


}
 800e59c:	bf00      	nop
 800e59e:	3708      	adds	r7, #8
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bc90      	pop	{r4, r7}
 800e5a4:	4770      	bx	lr
 800e5a6:	bf00      	nop
 800e5a8:	20003cbc 	.word	0x20003cbc
 800e5ac:	080262d0 	.word	0x080262d0
 800e5b0:	080262d8 	.word	0x080262d8
 800e5b4:	080262e0 	.word	0x080262e0
 800e5b8:	080262e8 	.word	0x080262e8
 800e5bc:	080262f0 	.word	0x080262f0
 800e5c0:	080262f8 	.word	0x080262f8
 800e5c4:	08026300 	.word	0x08026300
 800e5c8:	08026308 	.word	0x08026308
 800e5cc:	08026310 	.word	0x08026310
 800e5d0:	08026318 	.word	0x08026318
 800e5d4:	08026320 	.word	0x08026320
 800e5d8:	08026328 	.word	0x08026328
 800e5dc:	08026334 	.word	0x08026334
 800e5e0:	0802633c 	.word	0x0802633c
 800e5e4:	0802634c 	.word	0x0802634c
 800e5e8:	200047ac 	.word	0x200047ac

0800e5ec <print_self_DetailsSiemens>:

void print_self_DetailsSiemens(void)
{
 800e5ec:	b5b0      	push	{r4, r5, r7, lr}
 800e5ee:	b086      	sub	sp, #24
 800e5f0:	af04      	add	r7, sp, #16

	printf("Station Name:%s\n",EI_data.STN_NAME);
 800e5f2:	496f      	ldr	r1, [pc, #444]	; (800e7b0 <print_self_DetailsSiemens+0x1c4>)
 800e5f4:	486f      	ldr	r0, [pc, #444]	; (800e7b4 <print_self_DetailsSiemens+0x1c8>)
 800e5f6:	f013 fe59 	bl	80222ac <iprintf>
	printf("No of IPS:%u\n",EI_data.Siemens_st.No_of_IP_s);
 800e5fa:	4b6f      	ldr	r3, [pc, #444]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e5fc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e600:	4619      	mov	r1, r3
 800e602:	486e      	ldr	r0, [pc, #440]	; (800e7bc <print_self_DetailsSiemens+0x1d0>)
 800e604:	f013 fe52 	bl	80222ac <iprintf>
	printf("Self IP:%u.%u.%u.%u\n",EI_data.Siemens_st.Self_IP[CARD_INDEX][0],EI_data.Siemens_st.Self_IP[CARD_INDEX][1],EI_data.Siemens_st.Self_IP[CARD_INDEX][2],EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800e608:	4b6b      	ldr	r3, [pc, #428]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e60a:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e60e:	4619      	mov	r1, r3
 800e610:	4b69      	ldr	r3, [pc, #420]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e612:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e616:	461a      	mov	r2, r3
 800e618:	4b67      	ldr	r3, [pc, #412]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e61a:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e61e:	4618      	mov	r0, r3
 800e620:	4b65      	ldr	r3, [pc, #404]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e622:	f893 32ac 	ldrb.w	r3, [r3, #684]	; 0x2ac
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	4603      	mov	r3, r0
 800e62a:	4865      	ldr	r0, [pc, #404]	; (800e7c0 <print_self_DetailsSiemens+0x1d4>)
 800e62c:	f013 fe3e 	bl	80222ac <iprintf>
	printf("Self MAC:%02X-%02X-%02X-%02X-%02X-%02X\n",EI_data.Siemens_st.Self_MAC[CARD_INDEX][0],EI_data.Siemens_st.Self_MAC[CARD_INDEX][1],EI_data.Siemens_st.Self_MAC[CARD_INDEX][2],EI_data.Siemens_st.Self_MAC[CARD_INDEX][3],EI_data.Siemens_st.Self_MAC[CARD_INDEX][4],EI_data.Siemens_st.Self_MAC[CARD_INDEX][5]);
 800e630:	4b61      	ldr	r3, [pc, #388]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e632:	f893 32b3 	ldrb.w	r3, [r3, #691]	; 0x2b3
 800e636:	4618      	mov	r0, r3
 800e638:	4b5f      	ldr	r3, [pc, #380]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e63a:	f893 32b4 	ldrb.w	r3, [r3, #692]	; 0x2b4
 800e63e:	461c      	mov	r4, r3
 800e640:	4b5d      	ldr	r3, [pc, #372]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e642:	f893 32b5 	ldrb.w	r3, [r3, #693]	; 0x2b5
 800e646:	461d      	mov	r5, r3
 800e648:	4b5b      	ldr	r3, [pc, #364]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e64a:	f893 32b6 	ldrb.w	r3, [r3, #694]	; 0x2b6
 800e64e:	461a      	mov	r2, r3
 800e650:	4b59      	ldr	r3, [pc, #356]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e652:	f893 32b7 	ldrb.w	r3, [r3, #695]	; 0x2b7
 800e656:	4619      	mov	r1, r3
 800e658:	4b57      	ldr	r3, [pc, #348]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e65a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800e65e:	9302      	str	r3, [sp, #8]
 800e660:	9101      	str	r1, [sp, #4]
 800e662:	9200      	str	r2, [sp, #0]
 800e664:	462b      	mov	r3, r5
 800e666:	4622      	mov	r2, r4
 800e668:	4601      	mov	r1, r0
 800e66a:	4856      	ldr	r0, [pc, #344]	; (800e7c4 <print_self_DetailsSiemens+0x1d8>)
 800e66c:	f013 fe1e 	bl	80222ac <iprintf>
	printf("Self Listening Port:%u\n",EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);
 800e670:	4b51      	ldr	r3, [pc, #324]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e672:	f8b3 32dc 	ldrh.w	r3, [r3, #732]	; 0x2dc
 800e676:	4619      	mov	r1, r3
 800e678:	4853      	ldr	r0, [pc, #332]	; (800e7c8 <print_self_DetailsSiemens+0x1dc>)
 800e67a:	f013 fe17 	bl	80222ac <iprintf>

	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800e67e:	2300      	movs	r3, #0
 800e680:	71fb      	strb	r3, [r7, #7]
 800e682:	e037      	b.n	800e6f4 <print_self_DetailsSiemens+0x108>
	{
		printf("IP[%u]:%u.%u.%u.%u\n",i+1,EI_data.Siemens_st.Source_IP[CARD_INDEX][i][0],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][1],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][2],EI_data.Siemens_st.Source_IP[CARD_INDEX][i][3]);
 800e684:	79fb      	ldrb	r3, [r7, #7]
 800e686:	1c59      	adds	r1, r3, #1
 800e688:	79fb      	ldrb	r3, [r7, #7]
 800e68a:	4a4b      	ldr	r2, [pc, #300]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e68c:	33b2      	adds	r3, #178	; 0xb2
 800e68e:	009b      	lsls	r3, r3, #2
 800e690:	4413      	add	r3, r2
 800e692:	785b      	ldrb	r3, [r3, #1]
 800e694:	461c      	mov	r4, r3
 800e696:	79fb      	ldrb	r3, [r7, #7]
 800e698:	4a47      	ldr	r2, [pc, #284]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e69a:	009b      	lsls	r3, r3, #2
 800e69c:	4413      	add	r3, r2
 800e69e:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800e6a2:	461d      	mov	r5, r3
 800e6a4:	79fb      	ldrb	r3, [r7, #7]
 800e6a6:	4a44      	ldr	r2, [pc, #272]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e6a8:	009b      	lsls	r3, r3, #2
 800e6aa:	4413      	add	r3, r2
 800e6ac:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800e6b0:	4618      	mov	r0, r3
 800e6b2:	79fb      	ldrb	r3, [r7, #7]
 800e6b4:	4a40      	ldr	r2, [pc, #256]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e6b6:	009b      	lsls	r3, r3, #2
 800e6b8:	4413      	add	r3, r2
 800e6ba:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800e6be:	9301      	str	r3, [sp, #4]
 800e6c0:	9000      	str	r0, [sp, #0]
 800e6c2:	462b      	mov	r3, r5
 800e6c4:	4622      	mov	r2, r4
 800e6c6:	4841      	ldr	r0, [pc, #260]	; (800e7cc <print_self_DetailsSiemens+0x1e0>)
 800e6c8:	f013 fdf0 	bl	80222ac <iprintf>
		printf("Dest Port-TX:%u-RX:%u\n",EI_data.Siemens_st.PORTS[CARD_INDEX][i][TX_PORT],EI_data.Siemens_st.PORTS[CARD_INDEX][i][RX_PORT]);
 800e6cc:	79fb      	ldrb	r3, [r7, #7]
 800e6ce:	4a3a      	ldr	r2, [pc, #232]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e6d0:	33ba      	adds	r3, #186	; 0xba
 800e6d2:	009b      	lsls	r3, r3, #2
 800e6d4:	4413      	add	r3, r2
 800e6d6:	88db      	ldrh	r3, [r3, #6]
 800e6d8:	4619      	mov	r1, r3
 800e6da:	79fb      	ldrb	r3, [r7, #7]
 800e6dc:	4a36      	ldr	r2, [pc, #216]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e6de:	009b      	lsls	r3, r3, #2
 800e6e0:	4413      	add	r3, r2
 800e6e2:	f8b3 32f0 	ldrh.w	r3, [r3, #752]	; 0x2f0
 800e6e6:	461a      	mov	r2, r3
 800e6e8:	4839      	ldr	r0, [pc, #228]	; (800e7d0 <print_self_DetailsSiemens+0x1e4>)
 800e6ea:	f013 fddf 	bl	80222ac <iprintf>
	for(uint8_t i=0;i<EI_data.Siemens_st.No_of_IP_s;++i)
 800e6ee:	79fb      	ldrb	r3, [r7, #7]
 800e6f0:	3301      	adds	r3, #1
 800e6f2:	71fb      	strb	r3, [r7, #7]
 800e6f4:	4b30      	ldr	r3, [pc, #192]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e6f6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800e6fa:	79fa      	ldrb	r2, [r7, #7]
 800e6fc:	429a      	cmp	r2, r3
 800e6fe:	d3c1      	bcc.n	800e684 <print_self_DetailsSiemens+0x98>
	}
	printf("DestSysType:%u\n",EI_data.Siemens_st.DestSysType);
 800e700:	4b2d      	ldr	r3, [pc, #180]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e702:	f893 32a1 	ldrb.w	r3, [r3, #673]	; 0x2a1
 800e706:	4619      	mov	r1, r3
 800e708:	4832      	ldr	r0, [pc, #200]	; (800e7d4 <print_self_DetailsSiemens+0x1e8>)
 800e70a:	f013 fdcf 	bl	80222ac <iprintf>
	printf("SourceSysType:%u\n",EI_data.Siemens_st.SourceSysType);
 800e70e:	4b2a      	ldr	r3, [pc, #168]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e710:	f893 32a2 	ldrb.w	r3, [r3, #674]	; 0x2a2
 800e714:	4619      	mov	r1, r3
 800e716:	4830      	ldr	r0, [pc, #192]	; (800e7d8 <print_self_DetailsSiemens+0x1ec>)
 800e718:	f013 fdc8 	bl	80222ac <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.SourceAddress);
 800e71c:	4b26      	ldr	r3, [pc, #152]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e71e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800e722:	4619      	mov	r1, r3
 800e724:	482d      	ldr	r0, [pc, #180]	; (800e7dc <print_self_DetailsSiemens+0x1f0>)
 800e726:	f013 fdc1 	bl	80222ac <iprintf>
	printf("SourceAddress:%lu\n",EI_data.Siemens_st.DestAddress);
 800e72a:	4b23      	ldr	r3, [pc, #140]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e72c:	f8d3 3304 	ldr.w	r3, [r3, #772]	; 0x304
 800e730:	4619      	mov	r1, r3
 800e732:	482a      	ldr	r0, [pc, #168]	; (800e7dc <print_self_DetailsSiemens+0x1f0>)
 800e734:	f013 fdba 	bl	80222ac <iprintf>
	printf("DestPort:%u\n",EI_data.Siemens_st.DestPort);
 800e738:	4b1f      	ldr	r3, [pc, #124]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e73a:	f893 32a3 	ldrb.w	r3, [r3, #675]	; 0x2a3
 800e73e:	4619      	mov	r1, r3
 800e740:	4827      	ldr	r0, [pc, #156]	; (800e7e0 <print_self_DetailsSiemens+0x1f4>)
 800e742:	f013 fdb3 	bl	80222ac <iprintf>
	printf("SourcePort:%u\n",EI_data.Siemens_st.SourcePort);
 800e746:	4b1c      	ldr	r3, [pc, #112]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e748:	f893 32a4 	ldrb.w	r3, [r3, #676]	; 0x2a4
 800e74c:	4619      	mov	r1, r3
 800e74e:	4825      	ldr	r0, [pc, #148]	; (800e7e4 <print_self_DetailsSiemens+0x1f8>)
 800e750:	f013 fdac 	bl	80222ac <iprintf>
	printf("No of Inputs:%u\n",EI_data.Siemens_st.Booloutputs);
 800e754:	4b18      	ldr	r3, [pc, #96]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e756:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800e75a:	4619      	mov	r1, r3
 800e75c:	4822      	ldr	r0, [pc, #136]	; (800e7e8 <print_self_DetailsSiemens+0x1fc>)
 800e75e:	f013 fda5 	bl	80222ac <iprintf>

	printf("CAN_Xchange_Time:%lu\n",EI_data.Siemens_st.CAN_Xchange_Time);
 800e762:	4b15      	ldr	r3, [pc, #84]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e764:	f8d3 3308 	ldr.w	r3, [r3, #776]	; 0x308
 800e768:	4619      	mov	r1, r3
 800e76a:	4820      	ldr	r0, [pc, #128]	; (800e7ec <print_self_DetailsSiemens+0x200>)
 800e76c:	f013 fd9e 	bl	80222ac <iprintf>
	printf("HEALTH_PACKET_TIME:%lu\n",EI_data.Siemens_st.HEALTH_PACKET_TIME);
 800e770:	4b11      	ldr	r3, [pc, #68]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e772:	f8d3 3310 	ldr.w	r3, [r3, #784]	; 0x310
 800e776:	4619      	mov	r1, r3
 800e778:	481d      	ldr	r0, [pc, #116]	; (800e7f0 <print_self_DetailsSiemens+0x204>)
 800e77a:	f013 fd97 	bl	80222ac <iprintf>
	printf("COMM_FAILURE_TIME_OUT:%lu\n",EI_data.Siemens_st.COMM_FAILURE_TIME_OUT);
 800e77e:	4b0e      	ldr	r3, [pc, #56]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e780:	f8d3 3314 	ldr.w	r3, [r3, #788]	; 0x314
 800e784:	4619      	mov	r1, r3
 800e786:	481b      	ldr	r0, [pc, #108]	; (800e7f4 <print_self_DetailsSiemens+0x208>)
 800e788:	f013 fd90 	bl	80222ac <iprintf>
	printf("MIE_SIGNAL_SEND_CLK:%lu\n",EI_data.Siemens_st.MIE_SIGNAL_SEND_CLK);
 800e78c:	4b0a      	ldr	r3, [pc, #40]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e78e:	f8d3 3318 	ldr.w	r3, [r3, #792]	; 0x318
 800e792:	4619      	mov	r1, r3
 800e794:	4818      	ldr	r0, [pc, #96]	; (800e7f8 <print_self_DetailsSiemens+0x20c>)
 800e796:	f013 fd89 	bl	80222ac <iprintf>
	printf("Max_NoRXTSUpdatedFailCount:%lu\n",EI_data.Siemens_st.Max_NoRXTSUpdatedFailCount);
 800e79a:	4b07      	ldr	r3, [pc, #28]	; (800e7b8 <print_self_DetailsSiemens+0x1cc>)
 800e79c:	f8d3 331c 	ldr.w	r3, [r3, #796]	; 0x31c
 800e7a0:	4619      	mov	r1, r3
 800e7a2:	4816      	ldr	r0, [pc, #88]	; (800e7fc <print_self_DetailsSiemens+0x210>)
 800e7a4:	f013 fd82 	bl	80222ac <iprintf>

}
 800e7a8:	bf00      	nop
 800e7aa:	3708      	adds	r7, #8
 800e7ac:	46bd      	mov	sp, r7
 800e7ae:	bdb0      	pop	{r4, r5, r7, pc}
 800e7b0:	20000305 	.word	0x20000305
 800e7b4:	0802635c 	.word	0x0802635c
 800e7b8:	20000304 	.word	0x20000304
 800e7bc:	08026370 	.word	0x08026370
 800e7c0:	08026380 	.word	0x08026380
 800e7c4:	08026398 	.word	0x08026398
 800e7c8:	080263c0 	.word	0x080263c0
 800e7cc:	080263d8 	.word	0x080263d8
 800e7d0:	080263ec 	.word	0x080263ec
 800e7d4:	08026404 	.word	0x08026404
 800e7d8:	08026414 	.word	0x08026414
 800e7dc:	08026428 	.word	0x08026428
 800e7e0:	0802643c 	.word	0x0802643c
 800e7e4:	0802644c 	.word	0x0802644c
 800e7e8:	0802645c 	.word	0x0802645c
 800e7ec:	08026470 	.word	0x08026470
 800e7f0:	08026488 	.word	0x08026488
 800e7f4:	080264a0 	.word	0x080264a0
 800e7f8:	080264bc 	.word	0x080264bc
 800e7fc:	080264d8 	.word	0x080264d8

0800e800 <HAL_Elaps_Ticks>:

#include "Headers.h"


uint32_t HAL_Elaps_Ticks(uint32_t Ticks)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	b082      	sub	sp, #8
 800e804:	af00      	add	r7, sp, #0
 800e806:	6078      	str	r0, [r7, #4]
	return abs( (HAL_GetTick()-Ticks) );
 800e808:	f006 fd46 	bl	8015298 <HAL_GetTick>
 800e80c:	4602      	mov	r2, r0
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	1ad3      	subs	r3, r2, r3
 800e812:	2b00      	cmp	r3, #0
 800e814:	bfb8      	it	lt
 800e816:	425b      	neglt	r3, r3
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3708      	adds	r7, #8
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <udpServer_init>:
struct udp_pcb *upcb;



void udpServer_init(void)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b082      	sub	sp, #8
 800e824:	af00      	add	r7, sp, #0

	ip_addr_t myIPADDR;
	err_t err = ERR_ABRT;
 800e826:	23f3      	movs	r3, #243	; 0xf3
 800e828:	71fb      	strb	r3, [r7, #7]

	upcb = udp_new();
 800e82a:	f011 f849 	bl	801f8c0 <udp_new>
 800e82e:	4603      	mov	r3, r0
 800e830:	4a7a      	ldr	r2, [pc, #488]	; (800ea1c <udpServer_init+0x1fc>)
 800e832:	6013      	str	r3, [r2, #0]

	switch(EI_data.ProtocolType)
 800e834:	4b7a      	ldr	r3, [pc, #488]	; (800ea20 <udpServer_init+0x200>)
 800e836:	781b      	ldrb	r3, [r3, #0]
 800e838:	2b01      	cmp	r3, #1
 800e83a:	d002      	beq.n	800e842 <udpServer_init+0x22>
 800e83c:	2b02      	cmp	r3, #2
 800e83e:	d074      	beq.n	800e92a <udpServer_init+0x10a>
			printf("N-OK\n");
			udp_remove(upcb);
		}
		break;
	default:
		return;
 800e840:	e0e9      	b.n	800ea16 <udpServer_init+0x1f6>
		IP_ADDR4(&myIPADDR, EI_data.Hitachi_st.Self_IP[CARD_INDEX][0], EI_data.Hitachi_st.Self_IP[CARD_INDEX][1], EI_data.Hitachi_st.Self_IP[CARD_INDEX][2], EI_data.Hitachi_st.Self_IP[CARD_INDEX][3]);
 800e842:	4b77      	ldr	r3, [pc, #476]	; (800ea20 <udpServer_init+0x200>)
 800e844:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800e848:	061a      	lsls	r2, r3, #24
 800e84a:	4b75      	ldr	r3, [pc, #468]	; (800ea20 <udpServer_init+0x200>)
 800e84c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e850:	041b      	lsls	r3, r3, #16
 800e852:	431a      	orrs	r2, r3
 800e854:	4b72      	ldr	r3, [pc, #456]	; (800ea20 <udpServer_init+0x200>)
 800e856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e85a:	021b      	lsls	r3, r3, #8
 800e85c:	4313      	orrs	r3, r2
 800e85e:	4a70      	ldr	r2, [pc, #448]	; (800ea20 <udpServer_init+0x200>)
 800e860:	f892 203e 	ldrb.w	r2, [r2, #62]	; 0x3e
 800e864:	4313      	orrs	r3, r2
 800e866:	061a      	lsls	r2, r3, #24
 800e868:	4b6d      	ldr	r3, [pc, #436]	; (800ea20 <udpServer_init+0x200>)
 800e86a:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800e86e:	0619      	lsls	r1, r3, #24
 800e870:	4b6b      	ldr	r3, [pc, #428]	; (800ea20 <udpServer_init+0x200>)
 800e872:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e876:	041b      	lsls	r3, r3, #16
 800e878:	4319      	orrs	r1, r3
 800e87a:	4b69      	ldr	r3, [pc, #420]	; (800ea20 <udpServer_init+0x200>)
 800e87c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e880:	021b      	lsls	r3, r3, #8
 800e882:	430b      	orrs	r3, r1
 800e884:	4966      	ldr	r1, [pc, #408]	; (800ea20 <udpServer_init+0x200>)
 800e886:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800e88a:	430b      	orrs	r3, r1
 800e88c:	021b      	lsls	r3, r3, #8
 800e88e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e892:	431a      	orrs	r2, r3
 800e894:	4b62      	ldr	r3, [pc, #392]	; (800ea20 <udpServer_init+0x200>)
 800e896:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800e89a:	0619      	lsls	r1, r3, #24
 800e89c:	4b60      	ldr	r3, [pc, #384]	; (800ea20 <udpServer_init+0x200>)
 800e89e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8a2:	041b      	lsls	r3, r3, #16
 800e8a4:	4319      	orrs	r1, r3
 800e8a6:	4b5e      	ldr	r3, [pc, #376]	; (800ea20 <udpServer_init+0x200>)
 800e8a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8ac:	021b      	lsls	r3, r3, #8
 800e8ae:	430b      	orrs	r3, r1
 800e8b0:	495b      	ldr	r1, [pc, #364]	; (800ea20 <udpServer_init+0x200>)
 800e8b2:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800e8b6:	430b      	orrs	r3, r1
 800e8b8:	0a1b      	lsrs	r3, r3, #8
 800e8ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e8be:	431a      	orrs	r2, r3
 800e8c0:	4b57      	ldr	r3, [pc, #348]	; (800ea20 <udpServer_init+0x200>)
 800e8c2:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 800e8c6:	0619      	lsls	r1, r3, #24
 800e8c8:	4b55      	ldr	r3, [pc, #340]	; (800ea20 <udpServer_init+0x200>)
 800e8ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e8ce:	041b      	lsls	r3, r3, #16
 800e8d0:	4319      	orrs	r1, r3
 800e8d2:	4b53      	ldr	r3, [pc, #332]	; (800ea20 <udpServer_init+0x200>)
 800e8d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8d8:	021b      	lsls	r3, r3, #8
 800e8da:	430b      	orrs	r3, r1
 800e8dc:	4950      	ldr	r1, [pc, #320]	; (800ea20 <udpServer_init+0x200>)
 800e8de:	f891 103e 	ldrb.w	r1, [r1, #62]	; 0x3e
 800e8e2:	430b      	orrs	r3, r1
 800e8e4:	0e1b      	lsrs	r3, r3, #24
 800e8e6:	4313      	orrs	r3, r2
 800e8e8:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Hitachi_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800e8ea:	4b4c      	ldr	r3, [pc, #304]	; (800ea1c <udpServer_init+0x1fc>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	4a4c      	ldr	r2, [pc, #304]	; (800ea20 <udpServer_init+0x200>)
 800e8f0:	f8b2 20f8 	ldrh.w	r2, [r2, #248]	; 0xf8
 800e8f4:	4639      	mov	r1, r7
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f010 fef8 	bl	801f6ec <udp_bind>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800e900:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e904:	2b00      	cmp	r3, #0
 800e906:	d107      	bne.n	800e918 <udpServer_init+0xf8>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800e908:	4b44      	ldr	r3, [pc, #272]	; (800ea1c <udpServer_init+0x1fc>)
 800e90a:	681b      	ldr	r3, [r3, #0]
 800e90c:	2200      	movs	r2, #0
 800e90e:	4945      	ldr	r1, [pc, #276]	; (800ea24 <udpServer_init+0x204>)
 800e910:	4618      	mov	r0, r3
 800e912:	f010 ff73 	bl	801f7fc <udp_recv>
		break;
 800e916:	e07c      	b.n	800ea12 <udpServer_init+0x1f2>
			printf("N-OK\n");
 800e918:	4843      	ldr	r0, [pc, #268]	; (800ea28 <udpServer_init+0x208>)
 800e91a:	f013 fd63 	bl	80223e4 <puts>
			udp_remove(upcb);
 800e91e:	4b3f      	ldr	r3, [pc, #252]	; (800ea1c <udpServer_init+0x1fc>)
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	4618      	mov	r0, r3
 800e924:	f010 ff8a 	bl	801f83c <udp_remove>
		break;
 800e928:	e073      	b.n	800ea12 <udpServer_init+0x1f2>
		IP_ADDR4(&myIPADDR, EI_data.Siemens_st.Self_IP[CARD_INDEX][0], EI_data.Siemens_st.Self_IP[CARD_INDEX][1], EI_data.Siemens_st.Self_IP[CARD_INDEX][2], EI_data.Siemens_st.Self_IP[CARD_INDEX][3]);
 800e92a:	4b3d      	ldr	r3, [pc, #244]	; (800ea20 <udpServer_init+0x200>)
 800e92c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e930:	061a      	lsls	r2, r3, #24
 800e932:	4b3b      	ldr	r3, [pc, #236]	; (800ea20 <udpServer_init+0x200>)
 800e934:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e938:	041b      	lsls	r3, r3, #16
 800e93a:	431a      	orrs	r2, r3
 800e93c:	4b38      	ldr	r3, [pc, #224]	; (800ea20 <udpServer_init+0x200>)
 800e93e:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e942:	021b      	lsls	r3, r3, #8
 800e944:	4313      	orrs	r3, r2
 800e946:	4a36      	ldr	r2, [pc, #216]	; (800ea20 <udpServer_init+0x200>)
 800e948:	f892 22ac 	ldrb.w	r2, [r2, #684]	; 0x2ac
 800e94c:	4313      	orrs	r3, r2
 800e94e:	061a      	lsls	r2, r3, #24
 800e950:	4b33      	ldr	r3, [pc, #204]	; (800ea20 <udpServer_init+0x200>)
 800e952:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e956:	0619      	lsls	r1, r3, #24
 800e958:	4b31      	ldr	r3, [pc, #196]	; (800ea20 <udpServer_init+0x200>)
 800e95a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e95e:	041b      	lsls	r3, r3, #16
 800e960:	4319      	orrs	r1, r3
 800e962:	4b2f      	ldr	r3, [pc, #188]	; (800ea20 <udpServer_init+0x200>)
 800e964:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e968:	021b      	lsls	r3, r3, #8
 800e96a:	430b      	orrs	r3, r1
 800e96c:	492c      	ldr	r1, [pc, #176]	; (800ea20 <udpServer_init+0x200>)
 800e96e:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800e972:	430b      	orrs	r3, r1
 800e974:	021b      	lsls	r3, r3, #8
 800e976:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e97a:	431a      	orrs	r2, r3
 800e97c:	4b28      	ldr	r3, [pc, #160]	; (800ea20 <udpServer_init+0x200>)
 800e97e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e982:	0619      	lsls	r1, r3, #24
 800e984:	4b26      	ldr	r3, [pc, #152]	; (800ea20 <udpServer_init+0x200>)
 800e986:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e98a:	041b      	lsls	r3, r3, #16
 800e98c:	4319      	orrs	r1, r3
 800e98e:	4b24      	ldr	r3, [pc, #144]	; (800ea20 <udpServer_init+0x200>)
 800e990:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e994:	021b      	lsls	r3, r3, #8
 800e996:	430b      	orrs	r3, r1
 800e998:	4921      	ldr	r1, [pc, #132]	; (800ea20 <udpServer_init+0x200>)
 800e99a:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800e99e:	430b      	orrs	r3, r1
 800e9a0:	0a1b      	lsrs	r3, r3, #8
 800e9a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e9a6:	431a      	orrs	r2, r3
 800e9a8:	4b1d      	ldr	r3, [pc, #116]	; (800ea20 <udpServer_init+0x200>)
 800e9aa:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 800e9ae:	0619      	lsls	r1, r3, #24
 800e9b0:	4b1b      	ldr	r3, [pc, #108]	; (800ea20 <udpServer_init+0x200>)
 800e9b2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e9b6:	041b      	lsls	r3, r3, #16
 800e9b8:	4319      	orrs	r1, r3
 800e9ba:	4b19      	ldr	r3, [pc, #100]	; (800ea20 <udpServer_init+0x200>)
 800e9bc:	f893 32ab 	ldrb.w	r3, [r3, #683]	; 0x2ab
 800e9c0:	021b      	lsls	r3, r3, #8
 800e9c2:	430b      	orrs	r3, r1
 800e9c4:	4916      	ldr	r1, [pc, #88]	; (800ea20 <udpServer_init+0x200>)
 800e9c6:	f891 12ac 	ldrb.w	r1, [r1, #684]	; 0x2ac
 800e9ca:	430b      	orrs	r3, r1
 800e9cc:	0e1b      	lsrs	r3, r3, #24
 800e9ce:	4313      	orrs	r3, r2
 800e9d0:	603b      	str	r3, [r7, #0]
		err = udp_bind(upcb, &myIPADDR, EI_data.Siemens_st.Self_Listening_Port[CARD_INDEX]);  // 7 is the server UDP port
 800e9d2:	4b12      	ldr	r3, [pc, #72]	; (800ea1c <udpServer_init+0x1fc>)
 800e9d4:	681b      	ldr	r3, [r3, #0]
 800e9d6:	4a12      	ldr	r2, [pc, #72]	; (800ea20 <udpServer_init+0x200>)
 800e9d8:	f8b2 22dc 	ldrh.w	r2, [r2, #732]	; 0x2dc
 800e9dc:	4639      	mov	r1, r7
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f010 fe84 	bl	801f6ec <udp_bind>
 800e9e4:	4603      	mov	r3, r0
 800e9e6:	71fb      	strb	r3, [r7, #7]
		if(err == ERR_OK)
 800e9e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	d107      	bne.n	800ea00 <udpServer_init+0x1e0>
			udp_recv(upcb, UDP_Receive_Callback, NULL);
 800e9f0:	4b0a      	ldr	r3, [pc, #40]	; (800ea1c <udpServer_init+0x1fc>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	2200      	movs	r2, #0
 800e9f6:	490b      	ldr	r1, [pc, #44]	; (800ea24 <udpServer_init+0x204>)
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f010 feff 	bl	801f7fc <udp_recv>
		break;
 800e9fe:	e007      	b.n	800ea10 <udpServer_init+0x1f0>
			printf("N-OK\n");
 800ea00:	4809      	ldr	r0, [pc, #36]	; (800ea28 <udpServer_init+0x208>)
 800ea02:	f013 fcef 	bl	80223e4 <puts>
			udp_remove(upcb);
 800ea06:	4b05      	ldr	r3, [pc, #20]	; (800ea1c <udpServer_init+0x1fc>)
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	f010 ff16 	bl	801f83c <udp_remove>
		break;
 800ea10:	bf00      	nop
	}

	udpClient_connect();
 800ea12:	f000 f907 	bl	800ec24 <udpClient_connect>
	//	//	{
	//	//		printf("N-OK\n");
	//	//		udp_remove(upcb);
	//	//	}
	//	//	udpClient_connect();
}
 800ea16:	3708      	adds	r7, #8
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}
 800ea1c:	2000522c 	.word	0x2000522c
 800ea20:	20000304 	.word	0x20000304
 800ea24:	0800ea2d 	.word	0x0800ea2d
 800ea28:	080264f8 	.word	0x080264f8

0800ea2c <UDP_Receive_Callback>:

void UDP_Receive_Callback(void *arg, struct udp_pcb *upcb, struct pbuf *p, const ip_addr_t *addr, u16_t port)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b086      	sub	sp, #24
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	60f8      	str	r0, [r7, #12]
 800ea34:	60b9      	str	r1, [r7, #8]
 800ea36:	607a      	str	r2, [r7, #4]
 800ea38:	603b      	str	r3, [r7, #0]
	uint8_t Traverser = 0;
 800ea3a:	2300      	movs	r3, #0
 800ea3c:	75fb      	strb	r3, [r7, #23]
	uint16_t Length = 0;
 800ea3e:	2300      	movs	r3, #0
 800ea40:	82bb      	strh	r3, [r7, #20]
#if INTR_SOURCE_DETECT
	uint16_t Src_adrr = 0;
	uint8_t Get_src[4] = {0,0},Modified_data[4] = {0,};
#endif

	Source_IP = *addr;
 800ea42:	4a6e      	ldr	r2, [pc, #440]	; (800ebfc <UDP_Receive_Callback+0x1d0>)
 800ea44:	683b      	ldr	r3, [r7, #0]
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	6013      	str	r3, [r2, #0]
	Length = p->len;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	895b      	ldrh	r3, [r3, #10]
 800ea4e:	82bb      	strh	r3, [r7, #20]
	switch(EI_data.ProtocolType)
 800ea50:	4b6b      	ldr	r3, [pc, #428]	; (800ec00 <UDP_Receive_Callback+0x1d4>)
 800ea52:	781b      	ldrb	r3, [r3, #0]
 800ea54:	2b01      	cmp	r3, #1
 800ea56:	d029      	beq.n	800eaac <UDP_Receive_Callback+0x80>
 800ea58:	2b02      	cmp	r3, #2
 800ea5a:	d040      	beq.n	800eade <UDP_Receive_Callback+0xb2>
 800ea5c:	e064      	b.n	800eb28 <UDP_Receive_Callback+0xfc>
	{

	case HITACHI:
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800ea5e:	4b67      	ldr	r3, [pc, #412]	; (800ebfc <UDP_Receive_Callback+0x1d0>)
 800ea60:	681a      	ldr	r2, [r3, #0]
 800ea62:	7dfb      	ldrb	r3, [r7, #23]
 800ea64:	4967      	ldr	r1, [pc, #412]	; (800ec04 <UDP_Receive_Callback+0x1d8>)
 800ea66:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d11b      	bne.n	800eaa6 <UDP_Receive_Callback+0x7a>
			{
				printf("\nFromIP:%s\n",ipaddr_ntoa(addr));
 800ea6e:	6838      	ldr	r0, [r7, #0]
 800ea70:	f012 fb24 	bl	80210bc <ip4addr_ntoa>
 800ea74:	4603      	mov	r3, r0
 800ea76:	4619      	mov	r1, r3
 800ea78:	4863      	ldr	r0, [pc, #396]	; (800ec08 <UDP_Receive_Callback+0x1dc>)
 800ea7a:	f013 fc17 	bl	80222ac <iprintf>
				Recv_IP_List[Traverser/2] = *addr;
 800ea7e:	7dfb      	ldrb	r3, [r7, #23]
 800ea80:	085b      	lsrs	r3, r3, #1
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	4619      	mov	r1, r3
 800ea86:	4a61      	ldr	r2, [pc, #388]	; (800ec0c <UDP_Receive_Callback+0x1e0>)
 800ea88:	683b      	ldr	r3, [r7, #0]
 800ea8a:	681b      	ldr	r3, [r3, #0]
 800ea8c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
				Recv_IP_Index[Traverser/2] = (Traverser%2) + 1;
 800ea90:	7dfb      	ldrb	r3, [r7, #23]
 800ea92:	f003 0301 	and.w	r3, r3, #1
 800ea96:	b2db      	uxtb	r3, r3
 800ea98:	7dfa      	ldrb	r2, [r7, #23]
 800ea9a:	0852      	lsrs	r2, r2, #1
 800ea9c:	b2d2      	uxtb	r2, r2
 800ea9e:	3301      	adds	r3, #1
 800eaa0:	b2d9      	uxtb	r1, r3
 800eaa2:	4b5b      	ldr	r3, [pc, #364]	; (800ec10 <UDP_Receive_Callback+0x1e4>)
 800eaa4:	5499      	strb	r1, [r3, r2]
		for(;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800eaa6:	7dfb      	ldrb	r3, [r7, #23]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	75fb      	strb	r3, [r7, #23]
 800eaac:	4b54      	ldr	r3, [pc, #336]	; (800ec00 <UDP_Receive_Callback+0x1d4>)
 800eaae:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800eab2:	7dfa      	ldrb	r2, [r7, #23]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d3d2      	bcc.n	800ea5e <UDP_Receive_Callback+0x32>
				//break;
			}
		}
		if(Traverser>EI_data.Hitachi_st.No_of_IP_s)
 800eab8:	4b51      	ldr	r3, [pc, #324]	; (800ec00 <UDP_Receive_Callback+0x1d4>)
 800eaba:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800eabe:	7dfa      	ldrb	r2, [r7, #23]
 800eac0:	429a      	cmp	r2, r3
 800eac2:	d935      	bls.n	800eb30 <UDP_Receive_Callback+0x104>
		{
			pbuf_free(p);
 800eac4:	6878      	ldr	r0, [r7, #4]
 800eac6:	f00f feb9 	bl	801e83c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP:%s !\nIndex:%u\n",ipaddr_ntoa(addr),Traverser);
 800eaca:	6838      	ldr	r0, [r7, #0]
 800eacc:	f012 faf6 	bl	80210bc <ip4addr_ntoa>
 800ead0:	4601      	mov	r1, r0
 800ead2:	7dfb      	ldrb	r3, [r7, #23]
 800ead4:	461a      	mov	r2, r3
 800ead6:	484f      	ldr	r0, [pc, #316]	; (800ec14 <UDP_Receive_Callback+0x1e8>)
 800ead8:	f013 fbe8 	bl	80222ac <iprintf>
			return;
 800eadc:	e08a      	b.n	800ebf4 <UDP_Receive_Callback+0x1c8>
		}
		break;
	case SIEMENS:
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800eade:	2300      	movs	r3, #0
 800eae0:	75fb      	strb	r3, [r7, #23]
 800eae2:	e00a      	b.n	800eafa <UDP_Receive_Callback+0xce>
		{
			if( (Source_IP.addr) == (remote_ip[Traverser].addr) )
 800eae4:	4b45      	ldr	r3, [pc, #276]	; (800ebfc <UDP_Receive_Callback+0x1d0>)
 800eae6:	681a      	ldr	r2, [r3, #0]
 800eae8:	7dfb      	ldrb	r3, [r7, #23]
 800eaea:	4946      	ldr	r1, [pc, #280]	; (800ec04 <UDP_Receive_Callback+0x1d8>)
 800eaec:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800eaf0:	429a      	cmp	r2, r3
 800eaf2:	d009      	beq.n	800eb08 <UDP_Receive_Callback+0xdc>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800eaf4:	7dfb      	ldrb	r3, [r7, #23]
 800eaf6:	3301      	adds	r3, #1
 800eaf8:	75fb      	strb	r3, [r7, #23]
 800eafa:	4b41      	ldr	r3, [pc, #260]	; (800ec00 <UDP_Receive_Callback+0x1d4>)
 800eafc:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb00:	7dfa      	ldrb	r2, [r7, #23]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d3ee      	bcc.n	800eae4 <UDP_Receive_Callback+0xb8>
 800eb06:	e000      	b.n	800eb0a <UDP_Receive_Callback+0xde>
			{
				break;
 800eb08:	bf00      	nop
			}
		}
		if(Traverser>EI_data.Siemens_st.No_of_IP_s)
 800eb0a:	4b3d      	ldr	r3, [pc, #244]	; (800ec00 <UDP_Receive_Callback+0x1d4>)
 800eb0c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb10:	7dfa      	ldrb	r2, [r7, #23]
 800eb12:	429a      	cmp	r2, r3
 800eb14:	d90e      	bls.n	800eb34 <UDP_Receive_Callback+0x108>
		{
			pbuf_free(p);
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	f00f fe90 	bl	801e83c <pbuf_free>
			printf("\nPacket Rejected-Unknown IP!\nIndex:%u\n",Traverser);
 800eb1c:	7dfb      	ldrb	r3, [r7, #23]
 800eb1e:	4619      	mov	r1, r3
 800eb20:	483d      	ldr	r0, [pc, #244]	; (800ec18 <UDP_Receive_Callback+0x1ec>)
 800eb22:	f013 fbc3 	bl	80222ac <iprintf>
			return;
 800eb26:	e065      	b.n	800ebf4 <UDP_Receive_Callback+0x1c8>
		}
		break;
	default:
		pbuf_free(p);
 800eb28:	6878      	ldr	r0, [r7, #4]
 800eb2a:	f00f fe87 	bl	801e83c <pbuf_free>
		return;
 800eb2e:	e061      	b.n	800ebf4 <UDP_Receive_Callback+0x1c8>
		break;
 800eb30:	bf00      	nop
 800eb32:	e000      	b.n	800eb36 <UDP_Receive_Callback+0x10a>
		break;
 800eb34:	bf00      	nop
	}

	switch(EI_data.ProtocolType)
 800eb36:	4b32      	ldr	r3, [pc, #200]	; (800ec00 <UDP_Receive_Callback+0x1d4>)
 800eb38:	781b      	ldrb	r3, [r3, #0]
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d002      	beq.n	800eb44 <UDP_Receive_Callback+0x118>
 800eb3e:	2b02      	cmp	r3, #2
 800eb40:	d049      	beq.n	800ebd6 <UDP_Receive_Callback+0x1aa>
		Ethernet_Circle_buff_st.Write_end = Length;
		break;

	default:
		/* Do Nothing */
		break;
 800eb42:	e054      	b.n	800ebee <UDP_Receive_Callback+0x1c2>
		Interrupt_clock = HAL_GetTick();
 800eb44:	f006 fba8 	bl	8015298 <HAL_GetTick>
 800eb48:	4603      	mov	r3, r0
 800eb4a:	4a34      	ldr	r2, [pc, #208]	; (800ec1c <UDP_Receive_Callback+0x1f0>)
 800eb4c:	6013      	str	r3, [r2, #0]
		if( (Ethernet_Circle_buff_st.Write_end + Length ) > ETH_MAX_SIZE)
 800eb4e:	4b34      	ldr	r3, [pc, #208]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800eb50:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800eb54:	461a      	mov	r2, r3
 800eb56:	8abb      	ldrh	r3, [r7, #20]
 800eb58:	4413      	add	r3, r2
 800eb5a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800eb5e:	dd24      	ble.n	800ebaa <UDP_Receive_Callback+0x17e>
			uint16_t Packets_to_copy_1 = (ETH_MAX_SIZE -Ethernet_Circle_buff_st.Write_end);
 800eb60:	4b2f      	ldr	r3, [pc, #188]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800eb62:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800eb66:	f5c3 63c0 	rsb	r3, r3, #1536	; 0x600
 800eb6a:	827b      	strh	r3, [r7, #18]
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Packets_to_copy_1);
 800eb6c:	4b2c      	ldr	r3, [pc, #176]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800eb6e:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800eb72:	461a      	mov	r2, r3
 800eb74:	4b2a      	ldr	r3, [pc, #168]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800eb76:	18d0      	adds	r0, r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	685b      	ldr	r3, [r3, #4]
 800eb7c:	8a7a      	ldrh	r2, [r7, #18]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	f013 fa84 	bl	802208c <memcpy>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[0],&((char *)p->payload)[Packets_to_copy_1],(Length-Packets_to_copy_1));
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	685a      	ldr	r2, [r3, #4]
 800eb88:	8a7b      	ldrh	r3, [r7, #18]
 800eb8a:	18d1      	adds	r1, r2, r3
 800eb8c:	8aba      	ldrh	r2, [r7, #20]
 800eb8e:	8a7b      	ldrh	r3, [r7, #18]
 800eb90:	1ad3      	subs	r3, r2, r3
 800eb92:	461a      	mov	r2, r3
 800eb94:	4822      	ldr	r0, [pc, #136]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800eb96:	f013 fa79 	bl	802208c <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Length-Packets_to_copy_1);
 800eb9a:	8aba      	ldrh	r2, [r7, #20]
 800eb9c:	8a7b      	ldrh	r3, [r7, #18]
 800eb9e:	1ad3      	subs	r3, r2, r3
 800eba0:	b29a      	uxth	r2, r3
 800eba2:	4b1f      	ldr	r3, [pc, #124]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800eba4:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800eba8:	e021      	b.n	800ebee <UDP_Receive_Callback+0x1c2>
			memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Write_end],(char *)p->payload,Length);
 800ebaa:	4b1d      	ldr	r3, [pc, #116]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800ebac:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ebb0:	461a      	mov	r2, r3
 800ebb2:	4b1b      	ldr	r3, [pc, #108]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800ebb4:	18d0      	adds	r0, r2, r3
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	685b      	ldr	r3, [r3, #4]
 800ebba:	8aba      	ldrh	r2, [r7, #20]
 800ebbc:	4619      	mov	r1, r3
 800ebbe:	f013 fa65 	bl	802208c <memcpy>
			Ethernet_Circle_buff_st.Write_end = (Ethernet_Circle_buff_st.Write_end + Length);
 800ebc2:	4b17      	ldr	r3, [pc, #92]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800ebc4:	f8b3 2602 	ldrh.w	r2, [r3, #1538]	; 0x602
 800ebc8:	8abb      	ldrh	r3, [r7, #20]
 800ebca:	4413      	add	r3, r2
 800ebcc:	b29a      	uxth	r2, r3
 800ebce:	4b14      	ldr	r3, [pc, #80]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800ebd0:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		break;
 800ebd4:	e00b      	b.n	800ebee <UDP_Receive_Callback+0x1c2>
		memcpy(&Ethernet_Circle_buff_st.Ethernet_Buffers,(char *)p->payload,Length);
 800ebd6:	687b      	ldr	r3, [r7, #4]
 800ebd8:	685b      	ldr	r3, [r3, #4]
 800ebda:	8aba      	ldrh	r2, [r7, #20]
 800ebdc:	4619      	mov	r1, r3
 800ebde:	4810      	ldr	r0, [pc, #64]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800ebe0:	f013 fa54 	bl	802208c <memcpy>
		Ethernet_Circle_buff_st.Write_end = Length;
 800ebe4:	4a0e      	ldr	r2, [pc, #56]	; (800ec20 <UDP_Receive_Callback+0x1f4>)
 800ebe6:	8abb      	ldrh	r3, [r7, #20]
 800ebe8:	f8a2 3602 	strh.w	r3, [r2, #1538]	; 0x602
		break;
 800ebec:	bf00      	nop
	}


	pbuf_free(p);
 800ebee:	6878      	ldr	r0, [r7, #4]
 800ebf0:	f00f fe24 	bl	801e83c <pbuf_free>
}
 800ebf4:	3718      	adds	r7, #24
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	bd80      	pop	{r7, pc}
 800ebfa:	bf00      	nop
 800ebfc:	20005200 	.word	0x20005200
 800ec00:	20000304 	.word	0x20000304
 800ec04:	200051b0 	.word	0x200051b0
 800ec08:	08026500 	.word	0x08026500
 800ec0c:	20001058 	.word	0x20001058
 800ec10:	20001080 	.word	0x20001080
 800ec14:	0802650c 	.word	0x0802650c
 800ec18:	08026538 	.word	0x08026538
 800ec1c:	20000e3c 	.word	0x20000e3c
 800ec20:	20004bac 	.word	0x20004bac

0800ec24 <udpClient_connect>:
void udpClient_connect(void)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
	err_t err;
	uint8_t Traverser = 0;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	71fb      	strb	r3, [r7, #7]

	switch(EI_data.ProtocolType)
 800ec2e:	4ba6      	ldr	r3, [pc, #664]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec30:	781b      	ldrb	r3, [r3, #0]
 800ec32:	2b01      	cmp	r3, #1
 800ec34:	d003      	beq.n	800ec3e <udpClient_connect+0x1a>
 800ec36:	2b02      	cmp	r3, #2
 800ec38:	f000 80a1 	beq.w	800ed7e <udpClient_connect+0x15a>
			//			}
		}
		break;

	default:
		return;
 800ec3c:	e13f      	b.n	800eebe <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ec3e:	2300      	movs	r3, #0
 800ec40:	71fb      	strb	r3, [r7, #7]
 800ec42:	e094      	b.n	800ed6e <udpClient_connect+0x14a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Hitachi_st.Source_IP[CARD_INDEX][Traverser][3]);
 800ec44:	79fb      	ldrb	r3, [r7, #7]
 800ec46:	4aa0      	ldr	r2, [pc, #640]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec48:	3326      	adds	r3, #38	; 0x26
 800ec4a:	009b      	lsls	r3, r3, #2
 800ec4c:	4413      	add	r3, r2
 800ec4e:	78db      	ldrb	r3, [r3, #3]
 800ec50:	061a      	lsls	r2, r3, #24
 800ec52:	79fb      	ldrb	r3, [r7, #7]
 800ec54:	499c      	ldr	r1, [pc, #624]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec56:	009b      	lsls	r3, r3, #2
 800ec58:	440b      	add	r3, r1
 800ec5a:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ec5e:	041b      	lsls	r3, r3, #16
 800ec60:	431a      	orrs	r2, r3
 800ec62:	79fb      	ldrb	r3, [r7, #7]
 800ec64:	4998      	ldr	r1, [pc, #608]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec66:	009b      	lsls	r3, r3, #2
 800ec68:	440b      	add	r3, r1
 800ec6a:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ec6e:	021b      	lsls	r3, r3, #8
 800ec70:	431a      	orrs	r2, r3
 800ec72:	79fb      	ldrb	r3, [r7, #7]
 800ec74:	4994      	ldr	r1, [pc, #592]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec76:	009b      	lsls	r3, r3, #2
 800ec78:	440b      	add	r3, r1
 800ec7a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ec7e:	4313      	orrs	r3, r2
 800ec80:	061a      	lsls	r2, r3, #24
 800ec82:	79fb      	ldrb	r3, [r7, #7]
 800ec84:	4990      	ldr	r1, [pc, #576]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec86:	3326      	adds	r3, #38	; 0x26
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	440b      	add	r3, r1
 800ec8c:	78db      	ldrb	r3, [r3, #3]
 800ec8e:	0619      	lsls	r1, r3, #24
 800ec90:	79fb      	ldrb	r3, [r7, #7]
 800ec92:	488d      	ldr	r0, [pc, #564]	; (800eec8 <udpClient_connect+0x2a4>)
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4403      	add	r3, r0
 800ec98:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ec9c:	041b      	lsls	r3, r3, #16
 800ec9e:	4319      	orrs	r1, r3
 800eca0:	79fb      	ldrb	r3, [r7, #7]
 800eca2:	4889      	ldr	r0, [pc, #548]	; (800eec8 <udpClient_connect+0x2a4>)
 800eca4:	009b      	lsls	r3, r3, #2
 800eca6:	4403      	add	r3, r0
 800eca8:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	4319      	orrs	r1, r3
 800ecb0:	79fb      	ldrb	r3, [r7, #7]
 800ecb2:	4885      	ldr	r0, [pc, #532]	; (800eec8 <udpClient_connect+0x2a4>)
 800ecb4:	009b      	lsls	r3, r3, #2
 800ecb6:	4403      	add	r3, r0
 800ecb8:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ecbc:	430b      	orrs	r3, r1
 800ecbe:	021b      	lsls	r3, r3, #8
 800ecc0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ecc4:	431a      	orrs	r2, r3
 800ecc6:	79fb      	ldrb	r3, [r7, #7]
 800ecc8:	497f      	ldr	r1, [pc, #508]	; (800eec8 <udpClient_connect+0x2a4>)
 800ecca:	3326      	adds	r3, #38	; 0x26
 800eccc:	009b      	lsls	r3, r3, #2
 800ecce:	440b      	add	r3, r1
 800ecd0:	78db      	ldrb	r3, [r3, #3]
 800ecd2:	0619      	lsls	r1, r3, #24
 800ecd4:	79fb      	ldrb	r3, [r7, #7]
 800ecd6:	487c      	ldr	r0, [pc, #496]	; (800eec8 <udpClient_connect+0x2a4>)
 800ecd8:	009b      	lsls	r3, r3, #2
 800ecda:	4403      	add	r3, r0
 800ecdc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ece0:	041b      	lsls	r3, r3, #16
 800ece2:	4319      	orrs	r1, r3
 800ece4:	79fb      	ldrb	r3, [r7, #7]
 800ece6:	4878      	ldr	r0, [pc, #480]	; (800eec8 <udpClient_connect+0x2a4>)
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	4403      	add	r3, r0
 800ecec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ecf0:	021b      	lsls	r3, r3, #8
 800ecf2:	4319      	orrs	r1, r3
 800ecf4:	79fb      	ldrb	r3, [r7, #7]
 800ecf6:	4874      	ldr	r0, [pc, #464]	; (800eec8 <udpClient_connect+0x2a4>)
 800ecf8:	009b      	lsls	r3, r3, #2
 800ecfa:	4403      	add	r3, r0
 800ecfc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ed00:	430b      	orrs	r3, r1
 800ed02:	0a1b      	lsrs	r3, r3, #8
 800ed04:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ed08:	ea42 0103 	orr.w	r1, r2, r3
 800ed0c:	79fb      	ldrb	r3, [r7, #7]
 800ed0e:	4a6e      	ldr	r2, [pc, #440]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed10:	3326      	adds	r3, #38	; 0x26
 800ed12:	009b      	lsls	r3, r3, #2
 800ed14:	4413      	add	r3, r2
 800ed16:	78db      	ldrb	r3, [r3, #3]
 800ed18:	061a      	lsls	r2, r3, #24
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	486a      	ldr	r0, [pc, #424]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed1e:	009b      	lsls	r3, r3, #2
 800ed20:	4403      	add	r3, r0
 800ed22:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800ed26:	041b      	lsls	r3, r3, #16
 800ed28:	431a      	orrs	r2, r3
 800ed2a:	79fb      	ldrb	r3, [r7, #7]
 800ed2c:	4866      	ldr	r0, [pc, #408]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed2e:	009b      	lsls	r3, r3, #2
 800ed30:	4403      	add	r3, r0
 800ed32:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800ed36:	021b      	lsls	r3, r3, #8
 800ed38:	431a      	orrs	r2, r3
 800ed3a:	79fb      	ldrb	r3, [r7, #7]
 800ed3c:	4862      	ldr	r0, [pc, #392]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed3e:	009b      	lsls	r3, r3, #2
 800ed40:	4403      	add	r3, r0
 800ed42:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800ed46:	4313      	orrs	r3, r2
 800ed48:	0e1a      	lsrs	r2, r3, #24
 800ed4a:	79fb      	ldrb	r3, [r7, #7]
 800ed4c:	430a      	orrs	r2, r1
 800ed4e:	495f      	ldr	r1, [pc, #380]	; (800eecc <udpClient_connect+0x2a8>)
 800ed50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Hitachi_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800ed54:	79fb      	ldrb	r3, [r7, #7]
 800ed56:	79fa      	ldrb	r2, [r7, #7]
 800ed58:	495b      	ldr	r1, [pc, #364]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed5a:	009b      	lsls	r3, r3, #2
 800ed5c:	440b      	add	r3, r1
 800ed5e:	f8b3 114c 	ldrh.w	r1, [r3, #332]	; 0x14c
 800ed62:	4b5b      	ldr	r3, [pc, #364]	; (800eed0 <udpClient_connect+0x2ac>)
 800ed64:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Hitachi_st.No_of_IP_s;++Traverser)
 800ed68:	79fb      	ldrb	r3, [r7, #7]
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	71fb      	strb	r3, [r7, #7]
 800ed6e:	4b56      	ldr	r3, [pc, #344]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed70:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800ed74:	79fa      	ldrb	r2, [r7, #7]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	f4ff af64 	bcc.w	800ec44 <udpClient_connect+0x20>
		break;
 800ed7c:	e09f      	b.n	800eebe <udpClient_connect+0x29a>
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800ed7e:	2300      	movs	r3, #0
 800ed80:	71fb      	strb	r3, [r7, #7]
 800ed82:	e094      	b.n	800eeae <udpClient_connect+0x28a>
			IP_ADDR4(&remote_ip[Traverser], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][0], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][1], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][2], EI_data.Siemens_st.Source_IP[CARD_INDEX][Traverser][3]);
 800ed84:	79fb      	ldrb	r3, [r7, #7]
 800ed86:	4a50      	ldr	r2, [pc, #320]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed88:	33b2      	adds	r3, #178	; 0xb2
 800ed8a:	009b      	lsls	r3, r3, #2
 800ed8c:	4413      	add	r3, r2
 800ed8e:	785b      	ldrb	r3, [r3, #1]
 800ed90:	061a      	lsls	r2, r3, #24
 800ed92:	79fb      	ldrb	r3, [r7, #7]
 800ed94:	494c      	ldr	r1, [pc, #304]	; (800eec8 <udpClient_connect+0x2a4>)
 800ed96:	009b      	lsls	r3, r3, #2
 800ed98:	440b      	add	r3, r1
 800ed9a:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800ed9e:	041b      	lsls	r3, r3, #16
 800eda0:	431a      	orrs	r2, r3
 800eda2:	79fb      	ldrb	r3, [r7, #7]
 800eda4:	4948      	ldr	r1, [pc, #288]	; (800eec8 <udpClient_connect+0x2a4>)
 800eda6:	009b      	lsls	r3, r3, #2
 800eda8:	440b      	add	r3, r1
 800edaa:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800edae:	021b      	lsls	r3, r3, #8
 800edb0:	431a      	orrs	r2, r3
 800edb2:	79fb      	ldrb	r3, [r7, #7]
 800edb4:	4944      	ldr	r1, [pc, #272]	; (800eec8 <udpClient_connect+0x2a4>)
 800edb6:	009b      	lsls	r3, r3, #2
 800edb8:	440b      	add	r3, r1
 800edba:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800edbe:	4313      	orrs	r3, r2
 800edc0:	061a      	lsls	r2, r3, #24
 800edc2:	79fb      	ldrb	r3, [r7, #7]
 800edc4:	4940      	ldr	r1, [pc, #256]	; (800eec8 <udpClient_connect+0x2a4>)
 800edc6:	33b2      	adds	r3, #178	; 0xb2
 800edc8:	009b      	lsls	r3, r3, #2
 800edca:	440b      	add	r3, r1
 800edcc:	785b      	ldrb	r3, [r3, #1]
 800edce:	0619      	lsls	r1, r3, #24
 800edd0:	79fb      	ldrb	r3, [r7, #7]
 800edd2:	483d      	ldr	r0, [pc, #244]	; (800eec8 <udpClient_connect+0x2a4>)
 800edd4:	009b      	lsls	r3, r3, #2
 800edd6:	4403      	add	r3, r0
 800edd8:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800eddc:	041b      	lsls	r3, r3, #16
 800edde:	4319      	orrs	r1, r3
 800ede0:	79fb      	ldrb	r3, [r7, #7]
 800ede2:	4839      	ldr	r0, [pc, #228]	; (800eec8 <udpClient_connect+0x2a4>)
 800ede4:	009b      	lsls	r3, r3, #2
 800ede6:	4403      	add	r3, r0
 800ede8:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800edec:	021b      	lsls	r3, r3, #8
 800edee:	4319      	orrs	r1, r3
 800edf0:	79fb      	ldrb	r3, [r7, #7]
 800edf2:	4835      	ldr	r0, [pc, #212]	; (800eec8 <udpClient_connect+0x2a4>)
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	4403      	add	r3, r0
 800edf8:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800edfc:	430b      	orrs	r3, r1
 800edfe:	021b      	lsls	r3, r3, #8
 800ee00:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800ee04:	431a      	orrs	r2, r3
 800ee06:	79fb      	ldrb	r3, [r7, #7]
 800ee08:	492f      	ldr	r1, [pc, #188]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee0a:	33b2      	adds	r3, #178	; 0xb2
 800ee0c:	009b      	lsls	r3, r3, #2
 800ee0e:	440b      	add	r3, r1
 800ee10:	785b      	ldrb	r3, [r3, #1]
 800ee12:	0619      	lsls	r1, r3, #24
 800ee14:	79fb      	ldrb	r3, [r7, #7]
 800ee16:	482c      	ldr	r0, [pc, #176]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee18:	009b      	lsls	r3, r3, #2
 800ee1a:	4403      	add	r3, r0
 800ee1c:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800ee20:	041b      	lsls	r3, r3, #16
 800ee22:	4319      	orrs	r1, r3
 800ee24:	79fb      	ldrb	r3, [r7, #7]
 800ee26:	4828      	ldr	r0, [pc, #160]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee28:	009b      	lsls	r3, r3, #2
 800ee2a:	4403      	add	r3, r0
 800ee2c:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800ee30:	021b      	lsls	r3, r3, #8
 800ee32:	4319      	orrs	r1, r3
 800ee34:	79fb      	ldrb	r3, [r7, #7]
 800ee36:	4824      	ldr	r0, [pc, #144]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee38:	009b      	lsls	r3, r3, #2
 800ee3a:	4403      	add	r3, r0
 800ee3c:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800ee40:	430b      	orrs	r3, r1
 800ee42:	0a1b      	lsrs	r3, r3, #8
 800ee44:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ee48:	ea42 0103 	orr.w	r1, r2, r3
 800ee4c:	79fb      	ldrb	r3, [r7, #7]
 800ee4e:	4a1e      	ldr	r2, [pc, #120]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee50:	33b2      	adds	r3, #178	; 0xb2
 800ee52:	009b      	lsls	r3, r3, #2
 800ee54:	4413      	add	r3, r2
 800ee56:	785b      	ldrb	r3, [r3, #1]
 800ee58:	061a      	lsls	r2, r3, #24
 800ee5a:	79fb      	ldrb	r3, [r7, #7]
 800ee5c:	481a      	ldr	r0, [pc, #104]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee5e:	009b      	lsls	r3, r3, #2
 800ee60:	4403      	add	r3, r0
 800ee62:	f893 32ca 	ldrb.w	r3, [r3, #714]	; 0x2ca
 800ee66:	041b      	lsls	r3, r3, #16
 800ee68:	431a      	orrs	r2, r3
 800ee6a:	79fb      	ldrb	r3, [r7, #7]
 800ee6c:	4816      	ldr	r0, [pc, #88]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee6e:	009b      	lsls	r3, r3, #2
 800ee70:	4403      	add	r3, r0
 800ee72:	f893 32cb 	ldrb.w	r3, [r3, #715]	; 0x2cb
 800ee76:	021b      	lsls	r3, r3, #8
 800ee78:	431a      	orrs	r2, r3
 800ee7a:	79fb      	ldrb	r3, [r7, #7]
 800ee7c:	4812      	ldr	r0, [pc, #72]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee7e:	009b      	lsls	r3, r3, #2
 800ee80:	4403      	add	r3, r0
 800ee82:	f893 32cc 	ldrb.w	r3, [r3, #716]	; 0x2cc
 800ee86:	4313      	orrs	r3, r2
 800ee88:	0e1a      	lsrs	r2, r3, #24
 800ee8a:	79fb      	ldrb	r3, [r7, #7]
 800ee8c:	430a      	orrs	r2, r1
 800ee8e:	490f      	ldr	r1, [pc, #60]	; (800eecc <udpClient_connect+0x2a8>)
 800ee90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			des_port[Traverser] = EI_data.Siemens_st.PORTS[CARD_INDEX][Traverser][RX_PORT];
 800ee94:	79fb      	ldrb	r3, [r7, #7]
 800ee96:	79fa      	ldrb	r2, [r7, #7]
 800ee98:	490b      	ldr	r1, [pc, #44]	; (800eec8 <udpClient_connect+0x2a4>)
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	440b      	add	r3, r1
 800ee9e:	f8b3 12f0 	ldrh.w	r1, [r3, #752]	; 0x2f0
 800eea2:	4b0b      	ldr	r3, [pc, #44]	; (800eed0 <udpClient_connect+0x2ac>)
 800eea4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		for(Traverser = 0;Traverser<EI_data.Siemens_st.No_of_IP_s;++Traverser)
 800eea8:	79fb      	ldrb	r3, [r7, #7]
 800eeaa:	3301      	adds	r3, #1
 800eeac:	71fb      	strb	r3, [r7, #7]
 800eeae:	4b06      	ldr	r3, [pc, #24]	; (800eec8 <udpClient_connect+0x2a4>)
 800eeb0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eeb4:	79fa      	ldrb	r2, [r7, #7]
 800eeb6:	429a      	cmp	r2, r3
 800eeb8:	f4ff af64 	bcc.w	800ed84 <udpClient_connect+0x160>
		break;
 800eebc:	bf00      	nop
	}
}
 800eebe:	370c      	adds	r7, #12
 800eec0:	46bd      	mov	sp, r7
 800eec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eec6:	4770      	bx	lr
 800eec8:	20000304 	.word	0x20000304
 800eecc:	200051b0 	.word	0x200051b0
 800eed0:	20005204 	.word	0x20005204

0800eed4 <udpClient_send>:
void udpClient_send(uint8_t *data,uint8_t len,const ip_addr_t IP_addr)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b086      	sub	sp, #24
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	60f8      	str	r0, [r7, #12]
 800eedc:	460b      	mov	r3, r1
 800eede:	607a      	str	r2, [r7, #4]
 800eee0:	72fb      	strb	r3, [r7, #11]
	struct pbuf *txBuf;
	err_t udp_sendto_error = 0;
 800eee2:	2300      	movs	r3, #0
 800eee4:	75fb      	strb	r3, [r7, #23]
	txBuf = pbuf_alloc(PBUF_TRANSPORT, len, PBUF_RAM);
 800eee6:	7afb      	ldrb	r3, [r7, #11]
 800eee8:	b29b      	uxth	r3, r3
 800eeea:	f44f 7220 	mov.w	r2, #640	; 0x280
 800eeee:	4619      	mov	r1, r3
 800eef0:	2036      	movs	r0, #54	; 0x36
 800eef2:	f00f f9c1 	bl	801e278 <pbuf_alloc>
 800eef6:	6138      	str	r0, [r7, #16]

	//	char *SendingIP = ipaddr_ntoa(&IP_addr);
	//
	//	printf("\nSent IP:%s\n",SendingIP);

	if (txBuf != NULL)
 800eef8:	693b      	ldr	r3, [r7, #16]
 800eefa:	2b00      	cmp	r3, #0
 800eefc:	d01d      	beq.n	800ef3a <udpClient_send+0x66>
	{
		pbuf_take(txBuf, data, len);
 800eefe:	7afb      	ldrb	r3, [r7, #11]
 800ef00:	b29b      	uxth	r3, r3
 800ef02:	461a      	mov	r2, r3
 800ef04:	68f9      	ldr	r1, [r7, #12]
 800ef06:	6938      	ldr	r0, [r7, #16]
 800ef08:	f00f fe92 	bl	801ec30 <pbuf_take>
		udp_sendto_error = udp_sendto(upcb, txBuf, &IP_addr,des_port[0]);
 800ef0c:	4b0d      	ldr	r3, [pc, #52]	; (800ef44 <udpClient_send+0x70>)
 800ef0e:	6818      	ldr	r0, [r3, #0]
 800ef10:	4b0d      	ldr	r3, [pc, #52]	; (800ef48 <udpClient_send+0x74>)
 800ef12:	881b      	ldrh	r3, [r3, #0]
 800ef14:	1d3a      	adds	r2, r7, #4
 800ef16:	6939      	ldr	r1, [r7, #16]
 800ef18:	f010 fa32 	bl	801f380 <udp_sendto>
 800ef1c:	4603      	mov	r3, r0
 800ef1e:	75fb      	strb	r3, [r7, #23]
		if(udp_sendto_error != ERR_OK)
 800ef20:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d005      	beq.n	800ef34 <udpClient_send+0x60>
		{
			printf("Packet Sending Failed:%d\nTrying again\n",udp_sendto_error);
 800ef28:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ef2c:	4619      	mov	r1, r3
 800ef2e:	4807      	ldr	r0, [pc, #28]	; (800ef4c <udpClient_send+0x78>)
 800ef30:	f013 f9bc 	bl	80222ac <iprintf>
		//				printf("\n------------------------------------Differnece :%lu\n",HAL_Elaps_Ticks(Interrupt_clock));
		//				printf("Packet Sent Success\n");
		//				break;
		//			}
		//		}
		pbuf_free(txBuf);
 800ef34:	6938      	ldr	r0, [r7, #16]
 800ef36:	f00f fc81 	bl	801e83c <pbuf_free>
	}
}
 800ef3a:	bf00      	nop
 800ef3c:	3718      	adds	r7, #24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bd80      	pop	{r7, pc}
 800ef42:	bf00      	nop
 800ef44:	2000522c 	.word	0x2000522c
 800ef48:	20005204 	.word	0x20005204
 800ef4c:	08026560 	.word	0x08026560

0800ef50 <Is_There_EI_Data>:

uint8_t Is_There_EI_Data(void)
{
 800ef50:	b480      	push	{r7}
 800ef52:	af00      	add	r7, sp, #0
	if(Ethernet_Circle_buff_st.Read_end != Ethernet_Circle_buff_st.Write_end)
 800ef54:	4b07      	ldr	r3, [pc, #28]	; (800ef74 <Is_There_EI_Data+0x24>)
 800ef56:	f8b3 2600 	ldrh.w	r2, [r3, #1536]	; 0x600
 800ef5a:	4b06      	ldr	r3, [pc, #24]	; (800ef74 <Is_There_EI_Data+0x24>)
 800ef5c:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800ef60:	429a      	cmp	r2, r3
 800ef62:	d001      	beq.n	800ef68 <Is_There_EI_Data+0x18>
	{
		return AVAILABLE;
 800ef64:	2301      	movs	r3, #1
 800ef66:	e000      	b.n	800ef6a <Is_There_EI_Data+0x1a>
	}
	else
	{
		return NOT_AVAILABLE;
 800ef68:	2300      	movs	r3, #0
	}
}
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	46bd      	mov	sp, r7
 800ef6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef72:	4770      	bx	lr
 800ef74:	20004bac 	.word	0x20004bac

0800ef78 <Get_Eth_Byte>:

uint8_t Get_Eth_Byte(void)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
	uint8_t Data = Ethernet_Circle_buff_st.Ethernet_Buffers[Ethernet_Circle_buff_st.Read_end++];
 800ef7e:	4b15      	ldr	r3, [pc, #84]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800ef80:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	b291      	uxth	r1, r2
 800ef88:	4a12      	ldr	r2, [pc, #72]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800ef8a:	f8a2 1600 	strh.w	r1, [r2, #1536]	; 0x600
 800ef8e:	461a      	mov	r2, r3
 800ef90:	4b10      	ldr	r3, [pc, #64]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800ef92:	5c9b      	ldrb	r3, [r3, r2]
 800ef94:	71fb      	strb	r3, [r7, #7]
	if(Ethernet_Circle_buff_st.Read_end >= ETH_MAX_SIZE)
 800ef96:	4b0f      	ldr	r3, [pc, #60]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800ef98:	f8b3 3600 	ldrh.w	r3, [r3, #1536]	; 0x600
 800ef9c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800efa0:	d313      	bcc.n	800efca <Get_Eth_Byte+0x52>
	{
		Ethernet_Circle_buff_st.Read_end = 0;
 800efa2:	4b0c      	ldr	r3, [pc, #48]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	f8a3 2600 	strh.w	r2, [r3, #1536]	; 0x600
		if(Ethernet_Circle_buff_st.Write_end == ETH_MAX_SIZE)
 800efaa:	4b0a      	ldr	r3, [pc, #40]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800efac:	f8b3 3602 	ldrh.w	r3, [r3, #1538]	; 0x602
 800efb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800efb4:	d109      	bne.n	800efca <Get_Eth_Byte+0x52>
		{
			memset(Ethernet_Circle_buff_st.Ethernet_Buffers,0,ETH_MAX_SIZE);
 800efb6:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800efba:	2100      	movs	r1, #0
 800efbc:	4805      	ldr	r0, [pc, #20]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800efbe:	f013 f88d 	bl	80220dc <memset>
			Ethernet_Circle_buff_st.Write_end = 0;
 800efc2:	4b04      	ldr	r3, [pc, #16]	; (800efd4 <Get_Eth_Byte+0x5c>)
 800efc4:	2200      	movs	r2, #0
 800efc6:	f8a3 2602 	strh.w	r2, [r3, #1538]	; 0x602
		}
	}
	return Data;
 800efca:	79fb      	ldrb	r3, [r7, #7]
}
 800efcc:	4618      	mov	r0, r3
 800efce:	3708      	adds	r7, #8
 800efd0:	46bd      	mov	sp, r7
 800efd2:	bd80      	pop	{r7, pc}
 800efd4:	20004bac 	.word	0x20004bac

0800efd8 <MX_CAN2_Init>:
CAN_HandleTypeDef hcan2;
CAN_HandleTypeDef hcan3;

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 800efd8:	b580      	push	{r7, lr}
 800efda:	b094      	sub	sp, #80	; 0x50
 800efdc:	af00      	add	r7, sp, #0
	/* USER CODE END CAN2_Init 0 */

	/* USER CODE BEGIN CAN2_Init 1 */

	/* USER CODE END CAN2_Init 1 */
	hcan2.Instance = CAN2;
 800efde:	4b38      	ldr	r3, [pc, #224]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800efe0:	4a38      	ldr	r2, [pc, #224]	; (800f0c4 <MX_CAN2_Init+0xec>)
 800efe2:	601a      	str	r2, [r3, #0]
	hcan2.Init.Prescaler = 18;
 800efe4:	4b36      	ldr	r3, [pc, #216]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800efe6:	2212      	movs	r2, #18
 800efe8:	605a      	str	r2, [r3, #4]
	hcan2.Init.Mode = CAN_MODE_NORMAL;
 800efea:	4b35      	ldr	r3, [pc, #212]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800efec:	2200      	movs	r2, #0
 800efee:	609a      	str	r2, [r3, #8]
	hcan2.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800eff0:	4b33      	ldr	r3, [pc, #204]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800eff2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800eff6:	60da      	str	r2, [r3, #12]
	hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 800eff8:	4b31      	ldr	r3, [pc, #196]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800effa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800effe:	611a      	str	r2, [r3, #16]
	hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f000:	4b2f      	ldr	r3, [pc, #188]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f002:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f006:	615a      	str	r2, [r3, #20]
	hcan2.Init.TimeTriggeredMode = DISABLE;
 800f008:	4b2d      	ldr	r3, [pc, #180]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f00a:	2200      	movs	r2, #0
 800f00c:	761a      	strb	r2, [r3, #24]
	hcan2.Init.AutoBusOff = DISABLE;
 800f00e:	4b2c      	ldr	r3, [pc, #176]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f010:	2200      	movs	r2, #0
 800f012:	765a      	strb	r2, [r3, #25]
	hcan2.Init.AutoWakeUp = DISABLE;
 800f014:	4b2a      	ldr	r3, [pc, #168]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f016:	2200      	movs	r2, #0
 800f018:	769a      	strb	r2, [r3, #26]
	hcan2.Init.AutoRetransmission = ENABLE;
 800f01a:	4b29      	ldr	r3, [pc, #164]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f01c:	2201      	movs	r2, #1
 800f01e:	76da      	strb	r2, [r3, #27]
	hcan2.Init.ReceiveFifoLocked = DISABLE;
 800f020:	4b27      	ldr	r3, [pc, #156]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f022:	2200      	movs	r2, #0
 800f024:	771a      	strb	r2, [r3, #28]
	hcan2.Init.TransmitFifoPriority = DISABLE;
 800f026:	4b26      	ldr	r3, [pc, #152]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f028:	2200      	movs	r2, #0
 800f02a:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800f02c:	4824      	ldr	r0, [pc, #144]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f02e:	f006 f963 	bl	80152f8 <HAL_CAN_Init>
 800f032:	4603      	mov	r3, r0
 800f034:	2b00      	cmp	r3, #0
 800f036:	d001      	beq.n	800f03c <MX_CAN2_Init+0x64>
	{
		Error_Handler();
 800f038:	f004 fba2 	bl	8013780 <Error_Handler>

	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig2 );
#endif
	CAN_FilterTypeDef Can_FilterConfig3;
	/*____________for Testing________________*/
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f03c:	2301      	movs	r3, #1
 800f03e:	64bb      	str	r3, [r7, #72]	; 0x48
	Can_FilterConfig3.FilterBank = 4;
 800f040:	2304      	movs	r3, #4
 800f042:	63fb      	str	r3, [r7, #60]	; 0x3c
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f044:	2301      	movs	r3, #1
 800f046:	63bb      	str	r3, [r7, #56]	; 0x38
	Can_FilterConfig3.FilterIdHigh = (GPS_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f048:	f242 0360 	movw	r3, #8288	; 0x2060
 800f04c:	62bb      	str	r3, [r7, #40]	; 0x28
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f04e:	2300      	movs	r3, #0
 800f050:	62fb      	str	r3, [r7, #44]	; 0x2c
	Can_FilterConfig3.FilterMaskIdHigh= (GPS_TIME_PKT<<5);
 800f052:	f242 0360 	movw	r3, #8288	; 0x2060
 800f056:	633b      	str	r3, [r7, #48]	; 0x30
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f058:	2300      	movs	r3, #0
 800f05a:	637b      	str	r3, [r7, #52]	; 0x34
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDLIST;
 800f05c:	2301      	movs	r3, #1
 800f05e:	643b      	str	r3, [r7, #64]	; 0x40
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f060:	2301      	movs	r3, #1
 800f062:	647b      	str	r3, [r7, #68]	; 0x44
	Can_FilterConfig3.SlaveStartFilterBank = 2;
 800f064:	2302      	movs	r3, #2
 800f066:	64fb      	str	r3, [r7, #76]	; 0x4c


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig3 );
 800f068:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800f06c:	4619      	mov	r1, r3
 800f06e:	4814      	ldr	r0, [pc, #80]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f070:	f006 fa88 	bl	8015584 <HAL_CAN_ConfigFilter>

	CAN_FilterTypeDef Can_FilterConfig4;
	/*____________for Testing________________*/
	Can_FilterConfig4.FilterActivation = CAN_FILTER_ENABLE ;
 800f074:	2301      	movs	r3, #1
 800f076:	623b      	str	r3, [r7, #32]
	Can_FilterConfig4.FilterBank = 5;
 800f078:	2305      	movs	r3, #5
 800f07a:	617b      	str	r3, [r7, #20]
	Can_FilterConfig4.FilterFIFOAssignment = CAN_FILTER_FIFO1;
 800f07c:	2301      	movs	r3, #1
 800f07e:	613b      	str	r3, [r7, #16]
	Can_FilterConfig4.FilterIdHigh = (GPS2_TIME_PKT<<5);//CM_LPM_GPSINFO
 800f080:	f242 1320 	movw	r3, #8480	; 0x2120
 800f084:	603b      	str	r3, [r7, #0]
	Can_FilterConfig4.FilterIdLow=0x0000;
 800f086:	2300      	movs	r3, #0
 800f088:	607b      	str	r3, [r7, #4]
	Can_FilterConfig4.FilterMaskIdHigh= (GPS2_TIME_PKT<<5);
 800f08a:	f242 1320 	movw	r3, #8480	; 0x2120
 800f08e:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig4.FilterMaskIdLow =0x0000;
 800f090:	2300      	movs	r3, #0
 800f092:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig4.FilterMode= CAN_FILTERMODE_IDLIST;
 800f094:	2301      	movs	r3, #1
 800f096:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig4.FilterScale = CAN_FILTERSCALE_32BIT;
 800f098:	2301      	movs	r3, #1
 800f09a:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig4.SlaveStartFilterBank = 2;
 800f09c:	2302      	movs	r3, #2
 800f09e:	627b      	str	r3, [r7, #36]	; 0x24


	HAL_CAN_ConfigFilter(&hcan2,&Can_FilterConfig4 );
 800f0a0:	463b      	mov	r3, r7
 800f0a2:	4619      	mov	r1, r3
 800f0a4:	4806      	ldr	r0, [pc, #24]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f0a6:	f006 fa6d 	bl	8015584 <HAL_CAN_ConfigFilter>

	/*_______________________for Testing___________	 */


	HAL_CAN_Start(&hcan2);
 800f0aa:	4805      	ldr	r0, [pc, #20]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f0ac:	f006 fb56 	bl	801575c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan2,CAN_IT_RX_FIFO1_MSG_PENDING);
 800f0b0:	2110      	movs	r1, #16
 800f0b2:	4803      	ldr	r0, [pc, #12]	; (800f0c0 <MX_CAN2_Init+0xe8>)
 800f0b4:	f006 fd9c 	bl	8015bf0 <HAL_CAN_ActivateNotification>

	/* USER CODE END CAN2_Init 2 */

}
 800f0b8:	bf00      	nop
 800f0ba:	3750      	adds	r7, #80	; 0x50
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}
 800f0c0:	20009ae4 	.word	0x20009ae4
 800f0c4:	40006800 	.word	0x40006800

0800f0c8 <MX_CAN3_Init>:
/* CAN3 init function */
void MX_CAN3_Init(void)
{
 800f0c8:	b580      	push	{r7, lr}
 800f0ca:	b08a      	sub	sp, #40	; 0x28
 800f0cc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN CAN3_Init 0 */

	hcan3.Instance = CAN3;
 800f0ce:	4b34      	ldr	r3, [pc, #208]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0d0:	4a34      	ldr	r2, [pc, #208]	; (800f1a4 <MX_CAN3_Init+0xdc>)
 800f0d2:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 5;
 800f0d4:	4b32      	ldr	r3, [pc, #200]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0d6:	2205      	movs	r2, #5
 800f0d8:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f0da:	4b31      	ldr	r3, [pc, #196]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0dc:	2200      	movs	r2, #0
 800f0de:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_4TQ;
 800f0e0:	4b2f      	ldr	r3, [pc, #188]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0e2:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 800f0e6:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_7TQ;
 800f0e8:	4b2d      	ldr	r3, [pc, #180]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0ea:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 800f0ee:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_1TQ;
 800f0f0:	4b2b      	ldr	r3, [pc, #172]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	615a      	str	r2, [r3, #20]
	/* USER CODE END CAN3_Init 0 */

	/* USER CODE BEGIN CAN3_Init 1 */

	/* USER CODE END CAN3_Init 1 */
	hcan3.Instance = CAN3;
 800f0f6:	4b2a      	ldr	r3, [pc, #168]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0f8:	4a2a      	ldr	r2, [pc, #168]	; (800f1a4 <MX_CAN3_Init+0xdc>)
 800f0fa:	601a      	str	r2, [r3, #0]
	hcan3.Init.Prescaler = 18;
 800f0fc:	4b28      	ldr	r3, [pc, #160]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f0fe:	2212      	movs	r2, #18
 800f100:	605a      	str	r2, [r3, #4]
	hcan3.Init.Mode = CAN_MODE_NORMAL;
 800f102:	4b27      	ldr	r3, [pc, #156]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f104:	2200      	movs	r2, #0
 800f106:	609a      	str	r2, [r3, #8]
	hcan3.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800f108:	4b25      	ldr	r3, [pc, #148]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f10a:	2200      	movs	r2, #0
 800f10c:	60da      	str	r2, [r3, #12]
	hcan3.Init.TimeSeg1 = CAN_BS1_2TQ;
 800f10e:	4b24      	ldr	r3, [pc, #144]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f110:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f114:	611a      	str	r2, [r3, #16]
	hcan3.Init.TimeSeg2 = CAN_BS2_2TQ;
 800f116:	4b22      	ldr	r3, [pc, #136]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f118:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f11c:	615a      	str	r2, [r3, #20]
	hcan3.Init.TimeTriggeredMode = DISABLE;
 800f11e:	4b20      	ldr	r3, [pc, #128]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f120:	2200      	movs	r2, #0
 800f122:	761a      	strb	r2, [r3, #24]
	hcan3.Init.AutoBusOff = DISABLE;
 800f124:	4b1e      	ldr	r3, [pc, #120]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f126:	2200      	movs	r2, #0
 800f128:	765a      	strb	r2, [r3, #25]
	hcan3.Init.AutoWakeUp = DISABLE;
 800f12a:	4b1d      	ldr	r3, [pc, #116]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	769a      	strb	r2, [r3, #26]
	hcan3.Init.AutoRetransmission = ENABLE;
 800f130:	4b1b      	ldr	r3, [pc, #108]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f132:	2201      	movs	r2, #1
 800f134:	76da      	strb	r2, [r3, #27]
	hcan3.Init.ReceiveFifoLocked = DISABLE;
 800f136:	4b1a      	ldr	r3, [pc, #104]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f138:	2200      	movs	r2, #0
 800f13a:	771a      	strb	r2, [r3, #28]
	hcan3.Init.TransmitFifoPriority = DISABLE;
 800f13c:	4b18      	ldr	r3, [pc, #96]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f13e:	2200      	movs	r2, #0
 800f140:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan3) != HAL_OK)
 800f142:	4817      	ldr	r0, [pc, #92]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f144:	f006 f8d8 	bl	80152f8 <HAL_CAN_Init>
 800f148:	4603      	mov	r3, r0
 800f14a:	2b00      	cmp	r3, #0
 800f14c:	d001      	beq.n	800f152 <MX_CAN3_Init+0x8a>
	{
		Error_Handler();
 800f14e:	f004 fb17 	bl	8013780 <Error_Handler>
	}
	/* USER CODE BEGIN CAN3_Init 2 */
	CAN_FilterTypeDef Can_FilterConfig3;
	Can_FilterConfig3.FilterActivation = CAN_FILTER_ENABLE ;
 800f152:	2301      	movs	r3, #1
 800f154:	623b      	str	r3, [r7, #32]
	Can_FilterConfig3.FilterBank = 1;
 800f156:	2301      	movs	r3, #1
 800f158:	617b      	str	r3, [r7, #20]
	Can_FilterConfig3.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 800f15a:	2300      	movs	r3, #0
 800f15c:	613b      	str	r3, [r7, #16]
	Can_FilterConfig3.FilterIdHigh = 0x200<<5;
 800f15e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f162:	603b      	str	r3, [r7, #0]
	Can_FilterConfig3.FilterIdLow=0x0000;
 800f164:	2300      	movs	r3, #0
 800f166:	607b      	str	r3, [r7, #4]
	Can_FilterConfig3.FilterMaskIdHigh=0x200<<5;
 800f168:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f16c:	60bb      	str	r3, [r7, #8]
	Can_FilterConfig3.FilterMaskIdLow =0x0000;
 800f16e:	2300      	movs	r3, #0
 800f170:	60fb      	str	r3, [r7, #12]
	Can_FilterConfig3.FilterMode= CAN_FILTERMODE_IDMASK;
 800f172:	2300      	movs	r3, #0
 800f174:	61bb      	str	r3, [r7, #24]
	Can_FilterConfig3.FilterScale = CAN_FILTERSCALE_32BIT;
 800f176:	2301      	movs	r3, #1
 800f178:	61fb      	str	r3, [r7, #28]
	Can_FilterConfig3.SlaveStartFilterBank = 6;
 800f17a:	2306      	movs	r3, #6
 800f17c:	627b      	str	r3, [r7, #36]	; 0x24

	HAL_CAN_ConfigFilter(&hcan3,&Can_FilterConfig3 );
 800f17e:	463b      	mov	r3, r7
 800f180:	4619      	mov	r1, r3
 800f182:	4807      	ldr	r0, [pc, #28]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f184:	f006 f9fe 	bl	8015584 <HAL_CAN_ConfigFilter>
	//
	HAL_CAN_Start(&hcan3);
 800f188:	4805      	ldr	r0, [pc, #20]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f18a:	f006 fae7 	bl	801575c <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan3,CAN_IT_RX_FIFO0_MSG_PENDING);
 800f18e:	2102      	movs	r1, #2
 800f190:	4803      	ldr	r0, [pc, #12]	; (800f1a0 <MX_CAN3_Init+0xd8>)
 800f192:	f006 fd2d 	bl	8015bf0 <HAL_CAN_ActivateNotification>
	/* USER CODE END CAN3_Init 2 */

}
 800f196:	bf00      	nop
 800f198:	3728      	adds	r7, #40	; 0x28
 800f19a:	46bd      	mov	sp, r7
 800f19c:	bd80      	pop	{r7, pc}
 800f19e:	bf00      	nop
 800f1a0:	20009b48 	.word	0x20009b48
 800f1a4:	40003400 	.word	0x40003400

0800f1a8 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b08c      	sub	sp, #48	; 0x30
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f1b0:	f107 031c 	add.w	r3, r7, #28
 800f1b4:	2200      	movs	r2, #0
 800f1b6:	601a      	str	r2, [r3, #0]
 800f1b8:	605a      	str	r2, [r3, #4]
 800f1ba:	609a      	str	r2, [r3, #8]
 800f1bc:	60da      	str	r2, [r3, #12]
 800f1be:	611a      	str	r2, [r3, #16]
	if(canHandle->Instance==CAN2)
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	681b      	ldr	r3, [r3, #0]
 800f1c4:	4a44      	ldr	r2, [pc, #272]	; (800f2d8 <HAL_CAN_MspInit+0x130>)
 800f1c6:	4293      	cmp	r3, r2
 800f1c8:	d144      	bne.n	800f254 <HAL_CAN_MspInit+0xac>
	{
		/* USER CODE BEGIN CAN2_MspInit 0 */

		/* USER CODE END CAN2_MspInit 0 */
		/* CAN2 clock enable */
		__HAL_RCC_CAN2_CLK_ENABLE();
 800f1ca:	4b44      	ldr	r3, [pc, #272]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1ce:	4a43      	ldr	r2, [pc, #268]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1d0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f1d4:	6413      	str	r3, [r2, #64]	; 0x40
 800f1d6:	4b41      	ldr	r3, [pc, #260]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800f1de:	61bb      	str	r3, [r7, #24]
 800f1e0:	69bb      	ldr	r3, [r7, #24]
		__HAL_RCC_CAN1_CLK_ENABLE();
 800f1e2:	4b3e      	ldr	r3, [pc, #248]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1e6:	4a3d      	ldr	r2, [pc, #244]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1e8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800f1ec:	6413      	str	r3, [r2, #64]	; 0x40
 800f1ee:	4b3b      	ldr	r3, [pc, #236]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f1f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800f1f6:	617b      	str	r3, [r7, #20]
 800f1f8:	697b      	ldr	r3, [r7, #20]

		__HAL_RCC_GPIOB_CLK_ENABLE();
 800f1fa:	4b38      	ldr	r3, [pc, #224]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f1fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f1fe:	4a37      	ldr	r2, [pc, #220]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f200:	f043 0302 	orr.w	r3, r3, #2
 800f204:	6313      	str	r3, [r2, #48]	; 0x30
 800f206:	4b35      	ldr	r3, [pc, #212]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f20a:	f003 0302 	and.w	r3, r3, #2
 800f20e:	613b      	str	r3, [r7, #16]
 800f210:	693b      	ldr	r3, [r7, #16]
		/**CAN2 GPIO Configuration
    PB5     ------> CAN2_RX
    PB6     ------> CAN2_TX
		 */
		GPIO_InitStruct.Pin = CAN2_RX_Pin|CAN2_TX_Pin;
 800f212:	2360      	movs	r3, #96	; 0x60
 800f214:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f216:	2302      	movs	r3, #2
 800f218:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f21a:	2300      	movs	r3, #0
 800f21c:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f21e:	2303      	movs	r3, #3
 800f220:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800f222:	2309      	movs	r3, #9
 800f224:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f226:	f107 031c 	add.w	r3, r7, #28
 800f22a:	4619      	mov	r1, r3
 800f22c:	482c      	ldr	r0, [pc, #176]	; (800f2e0 <HAL_CAN_MspInit+0x138>)
 800f22e:	f008 fb3f 	bl	80178b0 <HAL_GPIO_Init>

		/* CAN2 interrupt Init */
		HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 4, 0);
 800f232:	2200      	movs	r2, #0
 800f234:	2104      	movs	r1, #4
 800f236:	2040      	movs	r0, #64	; 0x40
 800f238:	f007 f80f 	bl	801625a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 800f23c:	2040      	movs	r0, #64	; 0x40
 800f23e:	f007 f828 	bl	8016292 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 4, 1);
 800f242:	2201      	movs	r2, #1
 800f244:	2104      	movs	r1, #4
 800f246:	2041      	movs	r0, #65	; 0x41
 800f248:	f007 f807 	bl	801625a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 800f24c:	2041      	movs	r0, #65	; 0x41
 800f24e:	f007 f820 	bl	8016292 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
		/* USER CODE BEGIN CAN3_MspInit 1 */

		/* USER CODE END CAN3_MspInit 1 */
	}
}
 800f252:	e03d      	b.n	800f2d0 <HAL_CAN_MspInit+0x128>
	else if(canHandle->Instance==CAN3)
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	681b      	ldr	r3, [r3, #0]
 800f258:	4a22      	ldr	r2, [pc, #136]	; (800f2e4 <HAL_CAN_MspInit+0x13c>)
 800f25a:	4293      	cmp	r3, r2
 800f25c:	d138      	bne.n	800f2d0 <HAL_CAN_MspInit+0x128>
		__HAL_RCC_CAN3_CLK_ENABLE();
 800f25e:	4b1f      	ldr	r3, [pc, #124]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f262:	4a1e      	ldr	r2, [pc, #120]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f264:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f268:	6413      	str	r3, [r2, #64]	; 0x40
 800f26a:	4b1c      	ldr	r3, [pc, #112]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f26c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f26e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f272:	60fb      	str	r3, [r7, #12]
 800f274:	68fb      	ldr	r3, [r7, #12]
		__HAL_RCC_GPIOA_CLK_ENABLE();
 800f276:	4b19      	ldr	r3, [pc, #100]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f27a:	4a18      	ldr	r2, [pc, #96]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f27c:	f043 0301 	orr.w	r3, r3, #1
 800f280:	6313      	str	r3, [r2, #48]	; 0x30
 800f282:	4b16      	ldr	r3, [pc, #88]	; (800f2dc <HAL_CAN_MspInit+0x134>)
 800f284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f286:	f003 0301 	and.w	r3, r3, #1
 800f28a:	60bb      	str	r3, [r7, #8]
 800f28c:	68bb      	ldr	r3, [r7, #8]
		GPIO_InitStruct.Pin = CAN3_RX_Pin|CAN3_TX_Pin;
 800f28e:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 800f292:	61fb      	str	r3, [r7, #28]
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f294:	2302      	movs	r3, #2
 800f296:	623b      	str	r3, [r7, #32]
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f298:	2300      	movs	r3, #0
 800f29a:	627b      	str	r3, [r7, #36]	; 0x24
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f29c:	2303      	movs	r3, #3
 800f29e:	62bb      	str	r3, [r7, #40]	; 0x28
		GPIO_InitStruct.Alternate = GPIO_AF11_CAN3;
 800f2a0:	230b      	movs	r3, #11
 800f2a2:	62fb      	str	r3, [r7, #44]	; 0x2c
		HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f2a4:	f107 031c 	add.w	r3, r7, #28
 800f2a8:	4619      	mov	r1, r3
 800f2aa:	480f      	ldr	r0, [pc, #60]	; (800f2e8 <HAL_CAN_MspInit+0x140>)
 800f2ac:	f008 fb00 	bl	80178b0 <HAL_GPIO_Init>
		HAL_NVIC_SetPriority(CAN3_RX0_IRQn, 0, 0);
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	2100      	movs	r1, #0
 800f2b4:	2069      	movs	r0, #105	; 0x69
 800f2b6:	f006 ffd0 	bl	801625a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX0_IRQn);
 800f2ba:	2069      	movs	r0, #105	; 0x69
 800f2bc:	f006 ffe9 	bl	8016292 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(CAN3_RX1_IRQn, 0, 0);
 800f2c0:	2200      	movs	r2, #0
 800f2c2:	2100      	movs	r1, #0
 800f2c4:	206a      	movs	r0, #106	; 0x6a
 800f2c6:	f006 ffc8 	bl	801625a <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(CAN3_RX1_IRQn);
 800f2ca:	206a      	movs	r0, #106	; 0x6a
 800f2cc:	f006 ffe1 	bl	8016292 <HAL_NVIC_EnableIRQ>
}
 800f2d0:	bf00      	nop
 800f2d2:	3730      	adds	r7, #48	; 0x30
 800f2d4:	46bd      	mov	sp, r7
 800f2d6:	bd80      	pop	{r7, pc}
 800f2d8:	40006800 	.word	0x40006800
 800f2dc:	40023800 	.word	0x40023800
 800f2e0:	40020400 	.word	0x40020400
 800f2e4:	40003400 	.word	0x40003400
 800f2e8:	40020000 	.word	0x40020000

0800f2ec <TransmitCanPkt>:
}

/* USER CODE BEGIN 1 */

void TransmitCanPkt(const enum enumCanId Ken_idetifier)
{
 800f2ec:	b580      	push	{r7, lr}
 800f2ee:	b084      	sub	sp, #16
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	4603      	mov	r3, r0
 800f2f4:	80fb      	strh	r3, [r7, #6]
	void *pp_ptr;
	uint16_t Traverser = 0;
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	81bb      	strh	r3, [r7, #12]
	uint16_t uc_size = 0;
 800f2fa:	2300      	movs	r3, #0
 800f2fc:	81fb      	strh	r3, [r7, #14]



	switch(EI_data.ProtocolType)
 800f2fe:	4b9c      	ldr	r3, [pc, #624]	; (800f570 <TransmitCanPkt+0x284>)
 800f300:	781b      	ldrb	r3, [r3, #0]
 800f302:	2b03      	cmp	r3, #3
 800f304:	f000 816b 	beq.w	800f5de <TransmitCanPkt+0x2f2>
 800f308:	2b03      	cmp	r3, #3
 800f30a:	f300 81e9 	bgt.w	800f6e0 <TransmitCanPkt+0x3f4>
 800f30e:	2b01      	cmp	r3, #1
 800f310:	d003      	beq.n	800f31a <TransmitCanPkt+0x2e>
 800f312:	2b02      	cmp	r3, #2
 800f314:	f000 80b9 	beq.w	800f48a <TransmitCanPkt+0x19e>
 800f318:	e1e2      	b.n	800f6e0 <TransmitCanPkt+0x3f4>
	{

	case HITACHI:
	{
		/* _____________________________ HITACHI ________________________________________ */
		if( (CHECKFLAG(8,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800f31a:	4b96      	ldr	r3, [pc, #600]	; (800f574 <TransmitCanPkt+0x288>)
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	0a1b      	lsrs	r3, r3, #8
 800f320:	f003 0301 	and.w	r3, r3, #1
 800f324:	2b00      	cmp	r3, #0
 800f326:	d003      	beq.n	800f330 <TransmitCanPkt+0x44>
		{
			printf("Stopping CAN Transmission\n");
 800f328:	4893      	ldr	r0, [pc, #588]	; (800f578 <TransmitCanPkt+0x28c>)
 800f32a:	f013 f85b 	bl	80223e4 <puts>
			return;
 800f32e:	e1d7      	b.n	800f6e0 <TransmitCanPkt+0x3f4>
		}

		switch((int)Ken_idetifier)
 800f330:	88fb      	ldrh	r3, [r7, #6]
 800f332:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f336:	f300 80a2 	bgt.w	800f47e <TransmitCanPkt+0x192>
 800f33a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f33e:	dc0d      	bgt.n	800f35c <TransmitCanPkt+0x70>
 800f340:	f240 1219 	movw	r2, #281	; 0x119
 800f344:	4293      	cmp	r3, r2
 800f346:	d021      	beq.n	800f38c <TransmitCanPkt+0xa0>
 800f348:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f34c:	f340 8097 	ble.w	800f47e <TransmitCanPkt+0x192>
 800f350:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800f354:	2b01      	cmp	r3, #1
 800f356:	f200 8092 	bhi.w	800f47e <TransmitCanPkt+0x192>
 800f35a:	e033      	b.n	800f3c4 <TransmitCanPkt+0xd8>
 800f35c:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f360:	2b07      	cmp	r3, #7
 800f362:	f200 808c 	bhi.w	800f47e <TransmitCanPkt+0x192>
 800f366:	a201      	add	r2, pc, #4	; (adr r2, 800f36c <TransmitCanPkt+0x80>)
 800f368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f36c:	0800f3e9 	.word	0x0800f3e9
 800f370:	0800f3e9 	.word	0x0800f3e9
 800f374:	0800f413 	.word	0x0800f413
 800f378:	0800f413 	.word	0x0800f413
 800f37c:	0800f437 	.word	0x0800f437
 800f380:	0800f47f 	.word	0x0800f47f
 800f384:	0800f45b 	.word	0x0800f45b
 800f388:	0800f45b 	.word	0x0800f45b
		{
		case EI_PROCESS_DATA:
			vEI_Transver_EI_To_MIE.ActualDataBytes = (EI_data.Hitachi_st.PeersCnt * MAX_OUTPUTS_PER_PEER);
 800f38c:	4b78      	ldr	r3, [pc, #480]	; (800f570 <TransmitCanPkt+0x284>)
 800f38e:	f893 3020 	ldrb.w	r3, [r3, #32]
 800f392:	b29b      	uxth	r3, r3
 800f394:	011b      	lsls	r3, r3, #4
 800f396:	b29a      	uxth	r2, r3
 800f398:	4b78      	ldr	r3, [pc, #480]	; (800f57c <TransmitCanPkt+0x290>)
 800f39a:	801a      	strh	r2, [r3, #0]
			pp_ptr = &vEI_Transver_EI_To_MIE;
 800f39c:	4b77      	ldr	r3, [pc, #476]	; (800f57c <TransmitCanPkt+0x290>)
 800f39e:	60bb      	str	r3, [r7, #8]
			uc_size =(vEI_Transver_EI_To_MIE.ActualDataBytes + sizeof(vEI_Transver_EI_To_MIE.ActualDataBytes)); /* +2 is by Considering */
 800f3a0:	4b76      	ldr	r3, [pc, #472]	; (800f57c <TransmitCanPkt+0x290>)
 800f3a2:	881b      	ldrh	r3, [r3, #0]
 800f3a4:	3302      	adds	r3, #2
 800f3a6:	81fb      	strh	r3, [r7, #14]
			//uc_size = sizeof(EI_VITAL_DATA_TO_VITAL_COMPUTER_t);
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f3a8:	89fb      	ldrh	r3, [r7, #14]
 800f3aa:	88fa      	ldrh	r2, [r7, #6]
 800f3ac:	4619      	mov	r1, r3
 800f3ae:	68b8      	ldr	r0, [r7, #8]
 800f3b0:	f000 f9b2 	bl	800f718 <sendCanPkts>
			if(Debug_flag == 1)
 800f3b4:	4b72      	ldr	r3, [pc, #456]	; (800f580 <TransmitCanPkt+0x294>)
 800f3b6:	781b      	ldrb	r3, [r3, #0]
 800f3b8:	2b01      	cmp	r3, #1
 800f3ba:	d162      	bne.n	800f482 <TransmitCanPkt+0x196>
			{
				printf("SENT SIGNAL DATA TO MIE\n");
 800f3bc:	4871      	ldr	r0, [pc, #452]	; (800f584 <TransmitCanPkt+0x298>)
 800f3be:	f013 f811 	bl	80223e4 <puts>
			}
			break;
 800f3c2:	e05e      	b.n	800f482 <TransmitCanPkt+0x196>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f3c4:	4b70      	ldr	r3, [pc, #448]	; (800f588 <TransmitCanPkt+0x29c>)
 800f3c6:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f3c8:	2316      	movs	r3, #22
 800f3ca:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f3cc:	4b6c      	ldr	r3, [pc, #432]	; (800f580 <TransmitCanPkt+0x294>)
 800f3ce:	781b      	ldrb	r3, [r3, #0]
 800f3d0:	2b01      	cmp	r3, #1
 800f3d2:	d102      	bne.n	800f3da <TransmitCanPkt+0xee>
			{
				printf("\nHealth 2 MIE\n");
 800f3d4:	486d      	ldr	r0, [pc, #436]	; (800f58c <TransmitCanPkt+0x2a0>)
 800f3d6:	f013 f805 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f3da:	89fb      	ldrh	r3, [r7, #14]
 800f3dc:	88fa      	ldrh	r2, [r7, #6]
 800f3de:	4619      	mov	r1, r3
 800f3e0:	68b8      	ldr	r0, [r7, #8]
 800f3e2:	f000 f999 	bl	800f718 <sendCanPkts>
			break;
 800f3e6:	e04f      	b.n	800f488 <TransmitCanPkt+0x19c>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Temp_Tx_Ei_self_sharing_st;
 800f3e8:	4b69      	ldr	r3, [pc, #420]	; (800f590 <TransmitCanPkt+0x2a4>)
 800f3ea:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(EI_SELF_SHARING_t);
 800f3ec:	2318      	movs	r3, #24
 800f3ee:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f3f0:	89fb      	ldrh	r3, [r7, #14]
 800f3f2:	88fa      	ldrh	r2, [r7, #6]
 800f3f4:	4619      	mov	r1, r3
 800f3f6:	68b8      	ldr	r0, [r7, #8]
 800f3f8:	f000 f98e 	bl	800f718 <sendCanPkts>
			if(Debug_flag == 1)
 800f3fc:	4b60      	ldr	r3, [pc, #384]	; (800f580 <TransmitCanPkt+0x294>)
 800f3fe:	781b      	ldrb	r3, [r3, #0]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d140      	bne.n	800f486 <TransmitCanPkt+0x19a>
			{
				printf("Sent2_O:%u\n",Temp_Tx_Ei_self_sharing_st.Peer_Index);
 800f404:	4b62      	ldr	r3, [pc, #392]	; (800f590 <TransmitCanPkt+0x2a4>)
 800f406:	781b      	ldrb	r3, [r3, #0]
 800f408:	4619      	mov	r1, r3
 800f40a:	4862      	ldr	r0, [pc, #392]	; (800f594 <TransmitCanPkt+0x2a8>)
 800f40c:	f012 ff4e 	bl	80222ac <iprintf>
			}
			break;
 800f410:	e039      	b.n	800f486 <TransmitCanPkt+0x19a>

		case SEND_VITAL_MSG_1:
		case SEND_VITAL_MSG_2:
			pp_ptr = &Tx_VITAL_MSG_CAN_st;
 800f412:	4b61      	ldr	r3, [pc, #388]	; (800f598 <TransmitCanPkt+0x2ac>)
 800f414:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SEND_VITAL_MSG_2_OTH_t);
 800f416:	2346      	movs	r3, #70	; 0x46
 800f418:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f41a:	4b59      	ldr	r3, [pc, #356]	; (800f580 <TransmitCanPkt+0x294>)
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	2b01      	cmp	r3, #1
 800f420:	d102      	bne.n	800f428 <TransmitCanPkt+0x13c>
			{
				printf("\nSending V-Message 2-O\n");
 800f422:	485e      	ldr	r0, [pc, #376]	; (800f59c <TransmitCanPkt+0x2b0>)
 800f424:	f012 ffde 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f428:	89fb      	ldrh	r3, [r7, #14]
 800f42a:	88fa      	ldrh	r2, [r7, #6]
 800f42c:	4619      	mov	r1, r3
 800f42e:	68b8      	ldr	r0, [r7, #8]
 800f430:	f000 f972 	bl	800f718 <sendCanPkts>
			break;
 800f434:	e028      	b.n	800f488 <TransmitCanPkt+0x19c>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Hitachi_fault_injection_st;
 800f436:	4b4f      	ldr	r3, [pc, #316]	; (800f574 <TransmitCanPkt+0x288>)
 800f438:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_INJECTION_t);
 800f43a:	2308      	movs	r3, #8
 800f43c:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f43e:	4b50      	ldr	r3, [pc, #320]	; (800f580 <TransmitCanPkt+0x294>)
 800f440:	781b      	ldrb	r3, [r3, #0]
 800f442:	2b01      	cmp	r3, #1
 800f444:	d102      	bne.n	800f44c <TransmitCanPkt+0x160>
			{
				printf("\nSending Fault Injection data 2-O\n");
 800f446:	4856      	ldr	r0, [pc, #344]	; (800f5a0 <TransmitCanPkt+0x2b4>)
 800f448:	f012 ffcc 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f44c:	89fb      	ldrh	r3, [r7, #14]
 800f44e:	88fa      	ldrh	r2, [r7, #6]
 800f450:	4619      	mov	r1, r3
 800f452:	68b8      	ldr	r0, [r7, #8]
 800f454:	f000 f960 	bl	800f718 <sendCanPkts>
			break;
 800f458:	e016      	b.n	800f488 <TransmitCanPkt+0x19c>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Tx_Temp_Main_Relays_st;
 800f45a:	4b52      	ldr	r3, [pc, #328]	; (800f5a4 <TransmitCanPkt+0x2b8>)
 800f45c:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(RELAYS_t);
 800f45e:	2314      	movs	r3, #20
 800f460:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f462:	4b47      	ldr	r3, [pc, #284]	; (800f580 <TransmitCanPkt+0x294>)
 800f464:	781b      	ldrb	r3, [r3, #0]
 800f466:	2b01      	cmp	r3, #1
 800f468:	d102      	bne.n	800f470 <TransmitCanPkt+0x184>
			{
				printf("Sending Relays-O\n");
 800f46a:	484f      	ldr	r0, [pc, #316]	; (800f5a8 <TransmitCanPkt+0x2bc>)
 800f46c:	f012 ffba 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f470:	89fb      	ldrh	r3, [r7, #14]
 800f472:	88fa      	ldrh	r2, [r7, #6]
 800f474:	4619      	mov	r1, r3
 800f476:	68b8      	ldr	r0, [r7, #8]
 800f478:	f000 f94e 	bl	800f718 <sendCanPkts>
			break;
 800f47c:	e004      	b.n	800f488 <TransmitCanPkt+0x19c>
		default:
			break;
 800f47e:	bf00      	nop
 800f480:	e12e      	b.n	800f6e0 <TransmitCanPkt+0x3f4>
			break;
 800f482:	bf00      	nop
 800f484:	e12c      	b.n	800f6e0 <TransmitCanPkt+0x3f4>
			break;
 800f486:	bf00      	nop

		} /* 	switch((int)Ken_idetifier) for HITACHI 	*/
		break; /* case HITACHI: break */
 800f488:	e12a      	b.n	800f6e0 <TransmitCanPkt+0x3f4>
	/* _____________________________ HITACHI ________________________________________ */

	case SIEMENS:
	{
		/* _____________________________ SIEMENS ________________________________________ */
		switch((int)Ken_idetifier)
 800f48a:	88fb      	ldrh	r3, [r7, #6]
 800f48c:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f490:	f300 8123 	bgt.w	800f6da <TransmitCanPkt+0x3ee>
 800f494:	f240 2207 	movw	r2, #519	; 0x207
 800f498:	4293      	cmp	r3, r2
 800f49a:	da3d      	bge.n	800f518 <TransmitCanPkt+0x22c>
 800f49c:	f240 2205 	movw	r2, #517	; 0x205
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	f000 808d 	beq.w	800f5c0 <TransmitCanPkt+0x2d4>
 800f4a6:	f240 2205 	movw	r2, #517	; 0x205
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	f300 8115 	bgt.w	800f6da <TransmitCanPkt+0x3ee>
 800f4b0:	f240 1219 	movw	r2, #281	; 0x119
 800f4b4:	4293      	cmp	r3, r2
 800f4b6:	d009      	beq.n	800f4cc <TransmitCanPkt+0x1e0>
 800f4b8:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f4bc:	f340 810d 	ble.w	800f6da <TransmitCanPkt+0x3ee>
 800f4c0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800f4c4:	2b01      	cmp	r3, #1
 800f4c6:	f200 8108 	bhi.w	800f6da <TransmitCanPkt+0x3ee>
 800f4ca:	e013      	b.n	800f4f4 <TransmitCanPkt+0x208>
		{

		case EI_PROCESS_DATA:
			pp_ptr = &VitalData2MIE_st;
 800f4cc:	4b37      	ldr	r3, [pc, #220]	; (800f5ac <TransmitCanPkt+0x2c0>)
 800f4ce:	60bb      	str	r3, [r7, #8]
			//				uc_size = sizeof(VITAL_DATA_t);
			uc_size =(VitalData2MIE_st.NoofDataBytes + sizeof(VitalData2MIE_st.NoofDataBytes)); /* +2 is by Considering */
 800f4d0:	4b36      	ldr	r3, [pc, #216]	; (800f5ac <TransmitCanPkt+0x2c0>)
 800f4d2:	881b      	ldrh	r3, [r3, #0]
 800f4d4:	3302      	adds	r3, #2
 800f4d6:	81fb      	strh	r3, [r7, #14]

			if(Debug_flag == 1)
 800f4d8:	4b29      	ldr	r3, [pc, #164]	; (800f580 <TransmitCanPkt+0x294>)
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	2b01      	cmp	r3, #1
 800f4de:	d102      	bne.n	800f4e6 <TransmitCanPkt+0x1fa>
			{
				printf("Sending Signals 2 MIE\n");
 800f4e0:	4833      	ldr	r0, [pc, #204]	; (800f5b0 <TransmitCanPkt+0x2c4>)
 800f4e2:	f012 ff7f 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f4e6:	89fb      	ldrh	r3, [r7, #14]
 800f4e8:	88fa      	ldrh	r2, [r7, #6]
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	68b8      	ldr	r0, [r7, #8]
 800f4ee:	f000 f913 	bl	800f718 <sendCanPkts>
			break;
 800f4f2:	e073      	b.n	800f5dc <TransmitCanPkt+0x2f0>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Tx_Siemens_self_sharing_st;
 800f4f4:	4b2f      	ldr	r3, [pc, #188]	; (800f5b4 <TransmitCanPkt+0x2c8>)
 800f4f6:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_SELF_SHARING_t);
 800f4f8:	2304      	movs	r3, #4
 800f4fa:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f4fc:	4b20      	ldr	r3, [pc, #128]	; (800f580 <TransmitCanPkt+0x294>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	2b01      	cmp	r3, #1
 800f502:	d102      	bne.n	800f50a <TransmitCanPkt+0x21e>
			{
				printf("Sending Signals 2 MIE\n");
 800f504:	482a      	ldr	r0, [pc, #168]	; (800f5b0 <TransmitCanPkt+0x2c4>)
 800f506:	f012 ff6d 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f50a:	89fb      	ldrh	r3, [r7, #14]
 800f50c:	88fa      	ldrh	r2, [r7, #6]
 800f50e:	4619      	mov	r1, r3
 800f510:	68b8      	ldr	r0, [r7, #8]
 800f512:	f000 f901 	bl	800f718 <sendCanPkts>
			break;
 800f516:	e061      	b.n	800f5dc <TransmitCanPkt+0x2f0>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &SiemensMain_Relays_st;
 800f518:	4b27      	ldr	r3, [pc, #156]	; (800f5b8 <TransmitCanPkt+0x2cc>)
 800f51a:	60bb      	str	r3, [r7, #8]

			uc_size = (EI_data.Siemens_st.Booloutputs % 8);
 800f51c:	4b14      	ldr	r3, [pc, #80]	; (800f570 <TransmitCanPkt+0x284>)
 800f51e:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f522:	f003 0307 	and.w	r3, r3, #7
 800f526:	81fb      	strh	r3, [r7, #14]
			if (uc_size != 0)
 800f528:	89fb      	ldrh	r3, [r7, #14]
 800f52a:	2b00      	cmp	r3, #0
 800f52c:	d007      	beq.n	800f53e <TransmitCanPkt+0x252>
			{
				uc_size = ((EI_data.Siemens_st.Booloutputs / 8)) + 1; //	including 0th buffer
 800f52e:	4b10      	ldr	r3, [pc, #64]	; (800f570 <TransmitCanPkt+0x284>)
 800f530:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f534:	08db      	lsrs	r3, r3, #3
 800f536:	b29b      	uxth	r3, r3
 800f538:	3301      	adds	r3, #1
 800f53a:	81fb      	strh	r3, [r7, #14]
 800f53c:	e004      	b.n	800f548 <TransmitCanPkt+0x25c>
			}
			else
			{
				uc_size = (EI_data.Siemens_st.Booloutputs / 8);
 800f53e:	4b0c      	ldr	r3, [pc, #48]	; (800f570 <TransmitCanPkt+0x284>)
 800f540:	f8b3 32fe 	ldrh.w	r3, [r3, #766]	; 0x2fe
 800f544:	08db      	lsrs	r3, r3, #3
 800f546:	81fb      	strh	r3, [r7, #14]
			}

			SiemensMain_Relays_st.NoofDataBytes = uc_size;
 800f548:	4a1b      	ldr	r2, [pc, #108]	; (800f5b8 <TransmitCanPkt+0x2cc>)
 800f54a:	89fb      	ldrh	r3, [r7, #14]
 800f54c:	8013      	strh	r3, [r2, #0]
			//				printf("NoofDataBytes:%u\n",SiemensMain_Relays_st.NoofDataBytes);
			uc_size = uc_size + ( (sizeof(SiemensMain_Relays_st.NoofDataBytes)) + (sizeof(SiemensMain_Relays_st.VitalCRC)) );
 800f54e:	89fb      	ldrh	r3, [r7, #14]
 800f550:	3304      	adds	r3, #4
 800f552:	81fb      	strh	r3, [r7, #14]
			//				printf("Relays2Other:%u\n",uc_size);
			if(Debug_flag == 1)
 800f554:	4b0a      	ldr	r3, [pc, #40]	; (800f580 <TransmitCanPkt+0x294>)
 800f556:	781b      	ldrb	r3, [r3, #0]
 800f558:	2b01      	cmp	r3, #1
 800f55a:	d102      	bne.n	800f562 <TransmitCanPkt+0x276>
			{
				printf("Sending Relays 2 Other\n");
 800f55c:	4817      	ldr	r0, [pc, #92]	; (800f5bc <TransmitCanPkt+0x2d0>)
 800f55e:	f012 ff41 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f562:	89fb      	ldrh	r3, [r7, #14]
 800f564:	88fa      	ldrh	r2, [r7, #6]
 800f566:	4619      	mov	r1, r3
 800f568:	68b8      	ldr	r0, [r7, #8]
 800f56a:	f000 f8d5 	bl	800f718 <sendCanPkts>
			break;
 800f56e:	e035      	b.n	800f5dc <TransmitCanPkt+0x2f0>
 800f570:	20000304 	.word	0x20000304
 800f574:	2000195c 	.word	0x2000195c
 800f578:	0802659c 	.word	0x0802659c
 800f57c:	200010e4 	.word	0x200010e4
 800f580:	20000645 	.word	0x20000645
 800f584:	080265b8 	.word	0x080265b8
 800f588:	20001964 	.word	0x20001964
 800f58c:	080265d0 	.word	0x080265d0
 800f590:	20001854 	.word	0x20001854
 800f594:	080265e0 	.word	0x080265e0
 800f598:	20001884 	.word	0x20001884
 800f59c:	080265ec 	.word	0x080265ec
 800f5a0:	08026604 	.word	0x08026604
 800f5a4:	20002010 	.word	0x20002010
 800f5a8:	08026628 	.word	0x08026628
 800f5ac:	200034a0 	.word	0x200034a0
 800f5b0:	0802663c 	.word	0x0802663c
 800f5b4:	20003478 	.word	0x20003478
 800f5b8:	200036a4 	.word	0x200036a4
 800f5bc:	08026654 	.word	0x08026654

		case CAN_FAULT_INJECTION:
			pp_ptr = &Siemens_fault_injection_st;
 800f5c0:	4b49      	ldr	r3, [pc, #292]	; (800f6e8 <TransmitCanPkt+0x3fc>)
 800f5c2:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(SIEMENS_FAULT_INJECTION_t);
 800f5c4:	2308      	movs	r3, #8
 800f5c6:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800f5c8:	4848      	ldr	r0, [pc, #288]	; (800f6ec <TransmitCanPkt+0x400>)
 800f5ca:	f012 ff0b 	bl	80223e4 <puts>
			sendCanPkts(pp_ptr,uc_size,Ken_idetifier);
 800f5ce:	89fb      	ldrh	r3, [r7, #14]
 800f5d0:	88fa      	ldrh	r2, [r7, #6]
 800f5d2:	4619      	mov	r1, r3
 800f5d4:	68b8      	ldr	r0, [r7, #8]
 800f5d6:	f000 f89f 	bl	800f718 <sendCanPkts>
			break;
 800f5da:	bf00      	nop
		}
		break; /* case SIEMENS: break */
 800f5dc:	e07d      	b.n	800f6da <TransmitCanPkt+0x3ee>


	case MEDHA:
	{
		/* _____________________________ MEDHA ________________________________________ */
		switch((int)Ken_idetifier)
 800f5de:	88fb      	ldrh	r3, [r7, #6]
 800f5e0:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800f5e4:	dc7b      	bgt.n	800f6de <TransmitCanPkt+0x3f2>
 800f5e6:	f240 2207 	movw	r2, #519	; 0x207
 800f5ea:	4293      	cmp	r3, r2
 800f5ec:	da61      	bge.n	800f6b2 <TransmitCanPkt+0x3c6>
 800f5ee:	f240 2205 	movw	r2, #517	; 0x205
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	d04f      	beq.n	800f696 <TransmitCanPkt+0x3aa>
 800f5f6:	f240 2205 	movw	r2, #517	; 0x205
 800f5fa:	4293      	cmp	r3, r2
 800f5fc:	dc6f      	bgt.n	800f6de <TransmitCanPkt+0x3f2>
 800f5fe:	f240 2202 	movw	r2, #514	; 0x202
 800f602:	4293      	cmp	r3, r2
 800f604:	dc6b      	bgt.n	800f6de <TransmitCanPkt+0x3f2>
 800f606:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f60a:	dc21      	bgt.n	800f650 <TransmitCanPkt+0x364>
 800f60c:	f240 1219 	movw	r2, #281	; 0x119
 800f610:	4293      	cmp	r3, r2
 800f612:	d007      	beq.n	800f624 <TransmitCanPkt+0x338>
 800f614:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800f618:	dd61      	ble.n	800f6de <TransmitCanPkt+0x3f2>
 800f61a:	f5a3 738d 	sub.w	r3, r3, #282	; 0x11a
 800f61e:	2b01      	cmp	r3, #1
 800f620:	d85d      	bhi.n	800f6de <TransmitCanPkt+0x3f2>
 800f622:	e026      	b.n	800f672 <TransmitCanPkt+0x386>
		{
		case EI_PROCESS_DATA:
			pp_ptr = &Medha_Relay_Sts_st;
 800f624:	4b32      	ldr	r3, [pc, #200]	; (800f6f0 <TransmitCanPkt+0x404>)
 800f626:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_RELAY_STS_t);
 800f628:	2330      	movs	r3, #48	; 0x30
 800f62a:	81fb      	strh	r3, [r7, #14]
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f62c:	89fb      	ldrh	r3, [r7, #14]
 800f62e:	88fa      	ldrh	r2, [r7, #6]
 800f630:	4619      	mov	r1, r3
 800f632:	68b8      	ldr	r0, [r7, #8]
 800f634:	f000 f870 	bl	800f718 <sendCanPkts>
			if(Debug_flag == 1)
 800f638:	4b2e      	ldr	r3, [pc, #184]	; (800f6f4 <TransmitCanPkt+0x408>)
 800f63a:	781b      	ldrb	r3, [r3, #0]
 800f63c:	2b01      	cmp	r3, #1
 800f63e:	d14a      	bne.n	800f6d6 <TransmitCanPkt+0x3ea>
			{
				printf("SENT MEDHA SIGNAL DATA TO MIE:%lu\n",HAL_GetTick());
 800f640:	f005 fe2a 	bl	8015298 <HAL_GetTick>
 800f644:	4603      	mov	r3, r0
 800f646:	4619      	mov	r1, r3
 800f648:	482b      	ldr	r0, [pc, #172]	; (800f6f8 <TransmitCanPkt+0x40c>)
 800f64a:	f012 fe2f 	bl	80222ac <iprintf>
			}
			break;
 800f64e:	e042      	b.n	800f6d6 <TransmitCanPkt+0x3ea>

		case EI_1_SELF_SHARING:
		case EI_2_SELF_SHARING:
			pp_ptr = &Medha_ei_self_sharing_TX_st;
 800f650:	4b2a      	ldr	r3, [pc, #168]	; (800f6fc <TransmitCanPkt+0x410>)
 800f652:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_EI_SELF_SHARING_t);
 800f654:	2308      	movs	r3, #8
 800f656:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f658:	4b26      	ldr	r3, [pc, #152]	; (800f6f4 <TransmitCanPkt+0x408>)
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	2b01      	cmp	r3, #1
 800f65e:	d102      	bne.n	800f666 <TransmitCanPkt+0x37a>
			{
				printf("\nSending_2_O\n");
 800f660:	4827      	ldr	r0, [pc, #156]	; (800f700 <TransmitCanPkt+0x414>)
 800f662:	f012 febf 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f666:	89fb      	ldrh	r3, [r7, #14]
 800f668:	88fa      	ldrh	r2, [r7, #6]
 800f66a:	4619      	mov	r1, r3
 800f66c:	68b8      	ldr	r0, [r7, #8]
 800f66e:	f000 f853 	bl	800f718 <sendCanPkts>

		case EiPC_1_HEALTH:
		case EiPC_2_HEALTH:
			pp_ptr = &Hitachi_fault_logging_st;
 800f672:	4b24      	ldr	r3, [pc, #144]	; (800f704 <TransmitCanPkt+0x418>)
 800f674:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(HITACHI_FAULT_LOGGING_t);
 800f676:	2316      	movs	r3, #22
 800f678:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f67a:	4b1e      	ldr	r3, [pc, #120]	; (800f6f4 <TransmitCanPkt+0x408>)
 800f67c:	781b      	ldrb	r3, [r3, #0]
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d102      	bne.n	800f688 <TransmitCanPkt+0x39c>
			{
				printf("\nHealth 2 MIE\n");
 800f682:	4821      	ldr	r0, [pc, #132]	; (800f708 <TransmitCanPkt+0x41c>)
 800f684:	f012 feae 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f688:	89fb      	ldrh	r3, [r7, #14]
 800f68a:	88fa      	ldrh	r2, [r7, #6]
 800f68c:	4619      	mov	r1, r3
 800f68e:	68b8      	ldr	r0, [r7, #8]
 800f690:	f000 f842 	bl	800f718 <sendCanPkts>
			break;
 800f694:	e020      	b.n	800f6d8 <TransmitCanPkt+0x3ec>

		case CAN_FAULT_INJECTION:
			pp_ptr = &Medha_Fault_Injection_st;
 800f696:	4b1d      	ldr	r3, [pc, #116]	; (800f70c <TransmitCanPkt+0x420>)
 800f698:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_FAULT_INJECTION_t);
 800f69a:	2304      	movs	r3, #4
 800f69c:	81fb      	strh	r3, [r7, #14]
			printf("\nSending Fault Injection data 2-O\n");
 800f69e:	4813      	ldr	r0, [pc, #76]	; (800f6ec <TransmitCanPkt+0x400>)
 800f6a0:	f012 fea0 	bl	80223e4 <puts>
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f6a4:	89fb      	ldrh	r3, [r7, #14]
 800f6a6:	88fa      	ldrh	r2, [r7, #6]
 800f6a8:	4619      	mov	r1, r3
 800f6aa:	68b8      	ldr	r0, [r7, #8]
 800f6ac:	f000 f834 	bl	800f718 <sendCanPkts>
			break;
 800f6b0:	e012      	b.n	800f6d8 <TransmitCanPkt+0x3ec>

		case EIPC1_RELAYS_2_OTHER:
		case EIPC2_RELAYS_2_OTHER:
			pp_ptr = &Medha_Cur_Relay_Status_st;
 800f6b2:	4b17      	ldr	r3, [pc, #92]	; (800f710 <TransmitCanPkt+0x424>)
 800f6b4:	60bb      	str	r3, [r7, #8]
			uc_size = sizeof(MEDHA_CUR_RELAY_STS_t);
 800f6b6:	2384      	movs	r3, #132	; 0x84
 800f6b8:	81fb      	strh	r3, [r7, #14]
			if(Debug_flag == 1)
 800f6ba:	4b0e      	ldr	r3, [pc, #56]	; (800f6f4 <TransmitCanPkt+0x408>)
 800f6bc:	781b      	ldrb	r3, [r3, #0]
 800f6be:	2b01      	cmp	r3, #1
 800f6c0:	d102      	bne.n	800f6c8 <TransmitCanPkt+0x3dc>
			{
				printf("\nRelay Data 2-O\n");
 800f6c2:	4814      	ldr	r0, [pc, #80]	; (800f714 <TransmitCanPkt+0x428>)
 800f6c4:	f012 fe8e 	bl	80223e4 <puts>
			}
			sendCanPkts(pp_ptr, uc_size, Ken_idetifier);
 800f6c8:	89fb      	ldrh	r3, [r7, #14]
 800f6ca:	88fa      	ldrh	r2, [r7, #6]
 800f6cc:	4619      	mov	r1, r3
 800f6ce:	68b8      	ldr	r0, [r7, #8]
 800f6d0:	f000 f822 	bl	800f718 <sendCanPkts>
			break;
 800f6d4:	e000      	b.n	800f6d8 <TransmitCanPkt+0x3ec>
			break;
 800f6d6:	bf00      	nop
		}

		break;
 800f6d8:	e001      	b.n	800f6de <TransmitCanPkt+0x3f2>
		break; /* case SIEMENS: break */
 800f6da:	bf00      	nop
 800f6dc:	e000      	b.n	800f6e0 <TransmitCanPkt+0x3f4>
		break;
 800f6de:	bf00      	nop
	}

	} /* 	switch(EI_data.ProtocolType) */

	UNUSED(Traverser);
}
 800f6e0:	3710      	adds	r7, #16
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
 800f6e6:	bf00      	nop
 800f6e8:	20003470 	.word	0x20003470
 800f6ec:	08026604 	.word	0x08026604
 800f6f0:	200025c8 	.word	0x200025c8
 800f6f4:	20000645 	.word	0x20000645
 800f6f8:	0802666c 	.word	0x0802666c
 800f6fc:	20002608 	.word	0x20002608
 800f700:	08026690 	.word	0x08026690
 800f704:	20001964 	.word	0x20001964
 800f708:	080265d0 	.word	0x080265d0
 800f70c:	20002604 	.word	0x20002604
 800f710:	20002620 	.word	0x20002620
 800f714:	080266a0 	.word	0x080266a0

0800f718 <sendCanPkts>:

void sendCanPkts(void *sptr, int size,enum enumCanId canId)
{
 800f718:	b580      	push	{r7, lr}
 800f71a:	b088      	sub	sp, #32
 800f71c:	af00      	add	r7, sp, #0
 800f71e:	60f8      	str	r0, [r7, #12]
 800f720:	60b9      	str	r1, [r7, #8]
 800f722:	4613      	mov	r3, r2
 800f724:	80fb      	strh	r3, [r7, #6]
	int32_t j = size,seqNo=0;
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	61fb      	str	r3, [r7, #28]
 800f72a:	2300      	movs	r3, #0
 800f72c:	61bb      	str	r3, [r7, #24]
	char *cptr = sptr;
 800f72e:	68fb      	ldr	r3, [r7, #12]
 800f730:	617b      	str	r3, [r7, #20]
	while(j > 0)
 800f732:	e019      	b.n	800f768 <sendCanPkts+0x50>
	{
		//printf("J=%u\n",j);
		if(j < 7)
 800f734:	69fb      	ldr	r3, [r7, #28]
 800f736:	2b06      	cmp	r3, #6
 800f738:	dc07      	bgt.n	800f74a <sendCanPkts+0x32>
		{
			CAN_transmit(canId,cptr,j+1,seqNo);
 800f73a:	88f8      	ldrh	r0, [r7, #6]
 800f73c:	69fb      	ldr	r3, [r7, #28]
 800f73e:	1c5a      	adds	r2, r3, #1
 800f740:	69bb      	ldr	r3, [r7, #24]
 800f742:	6979      	ldr	r1, [r7, #20]
 800f744:	f000 f818 	bl	800f778 <CAN_transmit>
 800f748:	e005      	b.n	800f756 <sendCanPkts+0x3e>
		}
		else
		{
			CAN_transmit(canId,cptr,8,seqNo);
 800f74a:	88f8      	ldrh	r0, [r7, #6]
 800f74c:	69bb      	ldr	r3, [r7, #24]
 800f74e:	2208      	movs	r2, #8
 800f750:	6979      	ldr	r1, [r7, #20]
 800f752:	f000 f811 	bl	800f778 <CAN_transmit>
		}
		cptr += 7;
 800f756:	697b      	ldr	r3, [r7, #20]
 800f758:	3307      	adds	r3, #7
 800f75a:	617b      	str	r3, [r7, #20]
		j-=7;
 800f75c:	69fb      	ldr	r3, [r7, #28]
 800f75e:	3b07      	subs	r3, #7
 800f760:	61fb      	str	r3, [r7, #28]
		seqNo++;
 800f762:	69bb      	ldr	r3, [r7, #24]
 800f764:	3301      	adds	r3, #1
 800f766:	61bb      	str	r3, [r7, #24]
	while(j > 0)
 800f768:	69fb      	ldr	r3, [r7, #28]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	dce2      	bgt.n	800f734 <sendCanPkts+0x1c>
	}
}
 800f76e:	bf00      	nop
 800f770:	bf00      	nop
 800f772:	3720      	adds	r7, #32
 800f774:	46bd      	mov	sp, r7
 800f776:	bd80      	pop	{r7, pc}

0800f778 <CAN_transmit>:

void CAN_transmit (int can_id ,char* datPtr,int len,int seqNo)
{
 800f778:	b580      	push	{r7, lr}
 800f77a:	b088      	sub	sp, #32
 800f77c:	af00      	add	r7, sp, #0
 800f77e:	60f8      	str	r0, [r7, #12]
 800f780:	60b9      	str	r1, [r7, #8]
 800f782:	607a      	str	r2, [r7, #4]
 800f784:	603b      	str	r3, [r7, #0]
	char i=0;
 800f786:	2300      	movs	r3, #0
 800f788:	77fb      	strb	r3, [r7, #31]
	uint32_t CAN_TxWaitClk = HAL_GetTick();
 800f78a:	f005 fd85 	bl	8015298 <HAL_GetTick>
 800f78e:	61b8      	str	r0, [r7, #24]

	//	CAN_TxMsg.id = can_id;
	TxData[0] = seqNo;
 800f790:	683b      	ldr	r3, [r7, #0]
 800f792:	b2da      	uxtb	r2, r3
 800f794:	4b4d      	ldr	r3, [pc, #308]	; (800f8cc <CAN_transmit+0x154>)
 800f796:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < len-1; i++)
 800f798:	2300      	movs	r3, #0
 800f79a:	77fb      	strb	r3, [r7, #31]
 800f79c:	e00a      	b.n	800f7b4 <CAN_transmit+0x3c>
	{
		TxData[i+1] = *(datPtr+i);
 800f79e:	7ffb      	ldrb	r3, [r7, #31]
 800f7a0:	68ba      	ldr	r2, [r7, #8]
 800f7a2:	441a      	add	r2, r3
 800f7a4:	7ffb      	ldrb	r3, [r7, #31]
 800f7a6:	3301      	adds	r3, #1
 800f7a8:	7811      	ldrb	r1, [r2, #0]
 800f7aa:	4a48      	ldr	r2, [pc, #288]	; (800f8cc <CAN_transmit+0x154>)
 800f7ac:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < len-1; i++)
 800f7ae:	7ffb      	ldrb	r3, [r7, #31]
 800f7b0:	3301      	adds	r3, #1
 800f7b2:	77fb      	strb	r3, [r7, #31]
 800f7b4:	7ffa      	ldrb	r2, [r7, #31]
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	3b01      	subs	r3, #1
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	dbef      	blt.n	800f79e <CAN_transmit+0x26>
	}
	if(can_id < (0x200) )
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f7c4:	da3b      	bge.n	800f83e <CAN_transmit+0xc6>
	{
		while(len!=0)
 800f7c6:	e036      	b.n	800f836 <CAN_transmit+0xbe>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader2.IDE = CAN_ID_STD;
 800f7c8:	4b41      	ldr	r3, [pc, #260]	; (800f8d0 <CAN_transmit+0x158>)
 800f7ca:	2200      	movs	r2, #0
 800f7cc:	609a      	str	r2, [r3, #8]
			TxHeader2.StdId=can_id;
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	4a3f      	ldr	r2, [pc, #252]	; (800f8d0 <CAN_transmit+0x158>)
 800f7d2:	6013      	str	r3, [r2, #0]
			TxHeader2.RTR=CAN_RTR_DATA;
 800f7d4:	4b3e      	ldr	r3, [pc, #248]	; (800f8d0 <CAN_transmit+0x158>)
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	60da      	str	r2, [r3, #12]
			TxHeader2.DLC=len;
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	4a3c      	ldr	r2, [pc, #240]	; (800f8d0 <CAN_transmit+0x158>)
 800f7de:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	75bb      	strb	r3, [r7, #22]
			//				{
			//					printf("%02X ",TxData[i]);
			//				}
			//				printf("\n");
			//			}
			if((Error=HAL_CAN_AddTxMessage(&hcan2, &TxHeader2, TxData, &pTxMailbox2))!=HAL_OK)
 800f7e4:	4b3b      	ldr	r3, [pc, #236]	; (800f8d4 <CAN_transmit+0x15c>)
 800f7e6:	4a39      	ldr	r2, [pc, #228]	; (800f8cc <CAN_transmit+0x154>)
 800f7e8:	4939      	ldr	r1, [pc, #228]	; (800f8d0 <CAN_transmit+0x158>)
 800f7ea:	483b      	ldr	r0, [pc, #236]	; (800f8d8 <CAN_transmit+0x160>)
 800f7ec:	f005 fffa 	bl	80157e4 <HAL_CAN_AddTxMessage>
 800f7f0:	4603      	mov	r3, r0
 800f7f2:	461a      	mov	r2, r3
 800f7f4:	4b39      	ldr	r3, [pc, #228]	; (800f8dc <CAN_transmit+0x164>)
 800f7f6:	701a      	strb	r2, [r3, #0]
 800f7f8:	4b38      	ldr	r3, [pc, #224]	; (800f8dc <CAN_transmit+0x164>)
 800f7fa:	781b      	ldrb	r3, [r3, #0]
 800f7fc:	2b00      	cmp	r3, #0
 800f7fe:	d00d      	beq.n	800f81c <CAN_transmit+0xa4>
			{
				printf("CAN2 Tx Fail\n");
 800f800:	4837      	ldr	r0, [pc, #220]	; (800f8e0 <CAN_transmit+0x168>)
 800f802:	f012 fdef 	bl	80223e4 <puts>
				return;
 800f806:	e05e      	b.n	800f8c6 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800f808:	69b8      	ldr	r0, [r7, #24]
 800f80a:	f7fe fff9 	bl	800e800 <HAL_Elaps_Ticks>
 800f80e:	4603      	mov	r3, r0
 800f810:	2b64      	cmp	r3, #100	; 0x64
 800f812:	d903      	bls.n	800f81c <CAN_transmit+0xa4>
				{
					printf("CAN2 Tx Fail\n");
 800f814:	4832      	ldr	r0, [pc, #200]	; (800f8e0 <CAN_transmit+0x168>)
 800f816:	f012 fde5 	bl	80223e4 <puts>
					return;
 800f81a:	e054      	b.n	800f8c6 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan2, pTxMailbox2))>=1)
 800f81c:	4b2d      	ldr	r3, [pc, #180]	; (800f8d4 <CAN_transmit+0x15c>)
 800f81e:	681b      	ldr	r3, [r3, #0]
 800f820:	4619      	mov	r1, r3
 800f822:	482d      	ldr	r0, [pc, #180]	; (800f8d8 <CAN_transmit+0x160>)
 800f824:	f006 f8ae 	bl	8015984 <HAL_CAN_IsTxMessagePending>
 800f828:	4603      	mov	r3, r0
 800f82a:	75bb      	strb	r3, [r7, #22]
 800f82c:	7dbb      	ldrb	r3, [r7, #22]
 800f82e:	2b00      	cmp	r3, #0
 800f830:	d1ea      	bne.n	800f808 <CAN_transmit+0x90>
				}
			}

			len=0;
 800f832:	2300      	movs	r3, #0
 800f834:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2b00      	cmp	r3, #0
 800f83a:	d1c5      	bne.n	800f7c8 <CAN_transmit+0x50>
 800f83c:	e043      	b.n	800f8c6 <CAN_transmit+0x14e>
		}
	}
	else
	{

		if(strcmp((char *)EI_data.STN_NAME,(char *)"LAB_TESTING") == 0)
 800f83e:	4929      	ldr	r1, [pc, #164]	; (800f8e4 <CAN_transmit+0x16c>)
 800f840:	4829      	ldr	r0, [pc, #164]	; (800f8e8 <CAN_transmit+0x170>)
 800f842:	f7f0 fcfd 	bl	8000240 <strcmp>
 800f846:	4603      	mov	r3, r0
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d03b      	beq.n	800f8c4 <CAN_transmit+0x14c>
		{
			return;
		}

		while(len!=0)
 800f84c:	e036      	b.n	800f8bc <CAN_transmit+0x144>
		{
			/* transmit message to 3,4 nodes: CAN2*/
			TxHeader3.IDE = CAN_ID_STD;
 800f84e:	4b27      	ldr	r3, [pc, #156]	; (800f8ec <CAN_transmit+0x174>)
 800f850:	2200      	movs	r2, #0
 800f852:	609a      	str	r2, [r3, #8]
			TxHeader3.StdId=can_id;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	4a25      	ldr	r2, [pc, #148]	; (800f8ec <CAN_transmit+0x174>)
 800f858:	6013      	str	r3, [r2, #0]
			TxHeader3.RTR=CAN_RTR_DATA;
 800f85a:	4b24      	ldr	r3, [pc, #144]	; (800f8ec <CAN_transmit+0x174>)
 800f85c:	2200      	movs	r2, #0
 800f85e:	60da      	str	r2, [r3, #12]
			TxHeader3.DLC=len;
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	4a22      	ldr	r2, [pc, #136]	; (800f8ec <CAN_transmit+0x174>)
 800f864:	6113      	str	r3, [r2, #16]
			uint8_t txbuff=0;
 800f866:	2300      	movs	r3, #0
 800f868:	75fb      	strb	r3, [r7, #23]
			//				}
			//				printf("\n");
			//			}

			//printf("TxHeader1.DLC:%u\n",TxHeader1.DLC);
			if((Error=HAL_CAN_AddTxMessage(&hcan3, &TxHeader3, TxData, &pTxMailbox3))!=HAL_OK)
 800f86a:	4b21      	ldr	r3, [pc, #132]	; (800f8f0 <CAN_transmit+0x178>)
 800f86c:	4a17      	ldr	r2, [pc, #92]	; (800f8cc <CAN_transmit+0x154>)
 800f86e:	491f      	ldr	r1, [pc, #124]	; (800f8ec <CAN_transmit+0x174>)
 800f870:	4820      	ldr	r0, [pc, #128]	; (800f8f4 <CAN_transmit+0x17c>)
 800f872:	f005 ffb7 	bl	80157e4 <HAL_CAN_AddTxMessage>
 800f876:	4603      	mov	r3, r0
 800f878:	461a      	mov	r2, r3
 800f87a:	4b18      	ldr	r3, [pc, #96]	; (800f8dc <CAN_transmit+0x164>)
 800f87c:	701a      	strb	r2, [r3, #0]
 800f87e:	4b17      	ldr	r3, [pc, #92]	; (800f8dc <CAN_transmit+0x164>)
 800f880:	781b      	ldrb	r3, [r3, #0]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d00d      	beq.n	800f8a2 <CAN_transmit+0x12a>
			{
				printf("CAN3 Tx Fail\n");
 800f886:	481c      	ldr	r0, [pc, #112]	; (800f8f8 <CAN_transmit+0x180>)
 800f888:	f012 fdac 	bl	80223e4 <puts>
				return;
 800f88c:	e01b      	b.n	800f8c6 <CAN_transmit+0x14e>
				//				Error_Handler();
			}
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
			{
				if(HAL_Elaps_Ticks(CAN_TxWaitClk) > 100)
 800f88e:	69b8      	ldr	r0, [r7, #24]
 800f890:	f7fe ffb6 	bl	800e800 <HAL_Elaps_Ticks>
 800f894:	4603      	mov	r3, r0
 800f896:	2b64      	cmp	r3, #100	; 0x64
 800f898:	d903      	bls.n	800f8a2 <CAN_transmit+0x12a>
				{
					printf("CAN3 Tx Fail\n");
 800f89a:	4817      	ldr	r0, [pc, #92]	; (800f8f8 <CAN_transmit+0x180>)
 800f89c:	f012 fda2 	bl	80223e4 <puts>
					return;
 800f8a0:	e011      	b.n	800f8c6 <CAN_transmit+0x14e>
			while( (txbuff=HAL_CAN_IsTxMessagePending(&hcan3, pTxMailbox3))>=1)
 800f8a2:	4b13      	ldr	r3, [pc, #76]	; (800f8f0 <CAN_transmit+0x178>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	4812      	ldr	r0, [pc, #72]	; (800f8f4 <CAN_transmit+0x17c>)
 800f8aa:	f006 f86b 	bl	8015984 <HAL_CAN_IsTxMessagePending>
 800f8ae:	4603      	mov	r3, r0
 800f8b0:	75fb      	strb	r3, [r7, #23]
 800f8b2:	7dfb      	ldrb	r3, [r7, #23]
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d1ea      	bne.n	800f88e <CAN_transmit+0x116>
				}
			}
			len=0;
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	607b      	str	r3, [r7, #4]
		while(len!=0)
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	2b00      	cmp	r3, #0
 800f8c0:	d1c5      	bne.n	800f84e <CAN_transmit+0xd6>
 800f8c2:	e000      	b.n	800f8c6 <CAN_transmit+0x14e>
			return;
 800f8c4:	bf00      	nop
		}
	}
}
 800f8c6:	3720      	adds	r7, #32
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	bd80      	pop	{r7, pc}
 800f8cc:	20009ad8 	.word	0x20009ad8
 800f8d0:	20009a58 	.word	0x20009a58
 800f8d4:	20009a88 	.word	0x20009a88
 800f8d8:	20009ae4 	.word	0x20009ae4
 800f8dc:	20009ae0 	.word	0x20009ae0
 800f8e0:	080266b0 	.word	0x080266b0
 800f8e4:	080266c0 	.word	0x080266c0
 800f8e8:	20000305 	.word	0x20000305
 800f8ec:	20009a70 	.word	0x20009a70
 800f8f0:	20009a8c 	.word	0x20009a8c
 800f8f4:	20009b48 	.word	0x20009b48
 800f8f8:	080266cc 	.word	0x080266cc

0800f8fc <HAL_CAN_RxFifo0MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN1*****************/
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800f8fc:	b580      	push	{r7, lr}
 800f8fe:	b082      	sub	sp, #8
 800f900:	af00      	add	r7, sp, #0
 800f902:	6078      	str	r0, [r7, #4]
	if(hcan->Instance == CAN3)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a3e      	ldr	r2, [pc, #248]	; (800fa04 <HAL_CAN_RxFifo0MsgPendingCallback+0x108>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	d175      	bne.n	800f9fa <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
	{
		//		printf("^");
		if(CANBUFFSIZE==canRead.In)
 800f90e:	4b3e      	ldr	r3, [pc, #248]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f910:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f914:	881b      	ldrh	r3, [r3, #0]
 800f916:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800f91a:	d104      	bne.n	800f926 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a>
		{
			canRead.In=0;
 800f91c:	4b3a      	ldr	r3, [pc, #232]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f91e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f922:	2200      	movs	r2, #0
 800f924:	801a      	strh	r2, [r3, #0]
		}
		if (HAL_CAN_GetRxMessage(&hcan3,CAN_RX_FIFO0,&RxHeader2,RxData_can3) != HAL_OK)
 800f926:	4b39      	ldr	r3, [pc, #228]	; (800fa0c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800f928:	4a39      	ldr	r2, [pc, #228]	; (800fa10 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800f92a:	2100      	movs	r1, #0
 800f92c:	4839      	ldr	r0, [pc, #228]	; (800fa14 <HAL_CAN_RxFifo0MsgPendingCallback+0x118>)
 800f92e:	f006 f84d 	bl	80159cc <HAL_CAN_GetRxMessage>
 800f932:	4603      	mov	r3, r0
 800f934:	2b00      	cmp	r3, #0
 800f936:	d001      	beq.n	800f93c <HAL_CAN_RxFifo0MsgPendingCallback+0x40>
		{
			Error_Handler();
 800f938:	f003 ff22 	bl	8013780 <Error_Handler>
		}
		(canRead.CAN_msg[canRead.In]).canPort=3;
 800f93c:	4b32      	ldr	r3, [pc, #200]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f93e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f942:	881b      	ldrh	r3, [r3, #0]
 800f944:	4a30      	ldr	r2, [pc, #192]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f946:	011b      	lsls	r3, r3, #4
 800f948:	4413      	add	r3, r2
 800f94a:	330f      	adds	r3, #15
 800f94c:	2203      	movs	r2, #3
 800f94e:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Dlc=RxHeader2.DLC;
 800f950:	4b2f      	ldr	r3, [pc, #188]	; (800fa10 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800f952:	691a      	ldr	r2, [r3, #16]
 800f954:	4b2c      	ldr	r3, [pc, #176]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f956:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f95a:	881b      	ldrh	r3, [r3, #0]
 800f95c:	b2d1      	uxtb	r1, r2
 800f95e:	4a2a      	ldr	r2, [pc, #168]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f960:	011b      	lsls	r3, r3, #4
 800f962:	4413      	add	r3, r2
 800f964:	330c      	adds	r3, #12
 800f966:	460a      	mov	r2, r1
 800f968:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Ide=RxHeader2.IDE;
 800f96a:	4b29      	ldr	r3, [pc, #164]	; (800fa10 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800f96c:	689a      	ldr	r2, [r3, #8]
 800f96e:	4b26      	ldr	r3, [pc, #152]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f970:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f974:	881b      	ldrh	r3, [r3, #0]
 800f976:	b2d1      	uxtb	r1, r2
 800f978:	4a23      	ldr	r2, [pc, #140]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f97a:	011b      	lsls	r3, r3, #4
 800f97c:	4413      	add	r3, r2
 800f97e:	330d      	adds	r3, #13
 800f980:	460a      	mov	r2, r1
 800f982:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).Rtr=RxHeader2.RTR;
 800f984:	4b22      	ldr	r3, [pc, #136]	; (800fa10 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800f986:	68da      	ldr	r2, [r3, #12]
 800f988:	4b1f      	ldr	r3, [pc, #124]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f98a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f98e:	881b      	ldrh	r3, [r3, #0]
 800f990:	b2d1      	uxtb	r1, r2
 800f992:	4a1d      	ldr	r2, [pc, #116]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f994:	011b      	lsls	r3, r3, #4
 800f996:	4413      	add	r3, r2
 800f998:	330e      	adds	r3, #14
 800f99a:	460a      	mov	r2, r1
 800f99c:	701a      	strb	r2, [r3, #0]
		(canRead.CAN_msg[canRead.In]).StdId=RxHeader2.StdId;
 800f99e:	4b1a      	ldr	r3, [pc, #104]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9a0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9a4:	881b      	ldrh	r3, [r3, #0]
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	4b19      	ldr	r3, [pc, #100]	; (800fa10 <HAL_CAN_RxFifo0MsgPendingCallback+0x114>)
 800f9aa:	681a      	ldr	r2, [r3, #0]
 800f9ac:	4916      	ldr	r1, [pc, #88]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9ae:	0103      	lsls	r3, r0, #4
 800f9b0:	440b      	add	r3, r1
 800f9b2:	601a      	str	r2, [r3, #0]
		//printf("stdid in Int_Handler=%x\n",RxHeader1.StdId);
		if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA)
 800f9b4:	4b14      	ldr	r3, [pc, #80]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9ba:	881b      	ldrh	r3, [r3, #0]
 800f9bc:	4a12      	ldr	r2, [pc, #72]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9be:	011b      	lsls	r3, r3, #4
 800f9c0:	4413      	add	r3, r2
 800f9c2:	330e      	adds	r3, #14
 800f9c4:	781b      	ldrb	r3, [r3, #0]
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	d117      	bne.n	800f9fa <HAL_CAN_RxFifo0MsgPendingCallback+0xfe>
		{
			memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can3,8);
 800f9ca:	4b0f      	ldr	r3, [pc, #60]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9cc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9d0:	881b      	ldrh	r3, [r3, #0]
 800f9d2:	011b      	lsls	r3, r3, #4
 800f9d4:	4a0c      	ldr	r2, [pc, #48]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9d6:	4413      	add	r3, r2
 800f9d8:	3304      	adds	r3, #4
 800f9da:	490c      	ldr	r1, [pc, #48]	; (800fa0c <HAL_CAN_RxFifo0MsgPendingCallback+0x110>)
 800f9dc:	461a      	mov	r2, r3
 800f9de:	460b      	mov	r3, r1
 800f9e0:	cb03      	ldmia	r3!, {r0, r1}
 800f9e2:	6010      	str	r0, [r2, #0]
 800f9e4:	6051      	str	r1, [r2, #4]
			canRead.In++;
 800f9e6:	4b08      	ldr	r3, [pc, #32]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9ec:	881b      	ldrh	r3, [r3, #0]
 800f9ee:	3301      	adds	r3, #1
 800f9f0:	b29a      	uxth	r2, r3
 800f9f2:	4b05      	ldr	r3, [pc, #20]	; (800fa08 <HAL_CAN_RxFifo0MsgPendingCallback+0x10c>)
 800f9f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800f9f8:	801a      	strh	r2, [r3, #0]
		}
	}
}
 800f9fa:	bf00      	nop
 800f9fc:	3708      	adds	r7, #8
 800f9fe:	46bd      	mov	sp, r7
 800fa00:	bd80      	pop	{r7, pc}
 800fa02:	bf00      	nop
 800fa04:	40003400 	.word	0x40003400
 800fa08:	20005a54 	.word	0x20005a54
 800fa0c:	20009ad0 	.word	0x20009ad0
 800fa10:	20009aac 	.word	0x20009aac
 800fa14:	20009b48 	.word	0x20009b48

0800fa18 <HAL_CAN_RxFifo1MsgPendingCallback>:

/******************Function to be invoked when we get an interrupt on CAN2*****************/
void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800fa18:	b580      	push	{r7, lr}
 800fa1a:	b082      	sub	sp, #8
 800fa1c:	af00      	add	r7, sp, #0
 800fa1e:	6078      	str	r0, [r7, #4]
	//printf("Interrupt invoked for CAN2\n");
	if(CANBUFFSIZE==canRead.In)
 800fa20:	4b42      	ldr	r3, [pc, #264]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa22:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fa26:	881b      	ldrh	r3, [r3, #0]
 800fa28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800fa2c:	d104      	bne.n	800fa38 <HAL_CAN_RxFifo1MsgPendingCallback+0x20>
		canRead.In=0;
 800fa2e:	4b3f      	ldr	r3, [pc, #252]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fa34:	2200      	movs	r2, #0
 800fa36:	801a      	strh	r2, [r3, #0]
	if ((Error=HAL_CAN_GetRxMessage(&hcan2,CAN_RX_FIFO1,&RxHeader1,RxData_can2)) != HAL_OK)
 800fa38:	4b3d      	ldr	r3, [pc, #244]	; (800fb30 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fa3a:	4a3e      	ldr	r2, [pc, #248]	; (800fb34 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fa3c:	2101      	movs	r1, #1
 800fa3e:	483e      	ldr	r0, [pc, #248]	; (800fb38 <HAL_CAN_RxFifo1MsgPendingCallback+0x120>)
 800fa40:	f005 ffc4 	bl	80159cc <HAL_CAN_GetRxMessage>
 800fa44:	4603      	mov	r3, r0
 800fa46:	461a      	mov	r2, r3
 800fa48:	4b3c      	ldr	r3, [pc, #240]	; (800fb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fa4a:	701a      	strb	r2, [r3, #0]
 800fa4c:	4b3b      	ldr	r3, [pc, #236]	; (800fb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fa4e:	781b      	ldrb	r3, [r3, #0]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d007      	beq.n	800fa64 <HAL_CAN_RxFifo1MsgPendingCallback+0x4c>
	{
		printf("Error in CAN2 Reception Interrupt: %d\n",Error);
 800fa54:	4b39      	ldr	r3, [pc, #228]	; (800fb3c <HAL_CAN_RxFifo1MsgPendingCallback+0x124>)
 800fa56:	781b      	ldrb	r3, [r3, #0]
 800fa58:	4619      	mov	r1, r3
 800fa5a:	4839      	ldr	r0, [pc, #228]	; (800fb40 <HAL_CAN_RxFifo1MsgPendingCallback+0x128>)
 800fa5c:	f012 fc26 	bl	80222ac <iprintf>
		Error_Handler();
 800fa60:	f003 fe8e 	bl	8013780 <Error_Handler>
	}
	//	printf("RxHeader1.stdid=%lx \n",RxHeader1.StdId);

	(canRead.CAN_msg[canRead.In]).canPort=2;
 800fa64:	4b31      	ldr	r3, [pc, #196]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fa6a:	881b      	ldrh	r3, [r3, #0]
 800fa6c:	4a2f      	ldr	r2, [pc, #188]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa6e:	011b      	lsls	r3, r3, #4
 800fa70:	4413      	add	r3, r2
 800fa72:	330f      	adds	r3, #15
 800fa74:	2202      	movs	r2, #2
 800fa76:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Dlc=RxHeader1.DLC;
 800fa78:	4b2e      	ldr	r3, [pc, #184]	; (800fb34 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fa7a:	691a      	ldr	r2, [r3, #16]
 800fa7c:	4b2b      	ldr	r3, [pc, #172]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fa82:	881b      	ldrh	r3, [r3, #0]
 800fa84:	b2d1      	uxtb	r1, r2
 800fa86:	4a29      	ldr	r2, [pc, #164]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa88:	011b      	lsls	r3, r3, #4
 800fa8a:	4413      	add	r3, r2
 800fa8c:	330c      	adds	r3, #12
 800fa8e:	460a      	mov	r2, r1
 800fa90:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Ide=RxHeader1.IDE;
 800fa92:	4b28      	ldr	r3, [pc, #160]	; (800fb34 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fa94:	689a      	ldr	r2, [r3, #8]
 800fa96:	4b25      	ldr	r3, [pc, #148]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fa98:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fa9c:	881b      	ldrh	r3, [r3, #0]
 800fa9e:	b2d1      	uxtb	r1, r2
 800faa0:	4a22      	ldr	r2, [pc, #136]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800faa2:	011b      	lsls	r3, r3, #4
 800faa4:	4413      	add	r3, r2
 800faa6:	330d      	adds	r3, #13
 800faa8:	460a      	mov	r2, r1
 800faaa:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).Rtr=RxHeader1.RTR;
 800faac:	4b21      	ldr	r3, [pc, #132]	; (800fb34 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800faae:	68da      	ldr	r2, [r3, #12]
 800fab0:	4b1e      	ldr	r3, [pc, #120]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fab2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fab6:	881b      	ldrh	r3, [r3, #0]
 800fab8:	b2d1      	uxtb	r1, r2
 800faba:	4a1c      	ldr	r2, [pc, #112]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fabc:	011b      	lsls	r3, r3, #4
 800fabe:	4413      	add	r3, r2
 800fac0:	330e      	adds	r3, #14
 800fac2:	460a      	mov	r2, r1
 800fac4:	701a      	strb	r2, [r3, #0]
	(canRead.CAN_msg[canRead.In]).StdId=RxHeader1.StdId;
 800fac6:	4b19      	ldr	r3, [pc, #100]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fac8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800facc:	881b      	ldrh	r3, [r3, #0]
 800face:	4618      	mov	r0, r3
 800fad0:	4b18      	ldr	r3, [pc, #96]	; (800fb34 <HAL_CAN_RxFifo1MsgPendingCallback+0x11c>)
 800fad2:	681a      	ldr	r2, [r3, #0]
 800fad4:	4915      	ldr	r1, [pc, #84]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fad6:	0103      	lsls	r3, r0, #4
 800fad8:	440b      	add	r3, r1
 800fada:	601a      	str	r2, [r3, #0]

	if((canRead.CAN_msg[canRead.In]).Rtr==CAN_RTR_DATA){
 800fadc:	4b13      	ldr	r3, [pc, #76]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fade:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fae2:	881b      	ldrh	r3, [r3, #0]
 800fae4:	4a11      	ldr	r2, [pc, #68]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fae6:	011b      	lsls	r3, r3, #4
 800fae8:	4413      	add	r3, r2
 800faea:	330e      	adds	r3, #14
 800faec:	781b      	ldrb	r3, [r3, #0]
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d117      	bne.n	800fb22 <HAL_CAN_RxFifo1MsgPendingCallback+0x10a>
		//	printf("copying in to buffer on can2\n");
		memcpy((canRead.CAN_msg[canRead.In]).data,RxData_can2,8);
 800faf2:	4b0e      	ldr	r3, [pc, #56]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800faf4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800faf8:	881b      	ldrh	r3, [r3, #0]
 800fafa:	011b      	lsls	r3, r3, #4
 800fafc:	4a0b      	ldr	r2, [pc, #44]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fafe:	4413      	add	r3, r2
 800fb00:	3304      	adds	r3, #4
 800fb02:	490b      	ldr	r1, [pc, #44]	; (800fb30 <HAL_CAN_RxFifo1MsgPendingCallback+0x118>)
 800fb04:	461a      	mov	r2, r3
 800fb06:	460b      	mov	r3, r1
 800fb08:	cb03      	ldmia	r3!, {r0, r1}
 800fb0a:	6010      	str	r0, [r2, #0]
 800fb0c:	6051      	str	r1, [r2, #4]
		canRead.In++;
 800fb0e:	4b07      	ldr	r3, [pc, #28]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fb10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb14:	881b      	ldrh	r3, [r3, #0]
 800fb16:	3301      	adds	r3, #1
 800fb18:	b29a      	uxth	r2, r3
 800fb1a:	4b04      	ldr	r3, [pc, #16]	; (800fb2c <HAL_CAN_RxFifo1MsgPendingCallback+0x114>)
 800fb1c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb20:	801a      	strh	r2, [r3, #0]
	}
}
 800fb22:	bf00      	nop
 800fb24:	3708      	adds	r7, #8
 800fb26:	46bd      	mov	sp, r7
 800fb28:	bd80      	pop	{r7, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20005a54 	.word	0x20005a54
 800fb30:	20009ac8 	.word	0x20009ac8
 800fb34:	20009a90 	.word	0x20009a90
 800fb38:	20009ae4 	.word	0x20009ae4
 800fb3c:	20009ae0 	.word	0x20009ae0
 800fb40:	080266dc 	.word	0x080266dc

0800fb44 <canDataReady>:


unsigned char canDataReady()
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
	unsigned int ui_Read_CAN_index  = 0;
 800fb4a:	2300      	movs	r3, #0
 800fb4c:	607b      	str	r3, [r7, #4]

	if(canRead.In == canRead.Out)
 800fb4e:	4b27      	ldr	r3, [pc, #156]	; (800fbec <canDataReady+0xa8>)
 800fb50:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb54:	881a      	ldrh	r2, [r3, #0]
 800fb56:	4b25      	ldr	r3, [pc, #148]	; (800fbec <canDataReady+0xa8>)
 800fb58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb5c:	885b      	ldrh	r3, [r3, #2]
 800fb5e:	429a      	cmp	r2, r3
 800fb60:	d101      	bne.n	800fb66 <canDataReady+0x22>
	{
		return 0;
 800fb62:	2300      	movs	r3, #0
 800fb64:	e03e      	b.n	800fbe4 <canDataReady+0xa0>
	}
	/* for removing duplicates in the buffer */
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fb66:	4b21      	ldr	r3, [pc, #132]	; (800fbec <canDataReady+0xa8>)
 800fb68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb6c:	885b      	ldrh	r3, [r3, #2]
 800fb6e:	3301      	adds	r3, #1
 800fb70:	607b      	str	r3, [r7, #4]
 800fb72:	e02e      	b.n	800fbd2 <canDataReady+0x8e>
	{
		if(0 == memcmp(&canRead.CAN_msg[canRead.Out],&canRead.CAN_msg[canRead.In],sizeof(CAN_msg)))
 800fb74:	4b1d      	ldr	r3, [pc, #116]	; (800fbec <canDataReady+0xa8>)
 800fb76:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb7a:	885b      	ldrh	r3, [r3, #2]
 800fb7c:	011b      	lsls	r3, r3, #4
 800fb7e:	4a1b      	ldr	r2, [pc, #108]	; (800fbec <canDataReady+0xa8>)
 800fb80:	1898      	adds	r0, r3, r2
 800fb82:	4b1a      	ldr	r3, [pc, #104]	; (800fbec <canDataReady+0xa8>)
 800fb84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	011b      	lsls	r3, r3, #4
 800fb8c:	4a17      	ldr	r2, [pc, #92]	; (800fbec <canDataReady+0xa8>)
 800fb8e:	4413      	add	r3, r2
 800fb90:	2210      	movs	r2, #16
 800fb92:	4619      	mov	r1, r3
 800fb94:	f012 fa6a 	bl	802206c <memcmp>
 800fb98:	4603      	mov	r3, r0
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d116      	bne.n	800fbcc <canDataReady+0x88>
		{
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 800fb9e:	4b13      	ldr	r3, [pc, #76]	; (800fbec <canDataReady+0xa8>)
 800fba0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fba4:	885b      	ldrh	r3, [r3, #2]
 800fba6:	011b      	lsls	r3, r3, #4
 800fba8:	4a10      	ldr	r2, [pc, #64]	; (800fbec <canDataReady+0xa8>)
 800fbaa:	4413      	add	r3, r2
 800fbac:	2210      	movs	r2, #16
 800fbae:	2100      	movs	r1, #0
 800fbb0:	4618      	mov	r0, r3
 800fbb2:	f012 fa93 	bl	80220dc <memset>
			canRead.Out++;
 800fbb6:	4b0d      	ldr	r3, [pc, #52]	; (800fbec <canDataReady+0xa8>)
 800fbb8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbbc:	885b      	ldrh	r3, [r3, #2]
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	b29a      	uxth	r2, r3
 800fbc2:	4b0a      	ldr	r3, [pc, #40]	; (800fbec <canDataReady+0xa8>)
 800fbc4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbc8:	805a      	strh	r2, [r3, #2]
			break;
 800fbca:	e00a      	b.n	800fbe2 <canDataReady+0x9e>
	for(ui_Read_CAN_index = (canRead.Out+1);ui_Read_CAN_index<canRead.In;ui_Read_CAN_index++)
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	3301      	adds	r3, #1
 800fbd0:	607b      	str	r3, [r7, #4]
 800fbd2:	4b06      	ldr	r3, [pc, #24]	; (800fbec <canDataReady+0xa8>)
 800fbd4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fbd8:	881b      	ldrh	r3, [r3, #0]
 800fbda:	461a      	mov	r2, r3
 800fbdc:	687b      	ldr	r3, [r7, #4]
 800fbde:	4293      	cmp	r3, r2
 800fbe0:	d3c8      	bcc.n	800fb74 <canDataReady+0x30>
		}
	}
	return 1;
 800fbe2:	2301      	movs	r3, #1
}
 800fbe4:	4618      	mov	r0, r3
 800fbe6:	3708      	adds	r7, #8
 800fbe8:	46bd      	mov	sp, r7
 800fbea:	bd80      	pop	{r7, pc}
 800fbec:	20005a54 	.word	0x20005a54

0800fbf0 <readCanToStructs>:

void readCanToStructs(void)
{
 800fbf0:	b580      	push	{r7, lr}
 800fbf2:	b08e      	sub	sp, #56	; 0x38
 800fbf4:	af00      	add	r7, sp, #0
	unsigned char uc_seqNo,uc_Loop_Index = 0,uc_index = 0,uc_LocIndex = 0;
 800fbf6:	2300      	movs	r3, #0
 800fbf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fbfc:	2300      	movs	r3, #0
 800fbfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800fc02:	2300      	movs	r3, #0
 800fc04:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	uint8_t *uc_pp_charPtr= 0;
 800fc08:	2300      	movs	r3, #0
 800fc0a:	633b      	str	r3, [r7, #48]	; 0x30

	static uint16_t DataLength = 0;
	static uint16_t DataTraverser = 0;


	switch(EI_data.ProtocolType)
 800fc0c:	4bc0      	ldr	r3, [pc, #768]	; (800ff10 <readCanToStructs+0x320>)
 800fc0e:	781b      	ldrb	r3, [r3, #0]
 800fc10:	2b03      	cmp	r3, #3
 800fc12:	f002 8640 	beq.w	8012896 <readCanToStructs+0x2ca6>
 800fc16:	2b03      	cmp	r3, #3
 800fc18:	f302 8644 	bgt.w	80128a4 <readCanToStructs+0x2cb4>
 800fc1c:	2b01      	cmp	r3, #1
 800fc1e:	d004      	beq.n	800fc2a <readCanToStructs+0x3a>
 800fc20:	2b02      	cmp	r3, #2
 800fc22:	f001 87f4 	beq.w	8011c0e <readCanToStructs+0x201e>
		/* __________ MEDHA _________ */
	}
	break;

	default:
		break;
 800fc26:	f002 be3d 	b.w	80128a4 <readCanToStructs+0x2cb4>
		if( (CHECKFLAG(7,Hitachi_fault_injection_st.FAULT_INJECTION_BITS)) == SET)
 800fc2a:	4bba      	ldr	r3, [pc, #744]	; (800ff14 <readCanToStructs+0x324>)
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	09db      	lsrs	r3, r3, #7
 800fc30:	f003 0301 	and.w	r3, r3, #1
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	f042 8637 	bne.w	80128a8 <readCanToStructs+0x2cb8>
		while(canDataReady())
 800fc3a:	f001 b92f 	b.w	8010e9c <readCanToStructs+0x12ac>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 800fc3e:	4bb6      	ldr	r3, [pc, #728]	; (800ff18 <readCanToStructs+0x328>)
 800fc40:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc44:	885b      	ldrh	r3, [r3, #2]
 800fc46:	4ab4      	ldr	r2, [pc, #720]	; (800ff18 <readCanToStructs+0x328>)
 800fc48:	011b      	lsls	r3, r3, #4
 800fc4a:	4413      	add	r3, r2
 800fc4c:	330f      	adds	r3, #15
 800fc4e:	781b      	ldrb	r3, [r3, #0]
 800fc50:	3b01      	subs	r3, #1
 800fc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 800fc56:	4bb0      	ldr	r3, [pc, #704]	; (800ff18 <readCanToStructs+0x328>)
 800fc58:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fc5c:	885b      	ldrh	r3, [r3, #2]
 800fc5e:	4aae      	ldr	r2, [pc, #696]	; (800ff18 <readCanToStructs+0x328>)
 800fc60:	011b      	lsls	r3, r3, #4
 800fc62:	4413      	add	r3, r2
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 800fc6a:	f201 80f4 	bhi.w	8010e56 <readCanToStructs+0x1266>
 800fc6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fc72:	d80a      	bhi.n	800fc8a <readCanToStructs+0x9a>
 800fc74:	f240 1203 	movw	r2, #259	; 0x103
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d01f      	beq.n	800fcbc <readCanToStructs+0xcc>
 800fc7c:	f240 1209 	movw	r2, #265	; 0x109
 800fc80:	4293      	cmp	r3, r2
 800fc82:	f000 80f1 	beq.w	800fe68 <readCanToStructs+0x278>
				break;
 800fc86:	f001 b8e6 	b.w	8010e56 <readCanToStructs+0x1266>
 800fc8a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 800fc8e:	2b07      	cmp	r3, #7
 800fc90:	f201 80e1 	bhi.w	8010e56 <readCanToStructs+0x1266>
 800fc94:	a201      	add	r2, pc, #4	; (adr r2, 800fc9c <readCanToStructs+0xac>)
 800fc96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fc9a:	bf00      	nop
 800fc9c:	0801003d 	.word	0x0801003d
 800fca0:	08010245 	.word	0x08010245
 800fca4:	0801041d 	.word	0x0801041d
 800fca8:	08010637 	.word	0x08010637
 800fcac:	0801084d 	.word	0x0801084d
 800fcb0:	08010e57 	.word	0x08010e57
 800fcb4:	080109e1 	.word	0x080109e1
 800fcb8:	08010c1b 	.word	0x08010c1b
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800fcbc:	4b97      	ldr	r3, [pc, #604]	; (800ff1c <readCanToStructs+0x32c>)
 800fcbe:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fcc0:	4b95      	ldr	r3, [pc, #596]	; (800ff18 <readCanToStructs+0x328>)
 800fcc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fcc6:	885b      	ldrh	r3, [r3, #2]
 800fcc8:	4a93      	ldr	r2, [pc, #588]	; (800ff18 <readCanToStructs+0x328>)
 800fcca:	011b      	lsls	r3, r3, #4
 800fccc:	4413      	add	r3, r2
 800fcce:	3304      	adds	r3, #4
 800fcd0:	781b      	ldrb	r3, [r3, #0]
 800fcd2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800fcd6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d110      	bne.n	800fd00 <readCanToStructs+0x110>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fcde:	2206      	movs	r2, #6
 800fce0:	2100      	movs	r1, #0
 800fce2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fce4:	f012 f9fa 	bl	80220dc <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fce8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fcec:	4a8c      	ldr	r2, [pc, #560]	; (800ff20 <readCanToStructs+0x330>)
 800fcee:	f240 4112 	movw	r1, #1042	; 0x412
 800fcf2:	fb01 f303 	mul.w	r3, r1, r3
 800fcf6:	4413      	add	r3, r2
 800fcf8:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 800fd00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd04:	4a86      	ldr	r2, [pc, #536]	; (800ff20 <readCanToStructs+0x330>)
 800fd06:	f240 4112 	movw	r1, #1042	; 0x412
 800fd0a:	fb01 f303 	mul.w	r3, r1, r3
 800fd0e:	4413      	add	r3, r2
 800fd10:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fd14:	781b      	ldrb	r3, [r3, #0]
 800fd16:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d015      	beq.n	800fd4a <readCanToStructs+0x15a>
					printf("GPS Packet Seq no MisMatch\n");
 800fd1e:	4881      	ldr	r0, [pc, #516]	; (800ff24 <readCanToStructs+0x334>)
 800fd20:	f012 fb60 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fd24:	2206      	movs	r2, #6
 800fd26:	2100      	movs	r1, #0
 800fd28:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd2a:	f012 f9d7 	bl	80220dc <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fd2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fd32:	4a7b      	ldr	r2, [pc, #492]	; (800ff20 <readCanToStructs+0x330>)
 800fd34:	f240 4112 	movw	r1, #1042	; 0x412
 800fd38:	fb01 f303 	mul.w	r3, r1, r3
 800fd3c:	4413      	add	r3, r2
 800fd3e:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fd42:	2200      	movs	r2, #0
 800fd44:	701a      	strb	r2, [r3, #0]
					break;
 800fd46:	f001 b887 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800fd4a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fd4e:	4613      	mov	r3, r2
 800fd50:	00db      	lsls	r3, r3, #3
 800fd52:	1a9b      	subs	r3, r3, r2
 800fd54:	461a      	mov	r2, r3
 800fd56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd58:	4413      	add	r3, r2
 800fd5a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fd5c:	2301      	movs	r3, #1
 800fd5e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd62:	e016      	b.n	800fd92 <readCanToStructs+0x1a2>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800fd64:	4b6c      	ldr	r3, [pc, #432]	; (800ff18 <readCanToStructs+0x328>)
 800fd66:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd6a:	885b      	ldrh	r3, [r3, #2]
 800fd6c:	461a      	mov	r2, r3
 800fd6e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd72:	4969      	ldr	r1, [pc, #420]	; (800ff18 <readCanToStructs+0x328>)
 800fd74:	0112      	lsls	r2, r2, #4
 800fd76:	440a      	add	r2, r1
 800fd78:	4413      	add	r3, r2
 800fd7a:	3304      	adds	r3, #4
 800fd7c:	781a      	ldrb	r2, [r3, #0]
 800fd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd80:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800fd82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd84:	3301      	adds	r3, #1
 800fd86:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800fd88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800fd8c:	3301      	adds	r3, #1
 800fd8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800fd92:	4b61      	ldr	r3, [pc, #388]	; (800ff18 <readCanToStructs+0x328>)
 800fd94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fd98:	885b      	ldrh	r3, [r3, #2]
 800fd9a:	4a5f      	ldr	r2, [pc, #380]	; (800ff18 <readCanToStructs+0x328>)
 800fd9c:	011b      	lsls	r3, r3, #4
 800fd9e:	4413      	add	r3, r2
 800fda0:	330c      	adds	r3, #12
 800fda2:	781b      	ldrb	r3, [r3, #0]
 800fda4:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800fda8:	429a      	cmp	r2, r3
 800fdaa:	d3db      	bcc.n	800fd64 <readCanToStructs+0x174>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800fdac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fdb0:	4a5b      	ldr	r2, [pc, #364]	; (800ff20 <readCanToStructs+0x330>)
 800fdb2:	f240 4112 	movw	r1, #1042	; 0x412
 800fdb6:	fb01 f303 	mul.w	r3, r1, r3
 800fdba:	4413      	add	r3, r2
 800fdbc:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fdc0:	781b      	ldrb	r3, [r3, #0]
 800fdc2:	461a      	mov	r2, r3
 800fdc4:	4613      	mov	r3, r2
 800fdc6:	00db      	lsls	r3, r3, #3
 800fdc8:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800fdca:	4b53      	ldr	r3, [pc, #332]	; (800ff18 <readCanToStructs+0x328>)
 800fdcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fdd0:	885b      	ldrh	r3, [r3, #2]
 800fdd2:	4951      	ldr	r1, [pc, #324]	; (800ff18 <readCanToStructs+0x328>)
 800fdd4:	011b      	lsls	r3, r3, #4
 800fdd6:	440b      	add	r3, r1
 800fdd8:	330c      	adds	r3, #12
 800fdda:	781b      	ldrb	r3, [r3, #0]
 800fddc:	3b01      	subs	r3, #1
 800fdde:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 800fde0:	2b05      	cmp	r3, #5
 800fde2:	d91c      	bls.n	800fe1e <readCanToStructs+0x22e>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800fde4:	4b50      	ldr	r3, [pc, #320]	; (800ff28 <readCanToStructs+0x338>)
 800fde6:	4a4d      	ldr	r2, [pc, #308]	; (800ff1c <readCanToStructs+0x32c>)
 800fde8:	6811      	ldr	r1, [r2, #0]
 800fdea:	6019      	str	r1, [r3, #0]
 800fdec:	8892      	ldrh	r2, [r2, #4]
 800fdee:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800fdf0:	4b4e      	ldr	r3, [pc, #312]	; (800ff2c <readCanToStructs+0x33c>)
 800fdf2:	781b      	ldrb	r3, [r3, #0]
 800fdf4:	2b01      	cmp	r3, #1
 800fdf6:	d102      	bne.n	800fdfe <readCanToStructs+0x20e>
						printf("GPS_PACKET_RECEIVED\n");
 800fdf8:	484d      	ldr	r0, [pc, #308]	; (800ff30 <readCanToStructs+0x340>)
 800fdfa:	f012 faf3 	bl	80223e4 <puts>
					Write_RTC();
 800fdfe:	f7fb f81d 	bl	800ae3c <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 800fe02:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe06:	4a46      	ldr	r2, [pc, #280]	; (800ff20 <readCanToStructs+0x330>)
 800fe08:	f240 4112 	movw	r1, #1042	; 0x412
 800fe0c:	fb01 f303 	mul.w	r3, r1, r3
 800fe10:	4413      	add	r3, r2
 800fe12:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fe16:	2200      	movs	r2, #0
 800fe18:	701a      	strb	r2, [r3, #0]
				break;
 800fe1a:	f001 b81d 	b.w	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 800fe1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe22:	4a3f      	ldr	r2, [pc, #252]	; (800ff20 <readCanToStructs+0x330>)
 800fe24:	f240 4112 	movw	r1, #1042	; 0x412
 800fe28:	fb01 f303 	mul.w	r3, r1, r3
 800fe2c:	4413      	add	r3, r2
 800fe2e:	f203 2306 	addw	r3, r3, #518	; 0x206
 800fe32:	2201      	movs	r2, #1
 800fe34:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 800fe36:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe3a:	4939      	ldr	r1, [pc, #228]	; (800ff20 <readCanToStructs+0x330>)
 800fe3c:	f240 4212 	movw	r2, #1042	; 0x412
 800fe40:	fb03 f202 	mul.w	r2, r3, r2
 800fe44:	440a      	add	r2, r1
 800fe46:	f202 2207 	addw	r2, r2, #519	; 0x207
 800fe4a:	7812      	ldrb	r2, [r2, #0]
 800fe4c:	3201      	adds	r2, #1
 800fe4e:	b2d0      	uxtb	r0, r2
 800fe50:	4a33      	ldr	r2, [pc, #204]	; (800ff20 <readCanToStructs+0x330>)
 800fe52:	f240 4112 	movw	r1, #1042	; 0x412
 800fe56:	fb01 f303 	mul.w	r3, r1, r3
 800fe5a:	4413      	add	r3, r2
 800fe5c:	f203 2307 	addw	r3, r3, #519	; 0x207
 800fe60:	4602      	mov	r2, r0
 800fe62:	701a      	strb	r2, [r3, #0]
				break;
 800fe64:	f000 bff8 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 800fe68:	4b2c      	ldr	r3, [pc, #176]	; (800ff1c <readCanToStructs+0x32c>)
 800fe6a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 800fe6c:	4b2a      	ldr	r3, [pc, #168]	; (800ff18 <readCanToStructs+0x328>)
 800fe6e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800fe72:	885b      	ldrh	r3, [r3, #2]
 800fe74:	4a28      	ldr	r2, [pc, #160]	; (800ff18 <readCanToStructs+0x328>)
 800fe76:	011b      	lsls	r3, r3, #4
 800fe78:	4413      	add	r3, r2
 800fe7a:	3304      	adds	r3, #4
 800fe7c:	781b      	ldrb	r3, [r3, #0]
 800fe7e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 800fe82:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d110      	bne.n	800feac <readCanToStructs+0x2bc>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fe8a:	2206      	movs	r2, #6
 800fe8c:	2100      	movs	r1, #0
 800fe8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe90:	f012 f924 	bl	80220dc <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800fe94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fe98:	4a21      	ldr	r2, [pc, #132]	; (800ff20 <readCanToStructs+0x330>)
 800fe9a:	f240 4112 	movw	r1, #1042	; 0x412
 800fe9e:	fb01 f303 	mul.w	r3, r1, r3
 800fea2:	4413      	add	r3, r2
 800fea4:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fea8:	2200      	movs	r2, #0
 800feaa:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 800feac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800feb0:	4a1b      	ldr	r2, [pc, #108]	; (800ff20 <readCanToStructs+0x330>)
 800feb2:	f240 4112 	movw	r1, #1042	; 0x412
 800feb6:	fb01 f303 	mul.w	r3, r1, r3
 800feba:	4413      	add	r3, r2
 800febc:	f203 2313 	addw	r3, r3, #531	; 0x213
 800fec0:	781b      	ldrb	r3, [r3, #0]
 800fec2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d015      	beq.n	800fef6 <readCanToStructs+0x306>
					printf("GPS2 Packet Seq no MisMatch\n");
 800feca:	481a      	ldr	r0, [pc, #104]	; (800ff34 <readCanToStructs+0x344>)
 800fecc:	f012 fa8a 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 800fed0:	2206      	movs	r2, #6
 800fed2:	2100      	movs	r1, #0
 800fed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fed6:	f012 f901 	bl	80220dc <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800feda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fede:	4a10      	ldr	r2, [pc, #64]	; (800ff20 <readCanToStructs+0x330>)
 800fee0:	f240 4112 	movw	r1, #1042	; 0x412
 800fee4:	fb01 f303 	mul.w	r3, r1, r3
 800fee8:	4413      	add	r3, r2
 800feea:	f203 2313 	addw	r3, r3, #531	; 0x213
 800feee:	2200      	movs	r2, #0
 800fef0:	701a      	strb	r2, [r3, #0]
					break;
 800fef2:	f000 bfb1 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 800fef6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800fefa:	4613      	mov	r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	1a9b      	subs	r3, r3, r2
 800ff00:	461a      	mov	r2, r3
 800ff02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff04:	4413      	add	r3, r2
 800ff06:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ff08:	2301      	movs	r3, #1
 800ff0a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff0e:	e02a      	b.n	800ff66 <readCanToStructs+0x376>
 800ff10:	20000304 	.word	0x20000304
 800ff14:	2000195c 	.word	0x2000195c
 800ff18:	20005a54 	.word	0x20005a54
 800ff1c:	200027d8 	.word	0x200027d8
 800ff20:	20005230 	.word	0x20005230
 800ff24:	08026704 	.word	0x08026704
 800ff28:	200027d0 	.word	0x200027d0
 800ff2c:	20000645 	.word	0x20000645
 800ff30:	08026720 	.word	0x08026720
 800ff34:	08026734 	.word	0x08026734
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 800ff38:	4bb6      	ldr	r3, [pc, #728]	; (8010214 <readCanToStructs+0x624>)
 800ff3a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff3e:	885b      	ldrh	r3, [r3, #2]
 800ff40:	461a      	mov	r2, r3
 800ff42:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff46:	49b3      	ldr	r1, [pc, #716]	; (8010214 <readCanToStructs+0x624>)
 800ff48:	0112      	lsls	r2, r2, #4
 800ff4a:	440a      	add	r2, r1
 800ff4c:	4413      	add	r3, r2
 800ff4e:	3304      	adds	r3, #4
 800ff50:	781a      	ldrb	r2, [r3, #0]
 800ff52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff54:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 800ff56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff58:	3301      	adds	r3, #1
 800ff5a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 800ff5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800ff60:	3301      	adds	r3, #1
 800ff62:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800ff66:	4bab      	ldr	r3, [pc, #684]	; (8010214 <readCanToStructs+0x624>)
 800ff68:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ff6c:	885b      	ldrh	r3, [r3, #2]
 800ff6e:	4aa9      	ldr	r2, [pc, #676]	; (8010214 <readCanToStructs+0x624>)
 800ff70:	011b      	lsls	r3, r3, #4
 800ff72:	4413      	add	r3, r2
 800ff74:	330c      	adds	r3, #12
 800ff76:	781b      	ldrb	r3, [r3, #0]
 800ff78:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800ff7c:	429a      	cmp	r2, r3
 800ff7e:	d3db      	bcc.n	800ff38 <readCanToStructs+0x348>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800ff80:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ff84:	4aa4      	ldr	r2, [pc, #656]	; (8010218 <readCanToStructs+0x628>)
 800ff86:	f240 4112 	movw	r1, #1042	; 0x412
 800ff8a:	fb01 f303 	mul.w	r3, r1, r3
 800ff8e:	4413      	add	r3, r2
 800ff90:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ff94:	781b      	ldrb	r3, [r3, #0]
 800ff96:	461a      	mov	r2, r3
 800ff98:	4613      	mov	r3, r2
 800ff9a:	00db      	lsls	r3, r3, #3
 800ff9c:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 800ff9e:	4b9d      	ldr	r3, [pc, #628]	; (8010214 <readCanToStructs+0x624>)
 800ffa0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 800ffa4:	885b      	ldrh	r3, [r3, #2]
 800ffa6:	499b      	ldr	r1, [pc, #620]	; (8010214 <readCanToStructs+0x624>)
 800ffa8:	011b      	lsls	r3, r3, #4
 800ffaa:	440b      	add	r3, r1
 800ffac:	330c      	adds	r3, #12
 800ffae:	781b      	ldrb	r3, [r3, #0]
 800ffb0:	3b01      	subs	r3, #1
 800ffb2:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 800ffb4:	2b05      	cmp	r3, #5
 800ffb6:	d91c      	bls.n	800fff2 <readCanToStructs+0x402>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 800ffb8:	4b98      	ldr	r3, [pc, #608]	; (801021c <readCanToStructs+0x62c>)
 800ffba:	4a99      	ldr	r2, [pc, #612]	; (8010220 <readCanToStructs+0x630>)
 800ffbc:	6811      	ldr	r1, [r2, #0]
 800ffbe:	6019      	str	r1, [r3, #0]
 800ffc0:	8892      	ldrh	r2, [r2, #4]
 800ffc2:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 800ffc4:	4b97      	ldr	r3, [pc, #604]	; (8010224 <readCanToStructs+0x634>)
 800ffc6:	781b      	ldrb	r3, [r3, #0]
 800ffc8:	2b01      	cmp	r3, #1
 800ffca:	d102      	bne.n	800ffd2 <readCanToStructs+0x3e2>
						printf("GPS2_PACKET_RECEIVED\n");
 800ffcc:	4896      	ldr	r0, [pc, #600]	; (8010228 <readCanToStructs+0x638>)
 800ffce:	f012 fa09 	bl	80223e4 <puts>
					Write_RTC();
 800ffd2:	f7fa ff33 	bl	800ae3c <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 800ffd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ffda:	4a8f      	ldr	r2, [pc, #572]	; (8010218 <readCanToStructs+0x628>)
 800ffdc:	f240 4112 	movw	r1, #1042	; 0x412
 800ffe0:	fb01 f303 	mul.w	r3, r1, r3
 800ffe4:	4413      	add	r3, r2
 800ffe6:	f203 2313 	addw	r3, r3, #531	; 0x213
 800ffea:	2200      	movs	r2, #0
 800ffec:	701a      	strb	r2, [r3, #0]
				break;
 800ffee:	f000 bf33 	b.w	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 800fff2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fff6:	4a88      	ldr	r2, [pc, #544]	; (8010218 <readCanToStructs+0x628>)
 800fff8:	f240 4112 	movw	r1, #1042	; 0x412
 800fffc:	fb01 f303 	mul.w	r3, r1, r3
 8010000:	4413      	add	r3, r2
 8010002:	f203 2312 	addw	r3, r3, #530	; 0x212
 8010006:	2201      	movs	r2, #1
 8010008:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801000a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801000e:	4982      	ldr	r1, [pc, #520]	; (8010218 <readCanToStructs+0x628>)
 8010010:	f240 4212 	movw	r2, #1042	; 0x412
 8010014:	fb03 f202 	mul.w	r2, r3, r2
 8010018:	440a      	add	r2, r1
 801001a:	f202 2213 	addw	r2, r2, #531	; 0x213
 801001e:	7812      	ldrb	r2, [r2, #0]
 8010020:	3201      	adds	r2, #1
 8010022:	b2d0      	uxtb	r0, r2
 8010024:	4a7c      	ldr	r2, [pc, #496]	; (8010218 <readCanToStructs+0x628>)
 8010026:	f240 4112 	movw	r1, #1042	; 0x412
 801002a:	fb01 f303 	mul.w	r3, r1, r3
 801002e:	4413      	add	r3, r2
 8010030:	f203 2313 	addw	r3, r3, #531	; 0x213
 8010034:	4602      	mov	r2, r0
 8010036:	701a      	strb	r2, [r3, #0]
				break;
 8010038:	f000 bf0e 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 801003c:	4b7b      	ldr	r3, [pc, #492]	; (801022c <readCanToStructs+0x63c>)
 801003e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010040:	4b74      	ldr	r3, [pc, #464]	; (8010214 <readCanToStructs+0x624>)
 8010042:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010046:	885b      	ldrh	r3, [r3, #2]
 8010048:	4a72      	ldr	r2, [pc, #456]	; (8010214 <readCanToStructs+0x624>)
 801004a:	011b      	lsls	r3, r3, #4
 801004c:	4413      	add	r3, r2
 801004e:	3304      	adds	r3, #4
 8010050:	781b      	ldrb	r3, [r3, #0]
 8010052:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010056:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801005a:	2b00      	cmp	r3, #0
 801005c:	d110      	bne.n	8010080 <readCanToStructs+0x490>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 801005e:	2218      	movs	r2, #24
 8010060:	2100      	movs	r1, #0
 8010062:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010064:	f012 f83a 	bl	80220dc <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8010068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801006c:	4a6a      	ldr	r2, [pc, #424]	; (8010218 <readCanToStructs+0x628>)
 801006e:	f240 4112 	movw	r1, #1042	; 0x412
 8010072:	fb01 f303 	mul.w	r3, r1, r3
 8010076:	4413      	add	r3, r2
 8010078:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801007c:	2200      	movs	r2, #0
 801007e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 8010080:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010084:	4a64      	ldr	r2, [pc, #400]	; (8010218 <readCanToStructs+0x628>)
 8010086:	f240 4112 	movw	r1, #1042	; 0x412
 801008a:	fb01 f303 	mul.w	r3, r1, r3
 801008e:	4413      	add	r3, r2
 8010090:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010094:	781b      	ldrb	r3, [r3, #0]
 8010096:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801009a:	429a      	cmp	r2, r3
 801009c:	d015      	beq.n	80100ca <readCanToStructs+0x4da>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 801009e:	4864      	ldr	r0, [pc, #400]	; (8010230 <readCanToStructs+0x640>)
 80100a0:	f012 f9a0 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80100a4:	2218      	movs	r2, #24
 80100a6:	2100      	movs	r1, #0
 80100a8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80100aa:	f012 f817 	bl	80220dc <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80100ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80100b2:	4a59      	ldr	r2, [pc, #356]	; (8010218 <readCanToStructs+0x628>)
 80100b4:	f240 4112 	movw	r1, #1042	; 0x412
 80100b8:	fb01 f303 	mul.w	r3, r1, r3
 80100bc:	4413      	add	r3, r2
 80100be:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80100c2:	2200      	movs	r2, #0
 80100c4:	701a      	strb	r2, [r3, #0]
					break;
 80100c6:	f000 bec7 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80100ca:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80100ce:	4613      	mov	r3, r2
 80100d0:	00db      	lsls	r3, r3, #3
 80100d2:	1a9b      	subs	r3, r3, r2
 80100d4:	461a      	mov	r2, r3
 80100d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80100d8:	4413      	add	r3, r2
 80100da:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80100dc:	2301      	movs	r3, #1
 80100de:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80100e2:	e016      	b.n	8010112 <readCanToStructs+0x522>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80100e4:	4b4b      	ldr	r3, [pc, #300]	; (8010214 <readCanToStructs+0x624>)
 80100e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80100ea:	885b      	ldrh	r3, [r3, #2]
 80100ec:	461a      	mov	r2, r3
 80100ee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100f2:	4948      	ldr	r1, [pc, #288]	; (8010214 <readCanToStructs+0x624>)
 80100f4:	0112      	lsls	r2, r2, #4
 80100f6:	440a      	add	r2, r1
 80100f8:	4413      	add	r3, r2
 80100fa:	3304      	adds	r3, #4
 80100fc:	781a      	ldrb	r2, [r3, #0]
 80100fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010100:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010104:	3301      	adds	r3, #1
 8010106:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010108:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801010c:	3301      	adds	r3, #1
 801010e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010112:	4b40      	ldr	r3, [pc, #256]	; (8010214 <readCanToStructs+0x624>)
 8010114:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010118:	885b      	ldrh	r3, [r3, #2]
 801011a:	4a3e      	ldr	r2, [pc, #248]	; (8010214 <readCanToStructs+0x624>)
 801011c:	011b      	lsls	r3, r3, #4
 801011e:	4413      	add	r3, r2
 8010120:	330c      	adds	r3, #12
 8010122:	781b      	ldrb	r3, [r3, #0]
 8010124:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010128:	429a      	cmp	r2, r3
 801012a:	d3db      	bcc.n	80100e4 <readCanToStructs+0x4f4>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 801012c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010130:	4a39      	ldr	r2, [pc, #228]	; (8010218 <readCanToStructs+0x628>)
 8010132:	f240 4112 	movw	r1, #1042	; 0x412
 8010136:	fb01 f303 	mul.w	r3, r1, r3
 801013a:	4413      	add	r3, r2
 801013c:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8010140:	781b      	ldrb	r3, [r3, #0]
 8010142:	461a      	mov	r2, r3
 8010144:	4613      	mov	r3, r2
 8010146:	00db      	lsls	r3, r3, #3
 8010148:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 801014a:	4b32      	ldr	r3, [pc, #200]	; (8010214 <readCanToStructs+0x624>)
 801014c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010150:	885b      	ldrh	r3, [r3, #2]
 8010152:	4930      	ldr	r1, [pc, #192]	; (8010214 <readCanToStructs+0x624>)
 8010154:	011b      	lsls	r3, r3, #4
 8010156:	440b      	add	r3, r1
 8010158:	330c      	adds	r3, #12
 801015a:	781b      	ldrb	r3, [r3, #0]
 801015c:	3b01      	subs	r3, #1
 801015e:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 8010160:	2b17      	cmp	r3, #23
 8010162:	d932      	bls.n	80101ca <readCanToStructs+0x5da>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 8010164:	4b31      	ldr	r3, [pc, #196]	; (801022c <readCanToStructs+0x63c>)
 8010166:	781b      	ldrb	r3, [r3, #0]
 8010168:	461a      	mov	r2, r3
 801016a:	4613      	mov	r3, r2
 801016c:	005b      	lsls	r3, r3, #1
 801016e:	4413      	add	r3, r2
 8010170:	00db      	lsls	r3, r3, #3
 8010172:	4a30      	ldr	r2, [pc, #192]	; (8010234 <readCanToStructs+0x644>)
 8010174:	4413      	add	r3, r2
 8010176:	2218      	movs	r2, #24
 8010178:	492c      	ldr	r1, [pc, #176]	; (801022c <readCanToStructs+0x63c>)
 801017a:	4618      	mov	r0, r3
 801017c:	f011 ff86 	bl	802208c <memcpy>
					if(Debug_flag == 1)
 8010180:	4b28      	ldr	r3, [pc, #160]	; (8010224 <readCanToStructs+0x634>)
 8010182:	781b      	ldrb	r3, [r3, #0]
 8010184:	2b01      	cmp	r3, #1
 8010186:	d105      	bne.n	8010194 <readCanToStructs+0x5a4>
						printf("O_Info1_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010188:	4b28      	ldr	r3, [pc, #160]	; (801022c <readCanToStructs+0x63c>)
 801018a:	781b      	ldrb	r3, [r3, #0]
 801018c:	4619      	mov	r1, r3
 801018e:	482a      	ldr	r0, [pc, #168]	; (8010238 <readCanToStructs+0x648>)
 8010190:	f012 f88c 	bl	80222ac <iprintf>
					Is_CAN_Exchange_happening = YES;
 8010194:	4b29      	ldr	r3, [pc, #164]	; (801023c <readCanToStructs+0x64c>)
 8010196:	2201      	movs	r2, #1
 8010198:	701a      	strb	r2, [r3, #0]
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 801019a:	f005 f87d 	bl	8015298 <HAL_GetTick>
 801019e:	4603      	mov	r3, r0
 80101a0:	4a27      	ldr	r2, [pc, #156]	; (8010240 <readCanToStructs+0x650>)
 80101a2:	6013      	str	r3, [r2, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80101a4:	4b21      	ldr	r3, [pc, #132]	; (801022c <readCanToStructs+0x63c>)
 80101a6:	781b      	ldrb	r3, [r3, #0]
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7f7 fd63 	bl	8007c74 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80101ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101b2:	4a19      	ldr	r2, [pc, #100]	; (8010218 <readCanToStructs+0x628>)
 80101b4:	f240 4112 	movw	r1, #1042	; 0x412
 80101b8:	fb01 f303 	mul.w	r3, r1, r3
 80101bc:	4413      	add	r3, r2
 80101be:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80101c2:	2200      	movs	r2, #0
 80101c4:	701a      	strb	r2, [r3, #0]
				break;
 80101c6:	f000 be47 	b.w	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80101ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101ce:	4a12      	ldr	r2, [pc, #72]	; (8010218 <readCanToStructs+0x628>)
 80101d0:	f240 4112 	movw	r1, #1042	; 0x412
 80101d4:	fb01 f303 	mul.w	r3, r1, r3
 80101d8:	4413      	add	r3, r2
 80101da:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80101de:	2201      	movs	r2, #1
 80101e0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80101e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80101e6:	490c      	ldr	r1, [pc, #48]	; (8010218 <readCanToStructs+0x628>)
 80101e8:	f240 4212 	movw	r2, #1042	; 0x412
 80101ec:	fb03 f202 	mul.w	r2, r3, r2
 80101f0:	440a      	add	r2, r1
 80101f2:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80101f6:	7812      	ldrb	r2, [r2, #0]
 80101f8:	3201      	adds	r2, #1
 80101fa:	b2d0      	uxtb	r0, r2
 80101fc:	4a06      	ldr	r2, [pc, #24]	; (8010218 <readCanToStructs+0x628>)
 80101fe:	f240 4112 	movw	r1, #1042	; 0x412
 8010202:	fb01 f303 	mul.w	r3, r1, r3
 8010206:	4413      	add	r3, r2
 8010208:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801020c:	4602      	mov	r2, r0
 801020e:	701a      	strb	r2, [r3, #0]
				break;
 8010210:	f000 be22 	b.w	8010e58 <readCanToStructs+0x1268>
 8010214:	20005a54 	.word	0x20005a54
 8010218:	20005230 	.word	0x20005230
 801021c:	200027d0 	.word	0x200027d0
 8010220:	200027d8 	.word	0x200027d8
 8010224:	20000645 	.word	0x20000645
 8010228:	08026750 	.word	0x08026750
 801022c:	2000186c 	.word	0x2000186c
 8010230:	08026768 	.word	0x08026768
 8010234:	20001764 	.word	0x20001764
 8010238:	0802678c 	.word	0x0802678c
 801023c:	20000108 	.word	0x20000108
 8010240:	20000e40 	.word	0x20000e40
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_Ei_self_sharing_st;
 8010244:	4b9f      	ldr	r3, [pc, #636]	; (80104c4 <readCanToStructs+0x8d4>)
 8010246:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010248:	4b9f      	ldr	r3, [pc, #636]	; (80104c8 <readCanToStructs+0x8d8>)
 801024a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801024e:	885b      	ldrh	r3, [r3, #2]
 8010250:	4a9d      	ldr	r2, [pc, #628]	; (80104c8 <readCanToStructs+0x8d8>)
 8010252:	011b      	lsls	r3, r3, #4
 8010254:	4413      	add	r3, r2
 8010256:	3304      	adds	r3, #4
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801025e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010262:	2b00      	cmp	r3, #0
 8010264:	d110      	bne.n	8010288 <readCanToStructs+0x698>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 8010266:	2218      	movs	r2, #24
 8010268:	2100      	movs	r1, #0
 801026a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801026c:	f011 ff36 	bl	80220dc <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8010270:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010274:	4a95      	ldr	r2, [pc, #596]	; (80104cc <readCanToStructs+0x8dc>)
 8010276:	f240 4112 	movw	r1, #1042	; 0x412
 801027a:	fb01 f303 	mul.w	r3, r1, r3
 801027e:	4413      	add	r3, r2
 8010280:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010284:	2200      	movs	r2, #0
 8010286:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8010288:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801028c:	4a8f      	ldr	r2, [pc, #572]	; (80104cc <readCanToStructs+0x8dc>)
 801028e:	f240 4112 	movw	r1, #1042	; 0x412
 8010292:	fb01 f303 	mul.w	r3, r1, r3
 8010296:	4413      	add	r3, r2
 8010298:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801029c:	781b      	ldrb	r3, [r3, #0]
 801029e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d015      	beq.n	80102d2 <readCanToStructs+0x6e2>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 80102a6:	488a      	ldr	r0, [pc, #552]	; (80104d0 <readCanToStructs+0x8e0>)
 80102a8:	f012 f89c 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(EI_SELF_SHARING_t));
 80102ac:	2218      	movs	r2, #24
 80102ae:	2100      	movs	r1, #0
 80102b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80102b2:	f011 ff13 	bl	80220dc <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80102b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80102ba:	4a84      	ldr	r2, [pc, #528]	; (80104cc <readCanToStructs+0x8dc>)
 80102bc:	f240 4112 	movw	r1, #1042	; 0x412
 80102c0:	fb01 f303 	mul.w	r3, r1, r3
 80102c4:	4413      	add	r3, r2
 80102c6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80102ca:	2200      	movs	r2, #0
 80102cc:	701a      	strb	r2, [r3, #0]
					break;
 80102ce:	f000 bdc3 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80102d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80102d6:	4613      	mov	r3, r2
 80102d8:	00db      	lsls	r3, r3, #3
 80102da:	1a9b      	subs	r3, r3, r2
 80102dc:	461a      	mov	r2, r3
 80102de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102e0:	4413      	add	r3, r2
 80102e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80102e4:	2301      	movs	r3, #1
 80102e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80102ea:	e016      	b.n	801031a <readCanToStructs+0x72a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80102ec:	4b76      	ldr	r3, [pc, #472]	; (80104c8 <readCanToStructs+0x8d8>)
 80102ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80102f2:	885b      	ldrh	r3, [r3, #2]
 80102f4:	461a      	mov	r2, r3
 80102f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102fa:	4973      	ldr	r1, [pc, #460]	; (80104c8 <readCanToStructs+0x8d8>)
 80102fc:	0112      	lsls	r2, r2, #4
 80102fe:	440a      	add	r2, r1
 8010300:	4413      	add	r3, r2
 8010302:	3304      	adds	r3, #4
 8010304:	781a      	ldrb	r2, [r3, #0]
 8010306:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010308:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801030a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801030c:	3301      	adds	r3, #1
 801030e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010310:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010314:	3301      	adds	r3, #1
 8010316:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801031a:	4b6b      	ldr	r3, [pc, #428]	; (80104c8 <readCanToStructs+0x8d8>)
 801031c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010320:	885b      	ldrh	r3, [r3, #2]
 8010322:	4a69      	ldr	r2, [pc, #420]	; (80104c8 <readCanToStructs+0x8d8>)
 8010324:	011b      	lsls	r3, r3, #4
 8010326:	4413      	add	r3, r2
 8010328:	330c      	adds	r3, #12
 801032a:	781b      	ldrb	r3, [r3, #0]
 801032c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010330:	429a      	cmp	r2, r3
 8010332:	d3db      	bcc.n	80102ec <readCanToStructs+0x6fc>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010334:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010338:	4a64      	ldr	r2, [pc, #400]	; (80104cc <readCanToStructs+0x8dc>)
 801033a:	f240 4112 	movw	r1, #1042	; 0x412
 801033e:	fb01 f303 	mul.w	r3, r1, r3
 8010342:	4413      	add	r3, r2
 8010344:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010348:	781b      	ldrb	r3, [r3, #0]
 801034a:	461a      	mov	r2, r3
 801034c:	4613      	mov	r3, r2
 801034e:	00db      	lsls	r3, r3, #3
 8010350:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(EI_SELF_SHARING_t))
 8010352:	4b5d      	ldr	r3, [pc, #372]	; (80104c8 <readCanToStructs+0x8d8>)
 8010354:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010358:	885b      	ldrh	r3, [r3, #2]
 801035a:	495b      	ldr	r1, [pc, #364]	; (80104c8 <readCanToStructs+0x8d8>)
 801035c:	011b      	lsls	r3, r3, #4
 801035e:	440b      	add	r3, r1
 8010360:	330c      	adds	r3, #12
 8010362:	781b      	ldrb	r3, [r3, #0]
 8010364:	3b01      	subs	r3, #1
 8010366:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8010368:	2b17      	cmp	r3, #23
 801036a:	d932      	bls.n	80103d2 <readCanToStructs+0x7e2>
					memcpy(&Rx_Ei_self_sharing_st[Temp_Rx_Ei_self_sharing_st.Peer_Index],&Temp_Rx_Ei_self_sharing_st,sizeof(EI_SELF_SHARING_t));
 801036c:	4b55      	ldr	r3, [pc, #340]	; (80104c4 <readCanToStructs+0x8d4>)
 801036e:	781b      	ldrb	r3, [r3, #0]
 8010370:	461a      	mov	r2, r3
 8010372:	4613      	mov	r3, r2
 8010374:	005b      	lsls	r3, r3, #1
 8010376:	4413      	add	r3, r2
 8010378:	00db      	lsls	r3, r3, #3
 801037a:	4a56      	ldr	r2, [pc, #344]	; (80104d4 <readCanToStructs+0x8e4>)
 801037c:	4413      	add	r3, r2
 801037e:	2218      	movs	r2, #24
 8010380:	4950      	ldr	r1, [pc, #320]	; (80104c4 <readCanToStructs+0x8d4>)
 8010382:	4618      	mov	r0, r3
 8010384:	f011 fe82 	bl	802208c <memcpy>
					if(Debug_flag == 1)
 8010388:	4b53      	ldr	r3, [pc, #332]	; (80104d8 <readCanToStructs+0x8e8>)
 801038a:	781b      	ldrb	r3, [r3, #0]
 801038c:	2b01      	cmp	r3, #1
 801038e:	d105      	bne.n	801039c <readCanToStructs+0x7ac>
						printf("O_Info2_RCV:%u\n",Temp_Rx_Ei_self_sharing_st.Peer_Index);
 8010390:	4b4c      	ldr	r3, [pc, #304]	; (80104c4 <readCanToStructs+0x8d4>)
 8010392:	781b      	ldrb	r3, [r3, #0]
 8010394:	4619      	mov	r1, r3
 8010396:	4851      	ldr	r0, [pc, #324]	; (80104dc <readCanToStructs+0x8ec>)
 8010398:	f011 ff88 	bl	80222ac <iprintf>
					RCV_SELF_XCHG_CLK = HAL_GetTick();
 801039c:	f004 ff7c 	bl	8015298 <HAL_GetTick>
 80103a0:	4603      	mov	r3, r0
 80103a2:	4a4f      	ldr	r2, [pc, #316]	; (80104e0 <readCanToStructs+0x8f0>)
 80103a4:	6013      	str	r3, [r2, #0]
					Is_CAN_Exchange_happening = YES;
 80103a6:	4b4f      	ldr	r3, [pc, #316]	; (80104e4 <readCanToStructs+0x8f4>)
 80103a8:	2201      	movs	r2, #1
 80103aa:	701a      	strb	r2, [r3, #0]
					Check_Other_EiPC_Packet(Temp_Rx_Ei_self_sharing_st.Peer_Index);
 80103ac:	4b45      	ldr	r3, [pc, #276]	; (80104c4 <readCanToStructs+0x8d4>)
 80103ae:	781b      	ldrb	r3, [r3, #0]
 80103b0:	4618      	mov	r0, r3
 80103b2:	f7f7 fc5f 	bl	8007c74 <Check_Other_EiPC_Packet>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80103b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103ba:	4a44      	ldr	r2, [pc, #272]	; (80104cc <readCanToStructs+0x8dc>)
 80103bc:	f240 4112 	movw	r1, #1042	; 0x412
 80103c0:	fb01 f303 	mul.w	r3, r1, r3
 80103c4:	4413      	add	r3, r2
 80103c6:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80103ca:	2200      	movs	r2, #0
 80103cc:	701a      	strb	r2, [r3, #0]
				break;
 80103ce:	f000 bd43 	b.w	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80103d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103d6:	4a3d      	ldr	r2, [pc, #244]	; (80104cc <readCanToStructs+0x8dc>)
 80103d8:	f240 4112 	movw	r1, #1042	; 0x412
 80103dc:	fb01 f303 	mul.w	r3, r1, r3
 80103e0:	4413      	add	r3, r2
 80103e2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80103e6:	2201      	movs	r2, #1
 80103e8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 80103ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80103ee:	4937      	ldr	r1, [pc, #220]	; (80104cc <readCanToStructs+0x8dc>)
 80103f0:	f240 4212 	movw	r2, #1042	; 0x412
 80103f4:	fb03 f202 	mul.w	r2, r3, r2
 80103f8:	440a      	add	r2, r1
 80103fa:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80103fe:	7812      	ldrb	r2, [r2, #0]
 8010400:	3201      	adds	r2, #1
 8010402:	b2d0      	uxtb	r0, r2
 8010404:	4a31      	ldr	r2, [pc, #196]	; (80104cc <readCanToStructs+0x8dc>)
 8010406:	f240 4112 	movw	r1, #1042	; 0x412
 801040a:	fb01 f303 	mul.w	r3, r1, r3
 801040e:	4413      	add	r3, r2
 8010410:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8010414:	4602      	mov	r2, r0
 8010416:	701a      	strb	r2, [r3, #0]
				break;
 8010418:	f000 bd1e 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 801041c:	4b32      	ldr	r3, [pc, #200]	; (80104e8 <readCanToStructs+0x8f8>)
 801041e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010420:	4b29      	ldr	r3, [pc, #164]	; (80104c8 <readCanToStructs+0x8d8>)
 8010422:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010426:	885b      	ldrh	r3, [r3, #2]
 8010428:	4a27      	ldr	r2, [pc, #156]	; (80104c8 <readCanToStructs+0x8d8>)
 801042a:	011b      	lsls	r3, r3, #4
 801042c:	4413      	add	r3, r2
 801042e:	3304      	adds	r3, #4
 8010430:	781b      	ldrb	r3, [r3, #0]
 8010432:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010436:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801043a:	2b00      	cmp	r3, #0
 801043c:	d110      	bne.n	8010460 <readCanToStructs+0x870>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801043e:	2246      	movs	r2, #70	; 0x46
 8010440:	2100      	movs	r1, #0
 8010442:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010444:	f011 fe4a 	bl	80220dc <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 8010448:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801044c:	4a1f      	ldr	r2, [pc, #124]	; (80104cc <readCanToStructs+0x8dc>)
 801044e:	f240 4112 	movw	r1, #1042	; 0x412
 8010452:	fb01 f303 	mul.w	r3, r1, r3
 8010456:	4413      	add	r3, r2
 8010458:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801045c:	2200      	movs	r2, #0
 801045e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo)
 8010460:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010464:	4a19      	ldr	r2, [pc, #100]	; (80104cc <readCanToStructs+0x8dc>)
 8010466:	f240 4112 	movw	r1, #1042	; 0x412
 801046a:	fb01 f303 	mul.w	r3, r1, r3
 801046e:	4413      	add	r3, r2
 8010470:	f203 4307 	addw	r3, r3, #1031	; 0x407
 8010474:	781b      	ldrb	r3, [r3, #0]
 8010476:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801047a:	429a      	cmp	r2, r3
 801047c:	d015      	beq.n	80104aa <readCanToStructs+0x8ba>
					printf("SEND_VITAL_MSG_1 Seq no MisMatch\n");
 801047e:	481b      	ldr	r0, [pc, #108]	; (80104ec <readCanToStructs+0x8fc>)
 8010480:	f011 ffb0 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010484:	2246      	movs	r2, #70	; 0x46
 8010486:	2100      	movs	r1, #0
 8010488:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801048a:	f011 fe27 	bl	80220dc <memset>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 801048e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010492:	4a0e      	ldr	r2, [pc, #56]	; (80104cc <readCanToStructs+0x8dc>)
 8010494:	f240 4112 	movw	r1, #1042	; 0x412
 8010498:	fb01 f303 	mul.w	r3, r1, r3
 801049c:	4413      	add	r3, r2
 801049e:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80104a2:	2200      	movs	r2, #0
 80104a4:	701a      	strb	r2, [r3, #0]
					break;
 80104a6:	f000 bcd7 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80104aa:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80104ae:	4613      	mov	r3, r2
 80104b0:	00db      	lsls	r3, r3, #3
 80104b2:	1a9b      	subs	r3, r3, r2
 80104b4:	461a      	mov	r2, r3
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	4413      	add	r3, r2
 80104ba:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80104bc:	2301      	movs	r3, #1
 80104be:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80104c2:	e02c      	b.n	801051e <readCanToStructs+0x92e>
 80104c4:	2000186c 	.word	0x2000186c
 80104c8:	20005a54 	.word	0x20005a54
 80104cc:	20005230 	.word	0x20005230
 80104d0:	0802679c 	.word	0x0802679c
 80104d4:	20001764 	.word	0x20001764
 80104d8:	20000645 	.word	0x20000645
 80104dc:	080267c0 	.word	0x080267c0
 80104e0:	20000e40 	.word	0x20000e40
 80104e4:	20000108 	.word	0x20000108
 80104e8:	20001914 	.word	0x20001914
 80104ec:	080267d0 	.word	0x080267d0
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80104f0:	4bb9      	ldr	r3, [pc, #740]	; (80107d8 <readCanToStructs+0xbe8>)
 80104f2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80104f6:	885b      	ldrh	r3, [r3, #2]
 80104f8:	461a      	mov	r2, r3
 80104fa:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80104fe:	49b6      	ldr	r1, [pc, #728]	; (80107d8 <readCanToStructs+0xbe8>)
 8010500:	0112      	lsls	r2, r2, #4
 8010502:	440a      	add	r2, r1
 8010504:	4413      	add	r3, r2
 8010506:	3304      	adds	r3, #4
 8010508:	781a      	ldrb	r2, [r3, #0]
 801050a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801050c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801050e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010510:	3301      	adds	r3, #1
 8010512:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010514:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010518:	3301      	adds	r3, #1
 801051a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801051e:	4bae      	ldr	r3, [pc, #696]	; (80107d8 <readCanToStructs+0xbe8>)
 8010520:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010524:	885b      	ldrh	r3, [r3, #2]
 8010526:	4aac      	ldr	r2, [pc, #688]	; (80107d8 <readCanToStructs+0xbe8>)
 8010528:	011b      	lsls	r3, r3, #4
 801052a:	4413      	add	r3, r2
 801052c:	330c      	adds	r3, #12
 801052e:	781b      	ldrb	r3, [r3, #0]
 8010530:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010534:	429a      	cmp	r2, r3
 8010536:	d3db      	bcc.n	80104f0 <readCanToStructs+0x900>
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 8010538:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801053c:	4aa7      	ldr	r2, [pc, #668]	; (80107dc <readCanToStructs+0xbec>)
 801053e:	f240 4112 	movw	r1, #1042	; 0x412
 8010542:	fb01 f303 	mul.w	r3, r1, r3
 8010546:	4413      	add	r3, r2
 8010548:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801054c:	781b      	ldrb	r3, [r3, #0]
 801054e:	461a      	mov	r2, r3
 8010550:	4613      	mov	r3, r2
 8010552:	00db      	lsls	r3, r3, #3
 8010554:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010556:	4ba0      	ldr	r3, [pc, #640]	; (80107d8 <readCanToStructs+0xbe8>)
 8010558:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801055c:	885b      	ldrh	r3, [r3, #2]
 801055e:	499e      	ldr	r1, [pc, #632]	; (80107d8 <readCanToStructs+0xbe8>)
 8010560:	011b      	lsls	r3, r3, #4
 8010562:	440b      	add	r3, r1
 8010564:	330c      	adds	r3, #12
 8010566:	781b      	ldrb	r3, [r3, #0]
 8010568:	3b01      	subs	r3, #1
 801056a:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo) * 7)
 801056c:	2b45      	cmp	r3, #69	; 0x45
 801056e:	d93d      	bls.n	80105ec <readCanToStructs+0x9fc>
					if(Debug_flag == 1)
 8010570:	4b9b      	ldr	r3, [pc, #620]	; (80107e0 <readCanToStructs+0xbf0>)
 8010572:	781b      	ldrb	r3, [r3, #0]
 8010574:	2b01      	cmp	r3, #1
 8010576:	d102      	bne.n	801057e <readCanToStructs+0x98e>
						printf("RCV V-Message-1\n");
 8010578:	489a      	ldr	r0, [pc, #616]	; (80107e4 <readCanToStructs+0xbf4>)
 801057a:	f011 ff33 	bl	80223e4 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801057e:	2246      	movs	r2, #70	; 0x46
 8010580:	2100      	movs	r1, #0
 8010582:	4899      	ldr	r0, [pc, #612]	; (80107e8 <readCanToStructs+0xbf8>)
 8010584:	f011 fdaa 	bl	80220dc <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010588:	4a97      	ldr	r2, [pc, #604]	; (80107e8 <readCanToStructs+0xbf8>)
 801058a:	4b98      	ldr	r3, [pc, #608]	; (80107ec <readCanToStructs+0xbfc>)
 801058c:	4610      	mov	r0, r2
 801058e:	4619      	mov	r1, r3
 8010590:	2346      	movs	r3, #70	; 0x46
 8010592:	461a      	mov	r2, r3
 8010594:	f011 fd7a 	bl	802208c <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010598:	4b95      	ldr	r3, [pc, #596]	; (80107f0 <readCanToStructs+0xc00>)
 801059a:	2201      	movs	r2, #1
 801059c:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].IS_PRIMARY != RECEIVED)
 801059e:	4b92      	ldr	r3, [pc, #584]	; (80107e8 <readCanToStructs+0xbf8>)
 80105a0:	881b      	ldrh	r3, [r3, #0]
 80105a2:	4619      	mov	r1, r3
 80105a4:	4a93      	ldr	r2, [pc, #588]	; (80107f4 <readCanToStructs+0xc04>)
 80105a6:	460b      	mov	r3, r1
 80105a8:	005b      	lsls	r3, r3, #1
 80105aa:	440b      	add	r3, r1
 80105ac:	00db      	lsls	r3, r3, #3
 80105ae:	4413      	add	r3, r2
 80105b0:	3304      	adds	r3, #4
 80105b2:	781b      	ldrb	r3, [r3, #0]
 80105b4:	2b01      	cmp	r3, #1
 80105b6:	d00b      	beq.n	80105d0 <readCanToStructs+0x9e0>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80105b8:	4b8b      	ldr	r3, [pc, #556]	; (80107e8 <readCanToStructs+0xbf8>)
 80105ba:	889b      	ldrh	r3, [r3, #4]
 80105bc:	b2d9      	uxtb	r1, r3
 80105be:	4b8a      	ldr	r3, [pc, #552]	; (80107e8 <readCanToStructs+0xbf8>)
 80105c0:	881b      	ldrh	r3, [r3, #0]
 80105c2:	b2da      	uxtb	r2, r3
 80105c4:	4b88      	ldr	r3, [pc, #544]	; (80107e8 <readCanToStructs+0xbf8>)
 80105c6:	885b      	ldrh	r3, [r3, #2]
 80105c8:	b2db      	uxtb	r3, r3
 80105ca:	488b      	ldr	r0, [pc, #556]	; (80107f8 <readCanToStructs+0xc08>)
 80105cc:	f7f4 f828 	bl	8004620 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo = 0;
 80105d0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105d4:	4a81      	ldr	r2, [pc, #516]	; (80107dc <readCanToStructs+0xbec>)
 80105d6:	f240 4112 	movw	r1, #1042	; 0x412
 80105da:	fb01 f303 	mul.w	r3, r1, r3
 80105de:	4413      	add	r3, r2
 80105e0:	f203 4307 	addw	r3, r3, #1031	; 0x407
 80105e4:	2200      	movs	r2, #0
 80105e6:	701a      	strb	r2, [r3, #0]
				break;
 80105e8:	f000 bc36 	b.w	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][SEND_VITAL_MSG_1].invalid = 1;
 80105ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80105f0:	4a7a      	ldr	r2, [pc, #488]	; (80107dc <readCanToStructs+0xbec>)
 80105f2:	f240 4112 	movw	r1, #1042	; 0x412
 80105f6:	fb01 f303 	mul.w	r3, r1, r3
 80105fa:	4413      	add	r3, r2
 80105fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8010600:	2201      	movs	r2, #1
 8010602:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_1].expSeqNo++;
 8010604:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010608:	4974      	ldr	r1, [pc, #464]	; (80107dc <readCanToStructs+0xbec>)
 801060a:	f240 4212 	movw	r2, #1042	; 0x412
 801060e:	fb03 f202 	mul.w	r2, r3, r2
 8010612:	440a      	add	r2, r1
 8010614:	f202 4207 	addw	r2, r2, #1031	; 0x407
 8010618:	7812      	ldrb	r2, [r2, #0]
 801061a:	3201      	adds	r2, #1
 801061c:	b2d0      	uxtb	r0, r2
 801061e:	4a6f      	ldr	r2, [pc, #444]	; (80107dc <readCanToStructs+0xbec>)
 8010620:	f240 4112 	movw	r1, #1042	; 0x412
 8010624:	fb01 f303 	mul.w	r3, r1, r3
 8010628:	4413      	add	r3, r2
 801062a:	f203 4307 	addw	r3, r3, #1031	; 0x407
 801062e:	4602      	mov	r2, r0
 8010630:	701a      	strb	r2, [r3, #0]
				break;
 8010632:	f000 bc11 	b.w	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Temp_Rx_VITAL_MSG_CAN_st;
 8010636:	4b6d      	ldr	r3, [pc, #436]	; (80107ec <readCanToStructs+0xbfc>)
 8010638:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801063a:	4b67      	ldr	r3, [pc, #412]	; (80107d8 <readCanToStructs+0xbe8>)
 801063c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010640:	885b      	ldrh	r3, [r3, #2]
 8010642:	4a65      	ldr	r2, [pc, #404]	; (80107d8 <readCanToStructs+0xbe8>)
 8010644:	011b      	lsls	r3, r3, #4
 8010646:	4413      	add	r3, r2
 8010648:	3304      	adds	r3, #4
 801064a:	781b      	ldrb	r3, [r3, #0]
 801064c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010650:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010654:	2b00      	cmp	r3, #0
 8010656:	d110      	bne.n	801067a <readCanToStructs+0xa8a>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010658:	2246      	movs	r2, #70	; 0x46
 801065a:	2100      	movs	r1, #0
 801065c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801065e:	f011 fd3d 	bl	80220dc <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 8010662:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010666:	4a5d      	ldr	r2, [pc, #372]	; (80107dc <readCanToStructs+0xbec>)
 8010668:	f240 4112 	movw	r1, #1042	; 0x412
 801066c:	fb01 f303 	mul.w	r3, r1, r3
 8010670:	4413      	add	r3, r2
 8010672:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010676:	2200      	movs	r2, #0
 8010678:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo)
 801067a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801067e:	4a57      	ldr	r2, [pc, #348]	; (80107dc <readCanToStructs+0xbec>)
 8010680:	f240 4112 	movw	r1, #1042	; 0x412
 8010684:	fb01 f303 	mul.w	r3, r1, r3
 8010688:	4413      	add	r3, r2
 801068a:	f203 4309 	addw	r3, r3, #1033	; 0x409
 801068e:	781b      	ldrb	r3, [r3, #0]
 8010690:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010694:	429a      	cmp	r2, r3
 8010696:	d014      	beq.n	80106c2 <readCanToStructs+0xad2>
					printf("SEND_VITAL_MSG_2 Seq no MisMatch\n");
 8010698:	4858      	ldr	r0, [pc, #352]	; (80107fc <readCanToStructs+0xc0c>)
 801069a:	f011 fea3 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801069e:	2246      	movs	r2, #70	; 0x46
 80106a0:	2100      	movs	r1, #0
 80106a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80106a4:	f011 fd1a 	bl	80220dc <memset>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80106a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80106ac:	4a4b      	ldr	r2, [pc, #300]	; (80107dc <readCanToStructs+0xbec>)
 80106ae:	f240 4112 	movw	r1, #1042	; 0x412
 80106b2:	fb01 f303 	mul.w	r3, r1, r3
 80106b6:	4413      	add	r3, r2
 80106b8:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80106bc:	2200      	movs	r2, #0
 80106be:	701a      	strb	r2, [r3, #0]
					break;
 80106c0:	e3ca      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80106c2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80106c6:	4613      	mov	r3, r2
 80106c8:	00db      	lsls	r3, r3, #3
 80106ca:	1a9b      	subs	r3, r3, r2
 80106cc:	461a      	mov	r2, r3
 80106ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106d0:	4413      	add	r3, r2
 80106d2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80106d4:	2301      	movs	r3, #1
 80106d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80106da:	e016      	b.n	801070a <readCanToStructs+0xb1a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80106dc:	4b3e      	ldr	r3, [pc, #248]	; (80107d8 <readCanToStructs+0xbe8>)
 80106de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80106e2:	885b      	ldrh	r3, [r3, #2]
 80106e4:	461a      	mov	r2, r3
 80106e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80106ea:	493b      	ldr	r1, [pc, #236]	; (80107d8 <readCanToStructs+0xbe8>)
 80106ec:	0112      	lsls	r2, r2, #4
 80106ee:	440a      	add	r2, r1
 80106f0:	4413      	add	r3, r2
 80106f2:	3304      	adds	r3, #4
 80106f4:	781a      	ldrb	r2, [r3, #0]
 80106f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106f8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80106fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80106fc:	3301      	adds	r3, #1
 80106fe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010700:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010704:	3301      	adds	r3, #1
 8010706:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801070a:	4b33      	ldr	r3, [pc, #204]	; (80107d8 <readCanToStructs+0xbe8>)
 801070c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010710:	885b      	ldrh	r3, [r3, #2]
 8010712:	4a31      	ldr	r2, [pc, #196]	; (80107d8 <readCanToStructs+0xbe8>)
 8010714:	011b      	lsls	r3, r3, #4
 8010716:	4413      	add	r3, r2
 8010718:	330c      	adds	r3, #12
 801071a:	781b      	ldrb	r3, [r3, #0]
 801071c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010720:	429a      	cmp	r2, r3
 8010722:	d3db      	bcc.n	80106dc <readCanToStructs+0xaec>
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010724:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010728:	4a2c      	ldr	r2, [pc, #176]	; (80107dc <readCanToStructs+0xbec>)
 801072a:	f240 4112 	movw	r1, #1042	; 0x412
 801072e:	fb01 f303 	mul.w	r3, r1, r3
 8010732:	4413      	add	r3, r2
 8010734:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	461a      	mov	r2, r3
 801073c:	4613      	mov	r3, r2
 801073e:	00db      	lsls	r3, r3, #3
 8010740:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SEND_VITAL_MSG_2_OTH_t))
 8010742:	4b25      	ldr	r3, [pc, #148]	; (80107d8 <readCanToStructs+0xbe8>)
 8010744:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010748:	885b      	ldrh	r3, [r3, #2]
 801074a:	4923      	ldr	r1, [pc, #140]	; (80107d8 <readCanToStructs+0xbe8>)
 801074c:	011b      	lsls	r3, r3, #4
 801074e:	440b      	add	r3, r1
 8010750:	330c      	adds	r3, #12
 8010752:	781b      	ldrb	r3, [r3, #0]
 8010754:	3b01      	subs	r3, #1
 8010756:	4413      	add	r3, r2
				if((((canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo) * 7)
 8010758:	2b45      	cmp	r3, #69	; 0x45
 801075a:	d953      	bls.n	8010804 <readCanToStructs+0xc14>
					if(Debug_flag == 1)
 801075c:	4b20      	ldr	r3, [pc, #128]	; (80107e0 <readCanToStructs+0xbf0>)
 801075e:	781b      	ldrb	r3, [r3, #0]
 8010760:	2b01      	cmp	r3, #1
 8010762:	d102      	bne.n	801076a <readCanToStructs+0xb7a>
						printf("RCV V-Message-2\n");
 8010764:	4826      	ldr	r0, [pc, #152]	; (8010800 <readCanToStructs+0xc10>)
 8010766:	f011 fe3d 	bl	80223e4 <puts>
					memset(&Rx_VITAL_MSG_CAN_st,0,sizeof(SEND_VITAL_MSG_2_OTH_t));
 801076a:	2246      	movs	r2, #70	; 0x46
 801076c:	2100      	movs	r1, #0
 801076e:	481e      	ldr	r0, [pc, #120]	; (80107e8 <readCanToStructs+0xbf8>)
 8010770:	f011 fcb4 	bl	80220dc <memset>
					memcpy(&Rx_VITAL_MSG_CAN_st,&Temp_Rx_VITAL_MSG_CAN_st,sizeof(SEND_VITAL_MSG_2_OTH_t));
 8010774:	4a1c      	ldr	r2, [pc, #112]	; (80107e8 <readCanToStructs+0xbf8>)
 8010776:	4b1d      	ldr	r3, [pc, #116]	; (80107ec <readCanToStructs+0xbfc>)
 8010778:	4610      	mov	r0, r2
 801077a:	4619      	mov	r1, r3
 801077c:	2346      	movs	r3, #70	; 0x46
 801077e:	461a      	mov	r2, r3
 8010780:	f011 fc84 	bl	802208c <memcpy>
					Is_CAN_Exchange_happening = YES;
 8010784:	4b1a      	ldr	r3, [pc, #104]	; (80107f0 <readCanToStructs+0xc00>)
 8010786:	2201      	movs	r2, #1
 8010788:	701a      	strb	r2, [r3, #0]
					if(Tx_Ei_self_sharing_st[Rx_VITAL_MSG_CAN_st.Source_Peer_Index].EI_Receiving_Status != 1)
 801078a:	4b17      	ldr	r3, [pc, #92]	; (80107e8 <readCanToStructs+0xbf8>)
 801078c:	881b      	ldrh	r3, [r3, #0]
 801078e:	4619      	mov	r1, r3
 8010790:	4a18      	ldr	r2, [pc, #96]	; (80107f4 <readCanToStructs+0xc04>)
 8010792:	460b      	mov	r3, r1
 8010794:	005b      	lsls	r3, r3, #1
 8010796:	440b      	add	r3, r1
 8010798:	00db      	lsls	r3, r3, #3
 801079a:	4413      	add	r3, r2
 801079c:	3303      	adds	r3, #3
 801079e:	781b      	ldrb	r3, [r3, #0]
 80107a0:	2b01      	cmp	r3, #1
 80107a2:	d00b      	beq.n	80107bc <readCanToStructs+0xbcc>
						Vital_Msg_extr_from_CAN(Rx_VITAL_MSG_CAN_st.VITAL_MESSAGE,Rx_VITAL_MSG_CAN_st.Packet_Length,Rx_VITAL_MSG_CAN_st.Source_Peer_Index,Rx_VITAL_MSG_CAN_st.Dest_Peer_Index);
 80107a4:	4b10      	ldr	r3, [pc, #64]	; (80107e8 <readCanToStructs+0xbf8>)
 80107a6:	889b      	ldrh	r3, [r3, #4]
 80107a8:	b2d9      	uxtb	r1, r3
 80107aa:	4b0f      	ldr	r3, [pc, #60]	; (80107e8 <readCanToStructs+0xbf8>)
 80107ac:	881b      	ldrh	r3, [r3, #0]
 80107ae:	b2da      	uxtb	r2, r3
 80107b0:	4b0d      	ldr	r3, [pc, #52]	; (80107e8 <readCanToStructs+0xbf8>)
 80107b2:	885b      	ldrh	r3, [r3, #2]
 80107b4:	b2db      	uxtb	r3, r3
 80107b6:	4810      	ldr	r0, [pc, #64]	; (80107f8 <readCanToStructs+0xc08>)
 80107b8:	f7f3 ff32 	bl	8004620 <Vital_Msg_extr_from_CAN>
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo = 0;
 80107bc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80107c0:	4a06      	ldr	r2, [pc, #24]	; (80107dc <readCanToStructs+0xbec>)
 80107c2:	f240 4112 	movw	r1, #1042	; 0x412
 80107c6:	fb01 f303 	mul.w	r3, r1, r3
 80107ca:	4413      	add	r3, r2
 80107cc:	f203 4309 	addw	r3, r3, #1033	; 0x409
 80107d0:	2200      	movs	r2, #0
 80107d2:	701a      	strb	r2, [r3, #0]
				break;
 80107d4:	e340      	b.n	8010e58 <readCanToStructs+0x1268>
 80107d6:	bf00      	nop
 80107d8:	20005a54 	.word	0x20005a54
 80107dc:	20005230 	.word	0x20005230
 80107e0:	20000645 	.word	0x20000645
 80107e4:	080267f4 	.word	0x080267f4
 80107e8:	200018cc 	.word	0x200018cc
 80107ec:	20001914 	.word	0x20001914
 80107f0:	20000108 	.word	0x20000108
 80107f4:	20001674 	.word	0x20001674
 80107f8:	200018d2 	.word	0x200018d2
 80107fc:	08026804 	.word	0x08026804
 8010800:	08026828 	.word	0x08026828
					canStatus[uc_index][SEND_VITAL_MSG_2].invalid = 1;
 8010804:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010808:	4a9f      	ldr	r2, [pc, #636]	; (8010a88 <readCanToStructs+0xe98>)
 801080a:	f240 4112 	movw	r1, #1042	; 0x412
 801080e:	fb01 f303 	mul.w	r3, r1, r3
 8010812:	4413      	add	r3, r2
 8010814:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8010818:	2201      	movs	r2, #1
 801081a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][SEND_VITAL_MSG_2].expSeqNo++;
 801081c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010820:	4999      	ldr	r1, [pc, #612]	; (8010a88 <readCanToStructs+0xe98>)
 8010822:	f240 4212 	movw	r2, #1042	; 0x412
 8010826:	fb03 f202 	mul.w	r2, r3, r2
 801082a:	440a      	add	r2, r1
 801082c:	f202 4209 	addw	r2, r2, #1033	; 0x409
 8010830:	7812      	ldrb	r2, [r2, #0]
 8010832:	3201      	adds	r2, #1
 8010834:	b2d0      	uxtb	r0, r2
 8010836:	4a94      	ldr	r2, [pc, #592]	; (8010a88 <readCanToStructs+0xe98>)
 8010838:	f240 4112 	movw	r1, #1042	; 0x412
 801083c:	fb01 f303 	mul.w	r3, r1, r3
 8010840:	4413      	add	r3, r2
 8010842:	f203 4309 	addw	r3, r3, #1033	; 0x409
 8010846:	4602      	mov	r2, r0
 8010848:	701a      	strb	r2, [r3, #0]
				break;
 801084a:	e305      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Hitachi_fault_injection_st;
 801084c:	4b8f      	ldr	r3, [pc, #572]	; (8010a8c <readCanToStructs+0xe9c>)
 801084e:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010850:	4b8f      	ldr	r3, [pc, #572]	; (8010a90 <readCanToStructs+0xea0>)
 8010852:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010856:	885b      	ldrh	r3, [r3, #2]
 8010858:	4a8d      	ldr	r2, [pc, #564]	; (8010a90 <readCanToStructs+0xea0>)
 801085a:	011b      	lsls	r3, r3, #4
 801085c:	4413      	add	r3, r2
 801085e:	3304      	adds	r3, #4
 8010860:	781b      	ldrb	r3, [r3, #0]
 8010862:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010866:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801086a:	2b00      	cmp	r3, #0
 801086c:	d110      	bne.n	8010890 <readCanToStructs+0xca0>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 801086e:	2208      	movs	r2, #8
 8010870:	2100      	movs	r1, #0
 8010872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010874:	f011 fc32 	bl	80220dc <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8010878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801087c:	4a82      	ldr	r2, [pc, #520]	; (8010a88 <readCanToStructs+0xe98>)
 801087e:	f240 4112 	movw	r1, #1042	; 0x412
 8010882:	fb01 f303 	mul.w	r3, r1, r3
 8010886:	4413      	add	r3, r2
 8010888:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801088c:	2200      	movs	r2, #0
 801088e:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8010890:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010894:	4a7c      	ldr	r2, [pc, #496]	; (8010a88 <readCanToStructs+0xe98>)
 8010896:	f240 4112 	movw	r1, #1042	; 0x412
 801089a:	fb01 f303 	mul.w	r3, r1, r3
 801089e:	4413      	add	r3, r2
 80108a0:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80108a4:	781b      	ldrb	r3, [r3, #0]
 80108a6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80108aa:	429a      	cmp	r2, r3
 80108ac:	d014      	beq.n	80108d8 <readCanToStructs+0xce8>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 80108ae:	4879      	ldr	r0, [pc, #484]	; (8010a94 <readCanToStructs+0xea4>)
 80108b0:	f011 fd98 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(HITACHI_FAULT_INJECTION_t));
 80108b4:	2208      	movs	r2, #8
 80108b6:	2100      	movs	r1, #0
 80108b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80108ba:	f011 fc0f 	bl	80220dc <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80108be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80108c2:	4a71      	ldr	r2, [pc, #452]	; (8010a88 <readCanToStructs+0xe98>)
 80108c4:	f240 4112 	movw	r1, #1042	; 0x412
 80108c8:	fb01 f303 	mul.w	r3, r1, r3
 80108cc:	4413      	add	r3, r2
 80108ce:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80108d2:	2200      	movs	r2, #0
 80108d4:	701a      	strb	r2, [r3, #0]
					break;
 80108d6:	e2bf      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 80108d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80108dc:	4613      	mov	r3, r2
 80108de:	00db      	lsls	r3, r3, #3
 80108e0:	1a9b      	subs	r3, r3, r2
 80108e2:	461a      	mov	r2, r3
 80108e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108e6:	4413      	add	r3, r2
 80108e8:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80108ea:	2301      	movs	r3, #1
 80108ec:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80108f0:	e016      	b.n	8010920 <readCanToStructs+0xd30>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80108f2:	4b67      	ldr	r3, [pc, #412]	; (8010a90 <readCanToStructs+0xea0>)
 80108f4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80108f8:	885b      	ldrh	r3, [r3, #2]
 80108fa:	461a      	mov	r2, r3
 80108fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010900:	4963      	ldr	r1, [pc, #396]	; (8010a90 <readCanToStructs+0xea0>)
 8010902:	0112      	lsls	r2, r2, #4
 8010904:	440a      	add	r2, r1
 8010906:	4413      	add	r3, r2
 8010908:	3304      	adds	r3, #4
 801090a:	781a      	ldrb	r2, [r3, #0]
 801090c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801090e:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010912:	3301      	adds	r3, #1
 8010914:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010916:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801091a:	3301      	adds	r3, #1
 801091c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010920:	4b5b      	ldr	r3, [pc, #364]	; (8010a90 <readCanToStructs+0xea0>)
 8010922:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010926:	885b      	ldrh	r3, [r3, #2]
 8010928:	4a59      	ldr	r2, [pc, #356]	; (8010a90 <readCanToStructs+0xea0>)
 801092a:	011b      	lsls	r3, r3, #4
 801092c:	4413      	add	r3, r2
 801092e:	330c      	adds	r3, #12
 8010930:	781b      	ldrb	r3, [r3, #0]
 8010932:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010936:	429a      	cmp	r2, r3
 8010938:	d3db      	bcc.n	80108f2 <readCanToStructs+0xd02>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(HITACHI_FAULT_INJECTION_t))
 801093a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801093e:	4a52      	ldr	r2, [pc, #328]	; (8010a88 <readCanToStructs+0xe98>)
 8010940:	f240 4112 	movw	r1, #1042	; 0x412
 8010944:	fb01 f303 	mul.w	r3, r1, r3
 8010948:	4413      	add	r3, r2
 801094a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801094e:	781b      	ldrb	r3, [r3, #0]
 8010950:	461a      	mov	r2, r3
 8010952:	4613      	mov	r3, r2
 8010954:	00db      	lsls	r3, r3, #3
 8010956:	1a9a      	subs	r2, r3, r2
 8010958:	4b4d      	ldr	r3, [pc, #308]	; (8010a90 <readCanToStructs+0xea0>)
 801095a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801095e:	885b      	ldrh	r3, [r3, #2]
 8010960:	494b      	ldr	r1, [pc, #300]	; (8010a90 <readCanToStructs+0xea0>)
 8010962:	011b      	lsls	r3, r3, #4
 8010964:	440b      	add	r3, r1
 8010966:	330c      	adds	r3, #12
 8010968:	781b      	ldrb	r3, [r3, #0]
 801096a:	3b01      	subs	r3, #1
 801096c:	4413      	add	r3, r2
 801096e:	2b07      	cmp	r3, #7
 8010970:	d912      	bls.n	8010998 <readCanToStructs+0xda8>
					printf("Received Fault Injection Data\n");
 8010972:	4849      	ldr	r0, [pc, #292]	; (8010a98 <readCanToStructs+0xea8>)
 8010974:	f011 fd36 	bl	80223e4 <puts>
					Is_CAN_Exchange_happening = YES;
 8010978:	4b48      	ldr	r3, [pc, #288]	; (8010a9c <readCanToStructs+0xeac>)
 801097a:	2201      	movs	r2, #1
 801097c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 801097e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010982:	4a41      	ldr	r2, [pc, #260]	; (8010a88 <readCanToStructs+0xe98>)
 8010984:	f240 4112 	movw	r1, #1042	; 0x412
 8010988:	fb01 f303 	mul.w	r3, r1, r3
 801098c:	4413      	add	r3, r2
 801098e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8010992:	2200      	movs	r2, #0
 8010994:	701a      	strb	r2, [r3, #0]
				break;
 8010996:	e25f      	b.n	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8010998:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801099c:	4a3a      	ldr	r2, [pc, #232]	; (8010a88 <readCanToStructs+0xe98>)
 801099e:	f240 4112 	movw	r1, #1042	; 0x412
 80109a2:	fb01 f303 	mul.w	r3, r1, r3
 80109a6:	4413      	add	r3, r2
 80109a8:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 80109ac:	2201      	movs	r2, #1
 80109ae:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 80109b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80109b4:	4934      	ldr	r1, [pc, #208]	; (8010a88 <readCanToStructs+0xe98>)
 80109b6:	f240 4212 	movw	r2, #1042	; 0x412
 80109ba:	fb03 f202 	mul.w	r2, r3, r2
 80109be:	440a      	add	r2, r1
 80109c0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 80109c4:	7812      	ldrb	r2, [r2, #0]
 80109c6:	3201      	adds	r2, #1
 80109c8:	b2d0      	uxtb	r0, r2
 80109ca:	4a2f      	ldr	r2, [pc, #188]	; (8010a88 <readCanToStructs+0xe98>)
 80109cc:	f240 4112 	movw	r1, #1042	; 0x412
 80109d0:	fb01 f303 	mul.w	r3, r1, r3
 80109d4:	4413      	add	r3, r2
 80109d6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80109da:	4602      	mov	r2, r0
 80109dc:	701a      	strb	r2, [r3, #0]
				break;
 80109de:	e23b      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 80109e0:	4b2f      	ldr	r3, [pc, #188]	; (8010aa0 <readCanToStructs+0xeb0>)
 80109e2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80109e4:	4b2a      	ldr	r3, [pc, #168]	; (8010a90 <readCanToStructs+0xea0>)
 80109e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80109ea:	885b      	ldrh	r3, [r3, #2]
 80109ec:	4a28      	ldr	r2, [pc, #160]	; (8010a90 <readCanToStructs+0xea0>)
 80109ee:	011b      	lsls	r3, r3, #4
 80109f0:	4413      	add	r3, r2
 80109f2:	3304      	adds	r3, #4
 80109f4:	781b      	ldrb	r3, [r3, #0]
 80109f6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80109fa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d110      	bne.n	8010a24 <readCanToStructs+0xe34>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010a02:	2214      	movs	r2, #20
 8010a04:	2100      	movs	r1, #0
 8010a06:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a08:	f011 fb68 	bl	80220dc <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010a0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a10:	4a1d      	ldr	r2, [pc, #116]	; (8010a88 <readCanToStructs+0xe98>)
 8010a12:	f240 4112 	movw	r1, #1042	; 0x412
 8010a16:	fb01 f303 	mul.w	r3, r1, r3
 8010a1a:	4413      	add	r3, r2
 8010a1c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010a20:	2200      	movs	r2, #0
 8010a22:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8010a24:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a28:	4a17      	ldr	r2, [pc, #92]	; (8010a88 <readCanToStructs+0xe98>)
 8010a2a:	f240 4112 	movw	r1, #1042	; 0x412
 8010a2e:	fb01 f303 	mul.w	r3, r1, r3
 8010a32:	4413      	add	r3, r2
 8010a34:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010a38:	781b      	ldrb	r3, [r3, #0]
 8010a3a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a3e:	429a      	cmp	r2, r3
 8010a40:	d014      	beq.n	8010a6c <readCanToStructs+0xe7c>
					printf("EIPC1RELAYS Seq no MisMatch\n");
 8010a42:	4818      	ldr	r0, [pc, #96]	; (8010aa4 <readCanToStructs+0xeb4>)
 8010a44:	f011 fcce 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010a48:	2214      	movs	r2, #20
 8010a4a:	2100      	movs	r1, #0
 8010a4c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010a4e:	f011 fb45 	bl	80220dc <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010a52:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010a56:	4a0c      	ldr	r2, [pc, #48]	; (8010a88 <readCanToStructs+0xe98>)
 8010a58:	f240 4112 	movw	r1, #1042	; 0x412
 8010a5c:	fb01 f303 	mul.w	r3, r1, r3
 8010a60:	4413      	add	r3, r2
 8010a62:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010a66:	2200      	movs	r2, #0
 8010a68:	701a      	strb	r2, [r3, #0]
					break;
 8010a6a:	e1f5      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010a6c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010a70:	4613      	mov	r3, r2
 8010a72:	00db      	lsls	r3, r3, #3
 8010a74:	1a9b      	subs	r3, r3, r2
 8010a76:	461a      	mov	r2, r3
 8010a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a7a:	4413      	add	r3, r2
 8010a7c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010a7e:	2301      	movs	r3, #1
 8010a80:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010a84:	e027      	b.n	8010ad6 <readCanToStructs+0xee6>
 8010a86:	bf00      	nop
 8010a88:	20005230 	.word	0x20005230
 8010a8c:	2000195c 	.word	0x2000195c
 8010a90:	20005a54 	.word	0x20005a54
 8010a94:	08026838 	.word	0x08026838
 8010a98:	08026858 	.word	0x08026858
 8010a9c:	20000108 	.word	0x20000108
 8010aa0:	20002024 	.word	0x20002024
 8010aa4:	08026878 	.word	0x08026878
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010aa8:	4bb9      	ldr	r3, [pc, #740]	; (8010d90 <readCanToStructs+0x11a0>)
 8010aaa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010aae:	885b      	ldrh	r3, [r3, #2]
 8010ab0:	461a      	mov	r2, r3
 8010ab2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ab6:	49b6      	ldr	r1, [pc, #728]	; (8010d90 <readCanToStructs+0x11a0>)
 8010ab8:	0112      	lsls	r2, r2, #4
 8010aba:	440a      	add	r2, r1
 8010abc:	4413      	add	r3, r2
 8010abe:	3304      	adds	r3, #4
 8010ac0:	781a      	ldrb	r2, [r3, #0]
 8010ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ac8:	3301      	adds	r3, #1
 8010aca:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010acc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ad0:	3301      	adds	r3, #1
 8010ad2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ad6:	4bae      	ldr	r3, [pc, #696]	; (8010d90 <readCanToStructs+0x11a0>)
 8010ad8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010adc:	885b      	ldrh	r3, [r3, #2]
 8010ade:	4aac      	ldr	r2, [pc, #688]	; (8010d90 <readCanToStructs+0x11a0>)
 8010ae0:	011b      	lsls	r3, r3, #4
 8010ae2:	4413      	add	r3, r2
 8010ae4:	330c      	adds	r3, #12
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010aec:	429a      	cmp	r2, r3
 8010aee:	d3db      	bcc.n	8010aa8 <readCanToStructs+0xeb8>
				if((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010af0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010af4:	4aa7      	ldr	r2, [pc, #668]	; (8010d94 <readCanToStructs+0x11a4>)
 8010af6:	f240 4112 	movw	r1, #1042	; 0x412
 8010afa:	fb01 f303 	mul.w	r3, r1, r3
 8010afe:	4413      	add	r3, r2
 8010b00:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010b04:	781b      	ldrb	r3, [r3, #0]
 8010b06:	461a      	mov	r2, r3
 8010b08:	4613      	mov	r3, r2
 8010b0a:	00db      	lsls	r3, r3, #3
 8010b0c:	1a9a      	subs	r2, r3, r2
 8010b0e:	4ba0      	ldr	r3, [pc, #640]	; (8010d90 <readCanToStructs+0x11a0>)
 8010b10:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010b14:	885b      	ldrh	r3, [r3, #2]
 8010b16:	499e      	ldr	r1, [pc, #632]	; (8010d90 <readCanToStructs+0x11a0>)
 8010b18:	011b      	lsls	r3, r3, #4
 8010b1a:	440b      	add	r3, r1
 8010b1c:	330c      	adds	r3, #12
 8010b1e:	781b      	ldrb	r3, [r3, #0]
 8010b20:	3b01      	subs	r3, #1
 8010b22:	4413      	add	r3, r2
 8010b24:	2b13      	cmp	r3, #19
 8010b26:	d954      	bls.n	8010bd2 <readCanToStructs+0xfe2>
					uint16_t CRC16 = 0;
 8010b28:	2300      	movs	r3, #0
 8010b2a:	853b      	strh	r3, [r7, #40]	; 0x28
					uint8_t Buff[40] = {0,};
 8010b2c:	2300      	movs	r3, #0
 8010b2e:	603b      	str	r3, [r7, #0]
 8010b30:	1d3b      	adds	r3, r7, #4
 8010b32:	2224      	movs	r2, #36	; 0x24
 8010b34:	2100      	movs	r1, #0
 8010b36:	4618      	mov	r0, r3
 8010b38:	f011 fad0 	bl	80220dc <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010b3c:	463b      	mov	r3, r7
 8010b3e:	2214      	movs	r2, #20
 8010b40:	4995      	ldr	r1, [pc, #596]	; (8010d98 <readCanToStructs+0x11a8>)
 8010b42:	4618      	mov	r0, r3
 8010b44:	f011 faa2 	bl	802208c <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010b48:	463b      	mov	r3, r7
 8010b4a:	2214      	movs	r2, #20
 8010b4c:	4619      	mov	r1, r3
 8010b4e:	2000      	movs	r0, #0
 8010b50:	f001 ff10 	bl	8012974 <GetCRC16>
 8010b54:	4603      	mov	r3, r0
 8010b56:	853b      	strh	r3, [r7, #40]	; 0x28
					if(CRC16 == 0)
 8010b58:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010b5a:	2b00      	cmp	r3, #0
 8010b5c:	d10c      	bne.n	8010b78 <readCanToStructs+0xf88>
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010b62:	4a8c      	ldr	r2, [pc, #560]	; (8010d94 <readCanToStructs+0x11a4>)
 8010b64:	f240 4112 	movw	r1, #1042	; 0x412
 8010b68:	fb01 f303 	mul.w	r3, r1, r3
 8010b6c:	4413      	add	r3, r2
 8010b6e:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010b72:	2200      	movs	r2, #0
 8010b74:	701a      	strb	r2, [r3, #0]
				break;
 8010b76:	e16f      	b.n	8010e58 <readCanToStructs+0x1268>
						if(Debug_flag == 1)
 8010b78:	4b88      	ldr	r3, [pc, #544]	; (8010d9c <readCanToStructs+0x11ac>)
 8010b7a:	781b      	ldrb	r3, [r3, #0]
 8010b7c:	2b01      	cmp	r3, #1
 8010b7e:	d10a      	bne.n	8010b96 <readCanToStructs+0xfa6>
							printf("Rcv Relays1-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010b80:	4b85      	ldr	r3, [pc, #532]	; (8010d98 <readCanToStructs+0x11a8>)
 8010b82:	781b      	ldrb	r3, [r3, #0]
 8010b84:	4a86      	ldr	r2, [pc, #536]	; (8010da0 <readCanToStructs+0x11b0>)
 8010b86:	3366      	adds	r3, #102	; 0x66
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	4413      	add	r3, r2
 8010b8c:	685b      	ldr	r3, [r3, #4]
 8010b8e:	4619      	mov	r1, r3
 8010b90:	4884      	ldr	r0, [pc, #528]	; (8010da4 <readCanToStructs+0x11b4>)
 8010b92:	f011 fb8b 	bl	80222ac <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010b96:	4b80      	ldr	r3, [pc, #512]	; (8010d98 <readCanToStructs+0x11a8>)
 8010b98:	781b      	ldrb	r3, [r3, #0]
 8010b9a:	461a      	mov	r2, r3
 8010b9c:	4613      	mov	r3, r2
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	4413      	add	r3, r2
 8010ba2:	009b      	lsls	r3, r3, #2
 8010ba4:	4a80      	ldr	r2, [pc, #512]	; (8010da8 <readCanToStructs+0x11b8>)
 8010ba6:	4413      	add	r3, r2
 8010ba8:	2214      	movs	r2, #20
 8010baa:	497b      	ldr	r1, [pc, #492]	; (8010d98 <readCanToStructs+0x11a8>)
 8010bac:	4618      	mov	r0, r3
 8010bae:	f011 fa6d 	bl	802208c <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010bb2:	4b7e      	ldr	r3, [pc, #504]	; (8010dac <readCanToStructs+0x11bc>)
 8010bb4:	2201      	movs	r2, #1
 8010bb6:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8010bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bbc:	4a75      	ldr	r2, [pc, #468]	; (8010d94 <readCanToStructs+0x11a4>)
 8010bbe:	f240 4112 	movw	r1, #1042	; 0x412
 8010bc2:	fb01 f303 	mul.w	r3, r1, r3
 8010bc6:	4413      	add	r3, r2
 8010bc8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010bcc:	2200      	movs	r2, #0
 8010bce:	701a      	strb	r2, [r3, #0]
				break;
 8010bd0:	e142      	b.n	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 8010bd2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bd6:	4a6f      	ldr	r2, [pc, #444]	; (8010d94 <readCanToStructs+0x11a4>)
 8010bd8:	f240 4112 	movw	r1, #1042	; 0x412
 8010bdc:	fb01 f303 	mul.w	r3, r1, r3
 8010be0:	4413      	add	r3, r2
 8010be2:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 8010be6:	2201      	movs	r2, #1
 8010be8:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 8010bea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010bee:	4969      	ldr	r1, [pc, #420]	; (8010d94 <readCanToStructs+0x11a4>)
 8010bf0:	f240 4212 	movw	r2, #1042	; 0x412
 8010bf4:	fb03 f202 	mul.w	r2, r3, r2
 8010bf8:	440a      	add	r2, r1
 8010bfa:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 8010bfe:	7812      	ldrb	r2, [r2, #0]
 8010c00:	3201      	adds	r2, #1
 8010c02:	b2d0      	uxtb	r0, r2
 8010c04:	4a63      	ldr	r2, [pc, #396]	; (8010d94 <readCanToStructs+0x11a4>)
 8010c06:	f240 4112 	movw	r1, #1042	; 0x412
 8010c0a:	fb01 f303 	mul.w	r3, r1, r3
 8010c0e:	4413      	add	r3, r2
 8010c10:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8010c14:	4602      	mov	r2, r0
 8010c16:	701a      	strb	r2, [r3, #0]
				break;
 8010c18:	e11e      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr = (uint8_t *)&Rx_Temp_Main_Relays_st;
 8010c1a:	4b5f      	ldr	r3, [pc, #380]	; (8010d98 <readCanToStructs+0x11a8>)
 8010c1c:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010c1e:	4b5c      	ldr	r3, [pc, #368]	; (8010d90 <readCanToStructs+0x11a0>)
 8010c20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010c24:	885b      	ldrh	r3, [r3, #2]
 8010c26:	4a5a      	ldr	r2, [pc, #360]	; (8010d90 <readCanToStructs+0x11a0>)
 8010c28:	011b      	lsls	r3, r3, #4
 8010c2a:	4413      	add	r3, r2
 8010c2c:	3304      	adds	r3, #4
 8010c2e:	781b      	ldrb	r3, [r3, #0]
 8010c30:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010c34:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d110      	bne.n	8010c5e <readCanToStructs+0x106e>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010c3c:	2214      	movs	r2, #20
 8010c3e:	2100      	movs	r1, #0
 8010c40:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c42:	f011 fa4b 	bl	80220dc <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010c46:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c4a:	4a52      	ldr	r2, [pc, #328]	; (8010d94 <readCanToStructs+0x11a4>)
 8010c4c:	f240 4112 	movw	r1, #1042	; 0x412
 8010c50:	fb01 f303 	mul.w	r3, r1, r3
 8010c54:	4413      	add	r3, r2
 8010c56:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010c5a:	2200      	movs	r2, #0
 8010c5c:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8010c5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c62:	4a4c      	ldr	r2, [pc, #304]	; (8010d94 <readCanToStructs+0x11a4>)
 8010c64:	f240 4112 	movw	r1, #1042	; 0x412
 8010c68:	fb01 f303 	mul.w	r3, r1, r3
 8010c6c:	4413      	add	r3, r2
 8010c6e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010c72:	781b      	ldrb	r3, [r3, #0]
 8010c74:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010c78:	429a      	cmp	r2, r3
 8010c7a:	d014      	beq.n	8010ca6 <readCanToStructs+0x10b6>
					printf("EIPC2 RELAYS Seq no MisMatch\n");
 8010c7c:	484c      	ldr	r0, [pc, #304]	; (8010db0 <readCanToStructs+0x11c0>)
 8010c7e:	f011 fbb1 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(RELAYS_t));
 8010c82:	2214      	movs	r2, #20
 8010c84:	2100      	movs	r1, #0
 8010c86:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010c88:	f011 fa28 	bl	80220dc <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010c8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010c90:	4a40      	ldr	r2, [pc, #256]	; (8010d94 <readCanToStructs+0x11a4>)
 8010c92:	f240 4112 	movw	r1, #1042	; 0x412
 8010c96:	fb01 f303 	mul.w	r3, r1, r3
 8010c9a:	4413      	add	r3, r2
 8010c9c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010ca0:	2200      	movs	r2, #0
 8010ca2:	701a      	strb	r2, [r3, #0]
					break;
 8010ca4:	e0d8      	b.n	8010e58 <readCanToStructs+0x1268>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010ca6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010caa:	4613      	mov	r3, r2
 8010cac:	00db      	lsls	r3, r3, #3
 8010cae:	1a9b      	subs	r3, r3, r2
 8010cb0:	461a      	mov	r2, r3
 8010cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cb4:	4413      	add	r3, r2
 8010cb6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010cb8:	2301      	movs	r3, #1
 8010cba:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010cbe:	e016      	b.n	8010cee <readCanToStructs+0x10fe>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010cc0:	4b33      	ldr	r3, [pc, #204]	; (8010d90 <readCanToStructs+0x11a0>)
 8010cc2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cc6:	885b      	ldrh	r3, [r3, #2]
 8010cc8:	461a      	mov	r2, r3
 8010cca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010cce:	4930      	ldr	r1, [pc, #192]	; (8010d90 <readCanToStructs+0x11a0>)
 8010cd0:	0112      	lsls	r2, r2, #4
 8010cd2:	440a      	add	r2, r1
 8010cd4:	4413      	add	r3, r2
 8010cd6:	3304      	adds	r3, #4
 8010cd8:	781a      	ldrb	r2, [r3, #0]
 8010cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010cdc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ce0:	3301      	adds	r3, #1
 8010ce2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ce4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ce8:	3301      	adds	r3, #1
 8010cea:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010cee:	4b28      	ldr	r3, [pc, #160]	; (8010d90 <readCanToStructs+0x11a0>)
 8010cf0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010cf4:	885b      	ldrh	r3, [r3, #2]
 8010cf6:	4a26      	ldr	r2, [pc, #152]	; (8010d90 <readCanToStructs+0x11a0>)
 8010cf8:	011b      	lsls	r3, r3, #4
 8010cfa:	4413      	add	r3, r2
 8010cfc:	330c      	adds	r3, #12
 8010cfe:	781b      	ldrb	r3, [r3, #0]
 8010d00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8010d04:	429a      	cmp	r2, r3
 8010d06:	d3db      	bcc.n	8010cc0 <readCanToStructs+0x10d0>
				if((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(RELAYS_t))
 8010d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d0c:	4a21      	ldr	r2, [pc, #132]	; (8010d94 <readCanToStructs+0x11a4>)
 8010d0e:	f240 4112 	movw	r1, #1042	; 0x412
 8010d12:	fb01 f303 	mul.w	r3, r1, r3
 8010d16:	4413      	add	r3, r2
 8010d18:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010d1c:	781b      	ldrb	r3, [r3, #0]
 8010d1e:	461a      	mov	r2, r3
 8010d20:	4613      	mov	r3, r2
 8010d22:	00db      	lsls	r3, r3, #3
 8010d24:	1a9a      	subs	r2, r3, r2
 8010d26:	4b1a      	ldr	r3, [pc, #104]	; (8010d90 <readCanToStructs+0x11a0>)
 8010d28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010d2c:	885b      	ldrh	r3, [r3, #2]
 8010d2e:	4918      	ldr	r1, [pc, #96]	; (8010d90 <readCanToStructs+0x11a0>)
 8010d30:	011b      	lsls	r3, r3, #4
 8010d32:	440b      	add	r3, r1
 8010d34:	330c      	adds	r3, #12
 8010d36:	781b      	ldrb	r3, [r3, #0]
 8010d38:	3b01      	subs	r3, #1
 8010d3a:	4413      	add	r3, r2
 8010d3c:	2b13      	cmp	r3, #19
 8010d3e:	d966      	bls.n	8010e0e <readCanToStructs+0x121e>
					uint16_t CRC16 = 0;
 8010d40:	2300      	movs	r3, #0
 8010d42:	857b      	strh	r3, [r7, #42]	; 0x2a
					uint8_t Buff[40] = {0,};
 8010d44:	2300      	movs	r3, #0
 8010d46:	603b      	str	r3, [r7, #0]
 8010d48:	1d3b      	adds	r3, r7, #4
 8010d4a:	2224      	movs	r2, #36	; 0x24
 8010d4c:	2100      	movs	r1, #0
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f011 f9c4 	bl	80220dc <memset>
					memcpy(Buff,&Rx_Temp_Main_Relays_st,sizeof(Rx_Temp_Main_Relays_st));
 8010d54:	463b      	mov	r3, r7
 8010d56:	2214      	movs	r2, #20
 8010d58:	490f      	ldr	r1, [pc, #60]	; (8010d98 <readCanToStructs+0x11a8>)
 8010d5a:	4618      	mov	r0, r3
 8010d5c:	f011 f996 	bl	802208c <memcpy>
					CRC16 = GetCRC16(0,Buff, sizeof(Rx_Temp_Main_Relays_st));
 8010d60:	463b      	mov	r3, r7
 8010d62:	2214      	movs	r2, #20
 8010d64:	4619      	mov	r1, r3
 8010d66:	2000      	movs	r0, #0
 8010d68:	f001 fe04 	bl	8012974 <GetCRC16>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	857b      	strh	r3, [r7, #42]	; 0x2a
					if(CRC16 == 0)
 8010d70:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d72:	2b00      	cmp	r3, #0
 8010d74:	d11e      	bne.n	8010db4 <readCanToStructs+0x11c4>
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010d7a:	4a06      	ldr	r2, [pc, #24]	; (8010d94 <readCanToStructs+0x11a4>)
 8010d7c:	f240 4112 	movw	r1, #1042	; 0x412
 8010d80:	fb01 f303 	mul.w	r3, r1, r3
 8010d84:	4413      	add	r3, r2
 8010d86:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010d8a:	2200      	movs	r2, #0
 8010d8c:	701a      	strb	r2, [r3, #0]
				break;
 8010d8e:	e063      	b.n	8010e58 <readCanToStructs+0x1268>
 8010d90:	20005a54 	.word	0x20005a54
 8010d94:	20005230 	.word	0x20005230
 8010d98:	20002024 	.word	0x20002024
 8010d9c:	20000645 	.word	0x20000645
 8010da0:	20000304 	.word	0x20000304
 8010da4:	08026894 	.word	0x08026894
 8010da8:	20001f48 	.word	0x20001f48
 8010dac:	20000108 	.word	0x20000108
 8010db0:	080268a8 	.word	0x080268a8
						if(Debug_flag == 1)
 8010db4:	4bc7      	ldr	r3, [pc, #796]	; (80110d4 <readCanToStructs+0x14e4>)
 8010db6:	781b      	ldrb	r3, [r3, #0]
 8010db8:	2b01      	cmp	r3, #1
 8010dba:	d10a      	bne.n	8010dd2 <readCanToStructs+0x11e2>
							printf("Rcv Relays2-O:%lu\n",EI_data.Hitachi_st.SOURCE_ADDRESSES[Rx_Temp_Main_Relays_st.Peer_Index]);
 8010dbc:	4bc6      	ldr	r3, [pc, #792]	; (80110d8 <readCanToStructs+0x14e8>)
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	4ac6      	ldr	r2, [pc, #792]	; (80110dc <readCanToStructs+0x14ec>)
 8010dc2:	3366      	adds	r3, #102	; 0x66
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	685b      	ldr	r3, [r3, #4]
 8010dca:	4619      	mov	r1, r3
 8010dcc:	48c4      	ldr	r0, [pc, #784]	; (80110e0 <readCanToStructs+0x14f0>)
 8010dce:	f011 fa6d 	bl	80222ac <iprintf>
						memcpy(&OtherCard_Relays_st[Rx_Temp_Main_Relays_st.Peer_Index],&Rx_Temp_Main_Relays_st,sizeof(RELAYS_t));
 8010dd2:	4bc1      	ldr	r3, [pc, #772]	; (80110d8 <readCanToStructs+0x14e8>)
 8010dd4:	781b      	ldrb	r3, [r3, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	4613      	mov	r3, r2
 8010dda:	009b      	lsls	r3, r3, #2
 8010ddc:	4413      	add	r3, r2
 8010dde:	009b      	lsls	r3, r3, #2
 8010de0:	4ac0      	ldr	r2, [pc, #768]	; (80110e4 <readCanToStructs+0x14f4>)
 8010de2:	4413      	add	r3, r2
 8010de4:	2214      	movs	r2, #20
 8010de6:	49bc      	ldr	r1, [pc, #752]	; (80110d8 <readCanToStructs+0x14e8>)
 8010de8:	4618      	mov	r0, r3
 8010dea:	f011 f94f 	bl	802208c <memcpy>
						Is_CAN_Exchange_happening = YES;
 8010dee:	4bbe      	ldr	r3, [pc, #760]	; (80110e8 <readCanToStructs+0x14f8>)
 8010df0:	2201      	movs	r2, #1
 8010df2:	701a      	strb	r2, [r3, #0]
						canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8010df4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010df8:	4abc      	ldr	r2, [pc, #752]	; (80110ec <readCanToStructs+0x14fc>)
 8010dfa:	f240 4112 	movw	r1, #1042	; 0x412
 8010dfe:	fb01 f303 	mul.w	r3, r1, r3
 8010e02:	4413      	add	r3, r2
 8010e04:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e08:	2200      	movs	r2, #0
 8010e0a:	701a      	strb	r2, [r3, #0]
				break;
 8010e0c:	e024      	b.n	8010e58 <readCanToStructs+0x1268>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 8010e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e12:	4ab6      	ldr	r2, [pc, #728]	; (80110ec <readCanToStructs+0x14fc>)
 8010e14:	f240 4112 	movw	r1, #1042	; 0x412
 8010e18:	fb01 f303 	mul.w	r3, r1, r3
 8010e1c:	4413      	add	r3, r2
 8010e1e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8010e22:	2201      	movs	r2, #1
 8010e24:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8010e26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010e2a:	49b0      	ldr	r1, [pc, #704]	; (80110ec <readCanToStructs+0x14fc>)
 8010e2c:	f240 4212 	movw	r2, #1042	; 0x412
 8010e30:	fb03 f202 	mul.w	r2, r3, r2
 8010e34:	440a      	add	r2, r1
 8010e36:	f202 4211 	addw	r2, r2, #1041	; 0x411
 8010e3a:	7812      	ldrb	r2, [r2, #0]
 8010e3c:	3201      	adds	r2, #1
 8010e3e:	b2d0      	uxtb	r0, r2
 8010e40:	4aaa      	ldr	r2, [pc, #680]	; (80110ec <readCanToStructs+0x14fc>)
 8010e42:	f240 4112 	movw	r1, #1042	; 0x412
 8010e46:	fb01 f303 	mul.w	r3, r1, r3
 8010e4a:	4413      	add	r3, r2
 8010e4c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8010e50:	4602      	mov	r2, r0
 8010e52:	701a      	strb	r2, [r3, #0]
				break;
 8010e54:	e000      	b.n	8010e58 <readCanToStructs+0x1268>
				break;
 8010e56:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8010e58:	4ba5      	ldr	r3, [pc, #660]	; (80110f0 <readCanToStructs+0x1500>)
 8010e5a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e5e:	885b      	ldrh	r3, [r3, #2]
 8010e60:	011b      	lsls	r3, r3, #4
 8010e62:	4aa3      	ldr	r2, [pc, #652]	; (80110f0 <readCanToStructs+0x1500>)
 8010e64:	4413      	add	r3, r2
 8010e66:	2210      	movs	r2, #16
 8010e68:	2100      	movs	r1, #0
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	f011 f936 	bl	80220dc <memset>
			canRead.Out++;
 8010e70:	4b9f      	ldr	r3, [pc, #636]	; (80110f0 <readCanToStructs+0x1500>)
 8010e72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e76:	885b      	ldrh	r3, [r3, #2]
 8010e78:	3301      	adds	r3, #1
 8010e7a:	b29a      	uxth	r2, r3
 8010e7c:	4b9c      	ldr	r3, [pc, #624]	; (80110f0 <readCanToStructs+0x1500>)
 8010e7e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e82:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8010e84:	4b9a      	ldr	r3, [pc, #616]	; (80110f0 <readCanToStructs+0x1500>)
 8010e86:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e8a:	885b      	ldrh	r3, [r3, #2]
 8010e8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010e90:	d104      	bne.n	8010e9c <readCanToStructs+0x12ac>
				canRead.Out = 0;
 8010e92:	4b97      	ldr	r3, [pc, #604]	; (80110f0 <readCanToStructs+0x1500>)
 8010e94:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010e98:	2200      	movs	r2, #0
 8010e9a:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8010e9c:	f7fe fe52 	bl	800fb44 <canDataReady>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	f47e aecb 	bne.w	800fc3e <readCanToStructs+0x4e>
	break;
 8010ea8:	f001 bcff 	b.w	80128aa <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8010eac:	4b90      	ldr	r3, [pc, #576]	; (80110f0 <readCanToStructs+0x1500>)
 8010eae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010eb2:	885b      	ldrh	r3, [r3, #2]
 8010eb4:	4a8e      	ldr	r2, [pc, #568]	; (80110f0 <readCanToStructs+0x1500>)
 8010eb6:	011b      	lsls	r3, r3, #4
 8010eb8:	4413      	add	r3, r2
 8010eba:	330f      	adds	r3, #15
 8010ebc:	781b      	ldrb	r3, [r3, #0]
 8010ebe:	3b01      	subs	r3, #1
 8010ec0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8010ec4:	4b8a      	ldr	r3, [pc, #552]	; (80110f0 <readCanToStructs+0x1500>)
 8010ec6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010eca:	885b      	ldrh	r3, [r3, #2]
 8010ecc:	4a88      	ldr	r2, [pc, #544]	; (80110f0 <readCanToStructs+0x1500>)
 8010ece:	011b      	lsls	r3, r3, #4
 8010ed0:	4413      	add	r3, r2
 8010ed2:	681b      	ldr	r3, [r3, #0]
 8010ed4:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8010ed8:	f200 8672 	bhi.w	8011bc0 <readCanToStructs+0x1fd0>
 8010edc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010ee0:	d80a      	bhi.n	8010ef8 <readCanToStructs+0x1308>
 8010ee2:	f240 1203 	movw	r2, #259	; 0x103
 8010ee6:	4293      	cmp	r3, r2
 8010ee8:	d01e      	beq.n	8010f28 <readCanToStructs+0x1338>
 8010eea:	f240 1209 	movw	r2, #265	; 0x109
 8010eee:	4293      	cmp	r3, r2
 8010ef0:	f000 8108 	beq.w	8011104 <readCanToStructs+0x1514>
				break;
 8010ef4:	f000 be64 	b.w	8011bc0 <readCanToStructs+0x1fd0>
 8010ef8:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8010efc:	2b07      	cmp	r3, #7
 8010efe:	f200 865f 	bhi.w	8011bc0 <readCanToStructs+0x1fd0>
 8010f02:	a201      	add	r2, pc, #4	; (adr r2, 8010f08 <readCanToStructs+0x1318>)
 8010f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010f08:	080112b1 	.word	0x080112b1
 8010f0c:	08011495 	.word	0x08011495
 8010f10:	08011bc1 	.word	0x08011bc1
 8010f14:	08011bc1 	.word	0x08011bc1
 8010f18:	08011a23 	.word	0x08011a23
 8010f1c:	08011bc1 	.word	0x08011bc1
 8010f20:	08011645 	.word	0x08011645
 8010f24:	08011837 	.word	0x08011837
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8010f28:	4b72      	ldr	r3, [pc, #456]	; (80110f4 <readCanToStructs+0x1504>)
 8010f2a:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8010f2c:	4b70      	ldr	r3, [pc, #448]	; (80110f0 <readCanToStructs+0x1500>)
 8010f2e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010f32:	885b      	ldrh	r3, [r3, #2]
 8010f34:	4a6e      	ldr	r2, [pc, #440]	; (80110f0 <readCanToStructs+0x1500>)
 8010f36:	011b      	lsls	r3, r3, #4
 8010f38:	4413      	add	r3, r2
 8010f3a:	3304      	adds	r3, #4
 8010f3c:	781b      	ldrb	r3, [r3, #0]
 8010f3e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8010f42:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d110      	bne.n	8010f6c <readCanToStructs+0x137c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010f4a:	2206      	movs	r2, #6
 8010f4c:	2100      	movs	r1, #0
 8010f4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f50:	f011 f8c4 	bl	80220dc <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010f54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f58:	4a64      	ldr	r2, [pc, #400]	; (80110ec <readCanToStructs+0x14fc>)
 8010f5a:	f240 4112 	movw	r1, #1042	; 0x412
 8010f5e:	fb01 f303 	mul.w	r3, r1, r3
 8010f62:	4413      	add	r3, r2
 8010f64:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010f68:	2200      	movs	r2, #0
 8010f6a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8010f6c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f70:	4a5e      	ldr	r2, [pc, #376]	; (80110ec <readCanToStructs+0x14fc>)
 8010f72:	f240 4112 	movw	r1, #1042	; 0x412
 8010f76:	fb01 f303 	mul.w	r3, r1, r3
 8010f7a:	4413      	add	r3, r2
 8010f7c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010f80:	781b      	ldrb	r3, [r3, #0]
 8010f82:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010f86:	429a      	cmp	r2, r3
 8010f88:	d015      	beq.n	8010fb6 <readCanToStructs+0x13c6>
					printf("GPS Packet Seq no MisMatch\n");
 8010f8a:	485b      	ldr	r0, [pc, #364]	; (80110f8 <readCanToStructs+0x1508>)
 8010f8c:	f011 fa2a 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8010f90:	2206      	movs	r2, #6
 8010f92:	2100      	movs	r1, #0
 8010f94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010f96:	f011 f8a1 	bl	80220dc <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8010f9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8010f9e:	4a53      	ldr	r2, [pc, #332]	; (80110ec <readCanToStructs+0x14fc>)
 8010fa0:	f240 4112 	movw	r1, #1042	; 0x412
 8010fa4:	fb01 f303 	mul.w	r3, r1, r3
 8010fa8:	4413      	add	r3, r2
 8010faa:	f203 2307 	addw	r3, r3, #519	; 0x207
 8010fae:	2200      	movs	r2, #0
 8010fb0:	701a      	strb	r2, [r3, #0]
					break;
 8010fb2:	f000 be0a 	b.w	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8010fb6:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8010fba:	4613      	mov	r3, r2
 8010fbc:	00db      	lsls	r3, r3, #3
 8010fbe:	1a9b      	subs	r3, r3, r2
 8010fc0:	461a      	mov	r2, r3
 8010fc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fc4:	4413      	add	r3, r2
 8010fc6:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010fc8:	2301      	movs	r3, #1
 8010fca:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010fce:	e016      	b.n	8010ffe <readCanToStructs+0x140e>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8010fd0:	4b47      	ldr	r3, [pc, #284]	; (80110f0 <readCanToStructs+0x1500>)
 8010fd2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8010fd6:	885b      	ldrh	r3, [r3, #2]
 8010fd8:	461a      	mov	r2, r3
 8010fda:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010fde:	4944      	ldr	r1, [pc, #272]	; (80110f0 <readCanToStructs+0x1500>)
 8010fe0:	0112      	lsls	r2, r2, #4
 8010fe2:	440a      	add	r2, r1
 8010fe4:	4413      	add	r3, r2
 8010fe6:	3304      	adds	r3, #4
 8010fe8:	781a      	ldrb	r2, [r3, #0]
 8010fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fec:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8010fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010ff0:	3301      	adds	r3, #1
 8010ff2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8010ff4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010ff8:	3301      	adds	r3, #1
 8010ffa:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010ffe:	4b3c      	ldr	r3, [pc, #240]	; (80110f0 <readCanToStructs+0x1500>)
 8011000:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011004:	885b      	ldrh	r3, [r3, #2]
 8011006:	4a3a      	ldr	r2, [pc, #232]	; (80110f0 <readCanToStructs+0x1500>)
 8011008:	011b      	lsls	r3, r3, #4
 801100a:	4413      	add	r3, r2
 801100c:	330c      	adds	r3, #12
 801100e:	781b      	ldrb	r3, [r3, #0]
 8011010:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011014:	429a      	cmp	r2, r3
 8011016:	d3db      	bcc.n	8010fd0 <readCanToStructs+0x13e0>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011018:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801101c:	4a33      	ldr	r2, [pc, #204]	; (80110ec <readCanToStructs+0x14fc>)
 801101e:	f240 4112 	movw	r1, #1042	; 0x412
 8011022:	fb01 f303 	mul.w	r3, r1, r3
 8011026:	4413      	add	r3, r2
 8011028:	f203 2307 	addw	r3, r3, #519	; 0x207
 801102c:	781b      	ldrb	r3, [r3, #0]
 801102e:	461a      	mov	r2, r3
 8011030:	4613      	mov	r3, r2
 8011032:	00db      	lsls	r3, r3, #3
 8011034:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011036:	4b2e      	ldr	r3, [pc, #184]	; (80110f0 <readCanToStructs+0x1500>)
 8011038:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801103c:	885b      	ldrh	r3, [r3, #2]
 801103e:	492c      	ldr	r1, [pc, #176]	; (80110f0 <readCanToStructs+0x1500>)
 8011040:	011b      	lsls	r3, r3, #4
 8011042:	440b      	add	r3, r1
 8011044:	330c      	adds	r3, #12
 8011046:	781b      	ldrb	r3, [r3, #0]
 8011048:	3b01      	subs	r3, #1
 801104a:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 801104c:	2b05      	cmp	r3, #5
 801104e:	d91c      	bls.n	801108a <readCanToStructs+0x149a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011050:	4b2a      	ldr	r3, [pc, #168]	; (80110fc <readCanToStructs+0x150c>)
 8011052:	4a28      	ldr	r2, [pc, #160]	; (80110f4 <readCanToStructs+0x1504>)
 8011054:	6811      	ldr	r1, [r2, #0]
 8011056:	6019      	str	r1, [r3, #0]
 8011058:	8892      	ldrh	r2, [r2, #4]
 801105a:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 801105c:	4b1d      	ldr	r3, [pc, #116]	; (80110d4 <readCanToStructs+0x14e4>)
 801105e:	781b      	ldrb	r3, [r3, #0]
 8011060:	2b01      	cmp	r3, #1
 8011062:	d102      	bne.n	801106a <readCanToStructs+0x147a>
						printf("GPS_PACKET_RECEIVED\n");
 8011064:	4826      	ldr	r0, [pc, #152]	; (8011100 <readCanToStructs+0x1510>)
 8011066:	f011 f9bd 	bl	80223e4 <puts>
					Write_RTC();
 801106a:	f7f9 fee7 	bl	800ae3c <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 801106e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011072:	4a1e      	ldr	r2, [pc, #120]	; (80110ec <readCanToStructs+0x14fc>)
 8011074:	f240 4112 	movw	r1, #1042	; 0x412
 8011078:	fb01 f303 	mul.w	r3, r1, r3
 801107c:	4413      	add	r3, r2
 801107e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011082:	2200      	movs	r2, #0
 8011084:	701a      	strb	r2, [r3, #0]
				break;
 8011086:	f000 bda0 	b.w	8011bca <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 801108a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801108e:	4a17      	ldr	r2, [pc, #92]	; (80110ec <readCanToStructs+0x14fc>)
 8011090:	f240 4112 	movw	r1, #1042	; 0x412
 8011094:	fb01 f303 	mul.w	r3, r1, r3
 8011098:	4413      	add	r3, r2
 801109a:	f203 2306 	addw	r3, r3, #518	; 0x206
 801109e:	2201      	movs	r2, #1
 80110a0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 80110a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80110a6:	4911      	ldr	r1, [pc, #68]	; (80110ec <readCanToStructs+0x14fc>)
 80110a8:	f240 4212 	movw	r2, #1042	; 0x412
 80110ac:	fb03 f202 	mul.w	r2, r3, r2
 80110b0:	440a      	add	r2, r1
 80110b2:	f202 2207 	addw	r2, r2, #519	; 0x207
 80110b6:	7812      	ldrb	r2, [r2, #0]
 80110b8:	3201      	adds	r2, #1
 80110ba:	b2d0      	uxtb	r0, r2
 80110bc:	4a0b      	ldr	r2, [pc, #44]	; (80110ec <readCanToStructs+0x14fc>)
 80110be:	f240 4112 	movw	r1, #1042	; 0x412
 80110c2:	fb01 f303 	mul.w	r3, r1, r3
 80110c6:	4413      	add	r3, r2
 80110c8:	f203 2307 	addw	r3, r3, #519	; 0x207
 80110cc:	4602      	mov	r2, r0
 80110ce:	701a      	strb	r2, [r3, #0]
				break;
 80110d0:	f000 bd7b 	b.w	8011bca <readCanToStructs+0x1fda>
 80110d4:	20000645 	.word	0x20000645
 80110d8:	20002024 	.word	0x20002024
 80110dc:	20000304 	.word	0x20000304
 80110e0:	080268c8 	.word	0x080268c8
 80110e4:	20001f48 	.word	0x20001f48
 80110e8:	20000108 	.word	0x20000108
 80110ec:	20005230 	.word	0x20005230
 80110f0:	20005a54 	.word	0x20005a54
 80110f4:	200027d8 	.word	0x200027d8
 80110f8:	08026704 	.word	0x08026704
 80110fc:	200027d0 	.word	0x200027d0
 8011100:	08026720 	.word	0x08026720
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011104:	4bc5      	ldr	r3, [pc, #788]	; (801141c <readCanToStructs+0x182c>)
 8011106:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011108:	4bc5      	ldr	r3, [pc, #788]	; (8011420 <readCanToStructs+0x1830>)
 801110a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801110e:	885b      	ldrh	r3, [r3, #2]
 8011110:	4ac3      	ldr	r2, [pc, #780]	; (8011420 <readCanToStructs+0x1830>)
 8011112:	011b      	lsls	r3, r3, #4
 8011114:	4413      	add	r3, r2
 8011116:	3304      	adds	r3, #4
 8011118:	781b      	ldrb	r3, [r3, #0]
 801111a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 801111e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011122:	2b00      	cmp	r3, #0
 8011124:	d110      	bne.n	8011148 <readCanToStructs+0x1558>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011126:	2206      	movs	r2, #6
 8011128:	2100      	movs	r1, #0
 801112a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801112c:	f010 ffd6 	bl	80220dc <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011130:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011134:	4abb      	ldr	r2, [pc, #748]	; (8011424 <readCanToStructs+0x1834>)
 8011136:	f240 4112 	movw	r1, #1042	; 0x412
 801113a:	fb01 f303 	mul.w	r3, r1, r3
 801113e:	4413      	add	r3, r2
 8011140:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011144:	2200      	movs	r2, #0
 8011146:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011148:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801114c:	4ab5      	ldr	r2, [pc, #724]	; (8011424 <readCanToStructs+0x1834>)
 801114e:	f240 4112 	movw	r1, #1042	; 0x412
 8011152:	fb01 f303 	mul.w	r3, r1, r3
 8011156:	4413      	add	r3, r2
 8011158:	f203 2313 	addw	r3, r3, #531	; 0x213
 801115c:	781b      	ldrb	r3, [r3, #0]
 801115e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011162:	429a      	cmp	r2, r3
 8011164:	d015      	beq.n	8011192 <readCanToStructs+0x15a2>
					printf("GPS2 Packet Seq no MisMatch\n");
 8011166:	48b0      	ldr	r0, [pc, #704]	; (8011428 <readCanToStructs+0x1838>)
 8011168:	f011 f93c 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 801116c:	2206      	movs	r2, #6
 801116e:	2100      	movs	r1, #0
 8011170:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011172:	f010 ffb3 	bl	80220dc <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011176:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801117a:	4aaa      	ldr	r2, [pc, #680]	; (8011424 <readCanToStructs+0x1834>)
 801117c:	f240 4112 	movw	r1, #1042	; 0x412
 8011180:	fb01 f303 	mul.w	r3, r1, r3
 8011184:	4413      	add	r3, r2
 8011186:	f203 2313 	addw	r3, r3, #531	; 0x213
 801118a:	2200      	movs	r2, #0
 801118c:	701a      	strb	r2, [r3, #0]
					break;
 801118e:	f000 bd1c 	b.w	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011192:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011196:	4613      	mov	r3, r2
 8011198:	00db      	lsls	r3, r3, #3
 801119a:	1a9b      	subs	r3, r3, r2
 801119c:	461a      	mov	r2, r3
 801119e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111a0:	4413      	add	r3, r2
 80111a2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80111a4:	2301      	movs	r3, #1
 80111a6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111aa:	e016      	b.n	80111da <readCanToStructs+0x15ea>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80111ac:	4b9c      	ldr	r3, [pc, #624]	; (8011420 <readCanToStructs+0x1830>)
 80111ae:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111b2:	885b      	ldrh	r3, [r3, #2]
 80111b4:	461a      	mov	r2, r3
 80111b6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111ba:	4999      	ldr	r1, [pc, #612]	; (8011420 <readCanToStructs+0x1830>)
 80111bc:	0112      	lsls	r2, r2, #4
 80111be:	440a      	add	r2, r1
 80111c0:	4413      	add	r3, r2
 80111c2:	3304      	adds	r3, #4
 80111c4:	781a      	ldrb	r2, [r3, #0]
 80111c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111c8:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80111ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80111cc:	3301      	adds	r3, #1
 80111ce:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80111d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80111d4:	3301      	adds	r3, #1
 80111d6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80111da:	4b91      	ldr	r3, [pc, #580]	; (8011420 <readCanToStructs+0x1830>)
 80111dc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80111e0:	885b      	ldrh	r3, [r3, #2]
 80111e2:	4a8f      	ldr	r2, [pc, #572]	; (8011420 <readCanToStructs+0x1830>)
 80111e4:	011b      	lsls	r3, r3, #4
 80111e6:	4413      	add	r3, r2
 80111e8:	330c      	adds	r3, #12
 80111ea:	781b      	ldrb	r3, [r3, #0]
 80111ec:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80111f0:	429a      	cmp	r2, r3
 80111f2:	d3db      	bcc.n	80111ac <readCanToStructs+0x15bc>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 80111f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80111f8:	4a8a      	ldr	r2, [pc, #552]	; (8011424 <readCanToStructs+0x1834>)
 80111fa:	f240 4112 	movw	r1, #1042	; 0x412
 80111fe:	fb01 f303 	mul.w	r3, r1, r3
 8011202:	4413      	add	r3, r2
 8011204:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011208:	781b      	ldrb	r3, [r3, #0]
 801120a:	461a      	mov	r2, r3
 801120c:	4613      	mov	r3, r2
 801120e:	00db      	lsls	r3, r3, #3
 8011210:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011212:	4b83      	ldr	r3, [pc, #524]	; (8011420 <readCanToStructs+0x1830>)
 8011214:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011218:	885b      	ldrh	r3, [r3, #2]
 801121a:	4981      	ldr	r1, [pc, #516]	; (8011420 <readCanToStructs+0x1830>)
 801121c:	011b      	lsls	r3, r3, #4
 801121e:	440b      	add	r3, r1
 8011220:	330c      	adds	r3, #12
 8011222:	781b      	ldrb	r3, [r3, #0]
 8011224:	3b01      	subs	r3, #1
 8011226:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011228:	2b05      	cmp	r3, #5
 801122a:	d91c      	bls.n	8011266 <readCanToStructs+0x1676>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 801122c:	4b7f      	ldr	r3, [pc, #508]	; (801142c <readCanToStructs+0x183c>)
 801122e:	4a7b      	ldr	r2, [pc, #492]	; (801141c <readCanToStructs+0x182c>)
 8011230:	6811      	ldr	r1, [r2, #0]
 8011232:	6019      	str	r1, [r3, #0]
 8011234:	8892      	ldrh	r2, [r2, #4]
 8011236:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011238:	4b7d      	ldr	r3, [pc, #500]	; (8011430 <readCanToStructs+0x1840>)
 801123a:	781b      	ldrb	r3, [r3, #0]
 801123c:	2b01      	cmp	r3, #1
 801123e:	d102      	bne.n	8011246 <readCanToStructs+0x1656>
						printf("GPS2_PACKET_RECEIVED\n");
 8011240:	487c      	ldr	r0, [pc, #496]	; (8011434 <readCanToStructs+0x1844>)
 8011242:	f011 f8cf 	bl	80223e4 <puts>
					Write_RTC();
 8011246:	f7f9 fdf9 	bl	800ae3c <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 801124a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801124e:	4a75      	ldr	r2, [pc, #468]	; (8011424 <readCanToStructs+0x1834>)
 8011250:	f240 4112 	movw	r1, #1042	; 0x412
 8011254:	fb01 f303 	mul.w	r3, r1, r3
 8011258:	4413      	add	r3, r2
 801125a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801125e:	2200      	movs	r2, #0
 8011260:	701a      	strb	r2, [r3, #0]
				break;
 8011262:	f000 bcb2 	b.w	8011bca <readCanToStructs+0x1fda>
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011266:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801126a:	4a6e      	ldr	r2, [pc, #440]	; (8011424 <readCanToStructs+0x1834>)
 801126c:	f240 4112 	movw	r1, #1042	; 0x412
 8011270:	fb01 f303 	mul.w	r3, r1, r3
 8011274:	4413      	add	r3, r2
 8011276:	f203 2312 	addw	r3, r3, #530	; 0x212
 801127a:	2201      	movs	r2, #1
 801127c:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 801127e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011282:	4968      	ldr	r1, [pc, #416]	; (8011424 <readCanToStructs+0x1834>)
 8011284:	f240 4212 	movw	r2, #1042	; 0x412
 8011288:	fb03 f202 	mul.w	r2, r3, r2
 801128c:	440a      	add	r2, r1
 801128e:	f202 2213 	addw	r2, r2, #531	; 0x213
 8011292:	7812      	ldrb	r2, [r2, #0]
 8011294:	3201      	adds	r2, #1
 8011296:	b2d0      	uxtb	r0, r2
 8011298:	4a62      	ldr	r2, [pc, #392]	; (8011424 <readCanToStructs+0x1834>)
 801129a:	f240 4112 	movw	r1, #1042	; 0x412
 801129e:	fb01 f303 	mul.w	r3, r1, r3
 80112a2:	4413      	add	r3, r2
 80112a4:	f203 2313 	addw	r3, r3, #531	; 0x213
 80112a8:	4602      	mov	r2, r0
 80112aa:	701a      	strb	r2, [r3, #0]
				break;
 80112ac:	f000 bc8d 	b.w	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 80112b0:	4b61      	ldr	r3, [pc, #388]	; (8011438 <readCanToStructs+0x1848>)
 80112b2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80112b4:	4b5a      	ldr	r3, [pc, #360]	; (8011420 <readCanToStructs+0x1830>)
 80112b6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80112ba:	885b      	ldrh	r3, [r3, #2]
 80112bc:	4a58      	ldr	r2, [pc, #352]	; (8011420 <readCanToStructs+0x1830>)
 80112be:	011b      	lsls	r3, r3, #4
 80112c0:	4413      	add	r3, r2
 80112c2:	3304      	adds	r3, #4
 80112c4:	781b      	ldrb	r3, [r3, #0]
 80112c6:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80112ca:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80112ce:	2b00      	cmp	r3, #0
 80112d0:	d110      	bne.n	80112f4 <readCanToStructs+0x1704>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80112d2:	2204      	movs	r2, #4
 80112d4:	2100      	movs	r1, #0
 80112d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80112d8:	f010 ff00 	bl	80220dc <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80112dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112e0:	4a50      	ldr	r2, [pc, #320]	; (8011424 <readCanToStructs+0x1834>)
 80112e2:	f240 4112 	movw	r1, #1042	; 0x412
 80112e6:	fb01 f303 	mul.w	r3, r1, r3
 80112ea:	4413      	add	r3, r2
 80112ec:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80112f0:	2200      	movs	r2, #0
 80112f2:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 80112f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80112f8:	4a4a      	ldr	r2, [pc, #296]	; (8011424 <readCanToStructs+0x1834>)
 80112fa:	f240 4112 	movw	r1, #1042	; 0x412
 80112fe:	fb01 f303 	mul.w	r3, r1, r3
 8011302:	4413      	add	r3, r2
 8011304:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801130e:	429a      	cmp	r2, r3
 8011310:	d015      	beq.n	801133e <readCanToStructs+0x174e>
					printf("EI_1_SELF_SHARING Seq no MisMatch\n");
 8011312:	484a      	ldr	r0, [pc, #296]	; (801143c <readCanToStructs+0x184c>)
 8011314:	f011 f866 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 8011318:	2204      	movs	r2, #4
 801131a:	2100      	movs	r1, #0
 801131c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801131e:	f010 fedd 	bl	80220dc <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011322:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011326:	4a3f      	ldr	r2, [pc, #252]	; (8011424 <readCanToStructs+0x1834>)
 8011328:	f240 4112 	movw	r1, #1042	; 0x412
 801132c:	fb01 f303 	mul.w	r3, r1, r3
 8011330:	4413      	add	r3, r2
 8011332:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011336:	2200      	movs	r2, #0
 8011338:	701a      	strb	r2, [r3, #0]
					break;
 801133a:	f000 bc46 	b.w	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 801133e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011342:	4613      	mov	r3, r2
 8011344:	00db      	lsls	r3, r3, #3
 8011346:	1a9b      	subs	r3, r3, r2
 8011348:	461a      	mov	r2, r3
 801134a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801134c:	4413      	add	r3, r2
 801134e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011350:	2301      	movs	r3, #1
 8011352:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011356:	e016      	b.n	8011386 <readCanToStructs+0x1796>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011358:	4b31      	ldr	r3, [pc, #196]	; (8011420 <readCanToStructs+0x1830>)
 801135a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801135e:	885b      	ldrh	r3, [r3, #2]
 8011360:	461a      	mov	r2, r3
 8011362:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011366:	492e      	ldr	r1, [pc, #184]	; (8011420 <readCanToStructs+0x1830>)
 8011368:	0112      	lsls	r2, r2, #4
 801136a:	440a      	add	r2, r1
 801136c:	4413      	add	r3, r2
 801136e:	3304      	adds	r3, #4
 8011370:	781a      	ldrb	r2, [r3, #0]
 8011372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011374:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011378:	3301      	adds	r3, #1
 801137a:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801137c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011380:	3301      	adds	r3, #1
 8011382:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011386:	4b26      	ldr	r3, [pc, #152]	; (8011420 <readCanToStructs+0x1830>)
 8011388:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801138c:	885b      	ldrh	r3, [r3, #2]
 801138e:	4a24      	ldr	r2, [pc, #144]	; (8011420 <readCanToStructs+0x1830>)
 8011390:	011b      	lsls	r3, r3, #4
 8011392:	4413      	add	r3, r2
 8011394:	330c      	adds	r3, #12
 8011396:	781b      	ldrb	r3, [r3, #0]
 8011398:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801139c:	429a      	cmp	r2, r3
 801139e:	d3db      	bcc.n	8011358 <readCanToStructs+0x1768>
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80113a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80113a4:	4a1f      	ldr	r2, [pc, #124]	; (8011424 <readCanToStructs+0x1834>)
 80113a6:	f240 4112 	movw	r1, #1042	; 0x412
 80113aa:	fb01 f303 	mul.w	r3, r1, r3
 80113ae:	4413      	add	r3, r2
 80113b0:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80113b4:	781b      	ldrb	r3, [r3, #0]
 80113b6:	461a      	mov	r2, r3
 80113b8:	4613      	mov	r3, r2
 80113ba:	00db      	lsls	r3, r3, #3
 80113bc:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 80113be:	4b18      	ldr	r3, [pc, #96]	; (8011420 <readCanToStructs+0x1830>)
 80113c0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80113c4:	885b      	ldrh	r3, [r3, #2]
 80113c6:	4916      	ldr	r1, [pc, #88]	; (8011420 <readCanToStructs+0x1830>)
 80113c8:	011b      	lsls	r3, r3, #4
 80113ca:	440b      	add	r3, r1
 80113cc:	330c      	adds	r3, #12
 80113ce:	781b      	ldrb	r3, [r3, #0]
 80113d0:	3b01      	subs	r3, #1
 80113d2:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7)
 80113d4:	2b03      	cmp	r3, #3
 80113d6:	d939      	bls.n	801144c <readCanToStructs+0x185c>
 80113d8:	4b17      	ldr	r3, [pc, #92]	; (8011438 <readCanToStructs+0x1848>)
 80113da:	681b      	ldr	r3, [r3, #0]
 80113dc:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80113de:	4b18      	ldr	r3, [pc, #96]	; (8011440 <readCanToStructs+0x1850>)
 80113e0:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80113e2:	4b13      	ldr	r3, [pc, #76]	; (8011430 <readCanToStructs+0x1840>)
 80113e4:	781b      	ldrb	r3, [r3, #0]
 80113e6:	2b01      	cmp	r3, #1
 80113e8:	d102      	bne.n	80113f0 <readCanToStructs+0x1800>
						printf("O_Info1_RCV\n");
 80113ea:	4816      	ldr	r0, [pc, #88]	; (8011444 <readCanToStructs+0x1854>)
 80113ec:	f010 fffa 	bl	80223e4 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80113f0:	4b15      	ldr	r3, [pc, #84]	; (8011448 <readCanToStructs+0x1858>)
 80113f2:	2201      	movs	r2, #1
 80113f4:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80113f6:	f003 ff4f 	bl	8015298 <HAL_GetTick>
 80113fa:	4603      	mov	r3, r0
 80113fc:	4a12      	ldr	r2, [pc, #72]	; (8011448 <readCanToStructs+0x1858>)
 80113fe:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8011400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011404:	4a07      	ldr	r2, [pc, #28]	; (8011424 <readCanToStructs+0x1834>)
 8011406:	f240 4112 	movw	r1, #1042	; 0x412
 801140a:	fb01 f303 	mul.w	r3, r1, r3
 801140e:	4413      	add	r3, r2
 8011410:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8011414:	2200      	movs	r2, #0
 8011416:	701a      	strb	r2, [r3, #0]
				break;
 8011418:	e3d7      	b.n	8011bca <readCanToStructs+0x1fda>
 801141a:	bf00      	nop
 801141c:	200027d8 	.word	0x200027d8
 8011420:	20005a54 	.word	0x20005a54
 8011424:	20005230 	.word	0x20005230
 8011428:	08026734 	.word	0x08026734
 801142c:	200027d0 	.word	0x200027d0
 8011430:	20000645 	.word	0x20000645
 8011434:	08026750 	.word	0x08026750
 8011438:	20003480 	.word	0x20003480
 801143c:	08026768 	.word	0x08026768
 8011440:	2000347c 	.word	0x2000347c
 8011444:	080268dc 	.word	0x080268dc
 8011448:	20003484 	.word	0x20003484
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 801144c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011450:	4a98      	ldr	r2, [pc, #608]	; (80116b4 <readCanToStructs+0x1ac4>)
 8011452:	f240 4112 	movw	r1, #1042	; 0x412
 8011456:	fb01 f303 	mul.w	r3, r1, r3
 801145a:	4413      	add	r3, r2
 801145c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8011460:	2201      	movs	r2, #1
 8011462:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 8011464:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011468:	4992      	ldr	r1, [pc, #584]	; (80116b4 <readCanToStructs+0x1ac4>)
 801146a:	f240 4212 	movw	r2, #1042	; 0x412
 801146e:	fb03 f202 	mul.w	r2, r3, r2
 8011472:	440a      	add	r2, r1
 8011474:	f202 4203 	addw	r2, r2, #1027	; 0x403
 8011478:	7812      	ldrb	r2, [r2, #0]
 801147a:	3201      	adds	r2, #1
 801147c:	b2d0      	uxtb	r0, r2
 801147e:	4a8d      	ldr	r2, [pc, #564]	; (80116b4 <readCanToStructs+0x1ac4>)
 8011480:	f240 4112 	movw	r1, #1042	; 0x412
 8011484:	fb01 f303 	mul.w	r3, r1, r3
 8011488:	4413      	add	r3, r2
 801148a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801148e:	4602      	mov	r2, r0
 8011490:	701a      	strb	r2, [r3, #0]
				break;
 8011492:	e39a      	b.n	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&Temp_Siemens_self_sharing_st;
 8011494:	4b88      	ldr	r3, [pc, #544]	; (80116b8 <readCanToStructs+0x1ac8>)
 8011496:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011498:	4b88      	ldr	r3, [pc, #544]	; (80116bc <readCanToStructs+0x1acc>)
 801149a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801149e:	885b      	ldrh	r3, [r3, #2]
 80114a0:	4a86      	ldr	r2, [pc, #536]	; (80116bc <readCanToStructs+0x1acc>)
 80114a2:	011b      	lsls	r3, r3, #4
 80114a4:	4413      	add	r3, r2
 80114a6:	3304      	adds	r3, #4
 80114a8:	781b      	ldrb	r3, [r3, #0]
 80114aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 80114ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80114b2:	2b00      	cmp	r3, #0
 80114b4:	d110      	bne.n	80114d8 <readCanToStructs+0x18e8>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80114b6:	2204      	movs	r2, #4
 80114b8:	2100      	movs	r1, #0
 80114ba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114bc:	f010 fe0e 	bl	80220dc <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80114c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114c4:	4a7b      	ldr	r2, [pc, #492]	; (80116b4 <readCanToStructs+0x1ac4>)
 80114c6:	f240 4112 	movw	r1, #1042	; 0x412
 80114ca:	fb01 f303 	mul.w	r3, r1, r3
 80114ce:	4413      	add	r3, r2
 80114d0:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80114d4:	2200      	movs	r2, #0
 80114d6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 80114d8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80114dc:	4a75      	ldr	r2, [pc, #468]	; (80116b4 <readCanToStructs+0x1ac4>)
 80114de:	f240 4112 	movw	r1, #1042	; 0x412
 80114e2:	fb01 f303 	mul.w	r3, r1, r3
 80114e6:	4413      	add	r3, r2
 80114e8:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80114ec:	781b      	ldrb	r3, [r3, #0]
 80114ee:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80114f2:	429a      	cmp	r2, r3
 80114f4:	d014      	beq.n	8011520 <readCanToStructs+0x1930>
					printf("EI_2_SELF_SHARING Seq no MisMatch\n");
 80114f6:	4872      	ldr	r0, [pc, #456]	; (80116c0 <readCanToStructs+0x1ad0>)
 80114f8:	f010 ff74 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_SELF_SHARING_t));
 80114fc:	2204      	movs	r2, #4
 80114fe:	2100      	movs	r1, #0
 8011500:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011502:	f010 fdeb 	bl	80220dc <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8011506:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801150a:	4a6a      	ldr	r2, [pc, #424]	; (80116b4 <readCanToStructs+0x1ac4>)
 801150c:	f240 4112 	movw	r1, #1042	; 0x412
 8011510:	fb01 f303 	mul.w	r3, r1, r3
 8011514:	4413      	add	r3, r2
 8011516:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801151a:	2200      	movs	r2, #0
 801151c:	701a      	strb	r2, [r3, #0]
					break;
 801151e:	e354      	b.n	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011520:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011524:	4613      	mov	r3, r2
 8011526:	00db      	lsls	r3, r3, #3
 8011528:	1a9b      	subs	r3, r3, r2
 801152a:	461a      	mov	r2, r3
 801152c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801152e:	4413      	add	r3, r2
 8011530:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011532:	2301      	movs	r3, #1
 8011534:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011538:	e016      	b.n	8011568 <readCanToStructs+0x1978>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801153a:	4b60      	ldr	r3, [pc, #384]	; (80116bc <readCanToStructs+0x1acc>)
 801153c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011540:	885b      	ldrh	r3, [r3, #2]
 8011542:	461a      	mov	r2, r3
 8011544:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011548:	495c      	ldr	r1, [pc, #368]	; (80116bc <readCanToStructs+0x1acc>)
 801154a:	0112      	lsls	r2, r2, #4
 801154c:	440a      	add	r2, r1
 801154e:	4413      	add	r3, r2
 8011550:	3304      	adds	r3, #4
 8011552:	781a      	ldrb	r2, [r3, #0]
 8011554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011556:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801155a:	3301      	adds	r3, #1
 801155c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801155e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011562:	3301      	adds	r3, #1
 8011564:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011568:	4b54      	ldr	r3, [pc, #336]	; (80116bc <readCanToStructs+0x1acc>)
 801156a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801156e:	885b      	ldrh	r3, [r3, #2]
 8011570:	4a52      	ldr	r2, [pc, #328]	; (80116bc <readCanToStructs+0x1acc>)
 8011572:	011b      	lsls	r3, r3, #4
 8011574:	4413      	add	r3, r2
 8011576:	330c      	adds	r3, #12
 8011578:	781b      	ldrb	r3, [r3, #0]
 801157a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 801157e:	429a      	cmp	r2, r3
 8011580:	d3db      	bcc.n	801153a <readCanToStructs+0x194a>
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 8011582:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011586:	4a4b      	ldr	r2, [pc, #300]	; (80116b4 <readCanToStructs+0x1ac4>)
 8011588:	f240 4112 	movw	r1, #1042	; 0x412
 801158c:	fb01 f303 	mul.w	r3, r1, r3
 8011590:	4413      	add	r3, r2
 8011592:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8011596:	781b      	ldrb	r3, [r3, #0]
 8011598:	461a      	mov	r2, r3
 801159a:	4613      	mov	r3, r2
 801159c:	00db      	lsls	r3, r3, #3
 801159e:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_SELF_SHARING_t))
 80115a0:	4b46      	ldr	r3, [pc, #280]	; (80116bc <readCanToStructs+0x1acc>)
 80115a2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80115a6:	885b      	ldrh	r3, [r3, #2]
 80115a8:	4944      	ldr	r1, [pc, #272]	; (80116bc <readCanToStructs+0x1acc>)
 80115aa:	011b      	lsls	r3, r3, #4
 80115ac:	440b      	add	r3, r1
 80115ae:	330c      	adds	r3, #12
 80115b0:	781b      	ldrb	r3, [r3, #0]
 80115b2:	3b01      	subs	r3, #1
 80115b4:	4413      	add	r3, r2
				if((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7)
 80115b6:	2b03      	cmp	r3, #3
 80115b8:	d920      	bls.n	80115fc <readCanToStructs+0x1a0c>
 80115ba:	4b3f      	ldr	r3, [pc, #252]	; (80116b8 <readCanToStructs+0x1ac8>)
 80115bc:	681b      	ldr	r3, [r3, #0]
 80115be:	461a      	mov	r2, r3
					memcpy(&Rx_Siemens_self_sharing_st,&Temp_Siemens_self_sharing_st,sizeof(SIEMENS_SELF_SHARING_t));
 80115c0:	4b40      	ldr	r3, [pc, #256]	; (80116c4 <readCanToStructs+0x1ad4>)
 80115c2:	601a      	str	r2, [r3, #0]
					if(Debug_flag == 1)
 80115c4:	4b40      	ldr	r3, [pc, #256]	; (80116c8 <readCanToStructs+0x1ad8>)
 80115c6:	781b      	ldrb	r3, [r3, #0]
 80115c8:	2b01      	cmp	r3, #1
 80115ca:	d102      	bne.n	80115d2 <readCanToStructs+0x19e2>
						printf("O_Info2_RCV\n");
 80115cc:	483f      	ldr	r0, [pc, #252]	; (80116cc <readCanToStructs+0x1adc>)
 80115ce:	f010 ff09 	bl	80223e4 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80115d2:	4b3f      	ldr	r3, [pc, #252]	; (80116d0 <readCanToStructs+0x1ae0>)
 80115d4:	2201      	movs	r2, #1
 80115d6:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80115d8:	f003 fe5e 	bl	8015298 <HAL_GetTick>
 80115dc:	4603      	mov	r3, r0
 80115de:	4a3c      	ldr	r2, [pc, #240]	; (80116d0 <readCanToStructs+0x1ae0>)
 80115e0:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 80115e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80115e6:	4a33      	ldr	r2, [pc, #204]	; (80116b4 <readCanToStructs+0x1ac4>)
 80115e8:	f240 4112 	movw	r1, #1042	; 0x412
 80115ec:	fb01 f303 	mul.w	r3, r1, r3
 80115f0:	4413      	add	r3, r2
 80115f2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80115f6:	2200      	movs	r2, #0
 80115f8:	701a      	strb	r2, [r3, #0]
				break;
 80115fa:	e2e6      	b.n	8011bca <readCanToStructs+0x1fda>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 80115fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011600:	4a2c      	ldr	r2, [pc, #176]	; (80116b4 <readCanToStructs+0x1ac4>)
 8011602:	f240 4112 	movw	r1, #1042	; 0x412
 8011606:	fb01 f303 	mul.w	r3, r1, r3
 801160a:	4413      	add	r3, r2
 801160c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8011610:	2201      	movs	r2, #1
 8011612:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 8011614:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011618:	4926      	ldr	r1, [pc, #152]	; (80116b4 <readCanToStructs+0x1ac4>)
 801161a:	f240 4212 	movw	r2, #1042	; 0x412
 801161e:	fb03 f202 	mul.w	r2, r3, r2
 8011622:	440a      	add	r2, r1
 8011624:	f202 4205 	addw	r2, r2, #1029	; 0x405
 8011628:	7812      	ldrb	r2, [r2, #0]
 801162a:	3201      	adds	r2, #1
 801162c:	b2d0      	uxtb	r0, r2
 801162e:	4a21      	ldr	r2, [pc, #132]	; (80116b4 <readCanToStructs+0x1ac4>)
 8011630:	f240 4112 	movw	r1, #1042	; 0x412
 8011634:	fb01 f303 	mul.w	r3, r1, r3
 8011638:	4413      	add	r3, r2
 801163a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801163e:	4602      	mov	r2, r0
 8011640:	701a      	strb	r2, [r3, #0]
				break;
 8011642:	e2c2      	b.n	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011644:	4b23      	ldr	r3, [pc, #140]	; (80116d4 <readCanToStructs+0x1ae4>)
 8011646:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011648:	4b1c      	ldr	r3, [pc, #112]	; (80116bc <readCanToStructs+0x1acc>)
 801164a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801164e:	885b      	ldrh	r3, [r3, #2]
 8011650:	4a1a      	ldr	r2, [pc, #104]	; (80116bc <readCanToStructs+0x1acc>)
 8011652:	011b      	lsls	r3, r3, #4
 8011654:	4413      	add	r3, r2
 8011656:	3304      	adds	r3, #4
 8011658:	781b      	ldrb	r3, [r3, #0]
 801165a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 801165e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011662:	2b00      	cmp	r3, #0
 8011664:	d005      	beq.n	8011672 <readCanToStructs+0x1a82>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011666:	4b1c      	ldr	r3, [pc, #112]	; (80116d8 <readCanToStructs+0x1ae8>)
 8011668:	881b      	ldrh	r3, [r3, #0]
 801166a:	461a      	mov	r2, r3
 801166c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801166e:	4413      	add	r3, r2
 8011670:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011672:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011676:	2b00      	cmp	r3, #0
 8011678:	d117      	bne.n	80116aa <readCanToStructs+0x1aba>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 801167a:	f44f 7201 	mov.w	r2, #516	; 0x204
 801167e:	2100      	movs	r1, #0
 8011680:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011682:	f010 fd2b 	bl	80220dc <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011686:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801168a:	4a0a      	ldr	r2, [pc, #40]	; (80116b4 <readCanToStructs+0x1ac4>)
 801168c:	f240 4112 	movw	r1, #1042	; 0x412
 8011690:	fb01 f303 	mul.w	r3, r1, r3
 8011694:	4413      	add	r3, r2
 8011696:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801169a:	2200      	movs	r2, #0
 801169c:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 801169e:	4b0e      	ldr	r3, [pc, #56]	; (80116d8 <readCanToStructs+0x1ae8>)
 80116a0:	2200      	movs	r2, #0
 80116a2:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 80116a4:	4b0d      	ldr	r3, [pc, #52]	; (80116dc <readCanToStructs+0x1aec>)
 80116a6:	2200      	movs	r2, #0
 80116a8:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80116aa:	2301      	movs	r3, #1
 80116ac:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80116b0:	e033      	b.n	801171a <readCanToStructs+0x1b2a>
 80116b2:	bf00      	nop
 80116b4:	20005230 	.word	0x20005230
 80116b8:	20003480 	.word	0x20003480
 80116bc:	20005a54 	.word	0x20005a54
 80116c0:	0802679c 	.word	0x0802679c
 80116c4:	2000347c 	.word	0x2000347c
 80116c8:	20000645 	.word	0x20000645
 80116cc:	080268e8 	.word	0x080268e8
 80116d0:	20003484 	.word	0x20003484
 80116d4:	20003aac 	.word	0x20003aac
 80116d8:	20009bac 	.word	0x20009bac
 80116dc:	20009bae 	.word	0x20009bae
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80116e0:	4ba0      	ldr	r3, [pc, #640]	; (8011964 <readCanToStructs+0x1d74>)
 80116e2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80116e6:	885b      	ldrh	r3, [r3, #2]
 80116e8:	461a      	mov	r2, r3
 80116ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80116ee:	499d      	ldr	r1, [pc, #628]	; (8011964 <readCanToStructs+0x1d74>)
 80116f0:	0112      	lsls	r2, r2, #4
 80116f2:	440a      	add	r2, r1
 80116f4:	4413      	add	r3, r2
 80116f6:	3304      	adds	r3, #4
 80116f8:	781a      	ldrb	r2, [r3, #0]
 80116fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80116fc:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80116fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011700:	3301      	adds	r3, #1
 8011702:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 8011704:	4b98      	ldr	r3, [pc, #608]	; (8011968 <readCanToStructs+0x1d78>)
 8011706:	881b      	ldrh	r3, [r3, #0]
 8011708:	3301      	adds	r3, #1
 801170a:	b29a      	uxth	r2, r3
 801170c:	4b96      	ldr	r3, [pc, #600]	; (8011968 <readCanToStructs+0x1d78>)
 801170e:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011710:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011714:	3301      	adds	r3, #1
 8011716:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801171a:	4b92      	ldr	r3, [pc, #584]	; (8011964 <readCanToStructs+0x1d74>)
 801171c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011720:	885b      	ldrh	r3, [r3, #2]
 8011722:	4a90      	ldr	r2, [pc, #576]	; (8011964 <readCanToStructs+0x1d74>)
 8011724:	011b      	lsls	r3, r3, #4
 8011726:	4413      	add	r3, r2
 8011728:	330c      	adds	r3, #12
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011730:	429a      	cmp	r2, r3
 8011732:	d3d5      	bcc.n	80116e0 <readCanToStructs+0x1af0>
				if(uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8011734:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011738:	4a8c      	ldr	r2, [pc, #560]	; (801196c <readCanToStructs+0x1d7c>)
 801173a:	f240 4112 	movw	r1, #1042	; 0x412
 801173e:	fb01 f303 	mul.w	r3, r1, r3
 8011742:	4413      	add	r3, r2
 8011744:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801174e:	429a      	cmp	r2, r3
 8011750:	d026      	beq.n	80117a0 <readCanToStructs+0x1bb0>
					printf("EIPC1_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo);
 8011752:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8011756:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801175a:	4a84      	ldr	r2, [pc, #528]	; (801196c <readCanToStructs+0x1d7c>)
 801175c:	f240 4012 	movw	r0, #1042	; 0x412
 8011760:	fb00 f303 	mul.w	r3, r0, r3
 8011764:	4413      	add	r3, r2
 8011766:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	461a      	mov	r2, r3
 801176e:	4880      	ldr	r0, [pc, #512]	; (8011970 <readCanToStructs+0x1d80>)
 8011770:	f010 fd9c 	bl	80222ac <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011774:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011778:	2100      	movs	r1, #0
 801177a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801177c:	f010 fcae 	bl	80220dc <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8011780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011784:	4a79      	ldr	r2, [pc, #484]	; (801196c <readCanToStructs+0x1d7c>)
 8011786:	f240 4112 	movw	r1, #1042	; 0x412
 801178a:	fb01 f303 	mul.w	r3, r1, r3
 801178e:	4413      	add	r3, r2
 8011790:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011794:	2200      	movs	r2, #0
 8011796:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011798:	4b73      	ldr	r3, [pc, #460]	; (8011968 <readCanToStructs+0x1d78>)
 801179a:	2200      	movs	r2, #0
 801179c:	801a      	strh	r2, [r3, #0]
					break;
 801179e:	e214      	b.n	8011bca <readCanToStructs+0x1fda>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80117a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80117a4:	4971      	ldr	r1, [pc, #452]	; (801196c <readCanToStructs+0x1d7c>)
 80117a6:	f240 4212 	movw	r2, #1042	; 0x412
 80117aa:	fb03 f202 	mul.w	r2, r3, r2
 80117ae:	440a      	add	r2, r1
 80117b0:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80117b4:	7812      	ldrb	r2, [r2, #0]
 80117b6:	3201      	adds	r2, #1
 80117b8:	b2d0      	uxtb	r0, r2
 80117ba:	4a6c      	ldr	r2, [pc, #432]	; (801196c <readCanToStructs+0x1d7c>)
 80117bc:	f240 4112 	movw	r1, #1042	; 0x412
 80117c0:	fb01 f303 	mul.w	r3, r1, r3
 80117c4:	4413      	add	r3, r2
 80117c6:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80117ca:	4602      	mov	r2, r0
 80117cc:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 80117ce:	4b69      	ldr	r3, [pc, #420]	; (8011974 <readCanToStructs+0x1d84>)
 80117d0:	881b      	ldrh	r3, [r3, #0]
 80117d2:	3304      	adds	r3, #4
 80117d4:	b29a      	uxth	r2, r3
 80117d6:	4b68      	ldr	r3, [pc, #416]	; (8011978 <readCanToStructs+0x1d88>)
 80117d8:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 80117da:	4b63      	ldr	r3, [pc, #396]	; (8011968 <readCanToStructs+0x1d78>)
 80117dc:	881a      	ldrh	r2, [r3, #0]
 80117de:	4b66      	ldr	r3, [pc, #408]	; (8011978 <readCanToStructs+0x1d88>)
 80117e0:	881b      	ldrh	r3, [r3, #0]
 80117e2:	429a      	cmp	r2, r3
 80117e4:	f0c0 81ee 	bcc.w	8011bc4 <readCanToStructs+0x1fd4>
					printf("EI1 Relay Info Received\n");
 80117e8:	4864      	ldr	r0, [pc, #400]	; (801197c <readCanToStructs+0x1d8c>)
 80117ea:	f010 fdfb 	bl	80223e4 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80117ee:	4a64      	ldr	r2, [pc, #400]	; (8011980 <readCanToStructs+0x1d90>)
 80117f0:	4b60      	ldr	r3, [pc, #384]	; (8011974 <readCanToStructs+0x1d84>)
 80117f2:	4610      	mov	r0, r2
 80117f4:	4619      	mov	r1, r3
 80117f6:	f44f 7301 	mov.w	r3, #516	; 0x204
 80117fa:	461a      	mov	r2, r3
 80117fc:	f010 fc46 	bl	802208c <memcpy>
					DataTraverser = 0;
 8011800:	4b59      	ldr	r3, [pc, #356]	; (8011968 <readCanToStructs+0x1d78>)
 8011802:	2200      	movs	r2, #0
 8011804:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 8011806:	4b5c      	ldr	r3, [pc, #368]	; (8011978 <readCanToStructs+0x1d88>)
 8011808:	2200      	movs	r2, #0
 801180a:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 801180c:	4b5d      	ldr	r3, [pc, #372]	; (8011984 <readCanToStructs+0x1d94>)
 801180e:	2201      	movs	r2, #1
 8011810:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011812:	f003 fd41 	bl	8015298 <HAL_GetTick>
 8011816:	4603      	mov	r3, r0
 8011818:	4a5a      	ldr	r2, [pc, #360]	; (8011984 <readCanToStructs+0x1d94>)
 801181a:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 801181c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011820:	4a52      	ldr	r2, [pc, #328]	; (801196c <readCanToStructs+0x1d7c>)
 8011822:	f240 4112 	movw	r1, #1042	; 0x412
 8011826:	fb01 f303 	mul.w	r3, r1, r3
 801182a:	4413      	add	r3, r2
 801182c:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8011830:	2200      	movs	r2, #0
 8011832:	701a      	strb	r2, [r3, #0]
				break;
 8011834:	e1c6      	b.n	8011bc4 <readCanToStructs+0x1fd4>
				uc_pp_charPtr = (uint8_t *)&TempSiemensRx_OtherRelays_st;
 8011836:	4b4f      	ldr	r3, [pc, #316]	; (8011974 <readCanToStructs+0x1d84>)
 8011838:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801183a:	4b4a      	ldr	r3, [pc, #296]	; (8011964 <readCanToStructs+0x1d74>)
 801183c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011840:	885b      	ldrh	r3, [r3, #2]
 8011842:	4a48      	ldr	r2, [pc, #288]	; (8011964 <readCanToStructs+0x1d74>)
 8011844:	011b      	lsls	r3, r3, #4
 8011846:	4413      	add	r3, r2
 8011848:	3304      	adds	r3, #4
 801184a:	781b      	ldrb	r3, [r3, #0]
 801184c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo != 0)
 8011850:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011854:	2b00      	cmp	r3, #0
 8011856:	d005      	beq.n	8011864 <readCanToStructs+0x1c74>
					uc_pp_charPtr = uc_pp_charPtr + DataTraverser;
 8011858:	4b43      	ldr	r3, [pc, #268]	; (8011968 <readCanToStructs+0x1d78>)
 801185a:	881b      	ldrh	r3, [r3, #0]
 801185c:	461a      	mov	r2, r3
 801185e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011860:	4413      	add	r3, r2
 8011862:	633b      	str	r3, [r7, #48]	; 0x30
				if(uc_seqNo==0)
 8011864:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011868:	2b00      	cmp	r3, #0
 801186a:	d117      	bne.n	801189c <readCanToStructs+0x1cac>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 801186c:	f44f 7201 	mov.w	r2, #516	; 0x204
 8011870:	2100      	movs	r1, #0
 8011872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011874:	f010 fc32 	bl	80220dc <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011878:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801187c:	4a3b      	ldr	r2, [pc, #236]	; (801196c <readCanToStructs+0x1d7c>)
 801187e:	f240 4112 	movw	r1, #1042	; 0x412
 8011882:	fb01 f303 	mul.w	r3, r1, r3
 8011886:	4413      	add	r3, r2
 8011888:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801188c:	2200      	movs	r2, #0
 801188e:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 8011890:	4b35      	ldr	r3, [pc, #212]	; (8011968 <readCanToStructs+0x1d78>)
 8011892:	2200      	movs	r2, #0
 8011894:	801a      	strh	r2, [r3, #0]
					DataLength= 0;
 8011896:	4b38      	ldr	r3, [pc, #224]	; (8011978 <readCanToStructs+0x1d88>)
 8011898:	2200      	movs	r2, #0
 801189a:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801189c:	2301      	movs	r3, #1
 801189e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118a2:	e01c      	b.n	80118de <readCanToStructs+0x1cee>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80118a4:	4b2f      	ldr	r3, [pc, #188]	; (8011964 <readCanToStructs+0x1d74>)
 80118a6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118aa:	885b      	ldrh	r3, [r3, #2]
 80118ac:	461a      	mov	r2, r3
 80118ae:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118b2:	492c      	ldr	r1, [pc, #176]	; (8011964 <readCanToStructs+0x1d74>)
 80118b4:	0112      	lsls	r2, r2, #4
 80118b6:	440a      	add	r2, r1
 80118b8:	4413      	add	r3, r2
 80118ba:	3304      	adds	r3, #4
 80118bc:	781a      	ldrb	r2, [r3, #0]
 80118be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c0:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80118c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80118c4:	3301      	adds	r3, #1
 80118c6:	633b      	str	r3, [r7, #48]	; 0x30
					DataTraverser++;
 80118c8:	4b27      	ldr	r3, [pc, #156]	; (8011968 <readCanToStructs+0x1d78>)
 80118ca:	881b      	ldrh	r3, [r3, #0]
 80118cc:	3301      	adds	r3, #1
 80118ce:	b29a      	uxth	r2, r3
 80118d0:	4b25      	ldr	r3, [pc, #148]	; (8011968 <readCanToStructs+0x1d78>)
 80118d2:	801a      	strh	r2, [r3, #0]
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80118d4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80118d8:	3301      	adds	r3, #1
 80118da:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80118de:	4b21      	ldr	r3, [pc, #132]	; (8011964 <readCanToStructs+0x1d74>)
 80118e0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80118e4:	885b      	ldrh	r3, [r3, #2]
 80118e6:	4a1f      	ldr	r2, [pc, #124]	; (8011964 <readCanToStructs+0x1d74>)
 80118e8:	011b      	lsls	r3, r3, #4
 80118ea:	4413      	add	r3, r2
 80118ec:	330c      	adds	r3, #12
 80118ee:	781b      	ldrb	r3, [r3, #0]
 80118f0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80118f4:	429a      	cmp	r2, r3
 80118f6:	d3d5      	bcc.n	80118a4 <readCanToStructs+0x1cb4>
				if(uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 80118f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80118fc:	4a1b      	ldr	r2, [pc, #108]	; (801196c <readCanToStructs+0x1d7c>)
 80118fe:	f240 4112 	movw	r1, #1042	; 0x412
 8011902:	fb01 f303 	mul.w	r3, r1, r3
 8011906:	4413      	add	r3, r2
 8011908:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801190c:	781b      	ldrb	r3, [r3, #0]
 801190e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011912:	429a      	cmp	r2, r3
 8011914:	d03a      	beq.n	801198c <readCanToStructs+0x1d9c>
					printf("EIPC2_RELAYS_2_OTHER Seq no MisMatch:%u:%u\n",uc_seqNo,canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo);
 8011916:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 801191a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801191e:	4a13      	ldr	r2, [pc, #76]	; (801196c <readCanToStructs+0x1d7c>)
 8011920:	f240 4012 	movw	r0, #1042	; 0x412
 8011924:	fb00 f303 	mul.w	r3, r0, r3
 8011928:	4413      	add	r3, r2
 801192a:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	461a      	mov	r2, r3
 8011932:	4815      	ldr	r0, [pc, #84]	; (8011988 <readCanToStructs+0x1d98>)
 8011934:	f010 fcba 	bl	80222ac <iprintf>
					memset(uc_pp_charPtr,0,sizeof(VITAL_DATA_SHARING_t));
 8011938:	f44f 7201 	mov.w	r2, #516	; 0x204
 801193c:	2100      	movs	r1, #0
 801193e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011940:	f010 fbcc 	bl	80220dc <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011944:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011948:	4a08      	ldr	r2, [pc, #32]	; (801196c <readCanToStructs+0x1d7c>)
 801194a:	f240 4112 	movw	r1, #1042	; 0x412
 801194e:	fb01 f303 	mul.w	r3, r1, r3
 8011952:	4413      	add	r3, r2
 8011954:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011958:	2200      	movs	r2, #0
 801195a:	701a      	strb	r2, [r3, #0]
					DataTraverser = 0;
 801195c:	4b02      	ldr	r3, [pc, #8]	; (8011968 <readCanToStructs+0x1d78>)
 801195e:	2200      	movs	r2, #0
 8011960:	801a      	strh	r2, [r3, #0]
					break;
 8011962:	e132      	b.n	8011bca <readCanToStructs+0x1fda>
 8011964:	20005a54 	.word	0x20005a54
 8011968:	20009bac 	.word	0x20009bac
 801196c:	20005230 	.word	0x20005230
 8011970:	080268f4 	.word	0x080268f4
 8011974:	20003aac 	.word	0x20003aac
 8011978:	20009bae 	.word	0x20009bae
 801197c:	08026920 	.word	0x08026920
 8011980:	200038a8 	.word	0x200038a8
 8011984:	20003484 	.word	0x20003484
 8011988:	08026938 	.word	0x08026938
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 801198c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011990:	49c2      	ldr	r1, [pc, #776]	; (8011c9c <readCanToStructs+0x20ac>)
 8011992:	f240 4212 	movw	r2, #1042	; 0x412
 8011996:	fb03 f202 	mul.w	r2, r3, r2
 801199a:	440a      	add	r2, r1
 801199c:	f202 4211 	addw	r2, r2, #1041	; 0x411
 80119a0:	7812      	ldrb	r2, [r2, #0]
 80119a2:	3201      	adds	r2, #1
 80119a4:	b2d0      	uxtb	r0, r2
 80119a6:	4abd      	ldr	r2, [pc, #756]	; (8011c9c <readCanToStructs+0x20ac>)
 80119a8:	f240 4112 	movw	r1, #1042	; 0x412
 80119ac:	fb01 f303 	mul.w	r3, r1, r3
 80119b0:	4413      	add	r3, r2
 80119b2:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80119b6:	4602      	mov	r2, r0
 80119b8:	701a      	strb	r2, [r3, #0]
				DataLength = ( (TempSiemensRx_OtherRelays_st.NoofDataBytes) + ((sizeof(TempSiemensRx_OtherRelays_st.NoofDataBytes))+ (sizeof(TempSiemensRx_OtherRelays_st.VitalCRC))));
 80119ba:	4bb9      	ldr	r3, [pc, #740]	; (8011ca0 <readCanToStructs+0x20b0>)
 80119bc:	881b      	ldrh	r3, [r3, #0]
 80119be:	3304      	adds	r3, #4
 80119c0:	b29a      	uxth	r2, r3
 80119c2:	4bb8      	ldr	r3, [pc, #736]	; (8011ca4 <readCanToStructs+0x20b4>)
 80119c4:	801a      	strh	r2, [r3, #0]
				if(DataTraverser >= DataLength)
 80119c6:	4bb8      	ldr	r3, [pc, #736]	; (8011ca8 <readCanToStructs+0x20b8>)
 80119c8:	881a      	ldrh	r2, [r3, #0]
 80119ca:	4bb6      	ldr	r3, [pc, #728]	; (8011ca4 <readCanToStructs+0x20b4>)
 80119cc:	881b      	ldrh	r3, [r3, #0]
 80119ce:	429a      	cmp	r2, r3
 80119d0:	f0c0 80fa 	bcc.w	8011bc8 <readCanToStructs+0x1fd8>
					printf("EI2 Relay Info Received\n");
 80119d4:	48b5      	ldr	r0, [pc, #724]	; (8011cac <readCanToStructs+0x20bc>)
 80119d6:	f010 fd05 	bl	80223e4 <puts>
					memcpy(&Siemens_OtherRelays_st,&TempSiemensRx_OtherRelays_st,sizeof(TempSiemensRx_OtherRelays_st));
 80119da:	4ab5      	ldr	r2, [pc, #724]	; (8011cb0 <readCanToStructs+0x20c0>)
 80119dc:	4bb0      	ldr	r3, [pc, #704]	; (8011ca0 <readCanToStructs+0x20b0>)
 80119de:	4610      	mov	r0, r2
 80119e0:	4619      	mov	r1, r3
 80119e2:	f44f 7301 	mov.w	r3, #516	; 0x204
 80119e6:	461a      	mov	r2, r3
 80119e8:	f010 fb50 	bl	802208c <memcpy>
					DataTraverser = 0;
 80119ec:	4bae      	ldr	r3, [pc, #696]	; (8011ca8 <readCanToStructs+0x20b8>)
 80119ee:	2200      	movs	r2, #0
 80119f0:	801a      	strh	r2, [r3, #0]
					DataLength = 0;
 80119f2:	4bac      	ldr	r3, [pc, #688]	; (8011ca4 <readCanToStructs+0x20b4>)
 80119f4:	2200      	movs	r2, #0
 80119f6:	801a      	strh	r2, [r3, #0]
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 80119f8:	4bae      	ldr	r3, [pc, #696]	; (8011cb4 <readCanToStructs+0x20c4>)
 80119fa:	2201      	movs	r2, #1
 80119fc:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 80119fe:	f003 fc4b 	bl	8015298 <HAL_GetTick>
 8011a02:	4603      	mov	r3, r0
 8011a04:	4aab      	ldr	r2, [pc, #684]	; (8011cb4 <readCanToStructs+0x20c4>)
 8011a06:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8011a08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a0c:	4aa3      	ldr	r2, [pc, #652]	; (8011c9c <readCanToStructs+0x20ac>)
 8011a0e:	f240 4112 	movw	r1, #1042	; 0x412
 8011a12:	fb01 f303 	mul.w	r3, r1, r3
 8011a16:	4413      	add	r3, r2
 8011a18:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8011a1c:	2200      	movs	r2, #0
 8011a1e:	701a      	strb	r2, [r3, #0]
				break;
 8011a20:	e0d2      	b.n	8011bc8 <readCanToStructs+0x1fd8>
				uc_pp_charPtr = (uint8_t *)&Siemens_fault_injection_st;
 8011a22:	4ba5      	ldr	r3, [pc, #660]	; (8011cb8 <readCanToStructs+0x20c8>)
 8011a24:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011a26:	4ba5      	ldr	r3, [pc, #660]	; (8011cbc <readCanToStructs+0x20cc>)
 8011a28:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011a2c:	885b      	ldrh	r3, [r3, #2]
 8011a2e:	4aa3      	ldr	r2, [pc, #652]	; (8011cbc <readCanToStructs+0x20cc>)
 8011a30:	011b      	lsls	r3, r3, #4
 8011a32:	4413      	add	r3, r2
 8011a34:	3304      	adds	r3, #4
 8011a36:	781b      	ldrb	r3, [r3, #0]
 8011a38:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011a3c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011a40:	2b00      	cmp	r3, #0
 8011a42:	d110      	bne.n	8011a66 <readCanToStructs+0x1e76>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011a44:	2208      	movs	r2, #8
 8011a46:	2100      	movs	r1, #0
 8011a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a4a:	f010 fb47 	bl	80220dc <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011a4e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a52:	4a92      	ldr	r2, [pc, #584]	; (8011c9c <readCanToStructs+0x20ac>)
 8011a54:	f240 4112 	movw	r1, #1042	; 0x412
 8011a58:	fb01 f303 	mul.w	r3, r1, r3
 8011a5c:	4413      	add	r3, r2
 8011a5e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011a62:	2200      	movs	r2, #0
 8011a64:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8011a66:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a6a:	4a8c      	ldr	r2, [pc, #560]	; (8011c9c <readCanToStructs+0x20ac>)
 8011a6c:	f240 4112 	movw	r1, #1042	; 0x412
 8011a70:	fb01 f303 	mul.w	r3, r1, r3
 8011a74:	4413      	add	r3, r2
 8011a76:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011a7a:	781b      	ldrb	r3, [r3, #0]
 8011a7c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011a80:	429a      	cmp	r2, r3
 8011a82:	d014      	beq.n	8011aae <readCanToStructs+0x1ebe>
					printf("FAULT_INJECTION Seq no MisMatch\n");
 8011a84:	488e      	ldr	r0, [pc, #568]	; (8011cc0 <readCanToStructs+0x20d0>)
 8011a86:	f010 fcad 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(SIEMENS_FAULT_INJECTION_t));
 8011a8a:	2208      	movs	r2, #8
 8011a8c:	2100      	movs	r1, #0
 8011a8e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011a90:	f010 fb24 	bl	80220dc <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011a94:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011a98:	4a80      	ldr	r2, [pc, #512]	; (8011c9c <readCanToStructs+0x20ac>)
 8011a9a:	f240 4112 	movw	r1, #1042	; 0x412
 8011a9e:	fb01 f303 	mul.w	r3, r1, r3
 8011aa2:	4413      	add	r3, r2
 8011aa4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011aa8:	2200      	movs	r2, #0
 8011aaa:	701a      	strb	r2, [r3, #0]
					break;
 8011aac:	e08d      	b.n	8011bca <readCanToStructs+0x1fda>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011aae:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ab2:	4613      	mov	r3, r2
 8011ab4:	00db      	lsls	r3, r3, #3
 8011ab6:	1a9b      	subs	r3, r3, r2
 8011ab8:	461a      	mov	r2, r3
 8011aba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011abc:	4413      	add	r3, r2
 8011abe:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011ac0:	2301      	movs	r3, #1
 8011ac2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011ac6:	e016      	b.n	8011af6 <readCanToStructs+0x1f06>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011ac8:	4b7c      	ldr	r3, [pc, #496]	; (8011cbc <readCanToStructs+0x20cc>)
 8011aca:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ace:	885b      	ldrh	r3, [r3, #2]
 8011ad0:	461a      	mov	r2, r3
 8011ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011ad6:	4979      	ldr	r1, [pc, #484]	; (8011cbc <readCanToStructs+0x20cc>)
 8011ad8:	0112      	lsls	r2, r2, #4
 8011ada:	440a      	add	r2, r1
 8011adc:	4413      	add	r3, r2
 8011ade:	3304      	adds	r3, #4
 8011ae0:	781a      	ldrb	r2, [r3, #0]
 8011ae2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011ae8:	3301      	adds	r3, #1
 8011aea:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011aec:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011af0:	3301      	adds	r3, #1
 8011af2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011af6:	4b71      	ldr	r3, [pc, #452]	; (8011cbc <readCanToStructs+0x20cc>)
 8011af8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011afc:	885b      	ldrh	r3, [r3, #2]
 8011afe:	4a6f      	ldr	r2, [pc, #444]	; (8011cbc <readCanToStructs+0x20cc>)
 8011b00:	011b      	lsls	r3, r3, #4
 8011b02:	4413      	add	r3, r2
 8011b04:	330c      	adds	r3, #12
 8011b06:	781b      	ldrb	r3, [r3, #0]
 8011b08:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d3db      	bcc.n	8011ac8 <readCanToStructs+0x1ed8>
				if((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(SIEMENS_FAULT_INJECTION_t))
 8011b10:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b14:	4a61      	ldr	r2, [pc, #388]	; (8011c9c <readCanToStructs+0x20ac>)
 8011b16:	f240 4112 	movw	r1, #1042	; 0x412
 8011b1a:	fb01 f303 	mul.w	r3, r1, r3
 8011b1e:	4413      	add	r3, r2
 8011b20:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011b24:	781b      	ldrb	r3, [r3, #0]
 8011b26:	461a      	mov	r2, r3
 8011b28:	4613      	mov	r3, r2
 8011b2a:	00db      	lsls	r3, r3, #3
 8011b2c:	1a9a      	subs	r2, r3, r2
 8011b2e:	4b63      	ldr	r3, [pc, #396]	; (8011cbc <readCanToStructs+0x20cc>)
 8011b30:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011b34:	885b      	ldrh	r3, [r3, #2]
 8011b36:	4961      	ldr	r1, [pc, #388]	; (8011cbc <readCanToStructs+0x20cc>)
 8011b38:	011b      	lsls	r3, r3, #4
 8011b3a:	440b      	add	r3, r1
 8011b3c:	330c      	adds	r3, #12
 8011b3e:	781b      	ldrb	r3, [r3, #0]
 8011b40:	3b01      	subs	r3, #1
 8011b42:	4413      	add	r3, r2
 8011b44:	2b07      	cmp	r3, #7
 8011b46:	d917      	bls.n	8011b78 <readCanToStructs+0x1f88>
					printf("Received Fault Injection Data\n");
 8011b48:	485e      	ldr	r0, [pc, #376]	; (8011cc4 <readCanToStructs+0x20d4>)
 8011b4a:	f010 fc4b 	bl	80223e4 <puts>
					SiemensClocks_st.SiemensCanXchangeHappening = YES;
 8011b4e:	4b59      	ldr	r3, [pc, #356]	; (8011cb4 <readCanToStructs+0x20c4>)
 8011b50:	2201      	movs	r2, #1
 8011b52:	705a      	strb	r2, [r3, #1]
					SiemensClocks_st.SiemensRCV_SELF_XCHG_CLK = HAL_GetTick();
 8011b54:	f003 fba0 	bl	8015298 <HAL_GetTick>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	4a56      	ldr	r2, [pc, #344]	; (8011cb4 <readCanToStructs+0x20c4>)
 8011b5c:	6193      	str	r3, [r2, #24]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8011b5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b62:	4a4e      	ldr	r2, [pc, #312]	; (8011c9c <readCanToStructs+0x20ac>)
 8011b64:	f240 4112 	movw	r1, #1042	; 0x412
 8011b68:	fb01 f303 	mul.w	r3, r1, r3
 8011b6c:	4413      	add	r3, r2
 8011b6e:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011b72:	2200      	movs	r2, #0
 8011b74:	701a      	strb	r2, [r3, #0]
				break;
 8011b76:	e028      	b.n	8011bca <readCanToStructs+0x1fda>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 8011b78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b7c:	4a47      	ldr	r2, [pc, #284]	; (8011c9c <readCanToStructs+0x20ac>)
 8011b7e:	f240 4112 	movw	r1, #1042	; 0x412
 8011b82:	fb01 f303 	mul.w	r3, r1, r3
 8011b86:	4413      	add	r3, r2
 8011b88:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8011b8c:	2201      	movs	r2, #1
 8011b8e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8011b90:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011b94:	4941      	ldr	r1, [pc, #260]	; (8011c9c <readCanToStructs+0x20ac>)
 8011b96:	f240 4212 	movw	r2, #1042	; 0x412
 8011b9a:	fb03 f202 	mul.w	r2, r3, r2
 8011b9e:	440a      	add	r2, r1
 8011ba0:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8011ba4:	7812      	ldrb	r2, [r2, #0]
 8011ba6:	3201      	adds	r2, #1
 8011ba8:	b2d0      	uxtb	r0, r2
 8011baa:	4a3c      	ldr	r2, [pc, #240]	; (8011c9c <readCanToStructs+0x20ac>)
 8011bac:	f240 4112 	movw	r1, #1042	; 0x412
 8011bb0:	fb01 f303 	mul.w	r3, r1, r3
 8011bb4:	4413      	add	r3, r2
 8011bb6:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8011bba:	4602      	mov	r2, r0
 8011bbc:	701a      	strb	r2, [r3, #0]
				break;
 8011bbe:	e004      	b.n	8011bca <readCanToStructs+0x1fda>
				break;
 8011bc0:	bf00      	nop
 8011bc2:	e002      	b.n	8011bca <readCanToStructs+0x1fda>
				break;
 8011bc4:	bf00      	nop
 8011bc6:	e000      	b.n	8011bca <readCanToStructs+0x1fda>
				break;
 8011bc8:	bf00      	nop
			memset(&canRead.CAN_msg[canRead.Out],0,sizeof(CAN_msg));
 8011bca:	4b3c      	ldr	r3, [pc, #240]	; (8011cbc <readCanToStructs+0x20cc>)
 8011bcc:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bd0:	885b      	ldrh	r3, [r3, #2]
 8011bd2:	011b      	lsls	r3, r3, #4
 8011bd4:	4a39      	ldr	r2, [pc, #228]	; (8011cbc <readCanToStructs+0x20cc>)
 8011bd6:	4413      	add	r3, r2
 8011bd8:	2210      	movs	r2, #16
 8011bda:	2100      	movs	r1, #0
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f010 fa7d 	bl	80220dc <memset>
			canRead.Out++;
 8011be2:	4b36      	ldr	r3, [pc, #216]	; (8011cbc <readCanToStructs+0x20cc>)
 8011be4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011be8:	885b      	ldrh	r3, [r3, #2]
 8011bea:	3301      	adds	r3, #1
 8011bec:	b29a      	uxth	r2, r3
 8011bee:	4b33      	ldr	r3, [pc, #204]	; (8011cbc <readCanToStructs+0x20cc>)
 8011bf0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bf4:	805a      	strh	r2, [r3, #2]
			if(CANBUFFSIZE == canRead.Out)
 8011bf6:	4b31      	ldr	r3, [pc, #196]	; (8011cbc <readCanToStructs+0x20cc>)
 8011bf8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011bfc:	885b      	ldrh	r3, [r3, #2]
 8011bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011c02:	d104      	bne.n	8011c0e <readCanToStructs+0x201e>
				canRead.Out = 0;
 8011c04:	4b2d      	ldr	r3, [pc, #180]	; (8011cbc <readCanToStructs+0x20cc>)
 8011c06:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c0a:	2200      	movs	r2, #0
 8011c0c:	805a      	strh	r2, [r3, #2]
		while(canDataReady())
 8011c0e:	f7fd ff99 	bl	800fb44 <canDataReady>
 8011c12:	4603      	mov	r3, r0
 8011c14:	2b00      	cmp	r3, #0
 8011c16:	f47f a949 	bne.w	8010eac <readCanToStructs+0x12bc>
	break;
 8011c1a:	f000 be46 	b.w	80128aa <readCanToStructs+0x2cba>
			uc_index = canRead.CAN_msg[canRead.Out].canPort-1;
 8011c1e:	4b27      	ldr	r3, [pc, #156]	; (8011cbc <readCanToStructs+0x20cc>)
 8011c20:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c24:	885b      	ldrh	r3, [r3, #2]
 8011c26:	4a25      	ldr	r2, [pc, #148]	; (8011cbc <readCanToStructs+0x20cc>)
 8011c28:	011b      	lsls	r3, r3, #4
 8011c2a:	4413      	add	r3, r2
 8011c2c:	330f      	adds	r3, #15
 8011c2e:	781b      	ldrb	r3, [r3, #0]
 8011c30:	3b01      	subs	r3, #1
 8011c32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			switch(canRead.CAN_msg[canRead.Out].StdId)
 8011c36:	4b21      	ldr	r3, [pc, #132]	; (8011cbc <readCanToStructs+0x20cc>)
 8011c38:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011c3c:	885b      	ldrh	r3, [r3, #2]
 8011c3e:	4a1f      	ldr	r2, [pc, #124]	; (8011cbc <readCanToStructs+0x20cc>)
 8011c40:	011b      	lsls	r3, r3, #4
 8011c42:	4413      	add	r3, r2
 8011c44:	681b      	ldr	r3, [r3, #0]
 8011c46:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8011c4a:	f200 8624 	bhi.w	8012896 <readCanToStructs+0x2ca6>
 8011c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c52:	d80a      	bhi.n	8011c6a <readCanToStructs+0x207a>
 8011c54:	f240 1203 	movw	r2, #259	; 0x103
 8011c58:	4293      	cmp	r3, r2
 8011c5a:	d035      	beq.n	8011cc8 <readCanToStructs+0x20d8>
 8011c5c:	f240 1209 	movw	r2, #265	; 0x109
 8011c60:	4293      	cmp	r3, r2
 8011c62:	f000 8107 	beq.w	8011e74 <readCanToStructs+0x2284>
 8011c66:	f000 be16 	b.w	8012896 <readCanToStructs+0x2ca6>
 8011c6a:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8011c6e:	2b07      	cmp	r3, #7
 8011c70:	f200 8611 	bhi.w	8012896 <readCanToStructs+0x2ca6>
 8011c74:	a201      	add	r2, pc, #4	; (adr r2, 8011c7c <readCanToStructs+0x208c>)
 8011c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c7a:	bf00      	nop
 8011c7c:	08012047 	.word	0x08012047
 8011c80:	080121f1 	.word	0x080121f1
 8011c84:	08012897 	.word	0x08012897
 8011c88:	08012897 	.word	0x08012897
 8011c8c:	080123bd 	.word	0x080123bd
 8011c90:	08012897 	.word	0x08012897
 8011c94:	08012545 	.word	0x08012545
 8011c98:	08012703 	.word	0x08012703
 8011c9c:	20005230 	.word	0x20005230
 8011ca0:	20003aac 	.word	0x20003aac
 8011ca4:	20009bae 	.word	0x20009bae
 8011ca8:	20009bac 	.word	0x20009bac
 8011cac:	08026964 	.word	0x08026964
 8011cb0:	200038a8 	.word	0x200038a8
 8011cb4:	20003484 	.word	0x20003484
 8011cb8:	20003470 	.word	0x20003470
 8011cbc:	20005a54 	.word	0x20005a54
 8011cc0:	08026838 	.word	0x08026838
 8011cc4:	08026858 	.word	0x08026858
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011cc8:	4bc3      	ldr	r3, [pc, #780]	; (8011fd8 <readCanToStructs+0x23e8>)
 8011cca:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011ccc:	4bc3      	ldr	r3, [pc, #780]	; (8011fdc <readCanToStructs+0x23ec>)
 8011cce:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011cd2:	885b      	ldrh	r3, [r3, #2]
 8011cd4:	4ac1      	ldr	r2, [pc, #772]	; (8011fdc <readCanToStructs+0x23ec>)
 8011cd6:	011b      	lsls	r3, r3, #4
 8011cd8:	4413      	add	r3, r2
 8011cda:	3304      	adds	r3, #4
 8011cdc:	781b      	ldrb	r3, [r3, #0]
 8011cde:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011ce2:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011ce6:	2b00      	cmp	r3, #0
 8011ce8:	d110      	bne.n	8011d0c <readCanToStructs+0x211c>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011cea:	2206      	movs	r2, #6
 8011cec:	2100      	movs	r1, #0
 8011cee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011cf0:	f010 f9f4 	bl	80220dc <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011cf4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011cf8:	4ab9      	ldr	r2, [pc, #740]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011cfa:	f240 4112 	movw	r1, #1042	; 0x412
 8011cfe:	fb01 f303 	mul.w	r3, r1, r3
 8011d02:	4413      	add	r3, r2
 8011d04:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d08:	2200      	movs	r2, #0
 8011d0a:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS_TIME_PKT].expSeqNo)
 8011d0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d10:	4ab3      	ldr	r2, [pc, #716]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011d12:	f240 4112 	movw	r1, #1042	; 0x412
 8011d16:	fb01 f303 	mul.w	r3, r1, r3
 8011d1a:	4413      	add	r3, r2
 8011d1c:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d20:	781b      	ldrb	r3, [r3, #0]
 8011d22:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d26:	429a      	cmp	r2, r3
 8011d28:	d015      	beq.n	8011d56 <readCanToStructs+0x2166>
					printf("GPS Packet Seq no MisMatch\n");
 8011d2a:	48ae      	ldr	r0, [pc, #696]	; (8011fe4 <readCanToStructs+0x23f4>)
 8011d2c:	f010 fb5a 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011d30:	2206      	movs	r2, #6
 8011d32:	2100      	movs	r1, #0
 8011d34:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011d36:	f010 f9d1 	bl	80220dc <memset>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011d3a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011d3e:	4aa8      	ldr	r2, [pc, #672]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011d40:	f240 4112 	movw	r1, #1042	; 0x412
 8011d44:	fb01 f303 	mul.w	r3, r1, r3
 8011d48:	4413      	add	r3, r2
 8011d4a:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011d4e:	2200      	movs	r2, #0
 8011d50:	701a      	strb	r2, [r3, #0]
					break;
 8011d52:	f000 bda0 	b.w	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011d56:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011d5a:	4613      	mov	r3, r2
 8011d5c:	00db      	lsls	r3, r3, #3
 8011d5e:	1a9b      	subs	r3, r3, r2
 8011d60:	461a      	mov	r2, r3
 8011d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d64:	4413      	add	r3, r2
 8011d66:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d68:	2301      	movs	r3, #1
 8011d6a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d6e:	e016      	b.n	8011d9e <readCanToStructs+0x21ae>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011d70:	4b9a      	ldr	r3, [pc, #616]	; (8011fdc <readCanToStructs+0x23ec>)
 8011d72:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011d76:	885b      	ldrh	r3, [r3, #2]
 8011d78:	461a      	mov	r2, r3
 8011d7a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d7e:	4997      	ldr	r1, [pc, #604]	; (8011fdc <readCanToStructs+0x23ec>)
 8011d80:	0112      	lsls	r2, r2, #4
 8011d82:	440a      	add	r2, r1
 8011d84:	4413      	add	r3, r2
 8011d86:	3304      	adds	r3, #4
 8011d88:	781a      	ldrb	r2, [r3, #0]
 8011d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d8c:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011d90:	3301      	adds	r3, #1
 8011d92:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011d94:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011d98:	3301      	adds	r3, #1
 8011d9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011d9e:	4b8f      	ldr	r3, [pc, #572]	; (8011fdc <readCanToStructs+0x23ec>)
 8011da0:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011da4:	885b      	ldrh	r3, [r3, #2]
 8011da6:	4a8d      	ldr	r2, [pc, #564]	; (8011fdc <readCanToStructs+0x23ec>)
 8011da8:	011b      	lsls	r3, r3, #4
 8011daa:	4413      	add	r3, r2
 8011dac:	330c      	adds	r3, #12
 8011dae:	781b      	ldrb	r3, [r3, #0]
 8011db0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011db4:	429a      	cmp	r2, r3
 8011db6:	d3db      	bcc.n	8011d70 <readCanToStructs+0x2180>
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011db8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011dbc:	4a88      	ldr	r2, [pc, #544]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011dbe:	f240 4112 	movw	r1, #1042	; 0x412
 8011dc2:	fb01 f303 	mul.w	r3, r1, r3
 8011dc6:	4413      	add	r3, r2
 8011dc8:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011dcc:	781b      	ldrb	r3, [r3, #0]
 8011dce:	461a      	mov	r2, r3
 8011dd0:	4613      	mov	r3, r2
 8011dd2:	00db      	lsls	r3, r3, #3
 8011dd4:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011dd6:	4b81      	ldr	r3, [pc, #516]	; (8011fdc <readCanToStructs+0x23ec>)
 8011dd8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011ddc:	885b      	ldrh	r3, [r3, #2]
 8011dde:	497f      	ldr	r1, [pc, #508]	; (8011fdc <readCanToStructs+0x23ec>)
 8011de0:	011b      	lsls	r3, r3, #4
 8011de2:	440b      	add	r3, r1
 8011de4:	330c      	adds	r3, #12
 8011de6:	781b      	ldrb	r3, [r3, #0]
 8011de8:	3b01      	subs	r3, #1
 8011dea:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS_TIME_PKT].expSeqNo) * 7)
 8011dec:	2b05      	cmp	r3, #5
 8011dee:	d91c      	bls.n	8011e2a <readCanToStructs+0x223a>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011df0:	4b7d      	ldr	r3, [pc, #500]	; (8011fe8 <readCanToStructs+0x23f8>)
 8011df2:	4a79      	ldr	r2, [pc, #484]	; (8011fd8 <readCanToStructs+0x23e8>)
 8011df4:	6811      	ldr	r1, [r2, #0]
 8011df6:	6019      	str	r1, [r3, #0]
 8011df8:	8892      	ldrh	r2, [r2, #4]
 8011dfa:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011dfc:	4b7b      	ldr	r3, [pc, #492]	; (8011fec <readCanToStructs+0x23fc>)
 8011dfe:	781b      	ldrb	r3, [r3, #0]
 8011e00:	2b01      	cmp	r3, #1
 8011e02:	d102      	bne.n	8011e0a <readCanToStructs+0x221a>
						printf("GPS_PACKET_RECEIVED\n");
 8011e04:	487a      	ldr	r0, [pc, #488]	; (8011ff0 <readCanToStructs+0x2400>)
 8011e06:	f010 faed 	bl	80223e4 <puts>
					Write_RTC();
 8011e0a:	f7f9 f817 	bl	800ae3c <Write_RTC>
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo = 0;
 8011e0e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e12:	4a73      	ldr	r2, [pc, #460]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011e14:	f240 4112 	movw	r1, #1042	; 0x412
 8011e18:	fb01 f303 	mul.w	r3, r1, r3
 8011e1c:	4413      	add	r3, r2
 8011e1e:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011e22:	2200      	movs	r2, #0
 8011e24:	701a      	strb	r2, [r3, #0]
 8011e26:	f000 bd36 	b.w	8012896 <readCanToStructs+0x2ca6>
					canStatus[uc_index][GPS_TIME_PKT].invalid = 1;
 8011e2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e2e:	4a6c      	ldr	r2, [pc, #432]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011e30:	f240 4112 	movw	r1, #1042	; 0x412
 8011e34:	fb01 f303 	mul.w	r3, r1, r3
 8011e38:	4413      	add	r3, r2
 8011e3a:	f203 2306 	addw	r3, r3, #518	; 0x206
 8011e3e:	2201      	movs	r2, #1
 8011e40:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS_TIME_PKT].expSeqNo++;
 8011e42:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011e46:	4966      	ldr	r1, [pc, #408]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011e48:	f240 4212 	movw	r2, #1042	; 0x412
 8011e4c:	fb03 f202 	mul.w	r2, r3, r2
 8011e50:	440a      	add	r2, r1
 8011e52:	f202 2207 	addw	r2, r2, #519	; 0x207
 8011e56:	7812      	ldrb	r2, [r2, #0]
 8011e58:	3201      	adds	r2, #1
 8011e5a:	b2d0      	uxtb	r0, r2
 8011e5c:	4a60      	ldr	r2, [pc, #384]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011e5e:	f240 4112 	movw	r1, #1042	; 0x412
 8011e62:	fb01 f303 	mul.w	r3, r1, r3
 8011e66:	4413      	add	r3, r2
 8011e68:	f203 2307 	addw	r3, r3, #519	; 0x207
 8011e6c:	4602      	mov	r2, r0
 8011e6e:	701a      	strb	r2, [r3, #0]
				break;
 8011e70:	f000 bd11 	b.w	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Temp_Gps_date_time_st;
 8011e74:	4b58      	ldr	r3, [pc, #352]	; (8011fd8 <readCanToStructs+0x23e8>)
 8011e76:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8011e78:	4b58      	ldr	r3, [pc, #352]	; (8011fdc <readCanToStructs+0x23ec>)
 8011e7a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011e7e:	885b      	ldrh	r3, [r3, #2]
 8011e80:	4a56      	ldr	r2, [pc, #344]	; (8011fdc <readCanToStructs+0x23ec>)
 8011e82:	011b      	lsls	r3, r3, #4
 8011e84:	4413      	add	r3, r2
 8011e86:	3304      	adds	r3, #4
 8011e88:	781b      	ldrb	r3, [r3, #0]
 8011e8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if(uc_seqNo==0)
 8011e8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	d110      	bne.n	8011eb8 <readCanToStructs+0x22c8>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011e96:	2206      	movs	r2, #6
 8011e98:	2100      	movs	r1, #0
 8011e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011e9c:	f010 f91e 	bl	80220dc <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011ea0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ea4:	4a4e      	ldr	r2, [pc, #312]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011ea6:	f240 4112 	movw	r1, #1042	; 0x412
 8011eaa:	fb01 f303 	mul.w	r3, r1, r3
 8011eae:	4413      	add	r3, r2
 8011eb0:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011eb4:	2200      	movs	r2, #0
 8011eb6:	701a      	strb	r2, [r3, #0]
				if(uc_seqNo != canStatus[uc_index][GPS2_TIME_PKT].expSeqNo)
 8011eb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011ebc:	4a48      	ldr	r2, [pc, #288]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011ebe:	f240 4112 	movw	r1, #1042	; 0x412
 8011ec2:	fb01 f303 	mul.w	r3, r1, r3
 8011ec6:	4413      	add	r3, r2
 8011ec8:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011ecc:	781b      	ldrb	r3, [r3, #0]
 8011ece:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011ed2:	429a      	cmp	r2, r3
 8011ed4:	d015      	beq.n	8011f02 <readCanToStructs+0x2312>
					printf("GPS2 Packet Seq no MisMatch\n");
 8011ed6:	4847      	ldr	r0, [pc, #284]	; (8011ff4 <readCanToStructs+0x2404>)
 8011ed8:	f010 fa84 	bl	80223e4 <puts>
					memset(uc_pp_charPtr,0,sizeof(GPS_DATE_TIME_t));
 8011edc:	2206      	movs	r2, #6
 8011ede:	2100      	movs	r1, #0
 8011ee0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011ee2:	f010 f8fb 	bl	80220dc <memset>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011ee6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011eea:	4a3d      	ldr	r2, [pc, #244]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011eec:	f240 4112 	movw	r1, #1042	; 0x412
 8011ef0:	fb01 f303 	mul.w	r3, r1, r3
 8011ef4:	4413      	add	r3, r2
 8011ef6:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011efa:	2200      	movs	r2, #0
 8011efc:	701a      	strb	r2, [r3, #0]
					break;
 8011efe:	f000 bcca 	b.w	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8011f02:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8011f06:	4613      	mov	r3, r2
 8011f08:	00db      	lsls	r3, r3, #3
 8011f0a:	1a9b      	subs	r3, r3, r2
 8011f0c:	461a      	mov	r2, r3
 8011f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f10:	4413      	add	r3, r2
 8011f12:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f14:	2301      	movs	r3, #1
 8011f16:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f1a:	e016      	b.n	8011f4a <readCanToStructs+0x235a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 8011f1c:	4b2f      	ldr	r3, [pc, #188]	; (8011fdc <readCanToStructs+0x23ec>)
 8011f1e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f22:	885b      	ldrh	r3, [r3, #2]
 8011f24:	461a      	mov	r2, r3
 8011f26:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f2a:	492c      	ldr	r1, [pc, #176]	; (8011fdc <readCanToStructs+0x23ec>)
 8011f2c:	0112      	lsls	r2, r2, #4
 8011f2e:	440a      	add	r2, r1
 8011f30:	4413      	add	r3, r2
 8011f32:	3304      	adds	r3, #4
 8011f34:	781a      	ldrb	r2, [r3, #0]
 8011f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f38:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 8011f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f3c:	3301      	adds	r3, #1
 8011f3e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8011f40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011f44:	3301      	adds	r3, #1
 8011f46:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8011f4a:	4b24      	ldr	r3, [pc, #144]	; (8011fdc <readCanToStructs+0x23ec>)
 8011f4c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f50:	885b      	ldrh	r3, [r3, #2]
 8011f52:	4a22      	ldr	r2, [pc, #136]	; (8011fdc <readCanToStructs+0x23ec>)
 8011f54:	011b      	lsls	r3, r3, #4
 8011f56:	4413      	add	r3, r2
 8011f58:	330c      	adds	r3, #12
 8011f5a:	781b      	ldrb	r3, [r3, #0]
 8011f5c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8011f60:	429a      	cmp	r2, r3
 8011f62:	d3db      	bcc.n	8011f1c <readCanToStructs+0x232c>
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011f64:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011f68:	4a1d      	ldr	r2, [pc, #116]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011f6a:	f240 4112 	movw	r1, #1042	; 0x412
 8011f6e:	fb01 f303 	mul.w	r3, r1, r3
 8011f72:	4413      	add	r3, r2
 8011f74:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	461a      	mov	r2, r3
 8011f7c:	4613      	mov	r3, r2
 8011f7e:	00db      	lsls	r3, r3, #3
 8011f80:	1a9a      	subs	r2, r3, r2
						+ (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(GPS_DATE_TIME_t))
 8011f82:	4b16      	ldr	r3, [pc, #88]	; (8011fdc <readCanToStructs+0x23ec>)
 8011f84:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8011f88:	885b      	ldrh	r3, [r3, #2]
 8011f8a:	4914      	ldr	r1, [pc, #80]	; (8011fdc <readCanToStructs+0x23ec>)
 8011f8c:	011b      	lsls	r3, r3, #4
 8011f8e:	440b      	add	r3, r1
 8011f90:	330c      	adds	r3, #12
 8011f92:	781b      	ldrb	r3, [r3, #0]
 8011f94:	3b01      	subs	r3, #1
 8011f96:	4413      	add	r3, r2
				if((((canStatus[uc_index][GPS2_TIME_PKT].expSeqNo) * 7)
 8011f98:	2b05      	cmp	r3, #5
 8011f9a:	d92f      	bls.n	8011ffc <readCanToStructs+0x240c>
					memcpy(&Gps_date_time_st,&Temp_Gps_date_time_st,sizeof(GPS_DATE_TIME_t));
 8011f9c:	4b12      	ldr	r3, [pc, #72]	; (8011fe8 <readCanToStructs+0x23f8>)
 8011f9e:	4a0e      	ldr	r2, [pc, #56]	; (8011fd8 <readCanToStructs+0x23e8>)
 8011fa0:	6811      	ldr	r1, [r2, #0]
 8011fa2:	6019      	str	r1, [r3, #0]
 8011fa4:	8892      	ldrh	r2, [r2, #4]
 8011fa6:	809a      	strh	r2, [r3, #4]
					if(Debug_flag == 1)
 8011fa8:	4b10      	ldr	r3, [pc, #64]	; (8011fec <readCanToStructs+0x23fc>)
 8011faa:	781b      	ldrb	r3, [r3, #0]
 8011fac:	2b01      	cmp	r3, #1
 8011fae:	d102      	bne.n	8011fb6 <readCanToStructs+0x23c6>
						printf("GPS2_PACKET_RECEIVED\n");
 8011fb0:	4811      	ldr	r0, [pc, #68]	; (8011ff8 <readCanToStructs+0x2408>)
 8011fb2:	f010 fa17 	bl	80223e4 <puts>
					Write_RTC();
 8011fb6:	f7f8 ff41 	bl	800ae3c <Write_RTC>
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo = 0;
 8011fba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fbe:	4a08      	ldr	r2, [pc, #32]	; (8011fe0 <readCanToStructs+0x23f0>)
 8011fc0:	f240 4112 	movw	r1, #1042	; 0x412
 8011fc4:	fb01 f303 	mul.w	r3, r1, r3
 8011fc8:	4413      	add	r3, r2
 8011fca:	f203 2313 	addw	r3, r3, #531	; 0x213
 8011fce:	2200      	movs	r2, #0
 8011fd0:	701a      	strb	r2, [r3, #0]
 8011fd2:	f000 bc60 	b.w	8012896 <readCanToStructs+0x2ca6>
 8011fd6:	bf00      	nop
 8011fd8:	200027d8 	.word	0x200027d8
 8011fdc:	20005a54 	.word	0x20005a54
 8011fe0:	20005230 	.word	0x20005230
 8011fe4:	08026704 	.word	0x08026704
 8011fe8:	200027d0 	.word	0x200027d0
 8011fec:	20000645 	.word	0x20000645
 8011ff0:	08026720 	.word	0x08026720
 8011ff4:	08026734 	.word	0x08026734
 8011ff8:	08026750 	.word	0x08026750
					canStatus[uc_index][GPS2_TIME_PKT].invalid = 1;
 8011ffc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012000:	4aa5      	ldr	r2, [pc, #660]	; (8012298 <readCanToStructs+0x26a8>)
 8012002:	f240 4112 	movw	r1, #1042	; 0x412
 8012006:	fb01 f303 	mul.w	r3, r1, r3
 801200a:	4413      	add	r3, r2
 801200c:	f203 2312 	addw	r3, r3, #530	; 0x212
 8012010:	2201      	movs	r2, #1
 8012012:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][GPS2_TIME_PKT].expSeqNo++;
 8012014:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012018:	499f      	ldr	r1, [pc, #636]	; (8012298 <readCanToStructs+0x26a8>)
 801201a:	f240 4212 	movw	r2, #1042	; 0x412
 801201e:	fb03 f202 	mul.w	r2, r3, r2
 8012022:	440a      	add	r2, r1
 8012024:	f202 2213 	addw	r2, r2, #531	; 0x213
 8012028:	7812      	ldrb	r2, [r2, #0]
 801202a:	3201      	adds	r2, #1
 801202c:	b2d0      	uxtb	r0, r2
 801202e:	4a9a      	ldr	r2, [pc, #616]	; (8012298 <readCanToStructs+0x26a8>)
 8012030:	f240 4112 	movw	r1, #1042	; 0x412
 8012034:	fb01 f303 	mul.w	r3, r1, r3
 8012038:	4413      	add	r3, r2
 801203a:	f203 2313 	addw	r3, r3, #531	; 0x213
 801203e:	4602      	mov	r2, r0
 8012040:	701a      	strb	r2, [r3, #0]
				break;
 8012042:	f000 bc28 	b.w	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 8012046:	4b95      	ldr	r3, [pc, #596]	; (801229c <readCanToStructs+0x26ac>)
 8012048:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 801204a:	4b95      	ldr	r3, [pc, #596]	; (80122a0 <readCanToStructs+0x26b0>)
 801204c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012050:	885b      	ldrh	r3, [r3, #2]
 8012052:	4a93      	ldr	r2, [pc, #588]	; (80122a0 <readCanToStructs+0x26b0>)
 8012054:	011b      	lsls	r3, r3, #4
 8012056:	4413      	add	r3, r2
 8012058:	3304      	adds	r3, #4
 801205a:	781b      	ldrb	r3, [r3, #0]
 801205c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 8012060:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012064:	2b00      	cmp	r3, #0
 8012066:	d110      	bne.n	801208a <readCanToStructs+0x249a>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012068:	2208      	movs	r2, #8
 801206a:	2100      	movs	r1, #0
 801206c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801206e:	f010 f835 	bl	80220dc <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 8012072:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012076:	4a88      	ldr	r2, [pc, #544]	; (8012298 <readCanToStructs+0x26a8>)
 8012078:	f240 4112 	movw	r1, #1042	; 0x412
 801207c:	fb01 f303 	mul.w	r3, r1, r3
 8012080:	4413      	add	r3, r2
 8012082:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012086:	2200      	movs	r2, #0
 8012088:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo)
 801208a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801208e:	4a82      	ldr	r2, [pc, #520]	; (8012298 <readCanToStructs+0x26a8>)
 8012090:	f240 4112 	movw	r1, #1042	; 0x412
 8012094:	fb01 f303 	mul.w	r3, r1, r3
 8012098:	4413      	add	r3, r2
 801209a:	f203 4303 	addw	r3, r3, #1027	; 0x403
 801209e:	781b      	ldrb	r3, [r3, #0]
 80120a0:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120a4:	429a      	cmp	r2, r3
 80120a6:	d014      	beq.n	80120d2 <readCanToStructs+0x24e2>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 80120a8:	487e      	ldr	r0, [pc, #504]	; (80122a4 <readCanToStructs+0x26b4>)
 80120aa:	f010 f99b 	bl	80223e4 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 80120ae:	2208      	movs	r2, #8
 80120b0:	2100      	movs	r1, #0
 80120b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80120b4:	f010 f812 	bl	80220dc <memset>
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 80120b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80120bc:	4a76      	ldr	r2, [pc, #472]	; (8012298 <readCanToStructs+0x26a8>)
 80120be:	f240 4112 	movw	r1, #1042	; 0x412
 80120c2:	fb01 f303 	mul.w	r3, r1, r3
 80120c6:	4413      	add	r3, r2
 80120c8:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80120cc:	2200      	movs	r2, #0
 80120ce:	701a      	strb	r2, [r3, #0]
					break;
 80120d0:	e3e1      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 80120d2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80120d6:	4613      	mov	r3, r2
 80120d8:	00db      	lsls	r3, r3, #3
 80120da:	1a9b      	subs	r3, r3, r2
 80120dc:	461a      	mov	r2, r3
 80120de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120e0:	4413      	add	r3, r2
 80120e2:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80120e4:	2301      	movs	r3, #1
 80120e6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80120ea:	e016      	b.n	801211a <readCanToStructs+0x252a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80120ec:	4b6c      	ldr	r3, [pc, #432]	; (80122a0 <readCanToStructs+0x26b0>)
 80120ee:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80120f2:	885b      	ldrh	r3, [r3, #2]
 80120f4:	461a      	mov	r2, r3
 80120f6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80120fa:	4969      	ldr	r1, [pc, #420]	; (80122a0 <readCanToStructs+0x26b0>)
 80120fc:	0112      	lsls	r2, r2, #4
 80120fe:	440a      	add	r2, r1
 8012100:	4413      	add	r3, r2
 8012102:	3304      	adds	r3, #4
 8012104:	781a      	ldrb	r2, [r3, #0]
 8012106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012108:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801210c:	3301      	adds	r3, #1
 801210e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012110:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012114:	3301      	adds	r3, #1
 8012116:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801211a:	4b61      	ldr	r3, [pc, #388]	; (80122a0 <readCanToStructs+0x26b0>)
 801211c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012120:	885b      	ldrh	r3, [r3, #2]
 8012122:	4a5f      	ldr	r2, [pc, #380]	; (80122a0 <readCanToStructs+0x26b0>)
 8012124:	011b      	lsls	r3, r3, #4
 8012126:	4413      	add	r3, r2
 8012128:	330c      	adds	r3, #12
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012130:	429a      	cmp	r2, r3
 8012132:	d3db      	bcc.n	80120ec <readCanToStructs+0x24fc>
				if ((((canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012134:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012138:	4a57      	ldr	r2, [pc, #348]	; (8012298 <readCanToStructs+0x26a8>)
 801213a:	f240 4112 	movw	r1, #1042	; 0x412
 801213e:	fb01 f303 	mul.w	r3, r1, r3
 8012142:	4413      	add	r3, r2
 8012144:	f203 4303 	addw	r3, r3, #1027	; 0x403
 8012148:	781b      	ldrb	r3, [r3, #0]
 801214a:	461a      	mov	r2, r3
 801214c:	4613      	mov	r3, r2
 801214e:	00db      	lsls	r3, r3, #3
 8012150:	1a9a      	subs	r2, r3, r2
 8012152:	4b53      	ldr	r3, [pc, #332]	; (80122a0 <readCanToStructs+0x26b0>)
 8012154:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012158:	885b      	ldrh	r3, [r3, #2]
 801215a:	4951      	ldr	r1, [pc, #324]	; (80122a0 <readCanToStructs+0x26b0>)
 801215c:	011b      	lsls	r3, r3, #4
 801215e:	440b      	add	r3, r1
 8012160:	330c      	adds	r3, #12
 8012162:	781b      	ldrb	r3, [r3, #0]
 8012164:	3b01      	subs	r3, #1
 8012166:	4413      	add	r3, r2
 8012168:	2b07      	cmp	r3, #7
 801216a:	d91d      	bls.n	80121a8 <readCanToStructs+0x25b8>
					printf("\nRCV OTH_INFO1\n");
 801216c:	484e      	ldr	r0, [pc, #312]	; (80122a8 <readCanToStructs+0x26b8>)
 801216e:	f010 f939 	bl	80223e4 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012172:	4b4e      	ldr	r3, [pc, #312]	; (80122ac <readCanToStructs+0x26bc>)
 8012174:	4a49      	ldr	r2, [pc, #292]	; (801229c <readCanToStructs+0x26ac>)
 8012176:	e892 0003 	ldmia.w	r2, {r0, r1}
 801217a:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 801217e:	4b4c      	ldr	r3, [pc, #304]	; (80122b0 <readCanToStructs+0x26c0>)
 8012180:	2201      	movs	r2, #1
 8012182:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012184:	f003 f888 	bl	8015298 <HAL_GetTick>
 8012188:	4603      	mov	r3, r0
 801218a:	4a4a      	ldr	r2, [pc, #296]	; (80122b4 <readCanToStructs+0x26c4>)
 801218c:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo = 0;
 801218e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012192:	4a41      	ldr	r2, [pc, #260]	; (8012298 <readCanToStructs+0x26a8>)
 8012194:	f240 4112 	movw	r1, #1042	; 0x412
 8012198:	fb01 f303 	mul.w	r3, r1, r3
 801219c:	4413      	add	r3, r2
 801219e:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80121a2:	2200      	movs	r2, #0
 80121a4:	701a      	strb	r2, [r3, #0]
 80121a6:	e376      	b.n	8012896 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_1_SELF_SHARING].invalid = 1;
 80121a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121ac:	4a3a      	ldr	r2, [pc, #232]	; (8012298 <readCanToStructs+0x26a8>)
 80121ae:	f240 4112 	movw	r1, #1042	; 0x412
 80121b2:	fb01 f303 	mul.w	r3, r1, r3
 80121b6:	4413      	add	r3, r2
 80121b8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80121bc:	2201      	movs	r2, #1
 80121be:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_1_SELF_SHARING].expSeqNo++;
 80121c0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80121c4:	4934      	ldr	r1, [pc, #208]	; (8012298 <readCanToStructs+0x26a8>)
 80121c6:	f240 4212 	movw	r2, #1042	; 0x412
 80121ca:	fb03 f202 	mul.w	r2, r3, r2
 80121ce:	440a      	add	r2, r1
 80121d0:	f202 4203 	addw	r2, r2, #1027	; 0x403
 80121d4:	7812      	ldrb	r2, [r2, #0]
 80121d6:	3201      	adds	r2, #1
 80121d8:	b2d0      	uxtb	r0, r2
 80121da:	4a2f      	ldr	r2, [pc, #188]	; (8012298 <readCanToStructs+0x26a8>)
 80121dc:	f240 4112 	movw	r1, #1042	; 0x412
 80121e0:	fb01 f303 	mul.w	r3, r1, r3
 80121e4:	4413      	add	r3, r2
 80121e6:	f203 4303 	addw	r3, r3, #1027	; 0x403
 80121ea:	4602      	mov	r2, r0
 80121ec:	701a      	strb	r2, [r3, #0]
				break;
 80121ee:	e352      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_ei_self_sharing_Temp_st;
 80121f0:	4b2a      	ldr	r3, [pc, #168]	; (801229c <readCanToStructs+0x26ac>)
 80121f2:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80121f4:	4b2a      	ldr	r3, [pc, #168]	; (80122a0 <readCanToStructs+0x26b0>)
 80121f6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80121fa:	885b      	ldrh	r3, [r3, #2]
 80121fc:	4a28      	ldr	r2, [pc, #160]	; (80122a0 <readCanToStructs+0x26b0>)
 80121fe:	011b      	lsls	r3, r3, #4
 8012200:	4413      	add	r3, r2
 8012202:	3304      	adds	r3, #4
 8012204:	781b      	ldrb	r3, [r3, #0]
 8012206:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801220a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801220e:	2b00      	cmp	r3, #0
 8012210:	d110      	bne.n	8012234 <readCanToStructs+0x2644>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012212:	2208      	movs	r2, #8
 8012214:	2100      	movs	r1, #0
 8012216:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012218:	f00f ff60 	bl	80220dc <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801221c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012220:	4a1d      	ldr	r2, [pc, #116]	; (8012298 <readCanToStructs+0x26a8>)
 8012222:	f240 4112 	movw	r1, #1042	; 0x412
 8012226:	fb01 f303 	mul.w	r3, r1, r3
 801222a:	4413      	add	r3, r2
 801222c:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012230:	2200      	movs	r2, #0
 8012232:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo)
 8012234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012238:	4a17      	ldr	r2, [pc, #92]	; (8012298 <readCanToStructs+0x26a8>)
 801223a:	f240 4112 	movw	r1, #1042	; 0x412
 801223e:	fb01 f303 	mul.w	r3, r1, r3
 8012242:	4413      	add	r3, r2
 8012244:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012248:	781b      	ldrb	r3, [r3, #0]
 801224a:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801224e:	429a      	cmp	r2, r3
 8012250:	d014      	beq.n	801227c <readCanToStructs+0x268c>
					printf("Seq No Mismatch for EI_1_SELF_SHARING\n");
 8012252:	4814      	ldr	r0, [pc, #80]	; (80122a4 <readCanToStructs+0x26b4>)
 8012254:	f010 f8c6 	bl	80223e4 <puts>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_EI_SELF_SHARING_t));
 8012258:	2208      	movs	r2, #8
 801225a:	2100      	movs	r1, #0
 801225c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801225e:	f00f ff3d 	bl	80220dc <memset>
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 8012262:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012266:	4a0c      	ldr	r2, [pc, #48]	; (8012298 <readCanToStructs+0x26a8>)
 8012268:	f240 4112 	movw	r1, #1042	; 0x412
 801226c:	fb01 f303 	mul.w	r3, r1, r3
 8012270:	4413      	add	r3, r2
 8012272:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012276:	2200      	movs	r2, #0
 8012278:	701a      	strb	r2, [r3, #0]
					break;
 801227a:	e30c      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 801227c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012280:	4613      	mov	r3, r2
 8012282:	00db      	lsls	r3, r3, #3
 8012284:	1a9b      	subs	r3, r3, r2
 8012286:	461a      	mov	r2, r3
 8012288:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801228a:	4413      	add	r3, r2
 801228c:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801228e:	2301      	movs	r3, #1
 8012290:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8012294:	e027      	b.n	80122e6 <readCanToStructs+0x26f6>
 8012296:	bf00      	nop
 8012298:	20005230 	.word	0x20005230
 801229c:	20002618 	.word	0x20002618
 80122a0:	20005a54 	.word	0x20005a54
 80122a4:	0802697c 	.word	0x0802697c
 80122a8:	080269a4 	.word	0x080269a4
 80122ac:	20002610 	.word	0x20002610
 80122b0:	200020b0 	.word	0x200020b0
 80122b4:	200020b4 	.word	0x200020b4
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80122b8:	4bc4      	ldr	r3, [pc, #784]	; (80125cc <readCanToStructs+0x29dc>)
 80122ba:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122be:	885b      	ldrh	r3, [r3, #2]
 80122c0:	461a      	mov	r2, r3
 80122c2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122c6:	49c1      	ldr	r1, [pc, #772]	; (80125cc <readCanToStructs+0x29dc>)
 80122c8:	0112      	lsls	r2, r2, #4
 80122ca:	440a      	add	r2, r1
 80122cc:	4413      	add	r3, r2
 80122ce:	3304      	adds	r3, #4
 80122d0:	781a      	ldrb	r2, [r3, #0]
 80122d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d4:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80122d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80122d8:	3301      	adds	r3, #1
 80122da:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80122dc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80122e0:	3301      	adds	r3, #1
 80122e2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80122e6:	4bb9      	ldr	r3, [pc, #740]	; (80125cc <readCanToStructs+0x29dc>)
 80122e8:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80122ec:	885b      	ldrh	r3, [r3, #2]
 80122ee:	4ab7      	ldr	r2, [pc, #732]	; (80125cc <readCanToStructs+0x29dc>)
 80122f0:	011b      	lsls	r3, r3, #4
 80122f2:	4413      	add	r3, r2
 80122f4:	330c      	adds	r3, #12
 80122f6:	781b      	ldrb	r3, [r3, #0]
 80122f8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80122fc:	429a      	cmp	r2, r3
 80122fe:	d3db      	bcc.n	80122b8 <readCanToStructs+0x26c8>
				if ((((canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_EI_SELF_SHARING_t))
 8012300:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012304:	4ab2      	ldr	r2, [pc, #712]	; (80125d0 <readCanToStructs+0x29e0>)
 8012306:	f240 4112 	movw	r1, #1042	; 0x412
 801230a:	fb01 f303 	mul.w	r3, r1, r3
 801230e:	4413      	add	r3, r2
 8012310:	f203 4305 	addw	r3, r3, #1029	; 0x405
 8012314:	781b      	ldrb	r3, [r3, #0]
 8012316:	461a      	mov	r2, r3
 8012318:	4613      	mov	r3, r2
 801231a:	00db      	lsls	r3, r3, #3
 801231c:	1a9a      	subs	r2, r3, r2
 801231e:	4bab      	ldr	r3, [pc, #684]	; (80125cc <readCanToStructs+0x29dc>)
 8012320:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012324:	885b      	ldrh	r3, [r3, #2]
 8012326:	49a9      	ldr	r1, [pc, #676]	; (80125cc <readCanToStructs+0x29dc>)
 8012328:	011b      	lsls	r3, r3, #4
 801232a:	440b      	add	r3, r1
 801232c:	330c      	adds	r3, #12
 801232e:	781b      	ldrb	r3, [r3, #0]
 8012330:	3b01      	subs	r3, #1
 8012332:	4413      	add	r3, r2
 8012334:	2b07      	cmp	r3, #7
 8012336:	d91d      	bls.n	8012374 <readCanToStructs+0x2784>
					printf("\nRCV OTH_INFO2\n");
 8012338:	48a6      	ldr	r0, [pc, #664]	; (80125d4 <readCanToStructs+0x29e4>)
 801233a:	f010 f853 	bl	80223e4 <puts>
					memcpy(&Medha_ei_self_sharing_RX_st, &Medha_ei_self_sharing_Temp_st, sizeof(MEDHA_EI_SELF_SHARING_t));
 801233e:	4ba6      	ldr	r3, [pc, #664]	; (80125d8 <readCanToStructs+0x29e8>)
 8012340:	4aa6      	ldr	r2, [pc, #664]	; (80125dc <readCanToStructs+0x29ec>)
 8012342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012346:	e883 0003 	stmia.w	r3, {r0, r1}
					Medha_CAN_Xchanging_Happening = YES;
 801234a:	4ba5      	ldr	r3, [pc, #660]	; (80125e0 <readCanToStructs+0x29f0>)
 801234c:	2201      	movs	r2, #1
 801234e:	701a      	strb	r2, [r3, #0]
					Last_Received_Medha_Self_sharing = HAL_GetTick();
 8012350:	f002 ffa2 	bl	8015298 <HAL_GetTick>
 8012354:	4603      	mov	r3, r0
 8012356:	4aa3      	ldr	r2, [pc, #652]	; (80125e4 <readCanToStructs+0x29f4>)
 8012358:	6013      	str	r3, [r2, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo = 0;
 801235a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801235e:	4a9c      	ldr	r2, [pc, #624]	; (80125d0 <readCanToStructs+0x29e0>)
 8012360:	f240 4112 	movw	r1, #1042	; 0x412
 8012364:	fb01 f303 	mul.w	r3, r1, r3
 8012368:	4413      	add	r3, r2
 801236a:	f203 4305 	addw	r3, r3, #1029	; 0x405
 801236e:	2200      	movs	r2, #0
 8012370:	701a      	strb	r2, [r3, #0]
 8012372:	e290      	b.n	8012896 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EI_2_SELF_SHARING].invalid = 1;
 8012374:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012378:	4a95      	ldr	r2, [pc, #596]	; (80125d0 <readCanToStructs+0x29e0>)
 801237a:	f240 4112 	movw	r1, #1042	; 0x412
 801237e:	fb01 f303 	mul.w	r3, r1, r3
 8012382:	4413      	add	r3, r2
 8012384:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8012388:	2201      	movs	r2, #1
 801238a:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EI_2_SELF_SHARING].expSeqNo++;
 801238c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012390:	498f      	ldr	r1, [pc, #572]	; (80125d0 <readCanToStructs+0x29e0>)
 8012392:	f240 4212 	movw	r2, #1042	; 0x412
 8012396:	fb03 f202 	mul.w	r2, r3, r2
 801239a:	440a      	add	r2, r1
 801239c:	f202 4205 	addw	r2, r2, #1029	; 0x405
 80123a0:	7812      	ldrb	r2, [r2, #0]
 80123a2:	3201      	adds	r2, #1
 80123a4:	b2d0      	uxtb	r0, r2
 80123a6:	4a8a      	ldr	r2, [pc, #552]	; (80125d0 <readCanToStructs+0x29e0>)
 80123a8:	f240 4112 	movw	r1, #1042	; 0x412
 80123ac:	fb01 f303 	mul.w	r3, r1, r3
 80123b0:	4413      	add	r3, r2
 80123b2:	f203 4305 	addw	r3, r3, #1029	; 0x405
 80123b6:	4602      	mov	r2, r0
 80123b8:	701a      	strb	r2, [r3, #0]
				break;
 80123ba:	e26c      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_Fault_Injection_st;
 80123bc:	4b8a      	ldr	r3, [pc, #552]	; (80125e8 <readCanToStructs+0x29f8>)
 80123be:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 80123c0:	4b82      	ldr	r3, [pc, #520]	; (80125cc <readCanToStructs+0x29dc>)
 80123c2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80123c6:	885b      	ldrh	r3, [r3, #2]
 80123c8:	4a80      	ldr	r2, [pc, #512]	; (80125cc <readCanToStructs+0x29dc>)
 80123ca:	011b      	lsls	r3, r3, #4
 80123cc:	4413      	add	r3, r2
 80123ce:	3304      	adds	r3, #4
 80123d0:	781b      	ldrb	r3, [r3, #0]
 80123d2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 80123d6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80123da:	2b00      	cmp	r3, #0
 80123dc:	d110      	bne.n	8012400 <readCanToStructs+0x2810>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 80123de:	2204      	movs	r2, #4
 80123e0:	2100      	movs	r1, #0
 80123e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80123e4:	f00f fe7a 	bl	80220dc <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80123e8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80123ec:	4a78      	ldr	r2, [pc, #480]	; (80125d0 <readCanToStructs+0x29e0>)
 80123ee:	f240 4112 	movw	r1, #1042	; 0x412
 80123f2:	fb01 f303 	mul.w	r3, r1, r3
 80123f6:	4413      	add	r3, r2
 80123f8:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80123fc:	2200      	movs	r2, #0
 80123fe:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo)
 8012400:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012404:	4a72      	ldr	r2, [pc, #456]	; (80125d0 <readCanToStructs+0x29e0>)
 8012406:	f240 4112 	movw	r1, #1042	; 0x412
 801240a:	fb01 f303 	mul.w	r3, r1, r3
 801240e:	4413      	add	r3, r2
 8012410:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801241a:	429a      	cmp	r2, r3
 801241c:	d011      	beq.n	8012442 <readCanToStructs+0x2852>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_FAULT_INJECTION_t));
 801241e:	2204      	movs	r2, #4
 8012420:	2100      	movs	r1, #0
 8012422:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012424:	f00f fe5a 	bl	80220dc <memset>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 8012428:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801242c:	4a68      	ldr	r2, [pc, #416]	; (80125d0 <readCanToStructs+0x29e0>)
 801242e:	f240 4112 	movw	r1, #1042	; 0x412
 8012432:	fb01 f303 	mul.w	r3, r1, r3
 8012436:	4413      	add	r3, r2
 8012438:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801243c:	2200      	movs	r2, #0
 801243e:	701a      	strb	r2, [r3, #0]
					break;
 8012440:	e229      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012442:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012446:	4613      	mov	r3, r2
 8012448:	00db      	lsls	r3, r3, #3
 801244a:	1a9b      	subs	r3, r3, r2
 801244c:	461a      	mov	r2, r3
 801244e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012450:	4413      	add	r3, r2
 8012452:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012454:	2301      	movs	r3, #1
 8012456:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801245a:	e016      	b.n	801248a <readCanToStructs+0x289a>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801245c:	4b5b      	ldr	r3, [pc, #364]	; (80125cc <readCanToStructs+0x29dc>)
 801245e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012462:	885b      	ldrh	r3, [r3, #2]
 8012464:	461a      	mov	r2, r3
 8012466:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801246a:	4958      	ldr	r1, [pc, #352]	; (80125cc <readCanToStructs+0x29dc>)
 801246c:	0112      	lsls	r2, r2, #4
 801246e:	440a      	add	r2, r1
 8012470:	4413      	add	r3, r2
 8012472:	3304      	adds	r3, #4
 8012474:	781a      	ldrb	r2, [r3, #0]
 8012476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012478:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801247a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801247c:	3301      	adds	r3, #1
 801247e:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012480:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012484:	3301      	adds	r3, #1
 8012486:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801248a:	4b50      	ldr	r3, [pc, #320]	; (80125cc <readCanToStructs+0x29dc>)
 801248c:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012490:	885b      	ldrh	r3, [r3, #2]
 8012492:	4a4e      	ldr	r2, [pc, #312]	; (80125cc <readCanToStructs+0x29dc>)
 8012494:	011b      	lsls	r3, r3, #4
 8012496:	4413      	add	r3, r2
 8012498:	330c      	adds	r3, #12
 801249a:	781b      	ldrb	r3, [r3, #0]
 801249c:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80124a0:	429a      	cmp	r2, r3
 80124a2:	d3db      	bcc.n	801245c <readCanToStructs+0x286c>
				if ((((canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_FAULT_INJECTION_t))
 80124a4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124a8:	4a49      	ldr	r2, [pc, #292]	; (80125d0 <readCanToStructs+0x29e0>)
 80124aa:	f240 4112 	movw	r1, #1042	; 0x412
 80124ae:	fb01 f303 	mul.w	r3, r1, r3
 80124b2:	4413      	add	r3, r2
 80124b4:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80124b8:	781b      	ldrb	r3, [r3, #0]
 80124ba:	461a      	mov	r2, r3
 80124bc:	4613      	mov	r3, r2
 80124be:	00db      	lsls	r3, r3, #3
 80124c0:	1a9a      	subs	r2, r3, r2
 80124c2:	4b42      	ldr	r3, [pc, #264]	; (80125cc <readCanToStructs+0x29dc>)
 80124c4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80124c8:	885b      	ldrh	r3, [r3, #2]
 80124ca:	4940      	ldr	r1, [pc, #256]	; (80125cc <readCanToStructs+0x29dc>)
 80124cc:	011b      	lsls	r3, r3, #4
 80124ce:	440b      	add	r3, r1
 80124d0:	330c      	adds	r3, #12
 80124d2:	781b      	ldrb	r3, [r3, #0]
 80124d4:	3b01      	subs	r3, #1
 80124d6:	4413      	add	r3, r2
 80124d8:	2b03      	cmp	r3, #3
 80124da:	d90f      	bls.n	80124fc <readCanToStructs+0x290c>
					printf("Received CAN_FAULT_INJECTION\n");
 80124dc:	4843      	ldr	r0, [pc, #268]	; (80125ec <readCanToStructs+0x29fc>)
 80124de:	f00f ff81 	bl	80223e4 <puts>
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo = 0;
 80124e2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80124e6:	4a3a      	ldr	r2, [pc, #232]	; (80125d0 <readCanToStructs+0x29e0>)
 80124e8:	f240 4112 	movw	r1, #1042	; 0x412
 80124ec:	fb01 f303 	mul.w	r3, r1, r3
 80124f0:	4413      	add	r3, r2
 80124f2:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 80124f6:	2200      	movs	r2, #0
 80124f8:	701a      	strb	r2, [r3, #0]
 80124fa:	e1cc      	b.n	8012896 <readCanToStructs+0x2ca6>
					canStatus[uc_index][CAN_FAULT_INJECTION].invalid = 1;
 80124fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012500:	4a33      	ldr	r2, [pc, #204]	; (80125d0 <readCanToStructs+0x29e0>)
 8012502:	f240 4112 	movw	r1, #1042	; 0x412
 8012506:	fb01 f303 	mul.w	r3, r1, r3
 801250a:	4413      	add	r3, r2
 801250c:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8012510:	2201      	movs	r2, #1
 8012512:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][CAN_FAULT_INJECTION].expSeqNo++;
 8012514:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012518:	492d      	ldr	r1, [pc, #180]	; (80125d0 <readCanToStructs+0x29e0>)
 801251a:	f240 4212 	movw	r2, #1042	; 0x412
 801251e:	fb03 f202 	mul.w	r2, r3, r2
 8012522:	440a      	add	r2, r1
 8012524:	f202 420b 	addw	r2, r2, #1035	; 0x40b
 8012528:	7812      	ldrb	r2, [r2, #0]
 801252a:	3201      	adds	r2, #1
 801252c:	b2d0      	uxtb	r0, r2
 801252e:	4a28      	ldr	r2, [pc, #160]	; (80125d0 <readCanToStructs+0x29e0>)
 8012530:	f240 4112 	movw	r1, #1042	; 0x412
 8012534:	fb01 f303 	mul.w	r3, r1, r3
 8012538:	4413      	add	r3, r2
 801253a:	f203 430b 	addw	r3, r3, #1035	; 0x40b
 801253e:	4602      	mov	r2, r0
 8012540:	701a      	strb	r2, [r3, #0]
				break;
 8012542:	e1a8      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012544:	4b2a      	ldr	r3, [pc, #168]	; (80125f0 <readCanToStructs+0x2a00>)
 8012546:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012548:	4b20      	ldr	r3, [pc, #128]	; (80125cc <readCanToStructs+0x29dc>)
 801254a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801254e:	885b      	ldrh	r3, [r3, #2]
 8012550:	4a1e      	ldr	r2, [pc, #120]	; (80125cc <readCanToStructs+0x29dc>)
 8012552:	011b      	lsls	r3, r3, #4
 8012554:	4413      	add	r3, r2
 8012556:	3304      	adds	r3, #4
 8012558:	781b      	ldrb	r3, [r3, #0]
 801255a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801255e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012562:	2b00      	cmp	r3, #0
 8012564:	d110      	bne.n	8012588 <readCanToStructs+0x2998>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012566:	2284      	movs	r2, #132	; 0x84
 8012568:	2100      	movs	r1, #0
 801256a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801256c:	f00f fdb6 	bl	80220dc <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 8012570:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012574:	4a16      	ldr	r2, [pc, #88]	; (80125d0 <readCanToStructs+0x29e0>)
 8012576:	f240 4112 	movw	r1, #1042	; 0x412
 801257a:	fb01 f303 	mul.w	r3, r1, r3
 801257e:	4413      	add	r3, r2
 8012580:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 8012584:	2200      	movs	r2, #0
 8012586:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo)
 8012588:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801258c:	4a10      	ldr	r2, [pc, #64]	; (80125d0 <readCanToStructs+0x29e0>)
 801258e:	f240 4112 	movw	r1, #1042	; 0x412
 8012592:	fb01 f303 	mul.w	r3, r1, r3
 8012596:	4413      	add	r3, r2
 8012598:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801259c:	781b      	ldrb	r3, [r3, #0]
 801259e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125a2:	429a      	cmp	r2, r3
 80125a4:	d026      	beq.n	80125f4 <readCanToStructs+0x2a04>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 80125a6:	2284      	movs	r2, #132	; 0x84
 80125a8:	2100      	movs	r1, #0
 80125aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80125ac:	f00f fd96 	bl	80220dc <memset>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80125b0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80125b4:	4a06      	ldr	r2, [pc, #24]	; (80125d0 <readCanToStructs+0x29e0>)
 80125b6:	f240 4112 	movw	r1, #1042	; 0x412
 80125ba:	fb01 f303 	mul.w	r3, r1, r3
 80125be:	4413      	add	r3, r2
 80125c0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80125c4:	2200      	movs	r2, #0
 80125c6:	701a      	strb	r2, [r3, #0]
					break;
 80125c8:	e165      	b.n	8012896 <readCanToStructs+0x2ca6>
 80125ca:	bf00      	nop
 80125cc:	20005a54 	.word	0x20005a54
 80125d0:	20005230 	.word	0x20005230
 80125d4:	080269b4 	.word	0x080269b4
 80125d8:	20002610 	.word	0x20002610
 80125dc:	20002618 	.word	0x20002618
 80125e0:	200020b0 	.word	0x200020b0
 80125e4:	200020b4 	.word	0x200020b4
 80125e8:	20002604 	.word	0x20002604
 80125ec:	080269c4 	.word	0x080269c4
 80125f0:	200026a4 	.word	0x200026a4
				uc_pp_charPtr += (7 * uc_seqNo);
 80125f4:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80125f8:	4613      	mov	r3, r2
 80125fa:	00db      	lsls	r3, r3, #3
 80125fc:	1a9b      	subs	r3, r3, r2
 80125fe:	461a      	mov	r2, r3
 8012600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012602:	4413      	add	r3, r2
 8012604:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012606:	2301      	movs	r3, #1
 8012608:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801260c:	e016      	b.n	801263c <readCanToStructs+0x2a4c>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 801260e:	4ba8      	ldr	r3, [pc, #672]	; (80128b0 <readCanToStructs+0x2cc0>)
 8012610:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012614:	885b      	ldrh	r3, [r3, #2]
 8012616:	461a      	mov	r2, r3
 8012618:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801261c:	49a4      	ldr	r1, [pc, #656]	; (80128b0 <readCanToStructs+0x2cc0>)
 801261e:	0112      	lsls	r2, r2, #4
 8012620:	440a      	add	r2, r1
 8012622:	4413      	add	r3, r2
 8012624:	3304      	adds	r3, #4
 8012626:	781a      	ldrb	r2, [r3, #0]
 8012628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262a:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 801262c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801262e:	3301      	adds	r3, #1
 8012630:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 8012632:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8012636:	3301      	adds	r3, #1
 8012638:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 801263c:	4b9c      	ldr	r3, [pc, #624]	; (80128b0 <readCanToStructs+0x2cc0>)
 801263e:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 8012642:	885b      	ldrh	r3, [r3, #2]
 8012644:	4a9a      	ldr	r2, [pc, #616]	; (80128b0 <readCanToStructs+0x2cc0>)
 8012646:	011b      	lsls	r3, r3, #4
 8012648:	4413      	add	r3, r2
 801264a:	330c      	adds	r3, #12
 801264c:	781b      	ldrb	r3, [r3, #0]
 801264e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8012652:	429a      	cmp	r2, r3
 8012654:	d3db      	bcc.n	801260e <readCanToStructs+0x2a1e>
				if ((((canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 8012656:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801265a:	4a96      	ldr	r2, [pc, #600]	; (80128b4 <readCanToStructs+0x2cc4>)
 801265c:	f240 4112 	movw	r1, #1042	; 0x412
 8012660:	fb01 f303 	mul.w	r3, r1, r3
 8012664:	4413      	add	r3, r2
 8012666:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 801266a:	781b      	ldrb	r3, [r3, #0]
 801266c:	461a      	mov	r2, r3
 801266e:	4613      	mov	r3, r2
 8012670:	00db      	lsls	r3, r3, #3
 8012672:	1a9a      	subs	r2, r3, r2
 8012674:	4b8e      	ldr	r3, [pc, #568]	; (80128b0 <readCanToStructs+0x2cc0>)
 8012676:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801267a:	885b      	ldrh	r3, [r3, #2]
 801267c:	498c      	ldr	r1, [pc, #560]	; (80128b0 <readCanToStructs+0x2cc0>)
 801267e:	011b      	lsls	r3, r3, #4
 8012680:	440b      	add	r3, r1
 8012682:	330c      	adds	r3, #12
 8012684:	781b      	ldrb	r3, [r3, #0]
 8012686:	3b01      	subs	r3, #1
 8012688:	4413      	add	r3, r2
 801268a:	2b83      	cmp	r3, #131	; 0x83
 801268c:	d915      	bls.n	80126ba <readCanToStructs+0x2aca>
					printf("\nRCV EIPC1_RELAYS_2_OTHER\n");
 801268e:	488a      	ldr	r0, [pc, #552]	; (80128b8 <readCanToStructs+0x2cc8>)
 8012690:	f00f fea8 	bl	80223e4 <puts>
					Received_CAN_Relay_Status = YES;
 8012694:	4b89      	ldr	r3, [pc, #548]	; (80128bc <readCanToStructs+0x2ccc>)
 8012696:	2201      	movs	r2, #1
 8012698:	701a      	strb	r2, [r3, #0]
					Medha_CAN_Xchanging_Happening = YES;
 801269a:	4b89      	ldr	r3, [pc, #548]	; (80128c0 <readCanToStructs+0x2cd0>)
 801269c:	2201      	movs	r2, #1
 801269e:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo = 0;
 80126a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126a4:	4a83      	ldr	r2, [pc, #524]	; (80128b4 <readCanToStructs+0x2cc4>)
 80126a6:	f240 4112 	movw	r1, #1042	; 0x412
 80126aa:	fb01 f303 	mul.w	r3, r1, r3
 80126ae:	4413      	add	r3, r2
 80126b0:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80126b4:	2200      	movs	r2, #0
 80126b6:	701a      	strb	r2, [r3, #0]
 80126b8:	e0ed      	b.n	8012896 <readCanToStructs+0x2ca6>
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].invalid = 1;
 80126ba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126be:	4a7d      	ldr	r2, [pc, #500]	; (80128b4 <readCanToStructs+0x2cc4>)
 80126c0:	f240 4112 	movw	r1, #1042	; 0x412
 80126c4:	fb01 f303 	mul.w	r3, r1, r3
 80126c8:	4413      	add	r3, r2
 80126ca:	f203 430e 	addw	r3, r3, #1038	; 0x40e
 80126ce:	2201      	movs	r2, #1
 80126d0:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC1_RELAYS_2_OTHER].expSeqNo++;
 80126d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80126d6:	4977      	ldr	r1, [pc, #476]	; (80128b4 <readCanToStructs+0x2cc4>)
 80126d8:	f240 4212 	movw	r2, #1042	; 0x412
 80126dc:	fb03 f202 	mul.w	r2, r3, r2
 80126e0:	440a      	add	r2, r1
 80126e2:	f202 420f 	addw	r2, r2, #1039	; 0x40f
 80126e6:	7812      	ldrb	r2, [r2, #0]
 80126e8:	3201      	adds	r2, #1
 80126ea:	b2d0      	uxtb	r0, r2
 80126ec:	4a71      	ldr	r2, [pc, #452]	; (80128b4 <readCanToStructs+0x2cc4>)
 80126ee:	f240 4112 	movw	r1, #1042	; 0x412
 80126f2:	fb01 f303 	mul.w	r3, r1, r3
 80126f6:	4413      	add	r3, r2
 80126f8:	f203 430f 	addw	r3, r3, #1039	; 0x40f
 80126fc:	4602      	mov	r2, r0
 80126fe:	701a      	strb	r2, [r3, #0]
				break;
 8012700:	e0c9      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr = (uint8_t *)&Medha_CAN_Relay_Status_st;
 8012702:	4b70      	ldr	r3, [pc, #448]	; (80128c4 <readCanToStructs+0x2cd4>)
 8012704:	633b      	str	r3, [r7, #48]	; 0x30
				uc_seqNo = canRead.CAN_msg[canRead.Out].data[0];
 8012706:	4b6a      	ldr	r3, [pc, #424]	; (80128b0 <readCanToStructs+0x2cc0>)
 8012708:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801270c:	885b      	ldrh	r3, [r3, #2]
 801270e:	4a68      	ldr	r2, [pc, #416]	; (80128b0 <readCanToStructs+0x2cc0>)
 8012710:	011b      	lsls	r3, r3, #4
 8012712:	4413      	add	r3, r2
 8012714:	3304      	adds	r3, #4
 8012716:	781b      	ldrb	r3, [r3, #0]
 8012718:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				if (uc_seqNo == 0)
 801271c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8012720:	2b00      	cmp	r3, #0
 8012722:	d110      	bne.n	8012746 <readCanToStructs+0x2b56>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012724:	2284      	movs	r2, #132	; 0x84
 8012726:	2100      	movs	r1, #0
 8012728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801272a:	f00f fcd7 	bl	80220dc <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801272e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012732:	4a60      	ldr	r2, [pc, #384]	; (80128b4 <readCanToStructs+0x2cc4>)
 8012734:	f240 4112 	movw	r1, #1042	; 0x412
 8012738:	fb01 f303 	mul.w	r3, r1, r3
 801273c:	4413      	add	r3, r2
 801273e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012742:	2200      	movs	r2, #0
 8012744:	701a      	strb	r2, [r3, #0]
				if (uc_seqNo != canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo)
 8012746:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801274a:	4a5a      	ldr	r2, [pc, #360]	; (80128b4 <readCanToStructs+0x2cc4>)
 801274c:	f240 4112 	movw	r1, #1042	; 0x412
 8012750:	fb01 f303 	mul.w	r3, r1, r3
 8012754:	4413      	add	r3, r2
 8012756:	f203 4311 	addw	r3, r3, #1041	; 0x411
 801275a:	781b      	ldrb	r3, [r3, #0]
 801275c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8012760:	429a      	cmp	r2, r3
 8012762:	d011      	beq.n	8012788 <readCanToStructs+0x2b98>
					memset(uc_pp_charPtr, 0, sizeof(MEDHA_CUR_RELAY_STS_t));
 8012764:	2284      	movs	r2, #132	; 0x84
 8012766:	2100      	movs	r1, #0
 8012768:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801276a:	f00f fcb7 	bl	80220dc <memset>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 801276e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012772:	4a50      	ldr	r2, [pc, #320]	; (80128b4 <readCanToStructs+0x2cc4>)
 8012774:	f240 4112 	movw	r1, #1042	; 0x412
 8012778:	fb01 f303 	mul.w	r3, r1, r3
 801277c:	4413      	add	r3, r2
 801277e:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012782:	2200      	movs	r2, #0
 8012784:	701a      	strb	r2, [r3, #0]
					break;
 8012786:	e086      	b.n	8012896 <readCanToStructs+0x2ca6>
				uc_pp_charPtr += (7 * uc_seqNo);
 8012788:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 801278c:	4613      	mov	r3, r2
 801278e:	00db      	lsls	r3, r3, #3
 8012790:	1a9b      	subs	r3, r3, r2
 8012792:	461a      	mov	r2, r3
 8012794:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012796:	4413      	add	r3, r2
 8012798:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 801279a:	2301      	movs	r3, #1
 801279c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127a0:	e016      	b.n	80127d0 <readCanToStructs+0x2be0>
					*uc_pp_charPtr = canRead.CAN_msg[canRead.Out].data[uc_Loop_Index];
 80127a2:	4b43      	ldr	r3, [pc, #268]	; (80128b0 <readCanToStructs+0x2cc0>)
 80127a4:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127a8:	885b      	ldrh	r3, [r3, #2]
 80127aa:	461a      	mov	r2, r3
 80127ac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127b0:	493f      	ldr	r1, [pc, #252]	; (80128b0 <readCanToStructs+0x2cc0>)
 80127b2:	0112      	lsls	r2, r2, #4
 80127b4:	440a      	add	r2, r1
 80127b6:	4413      	add	r3, r2
 80127b8:	3304      	adds	r3, #4
 80127ba:	781a      	ldrb	r2, [r3, #0]
 80127bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127be:	701a      	strb	r2, [r3, #0]
					uc_pp_charPtr++;
 80127c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127c2:	3301      	adds	r3, #1
 80127c4:	633b      	str	r3, [r7, #48]	; 0x30
				for (uc_Loop_Index = 1; uc_Loop_Index < canRead.CAN_msg[canRead.Out].Dlc; uc_Loop_Index++)
 80127c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80127ca:	3301      	adds	r3, #1
 80127cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80127d0:	4b37      	ldr	r3, [pc, #220]	; (80128b0 <readCanToStructs+0x2cc0>)
 80127d2:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 80127d6:	885b      	ldrh	r3, [r3, #2]
 80127d8:	4a35      	ldr	r2, [pc, #212]	; (80128b0 <readCanToStructs+0x2cc0>)
 80127da:	011b      	lsls	r3, r3, #4
 80127dc:	4413      	add	r3, r2
 80127de:	330c      	adds	r3, #12
 80127e0:	781b      	ldrb	r3, [r3, #0]
 80127e2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 80127e6:	429a      	cmp	r2, r3
 80127e8:	d3db      	bcc.n	80127a2 <readCanToStructs+0x2bb2>
				if ((((canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo) * 7) + (canRead.CAN_msg[canRead.Out].Dlc - 1)) >= sizeof(MEDHA_CUR_RELAY_STS_t))
 80127ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80127ee:	4a31      	ldr	r2, [pc, #196]	; (80128b4 <readCanToStructs+0x2cc4>)
 80127f0:	f240 4112 	movw	r1, #1042	; 0x412
 80127f4:	fb01 f303 	mul.w	r3, r1, r3
 80127f8:	4413      	add	r3, r2
 80127fa:	f203 4311 	addw	r3, r3, #1041	; 0x411
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	461a      	mov	r2, r3
 8012802:	4613      	mov	r3, r2
 8012804:	00db      	lsls	r3, r3, #3
 8012806:	1a9a      	subs	r2, r3, r2
 8012808:	4b29      	ldr	r3, [pc, #164]	; (80128b0 <readCanToStructs+0x2cc0>)
 801280a:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
 801280e:	885b      	ldrh	r3, [r3, #2]
 8012810:	4927      	ldr	r1, [pc, #156]	; (80128b0 <readCanToStructs+0x2cc0>)
 8012812:	011b      	lsls	r3, r3, #4
 8012814:	440b      	add	r3, r1
 8012816:	330c      	adds	r3, #12
 8012818:	781b      	ldrb	r3, [r3, #0]
 801281a:	3b01      	subs	r3, #1
 801281c:	4413      	add	r3, r2
 801281e:	2b83      	cmp	r3, #131	; 0x83
 8012820:	d915      	bls.n	801284e <readCanToStructs+0x2c5e>
					printf("\nRCV RELAY_DATA_EI2\n");
 8012822:	4829      	ldr	r0, [pc, #164]	; (80128c8 <readCanToStructs+0x2cd8>)
 8012824:	f00f fdde 	bl	80223e4 <puts>
					Medha_CAN_Xchanging_Happening = YES;
 8012828:	4b25      	ldr	r3, [pc, #148]	; (80128c0 <readCanToStructs+0x2cd0>)
 801282a:	2201      	movs	r2, #1
 801282c:	701a      	strb	r2, [r3, #0]
					Received_CAN_Relay_Status = YES;
 801282e:	4b23      	ldr	r3, [pc, #140]	; (80128bc <readCanToStructs+0x2ccc>)
 8012830:	2201      	movs	r2, #1
 8012832:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo = 0;
 8012834:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012838:	4a1e      	ldr	r2, [pc, #120]	; (80128b4 <readCanToStructs+0x2cc4>)
 801283a:	f240 4112 	movw	r1, #1042	; 0x412
 801283e:	fb01 f303 	mul.w	r3, r1, r3
 8012842:	4413      	add	r3, r2
 8012844:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012848:	2200      	movs	r2, #0
 801284a:	701a      	strb	r2, [r3, #0]
 801284c:	e022      	b.n	8012894 <readCanToStructs+0x2ca4>
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].invalid = 1;
 801284e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8012852:	4a18      	ldr	r2, [pc, #96]	; (80128b4 <readCanToStructs+0x2cc4>)
 8012854:	f240 4112 	movw	r1, #1042	; 0x412
 8012858:	fb01 f303 	mul.w	r3, r1, r3
 801285c:	4413      	add	r3, r2
 801285e:	f503 6382 	add.w	r3, r3, #1040	; 0x410
 8012862:	2201      	movs	r2, #1
 8012864:	701a      	strb	r2, [r3, #0]
					canStatus[uc_index][EIPC2_RELAYS_2_OTHER].expSeqNo++;
 8012866:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801286a:	4912      	ldr	r1, [pc, #72]	; (80128b4 <readCanToStructs+0x2cc4>)
 801286c:	f240 4212 	movw	r2, #1042	; 0x412
 8012870:	fb03 f202 	mul.w	r2, r3, r2
 8012874:	440a      	add	r2, r1
 8012876:	f202 4211 	addw	r2, r2, #1041	; 0x411
 801287a:	7812      	ldrb	r2, [r2, #0]
 801287c:	3201      	adds	r2, #1
 801287e:	b2d0      	uxtb	r0, r2
 8012880:	4a0c      	ldr	r2, [pc, #48]	; (80128b4 <readCanToStructs+0x2cc4>)
 8012882:	f240 4112 	movw	r1, #1042	; 0x412
 8012886:	fb01 f303 	mul.w	r3, r1, r3
 801288a:	4413      	add	r3, r2
 801288c:	f203 4311 	addw	r3, r3, #1041	; 0x411
 8012890:	4602      	mov	r2, r0
 8012892:	701a      	strb	r2, [r3, #0]
				break;
 8012894:	bf00      	nop
		while(canDataReady())
 8012896:	f7fd f955 	bl	800fb44 <canDataReady>
 801289a:	4603      	mov	r3, r0
 801289c:	2b00      	cmp	r3, #0
 801289e:	f47f a9be 	bne.w	8011c1e <readCanToStructs+0x202e>
	break;
 80128a2:	e002      	b.n	80128aa <readCanToStructs+0x2cba>
		break;
 80128a4:	bf00      	nop
 80128a6:	e000      	b.n	80128aa <readCanToStructs+0x2cba>
			return;
 80128a8:	bf00      	nop
		/* Protocol Type */
	}
	UNUSED(uc_Loop_Index);
	UNUSED(uc_LocIndex);
}
 80128aa:	3738      	adds	r7, #56	; 0x38
 80128ac:	46bd      	mov	sp, r7
 80128ae:	bd80      	pop	{r7, pc}
 80128b0:	20005a54 	.word	0x20005a54
 80128b4:	20005230 	.word	0x20005230
 80128b8:	080269e4 	.word	0x080269e4
 80128bc:	200020b1 	.word	0x200020b1
 80128c0:	200020b0 	.word	0x200020b0
 80128c4:	200026a4 	.word	0x200026a4
 80128c8:	08026a00 	.word	0x08026a00

080128cc <CheckCRC>:
}

/* USER CODE BEGIN 1 */

short int CheckCRC(unsigned char *pcMsg,short int iCount)
{
 80128cc:	b580      	push	{r7, lr}
 80128ce:	b084      	sub	sp, #16
 80128d0:	af00      	add	r7, sp, #0
 80128d2:	6078      	str	r0, [r7, #4]
 80128d4:	460b      	mov	r3, r1
 80128d6:	807b      	strh	r3, [r7, #2]
	static unsigned short int uiCrc,k = 0;
	short int retVal = 0;
 80128d8:	2300      	movs	r3, #0
 80128da:	81fb      	strh	r3, [r7, #14]
	{
		printf("[%03u]:%02X ",i,pcMsg[i]);
	}
#endif

	uiCrc = GetCRC16( 0, pcMsg,iCount);
 80128dc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80128e0:	461a      	mov	r2, r3
 80128e2:	6879      	ldr	r1, [r7, #4]
 80128e4:	2000      	movs	r0, #0
 80128e6:	f000 f845 	bl	8012974 <GetCRC16>
 80128ea:	4603      	mov	r3, r0
 80128ec:	461a      	mov	r2, r3
 80128ee:	4b1d      	ldr	r3, [pc, #116]	; (8012964 <CheckCRC+0x98>)
 80128f0:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (pcMsg[iCount] & 0xff);
 80128f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80128f6:	687a      	ldr	r2, [r7, #4]
 80128f8:	4413      	add	r3, r2
 80128fa:	781b      	ldrb	r3, [r3, #0]
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	4b1a      	ldr	r3, [pc, #104]	; (8012968 <CheckCRC+0x9c>)
 8012900:	801a      	strh	r2, [r3, #0]
	k = (unsigned short int ) (k<<8);
 8012902:	4b19      	ldr	r3, [pc, #100]	; (8012968 <CheckCRC+0x9c>)
 8012904:	881b      	ldrh	r3, [r3, #0]
 8012906:	021b      	lsls	r3, r3, #8
 8012908:	b29a      	uxth	r2, r3
 801290a:	4b17      	ldr	r3, [pc, #92]	; (8012968 <CheckCRC+0x9c>)
 801290c:	801a      	strh	r2, [r3, #0]
	k |= pcMsg[iCount+1] & 0xff;
 801290e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012912:	3301      	adds	r3, #1
 8012914:	687a      	ldr	r2, [r7, #4]
 8012916:	4413      	add	r3, r2
 8012918:	781b      	ldrb	r3, [r3, #0]
 801291a:	b29a      	uxth	r2, r3
 801291c:	4b12      	ldr	r3, [pc, #72]	; (8012968 <CheckCRC+0x9c>)
 801291e:	881b      	ldrh	r3, [r3, #0]
 8012920:	4313      	orrs	r3, r2
 8012922:	b29a      	uxth	r2, r3
 8012924:	4b10      	ldr	r3, [pc, #64]	; (8012968 <CheckCRC+0x9c>)
 8012926:	801a      	strh	r2, [r3, #0]

	if(k == uiCrc)
 8012928:	4b0f      	ldr	r3, [pc, #60]	; (8012968 <CheckCRC+0x9c>)
 801292a:	881a      	ldrh	r2, [r3, #0]
 801292c:	4b0d      	ldr	r3, [pc, #52]	; (8012964 <CheckCRC+0x98>)
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	429a      	cmp	r2, r3
 8012932:	d105      	bne.n	8012940 <CheckCRC+0x74>
	{
		retVal = 1;
 8012934:	2301      	movs	r3, #1
 8012936:	81fb      	strh	r3, [r7, #14]
		return k;
 8012938:	4b0b      	ldr	r3, [pc, #44]	; (8012968 <CheckCRC+0x9c>)
 801293a:	881b      	ldrh	r3, [r3, #0]
 801293c:	b21b      	sxth	r3, r3
 801293e:	e00d      	b.n	801295c <CheckCRC+0x90>
	}
	printf("\nCalculated CRC:%04x\n",uiCrc);
 8012940:	4b08      	ldr	r3, [pc, #32]	; (8012964 <CheckCRC+0x98>)
 8012942:	881b      	ldrh	r3, [r3, #0]
 8012944:	4619      	mov	r1, r3
 8012946:	4809      	ldr	r0, [pc, #36]	; (801296c <CheckCRC+0xa0>)
 8012948:	f00f fcb0 	bl	80222ac <iprintf>
	printf("\nExtracted CRC :%04x\n",k);
 801294c:	4b06      	ldr	r3, [pc, #24]	; (8012968 <CheckCRC+0x9c>)
 801294e:	881b      	ldrh	r3, [r3, #0]
 8012950:	4619      	mov	r1, r3
 8012952:	4807      	ldr	r0, [pc, #28]	; (8012970 <CheckCRC+0xa4>)
 8012954:	f00f fcaa 	bl	80222ac <iprintf>
	return retVal;
 8012958:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 801295c:	4618      	mov	r0, r3
 801295e:	3710      	adds	r7, #16
 8012960:	46bd      	mov	sp, r7
 8012962:	bd80      	pop	{r7, pc}
 8012964:	20009bb0 	.word	0x20009bb0
 8012968:	20009bb2 	.word	0x20009bb2
 801296c:	08026a14 	.word	0x08026a14
 8012970:	08026a2c 	.word	0x08026a2c

08012974 <GetCRC16>:

unsigned short int GetCRC16 (short int iStart,unsigned char *pcPtr, short int iNum)
{
 8012974:	b480      	push	{r7}
 8012976:	b085      	sub	sp, #20
 8012978:	af00      	add	r7, sp, #0
 801297a:	4603      	mov	r3, r0
 801297c:	6039      	str	r1, [r7, #0]
 801297e:	80fb      	strh	r3, [r7, #6]
 8012980:	4613      	mov	r3, r2
 8012982:	80bb      	strh	r3, [r7, #4]
	unsigned short int uiCrc = (unsigned short int ) iStart;
 8012984:	88fb      	ldrh	r3, [r7, #6]
 8012986:	81fb      	strh	r3, [r7, #14]
	short int r;

	/* while there is more data to process */
	while (iNum-- > 0)
 8012988:	e038      	b.n	80129fc <GetCRC16+0x88>
	{
		/* compute checksum of lower four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 801298a:	89fb      	ldrh	r3, [r7, #14]
 801298c:	f003 030f 	and.w	r3, r3, #15
 8012990:	4a22      	ldr	r2, [pc, #136]	; (8012a1c <GetCRC16+0xa8>)
 8012992:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8012996:	81bb      	strh	r3, [r7, #12]
		uiCrc = (unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 8012998:	89fb      	ldrh	r3, [r7, #14]
 801299a:	091b      	lsrs	r3, r3, #4
 801299c:	81fb      	strh	r3, [r7, #14]
		uiCrc = (unsigned short int) (uiCrc ^ r ^ ulCrc16Table[*pcPtr & 0xF]);
 801299e:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80129a2:	89bb      	ldrh	r3, [r7, #12]
 80129a4:	4053      	eors	r3, r2
 80129a6:	b21a      	sxth	r2, r3
 80129a8:	683b      	ldr	r3, [r7, #0]
 80129aa:	781b      	ldrb	r3, [r3, #0]
 80129ac:	f003 030f 	and.w	r3, r3, #15
 80129b0:	491a      	ldr	r1, [pc, #104]	; (8012a1c <GetCRC16+0xa8>)
 80129b2:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80129b6:	b21b      	sxth	r3, r3
 80129b8:	4053      	eors	r3, r2
 80129ba:	b21b      	sxth	r3, r3
 80129bc:	81fb      	strh	r3, [r7, #14]

		/* now compute checksum of upper four bits of *pcPtr */
		r = ulCrc16Table[uiCrc & 0xF];
 80129be:	89fb      	ldrh	r3, [r7, #14]
 80129c0:	f003 030f 	and.w	r3, r3, #15
 80129c4:	4a15      	ldr	r2, [pc, #84]	; (8012a1c <GetCRC16+0xa8>)
 80129c6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80129ca:	81bb      	strh	r3, [r7, #12]
		uiCrc =(unsigned short int) ((uiCrc >> 4) & 0x0FFF);
 80129cc:	89fb      	ldrh	r3, [r7, #14]
 80129ce:	091b      	lsrs	r3, r3, #4
 80129d0:	81fb      	strh	r3, [r7, #14]
		uiCrc =(unsigned short int) (uiCrc ^ r ^ ulCrc16Table[(*pcPtr >> 4) & 0xF]);
 80129d2:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80129d6:	89bb      	ldrh	r3, [r7, #12]
 80129d8:	4053      	eors	r3, r2
 80129da:	b21a      	sxth	r2, r3
 80129dc:	683b      	ldr	r3, [r7, #0]
 80129de:	781b      	ldrb	r3, [r3, #0]
 80129e0:	091b      	lsrs	r3, r3, #4
 80129e2:	b2db      	uxtb	r3, r3
 80129e4:	f003 030f 	and.w	r3, r3, #15
 80129e8:	490c      	ldr	r1, [pc, #48]	; (8012a1c <GetCRC16+0xa8>)
 80129ea:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80129ee:	b21b      	sxth	r3, r3
 80129f0:	4053      	eors	r3, r2
 80129f2:	b21b      	sxth	r3, r3
 80129f4:	81fb      	strh	r3, [r7, #14]

		/* next... */
		pcPtr++;
 80129f6:	683b      	ldr	r3, [r7, #0]
 80129f8:	3301      	adds	r3, #1
 80129fa:	603b      	str	r3, [r7, #0]
	while (iNum-- > 0)
 80129fc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8012a00:	b29a      	uxth	r2, r3
 8012a02:	3a01      	subs	r2, #1
 8012a04:	b292      	uxth	r2, r2
 8012a06:	80ba      	strh	r2, [r7, #4]
 8012a08:	2b00      	cmp	r3, #0
 8012a0a:	dcbe      	bgt.n	801298a <GetCRC16+0x16>
	}
	return(uiCrc);
 8012a0c:	89fb      	ldrh	r3, [r7, #14]
}
 8012a0e:	4618      	mov	r0, r3
 8012a10:	3714      	adds	r7, #20
 8012a12:	46bd      	mov	sp, r7
 8012a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a18:	4770      	bx	lr
 8012a1a:	bf00      	nop
 8012a1c:	08028b0c 	.word	0x08028b0c

08012a20 <ComputeCRC>:

unsigned short int ComputeCRC(unsigned char *uc_pp_pcMsg, const short int Ksi_iCount)
{
 8012a20:	b580      	push	{r7, lr}
 8012a22:	b082      	sub	sp, #8
 8012a24:	af00      	add	r7, sp, #0
 8012a26:	6078      	str	r0, [r7, #4]
 8012a28:	460b      	mov	r3, r1
 8012a2a:	807b      	strh	r3, [r7, #2]
	static unsigned short int Susi_uiCrc = 0,Susi_CalculateCRC = 0;
	Susi_uiCrc = GetCRC16( 0, uc_pp_pcMsg, Ksi_iCount);
 8012a2c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a30:	461a      	mov	r2, r3
 8012a32:	6879      	ldr	r1, [r7, #4]
 8012a34:	2000      	movs	r0, #0
 8012a36:	f7ff ff9d 	bl	8012974 <GetCRC16>
 8012a3a:	4603      	mov	r3, r0
 8012a3c:	461a      	mov	r2, r3
 8012a3e:	4b11      	ldr	r3, [pc, #68]	; (8012a84 <ComputeCRC+0x64>)
 8012a40:	801a      	strh	r2, [r3, #0]
	Susi_CalculateCRC=Susi_uiCrc;
 8012a42:	4b10      	ldr	r3, [pc, #64]	; (8012a84 <ComputeCRC+0x64>)
 8012a44:	881a      	ldrh	r2, [r3, #0]
 8012a46:	4b10      	ldr	r3, [pc, #64]	; (8012a88 <ComputeCRC+0x68>)
 8012a48:	801a      	strh	r2, [r3, #0]

	uc_pp_pcMsg[Ksi_iCount+1] = (char) (Susi_uiCrc & 0x00ff);
 8012a4a:	4b0e      	ldr	r3, [pc, #56]	; (8012a84 <ComputeCRC+0x64>)
 8012a4c:	8819      	ldrh	r1, [r3, #0]
 8012a4e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a52:	3301      	adds	r3, #1
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	4413      	add	r3, r2
 8012a58:	b2ca      	uxtb	r2, r1
 8012a5a:	701a      	strb	r2, [r3, #0]
	Susi_uiCrc =(unsigned short int) (Susi_uiCrc >> 8);
 8012a5c:	4b09      	ldr	r3, [pc, #36]	; (8012a84 <ComputeCRC+0x64>)
 8012a5e:	881b      	ldrh	r3, [r3, #0]
 8012a60:	0a1b      	lsrs	r3, r3, #8
 8012a62:	b29a      	uxth	r2, r3
 8012a64:	4b07      	ldr	r3, [pc, #28]	; (8012a84 <ComputeCRC+0x64>)
 8012a66:	801a      	strh	r2, [r3, #0]
	uc_pp_pcMsg[Ksi_iCount] = (char) (Susi_uiCrc & 0x00ff);
 8012a68:	4b06      	ldr	r3, [pc, #24]	; (8012a84 <ComputeCRC+0x64>)
 8012a6a:	8819      	ldrh	r1, [r3, #0]
 8012a6c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8012a70:	687a      	ldr	r2, [r7, #4]
 8012a72:	4413      	add	r3, r2
 8012a74:	b2ca      	uxtb	r2, r1
 8012a76:	701a      	strb	r2, [r3, #0]


	return Susi_CalculateCRC;
 8012a78:	4b03      	ldr	r3, [pc, #12]	; (8012a88 <ComputeCRC+0x68>)
 8012a7a:	881b      	ldrh	r3, [r3, #0]
}
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	3708      	adds	r7, #8
 8012a80:	46bd      	mov	sp, r7
 8012a82:	bd80      	pop	{r7, pc}
 8012a84:	20009bb4 	.word	0x20009bb4
 8012a88:	20009bb6 	.word	0x20009bb6

08012a8c <ReverseCRCPolynomial>:


/*____________________________ANSALDO_CRC__________________________*/

unsigned int ReverseCRCPolynomial(unsigned int polynomial)
{
 8012a8c:	b480      	push	{r7}
 8012a8e:	b087      	sub	sp, #28
 8012a90:	af00      	add	r7, sp, #0
 8012a92:	6078      	str	r0, [r7, #4]
	unsigned int RevPol = 0;
 8012a94:	2300      	movs	r3, #0
 8012a96:	617b      	str	r3, [r7, #20]
	unsigned int TempPol = 0;
 8012a98:	2300      	movs	r3, #0
 8012a9a:	613b      	str	r3, [r7, #16]
	unsigned int Temp = 0;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	60bb      	str	r3, [r7, #8]
	int i;

	TempPol = polynomial << 1; // Remove MSB by shifting one position
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	005b      	lsls	r3, r3, #1
 8012aa4:	613b      	str	r3, [r7, #16]

	for (i = 0; i < 32; i++)
 8012aa6:	2300      	movs	r3, #0
 8012aa8:	60fb      	str	r3, [r7, #12]
 8012aaa:	e012      	b.n	8012ad2 <ReverseCRCPolynomial+0x46>
	{

		Temp = (TempPol & 1);
 8012aac:	693b      	ldr	r3, [r7, #16]
 8012aae:	f003 0301 	and.w	r3, r3, #1
 8012ab2:	60bb      	str	r3, [r7, #8]
		RevPol = RevPol | (Temp << (31 - i));
 8012ab4:	68fb      	ldr	r3, [r7, #12]
 8012ab6:	f1c3 031f 	rsb	r3, r3, #31
 8012aba:	68ba      	ldr	r2, [r7, #8]
 8012abc:	fa02 f303 	lsl.w	r3, r2, r3
 8012ac0:	697a      	ldr	r2, [r7, #20]
 8012ac2:	4313      	orrs	r3, r2
 8012ac4:	617b      	str	r3, [r7, #20]
		TempPol = TempPol >> 1;
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	085b      	lsrs	r3, r3, #1
 8012aca:	613b      	str	r3, [r7, #16]
	for (i = 0; i < 32; i++)
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	3301      	adds	r3, #1
 8012ad0:	60fb      	str	r3, [r7, #12]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	2b1f      	cmp	r3, #31
 8012ad6:	dde9      	ble.n	8012aac <ReverseCRCPolynomial+0x20>
	}

	return (RevPol);
 8012ad8:	697b      	ldr	r3, [r7, #20]
}
 8012ada:	4618      	mov	r0, r3
 8012adc:	371c      	adds	r7, #28
 8012ade:	46bd      	mov	sp, r7
 8012ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ae4:	4770      	bx	lr
	...

08012ae8 <CalculateDirectReverseCrc>:

unsigned int CalculateDirectReverseCrc(unsigned char *Arr, unsigned short int Listsize)
{
 8012ae8:	b580      	push	{r7, lr}
 8012aea:	b088      	sub	sp, #32
 8012aec:	af00      	add	r7, sp, #0
 8012aee:	6078      	str	r0, [r7, #4]
 8012af0:	460b      	mov	r3, r1
 8012af2:	807b      	strh	r3, [r7, #2]
	int Crc = 0;
 8012af4:	2300      	movs	r3, #0
 8012af6:	61fb      	str	r3, [r7, #28]
	unsigned int RPoly = 0;
 8012af8:	2300      	movs	r3, #0
 8012afa:	617b      	str	r3, [r7, #20]
	int converted = 0;
 8012afc:	2300      	movs	r3, #0
 8012afe:	613b      	str	r3, [r7, #16]
	int i=0;
 8012b00:	2300      	movs	r3, #0
 8012b02:	61bb      	str	r3, [r7, #24]
	unsigned int polynomial = 0xD20D8A81;
 8012b04:	4b26      	ldr	r3, [pc, #152]	; (8012ba0 <CalculateDirectReverseCrc+0xb8>)
 8012b06:	60fb      	str	r3, [r7, #12]

	//printf("Arr[0]=0x%x\n",Arr[0]);
	//printf("Arr[%d]=0x%x\n",Listsize,Arr[Listsize]);
	RPoly = ReverseCRCPolynomial(polynomial);
 8012b08:	68f8      	ldr	r0, [r7, #12]
 8012b0a:	f7ff ffbf 	bl	8012a8c <ReverseCRCPolynomial>
 8012b0e:	6178      	str	r0, [r7, #20]

	for (i = 0; i < Listsize; i++)
 8012b10:	2300      	movs	r3, #0
 8012b12:	61bb      	str	r3, [r7, #24]
 8012b14:	e00d      	b.n	8012b32 <CalculateDirectReverseCrc+0x4a>
	{
		//	printf("ARR[%d]=0x%x|",i,Arr[i]);
		Crc = AnsoldoCrc(Crc, Arr[i], RPoly);
 8012b16:	69f8      	ldr	r0, [r7, #28]
 8012b18:	69bb      	ldr	r3, [r7, #24]
 8012b1a:	687a      	ldr	r2, [r7, #4]
 8012b1c:	4413      	add	r3, r2
 8012b1e:	781b      	ldrb	r3, [r3, #0]
 8012b20:	697a      	ldr	r2, [r7, #20]
 8012b22:	4619      	mov	r1, r3
 8012b24:	f000 f844 	bl	8012bb0 <AnsoldoCrc>
 8012b28:	4603      	mov	r3, r0
 8012b2a:	61fb      	str	r3, [r7, #28]
	for (i = 0; i < Listsize; i++)
 8012b2c:	69bb      	ldr	r3, [r7, #24]
 8012b2e:	3301      	adds	r3, #1
 8012b30:	61bb      	str	r3, [r7, #24]
 8012b32:	887b      	ldrh	r3, [r7, #2]
 8012b34:	69ba      	ldr	r2, [r7, #24]
 8012b36:	429a      	cmp	r2, r3
 8012b38:	dbed      	blt.n	8012b16 <CalculateDirectReverseCrc+0x2e>
	}
	/*____________________REVERSE CRC____________________*/
	//printf("Before Calculated crc:0x%x\n", Crc);
	converted |= ((0xff & Crc) << 24);
 8012b3a:	69fb      	ldr	r3, [r7, #28]
 8012b3c:	061b      	lsls	r3, r3, #24
 8012b3e:	693a      	ldr	r2, [r7, #16]
 8012b40:	4313      	orrs	r3, r2
 8012b42:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 8) & Crc) << 8);
 8012b44:	69fb      	ldr	r3, [r7, #28]
 8012b46:	021b      	lsls	r3, r3, #8
 8012b48:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012b4c:	693a      	ldr	r2, [r7, #16]
 8012b4e:	4313      	orrs	r3, r2
 8012b50:	613b      	str	r3, [r7, #16]
	converted |= (((0xff << 16) & Crc) >> 8);
 8012b52:	69fb      	ldr	r3, [r7, #28]
 8012b54:	121b      	asrs	r3, r3, #8
 8012b56:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8012b5a:	693a      	ldr	r2, [r7, #16]
 8012b5c:	4313      	orrs	r3, r2
 8012b5e:	613b      	str	r3, [r7, #16]
	converted |= (((0xffu << 24) & Crc) >> 24); //Appended u to avoid warning out of range
 8012b60:	69fb      	ldr	r3, [r7, #28]
 8012b62:	0e1a      	lsrs	r2, r3, #24
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	4313      	orrs	r3, r2
 8012b68:	613b      	str	r3, [r7, #16]
	/*____________________REVERSE CRC____________________*/
	//printf("After Calculated crc:0x%x\n", converted);

	if(Rx_Seq_failure == 1)
 8012b6a:	4b0e      	ldr	r3, [pc, #56]	; (8012ba4 <CalculateDirectReverseCrc+0xbc>)
 8012b6c:	781b      	ldrb	r3, [r3, #0]
 8012b6e:	2b01      	cmp	r3, #1
 8012b70:	d110      	bne.n	8012b94 <CalculateDirectReverseCrc+0xac>
	{
		return (converted+(HAL_RNG_GetRandomNumber(&hrng) % 10) + 1);
 8012b72:	480d      	ldr	r0, [pc, #52]	; (8012ba8 <CalculateDirectReverseCrc+0xc0>)
 8012b74:	f007 f842 	bl	8019bfc <HAL_RNG_GetRandomNumber>
 8012b78:	4601      	mov	r1, r0
 8012b7a:	4b0c      	ldr	r3, [pc, #48]	; (8012bac <CalculateDirectReverseCrc+0xc4>)
 8012b7c:	fba3 2301 	umull	r2, r3, r3, r1
 8012b80:	08da      	lsrs	r2, r3, #3
 8012b82:	4613      	mov	r3, r2
 8012b84:	009b      	lsls	r3, r3, #2
 8012b86:	4413      	add	r3, r2
 8012b88:	005b      	lsls	r3, r3, #1
 8012b8a:	1aca      	subs	r2, r1, r3
 8012b8c:	693b      	ldr	r3, [r7, #16]
 8012b8e:	4413      	add	r3, r2
 8012b90:	3301      	adds	r3, #1
 8012b92:	e000      	b.n	8012b96 <CalculateDirectReverseCrc+0xae>
	}

	return converted;
 8012b94:	693b      	ldr	r3, [r7, #16]
}
 8012b96:	4618      	mov	r0, r3
 8012b98:	3720      	adds	r7, #32
 8012b9a:	46bd      	mov	sp, r7
 8012b9c:	bd80      	pop	{r7, pc}
 8012b9e:	bf00      	nop
 8012ba0:	d20d8a81 	.word	0xd20d8a81
 8012ba4:	20000e39 	.word	0x20000e39
 8012ba8:	20009c78 	.word	0x20009c78
 8012bac:	cccccccd 	.word	0xcccccccd

08012bb0 <AnsoldoCrc>:

unsigned int AnsoldoCrc(unsigned int Crc, unsigned char InputData, unsigned int Rpoly)
{
 8012bb0:	b480      	push	{r7}
 8012bb2:	b08b      	sub	sp, #44	; 0x2c
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	60f8      	str	r0, [r7, #12]
 8012bb8:	460b      	mov	r3, r1
 8012bba:	607a      	str	r2, [r7, #4]
 8012bbc:	72fb      	strb	r3, [r7, #11]
	unsigned char i;
	unsigned int xorvalue; /* XOR of bit of data and EDC values */
	unsigned int CrcLsb;   /* Bit 0 of EDC value / uint DataLsb; / Bit 0 of data byte */
	unsigned int DataLsb;
	unsigned int databyte;				/* Current shifted value of data byte */
	databyte = (unsigned int)InputData; /* translated from char to int format */
 8012bbe:	7afb      	ldrb	r3, [r7, #11]
 8012bc0:	623b      	str	r3, [r7, #32]

	for (i = 1; i <= 8; i++)
 8012bc2:	2301      	movs	r3, #1
 8012bc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012bc8:	e01d      	b.n	8012c06 <AnsoldoCrc+0x56>
	{
		CrcLsb = Crc & 1;		/* get LSB of CRC Value */
 8012bca:	68fb      	ldr	r3, [r7, #12]
 8012bcc:	f003 0301 	and.w	r3, r3, #1
 8012bd0:	61fb      	str	r3, [r7, #28]
		DataLsb = databyte & 1; /*get LSB of Data */
 8012bd2:	6a3b      	ldr	r3, [r7, #32]
 8012bd4:	f003 0301 	and.w	r3, r3, #1
 8012bd8:	61bb      	str	r3, [r7, #24]
		/*byte of current bits left in data */
		Crc >>= 1; /* shift CRC by one bit */
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	085b      	lsrs	r3, r3, #1
 8012bde:	60fb      	str	r3, [r7, #12]
		xorvalue = CrcLsb ^ DataLsb;
 8012be0:	69fa      	ldr	r2, [r7, #28]
 8012be2:	69bb      	ldr	r3, [r7, #24]
 8012be4:	4053      	eors	r3, r2
 8012be6:	617b      	str	r3, [r7, #20]

		if (xorvalue == 1)
 8012be8:	697b      	ldr	r3, [r7, #20]
 8012bea:	2b01      	cmp	r3, #1
 8012bec:	d103      	bne.n	8012bf6 <AnsoldoCrc+0x46>
		{
			Crc ^= Rpoly; /* XOR not zero then xor in poly */
 8012bee:	68fa      	ldr	r2, [r7, #12]
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	4053      	eors	r3, r2
 8012bf4:	60fb      	str	r3, [r7, #12]
		}
		databyte >>= 1; /* Shift data byte*/
 8012bf6:	6a3b      	ldr	r3, [r7, #32]
 8012bf8:	085b      	lsrs	r3, r3, #1
 8012bfa:	623b      	str	r3, [r7, #32]
	for (i = 1; i <= 8; i++)
 8012bfc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c00:	3301      	adds	r3, #1
 8012c02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8012c06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012c0a:	2b08      	cmp	r3, #8
 8012c0c:	d9dd      	bls.n	8012bca <AnsoldoCrc+0x1a>
	}
	return (Crc);
 8012c0e:	68fb      	ldr	r3, [r7, #12]
}
 8012c10:	4618      	mov	r0, r3
 8012c12:	372c      	adds	r7, #44	; 0x2c
 8012c14:	46bd      	mov	sp, r7
 8012c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c1a:	4770      	bx	lr

08012c1c <MX_GPIO_Init>:
        * EXTI
     PD0   ------> CAN1_RX
     PD1   ------> CAN1_TX
*/
void MX_GPIO_Init(void)
{
 8012c1c:	b580      	push	{r7, lr}
 8012c1e:	b090      	sub	sp, #64	; 0x40
 8012c20:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012c22:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012c26:	2200      	movs	r2, #0
 8012c28:	601a      	str	r2, [r3, #0]
 8012c2a:	605a      	str	r2, [r3, #4]
 8012c2c:	609a      	str	r2, [r3, #8]
 8012c2e:	60da      	str	r2, [r3, #12]
 8012c30:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8012c32:	4bb2      	ldr	r3, [pc, #712]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c36:	4ab1      	ldr	r2, [pc, #708]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8012c3e:	4baf      	ldr	r3, [pc, #700]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012c46:	62bb      	str	r3, [r7, #40]	; 0x28
 8012c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8012c4a:	4bac      	ldr	r3, [pc, #688]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c4e:	4aab      	ldr	r2, [pc, #684]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c50:	f043 0320 	orr.w	r3, r3, #32
 8012c54:	6313      	str	r3, [r2, #48]	; 0x30
 8012c56:	4ba9      	ldr	r3, [pc, #676]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c5a:	f003 0320 	and.w	r3, r3, #32
 8012c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8012c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8012c62:	4ba6      	ldr	r3, [pc, #664]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c66:	4aa5      	ldr	r2, [pc, #660]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8012c6e:	4ba3      	ldr	r3, [pc, #652]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012c76:	623b      	str	r3, [r7, #32]
 8012c78:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8012c7a:	4ba0      	ldr	r3, [pc, #640]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c7e:	4a9f      	ldr	r2, [pc, #636]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c80:	f043 0304 	orr.w	r3, r3, #4
 8012c84:	6313      	str	r3, [r2, #48]	; 0x30
 8012c86:	4b9d      	ldr	r3, [pc, #628]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c8a:	f003 0304 	and.w	r3, r3, #4
 8012c8e:	61fb      	str	r3, [r7, #28]
 8012c90:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012c92:	4b9a      	ldr	r3, [pc, #616]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012c96:	4a99      	ldr	r2, [pc, #612]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012c98:	f043 0301 	orr.w	r3, r3, #1
 8012c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8012c9e:	4b97      	ldr	r3, [pc, #604]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012ca2:	f003 0301 	and.w	r3, r3, #1
 8012ca6:	61bb      	str	r3, [r7, #24]
 8012ca8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8012caa:	4b94      	ldr	r3, [pc, #592]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cae:	4a93      	ldr	r2, [pc, #588]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8012cb6:	4b91      	ldr	r3, [pc, #580]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012cbe:	617b      	str	r3, [r7, #20]
 8012cc0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8012cc2:	4b8e      	ldr	r3, [pc, #568]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cc6:	4a8d      	ldr	r2, [pc, #564]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cc8:	f043 0310 	orr.w	r3, r3, #16
 8012ccc:	6313      	str	r3, [r2, #48]	; 0x30
 8012cce:	4b8b      	ldr	r3, [pc, #556]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cd2:	f003 0310 	and.w	r3, r3, #16
 8012cd6:	613b      	str	r3, [r7, #16]
 8012cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8012cda:	4b88      	ldr	r3, [pc, #544]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cde:	4a87      	ldr	r2, [pc, #540]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012ce0:	f043 0302 	orr.w	r3, r3, #2
 8012ce4:	6313      	str	r3, [r2, #48]	; 0x30
 8012ce6:	4b85      	ldr	r3, [pc, #532]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cea:	f003 0302 	and.w	r3, r3, #2
 8012cee:	60fb      	str	r3, [r7, #12]
 8012cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8012cf2:	4b82      	ldr	r3, [pc, #520]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012cf6:	4a81      	ldr	r2, [pc, #516]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012cf8:	f043 0308 	orr.w	r3, r3, #8
 8012cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8012cfe:	4b7f      	ldr	r3, [pc, #508]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d02:	f003 0308 	and.w	r3, r3, #8
 8012d06:	60bb      	str	r3, [r7, #8]
 8012d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8012d0a:	4b7c      	ldr	r3, [pc, #496]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d0e:	4a7b      	ldr	r2, [pc, #492]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d10:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8012d14:	6313      	str	r3, [r2, #48]	; 0x30
 8012d16:	4b79      	ldr	r3, [pc, #484]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8012d1e:	607b      	str	r3, [r7, #4]
 8012d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8012d22:	4b76      	ldr	r3, [pc, #472]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d26:	4a75      	ldr	r2, [pc, #468]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d28:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8012d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8012d2e:	4b73      	ldr	r3, [pc, #460]	; (8012efc <MX_GPIO_Init+0x2e0>)
 8012d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012d32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8012d36:	603b      	str	r3, [r7, #0]
 8012d38:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOI, OP5_Pin|OP8_Pin, GPIO_PIN_RESET);
 8012d3a:	2200      	movs	r2, #0
 8012d3c:	f44f 6120 	mov.w	r1, #2560	; 0xa00
 8012d40:	486f      	ldr	r0, [pc, #444]	; (8012f00 <MX_GPIO_Init+0x2e4>)
 8012d42:	f004 ff79 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, OP1_Pin|OP4_Pin, GPIO_PIN_RESET);
 8012d46:	2200      	movs	r2, #0
 8012d48:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8012d4c:	486d      	ldr	r0, [pc, #436]	; (8012f04 <MX_GPIO_Init+0x2e8>)
 8012d4e:	f004 ff73 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin, GPIO_PIN_RESET);
 8012d52:	2200      	movs	r2, #0
 8012d54:	f240 7104 	movw	r1, #1796	; 0x704
 8012d58:	486b      	ldr	r0, [pc, #428]	; (8012f08 <MX_GPIO_Init+0x2ec>)
 8012d5a:	f004 ff6d 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS4_GPIO_Port, CS4_Pin, GPIO_PIN_SET);
 8012d5e:	2201      	movs	r2, #1
 8012d60:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8012d64:	4869      	ldr	r0, [pc, #420]	; (8012f0c <MX_GPIO_Init+0x2f0>)
 8012d66:	f004 ff67 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, OP3_Pin|OP6_Pin, GPIO_PIN_RESET);
 8012d6a:	2200      	movs	r2, #0
 8012d6c:	f241 0104 	movw	r1, #4100	; 0x1004
 8012d70:	4867      	ldr	r0, [pc, #412]	; (8012f10 <MX_GPIO_Init+0x2f4>)
 8012d72:	f004 ff61 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_RESET_GPIO_Port, SPI_RESET_Pin, GPIO_PIN_SET);
 8012d76:	2201      	movs	r2, #1
 8012d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012d7c:	4865      	ldr	r0, [pc, #404]	; (8012f14 <MX_GPIO_Init+0x2f8>)
 8012d7e:	f004 ff5b 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OP2_GPIO_Port, OP2_Pin, GPIO_PIN_RESET);
 8012d82:	2200      	movs	r2, #0
 8012d84:	2108      	movs	r1, #8
 8012d86:	4864      	ldr	r0, [pc, #400]	; (8012f18 <MX_GPIO_Init+0x2fc>)
 8012d88:	f004 ff56 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS2_Pin|CS3_Pin, GPIO_PIN_SET);
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	2160      	movs	r1, #96	; 0x60
 8012d90:	4861      	ldr	r0, [pc, #388]	; (8012f18 <MX_GPIO_Init+0x2fc>)
 8012d92:	f004 ff51 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOJ, RS_485_RE_Pin|WDT_FEED_Pin, GPIO_PIN_RESET);
 8012d96:	2200      	movs	r2, #0
 8012d98:	f44f 4120 	mov.w	r1, #40960	; 0xa000
 8012d9c:	485f      	ldr	r0, [pc, #380]	; (8012f1c <MX_GPIO_Init+0x300>)
 8012d9e:	f004 ff4b 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RS_485_DE_GPIO_Port, RS_485_DE_Pin, GPIO_PIN_SET);
 8012da2:	2201      	movs	r2, #1
 8012da4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8012da8:	485c      	ldr	r0, [pc, #368]	; (8012f1c <MX_GPIO_Init+0x300>)
 8012daa:	f004 ff45 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS1_GPIO_Port, CS1_Pin, GPIO_PIN_SET);
 8012dae:	2201      	movs	r2, #1
 8012db0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8012db4:	4856      	ldr	r0, [pc, #344]	; (8012f10 <MX_GPIO_Init+0x2f4>)
 8012db6:	f004 ff3f 	bl	8017c38 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = OP5_Pin|OP8_Pin;
 8012dba:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8012dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012dc0:	2301      	movs	r3, #1
 8012dc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dc4:	2300      	movs	r3, #0
 8012dc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012dc8:	2303      	movs	r3, #3
 8012dca:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012dcc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dd0:	4619      	mov	r1, r3
 8012dd2:	484b      	ldr	r0, [pc, #300]	; (8012f00 <MX_GPIO_Init+0x2e4>)
 8012dd4:	f004 fd6c 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PIPin PIPin */
  GPIO_InitStruct.Pin = IP5_Pin|IP6_Pin;
 8012dd8:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012dde:	2300      	movs	r3, #0
 8012de0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012de2:	2300      	movs	r3, #0
 8012de4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8012de6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012dea:	4619      	mov	r1, r3
 8012dec:	4844      	ldr	r0, [pc, #272]	; (8012f00 <MX_GPIO_Init+0x2e4>)
 8012dee:	f004 fd5f 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = OP1_Pin|OP4_Pin;
 8012df2:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8012df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012df8:	2301      	movs	r3, #1
 8012dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e00:	2303      	movs	r3, #3
 8012e02:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8012e04:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e08:	4619      	mov	r1, r3
 8012e0a:	483e      	ldr	r0, [pc, #248]	; (8012f04 <MX_GPIO_Init+0x2e8>)
 8012e0c:	f004 fd50 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP7_Pin;
 8012e10:	2304      	movs	r3, #4
 8012e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e14:	2300      	movs	r3, #0
 8012e16:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e18:	2300      	movs	r3, #0
 8012e1a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP7_GPIO_Port, &GPIO_InitStruct);
 8012e1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e20:	4619      	mov	r1, r3
 8012e22:	483c      	ldr	r0, [pc, #240]	; (8012f14 <MX_GPIO_Init+0x2f8>)
 8012e24:	f004 fd44 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin PHPin PHPin */
  GPIO_InitStruct.Pin = OP7_Pin|S1_LED_Pin|S2_LED_Pin|OP9_Pin;
 8012e28:	f240 7304 	movw	r3, #1796	; 0x704
 8012e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012e2e:	2301      	movs	r3, #1
 8012e30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e32:	2300      	movs	r3, #0
 8012e34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e36:	2303      	movs	r3, #3
 8012e38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8012e3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e3e:	4619      	mov	r1, r3
 8012e40:	4831      	ldr	r0, [pc, #196]	; (8012f08 <MX_GPIO_Init+0x2ec>)
 8012e42:	f004 fd35 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = EX_INT0_Pin|EX_INT1_Pin;
 8012e46:	2303      	movs	r3, #3
 8012e48:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8012e4a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8012e4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e50:	2300      	movs	r3, #0
 8012e52:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012e54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e58:	4619      	mov	r1, r3
 8012e5a:	482d      	ldr	r0, [pc, #180]	; (8012f10 <MX_GPIO_Init+0x2f4>)
 8012e5c:	f004 fd28 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP8_Pin;
 8012e60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8012e64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e66:	2300      	movs	r3, #0
 8012e68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e6a:	2300      	movs	r3, #0
 8012e6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP8_GPIO_Port, &GPIO_InitStruct);
 8012e6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e72:	4619      	mov	r1, r3
 8012e74:	4825      	ldr	r0, [pc, #148]	; (8012f0c <MX_GPIO_Init+0x2f0>)
 8012e76:	f004 fd1b 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS4_Pin;
 8012e7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012e80:	2301      	movs	r3, #1
 8012e82:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e84:	2300      	movs	r3, #0
 8012e86:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012e88:	2303      	movs	r3, #3
 8012e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(CS4_GPIO_Port, &GPIO_InitStruct);
 8012e8c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012e90:	4619      	mov	r1, r3
 8012e92:	481e      	ldr	r0, [pc, #120]	; (8012f0c <MX_GPIO_Init+0x2f0>)
 8012e94:	f004 fd0c 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = IP1_Pin|IP2_Pin;
 8012e98:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8012e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ea2:	2300      	movs	r3, #0
 8012ea4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012ea6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012eaa:	4619      	mov	r1, r3
 8012eac:	481a      	ldr	r0, [pc, #104]	; (8012f18 <MX_GPIO_Init+0x2fc>)
 8012eae:	f004 fcff 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = OP3_Pin|CS1_Pin|OP6_Pin;
 8012eb2:	f241 4304 	movw	r3, #5124	; 0x1404
 8012eb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012eb8:	2301      	movs	r3, #1
 8012eba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ebc:	2300      	movs	r3, #0
 8012ebe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012ec0:	2303      	movs	r3, #3
 8012ec2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8012ec4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ec8:	4619      	mov	r1, r3
 8012eca:	4811      	ldr	r0, [pc, #68]	; (8012f10 <MX_GPIO_Init+0x2f4>)
 8012ecc:	f004 fcf0 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP10_Pin;
 8012ed0:	2308      	movs	r3, #8
 8012ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012ed4:	2300      	movs	r3, #0
 8012ed6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ed8:	2300      	movs	r3, #0
 8012eda:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP10_GPIO_Port, &GPIO_InitStruct);
 8012edc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012ee0:	4619      	mov	r1, r3
 8012ee2:	480b      	ldr	r0, [pc, #44]	; (8012f10 <MX_GPIO_Init+0x2f4>)
 8012ee4:	f004 fce4 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_RESET_Pin;
 8012ee8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8012eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012eee:	2301      	movs	r3, #1
 8012ef0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012ef2:	2300      	movs	r3, #0
 8012ef4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012ef6:	2300      	movs	r3, #0
 8012ef8:	63bb      	str	r3, [r7, #56]	; 0x38
 8012efa:	e011      	b.n	8012f20 <MX_GPIO_Init+0x304>
 8012efc:	40023800 	.word	0x40023800
 8012f00:	40022000 	.word	0x40022000
 8012f04:	40021400 	.word	0x40021400
 8012f08:	40021c00 	.word	0x40021c00
 8012f0c:	40021000 	.word	0x40021000
 8012f10:	40021800 	.word	0x40021800
 8012f14:	40020800 	.word	0x40020800
 8012f18:	40020c00 	.word	0x40020c00
 8012f1c:	40022400 	.word	0x40022400
  HAL_GPIO_Init(SPI_RESET_GPIO_Port, &GPIO_InitStruct);
 8012f20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f24:	4619      	mov	r1, r3
 8012f26:	4836      	ldr	r0, [pc, #216]	; (8013000 <MX_GPIO_Init+0x3e4>)
 8012f28:	f004 fcc2 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = CAN1_RX_Pin|CAN1_TX_Pin;
 8012f2c:	2303      	movs	r3, #3
 8012f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012f30:	2302      	movs	r3, #2
 8012f32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f34:	2300      	movs	r3, #0
 8012f36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f38:	2303      	movs	r3, #3
 8012f3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8012f3c:	2309      	movs	r3, #9
 8012f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f44:	4619      	mov	r1, r3
 8012f46:	482f      	ldr	r0, [pc, #188]	; (8013004 <MX_GPIO_Init+0x3e8>)
 8012f48:	f004 fcb2 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = OP2_Pin|CS2_Pin|CS3_Pin;
 8012f4c:	2368      	movs	r3, #104	; 0x68
 8012f4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f50:	2301      	movs	r3, #1
 8012f52:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f54:	2300      	movs	r3, #0
 8012f56:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012f58:	2303      	movs	r3, #3
 8012f5a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8012f5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f60:	4619      	mov	r1, r3
 8012f62:	4828      	ldr	r0, [pc, #160]	; (8013004 <MX_GPIO_Init+0x3e8>)
 8012f64:	f004 fca4 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IP9_Pin;
 8012f68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8012f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012f6e:	2300      	movs	r3, #0
 8012f70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f72:	2300      	movs	r3, #0
 8012f74:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(IP9_GPIO_Port, &GPIO_InitStruct);
 8012f76:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f7a:	4619      	mov	r1, r3
 8012f7c:	4822      	ldr	r0, [pc, #136]	; (8013008 <MX_GPIO_Init+0x3ec>)
 8012f7e:	f004 fc97 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PJPin PJPin */
  GPIO_InitStruct.Pin = RS_485_RE_Pin|RS_485_DE_Pin;
 8012f82:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8012f86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012f88:	2301      	movs	r3, #1
 8012f8a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012f8c:	2300      	movs	r3, #0
 8012f8e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012f90:	2300      	movs	r3, #0
 8012f92:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8012f94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012f98:	4619      	mov	r1, r3
 8012f9a:	481b      	ldr	r0, [pc, #108]	; (8013008 <MX_GPIO_Init+0x3ec>)
 8012f9c:	f004 fc88 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WDT_FEED_Pin;
 8012fa0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8012fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8012fa6:	2301      	movs	r3, #1
 8012fa8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012faa:	2300      	movs	r3, #0
 8012fac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012fae:	2303      	movs	r3, #3
 8012fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(WDT_FEED_GPIO_Port, &GPIO_InitStruct);
 8012fb2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fb6:	4619      	mov	r1, r3
 8012fb8:	4813      	ldr	r0, [pc, #76]	; (8013008 <MX_GPIO_Init+0x3ec>)
 8012fba:	f004 fc79 	bl	80178b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PKPin PKPin */
  GPIO_InitStruct.Pin = IP3_Pin|IP4_Pin;
 8012fbe:	2318      	movs	r3, #24
 8012fc0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8012fc2:	2300      	movs	r3, #0
 8012fc4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012fc6:	2300      	movs	r3, #0
 8012fc8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8012fca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8012fce:	4619      	mov	r1, r3
 8012fd0:	480e      	ldr	r0, [pc, #56]	; (801300c <MX_GPIO_Init+0x3f0>)
 8012fd2:	f004 fc6d 	bl	80178b0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 8012fd6:	2200      	movs	r2, #0
 8012fd8:	2101      	movs	r1, #1
 8012fda:	2006      	movs	r0, #6
 8012fdc:	f003 f93d 	bl	801625a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8012fe0:	2006      	movs	r0, #6
 8012fe2:	f003 f956 	bl	8016292 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 1);
 8012fe6:	2201      	movs	r2, #1
 8012fe8:	2101      	movs	r1, #1
 8012fea:	2007      	movs	r0, #7
 8012fec:	f003 f935 	bl	801625a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8012ff0:	2007      	movs	r0, #7
 8012ff2:	f003 f94e 	bl	8016292 <HAL_NVIC_EnableIRQ>

}
 8012ff6:	bf00      	nop
 8012ff8:	3740      	adds	r7, #64	; 0x40
 8012ffa:	46bd      	mov	sp, r7
 8012ffc:	bd80      	pop	{r7, pc}
 8012ffe:	bf00      	nop
 8013000:	40020800 	.word	0x40020800
 8013004:	40020c00 	.word	0x40020c00
 8013008:	40022400 	.word	0x40022400
 801300c:	40022800 	.word	0x40022800

08013010 <Feed_wdt>:

/* USER CODE BEGIN 2 */

void Feed_wdt(void)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	af00      	add	r7, sp, #0
	static uint32_t FEED_CLK = 0;

	if(HAL_Elaps_Ticks(FEED_CLK) >=300)
 8013014:	4b0a      	ldr	r3, [pc, #40]	; (8013040 <Feed_wdt+0x30>)
 8013016:	681b      	ldr	r3, [r3, #0]
 8013018:	4618      	mov	r0, r3
 801301a:	f7fb fbf1 	bl	800e800 <HAL_Elaps_Ticks>
 801301e:	4603      	mov	r3, r0
 8013020:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013024:	d309      	bcc.n	801303a <Feed_wdt+0x2a>
	{
		HAL_GPIO_TogglePin(WDT_FEED_GPIO_Port, WDT_FEED_Pin);
 8013026:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 801302a:	4806      	ldr	r0, [pc, #24]	; (8013044 <Feed_wdt+0x34>)
 801302c:	f004 fe1d 	bl	8017c6a <HAL_GPIO_TogglePin>
		FEED_CLK = HAL_GetTick();
 8013030:	f002 f932 	bl	8015298 <HAL_GetTick>
 8013034:	4603      	mov	r3, r0
 8013036:	4a02      	ldr	r2, [pc, #8]	; (8013040 <Feed_wdt+0x30>)
 8013038:	6013      	str	r3, [r2, #0]
	}

}
 801303a:	bf00      	nop
 801303c:	bd80      	pop	{r7, pc}
 801303e:	bf00      	nop
 8013040:	20009bb8 	.word	0x20009bb8
 8013044:	40022400 	.word	0x40022400

08013048 <Blink_S2>:
		S1_FEED = HAL_GetTick();
	}
}

void Blink_S2(void)
{
 8013048:	b580      	push	{r7, lr}
 801304a:	af00      	add	r7, sp, #0
	static uint32_t S2_FEED = 0;

	if(HAL_Elaps_Ticks(S2_FEED) > 100)
 801304c:	4b09      	ldr	r3, [pc, #36]	; (8013074 <Blink_S2+0x2c>)
 801304e:	681b      	ldr	r3, [r3, #0]
 8013050:	4618      	mov	r0, r3
 8013052:	f7fb fbd5 	bl	800e800 <HAL_Elaps_Ticks>
 8013056:	4603      	mov	r3, r0
 8013058:	2b64      	cmp	r3, #100	; 0x64
 801305a:	d909      	bls.n	8013070 <Blink_S2+0x28>
	{
		HAL_GPIO_TogglePin(S2_LED_GPIO_Port, S2_LED_Pin);
 801305c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8013060:	4805      	ldr	r0, [pc, #20]	; (8013078 <Blink_S2+0x30>)
 8013062:	f004 fe02 	bl	8017c6a <HAL_GPIO_TogglePin>
		S2_FEED = HAL_GetTick();
 8013066:	f002 f917 	bl	8015298 <HAL_GetTick>
 801306a:	4603      	mov	r3, r0
 801306c:	4a01      	ldr	r2, [pc, #4]	; (8013074 <Blink_S2+0x2c>)
 801306e:	6013      	str	r3, [r2, #0]
	}
}
 8013070:	bf00      	nop
 8013072:	bd80      	pop	{r7, pc}
 8013074:	20009bbc 	.word	0x20009bbc
 8013078:	40021c00 	.word	0x40021c00

0801307c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8013080:	4b1b      	ldr	r3, [pc, #108]	; (80130f0 <MX_I2C1_Init+0x74>)
 8013082:	4a1c      	ldr	r2, [pc, #112]	; (80130f4 <MX_I2C1_Init+0x78>)
 8013084:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0xC0000E12;
 8013086:	4b1a      	ldr	r3, [pc, #104]	; (80130f0 <MX_I2C1_Init+0x74>)
 8013088:	4a1b      	ldr	r2, [pc, #108]	; (80130f8 <MX_I2C1_Init+0x7c>)
 801308a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 801308c:	4b18      	ldr	r3, [pc, #96]	; (80130f0 <MX_I2C1_Init+0x74>)
 801308e:	2200      	movs	r2, #0
 8013090:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013092:	4b17      	ldr	r3, [pc, #92]	; (80130f0 <MX_I2C1_Init+0x74>)
 8013094:	2201      	movs	r2, #1
 8013096:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013098:	4b15      	ldr	r3, [pc, #84]	; (80130f0 <MX_I2C1_Init+0x74>)
 801309a:	2200      	movs	r2, #0
 801309c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 801309e:	4b14      	ldr	r3, [pc, #80]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130a0:	2200      	movs	r2, #0
 80130a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80130a4:	4b12      	ldr	r3, [pc, #72]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130a6:	2200      	movs	r2, #0
 80130a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80130aa:	4b11      	ldr	r3, [pc, #68]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130ac:	2200      	movs	r2, #0
 80130ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80130b0:	4b0f      	ldr	r3, [pc, #60]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130b2:	2200      	movs	r2, #0
 80130b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80130b6:	480e      	ldr	r0, [pc, #56]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130b8:	f004 fe16 	bl	8017ce8 <HAL_I2C_Init>
 80130bc:	4603      	mov	r3, r0
 80130be:	2b00      	cmp	r3, #0
 80130c0:	d001      	beq.n	80130c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80130c2:	f000 fb5d 	bl	8013780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80130c6:	2100      	movs	r1, #0
 80130c8:	4809      	ldr	r0, [pc, #36]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130ca:	f005 fb65 	bl	8018798 <HAL_I2CEx_ConfigAnalogFilter>
 80130ce:	4603      	mov	r3, r0
 80130d0:	2b00      	cmp	r3, #0
 80130d2:	d001      	beq.n	80130d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80130d4:	f000 fb54 	bl	8013780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80130d8:	2100      	movs	r1, #0
 80130da:	4805      	ldr	r0, [pc, #20]	; (80130f0 <MX_I2C1_Init+0x74>)
 80130dc:	f005 fba7 	bl	801882e <HAL_I2CEx_ConfigDigitalFilter>
 80130e0:	4603      	mov	r3, r0
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	d001      	beq.n	80130ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80130e6:	f000 fb4b 	bl	8013780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80130ea:	bf00      	nop
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	20009bc0 	.word	0x20009bc0
 80130f4:	40005400 	.word	0x40005400
 80130f8:	c0000e12 	.word	0xc0000e12

080130fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80130fc:	b580      	push	{r7, lr}
 80130fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8013100:	4b1b      	ldr	r3, [pc, #108]	; (8013170 <MX_I2C2_Init+0x74>)
 8013102:	4a1c      	ldr	r2, [pc, #112]	; (8013174 <MX_I2C2_Init+0x78>)
 8013104:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0xC0000E12;
 8013106:	4b1a      	ldr	r3, [pc, #104]	; (8013170 <MX_I2C2_Init+0x74>)
 8013108:	4a1b      	ldr	r2, [pc, #108]	; (8013178 <MX_I2C2_Init+0x7c>)
 801310a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 801310c:	4b18      	ldr	r3, [pc, #96]	; (8013170 <MX_I2C2_Init+0x74>)
 801310e:	2200      	movs	r2, #0
 8013110:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8013112:	4b17      	ldr	r3, [pc, #92]	; (8013170 <MX_I2C2_Init+0x74>)
 8013114:	2201      	movs	r2, #1
 8013116:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8013118:	4b15      	ldr	r3, [pc, #84]	; (8013170 <MX_I2C2_Init+0x74>)
 801311a:	2200      	movs	r2, #0
 801311c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 801311e:	4b14      	ldr	r3, [pc, #80]	; (8013170 <MX_I2C2_Init+0x74>)
 8013120:	2200      	movs	r2, #0
 8013122:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8013124:	4b12      	ldr	r3, [pc, #72]	; (8013170 <MX_I2C2_Init+0x74>)
 8013126:	2200      	movs	r2, #0
 8013128:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 801312a:	4b11      	ldr	r3, [pc, #68]	; (8013170 <MX_I2C2_Init+0x74>)
 801312c:	2200      	movs	r2, #0
 801312e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8013130:	4b0f      	ldr	r3, [pc, #60]	; (8013170 <MX_I2C2_Init+0x74>)
 8013132:	2200      	movs	r2, #0
 8013134:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8013136:	480e      	ldr	r0, [pc, #56]	; (8013170 <MX_I2C2_Init+0x74>)
 8013138:	f004 fdd6 	bl	8017ce8 <HAL_I2C_Init>
 801313c:	4603      	mov	r3, r0
 801313e:	2b00      	cmp	r3, #0
 8013140:	d001      	beq.n	8013146 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8013142:	f000 fb1d 	bl	8013780 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8013146:	2100      	movs	r1, #0
 8013148:	4809      	ldr	r0, [pc, #36]	; (8013170 <MX_I2C2_Init+0x74>)
 801314a:	f005 fb25 	bl	8018798 <HAL_I2CEx_ConfigAnalogFilter>
 801314e:	4603      	mov	r3, r0
 8013150:	2b00      	cmp	r3, #0
 8013152:	d001      	beq.n	8013158 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8013154:	f000 fb14 	bl	8013780 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8013158:	2100      	movs	r1, #0
 801315a:	4805      	ldr	r0, [pc, #20]	; (8013170 <MX_I2C2_Init+0x74>)
 801315c:	f005 fb67 	bl	801882e <HAL_I2CEx_ConfigDigitalFilter>
 8013160:	4603      	mov	r3, r0
 8013162:	2b00      	cmp	r3, #0
 8013164:	d001      	beq.n	801316a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8013166:	f000 fb0b 	bl	8013780 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 801316a:	bf00      	nop
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	20009c14 	.word	0x20009c14
 8013174:	40005800 	.word	0x40005800
 8013178:	c0000e12 	.word	0xc0000e12

0801317c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	b0b0      	sub	sp, #192	; 0xc0
 8013180:	af00      	add	r7, sp, #0
 8013182:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8013184:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013188:	2200      	movs	r2, #0
 801318a:	601a      	str	r2, [r3, #0]
 801318c:	605a      	str	r2, [r3, #4]
 801318e:	609a      	str	r2, [r3, #8]
 8013190:	60da      	str	r2, [r3, #12]
 8013192:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013194:	f107 031c 	add.w	r3, r7, #28
 8013198:	2290      	movs	r2, #144	; 0x90
 801319a:	2100      	movs	r1, #0
 801319c:	4618      	mov	r0, r3
 801319e:	f00e ff9d 	bl	80220dc <memset>
  if(i2cHandle->Instance==I2C1)
 80131a2:	687b      	ldr	r3, [r7, #4]
 80131a4:	681b      	ldr	r3, [r3, #0]
 80131a6:	4a44      	ldr	r2, [pc, #272]	; (80132b8 <HAL_I2C_MspInit+0x13c>)
 80131a8:	4293      	cmp	r3, r2
 80131aa:	d13e      	bne.n	801322a <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80131ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80131b0:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80131b2:	2300      	movs	r3, #0
 80131b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80131b8:	f107 031c 	add.w	r3, r7, #28
 80131bc:	4618      	mov	r0, r3
 80131be:	f006 f875 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 80131c2:	4603      	mov	r3, r0
 80131c4:	2b00      	cmp	r3, #0
 80131c6:	d001      	beq.n	80131cc <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 80131c8:	f000 fada 	bl	8013780 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80131cc:	4b3b      	ldr	r3, [pc, #236]	; (80132bc <HAL_I2C_MspInit+0x140>)
 80131ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131d0:	4a3a      	ldr	r2, [pc, #232]	; (80132bc <HAL_I2C_MspInit+0x140>)
 80131d2:	f043 0302 	orr.w	r3, r3, #2
 80131d6:	6313      	str	r3, [r2, #48]	; 0x30
 80131d8:	4b38      	ldr	r3, [pc, #224]	; (80132bc <HAL_I2C_MspInit+0x140>)
 80131da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131dc:	f003 0302 	and.w	r3, r3, #2
 80131e0:	61bb      	str	r3, [r7, #24]
 80131e2:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = I2C1_SDA_Pin|I2C1_SCL_Pin;
 80131e4:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80131e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80131ec:	2312      	movs	r3, #18
 80131ee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80131f2:	2300      	movs	r3, #0
 80131f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80131f8:	2303      	movs	r3, #3
 80131fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80131fe:	2304      	movs	r3, #4
 8013200:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013204:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8013208:	4619      	mov	r1, r3
 801320a:	482d      	ldr	r0, [pc, #180]	; (80132c0 <HAL_I2C_MspInit+0x144>)
 801320c:	f004 fb50 	bl	80178b0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8013210:	4b2a      	ldr	r3, [pc, #168]	; (80132bc <HAL_I2C_MspInit+0x140>)
 8013212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013214:	4a29      	ldr	r2, [pc, #164]	; (80132bc <HAL_I2C_MspInit+0x140>)
 8013216:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801321a:	6413      	str	r3, [r2, #64]	; 0x40
 801321c:	4b27      	ldr	r3, [pc, #156]	; (80132bc <HAL_I2C_MspInit+0x140>)
 801321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013220:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8013224:	617b      	str	r3, [r7, #20]
 8013226:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8013228:	e041      	b.n	80132ae <HAL_I2C_MspInit+0x132>
  else if(i2cHandle->Instance==I2C2)
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a25      	ldr	r2, [pc, #148]	; (80132c4 <HAL_I2C_MspInit+0x148>)
 8013230:	4293      	cmp	r3, r2
 8013232:	d13c      	bne.n	80132ae <HAL_I2C_MspInit+0x132>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8013234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013238:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 801323a:	2300      	movs	r3, #0
 801323c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8013240:	f107 031c 	add.w	r3, r7, #28
 8013244:	4618      	mov	r0, r3
 8013246:	f006 f831 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 801324a:	4603      	mov	r3, r0
 801324c:	2b00      	cmp	r3, #0
 801324e:	d001      	beq.n	8013254 <HAL_I2C_MspInit+0xd8>
      Error_Handler();
 8013250:	f000 fa96 	bl	8013780 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8013254:	4b19      	ldr	r3, [pc, #100]	; (80132bc <HAL_I2C_MspInit+0x140>)
 8013256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013258:	4a18      	ldr	r2, [pc, #96]	; (80132bc <HAL_I2C_MspInit+0x140>)
 801325a:	f043 0320 	orr.w	r3, r3, #32
 801325e:	6313      	str	r3, [r2, #48]	; 0x30
 8013260:	4b16      	ldr	r3, [pc, #88]	; (80132bc <HAL_I2C_MspInit+0x140>)
 8013262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013264:	f003 0320 	and.w	r3, r3, #32
 8013268:	613b      	str	r3, [r7, #16]
 801326a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = I2C2_SDA_Pin|I2C2_SCL_Pin;
 801326c:	2303      	movs	r3, #3
 801326e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8013272:	2312      	movs	r3, #18
 8013274:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013278:	2300      	movs	r3, #0
 801327a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801327e:	2303      	movs	r3, #3
 8013280:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8013284:	2304      	movs	r3, #4
 8013286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801328a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 801328e:	4619      	mov	r1, r3
 8013290:	480d      	ldr	r0, [pc, #52]	; (80132c8 <HAL_I2C_MspInit+0x14c>)
 8013292:	f004 fb0d 	bl	80178b0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8013296:	4b09      	ldr	r3, [pc, #36]	; (80132bc <HAL_I2C_MspInit+0x140>)
 8013298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801329a:	4a08      	ldr	r2, [pc, #32]	; (80132bc <HAL_I2C_MspInit+0x140>)
 801329c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80132a0:	6413      	str	r3, [r2, #64]	; 0x40
 80132a2:	4b06      	ldr	r3, [pc, #24]	; (80132bc <HAL_I2C_MspInit+0x140>)
 80132a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80132aa:	60fb      	str	r3, [r7, #12]
 80132ac:	68fb      	ldr	r3, [r7, #12]
}
 80132ae:	bf00      	nop
 80132b0:	37c0      	adds	r7, #192	; 0xc0
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	40005400 	.word	0x40005400
 80132bc:	40023800 	.word	0x40023800
 80132c0:	40020400 	.word	0x40020400
 80132c4:	40005800 	.word	0x40005800
 80132c8:	40021400 	.word	0x40021400

080132cc <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80132d0:	4b0b      	ldr	r3, [pc, #44]	; (8013300 <MX_IWDG_Init+0x34>)
 80132d2:	4a0c      	ldr	r2, [pc, #48]	; (8013304 <MX_IWDG_Init+0x38>)
 80132d4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 80132d6:	4b0a      	ldr	r3, [pc, #40]	; (8013300 <MX_IWDG_Init+0x34>)
 80132d8:	2203      	movs	r2, #3
 80132da:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80132dc:	4b08      	ldr	r3, [pc, #32]	; (8013300 <MX_IWDG_Init+0x34>)
 80132de:	f640 72ff 	movw	r2, #4095	; 0xfff
 80132e2:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 3000;
 80132e4:	4b06      	ldr	r3, [pc, #24]	; (8013300 <MX_IWDG_Init+0x34>)
 80132e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80132ea:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80132ec:	4804      	ldr	r0, [pc, #16]	; (8013300 <MX_IWDG_Init+0x34>)
 80132ee:	f005 faea 	bl	80188c6 <HAL_IWDG_Init>
 80132f2:	4603      	mov	r3, r0
 80132f4:	2b00      	cmp	r3, #0
 80132f6:	d001      	beq.n	80132fc <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80132f8:	f000 fa42 	bl	8013780 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80132fc:	bf00      	nop
 80132fe:	bd80      	pop	{r7, pc}
 8013300:	20009c68 	.word	0x20009c68
 8013304:	40003000 	.word	0x40003000

08013308 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8013308:	b480      	push	{r7}
 801330a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 801330c:	f3bf 8f4f 	dsb	sy
}
 8013310:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013312:	f3bf 8f6f 	isb	sy
}
 8013316:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8013318:	4b0d      	ldr	r3, [pc, #52]	; (8013350 <SCB_EnableICache+0x48>)
 801331a:	2200      	movs	r2, #0
 801331c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8013320:	f3bf 8f4f 	dsb	sy
}
 8013324:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8013326:	f3bf 8f6f 	isb	sy
}
 801332a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 801332c:	4b08      	ldr	r3, [pc, #32]	; (8013350 <SCB_EnableICache+0x48>)
 801332e:	695b      	ldr	r3, [r3, #20]
 8013330:	4a07      	ldr	r2, [pc, #28]	; (8013350 <SCB_EnableICache+0x48>)
 8013332:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8013336:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8013338:	f3bf 8f4f 	dsb	sy
}
 801333c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801333e:	f3bf 8f6f 	isb	sy
}
 8013342:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8013344:	bf00      	nop
 8013346:	46bd      	mov	sp, r7
 8013348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801334c:	4770      	bx	lr
 801334e:	bf00      	nop
 8013350:	e000ed00 	.word	0xe000ed00

08013354 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8013354:	b480      	push	{r7}
 8013356:	b085      	sub	sp, #20
 8013358:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 801335a:	4b1f      	ldr	r3, [pc, #124]	; (80133d8 <SCB_EnableDCache+0x84>)
 801335c:	2200      	movs	r2, #0
 801335e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8013362:	f3bf 8f4f 	dsb	sy
}
 8013366:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8013368:	4b1b      	ldr	r3, [pc, #108]	; (80133d8 <SCB_EnableDCache+0x84>)
 801336a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801336e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8013370:	687b      	ldr	r3, [r7, #4]
 8013372:	0b5b      	lsrs	r3, r3, #13
 8013374:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8013378:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	08db      	lsrs	r3, r3, #3
 801337e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8013382:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	015a      	lsls	r2, r3, #5
 8013388:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 801338c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 801338e:	68ba      	ldr	r2, [r7, #8]
 8013390:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8013392:	4911      	ldr	r1, [pc, #68]	; (80133d8 <SCB_EnableDCache+0x84>)
 8013394:	4313      	orrs	r3, r2
 8013396:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 801339a:	68bb      	ldr	r3, [r7, #8]
 801339c:	1e5a      	subs	r2, r3, #1
 801339e:	60ba      	str	r2, [r7, #8]
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d1ef      	bne.n	8013384 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80133a4:	68fb      	ldr	r3, [r7, #12]
 80133a6:	1e5a      	subs	r2, r3, #1
 80133a8:	60fa      	str	r2, [r7, #12]
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	d1e5      	bne.n	801337a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80133ae:	f3bf 8f4f 	dsb	sy
}
 80133b2:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80133b4:	4b08      	ldr	r3, [pc, #32]	; (80133d8 <SCB_EnableDCache+0x84>)
 80133b6:	695b      	ldr	r3, [r3, #20]
 80133b8:	4a07      	ldr	r2, [pc, #28]	; (80133d8 <SCB_EnableDCache+0x84>)
 80133ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80133be:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80133c0:	f3bf 8f4f 	dsb	sy
}
 80133c4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80133c6:	f3bf 8f6f 	isb	sy
}
 80133ca:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 80133cc:	bf00      	nop
 80133ce:	3714      	adds	r7, #20
 80133d0:	46bd      	mov	sp, r7
 80133d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133d6:	4770      	bx	lr
 80133d8:	e000ed00 	.word	0xe000ed00

080133dc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80133dc:	b580      	push	{r7, lr}
 80133de:	b082      	sub	sp, #8
 80133e0:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	char *ptr= NULL;
 80133e2:	2300      	movs	r3, #0
 80133e4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MPU Configuration--------------------------------------------------------*/
	MPU_Config();
 80133e6:	f000 f99f 	bl	8013728 <MPU_Config>

	/* Enable I-Cache---------------------------------------------------------*/
	SCB_EnableICache();
 80133ea:	f7ff ff8d 	bl	8013308 <SCB_EnableICache>

	/* Enable D-Cache---------------------------------------------------------*/
	SCB_EnableDCache();
 80133ee:	f7ff ffb1 	bl	8013354 <SCB_EnableDCache>

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80133f2:	f001 fef1 	bl	80151d8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80133f6:	f000 f8d1 	bl	801359c <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	ptr = reset_cause_get_name(reset_cause_get());
 80133fa:	f7f5 fca9 	bl	8008d50 <reset_cause_get>
 80133fe:	4603      	mov	r3, r0
 8013400:	4618      	mov	r0, r3
 8013402:	f7f5 fcf7 	bl	8008df4 <reset_cause_get_name>
 8013406:	6078      	str	r0, [r7, #4]
	MX_RNG_Init();
	MX_CAN3_Init();
	/* USER CODE BEGIN 2 */
#endif

	MX_GPIO_Init();
 8013408:	f7ff fc08 	bl	8012c1c <MX_GPIO_Init>
	MX_USART1_UART_Init();
 801340c:	f001 f90a 	bl	8014624 <MX_USART1_UART_Init>
	Get_Slot();
 8013410:	f7ed fb5c 	bl	8000acc <Get_Slot>
	MX_CAN2_Init();
 8013414:	f7fb fde0 	bl	800efd8 <MX_CAN2_Init>
	MX_CAN3_Init();
 8013418:	f7fb fe56 	bl	800f0c8 <MX_CAN3_Init>
	MX_I2C1_Init();
 801341c:	f7ff fe2e 	bl	801307c <MX_I2C1_Init>
	MX_I2C2_Init();
 8013420:	f7ff fe6c 	bl	80130fc <MX_I2C2_Init>
	MX_SPI1_Init();
 8013424:	f000 fa10 	bl	8013848 <MX_SPI1_Init>
	Get_Config();
 8013428:	f000 fd7a 	bl	8013f20 <Get_Config>
	MX_RNG_Init();
 801342c:	f000 f9ae 	bl	801378c <MX_RNG_Init>
	memset(&Hitachi_fault_injection_st,0,sizeof(HITACHI_FAULT_INJECTION_t));
 8013430:	2208      	movs	r2, #8
 8013432:	2100      	movs	r1, #0
 8013434:	484c      	ldr	r0, [pc, #304]	; (8013568 <main+0x18c>)
 8013436:	f00e fe51 	bl	80220dc <memset>
	HAL_Delay(250);
 801343a:	20fa      	movs	r0, #250	; 0xfa
 801343c:	f001 ff38 	bl	80152b0 <HAL_Delay>
	printf("\b\b\b\b\b\b\b\b\b\b");
 8013440:	484a      	ldr	r0, [pc, #296]	; (801356c <main+0x190>)
 8013442:	f00e ff33 	bl	80222ac <iprintf>
	printf("\n___________________________________ EiPC Start ____________________________\n");
 8013446:	484a      	ldr	r0, [pc, #296]	; (8013570 <main+0x194>)
 8013448:	f00e ffcc 	bl	80223e4 <puts>
	printf("\r\r\r\nLast Reset Reason:%s\n",ptr);
 801344c:	6879      	ldr	r1, [r7, #4]
 801344e:	4849      	ldr	r0, [pc, #292]	; (8013574 <main+0x198>)
 8013450:	f00e ff2c 	bl	80222ac <iprintf>
	Get_Build_Details();
 8013454:	f000 f90c 	bl	8013670 <Get_Build_Details>
	switch(EI_data.ProtocolType)
 8013458:	4b47      	ldr	r3, [pc, #284]	; (8013578 <main+0x19c>)
 801345a:	781b      	ldrb	r3, [r3, #0]
 801345c:	3b01      	subs	r3, #1
 801345e:	2b03      	cmp	r3, #3
 8013460:	d85f      	bhi.n	8013522 <main+0x146>
 8013462:	a201      	add	r2, pc, #4	; (adr r2, 8013468 <main+0x8c>)
 8013464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013468:	08013479 	.word	0x08013479
 801346c:	080134cb 	.word	0x080134cb
 8013470:	080134f3 	.word	0x080134f3
 8013474:	0801352b 	.word	0x0801352b
	{
	case HITACHI:
		printf("Protocol Selected is HITACHI\n");
 8013478:	4840      	ldr	r0, [pc, #256]	; (801357c <main+0x1a0>)
 801347a:	f00e ffb3 	bl	80223e4 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 801347e:	4840      	ldr	r0, [pc, #256]	; (8013580 <main+0x1a4>)
 8013480:	f00e ffb0 	bl	80223e4 <puts>
		MX_LWIP_Init();
 8013484:	f009 f832 	bl	801c4ec <MX_LWIP_Init>
		udpServer_init();
 8013488:	f7fb f9ca 	bl	800e820 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 801348c:	483d      	ldr	r0, [pc, #244]	; (8013584 <main+0x1a8>)
 801348e:	f00e ffa9 	bl	80223e4 <puts>
		if((EI_data.Hitachi_st.EnableSerialPort == 1) && (EI_data.Hitachi_st.BaudRate > 0) )
 8013492:	4b39      	ldr	r3, [pc, #228]	; (8013578 <main+0x19c>)
 8013494:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8013498:	2b01      	cmp	r3, #1
 801349a:	d111      	bne.n	80134c0 <main+0xe4>
 801349c:	4b36      	ldr	r3, [pc, #216]	; (8013578 <main+0x19c>)
 801349e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	d00c      	beq.n	80134c0 <main+0xe4>
		{
			printf("Initializing UART with Baudrate:%lu\n",EI_data.Hitachi_st.BaudRate);
 80134a6:	4b34      	ldr	r3, [pc, #208]	; (8013578 <main+0x19c>)
 80134a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80134ac:	4619      	mov	r1, r3
 80134ae:	4836      	ldr	r0, [pc, #216]	; (8013588 <main+0x1ac>)
 80134b0:	f00e fefc 	bl	80222ac <iprintf>
			UART4_Init(EI_data.Hitachi_st.BaudRate);
 80134b4:	4b30      	ldr	r3, [pc, #192]	; (8013578 <main+0x19c>)
 80134b6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80134ba:	4618      	mov	r0, r3
 80134bc:	f001 fa60 	bl	8014980 <UART4_Init>
		}
		print_self_Details();
 80134c0:	f7f4 ff32 	bl	8008328 <print_self_Details>
		Update_HitachiCommands();
 80134c4:	f7ed f9ee 	bl	80008a4 <Update_HitachiCommands>
		break;
 80134c8:	e030      	b.n	801352c <main+0x150>
	case SIEMENS:
		printf("Protocol Selected is SIEMENS\n");
 80134ca:	4830      	ldr	r0, [pc, #192]	; (801358c <main+0x1b0>)
 80134cc:	f00e ff8a 	bl	80223e4 <puts>
		printf("Initializing Ethernet Please Wait...!!\n");
 80134d0:	482b      	ldr	r0, [pc, #172]	; (8013580 <main+0x1a4>)
 80134d2:	f00e ff87 	bl	80223e4 <puts>
		MX_LWIP_Init();
 80134d6:	f009 f809 	bl	801c4ec <MX_LWIP_Init>
		udpServer_init();
 80134da:	f7fb f9a1 	bl	800e820 <udpServer_init>
		printf("Initializing Ethernet Done\n");
 80134de:	4829      	ldr	r0, [pc, #164]	; (8013584 <main+0x1a8>)
 80134e0:	f00e ff80 	bl	80223e4 <puts>
		print_self_DetailsSiemens();
 80134e4:	f7fb f882 	bl	800e5ec <print_self_DetailsSiemens>
		Update_SiemensCommands();
 80134e8:	f7f9 fd8c 	bl	800d004 <Update_SiemensCommands>
		UpdateSIGNALSNames();
 80134ec:	f7fa fba0 	bl	800dc30 <UpdateSIGNALSNames>
		break;
 80134f0:	e01c      	b.n	801352c <main+0x150>

	case MEDHA:
		printf("Protocol Selected is MEDHA\n");
 80134f2:	4827      	ldr	r0, [pc, #156]	; (8013590 <main+0x1b4>)
 80134f4:	f00e ff76 	bl	80223e4 <puts>
		if(EI_data.Medha_Prms_st.BaudRate > 0)
 80134f8:	4b1f      	ldr	r3, [pc, #124]	; (8013578 <main+0x19c>)
 80134fa:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d006      	beq.n	8013510 <main+0x134>
		{
			UART4_Init(EI_data.Medha_Prms_st.BaudRate);
 8013502:	4b1d      	ldr	r3, [pc, #116]	; (8013578 <main+0x19c>)
 8013504:	f8d3 3330 	ldr.w	r3, [r3, #816]	; 0x330
 8013508:	4618      	mov	r0, r3
 801350a:	f001 fa39 	bl	8014980 <UART4_Init>
 801350e:	e003      	b.n	8013518 <main+0x13c>
		}
		else
		{
			UART4_Init(115200);
 8013510:	f44f 30e1 	mov.w	r0, #115200	; 0x1c200
 8013514:	f001 fa34 	bl	8014980 <UART4_Init>
		}
		Update_MedhaCommands();
 8013518:	f7f7 f886 	bl	800a628 <Update_MedhaCommands>
		Print_Medha_Self_Details();
 801351c:	f7f6 fe44 	bl	800a1a8 <Print_Medha_Self_Details>
		break;
 8013520:	e004      	b.n	801352c <main+0x150>

	case KYOSAN:
		break;

	default:
		printf("Please Select Protocol Type\n");
 8013522:	481c      	ldr	r0, [pc, #112]	; (8013594 <main+0x1b8>)
 8013524:	f00e ff5e 	bl	80223e4 <puts>
		while(1);
 8013528:	e7fe      	b.n	8013528 <main+0x14c>
		break;
 801352a:	bf00      	nop
	}
	//	MX_CRC_Init();
	//	MX_RNG_Init();


	printf("Initialization Success\n");
 801352c:	481a      	ldr	r0, [pc, #104]	; (8013598 <main+0x1bc>)
 801352e:	f00e ff59 	bl	80223e4 <puts>

	MX_IWDG_Init();
 8013532:	f7ff fecb 	bl	80132cc <MX_IWDG_Init>
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */

	while (1)
	{
		switch(EI_data.ProtocolType)
 8013536:	4b10      	ldr	r3, [pc, #64]	; (8013578 <main+0x19c>)
 8013538:	781b      	ldrb	r3, [r3, #0]
 801353a:	2b03      	cmp	r3, #3
 801353c:	d00c      	beq.n	8013558 <main+0x17c>
 801353e:	2b03      	cmp	r3, #3
 8013540:	dc0d      	bgt.n	801355e <main+0x182>
 8013542:	2b01      	cmp	r3, #1
 8013544:	d002      	beq.n	801354c <main+0x170>
 8013546:	2b02      	cmp	r3, #2
 8013548:	d003      	beq.n	8013552 <main+0x176>
 801354a:	e008      	b.n	801355e <main+0x182>
		{
		case HITACHI:
			Process_HitachiEI();
 801354c:	f7f5 fbc0 	bl	8008cd0 <Process_HitachiEI>
			break;
 8013550:	e009      	b.n	8013566 <main+0x18a>

		case SIEMENS:
			Process_SiemensEI();
 8013552:	f7f7 fd8f 	bl	800b074 <Process_SiemensEI>
			break;
 8013556:	e006      	b.n	8013566 <main+0x18a>

		case MEDHA:
			Process_Medha_EI();
 8013558:	f7f5 fc9c 	bl	8008e94 <Process_Medha_EI>
			break;
 801355c:	e003      	b.n	8013566 <main+0x18a>

		default:
			printf("Please Select Protocol Type\n");
 801355e:	480d      	ldr	r0, [pc, #52]	; (8013594 <main+0x1b8>)
 8013560:	f00e ff40 	bl	80223e4 <puts>
			while(1);
 8013564:	e7fe      	b.n	8013564 <main+0x188>
		switch(EI_data.ProtocolType)
 8013566:	e7e6      	b.n	8013536 <main+0x15a>
 8013568:	2000195c 	.word	0x2000195c
 801356c:	08026a44 	.word	0x08026a44
 8013570:	08026a50 	.word	0x08026a50
 8013574:	08026aa0 	.word	0x08026aa0
 8013578:	20000304 	.word	0x20000304
 801357c:	08026abc 	.word	0x08026abc
 8013580:	08026adc 	.word	0x08026adc
 8013584:	08026b04 	.word	0x08026b04
 8013588:	08026b20 	.word	0x08026b20
 801358c:	08026b48 	.word	0x08026b48
 8013590:	08026b68 	.word	0x08026b68
 8013594:	08026b84 	.word	0x08026b84
 8013598:	08026ba0 	.word	0x08026ba0

0801359c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 801359c:	b580      	push	{r7, lr}
 801359e:	b094      	sub	sp, #80	; 0x50
 80135a0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80135a2:	f107 031c 	add.w	r3, r7, #28
 80135a6:	2234      	movs	r2, #52	; 0x34
 80135a8:	2100      	movs	r1, #0
 80135aa:	4618      	mov	r0, r3
 80135ac:	f00e fd96 	bl	80220dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80135b0:	f107 0308 	add.w	r3, r7, #8
 80135b4:	2200      	movs	r2, #0
 80135b6:	601a      	str	r2, [r3, #0]
 80135b8:	605a      	str	r2, [r3, #4]
 80135ba:	609a      	str	r2, [r3, #8]
 80135bc:	60da      	str	r2, [r3, #12]
 80135be:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80135c0:	4b29      	ldr	r3, [pc, #164]	; (8013668 <SystemClock_Config+0xcc>)
 80135c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135c4:	4a28      	ldr	r2, [pc, #160]	; (8013668 <SystemClock_Config+0xcc>)
 80135c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80135ca:	6413      	str	r3, [r2, #64]	; 0x40
 80135cc:	4b26      	ldr	r3, [pc, #152]	; (8013668 <SystemClock_Config+0xcc>)
 80135ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80135d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80135d4:	607b      	str	r3, [r7, #4]
 80135d6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80135d8:	4b24      	ldr	r3, [pc, #144]	; (801366c <SystemClock_Config+0xd0>)
 80135da:	681b      	ldr	r3, [r3, #0]
 80135dc:	4a23      	ldr	r2, [pc, #140]	; (801366c <SystemClock_Config+0xd0>)
 80135de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80135e2:	6013      	str	r3, [r2, #0]
 80135e4:	4b21      	ldr	r3, [pc, #132]	; (801366c <SystemClock_Config+0xd0>)
 80135e6:	681b      	ldr	r3, [r3, #0]
 80135e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80135ec:	603b      	str	r3, [r7, #0]
 80135ee:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80135f0:	2309      	movs	r3, #9
 80135f2:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80135f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80135f8:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80135fa:	2301      	movs	r3, #1
 80135fc:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80135fe:	2302      	movs	r3, #2
 8013600:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8013602:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8013606:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 6;
 8013608:	2306      	movs	r3, #6
 801360a:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 801360c:	23b4      	movs	r3, #180	; 0xb4
 801360e:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013610:	2302      	movs	r3, #2
 8013612:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 8;
 8013614:	2308      	movs	r3, #8
 8013616:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 8013618:	2302      	movs	r3, #2
 801361a:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801361c:	f107 031c 	add.w	r3, r7, #28
 8013620:	4618      	mov	r0, r3
 8013622:	f005 f9af 	bl	8018984 <HAL_RCC_OscConfig>
 8013626:	4603      	mov	r3, r0
 8013628:	2b00      	cmp	r3, #0
 801362a:	d001      	beq.n	8013630 <SystemClock_Config+0x94>
	{
		Error_Handler();
 801362c:	f000 f8a8 	bl	8013780 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013630:	230f      	movs	r3, #15
 8013632:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013634:	2302      	movs	r3, #2
 8013636:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013638:	2300      	movs	r3, #0
 801363a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 801363c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013640:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013642:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013646:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8013648:	f107 0308 	add.w	r3, r7, #8
 801364c:	2105      	movs	r1, #5
 801364e:	4618      	mov	r0, r3
 8013650:	f005 fc46 	bl	8018ee0 <HAL_RCC_ClockConfig>
 8013654:	4603      	mov	r3, r0
 8013656:	2b00      	cmp	r3, #0
 8013658:	d001      	beq.n	801365e <SystemClock_Config+0xc2>
	{
		Error_Handler();
 801365a:	f000 f891 	bl	8013780 <Error_Handler>
	}
}
 801365e:	bf00      	nop
 8013660:	3750      	adds	r7, #80	; 0x50
 8013662:	46bd      	mov	sp, r7
 8013664:	bd80      	pop	{r7, pc}
 8013666:	bf00      	nop
 8013668:	40023800 	.word	0x40023800
 801366c:	40007000 	.word	0x40007000

08013670 <Get_Build_Details>:

/* USER CODE BEGIN 4 */
void Get_Build_Details(void)
{
 8013670:	b580      	push	{r7, lr}
 8013672:	b08e      	sub	sp, #56	; 0x38
 8013674:	af00      	add	r7, sp, #0
	uint8_t CRC_Array[50] = {0,};
 8013676:	2300      	movs	r3, #0
 8013678:	607b      	str	r3, [r7, #4]
 801367a:	f107 0308 	add.w	r3, r7, #8
 801367e:	222e      	movs	r2, #46	; 0x2e
 8013680:	2100      	movs	r1, #0
 8013682:	4618      	mov	r0, r3
 8013684:	f00e fd2a 	bl	80220dc <memset>
	printf("\n_____________________________________________\n");
 8013688:	481d      	ldr	r0, [pc, #116]	; (8013700 <Get_Build_Details+0x90>)
 801368a:	f00e feab 	bl	80223e4 <puts>
	printf("Build Date:%s\n",__DATE__);
 801368e:	491d      	ldr	r1, [pc, #116]	; (8013704 <Get_Build_Details+0x94>)
 8013690:	481d      	ldr	r0, [pc, #116]	; (8013708 <Get_Build_Details+0x98>)
 8013692:	f00e fe0b 	bl	80222ac <iprintf>
	printf("Build Time:%s\n",__TIME__);
 8013696:	491d      	ldr	r1, [pc, #116]	; (801370c <Get_Build_Details+0x9c>)
 8013698:	481d      	ldr	r0, [pc, #116]	; (8013710 <Get_Build_Details+0xa0>)
 801369a:	f00e fe07 	bl	80222ac <iprintf>
	strcpy((char *)CRC_Array,(const char *)__DATE__);
 801369e:	1d3b      	adds	r3, r7, #4
 80136a0:	4a18      	ldr	r2, [pc, #96]	; (8013704 <Get_Build_Details+0x94>)
 80136a2:	ca07      	ldmia	r2, {r0, r1, r2}
 80136a4:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	strcat((char *)CRC_Array,(const char *)__TIME__);
 80136a8:	1d3b      	adds	r3, r7, #4
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7ec fdd2 	bl	8000254 <strlen>
 80136b0:	4603      	mov	r3, r0
 80136b2:	461a      	mov	r2, r3
 80136b4:	1d3b      	adds	r3, r7, #4
 80136b6:	4413      	add	r3, r2
 80136b8:	4914      	ldr	r1, [pc, #80]	; (801370c <Get_Build_Details+0x9c>)
 80136ba:	461a      	mov	r2, r3
 80136bc:	460b      	mov	r3, r1
 80136be:	cb03      	ldmia	r3!, {r0, r1}
 80136c0:	6010      	str	r0, [r2, #0]
 80136c2:	6051      	str	r1, [r2, #4]
 80136c4:	781b      	ldrb	r3, [r3, #0]
 80136c6:	7213      	strb	r3, [r2, #8]
	Build_CRC = GetCRC16(0, CRC_Array, strlen((const char *)CRC_Array));
 80136c8:	1d3b      	adds	r3, r7, #4
 80136ca:	4618      	mov	r0, r3
 80136cc:	f7ec fdc2 	bl	8000254 <strlen>
 80136d0:	4603      	mov	r3, r0
 80136d2:	b21a      	sxth	r2, r3
 80136d4:	1d3b      	adds	r3, r7, #4
 80136d6:	4619      	mov	r1, r3
 80136d8:	2000      	movs	r0, #0
 80136da:	f7ff f94b 	bl	8012974 <GetCRC16>
 80136de:	4603      	mov	r3, r0
 80136e0:	461a      	mov	r2, r3
 80136e2:	4b0c      	ldr	r3, [pc, #48]	; (8013714 <Get_Build_Details+0xa4>)
 80136e4:	801a      	strh	r2, [r3, #0]
	printf("Build Name:%s_VERSION:%s\n",__BUILD_NAME__,__BUILD_VERSION__);
 80136e6:	4a0c      	ldr	r2, [pc, #48]	; (8013718 <Get_Build_Details+0xa8>)
 80136e8:	490c      	ldr	r1, [pc, #48]	; (801371c <Get_Build_Details+0xac>)
 80136ea:	480d      	ldr	r0, [pc, #52]	; (8013720 <Get_Build_Details+0xb0>)
 80136ec:	f00e fdde 	bl	80222ac <iprintf>
	printf("_____________________________________________\n");
 80136f0:	480c      	ldr	r0, [pc, #48]	; (8013724 <Get_Build_Details+0xb4>)
 80136f2:	f00e fe77 	bl	80223e4 <puts>

}
 80136f6:	bf00      	nop
 80136f8:	3738      	adds	r7, #56	; 0x38
 80136fa:	46bd      	mov	sp, r7
 80136fc:	bd80      	pop	{r7, pc}
 80136fe:	bf00      	nop
 8013700:	08026bb8 	.word	0x08026bb8
 8013704:	08026be8 	.word	0x08026be8
 8013708:	08026bf4 	.word	0x08026bf4
 801370c:	08026c04 	.word	0x08026c04
 8013710:	08026c10 	.word	0x08026c10
 8013714:	20009c9c 	.word	0x20009c9c
 8013718:	08026c20 	.word	0x08026c20
 801371c:	08026c28 	.word	0x08026c28
 8013720:	08026c40 	.word	0x08026c40
 8013724:	08026c5c 	.word	0x08026c5c

08013728 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8013728:	b580      	push	{r7, lr}
 801372a:	b084      	sub	sp, #16
 801372c:	af00      	add	r7, sp, #0
	MPU_Region_InitTypeDef MPU_InitStruct = {0};
 801372e:	463b      	mov	r3, r7
 8013730:	2200      	movs	r2, #0
 8013732:	601a      	str	r2, [r3, #0]
 8013734:	605a      	str	r2, [r3, #4]
 8013736:	609a      	str	r2, [r3, #8]
 8013738:	60da      	str	r2, [r3, #12]

	/* Disables the MPU */
	HAL_MPU_Disable();
 801373a:	f002 fdc5 	bl	80162c8 <HAL_MPU_Disable>

	/** Initializes and configures the Region and the memory to be protected
	 */
	MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 801373e:	2301      	movs	r3, #1
 8013740:	703b      	strb	r3, [r7, #0]
	MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8013742:	2300      	movs	r3, #0
 8013744:	707b      	strb	r3, [r7, #1]
	MPU_InitStruct.BaseAddress = 0x0;
 8013746:	2300      	movs	r3, #0
 8013748:	607b      	str	r3, [r7, #4]
	MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 801374a:	231f      	movs	r3, #31
 801374c:	723b      	strb	r3, [r7, #8]
	MPU_InitStruct.SubRegionDisable = 0x87;
 801374e:	2387      	movs	r3, #135	; 0x87
 8013750:	727b      	strb	r3, [r7, #9]
	MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8013752:	2300      	movs	r3, #0
 8013754:	72bb      	strb	r3, [r7, #10]
	MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8013756:	2300      	movs	r3, #0
 8013758:	72fb      	strb	r3, [r7, #11]
	MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 801375a:	2301      	movs	r3, #1
 801375c:	733b      	strb	r3, [r7, #12]
	MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 801375e:	2301      	movs	r3, #1
 8013760:	737b      	strb	r3, [r7, #13]
	MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8013762:	2300      	movs	r3, #0
 8013764:	73bb      	strb	r3, [r7, #14]
	MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8013766:	2300      	movs	r3, #0
 8013768:	73fb      	strb	r3, [r7, #15]

	HAL_MPU_ConfigRegion(&MPU_InitStruct);
 801376a:	463b      	mov	r3, r7
 801376c:	4618      	mov	r0, r3
 801376e:	f002 fde3 	bl	8016338 <HAL_MPU_ConfigRegion>
	/* Enables the MPU */
	HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8013772:	2004      	movs	r0, #4
 8013774:	f002 fdc0 	bl	80162f8 <HAL_MPU_Enable>

}
 8013778:	bf00      	nop
 801377a:	3710      	adds	r7, #16
 801377c:	46bd      	mov	sp, r7
 801377e:	bd80      	pop	{r7, pc}

08013780 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8013780:	b480      	push	{r7}
 8013782:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8013784:	b672      	cpsid	i
}
 8013786:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8013788:	e7fe      	b.n	8013788 <Error_Handler+0x8>
	...

0801378c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 801378c:	b580      	push	{r7, lr}
 801378e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8013790:	4b06      	ldr	r3, [pc, #24]	; (80137ac <MX_RNG_Init+0x20>)
 8013792:	4a07      	ldr	r2, [pc, #28]	; (80137b0 <MX_RNG_Init+0x24>)
 8013794:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8013796:	4805      	ldr	r0, [pc, #20]	; (80137ac <MX_RNG_Init+0x20>)
 8013798:	f006 f9b0 	bl	8019afc <HAL_RNG_Init>
 801379c:	4603      	mov	r3, r0
 801379e:	2b00      	cmp	r3, #0
 80137a0:	d001      	beq.n	80137a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80137a2:	f7ff ffed 	bl	8013780 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80137a6:	bf00      	nop
 80137a8:	bd80      	pop	{r7, pc}
 80137aa:	bf00      	nop
 80137ac:	20009c78 	.word	0x20009c78
 80137b0:	50060800 	.word	0x50060800

080137b4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b0a8      	sub	sp, #160	; 0xa0
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80137bc:	f107 0310 	add.w	r3, r7, #16
 80137c0:	2290      	movs	r2, #144	; 0x90
 80137c2:	2100      	movs	r1, #0
 80137c4:	4618      	mov	r0, r3
 80137c6:	f00e fc89 	bl	80220dc <memset>
  if(rngHandle->Instance==RNG)
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	681b      	ldr	r3, [r3, #0]
 80137ce:	4a11      	ldr	r2, [pc, #68]	; (8013814 <HAL_RNG_MspInit+0x60>)
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d11b      	bne.n	801380c <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80137d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80137d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80137da:	2300      	movs	r3, #0
 80137dc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80137e0:	f107 0310 	add.w	r3, r7, #16
 80137e4:	4618      	mov	r0, r3
 80137e6:	f005 fd61 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 80137ea:	4603      	mov	r3, r0
 80137ec:	2b00      	cmp	r3, #0
 80137ee:	d001      	beq.n	80137f4 <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 80137f0:	f7ff ffc6 	bl	8013780 <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80137f4:	4b08      	ldr	r3, [pc, #32]	; (8013818 <HAL_RNG_MspInit+0x64>)
 80137f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80137f8:	4a07      	ldr	r2, [pc, #28]	; (8013818 <HAL_RNG_MspInit+0x64>)
 80137fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80137fe:	6353      	str	r3, [r2, #52]	; 0x34
 8013800:	4b05      	ldr	r3, [pc, #20]	; (8013818 <HAL_RNG_MspInit+0x64>)
 8013802:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013808:	60fb      	str	r3, [r7, #12]
 801380a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 801380c:	bf00      	nop
 801380e:	37a0      	adds	r7, #160	; 0xa0
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	50060800 	.word	0x50060800
 8013818:	40023800 	.word	0x40023800

0801381c <__NVIC_SystemReset>:
{
 801381c:	b480      	push	{r7}
 801381e:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013820:	f3bf 8f4f 	dsb	sy
}
 8013824:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013826:	4b06      	ldr	r3, [pc, #24]	; (8013840 <__NVIC_SystemReset+0x24>)
 8013828:	68db      	ldr	r3, [r3, #12]
 801382a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 801382e:	4904      	ldr	r1, [pc, #16]	; (8013840 <__NVIC_SystemReset+0x24>)
 8013830:	4b04      	ldr	r3, [pc, #16]	; (8013844 <__NVIC_SystemReset+0x28>)
 8013832:	4313      	orrs	r3, r2
 8013834:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013836:	f3bf 8f4f 	dsb	sy
}
 801383a:	bf00      	nop
    __NOP();
 801383c:	bf00      	nop
 801383e:	e7fd      	b.n	801383c <__NVIC_SystemReset+0x20>
 8013840:	e000ed00 	.word	0xe000ed00
 8013844:	05fa0004 	.word	0x05fa0004

08013848 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8013848:	b580      	push	{r7, lr}
 801384a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 801384c:	4b1b      	ldr	r3, [pc, #108]	; (80138bc <MX_SPI1_Init+0x74>)
 801384e:	4a1c      	ldr	r2, [pc, #112]	; (80138c0 <MX_SPI1_Init+0x78>)
 8013850:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8013852:	4b1a      	ldr	r3, [pc, #104]	; (80138bc <MX_SPI1_Init+0x74>)
 8013854:	f44f 7282 	mov.w	r2, #260	; 0x104
 8013858:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 801385a:	4b18      	ldr	r3, [pc, #96]	; (80138bc <MX_SPI1_Init+0x74>)
 801385c:	2200      	movs	r2, #0
 801385e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8013860:	4b16      	ldr	r3, [pc, #88]	; (80138bc <MX_SPI1_Init+0x74>)
 8013862:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8013866:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8013868:	4b14      	ldr	r3, [pc, #80]	; (80138bc <MX_SPI1_Init+0x74>)
 801386a:	2200      	movs	r2, #0
 801386c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 801386e:	4b13      	ldr	r3, [pc, #76]	; (80138bc <MX_SPI1_Init+0x74>)
 8013870:	2200      	movs	r2, #0
 8013872:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8013874:	4b11      	ldr	r3, [pc, #68]	; (80138bc <MX_SPI1_Init+0x74>)
 8013876:	f44f 7200 	mov.w	r2, #512	; 0x200
 801387a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 801387c:	4b0f      	ldr	r3, [pc, #60]	; (80138bc <MX_SPI1_Init+0x74>)
 801387e:	2208      	movs	r2, #8
 8013880:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8013882:	4b0e      	ldr	r3, [pc, #56]	; (80138bc <MX_SPI1_Init+0x74>)
 8013884:	2200      	movs	r2, #0
 8013886:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8013888:	4b0c      	ldr	r3, [pc, #48]	; (80138bc <MX_SPI1_Init+0x74>)
 801388a:	2200      	movs	r2, #0
 801388c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801388e:	4b0b      	ldr	r3, [pc, #44]	; (80138bc <MX_SPI1_Init+0x74>)
 8013890:	2200      	movs	r2, #0
 8013892:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8013894:	4b09      	ldr	r3, [pc, #36]	; (80138bc <MX_SPI1_Init+0x74>)
 8013896:	2207      	movs	r2, #7
 8013898:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801389a:	4b08      	ldr	r3, [pc, #32]	; (80138bc <MX_SPI1_Init+0x74>)
 801389c:	2200      	movs	r2, #0
 801389e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80138a0:	4b06      	ldr	r3, [pc, #24]	; (80138bc <MX_SPI1_Init+0x74>)
 80138a2:	2208      	movs	r2, #8
 80138a4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80138a6:	4805      	ldr	r0, [pc, #20]	; (80138bc <MX_SPI1_Init+0x74>)
 80138a8:	f006 f9bd 	bl	8019c26 <HAL_SPI_Init>
 80138ac:	4603      	mov	r3, r0
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	d001      	beq.n	80138b6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80138b2:	f7ff ff65 	bl	8013780 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80138b6:	bf00      	nop
 80138b8:	bd80      	pop	{r7, pc}
 80138ba:	bf00      	nop
 80138bc:	20009ca0 	.word	0x20009ca0
 80138c0:	40013000 	.word	0x40013000

080138c4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80138c4:	b580      	push	{r7, lr}
 80138c6:	b08c      	sub	sp, #48	; 0x30
 80138c8:	af00      	add	r7, sp, #0
 80138ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80138cc:	f107 031c 	add.w	r3, r7, #28
 80138d0:	2200      	movs	r2, #0
 80138d2:	601a      	str	r2, [r3, #0]
 80138d4:	605a      	str	r2, [r3, #4]
 80138d6:	609a      	str	r2, [r3, #8]
 80138d8:	60da      	str	r2, [r3, #12]
 80138da:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	4a33      	ldr	r2, [pc, #204]	; (80139b0 <HAL_SPI_MspInit+0xec>)
 80138e2:	4293      	cmp	r3, r2
 80138e4:	d160      	bne.n	80139a8 <HAL_SPI_MspInit+0xe4>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80138e6:	4b33      	ldr	r3, [pc, #204]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 80138e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138ea:	4a32      	ldr	r2, [pc, #200]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 80138ec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80138f0:	6453      	str	r3, [r2, #68]	; 0x44
 80138f2:	4b30      	ldr	r3, [pc, #192]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 80138f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80138f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80138fa:	61bb      	str	r3, [r7, #24]
 80138fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80138fe:	4b2d      	ldr	r3, [pc, #180]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 8013900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013902:	4a2c      	ldr	r2, [pc, #176]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 8013904:	f043 0301 	orr.w	r3, r3, #1
 8013908:	6313      	str	r3, [r2, #48]	; 0x30
 801390a:	4b2a      	ldr	r3, [pc, #168]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 801390c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801390e:	f003 0301 	and.w	r3, r3, #1
 8013912:	617b      	str	r3, [r7, #20]
 8013914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8013916:	4b27      	ldr	r3, [pc, #156]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 8013918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801391a:	4a26      	ldr	r2, [pc, #152]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 801391c:	f043 0308 	orr.w	r3, r3, #8
 8013920:	6313      	str	r3, [r2, #48]	; 0x30
 8013922:	4b24      	ldr	r3, [pc, #144]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 8013924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013926:	f003 0308 	and.w	r3, r3, #8
 801392a:	613b      	str	r3, [r7, #16]
 801392c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801392e:	4b21      	ldr	r3, [pc, #132]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 8013930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013932:	4a20      	ldr	r2, [pc, #128]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 8013934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013938:	6313      	str	r3, [r2, #48]	; 0x30
 801393a:	4b1e      	ldr	r3, [pc, #120]	; (80139b4 <HAL_SPI_MspInit+0xf0>)
 801393c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013942:	60fb      	str	r3, [r7, #12]
 8013944:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PD7     ------> SPI1_MOSI
    PG9     ------> SPI1_MISO
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin;
 8013946:	2320      	movs	r3, #32
 8013948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801394a:	2302      	movs	r3, #2
 801394c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801394e:	2300      	movs	r3, #0
 8013950:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013952:	2303      	movs	r3, #3
 8013954:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013956:	2305      	movs	r3, #5
 8013958:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_SCK_GPIO_Port, &GPIO_InitStruct);
 801395a:	f107 031c 	add.w	r3, r7, #28
 801395e:	4619      	mov	r1, r3
 8013960:	4815      	ldr	r0, [pc, #84]	; (80139b8 <HAL_SPI_MspInit+0xf4>)
 8013962:	f003 ffa5 	bl	80178b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MOSI_Pin;
 8013966:	2380      	movs	r3, #128	; 0x80
 8013968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801396a:	2302      	movs	r3, #2
 801396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801396e:	2300      	movs	r3, #0
 8013970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013972:	2303      	movs	r3, #3
 8013974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013976:	2305      	movs	r3, #5
 8013978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MOSI_GPIO_Port, &GPIO_InitStruct);
 801397a:	f107 031c 	add.w	r3, r7, #28
 801397e:	4619      	mov	r1, r3
 8013980:	480e      	ldr	r0, [pc, #56]	; (80139bc <HAL_SPI_MspInit+0xf8>)
 8013982:	f003 ff95 	bl	80178b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI1_MISO_Pin;
 8013986:	f44f 7300 	mov.w	r3, #512	; 0x200
 801398a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801398c:	2302      	movs	r3, #2
 801398e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013990:	2300      	movs	r3, #0
 8013992:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013994:	2303      	movs	r3, #3
 8013996:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8013998:	2305      	movs	r3, #5
 801399a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SPI1_MISO_GPIO_Port, &GPIO_InitStruct);
 801399c:	f107 031c 	add.w	r3, r7, #28
 80139a0:	4619      	mov	r1, r3
 80139a2:	4807      	ldr	r0, [pc, #28]	; (80139c0 <HAL_SPI_MspInit+0xfc>)
 80139a4:	f003 ff84 	bl	80178b0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80139a8:	bf00      	nop
 80139aa:	3730      	adds	r7, #48	; 0x30
 80139ac:	46bd      	mov	sp, r7
 80139ae:	bd80      	pop	{r7, pc}
 80139b0:	40013000 	.word	0x40013000
 80139b4:	40023800 	.word	0x40023800
 80139b8:	40020000 	.word	0x40020000
 80139bc:	40020c00 	.word	0x40020c00
 80139c0:	40021800 	.word	0x40021800

080139c4 <SPI_WriteInFlash>:

	SPI_WriteInFlash(uc_ChipSel,Ul_MemAddr,us_Size,pp_DataPtr);
}

uint8_t  SPI_WriteInFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 80139c4:	b580      	push	{r7, lr}
 80139c6:	b086      	sub	sp, #24
 80139c8:	af00      	add	r7, sp, #0
 80139ca:	60b9      	str	r1, [r7, #8]
 80139cc:	607b      	str	r3, [r7, #4]
 80139ce:	4603      	mov	r3, r0
 80139d0:	73fb      	strb	r3, [r7, #15]
 80139d2:	4613      	mov	r3, r2
 80139d4:	81bb      	strh	r3, [r7, #12]

	uint8_t Return_Value=0;
 80139d6:	2300      	movs	r3, #0
 80139d8:	75fb      	strb	r3, [r7, #23]
	switch(Chip)
 80139da:	7bfb      	ldrb	r3, [r7, #15]
 80139dc:	3b01      	subs	r3, #1
 80139de:	2b03      	cmp	r3, #3
 80139e0:	d828      	bhi.n	8013a34 <SPI_WriteInFlash+0x70>
 80139e2:	a201      	add	r2, pc, #4	; (adr r2, 80139e8 <SPI_WriteInFlash+0x24>)
 80139e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80139e8:	080139f9 	.word	0x080139f9
 80139ec:	08013a09 	.word	0x08013a09
 80139f0:	08013a17 	.word	0x08013a17
 80139f4:	08013a25 	.word	0x08013a25
	{
	case CHIP1://To select FLASH1
		CHIP_Port = CS1_GPIO_Port;
 80139f8:	4b75      	ldr	r3, [pc, #468]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 80139fa:	4a76      	ldr	r2, [pc, #472]	; (8013bd4 <SPI_WriteInFlash+0x210>)
 80139fc:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 80139fe:	4b76      	ldr	r3, [pc, #472]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013a04:	601a      	str	r2, [r3, #0]
		break;
 8013a06:	e018      	b.n	8013a3a <SPI_WriteInFlash+0x76>
	case CHIP2://To select FLASH2
		CHIP_Port = CS2_GPIO_Port;
 8013a08:	4b71      	ldr	r3, [pc, #452]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a0a:	4a74      	ldr	r2, [pc, #464]	; (8013bdc <SPI_WriteInFlash+0x218>)
 8013a0c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013a0e:	4b72      	ldr	r3, [pc, #456]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a10:	2220      	movs	r2, #32
 8013a12:	601a      	str	r2, [r3, #0]
		break;
 8013a14:	e011      	b.n	8013a3a <SPI_WriteInFlash+0x76>
	case CHIP3://To select FLASH3
		CHIP_Port = CS3_GPIO_Port;
 8013a16:	4b6e      	ldr	r3, [pc, #440]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a18:	4a70      	ldr	r2, [pc, #448]	; (8013bdc <SPI_WriteInFlash+0x218>)
 8013a1a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013a1c:	4b6e      	ldr	r3, [pc, #440]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a1e:	2240      	movs	r2, #64	; 0x40
 8013a20:	601a      	str	r2, [r3, #0]
		break;
 8013a22:	e00a      	b.n	8013a3a <SPI_WriteInFlash+0x76>
	case CHIP4://To select FLASH4
		CHIP_Port = CS4_GPIO_Port;
 8013a24:	4b6a      	ldr	r3, [pc, #424]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a26:	4a6e      	ldr	r2, [pc, #440]	; (8013be0 <SPI_WriteInFlash+0x21c>)
 8013a28:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013a2a:	4b6b      	ldr	r3, [pc, #428]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013a30:	601a      	str	r2, [r3, #0]
		break;
 8013a32:	e002      	b.n	8013a3a <SPI_WriteInFlash+0x76>
	default:printf("Wrong Chip selection\n");
 8013a34:	486b      	ldr	r0, [pc, #428]	; (8013be4 <SPI_WriteInFlash+0x220>)
 8013a36:	f00e fcd5 	bl	80223e4 <puts>
	}
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013a3a:	4b65      	ldr	r3, [pc, #404]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a3c:	681b      	ldr	r3, [r3, #0]
 8013a3e:	4a66      	ldr	r2, [pc, #408]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a40:	6812      	ldr	r2, [r2, #0]
 8013a42:	b291      	uxth	r1, r2
 8013a44:	2201      	movs	r2, #1
 8013a46:	4618      	mov	r0, r3
 8013a48:	f004 f8f6 	bl	8017c38 <HAL_GPIO_WritePin>





	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013a4c:	4b60      	ldr	r3, [pc, #384]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	4a61      	ldr	r2, [pc, #388]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a52:	6812      	ldr	r2, [r2, #0]
 8013a54:	b291      	uxth	r1, r2
 8013a56:	2200      	movs	r2, #0
 8013a58:	4618      	mov	r0, r3
 8013a5a:	f004 f8ed 	bl	8017c38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable=0x06 */
 8013a5e:	2364      	movs	r3, #100	; 0x64
 8013a60:	2201      	movs	r2, #1
 8013a62:	4961      	ldr	r1, [pc, #388]	; (8013be8 <SPI_WriteInFlash+0x224>)
 8013a64:	4861      	ldr	r0, [pc, #388]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013a66:	f006 f989 	bl	8019d7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013a6a:	4b59      	ldr	r3, [pc, #356]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a6c:	681b      	ldr	r3, [r3, #0]
 8013a6e:	4a5a      	ldr	r2, [pc, #360]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a70:	6812      	ldr	r2, [r2, #0]
 8013a72:	b291      	uxth	r1, r2
 8013a74:	2201      	movs	r2, #1
 8013a76:	4618      	mov	r0, r3
 8013a78:	f004 f8de 	bl	8017c38 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013a7c:	4b54      	ldr	r3, [pc, #336]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	4a55      	ldr	r2, [pc, #340]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013a82:	6812      	ldr	r2, [r2, #0]
 8013a84:	b291      	uxth	r1, r2
 8013a86:	2200      	movs	r2, #0
 8013a88:	4618      	mov	r0, r3
 8013a8a:	f004 f8d5 	bl	8017c38 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);/* check status to see if write enabled is latched=0x05 */
 8013a8e:	2364      	movs	r3, #100	; 0x64
 8013a90:	2201      	movs	r2, #1
 8013a92:	4957      	ldr	r1, [pc, #348]	; (8013bf0 <SPI_WriteInFlash+0x22c>)
 8013a94:	4855      	ldr	r0, [pc, #340]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013a96:	f006 f971 	bl	8019d7c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013a9a:	2364      	movs	r3, #100	; 0x64
 8013a9c:	2201      	movs	r2, #1
 8013a9e:	4955      	ldr	r1, [pc, #340]	; (8013bf4 <SPI_WriteInFlash+0x230>)
 8013aa0:	4852      	ldr	r0, [pc, #328]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013aa2:	f006 fad9 	bl	801a058 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013aa6:	4b4a      	ldr	r3, [pc, #296]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	4a4b      	ldr	r2, [pc, #300]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013aac:	6812      	ldr	r2, [r2, #0]
 8013aae:	b291      	uxth	r1, r2
 8013ab0:	2201      	movs	r2, #1
 8013ab2:	4618      	mov	r0, r3
 8013ab4:	f004 f8c0 	bl	8017c38 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013ab8:	4b4e      	ldr	r3, [pc, #312]	; (8013bf4 <SPI_WriteInFlash+0x230>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	f003 0302 	and.w	r3, r3, #2
 8013ac0:	2b00      	cmp	r3, #0
 8013ac2:	d103      	bne.n	8013acc <SPI_WriteInFlash+0x108>
			break;
		}
		else
		{

			printf("\n Write enable not latched.......");
 8013ac4:	484c      	ldr	r0, [pc, #304]	; (8013bf8 <SPI_WriteInFlash+0x234>)
 8013ac6:	f00e fbf1 	bl	80222ac <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013aca:	e7d7      	b.n	8013a7c <SPI_WriteInFlash+0xb8>
			break;
 8013acc:	bf00      	nop
		}
	}

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013ace:	4b40      	ldr	r3, [pc, #256]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	4a41      	ldr	r2, [pc, #260]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013ad4:	6812      	ldr	r2, [r2, #0]
 8013ad6:	b291      	uxth	r1, r2
 8013ad8:	2200      	movs	r2, #0
 8013ada:	4618      	mov	r0, r3
 8013adc:	f004 f8ac 	bl	8017c38 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRITE;/* Write command 0x02 */
 8013ae0:	2202      	movs	r2, #2
 8013ae2:	4b46      	ldr	r3, [pc, #280]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013ae4:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;/* Read address offset is 0x000000 */
 8013ae6:	68bb      	ldr	r3, [r7, #8]
 8013ae8:	0c1b      	lsrs	r3, r3, #16
 8013aea:	b2da      	uxtb	r2, r3
 8013aec:	4b43      	ldr	r3, [pc, #268]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013aee:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013af0:	68bb      	ldr	r3, [r7, #8]
 8013af2:	0a1b      	lsrs	r3, r3, #8
 8013af4:	b2da      	uxtb	r2, r3
 8013af6:	4b41      	ldr	r3, [pc, #260]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013af8:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013afa:	68bb      	ldr	r3, [r7, #8]
 8013afc:	b2da      	uxtb	r2, r3
 8013afe:	4b3f      	ldr	r3, [pc, #252]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013b00:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013b02:	2364      	movs	r3, #100	; 0x64
 8013b04:	2204      	movs	r2, #4
 8013b06:	493d      	ldr	r1, [pc, #244]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013b08:	4838      	ldr	r0, [pc, #224]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013b0a:	f006 f937 	bl	8019d7c <HAL_SPI_Transmit>

	HAL_SPI_Transmit(&hspi1, uc_pp_Buff,uc_Len , 1000);
 8013b0e:	89ba      	ldrh	r2, [r7, #12]
 8013b10:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013b14:	6879      	ldr	r1, [r7, #4]
 8013b16:	4835      	ldr	r0, [pc, #212]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013b18:	f006 f930 	bl	8019d7c <HAL_SPI_Transmit>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013b1c:	4b2c      	ldr	r3, [pc, #176]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	4a2d      	ldr	r2, [pc, #180]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013b22:	6812      	ldr	r2, [r2, #0]
 8013b24:	b291      	uxth	r1, r2
 8013b26:	2201      	movs	r2, #1
 8013b28:	4618      	mov	r0, r3
 8013b2a:	f004 f885 	bl	8017c38 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013b2e:	4b28      	ldr	r3, [pc, #160]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	4a29      	ldr	r2, [pc, #164]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013b34:	6812      	ldr	r2, [r2, #0]
 8013b36:	b291      	uxth	r1, r2
 8013b38:	2200      	movs	r2, #0
 8013b3a:	4618      	mov	r0, r3
 8013b3c:	f004 f87c 	bl	8017c38 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8013b40:	2205      	movs	r2, #5
 8013b42:	4b2e      	ldr	r3, [pc, #184]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013b44:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013b46:	2364      	movs	r3, #100	; 0x64
 8013b48:	2201      	movs	r2, #1
 8013b4a:	492c      	ldr	r1, [pc, #176]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013b4c:	4827      	ldr	r0, [pc, #156]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013b4e:	f006 f915 	bl	8019d7c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013b52:	2364      	movs	r3, #100	; 0x64
 8013b54:	2201      	movs	r2, #1
 8013b56:	4927      	ldr	r1, [pc, #156]	; (8013bf4 <SPI_WriteInFlash+0x230>)
 8013b58:	4824      	ldr	r0, [pc, #144]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013b5a:	f006 fa7d 	bl	801a058 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013b5e:	4b1c      	ldr	r3, [pc, #112]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013b60:	681b      	ldr	r3, [r3, #0]
 8013b62:	4a1d      	ldr	r2, [pc, #116]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013b64:	6812      	ldr	r2, [r2, #0]
 8013b66:	b291      	uxth	r1, r2
 8013b68:	2201      	movs	r2, #1
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	f004 f864 	bl	8017c38 <HAL_GPIO_WritePin>
		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8013b70:	4b20      	ldr	r3, [pc, #128]	; (8013bf4 <SPI_WriteInFlash+0x230>)
 8013b72:	781b      	ldrb	r3, [r3, #0]
 8013b74:	f003 0301 	and.w	r3, r3, #1
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d1d8      	bne.n	8013b2e <SPI_WriteInFlash+0x16a>
		{
			Return_Value=1;
 8013b7c:	2301      	movs	r3, #1
 8013b7e:	75fb      	strb	r3, [r7, #23]
			//int	ui_test = 1;
			//printf("ui_test in write flash=%d\n",ui_test);
			break;
 8013b80:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013b82:	4b13      	ldr	r3, [pc, #76]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	4a14      	ldr	r2, [pc, #80]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013b88:	6812      	ldr	r2, [r2, #0]
 8013b8a:	b291      	uxth	r1, r2
 8013b8c:	2200      	movs	r2, #0
 8013b8e:	4618      	mov	r0, r3
 8013b90:	f004 f852 	bl	8017c38 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8013b94:	2204      	movs	r2, #4
 8013b96:	4b19      	ldr	r3, [pc, #100]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013b98:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013b9a:	2364      	movs	r3, #100	; 0x64
 8013b9c:	2201      	movs	r2, #1
 8013b9e:	4917      	ldr	r1, [pc, #92]	; (8013bfc <SPI_WriteInFlash+0x238>)
 8013ba0:	4812      	ldr	r0, [pc, #72]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013ba2:	f006 f8eb 	bl	8019d7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013ba6:	2364      	movs	r3, #100	; 0x64
 8013ba8:	2201      	movs	r2, #1
 8013baa:	4912      	ldr	r1, [pc, #72]	; (8013bf4 <SPI_WriteInFlash+0x230>)
 8013bac:	480f      	ldr	r0, [pc, #60]	; (8013bec <SPI_WriteInFlash+0x228>)
 8013bae:	f006 fa53 	bl	801a058 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013bb2:	4b07      	ldr	r3, [pc, #28]	; (8013bd0 <SPI_WriteInFlash+0x20c>)
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a08      	ldr	r2, [pc, #32]	; (8013bd8 <SPI_WriteInFlash+0x214>)
 8013bb8:	6812      	ldr	r2, [r2, #0]
 8013bba:	b291      	uxth	r1, r2
 8013bbc:	2201      	movs	r2, #1
 8013bbe:	4618      	mov	r0, r3
 8013bc0:	f004 f83a 	bl	8017c38 <HAL_GPIO_WritePin>

	return Return_Value;
 8013bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bc6:	4618      	mov	r0, r3
 8013bc8:	3718      	adds	r7, #24
 8013bca:	46bd      	mov	sp, r7
 8013bcc:	bd80      	pop	{r7, pc}
 8013bce:	bf00      	nop
 8013bd0:	20009c94 	.word	0x20009c94
 8013bd4:	40021800 	.word	0x40021800
 8013bd8:	20009c98 	.word	0x20009c98
 8013bdc:	40020c00 	.word	0x40020c00
 8013be0:	40021000 	.word	0x40021000
 8013be4:	08026c8c 	.word	0x08026c8c
 8013be8:	08028b2c 	.word	0x08028b2c
 8013bec:	20009ca0 	.word	0x20009ca0
 8013bf0:	08028b2d 	.word	0x08028b2d
 8013bf4:	20009c90 	.word	0x20009c90
 8013bf8:	08026ca4 	.word	0x08026ca4
 8013bfc:	20009c8c 	.word	0x20009c8c

08013c00 <SPI_MemoryEraseBySector>:


int SPI_MemoryEraseBySector(uint8_t Chip,uint32_t Ul_Address){
 8013c00:	b580      	push	{r7, lr}
 8013c02:	b084      	sub	sp, #16
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	6039      	str	r1, [r7, #0]
 8013c0a:	71fb      	strb	r3, [r7, #7]

	int	Flash_Erase=0;
 8013c0c:	2300      	movs	r3, #0
 8013c0e:	60fb      	str	r3, [r7, #12]

	switch(Chip)
 8013c10:	79fb      	ldrb	r3, [r7, #7]
 8013c12:	3b01      	subs	r3, #1
 8013c14:	2b03      	cmp	r3, #3
 8013c16:	d829      	bhi.n	8013c6c <SPI_MemoryEraseBySector+0x6c>
 8013c18:	a201      	add	r2, pc, #4	; (adr r2, 8013c20 <SPI_MemoryEraseBySector+0x20>)
 8013c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c1e:	bf00      	nop
 8013c20:	08013c31 	.word	0x08013c31
 8013c24:	08013c41 	.word	0x08013c41
 8013c28:	08013c4f 	.word	0x08013c4f
 8013c2c:	08013c5d 	.word	0x08013c5d
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8013c30:	4b6d      	ldr	r3, [pc, #436]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013c32:	4a6e      	ldr	r2, [pc, #440]	; (8013dec <SPI_MemoryEraseBySector+0x1ec>)
 8013c34:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013c36:	4b6e      	ldr	r3, [pc, #440]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013c38:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013c3c:	601a      	str	r2, [r3, #0]
		break;
 8013c3e:	e018      	b.n	8013c72 <SPI_MemoryEraseBySector+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8013c40:	4b69      	ldr	r3, [pc, #420]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013c42:	4a6c      	ldr	r2, [pc, #432]	; (8013df4 <SPI_MemoryEraseBySector+0x1f4>)
 8013c44:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013c46:	4b6a      	ldr	r3, [pc, #424]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013c48:	2220      	movs	r2, #32
 8013c4a:	601a      	str	r2, [r3, #0]
		break;
 8013c4c:	e011      	b.n	8013c72 <SPI_MemoryEraseBySector+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8013c4e:	4b66      	ldr	r3, [pc, #408]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013c50:	4a68      	ldr	r2, [pc, #416]	; (8013df4 <SPI_MemoryEraseBySector+0x1f4>)
 8013c52:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013c54:	4b66      	ldr	r3, [pc, #408]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013c56:	2240      	movs	r2, #64	; 0x40
 8013c58:	601a      	str	r2, [r3, #0]
		break;
 8013c5a:	e00a      	b.n	8013c72 <SPI_MemoryEraseBySector+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8013c5c:	4b62      	ldr	r3, [pc, #392]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013c5e:	4a66      	ldr	r2, [pc, #408]	; (8013df8 <SPI_MemoryEraseBySector+0x1f8>)
 8013c60:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013c62:	4b63      	ldr	r3, [pc, #396]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013c64:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013c68:	601a      	str	r2, [r3, #0]
		break;
 8013c6a:	e002      	b.n	8013c72 <SPI_MemoryEraseBySector+0x72>
	default:printf("Wrong Chip selection\n");
 8013c6c:	4863      	ldr	r0, [pc, #396]	; (8013dfc <SPI_MemoryEraseBySector+0x1fc>)
 8013c6e:	f00e fbb9 	bl	80223e4 <puts>
	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013c72:	4b5d      	ldr	r3, [pc, #372]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	4a5e      	ldr	r2, [pc, #376]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013c78:	6812      	ldr	r2, [r2, #0]
 8013c7a:	b291      	uxth	r1, r2
 8013c7c:	2200      	movs	r2, #0
 8013c7e:	4618      	mov	r0, r3
 8013c80:	f003 ffda 	bl	8017c38 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_WREN, 1, 100);/* write enable */
 8013c84:	2364      	movs	r3, #100	; 0x64
 8013c86:	2201      	movs	r2, #1
 8013c88:	495d      	ldr	r1, [pc, #372]	; (8013e00 <SPI_MemoryEraseBySector+0x200>)
 8013c8a:	485e      	ldr	r0, [pc, #376]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013c8c:	f006 f876 	bl	8019d7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013c90:	4b55      	ldr	r3, [pc, #340]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013c92:	681b      	ldr	r3, [r3, #0]
 8013c94:	4a56      	ldr	r2, [pc, #344]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013c96:	6812      	ldr	r2, [r2, #0]
 8013c98:	b291      	uxth	r1, r2
 8013c9a:	2201      	movs	r2, #1
 8013c9c:	4618      	mov	r0, r3
 8013c9e:	f003 ffcb 	bl	8017c38 <HAL_GPIO_WritePin>

	while (1)
	{

		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013ca2:	4b51      	ldr	r3, [pc, #324]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	4a52      	ldr	r2, [pc, #328]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013ca8:	6812      	ldr	r2, [r2, #0]
 8013caa:	b291      	uxth	r1, r2
 8013cac:	2200      	movs	r2, #0
 8013cae:	4618      	mov	r0, r3
 8013cb0:	f003 ffc2 	bl	8017c38 <HAL_GPIO_WritePin>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&EEPROM_RDSR, sizeof(EEPROM_RDSR), 100);
 8013cb4:	2364      	movs	r3, #100	; 0x64
 8013cb6:	2201      	movs	r2, #1
 8013cb8:	4953      	ldr	r1, [pc, #332]	; (8013e08 <SPI_MemoryEraseBySector+0x208>)
 8013cba:	4852      	ldr	r0, [pc, #328]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013cbc:	f006 f85e 	bl	8019d7c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013cc0:	2364      	movs	r3, #100	; 0x64
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	4951      	ldr	r1, [pc, #324]	; (8013e0c <SPI_MemoryEraseBySector+0x20c>)
 8013cc6:	484f      	ldr	r0, [pc, #316]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013cc8:	f006 f9c6 	bl	801a058 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013ccc:	4b46      	ldr	r3, [pc, #280]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	4a47      	ldr	r2, [pc, #284]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013cd2:	6812      	ldr	r2, [r2, #0]
 8013cd4:	b291      	uxth	r1, r2
 8013cd6:	2201      	movs	r2, #1
 8013cd8:	4618      	mov	r0, r3
 8013cda:	f003 ffad 	bl	8017c38 <HAL_GPIO_WritePin>
		if ( (SPI_RX_Data & 0x02) == 0x02 )	/* bit 0 is ready, bit 1 is write enable */
 8013cde:	4b4b      	ldr	r3, [pc, #300]	; (8013e0c <SPI_MemoryEraseBySector+0x20c>)
 8013ce0:	781b      	ldrb	r3, [r3, #0]
 8013ce2:	f003 0302 	and.w	r3, r3, #2
 8013ce6:	2b00      	cmp	r3, #0
 8013ce8:	d103      	bne.n	8013cf2 <SPI_MemoryEraseBySector+0xf2>
			break;
		}
		else
		{

			printf("\n Write enable not latched in erase mode.......");
 8013cea:	4849      	ldr	r0, [pc, #292]	; (8013e10 <SPI_MemoryEraseBySector+0x210>)
 8013cec:	f00e fade 	bl	80222ac <iprintf>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013cf0:	e7d7      	b.n	8013ca2 <SPI_MemoryEraseBySector+0xa2>
			break;
 8013cf2:	bf00      	nop
		}
	}
	//printf("\nMemory Erase operation started");

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013cf4:	4b3c      	ldr	r3, [pc, #240]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	4a3d      	ldr	r2, [pc, #244]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013cfa:	6812      	ldr	r2, [r2, #0]
 8013cfc:	b291      	uxth	r1, r2
 8013cfe:	2200      	movs	r2, #0
 8013d00:	4618      	mov	r0, r3
 8013d02:	f003 ff99 	bl	8017c38 <HAL_GPIO_WritePin>
	spi_cmd[0]=0x20;/* Bluck Erase command is 0xC7, low 256 bytes only */
 8013d06:	4b43      	ldr	r3, [pc, #268]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d08:	2220      	movs	r2, #32
 8013d0a:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8013d0c:	683b      	ldr	r3, [r7, #0]
 8013d0e:	0c1b      	lsrs	r3, r3, #16
 8013d10:	b2da      	uxtb	r2, r3
 8013d12:	4b40      	ldr	r3, [pc, #256]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d14:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013d16:	683b      	ldr	r3, [r7, #0]
 8013d18:	0a1b      	lsrs	r3, r3, #8
 8013d1a:	b2da      	uxtb	r2, r3
 8013d1c:	4b3d      	ldr	r3, [pc, #244]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d1e:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013d20:	683b      	ldr	r3, [r7, #0]
 8013d22:	b2da      	uxtb	r2, r3
 8013d24:	4b3b      	ldr	r3, [pc, #236]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d26:	70da      	strb	r2, [r3, #3]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013d28:	2364      	movs	r3, #100	; 0x64
 8013d2a:	2204      	movs	r2, #4
 8013d2c:	4939      	ldr	r1, [pc, #228]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d2e:	4835      	ldr	r0, [pc, #212]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013d30:	f006 f824 	bl	8019d7c <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d34:	4b2c      	ldr	r3, [pc, #176]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	4a2d      	ldr	r2, [pc, #180]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013d3a:	6812      	ldr	r2, [r2, #0]
 8013d3c:	b291      	uxth	r1, r2
 8013d3e:	2201      	movs	r2, #1
 8013d40:	4618      	mov	r0, r3
 8013d42:	f003 ff79 	bl	8017c38 <HAL_GPIO_WritePin>

	while (1)
	{
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d46:	4b28      	ldr	r3, [pc, #160]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013d48:	681b      	ldr	r3, [r3, #0]
 8013d4a:	4a29      	ldr	r2, [pc, #164]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013d4c:	6812      	ldr	r2, [r2, #0]
 8013d4e:	b291      	uxth	r1, r2
 8013d50:	2200      	movs	r2, #0
 8013d52:	4618      	mov	r0, r3
 8013d54:	f003 ff70 	bl	8017c38 <HAL_GPIO_WritePin>
		spi_cmd[0]=EEPROM_RDSR;/* check status to see if write cycle is done or not */
 8013d58:	2205      	movs	r2, #5
 8013d5a:	4b2e      	ldr	r3, [pc, #184]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d5c:	701a      	strb	r2, [r3, #0]
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013d5e:	2364      	movs	r3, #100	; 0x64
 8013d60:	2201      	movs	r2, #1
 8013d62:	492c      	ldr	r1, [pc, #176]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013d64:	4827      	ldr	r0, [pc, #156]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013d66:	f006 f809 	bl	8019d7c <HAL_SPI_Transmit>
		HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013d6a:	2364      	movs	r3, #100	; 0x64
 8013d6c:	2201      	movs	r2, #1
 8013d6e:	4927      	ldr	r1, [pc, #156]	; (8013e0c <SPI_MemoryEraseBySector+0x20c>)
 8013d70:	4824      	ldr	r0, [pc, #144]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013d72:	f006 f971 	bl	801a058 <HAL_SPI_Receive>
		HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013d76:	4b1c      	ldr	r3, [pc, #112]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013d78:	681b      	ldr	r3, [r3, #0]
 8013d7a:	4a1d      	ldr	r2, [pc, #116]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013d7c:	6812      	ldr	r2, [r2, #0]
 8013d7e:	b291      	uxth	r1, r2
 8013d80:	2201      	movs	r2, #1
 8013d82:	4618      	mov	r0, r3
 8013d84:	f003 ff58 	bl	8017c38 <HAL_GPIO_WritePin>

		if((SPI_RX_Data & 0x01) == 0x00 )	/* bit 0 to 0 is ready */
 8013d88:	4b20      	ldr	r3, [pc, #128]	; (8013e0c <SPI_MemoryEraseBySector+0x20c>)
 8013d8a:	781b      	ldrb	r3, [r3, #0]
 8013d8c:	f003 0301 	and.w	r3, r3, #1
 8013d90:	2b00      	cmp	r3, #0
 8013d92:	d1d8      	bne.n	8013d46 <SPI_MemoryEraseBySector+0x146>
		{
			Flash_Erase = 1;
 8013d94:	2301      	movs	r3, #1
 8013d96:	60fb      	str	r3, [r7, #12]
			//printf("\nui_test in earse=%d",Flash_Erase);
			break;
 8013d98:	bf00      	nop
		{
			;//DisplayString("\nDevice is busy in Erasing.....",DisPort);
		}
	}
	/*Write Disable*/
	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013d9a:	4b13      	ldr	r3, [pc, #76]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	4a14      	ldr	r2, [pc, #80]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013da0:	6812      	ldr	r2, [r2, #0]
 8013da2:	b291      	uxth	r1, r2
 8013da4:	2200      	movs	r2, #0
 8013da6:	4618      	mov	r0, r3
 8013da8:	f003 ff46 	bl	8017c38 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_WRDI;/* write disable */
 8013dac:	2204      	movs	r2, #4
 8013dae:	4b19      	ldr	r3, [pc, #100]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013db0:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 1, 100);
 8013db2:	2364      	movs	r3, #100	; 0x64
 8013db4:	2201      	movs	r2, #1
 8013db6:	4917      	ldr	r1, [pc, #92]	; (8013e14 <SPI_MemoryEraseBySector+0x214>)
 8013db8:	4812      	ldr	r0, [pc, #72]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013dba:	f005 ffdf 	bl	8019d7c <HAL_SPI_Transmit>

	HAL_SPI_Receive(&hspi1, &SPI_RX_Data, sizeof(SPI_RX_Data), 100);
 8013dbe:	2364      	movs	r3, #100	; 0x64
 8013dc0:	2201      	movs	r2, #1
 8013dc2:	4912      	ldr	r1, [pc, #72]	; (8013e0c <SPI_MemoryEraseBySector+0x20c>)
 8013dc4:	480f      	ldr	r0, [pc, #60]	; (8013e04 <SPI_MemoryEraseBySector+0x204>)
 8013dc6:	f006 f947 	bl	801a058 <HAL_SPI_Receive>

	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013dca:	4b07      	ldr	r3, [pc, #28]	; (8013de8 <SPI_MemoryEraseBySector+0x1e8>)
 8013dcc:	681b      	ldr	r3, [r3, #0]
 8013dce:	4a08      	ldr	r2, [pc, #32]	; (8013df0 <SPI_MemoryEraseBySector+0x1f0>)
 8013dd0:	6812      	ldr	r2, [r2, #0]
 8013dd2:	b291      	uxth	r1, r2
 8013dd4:	2201      	movs	r2, #1
 8013dd6:	4618      	mov	r0, r3
 8013dd8:	f003 ff2e 	bl	8017c38 <HAL_GPIO_WritePin>
	return Flash_Erase;
 8013ddc:	68fb      	ldr	r3, [r7, #12]

}
 8013dde:	4618      	mov	r0, r3
 8013de0:	3710      	adds	r7, #16
 8013de2:	46bd      	mov	sp, r7
 8013de4:	bd80      	pop	{r7, pc}
 8013de6:	bf00      	nop
 8013de8:	20009c94 	.word	0x20009c94
 8013dec:	40021800 	.word	0x40021800
 8013df0:	20009c98 	.word	0x20009c98
 8013df4:	40020c00 	.word	0x40020c00
 8013df8:	40021000 	.word	0x40021000
 8013dfc:	08026c8c 	.word	0x08026c8c
 8013e00:	08028b2c 	.word	0x08028b2c
 8013e04:	20009ca0 	.word	0x20009ca0
 8013e08:	08028b2d 	.word	0x08028b2d
 8013e0c:	20009c90 	.word	0x20009c90
 8013e10:	08026cc8 	.word	0x08026cc8
 8013e14:	20009c8c 	.word	0x20009c8c

08013e18 <SPI_ReadFromFlash>:
}



void SPI_ReadFromFlash(uint8_t Chip,uint32_t Ul_Address,uint16_t uc_Len,uint8_t *uc_pp_Buff)
{
 8013e18:	b580      	push	{r7, lr}
 8013e1a:	b084      	sub	sp, #16
 8013e1c:	af00      	add	r7, sp, #0
 8013e1e:	60b9      	str	r1, [r7, #8]
 8013e20:	607b      	str	r3, [r7, #4]
 8013e22:	4603      	mov	r3, r0
 8013e24:	73fb      	strb	r3, [r7, #15]
 8013e26:	4613      	mov	r3, r2
 8013e28:	81bb      	strh	r3, [r7, #12]
	switch(Chip)
 8013e2a:	7bfb      	ldrb	r3, [r7, #15]
 8013e2c:	3b01      	subs	r3, #1
 8013e2e:	2b03      	cmp	r3, #3
 8013e30:	d828      	bhi.n	8013e84 <SPI_ReadFromFlash+0x6c>
 8013e32:	a201      	add	r2, pc, #4	; (adr r2, 8013e38 <SPI_ReadFromFlash+0x20>)
 8013e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013e38:	08013e49 	.word	0x08013e49
 8013e3c:	08013e59 	.word	0x08013e59
 8013e40:	08013e67 	.word	0x08013e67
 8013e44:	08013e75 	.word	0x08013e75
	{
	case CHIP1:
		CHIP_Port = CS1_GPIO_Port;
 8013e48:	4b2d      	ldr	r3, [pc, #180]	; (8013f00 <SPI_ReadFromFlash+0xe8>)
 8013e4a:	4a2e      	ldr	r2, [pc, #184]	; (8013f04 <SPI_ReadFromFlash+0xec>)
 8013e4c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS1_Pin;
 8013e4e:	4b2e      	ldr	r3, [pc, #184]	; (8013f08 <SPI_ReadFromFlash+0xf0>)
 8013e50:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8013e54:	601a      	str	r2, [r3, #0]
		break;
 8013e56:	e018      	b.n	8013e8a <SPI_ReadFromFlash+0x72>
	case CHIP2:
		CHIP_Port = CS2_GPIO_Port;
 8013e58:	4b29      	ldr	r3, [pc, #164]	; (8013f00 <SPI_ReadFromFlash+0xe8>)
 8013e5a:	4a2c      	ldr	r2, [pc, #176]	; (8013f0c <SPI_ReadFromFlash+0xf4>)
 8013e5c:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS2_Pin;
 8013e5e:	4b2a      	ldr	r3, [pc, #168]	; (8013f08 <SPI_ReadFromFlash+0xf0>)
 8013e60:	2220      	movs	r2, #32
 8013e62:	601a      	str	r2, [r3, #0]
		break;
 8013e64:	e011      	b.n	8013e8a <SPI_ReadFromFlash+0x72>
	case CHIP3:
		CHIP_Port = CS3_GPIO_Port;
 8013e66:	4b26      	ldr	r3, [pc, #152]	; (8013f00 <SPI_ReadFromFlash+0xe8>)
 8013e68:	4a28      	ldr	r2, [pc, #160]	; (8013f0c <SPI_ReadFromFlash+0xf4>)
 8013e6a:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS3_Pin;
 8013e6c:	4b26      	ldr	r3, [pc, #152]	; (8013f08 <SPI_ReadFromFlash+0xf0>)
 8013e6e:	2240      	movs	r2, #64	; 0x40
 8013e70:	601a      	str	r2, [r3, #0]
		break;
 8013e72:	e00a      	b.n	8013e8a <SPI_ReadFromFlash+0x72>
	case CHIP4:
		CHIP_Port = CS4_GPIO_Port;
 8013e74:	4b22      	ldr	r3, [pc, #136]	; (8013f00 <SPI_ReadFromFlash+0xe8>)
 8013e76:	4a26      	ldr	r2, [pc, #152]	; (8013f10 <SPI_ReadFromFlash+0xf8>)
 8013e78:	601a      	str	r2, [r3, #0]
		CHIP_GPIO_Pin = CS4_Pin;
 8013e7a:	4b23      	ldr	r3, [pc, #140]	; (8013f08 <SPI_ReadFromFlash+0xf0>)
 8013e7c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8013e80:	601a      	str	r2, [r3, #0]
		break;
 8013e82:	e002      	b.n	8013e8a <SPI_ReadFromFlash+0x72>
	default:printf("Wrong Chip selection\n");
 8013e84:	4823      	ldr	r0, [pc, #140]	; (8013f14 <SPI_ReadFromFlash+0xfc>)
 8013e86:	f00e faad 	bl	80223e4 <puts>
	}

	memset(uc_pp_Buff,0,uc_Len);
 8013e8a:	89bb      	ldrh	r3, [r7, #12]
 8013e8c:	461a      	mov	r2, r3
 8013e8e:	2100      	movs	r1, #0
 8013e90:	6878      	ldr	r0, [r7, #4]
 8013e92:	f00e f923 	bl	80220dc <memset>



	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_RESET);
 8013e96:	4b1a      	ldr	r3, [pc, #104]	; (8013f00 <SPI_ReadFromFlash+0xe8>)
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4a1b      	ldr	r2, [pc, #108]	; (8013f08 <SPI_ReadFromFlash+0xf0>)
 8013e9c:	6812      	ldr	r2, [r2, #0]
 8013e9e:	b291      	uxth	r1, r2
 8013ea0:	2200      	movs	r2, #0
 8013ea2:	4618      	mov	r0, r3
 8013ea4:	f003 fec8 	bl	8017c38 <HAL_GPIO_WritePin>
	spi_cmd[0]=EEPROM_READ;/* Read command is 0x03, low 256 bytes only */
 8013ea8:	2203      	movs	r2, #3
 8013eaa:	4b1b      	ldr	r3, [pc, #108]	; (8013f18 <SPI_ReadFromFlash+0x100>)
 8013eac:	701a      	strb	r2, [r3, #0]
	spi_cmd[1]=Ul_Address>>16;
 8013eae:	68bb      	ldr	r3, [r7, #8]
 8013eb0:	0c1b      	lsrs	r3, r3, #16
 8013eb2:	b2da      	uxtb	r2, r3
 8013eb4:	4b18      	ldr	r3, [pc, #96]	; (8013f18 <SPI_ReadFromFlash+0x100>)
 8013eb6:	705a      	strb	r2, [r3, #1]
	spi_cmd[2]=Ul_Address>>8;
 8013eb8:	68bb      	ldr	r3, [r7, #8]
 8013eba:	0a1b      	lsrs	r3, r3, #8
 8013ebc:	b2da      	uxtb	r2, r3
 8013ebe:	4b16      	ldr	r3, [pc, #88]	; (8013f18 <SPI_ReadFromFlash+0x100>)
 8013ec0:	709a      	strb	r2, [r3, #2]
	spi_cmd[3]=Ul_Address;
 8013ec2:	68bb      	ldr	r3, [r7, #8]
 8013ec4:	b2da      	uxtb	r2, r3
 8013ec6:	4b14      	ldr	r3, [pc, #80]	; (8013f18 <SPI_ReadFromFlash+0x100>)
 8013ec8:	70da      	strb	r2, [r3, #3]


	HAL_SPI_Transmit(&hspi1, (uint8_t *)&spi_cmd, 4, 100);
 8013eca:	2364      	movs	r3, #100	; 0x64
 8013ecc:	2204      	movs	r2, #4
 8013ece:	4912      	ldr	r1, [pc, #72]	; (8013f18 <SPI_ReadFromFlash+0x100>)
 8013ed0:	4812      	ldr	r0, [pc, #72]	; (8013f1c <SPI_ReadFromFlash+0x104>)
 8013ed2:	f005 ff53 	bl	8019d7c <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1, uc_pp_Buff, uc_Len, 1000);
 8013ed6:	89ba      	ldrh	r2, [r7, #12]
 8013ed8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8013edc:	6879      	ldr	r1, [r7, #4]
 8013ede:	480f      	ldr	r0, [pc, #60]	; (8013f1c <SPI_ReadFromFlash+0x104>)
 8013ee0:	f006 f8ba 	bl	801a058 <HAL_SPI_Receive>
	//		}
	//		printf("[%03lu]:%c ",ulAddress,uc_pp_Buff[ulAddress]);
	//	}


	HAL_GPIO_WritePin(CHIP_Port, CHIP_GPIO_Pin, GPIO_PIN_SET);
 8013ee4:	4b06      	ldr	r3, [pc, #24]	; (8013f00 <SPI_ReadFromFlash+0xe8>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	4a07      	ldr	r2, [pc, #28]	; (8013f08 <SPI_ReadFromFlash+0xf0>)
 8013eea:	6812      	ldr	r2, [r2, #0]
 8013eec:	b291      	uxth	r1, r2
 8013eee:	2201      	movs	r2, #1
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f003 fea1 	bl	8017c38 <HAL_GPIO_WritePin>

}
 8013ef6:	bf00      	nop
 8013ef8:	3710      	adds	r7, #16
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd80      	pop	{r7, pc}
 8013efe:	bf00      	nop
 8013f00:	20009c94 	.word	0x20009c94
 8013f04:	40021800 	.word	0x40021800
 8013f08:	20009c98 	.word	0x20009c98
 8013f0c:	40020c00 	.word	0x40020c00
 8013f10:	40021000 	.word	0x40021000
 8013f14:	08026c8c 	.word	0x08026c8c
 8013f18:	20009c8c 	.word	0x20009c8c
 8013f1c:	20009ca0 	.word	0x20009ca0

08013f20 <Get_Config>:




void Get_Config(void)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b084      	sub	sp, #16
 8013f24:	af00      	add	r7, sp, #0
	uint32_t uc_times = 0;
 8013f26:	2300      	movs	r3, #0
 8013f28:	60fb      	str	r3, [r7, #12]
	//	unsigned char uc_SspIndex =0;//,uc_Block_Index = 0;


	size_t SIZE = (sizeof(EI_t))+6;
 8013f2a:	f240 3346 	movw	r3, #838	; 0x346
 8013f2e:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	60bb      	str	r3, [r7, #8]
	return;
#endif

#endif

	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8013f34:	2300      	movs	r3, #0
 8013f36:	60fb      	str	r3, [r7, #12]
 8013f38:	e01d      	b.n	8013f76 <Get_Config+0x56>
	{
		HAL_Delay(20);
 8013f3a:	2014      	movs	r0, #20
 8013f3c:	f001 f9b8 	bl	80152b0 <HAL_Delay>
		if(SIZE_VAR <32)
 8013f40:	68bb      	ldr	r3, [r7, #8]
 8013f42:	2b1f      	cmp	r3, #31
 8013f44:	d809      	bhi.n	8013f5a <Get_Config+0x3a>
		{
			SPI_ReadFromFlash(1, uc_times, SIZE_VAR, Config_Buff+uc_times);
 8013f46:	68bb      	ldr	r3, [r7, #8]
 8013f48:	b29a      	uxth	r2, r3
 8013f4a:	68fb      	ldr	r3, [r7, #12]
 8013f4c:	492c      	ldr	r1, [pc, #176]	; (8014000 <Get_Config+0xe0>)
 8013f4e:	440b      	add	r3, r1
 8013f50:	68f9      	ldr	r1, [r7, #12]
 8013f52:	2001      	movs	r0, #1
 8013f54:	f7ff ff60 	bl	8013e18 <SPI_ReadFromFlash>
 8013f58:	e00a      	b.n	8013f70 <Get_Config+0x50>
		}
		else
		{
			SPI_ReadFromFlash(1, uc_times, 32, Config_Buff+uc_times);
 8013f5a:	68fb      	ldr	r3, [r7, #12]
 8013f5c:	4a28      	ldr	r2, [pc, #160]	; (8014000 <Get_Config+0xe0>)
 8013f5e:	4413      	add	r3, r2
 8013f60:	2220      	movs	r2, #32
 8013f62:	68f9      	ldr	r1, [r7, #12]
 8013f64:	2001      	movs	r0, #1
 8013f66:	f7ff ff57 	bl	8013e18 <SPI_ReadFromFlash>
			SIZE_VAR-=32;
 8013f6a:	68bb      	ldr	r3, [r7, #8]
 8013f6c:	3b20      	subs	r3, #32
 8013f6e:	60bb      	str	r3, [r7, #8]
	for(uc_times = 0; uc_times < SIZE; uc_times+=32)
 8013f70:	68fb      	ldr	r3, [r7, #12]
 8013f72:	3320      	adds	r3, #32
 8013f74:	60fb      	str	r3, [r7, #12]
 8013f76:	68fa      	ldr	r2, [r7, #12]
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	429a      	cmp	r2, r3
 8013f7c:	d3dd      	bcc.n	8013f3a <Get_Config+0x1a>
		}
	}
	if(CheckCRC(Config_Buff, (sizeof(EI_t)+4)))
 8013f7e:	f44f 7151 	mov.w	r1, #836	; 0x344
 8013f82:	481f      	ldr	r0, [pc, #124]	; (8014000 <Get_Config+0xe0>)
 8013f84:	f7fe fca2 	bl	80128cc <CheckCRC>
 8013f88:	4603      	mov	r3, r0
 8013f8a:	2b00      	cmp	r3, #0
 8013f8c:	d013      	beq.n	8013fb6 <Get_Config+0x96>
	{
		/* CRC OK From the Flash */
		//EI_Config_ptr = &EI_data+4;
		//memcpy(EI_Config_ptr,&Config_Buff[4],sizeof(EI_t));
		memcpy(&EI_data,&Config_Buff[4],sizeof(EI_t));
 8013f8e:	f44f 7250 	mov.w	r2, #832	; 0x340
 8013f92:	491c      	ldr	r1, [pc, #112]	; (8014004 <Get_Config+0xe4>)
 8013f94:	481c      	ldr	r0, [pc, #112]	; (8014008 <Get_Config+0xe8>)
 8013f96:	f00e f879 	bl	802208c <memcpy>
		EI_Dat_CRC = ExtractBits(0, 16,&Config_Buff[(sizeof(EI_t)+4)]);
 8013f9a:	4a1c      	ldr	r2, [pc, #112]	; (801400c <Get_Config+0xec>)
 8013f9c:	2110      	movs	r1, #16
 8013f9e:	2000      	movs	r0, #0
 8013fa0:	f7ec fb38 	bl	8000614 <ExtractBits>
 8013fa4:	4603      	mov	r3, r0
 8013fa6:	b29a      	uxth	r2, r3
 8013fa8:	4b19      	ldr	r3, [pc, #100]	; (8014010 <Get_Config+0xf0>)
 8013faa:	801a      	strh	r2, [r3, #0]
		while(1)
		{
			Data_Processing();
		}
	}
	if( 0 == UpdateFlag )
 8013fac:	4b19      	ldr	r3, [pc, #100]	; (8014014 <Get_Config+0xf4>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	2b00      	cmp	r3, #0
 8013fb2:	d121      	bne.n	8013ff8 <Get_Config+0xd8>
 8013fb4:	e01e      	b.n	8013ff4 <Get_Config+0xd4>
		printf("\n EI Configuration CRC from Flash:%u\n",(sizeof(EI_t)+4));
 8013fb6:	f44f 7151 	mov.w	r1, #836	; 0x344
 8013fba:	4817      	ldr	r0, [pc, #92]	; (8014018 <Get_Config+0xf8>)
 8013fbc:	f00e f976 	bl	80222ac <iprintf>
		EI_Config_ptr = (EI_t *)&Config_Buff[4];
 8013fc0:	4b16      	ldr	r3, [pc, #88]	; (801401c <Get_Config+0xfc>)
 8013fc2:	4a10      	ldr	r2, [pc, #64]	; (8014004 <Get_Config+0xe4>)
 8013fc4:	601a      	str	r2, [r3, #0]
		printf("\nCRC READ:[%x][%x]\n",Config_Buff[sizeof(EI_t)+3],Config_Buff[sizeof(EI_t)+4]);
 8013fc6:	4b0e      	ldr	r3, [pc, #56]	; (8014000 <Get_Config+0xe0>)
 8013fc8:	f893 3343 	ldrb.w	r3, [r3, #835]	; 0x343
 8013fcc:	4619      	mov	r1, r3
 8013fce:	4b0c      	ldr	r3, [pc, #48]	; (8014000 <Get_Config+0xe0>)
 8013fd0:	f893 3344 	ldrb.w	r3, [r3, #836]	; 0x344
 8013fd4:	461a      	mov	r2, r3
 8013fd6:	4812      	ldr	r0, [pc, #72]	; (8014020 <Get_Config+0x100>)
 8013fd8:	f00e f968 	bl	80222ac <iprintf>
		printf("\nCheck for CRC:");
 8013fdc:	4811      	ldr	r0, [pc, #68]	; (8014024 <Get_Config+0x104>)
 8013fde:	f00e f965 	bl	80222ac <iprintf>
		gucFlagUpdate =3;
 8013fe2:	4b11      	ldr	r3, [pc, #68]	; (8014028 <Get_Config+0x108>)
 8013fe4:	2203      	movs	r2, #3
 8013fe6:	701a      	strb	r2, [r3, #0]
		printf("\n*************PLEASE LOAD EI DATS USING APPLICATION************\n");
 8013fe8:	4810      	ldr	r0, [pc, #64]	; (801402c <Get_Config+0x10c>)
 8013fea:	f00e f9fb 	bl	80223e4 <puts>
			Data_Processing();
 8013fee:	f000 f81f 	bl	8014030 <Data_Processing>
 8013ff2:	e7fc      	b.n	8013fee <Get_Config+0xce>
	{
		readCanToStructs();
 8013ff4:	f7fb fdfc 	bl	800fbf0 <readCanToStructs>
	}
}
 8013ff8:	bf00      	nop
 8013ffa:	3710      	adds	r7, #16
 8013ffc:	46bd      	mov	sp, r7
 8013ffe:	bd80      	pop	{r7, pc}
 8014000:	20000648 	.word	0x20000648
 8014004:	2000064c 	.word	0x2000064c
 8014008:	20000304 	.word	0x20000304
 801400c:	2000098c 	.word	0x2000098c
 8014010:	20009c9e 	.word	0x20009c9e
 8014014:	20000a4b 	.word	0x20000a4b
 8014018:	08026cf8 	.word	0x08026cf8
 801401c:	20000300 	.word	0x20000300
 8014020:	08026d20 	.word	0x08026d20
 8014024:	08026d34 	.word	0x08026d34
 8014028:	20000a49 	.word	0x20000a49
 801402c:	08026d44 	.word	0x08026d44

08014030 <Data_Processing>:


void Data_Processing(void)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	af00      	add	r7, sp, #0
	switch(gucFlagUpdate)
 8014034:	4b0b      	ldr	r3, [pc, #44]	; (8014064 <Data_Processing+0x34>)
 8014036:	781b      	ldrb	r3, [r3, #0]
 8014038:	2b03      	cmp	r3, #3
 801403a:	d10e      	bne.n	801405a <Data_Processing+0x2a>
	{
	case 3:
		gucUpdateFlag = CheckForRqst(ISP_PORT);
 801403c:	2000      	movs	r0, #0
 801403e:	f7f6 fc17 	bl	800a870 <CheckForRqst>
 8014042:	4603      	mov	r3, r0
 8014044:	461a      	mov	r2, r3
 8014046:	4b08      	ldr	r3, [pc, #32]	; (8014068 <Data_Processing+0x38>)
 8014048:	701a      	strb	r2, [r3, #0]
		if(1 == gucUpdateFlag)
 801404a:	4b07      	ldr	r3, [pc, #28]	; (8014068 <Data_Processing+0x38>)
 801404c:	781b      	ldrb	r3, [r3, #0]
 801404e:	2b01      	cmp	r3, #1
 8014050:	d105      	bne.n	801405e <Data_Processing+0x2e>
		{
			AutoLoadDat(ISP_PORT); //
 8014052:	2000      	movs	r0, #0
 8014054:	f000 f80a 	bl	801406c <AutoLoadDat>
		}
		break;
 8014058:	e001      	b.n	801405e <Data_Processing+0x2e>
	default:
		break;
 801405a:	bf00      	nop
 801405c:	e000      	b.n	8014060 <Data_Processing+0x30>
		break;
 801405e:	bf00      	nop
	}
}
 8014060:	bf00      	nop
 8014062:	bd80      	pop	{r7, pc}
 8014064:	20000a49 	.word	0x20000a49
 8014068:	20000a4a 	.word	0x20000a4a

0801406c <AutoLoadDat>:

void AutoLoadDat(unsigned char uc_port)
{
 801406c:	b580      	push	{r7, lr}
 801406e:	b084      	sub	sp, #16
 8014070:	af00      	add	r7, sp, #0
 8014072:	4603      	mov	r3, r0
 8014074:	71fb      	strb	r3, [r7, #7]
	unsigned char AckCount=0, NoOfBytes;
 8014076:	2300      	movs	r3, #0
 8014078:	73fb      	strb	r3, [r7, #15]
	while(1)
	{
		NoOfBytes=ReadAndFormConfig(uc_port,Config_Buff,1024);
 801407a:	79fb      	ldrb	r3, [r7, #7]
 801407c:	b29b      	uxth	r3, r3
 801407e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014082:	4934      	ldr	r1, [pc, #208]	; (8014154 <AutoLoadDat+0xe8>)
 8014084:	4618      	mov	r0, r3
 8014086:	f7f6 fd9b 	bl	800abc0 <ReadAndFormConfig>
 801408a:	4603      	mov	r3, r0
 801408c:	73bb      	strb	r3, [r7, #14]
		HAL_IWDG_Refresh(&hiwdg);
 801408e:	4832      	ldr	r0, [pc, #200]	; (8014158 <AutoLoadDat+0xec>)
 8014090:	f004 fc68 	bl	8018964 <HAL_IWDG_Refresh>

		//SpoiWDTReload();
		//CommWatchDogStrobe();
		if ( NoOfBytes > 1)
 8014094:	7bbb      	ldrb	r3, [r7, #14]
 8014096:	2b01      	cmp	r3, #1
 8014098:	d921      	bls.n	80140de <AutoLoadDat+0x72>
		{
			gucUpdateFlag = 0;
 801409a:	4b30      	ldr	r3, [pc, #192]	; (801415c <AutoLoadDat+0xf0>)
 801409c:	2200      	movs	r2, #0
 801409e:	701a      	strb	r2, [r3, #0]
			if(!((Config_Buff[1] == ((DATLOADING>>8)&0XFF)) && (Config_Buff[2] == (DATLOADING & 0XFF)) && (Config_Buff[3] == DATCONFRMTION)))
 80140a0:	4b2c      	ldr	r3, [pc, #176]	; (8014154 <AutoLoadDat+0xe8>)
 80140a2:	785b      	ldrb	r3, [r3, #1]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d107      	bne.n	80140b8 <AutoLoadDat+0x4c>
 80140a8:	4b2a      	ldr	r3, [pc, #168]	; (8014154 <AutoLoadDat+0xe8>)
 80140aa:	789b      	ldrb	r3, [r3, #2]
 80140ac:	2b01      	cmp	r3, #1
 80140ae:	d103      	bne.n	80140b8 <AutoLoadDat+0x4c>
 80140b0:	4b28      	ldr	r3, [pc, #160]	; (8014154 <AutoLoadDat+0xe8>)
 80140b2:	78db      	ldrb	r3, [r3, #3]
 80140b4:	2b04      	cmp	r3, #4
 80140b6:	d003      	beq.n	80140c0 <AutoLoadDat+0x54>
			{
				printf("\nReceived Request Again\n");
 80140b8:	4829      	ldr	r0, [pc, #164]	; (8014160 <AutoLoadDat+0xf4>)
 80140ba:	f00e f993 	bl	80223e4 <puts>
				return;
 80140be:	e046      	b.n	801414e <AutoLoadDat+0xe2>
			}
			EI_Config_ptr = (EI_t *)&Config_Buff[4];
 80140c0:	4b28      	ldr	r3, [pc, #160]	; (8014164 <AutoLoadDat+0xf8>)
 80140c2:	4a29      	ldr	r2, [pc, #164]	; (8014168 <AutoLoadDat+0xfc>)
 80140c4:	601a      	str	r2, [r3, #0]
			saveConfig();
 80140c6:	f000 f85b 	bl	8014180 <saveConfig>
			gucFlagCheck =1;
 80140ca:	4b28      	ldr	r3, [pc, #160]	; (801416c <AutoLoadDat+0x100>)
 80140cc:	2201      	movs	r2, #1
 80140ce:	701a      	strb	r2, [r3, #0]
			ConfigFlag = 1;
 80140d0:	4b27      	ldr	r3, [pc, #156]	; (8014170 <AutoLoadDat+0x104>)
 80140d2:	2201      	movs	r2, #1
 80140d4:	701a      	strb	r2, [r3, #0]
			printf("\nData Received\n");
 80140d6:	4827      	ldr	r0, [pc, #156]	; (8014174 <AutoLoadDat+0x108>)
 80140d8:	f00e f984 	bl	80223e4 <puts>
			break;
 80140dc:	e037      	b.n	801414e <AutoLoadDat+0xe2>
		}
		else if(1 == NoOfBytes)
 80140de:	7bbb      	ldrb	r3, [r7, #14]
 80140e0:	2b01      	cmp	r3, #1
 80140e2:	d11b      	bne.n	801411c <AutoLoadDat+0xb0>
		{
			if(3 == AckCount)
 80140e4:	7bfb      	ldrb	r3, [r7, #15]
 80140e6:	2b03      	cmp	r3, #3
 80140e8:	d109      	bne.n	80140fe <AutoLoadDat+0x92>
			{
				gucUpdateFlag = 0;
 80140ea:	4b1c      	ldr	r3, [pc, #112]	; (801415c <AutoLoadDat+0xf0>)
 80140ec:	2200      	movs	r2, #0
 80140ee:	701a      	strb	r2, [r3, #0]
				SendAck(uc_port, DATLOADING, CRCNOK);
 80140f0:	79fb      	ldrb	r3, [r7, #7]
 80140f2:	2203      	movs	r2, #3
 80140f4:	2101      	movs	r1, #1
 80140f6:	4618      	mov	r0, r3
 80140f8:	f7f6 fd16 	bl	800ab28 <SendAck>
				break;
 80140fc:	e027      	b.n	801414e <AutoLoadDat+0xe2>
			}
			SendAck(uc_port, DATLOADING, ACKOK);
 80140fe:	79fb      	ldrb	r3, [r7, #7]
 8014100:	2202      	movs	r2, #2
 8014102:	2101      	movs	r1, #1
 8014104:	4618      	mov	r0, r3
 8014106:	f7f6 fd0f 	bl	800ab28 <SendAck>
			gucReqstCurTim = HAL_GetTick();
 801410a:	f001 f8c5 	bl	8015298 <HAL_GetTick>
 801410e:	4603      	mov	r3, r0
 8014110:	4a19      	ldr	r2, [pc, #100]	; (8014178 <AutoLoadDat+0x10c>)
 8014112:	6013      	str	r3, [r2, #0]
			AckCount++;
 8014114:	7bfb      	ldrb	r3, [r7, #15]
 8014116:	3301      	adds	r3, #1
 8014118:	73fb      	strb	r3, [r7, #15]
 801411a:	e7ae      	b.n	801407a <AutoLoadDat+0xe>
		}
		else
		{
			if( (labs(HAL_GetTick() - gucReqstCurTim) > (WAITFORDAT * 1000)) )
 801411c:	f001 f8bc 	bl	8015298 <HAL_GetTick>
 8014120:	4602      	mov	r2, r0
 8014122:	4b15      	ldr	r3, [pc, #84]	; (8014178 <AutoLoadDat+0x10c>)
 8014124:	681b      	ldr	r3, [r3, #0]
 8014126:	1ad3      	subs	r3, r2, r3
 8014128:	2b00      	cmp	r3, #0
 801412a:	bfb8      	it	lt
 801412c:	425b      	neglt	r3, r3
 801412e:	f247 5230 	movw	r2, #30000	; 0x7530
 8014132:	4293      	cmp	r3, r2
 8014134:	dda1      	ble.n	801407a <AutoLoadDat+0xe>
			{
				gucUpdateFlag = 0;
 8014136:	4b09      	ldr	r3, [pc, #36]	; (801415c <AutoLoadDat+0xf0>)
 8014138:	2200      	movs	r2, #0
 801413a:	701a      	strb	r2, [r3, #0]
				printf("\nNo Data recieved to Update\n");
 801413c:	480f      	ldr	r0, [pc, #60]	; (801417c <AutoLoadDat+0x110>)
 801413e:	f00e f951 	bl	80223e4 <puts>
				SendAck(uc_port, DATLOADING, NODATA);
 8014142:	79fb      	ldrb	r3, [r7, #7]
 8014144:	2205      	movs	r2, #5
 8014146:	2101      	movs	r1, #1
 8014148:	4618      	mov	r0, r3
 801414a:	f7f6 fced 	bl	800ab28 <SendAck>
				break;
			}
		}
	}
}
 801414e:	3710      	adds	r7, #16
 8014150:	46bd      	mov	sp, r7
 8014152:	bd80      	pop	{r7, pc}
 8014154:	20000648 	.word	0x20000648
 8014158:	20009c68 	.word	0x20009c68
 801415c:	20000a4a 	.word	0x20000a4a
 8014160:	08026d84 	.word	0x08026d84
 8014164:	20000300 	.word	0x20000300
 8014168:	2000064c 	.word	0x2000064c
 801416c:	20009c88 	.word	0x20009c88
 8014170:	20009c89 	.word	0x20009c89
 8014174:	08026d9c 	.word	0x08026d9c
 8014178:	20000a4c 	.word	0x20000a4c
 801417c:	08026dac 	.word	0x08026dac

08014180 <saveConfig>:

unsigned char saveConfig(void)
{
 8014180:	b580      	push	{r7, lr}
 8014182:	b084      	sub	sp, #16
 8014184:	af00      	add	r7, sp, #0
	uint32_t ulAddress = 0;
 8014186:	2300      	movs	r3, #0
 8014188:	60fb      	str	r3, [r7, #12]

	printf("\nSaveConfig\n");
 801418a:	4825      	ldr	r0, [pc, #148]	; (8014220 <saveConfig+0xa0>)
 801418c:	f00e f92a 	bl	80223e4 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 8014190:	2300      	movs	r3, #0
 8014192:	60fb      	str	r3, [r7, #12]
 8014194:	e011      	b.n	80141ba <saveConfig+0x3a>
	{
		if(SPI_MemoryEraseBySector(1,(4096*ulAddress)))/*memory erase before writing*/
 8014196:	68fb      	ldr	r3, [r7, #12]
 8014198:	031b      	lsls	r3, r3, #12
 801419a:	4619      	mov	r1, r3
 801419c:	2001      	movs	r0, #1
 801419e:	f7ff fd2f 	bl	8013c00 <SPI_MemoryEraseBySector>
 80141a2:	4603      	mov	r3, r0
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d005      	beq.n	80141b4 <saveConfig+0x34>
		{
			HAL_IWDG_Refresh(&hiwdg);
 80141a8:	481e      	ldr	r0, [pc, #120]	; (8014224 <saveConfig+0xa4>)
 80141aa:	f004 fbdb 	bl	8018964 <HAL_IWDG_Refresh>
			printf("FLASH ERASE SUCCESS\n");
 80141ae:	481e      	ldr	r0, [pc, #120]	; (8014228 <saveConfig+0xa8>)
 80141b0:	f00e f918 	bl	80223e4 <puts>
	for(ulAddress=0;ulAddress<6;ulAddress++)
 80141b4:	68fb      	ldr	r3, [r7, #12]
 80141b6:	3301      	adds	r3, #1
 80141b8:	60fb      	str	r3, [r7, #12]
 80141ba:	68fb      	ldr	r3, [r7, #12]
 80141bc:	2b05      	cmp	r3, #5
 80141be:	d9ea      	bls.n	8014196 <saveConfig+0x16>
		}
	}
	size_t SIZE = (sizeof(EI_t)+7);
 80141c0:	f240 3347 	movw	r3, #839	; 0x347
 80141c4:	607b      	str	r3, [r7, #4]
	size_t SIZE_VAR  = SIZE;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	60bb      	str	r3, [r7, #8]

	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 80141ca:	2300      	movs	r3, #0
 80141cc:	60fb      	str	r3, [r7, #12]
 80141ce:	e01d      	b.n	801420c <saveConfig+0x8c>
	{
		HAL_IWDG_Refresh(&hiwdg);
 80141d0:	4814      	ldr	r0, [pc, #80]	; (8014224 <saveConfig+0xa4>)
 80141d2:	f004 fbc7 	bl	8018964 <HAL_IWDG_Refresh>
		if(SIZE_VAR <32)
 80141d6:	68bb      	ldr	r3, [r7, #8]
 80141d8:	2b1f      	cmp	r3, #31
 80141da:	d809      	bhi.n	80141f0 <saveConfig+0x70>
		{
			SPI_WriteInFlash(1, ulAddress, SIZE_VAR, Config_Buff+ulAddress);
 80141dc:	68bb      	ldr	r3, [r7, #8]
 80141de:	b29a      	uxth	r2, r3
 80141e0:	68fb      	ldr	r3, [r7, #12]
 80141e2:	4912      	ldr	r1, [pc, #72]	; (801422c <saveConfig+0xac>)
 80141e4:	440b      	add	r3, r1
 80141e6:	68f9      	ldr	r1, [r7, #12]
 80141e8:	2001      	movs	r0, #1
 80141ea:	f7ff fbeb 	bl	80139c4 <SPI_WriteInFlash>
 80141ee:	e00a      	b.n	8014206 <saveConfig+0x86>
		}
		else
		{
			SPI_WriteInFlash(1, ulAddress, 32, Config_Buff+ulAddress);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	4a0e      	ldr	r2, [pc, #56]	; (801422c <saveConfig+0xac>)
 80141f4:	4413      	add	r3, r2
 80141f6:	2220      	movs	r2, #32
 80141f8:	68f9      	ldr	r1, [r7, #12]
 80141fa:	2001      	movs	r0, #1
 80141fc:	f7ff fbe2 	bl	80139c4 <SPI_WriteInFlash>
			SIZE_VAR-=32;
 8014200:	68bb      	ldr	r3, [r7, #8]
 8014202:	3b20      	subs	r3, #32
 8014204:	60bb      	str	r3, [r7, #8]
	for(ulAddress = 0; ulAddress < SIZE; ulAddress+=32)
 8014206:	68fb      	ldr	r3, [r7, #12]
 8014208:	3320      	adds	r3, #32
 801420a:	60fb      	str	r3, [r7, #12]
 801420c:	68fa      	ldr	r2, [r7, #12]
 801420e:	687b      	ldr	r3, [r7, #4]
 8014210:	429a      	cmp	r2, r3
 8014212:	d3dd      	bcc.n	80141d0 <saveConfig+0x50>
		}
	}

	printf("\nCFG written successfully");
 8014214:	4806      	ldr	r0, [pc, #24]	; (8014230 <saveConfig+0xb0>)
 8014216:	f00e f849 	bl	80222ac <iprintf>
	//		if((i%8)==0)
	//		{
	//			printf("\n");
	//		}
	//	}
	NVIC_SystemReset();
 801421a:	f7ff faff 	bl	801381c <__NVIC_SystemReset>
 801421e:	bf00      	nop
 8014220:	08026dc8 	.word	0x08026dc8
 8014224:	20009c68 	.word	0x20009c68
 8014228:	08026dd4 	.word	0x08026dd4
 801422c:	20000648 	.word	0x20000648
 8014230:	08026de8 	.word	0x08026de8

08014234 <Print_BuildDat_Details>:
	return 1;
}


void Print_BuildDat_Details(void)
{
 8014234:	b580      	push	{r7, lr}
 8014236:	af00      	add	r7, sp, #0
	if(Debug_flag == 0)
 8014238:	4b14      	ldr	r3, [pc, #80]	; (801428c <Print_BuildDat_Details+0x58>)
 801423a:	781b      	ldrb	r3, [r3, #0]
 801423c:	2b00      	cmp	r3, #0
 801423e:	d022      	beq.n	8014286 <Print_BuildDat_Details+0x52>
	{
		return;
	}
	static uint32_t PrintClk = 0;
	if(HAL_Elaps_Ticks(PrintClk) >= TEN_SEC)
 8014240:	4b13      	ldr	r3, [pc, #76]	; (8014290 <Print_BuildDat_Details+0x5c>)
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	4618      	mov	r0, r3
 8014246:	f7fa fadb 	bl	800e800 <HAL_Elaps_Ticks>
 801424a:	4603      	mov	r3, r0
 801424c:	f242 720f 	movw	r2, #9999	; 0x270f
 8014250:	4293      	cmp	r3, r2
 8014252:	d919      	bls.n	8014288 <Print_BuildDat_Details+0x54>
	{
		//		strcpy((char *)EI_data.STN_NAME,"IRISET");
		printf("\n__________________BUILD DETAILS__________________\n");
 8014254:	480f      	ldr	r0, [pc, #60]	; (8014294 <Print_BuildDat_Details+0x60>)
 8014256:	f00e f8c5 	bl	80223e4 <puts>
		printf("STATION NAME:%s|",EI_data.STN_NAME);
 801425a:	490f      	ldr	r1, [pc, #60]	; (8014298 <Print_BuildDat_Details+0x64>)
 801425c:	480f      	ldr	r0, [pc, #60]	; (801429c <Print_BuildDat_Details+0x68>)
 801425e:	f00e f825 	bl	80222ac <iprintf>
		printf("APP CRC:0X%04X|",EI_Dat_CRC);
 8014262:	4b0f      	ldr	r3, [pc, #60]	; (80142a0 <Print_BuildDat_Details+0x6c>)
 8014264:	881b      	ldrh	r3, [r3, #0]
 8014266:	4619      	mov	r1, r3
 8014268:	480e      	ldr	r0, [pc, #56]	; (80142a4 <Print_BuildDat_Details+0x70>)
 801426a:	f00e f81f 	bl	80222ac <iprintf>
		printf("EXE CRC:0X%04X\n\n",Build_CRC);
 801426e:	4b0e      	ldr	r3, [pc, #56]	; (80142a8 <Print_BuildDat_Details+0x74>)
 8014270:	881b      	ldrh	r3, [r3, #0]
 8014272:	4619      	mov	r1, r3
 8014274:	480d      	ldr	r0, [pc, #52]	; (80142ac <Print_BuildDat_Details+0x78>)
 8014276:	f00e f819 	bl	80222ac <iprintf>
		//printf("*********************************************************\n");

		PrintClk = HAL_GetTick();
 801427a:	f001 f80d 	bl	8015298 <HAL_GetTick>
 801427e:	4603      	mov	r3, r0
 8014280:	4a03      	ldr	r2, [pc, #12]	; (8014290 <Print_BuildDat_Details+0x5c>)
 8014282:	6013      	str	r3, [r2, #0]
 8014284:	e000      	b.n	8014288 <Print_BuildDat_Details+0x54>
		return;
 8014286:	bf00      	nop
	}
}
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	20000645 	.word	0x20000645
 8014290:	20009d04 	.word	0x20009d04
 8014294:	08026e04 	.word	0x08026e04
 8014298:	20000305 	.word	0x20000305
 801429c:	08026e38 	.word	0x08026e38
 80142a0:	20009c9e 	.word	0x20009c9e
 80142a4:	08026e4c 	.word	0x08026e4c
 80142a8:	20009c9c 	.word	0x20009c9c
 80142ac:	08026e5c 	.word	0x08026e5c

080142b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80142b0:	b580      	push	{r7, lr}
 80142b2:	b082      	sub	sp, #8
 80142b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80142b6:	4b0f      	ldr	r3, [pc, #60]	; (80142f4 <HAL_MspInit+0x44>)
 80142b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142ba:	4a0e      	ldr	r2, [pc, #56]	; (80142f4 <HAL_MspInit+0x44>)
 80142bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80142c0:	6413      	str	r3, [r2, #64]	; 0x40
 80142c2:	4b0c      	ldr	r3, [pc, #48]	; (80142f4 <HAL_MspInit+0x44>)
 80142c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80142c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80142ca:	607b      	str	r3, [r7, #4]
 80142cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80142ce:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <HAL_MspInit+0x44>)
 80142d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142d2:	4a08      	ldr	r2, [pc, #32]	; (80142f4 <HAL_MspInit+0x44>)
 80142d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80142d8:	6453      	str	r3, [r2, #68]	; 0x44
 80142da:	4b06      	ldr	r3, [pc, #24]	; (80142f4 <HAL_MspInit+0x44>)
 80142dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80142de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80142e2:	603b      	str	r3, [r7, #0]
 80142e4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80142e6:	2004      	movs	r0, #4
 80142e8:	f001 ffac 	bl	8016244 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80142ec:	bf00      	nop
 80142ee:	3708      	adds	r7, #8
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd80      	pop	{r7, pc}
 80142f4:	40023800 	.word	0x40023800

080142f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80142f8:	b480      	push	{r7}
 80142fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 80142fc:	e7fe      	b.n	80142fc <NMI_Handler+0x4>

080142fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80142fe:	b480      	push	{r7}
 8014300:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8014302:	e7fe      	b.n	8014302 <HardFault_Handler+0x4>

08014304 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8014304:	b480      	push	{r7}
 8014306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8014308:	e7fe      	b.n	8014308 <MemManage_Handler+0x4>

0801430a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 801430a:	b480      	push	{r7}
 801430c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 801430e:	e7fe      	b.n	801430e <BusFault_Handler+0x4>

08014310 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8014310:	b480      	push	{r7}
 8014312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8014314:	e7fe      	b.n	8014314 <UsageFault_Handler+0x4>

08014316 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8014316:	b480      	push	{r7}
 8014318:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 801431a:	bf00      	nop
 801431c:	46bd      	mov	sp, r7
 801431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014322:	4770      	bx	lr

08014324 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8014324:	b480      	push	{r7}
 8014326:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8014328:	bf00      	nop
 801432a:	46bd      	mov	sp, r7
 801432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014330:	4770      	bx	lr

08014332 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8014332:	b480      	push	{r7}
 8014334:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8014336:	bf00      	nop
 8014338:	46bd      	mov	sp, r7
 801433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801433e:	4770      	bx	lr

08014340 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8014344:	f000 ff94 	bl	8015270 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8014348:	bf00      	nop
 801434a:	bd80      	pop	{r7, pc}

0801434c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 801434c:	b580      	push	{r7, lr}
 801434e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT0_Pin);
 8014350:	2001      	movs	r0, #1
 8014352:	f003 fca5 	bl	8017ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8014356:	bf00      	nop
 8014358:	bd80      	pop	{r7, pc}

0801435a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 801435a:	b580      	push	{r7, lr}
 801435c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EX_INT1_Pin);
 801435e:	2002      	movs	r0, #2
 8014360:	f003 fc9e 	bl	8017ca0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8014364:	bf00      	nop
 8014366:	bd80      	pop	{r7, pc}

08014368 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8014368:	b580      	push	{r7, lr}
 801436a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 801436c:	4802      	ldr	r0, [pc, #8]	; (8014378 <TIM4_IRQHandler+0x10>)
 801436e:	f006 fbbb 	bl	801aae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8014372:	bf00      	nop
 8014374:	bd80      	pop	{r7, pc}
 8014376:	bf00      	nop
 8014378:	20009d0c 	.word	0x20009d0c

0801437c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 801437c:	b580      	push	{r7, lr}
 801437e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8014380:	4802      	ldr	r0, [pc, #8]	; (801438c <USART1_IRQHandler+0x10>)
 8014382:	f006 fdd5 	bl	801af30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8014386:	bf00      	nop
 8014388:	bd80      	pop	{r7, pc}
 801438a:	bf00      	nop
 801438c:	2000bc40 	.word	0x2000bc40

08014390 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8014390:	b580      	push	{r7, lr}
 8014392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8014394:	4802      	ldr	r0, [pc, #8]	; (80143a0 <TIM5_IRQHandler+0x10>)
 8014396:	f006 fba7 	bl	801aae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 801439a:	bf00      	nop
 801439c:	bd80      	pop	{r7, pc}
 801439e:	bf00      	nop
 80143a0:	20009dc8 	.word	0x20009dc8

080143a4 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80143a4:	b580      	push	{r7, lr}
 80143a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80143a8:	4802      	ldr	r0, [pc, #8]	; (80143b4 <UART4_IRQHandler+0x10>)
 80143aa:	f006 fdc1 	bl	801af30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 80143ae:	bf00      	nop
 80143b0:	bd80      	pop	{r7, pc}
 80143b2:	bf00      	nop
 80143b4:	2000ba18 	.word	0x2000ba18

080143b8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80143b8:	b580      	push	{r7, lr}
 80143ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80143bc:	4802      	ldr	r0, [pc, #8]	; (80143c8 <UART5_IRQHandler+0x10>)
 80143be:	f006 fdb7 	bl	801af30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80143c2:	bf00      	nop
 80143c4:	bd80      	pop	{r7, pc}
 80143c6:	bf00      	nop
 80143c8:	2000bad0 	.word	0x2000bad0

080143cc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80143cc:	b580      	push	{r7, lr}
 80143ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80143d0:	4802      	ldr	r0, [pc, #8]	; (80143dc <TIM6_DAC_IRQHandler+0x10>)
 80143d2:	f006 fb89 	bl	801aae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80143d6:	bf00      	nop
 80143d8:	bd80      	pop	{r7, pc}
 80143da:	bf00      	nop
 80143dc:	20009e84 	.word	0x20009e84

080143e0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80143e0:	b580      	push	{r7, lr}
 80143e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80143e4:	4802      	ldr	r0, [pc, #8]	; (80143f0 <TIM7_IRQHandler+0x10>)
 80143e6:	f006 fb7f 	bl	801aae8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80143ea:	bf00      	nop
 80143ec:	bd80      	pop	{r7, pc}
 80143ee:	bf00      	nop
 80143f0:	20009f40 	.word	0x20009f40

080143f4 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 80143f4:	b580      	push	{r7, lr}
 80143f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 80143f8:	4802      	ldr	r0, [pc, #8]	; (8014404 <ETH_IRQHandler+0x10>)
 80143fa:	f002 fb73 	bl	8016ae4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 80143fe:	bf00      	nop
 8014400:	bd80      	pop	{r7, pc}
 8014402:	bf00      	nop
 8014404:	20010654 	.word	0x20010654

08014408 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8014408:	b580      	push	{r7, lr}
 801440a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 801440c:	4802      	ldr	r0, [pc, #8]	; (8014418 <CAN2_RX0_IRQHandler+0x10>)
 801440e:	f001 fc15 	bl	8015c3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8014412:	bf00      	nop
 8014414:	bd80      	pop	{r7, pc}
 8014416:	bf00      	nop
 8014418:	20009ae4 	.word	0x20009ae4

0801441c <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 801441c:	b580      	push	{r7, lr}
 801441e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8014420:	4802      	ldr	r0, [pc, #8]	; (801442c <CAN2_RX1_IRQHandler+0x10>)
 8014422:	f001 fc0b 	bl	8015c3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8014426:	bf00      	nop
 8014428:	bd80      	pop	{r7, pc}
 801442a:	bf00      	nop
 801442c:	20009ae4 	.word	0x20009ae4

08014430 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8014430:	b580      	push	{r7, lr}
 8014432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8014434:	4802      	ldr	r0, [pc, #8]	; (8014440 <UART7_IRQHandler+0x10>)
 8014436:	f006 fd7b 	bl	801af30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 801443a:	bf00      	nop
 801443c:	bd80      	pop	{r7, pc}
 801443e:	bf00      	nop
 8014440:	2000bb88 	.word	0x2000bb88

08014444 <CAN3_RX0_IRQHandler>:

/**
  * @brief This function handles CAN3 RX0 interrupt.
  */
void CAN3_RX0_IRQHandler(void)
{
 8014444:	b580      	push	{r7, lr}
 8014446:	af00      	add	r7, sp, #0
	}
#endif

#if 1
  /* USER CODE END CAN3_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 8014448:	4802      	ldr	r0, [pc, #8]	; (8014454 <CAN3_RX0_IRQHandler+0x10>)
 801444a:	f001 fbf7 	bl	8015c3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX0_IRQn 1 */
#endif
  /* USER CODE END CAN3_RX0_IRQn 1 */
}
 801444e:	bf00      	nop
 8014450:	bd80      	pop	{r7, pc}
 8014452:	bf00      	nop
 8014454:	20009b48 	.word	0x20009b48

08014458 <CAN3_RX1_IRQHandler>:

/**
  * @brief This function handles CAN3 RX1 interrupt.
  */
void CAN3_RX1_IRQHandler(void)
{
 8014458:	b580      	push	{r7, lr}
 801445a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN3_RX1_IRQn 0 */

  /* USER CODE END CAN3_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan3);
 801445c:	4802      	ldr	r0, [pc, #8]	; (8014468 <CAN3_RX1_IRQHandler+0x10>)
 801445e:	f001 fbed 	bl	8015c3c <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN3_RX1_IRQn 1 */

  /* USER CODE END CAN3_RX1_IRQn 1 */
}
 8014462:	bf00      	nop
 8014464:	bd80      	pop	{r7, pc}
 8014466:	bf00      	nop
 8014468:	20009b48 	.word	0x20009b48

0801446c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 801446c:	b480      	push	{r7}
 801446e:	af00      	add	r7, sp, #0
	return 1;
 8014470:	2301      	movs	r3, #1
}
 8014472:	4618      	mov	r0, r3
 8014474:	46bd      	mov	sp, r7
 8014476:	f85d 7b04 	ldr.w	r7, [sp], #4
 801447a:	4770      	bx	lr

0801447c <_kill>:

int _kill(int pid, int sig)
{
 801447c:	b480      	push	{r7}
 801447e:	b083      	sub	sp, #12
 8014480:	af00      	add	r7, sp, #0
 8014482:	6078      	str	r0, [r7, #4]
 8014484:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8014486:	4b05      	ldr	r3, [pc, #20]	; (801449c <_kill+0x20>)
 8014488:	2216      	movs	r2, #22
 801448a:	601a      	str	r2, [r3, #0]
	return -1;
 801448c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014490:	4618      	mov	r0, r3
 8014492:	370c      	adds	r7, #12
 8014494:	46bd      	mov	sp, r7
 8014496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449a:	4770      	bx	lr
 801449c:	20014298 	.word	0x20014298

080144a0 <_exit>:

void _exit (int status)
{
 80144a0:	b580      	push	{r7, lr}
 80144a2:	b082      	sub	sp, #8
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80144a8:	f04f 31ff 	mov.w	r1, #4294967295
 80144ac:	6878      	ldr	r0, [r7, #4]
 80144ae:	f7ff ffe5 	bl	801447c <_kill>
	while (1) {}		/* Make sure we hang here */
 80144b2:	e7fe      	b.n	80144b2 <_exit+0x12>

080144b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80144b4:	b580      	push	{r7, lr}
 80144b6:	b086      	sub	sp, #24
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	60f8      	str	r0, [r7, #12]
 80144bc:	60b9      	str	r1, [r7, #8]
 80144be:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80144c0:	2300      	movs	r3, #0
 80144c2:	617b      	str	r3, [r7, #20]
 80144c4:	e00a      	b.n	80144dc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80144c6:	f3af 8000 	nop.w
 80144ca:	4601      	mov	r1, r0
 80144cc:	68bb      	ldr	r3, [r7, #8]
 80144ce:	1c5a      	adds	r2, r3, #1
 80144d0:	60ba      	str	r2, [r7, #8]
 80144d2:	b2ca      	uxtb	r2, r1
 80144d4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80144d6:	697b      	ldr	r3, [r7, #20]
 80144d8:	3301      	adds	r3, #1
 80144da:	617b      	str	r3, [r7, #20]
 80144dc:	697a      	ldr	r2, [r7, #20]
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	429a      	cmp	r2, r3
 80144e2:	dbf0      	blt.n	80144c6 <_read+0x12>
	}

return len;
 80144e4:	687b      	ldr	r3, [r7, #4]
}
 80144e6:	4618      	mov	r0, r3
 80144e8:	3718      	adds	r7, #24
 80144ea:	46bd      	mov	sp, r7
 80144ec:	bd80      	pop	{r7, pc}

080144ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80144ee:	b580      	push	{r7, lr}
 80144f0:	b086      	sub	sp, #24
 80144f2:	af00      	add	r7, sp, #0
 80144f4:	60f8      	str	r0, [r7, #12]
 80144f6:	60b9      	str	r1, [r7, #8]
 80144f8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80144fa:	2300      	movs	r3, #0
 80144fc:	617b      	str	r3, [r7, #20]
 80144fe:	e009      	b.n	8014514 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8014500:	68bb      	ldr	r3, [r7, #8]
 8014502:	1c5a      	adds	r2, r3, #1
 8014504:	60ba      	str	r2, [r7, #8]
 8014506:	781b      	ldrb	r3, [r3, #0]
 8014508:	4618      	mov	r0, r3
 801450a:	f7ec fac3 	bl	8000a94 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801450e:	697b      	ldr	r3, [r7, #20]
 8014510:	3301      	adds	r3, #1
 8014512:	617b      	str	r3, [r7, #20]
 8014514:	697a      	ldr	r2, [r7, #20]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	429a      	cmp	r2, r3
 801451a:	dbf1      	blt.n	8014500 <_write+0x12>
	}
	return len;
 801451c:	687b      	ldr	r3, [r7, #4]
}
 801451e:	4618      	mov	r0, r3
 8014520:	3718      	adds	r7, #24
 8014522:	46bd      	mov	sp, r7
 8014524:	bd80      	pop	{r7, pc}

08014526 <_close>:

int _close(int file)
{
 8014526:	b480      	push	{r7}
 8014528:	b083      	sub	sp, #12
 801452a:	af00      	add	r7, sp, #0
 801452c:	6078      	str	r0, [r7, #4]
	return -1;
 801452e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8014532:	4618      	mov	r0, r3
 8014534:	370c      	adds	r7, #12
 8014536:	46bd      	mov	sp, r7
 8014538:	f85d 7b04 	ldr.w	r7, [sp], #4
 801453c:	4770      	bx	lr

0801453e <_fstat>:


int _fstat(int file, struct stat *st)
{
 801453e:	b480      	push	{r7}
 8014540:	b083      	sub	sp, #12
 8014542:	af00      	add	r7, sp, #0
 8014544:	6078      	str	r0, [r7, #4]
 8014546:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8014548:	683b      	ldr	r3, [r7, #0]
 801454a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801454e:	605a      	str	r2, [r3, #4]
	return 0;
 8014550:	2300      	movs	r3, #0
}
 8014552:	4618      	mov	r0, r3
 8014554:	370c      	adds	r7, #12
 8014556:	46bd      	mov	sp, r7
 8014558:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455c:	4770      	bx	lr

0801455e <_isatty>:

int _isatty(int file)
{
 801455e:	b480      	push	{r7}
 8014560:	b083      	sub	sp, #12
 8014562:	af00      	add	r7, sp, #0
 8014564:	6078      	str	r0, [r7, #4]
	return 1;
 8014566:	2301      	movs	r3, #1
}
 8014568:	4618      	mov	r0, r3
 801456a:	370c      	adds	r7, #12
 801456c:	46bd      	mov	sp, r7
 801456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014572:	4770      	bx	lr

08014574 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8014574:	b480      	push	{r7}
 8014576:	b085      	sub	sp, #20
 8014578:	af00      	add	r7, sp, #0
 801457a:	60f8      	str	r0, [r7, #12]
 801457c:	60b9      	str	r1, [r7, #8]
 801457e:	607a      	str	r2, [r7, #4]
	return 0;
 8014580:	2300      	movs	r3, #0
}
 8014582:	4618      	mov	r0, r3
 8014584:	3714      	adds	r7, #20
 8014586:	46bd      	mov	sp, r7
 8014588:	f85d 7b04 	ldr.w	r7, [sp], #4
 801458c:	4770      	bx	lr
	...

08014590 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8014590:	b480      	push	{r7}
 8014592:	b087      	sub	sp, #28
 8014594:	af00      	add	r7, sp, #0
 8014596:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8014598:	4a14      	ldr	r2, [pc, #80]	; (80145ec <_sbrk+0x5c>)
 801459a:	4b15      	ldr	r3, [pc, #84]	; (80145f0 <_sbrk+0x60>)
 801459c:	1ad3      	subs	r3, r2, r3
 801459e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80145a0:	697b      	ldr	r3, [r7, #20]
 80145a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80145a4:	4b13      	ldr	r3, [pc, #76]	; (80145f4 <_sbrk+0x64>)
 80145a6:	681b      	ldr	r3, [r3, #0]
 80145a8:	2b00      	cmp	r3, #0
 80145aa:	d102      	bne.n	80145b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80145ac:	4b11      	ldr	r3, [pc, #68]	; (80145f4 <_sbrk+0x64>)
 80145ae:	4a12      	ldr	r2, [pc, #72]	; (80145f8 <_sbrk+0x68>)
 80145b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80145b2:	4b10      	ldr	r3, [pc, #64]	; (80145f4 <_sbrk+0x64>)
 80145b4:	681a      	ldr	r2, [r3, #0]
 80145b6:	687b      	ldr	r3, [r7, #4]
 80145b8:	4413      	add	r3, r2
 80145ba:	693a      	ldr	r2, [r7, #16]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d205      	bcs.n	80145cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80145c0:	4b0e      	ldr	r3, [pc, #56]	; (80145fc <_sbrk+0x6c>)
 80145c2:	220c      	movs	r2, #12
 80145c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80145c6:	f04f 33ff 	mov.w	r3, #4294967295
 80145ca:	e009      	b.n	80145e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80145cc:	4b09      	ldr	r3, [pc, #36]	; (80145f4 <_sbrk+0x64>)
 80145ce:	681b      	ldr	r3, [r3, #0]
 80145d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80145d2:	4b08      	ldr	r3, [pc, #32]	; (80145f4 <_sbrk+0x64>)
 80145d4:	681a      	ldr	r2, [r3, #0]
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	4413      	add	r3, r2
 80145da:	4a06      	ldr	r2, [pc, #24]	; (80145f4 <_sbrk+0x64>)
 80145dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80145de:	68fb      	ldr	r3, [r7, #12]
}
 80145e0:	4618      	mov	r0, r3
 80145e2:	371c      	adds	r7, #28
 80145e4:	46bd      	mov	sp, r7
 80145e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145ea:	4770      	bx	lr
 80145ec:	20080000 	.word	0x20080000
 80145f0:	00000400 	.word	0x00000400
 80145f4:	20009d08 	.word	0x20009d08
 80145f8:	200142a0 	.word	0x200142a0
 80145fc:	20014298 	.word	0x20014298

08014600 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8014600:	b480      	push	{r7}
 8014602:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8014604:	4b06      	ldr	r3, [pc, #24]	; (8014620 <SystemInit+0x20>)
 8014606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801460a:	4a05      	ldr	r2, [pc, #20]	; (8014620 <SystemInit+0x20>)
 801460c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014610:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8014614:	bf00      	nop
 8014616:	46bd      	mov	sp, r7
 8014618:	f85d 7b04 	ldr.w	r7, [sp], #4
 801461c:	4770      	bx	lr
 801461e:	bf00      	nop
 8014620:	e000ed00 	.word	0xe000ed00

08014624 <MX_USART1_UART_Init>:

}
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8014624:	b580      	push	{r7, lr}
 8014626:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8014628:	4b16      	ldr	r3, [pc, #88]	; (8014684 <MX_USART1_UART_Init+0x60>)
 801462a:	4a17      	ldr	r2, [pc, #92]	; (8014688 <MX_USART1_UART_Init+0x64>)
 801462c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 801462e:	4b15      	ldr	r3, [pc, #84]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014630:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8014634:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8014636:	4b13      	ldr	r3, [pc, #76]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014638:	2200      	movs	r2, #0
 801463a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 801463c:	4b11      	ldr	r3, [pc, #68]	; (8014684 <MX_USART1_UART_Init+0x60>)
 801463e:	2200      	movs	r2, #0
 8014640:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8014642:	4b10      	ldr	r3, [pc, #64]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014644:	2200      	movs	r2, #0
 8014646:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8014648:	4b0e      	ldr	r3, [pc, #56]	; (8014684 <MX_USART1_UART_Init+0x60>)
 801464a:	220c      	movs	r2, #12
 801464c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801464e:	4b0d      	ldr	r3, [pc, #52]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014650:	2200      	movs	r2, #0
 8014652:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8014654:	4b0b      	ldr	r3, [pc, #44]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014656:	2200      	movs	r2, #0
 8014658:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 801465a:	4b0a      	ldr	r3, [pc, #40]	; (8014684 <MX_USART1_UART_Init+0x60>)
 801465c:	2200      	movs	r2, #0
 801465e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8014660:	4b08      	ldr	r3, [pc, #32]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014662:	2200      	movs	r2, #0
 8014664:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8014666:	4807      	ldr	r0, [pc, #28]	; (8014684 <MX_USART1_UART_Init+0x60>)
 8014668:	f006 fb80 	bl	801ad6c <HAL_UART_Init>
 801466c:	4603      	mov	r3, r0
 801466e:	2b00      	cmp	r3, #0
 8014670:	d001      	beq.n	8014676 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8014672:	f7ff f885 	bl	8013780 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014676:	2280      	movs	r2, #128	; 0x80
 8014678:	4904      	ldr	r1, [pc, #16]	; (801468c <MX_USART1_UART_Init+0x68>)
 801467a:	4802      	ldr	r0, [pc, #8]	; (8014684 <MX_USART1_UART_Init+0x60>)
 801467c:	f007 fee2 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART1_Init 2 */

}
 8014680:	bf00      	nop
 8014682:	bd80      	pop	{r7, pc}
 8014684:	2000bc40 	.word	0x2000bc40
 8014688:	40011000 	.word	0x40011000
 801468c:	2000b818 	.word	0x2000b818

08014690 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8014690:	b580      	push	{r7, lr}
 8014692:	b0b4      	sub	sp, #208	; 0xd0
 8014694:	af00      	add	r7, sp, #0
 8014696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8014698:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801469c:	2200      	movs	r2, #0
 801469e:	601a      	str	r2, [r3, #0]
 80146a0:	605a      	str	r2, [r3, #4]
 80146a2:	609a      	str	r2, [r3, #8]
 80146a4:	60da      	str	r2, [r3, #12]
 80146a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80146a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80146ac:	2290      	movs	r2, #144	; 0x90
 80146ae:	2100      	movs	r1, #0
 80146b0:	4618      	mov	r0, r3
 80146b2:	f00d fd13 	bl	80220dc <memset>
  if(uartHandle->Instance==UART4)
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	4aa7      	ldr	r2, [pc, #668]	; (8014958 <HAL_UART_MspInit+0x2c8>)
 80146bc:	4293      	cmp	r3, r2
 80146be:	d145      	bne.n	801474c <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80146c0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80146c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80146c6:	2300      	movs	r3, #0
 80146c8:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80146ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80146ce:	4618      	mov	r0, r3
 80146d0:	f004 fdec 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 80146d4:	4603      	mov	r3, r0
 80146d6:	2b00      	cmp	r3, #0
 80146d8:	d001      	beq.n	80146de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80146da:	f7ff f851 	bl	8013780 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80146de:	4b9f      	ldr	r3, [pc, #636]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80146e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146e2:	4a9e      	ldr	r2, [pc, #632]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80146e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80146e8:	6413      	str	r3, [r2, #64]	; 0x40
 80146ea:	4b9c      	ldr	r3, [pc, #624]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80146ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80146ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80146f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80146f4:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOH_CLK_ENABLE();
 80146f6:	4b99      	ldr	r3, [pc, #612]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80146f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80146fa:	4a98      	ldr	r2, [pc, #608]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80146fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014700:	6313      	str	r3, [r2, #48]	; 0x30
 8014702:	4b96      	ldr	r3, [pc, #600]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014706:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801470a:	627b      	str	r3, [r7, #36]	; 0x24
 801470c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**UART4 GPIO Configuration
    PH13     ------> UART4_TX
    PH14     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = UART4_TX_Pin|UART4_RX_Pin;
 801470e:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8014712:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014716:	2302      	movs	r3, #2
 8014718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801471c:	2300      	movs	r3, #0
 801471e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014722:	2303      	movs	r3, #3
 8014724:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8014728:	2308      	movs	r3, #8
 801472a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 801472e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014732:	4619      	mov	r1, r3
 8014734:	488a      	ldr	r0, [pc, #552]	; (8014960 <HAL_UART_MspInit+0x2d0>)
 8014736:	f003 f8bb 	bl	80178b0 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 801473a:	2200      	movs	r2, #0
 801473c:	2105      	movs	r1, #5
 801473e:	2034      	movs	r0, #52	; 0x34
 8014740:	f001 fd8b 	bl	801625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8014744:	2034      	movs	r0, #52	; 0x34
 8014746:	f001 fda4 	bl	8016292 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 801474a:	e100      	b.n	801494e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART5)
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	681b      	ldr	r3, [r3, #0]
 8014750:	4a84      	ldr	r2, [pc, #528]	; (8014964 <HAL_UART_MspInit+0x2d4>)
 8014752:	4293      	cmp	r3, r2
 8014754:	d167      	bne.n	8014826 <HAL_UART_MspInit+0x196>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 8014756:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801475a:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 801475c:	2300      	movs	r3, #0
 801475e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8014762:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014766:	4618      	mov	r0, r3
 8014768:	f004 fda0 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 801476c:	4603      	mov	r3, r0
 801476e:	2b00      	cmp	r3, #0
 8014770:	d001      	beq.n	8014776 <HAL_UART_MspInit+0xe6>
      Error_Handler();
 8014772:	f7ff f805 	bl	8013780 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 8014776:	4b79      	ldr	r3, [pc, #484]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801477a:	4a78      	ldr	r2, [pc, #480]	; (801495c <HAL_UART_MspInit+0x2cc>)
 801477c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014780:	6413      	str	r3, [r2, #64]	; 0x40
 8014782:	4b76      	ldr	r3, [pc, #472]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801478a:	623b      	str	r3, [r7, #32]
 801478c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801478e:	4b73      	ldr	r3, [pc, #460]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014792:	4a72      	ldr	r2, [pc, #456]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014794:	f043 0308 	orr.w	r3, r3, #8
 8014798:	6313      	str	r3, [r2, #48]	; 0x30
 801479a:	4b70      	ldr	r3, [pc, #448]	; (801495c <HAL_UART_MspInit+0x2cc>)
 801479c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801479e:	f003 0308 	and.w	r3, r3, #8
 80147a2:	61fb      	str	r3, [r7, #28]
 80147a4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80147a6:	4b6d      	ldr	r3, [pc, #436]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80147a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147aa:	4a6c      	ldr	r2, [pc, #432]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80147ac:	f043 0302 	orr.w	r3, r3, #2
 80147b0:	6313      	str	r3, [r2, #48]	; 0x30
 80147b2:	4b6a      	ldr	r3, [pc, #424]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80147b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80147b6:	f003 0302 	and.w	r3, r3, #2
 80147ba:	61bb      	str	r3, [r7, #24]
 80147bc:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = UART5_RX_Pin;
 80147be:	2304      	movs	r3, #4
 80147c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147c4:	2302      	movs	r3, #2
 80147c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147ca:	2300      	movs	r3, #0
 80147cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147d0:	2303      	movs	r3, #3
 80147d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80147d6:	2308      	movs	r3, #8
 80147d8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_RX_GPIO_Port, &GPIO_InitStruct);
 80147dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80147e0:	4619      	mov	r1, r3
 80147e2:	4861      	ldr	r0, [pc, #388]	; (8014968 <HAL_UART_MspInit+0x2d8>)
 80147e4:	f003 f864 	bl	80178b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = UART5_TX_Pin;
 80147e8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80147ec:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80147f0:	2302      	movs	r3, #2
 80147f2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80147f6:	2300      	movs	r3, #0
 80147f8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80147fc:	2303      	movs	r3, #3
 80147fe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_UART5;
 8014802:	2307      	movs	r3, #7
 8014804:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(UART5_TX_GPIO_Port, &GPIO_InitStruct);
 8014808:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 801480c:	4619      	mov	r1, r3
 801480e:	4857      	ldr	r0, [pc, #348]	; (801496c <HAL_UART_MspInit+0x2dc>)
 8014810:	f003 f84e 	bl	80178b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8014814:	2200      	movs	r2, #0
 8014816:	2105      	movs	r1, #5
 8014818:	2035      	movs	r0, #53	; 0x35
 801481a:	f001 fd1e 	bl	801625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 801481e:	2035      	movs	r0, #53	; 0x35
 8014820:	f001 fd37 	bl	8016292 <HAL_NVIC_EnableIRQ>
}
 8014824:	e093      	b.n	801494e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==UART7)
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	681b      	ldr	r3, [r3, #0]
 801482a:	4a51      	ldr	r2, [pc, #324]	; (8014970 <HAL_UART_MspInit+0x2e0>)
 801482c:	4293      	cmp	r3, r2
 801482e:	d145      	bne.n	80148bc <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8014830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8014834:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8014836:	2300      	movs	r3, #0
 8014838:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801483c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014840:	4618      	mov	r0, r3
 8014842:	f004 fd33 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 8014846:	4603      	mov	r3, r0
 8014848:	2b00      	cmp	r3, #0
 801484a:	d001      	beq.n	8014850 <HAL_UART_MspInit+0x1c0>
      Error_Handler();
 801484c:	f7fe ff98 	bl	8013780 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8014850:	4b42      	ldr	r3, [pc, #264]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014854:	4a41      	ldr	r2, [pc, #260]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014856:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 801485a:	6413      	str	r3, [r2, #64]	; 0x40
 801485c:	4b3f      	ldr	r3, [pc, #252]	; (801495c <HAL_UART_MspInit+0x2cc>)
 801485e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8014860:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8014864:	617b      	str	r3, [r7, #20]
 8014866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8014868:	4b3c      	ldr	r3, [pc, #240]	; (801495c <HAL_UART_MspInit+0x2cc>)
 801486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801486c:	4a3b      	ldr	r2, [pc, #236]	; (801495c <HAL_UART_MspInit+0x2cc>)
 801486e:	f043 0320 	orr.w	r3, r3, #32
 8014872:	6313      	str	r3, [r2, #48]	; 0x30
 8014874:	4b39      	ldr	r3, [pc, #228]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014878:	f003 0320 	and.w	r3, r3, #32
 801487c:	613b      	str	r3, [r7, #16]
 801487e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = UART7_RX_Pin|UART7_TX_Pin;
 8014880:	23c0      	movs	r3, #192	; 0xc0
 8014882:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8014886:	2302      	movs	r3, #2
 8014888:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801488c:	2300      	movs	r3, #0
 801488e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014892:	2303      	movs	r3, #3
 8014894:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8014898:	2308      	movs	r3, #8
 801489a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 801489e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80148a2:	4619      	mov	r1, r3
 80148a4:	4833      	ldr	r0, [pc, #204]	; (8014974 <HAL_UART_MspInit+0x2e4>)
 80148a6:	f003 f803 	bl	80178b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80148aa:	2200      	movs	r2, #0
 80148ac:	2105      	movs	r1, #5
 80148ae:	2052      	movs	r0, #82	; 0x52
 80148b0:	f001 fcd3 	bl	801625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80148b4:	2052      	movs	r0, #82	; 0x52
 80148b6:	f001 fcec 	bl	8016292 <HAL_NVIC_EnableIRQ>
}
 80148ba:	e048      	b.n	801494e <HAL_UART_MspInit+0x2be>
  else if(uartHandle->Instance==USART1)
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	4a2d      	ldr	r2, [pc, #180]	; (8014978 <HAL_UART_MspInit+0x2e8>)
 80148c2:	4293      	cmp	r3, r2
 80148c4:	d143      	bne.n	801494e <HAL_UART_MspInit+0x2be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80148c6:	2340      	movs	r3, #64	; 0x40
 80148c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80148ca:	2300      	movs	r3, #0
 80148cc:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80148ce:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80148d2:	4618      	mov	r0, r3
 80148d4:	f004 fcea 	bl	80192ac <HAL_RCCEx_PeriphCLKConfig>
 80148d8:	4603      	mov	r3, r0
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d001      	beq.n	80148e2 <HAL_UART_MspInit+0x252>
      Error_Handler();
 80148de:	f7fe ff4f 	bl	8013780 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80148e2:	4b1e      	ldr	r3, [pc, #120]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80148e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148e6:	4a1d      	ldr	r2, [pc, #116]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80148e8:	f043 0310 	orr.w	r3, r3, #16
 80148ec:	6453      	str	r3, [r2, #68]	; 0x44
 80148ee:	4b1b      	ldr	r3, [pc, #108]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80148f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80148f2:	f003 0310 	and.w	r3, r3, #16
 80148f6:	60fb      	str	r3, [r7, #12]
 80148f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80148fa:	4b18      	ldr	r3, [pc, #96]	; (801495c <HAL_UART_MspInit+0x2cc>)
 80148fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80148fe:	4a17      	ldr	r2, [pc, #92]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014900:	f043 0301 	orr.w	r3, r3, #1
 8014904:	6313      	str	r3, [r2, #48]	; 0x30
 8014906:	4b15      	ldr	r3, [pc, #84]	; (801495c <HAL_UART_MspInit+0x2cc>)
 8014908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801490a:	f003 0301 	and.w	r3, r3, #1
 801490e:	60bb      	str	r3, [r7, #8]
 8014910:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 8014912:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8014916:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801491a:	2302      	movs	r3, #2
 801491c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8014920:	2300      	movs	r3, #0
 8014922:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8014926:	2303      	movs	r3, #3
 8014928:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 801492c:	2307      	movs	r3, #7
 801492e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8014932:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8014936:	4619      	mov	r1, r3
 8014938:	4810      	ldr	r0, [pc, #64]	; (801497c <HAL_UART_MspInit+0x2ec>)
 801493a:	f002 ffb9 	bl	80178b0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 801493e:	2200      	movs	r2, #0
 8014940:	2107      	movs	r1, #7
 8014942:	2025      	movs	r0, #37	; 0x25
 8014944:	f001 fc89 	bl	801625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8014948:	2025      	movs	r0, #37	; 0x25
 801494a:	f001 fca2 	bl	8016292 <HAL_NVIC_EnableIRQ>
}
 801494e:	bf00      	nop
 8014950:	37d0      	adds	r7, #208	; 0xd0
 8014952:	46bd      	mov	sp, r7
 8014954:	bd80      	pop	{r7, pc}
 8014956:	bf00      	nop
 8014958:	40004c00 	.word	0x40004c00
 801495c:	40023800 	.word	0x40023800
 8014960:	40021c00 	.word	0x40021c00
 8014964:	40005000 	.word	0x40005000
 8014968:	40020c00 	.word	0x40020c00
 801496c:	40020400 	.word	0x40020400
 8014970:	40007800 	.word	0x40007800
 8014974:	40021400 	.word	0x40021400
 8014978:	40011000 	.word	0x40011000
 801497c:	40020000 	.word	0x40020000

08014980 <UART4_Init>:
}

/* USER CODE BEGIN 1 */

void UART4_Init(uint32_t BaudRate)
{
 8014980:	b580      	push	{r7, lr}
 8014982:	b082      	sub	sp, #8
 8014984:	af00      	add	r7, sp, #0
 8014986:	6078      	str	r0, [r7, #4]
	/* USER CODE END UART4_Init 0 */

	/* USER CODE BEGIN UART4_Init 1 */

	/* USER CODE END UART4_Init 1 */
	huart4.Instance = UART4;
 8014988:	4b17      	ldr	r3, [pc, #92]	; (80149e8 <UART4_Init+0x68>)
 801498a:	4a18      	ldr	r2, [pc, #96]	; (80149ec <UART4_Init+0x6c>)
 801498c:	601a      	str	r2, [r3, #0]
	huart4.Init.BaudRate = BaudRate;
 801498e:	4a16      	ldr	r2, [pc, #88]	; (80149e8 <UART4_Init+0x68>)
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	6053      	str	r3, [r2, #4]
	huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8014994:	4b14      	ldr	r3, [pc, #80]	; (80149e8 <UART4_Init+0x68>)
 8014996:	2200      	movs	r2, #0
 8014998:	609a      	str	r2, [r3, #8]
	huart4.Init.StopBits = UART_STOPBITS_1;
 801499a:	4b13      	ldr	r3, [pc, #76]	; (80149e8 <UART4_Init+0x68>)
 801499c:	2200      	movs	r2, #0
 801499e:	60da      	str	r2, [r3, #12]
	huart4.Init.Parity = UART_PARITY_NONE;
 80149a0:	4b11      	ldr	r3, [pc, #68]	; (80149e8 <UART4_Init+0x68>)
 80149a2:	2200      	movs	r2, #0
 80149a4:	611a      	str	r2, [r3, #16]
	huart4.Init.Mode = UART_MODE_TX_RX;
 80149a6:	4b10      	ldr	r3, [pc, #64]	; (80149e8 <UART4_Init+0x68>)
 80149a8:	220c      	movs	r2, #12
 80149aa:	615a      	str	r2, [r3, #20]
	huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80149ac:	4b0e      	ldr	r3, [pc, #56]	; (80149e8 <UART4_Init+0x68>)
 80149ae:	2200      	movs	r2, #0
 80149b0:	619a      	str	r2, [r3, #24]
	huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80149b2:	4b0d      	ldr	r3, [pc, #52]	; (80149e8 <UART4_Init+0x68>)
 80149b4:	2200      	movs	r2, #0
 80149b6:	61da      	str	r2, [r3, #28]
	huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80149b8:	4b0b      	ldr	r3, [pc, #44]	; (80149e8 <UART4_Init+0x68>)
 80149ba:	2200      	movs	r2, #0
 80149bc:	621a      	str	r2, [r3, #32]
	huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80149be:	4b0a      	ldr	r3, [pc, #40]	; (80149e8 <UART4_Init+0x68>)
 80149c0:	2200      	movs	r2, #0
 80149c2:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart4) != HAL_OK)
 80149c4:	4808      	ldr	r0, [pc, #32]	; (80149e8 <UART4_Init+0x68>)
 80149c6:	f006 f9d1 	bl	801ad6c <HAL_UART_Init>
 80149ca:	4603      	mov	r3, r0
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	d001      	beq.n	80149d4 <UART4_Init+0x54>
	{
		Error_Handler();
 80149d0:	f7fe fed6 	bl	8013780 <Error_Handler>
	}
	/* USER CODE BEGIN UART4_Init 2 */
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 80149d4:	2280      	movs	r2, #128	; 0x80
 80149d6:	4906      	ldr	r1, [pc, #24]	; (80149f0 <UART4_Init+0x70>)
 80149d8:	4803      	ldr	r0, [pc, #12]	; (80149e8 <UART4_Init+0x68>)
 80149da:	f007 fd33 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
	/* USER CODE END UART4_Init 2 */

}
 80149de:	bf00      	nop
 80149e0:	3708      	adds	r7, #8
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}
 80149e6:	bf00      	nop
 80149e8:	2000ba18 	.word	0x2000ba18
 80149ec:	40004c00 	.word	0x40004c00
 80149f0:	2000b998 	.word	0x2000b998

080149f4 <HAL_UARTEx_RxEventCallback>:


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80149f4:	b580      	push	{r7, lr}
 80149f6:	b084      	sub	sp, #16
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	460b      	mov	r3, r1
 80149fe:	807b      	strh	r3, [r7, #2]
	if(huart->Instance == USART1)
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	4a60      	ldr	r2, [pc, #384]	; (8014b88 <HAL_UARTEx_RxEventCallback+0x194>)
 8014a06:	4293      	cmp	r3, r2
 8014a08:	d129      	bne.n	8014a5e <HAL_UARTEx_RxEventCallback+0x6a>
	{
		HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014a0a:	2280      	movs	r2, #128	; 0x80
 8014a0c:	495f      	ldr	r1, [pc, #380]	; (8014b8c <HAL_UARTEx_RxEventCallback+0x198>)
 8014a0e:	4860      	ldr	r0, [pc, #384]	; (8014b90 <HAL_UARTEx_RxEventCallback+0x19c>)
 8014a10:	f007 fd18 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014a14:	2300      	movs	r3, #0
 8014a16:	81fb      	strh	r3, [r7, #14]
 8014a18:	e017      	b.n	8014a4a <HAL_UARTEx_RxEventCallback+0x56>
		{
			ISP_UART_BUFF[ISP_PORT].CIR_BUFF[ISP_UART_BUFF[ISP_PORT].Write_End++] = ISP_PORT_RX_BUF[i];
 8014a1a:	89fa      	ldrh	r2, [r7, #14]
 8014a1c:	4b5d      	ldr	r3, [pc, #372]	; (8014b94 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014a1e:	881b      	ldrh	r3, [r3, #0]
 8014a20:	1c59      	adds	r1, r3, #1
 8014a22:	b288      	uxth	r0, r1
 8014a24:	495b      	ldr	r1, [pc, #364]	; (8014b94 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014a26:	8008      	strh	r0, [r1, #0]
 8014a28:	4619      	mov	r1, r3
 8014a2a:	4b58      	ldr	r3, [pc, #352]	; (8014b8c <HAL_UARTEx_RxEventCallback+0x198>)
 8014a2c:	5c9a      	ldrb	r2, [r3, r2]
 8014a2e:	4b59      	ldr	r3, [pc, #356]	; (8014b94 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014a30:	440b      	add	r3, r1
 8014a32:	711a      	strb	r2, [r3, #4]
			if(ISP_UART_BUFF[ISP_PORT].Write_End >= ISP_UART_BUFF_SIZE)
 8014a34:	4b57      	ldr	r3, [pc, #348]	; (8014b94 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014a36:	881b      	ldrh	r3, [r3, #0]
 8014a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014a3c:	d302      	bcc.n	8014a44 <HAL_UARTEx_RxEventCallback+0x50>
			{
				ISP_UART_BUFF[ISP_PORT].Write_End = 0;
 8014a3e:	4b55      	ldr	r3, [pc, #340]	; (8014b94 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8014a40:	2200      	movs	r2, #0
 8014a42:	801a      	strh	r2, [r3, #0]
		for(uint16_t i=0;i<Size;++i)
 8014a44:	89fb      	ldrh	r3, [r7, #14]
 8014a46:	3301      	adds	r3, #1
 8014a48:	81fb      	strh	r3, [r7, #14]
 8014a4a:	89fa      	ldrh	r2, [r7, #14]
 8014a4c:	887b      	ldrh	r3, [r7, #2]
 8014a4e:	429a      	cmp	r2, r3
 8014a50:	d3e3      	bcc.n	8014a1a <HAL_UARTEx_RxEventCallback+0x26>
			}
		}
		Isp_Intr_Clk = HAL_GetTick();
 8014a52:	f000 fc21 	bl	8015298 <HAL_GetTick>
 8014a56:	4603      	mov	r3, r0
 8014a58:	4a4f      	ldr	r2, [pc, #316]	; (8014b98 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8014a5a:	6013      	str	r3, [r2, #0]
				UART_BUFFS[THREE_PORT].Write_End = 0;
			}
		}
		UART4_Intr_Clk = HAL_GetTick();
	}
}
 8014a5c:	e090      	b.n	8014b80 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART5)
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	681b      	ldr	r3, [r3, #0]
 8014a62:	4a4e      	ldr	r2, [pc, #312]	; (8014b9c <HAL_UARTEx_RxEventCallback+0x1a8>)
 8014a64:	4293      	cmp	r3, r2
 8014a66:	d129      	bne.n	8014abc <HAL_UARTEx_RxEventCallback+0xc8>
		HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014a68:	2280      	movs	r2, #128	; 0x80
 8014a6a:	494d      	ldr	r1, [pc, #308]	; (8014ba0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014a6c:	484d      	ldr	r0, [pc, #308]	; (8014ba4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8014a6e:	f007 fce9 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014a72:	2300      	movs	r3, #0
 8014a74:	81bb      	strh	r3, [r7, #12]
 8014a76:	e01c      	b.n	8014ab2 <HAL_UARTEx_RxEventCallback+0xbe>
			UART_BUFFS[ONE_PORT].CIR_BUFF[UART_BUFFS[ONE_PORT].Write_End++] = PORT1_PORT_RX_BUF[i];
 8014a78:	89ba      	ldrh	r2, [r7, #12]
 8014a7a:	4b4b      	ldr	r3, [pc, #300]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014a7c:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014a80:	1c59      	adds	r1, r3, #1
 8014a82:	b288      	uxth	r0, r1
 8014a84:	4948      	ldr	r1, [pc, #288]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014a86:	f8a1 0404 	strh.w	r0, [r1, #1028]	; 0x404
 8014a8a:	4619      	mov	r1, r3
 8014a8c:	4b44      	ldr	r3, [pc, #272]	; (8014ba0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8014a8e:	5c9a      	ldrb	r2, [r3, r2]
 8014a90:	4b45      	ldr	r3, [pc, #276]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014a92:	440b      	add	r3, r1
 8014a94:	f883 2408 	strb.w	r2, [r3, #1032]	; 0x408
			if(UART_BUFFS[ONE_PORT].Write_End >= UART_BUFF_SIZE)
 8014a98:	4b43      	ldr	r3, [pc, #268]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014a9a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 8014a9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014aa2:	d303      	bcc.n	8014aac <HAL_UARTEx_RxEventCallback+0xb8>
				UART_BUFFS[ONE_PORT].Write_End = 0;
 8014aa4:	4b40      	ldr	r3, [pc, #256]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014aa6:	2200      	movs	r2, #0
 8014aa8:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		for(uint16_t i=0;i<Size;++i)
 8014aac:	89bb      	ldrh	r3, [r7, #12]
 8014aae:	3301      	adds	r3, #1
 8014ab0:	81bb      	strh	r3, [r7, #12]
 8014ab2:	89ba      	ldrh	r2, [r7, #12]
 8014ab4:	887b      	ldrh	r3, [r7, #2]
 8014ab6:	429a      	cmp	r2, r3
 8014ab8:	d3de      	bcc.n	8014a78 <HAL_UARTEx_RxEventCallback+0x84>
}
 8014aba:	e061      	b.n	8014b80 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART7)
 8014abc:	687b      	ldr	r3, [r7, #4]
 8014abe:	681b      	ldr	r3, [r3, #0]
 8014ac0:	4a3a      	ldr	r2, [pc, #232]	; (8014bac <HAL_UARTEx_RxEventCallback+0x1b8>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d129      	bne.n	8014b1a <HAL_UARTEx_RxEventCallback+0x126>
		HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014ac6:	2280      	movs	r2, #128	; 0x80
 8014ac8:	4939      	ldr	r1, [pc, #228]	; (8014bb0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014aca:	483a      	ldr	r0, [pc, #232]	; (8014bb4 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8014acc:	f007 fcba 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014ad0:	2300      	movs	r3, #0
 8014ad2:	817b      	strh	r3, [r7, #10]
 8014ad4:	e01c      	b.n	8014b10 <HAL_UARTEx_RxEventCallback+0x11c>
			UART_BUFFS[TWO_PORT].CIR_BUFF[UART_BUFFS[TWO_PORT].Write_End++] = PORT2_PORT_RX_BUF[i];
 8014ad6:	897a      	ldrh	r2, [r7, #10]
 8014ad8:	4b33      	ldr	r3, [pc, #204]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014ada:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014ade:	1c59      	adds	r1, r3, #1
 8014ae0:	b288      	uxth	r0, r1
 8014ae2:	4931      	ldr	r1, [pc, #196]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014ae4:	f8a1 0808 	strh.w	r0, [r1, #2056]	; 0x808
 8014ae8:	4619      	mov	r1, r3
 8014aea:	4b31      	ldr	r3, [pc, #196]	; (8014bb0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8014aec:	5c9a      	ldrb	r2, [r3, r2]
 8014aee:	4b2e      	ldr	r3, [pc, #184]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014af0:	440b      	add	r3, r1
 8014af2:	f883 280c 	strb.w	r2, [r3, #2060]	; 0x80c
			if(UART_BUFFS[TWO_PORT].Write_End >= UART_BUFF_SIZE)
 8014af6:	4b2c      	ldr	r3, [pc, #176]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014af8:	f8b3 3808 	ldrh.w	r3, [r3, #2056]	; 0x808
 8014afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b00:	d303      	bcc.n	8014b0a <HAL_UARTEx_RxEventCallback+0x116>
				UART_BUFFS[TWO_PORT].Write_End = 0;
 8014b02:	4b29      	ldr	r3, [pc, #164]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014b04:	2200      	movs	r2, #0
 8014b06:	f8a3 2808 	strh.w	r2, [r3, #2056]	; 0x808
		for(uint16_t i=0;i<Size;++i)
 8014b0a:	897b      	ldrh	r3, [r7, #10]
 8014b0c:	3301      	adds	r3, #1
 8014b0e:	817b      	strh	r3, [r7, #10]
 8014b10:	897a      	ldrh	r2, [r7, #10]
 8014b12:	887b      	ldrh	r3, [r7, #2]
 8014b14:	429a      	cmp	r2, r3
 8014b16:	d3de      	bcc.n	8014ad6 <HAL_UARTEx_RxEventCallback+0xe2>
}
 8014b18:	e032      	b.n	8014b80 <HAL_UARTEx_RxEventCallback+0x18c>
	else if(huart->Instance == UART4)
 8014b1a:	687b      	ldr	r3, [r7, #4]
 8014b1c:	681b      	ldr	r3, [r3, #0]
 8014b1e:	4a26      	ldr	r2, [pc, #152]	; (8014bb8 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8014b20:	4293      	cmp	r3, r2
 8014b22:	d12d      	bne.n	8014b80 <HAL_UARTEx_RxEventCallback+0x18c>
		HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014b24:	2280      	movs	r2, #128	; 0x80
 8014b26:	4925      	ldr	r1, [pc, #148]	; (8014bbc <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014b28:	4825      	ldr	r0, [pc, #148]	; (8014bc0 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8014b2a:	f007 fc8b 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
		for(uint16_t i=0;i<Size;++i)
 8014b2e:	2300      	movs	r3, #0
 8014b30:	813b      	strh	r3, [r7, #8]
 8014b32:	e01c      	b.n	8014b6e <HAL_UARTEx_RxEventCallback+0x17a>
			UART_BUFFS[THREE_PORT].CIR_BUFF[UART_BUFFS[THREE_PORT].Write_End++] = PORT3_PORT_RX_BUF[i];
 8014b34:	893a      	ldrh	r2, [r7, #8]
 8014b36:	4b1c      	ldr	r3, [pc, #112]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014b38:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014b3c:	1c59      	adds	r1, r3, #1
 8014b3e:	b288      	uxth	r0, r1
 8014b40:	4919      	ldr	r1, [pc, #100]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014b42:	f8a1 0c0c 	strh.w	r0, [r1, #3084]	; 0xc0c
 8014b46:	4619      	mov	r1, r3
 8014b48:	4b1c      	ldr	r3, [pc, #112]	; (8014bbc <HAL_UARTEx_RxEventCallback+0x1c8>)
 8014b4a:	5c9a      	ldrb	r2, [r3, r2]
 8014b4c:	4b16      	ldr	r3, [pc, #88]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014b4e:	440b      	add	r3, r1
 8014b50:	f883 2c10 	strb.w	r2, [r3, #3088]	; 0xc10
			if(UART_BUFFS[THREE_PORT].Write_End >= UART_BUFF_SIZE)
 8014b54:	4b14      	ldr	r3, [pc, #80]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014b56:	f8b3 3c0c 	ldrh.w	r3, [r3, #3084]	; 0xc0c
 8014b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014b5e:	d303      	bcc.n	8014b68 <HAL_UARTEx_RxEventCallback+0x174>
				UART_BUFFS[THREE_PORT].Write_End = 0;
 8014b60:	4b11      	ldr	r3, [pc, #68]	; (8014ba8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8014b62:	2200      	movs	r2, #0
 8014b64:	f8a3 2c0c 	strh.w	r2, [r3, #3084]	; 0xc0c
		for(uint16_t i=0;i<Size;++i)
 8014b68:	893b      	ldrh	r3, [r7, #8]
 8014b6a:	3301      	adds	r3, #1
 8014b6c:	813b      	strh	r3, [r7, #8]
 8014b6e:	893a      	ldrh	r2, [r7, #8]
 8014b70:	887b      	ldrh	r3, [r7, #2]
 8014b72:	429a      	cmp	r2, r3
 8014b74:	d3de      	bcc.n	8014b34 <HAL_UARTEx_RxEventCallback+0x140>
		UART4_Intr_Clk = HAL_GetTick();
 8014b76:	f000 fb8f 	bl	8015298 <HAL_GetTick>
 8014b7a:	4603      	mov	r3, r0
 8014b7c:	4a11      	ldr	r2, [pc, #68]	; (8014bc4 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8014b7e:	6013      	str	r3, [r2, #0]
}
 8014b80:	bf00      	nop
 8014b82:	3710      	adds	r7, #16
 8014b84:	46bd      	mov	sp, r7
 8014b86:	bd80      	pop	{r7, pc}
 8014b88:	40011000 	.word	0x40011000
 8014b8c:	2000b818 	.word	0x2000b818
 8014b90:	2000bc40 	.word	0x2000bc40
 8014b94:	2000b014 	.word	0x2000b014
 8014b98:	2000a000 	.word	0x2000a000
 8014b9c:	40005000 	.word	0x40005000
 8014ba0:	2000b898 	.word	0x2000b898
 8014ba4:	2000bad0 	.word	0x2000bad0
 8014ba8:	2000a004 	.word	0x2000a004
 8014bac:	40007800 	.word	0x40007800
 8014bb0:	2000b918 	.word	0x2000b918
 8014bb4:	2000bb88 	.word	0x2000bb88
 8014bb8:	40004c00 	.word	0x40004c00
 8014bbc:	2000b998 	.word	0x2000b998
 8014bc0:	2000ba18 	.word	0x2000ba18
 8014bc4:	20009ffc 	.word	0x20009ffc

08014bc8 <Com_DataReady>:



uint8_t Com_DataReady(uint8_t com_num)
{
 8014bc8:	b480      	push	{r7}
 8014bca:	b085      	sub	sp, #20
 8014bcc:	af00      	add	r7, sp, #0
 8014bce:	4603      	mov	r3, r0
 8014bd0:	71fb      	strb	r3, [r7, #7]
	uint8_t IS_DATA_AVAILABLE = NO;
 8014bd2:	2300      	movs	r3, #0
 8014bd4:	73fb      	strb	r3, [r7, #15]
	if(com_num == ISP_PORT)
 8014bd6:	79fb      	ldrb	r3, [r7, #7]
 8014bd8:	2b00      	cmp	r3, #0
 8014bda:	d115      	bne.n	8014c08 <Com_DataReady+0x40>
	{
		if(ISP_UART_BUFF[com_num].Write_End != ISP_UART_BUFF[com_num].Read_End)
 8014bdc:	79fa      	ldrb	r2, [r7, #7]
 8014bde:	4918      	ldr	r1, [pc, #96]	; (8014c40 <Com_DataReady+0x78>)
 8014be0:	4613      	mov	r3, r2
 8014be2:	025b      	lsls	r3, r3, #9
 8014be4:	4413      	add	r3, r2
 8014be6:	009b      	lsls	r3, r3, #2
 8014be8:	440b      	add	r3, r1
 8014bea:	8819      	ldrh	r1, [r3, #0]
 8014bec:	79fa      	ldrb	r2, [r7, #7]
 8014bee:	4814      	ldr	r0, [pc, #80]	; (8014c40 <Com_DataReady+0x78>)
 8014bf0:	4613      	mov	r3, r2
 8014bf2:	025b      	lsls	r3, r3, #9
 8014bf4:	4413      	add	r3, r2
 8014bf6:	009b      	lsls	r3, r3, #2
 8014bf8:	4403      	add	r3, r0
 8014bfa:	3302      	adds	r3, #2
 8014bfc:	881b      	ldrh	r3, [r3, #0]
 8014bfe:	4299      	cmp	r1, r3
 8014c00:	d017      	beq.n	8014c32 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014c02:	2301      	movs	r3, #1
 8014c04:	73fb      	strb	r3, [r7, #15]
 8014c06:	e014      	b.n	8014c32 <Com_DataReady+0x6a>
		}
	}
	else
	{
		if (UART_BUFFS[com_num].Write_End != UART_BUFFS[com_num].Read_End)
 8014c08:	79fa      	ldrb	r2, [r7, #7]
 8014c0a:	490e      	ldr	r1, [pc, #56]	; (8014c44 <Com_DataReady+0x7c>)
 8014c0c:	4613      	mov	r3, r2
 8014c0e:	021b      	lsls	r3, r3, #8
 8014c10:	4413      	add	r3, r2
 8014c12:	009b      	lsls	r3, r3, #2
 8014c14:	440b      	add	r3, r1
 8014c16:	8819      	ldrh	r1, [r3, #0]
 8014c18:	79fa      	ldrb	r2, [r7, #7]
 8014c1a:	480a      	ldr	r0, [pc, #40]	; (8014c44 <Com_DataReady+0x7c>)
 8014c1c:	4613      	mov	r3, r2
 8014c1e:	021b      	lsls	r3, r3, #8
 8014c20:	4413      	add	r3, r2
 8014c22:	009b      	lsls	r3, r3, #2
 8014c24:	4403      	add	r3, r0
 8014c26:	3302      	adds	r3, #2
 8014c28:	881b      	ldrh	r3, [r3, #0]
 8014c2a:	4299      	cmp	r1, r3
 8014c2c:	d001      	beq.n	8014c32 <Com_DataReady+0x6a>
		{
			IS_DATA_AVAILABLE = YES;
 8014c2e:	2301      	movs	r3, #1
 8014c30:	73fb      	strb	r3, [r7, #15]
		}
	}
	return IS_DATA_AVAILABLE;
 8014c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8014c34:	4618      	mov	r0, r3
 8014c36:	3714      	adds	r7, #20
 8014c38:	46bd      	mov	sp, r7
 8014c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c3e:	4770      	bx	lr
 8014c40:	2000b014 	.word	0x2000b014
 8014c44:	2000a004 	.word	0x2000a004

08014c48 <Com_Get_Byte>:


uint8_t Com_Get_Byte(uint8_t com_num)
{
 8014c48:	b4b0      	push	{r4, r5, r7}
 8014c4a:	b085      	sub	sp, #20
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	4603      	mov	r3, r0
 8014c50:	71fb      	strb	r3, [r7, #7]
	uint8_t Return_data = 0;
 8014c52:	2300      	movs	r3, #0
 8014c54:	73fb      	strb	r3, [r7, #15]


	if(com_num == 0)
 8014c56:	79fb      	ldrb	r3, [r7, #7]
 8014c58:	2b00      	cmp	r3, #0
 8014c5a:	d135      	bne.n	8014cc8 <Com_Get_Byte+0x80>
	{
		Return_data = ISP_UART_BUFF[com_num].CIR_BUFF[ISP_UART_BUFF[com_num].Read_End++];
 8014c5c:	79f9      	ldrb	r1, [r7, #7]
 8014c5e:	79fa      	ldrb	r2, [r7, #7]
 8014c60:	4837      	ldr	r0, [pc, #220]	; (8014d40 <Com_Get_Byte+0xf8>)
 8014c62:	4613      	mov	r3, r2
 8014c64:	025b      	lsls	r3, r3, #9
 8014c66:	4413      	add	r3, r2
 8014c68:	009b      	lsls	r3, r3, #2
 8014c6a:	4403      	add	r3, r0
 8014c6c:	3302      	adds	r3, #2
 8014c6e:	8818      	ldrh	r0, [r3, #0]
 8014c70:	1c43      	adds	r3, r0, #1
 8014c72:	b29d      	uxth	r5, r3
 8014c74:	4c32      	ldr	r4, [pc, #200]	; (8014d40 <Com_Get_Byte+0xf8>)
 8014c76:	4613      	mov	r3, r2
 8014c78:	025b      	lsls	r3, r3, #9
 8014c7a:	4413      	add	r3, r2
 8014c7c:	009b      	lsls	r3, r3, #2
 8014c7e:	4423      	add	r3, r4
 8014c80:	3302      	adds	r3, #2
 8014c82:	462a      	mov	r2, r5
 8014c84:	801a      	strh	r2, [r3, #0]
 8014c86:	4a2e      	ldr	r2, [pc, #184]	; (8014d40 <Com_Get_Byte+0xf8>)
 8014c88:	460b      	mov	r3, r1
 8014c8a:	025b      	lsls	r3, r3, #9
 8014c8c:	440b      	add	r3, r1
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	4413      	add	r3, r2
 8014c92:	4403      	add	r3, r0
 8014c94:	3304      	adds	r3, #4
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	73fb      	strb	r3, [r7, #15]
		if ( ISP_UART_BUFF[com_num].Read_End >= ISP_UART_BUFF_SIZE)
 8014c9a:	79fa      	ldrb	r2, [r7, #7]
 8014c9c:	4928      	ldr	r1, [pc, #160]	; (8014d40 <Com_Get_Byte+0xf8>)
 8014c9e:	4613      	mov	r3, r2
 8014ca0:	025b      	lsls	r3, r3, #9
 8014ca2:	4413      	add	r3, r2
 8014ca4:	009b      	lsls	r3, r3, #2
 8014ca6:	440b      	add	r3, r1
 8014ca8:	3302      	adds	r3, #2
 8014caa:	881b      	ldrh	r3, [r3, #0]
 8014cac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8014cb0:	d33f      	bcc.n	8014d32 <Com_Get_Byte+0xea>
		{
			ISP_UART_BUFF[com_num].Read_End = 0;
 8014cb2:	79fa      	ldrb	r2, [r7, #7]
 8014cb4:	4922      	ldr	r1, [pc, #136]	; (8014d40 <Com_Get_Byte+0xf8>)
 8014cb6:	4613      	mov	r3, r2
 8014cb8:	025b      	lsls	r3, r3, #9
 8014cba:	4413      	add	r3, r2
 8014cbc:	009b      	lsls	r3, r3, #2
 8014cbe:	440b      	add	r3, r1
 8014cc0:	3302      	adds	r3, #2
 8014cc2:	2200      	movs	r2, #0
 8014cc4:	801a      	strh	r2, [r3, #0]
 8014cc6:	e034      	b.n	8014d32 <Com_Get_Byte+0xea>
		}
	}
	else
	{
		Return_data = UART_BUFFS[com_num].CIR_BUFF[UART_BUFFS[com_num].Read_End++];
 8014cc8:	79f9      	ldrb	r1, [r7, #7]
 8014cca:	79fa      	ldrb	r2, [r7, #7]
 8014ccc:	481d      	ldr	r0, [pc, #116]	; (8014d44 <Com_Get_Byte+0xfc>)
 8014cce:	4613      	mov	r3, r2
 8014cd0:	021b      	lsls	r3, r3, #8
 8014cd2:	4413      	add	r3, r2
 8014cd4:	009b      	lsls	r3, r3, #2
 8014cd6:	4403      	add	r3, r0
 8014cd8:	3302      	adds	r3, #2
 8014cda:	8818      	ldrh	r0, [r3, #0]
 8014cdc:	1c43      	adds	r3, r0, #1
 8014cde:	b29d      	uxth	r5, r3
 8014ce0:	4c18      	ldr	r4, [pc, #96]	; (8014d44 <Com_Get_Byte+0xfc>)
 8014ce2:	4613      	mov	r3, r2
 8014ce4:	021b      	lsls	r3, r3, #8
 8014ce6:	4413      	add	r3, r2
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	4423      	add	r3, r4
 8014cec:	3302      	adds	r3, #2
 8014cee:	462a      	mov	r2, r5
 8014cf0:	801a      	strh	r2, [r3, #0]
 8014cf2:	4a14      	ldr	r2, [pc, #80]	; (8014d44 <Com_Get_Byte+0xfc>)
 8014cf4:	460b      	mov	r3, r1
 8014cf6:	021b      	lsls	r3, r3, #8
 8014cf8:	440b      	add	r3, r1
 8014cfa:	009b      	lsls	r3, r3, #2
 8014cfc:	4413      	add	r3, r2
 8014cfe:	4403      	add	r3, r0
 8014d00:	3304      	adds	r3, #4
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	73fb      	strb	r3, [r7, #15]
		if ( UART_BUFFS[com_num].Read_End >= UART_BUFF_SIZE)
 8014d06:	79fa      	ldrb	r2, [r7, #7]
 8014d08:	490e      	ldr	r1, [pc, #56]	; (8014d44 <Com_Get_Byte+0xfc>)
 8014d0a:	4613      	mov	r3, r2
 8014d0c:	021b      	lsls	r3, r3, #8
 8014d0e:	4413      	add	r3, r2
 8014d10:	009b      	lsls	r3, r3, #2
 8014d12:	440b      	add	r3, r1
 8014d14:	3302      	adds	r3, #2
 8014d16:	881b      	ldrh	r3, [r3, #0]
 8014d18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8014d1c:	d309      	bcc.n	8014d32 <Com_Get_Byte+0xea>
		{
			UART_BUFFS[com_num].Read_End = 0;
 8014d1e:	79fa      	ldrb	r2, [r7, #7]
 8014d20:	4908      	ldr	r1, [pc, #32]	; (8014d44 <Com_Get_Byte+0xfc>)
 8014d22:	4613      	mov	r3, r2
 8014d24:	021b      	lsls	r3, r3, #8
 8014d26:	4413      	add	r3, r2
 8014d28:	009b      	lsls	r3, r3, #2
 8014d2a:	440b      	add	r3, r1
 8014d2c:	3302      	adds	r3, #2
 8014d2e:	2200      	movs	r2, #0
 8014d30:	801a      	strh	r2, [r3, #0]
		}
	}
	return Return_data;
 8014d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8014d34:	4618      	mov	r0, r3
 8014d36:	3714      	adds	r7, #20
 8014d38:	46bd      	mov	sp, r7
 8014d3a:	bcb0      	pop	{r4, r5, r7}
 8014d3c:	4770      	bx	lr
 8014d3e:	bf00      	nop
 8014d40:	2000b014 	.word	0x2000b014
 8014d44:	2000a004 	.word	0x2000a004

08014d48 <CommTransmitMessage>:


void CommTransmitMessage(uint8_t com_num,uint8_t *sc_pp_Message,unsigned short int us_MaxTansmitBytes)
{
 8014d48:	b580      	push	{r7, lr}
 8014d4a:	b084      	sub	sp, #16
 8014d4c:	af00      	add	r7, sp, #0
 8014d4e:	4603      	mov	r3, r0
 8014d50:	6039      	str	r1, [r7, #0]
 8014d52:	71fb      	strb	r3, [r7, #7]
 8014d54:	4613      	mov	r3, r2
 8014d56:	80bb      	strh	r3, [r7, #4]
	unsigned short int us_LoopVar = ZERO;
 8014d58:	2300      	movs	r3, #0
 8014d5a:	81fb      	strh	r3, [r7, #14]


	/* Transmit the packet based on the randomization number
	 */
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8014d5c:	2300      	movs	r3, #0
 8014d5e:	81fb      	strh	r3, [r7, #14]
 8014d60:	e03a      	b.n	8014dd8 <CommTransmitMessage+0x90>
	{
		if (  (ZERO != us_LoopVar)&&(START_OF_MESSAGE == sc_pp_Message[us_LoopVar]))
 8014d62:	89fb      	ldrh	r3, [r7, #14]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d00a      	beq.n	8014d7e <CommTransmitMessage+0x36>
 8014d68:	89fb      	ldrh	r3, [r7, #14]
 8014d6a:	683a      	ldr	r2, [r7, #0]
 8014d6c:	4413      	add	r3, r2
 8014d6e:	781b      	ldrb	r3, [r3, #0]
 8014d70:	2b24      	cmp	r3, #36	; 0x24
 8014d72:	d104      	bne.n	8014d7e <CommTransmitMessage+0x36>
		{
			Com_SendByte(com_num,DLE);
 8014d74:	79fb      	ldrb	r3, [r7, #7]
 8014d76:	2105      	movs	r1, #5
 8014d78:	4618      	mov	r0, r3
 8014d7a:	f000 f835 	bl	8014de8 <Com_SendByte>
		}
		if (  (us_LoopVar >= ONE)&& (us_LoopVar < us_MaxTansmitBytes)&& (DLE == sc_pp_Message[us_LoopVar] ))
 8014d7e:	89fb      	ldrh	r3, [r7, #14]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d00e      	beq.n	8014da2 <CommTransmitMessage+0x5a>
 8014d84:	89fa      	ldrh	r2, [r7, #14]
 8014d86:	88bb      	ldrh	r3, [r7, #4]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d20a      	bcs.n	8014da2 <CommTransmitMessage+0x5a>
 8014d8c:	89fb      	ldrh	r3, [r7, #14]
 8014d8e:	683a      	ldr	r2, [r7, #0]
 8014d90:	4413      	add	r3, r2
 8014d92:	781b      	ldrb	r3, [r3, #0]
 8014d94:	2b05      	cmp	r3, #5
 8014d96:	d104      	bne.n	8014da2 <CommTransmitMessage+0x5a>
		{
			Com_SendByte(com_num,DLE);
 8014d98:	79fb      	ldrb	r3, [r7, #7]
 8014d9a:	2105      	movs	r1, #5
 8014d9c:	4618      	mov	r0, r3
 8014d9e:	f000 f823 	bl	8014de8 <Com_SendByte>
		}
		if (  (END_OF_MESSAGE == sc_pp_Message[us_LoopVar])&& (us_LoopVar != us_MaxTansmitBytes))
 8014da2:	89fb      	ldrh	r3, [r7, #14]
 8014da4:	683a      	ldr	r2, [r7, #0]
 8014da6:	4413      	add	r3, r2
 8014da8:	781b      	ldrb	r3, [r3, #0]
 8014daa:	2b26      	cmp	r3, #38	; 0x26
 8014dac:	d108      	bne.n	8014dc0 <CommTransmitMessage+0x78>
 8014dae:	89fa      	ldrh	r2, [r7, #14]
 8014db0:	88bb      	ldrh	r3, [r7, #4]
 8014db2:	429a      	cmp	r2, r3
 8014db4:	d004      	beq.n	8014dc0 <CommTransmitMessage+0x78>
		{
			//printf("\n Sent END_OF_MESSAGE");
			Com_SendByte(com_num,DLE);
 8014db6:	79fb      	ldrb	r3, [r7, #7]
 8014db8:	2105      	movs	r1, #5
 8014dba:	4618      	mov	r0, r3
 8014dbc:	f000 f814 	bl	8014de8 <Com_SendByte>
		}
		Com_SendByte(com_num, sc_pp_Message[us_LoopVar]);
 8014dc0:	89fb      	ldrh	r3, [r7, #14]
 8014dc2:	683a      	ldr	r2, [r7, #0]
 8014dc4:	4413      	add	r3, r2
 8014dc6:	781a      	ldrb	r2, [r3, #0]
 8014dc8:	79fb      	ldrb	r3, [r7, #7]
 8014dca:	4611      	mov	r1, r2
 8014dcc:	4618      	mov	r0, r3
 8014dce:	f000 f80b 	bl	8014de8 <Com_SendByte>
	for(us_LoopVar = ZERO; us_LoopVar <= us_MaxTansmitBytes; us_LoopVar++)
 8014dd2:	89fb      	ldrh	r3, [r7, #14]
 8014dd4:	3301      	adds	r3, #1
 8014dd6:	81fb      	strh	r3, [r7, #14]
 8014dd8:	89fa      	ldrh	r2, [r7, #14]
 8014dda:	88bb      	ldrh	r3, [r7, #4]
 8014ddc:	429a      	cmp	r2, r3
 8014dde:	d9c0      	bls.n	8014d62 <CommTransmitMessage+0x1a>
	}

	return;
 8014de0:	bf00      	nop
}
 8014de2:	3710      	adds	r7, #16
 8014de4:	46bd      	mov	sp, r7
 8014de6:	bd80      	pop	{r7, pc}

08014de8 <Com_SendByte>:

void Com_SendByte(uint8_t com_num, uint8_t uc_Data)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b084      	sub	sp, #16
 8014dec:	af00      	add	r7, sp, #0
 8014dee:	4603      	mov	r3, r0
 8014df0:	460a      	mov	r2, r1
 8014df2:	71fb      	strb	r3, [r7, #7]
 8014df4:	4613      	mov	r3, r2
 8014df6:	71bb      	strb	r3, [r7, #6]
	uint8_t *ptr = &uc_Data;
 8014df8:	1dbb      	adds	r3, r7, #6
 8014dfa:	60fb      	str	r3, [r7, #12]
	if(com_num == ISP_PORT)
 8014dfc:	79fb      	ldrb	r3, [r7, #7]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d107      	bne.n	8014e12 <Com_SendByte+0x2a>
	{
		HAL_UART_Transmit(&ISP_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014e02:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e06:	2201      	movs	r2, #1
 8014e08:	68f9      	ldr	r1, [r7, #12]
 8014e0a:	4816      	ldr	r0, [pc, #88]	; (8014e64 <Com_SendByte+0x7c>)
 8014e0c:	f006 f80c 	bl	801ae28 <HAL_UART_Transmit>
 8014e10:	e01f      	b.n	8014e52 <Com_SendByte+0x6a>
	}
	else if(com_num == ONE_PORT)
 8014e12:	79fb      	ldrb	r3, [r7, #7]
 8014e14:	2b01      	cmp	r3, #1
 8014e16:	d107      	bne.n	8014e28 <Com_SendByte+0x40>
	{
		HAL_UART_Transmit(&PORT1_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014e18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	68f9      	ldr	r1, [r7, #12]
 8014e20:	4811      	ldr	r0, [pc, #68]	; (8014e68 <Com_SendByte+0x80>)
 8014e22:	f006 f801 	bl	801ae28 <HAL_UART_Transmit>
 8014e26:	e014      	b.n	8014e52 <Com_SendByte+0x6a>
	}
	else if(com_num == TWO_PORT)
 8014e28:	79fb      	ldrb	r3, [r7, #7]
 8014e2a:	2b02      	cmp	r3, #2
 8014e2c:	d107      	bne.n	8014e3e <Com_SendByte+0x56>
	{
		HAL_UART_Transmit(&PORT2_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014e2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e32:	2201      	movs	r2, #1
 8014e34:	68f9      	ldr	r1, [r7, #12]
 8014e36:	480d      	ldr	r0, [pc, #52]	; (8014e6c <Com_SendByte+0x84>)
 8014e38:	f005 fff6 	bl	801ae28 <HAL_UART_Transmit>
 8014e3c:	e009      	b.n	8014e52 <Com_SendByte+0x6a>
	}
	else if(com_num == THREE_PORT)
 8014e3e:	79fb      	ldrb	r3, [r7, #7]
 8014e40:	2b03      	cmp	r3, #3
 8014e42:	d106      	bne.n	8014e52 <Com_SendByte+0x6a>
	{
		HAL_UART_Transmit(&PORT3_COM,(const uint8_t *) ptr, 1, 0xffff);
 8014e44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8014e48:	2201      	movs	r2, #1
 8014e4a:	68f9      	ldr	r1, [r7, #12]
 8014e4c:	4808      	ldr	r0, [pc, #32]	; (8014e70 <Com_SendByte+0x88>)
 8014e4e:	f005 ffeb 	bl	801ae28 <HAL_UART_Transmit>
	}

	ptr=NULL;
 8014e52:	2300      	movs	r3, #0
 8014e54:	60fb      	str	r3, [r7, #12]
	free(ptr);
 8014e56:	68f8      	ldr	r0, [r7, #12]
 8014e58:	f00d f900 	bl	802205c <free>
}
 8014e5c:	bf00      	nop
 8014e5e:	3710      	adds	r7, #16
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	2000bc40 	.word	0x2000bc40
 8014e68:	2000bad0 	.word	0x2000bad0
 8014e6c:	2000bb88 	.word	0x2000bb88
 8014e70:	2000ba18 	.word	0x2000ba18

08014e74 <Enable_UART_Interrupts>:

void Enable_UART_Interrupts(void)
{
 8014e74:	b580      	push	{r7, lr}
 8014e76:	af00      	add	r7, sp, #0
	 * following calls are made in Interrupt (HAL_UARTEx_RxEventCallback) and it is Only happening when inserted in LOCO,RIU bin's
	 * so that's why calling HAL_UARTEx_ReceiveToIdle_IT functions explicitly.
	 *
	 */

	HAL_UARTEx_ReceiveToIdle_IT(&huart1, ISP_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014e78:	2280      	movs	r2, #128	; 0x80
 8014e7a:	490a      	ldr	r1, [pc, #40]	; (8014ea4 <Enable_UART_Interrupts+0x30>)
 8014e7c:	480a      	ldr	r0, [pc, #40]	; (8014ea8 <Enable_UART_Interrupts+0x34>)
 8014e7e:	f007 fae1 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart5, PORT1_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014e82:	2280      	movs	r2, #128	; 0x80
 8014e84:	4909      	ldr	r1, [pc, #36]	; (8014eac <Enable_UART_Interrupts+0x38>)
 8014e86:	480a      	ldr	r0, [pc, #40]	; (8014eb0 <Enable_UART_Interrupts+0x3c>)
 8014e88:	f007 fadc 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart7, PORT2_PORT_RX_BUF, UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014e8c:	2280      	movs	r2, #128	; 0x80
 8014e8e:	4909      	ldr	r1, [pc, #36]	; (8014eb4 <Enable_UART_Interrupts+0x40>)
 8014e90:	4809      	ldr	r0, [pc, #36]	; (8014eb8 <Enable_UART_Interrupts+0x44>)
 8014e92:	f007 fad7 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
	HAL_UARTEx_ReceiveToIdle_IT(&huart4, PORT3_PORT_RX_BUF , UART_INTR_BUFF_SIZE);//To Enable Next Interrupt
 8014e96:	2280      	movs	r2, #128	; 0x80
 8014e98:	4908      	ldr	r1, [pc, #32]	; (8014ebc <Enable_UART_Interrupts+0x48>)
 8014e9a:	4809      	ldr	r0, [pc, #36]	; (8014ec0 <Enable_UART_Interrupts+0x4c>)
 8014e9c:	f007 fad2 	bl	801c444 <HAL_UARTEx_ReceiveToIdle_IT>
}
 8014ea0:	bf00      	nop
 8014ea2:	bd80      	pop	{r7, pc}
 8014ea4:	2000b818 	.word	0x2000b818
 8014ea8:	2000bc40 	.word	0x2000bc40
 8014eac:	2000b898 	.word	0x2000b898
 8014eb0:	2000bad0 	.word	0x2000bad0
 8014eb4:	2000b918 	.word	0x2000b918
 8014eb8:	2000bb88 	.word	0x2000bb88
 8014ebc:	2000b998 	.word	0x2000b998
 8014ec0:	2000ba18 	.word	0x2000ba18

08014ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8014ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8014efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8014ec8:	480d      	ldr	r0, [pc, #52]	; (8014f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8014eca:	490e      	ldr	r1, [pc, #56]	; (8014f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8014ecc:	4a0e      	ldr	r2, [pc, #56]	; (8014f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8014ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8014ed0:	e002      	b.n	8014ed8 <LoopCopyDataInit>

08014ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8014ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8014ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8014ed6:	3304      	adds	r3, #4

08014ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8014ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8014eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8014edc:	d3f9      	bcc.n	8014ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8014ede:	4a0b      	ldr	r2, [pc, #44]	; (8014f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8014ee0:	4c0b      	ldr	r4, [pc, #44]	; (8014f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8014ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8014ee4:	e001      	b.n	8014eea <LoopFillZerobss>

08014ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8014ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8014ee8:	3204      	adds	r2, #4

08014eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8014eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8014eec:	d3fb      	bcc.n	8014ee6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8014eee:	f7ff fb87 	bl	8014600 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8014ef2:	f00d f887 	bl	8022004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8014ef6:	f7fe fa71 	bl	80133dc <main>
  bx  lr    
 8014efa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8014efc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8014f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8014f04:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8014f08:	08028d30 	.word	0x08028d30
  ldr r2, =_sbss
 8014f0c:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8014f10:	200142a0 	.word	0x200142a0

08014f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8014f14:	e7fe      	b.n	8014f14 <ADC_IRQHandler>

08014f16 <DP83848_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval DP83848_STATUS_OK  if OK
  *         DP83848_STATUS_ERROR if missing mandatory function
  */
int32_t  DP83848_RegisterBusIO(dp83848_Object_t *pObj, dp83848_IOCtx_t *ioctx)
{
 8014f16:	b480      	push	{r7}
 8014f18:	b083      	sub	sp, #12
 8014f1a:	af00      	add	r7, sp, #0
 8014f1c:	6078      	str	r0, [r7, #4]
 8014f1e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d00b      	beq.n	8014f3e <DP83848_RegisterBusIO+0x28>
 8014f26:	683b      	ldr	r3, [r7, #0]
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d007      	beq.n	8014f3e <DP83848_RegisterBusIO+0x28>
 8014f2e:	683b      	ldr	r3, [r7, #0]
 8014f30:	689b      	ldr	r3, [r3, #8]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	d003      	beq.n	8014f3e <DP83848_RegisterBusIO+0x28>
 8014f36:	683b      	ldr	r3, [r7, #0]
 8014f38:	691b      	ldr	r3, [r3, #16]
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d102      	bne.n	8014f44 <DP83848_RegisterBusIO+0x2e>
  {
    return DP83848_STATUS_ERROR;
 8014f3e:	f04f 33ff 	mov.w	r3, #4294967295
 8014f42:	e014      	b.n	8014f6e <DP83848_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8014f44:	683b      	ldr	r3, [r7, #0]
 8014f46:	681a      	ldr	r2, [r3, #0]
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8014f4c:	683b      	ldr	r3, [r7, #0]
 8014f4e:	685a      	ldr	r2, [r3, #4]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8014f54:	683b      	ldr	r3, [r7, #0]
 8014f56:	68da      	ldr	r2, [r3, #12]
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	689a      	ldr	r2, [r3, #8]
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	691a      	ldr	r2, [r3, #16]
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	619a      	str	r2, [r3, #24]

  return DP83848_STATUS_OK;
 8014f6c:	2300      	movs	r3, #0
}
 8014f6e:	4618      	mov	r0, r3
 8014f70:	370c      	adds	r7, #12
 8014f72:	46bd      	mov	sp, r7
 8014f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f78:	4770      	bx	lr

08014f7a <DP83848_Init>:
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  *         DP83848_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t DP83848_Init(dp83848_Object_t *pObj)
 {
 8014f7a:	b580      	push	{r7, lr}
 8014f7c:	b086      	sub	sp, #24
 8014f7e:	af00      	add	r7, sp, #0
 8014f80:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8014f82:	2300      	movs	r3, #0
 8014f84:	60fb      	str	r3, [r7, #12]
 8014f86:	2300      	movs	r3, #0
 8014f88:	60bb      	str	r3, [r7, #8]
 8014f8a:	2300      	movs	r3, #0
 8014f8c:	617b      	str	r3, [r7, #20]
   int32_t status = DP83848_STATUS_OK;
 8014f8e:	2300      	movs	r3, #0
 8014f90:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	2b00      	cmp	r3, #0
 8014f98:	d17c      	bne.n	8015094 <DP83848_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	689b      	ldr	r3, [r3, #8]
 8014f9e:	2b00      	cmp	r3, #0
 8014fa0:	d002      	beq.n	8014fa8 <DP83848_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	689b      	ldr	r3, [r3, #8]
 8014fa6:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = DP83848_MAX_DEV_ADDR + 1;
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	2220      	movs	r2, #32
 8014fac:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8014fae:	2300      	movs	r3, #0
 8014fb0:	617b      	str	r3, [r7, #20]
 8014fb2:	e01c      	b.n	8014fee <DP83848_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, DP83848_SMR, &regvalue) < 0)
 8014fb4:	687b      	ldr	r3, [r7, #4]
 8014fb6:	695b      	ldr	r3, [r3, #20]
 8014fb8:	f107 0208 	add.w	r2, r7, #8
 8014fbc:	2119      	movs	r1, #25
 8014fbe:	6978      	ldr	r0, [r7, #20]
 8014fc0:	4798      	blx	r3
 8014fc2:	4603      	mov	r3, r0
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	da03      	bge.n	8014fd0 <DP83848_Init+0x56>
       {
         status = DP83848_STATUS_READ_ERROR;
 8014fc8:	f06f 0304 	mvn.w	r3, #4
 8014fcc:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8014fce:	e00b      	b.n	8014fe8 <DP83848_Init+0x6e>
       }

       if((regvalue & DP83848_SMR_PHY_ADDR) == addr)
 8014fd0:	68bb      	ldr	r3, [r7, #8]
 8014fd2:	f003 031f 	and.w	r3, r3, #31
 8014fd6:	697a      	ldr	r2, [r7, #20]
 8014fd8:	429a      	cmp	r2, r3
 8014fda:	d105      	bne.n	8014fe8 <DP83848_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	697a      	ldr	r2, [r7, #20]
 8014fe0:	601a      	str	r2, [r3, #0]
         status = DP83848_STATUS_OK;
 8014fe2:	2300      	movs	r3, #0
 8014fe4:	613b      	str	r3, [r7, #16]
         break;
 8014fe6:	e005      	b.n	8014ff4 <DP83848_Init+0x7a>
     for(addr = 0; addr <= DP83848_MAX_DEV_ADDR; addr ++)
 8014fe8:	697b      	ldr	r3, [r7, #20]
 8014fea:	3301      	adds	r3, #1
 8014fec:	617b      	str	r3, [r7, #20]
 8014fee:	697b      	ldr	r3, [r7, #20]
 8014ff0:	2b1f      	cmp	r3, #31
 8014ff2:	d9df      	bls.n	8014fb4 <DP83848_Init+0x3a>
       }
     }

     if(pObj->DevAddr > DP83848_MAX_DEV_ADDR)
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	2b1f      	cmp	r3, #31
 8014ffa:	d902      	bls.n	8015002 <DP83848_Init+0x88>
     {
       status = DP83848_STATUS_ADDRESS_ERROR;
 8014ffc:	f06f 0302 	mvn.w	r3, #2
 8015000:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == DP83848_STATUS_OK)
 8015002:	693b      	ldr	r3, [r7, #16]
 8015004:	2b00      	cmp	r3, #0
 8015006:	d145      	bne.n	8015094 <DP83848_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, DP83848_BCR, DP83848_BCR_SOFT_RESET) >= 0)
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	691b      	ldr	r3, [r3, #16]
 801500c:	687a      	ldr	r2, [r7, #4]
 801500e:	6810      	ldr	r0, [r2, #0]
 8015010:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8015014:	2100      	movs	r1, #0
 8015016:	4798      	blx	r3
 8015018:	4603      	mov	r3, r0
 801501a:	2b00      	cmp	r3, #0
 801501c:	db37      	blt.n	801508e <DP83848_Init+0x114>
       {
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) >= 0)
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	695b      	ldr	r3, [r3, #20]
 8015022:	687a      	ldr	r2, [r7, #4]
 8015024:	6810      	ldr	r0, [r2, #0]
 8015026:	f107 0208 	add.w	r2, r7, #8
 801502a:	2100      	movs	r1, #0
 801502c:	4798      	blx	r3
 801502e:	4603      	mov	r3, r0
 8015030:	2b00      	cmp	r3, #0
 8015032:	db28      	blt.n	8015086 <DP83848_Init+0x10c>
         {
           tickstart = pObj->IO.GetTick();
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	699b      	ldr	r3, [r3, #24]
 8015038:	4798      	blx	r3
 801503a:	4603      	mov	r3, r0
 801503c:	60fb      	str	r3, [r7, #12]

           /* wait until software reset is done or timeout occured  */
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801503e:	e01c      	b.n	801507a <DP83848_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= DP83848_SW_RESET_TO)
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	699b      	ldr	r3, [r3, #24]
 8015044:	4798      	blx	r3
 8015046:	4603      	mov	r3, r0
 8015048:	461a      	mov	r2, r3
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	1ad3      	subs	r3, r2, r3
 801504e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8015052:	d80e      	bhi.n	8015072 <DP83848_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &regvalue) < 0)
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	695b      	ldr	r3, [r3, #20]
 8015058:	687a      	ldr	r2, [r7, #4]
 801505a:	6810      	ldr	r0, [r2, #0]
 801505c:	f107 0208 	add.w	r2, r7, #8
 8015060:	2100      	movs	r1, #0
 8015062:	4798      	blx	r3
 8015064:	4603      	mov	r3, r0
 8015066:	2b00      	cmp	r3, #0
 8015068:	da07      	bge.n	801507a <DP83848_Init+0x100>
               {
                 status = DP83848_STATUS_READ_ERROR;
 801506a:	f06f 0304 	mvn.w	r3, #4
 801506e:	613b      	str	r3, [r7, #16]
                 break;
 8015070:	e010      	b.n	8015094 <DP83848_Init+0x11a>
               }
             }
             else
             {
               status = DP83848_STATUS_RESET_TIMEOUT;
 8015072:	f06f 0301 	mvn.w	r3, #1
 8015076:	613b      	str	r3, [r7, #16]
               break;
 8015078:	e00c      	b.n	8015094 <DP83848_Init+0x11a>
           while(regvalue & DP83848_BCR_SOFT_RESET)
 801507a:	68bb      	ldr	r3, [r7, #8]
 801507c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015080:	2b00      	cmp	r3, #0
 8015082:	d1dd      	bne.n	8015040 <DP83848_Init+0xc6>
 8015084:	e006      	b.n	8015094 <DP83848_Init+0x11a>
             }
           }
         }
         else
         {
           status = DP83848_STATUS_READ_ERROR;
 8015086:	f06f 0304 	mvn.w	r3, #4
 801508a:	613b      	str	r3, [r7, #16]
 801508c:	e002      	b.n	8015094 <DP83848_Init+0x11a>
         }
       }
       else
       {
         status = DP83848_STATUS_WRITE_ERROR;
 801508e:	f06f 0303 	mvn.w	r3, #3
 8015092:	613b      	str	r3, [r7, #16]
       }
     }
   }

   if(status == DP83848_STATUS_OK)
 8015094:	693b      	ldr	r3, [r7, #16]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d112      	bne.n	80150c0 <DP83848_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 801509a:	687b      	ldr	r3, [r7, #4]
 801509c:	699b      	ldr	r3, [r3, #24]
 801509e:	4798      	blx	r3
 80150a0:	4603      	mov	r3, r0
 80150a2:	60fb      	str	r3, [r7, #12]

     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= DP83848_INIT_TO)
 80150a4:	bf00      	nop
 80150a6:	687b      	ldr	r3, [r7, #4]
 80150a8:	699b      	ldr	r3, [r3, #24]
 80150aa:	4798      	blx	r3
 80150ac:	4603      	mov	r3, r0
 80150ae:	461a      	mov	r2, r3
 80150b0:	68fb      	ldr	r3, [r7, #12]
 80150b2:	1ad3      	subs	r3, r2, r3
 80150b4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80150b8:	d9f5      	bls.n	80150a6 <DP83848_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80150ba:	687b      	ldr	r3, [r7, #4]
 80150bc:	2201      	movs	r2, #1
 80150be:	605a      	str	r2, [r3, #4]
   }

   return status;
 80150c0:	693b      	ldr	r3, [r7, #16]
 }
 80150c2:	4618      	mov	r0, r3
 80150c4:	3718      	adds	r7, #24
 80150c6:	46bd      	mov	sp, r7
 80150c8:	bd80      	pop	{r7, pc}

080150ca <DP83848_GetLinkState>:
  *         DP83848_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         DP83848_STATUS_READ_ERROR if connot read register
  *         DP83848_STATUS_WRITE_ERROR if connot write to register
  */
int32_t DP83848_GetLinkState(dp83848_Object_t *pObj)
{
 80150ca:	b580      	push	{r7, lr}
 80150cc:	b084      	sub	sp, #16
 80150ce:	af00      	add	r7, sp, #0
 80150d0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80150d2:	2300      	movs	r3, #0
 80150d4:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	695b      	ldr	r3, [r3, #20]
 80150da:	687a      	ldr	r2, [r7, #4]
 80150dc:	6810      	ldr	r0, [r2, #0]
 80150de:	f107 020c 	add.w	r2, r7, #12
 80150e2:	2101      	movs	r1, #1
 80150e4:	4798      	blx	r3
 80150e6:	4603      	mov	r3, r0
 80150e8:	2b00      	cmp	r3, #0
 80150ea:	da02      	bge.n	80150f2 <DP83848_GetLinkState+0x28>
  {
    return DP83848_STATUS_READ_ERROR;
 80150ec:	f06f 0304 	mvn.w	r3, #4
 80150f0:	e06e      	b.n	80151d0 <DP83848_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BSR, &readval) < 0)
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	695b      	ldr	r3, [r3, #20]
 80150f6:	687a      	ldr	r2, [r7, #4]
 80150f8:	6810      	ldr	r0, [r2, #0]
 80150fa:	f107 020c 	add.w	r2, r7, #12
 80150fe:	2101      	movs	r1, #1
 8015100:	4798      	blx	r3
 8015102:	4603      	mov	r3, r0
 8015104:	2b00      	cmp	r3, #0
 8015106:	da02      	bge.n	801510e <DP83848_GetLinkState+0x44>
  {
    return DP83848_STATUS_READ_ERROR;
 8015108:	f06f 0304 	mvn.w	r3, #4
 801510c:	e060      	b.n	80151d0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BSR_LINK_STATUS) == 0)
 801510e:	68fb      	ldr	r3, [r7, #12]
 8015110:	f003 0304 	and.w	r3, r3, #4
 8015114:	2b00      	cmp	r3, #0
 8015116:	d101      	bne.n	801511c <DP83848_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return DP83848_STATUS_LINK_DOWN;
 8015118:	2301      	movs	r3, #1
 801511a:	e059      	b.n	80151d0 <DP83848_GetLinkState+0x106>
  }

  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_BCR, &readval) < 0)
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	695b      	ldr	r3, [r3, #20]
 8015120:	687a      	ldr	r2, [r7, #4]
 8015122:	6810      	ldr	r0, [r2, #0]
 8015124:	f107 020c 	add.w	r2, r7, #12
 8015128:	2100      	movs	r1, #0
 801512a:	4798      	blx	r3
 801512c:	4603      	mov	r3, r0
 801512e:	2b00      	cmp	r3, #0
 8015130:	da02      	bge.n	8015138 <DP83848_GetLinkState+0x6e>
  {
    return DP83848_STATUS_READ_ERROR;
 8015132:	f06f 0304 	mvn.w	r3, #4
 8015136:	e04b      	b.n	80151d0 <DP83848_GetLinkState+0x106>
  }

  if((readval & DP83848_BCR_AUTONEGO_EN) != DP83848_BCR_AUTONEGO_EN)
 8015138:	68fb      	ldr	r3, [r7, #12]
 801513a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801513e:	2b00      	cmp	r3, #0
 8015140:	d11b      	bne.n	801517a <DP83848_GetLinkState+0xb0>
  {
    if(((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT) && ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE))
 8015142:	68fb      	ldr	r3, [r7, #12]
 8015144:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015148:	2b00      	cmp	r3, #0
 801514a:	d006      	beq.n	801515a <DP83848_GetLinkState+0x90>
 801514c:	68fb      	ldr	r3, [r7, #12]
 801514e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015152:	2b00      	cmp	r3, #0
 8015154:	d001      	beq.n	801515a <DP83848_GetLinkState+0x90>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 8015156:	2302      	movs	r3, #2
 8015158:	e03a      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_SPEED_SELECT) == DP83848_BCR_SPEED_SELECT)
 801515a:	68fb      	ldr	r3, [r7, #12]
 801515c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015160:	2b00      	cmp	r3, #0
 8015162:	d001      	beq.n	8015168 <DP83848_GetLinkState+0x9e>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 8015164:	2303      	movs	r3, #3
 8015166:	e033      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_BCR_DUPLEX_MODE) == DP83848_BCR_DUPLEX_MODE)
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801516e:	2b00      	cmp	r3, #0
 8015170:	d001      	beq.n	8015176 <DP83848_GetLinkState+0xac>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 8015172:	2304      	movs	r3, #4
 8015174:	e02c      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 8015176:	2305      	movs	r3, #5
 8015178:	e02a      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, DP83848_PHYSCSR, &readval) < 0)
 801517a:	687b      	ldr	r3, [r7, #4]
 801517c:	695b      	ldr	r3, [r3, #20]
 801517e:	687a      	ldr	r2, [r7, #4]
 8015180:	6810      	ldr	r0, [r2, #0]
 8015182:	f107 020c 	add.w	r2, r7, #12
 8015186:	2110      	movs	r1, #16
 8015188:	4798      	blx	r3
 801518a:	4603      	mov	r3, r0
 801518c:	2b00      	cmp	r3, #0
 801518e:	da02      	bge.n	8015196 <DP83848_GetLinkState+0xcc>
    {
      return DP83848_STATUS_READ_ERROR;
 8015190:	f06f 0304 	mvn.w	r3, #4
 8015194:	e01c      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & DP83848_PHYSCSR_AUTONEGO_DONE) == 0)
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801519c:	2b00      	cmp	r3, #0
 801519e:	d101      	bne.n	80151a4 <DP83848_GetLinkState+0xda>
    {
      return DP83848_STATUS_AUTONEGO_NOTDONE;
 80151a0:	2306      	movs	r3, #6
 80151a2:	e015      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }

    if((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_FD)
 80151a4:	68fb      	ldr	r3, [r7, #12]
 80151a6:	f003 0306 	and.w	r3, r3, #6
 80151aa:	2b04      	cmp	r3, #4
 80151ac:	d101      	bne.n	80151b2 <DP83848_GetLinkState+0xe8>
    {
      return DP83848_STATUS_100MBITS_FULLDUPLEX;
 80151ae:	2302      	movs	r3, #2
 80151b0:	e00e      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_100BTX_HD)
 80151b2:	68fb      	ldr	r3, [r7, #12]
 80151b4:	f003 0306 	and.w	r3, r3, #6
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	d101      	bne.n	80151c0 <DP83848_GetLinkState+0xf6>
    {
      return DP83848_STATUS_100MBITS_HALFDUPLEX;
 80151bc:	2303      	movs	r3, #3
 80151be:	e007      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
    else if ((readval & DP83848_PHYSCSR_HCDSPEEDMASK) == DP83848_PHYSCSR_10BT_FD)
 80151c0:	68fb      	ldr	r3, [r7, #12]
 80151c2:	f003 0306 	and.w	r3, r3, #6
 80151c6:	2b06      	cmp	r3, #6
 80151c8:	d101      	bne.n	80151ce <DP83848_GetLinkState+0x104>
    {
      return DP83848_STATUS_10MBITS_FULLDUPLEX;
 80151ca:	2304      	movs	r3, #4
 80151cc:	e000      	b.n	80151d0 <DP83848_GetLinkState+0x106>
    }
    else
    {
      return DP83848_STATUS_10MBITS_HALFDUPLEX;
 80151ce:	2305      	movs	r3, #5
    }
  }
}
 80151d0:	4618      	mov	r0, r3
 80151d2:	3710      	adds	r7, #16
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd80      	pop	{r7, pc}

080151d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80151d8:	b580      	push	{r7, lr}
 80151da:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCELERATOR_ENABLE != 0)
  __HAL_FLASH_ART_ENABLE();
 80151dc:	4b0b      	ldr	r3, [pc, #44]	; (801520c <HAL_Init+0x34>)
 80151de:	681b      	ldr	r3, [r3, #0]
 80151e0:	4a0a      	ldr	r2, [pc, #40]	; (801520c <HAL_Init+0x34>)
 80151e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80151e6:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCELERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80151e8:	4b08      	ldr	r3, [pc, #32]	; (801520c <HAL_Init+0x34>)
 80151ea:	681b      	ldr	r3, [r3, #0]
 80151ec:	4a07      	ldr	r2, [pc, #28]	; (801520c <HAL_Init+0x34>)
 80151ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80151f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80151f4:	2003      	movs	r0, #3
 80151f6:	f001 f825 	bl	8016244 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80151fa:	2007      	movs	r0, #7
 80151fc:	f000 f808 	bl	8015210 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8015200:	f7ff f856 	bl	80142b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8015204:	2300      	movs	r3, #0
}
 8015206:	4618      	mov	r0, r3
 8015208:	bd80      	pop	{r7, pc}
 801520a:	bf00      	nop
 801520c:	40023c00 	.word	0x40023c00

08015210 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015210:	b580      	push	{r7, lr}
 8015212:	b082      	sub	sp, #8
 8015214:	af00      	add	r7, sp, #0
 8015216:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8015218:	4b12      	ldr	r3, [pc, #72]	; (8015264 <HAL_InitTick+0x54>)
 801521a:	681a      	ldr	r2, [r3, #0]
 801521c:	4b12      	ldr	r3, [pc, #72]	; (8015268 <HAL_InitTick+0x58>)
 801521e:	781b      	ldrb	r3, [r3, #0]
 8015220:	4619      	mov	r1, r3
 8015222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8015226:	fbb3 f3f1 	udiv	r3, r3, r1
 801522a:	fbb2 f3f3 	udiv	r3, r2, r3
 801522e:	4618      	mov	r0, r3
 8015230:	f001 f83d 	bl	80162ae <HAL_SYSTICK_Config>
 8015234:	4603      	mov	r3, r0
 8015236:	2b00      	cmp	r3, #0
 8015238:	d001      	beq.n	801523e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 801523a:	2301      	movs	r3, #1
 801523c:	e00e      	b.n	801525c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	2b0f      	cmp	r3, #15
 8015242:	d80a      	bhi.n	801525a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8015244:	2200      	movs	r2, #0
 8015246:	6879      	ldr	r1, [r7, #4]
 8015248:	f04f 30ff 	mov.w	r0, #4294967295
 801524c:	f001 f805 	bl	801625a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8015250:	4a06      	ldr	r2, [pc, #24]	; (801526c <HAL_InitTick+0x5c>)
 8015252:	687b      	ldr	r3, [r7, #4]
 8015254:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8015256:	2300      	movs	r3, #0
 8015258:	e000      	b.n	801525c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 801525a:	2301      	movs	r3, #1
}
 801525c:	4618      	mov	r0, r3
 801525e:	3708      	adds	r7, #8
 8015260:	46bd      	mov	sp, r7
 8015262:	bd80      	pop	{r7, pc}
 8015264:	2000011c 	.word	0x2000011c
 8015268:	20000124 	.word	0x20000124
 801526c:	20000120 	.word	0x20000120

08015270 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8015270:	b480      	push	{r7}
 8015272:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8015274:	4b06      	ldr	r3, [pc, #24]	; (8015290 <HAL_IncTick+0x20>)
 8015276:	781b      	ldrb	r3, [r3, #0]
 8015278:	461a      	mov	r2, r3
 801527a:	4b06      	ldr	r3, [pc, #24]	; (8015294 <HAL_IncTick+0x24>)
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	4413      	add	r3, r2
 8015280:	4a04      	ldr	r2, [pc, #16]	; (8015294 <HAL_IncTick+0x24>)
 8015282:	6013      	str	r3, [r2, #0]
}
 8015284:	bf00      	nop
 8015286:	46bd      	mov	sp, r7
 8015288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801528c:	4770      	bx	lr
 801528e:	bf00      	nop
 8015290:	20000124 	.word	0x20000124
 8015294:	2000bcf8 	.word	0x2000bcf8

08015298 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8015298:	b480      	push	{r7}
 801529a:	af00      	add	r7, sp, #0
  return uwTick;
 801529c:	4b03      	ldr	r3, [pc, #12]	; (80152ac <HAL_GetTick+0x14>)
 801529e:	681b      	ldr	r3, [r3, #0]
}
 80152a0:	4618      	mov	r0, r3
 80152a2:	46bd      	mov	sp, r7
 80152a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80152a8:	4770      	bx	lr
 80152aa:	bf00      	nop
 80152ac:	2000bcf8 	.word	0x2000bcf8

080152b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80152b8:	f7ff ffee 	bl	8015298 <HAL_GetTick>
 80152bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80152be:	687b      	ldr	r3, [r7, #4]
 80152c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80152c2:	68fb      	ldr	r3, [r7, #12]
 80152c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80152c8:	d005      	beq.n	80152d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80152ca:	4b0a      	ldr	r3, [pc, #40]	; (80152f4 <HAL_Delay+0x44>)
 80152cc:	781b      	ldrb	r3, [r3, #0]
 80152ce:	461a      	mov	r2, r3
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	4413      	add	r3, r2
 80152d4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80152d6:	bf00      	nop
 80152d8:	f7ff ffde 	bl	8015298 <HAL_GetTick>
 80152dc:	4602      	mov	r2, r0
 80152de:	68bb      	ldr	r3, [r7, #8]
 80152e0:	1ad3      	subs	r3, r2, r3
 80152e2:	68fa      	ldr	r2, [r7, #12]
 80152e4:	429a      	cmp	r2, r3
 80152e6:	d8f7      	bhi.n	80152d8 <HAL_Delay+0x28>
  {
  }
}
 80152e8:	bf00      	nop
 80152ea:	bf00      	nop
 80152ec:	3710      	adds	r7, #16
 80152ee:	46bd      	mov	sp, r7
 80152f0:	bd80      	pop	{r7, pc}
 80152f2:	bf00      	nop
 80152f4:	20000124 	.word	0x20000124

080152f8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80152f8:	b580      	push	{r7, lr}
 80152fa:	b084      	sub	sp, #16
 80152fc:	af00      	add	r7, sp, #0
 80152fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8015300:	687b      	ldr	r3, [r7, #4]
 8015302:	2b00      	cmp	r3, #0
 8015304:	d101      	bne.n	801530a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8015306:	2301      	movs	r3, #1
 8015308:	e11c      	b.n	8015544 <HAL_CAN_Init+0x24c>
  assert_param(IS_CAN_BS1(hcan->Init.TimeSeg1));
  assert_param(IS_CAN_BS2(hcan->Init.TimeSeg2));
  assert_param(IS_CAN_PRESCALER(hcan->Init.Prescaler));

#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
  if (hcan->State == HAL_CAN_STATE_RESET)
 801530a:	687b      	ldr	r3, [r7, #4]
 801530c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015310:	b2db      	uxtb	r3, r3
 8015312:	2b00      	cmp	r3, #0
 8015314:	d131      	bne.n	801537a <HAL_CAN_Init+0x82>
  {
    /* Reset callbacks to legacy functions */
    hcan->RxFifo0MsgPendingCallback  =  HAL_CAN_RxFifo0MsgPendingCallback;  /* Legacy weak RxFifo0MsgPendingCallback  */
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	4a8c      	ldr	r2, [pc, #560]	; (801554c <HAL_CAN_Init+0x254>)
 801531a:	641a      	str	r2, [r3, #64]	; 0x40
    hcan->RxFifo0FullCallback        =  HAL_CAN_RxFifo0FullCallback;        /* Legacy weak RxFifo0FullCallback        */
 801531c:	687b      	ldr	r3, [r7, #4]
 801531e:	4a8c      	ldr	r2, [pc, #560]	; (8015550 <HAL_CAN_Init+0x258>)
 8015320:	645a      	str	r2, [r3, #68]	; 0x44
    hcan->RxFifo1MsgPendingCallback  =  HAL_CAN_RxFifo1MsgPendingCallback;  /* Legacy weak RxFifo1MsgPendingCallback  */
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	4a8b      	ldr	r2, [pc, #556]	; (8015554 <HAL_CAN_Init+0x25c>)
 8015326:	649a      	str	r2, [r3, #72]	; 0x48
    hcan->RxFifo1FullCallback        =  HAL_CAN_RxFifo1FullCallback;        /* Legacy weak RxFifo1FullCallback        */
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	4a8b      	ldr	r2, [pc, #556]	; (8015558 <HAL_CAN_Init+0x260>)
 801532c:	64da      	str	r2, [r3, #76]	; 0x4c
    hcan->TxMailbox0CompleteCallback =  HAL_CAN_TxMailbox0CompleteCallback; /* Legacy weak TxMailbox0CompleteCallback */
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	4a8a      	ldr	r2, [pc, #552]	; (801555c <HAL_CAN_Init+0x264>)
 8015332:	629a      	str	r2, [r3, #40]	; 0x28
    hcan->TxMailbox1CompleteCallback =  HAL_CAN_TxMailbox1CompleteCallback; /* Legacy weak TxMailbox1CompleteCallback */
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	4a8a      	ldr	r2, [pc, #552]	; (8015560 <HAL_CAN_Init+0x268>)
 8015338:	62da      	str	r2, [r3, #44]	; 0x2c
    hcan->TxMailbox2CompleteCallback =  HAL_CAN_TxMailbox2CompleteCallback; /* Legacy weak TxMailbox2CompleteCallback */
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	4a89      	ldr	r2, [pc, #548]	; (8015564 <HAL_CAN_Init+0x26c>)
 801533e:	631a      	str	r2, [r3, #48]	; 0x30
    hcan->TxMailbox0AbortCallback    =  HAL_CAN_TxMailbox0AbortCallback;    /* Legacy weak TxMailbox0AbortCallback    */
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	4a89      	ldr	r2, [pc, #548]	; (8015568 <HAL_CAN_Init+0x270>)
 8015344:	635a      	str	r2, [r3, #52]	; 0x34
    hcan->TxMailbox1AbortCallback    =  HAL_CAN_TxMailbox1AbortCallback;    /* Legacy weak TxMailbox1AbortCallback    */
 8015346:	687b      	ldr	r3, [r7, #4]
 8015348:	4a88      	ldr	r2, [pc, #544]	; (801556c <HAL_CAN_Init+0x274>)
 801534a:	639a      	str	r2, [r3, #56]	; 0x38
    hcan->TxMailbox2AbortCallback    =  HAL_CAN_TxMailbox2AbortCallback;    /* Legacy weak TxMailbox2AbortCallback    */
 801534c:	687b      	ldr	r3, [r7, #4]
 801534e:	4a88      	ldr	r2, [pc, #544]	; (8015570 <HAL_CAN_Init+0x278>)
 8015350:	63da      	str	r2, [r3, #60]	; 0x3c
    hcan->SleepCallback              =  HAL_CAN_SleepCallback;              /* Legacy weak SleepCallback              */
 8015352:	687b      	ldr	r3, [r7, #4]
 8015354:	4a87      	ldr	r2, [pc, #540]	; (8015574 <HAL_CAN_Init+0x27c>)
 8015356:	651a      	str	r2, [r3, #80]	; 0x50
    hcan->WakeUpFromRxMsgCallback    =  HAL_CAN_WakeUpFromRxMsgCallback;    /* Legacy weak WakeUpFromRxMsgCallback    */
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	4a87      	ldr	r2, [pc, #540]	; (8015578 <HAL_CAN_Init+0x280>)
 801535c:	655a      	str	r2, [r3, #84]	; 0x54
    hcan->ErrorCallback              =  HAL_CAN_ErrorCallback;              /* Legacy weak ErrorCallback              */
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	4a86      	ldr	r2, [pc, #536]	; (801557c <HAL_CAN_Init+0x284>)
 8015362:	659a      	str	r2, [r3, #88]	; 0x58

    if (hcan->MspInitCallback == NULL)
 8015364:	687b      	ldr	r3, [r7, #4]
 8015366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015368:	2b00      	cmp	r3, #0
 801536a:	d102      	bne.n	8015372 <HAL_CAN_Init+0x7a>
    {
      hcan->MspInitCallback = HAL_CAN_MspInit; /* Legacy weak MspInit */
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	4a84      	ldr	r2, [pc, #528]	; (8015580 <HAL_CAN_Init+0x288>)
 8015370:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
 8015372:	687b      	ldr	r3, [r7, #4]
 8015374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8015376:	6878      	ldr	r0, [r7, #4]
 8015378:	4798      	blx	r3
    HAL_CAN_MspInit(hcan);
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	681b      	ldr	r3, [r3, #0]
 801537e:	681a      	ldr	r2, [r3, #0]
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	f042 0201 	orr.w	r2, r2, #1
 8015388:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801538a:	f7ff ff85 	bl	8015298 <HAL_GetTick>
 801538e:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8015390:	e012      	b.n	80153b8 <HAL_CAN_Init+0xc0>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015392:	f7ff ff81 	bl	8015298 <HAL_GetTick>
 8015396:	4602      	mov	r2, r0
 8015398:	68fb      	ldr	r3, [r7, #12]
 801539a:	1ad3      	subs	r3, r2, r3
 801539c:	2b0a      	cmp	r3, #10
 801539e:	d90b      	bls.n	80153b8 <HAL_CAN_Init+0xc0>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80153a0:	687b      	ldr	r3, [r7, #4]
 80153a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	2205      	movs	r2, #5
 80153b0:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80153b4:	2301      	movs	r3, #1
 80153b6:	e0c5      	b.n	8015544 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80153b8:	687b      	ldr	r3, [r7, #4]
 80153ba:	681b      	ldr	r3, [r3, #0]
 80153bc:	685b      	ldr	r3, [r3, #4]
 80153be:	f003 0301 	and.w	r3, r3, #1
 80153c2:	2b00      	cmp	r3, #0
 80153c4:	d0e5      	beq.n	8015392 <HAL_CAN_Init+0x9a>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	681a      	ldr	r2, [r3, #0]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	681b      	ldr	r3, [r3, #0]
 80153d0:	f022 0202 	bic.w	r2, r2, #2
 80153d4:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80153d6:	f7ff ff5f 	bl	8015298 <HAL_GetTick>
 80153da:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80153dc:	e012      	b.n	8015404 <HAL_CAN_Init+0x10c>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80153de:	f7ff ff5b 	bl	8015298 <HAL_GetTick>
 80153e2:	4602      	mov	r2, r0
 80153e4:	68fb      	ldr	r3, [r7, #12]
 80153e6:	1ad3      	subs	r3, r2, r3
 80153e8:	2b0a      	cmp	r3, #10
 80153ea:	d90b      	bls.n	8015404 <HAL_CAN_Init+0x10c>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80153ec:	687b      	ldr	r3, [r7, #4]
 80153ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80153f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80153f4:	687b      	ldr	r3, [r7, #4]
 80153f6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	2205      	movs	r2, #5
 80153fc:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8015400:	2301      	movs	r3, #1
 8015402:	e09f      	b.n	8015544 <HAL_CAN_Init+0x24c>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	681b      	ldr	r3, [r3, #0]
 8015408:	685b      	ldr	r3, [r3, #4]
 801540a:	f003 0302 	and.w	r3, r3, #2
 801540e:	2b00      	cmp	r3, #0
 8015410:	d1e5      	bne.n	80153de <HAL_CAN_Init+0xe6>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	7e1b      	ldrb	r3, [r3, #24]
 8015416:	2b01      	cmp	r3, #1
 8015418:	d108      	bne.n	801542c <HAL_CAN_Init+0x134>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801541a:	687b      	ldr	r3, [r7, #4]
 801541c:	681b      	ldr	r3, [r3, #0]
 801541e:	681a      	ldr	r2, [r3, #0]
 8015420:	687b      	ldr	r3, [r7, #4]
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8015428:	601a      	str	r2, [r3, #0]
 801542a:	e007      	b.n	801543c <HAL_CAN_Init+0x144>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 801543a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	7e5b      	ldrb	r3, [r3, #25]
 8015440:	2b01      	cmp	r3, #1
 8015442:	d108      	bne.n	8015456 <HAL_CAN_Init+0x15e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	681a      	ldr	r2, [r3, #0]
 801544a:	687b      	ldr	r3, [r7, #4]
 801544c:	681b      	ldr	r3, [r3, #0]
 801544e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8015452:	601a      	str	r2, [r3, #0]
 8015454:	e007      	b.n	8015466 <HAL_CAN_Init+0x16e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681b      	ldr	r3, [r3, #0]
 801545a:	681a      	ldr	r2, [r3, #0]
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	681b      	ldr	r3, [r3, #0]
 8015460:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8015464:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	7e9b      	ldrb	r3, [r3, #26]
 801546a:	2b01      	cmp	r3, #1
 801546c:	d108      	bne.n	8015480 <HAL_CAN_Init+0x188>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	f042 0220 	orr.w	r2, r2, #32
 801547c:	601a      	str	r2, [r3, #0]
 801547e:	e007      	b.n	8015490 <HAL_CAN_Init+0x198>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8015480:	687b      	ldr	r3, [r7, #4]
 8015482:	681b      	ldr	r3, [r3, #0]
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	681b      	ldr	r3, [r3, #0]
 801548a:	f022 0220 	bic.w	r2, r2, #32
 801548e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	7edb      	ldrb	r3, [r3, #27]
 8015494:	2b01      	cmp	r3, #1
 8015496:	d108      	bne.n	80154aa <HAL_CAN_Init+0x1b2>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8015498:	687b      	ldr	r3, [r7, #4]
 801549a:	681b      	ldr	r3, [r3, #0]
 801549c:	681a      	ldr	r2, [r3, #0]
 801549e:	687b      	ldr	r3, [r7, #4]
 80154a0:	681b      	ldr	r3, [r3, #0]
 80154a2:	f022 0210 	bic.w	r2, r2, #16
 80154a6:	601a      	str	r2, [r3, #0]
 80154a8:	e007      	b.n	80154ba <HAL_CAN_Init+0x1c2>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	681a      	ldr	r2, [r3, #0]
 80154b0:	687b      	ldr	r3, [r7, #4]
 80154b2:	681b      	ldr	r3, [r3, #0]
 80154b4:	f042 0210 	orr.w	r2, r2, #16
 80154b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80154ba:	687b      	ldr	r3, [r7, #4]
 80154bc:	7f1b      	ldrb	r3, [r3, #28]
 80154be:	2b01      	cmp	r3, #1
 80154c0:	d108      	bne.n	80154d4 <HAL_CAN_Init+0x1dc>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80154c2:	687b      	ldr	r3, [r7, #4]
 80154c4:	681b      	ldr	r3, [r3, #0]
 80154c6:	681a      	ldr	r2, [r3, #0]
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	f042 0208 	orr.w	r2, r2, #8
 80154d0:	601a      	str	r2, [r3, #0]
 80154d2:	e007      	b.n	80154e4 <HAL_CAN_Init+0x1ec>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	681b      	ldr	r3, [r3, #0]
 80154de:	f022 0208 	bic.w	r2, r2, #8
 80154e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80154e4:	687b      	ldr	r3, [r7, #4]
 80154e6:	7f5b      	ldrb	r3, [r3, #29]
 80154e8:	2b01      	cmp	r3, #1
 80154ea:	d108      	bne.n	80154fe <HAL_CAN_Init+0x206>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	681b      	ldr	r3, [r3, #0]
 80154f0:	681a      	ldr	r2, [r3, #0]
 80154f2:	687b      	ldr	r3, [r7, #4]
 80154f4:	681b      	ldr	r3, [r3, #0]
 80154f6:	f042 0204 	orr.w	r2, r2, #4
 80154fa:	601a      	str	r2, [r3, #0]
 80154fc:	e007      	b.n	801550e <HAL_CAN_Init+0x216>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	681a      	ldr	r2, [r3, #0]
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	f022 0204 	bic.w	r2, r2, #4
 801550c:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	689a      	ldr	r2, [r3, #8]
 8015512:	687b      	ldr	r3, [r7, #4]
 8015514:	68db      	ldr	r3, [r3, #12]
 8015516:	431a      	orrs	r2, r3
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	691b      	ldr	r3, [r3, #16]
 801551c:	431a      	orrs	r2, r3
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	695b      	ldr	r3, [r3, #20]
 8015522:	ea42 0103 	orr.w	r1, r2, r3
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	1e5a      	subs	r2, r3, #1
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	681b      	ldr	r3, [r3, #0]
 8015530:	430a      	orrs	r2, r1
 8015532:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	2200      	movs	r2, #0
 8015538:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2201      	movs	r2, #1
 801553e:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8015542:	2300      	movs	r3, #0
}
 8015544:	4618      	mov	r0, r3
 8015546:	3710      	adds	r7, #16
 8015548:	46bd      	mov	sp, r7
 801554a:	bd80      	pop	{r7, pc}
 801554c:	0800f8fd 	.word	0x0800f8fd
 8015550:	0801603f 	.word	0x0801603f
 8015554:	0800fa19 	.word	0x0800fa19
 8015558:	08016053 	.word	0x08016053
 801555c:	08015fc7 	.word	0x08015fc7
 8015560:	08015fdb 	.word	0x08015fdb
 8015564:	08015fef 	.word	0x08015fef
 8015568:	08016003 	.word	0x08016003
 801556c:	08016017 	.word	0x08016017
 8015570:	0801602b 	.word	0x0801602b
 8015574:	08016067 	.word	0x08016067
 8015578:	0801607b 	.word	0x0801607b
 801557c:	0801608f 	.word	0x0801608f
 8015580:	0800f1a9 	.word	0x0800f1a9

08015584 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8015584:	b480      	push	{r7}
 8015586:	b087      	sub	sp, #28
 8015588:	af00      	add	r7, sp, #0
 801558a:	6078      	str	r0, [r7, #4]
 801558c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	681b      	ldr	r3, [r3, #0]
 8015592:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	f893 3020 	ldrb.w	r3, [r3, #32]
 801559a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 801559c:	7cfb      	ldrb	r3, [r7, #19]
 801559e:	2b01      	cmp	r3, #1
 80155a0:	d003      	beq.n	80155aa <HAL_CAN_ConfigFilter+0x26>
 80155a2:	7cfb      	ldrb	r3, [r7, #19]
 80155a4:	2b02      	cmp	r3, #2
 80155a6:	f040 80c7 	bne.w	8015738 <HAL_CAN_ConfigFilter+0x1b4>
    assert_param(IS_CAN_FILTER_FIFO(sFilterConfig->FilterFIFOAssignment));
    assert_param(IS_CAN_FILTER_ACTIVATION(sFilterConfig->FilterActivation));

#if defined(CAN3)
    /* Check the CAN instance */
    if (hcan->Instance == CAN3)
 80155aa:	687b      	ldr	r3, [r7, #4]
 80155ac:	681b      	ldr	r3, [r3, #0]
 80155ae:	4a69      	ldr	r2, [pc, #420]	; (8015754 <HAL_CAN_ConfigFilter+0x1d0>)
 80155b0:	4293      	cmp	r3, r2
 80155b2:	d001      	beq.n	80155b8 <HAL_CAN_ConfigFilter+0x34>
    }
    else
    {
      /* CAN1 and CAN2 are dual instances with 28 common filters banks */
      /* Select master instance to access the filter banks */
      can_ip = CAN1;
 80155b4:	4b68      	ldr	r3, [pc, #416]	; (8015758 <HAL_CAN_ConfigFilter+0x1d4>)
 80155b6:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80155b8:	697b      	ldr	r3, [r7, #20]
 80155ba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80155be:	f043 0201 	orr.w	r2, r3, #1
 80155c2:	697b      	ldr	r3, [r7, #20]
 80155c4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#if defined(CAN3)
    /* Check the CAN instance */
    if (can_ip == CAN1)
 80155c8:	697b      	ldr	r3, [r7, #20]
 80155ca:	4a63      	ldr	r2, [pc, #396]	; (8015758 <HAL_CAN_ConfigFilter+0x1d4>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d111      	bne.n	80155f4 <HAL_CAN_ConfigFilter+0x70>
    {
      /* Select the start filter number of CAN2 slave instance */
      CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80155d0:	697b      	ldr	r3, [r7, #20]
 80155d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80155d6:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80155da:	697b      	ldr	r3, [r7, #20]
 80155dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80155e0:	697b      	ldr	r3, [r7, #20]
 80155e2:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80155e6:	683b      	ldr	r3, [r7, #0]
 80155e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80155ea:	021b      	lsls	r3, r3, #8
 80155ec:	431a      	orrs	r2, r3
 80155ee:	697b      	ldr	r3, [r7, #20]
 80155f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80155f4:	683b      	ldr	r3, [r7, #0]
 80155f6:	695b      	ldr	r3, [r3, #20]
 80155f8:	f003 031f 	and.w	r3, r3, #31
 80155fc:	2201      	movs	r2, #1
 80155fe:	fa02 f303 	lsl.w	r3, r2, r3
 8015602:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8015604:	697b      	ldr	r3, [r7, #20]
 8015606:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801560a:	68fb      	ldr	r3, [r7, #12]
 801560c:	43db      	mvns	r3, r3
 801560e:	401a      	ands	r2, r3
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8015616:	683b      	ldr	r3, [r7, #0]
 8015618:	69db      	ldr	r3, [r3, #28]
 801561a:	2b00      	cmp	r3, #0
 801561c:	d123      	bne.n	8015666 <HAL_CAN_ConfigFilter+0xe2>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 801561e:	697b      	ldr	r3, [r7, #20]
 8015620:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015624:	68fb      	ldr	r3, [r7, #12]
 8015626:	43db      	mvns	r3, r3
 8015628:	401a      	ands	r2, r3
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015630:	683b      	ldr	r3, [r7, #0]
 8015632:	68db      	ldr	r3, [r3, #12]
 8015634:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015636:	683b      	ldr	r3, [r7, #0]
 8015638:	685b      	ldr	r3, [r3, #4]
 801563a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801563c:	683a      	ldr	r2, [r7, #0]
 801563e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8015640:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015642:	697b      	ldr	r3, [r7, #20]
 8015644:	3248      	adds	r2, #72	; 0x48
 8015646:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801564a:	683b      	ldr	r3, [r7, #0]
 801564c:	689b      	ldr	r3, [r3, #8]
 801564e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8015650:	683b      	ldr	r3, [r7, #0]
 8015652:	681b      	ldr	r3, [r3, #0]
 8015654:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8015656:	683b      	ldr	r3, [r7, #0]
 8015658:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 801565a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 801565c:	6979      	ldr	r1, [r7, #20]
 801565e:	3348      	adds	r3, #72	; 0x48
 8015660:	00db      	lsls	r3, r3, #3
 8015662:	440b      	add	r3, r1
 8015664:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8015666:	683b      	ldr	r3, [r7, #0]
 8015668:	69db      	ldr	r3, [r3, #28]
 801566a:	2b01      	cmp	r3, #1
 801566c:	d122      	bne.n	80156b4 <HAL_CAN_ConfigFilter+0x130>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 801566e:	697b      	ldr	r3, [r7, #20]
 8015670:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8015674:	68fb      	ldr	r3, [r7, #12]
 8015676:	431a      	orrs	r2, r3
 8015678:	697b      	ldr	r3, [r7, #20]
 801567a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801567e:	683b      	ldr	r3, [r7, #0]
 8015680:	681b      	ldr	r3, [r3, #0]
 8015682:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 801568a:	683a      	ldr	r2, [r7, #0]
 801568c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 801568e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	3248      	adds	r2, #72	; 0x48
 8015694:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8015698:	683b      	ldr	r3, [r7, #0]
 801569a:	689b      	ldr	r3, [r3, #8]
 801569c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	68db      	ldr	r3, [r3, #12]
 80156a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80156a4:	683b      	ldr	r3, [r7, #0]
 80156a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80156a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80156aa:	6979      	ldr	r1, [r7, #20]
 80156ac:	3348      	adds	r3, #72	; 0x48
 80156ae:	00db      	lsls	r3, r3, #3
 80156b0:	440b      	add	r3, r1
 80156b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80156b4:	683b      	ldr	r3, [r7, #0]
 80156b6:	699b      	ldr	r3, [r3, #24]
 80156b8:	2b00      	cmp	r3, #0
 80156ba:	d109      	bne.n	80156d0 <HAL_CAN_ConfigFilter+0x14c>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80156bc:	697b      	ldr	r3, [r7, #20]
 80156be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156c2:	68fb      	ldr	r3, [r7, #12]
 80156c4:	43db      	mvns	r3, r3
 80156c6:	401a      	ands	r2, r3
 80156c8:	697b      	ldr	r3, [r7, #20]
 80156ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80156ce:	e007      	b.n	80156e0 <HAL_CAN_ConfigFilter+0x15c>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80156d6:	68fb      	ldr	r3, [r7, #12]
 80156d8:	431a      	orrs	r2, r3
 80156da:	697b      	ldr	r3, [r7, #20]
 80156dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	691b      	ldr	r3, [r3, #16]
 80156e4:	2b00      	cmp	r3, #0
 80156e6:	d109      	bne.n	80156fc <HAL_CAN_ConfigFilter+0x178>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80156e8:	697b      	ldr	r3, [r7, #20]
 80156ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80156ee:	68fb      	ldr	r3, [r7, #12]
 80156f0:	43db      	mvns	r3, r3
 80156f2:	401a      	ands	r2, r3
 80156f4:	697b      	ldr	r3, [r7, #20]
 80156f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80156fa:	e007      	b.n	801570c <HAL_CAN_ConfigFilter+0x188>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80156fc:	697b      	ldr	r3, [r7, #20]
 80156fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	431a      	orrs	r2, r3
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	6a1b      	ldr	r3, [r3, #32]
 8015710:	2b01      	cmp	r3, #1
 8015712:	d107      	bne.n	8015724 <HAL_CAN_ConfigFilter+0x1a0>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8015714:	697b      	ldr	r3, [r7, #20]
 8015716:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 801571a:	68fb      	ldr	r3, [r7, #12]
 801571c:	431a      	orrs	r2, r3
 801571e:	697b      	ldr	r3, [r7, #20]
 8015720:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8015724:	697b      	ldr	r3, [r7, #20]
 8015726:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 801572a:	f023 0201 	bic.w	r2, r3, #1
 801572e:	697b      	ldr	r3, [r7, #20]
 8015730:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8015734:	2300      	movs	r3, #0
 8015736:	e006      	b.n	8015746 <HAL_CAN_ConfigFilter+0x1c2>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015738:	687b      	ldr	r3, [r7, #4]
 801573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801573c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015740:	687b      	ldr	r3, [r7, #4]
 8015742:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015744:	2301      	movs	r3, #1
  }
}
 8015746:	4618      	mov	r0, r3
 8015748:	371c      	adds	r7, #28
 801574a:	46bd      	mov	sp, r7
 801574c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015750:	4770      	bx	lr
 8015752:	bf00      	nop
 8015754:	40003400 	.word	0x40003400
 8015758:	40006400 	.word	0x40006400

0801575c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 801575c:	b580      	push	{r7, lr}
 801575e:	b084      	sub	sp, #16
 8015760:	af00      	add	r7, sp, #0
 8015762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	f893 3020 	ldrb.w	r3, [r3, #32]
 801576a:	b2db      	uxtb	r3, r3
 801576c:	2b01      	cmp	r3, #1
 801576e:	d12e      	bne.n	80157ce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	2202      	movs	r2, #2
 8015774:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	681a      	ldr	r2, [r3, #0]
 801577e:	687b      	ldr	r3, [r7, #4]
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	f022 0201 	bic.w	r2, r2, #1
 8015786:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8015788:	f7ff fd86 	bl	8015298 <HAL_GetTick>
 801578c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 801578e:	e012      	b.n	80157b6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8015790:	f7ff fd82 	bl	8015298 <HAL_GetTick>
 8015794:	4602      	mov	r2, r0
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	1ad3      	subs	r3, r2, r3
 801579a:	2b0a      	cmp	r3, #10
 801579c:	d90b      	bls.n	80157b6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157a2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2205      	movs	r2, #5
 80157ae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80157b2:	2301      	movs	r3, #1
 80157b4:	e012      	b.n	80157dc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	685b      	ldr	r3, [r3, #4]
 80157bc:	f003 0301 	and.w	r3, r3, #1
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	d1e5      	bne.n	8015790 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80157c4:	687b      	ldr	r3, [r7, #4]
 80157c6:	2200      	movs	r2, #0
 80157c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80157ca:	2300      	movs	r3, #0
 80157cc:	e006      	b.n	80157dc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80157ce:	687b      	ldr	r3, [r7, #4]
 80157d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80157d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80157d6:	687b      	ldr	r3, [r7, #4]
 80157d8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80157da:	2301      	movs	r3, #1
  }
}
 80157dc:	4618      	mov	r0, r3
 80157de:	3710      	adds	r7, #16
 80157e0:	46bd      	mov	sp, r7
 80157e2:	bd80      	pop	{r7, pc}

080157e4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80157e4:	b480      	push	{r7}
 80157e6:	b089      	sub	sp, #36	; 0x24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	60f8      	str	r0, [r7, #12]
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80157f8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	689b      	ldr	r3, [r3, #8]
 8015800:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8015802:	7ffb      	ldrb	r3, [r7, #31]
 8015804:	2b01      	cmp	r3, #1
 8015806:	d003      	beq.n	8015810 <HAL_CAN_AddTxMessage+0x2c>
 8015808:	7ffb      	ldrb	r3, [r7, #31]
 801580a:	2b02      	cmp	r3, #2
 801580c:	f040 80ad 	bne.w	801596a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015810:	69bb      	ldr	r3, [r7, #24]
 8015812:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8015816:	2b00      	cmp	r3, #0
 8015818:	d10a      	bne.n	8015830 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801581a:	69bb      	ldr	r3, [r7, #24]
 801581c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8015820:	2b00      	cmp	r3, #0
 8015822:	d105      	bne.n	8015830 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8015824:	69bb      	ldr	r3, [r7, #24]
 8015826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 801582a:	2b00      	cmp	r3, #0
 801582c:	f000 8095 	beq.w	801595a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8015830:	69bb      	ldr	r3, [r7, #24]
 8015832:	0e1b      	lsrs	r3, r3, #24
 8015834:	f003 0303 	and.w	r3, r3, #3
 8015838:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 801583a:	2201      	movs	r2, #1
 801583c:	697b      	ldr	r3, [r7, #20]
 801583e:	409a      	lsls	r2, r3
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8015844:	68bb      	ldr	r3, [r7, #8]
 8015846:	689b      	ldr	r3, [r3, #8]
 8015848:	2b00      	cmp	r3, #0
 801584a:	d10d      	bne.n	8015868 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 801584c:	68bb      	ldr	r3, [r7, #8]
 801584e:	681b      	ldr	r3, [r3, #0]
 8015850:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8015856:	68f9      	ldr	r1, [r7, #12]
 8015858:	6809      	ldr	r1, [r1, #0]
 801585a:	431a      	orrs	r2, r3
 801585c:	697b      	ldr	r3, [r7, #20]
 801585e:	3318      	adds	r3, #24
 8015860:	011b      	lsls	r3, r3, #4
 8015862:	440b      	add	r3, r1
 8015864:	601a      	str	r2, [r3, #0]
 8015866:	e00f      	b.n	8015888 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015868:	68bb      	ldr	r3, [r7, #8]
 801586a:	685b      	ldr	r3, [r3, #4]
 801586c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 801586e:	68bb      	ldr	r3, [r7, #8]
 8015870:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015872:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8015874:	68bb      	ldr	r3, [r7, #8]
 8015876:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8015878:	68f9      	ldr	r1, [r7, #12]
 801587a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 801587c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 801587e:	697b      	ldr	r3, [r7, #20]
 8015880:	3318      	adds	r3, #24
 8015882:	011b      	lsls	r3, r3, #4
 8015884:	440b      	add	r3, r1
 8015886:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	6819      	ldr	r1, [r3, #0]
 801588c:	68bb      	ldr	r3, [r7, #8]
 801588e:	691a      	ldr	r2, [r3, #16]
 8015890:	697b      	ldr	r3, [r7, #20]
 8015892:	3318      	adds	r3, #24
 8015894:	011b      	lsls	r3, r3, #4
 8015896:	440b      	add	r3, r1
 8015898:	3304      	adds	r3, #4
 801589a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 801589c:	68bb      	ldr	r3, [r7, #8]
 801589e:	7d1b      	ldrb	r3, [r3, #20]
 80158a0:	2b01      	cmp	r3, #1
 80158a2:	d111      	bne.n	80158c8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681a      	ldr	r2, [r3, #0]
 80158a8:	697b      	ldr	r3, [r7, #20]
 80158aa:	3318      	adds	r3, #24
 80158ac:	011b      	lsls	r3, r3, #4
 80158ae:	4413      	add	r3, r2
 80158b0:	3304      	adds	r3, #4
 80158b2:	681b      	ldr	r3, [r3, #0]
 80158b4:	68fa      	ldr	r2, [r7, #12]
 80158b6:	6811      	ldr	r1, [r2, #0]
 80158b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	3318      	adds	r3, #24
 80158c0:	011b      	lsls	r3, r3, #4
 80158c2:	440b      	add	r3, r1
 80158c4:	3304      	adds	r3, #4
 80158c6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	3307      	adds	r3, #7
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	061a      	lsls	r2, r3, #24
 80158d0:	687b      	ldr	r3, [r7, #4]
 80158d2:	3306      	adds	r3, #6
 80158d4:	781b      	ldrb	r3, [r3, #0]
 80158d6:	041b      	lsls	r3, r3, #16
 80158d8:	431a      	orrs	r2, r3
 80158da:	687b      	ldr	r3, [r7, #4]
 80158dc:	3305      	adds	r3, #5
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	021b      	lsls	r3, r3, #8
 80158e2:	4313      	orrs	r3, r2
 80158e4:	687a      	ldr	r2, [r7, #4]
 80158e6:	3204      	adds	r2, #4
 80158e8:	7812      	ldrb	r2, [r2, #0]
 80158ea:	4610      	mov	r0, r2
 80158ec:	68fa      	ldr	r2, [r7, #12]
 80158ee:	6811      	ldr	r1, [r2, #0]
 80158f0:	ea43 0200 	orr.w	r2, r3, r0
 80158f4:	697b      	ldr	r3, [r7, #20]
 80158f6:	011b      	lsls	r3, r3, #4
 80158f8:	440b      	add	r3, r1
 80158fa:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80158fe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	3303      	adds	r3, #3
 8015904:	781b      	ldrb	r3, [r3, #0]
 8015906:	061a      	lsls	r2, r3, #24
 8015908:	687b      	ldr	r3, [r7, #4]
 801590a:	3302      	adds	r3, #2
 801590c:	781b      	ldrb	r3, [r3, #0]
 801590e:	041b      	lsls	r3, r3, #16
 8015910:	431a      	orrs	r2, r3
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	3301      	adds	r3, #1
 8015916:	781b      	ldrb	r3, [r3, #0]
 8015918:	021b      	lsls	r3, r3, #8
 801591a:	4313      	orrs	r3, r2
 801591c:	687a      	ldr	r2, [r7, #4]
 801591e:	7812      	ldrb	r2, [r2, #0]
 8015920:	4610      	mov	r0, r2
 8015922:	68fa      	ldr	r2, [r7, #12]
 8015924:	6811      	ldr	r1, [r2, #0]
 8015926:	ea43 0200 	orr.w	r2, r3, r0
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	011b      	lsls	r3, r3, #4
 801592e:	440b      	add	r3, r1
 8015930:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8015934:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8015936:	68fb      	ldr	r3, [r7, #12]
 8015938:	681a      	ldr	r2, [r3, #0]
 801593a:	697b      	ldr	r3, [r7, #20]
 801593c:	3318      	adds	r3, #24
 801593e:	011b      	lsls	r3, r3, #4
 8015940:	4413      	add	r3, r2
 8015942:	681b      	ldr	r3, [r3, #0]
 8015944:	68fa      	ldr	r2, [r7, #12]
 8015946:	6811      	ldr	r1, [r2, #0]
 8015948:	f043 0201 	orr.w	r2, r3, #1
 801594c:	697b      	ldr	r3, [r7, #20]
 801594e:	3318      	adds	r3, #24
 8015950:	011b      	lsls	r3, r3, #4
 8015952:	440b      	add	r3, r1
 8015954:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8015956:	2300      	movs	r3, #0
 8015958:	e00e      	b.n	8015978 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 801595a:	68fb      	ldr	r3, [r7, #12]
 801595c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801595e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015962:	68fb      	ldr	r3, [r7, #12]
 8015964:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8015966:	2301      	movs	r3, #1
 8015968:	e006      	b.n	8015978 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 801596a:	68fb      	ldr	r3, [r7, #12]
 801596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801596e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015972:	68fb      	ldr	r3, [r7, #12]
 8015974:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015976:	2301      	movs	r3, #1
  }
}
 8015978:	4618      	mov	r0, r3
 801597a:	3724      	adds	r7, #36	; 0x24
 801597c:	46bd      	mov	sp, r7
 801597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015982:	4770      	bx	lr

08015984 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 8015984:	b480      	push	{r7}
 8015986:	b085      	sub	sp, #20
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 801598e:	2300      	movs	r3, #0
 8015990:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015992:	687b      	ldr	r3, [r7, #4]
 8015994:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015998:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 801599a:	7afb      	ldrb	r3, [r7, #11]
 801599c:	2b01      	cmp	r3, #1
 801599e:	d002      	beq.n	80159a6 <HAL_CAN_IsTxMessagePending+0x22>
 80159a0:	7afb      	ldrb	r3, [r7, #11]
 80159a2:	2b02      	cmp	r3, #2
 80159a4:	d10b      	bne.n	80159be <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	689a      	ldr	r2, [r3, #8]
 80159ac:	683b      	ldr	r3, [r7, #0]
 80159ae:	069b      	lsls	r3, r3, #26
 80159b0:	401a      	ands	r2, r3
 80159b2:	683b      	ldr	r3, [r7, #0]
 80159b4:	069b      	lsls	r3, r3, #26
 80159b6:	429a      	cmp	r2, r3
 80159b8:	d001      	beq.n	80159be <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 80159ba:	2301      	movs	r3, #1
 80159bc:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 80159be:	68fb      	ldr	r3, [r7, #12]
}
 80159c0:	4618      	mov	r0, r3
 80159c2:	3714      	adds	r7, #20
 80159c4:	46bd      	mov	sp, r7
 80159c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159ca:	4770      	bx	lr

080159cc <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80159cc:	b480      	push	{r7}
 80159ce:	b087      	sub	sp, #28
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	60f8      	str	r0, [r7, #12]
 80159d4:	60b9      	str	r1, [r7, #8]
 80159d6:	607a      	str	r2, [r7, #4]
 80159d8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80159e0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80159e2:	7dfb      	ldrb	r3, [r7, #23]
 80159e4:	2b01      	cmp	r3, #1
 80159e6:	d003      	beq.n	80159f0 <HAL_CAN_GetRxMessage+0x24>
 80159e8:	7dfb      	ldrb	r3, [r7, #23]
 80159ea:	2b02      	cmp	r3, #2
 80159ec:	f040 80f3 	bne.w	8015bd6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80159f0:	68bb      	ldr	r3, [r7, #8]
 80159f2:	2b00      	cmp	r3, #0
 80159f4:	d10e      	bne.n	8015a14 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80159f6:	68fb      	ldr	r3, [r7, #12]
 80159f8:	681b      	ldr	r3, [r3, #0]
 80159fa:	68db      	ldr	r3, [r3, #12]
 80159fc:	f003 0303 	and.w	r3, r3, #3
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d116      	bne.n	8015a32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a08:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015a10:	2301      	movs	r3, #1
 8015a12:	e0e7      	b.n	8015be4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8015a14:	68fb      	ldr	r3, [r7, #12]
 8015a16:	681b      	ldr	r3, [r3, #0]
 8015a18:	691b      	ldr	r3, [r3, #16]
 8015a1a:	f003 0303 	and.w	r3, r3, #3
 8015a1e:	2b00      	cmp	r3, #0
 8015a20:	d107      	bne.n	8015a32 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8015a22:	68fb      	ldr	r3, [r7, #12]
 8015a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a26:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8015a2a:	68fb      	ldr	r3, [r7, #12]
 8015a2c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8015a2e:	2301      	movs	r3, #1
 8015a30:	e0d8      	b.n	8015be4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8015a32:	68fb      	ldr	r3, [r7, #12]
 8015a34:	681a      	ldr	r2, [r3, #0]
 8015a36:	68bb      	ldr	r3, [r7, #8]
 8015a38:	331b      	adds	r3, #27
 8015a3a:	011b      	lsls	r3, r3, #4
 8015a3c:	4413      	add	r3, r2
 8015a3e:	681b      	ldr	r3, [r3, #0]
 8015a40:	f003 0204 	and.w	r2, r3, #4
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8015a48:	687b      	ldr	r3, [r7, #4]
 8015a4a:	689b      	ldr	r3, [r3, #8]
 8015a4c:	2b00      	cmp	r3, #0
 8015a4e:	d10c      	bne.n	8015a6a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8015a50:	68fb      	ldr	r3, [r7, #12]
 8015a52:	681a      	ldr	r2, [r3, #0]
 8015a54:	68bb      	ldr	r3, [r7, #8]
 8015a56:	331b      	adds	r3, #27
 8015a58:	011b      	lsls	r3, r3, #4
 8015a5a:	4413      	add	r3, r2
 8015a5c:	681b      	ldr	r3, [r3, #0]
 8015a5e:	0d5b      	lsrs	r3, r3, #21
 8015a60:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8015a64:	687b      	ldr	r3, [r7, #4]
 8015a66:	601a      	str	r2, [r3, #0]
 8015a68:	e00b      	b.n	8015a82 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8015a6a:	68fb      	ldr	r3, [r7, #12]
 8015a6c:	681a      	ldr	r2, [r3, #0]
 8015a6e:	68bb      	ldr	r3, [r7, #8]
 8015a70:	331b      	adds	r3, #27
 8015a72:	011b      	lsls	r3, r3, #4
 8015a74:	4413      	add	r3, r2
 8015a76:	681b      	ldr	r3, [r3, #0]
 8015a78:	08db      	lsrs	r3, r3, #3
 8015a7a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8015a7e:	687b      	ldr	r3, [r7, #4]
 8015a80:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8015a82:	68fb      	ldr	r3, [r7, #12]
 8015a84:	681a      	ldr	r2, [r3, #0]
 8015a86:	68bb      	ldr	r3, [r7, #8]
 8015a88:	331b      	adds	r3, #27
 8015a8a:	011b      	lsls	r3, r3, #4
 8015a8c:	4413      	add	r3, r2
 8015a8e:	681b      	ldr	r3, [r3, #0]
 8015a90:	f003 0202 	and.w	r2, r3, #2
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8015a98:	68fb      	ldr	r3, [r7, #12]
 8015a9a:	681a      	ldr	r2, [r3, #0]
 8015a9c:	68bb      	ldr	r3, [r7, #8]
 8015a9e:	331b      	adds	r3, #27
 8015aa0:	011b      	lsls	r3, r3, #4
 8015aa2:	4413      	add	r3, r2
 8015aa4:	3304      	adds	r3, #4
 8015aa6:	681b      	ldr	r3, [r3, #0]
 8015aa8:	f003 020f 	and.w	r2, r3, #15
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8015ab0:	68fb      	ldr	r3, [r7, #12]
 8015ab2:	681a      	ldr	r2, [r3, #0]
 8015ab4:	68bb      	ldr	r3, [r7, #8]
 8015ab6:	331b      	adds	r3, #27
 8015ab8:	011b      	lsls	r3, r3, #4
 8015aba:	4413      	add	r3, r2
 8015abc:	3304      	adds	r3, #4
 8015abe:	681b      	ldr	r3, [r3, #0]
 8015ac0:	0a1b      	lsrs	r3, r3, #8
 8015ac2:	b2da      	uxtb	r2, r3
 8015ac4:	687b      	ldr	r3, [r7, #4]
 8015ac6:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	681a      	ldr	r2, [r3, #0]
 8015acc:	68bb      	ldr	r3, [r7, #8]
 8015ace:	331b      	adds	r3, #27
 8015ad0:	011b      	lsls	r3, r3, #4
 8015ad2:	4413      	add	r3, r2
 8015ad4:	3304      	adds	r3, #4
 8015ad6:	681b      	ldr	r3, [r3, #0]
 8015ad8:	0c1b      	lsrs	r3, r3, #16
 8015ada:	b29a      	uxth	r2, r3
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	681a      	ldr	r2, [r3, #0]
 8015ae4:	68bb      	ldr	r3, [r7, #8]
 8015ae6:	011b      	lsls	r3, r3, #4
 8015ae8:	4413      	add	r3, r2
 8015aea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015aee:	681b      	ldr	r3, [r3, #0]
 8015af0:	b2da      	uxtb	r2, r3
 8015af2:	683b      	ldr	r3, [r7, #0]
 8015af4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8015af6:	68fb      	ldr	r3, [r7, #12]
 8015af8:	681a      	ldr	r2, [r3, #0]
 8015afa:	68bb      	ldr	r3, [r7, #8]
 8015afc:	011b      	lsls	r3, r3, #4
 8015afe:	4413      	add	r3, r2
 8015b00:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015b04:	681b      	ldr	r3, [r3, #0]
 8015b06:	0a1a      	lsrs	r2, r3, #8
 8015b08:	683b      	ldr	r3, [r7, #0]
 8015b0a:	3301      	adds	r3, #1
 8015b0c:	b2d2      	uxtb	r2, r2
 8015b0e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8015b10:	68fb      	ldr	r3, [r7, #12]
 8015b12:	681a      	ldr	r2, [r3, #0]
 8015b14:	68bb      	ldr	r3, [r7, #8]
 8015b16:	011b      	lsls	r3, r3, #4
 8015b18:	4413      	add	r3, r2
 8015b1a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015b1e:	681b      	ldr	r3, [r3, #0]
 8015b20:	0c1a      	lsrs	r2, r3, #16
 8015b22:	683b      	ldr	r3, [r7, #0]
 8015b24:	3302      	adds	r3, #2
 8015b26:	b2d2      	uxtb	r2, r2
 8015b28:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8015b2a:	68fb      	ldr	r3, [r7, #12]
 8015b2c:	681a      	ldr	r2, [r3, #0]
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	011b      	lsls	r3, r3, #4
 8015b32:	4413      	add	r3, r2
 8015b34:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8015b38:	681b      	ldr	r3, [r3, #0]
 8015b3a:	0e1a      	lsrs	r2, r3, #24
 8015b3c:	683b      	ldr	r3, [r7, #0]
 8015b3e:	3303      	adds	r3, #3
 8015b40:	b2d2      	uxtb	r2, r2
 8015b42:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8015b44:	68fb      	ldr	r3, [r7, #12]
 8015b46:	681a      	ldr	r2, [r3, #0]
 8015b48:	68bb      	ldr	r3, [r7, #8]
 8015b4a:	011b      	lsls	r3, r3, #4
 8015b4c:	4413      	add	r3, r2
 8015b4e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b52:	681a      	ldr	r2, [r3, #0]
 8015b54:	683b      	ldr	r3, [r7, #0]
 8015b56:	3304      	adds	r3, #4
 8015b58:	b2d2      	uxtb	r2, r2
 8015b5a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	681a      	ldr	r2, [r3, #0]
 8015b60:	68bb      	ldr	r3, [r7, #8]
 8015b62:	011b      	lsls	r3, r3, #4
 8015b64:	4413      	add	r3, r2
 8015b66:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b6a:	681b      	ldr	r3, [r3, #0]
 8015b6c:	0a1a      	lsrs	r2, r3, #8
 8015b6e:	683b      	ldr	r3, [r7, #0]
 8015b70:	3305      	adds	r3, #5
 8015b72:	b2d2      	uxtb	r2, r2
 8015b74:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8015b76:	68fb      	ldr	r3, [r7, #12]
 8015b78:	681a      	ldr	r2, [r3, #0]
 8015b7a:	68bb      	ldr	r3, [r7, #8]
 8015b7c:	011b      	lsls	r3, r3, #4
 8015b7e:	4413      	add	r3, r2
 8015b80:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b84:	681b      	ldr	r3, [r3, #0]
 8015b86:	0c1a      	lsrs	r2, r3, #16
 8015b88:	683b      	ldr	r3, [r7, #0]
 8015b8a:	3306      	adds	r3, #6
 8015b8c:	b2d2      	uxtb	r2, r2
 8015b8e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8015b90:	68fb      	ldr	r3, [r7, #12]
 8015b92:	681a      	ldr	r2, [r3, #0]
 8015b94:	68bb      	ldr	r3, [r7, #8]
 8015b96:	011b      	lsls	r3, r3, #4
 8015b98:	4413      	add	r3, r2
 8015b9a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8015b9e:	681b      	ldr	r3, [r3, #0]
 8015ba0:	0e1a      	lsrs	r2, r3, #24
 8015ba2:	683b      	ldr	r3, [r7, #0]
 8015ba4:	3307      	adds	r3, #7
 8015ba6:	b2d2      	uxtb	r2, r2
 8015ba8:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8015baa:	68bb      	ldr	r3, [r7, #8]
 8015bac:	2b00      	cmp	r3, #0
 8015bae:	d108      	bne.n	8015bc2 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8015bb0:	68fb      	ldr	r3, [r7, #12]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	68da      	ldr	r2, [r3, #12]
 8015bb6:	68fb      	ldr	r3, [r7, #12]
 8015bb8:	681b      	ldr	r3, [r3, #0]
 8015bba:	f042 0220 	orr.w	r2, r2, #32
 8015bbe:	60da      	str	r2, [r3, #12]
 8015bc0:	e007      	b.n	8015bd2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	681b      	ldr	r3, [r3, #0]
 8015bc6:	691a      	ldr	r2, [r3, #16]
 8015bc8:	68fb      	ldr	r3, [r7, #12]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	f042 0220 	orr.w	r2, r2, #32
 8015bd0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	e006      	b.n	8015be4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015bd6:	68fb      	ldr	r3, [r7, #12]
 8015bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015bda:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015bde:	68fb      	ldr	r3, [r7, #12]
 8015be0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015be2:	2301      	movs	r3, #1
  }
}
 8015be4:	4618      	mov	r0, r3
 8015be6:	371c      	adds	r7, #28
 8015be8:	46bd      	mov	sp, r7
 8015bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bee:	4770      	bx	lr

08015bf0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8015bf0:	b480      	push	{r7}
 8015bf2:	b085      	sub	sp, #20
 8015bf4:	af00      	add	r7, sp, #0
 8015bf6:	6078      	str	r0, [r7, #4]
 8015bf8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8015bfa:	687b      	ldr	r3, [r7, #4]
 8015bfc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8015c00:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8015c02:	7bfb      	ldrb	r3, [r7, #15]
 8015c04:	2b01      	cmp	r3, #1
 8015c06:	d002      	beq.n	8015c0e <HAL_CAN_ActivateNotification+0x1e>
 8015c08:	7bfb      	ldrb	r3, [r7, #15]
 8015c0a:	2b02      	cmp	r3, #2
 8015c0c:	d109      	bne.n	8015c22 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8015c0e:	687b      	ldr	r3, [r7, #4]
 8015c10:	681b      	ldr	r3, [r3, #0]
 8015c12:	6959      	ldr	r1, [r3, #20]
 8015c14:	687b      	ldr	r3, [r7, #4]
 8015c16:	681b      	ldr	r3, [r3, #0]
 8015c18:	683a      	ldr	r2, [r7, #0]
 8015c1a:	430a      	orrs	r2, r1
 8015c1c:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8015c1e:	2300      	movs	r3, #0
 8015c20:	e006      	b.n	8015c30 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c26:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8015c2e:	2301      	movs	r3, #1
  }
}
 8015c30:	4618      	mov	r0, r3
 8015c32:	3714      	adds	r7, #20
 8015c34:	46bd      	mov	sp, r7
 8015c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c3a:	4770      	bx	lr

08015c3c <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8015c3c:	b580      	push	{r7, lr}
 8015c3e:	b08a      	sub	sp, #40	; 0x28
 8015c40:	af00      	add	r7, sp, #0
 8015c42:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8015c44:	2300      	movs	r3, #0
 8015c46:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8015c48:	687b      	ldr	r3, [r7, #4]
 8015c4a:	681b      	ldr	r3, [r3, #0]
 8015c4c:	695b      	ldr	r3, [r3, #20]
 8015c4e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8015c50:	687b      	ldr	r3, [r7, #4]
 8015c52:	681b      	ldr	r3, [r3, #0]
 8015c54:	685b      	ldr	r3, [r3, #4]
 8015c56:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8015c58:	687b      	ldr	r3, [r7, #4]
 8015c5a:	681b      	ldr	r3, [r3, #0]
 8015c5c:	689b      	ldr	r3, [r3, #8]
 8015c5e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8015c60:	687b      	ldr	r3, [r7, #4]
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	68db      	ldr	r3, [r3, #12]
 8015c66:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	691b      	ldr	r3, [r3, #16]
 8015c6e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8015c70:	687b      	ldr	r3, [r7, #4]
 8015c72:	681b      	ldr	r3, [r3, #0]
 8015c74:	699b      	ldr	r3, [r3, #24]
 8015c76:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8015c78:	6a3b      	ldr	r3, [r7, #32]
 8015c7a:	f003 0301 	and.w	r3, r3, #1
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	f000 8083 	beq.w	8015d8a <HAL_CAN_IRQHandler+0x14e>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8015c84:	69bb      	ldr	r3, [r7, #24]
 8015c86:	f003 0301 	and.w	r3, r3, #1
 8015c8a:	2b00      	cmp	r3, #0
 8015c8c:	d025      	beq.n	8015cda <HAL_CAN_IRQHandler+0x9e>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	2201      	movs	r2, #1
 8015c94:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8015c96:	69bb      	ldr	r3, [r7, #24]
 8015c98:	f003 0302 	and.w	r3, r3, #2
 8015c9c:	2b00      	cmp	r3, #0
 8015c9e:	d004      	beq.n	8015caa <HAL_CAN_IRQHandler+0x6e>
      {
        /* Transmission Mailbox 0 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
 8015ca0:	687b      	ldr	r3, [r7, #4]
 8015ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8015ca4:	6878      	ldr	r0, [r7, #4]
 8015ca6:	4798      	blx	r3
 8015ca8:	e017      	b.n	8015cda <HAL_CAN_IRQHandler+0x9e>
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8015caa:	69bb      	ldr	r3, [r7, #24]
 8015cac:	f003 0304 	and.w	r3, r3, #4
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d004      	beq.n	8015cbe <HAL_CAN_IRQHandler+0x82>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8015cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cb6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8015cba:	627b      	str	r3, [r7, #36]	; 0x24
 8015cbc:	e00d      	b.n	8015cda <HAL_CAN_IRQHandler+0x9e>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	f003 0308 	and.w	r3, r3, #8
 8015cc4:	2b00      	cmp	r3, #0
 8015cc6:	d004      	beq.n	8015cd2 <HAL_CAN_IRQHandler+0x96>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8015cc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015cce:	627b      	str	r3, [r7, #36]	; 0x24
 8015cd0:	e003      	b.n	8015cda <HAL_CAN_IRQHandler+0x9e>
        else
        {
          /* Transmission Mailbox 0 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
 8015cd2:	687b      	ldr	r3, [r7, #4]
 8015cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015cd6:	6878      	ldr	r0, [r7, #4]
 8015cd8:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8015cda:	69bb      	ldr	r3, [r7, #24]
 8015cdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ce0:	2b00      	cmp	r3, #0
 8015ce2:	d026      	beq.n	8015d32 <HAL_CAN_IRQHandler+0xf6>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	681b      	ldr	r3, [r3, #0]
 8015ce8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8015cec:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8015cee:	69bb      	ldr	r3, [r7, #24]
 8015cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015cf4:	2b00      	cmp	r3, #0
 8015cf6:	d004      	beq.n	8015d02 <HAL_CAN_IRQHandler+0xc6>
      {
        /* Transmission Mailbox 1 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8015cfc:	6878      	ldr	r0, [r7, #4]
 8015cfe:	4798      	blx	r3
 8015d00:	e017      	b.n	8015d32 <HAL_CAN_IRQHandler+0xf6>
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8015d02:	69bb      	ldr	r3, [r7, #24]
 8015d04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015d08:	2b00      	cmp	r3, #0
 8015d0a:	d004      	beq.n	8015d16 <HAL_CAN_IRQHandler+0xda>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8015d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d0e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015d12:	627b      	str	r3, [r7, #36]	; 0x24
 8015d14:	e00d      	b.n	8015d32 <HAL_CAN_IRQHandler+0xf6>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8015d16:	69bb      	ldr	r3, [r7, #24]
 8015d18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015d1c:	2b00      	cmp	r3, #0
 8015d1e:	d004      	beq.n	8015d2a <HAL_CAN_IRQHandler+0xee>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8015d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015d26:	627b      	str	r3, [r7, #36]	; 0x24
 8015d28:	e003      	b.n	8015d32 <HAL_CAN_IRQHandler+0xf6>
        else
        {
          /* Transmission Mailbox 1 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
 8015d2a:	687b      	ldr	r3, [r7, #4]
 8015d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8015d2e:	6878      	ldr	r0, [r7, #4]
 8015d30:	4798      	blx	r3
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8015d32:	69bb      	ldr	r3, [r7, #24]
 8015d34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d026      	beq.n	8015d8a <HAL_CAN_IRQHandler+0x14e>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	681b      	ldr	r3, [r3, #0]
 8015d40:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8015d44:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8015d46:	69bb      	ldr	r3, [r7, #24]
 8015d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015d4c:	2b00      	cmp	r3, #0
 8015d4e:	d004      	beq.n	8015d5a <HAL_CAN_IRQHandler+0x11e>
      {
        /* Transmission Mailbox 2 complete callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015d54:	6878      	ldr	r0, [r7, #4]
 8015d56:	4798      	blx	r3
 8015d58:	e017      	b.n	8015d8a <HAL_CAN_IRQHandler+0x14e>
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8015d5a:	69bb      	ldr	r3, [r7, #24]
 8015d5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8015d60:	2b00      	cmp	r3, #0
 8015d62:	d004      	beq.n	8015d6e <HAL_CAN_IRQHandler+0x132>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8015d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8015d6a:	627b      	str	r3, [r7, #36]	; 0x24
 8015d6c:	e00d      	b.n	8015d8a <HAL_CAN_IRQHandler+0x14e>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8015d6e:	69bb      	ldr	r3, [r7, #24]
 8015d70:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8015d74:	2b00      	cmp	r3, #0
 8015d76:	d004      	beq.n	8015d82 <HAL_CAN_IRQHandler+0x146>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8015d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8015d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8015d80:	e003      	b.n	8015d8a <HAL_CAN_IRQHandler+0x14e>
        else
        {
          /* Transmission Mailbox 2 abort callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8015d86:	6878      	ldr	r0, [r7, #4]
 8015d88:	4798      	blx	r3
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8015d8a:	6a3b      	ldr	r3, [r7, #32]
 8015d8c:	f003 0308 	and.w	r3, r3, #8
 8015d90:	2b00      	cmp	r3, #0
 8015d92:	d00c      	beq.n	8015dae <HAL_CAN_IRQHandler+0x172>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8015d94:	697b      	ldr	r3, [r7, #20]
 8015d96:	f003 0310 	and.w	r3, r3, #16
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d007      	beq.n	8015dae <HAL_CAN_IRQHandler+0x172>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8015d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015da0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8015da4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	681b      	ldr	r3, [r3, #0]
 8015daa:	2210      	movs	r2, #16
 8015dac:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8015dae:	6a3b      	ldr	r3, [r7, #32]
 8015db0:	f003 0304 	and.w	r3, r3, #4
 8015db4:	2b00      	cmp	r3, #0
 8015db6:	d00c      	beq.n	8015dd2 <HAL_CAN_IRQHandler+0x196>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8015db8:	697b      	ldr	r3, [r7, #20]
 8015dba:	f003 0308 	and.w	r3, r3, #8
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d007      	beq.n	8015dd2 <HAL_CAN_IRQHandler+0x196>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	681b      	ldr	r3, [r3, #0]
 8015dc6:	2208      	movs	r2, #8
 8015dc8:	60da      	str	r2, [r3, #12]

      /* Receive FIFO 0 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dce:	6878      	ldr	r0, [r7, #4]
 8015dd0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8015dd2:	6a3b      	ldr	r3, [r7, #32]
 8015dd4:	f003 0302 	and.w	r3, r3, #2
 8015dd8:	2b00      	cmp	r3, #0
 8015dda:	d00a      	beq.n	8015df2 <HAL_CAN_IRQHandler+0x1b6>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	68db      	ldr	r3, [r3, #12]
 8015de2:	f003 0303 	and.w	r3, r3, #3
 8015de6:	2b00      	cmp	r3, #0
 8015de8:	d003      	beq.n	8015df2 <HAL_CAN_IRQHandler+0x1b6>
    {
      /* Receive FIFO 0 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015dee:	6878      	ldr	r0, [r7, #4]
 8015df0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8015df2:	6a3b      	ldr	r3, [r7, #32]
 8015df4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8015df8:	2b00      	cmp	r3, #0
 8015dfa:	d00c      	beq.n	8015e16 <HAL_CAN_IRQHandler+0x1da>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8015dfc:	693b      	ldr	r3, [r7, #16]
 8015dfe:	f003 0310 	and.w	r3, r3, #16
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d007      	beq.n	8015e16 <HAL_CAN_IRQHandler+0x1da>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8015e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e08:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8015e0c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8015e0e:	687b      	ldr	r3, [r7, #4]
 8015e10:	681b      	ldr	r3, [r3, #0]
 8015e12:	2210      	movs	r2, #16
 8015e14:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8015e16:	6a3b      	ldr	r3, [r7, #32]
 8015e18:	f003 0320 	and.w	r3, r3, #32
 8015e1c:	2b00      	cmp	r3, #0
 8015e1e:	d00c      	beq.n	8015e3a <HAL_CAN_IRQHandler+0x1fe>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8015e20:	693b      	ldr	r3, [r7, #16]
 8015e22:	f003 0308 	and.w	r3, r3, #8
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	d007      	beq.n	8015e3a <HAL_CAN_IRQHandler+0x1fe>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	2208      	movs	r2, #8
 8015e30:	611a      	str	r2, [r3, #16]

      /* Receive FIFO 1 full Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8015e36:	6878      	ldr	r0, [r7, #4]
 8015e38:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8015e3a:	6a3b      	ldr	r3, [r7, #32]
 8015e3c:	f003 0310 	and.w	r3, r3, #16
 8015e40:	2b00      	cmp	r3, #0
 8015e42:	d00a      	beq.n	8015e5a <HAL_CAN_IRQHandler+0x21e>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	691b      	ldr	r3, [r3, #16]
 8015e4a:	f003 0303 	and.w	r3, r3, #3
 8015e4e:	2b00      	cmp	r3, #0
 8015e50:	d003      	beq.n	8015e5a <HAL_CAN_IRQHandler+0x21e>
    {
      /* Receive FIFO 1 message pending Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
 8015e52:	687b      	ldr	r3, [r7, #4]
 8015e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8015e5a:	6a3b      	ldr	r3, [r7, #32]
 8015e5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8015e60:	2b00      	cmp	r3, #0
 8015e62:	d00c      	beq.n	8015e7e <HAL_CAN_IRQHandler+0x242>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8015e64:	69fb      	ldr	r3, [r7, #28]
 8015e66:	f003 0310 	and.w	r3, r3, #16
 8015e6a:	2b00      	cmp	r3, #0
 8015e6c:	d007      	beq.n	8015e7e <HAL_CAN_IRQHandler+0x242>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8015e6e:	687b      	ldr	r3, [r7, #4]
 8015e70:	681b      	ldr	r3, [r3, #0]
 8015e72:	2210      	movs	r2, #16
 8015e74:	605a      	str	r2, [r3, #4]

      /* Sleep Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
 8015e76:	687b      	ldr	r3, [r7, #4]
 8015e78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8015e7e:	6a3b      	ldr	r3, [r7, #32]
 8015e80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8015e84:	2b00      	cmp	r3, #0
 8015e86:	d00c      	beq.n	8015ea2 <HAL_CAN_IRQHandler+0x266>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8015e88:	69fb      	ldr	r3, [r7, #28]
 8015e8a:	f003 0308 	and.w	r3, r3, #8
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d007      	beq.n	8015ea2 <HAL_CAN_IRQHandler+0x266>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	2208      	movs	r2, #8
 8015e98:	605a      	str	r2, [r3, #4]

      /* WakeUp Callback */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015e9e:	6878      	ldr	r0, [r7, #4]
 8015ea0:	4798      	blx	r3
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8015ea2:	6a3b      	ldr	r3, [r7, #32]
 8015ea4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d07b      	beq.n	8015fa4 <HAL_CAN_IRQHandler+0x368>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8015eac:	69fb      	ldr	r3, [r7, #28]
 8015eae:	f003 0304 	and.w	r3, r3, #4
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d072      	beq.n	8015f9c <HAL_CAN_IRQHandler+0x360>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015eb6:	6a3b      	ldr	r3, [r7, #32]
 8015eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8015ebc:	2b00      	cmp	r3, #0
 8015ebe:	d008      	beq.n	8015ed2 <HAL_CAN_IRQHandler+0x296>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8015ec6:	2b00      	cmp	r3, #0
 8015ec8:	d003      	beq.n	8015ed2 <HAL_CAN_IRQHandler+0x296>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8015eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ecc:	f043 0301 	orr.w	r3, r3, #1
 8015ed0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015ed2:	6a3b      	ldr	r3, [r7, #32]
 8015ed4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8015ed8:	2b00      	cmp	r3, #0
 8015eda:	d008      	beq.n	8015eee <HAL_CAN_IRQHandler+0x2b2>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d003      	beq.n	8015eee <HAL_CAN_IRQHandler+0x2b2>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8015ee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ee8:	f043 0302 	orr.w	r3, r3, #2
 8015eec:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015eee:	6a3b      	ldr	r3, [r7, #32]
 8015ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8015ef4:	2b00      	cmp	r3, #0
 8015ef6:	d008      	beq.n	8015f0a <HAL_CAN_IRQHandler+0x2ce>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8015ef8:	68fb      	ldr	r3, [r7, #12]
 8015efa:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d003      	beq.n	8015f0a <HAL_CAN_IRQHandler+0x2ce>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8015f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f04:	f043 0304 	orr.w	r3, r3, #4
 8015f08:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015f0a:	6a3b      	ldr	r3, [r7, #32]
 8015f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d043      	beq.n	8015f9c <HAL_CAN_IRQHandler+0x360>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8015f14:	68fb      	ldr	r3, [r7, #12]
 8015f16:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8015f1a:	2b00      	cmp	r3, #0
 8015f1c:	d03e      	beq.n	8015f9c <HAL_CAN_IRQHandler+0x360>
      {
        switch (esrflags & CAN_ESR_LEC)
 8015f1e:	68fb      	ldr	r3, [r7, #12]
 8015f20:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8015f24:	2b60      	cmp	r3, #96	; 0x60
 8015f26:	d02b      	beq.n	8015f80 <HAL_CAN_IRQHandler+0x344>
 8015f28:	2b60      	cmp	r3, #96	; 0x60
 8015f2a:	d82e      	bhi.n	8015f8a <HAL_CAN_IRQHandler+0x34e>
 8015f2c:	2b50      	cmp	r3, #80	; 0x50
 8015f2e:	d022      	beq.n	8015f76 <HAL_CAN_IRQHandler+0x33a>
 8015f30:	2b50      	cmp	r3, #80	; 0x50
 8015f32:	d82a      	bhi.n	8015f8a <HAL_CAN_IRQHandler+0x34e>
 8015f34:	2b40      	cmp	r3, #64	; 0x40
 8015f36:	d019      	beq.n	8015f6c <HAL_CAN_IRQHandler+0x330>
 8015f38:	2b40      	cmp	r3, #64	; 0x40
 8015f3a:	d826      	bhi.n	8015f8a <HAL_CAN_IRQHandler+0x34e>
 8015f3c:	2b30      	cmp	r3, #48	; 0x30
 8015f3e:	d010      	beq.n	8015f62 <HAL_CAN_IRQHandler+0x326>
 8015f40:	2b30      	cmp	r3, #48	; 0x30
 8015f42:	d822      	bhi.n	8015f8a <HAL_CAN_IRQHandler+0x34e>
 8015f44:	2b10      	cmp	r3, #16
 8015f46:	d002      	beq.n	8015f4e <HAL_CAN_IRQHandler+0x312>
 8015f48:	2b20      	cmp	r3, #32
 8015f4a:	d005      	beq.n	8015f58 <HAL_CAN_IRQHandler+0x31c>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8015f4c:	e01d      	b.n	8015f8a <HAL_CAN_IRQHandler+0x34e>
            errorcode |= HAL_CAN_ERROR_STF;
 8015f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f50:	f043 0308 	orr.w	r3, r3, #8
 8015f54:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f56:	e019      	b.n	8015f8c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_FOR;
 8015f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f5a:	f043 0310 	orr.w	r3, r3, #16
 8015f5e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f60:	e014      	b.n	8015f8c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_ACK;
 8015f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f64:	f043 0320 	orr.w	r3, r3, #32
 8015f68:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f6a:	e00f      	b.n	8015f8c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BR;
 8015f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015f72:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f74:	e00a      	b.n	8015f8c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_BD;
 8015f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015f7c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f7e:	e005      	b.n	8015f8c <HAL_CAN_IRQHandler+0x350>
            errorcode |= HAL_CAN_ERROR_CRC;
 8015f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f82:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8015f86:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8015f88:	e000      	b.n	8015f8c <HAL_CAN_IRQHandler+0x350>
            break;
 8015f8a:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	699a      	ldr	r2, [r3, #24]
 8015f92:	687b      	ldr	r3, [r7, #4]
 8015f94:	681b      	ldr	r3, [r3, #0]
 8015f96:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8015f9a:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	681b      	ldr	r3, [r3, #0]
 8015fa0:	2204      	movs	r2, #4
 8015fa2:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8015fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d009      	beq.n	8015fbe <HAL_CAN_IRQHandler+0x382>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fb0:	431a      	orrs	r2, r3
 8015fb2:	687b      	ldr	r3, [r7, #4]
 8015fb4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call Error callback function */
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
 8015fb6:	687b      	ldr	r3, [r7, #4]
 8015fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8015fba:	6878      	ldr	r0, [r7, #4]
 8015fbc:	4798      	blx	r3
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8015fbe:	bf00      	nop
 8015fc0:	3728      	adds	r7, #40	; 0x28
 8015fc2:	46bd      	mov	sp, r7
 8015fc4:	bd80      	pop	{r7, pc}

08015fc6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015fc6:	b480      	push	{r7}
 8015fc8:	b083      	sub	sp, #12
 8015fca:	af00      	add	r7, sp, #0
 8015fcc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8015fce:	bf00      	nop
 8015fd0:	370c      	adds	r7, #12
 8015fd2:	46bd      	mov	sp, r7
 8015fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fd8:	4770      	bx	lr

08015fda <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015fda:	b480      	push	{r7}
 8015fdc:	b083      	sub	sp, #12
 8015fde:	af00      	add	r7, sp, #0
 8015fe0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8015fe2:	bf00      	nop
 8015fe4:	370c      	adds	r7, #12
 8015fe6:	46bd      	mov	sp, r7
 8015fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fec:	4770      	bx	lr

08015fee <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8015fee:	b480      	push	{r7}
 8015ff0:	b083      	sub	sp, #12
 8015ff2:	af00      	add	r7, sp, #0
 8015ff4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8015ff6:	bf00      	nop
 8015ff8:	370c      	adds	r7, #12
 8015ffa:	46bd      	mov	sp, r7
 8015ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016000:	4770      	bx	lr

08016002 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016002:	b480      	push	{r7}
 8016004:	b083      	sub	sp, #12
 8016006:	af00      	add	r7, sp, #0
 8016008:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 801600a:	bf00      	nop
 801600c:	370c      	adds	r7, #12
 801600e:	46bd      	mov	sp, r7
 8016010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016014:	4770      	bx	lr

08016016 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8016016:	b480      	push	{r7}
 8016018:	b083      	sub	sp, #12
 801601a:	af00      	add	r7, sp, #0
 801601c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 801601e:	bf00      	nop
 8016020:	370c      	adds	r7, #12
 8016022:	46bd      	mov	sp, r7
 8016024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016028:	4770      	bx	lr

0801602a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 801602a:	b480      	push	{r7}
 801602c:	b083      	sub	sp, #12
 801602e:	af00      	add	r7, sp, #0
 8016030:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8016032:	bf00      	nop
 8016034:	370c      	adds	r7, #12
 8016036:	46bd      	mov	sp, r7
 8016038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801603c:	4770      	bx	lr

0801603e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 801603e:	b480      	push	{r7}
 8016040:	b083      	sub	sp, #12
 8016042:	af00      	add	r7, sp, #0
 8016044:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8016046:	bf00      	nop
 8016048:	370c      	adds	r7, #12
 801604a:	46bd      	mov	sp, r7
 801604c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016050:	4770      	bx	lr

08016052 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8016052:	b480      	push	{r7}
 8016054:	b083      	sub	sp, #12
 8016056:	af00      	add	r7, sp, #0
 8016058:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 801605a:	bf00      	nop
 801605c:	370c      	adds	r7, #12
 801605e:	46bd      	mov	sp, r7
 8016060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016064:	4770      	bx	lr

08016066 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8016066:	b480      	push	{r7}
 8016068:	b083      	sub	sp, #12
 801606a:	af00      	add	r7, sp, #0
 801606c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 801606e:	bf00      	nop
 8016070:	370c      	adds	r7, #12
 8016072:	46bd      	mov	sp, r7
 8016074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016078:	4770      	bx	lr

0801607a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 801607a:	b480      	push	{r7}
 801607c:	b083      	sub	sp, #12
 801607e:	af00      	add	r7, sp, #0
 8016080:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8016082:	bf00      	nop
 8016084:	370c      	adds	r7, #12
 8016086:	46bd      	mov	sp, r7
 8016088:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608c:	4770      	bx	lr

0801608e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 801608e:	b480      	push	{r7}
 8016090:	b083      	sub	sp, #12
 8016092:	af00      	add	r7, sp, #0
 8016094:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8016096:	bf00      	nop
 8016098:	370c      	adds	r7, #12
 801609a:	46bd      	mov	sp, r7
 801609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160a0:	4770      	bx	lr
	...

080160a4 <__NVIC_SetPriorityGrouping>:
{
 80160a4:	b480      	push	{r7}
 80160a6:	b085      	sub	sp, #20
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80160ac:	687b      	ldr	r3, [r7, #4]
 80160ae:	f003 0307 	and.w	r3, r3, #7
 80160b2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80160b4:	4b0b      	ldr	r3, [pc, #44]	; (80160e4 <__NVIC_SetPriorityGrouping+0x40>)
 80160b6:	68db      	ldr	r3, [r3, #12]
 80160b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80160ba:	68ba      	ldr	r2, [r7, #8]
 80160bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80160c0:	4013      	ands	r3, r2
 80160c2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80160c4:	68fb      	ldr	r3, [r7, #12]
 80160c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80160c8:	68bb      	ldr	r3, [r7, #8]
 80160ca:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80160cc:	4b06      	ldr	r3, [pc, #24]	; (80160e8 <__NVIC_SetPriorityGrouping+0x44>)
 80160ce:	4313      	orrs	r3, r2
 80160d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80160d2:	4a04      	ldr	r2, [pc, #16]	; (80160e4 <__NVIC_SetPriorityGrouping+0x40>)
 80160d4:	68bb      	ldr	r3, [r7, #8]
 80160d6:	60d3      	str	r3, [r2, #12]
}
 80160d8:	bf00      	nop
 80160da:	3714      	adds	r7, #20
 80160dc:	46bd      	mov	sp, r7
 80160de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80160e2:	4770      	bx	lr
 80160e4:	e000ed00 	.word	0xe000ed00
 80160e8:	05fa0000 	.word	0x05fa0000

080160ec <__NVIC_GetPriorityGrouping>:
{
 80160ec:	b480      	push	{r7}
 80160ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80160f0:	4b04      	ldr	r3, [pc, #16]	; (8016104 <__NVIC_GetPriorityGrouping+0x18>)
 80160f2:	68db      	ldr	r3, [r3, #12]
 80160f4:	0a1b      	lsrs	r3, r3, #8
 80160f6:	f003 0307 	and.w	r3, r3, #7
}
 80160fa:	4618      	mov	r0, r3
 80160fc:	46bd      	mov	sp, r7
 80160fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016102:	4770      	bx	lr
 8016104:	e000ed00 	.word	0xe000ed00

08016108 <__NVIC_EnableIRQ>:
{
 8016108:	b480      	push	{r7}
 801610a:	b083      	sub	sp, #12
 801610c:	af00      	add	r7, sp, #0
 801610e:	4603      	mov	r3, r0
 8016110:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016112:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016116:	2b00      	cmp	r3, #0
 8016118:	db0b      	blt.n	8016132 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801611a:	79fb      	ldrb	r3, [r7, #7]
 801611c:	f003 021f 	and.w	r2, r3, #31
 8016120:	4907      	ldr	r1, [pc, #28]	; (8016140 <__NVIC_EnableIRQ+0x38>)
 8016122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016126:	095b      	lsrs	r3, r3, #5
 8016128:	2001      	movs	r0, #1
 801612a:	fa00 f202 	lsl.w	r2, r0, r2
 801612e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8016132:	bf00      	nop
 8016134:	370c      	adds	r7, #12
 8016136:	46bd      	mov	sp, r7
 8016138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801613c:	4770      	bx	lr
 801613e:	bf00      	nop
 8016140:	e000e100 	.word	0xe000e100

08016144 <__NVIC_SetPriority>:
{
 8016144:	b480      	push	{r7}
 8016146:	b083      	sub	sp, #12
 8016148:	af00      	add	r7, sp, #0
 801614a:	4603      	mov	r3, r0
 801614c:	6039      	str	r1, [r7, #0]
 801614e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8016150:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016154:	2b00      	cmp	r3, #0
 8016156:	db0a      	blt.n	801616e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8016158:	683b      	ldr	r3, [r7, #0]
 801615a:	b2da      	uxtb	r2, r3
 801615c:	490c      	ldr	r1, [pc, #48]	; (8016190 <__NVIC_SetPriority+0x4c>)
 801615e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8016162:	0112      	lsls	r2, r2, #4
 8016164:	b2d2      	uxtb	r2, r2
 8016166:	440b      	add	r3, r1
 8016168:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 801616c:	e00a      	b.n	8016184 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801616e:	683b      	ldr	r3, [r7, #0]
 8016170:	b2da      	uxtb	r2, r3
 8016172:	4908      	ldr	r1, [pc, #32]	; (8016194 <__NVIC_SetPriority+0x50>)
 8016174:	79fb      	ldrb	r3, [r7, #7]
 8016176:	f003 030f 	and.w	r3, r3, #15
 801617a:	3b04      	subs	r3, #4
 801617c:	0112      	lsls	r2, r2, #4
 801617e:	b2d2      	uxtb	r2, r2
 8016180:	440b      	add	r3, r1
 8016182:	761a      	strb	r2, [r3, #24]
}
 8016184:	bf00      	nop
 8016186:	370c      	adds	r7, #12
 8016188:	46bd      	mov	sp, r7
 801618a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801618e:	4770      	bx	lr
 8016190:	e000e100 	.word	0xe000e100
 8016194:	e000ed00 	.word	0xe000ed00

08016198 <NVIC_EncodePriority>:
{
 8016198:	b480      	push	{r7}
 801619a:	b089      	sub	sp, #36	; 0x24
 801619c:	af00      	add	r7, sp, #0
 801619e:	60f8      	str	r0, [r7, #12]
 80161a0:	60b9      	str	r1, [r7, #8]
 80161a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80161a4:	68fb      	ldr	r3, [r7, #12]
 80161a6:	f003 0307 	and.w	r3, r3, #7
 80161aa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80161ac:	69fb      	ldr	r3, [r7, #28]
 80161ae:	f1c3 0307 	rsb	r3, r3, #7
 80161b2:	2b04      	cmp	r3, #4
 80161b4:	bf28      	it	cs
 80161b6:	2304      	movcs	r3, #4
 80161b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80161ba:	69fb      	ldr	r3, [r7, #28]
 80161bc:	3304      	adds	r3, #4
 80161be:	2b06      	cmp	r3, #6
 80161c0:	d902      	bls.n	80161c8 <NVIC_EncodePriority+0x30>
 80161c2:	69fb      	ldr	r3, [r7, #28]
 80161c4:	3b03      	subs	r3, #3
 80161c6:	e000      	b.n	80161ca <NVIC_EncodePriority+0x32>
 80161c8:	2300      	movs	r3, #0
 80161ca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161cc:	f04f 32ff 	mov.w	r2, #4294967295
 80161d0:	69bb      	ldr	r3, [r7, #24]
 80161d2:	fa02 f303 	lsl.w	r3, r2, r3
 80161d6:	43da      	mvns	r2, r3
 80161d8:	68bb      	ldr	r3, [r7, #8]
 80161da:	401a      	ands	r2, r3
 80161dc:	697b      	ldr	r3, [r7, #20]
 80161de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80161e0:	f04f 31ff 	mov.w	r1, #4294967295
 80161e4:	697b      	ldr	r3, [r7, #20]
 80161e6:	fa01 f303 	lsl.w	r3, r1, r3
 80161ea:	43d9      	mvns	r1, r3
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80161f0:	4313      	orrs	r3, r2
}
 80161f2:	4618      	mov	r0, r3
 80161f4:	3724      	adds	r7, #36	; 0x24
 80161f6:	46bd      	mov	sp, r7
 80161f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161fc:	4770      	bx	lr
	...

08016200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8016200:	b580      	push	{r7, lr}
 8016202:	b082      	sub	sp, #8
 8016204:	af00      	add	r7, sp, #0
 8016206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8016208:	687b      	ldr	r3, [r7, #4]
 801620a:	3b01      	subs	r3, #1
 801620c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8016210:	d301      	bcc.n	8016216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8016212:	2301      	movs	r3, #1
 8016214:	e00f      	b.n	8016236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8016216:	4a0a      	ldr	r2, [pc, #40]	; (8016240 <SysTick_Config+0x40>)
 8016218:	687b      	ldr	r3, [r7, #4]
 801621a:	3b01      	subs	r3, #1
 801621c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 801621e:	210f      	movs	r1, #15
 8016220:	f04f 30ff 	mov.w	r0, #4294967295
 8016224:	f7ff ff8e 	bl	8016144 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8016228:	4b05      	ldr	r3, [pc, #20]	; (8016240 <SysTick_Config+0x40>)
 801622a:	2200      	movs	r2, #0
 801622c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 801622e:	4b04      	ldr	r3, [pc, #16]	; (8016240 <SysTick_Config+0x40>)
 8016230:	2207      	movs	r2, #7
 8016232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8016234:	2300      	movs	r3, #0
}
 8016236:	4618      	mov	r0, r3
 8016238:	3708      	adds	r7, #8
 801623a:	46bd      	mov	sp, r7
 801623c:	bd80      	pop	{r7, pc}
 801623e:	bf00      	nop
 8016240:	e000e010 	.word	0xe000e010

08016244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8016244:	b580      	push	{r7, lr}
 8016246:	b082      	sub	sp, #8
 8016248:	af00      	add	r7, sp, #0
 801624a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 801624c:	6878      	ldr	r0, [r7, #4]
 801624e:	f7ff ff29 	bl	80160a4 <__NVIC_SetPriorityGrouping>
}
 8016252:	bf00      	nop
 8016254:	3708      	adds	r7, #8
 8016256:	46bd      	mov	sp, r7
 8016258:	bd80      	pop	{r7, pc}

0801625a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 801625a:	b580      	push	{r7, lr}
 801625c:	b086      	sub	sp, #24
 801625e:	af00      	add	r7, sp, #0
 8016260:	4603      	mov	r3, r0
 8016262:	60b9      	str	r1, [r7, #8]
 8016264:	607a      	str	r2, [r7, #4]
 8016266:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8016268:	2300      	movs	r3, #0
 801626a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 801626c:	f7ff ff3e 	bl	80160ec <__NVIC_GetPriorityGrouping>
 8016270:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8016272:	687a      	ldr	r2, [r7, #4]
 8016274:	68b9      	ldr	r1, [r7, #8]
 8016276:	6978      	ldr	r0, [r7, #20]
 8016278:	f7ff ff8e 	bl	8016198 <NVIC_EncodePriority>
 801627c:	4602      	mov	r2, r0
 801627e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016282:	4611      	mov	r1, r2
 8016284:	4618      	mov	r0, r3
 8016286:	f7ff ff5d 	bl	8016144 <__NVIC_SetPriority>
}
 801628a:	bf00      	nop
 801628c:	3718      	adds	r7, #24
 801628e:	46bd      	mov	sp, r7
 8016290:	bd80      	pop	{r7, pc}

08016292 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8016292:	b580      	push	{r7, lr}
 8016294:	b082      	sub	sp, #8
 8016296:	af00      	add	r7, sp, #0
 8016298:	4603      	mov	r3, r0
 801629a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801629c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7ff ff31 	bl	8016108 <__NVIC_EnableIRQ>
}
 80162a6:	bf00      	nop
 80162a8:	3708      	adds	r7, #8
 80162aa:	46bd      	mov	sp, r7
 80162ac:	bd80      	pop	{r7, pc}

080162ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80162ae:	b580      	push	{r7, lr}
 80162b0:	b082      	sub	sp, #8
 80162b2:	af00      	add	r7, sp, #0
 80162b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80162b6:	6878      	ldr	r0, [r7, #4]
 80162b8:	f7ff ffa2 	bl	8016200 <SysTick_Config>
 80162bc:	4603      	mov	r3, r0
}
 80162be:	4618      	mov	r0, r3
 80162c0:	3708      	adds	r7, #8
 80162c2:	46bd      	mov	sp, r7
 80162c4:	bd80      	pop	{r7, pc}
	...

080162c8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80162c8:	b480      	push	{r7}
 80162ca:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80162cc:	f3bf 8f5f 	dmb	sy
}
 80162d0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80162d2:	4b07      	ldr	r3, [pc, #28]	; (80162f0 <HAL_MPU_Disable+0x28>)
 80162d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80162d6:	4a06      	ldr	r2, [pc, #24]	; (80162f0 <HAL_MPU_Disable+0x28>)
 80162d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80162dc:	6253      	str	r3, [r2, #36]	; 0x24
  
  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80162de:	4b05      	ldr	r3, [pc, #20]	; (80162f4 <HAL_MPU_Disable+0x2c>)
 80162e0:	2200      	movs	r2, #0
 80162e2:	605a      	str	r2, [r3, #4]
}
 80162e4:	bf00      	nop
 80162e6:	46bd      	mov	sp, r7
 80162e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162ec:	4770      	bx	lr
 80162ee:	bf00      	nop
 80162f0:	e000ed00 	.word	0xe000ed00
 80162f4:	e000ed90 	.word	0xe000ed90

080162f8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80162f8:	b480      	push	{r7}
 80162fa:	b083      	sub	sp, #12
 80162fc:	af00      	add	r7, sp, #0
 80162fe:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8016300:	4a0b      	ldr	r2, [pc, #44]	; (8016330 <HAL_MPU_Enable+0x38>)
 8016302:	687b      	ldr	r3, [r7, #4]
 8016304:	f043 0301 	orr.w	r3, r3, #1
 8016308:	6053      	str	r3, [r2, #4]
  
  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 801630a:	4b0a      	ldr	r3, [pc, #40]	; (8016334 <HAL_MPU_Enable+0x3c>)
 801630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801630e:	4a09      	ldr	r2, [pc, #36]	; (8016334 <HAL_MPU_Enable+0x3c>)
 8016310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8016314:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8016316:	f3bf 8f4f 	dsb	sy
}
 801631a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801631c:	f3bf 8f6f 	isb	sy
}
 8016320:	bf00      	nop
  
  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8016322:	bf00      	nop
 8016324:	370c      	adds	r7, #12
 8016326:	46bd      	mov	sp, r7
 8016328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801632c:	4770      	bx	lr
 801632e:	bf00      	nop
 8016330:	e000ed90 	.word	0xe000ed90
 8016334:	e000ed00 	.word	0xe000ed00

08016338 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8016338:	b480      	push	{r7}
 801633a:	b083      	sub	sp, #12
 801633c:	af00      	add	r7, sp, #0
 801633e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	785a      	ldrb	r2, [r3, #1]
 8016344:	4b1d      	ldr	r3, [pc, #116]	; (80163bc <HAL_MPU_ConfigRegion+0x84>)
 8016346:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != RESET)
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	781b      	ldrb	r3, [r3, #0]
 801634c:	2b00      	cmp	r3, #0
 801634e:	d029      	beq.n	80163a4 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));
    
    MPU->RBAR = MPU_Init->BaseAddress;
 8016350:	4a1a      	ldr	r2, [pc, #104]	; (80163bc <HAL_MPU_ConfigRegion+0x84>)
 8016352:	687b      	ldr	r3, [r7, #4]
 8016354:	685b      	ldr	r3, [r3, #4]
 8016356:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016358:	687b      	ldr	r3, [r7, #4]
 801635a:	7b1b      	ldrb	r3, [r3, #12]
 801635c:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	7adb      	ldrb	r3, [r3, #11]
 8016362:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8016364:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016366:	687b      	ldr	r3, [r7, #4]
 8016368:	7a9b      	ldrb	r3, [r3, #10]
 801636a:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 801636c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801636e:	687b      	ldr	r3, [r7, #4]
 8016370:	7b5b      	ldrb	r3, [r3, #13]
 8016372:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8016374:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	7b9b      	ldrb	r3, [r3, #14]
 801637a:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801637c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801637e:	687b      	ldr	r3, [r7, #4]
 8016380:	7bdb      	ldrb	r3, [r3, #15]
 8016382:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8016384:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016386:	687b      	ldr	r3, [r7, #4]
 8016388:	7a5b      	ldrb	r3, [r3, #9]
 801638a:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801638c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	7a1b      	ldrb	r3, [r3, #8]
 8016392:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8016394:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8016396:	687a      	ldr	r2, [r7, #4]
 8016398:	7812      	ldrb	r2, [r2, #0]
 801639a:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801639c:	4a07      	ldr	r2, [pc, #28]	; (80163bc <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801639e:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80163a0:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 80163a2:	e005      	b.n	80163b0 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 80163a4:	4b05      	ldr	r3, [pc, #20]	; (80163bc <HAL_MPU_ConfigRegion+0x84>)
 80163a6:	2200      	movs	r2, #0
 80163a8:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 80163aa:	4b04      	ldr	r3, [pc, #16]	; (80163bc <HAL_MPU_ConfigRegion+0x84>)
 80163ac:	2200      	movs	r2, #0
 80163ae:	611a      	str	r2, [r3, #16]
}
 80163b0:	bf00      	nop
 80163b2:	370c      	adds	r7, #12
 80163b4:	46bd      	mov	sp, r7
 80163b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163ba:	4770      	bx	lr
 80163bc:	e000ed90 	.word	0xe000ed90

080163c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	b084      	sub	sp, #16
 80163c4:	af00      	add	r7, sp, #0
 80163c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80163c8:	687b      	ldr	r3, [r7, #4]
 80163ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80163cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80163ce:	f7fe ff63 	bl	8015298 <HAL_GetTick>
 80163d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80163d4:	687b      	ldr	r3, [r7, #4]
 80163d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80163da:	b2db      	uxtb	r3, r3
 80163dc:	2b02      	cmp	r3, #2
 80163de:	d008      	beq.n	80163f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2280      	movs	r2, #128	; 0x80
 80163e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80163e6:	687b      	ldr	r3, [r7, #4]
 80163e8:	2200      	movs	r2, #0
 80163ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80163ee:	2301      	movs	r3, #1
 80163f0:	e052      	b.n	8016498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	681b      	ldr	r3, [r3, #0]
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	687b      	ldr	r3, [r7, #4]
 80163fa:	681b      	ldr	r3, [r3, #0]
 80163fc:	f022 0216 	bic.w	r2, r2, #22
 8016400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8016402:	687b      	ldr	r3, [r7, #4]
 8016404:	681b      	ldr	r3, [r3, #0]
 8016406:	695a      	ldr	r2, [r3, #20]
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8016410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016412:	687b      	ldr	r3, [r7, #4]
 8016414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8016416:	2b00      	cmp	r3, #0
 8016418:	d103      	bne.n	8016422 <HAL_DMA_Abort+0x62>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801641e:	2b00      	cmp	r3, #0
 8016420:	d007      	beq.n	8016432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8016422:	687b      	ldr	r3, [r7, #4]
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	681a      	ldr	r2, [r3, #0]
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	681b      	ldr	r3, [r3, #0]
 801642c:	f022 0208 	bic.w	r2, r2, #8
 8016430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	681b      	ldr	r3, [r3, #0]
 8016436:	681a      	ldr	r2, [r3, #0]
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	681b      	ldr	r3, [r3, #0]
 801643c:	f022 0201 	bic.w	r2, r2, #1
 8016440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8016442:	e013      	b.n	801646c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8016444:	f7fe ff28 	bl	8015298 <HAL_GetTick>
 8016448:	4602      	mov	r2, r0
 801644a:	68bb      	ldr	r3, [r7, #8]
 801644c:	1ad3      	subs	r3, r2, r3
 801644e:	2b05      	cmp	r3, #5
 8016450:	d90c      	bls.n	801646c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8016452:	687b      	ldr	r3, [r7, #4]
 8016454:	2220      	movs	r2, #32
 8016456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8016458:	687b      	ldr	r3, [r7, #4]
 801645a:	2203      	movs	r2, #3
 801645c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	2200      	movs	r2, #0
 8016464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8016468:	2303      	movs	r3, #3
 801646a:	e015      	b.n	8016498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	681b      	ldr	r3, [r3, #0]
 8016470:	681b      	ldr	r3, [r3, #0]
 8016472:	f003 0301 	and.w	r3, r3, #1
 8016476:	2b00      	cmp	r3, #0
 8016478:	d1e4      	bne.n	8016444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 801647a:	687b      	ldr	r3, [r7, #4]
 801647c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801647e:	223f      	movs	r2, #63	; 0x3f
 8016480:	409a      	lsls	r2, r3
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	2201      	movs	r2, #1
 801648a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	2200      	movs	r2, #0
 8016492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8016496:	2300      	movs	r3, #0
}
 8016498:	4618      	mov	r0, r3
 801649a:	3710      	adds	r7, #16
 801649c:	46bd      	mov	sp, r7
 801649e:	bd80      	pop	{r7, pc}

080164a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80164a0:	b480      	push	{r7}
 80164a2:	b083      	sub	sp, #12
 80164a4:	af00      	add	r7, sp, #0
 80164a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80164ae:	b2db      	uxtb	r3, r3
 80164b0:	2b02      	cmp	r3, #2
 80164b2:	d004      	beq.n	80164be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80164b4:	687b      	ldr	r3, [r7, #4]
 80164b6:	2280      	movs	r2, #128	; 0x80
 80164b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80164ba:	2301      	movs	r3, #1
 80164bc:	e00c      	b.n	80164d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80164be:	687b      	ldr	r3, [r7, #4]
 80164c0:	2205      	movs	r2, #5
 80164c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80164c6:	687b      	ldr	r3, [r7, #4]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	681a      	ldr	r2, [r3, #0]
 80164cc:	687b      	ldr	r3, [r7, #4]
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	f022 0201 	bic.w	r2, r2, #1
 80164d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80164d6:	2300      	movs	r3, #0
}
 80164d8:	4618      	mov	r0, r3
 80164da:	370c      	adds	r7, #12
 80164dc:	46bd      	mov	sp, r7
 80164de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164e2:	4770      	bx	lr

080164e4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80164e4:	b580      	push	{r7, lr}
 80164e6:	b084      	sub	sp, #16
 80164e8:	af00      	add	r7, sp, #0
 80164ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	2b00      	cmp	r3, #0
 80164f0:	d101      	bne.n	80164f6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80164f2:	2301      	movs	r3, #1
 80164f4:	e06a      	b.n	80165cc <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80164f6:	687b      	ldr	r3, [r7, #4]
 80164f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80164fc:	2b00      	cmp	r3, #0
 80164fe:	d106      	bne.n	801650e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8016500:	687b      	ldr	r3, [r7, #4]
 8016502:	2223      	movs	r2, #35	; 0x23
 8016504:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8016508:	6878      	ldr	r0, [r7, #4]
 801650a:	f006 fbaf 	bl	801cc6c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 801650e:	4b31      	ldr	r3, [pc, #196]	; (80165d4 <HAL_ETH_Init+0xf0>)
 8016510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016512:	4a30      	ldr	r2, [pc, #192]	; (80165d4 <HAL_ETH_Init+0xf0>)
 8016514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8016518:	6453      	str	r3, [r2, #68]	; 0x44
 801651a:	4b2e      	ldr	r3, [pc, #184]	; (80165d4 <HAL_ETH_Init+0xf0>)
 801651c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801651e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8016522:	60bb      	str	r3, [r7, #8]
 8016524:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8016526:	4b2c      	ldr	r3, [pc, #176]	; (80165d8 <HAL_ETH_Init+0xf4>)
 8016528:	685b      	ldr	r3, [r3, #4]
 801652a:	4a2b      	ldr	r2, [pc, #172]	; (80165d8 <HAL_ETH_Init+0xf4>)
 801652c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8016530:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8016532:	4b29      	ldr	r3, [pc, #164]	; (80165d8 <HAL_ETH_Init+0xf4>)
 8016534:	685a      	ldr	r2, [r3, #4]
 8016536:	687b      	ldr	r3, [r7, #4]
 8016538:	689b      	ldr	r3, [r3, #8]
 801653a:	4927      	ldr	r1, [pc, #156]	; (80165d8 <HAL_ETH_Init+0xf4>)
 801653c:	4313      	orrs	r3, r2
 801653e:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8016540:	4b25      	ldr	r3, [pc, #148]	; (80165d8 <HAL_ETH_Init+0xf4>)
 8016542:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8016544:	687b      	ldr	r3, [r7, #4]
 8016546:	681b      	ldr	r3, [r3, #0]
 8016548:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	687a      	ldr	r2, [r7, #4]
 8016550:	6812      	ldr	r2, [r2, #0]
 8016552:	f043 0301 	orr.w	r3, r3, #1
 8016556:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801655a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801655c:	f7fe fe9c 	bl	8015298 <HAL_GetTick>
 8016560:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016562:	e011      	b.n	8016588 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8016564:	f7fe fe98 	bl	8015298 <HAL_GetTick>
 8016568:	4602      	mov	r2, r0
 801656a:	68fb      	ldr	r3, [r7, #12]
 801656c:	1ad3      	subs	r3, r2, r3
 801656e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8016572:	d909      	bls.n	8016588 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8016574:	687b      	ldr	r3, [r7, #4]
 8016576:	2204      	movs	r2, #4
 8016578:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 801657c:	687b      	ldr	r3, [r7, #4]
 801657e:	22e0      	movs	r2, #224	; 0xe0
 8016580:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8016584:	2301      	movs	r3, #1
 8016586:	e021      	b.n	80165cc <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8016588:	687b      	ldr	r3, [r7, #4]
 801658a:	681b      	ldr	r3, [r3, #0]
 801658c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016590:	681b      	ldr	r3, [r3, #0]
 8016592:	f003 0301 	and.w	r3, r3, #1
 8016596:	2b00      	cmp	r3, #0
 8016598:	d1e4      	bne.n	8016564 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f000 fee4 	bl	8017368 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f000 ff8b 	bl	80174bc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 80165a6:	6878      	ldr	r0, [r7, #4]
 80165a8:	f000 ffe1 	bl	801756e <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 80165ac:	687b      	ldr	r3, [r7, #4]
 80165ae:	685b      	ldr	r3, [r3, #4]
 80165b0:	461a      	mov	r2, r3
 80165b2:	2100      	movs	r1, #0
 80165b4:	6878      	ldr	r0, [r7, #4]
 80165b6:	f000 ff49 	bl	801744c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80165ba:	687b      	ldr	r3, [r7, #4]
 80165bc:	2200      	movs	r2, #0
 80165be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	2210      	movs	r2, #16
 80165c6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80165ca:	2300      	movs	r3, #0
}
 80165cc:	4618      	mov	r0, r3
 80165ce:	3710      	adds	r7, #16
 80165d0:	46bd      	mov	sp, r7
 80165d2:	bd80      	pop	{r7, pc}
 80165d4:	40023800 	.word	0x40023800
 80165d8:	40013800 	.word	0x40013800

080165dc <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80165dc:	b580      	push	{r7, lr}
 80165de:	b084      	sub	sp, #16
 80165e0:	af00      	add	r7, sp, #0
 80165e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80165ea:	2b10      	cmp	r3, #16
 80165ec:	d150      	bne.n	8016690 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80165ee:	687b      	ldr	r3, [r7, #4]
 80165f0:	2223      	movs	r2, #35	; 0x23
 80165f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80165f6:	687b      	ldr	r3, [r7, #4]
 80165f8:	2204      	movs	r2, #4
 80165fa:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f000 f9fd 	bl	80169fc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	681b      	ldr	r3, [r3, #0]
 8016606:	681a      	ldr	r2, [r3, #0]
 8016608:	687b      	ldr	r3, [r7, #4]
 801660a:	681b      	ldr	r3, [r3, #0]
 801660c:	f042 0208 	orr.w	r2, r2, #8
 8016610:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016612:	687b      	ldr	r3, [r7, #4]
 8016614:	681b      	ldr	r3, [r3, #0]
 8016616:	681b      	ldr	r3, [r3, #0]
 8016618:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 801661a:	2001      	movs	r0, #1
 801661c:	f7fe fe48 	bl	80152b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016620:	687b      	ldr	r3, [r7, #4]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	68fa      	ldr	r2, [r7, #12]
 8016626:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	681a      	ldr	r2, [r3, #0]
 801662e:	687b      	ldr	r3, [r7, #4]
 8016630:	681b      	ldr	r3, [r3, #0]
 8016632:	f042 0204 	orr.w	r2, r2, #4
 8016636:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016638:	687b      	ldr	r3, [r7, #4]
 801663a:	681b      	ldr	r3, [r3, #0]
 801663c:	681b      	ldr	r3, [r3, #0]
 801663e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016640:	2001      	movs	r0, #1
 8016642:	f7fe fe35 	bl	80152b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	68fa      	ldr	r2, [r7, #12]
 801664c:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f000 fd2a 	bl	80170a8 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801665c:	699b      	ldr	r3, [r3, #24]
 801665e:	687a      	ldr	r2, [r7, #4]
 8016660:	6812      	ldr	r2, [r2, #0]
 8016662:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8016666:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801666a:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016674:	699b      	ldr	r3, [r3, #24]
 8016676:	687a      	ldr	r2, [r7, #4]
 8016678:	6812      	ldr	r2, [r2, #0]
 801667a:	f043 0302 	orr.w	r3, r3, #2
 801667e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016682:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 8016684:	687b      	ldr	r3, [r7, #4]
 8016686:	2223      	movs	r2, #35	; 0x23
 8016688:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 801668c:	2300      	movs	r3, #0
 801668e:	e000      	b.n	8016692 <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 8016690:	2301      	movs	r3, #1
  }
}
 8016692:	4618      	mov	r0, r3
 8016694:	3710      	adds	r7, #16
 8016696:	46bd      	mov	sp, r7
 8016698:	bd80      	pop	{r7, pc}

0801669a <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 801669a:	b580      	push	{r7, lr}
 801669c:	b084      	sub	sp, #16
 801669e:	af00      	add	r7, sp, #0
 80166a0:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80166a2:	687b      	ldr	r3, [r7, #4]
 80166a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80166a8:	2b23      	cmp	r3, #35	; 0x23
 80166aa:	d14a      	bne.n	8016742 <HAL_ETH_Stop+0xa8>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	2223      	movs	r2, #35	; 0x23
 80166b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166bc:	699b      	ldr	r3, [r3, #24]
 80166be:	687a      	ldr	r2, [r7, #4]
 80166c0:	6812      	ldr	r2, [r2, #0]
 80166c2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80166c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80166ca:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80166d4:	699b      	ldr	r3, [r3, #24]
 80166d6:	687a      	ldr	r2, [r7, #4]
 80166d8:	6812      	ldr	r2, [r2, #0]
 80166da:	f023 0302 	bic.w	r3, r3, #2
 80166de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80166e2:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	681b      	ldr	r3, [r3, #0]
 80166e8:	681a      	ldr	r2, [r3, #0]
 80166ea:	687b      	ldr	r3, [r7, #4]
 80166ec:	681b      	ldr	r3, [r3, #0]
 80166ee:	f022 0204 	bic.w	r2, r2, #4
 80166f2:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80166f4:	687b      	ldr	r3, [r7, #4]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80166fc:	2001      	movs	r0, #1
 80166fe:	f7fe fdd7 	bl	80152b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8016702:	687b      	ldr	r3, [r7, #4]
 8016704:	681b      	ldr	r3, [r3, #0]
 8016706:	68fa      	ldr	r2, [r7, #12]
 8016708:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 801670a:	6878      	ldr	r0, [r7, #4]
 801670c:	f000 fccc 	bl	80170a8 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8016710:	687b      	ldr	r3, [r7, #4]
 8016712:	681b      	ldr	r3, [r3, #0]
 8016714:	681a      	ldr	r2, [r3, #0]
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	f022 0208 	bic.w	r2, r2, #8
 801671e:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	681b      	ldr	r3, [r3, #0]
 8016724:	681b      	ldr	r3, [r3, #0]
 8016726:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8016728:	2001      	movs	r0, #1
 801672a:	f7fe fdc1 	bl	80152b0 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	68fa      	ldr	r2, [r7, #12]
 8016734:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	2210      	movs	r2, #16
 801673a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 801673e:	2300      	movs	r3, #0
 8016740:	e000      	b.n	8016744 <HAL_ETH_Stop+0xaa>
  }
  else
  {
    return HAL_ERROR;
 8016742:	2301      	movs	r3, #1
  }
}
 8016744:	4618      	mov	r0, r3
 8016746:	3710      	adds	r7, #16
 8016748:	46bd      	mov	sp, r7
 801674a:	bd80      	pop	{r7, pc}

0801674c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 801674c:	b580      	push	{r7, lr}
 801674e:	b086      	sub	sp, #24
 8016750:	af00      	add	r7, sp, #0
 8016752:	60f8      	str	r0, [r7, #12]
 8016754:	60b9      	str	r1, [r7, #8]
 8016756:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8016758:	68bb      	ldr	r3, [r7, #8]
 801675a:	2b00      	cmp	r3, #0
 801675c:	d109      	bne.n	8016772 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801675e:	68fb      	ldr	r3, [r7, #12]
 8016760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016764:	f043 0201 	orr.w	r2, r3, #1
 8016768:	68fb      	ldr	r3, [r7, #12]
 801676a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801676e:	2301      	movs	r3, #1
 8016770:	e07c      	b.n	801686c <HAL_ETH_Transmit+0x120>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8016772:	68fb      	ldr	r3, [r7, #12]
 8016774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016778:	2b23      	cmp	r3, #35	; 0x23
 801677a:	d176      	bne.n	801686a <HAL_ETH_Transmit+0x11e>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 801677c:	2200      	movs	r2, #0
 801677e:	68b9      	ldr	r1, [r7, #8]
 8016780:	68f8      	ldr	r0, [r7, #12]
 8016782:	f000 ff61 	bl	8017648 <ETH_Prepare_Tx_Descriptors>
 8016786:	4603      	mov	r3, r0
 8016788:	2b00      	cmp	r3, #0
 801678a:	d009      	beq.n	80167a0 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 801678c:	68fb      	ldr	r3, [r7, #12]
 801678e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016792:	f043 0202 	orr.w	r2, r3, #2
 8016796:	68fb      	ldr	r3, [r7, #12]
 8016798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 801679c:	2301      	movs	r3, #1
 801679e:	e065      	b.n	801686c <HAL_ETH_Transmit+0x120>
  __ASM volatile ("dsb 0xF":::"memory");
 80167a0:	f3bf 8f4f 	dsb	sy
}
 80167a4:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80167aa:	68fb      	ldr	r3, [r7, #12]
 80167ac:	3206      	adds	r2, #6
 80167ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80167b2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80167b4:	68fb      	ldr	r3, [r7, #12]
 80167b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167b8:	1c5a      	adds	r2, r3, #1
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	629a      	str	r2, [r3, #40]	; 0x28
 80167be:	68fb      	ldr	r3, [r7, #12]
 80167c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167c2:	2b03      	cmp	r3, #3
 80167c4:	d904      	bls.n	80167d0 <HAL_ETH_Transmit+0x84>
 80167c6:	68fb      	ldr	r3, [r7, #12]
 80167c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80167ca:	1f1a      	subs	r2, r3, #4
 80167cc:	68fb      	ldr	r3, [r7, #12]
 80167ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMATPDR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80167d0:	68fb      	ldr	r3, [r7, #12]
 80167d2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80167d4:	68fb      	ldr	r3, [r7, #12]
 80167d6:	681a      	ldr	r2, [r3, #0]
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	3106      	adds	r1, #6
 80167dc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80167e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80167e4:	6053      	str	r3, [r2, #4]

    tickstart = HAL_GetTick();
 80167e6:	f7fe fd57 	bl	8015298 <HAL_GetTick>
 80167ea:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 80167ec:	e037      	b.n	801685e <HAL_ETH_Transmit+0x112>
    {
      if ((heth->Instance->DMASR & ETH_DMASR_FBES) != (uint32_t)RESET)
 80167ee:	68fb      	ldr	r3, [r7, #12]
 80167f0:	681b      	ldr	r3, [r3, #0]
 80167f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80167f6:	695b      	ldr	r3, [r3, #20]
 80167f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80167fc:	2b00      	cmp	r3, #0
 80167fe:	d011      	beq.n	8016824 <HAL_ETH_Transmit+0xd8>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016806:	f043 0208 	orr.w	r2, r3, #8
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMASR;
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	681b      	ldr	r3, [r3, #0]
 8016814:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016818:	695a      	ldr	r2, [r3, #20]
 801681a:	68fb      	ldr	r3, [r7, #12]
 801681c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8016820:	2301      	movs	r3, #1
 8016822:	e023      	b.n	801686c <HAL_ETH_Transmit+0x120>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801682a:	d018      	beq.n	801685e <HAL_ETH_Transmit+0x112>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 801682c:	f7fe fd34 	bl	8015298 <HAL_GetTick>
 8016830:	4602      	mov	r2, r0
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	1ad3      	subs	r3, r2, r3
 8016836:	687a      	ldr	r2, [r7, #4]
 8016838:	429a      	cmp	r2, r3
 801683a:	d302      	bcc.n	8016842 <HAL_ETH_Transmit+0xf6>
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	2b00      	cmp	r3, #0
 8016840:	d10d      	bne.n	801685e <HAL_ETH_Transmit+0x112>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8016842:	68fb      	ldr	r3, [r7, #12]
 8016844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016848:	f043 0204 	orr.w	r2, r3, #4
 801684c:	68fb      	ldr	r3, [r7, #12]
 801684e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC0 = (ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8016852:	697b      	ldr	r3, [r7, #20]
 8016854:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 8016858:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 801685a:	2301      	movs	r3, #1
 801685c:	e006      	b.n	801686c <HAL_ETH_Transmit+0x120>
    while ((dmatxdesc->DESC0 & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801685e:	697b      	ldr	r3, [r7, #20]
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	2b00      	cmp	r3, #0
 8016864:	dbc3      	blt.n	80167ee <HAL_ETH_Transmit+0xa2>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8016866:	2300      	movs	r3, #0
 8016868:	e000      	b.n	801686c <HAL_ETH_Transmit+0x120>
  }
  else
  {
    return HAL_ERROR;
 801686a:	2301      	movs	r3, #1
  }
}
 801686c:	4618      	mov	r0, r3
 801686e:	3718      	adds	r7, #24
 8016870:	46bd      	mov	sp, r7
 8016872:	bd80      	pop	{r7, pc}

08016874 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b088      	sub	sp, #32
 8016878:	af00      	add	r7, sp, #0
 801687a:	6078      	str	r0, [r7, #4]
 801687c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 801687e:	2300      	movs	r3, #0
 8016880:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8016882:	2300      	movs	r3, #0
 8016884:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d109      	bne.n	80168a0 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016892:	f043 0201 	orr.w	r2, r3, #1
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 801689c:	2301      	movs	r3, #1
 801689e:	e0a8      	b.n	80169f2 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80168a6:	2b23      	cmp	r3, #35	; 0x23
 80168a8:	d001      	beq.n	80168ae <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80168aa:	2301      	movs	r3, #1
 80168ac:	e0a1      	b.n	80169f2 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80168ae:	687b      	ldr	r3, [r7, #4]
 80168b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80168b2:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80168b4:	687b      	ldr	r3, [r7, #4]
 80168b6:	69fa      	ldr	r2, [r7, #28]
 80168b8:	3212      	adds	r2, #18
 80168ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80168be:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80168c4:	f1c3 0304 	rsb	r3, r3, #4
 80168c8:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80168ca:	e06a      	b.n	80169a2 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80168cc:	69bb      	ldr	r3, [r7, #24]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	d007      	beq.n	80168e8 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80168d8:	69bb      	ldr	r3, [r7, #24]
 80168da:	699a      	ldr	r2, [r3, #24]
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80168e0:	69bb      	ldr	r3, [r7, #24]
 80168e2:	69da      	ldr	r2, [r3, #28]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80168e8:	69bb      	ldr	r3, [r7, #24]
 80168ea:	681b      	ldr	r3, [r3, #0]
 80168ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d103      	bne.n	80168fc <HAL_ETH_ReadData+0x88>
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d040      	beq.n	801697e <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 80168fc:	69bb      	ldr	r3, [r7, #24]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016904:	2b00      	cmp	r3, #0
 8016906:	d005      	beq.n	8016914 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8016908:	687b      	ldr	r3, [r7, #4]
 801690a:	2200      	movs	r2, #0
 801690c:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	2200      	movs	r2, #0
 8016912:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	695b      	ldr	r3, [r3, #20]
 8016918:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 801691a:	69bb      	ldr	r3, [r7, #24]
 801691c:	681b      	ldr	r3, [r3, #0]
 801691e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8016922:	2b00      	cmp	r3, #0
 8016924:	d00c      	beq.n	8016940 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	0c1b      	lsrs	r3, r3, #16
 801692c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016930:	3b04      	subs	r3, #4
 8016932:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8016934:	69bb      	ldr	r3, [r7, #24]
 8016936:	681a      	ldr	r2, [r3, #0]
 8016938:	687b      	ldr	r3, [r7, #4]
 801693a:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 801693c:	2301      	movs	r3, #1
 801693e:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8016940:	69bb      	ldr	r3, [r7, #24]
 8016942:	689a      	ldr	r2, [r3, #8]
 8016944:	69bb      	ldr	r3, [r7, #24]
 8016946:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 801694e:	687b      	ldr	r3, [r7, #4]
 8016950:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8016954:	69bb      	ldr	r3, [r7, #24]
 8016956:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8016958:	461a      	mov	r2, r3
 801695a:	693b      	ldr	r3, [r7, #16]
 801695c:	b29b      	uxth	r3, r3
 801695e:	f006 fb4f 	bl	801d000 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8016962:	687b      	ldr	r3, [r7, #4]
 8016964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8016966:	1c5a      	adds	r2, r3, #1
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8016970:	693b      	ldr	r3, [r7, #16]
 8016972:	441a      	add	r2, r3
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8016978:	69bb      	ldr	r3, [r7, #24]
 801697a:	2200      	movs	r2, #0
 801697c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 801697e:	69fb      	ldr	r3, [r7, #28]
 8016980:	3301      	adds	r3, #1
 8016982:	61fb      	str	r3, [r7, #28]
 8016984:	69fb      	ldr	r3, [r7, #28]
 8016986:	2b03      	cmp	r3, #3
 8016988:	d902      	bls.n	8016990 <HAL_ETH_ReadData+0x11c>
 801698a:	69fb      	ldr	r3, [r7, #28]
 801698c:	3b04      	subs	r3, #4
 801698e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	69fa      	ldr	r2, [r7, #28]
 8016994:	3212      	adds	r2, #18
 8016996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801699a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 801699c:	697b      	ldr	r3, [r7, #20]
 801699e:	3301      	adds	r3, #1
 80169a0:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80169a2:	69bb      	ldr	r3, [r7, #24]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	db06      	blt.n	80169b8 <HAL_ETH_ReadData+0x144>
 80169aa:	697a      	ldr	r2, [r7, #20]
 80169ac:	68bb      	ldr	r3, [r7, #8]
 80169ae:	429a      	cmp	r2, r3
 80169b0:	d202      	bcs.n	80169b8 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80169b2:	7bfb      	ldrb	r3, [r7, #15]
 80169b4:	2b00      	cmp	r3, #0
 80169b6:	d089      	beq.n	80168cc <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80169bc:	697b      	ldr	r3, [r7, #20]
 80169be:	441a      	add	r2, r3
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	d002      	beq.n	80169d2 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80169cc:	6878      	ldr	r0, [r7, #4]
 80169ce:	f000 f815 	bl	80169fc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	69fa      	ldr	r2, [r7, #28]
 80169d6:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80169d8:	7bfb      	ldrb	r3, [r7, #15]
 80169da:	2b01      	cmp	r3, #1
 80169dc:	d108      	bne.n	80169f0 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	2200      	movs	r2, #0
 80169ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80169ec:	2300      	movs	r3, #0
 80169ee:	e000      	b.n	80169f2 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 80169f0:	2301      	movs	r3, #1
}
 80169f2:	4618      	mov	r0, r3
 80169f4:	3720      	adds	r7, #32
 80169f6:	46bd      	mov	sp, r7
 80169f8:	bd80      	pop	{r7, pc}
	...

080169fc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 80169fc:	b580      	push	{r7, lr}
 80169fe:	b088      	sub	sp, #32
 8016a00:	af00      	add	r7, sp, #0
 8016a02:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8016a04:	2300      	movs	r3, #0
 8016a06:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8016a08:	2301      	movs	r3, #1
 8016a0a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8016a0c:	687b      	ldr	r3, [r7, #4]
 8016a0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8016a10:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	69fa      	ldr	r2, [r7, #28]
 8016a16:	3212      	adds	r2, #18
 8016a18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016a1c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8016a1e:	687b      	ldr	r3, [r7, #4]
 8016a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a22:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8016a24:	e040      	b.n	8016aa8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8016a26:	697b      	ldr	r3, [r7, #20]
 8016a28:	6a1b      	ldr	r3, [r3, #32]
 8016a2a:	2b00      	cmp	r3, #0
 8016a2c:	d112      	bne.n	8016a54 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8016a2e:	f107 030c 	add.w	r3, r7, #12
 8016a32:	4618      	mov	r0, r3
 8016a34:	f006 fab4 	bl	801cfa0 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8016a38:	68fb      	ldr	r3, [r7, #12]
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d102      	bne.n	8016a44 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8016a3e:	2300      	movs	r3, #0
 8016a40:	74fb      	strb	r3, [r7, #19]
 8016a42:	e007      	b.n	8016a54 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8016a44:	68fb      	ldr	r3, [r7, #12]
 8016a46:	461a      	mov	r2, r3
 8016a48:	697b      	ldr	r3, [r7, #20]
 8016a4a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8016a4c:	68fb      	ldr	r3, [r7, #12]
 8016a4e:	461a      	mov	r2, r3
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8016a54:	7cfb      	ldrb	r3, [r7, #19]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d026      	beq.n	8016aa8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8016a5a:	687b      	ldr	r3, [r7, #4]
 8016a5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016a5e:	2b00      	cmp	r3, #0
 8016a60:	d103      	bne.n	8016a6a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016a62:	697b      	ldr	r3, [r7, #20]
 8016a64:	4a1e      	ldr	r2, [pc, #120]	; (8016ae0 <ETH_UpdateDescriptor+0xe4>)
 8016a66:	605a      	str	r2, [r3, #4]
 8016a68:	e003      	b.n	8016a72 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8016a6a:	697b      	ldr	r3, [r7, #20]
 8016a6c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8016a70:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dmb 0xF":::"memory");
 8016a72:	f3bf 8f5f 	dmb	sy
}
 8016a76:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8016a78:	697b      	ldr	r3, [r7, #20]
 8016a7a:	681b      	ldr	r3, [r3, #0]
 8016a7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8016a80:	697b      	ldr	r3, [r7, #20]
 8016a82:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8016a84:	69fb      	ldr	r3, [r7, #28]
 8016a86:	3301      	adds	r3, #1
 8016a88:	61fb      	str	r3, [r7, #28]
 8016a8a:	69fb      	ldr	r3, [r7, #28]
 8016a8c:	2b03      	cmp	r3, #3
 8016a8e:	d902      	bls.n	8016a96 <ETH_UpdateDescriptor+0x9a>
 8016a90:	69fb      	ldr	r3, [r7, #28]
 8016a92:	3b04      	subs	r3, #4
 8016a94:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8016a96:	687b      	ldr	r3, [r7, #4]
 8016a98:	69fa      	ldr	r2, [r7, #28]
 8016a9a:	3212      	adds	r2, #18
 8016a9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aa0:	617b      	str	r3, [r7, #20]
      desccount--;
 8016aa2:	69bb      	ldr	r3, [r7, #24]
 8016aa4:	3b01      	subs	r3, #1
 8016aa6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d002      	beq.n	8016ab4 <ETH_UpdateDescriptor+0xb8>
 8016aae:	7cfb      	ldrb	r3, [r7, #19]
 8016ab0:	2b00      	cmp	r3, #0
 8016ab2:	d1b8      	bne.n	8016a26 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ab8:	69ba      	ldr	r2, [r7, #24]
 8016aba:	429a      	cmp	r2, r3
 8016abc:	d00c      	beq.n	8016ad8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016ac6:	461a      	mov	r2, r3
 8016ac8:	2300      	movs	r3, #0
 8016aca:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	69fa      	ldr	r2, [r7, #28]
 8016ad0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	69ba      	ldr	r2, [r7, #24]
 8016ad6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8016ad8:	bf00      	nop
 8016ada:	3720      	adds	r7, #32
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}
 8016ae0:	800045f8 	.word	0x800045f8

08016ae4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8016ae4:	b580      	push	{r7, lr}
 8016ae6:	b082      	sub	sp, #8
 8016ae8:	af00      	add	r7, sp, #0
 8016aea:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8016aec:	687b      	ldr	r3, [r7, #4]
 8016aee:	681b      	ldr	r3, [r3, #0]
 8016af0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016af4:	695b      	ldr	r3, [r3, #20]
 8016af6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016afa:	2b40      	cmp	r3, #64	; 0x40
 8016afc:	d112      	bne.n	8016b24 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8016afe:	687b      	ldr	r3, [r7, #4]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b06:	69db      	ldr	r3, [r3, #28]
 8016b08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016b0c:	2b40      	cmp	r3, #64	; 0x40
 8016b0e:	d109      	bne.n	8016b24 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8016b10:	687b      	ldr	r3, [r7, #4]
 8016b12:	681b      	ldr	r3, [r3, #0]
 8016b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b18:	461a      	mov	r2, r3
 8016b1a:	4b50      	ldr	r3, [pc, #320]	; (8016c5c <HAL_ETH_IRQHandler+0x178>)
 8016b1c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8016b1e:	6878      	ldr	r0, [r7, #4]
 8016b20:	f000 f8ac 	bl	8016c7c <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b2c:	695b      	ldr	r3, [r3, #20]
 8016b2e:	f003 0301 	and.w	r3, r3, #1
 8016b32:	2b01      	cmp	r3, #1
 8016b34:	d113      	bne.n	8016b5e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	681b      	ldr	r3, [r3, #0]
 8016b3a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b3e:	69db      	ldr	r3, [r3, #28]
 8016b40:	f003 0301 	and.w	r3, r3, #1
 8016b44:	2b01      	cmp	r3, #1
 8016b46:	d10a      	bne.n	8016b5e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b50:	461a      	mov	r2, r3
 8016b52:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8016b56:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f000 f885 	bl	8016c68 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8016b5e:	687b      	ldr	r3, [r7, #4]
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b66:	695b      	ldr	r3, [r3, #20]
 8016b68:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016b70:	d14c      	bne.n	8016c0c <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8016b72:	687b      	ldr	r3, [r7, #4]
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b7a:	69db      	ldr	r3, [r3, #28]
 8016b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8016b80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8016b84:	d142      	bne.n	8016c0c <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8016b8c:	f043 0208 	orr.w	r2, r3, #8
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016b9e:	695b      	ldr	r3, [r3, #20]
 8016ba0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8016ba8:	d11a      	bne.n	8016be0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	681b      	ldr	r3, [r3, #0]
 8016bae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016bb2:	695a      	ldr	r2, [r3, #20]
 8016bb4:	4b2a      	ldr	r3, [pc, #168]	; (8016c60 <HAL_ETH_IRQHandler+0x17c>)
 8016bb6:	4013      	ands	r3, r2
 8016bb8:	687a      	ldr	r2, [r7, #4]
 8016bba:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8016bbe:	687b      	ldr	r3, [r7, #4]
 8016bc0:	681b      	ldr	r3, [r3, #0]
 8016bc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016bc6:	69db      	ldr	r3, [r3, #28]
 8016bc8:	687a      	ldr	r2, [r7, #4]
 8016bca:	6812      	ldr	r2, [r2, #0]
 8016bcc:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8016bd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8016bd4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	22e0      	movs	r2, #224	; 0xe0
 8016bda:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8016bde:	e012      	b.n	8016c06 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016be8:	695a      	ldr	r2, [r3, #20]
 8016bea:	f248 6380 	movw	r3, #34432	; 0x8680
 8016bee:	4013      	ands	r3, r2
 8016bf0:	687a      	ldr	r2, [r7, #4]
 8016bf2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8016bf6:	687b      	ldr	r3, [r7, #4]
 8016bf8:	681b      	ldr	r3, [r3, #0]
 8016bfa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8016bfe:	461a      	mov	r2, r3
 8016c00:	f248 6380 	movw	r3, #34432	; 0x8680
 8016c04:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8016c06:	6878      	ldr	r0, [r7, #4]
 8016c08:	f000 f842 	bl	8016c90 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8016c0c:	687b      	ldr	r3, [r7, #4]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8016c12:	f003 0308 	and.w	r3, r3, #8
 8016c16:	2b08      	cmp	r3, #8
 8016c18:	d10e      	bne.n	8016c38 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8016c1a:	687b      	ldr	r3, [r7, #4]
 8016c1c:	681b      	ldr	r3, [r3, #0]
 8016c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016c20:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016c24:	687b      	ldr	r3, [r7, #4]
 8016c26:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8016c2a:	6878      	ldr	r0, [r7, #4]
 8016c2c:	f000 f83a 	bl	8016ca4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8016c30:	687b      	ldr	r3, [r7, #4]
 8016c32:	2200      	movs	r2, #0
 8016c34:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8016c38:	4b0a      	ldr	r3, [pc, #40]	; (8016c64 <HAL_ETH_IRQHandler+0x180>)
 8016c3a:	695b      	ldr	r3, [r3, #20]
 8016c3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d006      	beq.n	8016c52 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8016c44:	4b07      	ldr	r3, [pc, #28]	; (8016c64 <HAL_ETH_IRQHandler+0x180>)
 8016c46:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8016c4a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8016c4c:	6878      	ldr	r0, [r7, #4]
 8016c4e:	f000 f833 	bl	8016cb8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8016c52:	bf00      	nop
 8016c54:	3708      	adds	r7, #8
 8016c56:	46bd      	mov	sp, r7
 8016c58:	bd80      	pop	{r7, pc}
 8016c5a:	bf00      	nop
 8016c5c:	00010040 	.word	0x00010040
 8016c60:	007e2000 	.word	0x007e2000
 8016c64:	40013c00 	.word	0x40013c00

08016c68 <HAL_ETH_TxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016c68:	b480      	push	{r7}
 8016c6a:	b083      	sub	sp, #12
 8016c6c:	af00      	add	r7, sp, #0
 8016c6e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */
}
 8016c70:	bf00      	nop
 8016c72:	370c      	adds	r7, #12
 8016c74:	46bd      	mov	sp, r7
 8016c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7a:	4770      	bx	lr

08016c7c <HAL_ETH_RxCpltCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8016c7c:	b480      	push	{r7}
 8016c7e:	b083      	sub	sp, #12
 8016c80:	af00      	add	r7, sp, #0
 8016c82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_RxCpltCallback could be implemented in the user file
  */
}
 8016c84:	bf00      	nop
 8016c86:	370c      	adds	r7, #12
 8016c88:	46bd      	mov	sp, r7
 8016c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c8e:	4770      	bx	lr

08016c90 <HAL_ETH_ErrorCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8016c90:	b480      	push	{r7}
 8016c92:	b083      	sub	sp, #12
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_ErrorCallback could be implemented in the user file
  */
}
 8016c98:	bf00      	nop
 8016c9a:	370c      	adds	r7, #12
 8016c9c:	46bd      	mov	sp, r7
 8016c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ca2:	4770      	bx	lr

08016ca4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8016ca4:	b480      	push	{r7}
 8016ca6:	b083      	sub	sp, #12
 8016ca8:	af00      	add	r7, sp, #0
 8016caa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8016cac:	bf00      	nop
 8016cae:	370c      	adds	r7, #12
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cb6:	4770      	bx	lr

08016cb8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8016cb8:	b480      	push	{r7}
 8016cba:	b083      	sub	sp, #12
 8016cbc:	af00      	add	r7, sp, #0
 8016cbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8016cc0:	bf00      	nop
 8016cc2:	370c      	adds	r7, #12
 8016cc4:	46bd      	mov	sp, r7
 8016cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cca:	4770      	bx	lr

08016ccc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8016ccc:	b580      	push	{r7, lr}
 8016cce:	b086      	sub	sp, #24
 8016cd0:	af00      	add	r7, sp, #0
 8016cd2:	60f8      	str	r0, [r7, #12]
 8016cd4:	60b9      	str	r1, [r7, #8]
 8016cd6:	607a      	str	r2, [r7, #4]
 8016cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	681b      	ldr	r3, [r3, #0]
 8016cde:	691b      	ldr	r3, [r3, #16]
 8016ce0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8016ce2:	697b      	ldr	r3, [r7, #20]
 8016ce4:	f003 031c 	and.w	r3, r3, #28
 8016ce8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	02db      	lsls	r3, r3, #11
 8016cee:	b29b      	uxth	r3, r3
 8016cf0:	697a      	ldr	r2, [r7, #20]
 8016cf2:	4313      	orrs	r3, r2
 8016cf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8016cf6:	687b      	ldr	r3, [r7, #4]
 8016cf8:	019b      	lsls	r3, r3, #6
 8016cfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8016cfe:	697a      	ldr	r2, [r7, #20]
 8016d00:	4313      	orrs	r3, r2
 8016d02:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8016d04:	697b      	ldr	r3, [r7, #20]
 8016d06:	f023 0302 	bic.w	r3, r3, #2
 8016d0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8016d0c:	697b      	ldr	r3, [r7, #20]
 8016d0e:	f043 0301 	orr.w	r3, r3, #1
 8016d12:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8016d14:	68fb      	ldr	r3, [r7, #12]
 8016d16:	681b      	ldr	r3, [r3, #0]
 8016d18:	697a      	ldr	r2, [r7, #20]
 8016d1a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8016d1c:	f7fe fabc 	bl	8015298 <HAL_GetTick>
 8016d20:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016d22:	e00d      	b.n	8016d40 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8016d24:	f7fe fab8 	bl	8015298 <HAL_GetTick>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	693b      	ldr	r3, [r7, #16]
 8016d2c:	1ad3      	subs	r3, r2, r3
 8016d2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d32:	d301      	bcc.n	8016d38 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8016d34:	2301      	movs	r3, #1
 8016d36:	e010      	b.n	8016d5a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8016d38:	68fb      	ldr	r3, [r7, #12]
 8016d3a:	681b      	ldr	r3, [r3, #0]
 8016d3c:	691b      	ldr	r3, [r3, #16]
 8016d3e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	f003 0301 	and.w	r3, r3, #1
 8016d46:	2b00      	cmp	r3, #0
 8016d48:	d1ec      	bne.n	8016d24 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8016d4a:	68fb      	ldr	r3, [r7, #12]
 8016d4c:	681b      	ldr	r3, [r3, #0]
 8016d4e:	695b      	ldr	r3, [r3, #20]
 8016d50:	b29b      	uxth	r3, r3
 8016d52:	461a      	mov	r2, r3
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3718      	adds	r7, #24
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}

08016d62 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8016d62:	b580      	push	{r7, lr}
 8016d64:	b086      	sub	sp, #24
 8016d66:	af00      	add	r7, sp, #0
 8016d68:	60f8      	str	r0, [r7, #12]
 8016d6a:	60b9      	str	r1, [r7, #8]
 8016d6c:	607a      	str	r2, [r7, #4]
 8016d6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8016d70:	68fb      	ldr	r3, [r7, #12]
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	691b      	ldr	r3, [r3, #16]
 8016d76:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8016d78:	697b      	ldr	r3, [r7, #20]
 8016d7a:	f003 031c 	and.w	r3, r3, #28
 8016d7e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8016d80:	68bb      	ldr	r3, [r7, #8]
 8016d82:	02db      	lsls	r3, r3, #11
 8016d84:	b29b      	uxth	r3, r3
 8016d86:	697a      	ldr	r2, [r7, #20]
 8016d88:	4313      	orrs	r3, r2
 8016d8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	019b      	lsls	r3, r3, #6
 8016d90:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8016d94:	697a      	ldr	r2, [r7, #20]
 8016d96:	4313      	orrs	r3, r2
 8016d98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8016d9a:	697b      	ldr	r3, [r7, #20]
 8016d9c:	f043 0302 	orr.w	r3, r3, #2
 8016da0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8016da2:	697b      	ldr	r3, [r7, #20]
 8016da4:	f043 0301 	orr.w	r3, r3, #1
 8016da8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8016daa:	683b      	ldr	r3, [r7, #0]
 8016dac:	b29a      	uxth	r2, r3
 8016dae:	68fb      	ldr	r3, [r7, #12]
 8016db0:	681b      	ldr	r3, [r3, #0]
 8016db2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8016db4:	68fb      	ldr	r3, [r7, #12]
 8016db6:	681b      	ldr	r3, [r3, #0]
 8016db8:	697a      	ldr	r2, [r7, #20]
 8016dba:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016dbc:	f7fe fa6c 	bl	8015298 <HAL_GetTick>
 8016dc0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016dc2:	e00d      	b.n	8016de0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8016dc4:	f7fe fa68 	bl	8015298 <HAL_GetTick>
 8016dc8:	4602      	mov	r2, r0
 8016dca:	693b      	ldr	r3, [r7, #16]
 8016dcc:	1ad3      	subs	r3, r2, r3
 8016dce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016dd2:	d301      	bcc.n	8016dd8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8016dd4:	2301      	movs	r3, #1
 8016dd6:	e009      	b.n	8016dec <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8016dd8:	68fb      	ldr	r3, [r7, #12]
 8016dda:	681b      	ldr	r3, [r3, #0]
 8016ddc:	691b      	ldr	r3, [r3, #16]
 8016dde:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8016de0:	697b      	ldr	r3, [r7, #20]
 8016de2:	f003 0301 	and.w	r3, r3, #1
 8016de6:	2b00      	cmp	r3, #0
 8016de8:	d1ec      	bne.n	8016dc4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8016dea:	2300      	movs	r3, #0
}
 8016dec:	4618      	mov	r0, r3
 8016dee:	3718      	adds	r7, #24
 8016df0:	46bd      	mov	sp, r7
 8016df2:	bd80      	pop	{r7, pc}

08016df4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8016df4:	b480      	push	{r7}
 8016df6:	b083      	sub	sp, #12
 8016df8:	af00      	add	r7, sp, #0
 8016dfa:	6078      	str	r0, [r7, #4]
 8016dfc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8016dfe:	683b      	ldr	r3, [r7, #0]
 8016e00:	2b00      	cmp	r3, #0
 8016e02:	d101      	bne.n	8016e08 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8016e04:	2301      	movs	r3, #1
 8016e06:	e0d9      	b.n	8016fbc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	681b      	ldr	r3, [r3, #0]
 8016e0e:	f003 0310 	and.w	r3, r3, #16
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	bf14      	ite	ne
 8016e16:	2301      	movne	r3, #1
 8016e18:	2300      	moveq	r3, #0
 8016e1a:	b2db      	uxtb	r3, r3
 8016e1c:	461a      	mov	r2, r3
 8016e1e:	683b      	ldr	r3, [r7, #0]
 8016e20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8016e24:	687b      	ldr	r3, [r7, #4]
 8016e26:	681b      	ldr	r3, [r3, #0]
 8016e28:	681b      	ldr	r3, [r3, #0]
 8016e2a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8016e2e:	683b      	ldr	r3, [r7, #0]
 8016e30:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8016e32:	687b      	ldr	r3, [r7, #4]
 8016e34:	681b      	ldr	r3, [r3, #0]
 8016e36:	681b      	ldr	r3, [r3, #0]
 8016e38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8016e3c:	2b00      	cmp	r3, #0
 8016e3e:	bf0c      	ite	eq
 8016e40:	2301      	moveq	r3, #1
 8016e42:	2300      	movne	r3, #0
 8016e44:	b2db      	uxtb	r3, r3
 8016e46:	461a      	mov	r2, r3
 8016e48:	683b      	ldr	r3, [r7, #0]
 8016e4a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8016e4e:	687b      	ldr	r3, [r7, #4]
 8016e50:	681b      	ldr	r3, [r3, #0]
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	bf14      	ite	ne
 8016e5c:	2301      	movne	r3, #1
 8016e5e:	2300      	moveq	r3, #0
 8016e60:	b2db      	uxtb	r3, r3
 8016e62:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	bf0c      	ite	eq
 8016e76:	2301      	moveq	r3, #1
 8016e78:	2300      	movne	r3, #0
 8016e7a:	b2db      	uxtb	r3, r3
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	683b      	ldr	r3, [r7, #0]
 8016e80:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8016e82:	687b      	ldr	r3, [r7, #4]
 8016e84:	681b      	ldr	r3, [r3, #0]
 8016e86:	681b      	ldr	r3, [r3, #0]
 8016e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8016e8c:	2b00      	cmp	r3, #0
 8016e8e:	bf14      	ite	ne
 8016e90:	2301      	movne	r3, #1
 8016e92:	2300      	moveq	r3, #0
 8016e94:	b2db      	uxtb	r3, r3
 8016e96:	461a      	mov	r2, r3
 8016e98:	683b      	ldr	r3, [r7, #0]
 8016e9a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	681b      	ldr	r3, [r3, #0]
 8016ea2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	681b      	ldr	r3, [r3, #0]
 8016eb0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8016eb4:	683b      	ldr	r3, [r7, #0]
 8016eb6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	681b      	ldr	r3, [r3, #0]
 8016ebc:	681b      	ldr	r3, [r3, #0]
 8016ebe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8016ec2:	2b00      	cmp	r3, #0
 8016ec4:	bf0c      	ite	eq
 8016ec6:	2301      	moveq	r3, #1
 8016ec8:	2300      	movne	r3, #0
 8016eca:	b2db      	uxtb	r3, r3
 8016ecc:	461a      	mov	r2, r3
 8016ece:	683b      	ldr	r3, [r7, #0]
 8016ed0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	bf0c      	ite	eq
 8016ee0:	2301      	moveq	r3, #1
 8016ee2:	2300      	movne	r3, #0
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	461a      	mov	r2, r3
 8016ee8:	683b      	ldr	r3, [r7, #0]
 8016eea:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	681b      	ldr	r3, [r3, #0]
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016ef6:	2b00      	cmp	r3, #0
 8016ef8:	bf14      	ite	ne
 8016efa:	2301      	movne	r3, #1
 8016efc:	2300      	moveq	r3, #0
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	461a      	mov	r2, r3
 8016f02:	683b      	ldr	r3, [r7, #0]
 8016f04:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	681b      	ldr	r3, [r3, #0]
 8016f0c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8016f10:	683b      	ldr	r3, [r7, #0]
 8016f12:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	681b      	ldr	r3, [r3, #0]
 8016f1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8016f1e:	2b00      	cmp	r3, #0
 8016f20:	bf14      	ite	ne
 8016f22:	2301      	movne	r3, #1
 8016f24:	2300      	moveq	r3, #0
 8016f26:	b2db      	uxtb	r3, r3
 8016f28:	461a      	mov	r2, r3
 8016f2a:	683b      	ldr	r3, [r7, #0]
 8016f2c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	699b      	ldr	r3, [r3, #24]
 8016f34:	f003 0302 	and.w	r3, r3, #2
 8016f38:	2b00      	cmp	r3, #0
 8016f3a:	bf14      	ite	ne
 8016f3c:	2301      	movne	r3, #1
 8016f3e:	2300      	moveq	r3, #0
 8016f40:	b2db      	uxtb	r3, r3
 8016f42:	461a      	mov	r2, r3
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8016f4a:	687b      	ldr	r3, [r7, #4]
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	699b      	ldr	r3, [r3, #24]
 8016f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	bf0c      	ite	eq
 8016f58:	2301      	moveq	r3, #1
 8016f5a:	2300      	movne	r3, #0
 8016f5c:	b2db      	uxtb	r3, r3
 8016f5e:	461a      	mov	r2, r3
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8016f66:	687b      	ldr	r3, [r7, #4]
 8016f68:	681b      	ldr	r3, [r3, #0]
 8016f6a:	699b      	ldr	r3, [r3, #24]
 8016f6c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8016f74:	687b      	ldr	r3, [r7, #4]
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	699b      	ldr	r3, [r3, #24]
 8016f7a:	0c1b      	lsrs	r3, r3, #16
 8016f7c:	b29a      	uxth	r2, r3
 8016f7e:	683b      	ldr	r3, [r7, #0]
 8016f80:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8016f82:	687b      	ldr	r3, [r7, #4]
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	699b      	ldr	r3, [r3, #24]
 8016f88:	f003 0304 	and.w	r3, r3, #4
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	bf14      	ite	ne
 8016f90:	2301      	movne	r3, #1
 8016f92:	2300      	moveq	r3, #0
 8016f94:	b2db      	uxtb	r3, r3
 8016f96:	461a      	mov	r2, r3
 8016f98:	683b      	ldr	r3, [r7, #0]
 8016f9a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	699b      	ldr	r3, [r3, #24]
 8016fa4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	bf14      	ite	ne
 8016fac:	2301      	movne	r3, #1
 8016fae:	2300      	moveq	r3, #0
 8016fb0:	b2db      	uxtb	r3, r3
 8016fb2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8016fb4:	683b      	ldr	r3, [r7, #0]
 8016fb6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8016fba:	2300      	movs	r3, #0
}
 8016fbc:	4618      	mov	r0, r3
 8016fbe:	370c      	adds	r7, #12
 8016fc0:	46bd      	mov	sp, r7
 8016fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc6:	4770      	bx	lr

08016fc8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8016fc8:	b580      	push	{r7, lr}
 8016fca:	b082      	sub	sp, #8
 8016fcc:	af00      	add	r7, sp, #0
 8016fce:	6078      	str	r0, [r7, #4]
 8016fd0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8016fd2:	683b      	ldr	r3, [r7, #0]
 8016fd4:	2b00      	cmp	r3, #0
 8016fd6:	d101      	bne.n	8016fdc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8016fd8:	2301      	movs	r3, #1
 8016fda:	e00b      	b.n	8016ff4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016fe2:	2b10      	cmp	r3, #16
 8016fe4:	d105      	bne.n	8016ff2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8016fe6:	6839      	ldr	r1, [r7, #0]
 8016fe8:	6878      	ldr	r0, [r7, #4]
 8016fea:	f000 f883 	bl	80170f4 <ETH_SetMACConfig>

    return HAL_OK;
 8016fee:	2300      	movs	r3, #0
 8016ff0:	e000      	b.n	8016ff4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8016ff2:	2301      	movs	r3, #1
  }
}
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	3708      	adds	r7, #8
 8016ff8:	46bd      	mov	sp, r7
 8016ffa:	bd80      	pop	{r7, pc}

08016ffc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8016ffc:	b580      	push	{r7, lr}
 8016ffe:	b084      	sub	sp, #16
 8017000:	af00      	add	r7, sp, #0
 8017002:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8017004:	687b      	ldr	r3, [r7, #4]
 8017006:	681b      	ldr	r3, [r3, #0]
 8017008:	691b      	ldr	r3, [r3, #16]
 801700a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 801700c:	68fb      	ldr	r3, [r7, #12]
 801700e:	f023 031c 	bic.w	r3, r3, #28
 8017012:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8017014:	f002 f916 	bl	8019244 <HAL_RCC_GetHCLKFreq>
 8017018:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 801701a:	68bb      	ldr	r3, [r7, #8]
 801701c:	4a1d      	ldr	r2, [pc, #116]	; (8017094 <HAL_ETH_SetMDIOClockRange+0x98>)
 801701e:	4293      	cmp	r3, r2
 8017020:	d908      	bls.n	8017034 <HAL_ETH_SetMDIOClockRange+0x38>
 8017022:	68bb      	ldr	r3, [r7, #8]
 8017024:	4a1c      	ldr	r2, [pc, #112]	; (8017098 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017026:	4293      	cmp	r3, r2
 8017028:	d804      	bhi.n	8017034 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 801702a:	68fb      	ldr	r3, [r7, #12]
 801702c:	f043 0308 	orr.w	r3, r3, #8
 8017030:	60fb      	str	r3, [r7, #12]
 8017032:	e027      	b.n	8017084 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8017034:	68bb      	ldr	r3, [r7, #8]
 8017036:	4a18      	ldr	r2, [pc, #96]	; (8017098 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8017038:	4293      	cmp	r3, r2
 801703a:	d908      	bls.n	801704e <HAL_ETH_SetMDIOClockRange+0x52>
 801703c:	68bb      	ldr	r3, [r7, #8]
 801703e:	4a17      	ldr	r2, [pc, #92]	; (801709c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8017040:	4293      	cmp	r3, r2
 8017042:	d204      	bcs.n	801704e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8017044:	68fb      	ldr	r3, [r7, #12]
 8017046:	f043 030c 	orr.w	r3, r3, #12
 801704a:	60fb      	str	r3, [r7, #12]
 801704c:	e01a      	b.n	8017084 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 801704e:	68bb      	ldr	r3, [r7, #8]
 8017050:	4a12      	ldr	r2, [pc, #72]	; (801709c <HAL_ETH_SetMDIOClockRange+0xa0>)
 8017052:	4293      	cmp	r3, r2
 8017054:	d303      	bcc.n	801705e <HAL_ETH_SetMDIOClockRange+0x62>
 8017056:	68bb      	ldr	r3, [r7, #8]
 8017058:	4a11      	ldr	r2, [pc, #68]	; (80170a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 801705a:	4293      	cmp	r3, r2
 801705c:	d911      	bls.n	8017082 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 801705e:	68bb      	ldr	r3, [r7, #8]
 8017060:	4a0f      	ldr	r2, [pc, #60]	; (80170a0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8017062:	4293      	cmp	r3, r2
 8017064:	d908      	bls.n	8017078 <HAL_ETH_SetMDIOClockRange+0x7c>
 8017066:	68bb      	ldr	r3, [r7, #8]
 8017068:	4a0e      	ldr	r2, [pc, #56]	; (80170a4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 801706a:	4293      	cmp	r3, r2
 801706c:	d804      	bhi.n	8017078 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 801706e:	68fb      	ldr	r3, [r7, #12]
 8017070:	f043 0304 	orr.w	r3, r3, #4
 8017074:	60fb      	str	r3, [r7, #12]
 8017076:	e005      	b.n	8017084 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8017078:	68fb      	ldr	r3, [r7, #12]
 801707a:	f043 0310 	orr.w	r3, r3, #16
 801707e:	60fb      	str	r3, [r7, #12]
 8017080:	e000      	b.n	8017084 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8017082:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8017084:	687b      	ldr	r3, [r7, #4]
 8017086:	681b      	ldr	r3, [r3, #0]
 8017088:	68fa      	ldr	r2, [r7, #12]
 801708a:	611a      	str	r2, [r3, #16]
}
 801708c:	bf00      	nop
 801708e:	3710      	adds	r7, #16
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	01312cff 	.word	0x01312cff
 8017098:	02160ebf 	.word	0x02160ebf
 801709c:	03938700 	.word	0x03938700
 80170a0:	05f5e0ff 	.word	0x05f5e0ff
 80170a4:	08f0d17f 	.word	0x08f0d17f

080170a8 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80170a8:	b580      	push	{r7, lr}
 80170aa:	b084      	sub	sp, #16
 80170ac:	af00      	add	r7, sp, #0
 80170ae:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80170b0:	2300      	movs	r3, #0
 80170b2:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170bc:	699b      	ldr	r3, [r3, #24]
 80170be:	687a      	ldr	r2, [r7, #4]
 80170c0:	6812      	ldr	r2, [r2, #0]
 80170c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80170c6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80170ca:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681b      	ldr	r3, [r3, #0]
 80170d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80170d4:	699b      	ldr	r3, [r3, #24]
 80170d6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80170d8:	2001      	movs	r0, #1
 80170da:	f7fe f8e9 	bl	80152b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80170de:	687b      	ldr	r3, [r7, #4]
 80170e0:	681a      	ldr	r2, [r3, #0]
 80170e2:	68fb      	ldr	r3, [r7, #12]
 80170e4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80170e8:	6193      	str	r3, [r2, #24]
}
 80170ea:	bf00      	nop
 80170ec:	3710      	adds	r7, #16
 80170ee:	46bd      	mov	sp, r7
 80170f0:	bd80      	pop	{r7, pc}
	...

080170f4 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80170f4:	b580      	push	{r7, lr}
 80170f6:	b084      	sub	sp, #16
 80170f8:	af00      	add	r7, sp, #0
 80170fa:	6078      	str	r0, [r7, #4]
 80170fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80170fe:	687b      	ldr	r3, [r7, #4]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8017106:	68fa      	ldr	r2, [r7, #12]
 8017108:	4b51      	ldr	r3, [pc, #324]	; (8017250 <ETH_SetMACConfig+0x15c>)
 801710a:	4013      	ands	r3, r2
 801710c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801710e:	683b      	ldr	r3, [r7, #0]
 8017110:	7c1b      	ldrb	r3, [r3, #16]
 8017112:	2b00      	cmp	r3, #0
 8017114:	d102      	bne.n	801711c <ETH_SetMACConfig+0x28>
 8017116:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801711a:	e000      	b.n	801711e <ETH_SetMACConfig+0x2a>
 801711c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 801711e:	683b      	ldr	r3, [r7, #0]
 8017120:	7c5b      	ldrb	r3, [r3, #17]
 8017122:	2b00      	cmp	r3, #0
 8017124:	d102      	bne.n	801712c <ETH_SetMACConfig+0x38>
 8017126:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801712a:	e000      	b.n	801712e <ETH_SetMACConfig+0x3a>
 801712c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 801712e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8017130:	683b      	ldr	r3, [r7, #0]
 8017132:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8017134:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8017136:	683b      	ldr	r3, [r7, #0]
 8017138:	7fdb      	ldrb	r3, [r3, #31]
 801713a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 801713c:	431a      	orrs	r2, r3
                        macconf->Speed |
 801713e:	683b      	ldr	r3, [r7, #0]
 8017140:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8017142:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8017144:	683a      	ldr	r2, [r7, #0]
 8017146:	7f92      	ldrb	r2, [r2, #30]
 8017148:	2a00      	cmp	r2, #0
 801714a:	d102      	bne.n	8017152 <ETH_SetMACConfig+0x5e>
 801714c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8017150:	e000      	b.n	8017154 <ETH_SetMACConfig+0x60>
 8017152:	2200      	movs	r2, #0
                        macconf->Speed |
 8017154:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8017156:	683b      	ldr	r3, [r7, #0]
 8017158:	7f1b      	ldrb	r3, [r3, #28]
 801715a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 801715c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 801715e:	683b      	ldr	r3, [r7, #0]
 8017160:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8017162:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	791b      	ldrb	r3, [r3, #4]
 8017168:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 801716a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 801716c:	683a      	ldr	r2, [r7, #0]
 801716e:	f892 2020 	ldrb.w	r2, [r2, #32]
 8017172:	2a00      	cmp	r2, #0
 8017174:	d102      	bne.n	801717c <ETH_SetMACConfig+0x88>
 8017176:	f44f 7200 	mov.w	r2, #512	; 0x200
 801717a:	e000      	b.n	801717e <ETH_SetMACConfig+0x8a>
 801717c:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 801717e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	7bdb      	ldrb	r3, [r3, #15]
 8017184:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8017186:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8017188:	683b      	ldr	r3, [r7, #0]
 801718a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 801718c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 801718e:	683b      	ldr	r3, [r7, #0]
 8017190:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8017194:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8017196:	4313      	orrs	r3, r2
 8017198:	68fa      	ldr	r2, [r7, #12]
 801719a:	4313      	orrs	r3, r2
 801719c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	68fa      	ldr	r2, [r7, #12]
 80171a4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	681b      	ldr	r3, [r3, #0]
 80171ac:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80171ae:	2001      	movs	r0, #1
 80171b0:	f7fe f87e 	bl	80152b0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	681b      	ldr	r3, [r3, #0]
 80171b8:	68fa      	ldr	r2, [r7, #12]
 80171ba:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80171bc:	687b      	ldr	r3, [r7, #4]
 80171be:	681b      	ldr	r3, [r3, #0]
 80171c0:	699b      	ldr	r3, [r3, #24]
 80171c2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80171c4:	68fa      	ldr	r2, [r7, #12]
 80171c6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80171ca:	4013      	ands	r3, r2
 80171cc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80171ce:	683b      	ldr	r3, [r7, #0]
 80171d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80171d2:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80171d4:	683a      	ldr	r2, [r7, #0]
 80171d6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80171da:	2a00      	cmp	r2, #0
 80171dc:	d101      	bne.n	80171e2 <ETH_SetMACConfig+0xee>
 80171de:	2280      	movs	r2, #128	; 0x80
 80171e0:	e000      	b.n	80171e4 <ETH_SetMACConfig+0xf0>
 80171e2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80171e4:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80171e6:	683b      	ldr	r3, [r7, #0]
 80171e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80171ea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80171ec:	683a      	ldr	r2, [r7, #0]
 80171ee:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80171f2:	2a01      	cmp	r2, #1
 80171f4:	d101      	bne.n	80171fa <ETH_SetMACConfig+0x106>
 80171f6:	2208      	movs	r2, #8
 80171f8:	e000      	b.n	80171fc <ETH_SetMACConfig+0x108>
 80171fa:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80171fc:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80171fe:	683a      	ldr	r2, [r7, #0]
 8017200:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8017204:	2a01      	cmp	r2, #1
 8017206:	d101      	bne.n	801720c <ETH_SetMACConfig+0x118>
 8017208:	2204      	movs	r2, #4
 801720a:	e000      	b.n	801720e <ETH_SetMACConfig+0x11a>
 801720c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 801720e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8017210:	683a      	ldr	r2, [r7, #0]
 8017212:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8017216:	2a01      	cmp	r2, #1
 8017218:	d101      	bne.n	801721e <ETH_SetMACConfig+0x12a>
 801721a:	2202      	movs	r2, #2
 801721c:	e000      	b.n	8017220 <ETH_SetMACConfig+0x12c>
 801721e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8017220:	4313      	orrs	r3, r2
 8017222:	68fa      	ldr	r2, [r7, #12]
 8017224:	4313      	orrs	r3, r2
 8017226:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8017228:	687b      	ldr	r3, [r7, #4]
 801722a:	681b      	ldr	r3, [r3, #0]
 801722c:	68fa      	ldr	r2, [r7, #12]
 801722e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	699b      	ldr	r3, [r3, #24]
 8017236:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017238:	2001      	movs	r0, #1
 801723a:	f7fe f839 	bl	80152b0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681b      	ldr	r3, [r3, #0]
 8017242:	68fa      	ldr	r2, [r7, #12]
 8017244:	619a      	str	r2, [r3, #24]
}
 8017246:	bf00      	nop
 8017248:	3710      	adds	r7, #16
 801724a:	46bd      	mov	sp, r7
 801724c:	bd80      	pop	{r7, pc}
 801724e:	bf00      	nop
 8017250:	ff20810f 	.word	0xff20810f

08017254 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8017254:	b580      	push	{r7, lr}
 8017256:	b084      	sub	sp, #16
 8017258:	af00      	add	r7, sp, #0
 801725a:	6078      	str	r0, [r7, #4]
 801725c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	681b      	ldr	r3, [r3, #0]
 8017262:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017266:	699b      	ldr	r3, [r3, #24]
 8017268:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 801726a:	68fa      	ldr	r2, [r7, #12]
 801726c:	4b3d      	ldr	r3, [pc, #244]	; (8017364 <ETH_SetDMAConfig+0x110>)
 801726e:	4013      	ands	r3, r2
 8017270:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	7b1b      	ldrb	r3, [r3, #12]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d102      	bne.n	8017280 <ETH_SetDMAConfig+0x2c>
 801727a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 801727e:	e000      	b.n	8017282 <ETH_SetDMAConfig+0x2e>
 8017280:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8017282:	683b      	ldr	r3, [r7, #0]
 8017284:	7b5b      	ldrb	r3, [r3, #13]
 8017286:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8017288:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 801728a:	683a      	ldr	r2, [r7, #0]
 801728c:	7f52      	ldrb	r2, [r2, #29]
 801728e:	2a00      	cmp	r2, #0
 8017290:	d102      	bne.n	8017298 <ETH_SetDMAConfig+0x44>
 8017292:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8017296:	e000      	b.n	801729a <ETH_SetDMAConfig+0x46>
 8017298:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 801729a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	7b9b      	ldrb	r3, [r3, #14]
 80172a0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80172a2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80172a4:	683b      	ldr	r3, [r7, #0]
 80172a6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80172a8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80172aa:	683b      	ldr	r3, [r7, #0]
 80172ac:	7f1b      	ldrb	r3, [r3, #28]
 80172ae:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80172b0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80172b2:	683b      	ldr	r3, [r7, #0]
 80172b4:	7f9b      	ldrb	r3, [r3, #30]
 80172b6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80172b8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80172ba:	683b      	ldr	r3, [r7, #0]
 80172bc:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80172be:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80172c0:	683b      	ldr	r3, [r7, #0]
 80172c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80172c6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80172c8:	4313      	orrs	r3, r2
 80172ca:	68fa      	ldr	r2, [r7, #12]
 80172cc:	4313      	orrs	r3, r2
 80172ce:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172d8:	461a      	mov	r2, r3
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80172de:	687b      	ldr	r3, [r7, #4]
 80172e0:	681b      	ldr	r3, [r3, #0]
 80172e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172e6:	699b      	ldr	r3, [r3, #24]
 80172e8:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80172ea:	2001      	movs	r0, #1
 80172ec:	f7fd ffe0 	bl	80152b0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 80172f0:	687b      	ldr	r3, [r7, #4]
 80172f2:	681b      	ldr	r3, [r3, #0]
 80172f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80172f8:	461a      	mov	r2, r3
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80172fe:	683b      	ldr	r3, [r7, #0]
 8017300:	791b      	ldrb	r3, [r3, #4]
 8017302:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8017304:	683b      	ldr	r3, [r7, #0]
 8017306:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8017308:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 801730a:	683b      	ldr	r3, [r7, #0]
 801730c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 801730e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8017310:	683b      	ldr	r3, [r7, #0]
 8017312:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8017314:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8017316:	683b      	ldr	r3, [r7, #0]
 8017318:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 801731c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 801731e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8017320:	683b      	ldr	r3, [r7, #0]
 8017322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8017324:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8017326:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8017328:	683b      	ldr	r3, [r7, #0]
 801732a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 801732c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 801732e:	687a      	ldr	r2, [r7, #4]
 8017330:	6812      	ldr	r2, [r2, #0]
 8017332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8017336:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 801733a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 801733c:	687b      	ldr	r3, [r7, #4]
 801733e:	681b      	ldr	r3, [r3, #0]
 8017340:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017344:	681b      	ldr	r3, [r3, #0]
 8017346:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8017348:	2001      	movs	r0, #1
 801734a:	f7fd ffb1 	bl	80152b0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 801734e:	687b      	ldr	r3, [r7, #4]
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017356:	461a      	mov	r2, r3
 8017358:	68fb      	ldr	r3, [r7, #12]
 801735a:	6013      	str	r3, [r2, #0]
}
 801735c:	bf00      	nop
 801735e:	3710      	adds	r7, #16
 8017360:	46bd      	mov	sp, r7
 8017362:	bd80      	pop	{r7, pc}
 8017364:	f8de3f23 	.word	0xf8de3f23

08017368 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8017368:	b580      	push	{r7, lr}
 801736a:	b0a6      	sub	sp, #152	; 0x98
 801736c:	af00      	add	r7, sp, #0
 801736e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8017370:	2301      	movs	r3, #1
 8017372:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8017376:	2301      	movs	r3, #1
 8017378:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 801737c:	2300      	movs	r3, #0
 801737e:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8017380:	2300      	movs	r3, #0
 8017382:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8017386:	2301      	movs	r3, #1
 8017388:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 801738c:	2300      	movs	r3, #0
 801738e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8017392:	2301      	movs	r3, #1
 8017394:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8017398:	2300      	movs	r3, #0
 801739a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 801739e:	2300      	movs	r3, #0
 80173a0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80173a4:	2300      	movs	r3, #0
 80173a6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80173a8:	2300      	movs	r3, #0
 80173aa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80173ae:	2300      	movs	r3, #0
 80173b0:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80173b2:	2300      	movs	r3, #0
 80173b4:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80173b8:	2300      	movs	r3, #0
 80173ba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80173be:	2300      	movs	r3, #0
 80173c0:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80173c4:	2300      	movs	r3, #0
 80173c6:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 80173ca:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80173ce:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80173d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80173d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80173d6:	2300      	movs	r3, #0
 80173d8:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80173dc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80173e0:	4619      	mov	r1, r3
 80173e2:	6878      	ldr	r0, [r7, #4]
 80173e4:	f7ff fe86 	bl	80170f4 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 80173e8:	2301      	movs	r3, #1
 80173ea:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 80173ec:	2301      	movs	r3, #1
 80173ee:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 80173f0:	2301      	movs	r3, #1
 80173f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80173f6:	2301      	movs	r3, #1
 80173f8:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80173fa:	2300      	movs	r3, #0
 80173fc:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80173fe:	2300      	movs	r3, #0
 8017400:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8017404:	2300      	movs	r3, #0
 8017406:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 801740a:	2300      	movs	r3, #0
 801740c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 801740e:	2301      	movs	r3, #1
 8017410:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8017414:	2301      	movs	r3, #1
 8017416:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8017418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801741c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801741e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8017422:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8017424:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017428:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 801742a:	2301      	movs	r3, #1
 801742c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8017430:	2300      	movs	r3, #0
 8017432:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8017434:	2300      	movs	r3, #0
 8017436:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8017438:	f107 0308 	add.w	r3, r7, #8
 801743c:	4619      	mov	r1, r3
 801743e:	6878      	ldr	r0, [r7, #4]
 8017440:	f7ff ff08 	bl	8017254 <ETH_SetDMAConfig>
}
 8017444:	bf00      	nop
 8017446:	3798      	adds	r7, #152	; 0x98
 8017448:	46bd      	mov	sp, r7
 801744a:	bd80      	pop	{r7, pc}

0801744c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 801744c:	b480      	push	{r7}
 801744e:	b087      	sub	sp, #28
 8017450:	af00      	add	r7, sp, #0
 8017452:	60f8      	str	r0, [r7, #12]
 8017454:	60b9      	str	r1, [r7, #8]
 8017456:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8017458:	687b      	ldr	r3, [r7, #4]
 801745a:	3305      	adds	r3, #5
 801745c:	781b      	ldrb	r3, [r3, #0]
 801745e:	021b      	lsls	r3, r3, #8
 8017460:	687a      	ldr	r2, [r7, #4]
 8017462:	3204      	adds	r2, #4
 8017464:	7812      	ldrb	r2, [r2, #0]
 8017466:	4313      	orrs	r3, r2
 8017468:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 801746a:	68ba      	ldr	r2, [r7, #8]
 801746c:	4b11      	ldr	r3, [pc, #68]	; (80174b4 <ETH_MACAddressConfig+0x68>)
 801746e:	4413      	add	r3, r2
 8017470:	461a      	mov	r2, r3
 8017472:	697b      	ldr	r3, [r7, #20]
 8017474:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8017476:	687b      	ldr	r3, [r7, #4]
 8017478:	3303      	adds	r3, #3
 801747a:	781b      	ldrb	r3, [r3, #0]
 801747c:	061a      	lsls	r2, r3, #24
 801747e:	687b      	ldr	r3, [r7, #4]
 8017480:	3302      	adds	r3, #2
 8017482:	781b      	ldrb	r3, [r3, #0]
 8017484:	041b      	lsls	r3, r3, #16
 8017486:	431a      	orrs	r2, r3
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	3301      	adds	r3, #1
 801748c:	781b      	ldrb	r3, [r3, #0]
 801748e:	021b      	lsls	r3, r3, #8
 8017490:	4313      	orrs	r3, r2
 8017492:	687a      	ldr	r2, [r7, #4]
 8017494:	7812      	ldrb	r2, [r2, #0]
 8017496:	4313      	orrs	r3, r2
 8017498:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 801749a:	68ba      	ldr	r2, [r7, #8]
 801749c:	4b06      	ldr	r3, [pc, #24]	; (80174b8 <ETH_MACAddressConfig+0x6c>)
 801749e:	4413      	add	r3, r2
 80174a0:	461a      	mov	r2, r3
 80174a2:	697b      	ldr	r3, [r7, #20]
 80174a4:	6013      	str	r3, [r2, #0]
}
 80174a6:	bf00      	nop
 80174a8:	371c      	adds	r7, #28
 80174aa:	46bd      	mov	sp, r7
 80174ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b0:	4770      	bx	lr
 80174b2:	bf00      	nop
 80174b4:	40028040 	.word	0x40028040
 80174b8:	40028044 	.word	0x40028044

080174bc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80174bc:	b480      	push	{r7}
 80174be:	b085      	sub	sp, #20
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80174c4:	2300      	movs	r3, #0
 80174c6:	60fb      	str	r3, [r7, #12]
 80174c8:	e03e      	b.n	8017548 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	68d9      	ldr	r1, [r3, #12]
 80174ce:	68fa      	ldr	r2, [r7, #12]
 80174d0:	4613      	mov	r3, r2
 80174d2:	009b      	lsls	r3, r3, #2
 80174d4:	4413      	add	r3, r2
 80174d6:	00db      	lsls	r3, r3, #3
 80174d8:	440b      	add	r3, r1
 80174da:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80174dc:	68bb      	ldr	r3, [r7, #8]
 80174de:	2200      	movs	r2, #0
 80174e0:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80174e2:	68bb      	ldr	r3, [r7, #8]
 80174e4:	2200      	movs	r2, #0
 80174e6:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80174e8:	68bb      	ldr	r3, [r7, #8]
 80174ea:	2200      	movs	r2, #0
 80174ec:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80174ee:	68bb      	ldr	r3, [r7, #8]
 80174f0:	2200      	movs	r2, #0
 80174f2:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80174f4:	68b9      	ldr	r1, [r7, #8]
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	68fa      	ldr	r2, [r7, #12]
 80174fa:	3206      	adds	r2, #6
 80174fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8017500:	68bb      	ldr	r3, [r7, #8]
 8017502:	681b      	ldr	r3, [r3, #0]
 8017504:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8017508:	68bb      	ldr	r3, [r7, #8]
 801750a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 801750c:	68fb      	ldr	r3, [r7, #12]
 801750e:	2b02      	cmp	r3, #2
 8017510:	d80c      	bhi.n	801752c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8017512:	687b      	ldr	r3, [r7, #4]
 8017514:	68d9      	ldr	r1, [r3, #12]
 8017516:	68fb      	ldr	r3, [r7, #12]
 8017518:	1c5a      	adds	r2, r3, #1
 801751a:	4613      	mov	r3, r2
 801751c:	009b      	lsls	r3, r3, #2
 801751e:	4413      	add	r3, r2
 8017520:	00db      	lsls	r3, r3, #3
 8017522:	440b      	add	r3, r1
 8017524:	461a      	mov	r2, r3
 8017526:	68bb      	ldr	r3, [r7, #8]
 8017528:	60da      	str	r2, [r3, #12]
 801752a:	e004      	b.n	8017536 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	68db      	ldr	r3, [r3, #12]
 8017530:	461a      	mov	r2, r3
 8017532:	68bb      	ldr	r3, [r7, #8]
 8017534:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8017536:	68bb      	ldr	r3, [r7, #8]
 8017538:	681b      	ldr	r3, [r3, #0]
 801753a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 801753e:	68bb      	ldr	r3, [r7, #8]
 8017540:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8017542:	68fb      	ldr	r3, [r7, #12]
 8017544:	3301      	adds	r3, #1
 8017546:	60fb      	str	r3, [r7, #12]
 8017548:	68fb      	ldr	r3, [r7, #12]
 801754a:	2b03      	cmp	r3, #3
 801754c:	d9bd      	bls.n	80174ca <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 801754e:	687b      	ldr	r3, [r7, #4]
 8017550:	2200      	movs	r2, #0
 8017552:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8017554:	687b      	ldr	r3, [r7, #4]
 8017556:	68da      	ldr	r2, [r3, #12]
 8017558:	687b      	ldr	r3, [r7, #4]
 801755a:	681b      	ldr	r3, [r3, #0]
 801755c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8017560:	611a      	str	r2, [r3, #16]
}
 8017562:	bf00      	nop
 8017564:	3714      	adds	r7, #20
 8017566:	46bd      	mov	sp, r7
 8017568:	f85d 7b04 	ldr.w	r7, [sp], #4
 801756c:	4770      	bx	lr

0801756e <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 801756e:	b480      	push	{r7}
 8017570:	b085      	sub	sp, #20
 8017572:	af00      	add	r7, sp, #0
 8017574:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017576:	2300      	movs	r3, #0
 8017578:	60fb      	str	r3, [r7, #12]
 801757a:	e046      	b.n	801760a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 801757c:	687b      	ldr	r3, [r7, #4]
 801757e:	6919      	ldr	r1, [r3, #16]
 8017580:	68fa      	ldr	r2, [r7, #12]
 8017582:	4613      	mov	r3, r2
 8017584:	009b      	lsls	r3, r3, #2
 8017586:	4413      	add	r3, r2
 8017588:	00db      	lsls	r3, r3, #3
 801758a:	440b      	add	r3, r1
 801758c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 801758e:	68bb      	ldr	r3, [r7, #8]
 8017590:	2200      	movs	r2, #0
 8017592:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8017594:	68bb      	ldr	r3, [r7, #8]
 8017596:	2200      	movs	r2, #0
 8017598:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 801759a:	68bb      	ldr	r3, [r7, #8]
 801759c:	2200      	movs	r2, #0
 801759e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80175a0:	68bb      	ldr	r3, [r7, #8]
 80175a2:	2200      	movs	r2, #0
 80175a4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80175a6:	68bb      	ldr	r3, [r7, #8]
 80175a8:	2200      	movs	r2, #0
 80175aa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80175ac:	68bb      	ldr	r3, [r7, #8]
 80175ae:	2200      	movs	r2, #0
 80175b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80175b2:	68bb      	ldr	r3, [r7, #8]
 80175b4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80175b8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 80175ba:	68bb      	ldr	r3, [r7, #8]
 80175bc:	f244 52f8 	movw	r2, #17912	; 0x45f8
 80175c0:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80175c2:	68bb      	ldr	r3, [r7, #8]
 80175c4:	685b      	ldr	r3, [r3, #4]
 80175c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80175ca:	68bb      	ldr	r3, [r7, #8]
 80175cc:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80175ce:	68b9      	ldr	r1, [r7, #8]
 80175d0:	687b      	ldr	r3, [r7, #4]
 80175d2:	68fa      	ldr	r2, [r7, #12]
 80175d4:	3212      	adds	r2, #18
 80175d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 80175da:	68fb      	ldr	r3, [r7, #12]
 80175dc:	2b02      	cmp	r3, #2
 80175de:	d80c      	bhi.n	80175fa <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 80175e0:	687b      	ldr	r3, [r7, #4]
 80175e2:	6919      	ldr	r1, [r3, #16]
 80175e4:	68fb      	ldr	r3, [r7, #12]
 80175e6:	1c5a      	adds	r2, r3, #1
 80175e8:	4613      	mov	r3, r2
 80175ea:	009b      	lsls	r3, r3, #2
 80175ec:	4413      	add	r3, r2
 80175ee:	00db      	lsls	r3, r3, #3
 80175f0:	440b      	add	r3, r1
 80175f2:	461a      	mov	r2, r3
 80175f4:	68bb      	ldr	r3, [r7, #8]
 80175f6:	60da      	str	r2, [r3, #12]
 80175f8:	e004      	b.n	8017604 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80175fa:	687b      	ldr	r3, [r7, #4]
 80175fc:	691b      	ldr	r3, [r3, #16]
 80175fe:	461a      	mov	r2, r3
 8017600:	68bb      	ldr	r3, [r7, #8]
 8017602:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8017604:	68fb      	ldr	r3, [r7, #12]
 8017606:	3301      	adds	r3, #1
 8017608:	60fb      	str	r3, [r7, #12]
 801760a:	68fb      	ldr	r3, [r7, #12]
 801760c:	2b03      	cmp	r3, #3
 801760e:	d9b5      	bls.n	801757c <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8017610:	687b      	ldr	r3, [r7, #4]
 8017612:	2200      	movs	r2, #0
 8017614:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8017616:	687b      	ldr	r3, [r7, #4]
 8017618:	2200      	movs	r2, #0
 801761a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 801761c:	687b      	ldr	r3, [r7, #4]
 801761e:	2200      	movs	r2, #0
 8017620:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8017622:	687b      	ldr	r3, [r7, #4]
 8017624:	2200      	movs	r2, #0
 8017626:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	2200      	movs	r2, #0
 801762c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 801762e:	687b      	ldr	r3, [r7, #4]
 8017630:	691a      	ldr	r2, [r3, #16]
 8017632:	687b      	ldr	r3, [r7, #4]
 8017634:	681b      	ldr	r3, [r3, #0]
 8017636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801763a:	60da      	str	r2, [r3, #12]
}
 801763c:	bf00      	nop
 801763e:	3714      	adds	r7, #20
 8017640:	46bd      	mov	sp, r7
 8017642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017646:	4770      	bx	lr

08017648 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8017648:	b480      	push	{r7}
 801764a:	b08d      	sub	sp, #52	; 0x34
 801764c:	af00      	add	r7, sp, #0
 801764e:	60f8      	str	r0, [r7, #12]
 8017650:	60b9      	str	r1, [r7, #8]
 8017652:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	3318      	adds	r3, #24
 8017658:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 801765a:	697b      	ldr	r3, [r7, #20]
 801765c:	691b      	ldr	r3, [r3, #16]
 801765e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8017660:	697b      	ldr	r3, [r7, #20]
 8017662:	691b      	ldr	r3, [r3, #16]
 8017664:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8017666:	2300      	movs	r3, #0
 8017668:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 801766a:	697b      	ldr	r3, [r7, #20]
 801766c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801766e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017672:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8017674:	68bb      	ldr	r3, [r7, #8]
 8017676:	689b      	ldr	r3, [r3, #8]
 8017678:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 801767a:	2300      	movs	r3, #0
 801767c:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801767e:	6a3b      	ldr	r3, [r7, #32]
 8017680:	681b      	ldr	r3, [r3, #0]
 8017682:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017686:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801768a:	d007      	beq.n	801769c <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 801768c:	697a      	ldr	r2, [r7, #20]
 801768e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017690:	3304      	adds	r3, #4
 8017692:	009b      	lsls	r3, r3, #2
 8017694:	4413      	add	r3, r2
 8017696:	685b      	ldr	r3, [r3, #4]
 8017698:	2b00      	cmp	r3, #0
 801769a:	d001      	beq.n	80176a0 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 801769c:	2302      	movs	r3, #2
 801769e:	e0ff      	b.n	80178a0 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 80176a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80176a2:	3301      	adds	r3, #1
 80176a4:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80176a6:	69fb      	ldr	r3, [r7, #28]
 80176a8:	681b      	ldr	r3, [r3, #0]
 80176aa:	461a      	mov	r2, r3
 80176ac:	6a3b      	ldr	r3, [r7, #32]
 80176ae:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80176b0:	6a3b      	ldr	r3, [r7, #32]
 80176b2:	685a      	ldr	r2, [r3, #4]
 80176b4:	4b7d      	ldr	r3, [pc, #500]	; (80178ac <ETH_Prepare_Tx_Descriptors+0x264>)
 80176b6:	4013      	ands	r3, r2
 80176b8:	69fa      	ldr	r2, [r7, #28]
 80176ba:	6852      	ldr	r2, [r2, #4]
 80176bc:	431a      	orrs	r2, r3
 80176be:	6a3b      	ldr	r3, [r7, #32]
 80176c0:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80176c2:	68bb      	ldr	r3, [r7, #8]
 80176c4:	681b      	ldr	r3, [r3, #0]
 80176c6:	f003 0301 	and.w	r3, r3, #1
 80176ca:	2b00      	cmp	r3, #0
 80176cc:	d008      	beq.n	80176e0 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 80176ce:	6a3b      	ldr	r3, [r7, #32]
 80176d0:	681b      	ldr	r3, [r3, #0]
 80176d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80176d6:	68bb      	ldr	r3, [r7, #8]
 80176d8:	695b      	ldr	r3, [r3, #20]
 80176da:	431a      	orrs	r2, r3
 80176dc:	6a3b      	ldr	r3, [r7, #32]
 80176de:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 80176e0:	68bb      	ldr	r3, [r7, #8]
 80176e2:	681b      	ldr	r3, [r3, #0]
 80176e4:	f003 0320 	and.w	r3, r3, #32
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d008      	beq.n	80176fe <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 80176ec:	6a3b      	ldr	r3, [r7, #32]
 80176ee:	681b      	ldr	r3, [r3, #0]
 80176f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80176f4:	68bb      	ldr	r3, [r7, #8]
 80176f6:	691b      	ldr	r3, [r3, #16]
 80176f8:	431a      	orrs	r2, r3
 80176fa:	6a3b      	ldr	r3, [r7, #32]
 80176fc:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80176fe:	68bb      	ldr	r3, [r7, #8]
 8017700:	681b      	ldr	r3, [r3, #0]
 8017702:	f003 0304 	and.w	r3, r3, #4
 8017706:	2b00      	cmp	r3, #0
 8017708:	d005      	beq.n	8017716 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 801770a:	6a3b      	ldr	r3, [r7, #32]
 801770c:	681b      	ldr	r3, [r3, #0]
 801770e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8017712:	6a3b      	ldr	r3, [r7, #32]
 8017714:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8017716:	6a3b      	ldr	r3, [r7, #32]
 8017718:	681b      	ldr	r3, [r3, #0]
 801771a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 801771e:	6a3b      	ldr	r3, [r7, #32]
 8017720:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8017722:	f3bf 8f5f 	dmb	sy
}
 8017726:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017728:	6a3b      	ldr	r3, [r7, #32]
 801772a:	681b      	ldr	r3, [r3, #0]
 801772c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017730:	6a3b      	ldr	r3, [r7, #32]
 8017732:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8017734:	e082      	b.n	801783c <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017736:	6a3b      	ldr	r3, [r7, #32]
 8017738:	681b      	ldr	r3, [r3, #0]
 801773a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801773e:	6a3b      	ldr	r3, [r7, #32]
 8017740:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	2b00      	cmp	r3, #0
 8017746:	d006      	beq.n	8017756 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017748:	6a3b      	ldr	r3, [r7, #32]
 801774a:	681b      	ldr	r3, [r3, #0]
 801774c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017750:	6a3b      	ldr	r3, [r7, #32]
 8017752:	601a      	str	r2, [r3, #0]
 8017754:	e005      	b.n	8017762 <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8017756:	6a3b      	ldr	r3, [r7, #32]
 8017758:	681b      	ldr	r3, [r3, #0]
 801775a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 801775e:	6a3b      	ldr	r3, [r7, #32]
 8017760:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8017762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017764:	3301      	adds	r3, #1
 8017766:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017768:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801776a:	2b03      	cmp	r3, #3
 801776c:	d902      	bls.n	8017774 <ETH_Prepare_Tx_Descriptors+0x12c>
 801776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017770:	3b04      	subs	r3, #4
 8017772:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8017774:	697b      	ldr	r3, [r7, #20]
 8017776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801777c:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 801777e:	6a3b      	ldr	r3, [r7, #32]
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8017786:	6a3b      	ldr	r3, [r7, #32]
 8017788:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 801778a:	6a3b      	ldr	r3, [r7, #32]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8017792:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8017796:	d007      	beq.n	80177a8 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8017798:	697a      	ldr	r2, [r7, #20]
 801779a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801779c:	3304      	adds	r3, #4
 801779e:	009b      	lsls	r3, r3, #2
 80177a0:	4413      	add	r3, r2
 80177a2:	685b      	ldr	r3, [r3, #4]
 80177a4:	2b00      	cmp	r3, #0
 80177a6:	d029      	beq.n	80177fc <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 80177a8:	693b      	ldr	r3, [r7, #16]
 80177aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80177ac:	697b      	ldr	r3, [r7, #20]
 80177ae:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177b4:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80177b6:	2300      	movs	r3, #0
 80177b8:	62bb      	str	r3, [r7, #40]	; 0x28
 80177ba:	e019      	b.n	80177f0 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 80177bc:	f3bf 8f5f 	dmb	sy
}
 80177c0:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80177c2:	6a3b      	ldr	r3, [r7, #32]
 80177c4:	681b      	ldr	r3, [r3, #0]
 80177c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80177ca:	6a3b      	ldr	r3, [r7, #32]
 80177cc:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80177ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d0:	3301      	adds	r3, #1
 80177d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80177d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177d6:	2b03      	cmp	r3, #3
 80177d8:	d902      	bls.n	80177e0 <ETH_Prepare_Tx_Descriptors+0x198>
 80177da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80177dc:	3b04      	subs	r3, #4
 80177de:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80177e0:	697b      	ldr	r3, [r7, #20]
 80177e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80177e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80177e8:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80177ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177ec:	3301      	adds	r3, #1
 80177ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80177f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80177f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177f4:	429a      	cmp	r2, r3
 80177f6:	d3e1      	bcc.n	80177bc <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80177f8:	2302      	movs	r3, #2
 80177fa:	e051      	b.n	80178a0 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80177fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80177fe:	3301      	adds	r3, #1
 8017800:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8017802:	69fb      	ldr	r3, [r7, #28]
 8017804:	689b      	ldr	r3, [r3, #8]
 8017806:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8017808:	69fb      	ldr	r3, [r7, #28]
 801780a:	681b      	ldr	r3, [r3, #0]
 801780c:	461a      	mov	r2, r3
 801780e:	6a3b      	ldr	r3, [r7, #32]
 8017810:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8017812:	6a3b      	ldr	r3, [r7, #32]
 8017814:	685a      	ldr	r2, [r3, #4]
 8017816:	4b25      	ldr	r3, [pc, #148]	; (80178ac <ETH_Prepare_Tx_Descriptors+0x264>)
 8017818:	4013      	ands	r3, r2
 801781a:	69fa      	ldr	r2, [r7, #28]
 801781c:	6852      	ldr	r2, [r2, #4]
 801781e:	431a      	orrs	r2, r3
 8017820:	6a3b      	ldr	r3, [r7, #32]
 8017822:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8017824:	69bb      	ldr	r3, [r7, #24]
 8017826:	3301      	adds	r3, #1
 8017828:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 801782a:	f3bf 8f5f 	dmb	sy
}
 801782e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8017830:	6a3b      	ldr	r3, [r7, #32]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8017838:	6a3b      	ldr	r3, [r7, #32]
 801783a:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 801783c:	69fb      	ldr	r3, [r7, #28]
 801783e:	689b      	ldr	r3, [r3, #8]
 8017840:	2b00      	cmp	r3, #0
 8017842:	f47f af78 	bne.w	8017736 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 8017846:	687b      	ldr	r3, [r7, #4]
 8017848:	2b00      	cmp	r3, #0
 801784a:	d006      	beq.n	801785a <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801784c:	6a3b      	ldr	r3, [r7, #32]
 801784e:	681b      	ldr	r3, [r3, #0]
 8017850:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8017854:	6a3b      	ldr	r3, [r7, #32]
 8017856:	601a      	str	r2, [r3, #0]
 8017858:	e005      	b.n	8017866 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 801785a:	6a3b      	ldr	r3, [r7, #32]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8017862:	6a3b      	ldr	r3, [r7, #32]
 8017864:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8017866:	6a3b      	ldr	r3, [r7, #32]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 801786e:	6a3b      	ldr	r3, [r7, #32]
 8017870:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8017872:	697b      	ldr	r3, [r7, #20]
 8017874:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017876:	6979      	ldr	r1, [r7, #20]
 8017878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801787a:	3304      	adds	r3, #4
 801787c:	009b      	lsls	r3, r3, #2
 801787e:	440b      	add	r3, r1
 8017880:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8017882:	697b      	ldr	r3, [r7, #20]
 8017884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8017886:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8017888:	b672      	cpsid	i
}
 801788a:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 801788c:	697b      	ldr	r3, [r7, #20]
 801788e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8017890:	69bb      	ldr	r3, [r7, #24]
 8017892:	4413      	add	r3, r2
 8017894:	1c5a      	adds	r2, r3, #1
 8017896:	697b      	ldr	r3, [r7, #20]
 8017898:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 801789a:	b662      	cpsie	i
}
 801789c:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 801789e:	2300      	movs	r3, #0
}
 80178a0:	4618      	mov	r0, r3
 80178a2:	3734      	adds	r7, #52	; 0x34
 80178a4:	46bd      	mov	sp, r7
 80178a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178aa:	4770      	bx	lr
 80178ac:	ffffe000 	.word	0xffffe000

080178b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80178b0:	b480      	push	{r7}
 80178b2:	b089      	sub	sp, #36	; 0x24
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	6078      	str	r0, [r7, #4]
 80178b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80178ba:	2300      	movs	r3, #0
 80178bc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80178be:	2300      	movs	r3, #0
 80178c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80178c2:	2300      	movs	r3, #0
 80178c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80178c6:	2300      	movs	r3, #0
 80178c8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80178ca:	2300      	movs	r3, #0
 80178cc:	61fb      	str	r3, [r7, #28]
 80178ce:	e175      	b.n	8017bbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80178d0:	2201      	movs	r2, #1
 80178d2:	69fb      	ldr	r3, [r7, #28]
 80178d4:	fa02 f303 	lsl.w	r3, r2, r3
 80178d8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80178da:	683b      	ldr	r3, [r7, #0]
 80178dc:	681b      	ldr	r3, [r3, #0]
 80178de:	697a      	ldr	r2, [r7, #20]
 80178e0:	4013      	ands	r3, r2
 80178e2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80178e4:	693a      	ldr	r2, [r7, #16]
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	429a      	cmp	r2, r3
 80178ea:	f040 8164 	bne.w	8017bb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80178ee:	683b      	ldr	r3, [r7, #0]
 80178f0:	685b      	ldr	r3, [r3, #4]
 80178f2:	f003 0303 	and.w	r3, r3, #3
 80178f6:	2b01      	cmp	r3, #1
 80178f8:	d005      	beq.n	8017906 <HAL_GPIO_Init+0x56>
 80178fa:	683b      	ldr	r3, [r7, #0]
 80178fc:	685b      	ldr	r3, [r3, #4]
 80178fe:	f003 0303 	and.w	r3, r3, #3
 8017902:	2b02      	cmp	r3, #2
 8017904:	d130      	bne.n	8017968 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	689b      	ldr	r3, [r3, #8]
 801790a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 801790c:	69fb      	ldr	r3, [r7, #28]
 801790e:	005b      	lsls	r3, r3, #1
 8017910:	2203      	movs	r2, #3
 8017912:	fa02 f303 	lsl.w	r3, r2, r3
 8017916:	43db      	mvns	r3, r3
 8017918:	69ba      	ldr	r2, [r7, #24]
 801791a:	4013      	ands	r3, r2
 801791c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 801791e:	683b      	ldr	r3, [r7, #0]
 8017920:	68da      	ldr	r2, [r3, #12]
 8017922:	69fb      	ldr	r3, [r7, #28]
 8017924:	005b      	lsls	r3, r3, #1
 8017926:	fa02 f303 	lsl.w	r3, r2, r3
 801792a:	69ba      	ldr	r2, [r7, #24]
 801792c:	4313      	orrs	r3, r2
 801792e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	69ba      	ldr	r2, [r7, #24]
 8017934:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	685b      	ldr	r3, [r3, #4]
 801793a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 801793c:	2201      	movs	r2, #1
 801793e:	69fb      	ldr	r3, [r7, #28]
 8017940:	fa02 f303 	lsl.w	r3, r2, r3
 8017944:	43db      	mvns	r3, r3
 8017946:	69ba      	ldr	r2, [r7, #24]
 8017948:	4013      	ands	r3, r2
 801794a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801794c:	683b      	ldr	r3, [r7, #0]
 801794e:	685b      	ldr	r3, [r3, #4]
 8017950:	091b      	lsrs	r3, r3, #4
 8017952:	f003 0201 	and.w	r2, r3, #1
 8017956:	69fb      	ldr	r3, [r7, #28]
 8017958:	fa02 f303 	lsl.w	r3, r2, r3
 801795c:	69ba      	ldr	r2, [r7, #24]
 801795e:	4313      	orrs	r3, r2
 8017960:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	69ba      	ldr	r2, [r7, #24]
 8017966:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8017968:	683b      	ldr	r3, [r7, #0]
 801796a:	685b      	ldr	r3, [r3, #4]
 801796c:	f003 0303 	and.w	r3, r3, #3
 8017970:	2b03      	cmp	r3, #3
 8017972:	d017      	beq.n	80179a4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8017974:	687b      	ldr	r3, [r7, #4]
 8017976:	68db      	ldr	r3, [r3, #12]
 8017978:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 801797a:	69fb      	ldr	r3, [r7, #28]
 801797c:	005b      	lsls	r3, r3, #1
 801797e:	2203      	movs	r2, #3
 8017980:	fa02 f303 	lsl.w	r3, r2, r3
 8017984:	43db      	mvns	r3, r3
 8017986:	69ba      	ldr	r2, [r7, #24]
 8017988:	4013      	ands	r3, r2
 801798a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 801798c:	683b      	ldr	r3, [r7, #0]
 801798e:	689a      	ldr	r2, [r3, #8]
 8017990:	69fb      	ldr	r3, [r7, #28]
 8017992:	005b      	lsls	r3, r3, #1
 8017994:	fa02 f303 	lsl.w	r3, r2, r3
 8017998:	69ba      	ldr	r2, [r7, #24]
 801799a:	4313      	orrs	r3, r2
 801799c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	69ba      	ldr	r2, [r7, #24]
 80179a2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80179a4:	683b      	ldr	r3, [r7, #0]
 80179a6:	685b      	ldr	r3, [r3, #4]
 80179a8:	f003 0303 	and.w	r3, r3, #3
 80179ac:	2b02      	cmp	r3, #2
 80179ae:	d123      	bne.n	80179f8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80179b0:	69fb      	ldr	r3, [r7, #28]
 80179b2:	08da      	lsrs	r2, r3, #3
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	3208      	adds	r2, #8
 80179b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80179bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80179be:	69fb      	ldr	r3, [r7, #28]
 80179c0:	f003 0307 	and.w	r3, r3, #7
 80179c4:	009b      	lsls	r3, r3, #2
 80179c6:	220f      	movs	r2, #15
 80179c8:	fa02 f303 	lsl.w	r3, r2, r3
 80179cc:	43db      	mvns	r3, r3
 80179ce:	69ba      	ldr	r2, [r7, #24]
 80179d0:	4013      	ands	r3, r2
 80179d2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80179d4:	683b      	ldr	r3, [r7, #0]
 80179d6:	691a      	ldr	r2, [r3, #16]
 80179d8:	69fb      	ldr	r3, [r7, #28]
 80179da:	f003 0307 	and.w	r3, r3, #7
 80179de:	009b      	lsls	r3, r3, #2
 80179e0:	fa02 f303 	lsl.w	r3, r2, r3
 80179e4:	69ba      	ldr	r2, [r7, #24]
 80179e6:	4313      	orrs	r3, r2
 80179e8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80179ea:	69fb      	ldr	r3, [r7, #28]
 80179ec:	08da      	lsrs	r2, r3, #3
 80179ee:	687b      	ldr	r3, [r7, #4]
 80179f0:	3208      	adds	r2, #8
 80179f2:	69b9      	ldr	r1, [r7, #24]
 80179f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80179f8:	687b      	ldr	r3, [r7, #4]
 80179fa:	681b      	ldr	r3, [r3, #0]
 80179fc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80179fe:	69fb      	ldr	r3, [r7, #28]
 8017a00:	005b      	lsls	r3, r3, #1
 8017a02:	2203      	movs	r2, #3
 8017a04:	fa02 f303 	lsl.w	r3, r2, r3
 8017a08:	43db      	mvns	r3, r3
 8017a0a:	69ba      	ldr	r2, [r7, #24]
 8017a0c:	4013      	ands	r3, r2
 8017a0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8017a10:	683b      	ldr	r3, [r7, #0]
 8017a12:	685b      	ldr	r3, [r3, #4]
 8017a14:	f003 0203 	and.w	r2, r3, #3
 8017a18:	69fb      	ldr	r3, [r7, #28]
 8017a1a:	005b      	lsls	r3, r3, #1
 8017a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8017a20:	69ba      	ldr	r2, [r7, #24]
 8017a22:	4313      	orrs	r3, r2
 8017a24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017a26:	687b      	ldr	r3, [r7, #4]
 8017a28:	69ba      	ldr	r2, [r7, #24]
 8017a2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8017a2c:	683b      	ldr	r3, [r7, #0]
 8017a2e:	685b      	ldr	r3, [r3, #4]
 8017a30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8017a34:	2b00      	cmp	r3, #0
 8017a36:	f000 80be 	beq.w	8017bb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017a3a:	4b66      	ldr	r3, [pc, #408]	; (8017bd4 <HAL_GPIO_Init+0x324>)
 8017a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a3e:	4a65      	ldr	r2, [pc, #404]	; (8017bd4 <HAL_GPIO_Init+0x324>)
 8017a40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8017a44:	6453      	str	r3, [r2, #68]	; 0x44
 8017a46:	4b63      	ldr	r3, [pc, #396]	; (8017bd4 <HAL_GPIO_Init+0x324>)
 8017a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017a4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8017a4e:	60fb      	str	r3, [r7, #12]
 8017a50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8017a52:	4a61      	ldr	r2, [pc, #388]	; (8017bd8 <HAL_GPIO_Init+0x328>)
 8017a54:	69fb      	ldr	r3, [r7, #28]
 8017a56:	089b      	lsrs	r3, r3, #2
 8017a58:	3302      	adds	r3, #2
 8017a5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8017a60:	69fb      	ldr	r3, [r7, #28]
 8017a62:	f003 0303 	and.w	r3, r3, #3
 8017a66:	009b      	lsls	r3, r3, #2
 8017a68:	220f      	movs	r2, #15
 8017a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8017a6e:	43db      	mvns	r3, r3
 8017a70:	69ba      	ldr	r2, [r7, #24]
 8017a72:	4013      	ands	r3, r2
 8017a74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8017a76:	687b      	ldr	r3, [r7, #4]
 8017a78:	4a58      	ldr	r2, [pc, #352]	; (8017bdc <HAL_GPIO_Init+0x32c>)
 8017a7a:	4293      	cmp	r3, r2
 8017a7c:	d037      	beq.n	8017aee <HAL_GPIO_Init+0x23e>
 8017a7e:	687b      	ldr	r3, [r7, #4]
 8017a80:	4a57      	ldr	r2, [pc, #348]	; (8017be0 <HAL_GPIO_Init+0x330>)
 8017a82:	4293      	cmp	r3, r2
 8017a84:	d031      	beq.n	8017aea <HAL_GPIO_Init+0x23a>
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	4a56      	ldr	r2, [pc, #344]	; (8017be4 <HAL_GPIO_Init+0x334>)
 8017a8a:	4293      	cmp	r3, r2
 8017a8c:	d02b      	beq.n	8017ae6 <HAL_GPIO_Init+0x236>
 8017a8e:	687b      	ldr	r3, [r7, #4]
 8017a90:	4a55      	ldr	r2, [pc, #340]	; (8017be8 <HAL_GPIO_Init+0x338>)
 8017a92:	4293      	cmp	r3, r2
 8017a94:	d025      	beq.n	8017ae2 <HAL_GPIO_Init+0x232>
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	4a54      	ldr	r2, [pc, #336]	; (8017bec <HAL_GPIO_Init+0x33c>)
 8017a9a:	4293      	cmp	r3, r2
 8017a9c:	d01f      	beq.n	8017ade <HAL_GPIO_Init+0x22e>
 8017a9e:	687b      	ldr	r3, [r7, #4]
 8017aa0:	4a53      	ldr	r2, [pc, #332]	; (8017bf0 <HAL_GPIO_Init+0x340>)
 8017aa2:	4293      	cmp	r3, r2
 8017aa4:	d019      	beq.n	8017ada <HAL_GPIO_Init+0x22a>
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	4a52      	ldr	r2, [pc, #328]	; (8017bf4 <HAL_GPIO_Init+0x344>)
 8017aaa:	4293      	cmp	r3, r2
 8017aac:	d013      	beq.n	8017ad6 <HAL_GPIO_Init+0x226>
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	4a51      	ldr	r2, [pc, #324]	; (8017bf8 <HAL_GPIO_Init+0x348>)
 8017ab2:	4293      	cmp	r3, r2
 8017ab4:	d00d      	beq.n	8017ad2 <HAL_GPIO_Init+0x222>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	4a50      	ldr	r2, [pc, #320]	; (8017bfc <HAL_GPIO_Init+0x34c>)
 8017aba:	4293      	cmp	r3, r2
 8017abc:	d007      	beq.n	8017ace <HAL_GPIO_Init+0x21e>
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	4a4f      	ldr	r2, [pc, #316]	; (8017c00 <HAL_GPIO_Init+0x350>)
 8017ac2:	4293      	cmp	r3, r2
 8017ac4:	d101      	bne.n	8017aca <HAL_GPIO_Init+0x21a>
 8017ac6:	2309      	movs	r3, #9
 8017ac8:	e012      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017aca:	230a      	movs	r3, #10
 8017acc:	e010      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ace:	2308      	movs	r3, #8
 8017ad0:	e00e      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ad2:	2307      	movs	r3, #7
 8017ad4:	e00c      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ad6:	2306      	movs	r3, #6
 8017ad8:	e00a      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ada:	2305      	movs	r3, #5
 8017adc:	e008      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ade:	2304      	movs	r3, #4
 8017ae0:	e006      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ae2:	2303      	movs	r3, #3
 8017ae4:	e004      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017ae6:	2302      	movs	r3, #2
 8017ae8:	e002      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017aea:	2301      	movs	r3, #1
 8017aec:	e000      	b.n	8017af0 <HAL_GPIO_Init+0x240>
 8017aee:	2300      	movs	r3, #0
 8017af0:	69fa      	ldr	r2, [r7, #28]
 8017af2:	f002 0203 	and.w	r2, r2, #3
 8017af6:	0092      	lsls	r2, r2, #2
 8017af8:	4093      	lsls	r3, r2
 8017afa:	69ba      	ldr	r2, [r7, #24]
 8017afc:	4313      	orrs	r3, r2
 8017afe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8017b00:	4935      	ldr	r1, [pc, #212]	; (8017bd8 <HAL_GPIO_Init+0x328>)
 8017b02:	69fb      	ldr	r3, [r7, #28]
 8017b04:	089b      	lsrs	r3, r3, #2
 8017b06:	3302      	adds	r3, #2
 8017b08:	69ba      	ldr	r2, [r7, #24]
 8017b0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8017b0e:	4b3d      	ldr	r3, [pc, #244]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b10:	689b      	ldr	r3, [r3, #8]
 8017b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017b14:	693b      	ldr	r3, [r7, #16]
 8017b16:	43db      	mvns	r3, r3
 8017b18:	69ba      	ldr	r2, [r7, #24]
 8017b1a:	4013      	ands	r3, r2
 8017b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8017b1e:	683b      	ldr	r3, [r7, #0]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d003      	beq.n	8017b32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8017b2a:	69ba      	ldr	r2, [r7, #24]
 8017b2c:	693b      	ldr	r3, [r7, #16]
 8017b2e:	4313      	orrs	r3, r2
 8017b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8017b32:	4a34      	ldr	r2, [pc, #208]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b34:	69bb      	ldr	r3, [r7, #24]
 8017b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8017b38:	4b32      	ldr	r3, [pc, #200]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b3a:	68db      	ldr	r3, [r3, #12]
 8017b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017b3e:	693b      	ldr	r3, [r7, #16]
 8017b40:	43db      	mvns	r3, r3
 8017b42:	69ba      	ldr	r2, [r7, #24]
 8017b44:	4013      	ands	r3, r2
 8017b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8017b48:	683b      	ldr	r3, [r7, #0]
 8017b4a:	685b      	ldr	r3, [r3, #4]
 8017b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d003      	beq.n	8017b5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8017b54:	69ba      	ldr	r2, [r7, #24]
 8017b56:	693b      	ldr	r3, [r7, #16]
 8017b58:	4313      	orrs	r3, r2
 8017b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8017b5c:	4a29      	ldr	r2, [pc, #164]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8017b62:	4b28      	ldr	r3, [pc, #160]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b64:	685b      	ldr	r3, [r3, #4]
 8017b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017b68:	693b      	ldr	r3, [r7, #16]
 8017b6a:	43db      	mvns	r3, r3
 8017b6c:	69ba      	ldr	r2, [r7, #24]
 8017b6e:	4013      	ands	r3, r2
 8017b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8017b72:	683b      	ldr	r3, [r7, #0]
 8017b74:	685b      	ldr	r3, [r3, #4]
 8017b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8017b7a:	2b00      	cmp	r3, #0
 8017b7c:	d003      	beq.n	8017b86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8017b7e:	69ba      	ldr	r2, [r7, #24]
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	4313      	orrs	r3, r2
 8017b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8017b86:	4a1f      	ldr	r2, [pc, #124]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b88:	69bb      	ldr	r3, [r7, #24]
 8017b8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8017b8c:	4b1d      	ldr	r3, [pc, #116]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8017b92:	693b      	ldr	r3, [r7, #16]
 8017b94:	43db      	mvns	r3, r3
 8017b96:	69ba      	ldr	r2, [r7, #24]
 8017b98:	4013      	ands	r3, r2
 8017b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8017b9c:	683b      	ldr	r3, [r7, #0]
 8017b9e:	685b      	ldr	r3, [r3, #4]
 8017ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8017ba4:	2b00      	cmp	r3, #0
 8017ba6:	d003      	beq.n	8017bb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8017ba8:	69ba      	ldr	r2, [r7, #24]
 8017baa:	693b      	ldr	r3, [r7, #16]
 8017bac:	4313      	orrs	r3, r2
 8017bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8017bb0:	4a14      	ldr	r2, [pc, #80]	; (8017c04 <HAL_GPIO_Init+0x354>)
 8017bb2:	69bb      	ldr	r3, [r7, #24]
 8017bb4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8017bb6:	69fb      	ldr	r3, [r7, #28]
 8017bb8:	3301      	adds	r3, #1
 8017bba:	61fb      	str	r3, [r7, #28]
 8017bbc:	69fb      	ldr	r3, [r7, #28]
 8017bbe:	2b0f      	cmp	r3, #15
 8017bc0:	f67f ae86 	bls.w	80178d0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8017bc4:	bf00      	nop
 8017bc6:	bf00      	nop
 8017bc8:	3724      	adds	r7, #36	; 0x24
 8017bca:	46bd      	mov	sp, r7
 8017bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bd0:	4770      	bx	lr
 8017bd2:	bf00      	nop
 8017bd4:	40023800 	.word	0x40023800
 8017bd8:	40013800 	.word	0x40013800
 8017bdc:	40020000 	.word	0x40020000
 8017be0:	40020400 	.word	0x40020400
 8017be4:	40020800 	.word	0x40020800
 8017be8:	40020c00 	.word	0x40020c00
 8017bec:	40021000 	.word	0x40021000
 8017bf0:	40021400 	.word	0x40021400
 8017bf4:	40021800 	.word	0x40021800
 8017bf8:	40021c00 	.word	0x40021c00
 8017bfc:	40022000 	.word	0x40022000
 8017c00:	40022400 	.word	0x40022400
 8017c04:	40013c00 	.word	0x40013c00

08017c08 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017c08:	b480      	push	{r7}
 8017c0a:	b085      	sub	sp, #20
 8017c0c:	af00      	add	r7, sp, #0
 8017c0e:	6078      	str	r0, [r7, #4]
 8017c10:	460b      	mov	r3, r1
 8017c12:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	691a      	ldr	r2, [r3, #16]
 8017c18:	887b      	ldrh	r3, [r7, #2]
 8017c1a:	4013      	ands	r3, r2
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d002      	beq.n	8017c26 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017c20:	2301      	movs	r3, #1
 8017c22:	73fb      	strb	r3, [r7, #15]
 8017c24:	e001      	b.n	8017c2a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017c26:	2300      	movs	r3, #0
 8017c28:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017c2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8017c2c:	4618      	mov	r0, r3
 8017c2e:	3714      	adds	r7, #20
 8017c30:	46bd      	mov	sp, r7
 8017c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c36:	4770      	bx	lr

08017c38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017c38:	b480      	push	{r7}
 8017c3a:	b083      	sub	sp, #12
 8017c3c:	af00      	add	r7, sp, #0
 8017c3e:	6078      	str	r0, [r7, #4]
 8017c40:	460b      	mov	r3, r1
 8017c42:	807b      	strh	r3, [r7, #2]
 8017c44:	4613      	mov	r3, r2
 8017c46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8017c48:	787b      	ldrb	r3, [r7, #1]
 8017c4a:	2b00      	cmp	r3, #0
 8017c4c:	d003      	beq.n	8017c56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017c4e:	887a      	ldrh	r2, [r7, #2]
 8017c50:	687b      	ldr	r3, [r7, #4]
 8017c52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8017c54:	e003      	b.n	8017c5e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8017c56:	887b      	ldrh	r3, [r7, #2]
 8017c58:	041a      	lsls	r2, r3, #16
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	619a      	str	r2, [r3, #24]
}
 8017c5e:	bf00      	nop
 8017c60:	370c      	adds	r7, #12
 8017c62:	46bd      	mov	sp, r7
 8017c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c68:	4770      	bx	lr

08017c6a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8017c6a:	b480      	push	{r7}
 8017c6c:	b085      	sub	sp, #20
 8017c6e:	af00      	add	r7, sp, #0
 8017c70:	6078      	str	r0, [r7, #4]
 8017c72:	460b      	mov	r3, r1
 8017c74:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	695b      	ldr	r3, [r3, #20]
 8017c7a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8017c7c:	887a      	ldrh	r2, [r7, #2]
 8017c7e:	68fb      	ldr	r3, [r7, #12]
 8017c80:	4013      	ands	r3, r2
 8017c82:	041a      	lsls	r2, r3, #16
 8017c84:	68fb      	ldr	r3, [r7, #12]
 8017c86:	43d9      	mvns	r1, r3
 8017c88:	887b      	ldrh	r3, [r7, #2]
 8017c8a:	400b      	ands	r3, r1
 8017c8c:	431a      	orrs	r2, r3
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	619a      	str	r2, [r3, #24]
}
 8017c92:	bf00      	nop
 8017c94:	3714      	adds	r7, #20
 8017c96:	46bd      	mov	sp, r7
 8017c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c9c:	4770      	bx	lr
	...

08017ca0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8017ca0:	b580      	push	{r7, lr}
 8017ca2:	b082      	sub	sp, #8
 8017ca4:	af00      	add	r7, sp, #0
 8017ca6:	4603      	mov	r3, r0
 8017ca8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8017caa:	4b08      	ldr	r3, [pc, #32]	; (8017ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017cac:	695a      	ldr	r2, [r3, #20]
 8017cae:	88fb      	ldrh	r3, [r7, #6]
 8017cb0:	4013      	ands	r3, r2
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	d006      	beq.n	8017cc4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8017cb6:	4a05      	ldr	r2, [pc, #20]	; (8017ccc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8017cb8:	88fb      	ldrh	r3, [r7, #6]
 8017cba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8017cbc:	88fb      	ldrh	r3, [r7, #6]
 8017cbe:	4618      	mov	r0, r3
 8017cc0:	f000 f806 	bl	8017cd0 <HAL_GPIO_EXTI_Callback>
  }
}
 8017cc4:	bf00      	nop
 8017cc6:	3708      	adds	r7, #8
 8017cc8:	46bd      	mov	sp, r7
 8017cca:	bd80      	pop	{r7, pc}
 8017ccc:	40013c00 	.word	0x40013c00

08017cd0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8017cd0:	b480      	push	{r7}
 8017cd2:	b083      	sub	sp, #12
 8017cd4:	af00      	add	r7, sp, #0
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8017cda:	bf00      	nop
 8017cdc:	370c      	adds	r7, #12
 8017cde:	46bd      	mov	sp, r7
 8017ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017ce4:	4770      	bx	lr
	...

08017ce8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017ce8:	b580      	push	{r7, lr}
 8017cea:	b082      	sub	sp, #8
 8017cec:	af00      	add	r7, sp, #0
 8017cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2b00      	cmp	r3, #0
 8017cf4:	d101      	bne.n	8017cfa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017cf6:	2301      	movs	r3, #1
 8017cf8:	e07f      	b.n	8017dfa <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017cfa:	687b      	ldr	r3, [r7, #4]
 8017cfc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017d00:	b2db      	uxtb	r3, r3
 8017d02:	2b00      	cmp	r3, #0
 8017d04:	d106      	bne.n	8017d14 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017d06:	687b      	ldr	r3, [r7, #4]
 8017d08:	2200      	movs	r2, #0
 8017d0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8017d0e:	6878      	ldr	r0, [r7, #4]
 8017d10:	f7fb fa34 	bl	801317c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	2224      	movs	r2, #36	; 0x24
 8017d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	681a      	ldr	r2, [r3, #0]
 8017d22:	687b      	ldr	r3, [r7, #4]
 8017d24:	681b      	ldr	r3, [r3, #0]
 8017d26:	f022 0201 	bic.w	r2, r2, #1
 8017d2a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8017d2c:	687b      	ldr	r3, [r7, #4]
 8017d2e:	685a      	ldr	r2, [r3, #4]
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	681b      	ldr	r3, [r3, #0]
 8017d34:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8017d38:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8017d3a:	687b      	ldr	r3, [r7, #4]
 8017d3c:	681b      	ldr	r3, [r3, #0]
 8017d3e:	689a      	ldr	r2, [r3, #8]
 8017d40:	687b      	ldr	r3, [r7, #4]
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017d48:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017d4a:	687b      	ldr	r3, [r7, #4]
 8017d4c:	68db      	ldr	r3, [r3, #12]
 8017d4e:	2b01      	cmp	r3, #1
 8017d50:	d107      	bne.n	8017d62 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	689a      	ldr	r2, [r3, #8]
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	681b      	ldr	r3, [r3, #0]
 8017d5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8017d5e:	609a      	str	r2, [r3, #8]
 8017d60:	e006      	b.n	8017d70 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8017d62:	687b      	ldr	r3, [r7, #4]
 8017d64:	689a      	ldr	r2, [r3, #8]
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	681b      	ldr	r3, [r3, #0]
 8017d6a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8017d6e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	68db      	ldr	r3, [r3, #12]
 8017d74:	2b02      	cmp	r3, #2
 8017d76:	d104      	bne.n	8017d82 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	681b      	ldr	r3, [r3, #0]
 8017d7c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017d80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8017d82:	687b      	ldr	r3, [r7, #4]
 8017d84:	681b      	ldr	r3, [r3, #0]
 8017d86:	6859      	ldr	r1, [r3, #4]
 8017d88:	687b      	ldr	r3, [r7, #4]
 8017d8a:	681a      	ldr	r2, [r3, #0]
 8017d8c:	4b1d      	ldr	r3, [pc, #116]	; (8017e04 <HAL_I2C_Init+0x11c>)
 8017d8e:	430b      	orrs	r3, r1
 8017d90:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8017d92:	687b      	ldr	r3, [r7, #4]
 8017d94:	681b      	ldr	r3, [r3, #0]
 8017d96:	68da      	ldr	r2, [r3, #12]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	681b      	ldr	r3, [r3, #0]
 8017d9c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8017da0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8017da2:	687b      	ldr	r3, [r7, #4]
 8017da4:	691a      	ldr	r2, [r3, #16]
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	695b      	ldr	r3, [r3, #20]
 8017daa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	699b      	ldr	r3, [r3, #24]
 8017db2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	430a      	orrs	r2, r1
 8017dba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	69d9      	ldr	r1, [r3, #28]
 8017dc0:	687b      	ldr	r3, [r7, #4]
 8017dc2:	6a1a      	ldr	r2, [r3, #32]
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	430a      	orrs	r2, r1
 8017dca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8017dcc:	687b      	ldr	r3, [r7, #4]
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	681a      	ldr	r2, [r3, #0]
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	681b      	ldr	r3, [r3, #0]
 8017dd6:	f042 0201 	orr.w	r2, r2, #1
 8017dda:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2200      	movs	r2, #0
 8017de0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	2220      	movs	r2, #32
 8017de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	2200      	movs	r2, #0
 8017dee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2200      	movs	r2, #0
 8017df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8017df8:	2300      	movs	r3, #0
}
 8017dfa:	4618      	mov	r0, r3
 8017dfc:	3708      	adds	r7, #8
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	bd80      	pop	{r7, pc}
 8017e02:	bf00      	nop
 8017e04:	02008000 	.word	0x02008000

08017e08 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	b088      	sub	sp, #32
 8017e0c:	af02      	add	r7, sp, #8
 8017e0e:	60f8      	str	r0, [r7, #12]
 8017e10:	4608      	mov	r0, r1
 8017e12:	4611      	mov	r1, r2
 8017e14:	461a      	mov	r2, r3
 8017e16:	4603      	mov	r3, r0
 8017e18:	817b      	strh	r3, [r7, #10]
 8017e1a:	460b      	mov	r3, r1
 8017e1c:	813b      	strh	r3, [r7, #8]
 8017e1e:	4613      	mov	r3, r2
 8017e20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8017e22:	68fb      	ldr	r3, [r7, #12]
 8017e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8017e28:	b2db      	uxtb	r3, r3
 8017e2a:	2b20      	cmp	r3, #32
 8017e2c:	f040 80f9 	bne.w	8018022 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8017e30:	6a3b      	ldr	r3, [r7, #32]
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d002      	beq.n	8017e3c <HAL_I2C_Mem_Write+0x34>
 8017e36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	d105      	bne.n	8017e48 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8017e3c:	68fb      	ldr	r3, [r7, #12]
 8017e3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8017e42:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8017e44:	2301      	movs	r3, #1
 8017e46:	e0ed      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8017e48:	68fb      	ldr	r3, [r7, #12]
 8017e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8017e4e:	2b01      	cmp	r3, #1
 8017e50:	d101      	bne.n	8017e56 <HAL_I2C_Mem_Write+0x4e>
 8017e52:	2302      	movs	r3, #2
 8017e54:	e0e6      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	2201      	movs	r2, #1
 8017e5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8017e5e:	f7fd fa1b 	bl	8015298 <HAL_GetTick>
 8017e62:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8017e64:	697b      	ldr	r3, [r7, #20]
 8017e66:	9300      	str	r3, [sp, #0]
 8017e68:	2319      	movs	r3, #25
 8017e6a:	2201      	movs	r2, #1
 8017e6c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8017e70:	68f8      	ldr	r0, [r7, #12]
 8017e72:	f000 fac3 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 8017e76:	4603      	mov	r3, r0
 8017e78:	2b00      	cmp	r3, #0
 8017e7a:	d001      	beq.n	8017e80 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8017e7c:	2301      	movs	r3, #1
 8017e7e:	e0d1      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8017e80:	68fb      	ldr	r3, [r7, #12]
 8017e82:	2221      	movs	r2, #33	; 0x21
 8017e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	2240      	movs	r2, #64	; 0x40
 8017e8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	2200      	movs	r2, #0
 8017e94:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8017e96:	68fb      	ldr	r3, [r7, #12]
 8017e98:	6a3a      	ldr	r2, [r7, #32]
 8017e9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8017e9c:	68fb      	ldr	r3, [r7, #12]
 8017e9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017ea0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8017ea2:	68fb      	ldr	r3, [r7, #12]
 8017ea4:	2200      	movs	r2, #0
 8017ea6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8017ea8:	88f8      	ldrh	r0, [r7, #6]
 8017eaa:	893a      	ldrh	r2, [r7, #8]
 8017eac:	8979      	ldrh	r1, [r7, #10]
 8017eae:	697b      	ldr	r3, [r7, #20]
 8017eb0:	9301      	str	r3, [sp, #4]
 8017eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017eb4:	9300      	str	r3, [sp, #0]
 8017eb6:	4603      	mov	r3, r0
 8017eb8:	68f8      	ldr	r0, [r7, #12]
 8017eba:	f000 f9d3 	bl	8018264 <I2C_RequestMemoryWrite>
 8017ebe:	4603      	mov	r3, r0
 8017ec0:	2b00      	cmp	r3, #0
 8017ec2:	d005      	beq.n	8017ed0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8017ec4:	68fb      	ldr	r3, [r7, #12]
 8017ec6:	2200      	movs	r2, #0
 8017ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8017ecc:	2301      	movs	r3, #1
 8017ece:	e0a9      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017ed0:	68fb      	ldr	r3, [r7, #12]
 8017ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017ed4:	b29b      	uxth	r3, r3
 8017ed6:	2bff      	cmp	r3, #255	; 0xff
 8017ed8:	d90e      	bls.n	8017ef8 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	22ff      	movs	r2, #255	; 0xff
 8017ede:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8017ee0:	68fb      	ldr	r3, [r7, #12]
 8017ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017ee4:	b2da      	uxtb	r2, r3
 8017ee6:	8979      	ldrh	r1, [r7, #10]
 8017ee8:	2300      	movs	r3, #0
 8017eea:	9300      	str	r3, [sp, #0]
 8017eec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017ef0:	68f8      	ldr	r0, [r7, #12]
 8017ef2:	f000 fc1f 	bl	8018734 <I2C_TransferConfig>
 8017ef6:	e00f      	b.n	8017f18 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017efc:	b29a      	uxth	r2, r3
 8017efe:	68fb      	ldr	r3, [r7, #12]
 8017f00:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8017f02:	68fb      	ldr	r3, [r7, #12]
 8017f04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f06:	b2da      	uxtb	r2, r3
 8017f08:	8979      	ldrh	r1, [r7, #10]
 8017f0a:	2300      	movs	r3, #0
 8017f0c:	9300      	str	r3, [sp, #0]
 8017f0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017f12:	68f8      	ldr	r0, [r7, #12]
 8017f14:	f000 fc0e 	bl	8018734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017f18:	697a      	ldr	r2, [r7, #20]
 8017f1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017f1c:	68f8      	ldr	r0, [r7, #12]
 8017f1e:	f000 faad 	bl	801847c <I2C_WaitOnTXISFlagUntilTimeout>
 8017f22:	4603      	mov	r3, r0
 8017f24:	2b00      	cmp	r3, #0
 8017f26:	d001      	beq.n	8017f2c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8017f28:	2301      	movs	r3, #1
 8017f2a:	e07b      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8017f2c:	68fb      	ldr	r3, [r7, #12]
 8017f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f30:	781a      	ldrb	r2, [r3, #0]
 8017f32:	68fb      	ldr	r3, [r7, #12]
 8017f34:	681b      	ldr	r3, [r3, #0]
 8017f36:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8017f38:	68fb      	ldr	r3, [r7, #12]
 8017f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017f3c:	1c5a      	adds	r2, r3, #1
 8017f3e:	68fb      	ldr	r3, [r7, #12]
 8017f40:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8017f42:	68fb      	ldr	r3, [r7, #12]
 8017f44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f46:	b29b      	uxth	r3, r3
 8017f48:	3b01      	subs	r3, #1
 8017f4a:	b29a      	uxth	r2, r3
 8017f4c:	68fb      	ldr	r3, [r7, #12]
 8017f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8017f50:	68fb      	ldr	r3, [r7, #12]
 8017f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f54:	3b01      	subs	r3, #1
 8017f56:	b29a      	uxth	r2, r3
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8017f5c:	68fb      	ldr	r3, [r7, #12]
 8017f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f60:	b29b      	uxth	r3, r3
 8017f62:	2b00      	cmp	r3, #0
 8017f64:	d034      	beq.n	8017fd0 <HAL_I2C_Mem_Write+0x1c8>
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f6a:	2b00      	cmp	r3, #0
 8017f6c:	d130      	bne.n	8017fd0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8017f6e:	697b      	ldr	r3, [r7, #20]
 8017f70:	9300      	str	r3, [sp, #0]
 8017f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017f74:	2200      	movs	r2, #0
 8017f76:	2180      	movs	r1, #128	; 0x80
 8017f78:	68f8      	ldr	r0, [r7, #12]
 8017f7a:	f000 fa3f 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d001      	beq.n	8017f88 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8017f84:	2301      	movs	r3, #1
 8017f86:	e04d      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8017f88:	68fb      	ldr	r3, [r7, #12]
 8017f8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017f8c:	b29b      	uxth	r3, r3
 8017f8e:	2bff      	cmp	r3, #255	; 0xff
 8017f90:	d90e      	bls.n	8017fb0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	22ff      	movs	r2, #255	; 0xff
 8017f96:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8017f98:	68fb      	ldr	r3, [r7, #12]
 8017f9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017f9c:	b2da      	uxtb	r2, r3
 8017f9e:	8979      	ldrh	r1, [r7, #10]
 8017fa0:	2300      	movs	r3, #0
 8017fa2:	9300      	str	r3, [sp, #0]
 8017fa4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8017fa8:	68f8      	ldr	r0, [r7, #12]
 8017faa:	f000 fbc3 	bl	8018734 <I2C_TransferConfig>
 8017fae:	e00f      	b.n	8017fd0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8017fb0:	68fb      	ldr	r3, [r7, #12]
 8017fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fb4:	b29a      	uxth	r2, r3
 8017fb6:	68fb      	ldr	r3, [r7, #12]
 8017fb8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8017fba:	68fb      	ldr	r3, [r7, #12]
 8017fbc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017fbe:	b2da      	uxtb	r2, r3
 8017fc0:	8979      	ldrh	r1, [r7, #10]
 8017fc2:	2300      	movs	r3, #0
 8017fc4:	9300      	str	r3, [sp, #0]
 8017fc6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8017fca:	68f8      	ldr	r0, [r7, #12]
 8017fcc:	f000 fbb2 	bl	8018734 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8017fd0:	68fb      	ldr	r3, [r7, #12]
 8017fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8017fd4:	b29b      	uxth	r3, r3
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d19e      	bne.n	8017f18 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8017fda:	697a      	ldr	r2, [r7, #20]
 8017fdc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8017fde:	68f8      	ldr	r0, [r7, #12]
 8017fe0:	f000 fa8c 	bl	80184fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8017fe4:	4603      	mov	r3, r0
 8017fe6:	2b00      	cmp	r3, #0
 8017fe8:	d001      	beq.n	8017fee <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8017fea:	2301      	movs	r3, #1
 8017fec:	e01a      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8017fee:	68fb      	ldr	r3, [r7, #12]
 8017ff0:	681b      	ldr	r3, [r3, #0]
 8017ff2:	2220      	movs	r2, #32
 8017ff4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8017ff6:	68fb      	ldr	r3, [r7, #12]
 8017ff8:	681b      	ldr	r3, [r3, #0]
 8017ffa:	6859      	ldr	r1, [r3, #4]
 8017ffc:	68fb      	ldr	r3, [r7, #12]
 8017ffe:	681a      	ldr	r2, [r3, #0]
 8018000:	4b0a      	ldr	r3, [pc, #40]	; (801802c <HAL_I2C_Mem_Write+0x224>)
 8018002:	400b      	ands	r3, r1
 8018004:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018006:	68fb      	ldr	r3, [r7, #12]
 8018008:	2220      	movs	r2, #32
 801800a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801800e:	68fb      	ldr	r3, [r7, #12]
 8018010:	2200      	movs	r2, #0
 8018012:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018016:	68fb      	ldr	r3, [r7, #12]
 8018018:	2200      	movs	r2, #0
 801801a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801801e:	2300      	movs	r3, #0
 8018020:	e000      	b.n	8018024 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8018022:	2302      	movs	r3, #2
  }
}
 8018024:	4618      	mov	r0, r3
 8018026:	3718      	adds	r7, #24
 8018028:	46bd      	mov	sp, r7
 801802a:	bd80      	pop	{r7, pc}
 801802c:	fe00e800 	.word	0xfe00e800

08018030 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018030:	b580      	push	{r7, lr}
 8018032:	b088      	sub	sp, #32
 8018034:	af02      	add	r7, sp, #8
 8018036:	60f8      	str	r0, [r7, #12]
 8018038:	4608      	mov	r0, r1
 801803a:	4611      	mov	r1, r2
 801803c:	461a      	mov	r2, r3
 801803e:	4603      	mov	r3, r0
 8018040:	817b      	strh	r3, [r7, #10]
 8018042:	460b      	mov	r3, r1
 8018044:	813b      	strh	r3, [r7, #8]
 8018046:	4613      	mov	r3, r2
 8018048:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801804a:	68fb      	ldr	r3, [r7, #12]
 801804c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8018050:	b2db      	uxtb	r3, r3
 8018052:	2b20      	cmp	r3, #32
 8018054:	f040 80fd 	bne.w	8018252 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018058:	6a3b      	ldr	r3, [r7, #32]
 801805a:	2b00      	cmp	r3, #0
 801805c:	d002      	beq.n	8018064 <HAL_I2C_Mem_Read+0x34>
 801805e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018060:	2b00      	cmp	r3, #0
 8018062:	d105      	bne.n	8018070 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018064:	68fb      	ldr	r3, [r7, #12]
 8018066:	f44f 7200 	mov.w	r2, #512	; 0x200
 801806a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 801806c:	2301      	movs	r3, #1
 801806e:	e0f1      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018070:	68fb      	ldr	r3, [r7, #12]
 8018072:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8018076:	2b01      	cmp	r3, #1
 8018078:	d101      	bne.n	801807e <HAL_I2C_Mem_Read+0x4e>
 801807a:	2302      	movs	r3, #2
 801807c:	e0ea      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
 801807e:	68fb      	ldr	r3, [r7, #12]
 8018080:	2201      	movs	r2, #1
 8018082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018086:	f7fd f907 	bl	8015298 <HAL_GetTick>
 801808a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 801808c:	697b      	ldr	r3, [r7, #20]
 801808e:	9300      	str	r3, [sp, #0]
 8018090:	2319      	movs	r3, #25
 8018092:	2201      	movs	r2, #1
 8018094:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8018098:	68f8      	ldr	r0, [r7, #12]
 801809a:	f000 f9af 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 801809e:	4603      	mov	r3, r0
 80180a0:	2b00      	cmp	r3, #0
 80180a2:	d001      	beq.n	80180a8 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80180a4:	2301      	movs	r3, #1
 80180a6:	e0d5      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	2222      	movs	r2, #34	; 0x22
 80180ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80180b0:	68fb      	ldr	r3, [r7, #12]
 80180b2:	2240      	movs	r2, #64	; 0x40
 80180b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80180b8:	68fb      	ldr	r3, [r7, #12]
 80180ba:	2200      	movs	r2, #0
 80180bc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80180be:	68fb      	ldr	r3, [r7, #12]
 80180c0:	6a3a      	ldr	r2, [r7, #32]
 80180c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80180c4:	68fb      	ldr	r3, [r7, #12]
 80180c6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80180c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80180ca:	68fb      	ldr	r3, [r7, #12]
 80180cc:	2200      	movs	r2, #0
 80180ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80180d0:	88f8      	ldrh	r0, [r7, #6]
 80180d2:	893a      	ldrh	r2, [r7, #8]
 80180d4:	8979      	ldrh	r1, [r7, #10]
 80180d6:	697b      	ldr	r3, [r7, #20]
 80180d8:	9301      	str	r3, [sp, #4]
 80180da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80180dc:	9300      	str	r3, [sp, #0]
 80180de:	4603      	mov	r3, r0
 80180e0:	68f8      	ldr	r0, [r7, #12]
 80180e2:	f000 f913 	bl	801830c <I2C_RequestMemoryRead>
 80180e6:	4603      	mov	r3, r0
 80180e8:	2b00      	cmp	r3, #0
 80180ea:	d005      	beq.n	80180f8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	2200      	movs	r2, #0
 80180f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80180f4:	2301      	movs	r3, #1
 80180f6:	e0ad      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80180f8:	68fb      	ldr	r3, [r7, #12]
 80180fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80180fc:	b29b      	uxth	r3, r3
 80180fe:	2bff      	cmp	r3, #255	; 0xff
 8018100:	d90e      	bls.n	8018120 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8018102:	68fb      	ldr	r3, [r7, #12]
 8018104:	22ff      	movs	r2, #255	; 0xff
 8018106:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801810c:	b2da      	uxtb	r2, r3
 801810e:	8979      	ldrh	r1, [r7, #10]
 8018110:	4b52      	ldr	r3, [pc, #328]	; (801825c <HAL_I2C_Mem_Read+0x22c>)
 8018112:	9300      	str	r3, [sp, #0]
 8018114:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8018118:	68f8      	ldr	r0, [r7, #12]
 801811a:	f000 fb0b 	bl	8018734 <I2C_TransferConfig>
 801811e:	e00f      	b.n	8018140 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018124:	b29a      	uxth	r2, r3
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801812e:	b2da      	uxtb	r2, r3
 8018130:	8979      	ldrh	r1, [r7, #10]
 8018132:	4b4a      	ldr	r3, [pc, #296]	; (801825c <HAL_I2C_Mem_Read+0x22c>)
 8018134:	9300      	str	r3, [sp, #0]
 8018136:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 801813a:	68f8      	ldr	r0, [r7, #12]
 801813c:	f000 fafa 	bl	8018734 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8018140:	697b      	ldr	r3, [r7, #20]
 8018142:	9300      	str	r3, [sp, #0]
 8018144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018146:	2200      	movs	r2, #0
 8018148:	2104      	movs	r1, #4
 801814a:	68f8      	ldr	r0, [r7, #12]
 801814c:	f000 f956 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 8018150:	4603      	mov	r3, r0
 8018152:	2b00      	cmp	r3, #0
 8018154:	d001      	beq.n	801815a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8018156:	2301      	movs	r3, #1
 8018158:	e07c      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 801815a:	68fb      	ldr	r3, [r7, #12]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018160:	68fb      	ldr	r3, [r7, #12]
 8018162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018164:	b2d2      	uxtb	r2, r2
 8018166:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801816c:	1c5a      	adds	r2, r3, #1
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8018172:	68fb      	ldr	r3, [r7, #12]
 8018174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8018176:	3b01      	subs	r3, #1
 8018178:	b29a      	uxth	r2, r3
 801817a:	68fb      	ldr	r3, [r7, #12]
 801817c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 801817e:	68fb      	ldr	r3, [r7, #12]
 8018180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018182:	b29b      	uxth	r3, r3
 8018184:	3b01      	subs	r3, #1
 8018186:	b29a      	uxth	r2, r3
 8018188:	68fb      	ldr	r3, [r7, #12]
 801818a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 801818c:	68fb      	ldr	r3, [r7, #12]
 801818e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018190:	b29b      	uxth	r3, r3
 8018192:	2b00      	cmp	r3, #0
 8018194:	d034      	beq.n	8018200 <HAL_I2C_Mem_Read+0x1d0>
 8018196:	68fb      	ldr	r3, [r7, #12]
 8018198:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801819a:	2b00      	cmp	r3, #0
 801819c:	d130      	bne.n	8018200 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801819e:	697b      	ldr	r3, [r7, #20]
 80181a0:	9300      	str	r3, [sp, #0]
 80181a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80181a4:	2200      	movs	r2, #0
 80181a6:	2180      	movs	r1, #128	; 0x80
 80181a8:	68f8      	ldr	r0, [r7, #12]
 80181aa:	f000 f927 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 80181ae:	4603      	mov	r3, r0
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	d001      	beq.n	80181b8 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80181b4:	2301      	movs	r3, #1
 80181b6:	e04d      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80181b8:	68fb      	ldr	r3, [r7, #12]
 80181ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181bc:	b29b      	uxth	r3, r3
 80181be:	2bff      	cmp	r3, #255	; 0xff
 80181c0:	d90e      	bls.n	80181e0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80181c2:	68fb      	ldr	r3, [r7, #12]
 80181c4:	22ff      	movs	r2, #255	; 0xff
 80181c6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80181c8:	68fb      	ldr	r3, [r7, #12]
 80181ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181cc:	b2da      	uxtb	r2, r3
 80181ce:	8979      	ldrh	r1, [r7, #10]
 80181d0:	2300      	movs	r3, #0
 80181d2:	9300      	str	r3, [sp, #0]
 80181d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80181d8:	68f8      	ldr	r0, [r7, #12]
 80181da:	f000 faab 	bl	8018734 <I2C_TransferConfig>
 80181de:	e00f      	b.n	8018200 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80181e0:	68fb      	ldr	r3, [r7, #12]
 80181e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80181e4:	b29a      	uxth	r2, r3
 80181e6:	68fb      	ldr	r3, [r7, #12]
 80181e8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80181ea:	68fb      	ldr	r3, [r7, #12]
 80181ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80181ee:	b2da      	uxtb	r2, r3
 80181f0:	8979      	ldrh	r1, [r7, #10]
 80181f2:	2300      	movs	r3, #0
 80181f4:	9300      	str	r3, [sp, #0]
 80181f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80181fa:	68f8      	ldr	r0, [r7, #12]
 80181fc:	f000 fa9a 	bl	8018734 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8018204:	b29b      	uxth	r3, r3
 8018206:	2b00      	cmp	r3, #0
 8018208:	d19a      	bne.n	8018140 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 801820a:	697a      	ldr	r2, [r7, #20]
 801820c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801820e:	68f8      	ldr	r0, [r7, #12]
 8018210:	f000 f974 	bl	80184fc <I2C_WaitOnSTOPFlagUntilTimeout>
 8018214:	4603      	mov	r3, r0
 8018216:	2b00      	cmp	r3, #0
 8018218:	d001      	beq.n	801821e <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 801821a:	2301      	movs	r3, #1
 801821c:	e01a      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801821e:	68fb      	ldr	r3, [r7, #12]
 8018220:	681b      	ldr	r3, [r3, #0]
 8018222:	2220      	movs	r2, #32
 8018224:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018226:	68fb      	ldr	r3, [r7, #12]
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	6859      	ldr	r1, [r3, #4]
 801822c:	68fb      	ldr	r3, [r7, #12]
 801822e:	681a      	ldr	r2, [r3, #0]
 8018230:	4b0b      	ldr	r3, [pc, #44]	; (8018260 <HAL_I2C_Mem_Read+0x230>)
 8018232:	400b      	ands	r3, r1
 8018234:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018236:	68fb      	ldr	r3, [r7, #12]
 8018238:	2220      	movs	r2, #32
 801823a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801823e:	68fb      	ldr	r3, [r7, #12]
 8018240:	2200      	movs	r2, #0
 8018242:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018246:	68fb      	ldr	r3, [r7, #12]
 8018248:	2200      	movs	r2, #0
 801824a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801824e:	2300      	movs	r3, #0
 8018250:	e000      	b.n	8018254 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8018252:	2302      	movs	r3, #2
  }
}
 8018254:	4618      	mov	r0, r3
 8018256:	3718      	adds	r7, #24
 8018258:	46bd      	mov	sp, r7
 801825a:	bd80      	pop	{r7, pc}
 801825c:	80002400 	.word	0x80002400
 8018260:	fe00e800 	.word	0xfe00e800

08018264 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8018264:	b580      	push	{r7, lr}
 8018266:	b086      	sub	sp, #24
 8018268:	af02      	add	r7, sp, #8
 801826a:	60f8      	str	r0, [r7, #12]
 801826c:	4608      	mov	r0, r1
 801826e:	4611      	mov	r1, r2
 8018270:	461a      	mov	r2, r3
 8018272:	4603      	mov	r3, r0
 8018274:	817b      	strh	r3, [r7, #10]
 8018276:	460b      	mov	r3, r1
 8018278:	813b      	strh	r3, [r7, #8]
 801827a:	4613      	mov	r3, r2
 801827c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801827e:	88fb      	ldrh	r3, [r7, #6]
 8018280:	b2da      	uxtb	r2, r3
 8018282:	8979      	ldrh	r1, [r7, #10]
 8018284:	4b20      	ldr	r3, [pc, #128]	; (8018308 <I2C_RequestMemoryWrite+0xa4>)
 8018286:	9300      	str	r3, [sp, #0]
 8018288:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 801828c:	68f8      	ldr	r0, [r7, #12]
 801828e:	f000 fa51 	bl	8018734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018292:	69fa      	ldr	r2, [r7, #28]
 8018294:	69b9      	ldr	r1, [r7, #24]
 8018296:	68f8      	ldr	r0, [r7, #12]
 8018298:	f000 f8f0 	bl	801847c <I2C_WaitOnTXISFlagUntilTimeout>
 801829c:	4603      	mov	r3, r0
 801829e:	2b00      	cmp	r3, #0
 80182a0:	d001      	beq.n	80182a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80182a2:	2301      	movs	r3, #1
 80182a4:	e02c      	b.n	8018300 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80182a6:	88fb      	ldrh	r3, [r7, #6]
 80182a8:	2b01      	cmp	r3, #1
 80182aa:	d105      	bne.n	80182b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80182ac:	893b      	ldrh	r3, [r7, #8]
 80182ae:	b2da      	uxtb	r2, r3
 80182b0:	68fb      	ldr	r3, [r7, #12]
 80182b2:	681b      	ldr	r3, [r3, #0]
 80182b4:	629a      	str	r2, [r3, #40]	; 0x28
 80182b6:	e015      	b.n	80182e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80182b8:	893b      	ldrh	r3, [r7, #8]
 80182ba:	0a1b      	lsrs	r3, r3, #8
 80182bc:	b29b      	uxth	r3, r3
 80182be:	b2da      	uxtb	r2, r3
 80182c0:	68fb      	ldr	r3, [r7, #12]
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80182c6:	69fa      	ldr	r2, [r7, #28]
 80182c8:	69b9      	ldr	r1, [r7, #24]
 80182ca:	68f8      	ldr	r0, [r7, #12]
 80182cc:	f000 f8d6 	bl	801847c <I2C_WaitOnTXISFlagUntilTimeout>
 80182d0:	4603      	mov	r3, r0
 80182d2:	2b00      	cmp	r3, #0
 80182d4:	d001      	beq.n	80182da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80182d6:	2301      	movs	r3, #1
 80182d8:	e012      	b.n	8018300 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80182da:	893b      	ldrh	r3, [r7, #8]
 80182dc:	b2da      	uxtb	r2, r3
 80182de:	68fb      	ldr	r3, [r7, #12]
 80182e0:	681b      	ldr	r3, [r3, #0]
 80182e2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80182e4:	69fb      	ldr	r3, [r7, #28]
 80182e6:	9300      	str	r3, [sp, #0]
 80182e8:	69bb      	ldr	r3, [r7, #24]
 80182ea:	2200      	movs	r2, #0
 80182ec:	2180      	movs	r1, #128	; 0x80
 80182ee:	68f8      	ldr	r0, [r7, #12]
 80182f0:	f000 f884 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 80182f4:	4603      	mov	r3, r0
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	d001      	beq.n	80182fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80182fa:	2301      	movs	r3, #1
 80182fc:	e000      	b.n	8018300 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80182fe:	2300      	movs	r3, #0
}
 8018300:	4618      	mov	r0, r3
 8018302:	3710      	adds	r7, #16
 8018304:	46bd      	mov	sp, r7
 8018306:	bd80      	pop	{r7, pc}
 8018308:	80002000 	.word	0x80002000

0801830c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801830c:	b580      	push	{r7, lr}
 801830e:	b086      	sub	sp, #24
 8018310:	af02      	add	r7, sp, #8
 8018312:	60f8      	str	r0, [r7, #12]
 8018314:	4608      	mov	r0, r1
 8018316:	4611      	mov	r1, r2
 8018318:	461a      	mov	r2, r3
 801831a:	4603      	mov	r3, r0
 801831c:	817b      	strh	r3, [r7, #10]
 801831e:	460b      	mov	r3, r1
 8018320:	813b      	strh	r3, [r7, #8]
 8018322:	4613      	mov	r3, r2
 8018324:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8018326:	88fb      	ldrh	r3, [r7, #6]
 8018328:	b2da      	uxtb	r2, r3
 801832a:	8979      	ldrh	r1, [r7, #10]
 801832c:	4b20      	ldr	r3, [pc, #128]	; (80183b0 <I2C_RequestMemoryRead+0xa4>)
 801832e:	9300      	str	r3, [sp, #0]
 8018330:	2300      	movs	r3, #0
 8018332:	68f8      	ldr	r0, [r7, #12]
 8018334:	f000 f9fe 	bl	8018734 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018338:	69fa      	ldr	r2, [r7, #28]
 801833a:	69b9      	ldr	r1, [r7, #24]
 801833c:	68f8      	ldr	r0, [r7, #12]
 801833e:	f000 f89d 	bl	801847c <I2C_WaitOnTXISFlagUntilTimeout>
 8018342:	4603      	mov	r3, r0
 8018344:	2b00      	cmp	r3, #0
 8018346:	d001      	beq.n	801834c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018348:	2301      	movs	r3, #1
 801834a:	e02c      	b.n	80183a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801834c:	88fb      	ldrh	r3, [r7, #6]
 801834e:	2b01      	cmp	r3, #1
 8018350:	d105      	bne.n	801835e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018352:	893b      	ldrh	r3, [r7, #8]
 8018354:	b2da      	uxtb	r2, r3
 8018356:	68fb      	ldr	r3, [r7, #12]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	629a      	str	r2, [r3, #40]	; 0x28
 801835c:	e015      	b.n	801838a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801835e:	893b      	ldrh	r3, [r7, #8]
 8018360:	0a1b      	lsrs	r3, r3, #8
 8018362:	b29b      	uxth	r3, r3
 8018364:	b2da      	uxtb	r2, r3
 8018366:	68fb      	ldr	r3, [r7, #12]
 8018368:	681b      	ldr	r3, [r3, #0]
 801836a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801836c:	69fa      	ldr	r2, [r7, #28]
 801836e:	69b9      	ldr	r1, [r7, #24]
 8018370:	68f8      	ldr	r0, [r7, #12]
 8018372:	f000 f883 	bl	801847c <I2C_WaitOnTXISFlagUntilTimeout>
 8018376:	4603      	mov	r3, r0
 8018378:	2b00      	cmp	r3, #0
 801837a:	d001      	beq.n	8018380 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801837c:	2301      	movs	r3, #1
 801837e:	e012      	b.n	80183a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018380:	893b      	ldrh	r3, [r7, #8]
 8018382:	b2da      	uxtb	r2, r3
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	681b      	ldr	r3, [r3, #0]
 8018388:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801838a:	69fb      	ldr	r3, [r7, #28]
 801838c:	9300      	str	r3, [sp, #0]
 801838e:	69bb      	ldr	r3, [r7, #24]
 8018390:	2200      	movs	r2, #0
 8018392:	2140      	movs	r1, #64	; 0x40
 8018394:	68f8      	ldr	r0, [r7, #12]
 8018396:	f000 f831 	bl	80183fc <I2C_WaitOnFlagUntilTimeout>
 801839a:	4603      	mov	r3, r0
 801839c:	2b00      	cmp	r3, #0
 801839e:	d001      	beq.n	80183a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80183a0:	2301      	movs	r3, #1
 80183a2:	e000      	b.n	80183a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80183a4:	2300      	movs	r3, #0
}
 80183a6:	4618      	mov	r0, r3
 80183a8:	3710      	adds	r7, #16
 80183aa:	46bd      	mov	sp, r7
 80183ac:	bd80      	pop	{r7, pc}
 80183ae:	bf00      	nop
 80183b0:	80002000 	.word	0x80002000

080183b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80183b4:	b480      	push	{r7}
 80183b6:	b083      	sub	sp, #12
 80183b8:	af00      	add	r7, sp, #0
 80183ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80183bc:	687b      	ldr	r3, [r7, #4]
 80183be:	681b      	ldr	r3, [r3, #0]
 80183c0:	699b      	ldr	r3, [r3, #24]
 80183c2:	f003 0302 	and.w	r3, r3, #2
 80183c6:	2b02      	cmp	r3, #2
 80183c8:	d103      	bne.n	80183d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80183ca:	687b      	ldr	r3, [r7, #4]
 80183cc:	681b      	ldr	r3, [r3, #0]
 80183ce:	2200      	movs	r2, #0
 80183d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	699b      	ldr	r3, [r3, #24]
 80183d8:	f003 0301 	and.w	r3, r3, #1
 80183dc:	2b01      	cmp	r3, #1
 80183de:	d007      	beq.n	80183f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80183e0:	687b      	ldr	r3, [r7, #4]
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	699a      	ldr	r2, [r3, #24]
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	f042 0201 	orr.w	r2, r2, #1
 80183ee:	619a      	str	r2, [r3, #24]
  }
}
 80183f0:	bf00      	nop
 80183f2:	370c      	adds	r7, #12
 80183f4:	46bd      	mov	sp, r7
 80183f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183fa:	4770      	bx	lr

080183fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80183fc:	b580      	push	{r7, lr}
 80183fe:	b084      	sub	sp, #16
 8018400:	af00      	add	r7, sp, #0
 8018402:	60f8      	str	r0, [r7, #12]
 8018404:	60b9      	str	r1, [r7, #8]
 8018406:	603b      	str	r3, [r7, #0]
 8018408:	4613      	mov	r3, r2
 801840a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801840c:	e022      	b.n	8018454 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801840e:	683b      	ldr	r3, [r7, #0]
 8018410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018414:	d01e      	beq.n	8018454 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8018416:	f7fc ff3f 	bl	8015298 <HAL_GetTick>
 801841a:	4602      	mov	r2, r0
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	1ad3      	subs	r3, r2, r3
 8018420:	683a      	ldr	r2, [r7, #0]
 8018422:	429a      	cmp	r2, r3
 8018424:	d302      	bcc.n	801842c <I2C_WaitOnFlagUntilTimeout+0x30>
 8018426:	683b      	ldr	r3, [r7, #0]
 8018428:	2b00      	cmp	r3, #0
 801842a:	d113      	bne.n	8018454 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018430:	f043 0220 	orr.w	r2, r3, #32
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	2220      	movs	r2, #32
 801843c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	2200      	movs	r2, #0
 8018444:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8018448:	68fb      	ldr	r3, [r7, #12]
 801844a:	2200      	movs	r2, #0
 801844c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8018450:	2301      	movs	r3, #1
 8018452:	e00f      	b.n	8018474 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	699a      	ldr	r2, [r3, #24]
 801845a:	68bb      	ldr	r3, [r7, #8]
 801845c:	4013      	ands	r3, r2
 801845e:	68ba      	ldr	r2, [r7, #8]
 8018460:	429a      	cmp	r2, r3
 8018462:	bf0c      	ite	eq
 8018464:	2301      	moveq	r3, #1
 8018466:	2300      	movne	r3, #0
 8018468:	b2db      	uxtb	r3, r3
 801846a:	461a      	mov	r2, r3
 801846c:	79fb      	ldrb	r3, [r7, #7]
 801846e:	429a      	cmp	r2, r3
 8018470:	d0cd      	beq.n	801840e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8018472:	2300      	movs	r3, #0
}
 8018474:	4618      	mov	r0, r3
 8018476:	3710      	adds	r7, #16
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}

0801847c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b084      	sub	sp, #16
 8018480:	af00      	add	r7, sp, #0
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018488:	e02c      	b.n	80184e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801848a:	687a      	ldr	r2, [r7, #4]
 801848c:	68b9      	ldr	r1, [r7, #8]
 801848e:	68f8      	ldr	r0, [r7, #12]
 8018490:	f000 f870 	bl	8018574 <I2C_IsErrorOccurred>
 8018494:	4603      	mov	r3, r0
 8018496:	2b00      	cmp	r3, #0
 8018498:	d001      	beq.n	801849e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801849a:	2301      	movs	r3, #1
 801849c:	e02a      	b.n	80184f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801849e:	68bb      	ldr	r3, [r7, #8]
 80184a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80184a4:	d01e      	beq.n	80184e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80184a6:	f7fc fef7 	bl	8015298 <HAL_GetTick>
 80184aa:	4602      	mov	r2, r0
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	1ad3      	subs	r3, r2, r3
 80184b0:	68ba      	ldr	r2, [r7, #8]
 80184b2:	429a      	cmp	r2, r3
 80184b4:	d302      	bcc.n	80184bc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80184b6:	68bb      	ldr	r3, [r7, #8]
 80184b8:	2b00      	cmp	r3, #0
 80184ba:	d113      	bne.n	80184e4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80184bc:	68fb      	ldr	r3, [r7, #12]
 80184be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80184c0:	f043 0220 	orr.w	r2, r3, #32
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	2220      	movs	r2, #32
 80184cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80184d0:	68fb      	ldr	r3, [r7, #12]
 80184d2:	2200      	movs	r2, #0
 80184d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80184d8:	68fb      	ldr	r3, [r7, #12]
 80184da:	2200      	movs	r2, #0
 80184dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80184e0:	2301      	movs	r3, #1
 80184e2:	e007      	b.n	80184f4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80184e4:	68fb      	ldr	r3, [r7, #12]
 80184e6:	681b      	ldr	r3, [r3, #0]
 80184e8:	699b      	ldr	r3, [r3, #24]
 80184ea:	f003 0302 	and.w	r3, r3, #2
 80184ee:	2b02      	cmp	r3, #2
 80184f0:	d1cb      	bne.n	801848a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80184f2:	2300      	movs	r3, #0
}
 80184f4:	4618      	mov	r0, r3
 80184f6:	3710      	adds	r7, #16
 80184f8:	46bd      	mov	sp, r7
 80184fa:	bd80      	pop	{r7, pc}

080184fc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80184fc:	b580      	push	{r7, lr}
 80184fe:	b084      	sub	sp, #16
 8018500:	af00      	add	r7, sp, #0
 8018502:	60f8      	str	r0, [r7, #12]
 8018504:	60b9      	str	r1, [r7, #8]
 8018506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018508:	e028      	b.n	801855c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801850a:	687a      	ldr	r2, [r7, #4]
 801850c:	68b9      	ldr	r1, [r7, #8]
 801850e:	68f8      	ldr	r0, [r7, #12]
 8018510:	f000 f830 	bl	8018574 <I2C_IsErrorOccurred>
 8018514:	4603      	mov	r3, r0
 8018516:	2b00      	cmp	r3, #0
 8018518:	d001      	beq.n	801851e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801851a:	2301      	movs	r3, #1
 801851c:	e026      	b.n	801856c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801851e:	f7fc febb 	bl	8015298 <HAL_GetTick>
 8018522:	4602      	mov	r2, r0
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	1ad3      	subs	r3, r2, r3
 8018528:	68ba      	ldr	r2, [r7, #8]
 801852a:	429a      	cmp	r2, r3
 801852c:	d302      	bcc.n	8018534 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801852e:	68bb      	ldr	r3, [r7, #8]
 8018530:	2b00      	cmp	r3, #0
 8018532:	d113      	bne.n	801855c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018534:	68fb      	ldr	r3, [r7, #12]
 8018536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018538:	f043 0220 	orr.w	r2, r3, #32
 801853c:	68fb      	ldr	r3, [r7, #12]
 801853e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8018540:	68fb      	ldr	r3, [r7, #12]
 8018542:	2220      	movs	r2, #32
 8018544:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8018548:	68fb      	ldr	r3, [r7, #12]
 801854a:	2200      	movs	r2, #0
 801854c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018550:	68fb      	ldr	r3, [r7, #12]
 8018552:	2200      	movs	r2, #0
 8018554:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8018558:	2301      	movs	r3, #1
 801855a:	e007      	b.n	801856c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 801855c:	68fb      	ldr	r3, [r7, #12]
 801855e:	681b      	ldr	r3, [r3, #0]
 8018560:	699b      	ldr	r3, [r3, #24]
 8018562:	f003 0320 	and.w	r3, r3, #32
 8018566:	2b20      	cmp	r3, #32
 8018568:	d1cf      	bne.n	801850a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 801856a:	2300      	movs	r3, #0
}
 801856c:	4618      	mov	r0, r3
 801856e:	3710      	adds	r7, #16
 8018570:	46bd      	mov	sp, r7
 8018572:	bd80      	pop	{r7, pc}

08018574 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8018574:	b580      	push	{r7, lr}
 8018576:	b08a      	sub	sp, #40	; 0x28
 8018578:	af00      	add	r7, sp, #0
 801857a:	60f8      	str	r0, [r7, #12]
 801857c:	60b9      	str	r1, [r7, #8]
 801857e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8018580:	2300      	movs	r3, #0
 8018582:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	681b      	ldr	r3, [r3, #0]
 801858a:	699b      	ldr	r3, [r3, #24]
 801858c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 801858e:	2300      	movs	r3, #0
 8018590:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8018592:	687b      	ldr	r3, [r7, #4]
 8018594:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8018596:	69bb      	ldr	r3, [r7, #24]
 8018598:	f003 0310 	and.w	r3, r3, #16
 801859c:	2b00      	cmp	r3, #0
 801859e:	d068      	beq.n	8018672 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80185a0:	68fb      	ldr	r3, [r7, #12]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	2210      	movs	r2, #16
 80185a6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80185a8:	e049      	b.n	801863e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80185aa:	68bb      	ldr	r3, [r7, #8]
 80185ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185b0:	d045      	beq.n	801863e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80185b2:	f7fc fe71 	bl	8015298 <HAL_GetTick>
 80185b6:	4602      	mov	r2, r0
 80185b8:	69fb      	ldr	r3, [r7, #28]
 80185ba:	1ad3      	subs	r3, r2, r3
 80185bc:	68ba      	ldr	r2, [r7, #8]
 80185be:	429a      	cmp	r2, r3
 80185c0:	d302      	bcc.n	80185c8 <I2C_IsErrorOccurred+0x54>
 80185c2:	68bb      	ldr	r3, [r7, #8]
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	d13a      	bne.n	801863e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	681b      	ldr	r3, [r3, #0]
 80185cc:	685b      	ldr	r3, [r3, #4]
 80185ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80185d2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80185d4:	68fb      	ldr	r3, [r7, #12]
 80185d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80185da:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80185dc:	68fb      	ldr	r3, [r7, #12]
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	699b      	ldr	r3, [r3, #24]
 80185e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80185e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80185ea:	d121      	bne.n	8018630 <I2C_IsErrorOccurred+0xbc>
 80185ec:	697b      	ldr	r3, [r7, #20]
 80185ee:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80185f2:	d01d      	beq.n	8018630 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80185f4:	7cfb      	ldrb	r3, [r7, #19]
 80185f6:	2b20      	cmp	r3, #32
 80185f8:	d01a      	beq.n	8018630 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	681b      	ldr	r3, [r3, #0]
 80185fe:	685a      	ldr	r2, [r3, #4]
 8018600:	68fb      	ldr	r3, [r7, #12]
 8018602:	681b      	ldr	r3, [r3, #0]
 8018604:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8018608:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801860a:	f7fc fe45 	bl	8015298 <HAL_GetTick>
 801860e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018610:	e00e      	b.n	8018630 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018612:	f7fc fe41 	bl	8015298 <HAL_GetTick>
 8018616:	4602      	mov	r2, r0
 8018618:	69fb      	ldr	r3, [r7, #28]
 801861a:	1ad3      	subs	r3, r2, r3
 801861c:	2b19      	cmp	r3, #25
 801861e:	d907      	bls.n	8018630 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8018620:	6a3b      	ldr	r3, [r7, #32]
 8018622:	f043 0320 	orr.w	r3, r3, #32
 8018626:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018628:	2301      	movs	r3, #1
 801862a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 801862e:	e006      	b.n	801863e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018630:	68fb      	ldr	r3, [r7, #12]
 8018632:	681b      	ldr	r3, [r3, #0]
 8018634:	699b      	ldr	r3, [r3, #24]
 8018636:	f003 0320 	and.w	r3, r3, #32
 801863a:	2b20      	cmp	r3, #32
 801863c:	d1e9      	bne.n	8018612 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801863e:	68fb      	ldr	r3, [r7, #12]
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	699b      	ldr	r3, [r3, #24]
 8018644:	f003 0320 	and.w	r3, r3, #32
 8018648:	2b20      	cmp	r3, #32
 801864a:	d003      	beq.n	8018654 <I2C_IsErrorOccurred+0xe0>
 801864c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018650:	2b00      	cmp	r3, #0
 8018652:	d0aa      	beq.n	80185aa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8018654:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018658:	2b00      	cmp	r3, #0
 801865a:	d103      	bne.n	8018664 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 801865c:	68fb      	ldr	r3, [r7, #12]
 801865e:	681b      	ldr	r3, [r3, #0]
 8018660:	2220      	movs	r2, #32
 8018662:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8018664:	6a3b      	ldr	r3, [r7, #32]
 8018666:	f043 0304 	orr.w	r3, r3, #4
 801866a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 801866c:	2301      	movs	r3, #1
 801866e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8018672:	68fb      	ldr	r3, [r7, #12]
 8018674:	681b      	ldr	r3, [r3, #0]
 8018676:	699b      	ldr	r3, [r3, #24]
 8018678:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 801867a:	69bb      	ldr	r3, [r7, #24]
 801867c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018680:	2b00      	cmp	r3, #0
 8018682:	d00b      	beq.n	801869c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8018684:	6a3b      	ldr	r3, [r7, #32]
 8018686:	f043 0301 	orr.w	r3, r3, #1
 801868a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 801868c:	68fb      	ldr	r3, [r7, #12]
 801868e:	681b      	ldr	r3, [r3, #0]
 8018690:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018696:	2301      	movs	r3, #1
 8018698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 801869c:	69bb      	ldr	r3, [r7, #24]
 801869e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d00b      	beq.n	80186be <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80186a6:	6a3b      	ldr	r3, [r7, #32]
 80186a8:	f043 0308 	orr.w	r3, r3, #8
 80186ac:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80186ae:	68fb      	ldr	r3, [r7, #12]
 80186b0:	681b      	ldr	r3, [r3, #0]
 80186b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80186b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80186b8:	2301      	movs	r3, #1
 80186ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80186be:	69bb      	ldr	r3, [r7, #24]
 80186c0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80186c4:	2b00      	cmp	r3, #0
 80186c6:	d00b      	beq.n	80186e0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80186c8:	6a3b      	ldr	r3, [r7, #32]
 80186ca:	f043 0302 	orr.w	r3, r3, #2
 80186ce:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80186d0:	68fb      	ldr	r3, [r7, #12]
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80186d8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80186da:	2301      	movs	r3, #1
 80186dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80186e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80186e4:	2b00      	cmp	r3, #0
 80186e6:	d01c      	beq.n	8018722 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80186e8:	68f8      	ldr	r0, [r7, #12]
 80186ea:	f7ff fe63 	bl	80183b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80186ee:	68fb      	ldr	r3, [r7, #12]
 80186f0:	681b      	ldr	r3, [r3, #0]
 80186f2:	6859      	ldr	r1, [r3, #4]
 80186f4:	68fb      	ldr	r3, [r7, #12]
 80186f6:	681a      	ldr	r2, [r3, #0]
 80186f8:	4b0d      	ldr	r3, [pc, #52]	; (8018730 <I2C_IsErrorOccurred+0x1bc>)
 80186fa:	400b      	ands	r3, r1
 80186fc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80186fe:	68fb      	ldr	r3, [r7, #12]
 8018700:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8018702:	6a3b      	ldr	r3, [r7, #32]
 8018704:	431a      	orrs	r2, r3
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 801870a:	68fb      	ldr	r3, [r7, #12]
 801870c:	2220      	movs	r2, #32
 801870e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018712:	68fb      	ldr	r3, [r7, #12]
 8018714:	2200      	movs	r2, #0
 8018716:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801871a:	68fb      	ldr	r3, [r7, #12]
 801871c:	2200      	movs	r2, #0
 801871e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8018722:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8018726:	4618      	mov	r0, r3
 8018728:	3728      	adds	r7, #40	; 0x28
 801872a:	46bd      	mov	sp, r7
 801872c:	bd80      	pop	{r7, pc}
 801872e:	bf00      	nop
 8018730:	fe00e800 	.word	0xfe00e800

08018734 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018734:	b480      	push	{r7}
 8018736:	b087      	sub	sp, #28
 8018738:	af00      	add	r7, sp, #0
 801873a:	60f8      	str	r0, [r7, #12]
 801873c:	607b      	str	r3, [r7, #4]
 801873e:	460b      	mov	r3, r1
 8018740:	817b      	strh	r3, [r7, #10]
 8018742:	4613      	mov	r3, r2
 8018744:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018746:	897b      	ldrh	r3, [r7, #10]
 8018748:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 801874c:	7a7b      	ldrb	r3, [r7, #9]
 801874e:	041b      	lsls	r3, r3, #16
 8018750:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018754:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018756:	687b      	ldr	r3, [r7, #4]
 8018758:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 801875a:	6a3b      	ldr	r3, [r7, #32]
 801875c:	4313      	orrs	r3, r2
 801875e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018762:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018764:	68fb      	ldr	r3, [r7, #12]
 8018766:	681b      	ldr	r3, [r3, #0]
 8018768:	685a      	ldr	r2, [r3, #4]
 801876a:	6a3b      	ldr	r3, [r7, #32]
 801876c:	0d5b      	lsrs	r3, r3, #21
 801876e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8018772:	4b08      	ldr	r3, [pc, #32]	; (8018794 <I2C_TransferConfig+0x60>)
 8018774:	430b      	orrs	r3, r1
 8018776:	43db      	mvns	r3, r3
 8018778:	ea02 0103 	and.w	r1, r2, r3
 801877c:	68fb      	ldr	r3, [r7, #12]
 801877e:	681b      	ldr	r3, [r3, #0]
 8018780:	697a      	ldr	r2, [r7, #20]
 8018782:	430a      	orrs	r2, r1
 8018784:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018786:	bf00      	nop
 8018788:	371c      	adds	r7, #28
 801878a:	46bd      	mov	sp, r7
 801878c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018790:	4770      	bx	lr
 8018792:	bf00      	nop
 8018794:	03ff63ff 	.word	0x03ff63ff

08018798 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018798:	b480      	push	{r7}
 801879a:	b083      	sub	sp, #12
 801879c:	af00      	add	r7, sp, #0
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80187a2:	687b      	ldr	r3, [r7, #4]
 80187a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80187a8:	b2db      	uxtb	r3, r3
 80187aa:	2b20      	cmp	r3, #32
 80187ac:	d138      	bne.n	8018820 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80187ae:	687b      	ldr	r3, [r7, #4]
 80187b0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80187b4:	2b01      	cmp	r3, #1
 80187b6:	d101      	bne.n	80187bc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80187b8:	2302      	movs	r3, #2
 80187ba:	e032      	b.n	8018822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80187bc:	687b      	ldr	r3, [r7, #4]
 80187be:	2201      	movs	r2, #1
 80187c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80187c4:	687b      	ldr	r3, [r7, #4]
 80187c6:	2224      	movs	r2, #36	; 0x24
 80187c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80187cc:	687b      	ldr	r3, [r7, #4]
 80187ce:	681b      	ldr	r3, [r3, #0]
 80187d0:	681a      	ldr	r2, [r3, #0]
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	681b      	ldr	r3, [r3, #0]
 80187d6:	f022 0201 	bic.w	r2, r2, #1
 80187da:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80187dc:	687b      	ldr	r3, [r7, #4]
 80187de:	681b      	ldr	r3, [r3, #0]
 80187e0:	681a      	ldr	r2, [r3, #0]
 80187e2:	687b      	ldr	r3, [r7, #4]
 80187e4:	681b      	ldr	r3, [r3, #0]
 80187e6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80187ea:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80187ec:	687b      	ldr	r3, [r7, #4]
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	6819      	ldr	r1, [r3, #0]
 80187f2:	687b      	ldr	r3, [r7, #4]
 80187f4:	681b      	ldr	r3, [r3, #0]
 80187f6:	683a      	ldr	r2, [r7, #0]
 80187f8:	430a      	orrs	r2, r1
 80187fa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80187fc:	687b      	ldr	r3, [r7, #4]
 80187fe:	681b      	ldr	r3, [r3, #0]
 8018800:	681a      	ldr	r2, [r3, #0]
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	f042 0201 	orr.w	r2, r2, #1
 801880a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801880c:	687b      	ldr	r3, [r7, #4]
 801880e:	2220      	movs	r2, #32
 8018810:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018814:	687b      	ldr	r3, [r7, #4]
 8018816:	2200      	movs	r2, #0
 8018818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 801881c:	2300      	movs	r3, #0
 801881e:	e000      	b.n	8018822 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018820:	2302      	movs	r3, #2
  }
}
 8018822:	4618      	mov	r0, r3
 8018824:	370c      	adds	r7, #12
 8018826:	46bd      	mov	sp, r7
 8018828:	f85d 7b04 	ldr.w	r7, [sp], #4
 801882c:	4770      	bx	lr

0801882e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801882e:	b480      	push	{r7}
 8018830:	b085      	sub	sp, #20
 8018832:	af00      	add	r7, sp, #0
 8018834:	6078      	str	r0, [r7, #4]
 8018836:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018838:	687b      	ldr	r3, [r7, #4]
 801883a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801883e:	b2db      	uxtb	r3, r3
 8018840:	2b20      	cmp	r3, #32
 8018842:	d139      	bne.n	80188b8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018844:	687b      	ldr	r3, [r7, #4]
 8018846:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 801884a:	2b01      	cmp	r3, #1
 801884c:	d101      	bne.n	8018852 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801884e:	2302      	movs	r3, #2
 8018850:	e033      	b.n	80188ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018852:	687b      	ldr	r3, [r7, #4]
 8018854:	2201      	movs	r2, #1
 8018856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801885a:	687b      	ldr	r3, [r7, #4]
 801885c:	2224      	movs	r2, #36	; 0x24
 801885e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	681a      	ldr	r2, [r3, #0]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	681b      	ldr	r3, [r3, #0]
 801886c:	f022 0201 	bic.w	r2, r2, #1
 8018870:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018872:	687b      	ldr	r3, [r7, #4]
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801887a:	68fb      	ldr	r3, [r7, #12]
 801887c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8018880:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018882:	683b      	ldr	r3, [r7, #0]
 8018884:	021b      	lsls	r3, r3, #8
 8018886:	68fa      	ldr	r2, [r7, #12]
 8018888:	4313      	orrs	r3, r2
 801888a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801888c:	687b      	ldr	r3, [r7, #4]
 801888e:	681b      	ldr	r3, [r3, #0]
 8018890:	68fa      	ldr	r2, [r7, #12]
 8018892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018894:	687b      	ldr	r3, [r7, #4]
 8018896:	681b      	ldr	r3, [r3, #0]
 8018898:	681a      	ldr	r2, [r3, #0]
 801889a:	687b      	ldr	r3, [r7, #4]
 801889c:	681b      	ldr	r3, [r3, #0]
 801889e:	f042 0201 	orr.w	r2, r2, #1
 80188a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80188a4:	687b      	ldr	r3, [r7, #4]
 80188a6:	2220      	movs	r2, #32
 80188a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	2200      	movs	r2, #0
 80188b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80188b4:	2300      	movs	r3, #0
 80188b6:	e000      	b.n	80188ba <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80188b8:	2302      	movs	r3, #2
  }
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3714      	adds	r7, #20
 80188be:	46bd      	mov	sp, r7
 80188c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80188c4:	4770      	bx	lr

080188c6 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 80188c6:	b580      	push	{r7, lr}
 80188c8:	b084      	sub	sp, #16
 80188ca:	af00      	add	r7, sp, #0
 80188cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 80188ce:	687b      	ldr	r3, [r7, #4]
 80188d0:	2b00      	cmp	r3, #0
 80188d2:	d101      	bne.n	80188d8 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 80188d4:	2301      	movs	r3, #1
 80188d6:	e041      	b.n	801895c <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 80188d8:	687b      	ldr	r3, [r7, #4]
 80188da:	681b      	ldr	r3, [r3, #0]
 80188dc:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 80188e0:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	681b      	ldr	r3, [r3, #0]
 80188e6:	f245 5255 	movw	r2, #21845	; 0x5555
 80188ea:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	681b      	ldr	r3, [r3, #0]
 80188f0:	687a      	ldr	r2, [r7, #4]
 80188f2:	6852      	ldr	r2, [r2, #4]
 80188f4:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 80188f6:	687b      	ldr	r3, [r7, #4]
 80188f8:	681b      	ldr	r3, [r3, #0]
 80188fa:	687a      	ldr	r2, [r7, #4]
 80188fc:	6892      	ldr	r2, [r2, #8]
 80188fe:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8018900:	f7fc fcca 	bl	8015298 <HAL_GetTick>
 8018904:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018906:	e00f      	b.n	8018928 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8018908:	f7fc fcc6 	bl	8015298 <HAL_GetTick>
 801890c:	4602      	mov	r2, r0
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	1ad3      	subs	r3, r2, r3
 8018912:	2b31      	cmp	r3, #49	; 0x31
 8018914:	d908      	bls.n	8018928 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018916:	687b      	ldr	r3, [r7, #4]
 8018918:	681b      	ldr	r3, [r3, #0]
 801891a:	68db      	ldr	r3, [r3, #12]
 801891c:	f003 0307 	and.w	r3, r3, #7
 8018920:	2b00      	cmp	r3, #0
 8018922:	d001      	beq.n	8018928 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8018924:	2303      	movs	r3, #3
 8018926:	e019      	b.n	801895c <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8018928:	687b      	ldr	r3, [r7, #4]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	68db      	ldr	r3, [r3, #12]
 801892e:	f003 0307 	and.w	r3, r3, #7
 8018932:	2b00      	cmp	r3, #0
 8018934:	d1e8      	bne.n	8018908 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	691a      	ldr	r2, [r3, #16]
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	68db      	ldr	r3, [r3, #12]
 8018940:	429a      	cmp	r2, r3
 8018942:	d005      	beq.n	8018950 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8018944:	687b      	ldr	r3, [r7, #4]
 8018946:	681b      	ldr	r3, [r3, #0]
 8018948:	687a      	ldr	r2, [r7, #4]
 801894a:	68d2      	ldr	r2, [r2, #12]
 801894c:	611a      	str	r2, [r3, #16]
 801894e:	e004      	b.n	801895a <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8018950:	687b      	ldr	r3, [r7, #4]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018958:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801895a:	2300      	movs	r3, #0
}
 801895c:	4618      	mov	r0, r3
 801895e:	3710      	adds	r7, #16
 8018960:	46bd      	mov	sp, r7
 8018962:	bd80      	pop	{r7, pc}

08018964 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8018964:	b480      	push	{r7}
 8018966:	b083      	sub	sp, #12
 8018968:	af00      	add	r7, sp, #0
 801896a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 801896c:	687b      	ldr	r3, [r7, #4]
 801896e:	681b      	ldr	r3, [r3, #0]
 8018970:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8018974:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8018976:	2300      	movs	r3, #0
}
 8018978:	4618      	mov	r0, r3
 801897a:	370c      	adds	r7, #12
 801897c:	46bd      	mov	sp, r7
 801897e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018982:	4770      	bx	lr

08018984 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8018984:	b580      	push	{r7, lr}
 8018986:	b086      	sub	sp, #24
 8018988:	af00      	add	r7, sp, #0
 801898a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 801898c:	2300      	movs	r3, #0
 801898e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	2b00      	cmp	r3, #0
 8018994:	d101      	bne.n	801899a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8018996:	2301      	movs	r3, #1
 8018998:	e29b      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801899a:	687b      	ldr	r3, [r7, #4]
 801899c:	681b      	ldr	r3, [r3, #0]
 801899e:	f003 0301 	and.w	r3, r3, #1
 80189a2:	2b00      	cmp	r3, #0
 80189a4:	f000 8087 	beq.w	8018ab6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80189a8:	4b96      	ldr	r3, [pc, #600]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 80189aa:	689b      	ldr	r3, [r3, #8]
 80189ac:	f003 030c 	and.w	r3, r3, #12
 80189b0:	2b04      	cmp	r3, #4
 80189b2:	d00c      	beq.n	80189ce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80189b4:	4b93      	ldr	r3, [pc, #588]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 80189b6:	689b      	ldr	r3, [r3, #8]
 80189b8:	f003 030c 	and.w	r3, r3, #12
 80189bc:	2b08      	cmp	r3, #8
 80189be:	d112      	bne.n	80189e6 <HAL_RCC_OscConfig+0x62>
 80189c0:	4b90      	ldr	r3, [pc, #576]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 80189c2:	685b      	ldr	r3, [r3, #4]
 80189c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80189c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80189cc:	d10b      	bne.n	80189e6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80189ce:	4b8d      	ldr	r3, [pc, #564]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 80189d0:	681b      	ldr	r3, [r3, #0]
 80189d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80189d6:	2b00      	cmp	r3, #0
 80189d8:	d06c      	beq.n	8018ab4 <HAL_RCC_OscConfig+0x130>
 80189da:	687b      	ldr	r3, [r7, #4]
 80189dc:	685b      	ldr	r3, [r3, #4]
 80189de:	2b00      	cmp	r3, #0
 80189e0:	d168      	bne.n	8018ab4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80189e2:	2301      	movs	r3, #1
 80189e4:	e275      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80189e6:	687b      	ldr	r3, [r7, #4]
 80189e8:	685b      	ldr	r3, [r3, #4]
 80189ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80189ee:	d106      	bne.n	80189fe <HAL_RCC_OscConfig+0x7a>
 80189f0:	4b84      	ldr	r3, [pc, #528]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 80189f2:	681b      	ldr	r3, [r3, #0]
 80189f4:	4a83      	ldr	r2, [pc, #524]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 80189f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80189fa:	6013      	str	r3, [r2, #0]
 80189fc:	e02e      	b.n	8018a5c <HAL_RCC_OscConfig+0xd8>
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	685b      	ldr	r3, [r3, #4]
 8018a02:	2b00      	cmp	r3, #0
 8018a04:	d10c      	bne.n	8018a20 <HAL_RCC_OscConfig+0x9c>
 8018a06:	4b7f      	ldr	r3, [pc, #508]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a08:	681b      	ldr	r3, [r3, #0]
 8018a0a:	4a7e      	ldr	r2, [pc, #504]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018a10:	6013      	str	r3, [r2, #0]
 8018a12:	4b7c      	ldr	r3, [pc, #496]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a14:	681b      	ldr	r3, [r3, #0]
 8018a16:	4a7b      	ldr	r2, [pc, #492]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a18:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018a1c:	6013      	str	r3, [r2, #0]
 8018a1e:	e01d      	b.n	8018a5c <HAL_RCC_OscConfig+0xd8>
 8018a20:	687b      	ldr	r3, [r7, #4]
 8018a22:	685b      	ldr	r3, [r3, #4]
 8018a24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8018a28:	d10c      	bne.n	8018a44 <HAL_RCC_OscConfig+0xc0>
 8018a2a:	4b76      	ldr	r3, [pc, #472]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a2c:	681b      	ldr	r3, [r3, #0]
 8018a2e:	4a75      	ldr	r2, [pc, #468]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8018a34:	6013      	str	r3, [r2, #0]
 8018a36:	4b73      	ldr	r3, [pc, #460]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	4a72      	ldr	r2, [pc, #456]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8018a40:	6013      	str	r3, [r2, #0]
 8018a42:	e00b      	b.n	8018a5c <HAL_RCC_OscConfig+0xd8>
 8018a44:	4b6f      	ldr	r3, [pc, #444]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	4a6e      	ldr	r2, [pc, #440]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8018a4e:	6013      	str	r3, [r2, #0]
 8018a50:	4b6c      	ldr	r3, [pc, #432]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a52:	681b      	ldr	r3, [r3, #0]
 8018a54:	4a6b      	ldr	r2, [pc, #428]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8018a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	685b      	ldr	r3, [r3, #4]
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d013      	beq.n	8018a8c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018a64:	f7fc fc18 	bl	8015298 <HAL_GetTick>
 8018a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018a6a:	e008      	b.n	8018a7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018a6c:	f7fc fc14 	bl	8015298 <HAL_GetTick>
 8018a70:	4602      	mov	r2, r0
 8018a72:	693b      	ldr	r3, [r7, #16]
 8018a74:	1ad3      	subs	r3, r2, r3
 8018a76:	2b64      	cmp	r3, #100	; 0x64
 8018a78:	d901      	bls.n	8018a7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8018a7a:	2303      	movs	r3, #3
 8018a7c:	e229      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018a7e:	4b61      	ldr	r3, [pc, #388]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018a80:	681b      	ldr	r3, [r3, #0]
 8018a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018a86:	2b00      	cmp	r3, #0
 8018a88:	d0f0      	beq.n	8018a6c <HAL_RCC_OscConfig+0xe8>
 8018a8a:	e014      	b.n	8018ab6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018a8c:	f7fc fc04 	bl	8015298 <HAL_GetTick>
 8018a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018a92:	e008      	b.n	8018aa6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8018a94:	f7fc fc00 	bl	8015298 <HAL_GetTick>
 8018a98:	4602      	mov	r2, r0
 8018a9a:	693b      	ldr	r3, [r7, #16]
 8018a9c:	1ad3      	subs	r3, r2, r3
 8018a9e:	2b64      	cmp	r3, #100	; 0x64
 8018aa0:	d901      	bls.n	8018aa6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8018aa2:	2303      	movs	r3, #3
 8018aa4:	e215      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8018aa6:	4b57      	ldr	r3, [pc, #348]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018aa8:	681b      	ldr	r3, [r3, #0]
 8018aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d1f0      	bne.n	8018a94 <HAL_RCC_OscConfig+0x110>
 8018ab2:	e000      	b.n	8018ab6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8018ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	f003 0302 	and.w	r3, r3, #2
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	d069      	beq.n	8018b96 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8018ac2:	4b50      	ldr	r3, [pc, #320]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018ac4:	689b      	ldr	r3, [r3, #8]
 8018ac6:	f003 030c 	and.w	r3, r3, #12
 8018aca:	2b00      	cmp	r3, #0
 8018acc:	d00b      	beq.n	8018ae6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8018ace:	4b4d      	ldr	r3, [pc, #308]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018ad0:	689b      	ldr	r3, [r3, #8]
 8018ad2:	f003 030c 	and.w	r3, r3, #12
 8018ad6:	2b08      	cmp	r3, #8
 8018ad8:	d11c      	bne.n	8018b14 <HAL_RCC_OscConfig+0x190>
 8018ada:	4b4a      	ldr	r3, [pc, #296]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018adc:	685b      	ldr	r3, [r3, #4]
 8018ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8018ae2:	2b00      	cmp	r3, #0
 8018ae4:	d116      	bne.n	8018b14 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018ae6:	4b47      	ldr	r3, [pc, #284]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018ae8:	681b      	ldr	r3, [r3, #0]
 8018aea:	f003 0302 	and.w	r3, r3, #2
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d005      	beq.n	8018afe <HAL_RCC_OscConfig+0x17a>
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	68db      	ldr	r3, [r3, #12]
 8018af6:	2b01      	cmp	r3, #1
 8018af8:	d001      	beq.n	8018afe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8018afa:	2301      	movs	r3, #1
 8018afc:	e1e9      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018afe:	4b41      	ldr	r3, [pc, #260]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b00:	681b      	ldr	r3, [r3, #0]
 8018b02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018b06:	687b      	ldr	r3, [r7, #4]
 8018b08:	691b      	ldr	r3, [r3, #16]
 8018b0a:	00db      	lsls	r3, r3, #3
 8018b0c:	493d      	ldr	r1, [pc, #244]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b0e:	4313      	orrs	r3, r2
 8018b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8018b12:	e040      	b.n	8018b96 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	68db      	ldr	r3, [r3, #12]
 8018b18:	2b00      	cmp	r3, #0
 8018b1a:	d023      	beq.n	8018b64 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8018b1c:	4b39      	ldr	r3, [pc, #228]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	4a38      	ldr	r2, [pc, #224]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b22:	f043 0301 	orr.w	r3, r3, #1
 8018b26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018b28:	f7fc fbb6 	bl	8015298 <HAL_GetTick>
 8018b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018b2e:	e008      	b.n	8018b42 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018b30:	f7fc fbb2 	bl	8015298 <HAL_GetTick>
 8018b34:	4602      	mov	r2, r0
 8018b36:	693b      	ldr	r3, [r7, #16]
 8018b38:	1ad3      	subs	r3, r2, r3
 8018b3a:	2b02      	cmp	r3, #2
 8018b3c:	d901      	bls.n	8018b42 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8018b3e:	2303      	movs	r3, #3
 8018b40:	e1c7      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018b42:	4b30      	ldr	r3, [pc, #192]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	f003 0302 	and.w	r3, r3, #2
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	d0f0      	beq.n	8018b30 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8018b4e:	4b2d      	ldr	r3, [pc, #180]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b50:	681b      	ldr	r3, [r3, #0]
 8018b52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	691b      	ldr	r3, [r3, #16]
 8018b5a:	00db      	lsls	r3, r3, #3
 8018b5c:	4929      	ldr	r1, [pc, #164]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b5e:	4313      	orrs	r3, r2
 8018b60:	600b      	str	r3, [r1, #0]
 8018b62:	e018      	b.n	8018b96 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8018b64:	4b27      	ldr	r3, [pc, #156]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b66:	681b      	ldr	r3, [r3, #0]
 8018b68:	4a26      	ldr	r2, [pc, #152]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b6a:	f023 0301 	bic.w	r3, r3, #1
 8018b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018b70:	f7fc fb92 	bl	8015298 <HAL_GetTick>
 8018b74:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018b76:	e008      	b.n	8018b8a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8018b78:	f7fc fb8e 	bl	8015298 <HAL_GetTick>
 8018b7c:	4602      	mov	r2, r0
 8018b7e:	693b      	ldr	r3, [r7, #16]
 8018b80:	1ad3      	subs	r3, r2, r3
 8018b82:	2b02      	cmp	r3, #2
 8018b84:	d901      	bls.n	8018b8a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8018b86:	2303      	movs	r3, #3
 8018b88:	e1a3      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8018b8a:	4b1e      	ldr	r3, [pc, #120]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018b8c:	681b      	ldr	r3, [r3, #0]
 8018b8e:	f003 0302 	and.w	r3, r3, #2
 8018b92:	2b00      	cmp	r3, #0
 8018b94:	d1f0      	bne.n	8018b78 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8018b96:	687b      	ldr	r3, [r7, #4]
 8018b98:	681b      	ldr	r3, [r3, #0]
 8018b9a:	f003 0308 	and.w	r3, r3, #8
 8018b9e:	2b00      	cmp	r3, #0
 8018ba0:	d038      	beq.n	8018c14 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	695b      	ldr	r3, [r3, #20]
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d019      	beq.n	8018bde <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8018baa:	4b16      	ldr	r3, [pc, #88]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018bac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018bae:	4a15      	ldr	r2, [pc, #84]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018bb0:	f043 0301 	orr.w	r3, r3, #1
 8018bb4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018bb6:	f7fc fb6f 	bl	8015298 <HAL_GetTick>
 8018bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018bbc:	e008      	b.n	8018bd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018bbe:	f7fc fb6b 	bl	8015298 <HAL_GetTick>
 8018bc2:	4602      	mov	r2, r0
 8018bc4:	693b      	ldr	r3, [r7, #16]
 8018bc6:	1ad3      	subs	r3, r2, r3
 8018bc8:	2b02      	cmp	r3, #2
 8018bca:	d901      	bls.n	8018bd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8018bcc:	2303      	movs	r3, #3
 8018bce:	e180      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8018bd0:	4b0c      	ldr	r3, [pc, #48]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018bd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018bd4:	f003 0302 	and.w	r3, r3, #2
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d0f0      	beq.n	8018bbe <HAL_RCC_OscConfig+0x23a>
 8018bdc:	e01a      	b.n	8018c14 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8018bde:	4b09      	ldr	r3, [pc, #36]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018be0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018be2:	4a08      	ldr	r2, [pc, #32]	; (8018c04 <HAL_RCC_OscConfig+0x280>)
 8018be4:	f023 0301 	bic.w	r3, r3, #1
 8018be8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018bea:	f7fc fb55 	bl	8015298 <HAL_GetTick>
 8018bee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018bf0:	e00a      	b.n	8018c08 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8018bf2:	f7fc fb51 	bl	8015298 <HAL_GetTick>
 8018bf6:	4602      	mov	r2, r0
 8018bf8:	693b      	ldr	r3, [r7, #16]
 8018bfa:	1ad3      	subs	r3, r2, r3
 8018bfc:	2b02      	cmp	r3, #2
 8018bfe:	d903      	bls.n	8018c08 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8018c00:	2303      	movs	r3, #3
 8018c02:	e166      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
 8018c04:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8018c08:	4b92      	ldr	r3, [pc, #584]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018c0c:	f003 0302 	and.w	r3, r3, #2
 8018c10:	2b00      	cmp	r3, #0
 8018c12:	d1ee      	bne.n	8018bf2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	681b      	ldr	r3, [r3, #0]
 8018c18:	f003 0304 	and.w	r3, r3, #4
 8018c1c:	2b00      	cmp	r3, #0
 8018c1e:	f000 80a4 	beq.w	8018d6a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8018c22:	4b8c      	ldr	r3, [pc, #560]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d10d      	bne.n	8018c4a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8018c2e:	4b89      	ldr	r3, [pc, #548]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c32:	4a88      	ldr	r2, [pc, #544]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8018c38:	6413      	str	r3, [r2, #64]	; 0x40
 8018c3a:	4b86      	ldr	r3, [pc, #536]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018c3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8018c42:	60bb      	str	r3, [r7, #8]
 8018c44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8018c46:	2301      	movs	r3, #1
 8018c48:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018c4a:	4b83      	ldr	r3, [pc, #524]	; (8018e58 <HAL_RCC_OscConfig+0x4d4>)
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d118      	bne.n	8018c88 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8018c56:	4b80      	ldr	r3, [pc, #512]	; (8018e58 <HAL_RCC_OscConfig+0x4d4>)
 8018c58:	681b      	ldr	r3, [r3, #0]
 8018c5a:	4a7f      	ldr	r2, [pc, #508]	; (8018e58 <HAL_RCC_OscConfig+0x4d4>)
 8018c5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8018c60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8018c62:	f7fc fb19 	bl	8015298 <HAL_GetTick>
 8018c66:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018c68:	e008      	b.n	8018c7c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8018c6a:	f7fc fb15 	bl	8015298 <HAL_GetTick>
 8018c6e:	4602      	mov	r2, r0
 8018c70:	693b      	ldr	r3, [r7, #16]
 8018c72:	1ad3      	subs	r3, r2, r3
 8018c74:	2b64      	cmp	r3, #100	; 0x64
 8018c76:	d901      	bls.n	8018c7c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8018c78:	2303      	movs	r3, #3
 8018c7a:	e12a      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8018c7c:	4b76      	ldr	r3, [pc, #472]	; (8018e58 <HAL_RCC_OscConfig+0x4d4>)
 8018c7e:	681b      	ldr	r3, [r3, #0]
 8018c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8018c84:	2b00      	cmp	r3, #0
 8018c86:	d0f0      	beq.n	8018c6a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	689b      	ldr	r3, [r3, #8]
 8018c8c:	2b01      	cmp	r3, #1
 8018c8e:	d106      	bne.n	8018c9e <HAL_RCC_OscConfig+0x31a>
 8018c90:	4b70      	ldr	r3, [pc, #448]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c94:	4a6f      	ldr	r2, [pc, #444]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018c96:	f043 0301 	orr.w	r3, r3, #1
 8018c9a:	6713      	str	r3, [r2, #112]	; 0x70
 8018c9c:	e02d      	b.n	8018cfa <HAL_RCC_OscConfig+0x376>
 8018c9e:	687b      	ldr	r3, [r7, #4]
 8018ca0:	689b      	ldr	r3, [r3, #8]
 8018ca2:	2b00      	cmp	r3, #0
 8018ca4:	d10c      	bne.n	8018cc0 <HAL_RCC_OscConfig+0x33c>
 8018ca6:	4b6b      	ldr	r3, [pc, #428]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018caa:	4a6a      	ldr	r2, [pc, #424]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cac:	f023 0301 	bic.w	r3, r3, #1
 8018cb0:	6713      	str	r3, [r2, #112]	; 0x70
 8018cb2:	4b68      	ldr	r3, [pc, #416]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cb6:	4a67      	ldr	r2, [pc, #412]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cb8:	f023 0304 	bic.w	r3, r3, #4
 8018cbc:	6713      	str	r3, [r2, #112]	; 0x70
 8018cbe:	e01c      	b.n	8018cfa <HAL_RCC_OscConfig+0x376>
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	689b      	ldr	r3, [r3, #8]
 8018cc4:	2b05      	cmp	r3, #5
 8018cc6:	d10c      	bne.n	8018ce2 <HAL_RCC_OscConfig+0x35e>
 8018cc8:	4b62      	ldr	r3, [pc, #392]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ccc:	4a61      	ldr	r2, [pc, #388]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cce:	f043 0304 	orr.w	r3, r3, #4
 8018cd2:	6713      	str	r3, [r2, #112]	; 0x70
 8018cd4:	4b5f      	ldr	r3, [pc, #380]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cd8:	4a5e      	ldr	r2, [pc, #376]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cda:	f043 0301 	orr.w	r3, r3, #1
 8018cde:	6713      	str	r3, [r2, #112]	; 0x70
 8018ce0:	e00b      	b.n	8018cfa <HAL_RCC_OscConfig+0x376>
 8018ce2:	4b5c      	ldr	r3, [pc, #368]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018ce6:	4a5b      	ldr	r2, [pc, #364]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018ce8:	f023 0301 	bic.w	r3, r3, #1
 8018cec:	6713      	str	r3, [r2, #112]	; 0x70
 8018cee:	4b59      	ldr	r3, [pc, #356]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018cf2:	4a58      	ldr	r2, [pc, #352]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018cf4:	f023 0304 	bic.w	r3, r3, #4
 8018cf8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	689b      	ldr	r3, [r3, #8]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d015      	beq.n	8018d2e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018d02:	f7fc fac9 	bl	8015298 <HAL_GetTick>
 8018d06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018d08:	e00a      	b.n	8018d20 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018d0a:	f7fc fac5 	bl	8015298 <HAL_GetTick>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	693b      	ldr	r3, [r7, #16]
 8018d12:	1ad3      	subs	r3, r2, r3
 8018d14:	f241 3288 	movw	r2, #5000	; 0x1388
 8018d18:	4293      	cmp	r3, r2
 8018d1a:	d901      	bls.n	8018d20 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8018d1c:	2303      	movs	r3, #3
 8018d1e:	e0d8      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8018d20:	4b4c      	ldr	r3, [pc, #304]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d24:	f003 0302 	and.w	r3, r3, #2
 8018d28:	2b00      	cmp	r3, #0
 8018d2a:	d0ee      	beq.n	8018d0a <HAL_RCC_OscConfig+0x386>
 8018d2c:	e014      	b.n	8018d58 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8018d2e:	f7fc fab3 	bl	8015298 <HAL_GetTick>
 8018d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018d34:	e00a      	b.n	8018d4c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8018d36:	f7fc faaf 	bl	8015298 <HAL_GetTick>
 8018d3a:	4602      	mov	r2, r0
 8018d3c:	693b      	ldr	r3, [r7, #16]
 8018d3e:	1ad3      	subs	r3, r2, r3
 8018d40:	f241 3288 	movw	r2, #5000	; 0x1388
 8018d44:	4293      	cmp	r3, r2
 8018d46:	d901      	bls.n	8018d4c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8018d48:	2303      	movs	r3, #3
 8018d4a:	e0c2      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8018d4c:	4b41      	ldr	r3, [pc, #260]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d50:	f003 0302 	and.w	r3, r3, #2
 8018d54:	2b00      	cmp	r3, #0
 8018d56:	d1ee      	bne.n	8018d36 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8018d58:	7dfb      	ldrb	r3, [r7, #23]
 8018d5a:	2b01      	cmp	r3, #1
 8018d5c:	d105      	bne.n	8018d6a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8018d5e:	4b3d      	ldr	r3, [pc, #244]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8018d62:	4a3c      	ldr	r2, [pc, #240]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8018d68:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	699b      	ldr	r3, [r3, #24]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	f000 80ae 	beq.w	8018ed0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8018d74:	4b37      	ldr	r3, [pc, #220]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d76:	689b      	ldr	r3, [r3, #8]
 8018d78:	f003 030c 	and.w	r3, r3, #12
 8018d7c:	2b08      	cmp	r3, #8
 8018d7e:	d06d      	beq.n	8018e5c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	699b      	ldr	r3, [r3, #24]
 8018d84:	2b02      	cmp	r3, #2
 8018d86:	d14b      	bne.n	8018e20 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018d88:	4b32      	ldr	r3, [pc, #200]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d8a:	681b      	ldr	r3, [r3, #0]
 8018d8c:	4a31      	ldr	r2, [pc, #196]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018d8e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8018d92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018d94:	f7fc fa80 	bl	8015298 <HAL_GetTick>
 8018d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018d9a:	e008      	b.n	8018dae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018d9c:	f7fc fa7c 	bl	8015298 <HAL_GetTick>
 8018da0:	4602      	mov	r2, r0
 8018da2:	693b      	ldr	r3, [r7, #16]
 8018da4:	1ad3      	subs	r3, r2, r3
 8018da6:	2b02      	cmp	r3, #2
 8018da8:	d901      	bls.n	8018dae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8018daa:	2303      	movs	r3, #3
 8018dac:	e091      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018dae:	4b29      	ldr	r3, [pc, #164]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018db0:	681b      	ldr	r3, [r3, #0]
 8018db2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d1f0      	bne.n	8018d9c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	69da      	ldr	r2, [r3, #28]
 8018dbe:	687b      	ldr	r3, [r7, #4]
 8018dc0:	6a1b      	ldr	r3, [r3, #32]
 8018dc2:	431a      	orrs	r2, r3
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018dc8:	019b      	lsls	r3, r3, #6
 8018dca:	431a      	orrs	r2, r3
 8018dcc:	687b      	ldr	r3, [r7, #4]
 8018dce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018dd0:	085b      	lsrs	r3, r3, #1
 8018dd2:	3b01      	subs	r3, #1
 8018dd4:	041b      	lsls	r3, r3, #16
 8018dd6:	431a      	orrs	r2, r3
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018ddc:	061b      	lsls	r3, r3, #24
 8018dde:	431a      	orrs	r2, r3
 8018de0:	687b      	ldr	r3, [r7, #4]
 8018de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018de4:	071b      	lsls	r3, r3, #28
 8018de6:	491b      	ldr	r1, [pc, #108]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018de8:	4313      	orrs	r3, r2
 8018dea:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8018dec:	4b19      	ldr	r3, [pc, #100]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018dee:	681b      	ldr	r3, [r3, #0]
 8018df0:	4a18      	ldr	r2, [pc, #96]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8018df6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018df8:	f7fc fa4e 	bl	8015298 <HAL_GetTick>
 8018dfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018dfe:	e008      	b.n	8018e12 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018e00:	f7fc fa4a 	bl	8015298 <HAL_GetTick>
 8018e04:	4602      	mov	r2, r0
 8018e06:	693b      	ldr	r3, [r7, #16]
 8018e08:	1ad3      	subs	r3, r2, r3
 8018e0a:	2b02      	cmp	r3, #2
 8018e0c:	d901      	bls.n	8018e12 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8018e0e:	2303      	movs	r3, #3
 8018e10:	e05f      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018e12:	4b10      	ldr	r3, [pc, #64]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018e14:	681b      	ldr	r3, [r3, #0]
 8018e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018e1a:	2b00      	cmp	r3, #0
 8018e1c:	d0f0      	beq.n	8018e00 <HAL_RCC_OscConfig+0x47c>
 8018e1e:	e057      	b.n	8018ed0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8018e20:	4b0c      	ldr	r3, [pc, #48]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018e22:	681b      	ldr	r3, [r3, #0]
 8018e24:	4a0b      	ldr	r2, [pc, #44]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018e26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8018e2a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8018e2c:	f7fc fa34 	bl	8015298 <HAL_GetTick>
 8018e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018e32:	e008      	b.n	8018e46 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8018e34:	f7fc fa30 	bl	8015298 <HAL_GetTick>
 8018e38:	4602      	mov	r2, r0
 8018e3a:	693b      	ldr	r3, [r7, #16]
 8018e3c:	1ad3      	subs	r3, r2, r3
 8018e3e:	2b02      	cmp	r3, #2
 8018e40:	d901      	bls.n	8018e46 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8018e42:	2303      	movs	r3, #3
 8018e44:	e045      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8018e46:	4b03      	ldr	r3, [pc, #12]	; (8018e54 <HAL_RCC_OscConfig+0x4d0>)
 8018e48:	681b      	ldr	r3, [r3, #0]
 8018e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018e4e:	2b00      	cmp	r3, #0
 8018e50:	d1f0      	bne.n	8018e34 <HAL_RCC_OscConfig+0x4b0>
 8018e52:	e03d      	b.n	8018ed0 <HAL_RCC_OscConfig+0x54c>
 8018e54:	40023800 	.word	0x40023800
 8018e58:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8018e5c:	4b1f      	ldr	r3, [pc, #124]	; (8018edc <HAL_RCC_OscConfig+0x558>)
 8018e5e:	685b      	ldr	r3, [r3, #4]
 8018e60:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	699b      	ldr	r3, [r3, #24]
 8018e66:	2b01      	cmp	r3, #1
 8018e68:	d030      	beq.n	8018ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018e6a:	68fb      	ldr	r3, [r7, #12]
 8018e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8018e74:	429a      	cmp	r2, r3
 8018e76:	d129      	bne.n	8018ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018e78:	68fb      	ldr	r3, [r7, #12]
 8018e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8018e82:	429a      	cmp	r2, r3
 8018e84:	d122      	bne.n	8018ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8018e86:	68fa      	ldr	r2, [r7, #12]
 8018e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8018e8c:	4013      	ands	r3, r2
 8018e8e:	687a      	ldr	r2, [r7, #4]
 8018e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8018e92:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8018e94:	4293      	cmp	r3, r2
 8018e96:	d119      	bne.n	8018ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8018e98:	68fb      	ldr	r3, [r7, #12]
 8018e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8018ea2:	085b      	lsrs	r3, r3, #1
 8018ea4:	3b01      	subs	r3, #1
 8018ea6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8018ea8:	429a      	cmp	r2, r3
 8018eaa:	d10f      	bne.n	8018ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8018eac:	68fb      	ldr	r3, [r7, #12]
 8018eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8018eb6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8018eb8:	429a      	cmp	r2, r3
 8018eba:	d107      	bne.n	8018ecc <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8018ebc:	68fb      	ldr	r3, [r7, #12]
 8018ebe:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8018ec6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8018ec8:	429a      	cmp	r2, r3
 8018eca:	d001      	beq.n	8018ed0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8018ecc:	2301      	movs	r3, #1
 8018ece:	e000      	b.n	8018ed2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8018ed0:	2300      	movs	r3, #0
}
 8018ed2:	4618      	mov	r0, r3
 8018ed4:	3718      	adds	r7, #24
 8018ed6:	46bd      	mov	sp, r7
 8018ed8:	bd80      	pop	{r7, pc}
 8018eda:	bf00      	nop
 8018edc:	40023800 	.word	0x40023800

08018ee0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8018ee0:	b580      	push	{r7, lr}
 8018ee2:	b084      	sub	sp, #16
 8018ee4:	af00      	add	r7, sp, #0
 8018ee6:	6078      	str	r0, [r7, #4]
 8018ee8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8018eea:	2300      	movs	r3, #0
 8018eec:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8018eee:	687b      	ldr	r3, [r7, #4]
 8018ef0:	2b00      	cmp	r3, #0
 8018ef2:	d101      	bne.n	8018ef8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8018ef4:	2301      	movs	r3, #1
 8018ef6:	e0d0      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8018ef8:	4b6a      	ldr	r3, [pc, #424]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8018efa:	681b      	ldr	r3, [r3, #0]
 8018efc:	f003 030f 	and.w	r3, r3, #15
 8018f00:	683a      	ldr	r2, [r7, #0]
 8018f02:	429a      	cmp	r2, r3
 8018f04:	d910      	bls.n	8018f28 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8018f06:	4b67      	ldr	r3, [pc, #412]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8018f08:	681b      	ldr	r3, [r3, #0]
 8018f0a:	f023 020f 	bic.w	r2, r3, #15
 8018f0e:	4965      	ldr	r1, [pc, #404]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8018f10:	683b      	ldr	r3, [r7, #0]
 8018f12:	4313      	orrs	r3, r2
 8018f14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8018f16:	4b63      	ldr	r3, [pc, #396]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	f003 030f 	and.w	r3, r3, #15
 8018f1e:	683a      	ldr	r2, [r7, #0]
 8018f20:	429a      	cmp	r2, r3
 8018f22:	d001      	beq.n	8018f28 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8018f24:	2301      	movs	r3, #1
 8018f26:	e0b8      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8018f28:	687b      	ldr	r3, [r7, #4]
 8018f2a:	681b      	ldr	r3, [r3, #0]
 8018f2c:	f003 0302 	and.w	r3, r3, #2
 8018f30:	2b00      	cmp	r3, #0
 8018f32:	d020      	beq.n	8018f76 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	681b      	ldr	r3, [r3, #0]
 8018f38:	f003 0304 	and.w	r3, r3, #4
 8018f3c:	2b00      	cmp	r3, #0
 8018f3e:	d005      	beq.n	8018f4c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8018f40:	4b59      	ldr	r3, [pc, #356]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f42:	689b      	ldr	r3, [r3, #8]
 8018f44:	4a58      	ldr	r2, [pc, #352]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f46:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8018f4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8018f4c:	687b      	ldr	r3, [r7, #4]
 8018f4e:	681b      	ldr	r3, [r3, #0]
 8018f50:	f003 0308 	and.w	r3, r3, #8
 8018f54:	2b00      	cmp	r3, #0
 8018f56:	d005      	beq.n	8018f64 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8018f58:	4b53      	ldr	r3, [pc, #332]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f5a:	689b      	ldr	r3, [r3, #8]
 8018f5c:	4a52      	ldr	r2, [pc, #328]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f5e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8018f62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8018f64:	4b50      	ldr	r3, [pc, #320]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f66:	689b      	ldr	r3, [r3, #8]
 8018f68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	689b      	ldr	r3, [r3, #8]
 8018f70:	494d      	ldr	r1, [pc, #308]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f72:	4313      	orrs	r3, r2
 8018f74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8018f76:	687b      	ldr	r3, [r7, #4]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	f003 0301 	and.w	r3, r3, #1
 8018f7e:	2b00      	cmp	r3, #0
 8018f80:	d040      	beq.n	8019004 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8018f82:	687b      	ldr	r3, [r7, #4]
 8018f84:	685b      	ldr	r3, [r3, #4]
 8018f86:	2b01      	cmp	r3, #1
 8018f88:	d107      	bne.n	8018f9a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8018f8a:	4b47      	ldr	r3, [pc, #284]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8018f92:	2b00      	cmp	r3, #0
 8018f94:	d115      	bne.n	8018fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8018f96:	2301      	movs	r3, #1
 8018f98:	e07f      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	685b      	ldr	r3, [r3, #4]
 8018f9e:	2b02      	cmp	r3, #2
 8018fa0:	d107      	bne.n	8018fb2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8018fa2:	4b41      	ldr	r3, [pc, #260]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018fa4:	681b      	ldr	r3, [r3, #0]
 8018fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8018faa:	2b00      	cmp	r3, #0
 8018fac:	d109      	bne.n	8018fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8018fae:	2301      	movs	r3, #1
 8018fb0:	e073      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8018fb2:	4b3d      	ldr	r3, [pc, #244]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018fb4:	681b      	ldr	r3, [r3, #0]
 8018fb6:	f003 0302 	and.w	r3, r3, #2
 8018fba:	2b00      	cmp	r3, #0
 8018fbc:	d101      	bne.n	8018fc2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8018fbe:	2301      	movs	r3, #1
 8018fc0:	e06b      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8018fc2:	4b39      	ldr	r3, [pc, #228]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018fc4:	689b      	ldr	r3, [r3, #8]
 8018fc6:	f023 0203 	bic.w	r2, r3, #3
 8018fca:	687b      	ldr	r3, [r7, #4]
 8018fcc:	685b      	ldr	r3, [r3, #4]
 8018fce:	4936      	ldr	r1, [pc, #216]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018fd0:	4313      	orrs	r3, r2
 8018fd2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8018fd4:	f7fc f960 	bl	8015298 <HAL_GetTick>
 8018fd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018fda:	e00a      	b.n	8018ff2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8018fdc:	f7fc f95c 	bl	8015298 <HAL_GetTick>
 8018fe0:	4602      	mov	r2, r0
 8018fe2:	68fb      	ldr	r3, [r7, #12]
 8018fe4:	1ad3      	subs	r3, r2, r3
 8018fe6:	f241 3288 	movw	r2, #5000	; 0x1388
 8018fea:	4293      	cmp	r3, r2
 8018fec:	d901      	bls.n	8018ff2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8018fee:	2303      	movs	r3, #3
 8018ff0:	e053      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8018ff2:	4b2d      	ldr	r3, [pc, #180]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8018ff4:	689b      	ldr	r3, [r3, #8]
 8018ff6:	f003 020c 	and.w	r2, r3, #12
 8018ffa:	687b      	ldr	r3, [r7, #4]
 8018ffc:	685b      	ldr	r3, [r3, #4]
 8018ffe:	009b      	lsls	r3, r3, #2
 8019000:	429a      	cmp	r2, r3
 8019002:	d1eb      	bne.n	8018fdc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8019004:	4b27      	ldr	r3, [pc, #156]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	f003 030f 	and.w	r3, r3, #15
 801900c:	683a      	ldr	r2, [r7, #0]
 801900e:	429a      	cmp	r2, r3
 8019010:	d210      	bcs.n	8019034 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8019012:	4b24      	ldr	r3, [pc, #144]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	f023 020f 	bic.w	r2, r3, #15
 801901a:	4922      	ldr	r1, [pc, #136]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 801901c:	683b      	ldr	r3, [r7, #0]
 801901e:	4313      	orrs	r3, r2
 8019020:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8019022:	4b20      	ldr	r3, [pc, #128]	; (80190a4 <HAL_RCC_ClockConfig+0x1c4>)
 8019024:	681b      	ldr	r3, [r3, #0]
 8019026:	f003 030f 	and.w	r3, r3, #15
 801902a:	683a      	ldr	r2, [r7, #0]
 801902c:	429a      	cmp	r2, r3
 801902e:	d001      	beq.n	8019034 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8019030:	2301      	movs	r3, #1
 8019032:	e032      	b.n	801909a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8019034:	687b      	ldr	r3, [r7, #4]
 8019036:	681b      	ldr	r3, [r3, #0]
 8019038:	f003 0304 	and.w	r3, r3, #4
 801903c:	2b00      	cmp	r3, #0
 801903e:	d008      	beq.n	8019052 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8019040:	4b19      	ldr	r3, [pc, #100]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8019042:	689b      	ldr	r3, [r3, #8]
 8019044:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8019048:	687b      	ldr	r3, [r7, #4]
 801904a:	68db      	ldr	r3, [r3, #12]
 801904c:	4916      	ldr	r1, [pc, #88]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 801904e:	4313      	orrs	r3, r2
 8019050:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8019052:	687b      	ldr	r3, [r7, #4]
 8019054:	681b      	ldr	r3, [r3, #0]
 8019056:	f003 0308 	and.w	r3, r3, #8
 801905a:	2b00      	cmp	r3, #0
 801905c:	d009      	beq.n	8019072 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801905e:	4b12      	ldr	r3, [pc, #72]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 8019060:	689b      	ldr	r3, [r3, #8]
 8019062:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8019066:	687b      	ldr	r3, [r7, #4]
 8019068:	691b      	ldr	r3, [r3, #16]
 801906a:	00db      	lsls	r3, r3, #3
 801906c:	490e      	ldr	r1, [pc, #56]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 801906e:	4313      	orrs	r3, r2
 8019070:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8019072:	f000 f821 	bl	80190b8 <HAL_RCC_GetSysClockFreq>
 8019076:	4602      	mov	r2, r0
 8019078:	4b0b      	ldr	r3, [pc, #44]	; (80190a8 <HAL_RCC_ClockConfig+0x1c8>)
 801907a:	689b      	ldr	r3, [r3, #8]
 801907c:	091b      	lsrs	r3, r3, #4
 801907e:	f003 030f 	and.w	r3, r3, #15
 8019082:	490a      	ldr	r1, [pc, #40]	; (80190ac <HAL_RCC_ClockConfig+0x1cc>)
 8019084:	5ccb      	ldrb	r3, [r1, r3]
 8019086:	fa22 f303 	lsr.w	r3, r2, r3
 801908a:	4a09      	ldr	r2, [pc, #36]	; (80190b0 <HAL_RCC_ClockConfig+0x1d0>)
 801908c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 801908e:	4b09      	ldr	r3, [pc, #36]	; (80190b4 <HAL_RCC_ClockConfig+0x1d4>)
 8019090:	681b      	ldr	r3, [r3, #0]
 8019092:	4618      	mov	r0, r3
 8019094:	f7fc f8bc 	bl	8015210 <HAL_InitTick>

  return HAL_OK;
 8019098:	2300      	movs	r3, #0
}
 801909a:	4618      	mov	r0, r3
 801909c:	3710      	adds	r7, #16
 801909e:	46bd      	mov	sp, r7
 80190a0:	bd80      	pop	{r7, pc}
 80190a2:	bf00      	nop
 80190a4:	40023c00 	.word	0x40023c00
 80190a8:	40023800 	.word	0x40023800
 80190ac:	08028b30 	.word	0x08028b30
 80190b0:	2000011c 	.word	0x2000011c
 80190b4:	20000120 	.word	0x20000120

080190b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80190b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80190bc:	b090      	sub	sp, #64	; 0x40
 80190be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80190c0:	2300      	movs	r3, #0
 80190c2:	637b      	str	r3, [r7, #52]	; 0x34
 80190c4:	2300      	movs	r3, #0
 80190c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80190c8:	2300      	movs	r3, #0
 80190ca:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80190cc:	2300      	movs	r3, #0
 80190ce:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80190d0:	4b59      	ldr	r3, [pc, #356]	; (8019238 <HAL_RCC_GetSysClockFreq+0x180>)
 80190d2:	689b      	ldr	r3, [r3, #8]
 80190d4:	f003 030c 	and.w	r3, r3, #12
 80190d8:	2b08      	cmp	r3, #8
 80190da:	d00d      	beq.n	80190f8 <HAL_RCC_GetSysClockFreq+0x40>
 80190dc:	2b08      	cmp	r3, #8
 80190de:	f200 80a1 	bhi.w	8019224 <HAL_RCC_GetSysClockFreq+0x16c>
 80190e2:	2b00      	cmp	r3, #0
 80190e4:	d002      	beq.n	80190ec <HAL_RCC_GetSysClockFreq+0x34>
 80190e6:	2b04      	cmp	r3, #4
 80190e8:	d003      	beq.n	80190f2 <HAL_RCC_GetSysClockFreq+0x3a>
 80190ea:	e09b      	b.n	8019224 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80190ec:	4b53      	ldr	r3, [pc, #332]	; (801923c <HAL_RCC_GetSysClockFreq+0x184>)
 80190ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80190f0:	e09b      	b.n	801922a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80190f2:	4b53      	ldr	r3, [pc, #332]	; (8019240 <HAL_RCC_GetSysClockFreq+0x188>)
 80190f4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80190f6:	e098      	b.n	801922a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80190f8:	4b4f      	ldr	r3, [pc, #316]	; (8019238 <HAL_RCC_GetSysClockFreq+0x180>)
 80190fa:	685b      	ldr	r3, [r3, #4]
 80190fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8019100:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8019102:	4b4d      	ldr	r3, [pc, #308]	; (8019238 <HAL_RCC_GetSysClockFreq+0x180>)
 8019104:	685b      	ldr	r3, [r3, #4]
 8019106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801910a:	2b00      	cmp	r3, #0
 801910c:	d028      	beq.n	8019160 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 801910e:	4b4a      	ldr	r3, [pc, #296]	; (8019238 <HAL_RCC_GetSysClockFreq+0x180>)
 8019110:	685b      	ldr	r3, [r3, #4]
 8019112:	099b      	lsrs	r3, r3, #6
 8019114:	2200      	movs	r2, #0
 8019116:	623b      	str	r3, [r7, #32]
 8019118:	627a      	str	r2, [r7, #36]	; 0x24
 801911a:	6a3b      	ldr	r3, [r7, #32]
 801911c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8019120:	2100      	movs	r1, #0
 8019122:	4b47      	ldr	r3, [pc, #284]	; (8019240 <HAL_RCC_GetSysClockFreq+0x188>)
 8019124:	fb03 f201 	mul.w	r2, r3, r1
 8019128:	2300      	movs	r3, #0
 801912a:	fb00 f303 	mul.w	r3, r0, r3
 801912e:	4413      	add	r3, r2
 8019130:	4a43      	ldr	r2, [pc, #268]	; (8019240 <HAL_RCC_GetSysClockFreq+0x188>)
 8019132:	fba0 1202 	umull	r1, r2, r0, r2
 8019136:	62fa      	str	r2, [r7, #44]	; 0x2c
 8019138:	460a      	mov	r2, r1
 801913a:	62ba      	str	r2, [r7, #40]	; 0x28
 801913c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801913e:	4413      	add	r3, r2
 8019140:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8019144:	2200      	movs	r2, #0
 8019146:	61bb      	str	r3, [r7, #24]
 8019148:	61fa      	str	r2, [r7, #28]
 801914a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 801914e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8019152:	f7e7 f8dd 	bl	8000310 <__aeabi_uldivmod>
 8019156:	4602      	mov	r2, r0
 8019158:	460b      	mov	r3, r1
 801915a:	4613      	mov	r3, r2
 801915c:	63fb      	str	r3, [r7, #60]	; 0x3c
 801915e:	e053      	b.n	8019208 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8019160:	4b35      	ldr	r3, [pc, #212]	; (8019238 <HAL_RCC_GetSysClockFreq+0x180>)
 8019162:	685b      	ldr	r3, [r3, #4]
 8019164:	099b      	lsrs	r3, r3, #6
 8019166:	2200      	movs	r2, #0
 8019168:	613b      	str	r3, [r7, #16]
 801916a:	617a      	str	r2, [r7, #20]
 801916c:	693b      	ldr	r3, [r7, #16]
 801916e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8019172:	f04f 0b00 	mov.w	fp, #0
 8019176:	4652      	mov	r2, sl
 8019178:	465b      	mov	r3, fp
 801917a:	f04f 0000 	mov.w	r0, #0
 801917e:	f04f 0100 	mov.w	r1, #0
 8019182:	0159      	lsls	r1, r3, #5
 8019184:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8019188:	0150      	lsls	r0, r2, #5
 801918a:	4602      	mov	r2, r0
 801918c:	460b      	mov	r3, r1
 801918e:	ebb2 080a 	subs.w	r8, r2, sl
 8019192:	eb63 090b 	sbc.w	r9, r3, fp
 8019196:	f04f 0200 	mov.w	r2, #0
 801919a:	f04f 0300 	mov.w	r3, #0
 801919e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80191a2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80191a6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80191aa:	ebb2 0408 	subs.w	r4, r2, r8
 80191ae:	eb63 0509 	sbc.w	r5, r3, r9
 80191b2:	f04f 0200 	mov.w	r2, #0
 80191b6:	f04f 0300 	mov.w	r3, #0
 80191ba:	00eb      	lsls	r3, r5, #3
 80191bc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80191c0:	00e2      	lsls	r2, r4, #3
 80191c2:	4614      	mov	r4, r2
 80191c4:	461d      	mov	r5, r3
 80191c6:	eb14 030a 	adds.w	r3, r4, sl
 80191ca:	603b      	str	r3, [r7, #0]
 80191cc:	eb45 030b 	adc.w	r3, r5, fp
 80191d0:	607b      	str	r3, [r7, #4]
 80191d2:	f04f 0200 	mov.w	r2, #0
 80191d6:	f04f 0300 	mov.w	r3, #0
 80191da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80191de:	4629      	mov	r1, r5
 80191e0:	028b      	lsls	r3, r1, #10
 80191e2:	4621      	mov	r1, r4
 80191e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80191e8:	4621      	mov	r1, r4
 80191ea:	028a      	lsls	r2, r1, #10
 80191ec:	4610      	mov	r0, r2
 80191ee:	4619      	mov	r1, r3
 80191f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80191f2:	2200      	movs	r2, #0
 80191f4:	60bb      	str	r3, [r7, #8]
 80191f6:	60fa      	str	r2, [r7, #12]
 80191f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80191fc:	f7e7 f888 	bl	8000310 <__aeabi_uldivmod>
 8019200:	4602      	mov	r2, r0
 8019202:	460b      	mov	r3, r1
 8019204:	4613      	mov	r3, r2
 8019206:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8019208:	4b0b      	ldr	r3, [pc, #44]	; (8019238 <HAL_RCC_GetSysClockFreq+0x180>)
 801920a:	685b      	ldr	r3, [r3, #4]
 801920c:	0c1b      	lsrs	r3, r3, #16
 801920e:	f003 0303 	and.w	r3, r3, #3
 8019212:	3301      	adds	r3, #1
 8019214:	005b      	lsls	r3, r3, #1
 8019216:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8019218:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801921a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801921c:	fbb2 f3f3 	udiv	r3, r2, r3
 8019220:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019222:	e002      	b.n	801922a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8019224:	4b05      	ldr	r3, [pc, #20]	; (801923c <HAL_RCC_GetSysClockFreq+0x184>)
 8019226:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8019228:	bf00      	nop
    }
  }
  return sysclockfreq;
 801922a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 801922c:	4618      	mov	r0, r3
 801922e:	3740      	adds	r7, #64	; 0x40
 8019230:	46bd      	mov	sp, r7
 8019232:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019236:	bf00      	nop
 8019238:	40023800 	.word	0x40023800
 801923c:	00f42400 	.word	0x00f42400
 8019240:	00b71b00 	.word	0x00b71b00

08019244 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8019244:	b480      	push	{r7}
 8019246:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8019248:	4b03      	ldr	r3, [pc, #12]	; (8019258 <HAL_RCC_GetHCLKFreq+0x14>)
 801924a:	681b      	ldr	r3, [r3, #0]
}
 801924c:	4618      	mov	r0, r3
 801924e:	46bd      	mov	sp, r7
 8019250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019254:	4770      	bx	lr
 8019256:	bf00      	nop
 8019258:	2000011c 	.word	0x2000011c

0801925c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801925c:	b580      	push	{r7, lr}
 801925e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8019260:	f7ff fff0 	bl	8019244 <HAL_RCC_GetHCLKFreq>
 8019264:	4602      	mov	r2, r0
 8019266:	4b05      	ldr	r3, [pc, #20]	; (801927c <HAL_RCC_GetPCLK1Freq+0x20>)
 8019268:	689b      	ldr	r3, [r3, #8]
 801926a:	0a9b      	lsrs	r3, r3, #10
 801926c:	f003 0307 	and.w	r3, r3, #7
 8019270:	4903      	ldr	r1, [pc, #12]	; (8019280 <HAL_RCC_GetPCLK1Freq+0x24>)
 8019272:	5ccb      	ldrb	r3, [r1, r3]
 8019274:	fa22 f303 	lsr.w	r3, r2, r3
}
 8019278:	4618      	mov	r0, r3
 801927a:	bd80      	pop	{r7, pc}
 801927c:	40023800 	.word	0x40023800
 8019280:	08028b40 	.word	0x08028b40

08019284 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8019284:	b580      	push	{r7, lr}
 8019286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8019288:	f7ff ffdc 	bl	8019244 <HAL_RCC_GetHCLKFreq>
 801928c:	4602      	mov	r2, r0
 801928e:	4b05      	ldr	r3, [pc, #20]	; (80192a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8019290:	689b      	ldr	r3, [r3, #8]
 8019292:	0b5b      	lsrs	r3, r3, #13
 8019294:	f003 0307 	and.w	r3, r3, #7
 8019298:	4903      	ldr	r1, [pc, #12]	; (80192a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801929a:	5ccb      	ldrb	r3, [r1, r3]
 801929c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80192a0:	4618      	mov	r0, r3
 80192a2:	bd80      	pop	{r7, pc}
 80192a4:	40023800 	.word	0x40023800
 80192a8:	08028b40 	.word	0x08028b40

080192ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80192ac:	b580      	push	{r7, lr}
 80192ae:	b088      	sub	sp, #32
 80192b0:	af00      	add	r7, sp, #0
 80192b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80192b4:	2300      	movs	r3, #0
 80192b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80192b8:	2300      	movs	r3, #0
 80192ba:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80192bc:	2300      	movs	r3, #0
 80192be:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80192c0:	2300      	movs	r3, #0
 80192c2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80192c4:	2300      	movs	r3, #0
 80192c6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80192c8:	687b      	ldr	r3, [r7, #4]
 80192ca:	681b      	ldr	r3, [r3, #0]
 80192cc:	f003 0301 	and.w	r3, r3, #1
 80192d0:	2b00      	cmp	r3, #0
 80192d2:	d012      	beq.n	80192fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80192d4:	4b69      	ldr	r3, [pc, #420]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192d6:	689b      	ldr	r3, [r3, #8]
 80192d8:	4a68      	ldr	r2, [pc, #416]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192da:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80192de:	6093      	str	r3, [r2, #8]
 80192e0:	4b66      	ldr	r3, [pc, #408]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192e2:	689a      	ldr	r2, [r3, #8]
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192e8:	4964      	ldr	r1, [pc, #400]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80192ea:	4313      	orrs	r3, r2
 80192ec:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d101      	bne.n	80192fa <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80192f6:	2301      	movs	r3, #1
 80192f8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80192fa:	687b      	ldr	r3, [r7, #4]
 80192fc:	681b      	ldr	r3, [r3, #0]
 80192fe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019302:	2b00      	cmp	r3, #0
 8019304:	d017      	beq.n	8019336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8019306:	4b5d      	ldr	r3, [pc, #372]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801930c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8019310:	687b      	ldr	r3, [r7, #4]
 8019312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019314:	4959      	ldr	r1, [pc, #356]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019316:	4313      	orrs	r3, r2
 8019318:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 801931c:	687b      	ldr	r3, [r7, #4]
 801931e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8019320:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019324:	d101      	bne.n	801932a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8019326:	2301      	movs	r3, #1
 8019328:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 801932a:	687b      	ldr	r3, [r7, #4]
 801932c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801932e:	2b00      	cmp	r3, #0
 8019330:	d101      	bne.n	8019336 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8019332:	2301      	movs	r3, #1
 8019334:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8019336:	687b      	ldr	r3, [r7, #4]
 8019338:	681b      	ldr	r3, [r3, #0]
 801933a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801933e:	2b00      	cmp	r3, #0
 8019340:	d017      	beq.n	8019372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8019342:	4b4e      	ldr	r3, [pc, #312]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019344:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019348:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 801934c:	687b      	ldr	r3, [r7, #4]
 801934e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019350:	494a      	ldr	r1, [pc, #296]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019352:	4313      	orrs	r3, r2
 8019354:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8019358:	687b      	ldr	r3, [r7, #4]
 801935a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801935c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019360:	d101      	bne.n	8019366 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8019362:	2301      	movs	r3, #1
 8019364:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801936a:	2b00      	cmp	r3, #0
 801936c:	d101      	bne.n	8019372 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 801936e:	2301      	movs	r3, #1
 8019370:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8019372:	687b      	ldr	r3, [r7, #4]
 8019374:	681b      	ldr	r3, [r3, #0]
 8019376:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 801937a:	2b00      	cmp	r3, #0
 801937c:	d001      	beq.n	8019382 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 801937e:	2301      	movs	r3, #1
 8019380:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8019382:	687b      	ldr	r3, [r7, #4]
 8019384:	681b      	ldr	r3, [r3, #0]
 8019386:	f003 0320 	and.w	r3, r3, #32
 801938a:	2b00      	cmp	r3, #0
 801938c:	f000 808b 	beq.w	80194a6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8019390:	4b3a      	ldr	r3, [pc, #232]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019394:	4a39      	ldr	r2, [pc, #228]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019396:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801939a:	6413      	str	r3, [r2, #64]	; 0x40
 801939c:	4b37      	ldr	r3, [pc, #220]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801939e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80193a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80193a4:	60bb      	str	r3, [r7, #8]
 80193a6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80193a8:	4b35      	ldr	r3, [pc, #212]	; (8019480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80193aa:	681b      	ldr	r3, [r3, #0]
 80193ac:	4a34      	ldr	r2, [pc, #208]	; (8019480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80193ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80193b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80193b4:	f7fb ff70 	bl	8015298 <HAL_GetTick>
 80193b8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80193ba:	e008      	b.n	80193ce <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80193bc:	f7fb ff6c 	bl	8015298 <HAL_GetTick>
 80193c0:	4602      	mov	r2, r0
 80193c2:	697b      	ldr	r3, [r7, #20]
 80193c4:	1ad3      	subs	r3, r2, r3
 80193c6:	2b64      	cmp	r3, #100	; 0x64
 80193c8:	d901      	bls.n	80193ce <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80193ca:	2303      	movs	r3, #3
 80193cc:	e38f      	b.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80193ce:	4b2c      	ldr	r3, [pc, #176]	; (8019480 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80193d0:	681b      	ldr	r3, [r3, #0]
 80193d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80193d6:	2b00      	cmp	r3, #0
 80193d8:	d0f0      	beq.n	80193bc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80193da:	4b28      	ldr	r3, [pc, #160]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80193e2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80193e4:	693b      	ldr	r3, [r7, #16]
 80193e6:	2b00      	cmp	r3, #0
 80193e8:	d035      	beq.n	8019456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80193ea:	687b      	ldr	r3, [r7, #4]
 80193ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80193ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80193f2:	693a      	ldr	r2, [r7, #16]
 80193f4:	429a      	cmp	r2, r3
 80193f6:	d02e      	beq.n	8019456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80193f8:	4b20      	ldr	r3, [pc, #128]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80193fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80193fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8019400:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8019402:	4b1e      	ldr	r3, [pc, #120]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019406:	4a1d      	ldr	r2, [pc, #116]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 801940c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 801940e:	4b1b      	ldr	r3, [pc, #108]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019412:	4a1a      	ldr	r2, [pc, #104]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019414:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8019418:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 801941a:	4a18      	ldr	r2, [pc, #96]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801941c:	693b      	ldr	r3, [r7, #16]
 801941e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8019420:	4b16      	ldr	r3, [pc, #88]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019424:	f003 0301 	and.w	r3, r3, #1
 8019428:	2b01      	cmp	r3, #1
 801942a:	d114      	bne.n	8019456 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801942c:	f7fb ff34 	bl	8015298 <HAL_GetTick>
 8019430:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8019432:	e00a      	b.n	801944a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8019434:	f7fb ff30 	bl	8015298 <HAL_GetTick>
 8019438:	4602      	mov	r2, r0
 801943a:	697b      	ldr	r3, [r7, #20]
 801943c:	1ad3      	subs	r3, r2, r3
 801943e:	f241 3288 	movw	r2, #5000	; 0x1388
 8019442:	4293      	cmp	r3, r2
 8019444:	d901      	bls.n	801944a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8019446:	2303      	movs	r3, #3
 8019448:	e351      	b.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801944a:	4b0c      	ldr	r3, [pc, #48]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 801944c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801944e:	f003 0302 	and.w	r3, r3, #2
 8019452:	2b00      	cmp	r3, #0
 8019454:	d0ee      	beq.n	8019434 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8019456:	687b      	ldr	r3, [r7, #4]
 8019458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801945a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801945e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8019462:	d111      	bne.n	8019488 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8019464:	4b05      	ldr	r3, [pc, #20]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019466:	689b      	ldr	r3, [r3, #8]
 8019468:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 801946c:	687b      	ldr	r3, [r7, #4]
 801946e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8019470:	4b04      	ldr	r3, [pc, #16]	; (8019484 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8019472:	400b      	ands	r3, r1
 8019474:	4901      	ldr	r1, [pc, #4]	; (801947c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8019476:	4313      	orrs	r3, r2
 8019478:	608b      	str	r3, [r1, #8]
 801947a:	e00b      	b.n	8019494 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 801947c:	40023800 	.word	0x40023800
 8019480:	40007000 	.word	0x40007000
 8019484:	0ffffcff 	.word	0x0ffffcff
 8019488:	4bac      	ldr	r3, [pc, #688]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801948a:	689b      	ldr	r3, [r3, #8]
 801948c:	4aab      	ldr	r2, [pc, #684]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801948e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8019492:	6093      	str	r3, [r2, #8]
 8019494:	4ba9      	ldr	r3, [pc, #676]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019496:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8019498:	687b      	ldr	r3, [r7, #4]
 801949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801949c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80194a0:	49a6      	ldr	r1, [pc, #664]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194a2:	4313      	orrs	r3, r2
 80194a4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	681b      	ldr	r3, [r3, #0]
 80194aa:	f003 0310 	and.w	r3, r3, #16
 80194ae:	2b00      	cmp	r3, #0
 80194b0:	d010      	beq.n	80194d4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80194b2:	4ba2      	ldr	r3, [pc, #648]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80194b8:	4aa0      	ldr	r2, [pc, #640]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80194be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80194c2:	4b9e      	ldr	r3, [pc, #632]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194c4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80194c8:	687b      	ldr	r3, [r7, #4]
 80194ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80194cc:	499b      	ldr	r1, [pc, #620]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194ce:	4313      	orrs	r3, r2
 80194d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80194d4:	687b      	ldr	r3, [r7, #4]
 80194d6:	681b      	ldr	r3, [r3, #0]
 80194d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80194dc:	2b00      	cmp	r3, #0
 80194de:	d00a      	beq.n	80194f6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80194e0:	4b96      	ldr	r3, [pc, #600]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80194e6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80194ee:	4993      	ldr	r1, [pc, #588]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80194f0:	4313      	orrs	r3, r2
 80194f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	681b      	ldr	r3, [r3, #0]
 80194fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80194fe:	2b00      	cmp	r3, #0
 8019500:	d00a      	beq.n	8019518 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8019502:	4b8e      	ldr	r3, [pc, #568]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019504:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019508:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 801950c:	687b      	ldr	r3, [r7, #4]
 801950e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8019510:	498a      	ldr	r1, [pc, #552]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019512:	4313      	orrs	r3, r2
 8019514:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	681b      	ldr	r3, [r3, #0]
 801951c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8019520:	2b00      	cmp	r3, #0
 8019522:	d00a      	beq.n	801953a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8019524:	4b85      	ldr	r3, [pc, #532]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019526:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801952a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019532:	4982      	ldr	r1, [pc, #520]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019534:	4313      	orrs	r3, r2
 8019536:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	681b      	ldr	r3, [r3, #0]
 801953e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8019542:	2b00      	cmp	r3, #0
 8019544:	d00a      	beq.n	801955c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8019546:	4b7d      	ldr	r3, [pc, #500]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801954c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8019550:	687b      	ldr	r3, [r7, #4]
 8019552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019554:	4979      	ldr	r1, [pc, #484]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019556:	4313      	orrs	r3, r2
 8019558:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019564:	2b00      	cmp	r3, #0
 8019566:	d00a      	beq.n	801957e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8019568:	4b74      	ldr	r3, [pc, #464]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801956a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801956e:	f023 0203 	bic.w	r2, r3, #3
 8019572:	687b      	ldr	r3, [r7, #4]
 8019574:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8019576:	4971      	ldr	r1, [pc, #452]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019578:	4313      	orrs	r3, r2
 801957a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019586:	2b00      	cmp	r3, #0
 8019588:	d00a      	beq.n	80195a0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 801958a:	4b6c      	ldr	r3, [pc, #432]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801958c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019590:	f023 020c 	bic.w	r2, r3, #12
 8019594:	687b      	ldr	r3, [r7, #4]
 8019596:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8019598:	4968      	ldr	r1, [pc, #416]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801959a:	4313      	orrs	r3, r2
 801959c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	681b      	ldr	r3, [r3, #0]
 80195a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80195a8:	2b00      	cmp	r3, #0
 80195aa:	d00a      	beq.n	80195c2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80195ac:	4b63      	ldr	r3, [pc, #396]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195b2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80195b6:	687b      	ldr	r3, [r7, #4]
 80195b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80195ba:	4960      	ldr	r1, [pc, #384]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195bc:	4313      	orrs	r3, r2
 80195be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80195c2:	687b      	ldr	r3, [r7, #4]
 80195c4:	681b      	ldr	r3, [r3, #0]
 80195c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80195ca:	2b00      	cmp	r3, #0
 80195cc:	d00a      	beq.n	80195e4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80195ce:	4b5b      	ldr	r3, [pc, #364]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195d4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80195d8:	687b      	ldr	r3, [r7, #4]
 80195da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80195dc:	4957      	ldr	r1, [pc, #348]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195de:	4313      	orrs	r3, r2
 80195e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80195e4:	687b      	ldr	r3, [r7, #4]
 80195e6:	681b      	ldr	r3, [r3, #0]
 80195e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80195ec:	2b00      	cmp	r3, #0
 80195ee:	d00a      	beq.n	8019606 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80195f0:	4b52      	ldr	r3, [pc, #328]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80195f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80195f6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80195fa:	687b      	ldr	r3, [r7, #4]
 80195fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80195fe:	494f      	ldr	r1, [pc, #316]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019600:	4313      	orrs	r3, r2
 8019602:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801960e:	2b00      	cmp	r3, #0
 8019610:	d00a      	beq.n	8019628 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8019612:	4b4a      	ldr	r3, [pc, #296]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019614:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019618:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801961c:	687b      	ldr	r3, [r7, #4]
 801961e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8019620:	4946      	ldr	r1, [pc, #280]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019622:	4313      	orrs	r3, r2
 8019624:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8019628:	687b      	ldr	r3, [r7, #4]
 801962a:	681b      	ldr	r3, [r3, #0]
 801962c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8019630:	2b00      	cmp	r3, #0
 8019632:	d00a      	beq.n	801964a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8019634:	4b41      	ldr	r3, [pc, #260]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801963a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 801963e:	687b      	ldr	r3, [r7, #4]
 8019640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8019642:	493e      	ldr	r1, [pc, #248]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019644:	4313      	orrs	r3, r2
 8019646:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 801964a:	687b      	ldr	r3, [r7, #4]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8019652:	2b00      	cmp	r3, #0
 8019654:	d00a      	beq.n	801966c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8019656:	4b39      	ldr	r3, [pc, #228]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801965c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8019660:	687b      	ldr	r3, [r7, #4]
 8019662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8019664:	4935      	ldr	r1, [pc, #212]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019666:	4313      	orrs	r3, r2
 8019668:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801966c:	687b      	ldr	r3, [r7, #4]
 801966e:	681b      	ldr	r3, [r3, #0]
 8019670:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8019674:	2b00      	cmp	r3, #0
 8019676:	d00a      	beq.n	801968e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8019678:	4b30      	ldr	r3, [pc, #192]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801967a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801967e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019686:	492d      	ldr	r1, [pc, #180]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019688:	4313      	orrs	r3, r2
 801968a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	681b      	ldr	r3, [r3, #0]
 8019692:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019696:	2b00      	cmp	r3, #0
 8019698:	d011      	beq.n	80196be <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 801969a:	4b28      	ldr	r3, [pc, #160]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801969c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80196a0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80196a4:	687b      	ldr	r3, [r7, #4]
 80196a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196a8:	4924      	ldr	r1, [pc, #144]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196aa:	4313      	orrs	r3, r2
 80196ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80196b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80196b8:	d101      	bne.n	80196be <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80196ba:	2301      	movs	r3, #1
 80196bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80196be:	687b      	ldr	r3, [r7, #4]
 80196c0:	681b      	ldr	r3, [r3, #0]
 80196c2:	f003 0308 	and.w	r3, r3, #8
 80196c6:	2b00      	cmp	r3, #0
 80196c8:	d001      	beq.n	80196ce <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80196ca:	2301      	movs	r3, #1
 80196cc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	681b      	ldr	r3, [r3, #0]
 80196d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80196d6:	2b00      	cmp	r3, #0
 80196d8:	d00a      	beq.n	80196f0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80196da:	4b18      	ldr	r3, [pc, #96]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80196e0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80196e4:	687b      	ldr	r3, [r7, #4]
 80196e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80196e8:	4914      	ldr	r1, [pc, #80]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196ea:	4313      	orrs	r3, r2
 80196ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
 80196f4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80196f8:	2b00      	cmp	r3, #0
 80196fa:	d00b      	beq.n	8019714 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80196fc:	4b0f      	ldr	r3, [pc, #60]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80196fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019702:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8019706:	687b      	ldr	r3, [r7, #4]
 8019708:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801970c:	490b      	ldr	r1, [pc, #44]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 801970e:	4313      	orrs	r3, r2
 8019710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801971c:	2b00      	cmp	r3, #0
 801971e:	d00f      	beq.n	8019740 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8019720:	4b06      	ldr	r3, [pc, #24]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8019726:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 801972a:	687b      	ldr	r3, [r7, #4]
 801972c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019730:	4902      	ldr	r1, [pc, #8]	; (801973c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8019732:	4313      	orrs	r3, r2
 8019734:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8019738:	e002      	b.n	8019740 <HAL_RCCEx_PeriphCLKConfig+0x494>
 801973a:	bf00      	nop
 801973c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	681b      	ldr	r3, [r3, #0]
 8019744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019748:	2b00      	cmp	r3, #0
 801974a:	d00b      	beq.n	8019764 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801974c:	4b8a      	ldr	r3, [pc, #552]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801974e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019752:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8019756:	687b      	ldr	r3, [r7, #4]
 8019758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801975c:	4986      	ldr	r1, [pc, #536]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801975e:	4313      	orrs	r3, r2
 8019760:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8019764:	687b      	ldr	r3, [r7, #4]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801976c:	2b00      	cmp	r3, #0
 801976e:	d00b      	beq.n	8019788 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8019770:	4b81      	ldr	r3, [pc, #516]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019772:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019776:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 801977a:	687b      	ldr	r3, [r7, #4]
 801977c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019780:	497d      	ldr	r1, [pc, #500]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019782:	4313      	orrs	r3, r2
 8019784:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	2b01      	cmp	r3, #1
 801978c:	d006      	beq.n	801979c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	681b      	ldr	r3, [r3, #0]
 8019792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8019796:	2b00      	cmp	r3, #0
 8019798:	f000 80d6 	beq.w	8019948 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 801979c:	4b76      	ldr	r3, [pc, #472]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	4a75      	ldr	r2, [pc, #468]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80197a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80197a8:	f7fb fd76 	bl	8015298 <HAL_GetTick>
 80197ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80197ae:	e008      	b.n	80197c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80197b0:	f7fb fd72 	bl	8015298 <HAL_GetTick>
 80197b4:	4602      	mov	r2, r0
 80197b6:	697b      	ldr	r3, [r7, #20]
 80197b8:	1ad3      	subs	r3, r2, r3
 80197ba:	2b64      	cmp	r3, #100	; 0x64
 80197bc:	d901      	bls.n	80197c2 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80197be:	2303      	movs	r3, #3
 80197c0:	e195      	b.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80197c2:	4b6d      	ldr	r3, [pc, #436]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197c4:	681b      	ldr	r3, [r3, #0]
 80197c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80197ca:	2b00      	cmp	r3, #0
 80197cc:	d1f0      	bne.n	80197b0 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80197ce:	687b      	ldr	r3, [r7, #4]
 80197d0:	681b      	ldr	r3, [r3, #0]
 80197d2:	f003 0301 	and.w	r3, r3, #1
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d021      	beq.n	801981e <HAL_RCCEx_PeriphCLKConfig+0x572>
 80197da:	687b      	ldr	r3, [r7, #4]
 80197dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80197de:	2b00      	cmp	r3, #0
 80197e0:	d11d      	bne.n	801981e <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80197e2:	4b65      	ldr	r3, [pc, #404]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80197e8:	0c1b      	lsrs	r3, r3, #16
 80197ea:	f003 0303 	and.w	r3, r3, #3
 80197ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80197f0:	4b61      	ldr	r3, [pc, #388]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80197f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80197f6:	0e1b      	lsrs	r3, r3, #24
 80197f8:	f003 030f 	and.w	r3, r3, #15
 80197fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80197fe:	687b      	ldr	r3, [r7, #4]
 8019800:	685b      	ldr	r3, [r3, #4]
 8019802:	019a      	lsls	r2, r3, #6
 8019804:	693b      	ldr	r3, [r7, #16]
 8019806:	041b      	lsls	r3, r3, #16
 8019808:	431a      	orrs	r2, r3
 801980a:	68fb      	ldr	r3, [r7, #12]
 801980c:	061b      	lsls	r3, r3, #24
 801980e:	431a      	orrs	r2, r3
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	689b      	ldr	r3, [r3, #8]
 8019814:	071b      	lsls	r3, r3, #28
 8019816:	4958      	ldr	r1, [pc, #352]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019818:	4313      	orrs	r3, r2
 801981a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	681b      	ldr	r3, [r3, #0]
 8019822:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019826:	2b00      	cmp	r3, #0
 8019828:	d004      	beq.n	8019834 <HAL_RCCEx_PeriphCLKConfig+0x588>
 801982a:	687b      	ldr	r3, [r7, #4]
 801982c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801982e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8019832:	d00a      	beq.n	801984a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	681b      	ldr	r3, [r3, #0]
 8019838:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 801983c:	2b00      	cmp	r3, #0
 801983e:	d02e      	beq.n	801989e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8019840:	687b      	ldr	r3, [r7, #4]
 8019842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8019844:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8019848:	d129      	bne.n	801989e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 801984a:	4b4b      	ldr	r3, [pc, #300]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801984c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8019850:	0c1b      	lsrs	r3, r3, #16
 8019852:	f003 0303 	and.w	r3, r3, #3
 8019856:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8019858:	4b47      	ldr	r3, [pc, #284]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801985a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801985e:	0f1b      	lsrs	r3, r3, #28
 8019860:	f003 0307 	and.w	r3, r3, #7
 8019864:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8019866:	687b      	ldr	r3, [r7, #4]
 8019868:	685b      	ldr	r3, [r3, #4]
 801986a:	019a      	lsls	r2, r3, #6
 801986c:	693b      	ldr	r3, [r7, #16]
 801986e:	041b      	lsls	r3, r3, #16
 8019870:	431a      	orrs	r2, r3
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	68db      	ldr	r3, [r3, #12]
 8019876:	061b      	lsls	r3, r3, #24
 8019878:	431a      	orrs	r2, r3
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	071b      	lsls	r3, r3, #28
 801987e:	493e      	ldr	r1, [pc, #248]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019880:	4313      	orrs	r3, r2
 8019882:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8019886:	4b3c      	ldr	r3, [pc, #240]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019888:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801988c:	f023 021f 	bic.w	r2, r3, #31
 8019890:	687b      	ldr	r3, [r7, #4]
 8019892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019894:	3b01      	subs	r3, #1
 8019896:	4938      	ldr	r1, [pc, #224]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019898:	4313      	orrs	r3, r2
 801989a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	681b      	ldr	r3, [r3, #0]
 80198a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80198a6:	2b00      	cmp	r3, #0
 80198a8:	d01d      	beq.n	80198e6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80198aa:	4b33      	ldr	r3, [pc, #204]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80198b0:	0e1b      	lsrs	r3, r3, #24
 80198b2:	f003 030f 	and.w	r3, r3, #15
 80198b6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80198b8:	4b2f      	ldr	r3, [pc, #188]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80198be:	0f1b      	lsrs	r3, r3, #28
 80198c0:	f003 0307 	and.w	r3, r3, #7
 80198c4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	685b      	ldr	r3, [r3, #4]
 80198ca:	019a      	lsls	r2, r3, #6
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	691b      	ldr	r3, [r3, #16]
 80198d0:	041b      	lsls	r3, r3, #16
 80198d2:	431a      	orrs	r2, r3
 80198d4:	693b      	ldr	r3, [r7, #16]
 80198d6:	061b      	lsls	r3, r3, #24
 80198d8:	431a      	orrs	r2, r3
 80198da:	68fb      	ldr	r3, [r7, #12]
 80198dc:	071b      	lsls	r3, r3, #28
 80198de:	4926      	ldr	r1, [pc, #152]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80198e0:	4313      	orrs	r3, r2
 80198e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80198e6:	687b      	ldr	r3, [r7, #4]
 80198e8:	681b      	ldr	r3, [r3, #0]
 80198ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d011      	beq.n	8019916 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	685b      	ldr	r3, [r3, #4]
 80198f6:	019a      	lsls	r2, r3, #6
 80198f8:	687b      	ldr	r3, [r7, #4]
 80198fa:	691b      	ldr	r3, [r3, #16]
 80198fc:	041b      	lsls	r3, r3, #16
 80198fe:	431a      	orrs	r2, r3
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	68db      	ldr	r3, [r3, #12]
 8019904:	061b      	lsls	r3, r3, #24
 8019906:	431a      	orrs	r2, r3
 8019908:	687b      	ldr	r3, [r7, #4]
 801990a:	689b      	ldr	r3, [r3, #8]
 801990c:	071b      	lsls	r3, r3, #28
 801990e:	491a      	ldr	r1, [pc, #104]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019910:	4313      	orrs	r3, r2
 8019912:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8019916:	4b18      	ldr	r3, [pc, #96]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019918:	681b      	ldr	r3, [r3, #0]
 801991a:	4a17      	ldr	r2, [pc, #92]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801991c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8019920:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019922:	f7fb fcb9 	bl	8015298 <HAL_GetTick>
 8019926:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8019928:	e008      	b.n	801993c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 801992a:	f7fb fcb5 	bl	8015298 <HAL_GetTick>
 801992e:	4602      	mov	r2, r0
 8019930:	697b      	ldr	r3, [r7, #20]
 8019932:	1ad3      	subs	r3, r2, r3
 8019934:	2b64      	cmp	r3, #100	; 0x64
 8019936:	d901      	bls.n	801993c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019938:	2303      	movs	r3, #3
 801993a:	e0d8      	b.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 801993c:	4b0e      	ldr	r3, [pc, #56]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 801993e:	681b      	ldr	r3, [r3, #0]
 8019940:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8019944:	2b00      	cmp	r3, #0
 8019946:	d0f0      	beq.n	801992a <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8019948:	69bb      	ldr	r3, [r7, #24]
 801994a:	2b01      	cmp	r3, #1
 801994c:	f040 80ce 	bne.w	8019aec <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8019950:	4b09      	ldr	r3, [pc, #36]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019952:	681b      	ldr	r3, [r3, #0]
 8019954:	4a08      	ldr	r2, [pc, #32]	; (8019978 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8019956:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 801995a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801995c:	f7fb fc9c 	bl	8015298 <HAL_GetTick>
 8019960:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8019962:	e00b      	b.n	801997c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019964:	f7fb fc98 	bl	8015298 <HAL_GetTick>
 8019968:	4602      	mov	r2, r0
 801996a:	697b      	ldr	r3, [r7, #20]
 801996c:	1ad3      	subs	r3, r2, r3
 801996e:	2b64      	cmp	r3, #100	; 0x64
 8019970:	d904      	bls.n	801997c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019972:	2303      	movs	r3, #3
 8019974:	e0bb      	b.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x842>
 8019976:	bf00      	nop
 8019978:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 801997c:	4b5e      	ldr	r3, [pc, #376]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019984:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019988:	d0ec      	beq.n	8019964 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8019992:	2b00      	cmp	r3, #0
 8019994:	d003      	beq.n	801999e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8019996:	687b      	ldr	r3, [r7, #4]
 8019998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801999a:	2b00      	cmp	r3, #0
 801999c:	d009      	beq.n	80199b2 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80199a6:	2b00      	cmp	r3, #0
 80199a8:	d02e      	beq.n	8019a08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80199aa:	687b      	ldr	r3, [r7, #4]
 80199ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80199ae:	2b00      	cmp	r3, #0
 80199b0:	d12a      	bne.n	8019a08 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80199b2:	4b51      	ldr	r3, [pc, #324]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80199b8:	0c1b      	lsrs	r3, r3, #16
 80199ba:	f003 0303 	and.w	r3, r3, #3
 80199be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80199c0:	4b4d      	ldr	r3, [pc, #308]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80199c6:	0f1b      	lsrs	r3, r3, #28
 80199c8:	f003 0307 	and.w	r3, r3, #7
 80199cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80199ce:	687b      	ldr	r3, [r7, #4]
 80199d0:	695b      	ldr	r3, [r3, #20]
 80199d2:	019a      	lsls	r2, r3, #6
 80199d4:	693b      	ldr	r3, [r7, #16]
 80199d6:	041b      	lsls	r3, r3, #16
 80199d8:	431a      	orrs	r2, r3
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	699b      	ldr	r3, [r3, #24]
 80199de:	061b      	lsls	r3, r3, #24
 80199e0:	431a      	orrs	r2, r3
 80199e2:	68fb      	ldr	r3, [r7, #12]
 80199e4:	071b      	lsls	r3, r3, #28
 80199e6:	4944      	ldr	r1, [pc, #272]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199e8:	4313      	orrs	r3, r2
 80199ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80199ee:	4b42      	ldr	r3, [pc, #264]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80199f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80199f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80199fc:	3b01      	subs	r3, #1
 80199fe:	021b      	lsls	r3, r3, #8
 8019a00:	493d      	ldr	r1, [pc, #244]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a02:	4313      	orrs	r3, r2
 8019a04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8019a10:	2b00      	cmp	r3, #0
 8019a12:	d022      	beq.n	8019a5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8019a14:	687b      	ldr	r3, [r7, #4]
 8019a16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8019a18:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8019a1c:	d11d      	bne.n	8019a5a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019a1e:	4b36      	ldr	r3, [pc, #216]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a24:	0e1b      	lsrs	r3, r3, #24
 8019a26:	f003 030f 	and.w	r3, r3, #15
 8019a2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8019a2c:	4b32      	ldr	r3, [pc, #200]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a32:	0f1b      	lsrs	r3, r3, #28
 8019a34:	f003 0307 	and.w	r3, r3, #7
 8019a38:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8019a3a:	687b      	ldr	r3, [r7, #4]
 8019a3c:	695b      	ldr	r3, [r3, #20]
 8019a3e:	019a      	lsls	r2, r3, #6
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	6a1b      	ldr	r3, [r3, #32]
 8019a44:	041b      	lsls	r3, r3, #16
 8019a46:	431a      	orrs	r2, r3
 8019a48:	693b      	ldr	r3, [r7, #16]
 8019a4a:	061b      	lsls	r3, r3, #24
 8019a4c:	431a      	orrs	r2, r3
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	071b      	lsls	r3, r3, #28
 8019a52:	4929      	ldr	r1, [pc, #164]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a54:	4313      	orrs	r3, r2
 8019a56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8019a5a:	687b      	ldr	r3, [r7, #4]
 8019a5c:	681b      	ldr	r3, [r3, #0]
 8019a5e:	f003 0308 	and.w	r3, r3, #8
 8019a62:	2b00      	cmp	r3, #0
 8019a64:	d028      	beq.n	8019ab8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8019a66:	4b24      	ldr	r3, [pc, #144]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a6c:	0e1b      	lsrs	r3, r3, #24
 8019a6e:	f003 030f 	and.w	r3, r3, #15
 8019a72:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8019a74:	4b20      	ldr	r3, [pc, #128]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8019a7a:	0c1b      	lsrs	r3, r3, #16
 8019a7c:	f003 0303 	and.w	r3, r3, #3
 8019a80:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8019a82:	687b      	ldr	r3, [r7, #4]
 8019a84:	695b      	ldr	r3, [r3, #20]
 8019a86:	019a      	lsls	r2, r3, #6
 8019a88:	68fb      	ldr	r3, [r7, #12]
 8019a8a:	041b      	lsls	r3, r3, #16
 8019a8c:	431a      	orrs	r2, r3
 8019a8e:	693b      	ldr	r3, [r7, #16]
 8019a90:	061b      	lsls	r3, r3, #24
 8019a92:	431a      	orrs	r2, r3
 8019a94:	687b      	ldr	r3, [r7, #4]
 8019a96:	69db      	ldr	r3, [r3, #28]
 8019a98:	071b      	lsls	r3, r3, #28
 8019a9a:	4917      	ldr	r1, [pc, #92]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019a9c:	4313      	orrs	r3, r2
 8019a9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8019aa2:	4b15      	ldr	r3, [pc, #84]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019aa4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8019aa8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8019aac:	687b      	ldr	r3, [r7, #4]
 8019aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019ab0:	4911      	ldr	r1, [pc, #68]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ab2:	4313      	orrs	r3, r2
 8019ab4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8019ab8:	4b0f      	ldr	r3, [pc, #60]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019aba:	681b      	ldr	r3, [r3, #0]
 8019abc:	4a0e      	ldr	r2, [pc, #56]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8019ac2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8019ac4:	f7fb fbe8 	bl	8015298 <HAL_GetTick>
 8019ac8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019aca:	e008      	b.n	8019ade <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8019acc:	f7fb fbe4 	bl	8015298 <HAL_GetTick>
 8019ad0:	4602      	mov	r2, r0
 8019ad2:	697b      	ldr	r3, [r7, #20]
 8019ad4:	1ad3      	subs	r3, r2, r3
 8019ad6:	2b64      	cmp	r3, #100	; 0x64
 8019ad8:	d901      	bls.n	8019ade <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8019ada:	2303      	movs	r3, #3
 8019adc:	e007      	b.n	8019aee <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8019ade:	4b06      	ldr	r3, [pc, #24]	; (8019af8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8019ae0:	681b      	ldr	r3, [r3, #0]
 8019ae2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8019ae6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8019aea:	d1ef      	bne.n	8019acc <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8019aec:	2300      	movs	r3, #0
}
 8019aee:	4618      	mov	r0, r3
 8019af0:	3720      	adds	r7, #32
 8019af2:	46bd      	mov	sp, r7
 8019af4:	bd80      	pop	{r7, pc}
 8019af6:	bf00      	nop
 8019af8:	40023800 	.word	0x40023800

08019afc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8019afc:	b580      	push	{r7, lr}
 8019afe:	b082      	sub	sp, #8
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8019b04:	687b      	ldr	r3, [r7, #4]
 8019b06:	2b00      	cmp	r3, #0
 8019b08:	d101      	bne.n	8019b0e <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8019b0a:	2301      	movs	r3, #1
 8019b0c:	e01c      	b.n	8019b48 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8019b0e:	687b      	ldr	r3, [r7, #4]
 8019b10:	795b      	ldrb	r3, [r3, #5]
 8019b12:	b2db      	uxtb	r3, r3
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d105      	bne.n	8019b24 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8019b18:	687b      	ldr	r3, [r7, #4]
 8019b1a:	2200      	movs	r2, #0
 8019b1c:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8019b1e:	6878      	ldr	r0, [r7, #4]
 8019b20:	f7f9 fe48 	bl	80137b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8019b24:	687b      	ldr	r3, [r7, #4]
 8019b26:	2202      	movs	r2, #2
 8019b28:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	681b      	ldr	r3, [r3, #0]
 8019b2e:	681a      	ldr	r2, [r3, #0]
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	f042 0204 	orr.w	r2, r2, #4
 8019b38:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	2201      	movs	r2, #1
 8019b3e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8019b40:	687b      	ldr	r3, [r7, #4]
 8019b42:	2200      	movs	r2, #0
 8019b44:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8019b46:	2300      	movs	r3, #0
}
 8019b48:	4618      	mov	r0, r3
 8019b4a:	3708      	adds	r7, #8
 8019b4c:	46bd      	mov	sp, r7
 8019b4e:	bd80      	pop	{r7, pc}

08019b50 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8019b50:	b580      	push	{r7, lr}
 8019b52:	b084      	sub	sp, #16
 8019b54:	af00      	add	r7, sp, #0
 8019b56:	6078      	str	r0, [r7, #4]
 8019b58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8019b5a:	2300      	movs	r3, #0
 8019b5c:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8019b5e:	687b      	ldr	r3, [r7, #4]
 8019b60:	791b      	ldrb	r3, [r3, #4]
 8019b62:	2b01      	cmp	r3, #1
 8019b64:	d101      	bne.n	8019b6a <HAL_RNG_GenerateRandomNumber+0x1a>
 8019b66:	2302      	movs	r3, #2
 8019b68:	e044      	b.n	8019bf4 <HAL_RNG_GenerateRandomNumber+0xa4>
 8019b6a:	687b      	ldr	r3, [r7, #4]
 8019b6c:	2201      	movs	r2, #1
 8019b6e:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8019b70:	687b      	ldr	r3, [r7, #4]
 8019b72:	795b      	ldrb	r3, [r3, #5]
 8019b74:	b2db      	uxtb	r3, r3
 8019b76:	2b01      	cmp	r3, #1
 8019b78:	d133      	bne.n	8019be2 <HAL_RNG_GenerateRandomNumber+0x92>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8019b7a:	687b      	ldr	r3, [r7, #4]
 8019b7c:	2202      	movs	r2, #2
 8019b7e:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8019b80:	f7fb fb8a 	bl	8015298 <HAL_GetTick>
 8019b84:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019b86:	e018      	b.n	8019bba <HAL_RNG_GenerateRandomNumber+0x6a>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8019b88:	f7fb fb86 	bl	8015298 <HAL_GetTick>
 8019b8c:	4602      	mov	r2, r0
 8019b8e:	68bb      	ldr	r3, [r7, #8]
 8019b90:	1ad3      	subs	r3, r2, r3
 8019b92:	2b02      	cmp	r3, #2
 8019b94:	d911      	bls.n	8019bba <HAL_RNG_GenerateRandomNumber+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019b96:	687b      	ldr	r3, [r7, #4]
 8019b98:	681b      	ldr	r3, [r3, #0]
 8019b9a:	685b      	ldr	r3, [r3, #4]
 8019b9c:	f003 0301 	and.w	r3, r3, #1
 8019ba0:	2b01      	cmp	r3, #1
 8019ba2:	d00a      	beq.n	8019bba <HAL_RNG_GenerateRandomNumber+0x6a>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8019ba4:	687b      	ldr	r3, [r7, #4]
 8019ba6:	2201      	movs	r2, #1
 8019ba8:	715a      	strb	r2, [r3, #5]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8019baa:	687b      	ldr	r3, [r7, #4]
 8019bac:	2202      	movs	r2, #2
 8019bae:	609a      	str	r2, [r3, #8]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 8019bb0:	687b      	ldr	r3, [r7, #4]
 8019bb2:	2200      	movs	r2, #0
 8019bb4:	711a      	strb	r2, [r3, #4]
          return HAL_ERROR;
 8019bb6:	2301      	movs	r3, #1
 8019bb8:	e01c      	b.n	8019bf4 <HAL_RNG_GenerateRandomNumber+0xa4>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8019bba:	687b      	ldr	r3, [r7, #4]
 8019bbc:	681b      	ldr	r3, [r3, #0]
 8019bbe:	685b      	ldr	r3, [r3, #4]
 8019bc0:	f003 0301 	and.w	r3, r3, #1
 8019bc4:	2b01      	cmp	r3, #1
 8019bc6:	d1df      	bne.n	8019b88 <HAL_RNG_GenerateRandomNumber+0x38>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8019bc8:	687b      	ldr	r3, [r7, #4]
 8019bca:	681b      	ldr	r3, [r3, #0]
 8019bcc:	689a      	ldr	r2, [r3, #8]
 8019bce:	687b      	ldr	r3, [r7, #4]
 8019bd0:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8019bd2:	687b      	ldr	r3, [r7, #4]
 8019bd4:	68da      	ldr	r2, [r3, #12]
 8019bd6:	683b      	ldr	r3, [r7, #0]
 8019bd8:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8019bda:	687b      	ldr	r3, [r7, #4]
 8019bdc:	2201      	movs	r2, #1
 8019bde:	715a      	strb	r2, [r3, #5]
 8019be0:	e004      	b.n	8019bec <HAL_RNG_GenerateRandomNumber+0x9c>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	2204      	movs	r2, #4
 8019be6:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8019be8:	2301      	movs	r3, #1
 8019bea:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	2200      	movs	r2, #0
 8019bf0:	711a      	strb	r2, [r3, #4]

  return status;
 8019bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8019bf4:	4618      	mov	r0, r3
 8019bf6:	3710      	adds	r7, #16
 8019bf8:	46bd      	mov	sp, r7
 8019bfa:	bd80      	pop	{r7, pc}

08019bfc <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8019bfc:	b580      	push	{r7, lr}
 8019bfe:	b082      	sub	sp, #8
 8019c00:	af00      	add	r7, sp, #0
 8019c02:	6078      	str	r0, [r7, #4]
  if (HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8019c04:	687b      	ldr	r3, [r7, #4]
 8019c06:	330c      	adds	r3, #12
 8019c08:	4619      	mov	r1, r3
 8019c0a:	6878      	ldr	r0, [r7, #4]
 8019c0c:	f7ff ffa0 	bl	8019b50 <HAL_RNG_GenerateRandomNumber>
 8019c10:	4603      	mov	r3, r0
 8019c12:	2b00      	cmp	r3, #0
 8019c14:	d102      	bne.n	8019c1c <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	68db      	ldr	r3, [r3, #12]
 8019c1a:	e000      	b.n	8019c1e <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8019c1c:	2300      	movs	r3, #0
  }
}
 8019c1e:	4618      	mov	r0, r3
 8019c20:	3708      	adds	r7, #8
 8019c22:	46bd      	mov	sp, r7
 8019c24:	bd80      	pop	{r7, pc}

08019c26 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8019c26:	b580      	push	{r7, lr}
 8019c28:	b084      	sub	sp, #16
 8019c2a:	af00      	add	r7, sp, #0
 8019c2c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8019c2e:	687b      	ldr	r3, [r7, #4]
 8019c30:	2b00      	cmp	r3, #0
 8019c32:	d101      	bne.n	8019c38 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8019c34:	2301      	movs	r3, #1
 8019c36:	e09d      	b.n	8019d74 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8019c38:	687b      	ldr	r3, [r7, #4]
 8019c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019c3c:	2b00      	cmp	r3, #0
 8019c3e:	d108      	bne.n	8019c52 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8019c40:	687b      	ldr	r3, [r7, #4]
 8019c42:	685b      	ldr	r3, [r3, #4]
 8019c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8019c48:	d009      	beq.n	8019c5e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8019c4a:	687b      	ldr	r3, [r7, #4]
 8019c4c:	2200      	movs	r2, #0
 8019c4e:	61da      	str	r2, [r3, #28]
 8019c50:	e005      	b.n	8019c5e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	2200      	movs	r2, #0
 8019c56:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8019c58:	687b      	ldr	r3, [r7, #4]
 8019c5a:	2200      	movs	r2, #0
 8019c5c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019c5e:	687b      	ldr	r3, [r7, #4]
 8019c60:	2200      	movs	r2, #0
 8019c62:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8019c64:	687b      	ldr	r3, [r7, #4]
 8019c66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019c6a:	b2db      	uxtb	r3, r3
 8019c6c:	2b00      	cmp	r3, #0
 8019c6e:	d106      	bne.n	8019c7e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	2200      	movs	r2, #0
 8019c74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8019c78:	6878      	ldr	r0, [r7, #4]
 8019c7a:	f7f9 fe23 	bl	80138c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	2202      	movs	r2, #2
 8019c82:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	681b      	ldr	r3, [r3, #0]
 8019c8a:	681a      	ldr	r2, [r3, #0]
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	681b      	ldr	r3, [r3, #0]
 8019c90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019c94:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	68db      	ldr	r3, [r3, #12]
 8019c9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019c9e:	d902      	bls.n	8019ca6 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	60fb      	str	r3, [r7, #12]
 8019ca4:	e002      	b.n	8019cac <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8019ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8019caa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	68db      	ldr	r3, [r3, #12]
 8019cb0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8019cb4:	d007      	beq.n	8019cc6 <HAL_SPI_Init+0xa0>
 8019cb6:	687b      	ldr	r3, [r7, #4]
 8019cb8:	68db      	ldr	r3, [r3, #12]
 8019cba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019cbe:	d002      	beq.n	8019cc6 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8019cc0:	687b      	ldr	r3, [r7, #4]
 8019cc2:	2200      	movs	r2, #0
 8019cc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8019cc6:	687b      	ldr	r3, [r7, #4]
 8019cc8:	685b      	ldr	r3, [r3, #4]
 8019cca:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	689b      	ldr	r3, [r3, #8]
 8019cd2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8019cd6:	431a      	orrs	r2, r3
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	691b      	ldr	r3, [r3, #16]
 8019cdc:	f003 0302 	and.w	r3, r3, #2
 8019ce0:	431a      	orrs	r2, r3
 8019ce2:	687b      	ldr	r3, [r7, #4]
 8019ce4:	695b      	ldr	r3, [r3, #20]
 8019ce6:	f003 0301 	and.w	r3, r3, #1
 8019cea:	431a      	orrs	r2, r3
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	699b      	ldr	r3, [r3, #24]
 8019cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8019cf4:	431a      	orrs	r2, r3
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	69db      	ldr	r3, [r3, #28]
 8019cfa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8019cfe:	431a      	orrs	r2, r3
 8019d00:	687b      	ldr	r3, [r7, #4]
 8019d02:	6a1b      	ldr	r3, [r3, #32]
 8019d04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8019d08:	ea42 0103 	orr.w	r1, r2, r3
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8019d10:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8019d14:	687b      	ldr	r3, [r7, #4]
 8019d16:	681b      	ldr	r3, [r3, #0]
 8019d18:	430a      	orrs	r2, r1
 8019d1a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	699b      	ldr	r3, [r3, #24]
 8019d20:	0c1b      	lsrs	r3, r3, #16
 8019d22:	f003 0204 	and.w	r2, r3, #4
 8019d26:	687b      	ldr	r3, [r7, #4]
 8019d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d2a:	f003 0310 	and.w	r3, r3, #16
 8019d2e:	431a      	orrs	r2, r3
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8019d34:	f003 0308 	and.w	r3, r3, #8
 8019d38:	431a      	orrs	r2, r3
 8019d3a:	687b      	ldr	r3, [r7, #4]
 8019d3c:	68db      	ldr	r3, [r3, #12]
 8019d3e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8019d42:	ea42 0103 	orr.w	r1, r2, r3
 8019d46:	68fb      	ldr	r3, [r7, #12]
 8019d48:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	681b      	ldr	r3, [r3, #0]
 8019d50:	430a      	orrs	r2, r1
 8019d52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	681b      	ldr	r3, [r3, #0]
 8019d58:	69da      	ldr	r2, [r3, #28]
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	681b      	ldr	r3, [r3, #0]
 8019d5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8019d62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8019d64:	687b      	ldr	r3, [r7, #4]
 8019d66:	2200      	movs	r2, #0
 8019d68:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	2201      	movs	r2, #1
 8019d6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8019d72:	2300      	movs	r3, #0
}
 8019d74:	4618      	mov	r0, r3
 8019d76:	3710      	adds	r7, #16
 8019d78:	46bd      	mov	sp, r7
 8019d7a:	bd80      	pop	{r7, pc}

08019d7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8019d7c:	b580      	push	{r7, lr}
 8019d7e:	b088      	sub	sp, #32
 8019d80:	af00      	add	r7, sp, #0
 8019d82:	60f8      	str	r0, [r7, #12]
 8019d84:	60b9      	str	r1, [r7, #8]
 8019d86:	603b      	str	r3, [r7, #0]
 8019d88:	4613      	mov	r3, r2
 8019d8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8019d90:	68fb      	ldr	r3, [r7, #12]
 8019d92:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8019d96:	2b01      	cmp	r3, #1
 8019d98:	d101      	bne.n	8019d9e <HAL_SPI_Transmit+0x22>
 8019d9a:	2302      	movs	r3, #2
 8019d9c:	e158      	b.n	801a050 <HAL_SPI_Transmit+0x2d4>
 8019d9e:	68fb      	ldr	r3, [r7, #12]
 8019da0:	2201      	movs	r2, #1
 8019da2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8019da6:	f7fb fa77 	bl	8015298 <HAL_GetTick>
 8019daa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8019dac:	88fb      	ldrh	r3, [r7, #6]
 8019dae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8019db0:	68fb      	ldr	r3, [r7, #12]
 8019db2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8019db6:	b2db      	uxtb	r3, r3
 8019db8:	2b01      	cmp	r3, #1
 8019dba:	d002      	beq.n	8019dc2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8019dbc:	2302      	movs	r3, #2
 8019dbe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019dc0:	e13d      	b.n	801a03e <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8019dc2:	68bb      	ldr	r3, [r7, #8]
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d002      	beq.n	8019dce <HAL_SPI_Transmit+0x52>
 8019dc8:	88fb      	ldrh	r3, [r7, #6]
 8019dca:	2b00      	cmp	r3, #0
 8019dcc:	d102      	bne.n	8019dd4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8019dce:	2301      	movs	r3, #1
 8019dd0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8019dd2:	e134      	b.n	801a03e <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8019dd4:	68fb      	ldr	r3, [r7, #12]
 8019dd6:	2203      	movs	r2, #3
 8019dd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8019ddc:	68fb      	ldr	r3, [r7, #12]
 8019dde:	2200      	movs	r2, #0
 8019de0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8019de2:	68fb      	ldr	r3, [r7, #12]
 8019de4:	68ba      	ldr	r2, [r7, #8]
 8019de6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8019de8:	68fb      	ldr	r3, [r7, #12]
 8019dea:	88fa      	ldrh	r2, [r7, #6]
 8019dec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8019dee:	68fb      	ldr	r3, [r7, #12]
 8019df0:	88fa      	ldrh	r2, [r7, #6]
 8019df2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	2200      	movs	r2, #0
 8019df8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8019dfa:	68fb      	ldr	r3, [r7, #12]
 8019dfc:	2200      	movs	r2, #0
 8019dfe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8019e02:	68fb      	ldr	r3, [r7, #12]
 8019e04:	2200      	movs	r2, #0
 8019e06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8019e0a:	68fb      	ldr	r3, [r7, #12]
 8019e0c:	2200      	movs	r2, #0
 8019e0e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8019e10:	68fb      	ldr	r3, [r7, #12]
 8019e12:	2200      	movs	r2, #0
 8019e14:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8019e16:	68fb      	ldr	r3, [r7, #12]
 8019e18:	689b      	ldr	r3, [r3, #8]
 8019e1a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8019e1e:	d10f      	bne.n	8019e40 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	681b      	ldr	r3, [r3, #0]
 8019e24:	681a      	ldr	r2, [r3, #0]
 8019e26:	68fb      	ldr	r3, [r7, #12]
 8019e28:	681b      	ldr	r3, [r3, #0]
 8019e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8019e2e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8019e30:	68fb      	ldr	r3, [r7, #12]
 8019e32:	681b      	ldr	r3, [r3, #0]
 8019e34:	681a      	ldr	r2, [r3, #0]
 8019e36:	68fb      	ldr	r3, [r7, #12]
 8019e38:	681b      	ldr	r3, [r3, #0]
 8019e3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8019e3e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8019e40:	68fb      	ldr	r3, [r7, #12]
 8019e42:	681b      	ldr	r3, [r3, #0]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8019e4a:	2b40      	cmp	r3, #64	; 0x40
 8019e4c:	d007      	beq.n	8019e5e <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8019e4e:	68fb      	ldr	r3, [r7, #12]
 8019e50:	681b      	ldr	r3, [r3, #0]
 8019e52:	681a      	ldr	r2, [r3, #0]
 8019e54:	68fb      	ldr	r3, [r7, #12]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8019e5c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8019e5e:	68fb      	ldr	r3, [r7, #12]
 8019e60:	68db      	ldr	r3, [r3, #12]
 8019e62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8019e66:	d94b      	bls.n	8019f00 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	685b      	ldr	r3, [r3, #4]
 8019e6c:	2b00      	cmp	r3, #0
 8019e6e:	d002      	beq.n	8019e76 <HAL_SPI_Transmit+0xfa>
 8019e70:	8afb      	ldrh	r3, [r7, #22]
 8019e72:	2b01      	cmp	r3, #1
 8019e74:	d13e      	bne.n	8019ef4 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019e76:	68fb      	ldr	r3, [r7, #12]
 8019e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e7a:	881a      	ldrh	r2, [r3, #0]
 8019e7c:	68fb      	ldr	r3, [r7, #12]
 8019e7e:	681b      	ldr	r3, [r3, #0]
 8019e80:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8019e82:	68fb      	ldr	r3, [r7, #12]
 8019e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019e86:	1c9a      	adds	r2, r3, #2
 8019e88:	68fb      	ldr	r3, [r7, #12]
 8019e8a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8019e8c:	68fb      	ldr	r3, [r7, #12]
 8019e8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019e90:	b29b      	uxth	r3, r3
 8019e92:	3b01      	subs	r3, #1
 8019e94:	b29a      	uxth	r2, r3
 8019e96:	68fb      	ldr	r3, [r7, #12]
 8019e98:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8019e9a:	e02b      	b.n	8019ef4 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019e9c:	68fb      	ldr	r3, [r7, #12]
 8019e9e:	681b      	ldr	r3, [r3, #0]
 8019ea0:	689b      	ldr	r3, [r3, #8]
 8019ea2:	f003 0302 	and.w	r3, r3, #2
 8019ea6:	2b02      	cmp	r3, #2
 8019ea8:	d112      	bne.n	8019ed0 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019eaa:	68fb      	ldr	r3, [r7, #12]
 8019eac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019eae:	881a      	ldrh	r2, [r3, #0]
 8019eb0:	68fb      	ldr	r3, [r7, #12]
 8019eb2:	681b      	ldr	r3, [r3, #0]
 8019eb4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019eb6:	68fb      	ldr	r3, [r7, #12]
 8019eb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019eba:	1c9a      	adds	r2, r3, #2
 8019ebc:	68fb      	ldr	r3, [r7, #12]
 8019ebe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019ec0:	68fb      	ldr	r3, [r7, #12]
 8019ec2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ec4:	b29b      	uxth	r3, r3
 8019ec6:	3b01      	subs	r3, #1
 8019ec8:	b29a      	uxth	r2, r3
 8019eca:	68fb      	ldr	r3, [r7, #12]
 8019ecc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019ece:	e011      	b.n	8019ef4 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019ed0:	f7fb f9e2 	bl	8015298 <HAL_GetTick>
 8019ed4:	4602      	mov	r2, r0
 8019ed6:	69bb      	ldr	r3, [r7, #24]
 8019ed8:	1ad3      	subs	r3, r2, r3
 8019eda:	683a      	ldr	r2, [r7, #0]
 8019edc:	429a      	cmp	r2, r3
 8019ede:	d803      	bhi.n	8019ee8 <HAL_SPI_Transmit+0x16c>
 8019ee0:	683b      	ldr	r3, [r7, #0]
 8019ee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019ee6:	d102      	bne.n	8019eee <HAL_SPI_Transmit+0x172>
 8019ee8:	683b      	ldr	r3, [r7, #0]
 8019eea:	2b00      	cmp	r3, #0
 8019eec:	d102      	bne.n	8019ef4 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8019eee:	2303      	movs	r3, #3
 8019ef0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8019ef2:	e0a4      	b.n	801a03e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8019ef4:	68fb      	ldr	r3, [r7, #12]
 8019ef6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ef8:	b29b      	uxth	r3, r3
 8019efa:	2b00      	cmp	r3, #0
 8019efc:	d1ce      	bne.n	8019e9c <HAL_SPI_Transmit+0x120>
 8019efe:	e07c      	b.n	8019ffa <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8019f00:	68fb      	ldr	r3, [r7, #12]
 8019f02:	685b      	ldr	r3, [r3, #4]
 8019f04:	2b00      	cmp	r3, #0
 8019f06:	d002      	beq.n	8019f0e <HAL_SPI_Transmit+0x192>
 8019f08:	8afb      	ldrh	r3, [r7, #22]
 8019f0a:	2b01      	cmp	r3, #1
 8019f0c:	d170      	bne.n	8019ff0 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8019f0e:	68fb      	ldr	r3, [r7, #12]
 8019f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f12:	b29b      	uxth	r3, r3
 8019f14:	2b01      	cmp	r3, #1
 8019f16:	d912      	bls.n	8019f3e <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019f18:	68fb      	ldr	r3, [r7, #12]
 8019f1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f1c:	881a      	ldrh	r2, [r3, #0]
 8019f1e:	68fb      	ldr	r3, [r7, #12]
 8019f20:	681b      	ldr	r3, [r3, #0]
 8019f22:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f28:	1c9a      	adds	r2, r3, #2
 8019f2a:	68fb      	ldr	r3, [r7, #12]
 8019f2c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8019f2e:	68fb      	ldr	r3, [r7, #12]
 8019f30:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f32:	b29b      	uxth	r3, r3
 8019f34:	3b02      	subs	r3, #2
 8019f36:	b29a      	uxth	r2, r3
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019f3c:	e058      	b.n	8019ff0 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019f42:	68fb      	ldr	r3, [r7, #12]
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	330c      	adds	r3, #12
 8019f48:	7812      	ldrb	r2, [r2, #0]
 8019f4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8019f4c:	68fb      	ldr	r3, [r7, #12]
 8019f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f50:	1c5a      	adds	r2, r3, #1
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8019f56:	68fb      	ldr	r3, [r7, #12]
 8019f58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f5a:	b29b      	uxth	r3, r3
 8019f5c:	3b01      	subs	r3, #1
 8019f5e:	b29a      	uxth	r2, r3
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8019f64:	e044      	b.n	8019ff0 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8019f66:	68fb      	ldr	r3, [r7, #12]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	689b      	ldr	r3, [r3, #8]
 8019f6c:	f003 0302 	and.w	r3, r3, #2
 8019f70:	2b02      	cmp	r3, #2
 8019f72:	d12b      	bne.n	8019fcc <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8019f74:	68fb      	ldr	r3, [r7, #12]
 8019f76:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f78:	b29b      	uxth	r3, r3
 8019f7a:	2b01      	cmp	r3, #1
 8019f7c:	d912      	bls.n	8019fa4 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f82:	881a      	ldrh	r2, [r3, #0]
 8019f84:	68fb      	ldr	r3, [r7, #12]
 8019f86:	681b      	ldr	r3, [r3, #0]
 8019f88:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8019f8a:	68fb      	ldr	r3, [r7, #12]
 8019f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019f8e:	1c9a      	adds	r2, r3, #2
 8019f90:	68fb      	ldr	r3, [r7, #12]
 8019f92:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8019f94:	68fb      	ldr	r3, [r7, #12]
 8019f96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019f98:	b29b      	uxth	r3, r3
 8019f9a:	3b02      	subs	r3, #2
 8019f9c:	b29a      	uxth	r2, r3
 8019f9e:	68fb      	ldr	r3, [r7, #12]
 8019fa0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019fa2:	e025      	b.n	8019ff0 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8019fa4:	68fb      	ldr	r3, [r7, #12]
 8019fa6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8019fa8:	68fb      	ldr	r3, [r7, #12]
 8019faa:	681b      	ldr	r3, [r3, #0]
 8019fac:	330c      	adds	r3, #12
 8019fae:	7812      	ldrb	r2, [r2, #0]
 8019fb0:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8019fb2:	68fb      	ldr	r3, [r7, #12]
 8019fb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8019fb6:	1c5a      	adds	r2, r3, #1
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8019fbc:	68fb      	ldr	r3, [r7, #12]
 8019fbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019fc0:	b29b      	uxth	r3, r3
 8019fc2:	3b01      	subs	r3, #1
 8019fc4:	b29a      	uxth	r2, r3
 8019fc6:	68fb      	ldr	r3, [r7, #12]
 8019fc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8019fca:	e011      	b.n	8019ff0 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8019fcc:	f7fb f964 	bl	8015298 <HAL_GetTick>
 8019fd0:	4602      	mov	r2, r0
 8019fd2:	69bb      	ldr	r3, [r7, #24]
 8019fd4:	1ad3      	subs	r3, r2, r3
 8019fd6:	683a      	ldr	r2, [r7, #0]
 8019fd8:	429a      	cmp	r2, r3
 8019fda:	d803      	bhi.n	8019fe4 <HAL_SPI_Transmit+0x268>
 8019fdc:	683b      	ldr	r3, [r7, #0]
 8019fde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019fe2:	d102      	bne.n	8019fea <HAL_SPI_Transmit+0x26e>
 8019fe4:	683b      	ldr	r3, [r7, #0]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d102      	bne.n	8019ff0 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8019fea:	2303      	movs	r3, #3
 8019fec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8019fee:	e026      	b.n	801a03e <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8019ff0:	68fb      	ldr	r3, [r7, #12]
 8019ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8019ff4:	b29b      	uxth	r3, r3
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d1b5      	bne.n	8019f66 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8019ffa:	69ba      	ldr	r2, [r7, #24]
 8019ffc:	6839      	ldr	r1, [r7, #0]
 8019ffe:	68f8      	ldr	r0, [r7, #12]
 801a000:	f000 fd08 	bl	801aa14 <SPI_EndRxTxTransaction>
 801a004:	4603      	mov	r3, r0
 801a006:	2b00      	cmp	r3, #0
 801a008:	d002      	beq.n	801a010 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	2220      	movs	r2, #32
 801a00e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801a010:	68fb      	ldr	r3, [r7, #12]
 801a012:	689b      	ldr	r3, [r3, #8]
 801a014:	2b00      	cmp	r3, #0
 801a016:	d10a      	bne.n	801a02e <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801a018:	2300      	movs	r3, #0
 801a01a:	613b      	str	r3, [r7, #16]
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	681b      	ldr	r3, [r3, #0]
 801a020:	68db      	ldr	r3, [r3, #12]
 801a022:	613b      	str	r3, [r7, #16]
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	681b      	ldr	r3, [r3, #0]
 801a028:	689b      	ldr	r3, [r3, #8]
 801a02a:	613b      	str	r3, [r7, #16]
 801a02c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a032:	2b00      	cmp	r3, #0
 801a034:	d002      	beq.n	801a03c <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 801a036:	2301      	movs	r3, #1
 801a038:	77fb      	strb	r3, [r7, #31]
 801a03a:	e000      	b.n	801a03e <HAL_SPI_Transmit+0x2c2>
  }

error:
 801a03c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a03e:	68fb      	ldr	r3, [r7, #12]
 801a040:	2201      	movs	r2, #1
 801a042:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 801a046:	68fb      	ldr	r3, [r7, #12]
 801a048:	2200      	movs	r2, #0
 801a04a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a04e:	7ffb      	ldrb	r3, [r7, #31]
}
 801a050:	4618      	mov	r0, r3
 801a052:	3720      	adds	r7, #32
 801a054:	46bd      	mov	sp, r7
 801a056:	bd80      	pop	{r7, pc}

0801a058 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801a058:	b580      	push	{r7, lr}
 801a05a:	b088      	sub	sp, #32
 801a05c:	af02      	add	r7, sp, #8
 801a05e:	60f8      	str	r0, [r7, #12]
 801a060:	60b9      	str	r1, [r7, #8]
 801a062:	603b      	str	r3, [r7, #0]
 801a064:	4613      	mov	r3, r2
 801a066:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 801a068:	2300      	movs	r3, #0
 801a06a:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 801a06c:	68fb      	ldr	r3, [r7, #12]
 801a06e:	685b      	ldr	r3, [r3, #4]
 801a070:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a074:	d112      	bne.n	801a09c <HAL_SPI_Receive+0x44>
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	689b      	ldr	r3, [r3, #8]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d10e      	bne.n	801a09c <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801a07e:	68fb      	ldr	r3, [r7, #12]
 801a080:	2204      	movs	r2, #4
 801a082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 801a086:	88fa      	ldrh	r2, [r7, #6]
 801a088:	683b      	ldr	r3, [r7, #0]
 801a08a:	9300      	str	r3, [sp, #0]
 801a08c:	4613      	mov	r3, r2
 801a08e:	68ba      	ldr	r2, [r7, #8]
 801a090:	68b9      	ldr	r1, [r7, #8]
 801a092:	68f8      	ldr	r0, [r7, #12]
 801a094:	f000 f910 	bl	801a2b8 <HAL_SPI_TransmitReceive>
 801a098:	4603      	mov	r3, r0
 801a09a:	e109      	b.n	801a2b0 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a09c:	68fb      	ldr	r3, [r7, #12]
 801a09e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a0a2:	2b01      	cmp	r3, #1
 801a0a4:	d101      	bne.n	801a0aa <HAL_SPI_Receive+0x52>
 801a0a6:	2302      	movs	r3, #2
 801a0a8:	e102      	b.n	801a2b0 <HAL_SPI_Receive+0x258>
 801a0aa:	68fb      	ldr	r3, [r7, #12]
 801a0ac:	2201      	movs	r2, #1
 801a0ae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a0b2:	f7fb f8f1 	bl	8015298 <HAL_GetTick>
 801a0b6:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 801a0b8:	68fb      	ldr	r3, [r7, #12]
 801a0ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a0be:	b2db      	uxtb	r3, r3
 801a0c0:	2b01      	cmp	r3, #1
 801a0c2:	d002      	beq.n	801a0ca <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 801a0c4:	2302      	movs	r3, #2
 801a0c6:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a0c8:	e0e9      	b.n	801a29e <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 801a0ca:	68bb      	ldr	r3, [r7, #8]
 801a0cc:	2b00      	cmp	r3, #0
 801a0ce:	d002      	beq.n	801a0d6 <HAL_SPI_Receive+0x7e>
 801a0d0:	88fb      	ldrh	r3, [r7, #6]
 801a0d2:	2b00      	cmp	r3, #0
 801a0d4:	d102      	bne.n	801a0dc <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 801a0d6:	2301      	movs	r3, #1
 801a0d8:	75fb      	strb	r3, [r7, #23]
    goto error;
 801a0da:	e0e0      	b.n	801a29e <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 801a0dc:	68fb      	ldr	r3, [r7, #12]
 801a0de:	2204      	movs	r2, #4
 801a0e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a0e4:	68fb      	ldr	r3, [r7, #12]
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 801a0ea:	68fb      	ldr	r3, [r7, #12]
 801a0ec:	68ba      	ldr	r2, [r7, #8]
 801a0ee:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 801a0f0:	68fb      	ldr	r3, [r7, #12]
 801a0f2:	88fa      	ldrh	r2, [r7, #6]
 801a0f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 801a0f8:	68fb      	ldr	r3, [r7, #12]
 801a0fa:	88fa      	ldrh	r2, [r7, #6]
 801a0fc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 801a100:	68fb      	ldr	r3, [r7, #12]
 801a102:	2200      	movs	r2, #0
 801a104:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 801a106:	68fb      	ldr	r3, [r7, #12]
 801a108:	2200      	movs	r2, #0
 801a10a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 801a10c:	68fb      	ldr	r3, [r7, #12]
 801a10e:	2200      	movs	r2, #0
 801a110:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 801a112:	68fb      	ldr	r3, [r7, #12]
 801a114:	2200      	movs	r2, #0
 801a116:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a118:	68fb      	ldr	r3, [r7, #12]
 801a11a:	2200      	movs	r2, #0
 801a11c:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a11e:	68fb      	ldr	r3, [r7, #12]
 801a120:	68db      	ldr	r3, [r3, #12]
 801a122:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a126:	d908      	bls.n	801a13a <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a128:	68fb      	ldr	r3, [r7, #12]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	685a      	ldr	r2, [r3, #4]
 801a12e:	68fb      	ldr	r3, [r7, #12]
 801a130:	681b      	ldr	r3, [r3, #0]
 801a132:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a136:	605a      	str	r2, [r3, #4]
 801a138:	e007      	b.n	801a14a <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a13a:	68fb      	ldr	r3, [r7, #12]
 801a13c:	681b      	ldr	r3, [r3, #0]
 801a13e:	685a      	ldr	r2, [r3, #4]
 801a140:	68fb      	ldr	r3, [r7, #12]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a148:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a14a:	68fb      	ldr	r3, [r7, #12]
 801a14c:	689b      	ldr	r3, [r3, #8]
 801a14e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a152:	d10f      	bne.n	801a174 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801a154:	68fb      	ldr	r3, [r7, #12]
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	681a      	ldr	r2, [r3, #0]
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a162:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 801a164:	68fb      	ldr	r3, [r7, #12]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	681a      	ldr	r2, [r3, #0]
 801a16a:	68fb      	ldr	r3, [r7, #12]
 801a16c:	681b      	ldr	r3, [r3, #0]
 801a16e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801a172:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a174:	68fb      	ldr	r3, [r7, #12]
 801a176:	681b      	ldr	r3, [r3, #0]
 801a178:	681b      	ldr	r3, [r3, #0]
 801a17a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a17e:	2b40      	cmp	r3, #64	; 0x40
 801a180:	d007      	beq.n	801a192 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a182:	68fb      	ldr	r3, [r7, #12]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	681a      	ldr	r2, [r3, #0]
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a190:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 801a192:	68fb      	ldr	r3, [r7, #12]
 801a194:	68db      	ldr	r3, [r3, #12]
 801a196:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a19a:	d867      	bhi.n	801a26c <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 801a19c:	e030      	b.n	801a200 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	681b      	ldr	r3, [r3, #0]
 801a1a2:	689b      	ldr	r3, [r3, #8]
 801a1a4:	f003 0301 	and.w	r3, r3, #1
 801a1a8:	2b01      	cmp	r3, #1
 801a1aa:	d117      	bne.n	801a1dc <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a1ac:	68fb      	ldr	r3, [r7, #12]
 801a1ae:	681b      	ldr	r3, [r3, #0]
 801a1b0:	f103 020c 	add.w	r2, r3, #12
 801a1b4:	68fb      	ldr	r3, [r7, #12]
 801a1b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1b8:	7812      	ldrb	r2, [r2, #0]
 801a1ba:	b2d2      	uxtb	r2, r2
 801a1bc:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 801a1be:	68fb      	ldr	r3, [r7, #12]
 801a1c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a1c2:	1c5a      	adds	r2, r3, #1
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a1c8:	68fb      	ldr	r3, [r7, #12]
 801a1ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a1ce:	b29b      	uxth	r3, r3
 801a1d0:	3b01      	subs	r3, #1
 801a1d2:	b29a      	uxth	r2, r3
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a1da:	e011      	b.n	801a200 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a1dc:	f7fb f85c 	bl	8015298 <HAL_GetTick>
 801a1e0:	4602      	mov	r2, r0
 801a1e2:	693b      	ldr	r3, [r7, #16]
 801a1e4:	1ad3      	subs	r3, r2, r3
 801a1e6:	683a      	ldr	r2, [r7, #0]
 801a1e8:	429a      	cmp	r2, r3
 801a1ea:	d803      	bhi.n	801a1f4 <HAL_SPI_Receive+0x19c>
 801a1ec:	683b      	ldr	r3, [r7, #0]
 801a1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1f2:	d102      	bne.n	801a1fa <HAL_SPI_Receive+0x1a2>
 801a1f4:	683b      	ldr	r3, [r7, #0]
 801a1f6:	2b00      	cmp	r3, #0
 801a1f8:	d102      	bne.n	801a200 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 801a1fa:	2303      	movs	r3, #3
 801a1fc:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a1fe:	e04e      	b.n	801a29e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a206:	b29b      	uxth	r3, r3
 801a208:	2b00      	cmp	r3, #0
 801a20a:	d1c8      	bne.n	801a19e <HAL_SPI_Receive+0x146>
 801a20c:	e034      	b.n	801a278 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 801a20e:	68fb      	ldr	r3, [r7, #12]
 801a210:	681b      	ldr	r3, [r3, #0]
 801a212:	689b      	ldr	r3, [r3, #8]
 801a214:	f003 0301 	and.w	r3, r3, #1
 801a218:	2b01      	cmp	r3, #1
 801a21a:	d115      	bne.n	801a248 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a21c:	68fb      	ldr	r3, [r7, #12]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	68da      	ldr	r2, [r3, #12]
 801a222:	68fb      	ldr	r3, [r7, #12]
 801a224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a226:	b292      	uxth	r2, r2
 801a228:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a22a:	68fb      	ldr	r3, [r7, #12]
 801a22c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a22e:	1c9a      	adds	r2, r3, #2
 801a230:	68fb      	ldr	r3, [r7, #12]
 801a232:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a234:	68fb      	ldr	r3, [r7, #12]
 801a236:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a23a:	b29b      	uxth	r3, r3
 801a23c:	3b01      	subs	r3, #1
 801a23e:	b29a      	uxth	r2, r3
 801a240:	68fb      	ldr	r3, [r7, #12]
 801a242:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 801a246:	e011      	b.n	801a26c <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801a248:	f7fb f826 	bl	8015298 <HAL_GetTick>
 801a24c:	4602      	mov	r2, r0
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	1ad3      	subs	r3, r2, r3
 801a252:	683a      	ldr	r2, [r7, #0]
 801a254:	429a      	cmp	r2, r3
 801a256:	d803      	bhi.n	801a260 <HAL_SPI_Receive+0x208>
 801a258:	683b      	ldr	r3, [r7, #0]
 801a25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a25e:	d102      	bne.n	801a266 <HAL_SPI_Receive+0x20e>
 801a260:	683b      	ldr	r3, [r7, #0]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d102      	bne.n	801a26c <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 801a266:	2303      	movs	r3, #3
 801a268:	75fb      	strb	r3, [r7, #23]
          goto error;
 801a26a:	e018      	b.n	801a29e <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 801a26c:	68fb      	ldr	r3, [r7, #12]
 801a26e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a272:	b29b      	uxth	r3, r3
 801a274:	2b00      	cmp	r3, #0
 801a276:	d1ca      	bne.n	801a20e <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a278:	693a      	ldr	r2, [r7, #16]
 801a27a:	6839      	ldr	r1, [r7, #0]
 801a27c:	68f8      	ldr	r0, [r7, #12]
 801a27e:	f000 fb4d 	bl	801a91c <SPI_EndRxTransaction>
 801a282:	4603      	mov	r3, r0
 801a284:	2b00      	cmp	r3, #0
 801a286:	d002      	beq.n	801a28e <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a288:	68fb      	ldr	r3, [r7, #12]
 801a28a:	2220      	movs	r2, #32
 801a28c:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a292:	2b00      	cmp	r3, #0
 801a294:	d002      	beq.n	801a29c <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 801a296:	2301      	movs	r3, #1
 801a298:	75fb      	strb	r3, [r7, #23]
 801a29a:	e000      	b.n	801a29e <HAL_SPI_Receive+0x246>
  }

error :
 801a29c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a29e:	68fb      	ldr	r3, [r7, #12]
 801a2a0:	2201      	movs	r2, #1
 801a2a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a2a6:	68fb      	ldr	r3, [r7, #12]
 801a2a8:	2200      	movs	r2, #0
 801a2aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 801a2b0:	4618      	mov	r0, r3
 801a2b2:	3718      	adds	r7, #24
 801a2b4:	46bd      	mov	sp, r7
 801a2b6:	bd80      	pop	{r7, pc}

0801a2b8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 801a2b8:	b580      	push	{r7, lr}
 801a2ba:	b08a      	sub	sp, #40	; 0x28
 801a2bc:	af00      	add	r7, sp, #0
 801a2be:	60f8      	str	r0, [r7, #12]
 801a2c0:	60b9      	str	r1, [r7, #8]
 801a2c2:	607a      	str	r2, [r7, #4]
 801a2c4:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 801a2c6:	2301      	movs	r3, #1
 801a2c8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 801a2ca:	2300      	movs	r3, #0
 801a2cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801a2d0:	68fb      	ldr	r3, [r7, #12]
 801a2d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 801a2d6:	2b01      	cmp	r3, #1
 801a2d8:	d101      	bne.n	801a2de <HAL_SPI_TransmitReceive+0x26>
 801a2da:	2302      	movs	r3, #2
 801a2dc:	e1fb      	b.n	801a6d6 <HAL_SPI_TransmitReceive+0x41e>
 801a2de:	68fb      	ldr	r3, [r7, #12]
 801a2e0:	2201      	movs	r2, #1
 801a2e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 801a2e6:	f7fa ffd7 	bl	8015298 <HAL_GetTick>
 801a2ea:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a2f2:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	685b      	ldr	r3, [r3, #4]
 801a2f8:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 801a2fa:	887b      	ldrh	r3, [r7, #2]
 801a2fc:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 801a2fe:	887b      	ldrh	r3, [r7, #2]
 801a300:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 801a302:	7efb      	ldrb	r3, [r7, #27]
 801a304:	2b01      	cmp	r3, #1
 801a306:	d00e      	beq.n	801a326 <HAL_SPI_TransmitReceive+0x6e>
 801a308:	697b      	ldr	r3, [r7, #20]
 801a30a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a30e:	d106      	bne.n	801a31e <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 801a310:	68fb      	ldr	r3, [r7, #12]
 801a312:	689b      	ldr	r3, [r3, #8]
 801a314:	2b00      	cmp	r3, #0
 801a316:	d102      	bne.n	801a31e <HAL_SPI_TransmitReceive+0x66>
 801a318:	7efb      	ldrb	r3, [r7, #27]
 801a31a:	2b04      	cmp	r3, #4
 801a31c:	d003      	beq.n	801a326 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 801a31e:	2302      	movs	r3, #2
 801a320:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a324:	e1cd      	b.n	801a6c2 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 801a326:	68bb      	ldr	r3, [r7, #8]
 801a328:	2b00      	cmp	r3, #0
 801a32a:	d005      	beq.n	801a338 <HAL_SPI_TransmitReceive+0x80>
 801a32c:	687b      	ldr	r3, [r7, #4]
 801a32e:	2b00      	cmp	r3, #0
 801a330:	d002      	beq.n	801a338 <HAL_SPI_TransmitReceive+0x80>
 801a332:	887b      	ldrh	r3, [r7, #2]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d103      	bne.n	801a340 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 801a338:	2301      	movs	r3, #1
 801a33a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 801a33e:	e1c0      	b.n	801a6c2 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801a340:	68fb      	ldr	r3, [r7, #12]
 801a342:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 801a346:	b2db      	uxtb	r3, r3
 801a348:	2b04      	cmp	r3, #4
 801a34a:	d003      	beq.n	801a354 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801a34c:	68fb      	ldr	r3, [r7, #12]
 801a34e:	2205      	movs	r2, #5
 801a350:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	2200      	movs	r2, #0
 801a358:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801a35a:	68fb      	ldr	r3, [r7, #12]
 801a35c:	687a      	ldr	r2, [r7, #4]
 801a35e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	887a      	ldrh	r2, [r7, #2]
 801a364:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 801a368:	68fb      	ldr	r3, [r7, #12]
 801a36a:	887a      	ldrh	r2, [r7, #2]
 801a36c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801a370:	68fb      	ldr	r3, [r7, #12]
 801a372:	68ba      	ldr	r2, [r7, #8]
 801a374:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 801a376:	68fb      	ldr	r3, [r7, #12]
 801a378:	887a      	ldrh	r2, [r7, #2]
 801a37a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 801a37c:	68fb      	ldr	r3, [r7, #12]
 801a37e:	887a      	ldrh	r2, [r7, #2]
 801a380:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801a382:	68fb      	ldr	r3, [r7, #12]
 801a384:	2200      	movs	r2, #0
 801a386:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 801a388:	68fb      	ldr	r3, [r7, #12]
 801a38a:	2200      	movs	r2, #0
 801a38c:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 801a38e:	68fb      	ldr	r3, [r7, #12]
 801a390:	68db      	ldr	r3, [r3, #12]
 801a392:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a396:	d802      	bhi.n	801a39e <HAL_SPI_TransmitReceive+0xe6>
 801a398:	8a3b      	ldrh	r3, [r7, #16]
 801a39a:	2b01      	cmp	r3, #1
 801a39c:	d908      	bls.n	801a3b0 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a39e:	68fb      	ldr	r3, [r7, #12]
 801a3a0:	681b      	ldr	r3, [r3, #0]
 801a3a2:	685a      	ldr	r2, [r3, #4]
 801a3a4:	68fb      	ldr	r3, [r7, #12]
 801a3a6:	681b      	ldr	r3, [r3, #0]
 801a3a8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 801a3ac:	605a      	str	r2, [r3, #4]
 801a3ae:	e007      	b.n	801a3c0 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a3b0:	68fb      	ldr	r3, [r7, #12]
 801a3b2:	681b      	ldr	r3, [r3, #0]
 801a3b4:	685a      	ldr	r2, [r3, #4]
 801a3b6:	68fb      	ldr	r3, [r7, #12]
 801a3b8:	681b      	ldr	r3, [r3, #0]
 801a3ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a3be:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801a3c0:	68fb      	ldr	r3, [r7, #12]
 801a3c2:	681b      	ldr	r3, [r3, #0]
 801a3c4:	681b      	ldr	r3, [r3, #0]
 801a3c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a3ca:	2b40      	cmp	r3, #64	; 0x40
 801a3cc:	d007      	beq.n	801a3de <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801a3ce:	68fb      	ldr	r3, [r7, #12]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	681a      	ldr	r2, [r3, #0]
 801a3d4:	68fb      	ldr	r3, [r7, #12]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801a3dc:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	68db      	ldr	r3, [r3, #12]
 801a3e2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 801a3e6:	d97c      	bls.n	801a4e2 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a3e8:	68fb      	ldr	r3, [r7, #12]
 801a3ea:	685b      	ldr	r3, [r3, #4]
 801a3ec:	2b00      	cmp	r3, #0
 801a3ee:	d002      	beq.n	801a3f6 <HAL_SPI_TransmitReceive+0x13e>
 801a3f0:	8a7b      	ldrh	r3, [r7, #18]
 801a3f2:	2b01      	cmp	r3, #1
 801a3f4:	d169      	bne.n	801a4ca <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a3f6:	68fb      	ldr	r3, [r7, #12]
 801a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a3fa:	881a      	ldrh	r2, [r3, #0]
 801a3fc:	68fb      	ldr	r3, [r7, #12]
 801a3fe:	681b      	ldr	r3, [r3, #0]
 801a400:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801a402:	68fb      	ldr	r3, [r7, #12]
 801a404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a406:	1c9a      	adds	r2, r3, #2
 801a408:	68fb      	ldr	r3, [r7, #12]
 801a40a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 801a40c:	68fb      	ldr	r3, [r7, #12]
 801a40e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a410:	b29b      	uxth	r3, r3
 801a412:	3b01      	subs	r3, #1
 801a414:	b29a      	uxth	r2, r3
 801a416:	68fb      	ldr	r3, [r7, #12]
 801a418:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a41a:	e056      	b.n	801a4ca <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a41c:	68fb      	ldr	r3, [r7, #12]
 801a41e:	681b      	ldr	r3, [r3, #0]
 801a420:	689b      	ldr	r3, [r3, #8]
 801a422:	f003 0302 	and.w	r3, r3, #2
 801a426:	2b02      	cmp	r3, #2
 801a428:	d11b      	bne.n	801a462 <HAL_SPI_TransmitReceive+0x1aa>
 801a42a:	68fb      	ldr	r3, [r7, #12]
 801a42c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a42e:	b29b      	uxth	r3, r3
 801a430:	2b00      	cmp	r3, #0
 801a432:	d016      	beq.n	801a462 <HAL_SPI_TransmitReceive+0x1aa>
 801a434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a436:	2b01      	cmp	r3, #1
 801a438:	d113      	bne.n	801a462 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a43a:	68fb      	ldr	r3, [r7, #12]
 801a43c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a43e:	881a      	ldrh	r2, [r3, #0]
 801a440:	68fb      	ldr	r3, [r7, #12]
 801a442:	681b      	ldr	r3, [r3, #0]
 801a444:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a446:	68fb      	ldr	r3, [r7, #12]
 801a448:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a44a:	1c9a      	adds	r2, r3, #2
 801a44c:	68fb      	ldr	r3, [r7, #12]
 801a44e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a454:	b29b      	uxth	r3, r3
 801a456:	3b01      	subs	r3, #1
 801a458:	b29a      	uxth	r2, r3
 801a45a:	68fb      	ldr	r3, [r7, #12]
 801a45c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a45e:	2300      	movs	r3, #0
 801a460:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a462:	68fb      	ldr	r3, [r7, #12]
 801a464:	681b      	ldr	r3, [r3, #0]
 801a466:	689b      	ldr	r3, [r3, #8]
 801a468:	f003 0301 	and.w	r3, r3, #1
 801a46c:	2b01      	cmp	r3, #1
 801a46e:	d11c      	bne.n	801a4aa <HAL_SPI_TransmitReceive+0x1f2>
 801a470:	68fb      	ldr	r3, [r7, #12]
 801a472:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a476:	b29b      	uxth	r3, r3
 801a478:	2b00      	cmp	r3, #0
 801a47a:	d016      	beq.n	801a4aa <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a47c:	68fb      	ldr	r3, [r7, #12]
 801a47e:	681b      	ldr	r3, [r3, #0]
 801a480:	68da      	ldr	r2, [r3, #12]
 801a482:	68fb      	ldr	r3, [r7, #12]
 801a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a486:	b292      	uxth	r2, r2
 801a488:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 801a48a:	68fb      	ldr	r3, [r7, #12]
 801a48c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a48e:	1c9a      	adds	r2, r3, #2
 801a490:	68fb      	ldr	r3, [r7, #12]
 801a492:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 801a494:	68fb      	ldr	r3, [r7, #12]
 801a496:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a49a:	b29b      	uxth	r3, r3
 801a49c:	3b01      	subs	r3, #1
 801a49e:	b29a      	uxth	r2, r3
 801a4a0:	68fb      	ldr	r3, [r7, #12]
 801a4a2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a4a6:	2301      	movs	r3, #1
 801a4a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 801a4aa:	f7fa fef5 	bl	8015298 <HAL_GetTick>
 801a4ae:	4602      	mov	r2, r0
 801a4b0:	69fb      	ldr	r3, [r7, #28]
 801a4b2:	1ad3      	subs	r3, r2, r3
 801a4b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a4b6:	429a      	cmp	r2, r3
 801a4b8:	d807      	bhi.n	801a4ca <HAL_SPI_TransmitReceive+0x212>
 801a4ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a4bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a4c0:	d003      	beq.n	801a4ca <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 801a4c2:	2303      	movs	r3, #3
 801a4c4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a4c8:	e0fb      	b.n	801a6c2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a4ca:	68fb      	ldr	r3, [r7, #12]
 801a4cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4ce:	b29b      	uxth	r3, r3
 801a4d0:	2b00      	cmp	r3, #0
 801a4d2:	d1a3      	bne.n	801a41c <HAL_SPI_TransmitReceive+0x164>
 801a4d4:	68fb      	ldr	r3, [r7, #12]
 801a4d6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a4da:	b29b      	uxth	r3, r3
 801a4dc:	2b00      	cmp	r3, #0
 801a4de:	d19d      	bne.n	801a41c <HAL_SPI_TransmitReceive+0x164>
 801a4e0:	e0df      	b.n	801a6a2 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801a4e2:	68fb      	ldr	r3, [r7, #12]
 801a4e4:	685b      	ldr	r3, [r3, #4]
 801a4e6:	2b00      	cmp	r3, #0
 801a4e8:	d003      	beq.n	801a4f2 <HAL_SPI_TransmitReceive+0x23a>
 801a4ea:	8a7b      	ldrh	r3, [r7, #18]
 801a4ec:	2b01      	cmp	r3, #1
 801a4ee:	f040 80cb 	bne.w	801a688 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 801a4f2:	68fb      	ldr	r3, [r7, #12]
 801a4f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a4f6:	b29b      	uxth	r3, r3
 801a4f8:	2b01      	cmp	r3, #1
 801a4fa:	d912      	bls.n	801a522 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a4fc:	68fb      	ldr	r3, [r7, #12]
 801a4fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a500:	881a      	ldrh	r2, [r3, #0]
 801a502:	68fb      	ldr	r3, [r7, #12]
 801a504:	681b      	ldr	r3, [r3, #0]
 801a506:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 801a508:	68fb      	ldr	r3, [r7, #12]
 801a50a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a50c:	1c9a      	adds	r2, r3, #2
 801a50e:	68fb      	ldr	r3, [r7, #12]
 801a510:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 801a512:	68fb      	ldr	r3, [r7, #12]
 801a514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a516:	b29b      	uxth	r3, r3
 801a518:	3b02      	subs	r3, #2
 801a51a:	b29a      	uxth	r2, r3
 801a51c:	68fb      	ldr	r3, [r7, #12]
 801a51e:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a520:	e0b2      	b.n	801a688 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a522:	68fb      	ldr	r3, [r7, #12]
 801a524:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a526:	68fb      	ldr	r3, [r7, #12]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	330c      	adds	r3, #12
 801a52c:	7812      	ldrb	r2, [r2, #0]
 801a52e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 801a530:	68fb      	ldr	r3, [r7, #12]
 801a532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a534:	1c5a      	adds	r2, r3, #1
 801a536:	68fb      	ldr	r3, [r7, #12]
 801a538:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 801a53a:	68fb      	ldr	r3, [r7, #12]
 801a53c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a53e:	b29b      	uxth	r3, r3
 801a540:	3b01      	subs	r3, #1
 801a542:	b29a      	uxth	r2, r3
 801a544:	68fb      	ldr	r3, [r7, #12]
 801a546:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a548:	e09e      	b.n	801a688 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 801a54a:	68fb      	ldr	r3, [r7, #12]
 801a54c:	681b      	ldr	r3, [r3, #0]
 801a54e:	689b      	ldr	r3, [r3, #8]
 801a550:	f003 0302 	and.w	r3, r3, #2
 801a554:	2b02      	cmp	r3, #2
 801a556:	d134      	bne.n	801a5c2 <HAL_SPI_TransmitReceive+0x30a>
 801a558:	68fb      	ldr	r3, [r7, #12]
 801a55a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a55c:	b29b      	uxth	r3, r3
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d02f      	beq.n	801a5c2 <HAL_SPI_TransmitReceive+0x30a>
 801a562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a564:	2b01      	cmp	r3, #1
 801a566:	d12c      	bne.n	801a5c2 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 801a568:	68fb      	ldr	r3, [r7, #12]
 801a56a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a56c:	b29b      	uxth	r3, r3
 801a56e:	2b01      	cmp	r3, #1
 801a570:	d912      	bls.n	801a598 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 801a572:	68fb      	ldr	r3, [r7, #12]
 801a574:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a576:	881a      	ldrh	r2, [r3, #0]
 801a578:	68fb      	ldr	r3, [r7, #12]
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 801a57e:	68fb      	ldr	r3, [r7, #12]
 801a580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a582:	1c9a      	adds	r2, r3, #2
 801a584:	68fb      	ldr	r3, [r7, #12]
 801a586:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 801a588:	68fb      	ldr	r3, [r7, #12]
 801a58a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a58c:	b29b      	uxth	r3, r3
 801a58e:	3b02      	subs	r3, #2
 801a590:	b29a      	uxth	r2, r3
 801a592:	68fb      	ldr	r3, [r7, #12]
 801a594:	87da      	strh	r2, [r3, #62]	; 0x3e
 801a596:	e012      	b.n	801a5be <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 801a598:	68fb      	ldr	r3, [r7, #12]
 801a59a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801a59c:	68fb      	ldr	r3, [r7, #12]
 801a59e:	681b      	ldr	r3, [r3, #0]
 801a5a0:	330c      	adds	r3, #12
 801a5a2:	7812      	ldrb	r2, [r2, #0]
 801a5a4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 801a5a6:	68fb      	ldr	r3, [r7, #12]
 801a5a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801a5aa:	1c5a      	adds	r2, r3, #1
 801a5ac:	68fb      	ldr	r3, [r7, #12]
 801a5ae:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 801a5b0:	68fb      	ldr	r3, [r7, #12]
 801a5b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a5b4:	b29b      	uxth	r3, r3
 801a5b6:	3b01      	subs	r3, #1
 801a5b8:	b29a      	uxth	r2, r3
 801a5ba:	68fb      	ldr	r3, [r7, #12]
 801a5bc:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 801a5be:	2300      	movs	r3, #0
 801a5c0:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 801a5c2:	68fb      	ldr	r3, [r7, #12]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	689b      	ldr	r3, [r3, #8]
 801a5c8:	f003 0301 	and.w	r3, r3, #1
 801a5cc:	2b01      	cmp	r3, #1
 801a5ce:	d148      	bne.n	801a662 <HAL_SPI_TransmitReceive+0x3aa>
 801a5d0:	68fb      	ldr	r3, [r7, #12]
 801a5d2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a5d6:	b29b      	uxth	r3, r3
 801a5d8:	2b00      	cmp	r3, #0
 801a5da:	d042      	beq.n	801a662 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 801a5dc:	68fb      	ldr	r3, [r7, #12]
 801a5de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a5e2:	b29b      	uxth	r3, r3
 801a5e4:	2b01      	cmp	r3, #1
 801a5e6:	d923      	bls.n	801a630 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 801a5e8:	68fb      	ldr	r3, [r7, #12]
 801a5ea:	681b      	ldr	r3, [r3, #0]
 801a5ec:	68da      	ldr	r2, [r3, #12]
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5f2:	b292      	uxth	r2, r2
 801a5f4:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801a5f6:	68fb      	ldr	r3, [r7, #12]
 801a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a5fa:	1c9a      	adds	r2, r3, #2
 801a5fc:	68fb      	ldr	r3, [r7, #12]
 801a5fe:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 801a600:	68fb      	ldr	r3, [r7, #12]
 801a602:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a606:	b29b      	uxth	r3, r3
 801a608:	3b02      	subs	r3, #2
 801a60a:	b29a      	uxth	r2, r3
 801a60c:	68fb      	ldr	r3, [r7, #12]
 801a60e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 801a612:	68fb      	ldr	r3, [r7, #12]
 801a614:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a618:	b29b      	uxth	r3, r3
 801a61a:	2b01      	cmp	r3, #1
 801a61c:	d81f      	bhi.n	801a65e <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 801a61e:	68fb      	ldr	r3, [r7, #12]
 801a620:	681b      	ldr	r3, [r3, #0]
 801a622:	685a      	ldr	r2, [r3, #4]
 801a624:	68fb      	ldr	r3, [r7, #12]
 801a626:	681b      	ldr	r3, [r3, #0]
 801a628:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 801a62c:	605a      	str	r2, [r3, #4]
 801a62e:	e016      	b.n	801a65e <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 801a630:	68fb      	ldr	r3, [r7, #12]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	f103 020c 	add.w	r2, r3, #12
 801a638:	68fb      	ldr	r3, [r7, #12]
 801a63a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a63c:	7812      	ldrb	r2, [r2, #0]
 801a63e:	b2d2      	uxtb	r2, r2
 801a640:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 801a642:	68fb      	ldr	r3, [r7, #12]
 801a644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801a646:	1c5a      	adds	r2, r3, #1
 801a648:	68fb      	ldr	r3, [r7, #12]
 801a64a:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 801a64c:	68fb      	ldr	r3, [r7, #12]
 801a64e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a652:	b29b      	uxth	r3, r3
 801a654:	3b01      	subs	r3, #1
 801a656:	b29a      	uxth	r2, r3
 801a658:	68fb      	ldr	r3, [r7, #12]
 801a65a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 801a65e:	2301      	movs	r3, #1
 801a660:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 801a662:	f7fa fe19 	bl	8015298 <HAL_GetTick>
 801a666:	4602      	mov	r2, r0
 801a668:	69fb      	ldr	r3, [r7, #28]
 801a66a:	1ad3      	subs	r3, r2, r3
 801a66c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a66e:	429a      	cmp	r2, r3
 801a670:	d803      	bhi.n	801a67a <HAL_SPI_TransmitReceive+0x3c2>
 801a672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a674:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a678:	d102      	bne.n	801a680 <HAL_SPI_TransmitReceive+0x3c8>
 801a67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d103      	bne.n	801a688 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 801a680:	2303      	movs	r3, #3
 801a682:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 801a686:	e01c      	b.n	801a6c2 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 801a688:	68fb      	ldr	r3, [r7, #12]
 801a68a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 801a68c:	b29b      	uxth	r3, r3
 801a68e:	2b00      	cmp	r3, #0
 801a690:	f47f af5b 	bne.w	801a54a <HAL_SPI_TransmitReceive+0x292>
 801a694:	68fb      	ldr	r3, [r7, #12]
 801a696:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 801a69a:	b29b      	uxth	r3, r3
 801a69c:	2b00      	cmp	r3, #0
 801a69e:	f47f af54 	bne.w	801a54a <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 801a6a2:	69fa      	ldr	r2, [r7, #28]
 801a6a4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801a6a6:	68f8      	ldr	r0, [r7, #12]
 801a6a8:	f000 f9b4 	bl	801aa14 <SPI_EndRxTxTransaction>
 801a6ac:	4603      	mov	r3, r0
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d006      	beq.n	801a6c0 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 801a6b2:	2301      	movs	r3, #1
 801a6b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 801a6b8:	68fb      	ldr	r3, [r7, #12]
 801a6ba:	2220      	movs	r2, #32
 801a6bc:	661a      	str	r2, [r3, #96]	; 0x60
 801a6be:	e000      	b.n	801a6c2 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 801a6c0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801a6c2:	68fb      	ldr	r3, [r7, #12]
 801a6c4:	2201      	movs	r2, #1
 801a6c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 801a6ca:	68fb      	ldr	r3, [r7, #12]
 801a6cc:	2200      	movs	r2, #0
 801a6ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 801a6d2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 801a6d6:	4618      	mov	r0, r3
 801a6d8:	3728      	adds	r7, #40	; 0x28
 801a6da:	46bd      	mov	sp, r7
 801a6dc:	bd80      	pop	{r7, pc}
	...

0801a6e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a6e0:	b580      	push	{r7, lr}
 801a6e2:	b088      	sub	sp, #32
 801a6e4:	af00      	add	r7, sp, #0
 801a6e6:	60f8      	str	r0, [r7, #12]
 801a6e8:	60b9      	str	r1, [r7, #8]
 801a6ea:	603b      	str	r3, [r7, #0]
 801a6ec:	4613      	mov	r3, r2
 801a6ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 801a6f0:	f7fa fdd2 	bl	8015298 <HAL_GetTick>
 801a6f4:	4602      	mov	r2, r0
 801a6f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6f8:	1a9b      	subs	r3, r3, r2
 801a6fa:	683a      	ldr	r2, [r7, #0]
 801a6fc:	4413      	add	r3, r2
 801a6fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 801a700:	f7fa fdca 	bl	8015298 <HAL_GetTick>
 801a704:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 801a706:	4b39      	ldr	r3, [pc, #228]	; (801a7ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 801a708:	681b      	ldr	r3, [r3, #0]
 801a70a:	015b      	lsls	r3, r3, #5
 801a70c:	0d1b      	lsrs	r3, r3, #20
 801a70e:	69fa      	ldr	r2, [r7, #28]
 801a710:	fb02 f303 	mul.w	r3, r2, r3
 801a714:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a716:	e054      	b.n	801a7c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 801a718:	683b      	ldr	r3, [r7, #0]
 801a71a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a71e:	d050      	beq.n	801a7c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a720:	f7fa fdba 	bl	8015298 <HAL_GetTick>
 801a724:	4602      	mov	r2, r0
 801a726:	69bb      	ldr	r3, [r7, #24]
 801a728:	1ad3      	subs	r3, r2, r3
 801a72a:	69fa      	ldr	r2, [r7, #28]
 801a72c:	429a      	cmp	r2, r3
 801a72e:	d902      	bls.n	801a736 <SPI_WaitFlagStateUntilTimeout+0x56>
 801a730:	69fb      	ldr	r3, [r7, #28]
 801a732:	2b00      	cmp	r3, #0
 801a734:	d13d      	bne.n	801a7b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a736:	68fb      	ldr	r3, [r7, #12]
 801a738:	681b      	ldr	r3, [r3, #0]
 801a73a:	685a      	ldr	r2, [r3, #4]
 801a73c:	68fb      	ldr	r3, [r7, #12]
 801a73e:	681b      	ldr	r3, [r3, #0]
 801a740:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a744:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a746:	68fb      	ldr	r3, [r7, #12]
 801a748:	685b      	ldr	r3, [r3, #4]
 801a74a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a74e:	d111      	bne.n	801a774 <SPI_WaitFlagStateUntilTimeout+0x94>
 801a750:	68fb      	ldr	r3, [r7, #12]
 801a752:	689b      	ldr	r3, [r3, #8]
 801a754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a758:	d004      	beq.n	801a764 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a75a:	68fb      	ldr	r3, [r7, #12]
 801a75c:	689b      	ldr	r3, [r3, #8]
 801a75e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a762:	d107      	bne.n	801a774 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	681a      	ldr	r2, [r3, #0]
 801a76a:	68fb      	ldr	r3, [r7, #12]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a772:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a774:	68fb      	ldr	r3, [r7, #12]
 801a776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a77c:	d10f      	bne.n	801a79e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 801a77e:	68fb      	ldr	r3, [r7, #12]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	681a      	ldr	r2, [r3, #0]
 801a784:	68fb      	ldr	r3, [r7, #12]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a78c:	601a      	str	r2, [r3, #0]
 801a78e:	68fb      	ldr	r3, [r7, #12]
 801a790:	681b      	ldr	r3, [r3, #0]
 801a792:	681a      	ldr	r2, [r3, #0]
 801a794:	68fb      	ldr	r3, [r7, #12]
 801a796:	681b      	ldr	r3, [r3, #0]
 801a798:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a79c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a79e:	68fb      	ldr	r3, [r7, #12]
 801a7a0:	2201      	movs	r2, #1
 801a7a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a7a6:	68fb      	ldr	r3, [r7, #12]
 801a7a8:	2200      	movs	r2, #0
 801a7aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801a7ae:	2303      	movs	r3, #3
 801a7b0:	e017      	b.n	801a7e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a7b2:	697b      	ldr	r3, [r7, #20]
 801a7b4:	2b00      	cmp	r3, #0
 801a7b6:	d101      	bne.n	801a7bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 801a7b8:	2300      	movs	r3, #0
 801a7ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 801a7bc:	697b      	ldr	r3, [r7, #20]
 801a7be:	3b01      	subs	r3, #1
 801a7c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 801a7c2:	68fb      	ldr	r3, [r7, #12]
 801a7c4:	681b      	ldr	r3, [r3, #0]
 801a7c6:	689a      	ldr	r2, [r3, #8]
 801a7c8:	68bb      	ldr	r3, [r7, #8]
 801a7ca:	4013      	ands	r3, r2
 801a7cc:	68ba      	ldr	r2, [r7, #8]
 801a7ce:	429a      	cmp	r2, r3
 801a7d0:	bf0c      	ite	eq
 801a7d2:	2301      	moveq	r3, #1
 801a7d4:	2300      	movne	r3, #0
 801a7d6:	b2db      	uxtb	r3, r3
 801a7d8:	461a      	mov	r2, r3
 801a7da:	79fb      	ldrb	r3, [r7, #7]
 801a7dc:	429a      	cmp	r2, r3
 801a7de:	d19b      	bne.n	801a718 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 801a7e0:	2300      	movs	r3, #0
}
 801a7e2:	4618      	mov	r0, r3
 801a7e4:	3720      	adds	r7, #32
 801a7e6:	46bd      	mov	sp, r7
 801a7e8:	bd80      	pop	{r7, pc}
 801a7ea:	bf00      	nop
 801a7ec:	2000011c 	.word	0x2000011c

0801a7f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 801a7f0:	b580      	push	{r7, lr}
 801a7f2:	b08a      	sub	sp, #40	; 0x28
 801a7f4:	af00      	add	r7, sp, #0
 801a7f6:	60f8      	str	r0, [r7, #12]
 801a7f8:	60b9      	str	r1, [r7, #8]
 801a7fa:	607a      	str	r2, [r7, #4]
 801a7fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 801a7fe:	2300      	movs	r3, #0
 801a800:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 801a802:	f7fa fd49 	bl	8015298 <HAL_GetTick>
 801a806:	4602      	mov	r2, r0
 801a808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a80a:	1a9b      	subs	r3, r3, r2
 801a80c:	683a      	ldr	r2, [r7, #0]
 801a80e:	4413      	add	r3, r2
 801a810:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 801a812:	f7fa fd41 	bl	8015298 <HAL_GetTick>
 801a816:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 801a818:	68fb      	ldr	r3, [r7, #12]
 801a81a:	681b      	ldr	r3, [r3, #0]
 801a81c:	330c      	adds	r3, #12
 801a81e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 801a820:	4b3d      	ldr	r3, [pc, #244]	; (801a918 <SPI_WaitFifoStateUntilTimeout+0x128>)
 801a822:	681a      	ldr	r2, [r3, #0]
 801a824:	4613      	mov	r3, r2
 801a826:	009b      	lsls	r3, r3, #2
 801a828:	4413      	add	r3, r2
 801a82a:	00da      	lsls	r2, r3, #3
 801a82c:	1ad3      	subs	r3, r2, r3
 801a82e:	0d1b      	lsrs	r3, r3, #20
 801a830:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a832:	fb02 f303 	mul.w	r3, r2, r3
 801a836:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 801a838:	e060      	b.n	801a8fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 801a83a:	68bb      	ldr	r3, [r7, #8]
 801a83c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 801a840:	d107      	bne.n	801a852 <SPI_WaitFifoStateUntilTimeout+0x62>
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	2b00      	cmp	r3, #0
 801a846:	d104      	bne.n	801a852 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 801a848:	69fb      	ldr	r3, [r7, #28]
 801a84a:	781b      	ldrb	r3, [r3, #0]
 801a84c:	b2db      	uxtb	r3, r3
 801a84e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 801a850:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 801a852:	683b      	ldr	r3, [r7, #0]
 801a854:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a858:	d050      	beq.n	801a8fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 801a85a:	f7fa fd1d 	bl	8015298 <HAL_GetTick>
 801a85e:	4602      	mov	r2, r0
 801a860:	6a3b      	ldr	r3, [r7, #32]
 801a862:	1ad3      	subs	r3, r2, r3
 801a864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801a866:	429a      	cmp	r2, r3
 801a868:	d902      	bls.n	801a870 <SPI_WaitFifoStateUntilTimeout+0x80>
 801a86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a86c:	2b00      	cmp	r3, #0
 801a86e:	d13d      	bne.n	801a8ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 801a870:	68fb      	ldr	r3, [r7, #12]
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	685a      	ldr	r2, [r3, #4]
 801a876:	68fb      	ldr	r3, [r7, #12]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 801a87e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a880:	68fb      	ldr	r3, [r7, #12]
 801a882:	685b      	ldr	r3, [r3, #4]
 801a884:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a888:	d111      	bne.n	801a8ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 801a88a:	68fb      	ldr	r3, [r7, #12]
 801a88c:	689b      	ldr	r3, [r3, #8]
 801a88e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a892:	d004      	beq.n	801a89e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a894:	68fb      	ldr	r3, [r7, #12]
 801a896:	689b      	ldr	r3, [r3, #8]
 801a898:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a89c:	d107      	bne.n	801a8ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 801a89e:	68fb      	ldr	r3, [r7, #12]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	681a      	ldr	r2, [r3, #0]
 801a8a4:	68fb      	ldr	r3, [r7, #12]
 801a8a6:	681b      	ldr	r3, [r3, #0]
 801a8a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a8ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 801a8ae:	68fb      	ldr	r3, [r7, #12]
 801a8b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801a8b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801a8b6:	d10f      	bne.n	801a8d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 801a8b8:	68fb      	ldr	r3, [r7, #12]
 801a8ba:	681b      	ldr	r3, [r3, #0]
 801a8bc:	681a      	ldr	r2, [r3, #0]
 801a8be:	68fb      	ldr	r3, [r7, #12]
 801a8c0:	681b      	ldr	r3, [r3, #0]
 801a8c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 801a8c6:	601a      	str	r2, [r3, #0]
 801a8c8:	68fb      	ldr	r3, [r7, #12]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	681a      	ldr	r2, [r3, #0]
 801a8ce:	68fb      	ldr	r3, [r7, #12]
 801a8d0:	681b      	ldr	r3, [r3, #0]
 801a8d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 801a8d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 801a8d8:	68fb      	ldr	r3, [r7, #12]
 801a8da:	2201      	movs	r2, #1
 801a8dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 801a8e0:	68fb      	ldr	r3, [r7, #12]
 801a8e2:	2200      	movs	r2, #0
 801a8e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 801a8e8:	2303      	movs	r3, #3
 801a8ea:	e010      	b.n	801a90e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 801a8ec:	69bb      	ldr	r3, [r7, #24]
 801a8ee:	2b00      	cmp	r3, #0
 801a8f0:	d101      	bne.n	801a8f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 801a8f2:	2300      	movs	r3, #0
 801a8f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 801a8f6:	69bb      	ldr	r3, [r7, #24]
 801a8f8:	3b01      	subs	r3, #1
 801a8fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 801a8fc:	68fb      	ldr	r3, [r7, #12]
 801a8fe:	681b      	ldr	r3, [r3, #0]
 801a900:	689a      	ldr	r2, [r3, #8]
 801a902:	68bb      	ldr	r3, [r7, #8]
 801a904:	4013      	ands	r3, r2
 801a906:	687a      	ldr	r2, [r7, #4]
 801a908:	429a      	cmp	r2, r3
 801a90a:	d196      	bne.n	801a83a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 801a90c:	2300      	movs	r3, #0
}
 801a90e:	4618      	mov	r0, r3
 801a910:	3728      	adds	r7, #40	; 0x28
 801a912:	46bd      	mov	sp, r7
 801a914:	bd80      	pop	{r7, pc}
 801a916:	bf00      	nop
 801a918:	2000011c 	.word	0x2000011c

0801a91c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 801a91c:	b580      	push	{r7, lr}
 801a91e:	b088      	sub	sp, #32
 801a920:	af02      	add	r7, sp, #8
 801a922:	60f8      	str	r0, [r7, #12]
 801a924:	60b9      	str	r1, [r7, #8]
 801a926:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a928:	68fb      	ldr	r3, [r7, #12]
 801a92a:	685b      	ldr	r3, [r3, #4]
 801a92c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a930:	d111      	bne.n	801a956 <SPI_EndRxTransaction+0x3a>
 801a932:	68fb      	ldr	r3, [r7, #12]
 801a934:	689b      	ldr	r3, [r3, #8]
 801a936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a93a:	d004      	beq.n	801a946 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a93c:	68fb      	ldr	r3, [r7, #12]
 801a93e:	689b      	ldr	r3, [r3, #8]
 801a940:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a944:	d107      	bne.n	801a956 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 801a946:	68fb      	ldr	r3, [r7, #12]
 801a948:	681b      	ldr	r3, [r3, #0]
 801a94a:	681a      	ldr	r2, [r3, #0]
 801a94c:	68fb      	ldr	r3, [r7, #12]
 801a94e:	681b      	ldr	r3, [r3, #0]
 801a950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801a954:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801a956:	68fb      	ldr	r3, [r7, #12]
 801a958:	685b      	ldr	r3, [r3, #4]
 801a95a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a95e:	d112      	bne.n	801a986 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801a960:	687b      	ldr	r3, [r7, #4]
 801a962:	9300      	str	r3, [sp, #0]
 801a964:	68bb      	ldr	r3, [r7, #8]
 801a966:	2200      	movs	r2, #0
 801a968:	2180      	movs	r1, #128	; 0x80
 801a96a:	68f8      	ldr	r0, [r7, #12]
 801a96c:	f7ff feb8 	bl	801a6e0 <SPI_WaitFlagStateUntilTimeout>
 801a970:	4603      	mov	r3, r0
 801a972:	2b00      	cmp	r3, #0
 801a974:	d021      	beq.n	801a9ba <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a976:	68fb      	ldr	r3, [r7, #12]
 801a978:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a97a:	f043 0220 	orr.w	r2, r3, #32
 801a97e:	68fb      	ldr	r3, [r7, #12]
 801a980:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801a982:	2303      	movs	r3, #3
 801a984:	e03d      	b.n	801aa02 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801a986:	4b21      	ldr	r3, [pc, #132]	; (801aa0c <SPI_EndRxTransaction+0xf0>)
 801a988:	681b      	ldr	r3, [r3, #0]
 801a98a:	4a21      	ldr	r2, [pc, #132]	; (801aa10 <SPI_EndRxTransaction+0xf4>)
 801a98c:	fba2 2303 	umull	r2, r3, r2, r3
 801a990:	0d5b      	lsrs	r3, r3, #21
 801a992:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801a996:	fb02 f303 	mul.w	r3, r2, r3
 801a99a:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801a99c:	697b      	ldr	r3, [r7, #20]
 801a99e:	2b00      	cmp	r3, #0
 801a9a0:	d00a      	beq.n	801a9b8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 801a9a2:	697b      	ldr	r3, [r7, #20]
 801a9a4:	3b01      	subs	r3, #1
 801a9a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801a9a8:	68fb      	ldr	r3, [r7, #12]
 801a9aa:	681b      	ldr	r3, [r3, #0]
 801a9ac:	689b      	ldr	r3, [r3, #8]
 801a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801a9b2:	2b80      	cmp	r3, #128	; 0x80
 801a9b4:	d0f2      	beq.n	801a99c <SPI_EndRxTransaction+0x80>
 801a9b6:	e000      	b.n	801a9ba <SPI_EndRxTransaction+0x9e>
        break;
 801a9b8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 801a9ba:	68fb      	ldr	r3, [r7, #12]
 801a9bc:	685b      	ldr	r3, [r3, #4]
 801a9be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801a9c2:	d11d      	bne.n	801aa00 <SPI_EndRxTransaction+0xe4>
 801a9c4:	68fb      	ldr	r3, [r7, #12]
 801a9c6:	689b      	ldr	r3, [r3, #8]
 801a9c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801a9cc:	d004      	beq.n	801a9d8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 801a9ce:	68fb      	ldr	r3, [r7, #12]
 801a9d0:	689b      	ldr	r3, [r3, #8]
 801a9d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801a9d6:	d113      	bne.n	801aa00 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	9300      	str	r3, [sp, #0]
 801a9dc:	68bb      	ldr	r3, [r7, #8]
 801a9de:	2200      	movs	r2, #0
 801a9e0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801a9e4:	68f8      	ldr	r0, [r7, #12]
 801a9e6:	f7ff ff03 	bl	801a7f0 <SPI_WaitFifoStateUntilTimeout>
 801a9ea:	4603      	mov	r3, r0
 801a9ec:	2b00      	cmp	r3, #0
 801a9ee:	d007      	beq.n	801aa00 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801a9f0:	68fb      	ldr	r3, [r7, #12]
 801a9f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801a9f4:	f043 0220 	orr.w	r2, r3, #32
 801a9f8:	68fb      	ldr	r3, [r7, #12]
 801a9fa:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801a9fc:	2303      	movs	r3, #3
 801a9fe:	e000      	b.n	801aa02 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 801aa00:	2300      	movs	r3, #0
}
 801aa02:	4618      	mov	r0, r3
 801aa04:	3718      	adds	r7, #24
 801aa06:	46bd      	mov	sp, r7
 801aa08:	bd80      	pop	{r7, pc}
 801aa0a:	bf00      	nop
 801aa0c:	2000011c 	.word	0x2000011c
 801aa10:	165e9f81 	.word	0x165e9f81

0801aa14 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 801aa14:	b580      	push	{r7, lr}
 801aa16:	b088      	sub	sp, #32
 801aa18:	af02      	add	r7, sp, #8
 801aa1a:	60f8      	str	r0, [r7, #12]
 801aa1c:	60b9      	str	r1, [r7, #8]
 801aa1e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	9300      	str	r3, [sp, #0]
 801aa24:	68bb      	ldr	r3, [r7, #8]
 801aa26:	2200      	movs	r2, #0
 801aa28:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 801aa2c:	68f8      	ldr	r0, [r7, #12]
 801aa2e:	f7ff fedf 	bl	801a7f0 <SPI_WaitFifoStateUntilTimeout>
 801aa32:	4603      	mov	r3, r0
 801aa34:	2b00      	cmp	r3, #0
 801aa36:	d007      	beq.n	801aa48 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa38:	68fb      	ldr	r3, [r7, #12]
 801aa3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa3c:	f043 0220 	orr.w	r2, r3, #32
 801aa40:	68fb      	ldr	r3, [r7, #12]
 801aa42:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801aa44:	2303      	movs	r3, #3
 801aa46:	e046      	b.n	801aad6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 801aa48:	4b25      	ldr	r3, [pc, #148]	; (801aae0 <SPI_EndRxTxTransaction+0xcc>)
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	4a25      	ldr	r2, [pc, #148]	; (801aae4 <SPI_EndRxTxTransaction+0xd0>)
 801aa4e:	fba2 2303 	umull	r2, r3, r2, r3
 801aa52:	0d5b      	lsrs	r3, r3, #21
 801aa54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 801aa58:	fb02 f303 	mul.w	r3, r2, r3
 801aa5c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 801aa5e:	68fb      	ldr	r3, [r7, #12]
 801aa60:	685b      	ldr	r3, [r3, #4]
 801aa62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801aa66:	d112      	bne.n	801aa8e <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 801aa68:	687b      	ldr	r3, [r7, #4]
 801aa6a:	9300      	str	r3, [sp, #0]
 801aa6c:	68bb      	ldr	r3, [r7, #8]
 801aa6e:	2200      	movs	r2, #0
 801aa70:	2180      	movs	r1, #128	; 0x80
 801aa72:	68f8      	ldr	r0, [r7, #12]
 801aa74:	f7ff fe34 	bl	801a6e0 <SPI_WaitFlagStateUntilTimeout>
 801aa78:	4603      	mov	r3, r0
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d016      	beq.n	801aaac <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aa7e:	68fb      	ldr	r3, [r7, #12]
 801aa80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aa82:	f043 0220 	orr.w	r2, r3, #32
 801aa86:	68fb      	ldr	r3, [r7, #12]
 801aa88:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 801aa8a:	2303      	movs	r3, #3
 801aa8c:	e023      	b.n	801aad6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	d00a      	beq.n	801aaaa <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 801aa94:	697b      	ldr	r3, [r7, #20]
 801aa96:	3b01      	subs	r3, #1
 801aa98:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 801aa9a:	68fb      	ldr	r3, [r7, #12]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	689b      	ldr	r3, [r3, #8]
 801aaa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801aaa4:	2b80      	cmp	r3, #128	; 0x80
 801aaa6:	d0f2      	beq.n	801aa8e <SPI_EndRxTxTransaction+0x7a>
 801aaa8:	e000      	b.n	801aaac <SPI_EndRxTxTransaction+0x98>
        break;
 801aaaa:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	9300      	str	r3, [sp, #0]
 801aab0:	68bb      	ldr	r3, [r7, #8]
 801aab2:	2200      	movs	r2, #0
 801aab4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 801aab8:	68f8      	ldr	r0, [r7, #12]
 801aaba:	f7ff fe99 	bl	801a7f0 <SPI_WaitFifoStateUntilTimeout>
 801aabe:	4603      	mov	r3, r0
 801aac0:	2b00      	cmp	r3, #0
 801aac2:	d007      	beq.n	801aad4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 801aac4:	68fb      	ldr	r3, [r7, #12]
 801aac6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801aac8:	f043 0220 	orr.w	r2, r3, #32
 801aacc:	68fb      	ldr	r3, [r7, #12]
 801aace:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 801aad0:	2303      	movs	r3, #3
 801aad2:	e000      	b.n	801aad6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 801aad4:	2300      	movs	r3, #0
}
 801aad6:	4618      	mov	r0, r3
 801aad8:	3718      	adds	r7, #24
 801aada:	46bd      	mov	sp, r7
 801aadc:	bd80      	pop	{r7, pc}
 801aade:	bf00      	nop
 801aae0:	2000011c 	.word	0x2000011c
 801aae4:	165e9f81 	.word	0x165e9f81

0801aae8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 801aae8:	b580      	push	{r7, lr}
 801aaea:	b082      	sub	sp, #8
 801aaec:	af00      	add	r7, sp, #0
 801aaee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 801aaf0:	687b      	ldr	r3, [r7, #4]
 801aaf2:	681b      	ldr	r3, [r3, #0]
 801aaf4:	691b      	ldr	r3, [r3, #16]
 801aaf6:	f003 0302 	and.w	r3, r3, #2
 801aafa:	2b02      	cmp	r3, #2
 801aafc:	d128      	bne.n	801ab50 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	681b      	ldr	r3, [r3, #0]
 801ab02:	68db      	ldr	r3, [r3, #12]
 801ab04:	f003 0302 	and.w	r3, r3, #2
 801ab08:	2b02      	cmp	r3, #2
 801ab0a:	d121      	bne.n	801ab50 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	681b      	ldr	r3, [r3, #0]
 801ab10:	f06f 0202 	mvn.w	r2, #2
 801ab14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801ab16:	687b      	ldr	r3, [r7, #4]
 801ab18:	2201      	movs	r2, #1
 801ab1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 801ab1c:	687b      	ldr	r3, [r7, #4]
 801ab1e:	681b      	ldr	r3, [r3, #0]
 801ab20:	699b      	ldr	r3, [r3, #24]
 801ab22:	f003 0303 	and.w	r3, r3, #3
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	d005      	beq.n	801ab36 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 801ab2a:	687b      	ldr	r3, [r7, #4]
 801ab2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ab30:	6878      	ldr	r0, [r7, #4]
 801ab32:	4798      	blx	r3
 801ab34:	e009      	b.n	801ab4a <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ab3c:	6878      	ldr	r0, [r7, #4]
 801ab3e:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ab46:	6878      	ldr	r0, [r7, #4]
 801ab48:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 801ab50:	687b      	ldr	r3, [r7, #4]
 801ab52:	681b      	ldr	r3, [r3, #0]
 801ab54:	691b      	ldr	r3, [r3, #16]
 801ab56:	f003 0304 	and.w	r3, r3, #4
 801ab5a:	2b04      	cmp	r3, #4
 801ab5c:	d128      	bne.n	801abb0 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 801ab5e:	687b      	ldr	r3, [r7, #4]
 801ab60:	681b      	ldr	r3, [r3, #0]
 801ab62:	68db      	ldr	r3, [r3, #12]
 801ab64:	f003 0304 	and.w	r3, r3, #4
 801ab68:	2b04      	cmp	r3, #4
 801ab6a:	d121      	bne.n	801abb0 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801ab6c:	687b      	ldr	r3, [r7, #4]
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	f06f 0204 	mvn.w	r2, #4
 801ab74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801ab76:	687b      	ldr	r3, [r7, #4]
 801ab78:	2202      	movs	r2, #2
 801ab7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	699b      	ldr	r3, [r3, #24]
 801ab82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d005      	beq.n	801ab96 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ab90:	6878      	ldr	r0, [r7, #4]
 801ab92:	4798      	blx	r3
 801ab94:	e009      	b.n	801abaa <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ab9c:	6878      	ldr	r0, [r7, #4]
 801ab9e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801aba0:	687b      	ldr	r3, [r7, #4]
 801aba2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801aba6:	6878      	ldr	r0, [r7, #4]
 801aba8:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801abaa:	687b      	ldr	r3, [r7, #4]
 801abac:	2200      	movs	r2, #0
 801abae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	691b      	ldr	r3, [r3, #16]
 801abb6:	f003 0308 	and.w	r3, r3, #8
 801abba:	2b08      	cmp	r3, #8
 801abbc:	d128      	bne.n	801ac10 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 801abbe:	687b      	ldr	r3, [r7, #4]
 801abc0:	681b      	ldr	r3, [r3, #0]
 801abc2:	68db      	ldr	r3, [r3, #12]
 801abc4:	f003 0308 	and.w	r3, r3, #8
 801abc8:	2b08      	cmp	r3, #8
 801abca:	d121      	bne.n	801ac10 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	f06f 0208 	mvn.w	r2, #8
 801abd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	2204      	movs	r2, #4
 801abda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	681b      	ldr	r3, [r3, #0]
 801abe0:	69db      	ldr	r3, [r3, #28]
 801abe2:	f003 0303 	and.w	r3, r3, #3
 801abe6:	2b00      	cmp	r3, #0
 801abe8:	d005      	beq.n	801abf6 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801abea:	687b      	ldr	r3, [r7, #4]
 801abec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801abf0:	6878      	ldr	r0, [r7, #4]
 801abf2:	4798      	blx	r3
 801abf4:	e009      	b.n	801ac0a <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801abfc:	6878      	ldr	r0, [r7, #4]
 801abfe:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ac00:	687b      	ldr	r3, [r7, #4]
 801ac02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ac06:	6878      	ldr	r0, [r7, #4]
 801ac08:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	2200      	movs	r2, #0
 801ac0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	681b      	ldr	r3, [r3, #0]
 801ac14:	691b      	ldr	r3, [r3, #16]
 801ac16:	f003 0310 	and.w	r3, r3, #16
 801ac1a:	2b10      	cmp	r3, #16
 801ac1c:	d128      	bne.n	801ac70 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 801ac1e:	687b      	ldr	r3, [r7, #4]
 801ac20:	681b      	ldr	r3, [r3, #0]
 801ac22:	68db      	ldr	r3, [r3, #12]
 801ac24:	f003 0310 	and.w	r3, r3, #16
 801ac28:	2b10      	cmp	r3, #16
 801ac2a:	d121      	bne.n	801ac70 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	f06f 0210 	mvn.w	r2, #16
 801ac34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	2208      	movs	r2, #8
 801ac3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 801ac3c:	687b      	ldr	r3, [r7, #4]
 801ac3e:	681b      	ldr	r3, [r3, #0]
 801ac40:	69db      	ldr	r3, [r3, #28]
 801ac42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801ac46:	2b00      	cmp	r3, #0
 801ac48:	d005      	beq.n	801ac56 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801ac50:	6878      	ldr	r0, [r7, #4]
 801ac52:	4798      	blx	r3
 801ac54:	e009      	b.n	801ac6a <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 801ac56:	687b      	ldr	r3, [r7, #4]
 801ac58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801ac5c:	6878      	ldr	r0, [r7, #4]
 801ac5e:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 801ac66:	6878      	ldr	r0, [r7, #4]
 801ac68:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801ac6a:	687b      	ldr	r3, [r7, #4]
 801ac6c:	2200      	movs	r2, #0
 801ac6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	681b      	ldr	r3, [r3, #0]
 801ac74:	691b      	ldr	r3, [r3, #16]
 801ac76:	f003 0301 	and.w	r3, r3, #1
 801ac7a:	2b01      	cmp	r3, #1
 801ac7c:	d110      	bne.n	801aca0 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801ac7e:	687b      	ldr	r3, [r7, #4]
 801ac80:	681b      	ldr	r3, [r3, #0]
 801ac82:	68db      	ldr	r3, [r3, #12]
 801ac84:	f003 0301 	and.w	r3, r3, #1
 801ac88:	2b01      	cmp	r3, #1
 801ac8a:	d109      	bne.n	801aca0 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801ac8c:	687b      	ldr	r3, [r7, #4]
 801ac8e:	681b      	ldr	r3, [r3, #0]
 801ac90:	f06f 0201 	mvn.w	r2, #1
 801ac94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801ac9c:	6878      	ldr	r0, [r7, #4]
 801ac9e:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801aca0:	687b      	ldr	r3, [r7, #4]
 801aca2:	681b      	ldr	r3, [r3, #0]
 801aca4:	691b      	ldr	r3, [r3, #16]
 801aca6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801acaa:	2b80      	cmp	r3, #128	; 0x80
 801acac:	d110      	bne.n	801acd0 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801acae:	687b      	ldr	r3, [r7, #4]
 801acb0:	681b      	ldr	r3, [r3, #0]
 801acb2:	68db      	ldr	r3, [r3, #12]
 801acb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801acb8:	2b80      	cmp	r3, #128	; 0x80
 801acba:	d109      	bne.n	801acd0 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801acc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 801accc:	6878      	ldr	r0, [r7, #4]
 801acce:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	691b      	ldr	r3, [r3, #16]
 801acd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801acda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801acde:	d110      	bne.n	801ad02 <HAL_TIM_IRQHandler+0x21a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	681b      	ldr	r3, [r3, #0]
 801ace4:	68db      	ldr	r3, [r3, #12]
 801ace6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801acea:	2b80      	cmp	r3, #128	; 0x80
 801acec:	d109      	bne.n	801ad02 <HAL_TIM_IRQHandler+0x21a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 801acf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 801acfe:	6878      	ldr	r0, [r7, #4]
 801ad00:	4798      	blx	r3
      HAL_TIMEx_Break2Callback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	691b      	ldr	r3, [r3, #16]
 801ad08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad0c:	2b40      	cmp	r3, #64	; 0x40
 801ad0e:	d110      	bne.n	801ad32 <HAL_TIM_IRQHandler+0x24a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 801ad10:	687b      	ldr	r3, [r7, #4]
 801ad12:	681b      	ldr	r3, [r3, #0]
 801ad14:	68db      	ldr	r3, [r3, #12]
 801ad16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad1a:	2b40      	cmp	r3, #64	; 0x40
 801ad1c:	d109      	bne.n	801ad32 <HAL_TIM_IRQHandler+0x24a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 801ad1e:	687b      	ldr	r3, [r7, #4]
 801ad20:	681b      	ldr	r3, [r3, #0]
 801ad22:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801ad26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 801ad28:	687b      	ldr	r3, [r7, #4]
 801ad2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801ad2e:	6878      	ldr	r0, [r7, #4]
 801ad30:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 801ad32:	687b      	ldr	r3, [r7, #4]
 801ad34:	681b      	ldr	r3, [r3, #0]
 801ad36:	691b      	ldr	r3, [r3, #16]
 801ad38:	f003 0320 	and.w	r3, r3, #32
 801ad3c:	2b20      	cmp	r3, #32
 801ad3e:	d110      	bne.n	801ad62 <HAL_TIM_IRQHandler+0x27a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 801ad40:	687b      	ldr	r3, [r7, #4]
 801ad42:	681b      	ldr	r3, [r3, #0]
 801ad44:	68db      	ldr	r3, [r3, #12]
 801ad46:	f003 0320 	and.w	r3, r3, #32
 801ad4a:	2b20      	cmp	r3, #32
 801ad4c:	d109      	bne.n	801ad62 <HAL_TIM_IRQHandler+0x27a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801ad4e:	687b      	ldr	r3, [r7, #4]
 801ad50:	681b      	ldr	r3, [r3, #0]
 801ad52:	f06f 0220 	mvn.w	r2, #32
 801ad56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 801ad58:	687b      	ldr	r3, [r7, #4]
 801ad5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801ad62:	bf00      	nop
 801ad64:	3708      	adds	r7, #8
 801ad66:	46bd      	mov	sp, r7
 801ad68:	bd80      	pop	{r7, pc}
	...

0801ad6c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801ad6c:	b580      	push	{r7, lr}
 801ad6e:	b082      	sub	sp, #8
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801ad74:	687b      	ldr	r3, [r7, #4]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d101      	bne.n	801ad7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801ad7a:	2301      	movs	r3, #1
 801ad7c:	e04e      	b.n	801ae1c <HAL_UART_Init+0xb0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ad82:	2b00      	cmp	r3, #0
 801ad84:	d114      	bne.n	801adb0 <HAL_UART_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	2200      	movs	r2, #0
 801ad8a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 801ad8e:	6878      	ldr	r0, [r7, #4]
 801ad90:	f000 fc1c 	bl	801b5cc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 801ad94:	687b      	ldr	r3, [r7, #4]
 801ad96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801ad9a:	2b00      	cmp	r3, #0
 801ad9c:	d103      	bne.n	801ada6 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 801ad9e:	687b      	ldr	r3, [r7, #4]
 801ada0:	4a20      	ldr	r2, [pc, #128]	; (801ae24 <HAL_UART_Init+0xb8>)
 801ada2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801adac:	6878      	ldr	r0, [r7, #4]
 801adae:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801adb0:	687b      	ldr	r3, [r7, #4]
 801adb2:	2224      	movs	r2, #36	; 0x24
 801adb4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	681b      	ldr	r3, [r3, #0]
 801adba:	681a      	ldr	r2, [r3, #0]
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	681b      	ldr	r3, [r3, #0]
 801adc0:	f022 0201 	bic.w	r2, r2, #1
 801adc4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801adc6:	6878      	ldr	r0, [r7, #4]
 801adc8:	f000 fc46 	bl	801b658 <UART_SetConfig>
 801adcc:	4603      	mov	r3, r0
 801adce:	2b01      	cmp	r3, #1
 801add0:	d101      	bne.n	801add6 <HAL_UART_Init+0x6a>
  {
    return HAL_ERROR;
 801add2:	2301      	movs	r3, #1
 801add4:	e022      	b.n	801ae1c <HAL_UART_Init+0xb0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801add6:	687b      	ldr	r3, [r7, #4]
 801add8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801adda:	2b00      	cmp	r3, #0
 801addc:	d002      	beq.n	801ade4 <HAL_UART_Init+0x78>
  {
    UART_AdvFeatureConfig(huart);
 801adde:	6878      	ldr	r0, [r7, #4]
 801ade0:	f000 fe9e 	bl	801bb20 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	685a      	ldr	r2, [r3, #4]
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 801adf2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801adf4:	687b      	ldr	r3, [r7, #4]
 801adf6:	681b      	ldr	r3, [r3, #0]
 801adf8:	689a      	ldr	r2, [r3, #8]
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 801ae02:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	681a      	ldr	r2, [r3, #0]
 801ae0a:	687b      	ldr	r3, [r7, #4]
 801ae0c:	681b      	ldr	r3, [r3, #0]
 801ae0e:	f042 0201 	orr.w	r2, r2, #1
 801ae12:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801ae14:	6878      	ldr	r0, [r7, #4]
 801ae16:	f000 ff25 	bl	801bc64 <UART_CheckIdleState>
 801ae1a:	4603      	mov	r3, r0
}
 801ae1c:	4618      	mov	r0, r3
 801ae1e:	3708      	adds	r7, #8
 801ae20:	46bd      	mov	sp, r7
 801ae22:	bd80      	pop	{r7, pc}
 801ae24:	08014691 	.word	0x08014691

0801ae28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 801ae28:	b580      	push	{r7, lr}
 801ae2a:	b08a      	sub	sp, #40	; 0x28
 801ae2c:	af02      	add	r7, sp, #8
 801ae2e:	60f8      	str	r0, [r7, #12]
 801ae30:	60b9      	str	r1, [r7, #8]
 801ae32:	603b      	str	r3, [r7, #0]
 801ae34:	4613      	mov	r3, r2
 801ae36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801ae38:	68fb      	ldr	r3, [r7, #12]
 801ae3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801ae3c:	2b20      	cmp	r3, #32
 801ae3e:	d171      	bne.n	801af24 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 801ae40:	68bb      	ldr	r3, [r7, #8]
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d002      	beq.n	801ae4c <HAL_UART_Transmit+0x24>
 801ae46:	88fb      	ldrh	r3, [r7, #6]
 801ae48:	2b00      	cmp	r3, #0
 801ae4a:	d101      	bne.n	801ae50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 801ae4c:	2301      	movs	r3, #1
 801ae4e:	e06a      	b.n	801af26 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 801ae50:	68fb      	ldr	r3, [r7, #12]
 801ae52:	2200      	movs	r2, #0
 801ae54:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 801ae58:	68fb      	ldr	r3, [r7, #12]
 801ae5a:	2221      	movs	r2, #33	; 0x21
 801ae5c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 801ae5e:	f7fa fa1b 	bl	8015298 <HAL_GetTick>
 801ae62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 801ae64:	68fb      	ldr	r3, [r7, #12]
 801ae66:	88fa      	ldrh	r2, [r7, #6]
 801ae68:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 801ae6c:	68fb      	ldr	r3, [r7, #12]
 801ae6e:	88fa      	ldrh	r2, [r7, #6]
 801ae70:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801ae74:	68fb      	ldr	r3, [r7, #12]
 801ae76:	689b      	ldr	r3, [r3, #8]
 801ae78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801ae7c:	d108      	bne.n	801ae90 <HAL_UART_Transmit+0x68>
 801ae7e:	68fb      	ldr	r3, [r7, #12]
 801ae80:	691b      	ldr	r3, [r3, #16]
 801ae82:	2b00      	cmp	r3, #0
 801ae84:	d104      	bne.n	801ae90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 801ae86:	2300      	movs	r3, #0
 801ae88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 801ae8a:	68bb      	ldr	r3, [r7, #8]
 801ae8c:	61bb      	str	r3, [r7, #24]
 801ae8e:	e003      	b.n	801ae98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 801ae90:	68bb      	ldr	r3, [r7, #8]
 801ae92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 801ae94:	2300      	movs	r3, #0
 801ae96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 801ae98:	e02c      	b.n	801aef4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 801ae9a:	683b      	ldr	r3, [r7, #0]
 801ae9c:	9300      	str	r3, [sp, #0]
 801ae9e:	697b      	ldr	r3, [r7, #20]
 801aea0:	2200      	movs	r2, #0
 801aea2:	2180      	movs	r1, #128	; 0x80
 801aea4:	68f8      	ldr	r0, [r7, #12]
 801aea6:	f000 ff2a 	bl	801bcfe <UART_WaitOnFlagUntilTimeout>
 801aeaa:	4603      	mov	r3, r0
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	d001      	beq.n	801aeb4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 801aeb0:	2303      	movs	r3, #3
 801aeb2:	e038      	b.n	801af26 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 801aeb4:	69fb      	ldr	r3, [r7, #28]
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d10b      	bne.n	801aed2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 801aeba:	69bb      	ldr	r3, [r7, #24]
 801aebc:	881b      	ldrh	r3, [r3, #0]
 801aebe:	461a      	mov	r2, r3
 801aec0:	68fb      	ldr	r3, [r7, #12]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 801aec8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 801aeca:	69bb      	ldr	r3, [r7, #24]
 801aecc:	3302      	adds	r3, #2
 801aece:	61bb      	str	r3, [r7, #24]
 801aed0:	e007      	b.n	801aee2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801aed2:	69fb      	ldr	r3, [r7, #28]
 801aed4:	781a      	ldrb	r2, [r3, #0]
 801aed6:	68fb      	ldr	r3, [r7, #12]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 801aedc:	69fb      	ldr	r3, [r7, #28]
 801aede:	3301      	adds	r3, #1
 801aee0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801aee8:	b29b      	uxth	r3, r3
 801aeea:	3b01      	subs	r3, #1
 801aeec:	b29a      	uxth	r2, r3
 801aeee:	68fb      	ldr	r3, [r7, #12]
 801aef0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 801aef4:	68fb      	ldr	r3, [r7, #12]
 801aef6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 801aefa:	b29b      	uxth	r3, r3
 801aefc:	2b00      	cmp	r3, #0
 801aefe:	d1cc      	bne.n	801ae9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801af00:	683b      	ldr	r3, [r7, #0]
 801af02:	9300      	str	r3, [sp, #0]
 801af04:	697b      	ldr	r3, [r7, #20]
 801af06:	2200      	movs	r2, #0
 801af08:	2140      	movs	r1, #64	; 0x40
 801af0a:	68f8      	ldr	r0, [r7, #12]
 801af0c:	f000 fef7 	bl	801bcfe <UART_WaitOnFlagUntilTimeout>
 801af10:	4603      	mov	r3, r0
 801af12:	2b00      	cmp	r3, #0
 801af14:	d001      	beq.n	801af1a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 801af16:	2303      	movs	r3, #3
 801af18:	e005      	b.n	801af26 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801af1a:	68fb      	ldr	r3, [r7, #12]
 801af1c:	2220      	movs	r2, #32
 801af1e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 801af20:	2300      	movs	r3, #0
 801af22:	e000      	b.n	801af26 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 801af24:	2302      	movs	r3, #2
  }
}
 801af26:	4618      	mov	r0, r3
 801af28:	3720      	adds	r7, #32
 801af2a:	46bd      	mov	sp, r7
 801af2c:	bd80      	pop	{r7, pc}
	...

0801af30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 801af30:	b580      	push	{r7, lr}
 801af32:	b0ba      	sub	sp, #232	; 0xe8
 801af34:	af00      	add	r7, sp, #0
 801af36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 801af38:	687b      	ldr	r3, [r7, #4]
 801af3a:	681b      	ldr	r3, [r3, #0]
 801af3c:	69db      	ldr	r3, [r3, #28]
 801af3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 801af42:	687b      	ldr	r3, [r7, #4]
 801af44:	681b      	ldr	r3, [r3, #0]
 801af46:	681b      	ldr	r3, [r3, #0]
 801af48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 801af4c:	687b      	ldr	r3, [r7, #4]
 801af4e:	681b      	ldr	r3, [r3, #0]
 801af50:	689b      	ldr	r3, [r3, #8]
 801af52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 801af56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801af5a:	f640 030f 	movw	r3, #2063	; 0x80f
 801af5e:	4013      	ands	r3, r2
 801af60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 801af64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801af68:	2b00      	cmp	r3, #0
 801af6a:	d115      	bne.n	801af98 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 801af6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801af70:	f003 0320 	and.w	r3, r3, #32
 801af74:	2b00      	cmp	r3, #0
 801af76:	d00f      	beq.n	801af98 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801af78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801af7c:	f003 0320 	and.w	r3, r3, #32
 801af80:	2b00      	cmp	r3, #0
 801af82:	d009      	beq.n	801af98 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801af88:	2b00      	cmp	r3, #0
 801af8a:	f000 82b8 	beq.w	801b4fe <HAL_UART_IRQHandler+0x5ce>
      {
        huart->RxISR(huart);
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801af92:	6878      	ldr	r0, [r7, #4]
 801af94:	4798      	blx	r3
      }
      return;
 801af96:	e2b2      	b.n	801b4fe <HAL_UART_IRQHandler+0x5ce>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 801af98:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801af9c:	2b00      	cmp	r3, #0
 801af9e:	f000 811d 	beq.w	801b1dc <HAL_UART_IRQHandler+0x2ac>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801afa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801afa6:	f003 0301 	and.w	r3, r3, #1
 801afaa:	2b00      	cmp	r3, #0
 801afac:	d106      	bne.n	801afbc <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801afae:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801afb2:	4b88      	ldr	r3, [pc, #544]	; (801b1d4 <HAL_UART_IRQHandler+0x2a4>)
 801afb4:	4013      	ands	r3, r2
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	f000 8110 	beq.w	801b1dc <HAL_UART_IRQHandler+0x2ac>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801afbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801afc0:	f003 0301 	and.w	r3, r3, #1
 801afc4:	2b00      	cmp	r3, #0
 801afc6:	d011      	beq.n	801afec <HAL_UART_IRQHandler+0xbc>
 801afc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801afcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801afd0:	2b00      	cmp	r3, #0
 801afd2:	d00b      	beq.n	801afec <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	2201      	movs	r2, #1
 801afda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801afe2:	f043 0201 	orr.w	r2, r3, #1
 801afe6:	687b      	ldr	r3, [r7, #4]
 801afe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801afec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801aff0:	f003 0302 	and.w	r3, r3, #2
 801aff4:	2b00      	cmp	r3, #0
 801aff6:	d011      	beq.n	801b01c <HAL_UART_IRQHandler+0xec>
 801aff8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801affc:	f003 0301 	and.w	r3, r3, #1
 801b000:	2b00      	cmp	r3, #0
 801b002:	d00b      	beq.n	801b01c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801b004:	687b      	ldr	r3, [r7, #4]
 801b006:	681b      	ldr	r3, [r3, #0]
 801b008:	2202      	movs	r2, #2
 801b00a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 801b00c:	687b      	ldr	r3, [r7, #4]
 801b00e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b012:	f043 0204 	orr.w	r2, r3, #4
 801b016:	687b      	ldr	r3, [r7, #4]
 801b018:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801b01c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b020:	f003 0304 	and.w	r3, r3, #4
 801b024:	2b00      	cmp	r3, #0
 801b026:	d011      	beq.n	801b04c <HAL_UART_IRQHandler+0x11c>
 801b028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b02c:	f003 0301 	and.w	r3, r3, #1
 801b030:	2b00      	cmp	r3, #0
 801b032:	d00b      	beq.n	801b04c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801b034:	687b      	ldr	r3, [r7, #4]
 801b036:	681b      	ldr	r3, [r3, #0]
 801b038:	2204      	movs	r2, #4
 801b03a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801b03c:	687b      	ldr	r3, [r7, #4]
 801b03e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b042:	f043 0202 	orr.w	r2, r3, #2
 801b046:	687b      	ldr	r3, [r7, #4]
 801b048:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801b04c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b050:	f003 0308 	and.w	r3, r3, #8
 801b054:	2b00      	cmp	r3, #0
 801b056:	d017      	beq.n	801b088 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b058:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b05c:	f003 0320 	and.w	r3, r3, #32
 801b060:	2b00      	cmp	r3, #0
 801b062:	d105      	bne.n	801b070 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 801b064:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b068:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801b06c:	2b00      	cmp	r3, #0
 801b06e:	d00b      	beq.n	801b088 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	2208      	movs	r2, #8
 801b076:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 801b078:	687b      	ldr	r3, [r7, #4]
 801b07a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b07e:	f043 0208 	orr.w	r2, r3, #8
 801b082:	687b      	ldr	r3, [r7, #4]
 801b084:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 801b088:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b08c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801b090:	2b00      	cmp	r3, #0
 801b092:	d012      	beq.n	801b0ba <HAL_UART_IRQHandler+0x18a>
 801b094:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b098:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801b09c:	2b00      	cmp	r3, #0
 801b09e:	d00c      	beq.n	801b0ba <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801b0a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801b0aa:	687b      	ldr	r3, [r7, #4]
 801b0ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0b0:	f043 0220 	orr.w	r2, r3, #32
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801b0ba:	687b      	ldr	r3, [r7, #4]
 801b0bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0c0:	2b00      	cmp	r3, #0
 801b0c2:	f000 821e 	beq.w	801b502 <HAL_UART_IRQHandler+0x5d2>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 801b0c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b0ca:	f003 0320 	and.w	r3, r3, #32
 801b0ce:	2b00      	cmp	r3, #0
 801b0d0:	d00d      	beq.n	801b0ee <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 801b0d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b0d6:	f003 0320 	and.w	r3, r3, #32
 801b0da:	2b00      	cmp	r3, #0
 801b0dc:	d007      	beq.n	801b0ee <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 801b0de:	687b      	ldr	r3, [r7, #4]
 801b0e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b0e2:	2b00      	cmp	r3, #0
 801b0e4:	d003      	beq.n	801b0ee <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801b0ea:	6878      	ldr	r0, [r7, #4]
 801b0ec:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b0f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b0f8:	687b      	ldr	r3, [r7, #4]
 801b0fa:	681b      	ldr	r3, [r3, #0]
 801b0fc:	689b      	ldr	r3, [r3, #8]
 801b0fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b102:	2b40      	cmp	r3, #64	; 0x40
 801b104:	d005      	beq.n	801b112 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801b106:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b10a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801b10e:	2b00      	cmp	r3, #0
 801b110:	d053      	beq.n	801b1ba <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801b112:	6878      	ldr	r0, [r7, #4]
 801b114:	f000 ff80 	bl	801c018 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	681b      	ldr	r3, [r3, #0]
 801b11c:	689b      	ldr	r3, [r3, #8]
 801b11e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b122:	2b40      	cmp	r3, #64	; 0x40
 801b124:	d143      	bne.n	801b1ae <HAL_UART_IRQHandler+0x27e>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b126:	687b      	ldr	r3, [r7, #4]
 801b128:	681b      	ldr	r3, [r3, #0]
 801b12a:	3308      	adds	r3, #8
 801b12c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b130:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b134:	e853 3f00 	ldrex	r3, [r3]
 801b138:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 801b13c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b140:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b144:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	3308      	adds	r3, #8
 801b14e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801b152:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 801b156:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b15a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 801b15e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b162:	e841 2300 	strex	r3, r2, [r1]
 801b166:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 801b16a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801b16e:	2b00      	cmp	r3, #0
 801b170:	d1d9      	bne.n	801b126 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 801b172:	687b      	ldr	r3, [r7, #4]
 801b174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b176:	2b00      	cmp	r3, #0
 801b178:	d013      	beq.n	801b1a2 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801b17a:	687b      	ldr	r3, [r7, #4]
 801b17c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b17e:	4a16      	ldr	r2, [pc, #88]	; (801b1d8 <HAL_UART_IRQHandler+0x2a8>)
 801b180:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b186:	4618      	mov	r0, r3
 801b188:	f7fb f98a 	bl	80164a0 <HAL_DMA_Abort_IT>
 801b18c:	4603      	mov	r3, r0
 801b18e:	2b00      	cmp	r3, #0
 801b190:	d01d      	beq.n	801b1ce <HAL_UART_IRQHandler+0x29e>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 801b192:	687b      	ldr	r3, [r7, #4]
 801b194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b196:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801b198:	687a      	ldr	r2, [r7, #4]
 801b19a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 801b19c:	4610      	mov	r0, r2
 801b19e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b1a0:	e015      	b.n	801b1ce <HAL_UART_IRQHandler+0x29e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 801b1a2:	687b      	ldr	r3, [r7, #4]
 801b1a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1a8:	6878      	ldr	r0, [r7, #4]
 801b1aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b1ac:	e00f      	b.n	801b1ce <HAL_UART_IRQHandler+0x29e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1b4:	6878      	ldr	r0, [r7, #4]
 801b1b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b1b8:	e009      	b.n	801b1ce <HAL_UART_IRQHandler+0x29e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801b1ba:	687b      	ldr	r3, [r7, #4]
 801b1bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801b1c0:	6878      	ldr	r0, [r7, #4]
 801b1c2:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	2200      	movs	r2, #0
 801b1c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 801b1cc:	e199      	b.n	801b502 <HAL_UART_IRQHandler+0x5d2>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b1ce:	bf00      	nop
    return;
 801b1d0:	e197      	b.n	801b502 <HAL_UART_IRQHandler+0x5d2>
 801b1d2:	bf00      	nop
 801b1d4:	04000120 	.word	0x04000120
 801b1d8:	0801c0e1 	.word	0x0801c0e1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801b1dc:	687b      	ldr	r3, [r7, #4]
 801b1de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801b1e0:	2b01      	cmp	r3, #1
 801b1e2:	f040 8150 	bne.w	801b486 <HAL_UART_IRQHandler+0x556>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801b1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b1ea:	f003 0310 	and.w	r3, r3, #16
 801b1ee:	2b00      	cmp	r3, #0
 801b1f0:	f000 8149 	beq.w	801b486 <HAL_UART_IRQHandler+0x556>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801b1f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b1f8:	f003 0310 	and.w	r3, r3, #16
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	f000 8142 	beq.w	801b486 <HAL_UART_IRQHandler+0x556>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801b202:	687b      	ldr	r3, [r7, #4]
 801b204:	681b      	ldr	r3, [r3, #0]
 801b206:	2210      	movs	r2, #16
 801b208:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801b20a:	687b      	ldr	r3, [r7, #4]
 801b20c:	681b      	ldr	r3, [r3, #0]
 801b20e:	689b      	ldr	r3, [r3, #8]
 801b210:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b214:	2b40      	cmp	r3, #64	; 0x40
 801b216:	f040 80b8 	bne.w	801b38a <HAL_UART_IRQHandler+0x45a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801b21a:	687b      	ldr	r3, [r7, #4]
 801b21c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	685b      	ldr	r3, [r3, #4]
 801b222:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 801b226:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 801b22a:	2b00      	cmp	r3, #0
 801b22c:	f000 816b 	beq.w	801b506 <HAL_UART_IRQHandler+0x5d6>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 801b236:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b23a:	429a      	cmp	r2, r3
 801b23c:	f080 8163 	bcs.w	801b506 <HAL_UART_IRQHandler+0x5d6>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 801b246:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b24e:	69db      	ldr	r3, [r3, #28]
 801b250:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b254:	f000 8086 	beq.w	801b364 <HAL_UART_IRQHandler+0x434>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801b258:	687b      	ldr	r3, [r7, #4]
 801b25a:	681b      	ldr	r3, [r3, #0]
 801b25c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801b264:	e853 3f00 	ldrex	r3, [r3]
 801b268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 801b26c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801b270:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801b274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 801b278:	687b      	ldr	r3, [r7, #4]
 801b27a:	681b      	ldr	r3, [r3, #0]
 801b27c:	461a      	mov	r2, r3
 801b27e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b282:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801b286:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b28a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801b28e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b292:	e841 2300 	strex	r3, r2, [r1]
 801b296:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 801b29a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801b29e:	2b00      	cmp	r3, #0
 801b2a0:	d1da      	bne.n	801b258 <HAL_UART_IRQHandler+0x328>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	3308      	adds	r3, #8
 801b2a8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2aa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801b2ac:	e853 3f00 	ldrex	r3, [r3]
 801b2b0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 801b2b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b2b4:	f023 0301 	bic.w	r3, r3, #1
 801b2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801b2bc:	687b      	ldr	r3, [r7, #4]
 801b2be:	681b      	ldr	r3, [r3, #0]
 801b2c0:	3308      	adds	r3, #8
 801b2c2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b2c6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 801b2ca:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b2cc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 801b2ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801b2d2:	e841 2300 	strex	r3, r2, [r1]
 801b2d6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 801b2d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b2da:	2b00      	cmp	r3, #0
 801b2dc:	d1e1      	bne.n	801b2a2 <HAL_UART_IRQHandler+0x372>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	3308      	adds	r3, #8
 801b2e4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b2e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801b2e8:	e853 3f00 	ldrex	r3, [r3]
 801b2ec:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 801b2ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801b2f0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801b2f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 801b2f8:	687b      	ldr	r3, [r7, #4]
 801b2fa:	681b      	ldr	r3, [r3, #0]
 801b2fc:	3308      	adds	r3, #8
 801b2fe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b302:	66fa      	str	r2, [r7, #108]	; 0x6c
 801b304:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b306:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801b308:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801b30a:	e841 2300 	strex	r3, r2, [r1]
 801b30e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 801b310:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801b312:	2b00      	cmp	r3, #0
 801b314:	d1e3      	bne.n	801b2de <HAL_UART_IRQHandler+0x3ae>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801b316:	687b      	ldr	r3, [r7, #4]
 801b318:	2220      	movs	r2, #32
 801b31a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b31e:	687b      	ldr	r3, [r7, #4]
 801b320:	2200      	movs	r2, #0
 801b322:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b324:	687b      	ldr	r3, [r7, #4]
 801b326:	681b      	ldr	r3, [r3, #0]
 801b328:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b32a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801b32c:	e853 3f00 	ldrex	r3, [r3]
 801b330:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 801b332:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801b334:	f023 0310 	bic.w	r3, r3, #16
 801b338:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	461a      	mov	r2, r3
 801b342:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b346:	65bb      	str	r3, [r7, #88]	; 0x58
 801b348:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b34a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801b34c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801b34e:	e841 2300 	strex	r3, r2, [r1]
 801b352:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 801b354:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801b356:	2b00      	cmp	r3, #0
 801b358:	d1e4      	bne.n	801b324 <HAL_UART_IRQHandler+0x3f4>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 801b35a:	687b      	ldr	r3, [r7, #4]
 801b35c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b35e:	4618      	mov	r0, r3
 801b360:	f7fb f82e 	bl	80163c0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b364:	687b      	ldr	r3, [r7, #4]
 801b366:	2202      	movs	r2, #2
 801b368:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 801b36a:	687b      	ldr	r3, [r7, #4]
 801b36c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b370:	687a      	ldr	r2, [r7, #4]
 801b372:	f8b2 1058 	ldrh.w	r1, [r2, #88]	; 0x58
 801b376:	687a      	ldr	r2, [r7, #4]
 801b378:	f8b2 205a 	ldrh.w	r2, [r2, #90]	; 0x5a
 801b37c:	b292      	uxth	r2, r2
 801b37e:	1a8a      	subs	r2, r1, r2
 801b380:	b292      	uxth	r2, r2
 801b382:	4611      	mov	r1, r2
 801b384:	6878      	ldr	r0, [r7, #4]
 801b386:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b388:	e0bd      	b.n	801b506 <HAL_UART_IRQHandler+0x5d6>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 801b390:	687b      	ldr	r3, [r7, #4]
 801b392:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b396:	b29b      	uxth	r3, r3
 801b398:	1ad3      	subs	r3, r2, r3
 801b39a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801b3a4:	b29b      	uxth	r3, r3
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	f000 80af 	beq.w	801b50a <HAL_UART_IRQHandler+0x5da>
          && (nb_rx_data > 0U))
 801b3ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	f000 80aa 	beq.w	801b50a <HAL_UART_IRQHandler+0x5da>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	681b      	ldr	r3, [r3, #0]
 801b3ba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801b3be:	e853 3f00 	ldrex	r3, [r3]
 801b3c2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b3c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801b3ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b3ce:	687b      	ldr	r3, [r7, #4]
 801b3d0:	681b      	ldr	r3, [r3, #0]
 801b3d2:	461a      	mov	r2, r3
 801b3d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b3d8:	647b      	str	r3, [r7, #68]	; 0x44
 801b3da:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b3dc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801b3de:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801b3e0:	e841 2300 	strex	r3, r2, [r1]
 801b3e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801b3e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801b3e8:	2b00      	cmp	r3, #0
 801b3ea:	d1e4      	bne.n	801b3b6 <HAL_UART_IRQHandler+0x486>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801b3ec:	687b      	ldr	r3, [r7, #4]
 801b3ee:	681b      	ldr	r3, [r3, #0]
 801b3f0:	3308      	adds	r3, #8
 801b3f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b3f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b3f6:	e853 3f00 	ldrex	r3, [r3]
 801b3fa:	623b      	str	r3, [r7, #32]
   return(result);
 801b3fc:	6a3b      	ldr	r3, [r7, #32]
 801b3fe:	f023 0301 	bic.w	r3, r3, #1
 801b402:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801b406:	687b      	ldr	r3, [r7, #4]
 801b408:	681b      	ldr	r3, [r3, #0]
 801b40a:	3308      	adds	r3, #8
 801b40c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b410:	633a      	str	r2, [r7, #48]	; 0x30
 801b412:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b414:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b418:	e841 2300 	strex	r3, r2, [r1]
 801b41c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801b41e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b420:	2b00      	cmp	r3, #0
 801b422:	d1e3      	bne.n	801b3ec <HAL_UART_IRQHandler+0x4bc>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801b424:	687b      	ldr	r3, [r7, #4]
 801b426:	2220      	movs	r2, #32
 801b428:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801b42c:	687b      	ldr	r3, [r7, #4]
 801b42e:	2200      	movs	r2, #0
 801b430:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	2200      	movs	r2, #0
 801b436:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801b438:	687b      	ldr	r3, [r7, #4]
 801b43a:	681b      	ldr	r3, [r3, #0]
 801b43c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801b43e:	693b      	ldr	r3, [r7, #16]
 801b440:	e853 3f00 	ldrex	r3, [r3]
 801b444:	60fb      	str	r3, [r7, #12]
   return(result);
 801b446:	68fb      	ldr	r3, [r7, #12]
 801b448:	f023 0310 	bic.w	r3, r3, #16
 801b44c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 801b450:	687b      	ldr	r3, [r7, #4]
 801b452:	681b      	ldr	r3, [r3, #0]
 801b454:	461a      	mov	r2, r3
 801b456:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b45a:	61fb      	str	r3, [r7, #28]
 801b45c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801b45e:	69b9      	ldr	r1, [r7, #24]
 801b460:	69fa      	ldr	r2, [r7, #28]
 801b462:	e841 2300 	strex	r3, r2, [r1]
 801b466:	617b      	str	r3, [r7, #20]
   return(result);
 801b468:	697b      	ldr	r3, [r7, #20]
 801b46a:	2b00      	cmp	r3, #0
 801b46c:	d1e4      	bne.n	801b438 <HAL_UART_IRQHandler+0x508>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	2202      	movs	r2, #2
 801b472:	665a      	str	r2, [r3, #100]	; 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 801b474:	687b      	ldr	r3, [r7, #4]
 801b476:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801b47a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 801b47e:	4611      	mov	r1, r2
 801b480:	6878      	ldr	r0, [r7, #4]
 801b482:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 801b484:	e041      	b.n	801b50a <HAL_UART_IRQHandler+0x5da>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801b486:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b48a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 801b48e:	2b00      	cmp	r3, #0
 801b490:	d010      	beq.n	801b4b4 <HAL_UART_IRQHandler+0x584>
 801b492:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 801b496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801b49a:	2b00      	cmp	r3, #0
 801b49c:	d00a      	beq.n	801b4b4 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801b49e:	687b      	ldr	r3, [r7, #4]
 801b4a0:	681b      	ldr	r3, [r3, #0]
 801b4a2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 801b4a6:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 801b4a8:	687b      	ldr	r3, [r7, #4]
 801b4aa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 801b4ae:	6878      	ldr	r0, [r7, #4]
 801b4b0:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801b4b2:	e02d      	b.n	801b510 <HAL_UART_IRQHandler+0x5e0>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801b4b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4bc:	2b00      	cmp	r3, #0
 801b4be:	d00e      	beq.n	801b4de <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801b4c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b4c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801b4c8:	2b00      	cmp	r3, #0
 801b4ca:	d008      	beq.n	801b4de <HAL_UART_IRQHandler+0x5ae>
  {
    if (huart->TxISR != NULL)
 801b4cc:	687b      	ldr	r3, [r7, #4]
 801b4ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4d0:	2b00      	cmp	r3, #0
 801b4d2:	d01c      	beq.n	801b50e <HAL_UART_IRQHandler+0x5de>
    {
      huart->TxISR(huart);
 801b4d4:	687b      	ldr	r3, [r7, #4]
 801b4d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b4d8:	6878      	ldr	r0, [r7, #4]
 801b4da:	4798      	blx	r3
    }
    return;
 801b4dc:	e017      	b.n	801b50e <HAL_UART_IRQHandler+0x5de>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801b4de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 801b4e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4e6:	2b00      	cmp	r3, #0
 801b4e8:	d012      	beq.n	801b510 <HAL_UART_IRQHandler+0x5e0>
 801b4ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b4ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801b4f2:	2b00      	cmp	r3, #0
 801b4f4:	d00c      	beq.n	801b510 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 801b4f6:	6878      	ldr	r0, [r7, #4]
 801b4f8:	f000 fe0a 	bl	801c110 <UART_EndTransmit_IT>
    return;
 801b4fc:	e008      	b.n	801b510 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b4fe:	bf00      	nop
 801b500:	e006      	b.n	801b510 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b502:	bf00      	nop
 801b504:	e004      	b.n	801b510 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b506:	bf00      	nop
 801b508:	e002      	b.n	801b510 <HAL_UART_IRQHandler+0x5e0>
      return;
 801b50a:	bf00      	nop
 801b50c:	e000      	b.n	801b510 <HAL_UART_IRQHandler+0x5e0>
    return;
 801b50e:	bf00      	nop
  }

}
 801b510:	37e8      	adds	r7, #232	; 0xe8
 801b512:	46bd      	mov	sp, r7
 801b514:	bd80      	pop	{r7, pc}
 801b516:	bf00      	nop

0801b518 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 801b518:	b480      	push	{r7}
 801b51a:	b083      	sub	sp, #12
 801b51c:	af00      	add	r7, sp, #0
 801b51e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 801b520:	bf00      	nop
 801b522:	370c      	adds	r7, #12
 801b524:	46bd      	mov	sp, r7
 801b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b52a:	4770      	bx	lr

0801b52c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b52c:	b480      	push	{r7}
 801b52e:	b083      	sub	sp, #12
 801b530:	af00      	add	r7, sp, #0
 801b532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 801b534:	bf00      	nop
 801b536:	370c      	adds	r7, #12
 801b538:	46bd      	mov	sp, r7
 801b53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b53e:	4770      	bx	lr

0801b540 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801b540:	b480      	push	{r7}
 801b542:	b083      	sub	sp, #12
 801b544:	af00      	add	r7, sp, #0
 801b546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 801b548:	bf00      	nop
 801b54a:	370c      	adds	r7, #12
 801b54c:	46bd      	mov	sp, r7
 801b54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b552:	4770      	bx	lr

0801b554 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 801b554:	b480      	push	{r7}
 801b556:	b083      	sub	sp, #12
 801b558:	af00      	add	r7, sp, #0
 801b55a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 801b55c:	bf00      	nop
 801b55e:	370c      	adds	r7, #12
 801b560:	46bd      	mov	sp, r7
 801b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b566:	4770      	bx	lr

0801b568 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 801b568:	b480      	push	{r7}
 801b56a:	b083      	sub	sp, #12
 801b56c:	af00      	add	r7, sp, #0
 801b56e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 801b570:	bf00      	nop
 801b572:	370c      	adds	r7, #12
 801b574:	46bd      	mov	sp, r7
 801b576:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b57a:	4770      	bx	lr

0801b57c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 801b57c:	b480      	push	{r7}
 801b57e:	b083      	sub	sp, #12
 801b580:	af00      	add	r7, sp, #0
 801b582:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 801b584:	bf00      	nop
 801b586:	370c      	adds	r7, #12
 801b588:	46bd      	mov	sp, r7
 801b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58e:	4770      	bx	lr

0801b590 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801b590:	b480      	push	{r7}
 801b592:	b083      	sub	sp, #12
 801b594:	af00      	add	r7, sp, #0
 801b596:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 801b598:	bf00      	nop
 801b59a:	370c      	adds	r7, #12
 801b59c:	46bd      	mov	sp, r7
 801b59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5a2:	4770      	bx	lr

0801b5a4 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801b5a4:	b480      	push	{r7}
 801b5a6:	b083      	sub	sp, #12
 801b5a8:	af00      	add	r7, sp, #0
 801b5aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 801b5ac:	bf00      	nop
 801b5ae:	370c      	adds	r7, #12
 801b5b0:	46bd      	mov	sp, r7
 801b5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5b6:	4770      	bx	lr

0801b5b8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801b5b8:	b480      	push	{r7}
 801b5ba:	b083      	sub	sp, #12
 801b5bc:	af00      	add	r7, sp, #0
 801b5be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801b5c0:	bf00      	nop
 801b5c2:	370c      	adds	r7, #12
 801b5c4:	46bd      	mov	sp, r7
 801b5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ca:	4770      	bx	lr

0801b5cc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 801b5cc:	b480      	push	{r7}
 801b5ce:	b083      	sub	sp, #12
 801b5d0:	af00      	add	r7, sp, #0
 801b5d2:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801b5d4:	687b      	ldr	r3, [r7, #4]
 801b5d6:	4a16      	ldr	r2, [pc, #88]	; (801b630 <UART_InitCallbacksToDefault+0x64>)
 801b5d8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 801b5dc:	687b      	ldr	r3, [r7, #4]
 801b5de:	4a15      	ldr	r2, [pc, #84]	; (801b634 <UART_InitCallbacksToDefault+0x68>)
 801b5e0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801b5e4:	687b      	ldr	r3, [r7, #4]
 801b5e6:	4a14      	ldr	r2, [pc, #80]	; (801b638 <UART_InitCallbacksToDefault+0x6c>)
 801b5e8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	4a13      	ldr	r2, [pc, #76]	; (801b63c <UART_InitCallbacksToDefault+0x70>)
 801b5f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	4a12      	ldr	r2, [pc, #72]	; (801b640 <UART_InitCallbacksToDefault+0x74>)
 801b5f8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 801b5fc:	687b      	ldr	r3, [r7, #4]
 801b5fe:	4a11      	ldr	r2, [pc, #68]	; (801b644 <UART_InitCallbacksToDefault+0x78>)
 801b600:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801b604:	687b      	ldr	r3, [r7, #4]
 801b606:	4a10      	ldr	r2, [pc, #64]	; (801b648 <UART_InitCallbacksToDefault+0x7c>)
 801b608:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 801b60c:	687b      	ldr	r3, [r7, #4]
 801b60e:	4a0f      	ldr	r2, [pc, #60]	; (801b64c <UART_InitCallbacksToDefault+0x80>)
 801b610:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	4a0e      	ldr	r2, [pc, #56]	; (801b650 <UART_InitCallbacksToDefault+0x84>)
 801b618:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 801b61c:	687b      	ldr	r3, [r7, #4]
 801b61e:	4a0d      	ldr	r2, [pc, #52]	; (801b654 <UART_InitCallbacksToDefault+0x88>)
 801b620:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac

}
 801b624:	bf00      	nop
 801b626:	370c      	adds	r7, #12
 801b628:	46bd      	mov	sp, r7
 801b62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b62e:	4770      	bx	lr
 801b630:	0801b52d 	.word	0x0801b52d
 801b634:	0801b519 	.word	0x0801b519
 801b638:	0801b555 	.word	0x0801b555
 801b63c:	0801b541 	.word	0x0801b541
 801b640:	0801b569 	.word	0x0801b569
 801b644:	0801b57d 	.word	0x0801b57d
 801b648:	0801b591 	.word	0x0801b591
 801b64c:	0801b5a5 	.word	0x0801b5a5
 801b650:	0801b5b9 	.word	0x0801b5b9
 801b654:	080149f5 	.word	0x080149f5

0801b658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801b658:	b580      	push	{r7, lr}
 801b65a:	b088      	sub	sp, #32
 801b65c:	af00      	add	r7, sp, #0
 801b65e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801b660:	2300      	movs	r3, #0
 801b662:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801b664:	687b      	ldr	r3, [r7, #4]
 801b666:	689a      	ldr	r2, [r3, #8]
 801b668:	687b      	ldr	r3, [r7, #4]
 801b66a:	691b      	ldr	r3, [r3, #16]
 801b66c:	431a      	orrs	r2, r3
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	695b      	ldr	r3, [r3, #20]
 801b672:	431a      	orrs	r2, r3
 801b674:	687b      	ldr	r3, [r7, #4]
 801b676:	69db      	ldr	r3, [r3, #28]
 801b678:	4313      	orrs	r3, r2
 801b67a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801b67c:	687b      	ldr	r3, [r7, #4]
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	681a      	ldr	r2, [r3, #0]
 801b682:	4ba6      	ldr	r3, [pc, #664]	; (801b91c <UART_SetConfig+0x2c4>)
 801b684:	4013      	ands	r3, r2
 801b686:	687a      	ldr	r2, [r7, #4]
 801b688:	6812      	ldr	r2, [r2, #0]
 801b68a:	6979      	ldr	r1, [r7, #20]
 801b68c:	430b      	orrs	r3, r1
 801b68e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	681b      	ldr	r3, [r3, #0]
 801b694:	685b      	ldr	r3, [r3, #4]
 801b696:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 801b69a:	687b      	ldr	r3, [r7, #4]
 801b69c:	68da      	ldr	r2, [r3, #12]
 801b69e:	687b      	ldr	r3, [r7, #4]
 801b6a0:	681b      	ldr	r3, [r3, #0]
 801b6a2:	430a      	orrs	r2, r1
 801b6a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801b6a6:	687b      	ldr	r3, [r7, #4]
 801b6a8:	699b      	ldr	r3, [r3, #24]
 801b6aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 801b6ac:	687b      	ldr	r3, [r7, #4]
 801b6ae:	6a1b      	ldr	r3, [r3, #32]
 801b6b0:	697a      	ldr	r2, [r7, #20]
 801b6b2:	4313      	orrs	r3, r2
 801b6b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801b6b6:	687b      	ldr	r3, [r7, #4]
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	689b      	ldr	r3, [r3, #8]
 801b6bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 801b6c0:	687b      	ldr	r3, [r7, #4]
 801b6c2:	681b      	ldr	r3, [r3, #0]
 801b6c4:	697a      	ldr	r2, [r7, #20]
 801b6c6:	430a      	orrs	r2, r1
 801b6c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801b6ca:	687b      	ldr	r3, [r7, #4]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	4a94      	ldr	r2, [pc, #592]	; (801b920 <UART_SetConfig+0x2c8>)
 801b6d0:	4293      	cmp	r3, r2
 801b6d2:	d120      	bne.n	801b716 <UART_SetConfig+0xbe>
 801b6d4:	4b93      	ldr	r3, [pc, #588]	; (801b924 <UART_SetConfig+0x2cc>)
 801b6d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b6da:	f003 0303 	and.w	r3, r3, #3
 801b6de:	2b03      	cmp	r3, #3
 801b6e0:	d816      	bhi.n	801b710 <UART_SetConfig+0xb8>
 801b6e2:	a201      	add	r2, pc, #4	; (adr r2, 801b6e8 <UART_SetConfig+0x90>)
 801b6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b6e8:	0801b6f9 	.word	0x0801b6f9
 801b6ec:	0801b705 	.word	0x0801b705
 801b6f0:	0801b6ff 	.word	0x0801b6ff
 801b6f4:	0801b70b 	.word	0x0801b70b
 801b6f8:	2301      	movs	r3, #1
 801b6fa:	77fb      	strb	r3, [r7, #31]
 801b6fc:	e150      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b6fe:	2302      	movs	r3, #2
 801b700:	77fb      	strb	r3, [r7, #31]
 801b702:	e14d      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b704:	2304      	movs	r3, #4
 801b706:	77fb      	strb	r3, [r7, #31]
 801b708:	e14a      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b70a:	2308      	movs	r3, #8
 801b70c:	77fb      	strb	r3, [r7, #31]
 801b70e:	e147      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b710:	2310      	movs	r3, #16
 801b712:	77fb      	strb	r3, [r7, #31]
 801b714:	e144      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b716:	687b      	ldr	r3, [r7, #4]
 801b718:	681b      	ldr	r3, [r3, #0]
 801b71a:	4a83      	ldr	r2, [pc, #524]	; (801b928 <UART_SetConfig+0x2d0>)
 801b71c:	4293      	cmp	r3, r2
 801b71e:	d132      	bne.n	801b786 <UART_SetConfig+0x12e>
 801b720:	4b80      	ldr	r3, [pc, #512]	; (801b924 <UART_SetConfig+0x2cc>)
 801b722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b726:	f003 030c 	and.w	r3, r3, #12
 801b72a:	2b0c      	cmp	r3, #12
 801b72c:	d828      	bhi.n	801b780 <UART_SetConfig+0x128>
 801b72e:	a201      	add	r2, pc, #4	; (adr r2, 801b734 <UART_SetConfig+0xdc>)
 801b730:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b734:	0801b769 	.word	0x0801b769
 801b738:	0801b781 	.word	0x0801b781
 801b73c:	0801b781 	.word	0x0801b781
 801b740:	0801b781 	.word	0x0801b781
 801b744:	0801b775 	.word	0x0801b775
 801b748:	0801b781 	.word	0x0801b781
 801b74c:	0801b781 	.word	0x0801b781
 801b750:	0801b781 	.word	0x0801b781
 801b754:	0801b76f 	.word	0x0801b76f
 801b758:	0801b781 	.word	0x0801b781
 801b75c:	0801b781 	.word	0x0801b781
 801b760:	0801b781 	.word	0x0801b781
 801b764:	0801b77b 	.word	0x0801b77b
 801b768:	2300      	movs	r3, #0
 801b76a:	77fb      	strb	r3, [r7, #31]
 801b76c:	e118      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b76e:	2302      	movs	r3, #2
 801b770:	77fb      	strb	r3, [r7, #31]
 801b772:	e115      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b774:	2304      	movs	r3, #4
 801b776:	77fb      	strb	r3, [r7, #31]
 801b778:	e112      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b77a:	2308      	movs	r3, #8
 801b77c:	77fb      	strb	r3, [r7, #31]
 801b77e:	e10f      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b780:	2310      	movs	r3, #16
 801b782:	77fb      	strb	r3, [r7, #31]
 801b784:	e10c      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b786:	687b      	ldr	r3, [r7, #4]
 801b788:	681b      	ldr	r3, [r3, #0]
 801b78a:	4a68      	ldr	r2, [pc, #416]	; (801b92c <UART_SetConfig+0x2d4>)
 801b78c:	4293      	cmp	r3, r2
 801b78e:	d120      	bne.n	801b7d2 <UART_SetConfig+0x17a>
 801b790:	4b64      	ldr	r3, [pc, #400]	; (801b924 <UART_SetConfig+0x2cc>)
 801b792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b796:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801b79a:	2b30      	cmp	r3, #48	; 0x30
 801b79c:	d013      	beq.n	801b7c6 <UART_SetConfig+0x16e>
 801b79e:	2b30      	cmp	r3, #48	; 0x30
 801b7a0:	d814      	bhi.n	801b7cc <UART_SetConfig+0x174>
 801b7a2:	2b20      	cmp	r3, #32
 801b7a4:	d009      	beq.n	801b7ba <UART_SetConfig+0x162>
 801b7a6:	2b20      	cmp	r3, #32
 801b7a8:	d810      	bhi.n	801b7cc <UART_SetConfig+0x174>
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d002      	beq.n	801b7b4 <UART_SetConfig+0x15c>
 801b7ae:	2b10      	cmp	r3, #16
 801b7b0:	d006      	beq.n	801b7c0 <UART_SetConfig+0x168>
 801b7b2:	e00b      	b.n	801b7cc <UART_SetConfig+0x174>
 801b7b4:	2300      	movs	r3, #0
 801b7b6:	77fb      	strb	r3, [r7, #31]
 801b7b8:	e0f2      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b7ba:	2302      	movs	r3, #2
 801b7bc:	77fb      	strb	r3, [r7, #31]
 801b7be:	e0ef      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b7c0:	2304      	movs	r3, #4
 801b7c2:	77fb      	strb	r3, [r7, #31]
 801b7c4:	e0ec      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b7c6:	2308      	movs	r3, #8
 801b7c8:	77fb      	strb	r3, [r7, #31]
 801b7ca:	e0e9      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b7cc:	2310      	movs	r3, #16
 801b7ce:	77fb      	strb	r3, [r7, #31]
 801b7d0:	e0e6      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b7d2:	687b      	ldr	r3, [r7, #4]
 801b7d4:	681b      	ldr	r3, [r3, #0]
 801b7d6:	4a56      	ldr	r2, [pc, #344]	; (801b930 <UART_SetConfig+0x2d8>)
 801b7d8:	4293      	cmp	r3, r2
 801b7da:	d120      	bne.n	801b81e <UART_SetConfig+0x1c6>
 801b7dc:	4b51      	ldr	r3, [pc, #324]	; (801b924 <UART_SetConfig+0x2cc>)
 801b7de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801b7e6:	2bc0      	cmp	r3, #192	; 0xc0
 801b7e8:	d013      	beq.n	801b812 <UART_SetConfig+0x1ba>
 801b7ea:	2bc0      	cmp	r3, #192	; 0xc0
 801b7ec:	d814      	bhi.n	801b818 <UART_SetConfig+0x1c0>
 801b7ee:	2b80      	cmp	r3, #128	; 0x80
 801b7f0:	d009      	beq.n	801b806 <UART_SetConfig+0x1ae>
 801b7f2:	2b80      	cmp	r3, #128	; 0x80
 801b7f4:	d810      	bhi.n	801b818 <UART_SetConfig+0x1c0>
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d002      	beq.n	801b800 <UART_SetConfig+0x1a8>
 801b7fa:	2b40      	cmp	r3, #64	; 0x40
 801b7fc:	d006      	beq.n	801b80c <UART_SetConfig+0x1b4>
 801b7fe:	e00b      	b.n	801b818 <UART_SetConfig+0x1c0>
 801b800:	2300      	movs	r3, #0
 801b802:	77fb      	strb	r3, [r7, #31]
 801b804:	e0cc      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b806:	2302      	movs	r3, #2
 801b808:	77fb      	strb	r3, [r7, #31]
 801b80a:	e0c9      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b80c:	2304      	movs	r3, #4
 801b80e:	77fb      	strb	r3, [r7, #31]
 801b810:	e0c6      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b812:	2308      	movs	r3, #8
 801b814:	77fb      	strb	r3, [r7, #31]
 801b816:	e0c3      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b818:	2310      	movs	r3, #16
 801b81a:	77fb      	strb	r3, [r7, #31]
 801b81c:	e0c0      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b81e:	687b      	ldr	r3, [r7, #4]
 801b820:	681b      	ldr	r3, [r3, #0]
 801b822:	4a44      	ldr	r2, [pc, #272]	; (801b934 <UART_SetConfig+0x2dc>)
 801b824:	4293      	cmp	r3, r2
 801b826:	d125      	bne.n	801b874 <UART_SetConfig+0x21c>
 801b828:	4b3e      	ldr	r3, [pc, #248]	; (801b924 <UART_SetConfig+0x2cc>)
 801b82a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b82e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801b832:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b836:	d017      	beq.n	801b868 <UART_SetConfig+0x210>
 801b838:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801b83c:	d817      	bhi.n	801b86e <UART_SetConfig+0x216>
 801b83e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b842:	d00b      	beq.n	801b85c <UART_SetConfig+0x204>
 801b844:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b848:	d811      	bhi.n	801b86e <UART_SetConfig+0x216>
 801b84a:	2b00      	cmp	r3, #0
 801b84c:	d003      	beq.n	801b856 <UART_SetConfig+0x1fe>
 801b84e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801b852:	d006      	beq.n	801b862 <UART_SetConfig+0x20a>
 801b854:	e00b      	b.n	801b86e <UART_SetConfig+0x216>
 801b856:	2300      	movs	r3, #0
 801b858:	77fb      	strb	r3, [r7, #31]
 801b85a:	e0a1      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b85c:	2302      	movs	r3, #2
 801b85e:	77fb      	strb	r3, [r7, #31]
 801b860:	e09e      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b862:	2304      	movs	r3, #4
 801b864:	77fb      	strb	r3, [r7, #31]
 801b866:	e09b      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b868:	2308      	movs	r3, #8
 801b86a:	77fb      	strb	r3, [r7, #31]
 801b86c:	e098      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b86e:	2310      	movs	r3, #16
 801b870:	77fb      	strb	r3, [r7, #31]
 801b872:	e095      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b874:	687b      	ldr	r3, [r7, #4]
 801b876:	681b      	ldr	r3, [r3, #0]
 801b878:	4a2f      	ldr	r2, [pc, #188]	; (801b938 <UART_SetConfig+0x2e0>)
 801b87a:	4293      	cmp	r3, r2
 801b87c:	d125      	bne.n	801b8ca <UART_SetConfig+0x272>
 801b87e:	4b29      	ldr	r3, [pc, #164]	; (801b924 <UART_SetConfig+0x2cc>)
 801b880:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b884:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 801b888:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801b88c:	d017      	beq.n	801b8be <UART_SetConfig+0x266>
 801b88e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801b892:	d817      	bhi.n	801b8c4 <UART_SetConfig+0x26c>
 801b894:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b898:	d00b      	beq.n	801b8b2 <UART_SetConfig+0x25a>
 801b89a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801b89e:	d811      	bhi.n	801b8c4 <UART_SetConfig+0x26c>
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d003      	beq.n	801b8ac <UART_SetConfig+0x254>
 801b8a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801b8a8:	d006      	beq.n	801b8b8 <UART_SetConfig+0x260>
 801b8aa:	e00b      	b.n	801b8c4 <UART_SetConfig+0x26c>
 801b8ac:	2301      	movs	r3, #1
 801b8ae:	77fb      	strb	r3, [r7, #31]
 801b8b0:	e076      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b8b2:	2302      	movs	r3, #2
 801b8b4:	77fb      	strb	r3, [r7, #31]
 801b8b6:	e073      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b8b8:	2304      	movs	r3, #4
 801b8ba:	77fb      	strb	r3, [r7, #31]
 801b8bc:	e070      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b8be:	2308      	movs	r3, #8
 801b8c0:	77fb      	strb	r3, [r7, #31]
 801b8c2:	e06d      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b8c4:	2310      	movs	r3, #16
 801b8c6:	77fb      	strb	r3, [r7, #31]
 801b8c8:	e06a      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b8ca:	687b      	ldr	r3, [r7, #4]
 801b8cc:	681b      	ldr	r3, [r3, #0]
 801b8ce:	4a1b      	ldr	r2, [pc, #108]	; (801b93c <UART_SetConfig+0x2e4>)
 801b8d0:	4293      	cmp	r3, r2
 801b8d2:	d138      	bne.n	801b946 <UART_SetConfig+0x2ee>
 801b8d4:	4b13      	ldr	r3, [pc, #76]	; (801b924 <UART_SetConfig+0x2cc>)
 801b8d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b8da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 801b8de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801b8e2:	d017      	beq.n	801b914 <UART_SetConfig+0x2bc>
 801b8e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 801b8e8:	d82a      	bhi.n	801b940 <UART_SetConfig+0x2e8>
 801b8ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b8ee:	d00b      	beq.n	801b908 <UART_SetConfig+0x2b0>
 801b8f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801b8f4:	d824      	bhi.n	801b940 <UART_SetConfig+0x2e8>
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	d003      	beq.n	801b902 <UART_SetConfig+0x2aa>
 801b8fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801b8fe:	d006      	beq.n	801b90e <UART_SetConfig+0x2b6>
 801b900:	e01e      	b.n	801b940 <UART_SetConfig+0x2e8>
 801b902:	2300      	movs	r3, #0
 801b904:	77fb      	strb	r3, [r7, #31]
 801b906:	e04b      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b908:	2302      	movs	r3, #2
 801b90a:	77fb      	strb	r3, [r7, #31]
 801b90c:	e048      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b90e:	2304      	movs	r3, #4
 801b910:	77fb      	strb	r3, [r7, #31]
 801b912:	e045      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b914:	2308      	movs	r3, #8
 801b916:	77fb      	strb	r3, [r7, #31]
 801b918:	e042      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b91a:	bf00      	nop
 801b91c:	efff69f3 	.word	0xefff69f3
 801b920:	40011000 	.word	0x40011000
 801b924:	40023800 	.word	0x40023800
 801b928:	40004400 	.word	0x40004400
 801b92c:	40004800 	.word	0x40004800
 801b930:	40004c00 	.word	0x40004c00
 801b934:	40005000 	.word	0x40005000
 801b938:	40011400 	.word	0x40011400
 801b93c:	40007800 	.word	0x40007800
 801b940:	2310      	movs	r3, #16
 801b942:	77fb      	strb	r3, [r7, #31]
 801b944:	e02c      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b946:	687b      	ldr	r3, [r7, #4]
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	4a72      	ldr	r2, [pc, #456]	; (801bb14 <UART_SetConfig+0x4bc>)
 801b94c:	4293      	cmp	r3, r2
 801b94e:	d125      	bne.n	801b99c <UART_SetConfig+0x344>
 801b950:	4b71      	ldr	r3, [pc, #452]	; (801bb18 <UART_SetConfig+0x4c0>)
 801b952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b956:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801b95a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801b95e:	d017      	beq.n	801b990 <UART_SetConfig+0x338>
 801b960:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801b964:	d817      	bhi.n	801b996 <UART_SetConfig+0x33e>
 801b966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b96a:	d00b      	beq.n	801b984 <UART_SetConfig+0x32c>
 801b96c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b970:	d811      	bhi.n	801b996 <UART_SetConfig+0x33e>
 801b972:	2b00      	cmp	r3, #0
 801b974:	d003      	beq.n	801b97e <UART_SetConfig+0x326>
 801b976:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801b97a:	d006      	beq.n	801b98a <UART_SetConfig+0x332>
 801b97c:	e00b      	b.n	801b996 <UART_SetConfig+0x33e>
 801b97e:	2300      	movs	r3, #0
 801b980:	77fb      	strb	r3, [r7, #31]
 801b982:	e00d      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b984:	2302      	movs	r3, #2
 801b986:	77fb      	strb	r3, [r7, #31]
 801b988:	e00a      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b98a:	2304      	movs	r3, #4
 801b98c:	77fb      	strb	r3, [r7, #31]
 801b98e:	e007      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b990:	2308      	movs	r3, #8
 801b992:	77fb      	strb	r3, [r7, #31]
 801b994:	e004      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b996:	2310      	movs	r3, #16
 801b998:	77fb      	strb	r3, [r7, #31]
 801b99a:	e001      	b.n	801b9a0 <UART_SetConfig+0x348>
 801b99c:	2310      	movs	r3, #16
 801b99e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801b9a0:	687b      	ldr	r3, [r7, #4]
 801b9a2:	69db      	ldr	r3, [r3, #28]
 801b9a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801b9a8:	d15b      	bne.n	801ba62 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801b9aa:	7ffb      	ldrb	r3, [r7, #31]
 801b9ac:	2b08      	cmp	r3, #8
 801b9ae:	d828      	bhi.n	801ba02 <UART_SetConfig+0x3aa>
 801b9b0:	a201      	add	r2, pc, #4	; (adr r2, 801b9b8 <UART_SetConfig+0x360>)
 801b9b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b9b6:	bf00      	nop
 801b9b8:	0801b9dd 	.word	0x0801b9dd
 801b9bc:	0801b9e5 	.word	0x0801b9e5
 801b9c0:	0801b9ed 	.word	0x0801b9ed
 801b9c4:	0801ba03 	.word	0x0801ba03
 801b9c8:	0801b9f3 	.word	0x0801b9f3
 801b9cc:	0801ba03 	.word	0x0801ba03
 801b9d0:	0801ba03 	.word	0x0801ba03
 801b9d4:	0801ba03 	.word	0x0801ba03
 801b9d8:	0801b9fb 	.word	0x0801b9fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801b9dc:	f7fd fc3e 	bl	801925c <HAL_RCC_GetPCLK1Freq>
 801b9e0:	61b8      	str	r0, [r7, #24]
        break;
 801b9e2:	e013      	b.n	801ba0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801b9e4:	f7fd fc4e 	bl	8019284 <HAL_RCC_GetPCLK2Freq>
 801b9e8:	61b8      	str	r0, [r7, #24]
        break;
 801b9ea:	e00f      	b.n	801ba0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801b9ec:	4b4b      	ldr	r3, [pc, #300]	; (801bb1c <UART_SetConfig+0x4c4>)
 801b9ee:	61bb      	str	r3, [r7, #24]
        break;
 801b9f0:	e00c      	b.n	801ba0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801b9f2:	f7fd fb61 	bl	80190b8 <HAL_RCC_GetSysClockFreq>
 801b9f6:	61b8      	str	r0, [r7, #24]
        break;
 801b9f8:	e008      	b.n	801ba0c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801b9fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801b9fe:	61bb      	str	r3, [r7, #24]
        break;
 801ba00:	e004      	b.n	801ba0c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 801ba02:	2300      	movs	r3, #0
 801ba04:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801ba06:	2301      	movs	r3, #1
 801ba08:	77bb      	strb	r3, [r7, #30]
        break;
 801ba0a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801ba0c:	69bb      	ldr	r3, [r7, #24]
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d074      	beq.n	801bafc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 801ba12:	69bb      	ldr	r3, [r7, #24]
 801ba14:	005a      	lsls	r2, r3, #1
 801ba16:	687b      	ldr	r3, [r7, #4]
 801ba18:	685b      	ldr	r3, [r3, #4]
 801ba1a:	085b      	lsrs	r3, r3, #1
 801ba1c:	441a      	add	r2, r3
 801ba1e:	687b      	ldr	r3, [r7, #4]
 801ba20:	685b      	ldr	r3, [r3, #4]
 801ba22:	fbb2 f3f3 	udiv	r3, r2, r3
 801ba26:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801ba28:	693b      	ldr	r3, [r7, #16]
 801ba2a:	2b0f      	cmp	r3, #15
 801ba2c:	d916      	bls.n	801ba5c <UART_SetConfig+0x404>
 801ba2e:	693b      	ldr	r3, [r7, #16]
 801ba30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801ba34:	d212      	bcs.n	801ba5c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801ba36:	693b      	ldr	r3, [r7, #16]
 801ba38:	b29b      	uxth	r3, r3
 801ba3a:	f023 030f 	bic.w	r3, r3, #15
 801ba3e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801ba40:	693b      	ldr	r3, [r7, #16]
 801ba42:	085b      	lsrs	r3, r3, #1
 801ba44:	b29b      	uxth	r3, r3
 801ba46:	f003 0307 	and.w	r3, r3, #7
 801ba4a:	b29a      	uxth	r2, r3
 801ba4c:	89fb      	ldrh	r3, [r7, #14]
 801ba4e:	4313      	orrs	r3, r2
 801ba50:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 801ba52:	687b      	ldr	r3, [r7, #4]
 801ba54:	681b      	ldr	r3, [r3, #0]
 801ba56:	89fa      	ldrh	r2, [r7, #14]
 801ba58:	60da      	str	r2, [r3, #12]
 801ba5a:	e04f      	b.n	801bafc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801ba5c:	2301      	movs	r3, #1
 801ba5e:	77bb      	strb	r3, [r7, #30]
 801ba60:	e04c      	b.n	801bafc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 801ba62:	7ffb      	ldrb	r3, [r7, #31]
 801ba64:	2b08      	cmp	r3, #8
 801ba66:	d828      	bhi.n	801baba <UART_SetConfig+0x462>
 801ba68:	a201      	add	r2, pc, #4	; (adr r2, 801ba70 <UART_SetConfig+0x418>)
 801ba6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ba6e:	bf00      	nop
 801ba70:	0801ba95 	.word	0x0801ba95
 801ba74:	0801ba9d 	.word	0x0801ba9d
 801ba78:	0801baa5 	.word	0x0801baa5
 801ba7c:	0801babb 	.word	0x0801babb
 801ba80:	0801baab 	.word	0x0801baab
 801ba84:	0801babb 	.word	0x0801babb
 801ba88:	0801babb 	.word	0x0801babb
 801ba8c:	0801babb 	.word	0x0801babb
 801ba90:	0801bab3 	.word	0x0801bab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801ba94:	f7fd fbe2 	bl	801925c <HAL_RCC_GetPCLK1Freq>
 801ba98:	61b8      	str	r0, [r7, #24]
        break;
 801ba9a:	e013      	b.n	801bac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801ba9c:	f7fd fbf2 	bl	8019284 <HAL_RCC_GetPCLK2Freq>
 801baa0:	61b8      	str	r0, [r7, #24]
        break;
 801baa2:	e00f      	b.n	801bac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801baa4:	4b1d      	ldr	r3, [pc, #116]	; (801bb1c <UART_SetConfig+0x4c4>)
 801baa6:	61bb      	str	r3, [r7, #24]
        break;
 801baa8:	e00c      	b.n	801bac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801baaa:	f7fd fb05 	bl	80190b8 <HAL_RCC_GetSysClockFreq>
 801baae:	61b8      	str	r0, [r7, #24]
        break;
 801bab0:	e008      	b.n	801bac4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801bab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801bab6:	61bb      	str	r3, [r7, #24]
        break;
 801bab8:	e004      	b.n	801bac4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801baba:	2300      	movs	r3, #0
 801babc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801babe:	2301      	movs	r3, #1
 801bac0:	77bb      	strb	r3, [r7, #30]
        break;
 801bac2:	bf00      	nop
    }

    if (pclk != 0U)
 801bac4:	69bb      	ldr	r3, [r7, #24]
 801bac6:	2b00      	cmp	r3, #0
 801bac8:	d018      	beq.n	801bafc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	685b      	ldr	r3, [r3, #4]
 801bace:	085a      	lsrs	r2, r3, #1
 801bad0:	69bb      	ldr	r3, [r7, #24]
 801bad2:	441a      	add	r2, r3
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	685b      	ldr	r3, [r3, #4]
 801bad8:	fbb2 f3f3 	udiv	r3, r2, r3
 801badc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801bade:	693b      	ldr	r3, [r7, #16]
 801bae0:	2b0f      	cmp	r3, #15
 801bae2:	d909      	bls.n	801baf8 <UART_SetConfig+0x4a0>
 801bae4:	693b      	ldr	r3, [r7, #16]
 801bae6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801baea:	d205      	bcs.n	801baf8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801baec:	693b      	ldr	r3, [r7, #16]
 801baee:	b29a      	uxth	r2, r3
 801baf0:	687b      	ldr	r3, [r7, #4]
 801baf2:	681b      	ldr	r3, [r3, #0]
 801baf4:	60da      	str	r2, [r3, #12]
 801baf6:	e001      	b.n	801bafc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801baf8:	2301      	movs	r3, #1
 801bafa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801bafc:	687b      	ldr	r3, [r7, #4]
 801bafe:	2200      	movs	r2, #0
 801bb00:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 801bb02:	687b      	ldr	r3, [r7, #4]
 801bb04:	2200      	movs	r2, #0
 801bb06:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 801bb08:	7fbb      	ldrb	r3, [r7, #30]
}
 801bb0a:	4618      	mov	r0, r3
 801bb0c:	3720      	adds	r7, #32
 801bb0e:	46bd      	mov	sp, r7
 801bb10:	bd80      	pop	{r7, pc}
 801bb12:	bf00      	nop
 801bb14:	40007c00 	.word	0x40007c00
 801bb18:	40023800 	.word	0x40023800
 801bb1c:	00f42400 	.word	0x00f42400

0801bb20 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801bb20:	b480      	push	{r7}
 801bb22:	b083      	sub	sp, #12
 801bb24:	af00      	add	r7, sp, #0
 801bb26:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801bb28:	687b      	ldr	r3, [r7, #4]
 801bb2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb2c:	f003 0301 	and.w	r3, r3, #1
 801bb30:	2b00      	cmp	r3, #0
 801bb32:	d00a      	beq.n	801bb4a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801bb34:	687b      	ldr	r3, [r7, #4]
 801bb36:	681b      	ldr	r3, [r3, #0]
 801bb38:	685b      	ldr	r3, [r3, #4]
 801bb3a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801bb3e:	687b      	ldr	r3, [r7, #4]
 801bb40:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801bb42:	687b      	ldr	r3, [r7, #4]
 801bb44:	681b      	ldr	r3, [r3, #0]
 801bb46:	430a      	orrs	r2, r1
 801bb48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801bb4a:	687b      	ldr	r3, [r7, #4]
 801bb4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb4e:	f003 0302 	and.w	r3, r3, #2
 801bb52:	2b00      	cmp	r3, #0
 801bb54:	d00a      	beq.n	801bb6c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801bb56:	687b      	ldr	r3, [r7, #4]
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	685b      	ldr	r3, [r3, #4]
 801bb5c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801bb60:	687b      	ldr	r3, [r7, #4]
 801bb62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801bb64:	687b      	ldr	r3, [r7, #4]
 801bb66:	681b      	ldr	r3, [r3, #0]
 801bb68:	430a      	orrs	r2, r1
 801bb6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb70:	f003 0304 	and.w	r3, r3, #4
 801bb74:	2b00      	cmp	r3, #0
 801bb76:	d00a      	beq.n	801bb8e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801bb78:	687b      	ldr	r3, [r7, #4]
 801bb7a:	681b      	ldr	r3, [r3, #0]
 801bb7c:	685b      	ldr	r3, [r3, #4]
 801bb7e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801bb82:	687b      	ldr	r3, [r7, #4]
 801bb84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801bb86:	687b      	ldr	r3, [r7, #4]
 801bb88:	681b      	ldr	r3, [r3, #0]
 801bb8a:	430a      	orrs	r2, r1
 801bb8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bb92:	f003 0308 	and.w	r3, r3, #8
 801bb96:	2b00      	cmp	r3, #0
 801bb98:	d00a      	beq.n	801bbb0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	685b      	ldr	r3, [r3, #4]
 801bba0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 801bba4:	687b      	ldr	r3, [r7, #4]
 801bba6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	681b      	ldr	r3, [r3, #0]
 801bbac:	430a      	orrs	r2, r1
 801bbae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbb4:	f003 0310 	and.w	r3, r3, #16
 801bbb8:	2b00      	cmp	r3, #0
 801bbba:	d00a      	beq.n	801bbd2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801bbbc:	687b      	ldr	r3, [r7, #4]
 801bbbe:	681b      	ldr	r3, [r3, #0]
 801bbc0:	689b      	ldr	r3, [r3, #8]
 801bbc2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 801bbc6:	687b      	ldr	r3, [r7, #4]
 801bbc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801bbca:	687b      	ldr	r3, [r7, #4]
 801bbcc:	681b      	ldr	r3, [r3, #0]
 801bbce:	430a      	orrs	r2, r1
 801bbd0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbd6:	f003 0320 	and.w	r3, r3, #32
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d00a      	beq.n	801bbf4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	689b      	ldr	r3, [r3, #8]
 801bbe4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801bbec:	687b      	ldr	r3, [r7, #4]
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	430a      	orrs	r2, r1
 801bbf2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801bbf4:	687b      	ldr	r3, [r7, #4]
 801bbf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bbf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801bbfc:	2b00      	cmp	r3, #0
 801bbfe:	d01a      	beq.n	801bc36 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	681b      	ldr	r3, [r3, #0]
 801bc04:	685b      	ldr	r3, [r3, #4]
 801bc06:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 801bc0a:	687b      	ldr	r3, [r7, #4]
 801bc0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801bc0e:	687b      	ldr	r3, [r7, #4]
 801bc10:	681b      	ldr	r3, [r3, #0]
 801bc12:	430a      	orrs	r2, r1
 801bc14:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801bc16:	687b      	ldr	r3, [r7, #4]
 801bc18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801bc1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801bc1e:	d10a      	bne.n	801bc36 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801bc20:	687b      	ldr	r3, [r7, #4]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	685b      	ldr	r3, [r3, #4]
 801bc26:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 801bc2a:	687b      	ldr	r3, [r7, #4]
 801bc2c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801bc2e:	687b      	ldr	r3, [r7, #4]
 801bc30:	681b      	ldr	r3, [r3, #0]
 801bc32:	430a      	orrs	r2, r1
 801bc34:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bc3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801bc3e:	2b00      	cmp	r3, #0
 801bc40:	d00a      	beq.n	801bc58 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801bc42:	687b      	ldr	r3, [r7, #4]
 801bc44:	681b      	ldr	r3, [r3, #0]
 801bc46:	685b      	ldr	r3, [r3, #4]
 801bc48:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801bc50:	687b      	ldr	r3, [r7, #4]
 801bc52:	681b      	ldr	r3, [r3, #0]
 801bc54:	430a      	orrs	r2, r1
 801bc56:	605a      	str	r2, [r3, #4]
  }
}
 801bc58:	bf00      	nop
 801bc5a:	370c      	adds	r7, #12
 801bc5c:	46bd      	mov	sp, r7
 801bc5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc62:	4770      	bx	lr

0801bc64 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801bc64:	b580      	push	{r7, lr}
 801bc66:	b086      	sub	sp, #24
 801bc68:	af02      	add	r7, sp, #8
 801bc6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bc6c:	687b      	ldr	r3, [r7, #4]
 801bc6e:	2200      	movs	r2, #0
 801bc70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801bc74:	f7f9 fb10 	bl	8015298 <HAL_GetTick>
 801bc78:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801bc7a:	687b      	ldr	r3, [r7, #4]
 801bc7c:	681b      	ldr	r3, [r3, #0]
 801bc7e:	681b      	ldr	r3, [r3, #0]
 801bc80:	f003 0308 	and.w	r3, r3, #8
 801bc84:	2b08      	cmp	r3, #8
 801bc86:	d10e      	bne.n	801bca6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bc88:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bc8c:	9300      	str	r3, [sp, #0]
 801bc8e:	68fb      	ldr	r3, [r7, #12]
 801bc90:	2200      	movs	r2, #0
 801bc92:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801bc96:	6878      	ldr	r0, [r7, #4]
 801bc98:	f000 f831 	bl	801bcfe <UART_WaitOnFlagUntilTimeout>
 801bc9c:	4603      	mov	r3, r0
 801bc9e:	2b00      	cmp	r3, #0
 801bca0:	d001      	beq.n	801bca6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bca2:	2303      	movs	r3, #3
 801bca4:	e027      	b.n	801bcf6 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801bca6:	687b      	ldr	r3, [r7, #4]
 801bca8:	681b      	ldr	r3, [r3, #0]
 801bcaa:	681b      	ldr	r3, [r3, #0]
 801bcac:	f003 0304 	and.w	r3, r3, #4
 801bcb0:	2b04      	cmp	r3, #4
 801bcb2:	d10e      	bne.n	801bcd2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801bcb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801bcb8:	9300      	str	r3, [sp, #0]
 801bcba:	68fb      	ldr	r3, [r7, #12]
 801bcbc:	2200      	movs	r2, #0
 801bcbe:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801bcc2:	6878      	ldr	r0, [r7, #4]
 801bcc4:	f000 f81b 	bl	801bcfe <UART_WaitOnFlagUntilTimeout>
 801bcc8:	4603      	mov	r3, r0
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	d001      	beq.n	801bcd2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801bcce:	2303      	movs	r3, #3
 801bcd0:	e011      	b.n	801bcf6 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801bcd2:	687b      	ldr	r3, [r7, #4]
 801bcd4:	2220      	movs	r2, #32
 801bcd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801bcd8:	687b      	ldr	r3, [r7, #4]
 801bcda:	2220      	movs	r2, #32
 801bcdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	2200      	movs	r2, #0
 801bce4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801bce6:	687b      	ldr	r3, [r7, #4]
 801bce8:	2200      	movs	r2, #0
 801bcea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 801bcec:	687b      	ldr	r3, [r7, #4]
 801bcee:	2200      	movs	r2, #0
 801bcf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 801bcf4:	2300      	movs	r3, #0
}
 801bcf6:	4618      	mov	r0, r3
 801bcf8:	3710      	adds	r7, #16
 801bcfa:	46bd      	mov	sp, r7
 801bcfc:	bd80      	pop	{r7, pc}

0801bcfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801bcfe:	b580      	push	{r7, lr}
 801bd00:	b09c      	sub	sp, #112	; 0x70
 801bd02:	af00      	add	r7, sp, #0
 801bd04:	60f8      	str	r0, [r7, #12]
 801bd06:	60b9      	str	r1, [r7, #8]
 801bd08:	603b      	str	r3, [r7, #0]
 801bd0a:	4613      	mov	r3, r2
 801bd0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801bd0e:	e0a7      	b.n	801be60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801bd10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd12:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd16:	f000 80a3 	beq.w	801be60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801bd1a:	f7f9 fabd 	bl	8015298 <HAL_GetTick>
 801bd1e:	4602      	mov	r2, r0
 801bd20:	683b      	ldr	r3, [r7, #0]
 801bd22:	1ad3      	subs	r3, r2, r3
 801bd24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801bd26:	429a      	cmp	r2, r3
 801bd28:	d302      	bcc.n	801bd30 <UART_WaitOnFlagUntilTimeout+0x32>
 801bd2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bd2c:	2b00      	cmp	r3, #0
 801bd2e:	d13f      	bne.n	801bdb0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bd30:	68fb      	ldr	r3, [r7, #12]
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd38:	e853 3f00 	ldrex	r3, [r3]
 801bd3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 801bd3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bd40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801bd44:	667b      	str	r3, [r7, #100]	; 0x64
 801bd46:	68fb      	ldr	r3, [r7, #12]
 801bd48:	681b      	ldr	r3, [r3, #0]
 801bd4a:	461a      	mov	r2, r3
 801bd4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bd50:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801bd54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801bd56:	e841 2300 	strex	r3, r2, [r1]
 801bd5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 801bd5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801bd5e:	2b00      	cmp	r3, #0
 801bd60:	d1e6      	bne.n	801bd30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bd62:	68fb      	ldr	r3, [r7, #12]
 801bd64:	681b      	ldr	r3, [r3, #0]
 801bd66:	3308      	adds	r3, #8
 801bd68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bd6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bd6c:	e853 3f00 	ldrex	r3, [r3]
 801bd70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801bd72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bd74:	f023 0301 	bic.w	r3, r3, #1
 801bd78:	663b      	str	r3, [r7, #96]	; 0x60
 801bd7a:	68fb      	ldr	r3, [r7, #12]
 801bd7c:	681b      	ldr	r3, [r3, #0]
 801bd7e:	3308      	adds	r3, #8
 801bd80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801bd82:	64ba      	str	r2, [r7, #72]	; 0x48
 801bd84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bd86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801bd88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bd8a:	e841 2300 	strex	r3, r2, [r1]
 801bd8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801bd90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bd92:	2b00      	cmp	r3, #0
 801bd94:	d1e5      	bne.n	801bd62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801bd96:	68fb      	ldr	r3, [r7, #12]
 801bd98:	2220      	movs	r2, #32
 801bd9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 801bd9c:	68fb      	ldr	r3, [r7, #12]
 801bd9e:	2220      	movs	r2, #32
 801bda0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 801bda4:	68fb      	ldr	r3, [r7, #12]
 801bda6:	2200      	movs	r2, #0
 801bda8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 801bdac:	2303      	movs	r3, #3
 801bdae:	e068      	b.n	801be82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801bdb0:	68fb      	ldr	r3, [r7, #12]
 801bdb2:	681b      	ldr	r3, [r3, #0]
 801bdb4:	681b      	ldr	r3, [r3, #0]
 801bdb6:	f003 0304 	and.w	r3, r3, #4
 801bdba:	2b00      	cmp	r3, #0
 801bdbc:	d050      	beq.n	801be60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801bdbe:	68fb      	ldr	r3, [r7, #12]
 801bdc0:	681b      	ldr	r3, [r3, #0]
 801bdc2:	69db      	ldr	r3, [r3, #28]
 801bdc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801bdc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801bdcc:	d148      	bne.n	801be60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801bdce:	68fb      	ldr	r3, [r7, #12]
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801bdd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801bdd8:	68fb      	ldr	r3, [r7, #12]
 801bdda:	681b      	ldr	r3, [r3, #0]
 801bddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bde0:	e853 3f00 	ldrex	r3, [r3]
 801bde4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801bde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bde8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 801bdec:	66fb      	str	r3, [r7, #108]	; 0x6c
 801bdee:	68fb      	ldr	r3, [r7, #12]
 801bdf0:	681b      	ldr	r3, [r3, #0]
 801bdf2:	461a      	mov	r2, r3
 801bdf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801bdf6:	637b      	str	r3, [r7, #52]	; 0x34
 801bdf8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bdfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bdfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bdfe:	e841 2300 	strex	r3, r2, [r1]
 801be02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801be04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be06:	2b00      	cmp	r3, #0
 801be08:	d1e6      	bne.n	801bdd8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801be0a:	68fb      	ldr	r3, [r7, #12]
 801be0c:	681b      	ldr	r3, [r3, #0]
 801be0e:	3308      	adds	r3, #8
 801be10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801be12:	697b      	ldr	r3, [r7, #20]
 801be14:	e853 3f00 	ldrex	r3, [r3]
 801be18:	613b      	str	r3, [r7, #16]
   return(result);
 801be1a:	693b      	ldr	r3, [r7, #16]
 801be1c:	f023 0301 	bic.w	r3, r3, #1
 801be20:	66bb      	str	r3, [r7, #104]	; 0x68
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	3308      	adds	r3, #8
 801be28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801be2a:	623a      	str	r2, [r7, #32]
 801be2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801be2e:	69f9      	ldr	r1, [r7, #28]
 801be30:	6a3a      	ldr	r2, [r7, #32]
 801be32:	e841 2300 	strex	r3, r2, [r1]
 801be36:	61bb      	str	r3, [r7, #24]
   return(result);
 801be38:	69bb      	ldr	r3, [r7, #24]
 801be3a:	2b00      	cmp	r3, #0
 801be3c:	d1e5      	bne.n	801be0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 801be3e:	68fb      	ldr	r3, [r7, #12]
 801be40:	2220      	movs	r2, #32
 801be42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 801be44:	68fb      	ldr	r3, [r7, #12]
 801be46:	2220      	movs	r2, #32
 801be48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	2220      	movs	r2, #32
 801be50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	2200      	movs	r2, #0
 801be58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 801be5c:	2303      	movs	r3, #3
 801be5e:	e010      	b.n	801be82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801be60:	68fb      	ldr	r3, [r7, #12]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	69da      	ldr	r2, [r3, #28]
 801be66:	68bb      	ldr	r3, [r7, #8]
 801be68:	4013      	ands	r3, r2
 801be6a:	68ba      	ldr	r2, [r7, #8]
 801be6c:	429a      	cmp	r2, r3
 801be6e:	bf0c      	ite	eq
 801be70:	2301      	moveq	r3, #1
 801be72:	2300      	movne	r3, #0
 801be74:	b2db      	uxtb	r3, r3
 801be76:	461a      	mov	r2, r3
 801be78:	79fb      	ldrb	r3, [r7, #7]
 801be7a:	429a      	cmp	r2, r3
 801be7c:	f43f af48 	beq.w	801bd10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801be80:	2300      	movs	r3, #0
}
 801be82:	4618      	mov	r0, r3
 801be84:	3770      	adds	r7, #112	; 0x70
 801be86:	46bd      	mov	sp, r7
 801be88:	bd80      	pop	{r7, pc}
	...

0801be8c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801be8c:	b480      	push	{r7}
 801be8e:	b097      	sub	sp, #92	; 0x5c
 801be90:	af00      	add	r7, sp, #0
 801be92:	60f8      	str	r0, [r7, #12]
 801be94:	60b9      	str	r1, [r7, #8]
 801be96:	4613      	mov	r3, r2
 801be98:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801be9a:	68fb      	ldr	r3, [r7, #12]
 801be9c:	68ba      	ldr	r2, [r7, #8]
 801be9e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 801bea0:	68fb      	ldr	r3, [r7, #12]
 801bea2:	88fa      	ldrh	r2, [r7, #6]
 801bea4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801bea8:	68fb      	ldr	r3, [r7, #12]
 801beaa:	88fa      	ldrh	r2, [r7, #6]
 801beac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 801beb0:	68fb      	ldr	r3, [r7, #12]
 801beb2:	2200      	movs	r2, #0
 801beb4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801beb6:	68fb      	ldr	r3, [r7, #12]
 801beb8:	689b      	ldr	r3, [r3, #8]
 801beba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bebe:	d10e      	bne.n	801bede <UART_Start_Receive_IT+0x52>
 801bec0:	68fb      	ldr	r3, [r7, #12]
 801bec2:	691b      	ldr	r3, [r3, #16]
 801bec4:	2b00      	cmp	r3, #0
 801bec6:	d105      	bne.n	801bed4 <UART_Start_Receive_IT+0x48>
 801bec8:	68fb      	ldr	r3, [r7, #12]
 801beca:	f240 12ff 	movw	r2, #511	; 0x1ff
 801bece:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bed2:	e02d      	b.n	801bf30 <UART_Start_Receive_IT+0xa4>
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	22ff      	movs	r2, #255	; 0xff
 801bed8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bedc:	e028      	b.n	801bf30 <UART_Start_Receive_IT+0xa4>
 801bede:	68fb      	ldr	r3, [r7, #12]
 801bee0:	689b      	ldr	r3, [r3, #8]
 801bee2:	2b00      	cmp	r3, #0
 801bee4:	d10d      	bne.n	801bf02 <UART_Start_Receive_IT+0x76>
 801bee6:	68fb      	ldr	r3, [r7, #12]
 801bee8:	691b      	ldr	r3, [r3, #16]
 801beea:	2b00      	cmp	r3, #0
 801beec:	d104      	bne.n	801bef8 <UART_Start_Receive_IT+0x6c>
 801beee:	68fb      	ldr	r3, [r7, #12]
 801bef0:	22ff      	movs	r2, #255	; 0xff
 801bef2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bef6:	e01b      	b.n	801bf30 <UART_Start_Receive_IT+0xa4>
 801bef8:	68fb      	ldr	r3, [r7, #12]
 801befa:	227f      	movs	r2, #127	; 0x7f
 801befc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bf00:	e016      	b.n	801bf30 <UART_Start_Receive_IT+0xa4>
 801bf02:	68fb      	ldr	r3, [r7, #12]
 801bf04:	689b      	ldr	r3, [r3, #8]
 801bf06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801bf0a:	d10d      	bne.n	801bf28 <UART_Start_Receive_IT+0x9c>
 801bf0c:	68fb      	ldr	r3, [r7, #12]
 801bf0e:	691b      	ldr	r3, [r3, #16]
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d104      	bne.n	801bf1e <UART_Start_Receive_IT+0x92>
 801bf14:	68fb      	ldr	r3, [r7, #12]
 801bf16:	227f      	movs	r2, #127	; 0x7f
 801bf18:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bf1c:	e008      	b.n	801bf30 <UART_Start_Receive_IT+0xa4>
 801bf1e:	68fb      	ldr	r3, [r7, #12]
 801bf20:	223f      	movs	r2, #63	; 0x3f
 801bf22:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801bf26:	e003      	b.n	801bf30 <UART_Start_Receive_IT+0xa4>
 801bf28:	68fb      	ldr	r3, [r7, #12]
 801bf2a:	2200      	movs	r2, #0
 801bf2c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801bf30:	68fb      	ldr	r3, [r7, #12]
 801bf32:	2200      	movs	r2, #0
 801bf34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801bf38:	68fb      	ldr	r3, [r7, #12]
 801bf3a:	2222      	movs	r2, #34	; 0x22
 801bf3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801bf40:	68fb      	ldr	r3, [r7, #12]
 801bf42:	681b      	ldr	r3, [r3, #0]
 801bf44:	3308      	adds	r3, #8
 801bf46:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bf48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bf4a:	e853 3f00 	ldrex	r3, [r3]
 801bf4e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bf52:	f043 0301 	orr.w	r3, r3, #1
 801bf56:	657b      	str	r3, [r7, #84]	; 0x54
 801bf58:	68fb      	ldr	r3, [r7, #12]
 801bf5a:	681b      	ldr	r3, [r3, #0]
 801bf5c:	3308      	adds	r3, #8
 801bf5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bf60:	64ba      	str	r2, [r7, #72]	; 0x48
 801bf62:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bf64:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801bf66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bf68:	e841 2300 	strex	r3, r2, [r1]
 801bf6c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 801bf6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801bf70:	2b00      	cmp	r3, #0
 801bf72:	d1e5      	bne.n	801bf40 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801bf74:	68fb      	ldr	r3, [r7, #12]
 801bf76:	689b      	ldr	r3, [r3, #8]
 801bf78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801bf7c:	d107      	bne.n	801bf8e <UART_Start_Receive_IT+0x102>
 801bf7e:	68fb      	ldr	r3, [r7, #12]
 801bf80:	691b      	ldr	r3, [r3, #16]
 801bf82:	2b00      	cmp	r3, #0
 801bf84:	d103      	bne.n	801bf8e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801bf86:	68fb      	ldr	r3, [r7, #12]
 801bf88:	4a21      	ldr	r2, [pc, #132]	; (801c010 <UART_Start_Receive_IT+0x184>)
 801bf8a:	669a      	str	r2, [r3, #104]	; 0x68
 801bf8c:	e002      	b.n	801bf94 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 801bf8e:	68fb      	ldr	r3, [r7, #12]
 801bf90:	4a20      	ldr	r2, [pc, #128]	; (801c014 <UART_Start_Receive_IT+0x188>)
 801bf92:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801bf94:	68fb      	ldr	r3, [r7, #12]
 801bf96:	691b      	ldr	r3, [r3, #16]
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d019      	beq.n	801bfd0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 801bf9c:	68fb      	ldr	r3, [r7, #12]
 801bf9e:	681b      	ldr	r3, [r3, #0]
 801bfa0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfa4:	e853 3f00 	ldrex	r3, [r3]
 801bfa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801bfaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfac:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 801bfb0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801bfb2:	68fb      	ldr	r3, [r7, #12]
 801bfb4:	681b      	ldr	r3, [r3, #0]
 801bfb6:	461a      	mov	r2, r3
 801bfb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801bfba:	637b      	str	r3, [r7, #52]	; 0x34
 801bfbc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bfbe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801bfc0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bfc2:	e841 2300 	strex	r3, r2, [r1]
 801bfc6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfca:	2b00      	cmp	r3, #0
 801bfcc:	d1e6      	bne.n	801bf9c <UART_Start_Receive_IT+0x110>
 801bfce:	e018      	b.n	801c002 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 801bfd0:	68fb      	ldr	r3, [r7, #12]
 801bfd2:	681b      	ldr	r3, [r3, #0]
 801bfd4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801bfd6:	697b      	ldr	r3, [r7, #20]
 801bfd8:	e853 3f00 	ldrex	r3, [r3]
 801bfdc:	613b      	str	r3, [r7, #16]
   return(result);
 801bfde:	693b      	ldr	r3, [r7, #16]
 801bfe0:	f043 0320 	orr.w	r3, r3, #32
 801bfe4:	653b      	str	r3, [r7, #80]	; 0x50
 801bfe6:	68fb      	ldr	r3, [r7, #12]
 801bfe8:	681b      	ldr	r3, [r3, #0]
 801bfea:	461a      	mov	r2, r3
 801bfec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bfee:	623b      	str	r3, [r7, #32]
 801bff0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801bff2:	69f9      	ldr	r1, [r7, #28]
 801bff4:	6a3a      	ldr	r2, [r7, #32]
 801bff6:	e841 2300 	strex	r3, r2, [r1]
 801bffa:	61bb      	str	r3, [r7, #24]
   return(result);
 801bffc:	69bb      	ldr	r3, [r7, #24]
 801bffe:	2b00      	cmp	r3, #0
 801c000:	d1e6      	bne.n	801bfd0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 801c002:	2300      	movs	r3, #0
}
 801c004:	4618      	mov	r0, r3
 801c006:	375c      	adds	r7, #92	; 0x5c
 801c008:	46bd      	mov	sp, r7
 801c00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c00e:	4770      	bx	lr
 801c010:	0801c2d7 	.word	0x0801c2d7
 801c014:	0801c169 	.word	0x0801c169

0801c018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801c018:	b480      	push	{r7}
 801c01a:	b095      	sub	sp, #84	; 0x54
 801c01c:	af00      	add	r7, sp, #0
 801c01e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c020:	687b      	ldr	r3, [r7, #4]
 801c022:	681b      	ldr	r3, [r3, #0]
 801c024:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c026:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c028:	e853 3f00 	ldrex	r3, [r3]
 801c02c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c030:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c034:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	681b      	ldr	r3, [r3, #0]
 801c03a:	461a      	mov	r2, r3
 801c03c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c03e:	643b      	str	r3, [r7, #64]	; 0x40
 801c040:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c042:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c044:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c046:	e841 2300 	strex	r3, r2, [r1]
 801c04a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c04c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c04e:	2b00      	cmp	r3, #0
 801c050:	d1e6      	bne.n	801c020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c052:	687b      	ldr	r3, [r7, #4]
 801c054:	681b      	ldr	r3, [r3, #0]
 801c056:	3308      	adds	r3, #8
 801c058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c05a:	6a3b      	ldr	r3, [r7, #32]
 801c05c:	e853 3f00 	ldrex	r3, [r3]
 801c060:	61fb      	str	r3, [r7, #28]
   return(result);
 801c062:	69fb      	ldr	r3, [r7, #28]
 801c064:	f023 0301 	bic.w	r3, r3, #1
 801c068:	64bb      	str	r3, [r7, #72]	; 0x48
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	681b      	ldr	r3, [r3, #0]
 801c06e:	3308      	adds	r3, #8
 801c070:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c072:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c074:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c076:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c078:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c07a:	e841 2300 	strex	r3, r2, [r1]
 801c07e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c082:	2b00      	cmp	r3, #0
 801c084:	d1e5      	bne.n	801c052 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c086:	687b      	ldr	r3, [r7, #4]
 801c088:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c08a:	2b01      	cmp	r3, #1
 801c08c:	d118      	bne.n	801c0c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	681b      	ldr	r3, [r3, #0]
 801c092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c094:	68fb      	ldr	r3, [r7, #12]
 801c096:	e853 3f00 	ldrex	r3, [r3]
 801c09a:	60bb      	str	r3, [r7, #8]
   return(result);
 801c09c:	68bb      	ldr	r3, [r7, #8]
 801c09e:	f023 0310 	bic.w	r3, r3, #16
 801c0a2:	647b      	str	r3, [r7, #68]	; 0x44
 801c0a4:	687b      	ldr	r3, [r7, #4]
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	461a      	mov	r2, r3
 801c0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c0ac:	61bb      	str	r3, [r7, #24]
 801c0ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c0b0:	6979      	ldr	r1, [r7, #20]
 801c0b2:	69ba      	ldr	r2, [r7, #24]
 801c0b4:	e841 2300 	strex	r3, r2, [r1]
 801c0b8:	613b      	str	r3, [r7, #16]
   return(result);
 801c0ba:	693b      	ldr	r3, [r7, #16]
 801c0bc:	2b00      	cmp	r3, #0
 801c0be:	d1e6      	bne.n	801c08e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	2220      	movs	r2, #32
 801c0c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c0c8:	687b      	ldr	r3, [r7, #4]
 801c0ca:	2200      	movs	r2, #0
 801c0cc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	2200      	movs	r2, #0
 801c0d2:	669a      	str	r2, [r3, #104]	; 0x68
}
 801c0d4:	bf00      	nop
 801c0d6:	3754      	adds	r7, #84	; 0x54
 801c0d8:	46bd      	mov	sp, r7
 801c0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0de:	4770      	bx	lr

0801c0e0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801c0e0:	b580      	push	{r7, lr}
 801c0e2:	b084      	sub	sp, #16
 801c0e4:	af00      	add	r7, sp, #0
 801c0e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801c0e8:	687b      	ldr	r3, [r7, #4]
 801c0ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801c0ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801c0ee:	68fb      	ldr	r3, [r7, #12]
 801c0f0:	2200      	movs	r2, #0
 801c0f2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801c0f6:	68fb      	ldr	r3, [r7, #12]
 801c0f8:	2200      	movs	r2, #0
 801c0fa:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801c0fe:	68fb      	ldr	r3, [r7, #12]
 801c100:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801c104:	68f8      	ldr	r0, [r7, #12]
 801c106:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c108:	bf00      	nop
 801c10a:	3710      	adds	r7, #16
 801c10c:	46bd      	mov	sp, r7
 801c10e:	bd80      	pop	{r7, pc}

0801c110 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801c110:	b580      	push	{r7, lr}
 801c112:	b088      	sub	sp, #32
 801c114:	af00      	add	r7, sp, #0
 801c116:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801c118:	687b      	ldr	r3, [r7, #4]
 801c11a:	681b      	ldr	r3, [r3, #0]
 801c11c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c11e:	68fb      	ldr	r3, [r7, #12]
 801c120:	e853 3f00 	ldrex	r3, [r3]
 801c124:	60bb      	str	r3, [r7, #8]
   return(result);
 801c126:	68bb      	ldr	r3, [r7, #8]
 801c128:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801c12c:	61fb      	str	r3, [r7, #28]
 801c12e:	687b      	ldr	r3, [r7, #4]
 801c130:	681b      	ldr	r3, [r3, #0]
 801c132:	461a      	mov	r2, r3
 801c134:	69fb      	ldr	r3, [r7, #28]
 801c136:	61bb      	str	r3, [r7, #24]
 801c138:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c13a:	6979      	ldr	r1, [r7, #20]
 801c13c:	69ba      	ldr	r2, [r7, #24]
 801c13e:	e841 2300 	strex	r3, r2, [r1]
 801c142:	613b      	str	r3, [r7, #16]
   return(result);
 801c144:	693b      	ldr	r3, [r7, #16]
 801c146:	2b00      	cmp	r3, #0
 801c148:	d1e6      	bne.n	801c118 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801c14a:	687b      	ldr	r3, [r7, #4]
 801c14c:	2220      	movs	r2, #32
 801c14e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801c150:	687b      	ldr	r3, [r7, #4]
 801c152:	2200      	movs	r2, #0
 801c154:	66da      	str	r2, [r3, #108]	; 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 801c156:	687b      	ldr	r3, [r7, #4]
 801c158:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801c15c:	6878      	ldr	r0, [r7, #4]
 801c15e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801c160:	bf00      	nop
 801c162:	3720      	adds	r7, #32
 801c164:	46bd      	mov	sp, r7
 801c166:	bd80      	pop	{r7, pc}

0801c168 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801c168:	b580      	push	{r7, lr}
 801c16a:	b096      	sub	sp, #88	; 0x58
 801c16c:	af00      	add	r7, sp, #0
 801c16e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801c170:	687b      	ldr	r3, [r7, #4]
 801c172:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c176:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c17a:	687b      	ldr	r3, [r7, #4]
 801c17c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c180:	2b22      	cmp	r3, #34	; 0x22
 801c182:	f040 809c 	bne.w	801c2be <UART_RxISR_8BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c186:	687b      	ldr	r3, [r7, #4]
 801c188:	681b      	ldr	r3, [r3, #0]
 801c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c18c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801c190:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 801c194:	b2d9      	uxtb	r1, r3
 801c196:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c19a:	b2da      	uxtb	r2, r3
 801c19c:	687b      	ldr	r3, [r7, #4]
 801c19e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c1a0:	400a      	ands	r2, r1
 801c1a2:	b2d2      	uxtb	r2, r2
 801c1a4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801c1a6:	687b      	ldr	r3, [r7, #4]
 801c1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c1aa:	1c5a      	adds	r2, r3, #1
 801c1ac:	687b      	ldr	r3, [r7, #4]
 801c1ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c1b6:	b29b      	uxth	r3, r3
 801c1b8:	3b01      	subs	r3, #1
 801c1ba:	b29a      	uxth	r2, r3
 801c1bc:	687b      	ldr	r3, [r7, #4]
 801c1be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c1c2:	687b      	ldr	r3, [r7, #4]
 801c1c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c1c8:	b29b      	uxth	r3, r3
 801c1ca:	2b00      	cmp	r3, #0
 801c1cc:	d17f      	bne.n	801c2ce <UART_RxISR_8BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c1ce:	687b      	ldr	r3, [r7, #4]
 801c1d0:	681b      	ldr	r3, [r3, #0]
 801c1d2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c1d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1d6:	e853 3f00 	ldrex	r3, [r3]
 801c1da:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801c1dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c1de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c1e2:	653b      	str	r3, [r7, #80]	; 0x50
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	681b      	ldr	r3, [r3, #0]
 801c1e8:	461a      	mov	r2, r3
 801c1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c1ec:	647b      	str	r3, [r7, #68]	; 0x44
 801c1ee:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c1f0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801c1f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801c1f4:	e841 2300 	strex	r3, r2, [r1]
 801c1f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 801c1fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801c1fc:	2b00      	cmp	r3, #0
 801c1fe:	d1e6      	bne.n	801c1ce <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c200:	687b      	ldr	r3, [r7, #4]
 801c202:	681b      	ldr	r3, [r3, #0]
 801c204:	3308      	adds	r3, #8
 801c206:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c20a:	e853 3f00 	ldrex	r3, [r3]
 801c20e:	623b      	str	r3, [r7, #32]
   return(result);
 801c210:	6a3b      	ldr	r3, [r7, #32]
 801c212:	f023 0301 	bic.w	r3, r3, #1
 801c216:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c218:	687b      	ldr	r3, [r7, #4]
 801c21a:	681b      	ldr	r3, [r3, #0]
 801c21c:	3308      	adds	r3, #8
 801c21e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801c220:	633a      	str	r2, [r7, #48]	; 0x30
 801c222:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c224:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c226:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c228:	e841 2300 	strex	r3, r2, [r1]
 801c22c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801c22e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c230:	2b00      	cmp	r3, #0
 801c232:	d1e5      	bne.n	801c200 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	2220      	movs	r2, #32
 801c238:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c23c:	687b      	ldr	r3, [r7, #4]
 801c23e:	2200      	movs	r2, #0
 801c240:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c242:	687b      	ldr	r3, [r7, #4]
 801c244:	2200      	movs	r2, #0
 801c246:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c248:	687b      	ldr	r3, [r7, #4]
 801c24a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c24c:	2b01      	cmp	r3, #1
 801c24e:	d130      	bne.n	801c2b2 <UART_RxISR_8BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c250:	687b      	ldr	r3, [r7, #4]
 801c252:	2200      	movs	r2, #0
 801c254:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c25c:	693b      	ldr	r3, [r7, #16]
 801c25e:	e853 3f00 	ldrex	r3, [r3]
 801c262:	60fb      	str	r3, [r7, #12]
   return(result);
 801c264:	68fb      	ldr	r3, [r7, #12]
 801c266:	f023 0310 	bic.w	r3, r3, #16
 801c26a:	64bb      	str	r3, [r7, #72]	; 0x48
 801c26c:	687b      	ldr	r3, [r7, #4]
 801c26e:	681b      	ldr	r3, [r3, #0]
 801c270:	461a      	mov	r2, r3
 801c272:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c274:	61fb      	str	r3, [r7, #28]
 801c276:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c278:	69b9      	ldr	r1, [r7, #24]
 801c27a:	69fa      	ldr	r2, [r7, #28]
 801c27c:	e841 2300 	strex	r3, r2, [r1]
 801c280:	617b      	str	r3, [r7, #20]
   return(result);
 801c282:	697b      	ldr	r3, [r7, #20]
 801c284:	2b00      	cmp	r3, #0
 801c286:	d1e6      	bne.n	801c256 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c288:	687b      	ldr	r3, [r7, #4]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	69db      	ldr	r3, [r3, #28]
 801c28e:	f003 0310 	and.w	r3, r3, #16
 801c292:	2b10      	cmp	r3, #16
 801c294:	d103      	bne.n	801c29e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	681b      	ldr	r3, [r3, #0]
 801c29a:	2210      	movs	r2, #16
 801c29c:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c29e:	687b      	ldr	r3, [r7, #4]
 801c2a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c2a4:	687a      	ldr	r2, [r7, #4]
 801c2a6:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c2aa:	4611      	mov	r1, r2
 801c2ac:	6878      	ldr	r0, [r7, #4]
 801c2ae:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c2b0:	e00d      	b.n	801c2ce <UART_RxISR_8BIT+0x166>
        huart->RxCpltCallback(huart);
 801c2b2:	687b      	ldr	r3, [r7, #4]
 801c2b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c2b8:	6878      	ldr	r0, [r7, #4]
 801c2ba:	4798      	blx	r3
}
 801c2bc:	e007      	b.n	801c2ce <UART_RxISR_8BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c2be:	687b      	ldr	r3, [r7, #4]
 801c2c0:	681b      	ldr	r3, [r3, #0]
 801c2c2:	699a      	ldr	r2, [r3, #24]
 801c2c4:	687b      	ldr	r3, [r7, #4]
 801c2c6:	681b      	ldr	r3, [r3, #0]
 801c2c8:	f042 0208 	orr.w	r2, r2, #8
 801c2cc:	619a      	str	r2, [r3, #24]
}
 801c2ce:	bf00      	nop
 801c2d0:	3758      	adds	r7, #88	; 0x58
 801c2d2:	46bd      	mov	sp, r7
 801c2d4:	bd80      	pop	{r7, pc}

0801c2d6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801c2d6:	b580      	push	{r7, lr}
 801c2d8:	b096      	sub	sp, #88	; 0x58
 801c2da:	af00      	add	r7, sp, #0
 801c2dc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801c2de:	687b      	ldr	r3, [r7, #4]
 801c2e0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 801c2e4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801c2e8:	687b      	ldr	r3, [r7, #4]
 801c2ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c2ee:	2b22      	cmp	r3, #34	; 0x22
 801c2f0:	f040 809c 	bne.w	801c42c <UART_RxISR_16BIT+0x156>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801c2f4:	687b      	ldr	r3, [r7, #4]
 801c2f6:	681b      	ldr	r3, [r3, #0]
 801c2f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801c2fe:	687b      	ldr	r3, [r7, #4]
 801c300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c302:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 801c304:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 801c308:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 801c30c:	4013      	ands	r3, r2
 801c30e:	b29a      	uxth	r2, r3
 801c310:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801c312:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801c314:	687b      	ldr	r3, [r7, #4]
 801c316:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801c318:	1c9a      	adds	r2, r3, #2
 801c31a:	687b      	ldr	r3, [r7, #4]
 801c31c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 801c31e:	687b      	ldr	r3, [r7, #4]
 801c320:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c324:	b29b      	uxth	r3, r3
 801c326:	3b01      	subs	r3, #1
 801c328:	b29a      	uxth	r2, r3
 801c32a:	687b      	ldr	r3, [r7, #4]
 801c32c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 801c330:	687b      	ldr	r3, [r7, #4]
 801c332:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 801c336:	b29b      	uxth	r3, r3
 801c338:	2b00      	cmp	r3, #0
 801c33a:	d17f      	bne.n	801c43c <UART_RxISR_16BIT+0x166>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801c33c:	687b      	ldr	r3, [r7, #4]
 801c33e:	681b      	ldr	r3, [r3, #0]
 801c340:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c342:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c344:	e853 3f00 	ldrex	r3, [r3]
 801c348:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 801c34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c34c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 801c350:	64fb      	str	r3, [r7, #76]	; 0x4c
 801c352:	687b      	ldr	r3, [r7, #4]
 801c354:	681b      	ldr	r3, [r3, #0]
 801c356:	461a      	mov	r2, r3
 801c358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801c35a:	643b      	str	r3, [r7, #64]	; 0x40
 801c35c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c35e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801c360:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801c362:	e841 2300 	strex	r3, r2, [r1]
 801c366:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801c368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	d1e6      	bne.n	801c33c <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801c36e:	687b      	ldr	r3, [r7, #4]
 801c370:	681b      	ldr	r3, [r3, #0]
 801c372:	3308      	adds	r3, #8
 801c374:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c376:	6a3b      	ldr	r3, [r7, #32]
 801c378:	e853 3f00 	ldrex	r3, [r3]
 801c37c:	61fb      	str	r3, [r7, #28]
   return(result);
 801c37e:	69fb      	ldr	r3, [r7, #28]
 801c380:	f023 0301 	bic.w	r3, r3, #1
 801c384:	64bb      	str	r3, [r7, #72]	; 0x48
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	681b      	ldr	r3, [r3, #0]
 801c38a:	3308      	adds	r3, #8
 801c38c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801c38e:	62fa      	str	r2, [r7, #44]	; 0x2c
 801c390:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c392:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801c394:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c396:	e841 2300 	strex	r3, r2, [r1]
 801c39a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801c39c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d1e5      	bne.n	801c36e <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801c3a2:	687b      	ldr	r3, [r7, #4]
 801c3a4:	2220      	movs	r2, #32
 801c3a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801c3aa:	687b      	ldr	r3, [r7, #4]
 801c3ac:	2200      	movs	r2, #0
 801c3ae:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c3b0:	687b      	ldr	r3, [r7, #4]
 801c3b2:	2200      	movs	r2, #0
 801c3b4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c3b6:	687b      	ldr	r3, [r7, #4]
 801c3b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c3ba:	2b01      	cmp	r3, #1
 801c3bc:	d130      	bne.n	801c420 <UART_RxISR_16BIT+0x14a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801c3be:	687b      	ldr	r3, [r7, #4]
 801c3c0:	2200      	movs	r2, #0
 801c3c2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c3c4:	687b      	ldr	r3, [r7, #4]
 801c3c6:	681b      	ldr	r3, [r3, #0]
 801c3c8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c3ca:	68fb      	ldr	r3, [r7, #12]
 801c3cc:	e853 3f00 	ldrex	r3, [r3]
 801c3d0:	60bb      	str	r3, [r7, #8]
   return(result);
 801c3d2:	68bb      	ldr	r3, [r7, #8]
 801c3d4:	f023 0310 	bic.w	r3, r3, #16
 801c3d8:	647b      	str	r3, [r7, #68]	; 0x44
 801c3da:	687b      	ldr	r3, [r7, #4]
 801c3dc:	681b      	ldr	r3, [r3, #0]
 801c3de:	461a      	mov	r2, r3
 801c3e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801c3e2:	61bb      	str	r3, [r7, #24]
 801c3e4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c3e6:	6979      	ldr	r1, [r7, #20]
 801c3e8:	69ba      	ldr	r2, [r7, #24]
 801c3ea:	e841 2300 	strex	r3, r2, [r1]
 801c3ee:	613b      	str	r3, [r7, #16]
   return(result);
 801c3f0:	693b      	ldr	r3, [r7, #16]
 801c3f2:	2b00      	cmp	r3, #0
 801c3f4:	d1e6      	bne.n	801c3c4 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801c3f6:	687b      	ldr	r3, [r7, #4]
 801c3f8:	681b      	ldr	r3, [r3, #0]
 801c3fa:	69db      	ldr	r3, [r3, #28]
 801c3fc:	f003 0310 	and.w	r3, r3, #16
 801c400:	2b10      	cmp	r3, #16
 801c402:	d103      	bne.n	801c40c <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	681b      	ldr	r3, [r3, #0]
 801c408:	2210      	movs	r2, #16
 801c40a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801c40c:	687b      	ldr	r3, [r7, #4]
 801c40e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801c412:	687a      	ldr	r2, [r7, #4]
 801c414:	f8b2 2058 	ldrh.w	r2, [r2, #88]	; 0x58
 801c418:	4611      	mov	r1, r2
 801c41a:	6878      	ldr	r0, [r7, #4]
 801c41c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801c41e:	e00d      	b.n	801c43c <UART_RxISR_16BIT+0x166>
        huart->RxCpltCallback(huart);
 801c420:	687b      	ldr	r3, [r7, #4]
 801c422:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 801c426:	6878      	ldr	r0, [r7, #4]
 801c428:	4798      	blx	r3
}
 801c42a:	e007      	b.n	801c43c <UART_RxISR_16BIT+0x166>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801c42c:	687b      	ldr	r3, [r7, #4]
 801c42e:	681b      	ldr	r3, [r3, #0]
 801c430:	699a      	ldr	r2, [r3, #24]
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	681b      	ldr	r3, [r3, #0]
 801c436:	f042 0208 	orr.w	r2, r2, #8
 801c43a:	619a      	str	r2, [r3, #24]
}
 801c43c:	bf00      	nop
 801c43e:	3758      	adds	r7, #88	; 0x58
 801c440:	46bd      	mov	sp, r7
 801c442:	bd80      	pop	{r7, pc}

0801c444 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801c444:	b580      	push	{r7, lr}
 801c446:	b08c      	sub	sp, #48	; 0x30
 801c448:	af00      	add	r7, sp, #0
 801c44a:	60f8      	str	r0, [r7, #12]
 801c44c:	60b9      	str	r1, [r7, #8]
 801c44e:	4613      	mov	r3, r2
 801c450:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801c452:	68fb      	ldr	r3, [r7, #12]
 801c454:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801c458:	2b20      	cmp	r3, #32
 801c45a:	d142      	bne.n	801c4e2 <HAL_UARTEx_ReceiveToIdle_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 801c45c:	68bb      	ldr	r3, [r7, #8]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	d002      	beq.n	801c468 <HAL_UARTEx_ReceiveToIdle_IT+0x24>
 801c462:	88fb      	ldrh	r3, [r7, #6]
 801c464:	2b00      	cmp	r3, #0
 801c466:	d101      	bne.n	801c46c <HAL_UARTEx_ReceiveToIdle_IT+0x28>
    {
      return HAL_ERROR;
 801c468:	2301      	movs	r3, #1
 801c46a:	e03b      	b.n	801c4e4 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 801c46c:	68fb      	ldr	r3, [r7, #12]
 801c46e:	2201      	movs	r2, #1
 801c470:	661a      	str	r2, [r3, #96]	; 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 801c472:	68fb      	ldr	r3, [r7, #12]
 801c474:	2200      	movs	r2, #0
 801c476:	665a      	str	r2, [r3, #100]	; 0x64

    status =  UART_Start_Receive_IT(huart, pData, Size);
 801c478:	88fb      	ldrh	r3, [r7, #6]
 801c47a:	461a      	mov	r2, r3
 801c47c:	68b9      	ldr	r1, [r7, #8]
 801c47e:	68f8      	ldr	r0, [r7, #12]
 801c480:	f7ff fd04 	bl	801be8c <UART_Start_Receive_IT>
 801c484:	4603      	mov	r3, r0
 801c486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 801c48a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d124      	bne.n	801c4dc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801c492:	68fb      	ldr	r3, [r7, #12]
 801c494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801c496:	2b01      	cmp	r3, #1
 801c498:	d11d      	bne.n	801c4d6 <HAL_UARTEx_ReceiveToIdle_IT+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801c49a:	68fb      	ldr	r3, [r7, #12]
 801c49c:	681b      	ldr	r3, [r3, #0]
 801c49e:	2210      	movs	r2, #16
 801c4a0:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801c4a2:	68fb      	ldr	r3, [r7, #12]
 801c4a4:	681b      	ldr	r3, [r3, #0]
 801c4a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801c4a8:	69bb      	ldr	r3, [r7, #24]
 801c4aa:	e853 3f00 	ldrex	r3, [r3]
 801c4ae:	617b      	str	r3, [r7, #20]
   return(result);
 801c4b0:	697b      	ldr	r3, [r7, #20]
 801c4b2:	f043 0310 	orr.w	r3, r3, #16
 801c4b6:	62bb      	str	r3, [r7, #40]	; 0x28
 801c4b8:	68fb      	ldr	r3, [r7, #12]
 801c4ba:	681b      	ldr	r3, [r3, #0]
 801c4bc:	461a      	mov	r2, r3
 801c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c4c0:	627b      	str	r3, [r7, #36]	; 0x24
 801c4c2:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801c4c4:	6a39      	ldr	r1, [r7, #32]
 801c4c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c4c8:	e841 2300 	strex	r3, r2, [r1]
 801c4cc:	61fb      	str	r3, [r7, #28]
   return(result);
 801c4ce:	69fb      	ldr	r3, [r7, #28]
 801c4d0:	2b00      	cmp	r3, #0
 801c4d2:	d1e6      	bne.n	801c4a2 <HAL_UARTEx_ReceiveToIdle_IT+0x5e>
 801c4d4:	e002      	b.n	801c4dc <HAL_UARTEx_ReceiveToIdle_IT+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 801c4d6:	2301      	movs	r3, #1
 801c4d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 801c4dc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801c4e0:	e000      	b.n	801c4e4 <HAL_UARTEx_ReceiveToIdle_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 801c4e2:	2302      	movs	r3, #2
  }
}
 801c4e4:	4618      	mov	r0, r3
 801c4e6:	3730      	adds	r7, #48	; 0x30
 801c4e8:	46bd      	mov	sp, r7
 801c4ea:	bd80      	pop	{r7, pc}

0801c4ec <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 801c4ec:	b580      	push	{r7, lr}
 801c4ee:	b084      	sub	sp, #16
 801c4f0:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801c4f2:	4b2f      	ldr	r3, [pc, #188]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c4f4:	22c0      	movs	r2, #192	; 0xc0
 801c4f6:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 801c4f8:	4b2d      	ldr	r3, [pc, #180]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c4fa:	22a8      	movs	r2, #168	; 0xa8
 801c4fc:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 801c4fe:	4b2c      	ldr	r3, [pc, #176]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c500:	220c      	movs	r2, #12
 801c502:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 100;
 801c504:	4b2a      	ldr	r3, [pc, #168]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c506:	2264      	movs	r2, #100	; 0x64
 801c508:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 801c50a:	4b2a      	ldr	r3, [pc, #168]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c50c:	22ff      	movs	r2, #255	; 0xff
 801c50e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801c510:	4b28      	ldr	r3, [pc, #160]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c512:	22ff      	movs	r2, #255	; 0xff
 801c514:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 801c516:	4b27      	ldr	r3, [pc, #156]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c518:	22ff      	movs	r2, #255	; 0xff
 801c51a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 801c51c:	4b25      	ldr	r3, [pc, #148]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c51e:	2200      	movs	r2, #0
 801c520:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 801c522:	4b25      	ldr	r3, [pc, #148]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c524:	22c0      	movs	r2, #192	; 0xc0
 801c526:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 801c528:	4b23      	ldr	r3, [pc, #140]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c52a:	22a8      	movs	r2, #168	; 0xa8
 801c52c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 801c52e:	4b22      	ldr	r3, [pc, #136]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c530:	220c      	movs	r2, #12
 801c532:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 801c534:	4b20      	ldr	r3, [pc, #128]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c536:	2201      	movs	r2, #1
 801c538:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
	switch(EI_data.ProtocolType)
 801c53a:	4b20      	ldr	r3, [pc, #128]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c53c:	781b      	ldrb	r3, [r3, #0]
 801c53e:	2b01      	cmp	r3, #1
 801c540:	d002      	beq.n	801c548 <MX_LWIP_Init+0x5c>
 801c542:	2b02      	cmp	r3, #2
 801c544:	d03c      	beq.n	801c5c0 <MX_LWIP_Init+0xd4>
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
		GATEWAY_ADDRESS[3] = 1;
		break;

	default :
		return;
 801c546:	e162      	b.n	801c80e <MX_LWIP_Init+0x322>
		IP_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];
 801c548:	4b1c      	ldr	r3, [pc, #112]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c54a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801c54e:	4b18      	ldr	r3, [pc, #96]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c550:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c552:	4b1a      	ldr	r3, [pc, #104]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c554:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801c558:	4b15      	ldr	r3, [pc, #84]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c55a:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c55c:	4b17      	ldr	r3, [pc, #92]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c55e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801c562:	4b13      	ldr	r3, [pc, #76]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c564:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][3];
 801c566:	4b15      	ldr	r3, [pc, #84]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c568:	f893 203e 	ldrb.w	r2, [r3, #62]	; 0x3e
 801c56c:	4b10      	ldr	r3, [pc, #64]	; (801c5b0 <MX_LWIP_Init+0xc4>)
 801c56e:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c570:	4b10      	ldr	r3, [pc, #64]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c572:	22ff      	movs	r2, #255	; 0xff
 801c574:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c576:	4b0f      	ldr	r3, [pc, #60]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c578:	22ff      	movs	r2, #255	; 0xff
 801c57a:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c57c:	4b0d      	ldr	r3, [pc, #52]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c57e:	22ff      	movs	r2, #255	; 0xff
 801c580:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c582:	4b0c      	ldr	r3, [pc, #48]	; (801c5b4 <MX_LWIP_Init+0xc8>)
 801c584:	2200      	movs	r2, #0
 801c586:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][0];;
 801c588:	4b0c      	ldr	r3, [pc, #48]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c58a:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 801c58e:	4b0a      	ldr	r3, [pc, #40]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c590:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][1];
 801c592:	4b0a      	ldr	r3, [pc, #40]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c594:	f893 203c 	ldrb.w	r2, [r3, #60]	; 0x3c
 801c598:	4b07      	ldr	r3, [pc, #28]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c59a:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Hitachi_st.Self_IP[CARD_INDEX][2];
 801c59c:	4b07      	ldr	r3, [pc, #28]	; (801c5bc <MX_LWIP_Init+0xd0>)
 801c59e:	f893 203d 	ldrb.w	r2, [r3, #61]	; 0x3d
 801c5a2:	4b05      	ldr	r3, [pc, #20]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c5a4:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c5a6:	4b04      	ldr	r3, [pc, #16]	; (801c5b8 <MX_LWIP_Init+0xcc>)
 801c5a8:	2201      	movs	r2, #1
 801c5aa:	70da      	strb	r2, [r3, #3]
		break;
 801c5ac:	e03b      	b.n	801c626 <MX_LWIP_Init+0x13a>
 801c5ae:	bf00      	nop
 801c5b0:	2000bd4c 	.word	0x2000bd4c
 801c5b4:	2000bd50 	.word	0x2000bd50
 801c5b8:	2000bd54 	.word	0x2000bd54
 801c5bc:	20000304 	.word	0x20000304
		IP_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];
 801c5c0:	4b94      	ldr	r3, [pc, #592]	; (801c814 <MX_LWIP_Init+0x328>)
 801c5c2:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801c5c6:	4b94      	ldr	r3, [pc, #592]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c5c8:	701a      	strb	r2, [r3, #0]
		IP_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c5ca:	4b92      	ldr	r3, [pc, #584]	; (801c814 <MX_LWIP_Init+0x328>)
 801c5cc:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801c5d0:	4b91      	ldr	r3, [pc, #580]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c5d2:	705a      	strb	r2, [r3, #1]
		IP_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c5d4:	4b8f      	ldr	r3, [pc, #572]	; (801c814 <MX_LWIP_Init+0x328>)
 801c5d6:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801c5da:	4b8f      	ldr	r3, [pc, #572]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c5dc:	709a      	strb	r2, [r3, #2]
		IP_ADDRESS[3] = EI_data.Siemens_st.Self_IP[CARD_INDEX][3];
 801c5de:	4b8d      	ldr	r3, [pc, #564]	; (801c814 <MX_LWIP_Init+0x328>)
 801c5e0:	f893 22ac 	ldrb.w	r2, [r3, #684]	; 0x2ac
 801c5e4:	4b8c      	ldr	r3, [pc, #560]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c5e6:	70da      	strb	r2, [r3, #3]
		NETMASK_ADDRESS[0] = 255;
 801c5e8:	4b8c      	ldr	r3, [pc, #560]	; (801c81c <MX_LWIP_Init+0x330>)
 801c5ea:	22ff      	movs	r2, #255	; 0xff
 801c5ec:	701a      	strb	r2, [r3, #0]
		NETMASK_ADDRESS[1] = 255;
 801c5ee:	4b8b      	ldr	r3, [pc, #556]	; (801c81c <MX_LWIP_Init+0x330>)
 801c5f0:	22ff      	movs	r2, #255	; 0xff
 801c5f2:	705a      	strb	r2, [r3, #1]
		NETMASK_ADDRESS[2] = 255;
 801c5f4:	4b89      	ldr	r3, [pc, #548]	; (801c81c <MX_LWIP_Init+0x330>)
 801c5f6:	22ff      	movs	r2, #255	; 0xff
 801c5f8:	709a      	strb	r2, [r3, #2]
		NETMASK_ADDRESS[3] = 0;
 801c5fa:	4b88      	ldr	r3, [pc, #544]	; (801c81c <MX_LWIP_Init+0x330>)
 801c5fc:	2200      	movs	r2, #0
 801c5fe:	70da      	strb	r2, [r3, #3]
		GATEWAY_ADDRESS[0] = EI_data.Siemens_st.Self_IP[CARD_INDEX][0];;
 801c600:	4b84      	ldr	r3, [pc, #528]	; (801c814 <MX_LWIP_Init+0x328>)
 801c602:	f893 22a9 	ldrb.w	r2, [r3, #681]	; 0x2a9
 801c606:	4b86      	ldr	r3, [pc, #536]	; (801c820 <MX_LWIP_Init+0x334>)
 801c608:	701a      	strb	r2, [r3, #0]
		GATEWAY_ADDRESS[1] = EI_data.Siemens_st.Self_IP[CARD_INDEX][1];
 801c60a:	4b82      	ldr	r3, [pc, #520]	; (801c814 <MX_LWIP_Init+0x328>)
 801c60c:	f893 22aa 	ldrb.w	r2, [r3, #682]	; 0x2aa
 801c610:	4b83      	ldr	r3, [pc, #524]	; (801c820 <MX_LWIP_Init+0x334>)
 801c612:	705a      	strb	r2, [r3, #1]
		GATEWAY_ADDRESS[2] = EI_data.Siemens_st.Self_IP[CARD_INDEX][2];
 801c614:	4b7f      	ldr	r3, [pc, #508]	; (801c814 <MX_LWIP_Init+0x328>)
 801c616:	f893 22ab 	ldrb.w	r2, [r3, #683]	; 0x2ab
 801c61a:	4b81      	ldr	r3, [pc, #516]	; (801c820 <MX_LWIP_Init+0x334>)
 801c61c:	709a      	strb	r2, [r3, #2]
		GATEWAY_ADDRESS[3] = 1;
 801c61e:	4b80      	ldr	r3, [pc, #512]	; (801c820 <MX_LWIP_Init+0x334>)
 801c620:	2201      	movs	r2, #1
 801c622:	70da      	strb	r2, [r3, #3]
		break;
 801c624:	bf00      	nop
	}

/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 801c626:	f000 fd42 	bl	801d0ae <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 801c62a:	4b7b      	ldr	r3, [pc, #492]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c62c:	781b      	ldrb	r3, [r3, #0]
 801c62e:	061a      	lsls	r2, r3, #24
 801c630:	4b79      	ldr	r3, [pc, #484]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c632:	785b      	ldrb	r3, [r3, #1]
 801c634:	041b      	lsls	r3, r3, #16
 801c636:	431a      	orrs	r2, r3
 801c638:	4b77      	ldr	r3, [pc, #476]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c63a:	789b      	ldrb	r3, [r3, #2]
 801c63c:	021b      	lsls	r3, r3, #8
 801c63e:	4313      	orrs	r3, r2
 801c640:	4a75      	ldr	r2, [pc, #468]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c642:	78d2      	ldrb	r2, [r2, #3]
 801c644:	4313      	orrs	r3, r2
 801c646:	061a      	lsls	r2, r3, #24
 801c648:	4b73      	ldr	r3, [pc, #460]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c64a:	781b      	ldrb	r3, [r3, #0]
 801c64c:	0619      	lsls	r1, r3, #24
 801c64e:	4b72      	ldr	r3, [pc, #456]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c650:	785b      	ldrb	r3, [r3, #1]
 801c652:	041b      	lsls	r3, r3, #16
 801c654:	4319      	orrs	r1, r3
 801c656:	4b70      	ldr	r3, [pc, #448]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c658:	789b      	ldrb	r3, [r3, #2]
 801c65a:	021b      	lsls	r3, r3, #8
 801c65c:	430b      	orrs	r3, r1
 801c65e:	496e      	ldr	r1, [pc, #440]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c660:	78c9      	ldrb	r1, [r1, #3]
 801c662:	430b      	orrs	r3, r1
 801c664:	021b      	lsls	r3, r3, #8
 801c666:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c66a:	431a      	orrs	r2, r3
 801c66c:	4b6a      	ldr	r3, [pc, #424]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c66e:	781b      	ldrb	r3, [r3, #0]
 801c670:	0619      	lsls	r1, r3, #24
 801c672:	4b69      	ldr	r3, [pc, #420]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c674:	785b      	ldrb	r3, [r3, #1]
 801c676:	041b      	lsls	r3, r3, #16
 801c678:	4319      	orrs	r1, r3
 801c67a:	4b67      	ldr	r3, [pc, #412]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c67c:	789b      	ldrb	r3, [r3, #2]
 801c67e:	021b      	lsls	r3, r3, #8
 801c680:	430b      	orrs	r3, r1
 801c682:	4965      	ldr	r1, [pc, #404]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c684:	78c9      	ldrb	r1, [r1, #3]
 801c686:	430b      	orrs	r3, r1
 801c688:	0a1b      	lsrs	r3, r3, #8
 801c68a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c68e:	431a      	orrs	r2, r3
 801c690:	4b61      	ldr	r3, [pc, #388]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c692:	781b      	ldrb	r3, [r3, #0]
 801c694:	0619      	lsls	r1, r3, #24
 801c696:	4b60      	ldr	r3, [pc, #384]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c698:	785b      	ldrb	r3, [r3, #1]
 801c69a:	041b      	lsls	r3, r3, #16
 801c69c:	4319      	orrs	r1, r3
 801c69e:	4b5e      	ldr	r3, [pc, #376]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c6a0:	789b      	ldrb	r3, [r3, #2]
 801c6a2:	021b      	lsls	r3, r3, #8
 801c6a4:	430b      	orrs	r3, r1
 801c6a6:	495c      	ldr	r1, [pc, #368]	; (801c818 <MX_LWIP_Init+0x32c>)
 801c6a8:	78c9      	ldrb	r1, [r1, #3]
 801c6aa:	430b      	orrs	r3, r1
 801c6ac:	0e1b      	lsrs	r3, r3, #24
 801c6ae:	4313      	orrs	r3, r2
 801c6b0:	4a5c      	ldr	r2, [pc, #368]	; (801c824 <MX_LWIP_Init+0x338>)
 801c6b2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 801c6b4:	4b59      	ldr	r3, [pc, #356]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6b6:	781b      	ldrb	r3, [r3, #0]
 801c6b8:	061a      	lsls	r2, r3, #24
 801c6ba:	4b58      	ldr	r3, [pc, #352]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6bc:	785b      	ldrb	r3, [r3, #1]
 801c6be:	041b      	lsls	r3, r3, #16
 801c6c0:	431a      	orrs	r2, r3
 801c6c2:	4b56      	ldr	r3, [pc, #344]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6c4:	789b      	ldrb	r3, [r3, #2]
 801c6c6:	021b      	lsls	r3, r3, #8
 801c6c8:	4313      	orrs	r3, r2
 801c6ca:	4a54      	ldr	r2, [pc, #336]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6cc:	78d2      	ldrb	r2, [r2, #3]
 801c6ce:	4313      	orrs	r3, r2
 801c6d0:	061a      	lsls	r2, r3, #24
 801c6d2:	4b52      	ldr	r3, [pc, #328]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6d4:	781b      	ldrb	r3, [r3, #0]
 801c6d6:	0619      	lsls	r1, r3, #24
 801c6d8:	4b50      	ldr	r3, [pc, #320]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6da:	785b      	ldrb	r3, [r3, #1]
 801c6dc:	041b      	lsls	r3, r3, #16
 801c6de:	4319      	orrs	r1, r3
 801c6e0:	4b4e      	ldr	r3, [pc, #312]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6e2:	789b      	ldrb	r3, [r3, #2]
 801c6e4:	021b      	lsls	r3, r3, #8
 801c6e6:	430b      	orrs	r3, r1
 801c6e8:	494c      	ldr	r1, [pc, #304]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6ea:	78c9      	ldrb	r1, [r1, #3]
 801c6ec:	430b      	orrs	r3, r1
 801c6ee:	021b      	lsls	r3, r3, #8
 801c6f0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c6f4:	431a      	orrs	r2, r3
 801c6f6:	4b49      	ldr	r3, [pc, #292]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6f8:	781b      	ldrb	r3, [r3, #0]
 801c6fa:	0619      	lsls	r1, r3, #24
 801c6fc:	4b47      	ldr	r3, [pc, #284]	; (801c81c <MX_LWIP_Init+0x330>)
 801c6fe:	785b      	ldrb	r3, [r3, #1]
 801c700:	041b      	lsls	r3, r3, #16
 801c702:	4319      	orrs	r1, r3
 801c704:	4b45      	ldr	r3, [pc, #276]	; (801c81c <MX_LWIP_Init+0x330>)
 801c706:	789b      	ldrb	r3, [r3, #2]
 801c708:	021b      	lsls	r3, r3, #8
 801c70a:	430b      	orrs	r3, r1
 801c70c:	4943      	ldr	r1, [pc, #268]	; (801c81c <MX_LWIP_Init+0x330>)
 801c70e:	78c9      	ldrb	r1, [r1, #3]
 801c710:	430b      	orrs	r3, r1
 801c712:	0a1b      	lsrs	r3, r3, #8
 801c714:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c718:	431a      	orrs	r2, r3
 801c71a:	4b40      	ldr	r3, [pc, #256]	; (801c81c <MX_LWIP_Init+0x330>)
 801c71c:	781b      	ldrb	r3, [r3, #0]
 801c71e:	0619      	lsls	r1, r3, #24
 801c720:	4b3e      	ldr	r3, [pc, #248]	; (801c81c <MX_LWIP_Init+0x330>)
 801c722:	785b      	ldrb	r3, [r3, #1]
 801c724:	041b      	lsls	r3, r3, #16
 801c726:	4319      	orrs	r1, r3
 801c728:	4b3c      	ldr	r3, [pc, #240]	; (801c81c <MX_LWIP_Init+0x330>)
 801c72a:	789b      	ldrb	r3, [r3, #2]
 801c72c:	021b      	lsls	r3, r3, #8
 801c72e:	430b      	orrs	r3, r1
 801c730:	493a      	ldr	r1, [pc, #232]	; (801c81c <MX_LWIP_Init+0x330>)
 801c732:	78c9      	ldrb	r1, [r1, #3]
 801c734:	430b      	orrs	r3, r1
 801c736:	0e1b      	lsrs	r3, r3, #24
 801c738:	4313      	orrs	r3, r2
 801c73a:	4a3b      	ldr	r2, [pc, #236]	; (801c828 <MX_LWIP_Init+0x33c>)
 801c73c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 801c73e:	4b38      	ldr	r3, [pc, #224]	; (801c820 <MX_LWIP_Init+0x334>)
 801c740:	781b      	ldrb	r3, [r3, #0]
 801c742:	061a      	lsls	r2, r3, #24
 801c744:	4b36      	ldr	r3, [pc, #216]	; (801c820 <MX_LWIP_Init+0x334>)
 801c746:	785b      	ldrb	r3, [r3, #1]
 801c748:	041b      	lsls	r3, r3, #16
 801c74a:	431a      	orrs	r2, r3
 801c74c:	4b34      	ldr	r3, [pc, #208]	; (801c820 <MX_LWIP_Init+0x334>)
 801c74e:	789b      	ldrb	r3, [r3, #2]
 801c750:	021b      	lsls	r3, r3, #8
 801c752:	4313      	orrs	r3, r2
 801c754:	4a32      	ldr	r2, [pc, #200]	; (801c820 <MX_LWIP_Init+0x334>)
 801c756:	78d2      	ldrb	r2, [r2, #3]
 801c758:	4313      	orrs	r3, r2
 801c75a:	061a      	lsls	r2, r3, #24
 801c75c:	4b30      	ldr	r3, [pc, #192]	; (801c820 <MX_LWIP_Init+0x334>)
 801c75e:	781b      	ldrb	r3, [r3, #0]
 801c760:	0619      	lsls	r1, r3, #24
 801c762:	4b2f      	ldr	r3, [pc, #188]	; (801c820 <MX_LWIP_Init+0x334>)
 801c764:	785b      	ldrb	r3, [r3, #1]
 801c766:	041b      	lsls	r3, r3, #16
 801c768:	4319      	orrs	r1, r3
 801c76a:	4b2d      	ldr	r3, [pc, #180]	; (801c820 <MX_LWIP_Init+0x334>)
 801c76c:	789b      	ldrb	r3, [r3, #2]
 801c76e:	021b      	lsls	r3, r3, #8
 801c770:	430b      	orrs	r3, r1
 801c772:	492b      	ldr	r1, [pc, #172]	; (801c820 <MX_LWIP_Init+0x334>)
 801c774:	78c9      	ldrb	r1, [r1, #3]
 801c776:	430b      	orrs	r3, r1
 801c778:	021b      	lsls	r3, r3, #8
 801c77a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801c77e:	431a      	orrs	r2, r3
 801c780:	4b27      	ldr	r3, [pc, #156]	; (801c820 <MX_LWIP_Init+0x334>)
 801c782:	781b      	ldrb	r3, [r3, #0]
 801c784:	0619      	lsls	r1, r3, #24
 801c786:	4b26      	ldr	r3, [pc, #152]	; (801c820 <MX_LWIP_Init+0x334>)
 801c788:	785b      	ldrb	r3, [r3, #1]
 801c78a:	041b      	lsls	r3, r3, #16
 801c78c:	4319      	orrs	r1, r3
 801c78e:	4b24      	ldr	r3, [pc, #144]	; (801c820 <MX_LWIP_Init+0x334>)
 801c790:	789b      	ldrb	r3, [r3, #2]
 801c792:	021b      	lsls	r3, r3, #8
 801c794:	430b      	orrs	r3, r1
 801c796:	4922      	ldr	r1, [pc, #136]	; (801c820 <MX_LWIP_Init+0x334>)
 801c798:	78c9      	ldrb	r1, [r1, #3]
 801c79a:	430b      	orrs	r3, r1
 801c79c:	0a1b      	lsrs	r3, r3, #8
 801c79e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801c7a2:	431a      	orrs	r2, r3
 801c7a4:	4b1e      	ldr	r3, [pc, #120]	; (801c820 <MX_LWIP_Init+0x334>)
 801c7a6:	781b      	ldrb	r3, [r3, #0]
 801c7a8:	0619      	lsls	r1, r3, #24
 801c7aa:	4b1d      	ldr	r3, [pc, #116]	; (801c820 <MX_LWIP_Init+0x334>)
 801c7ac:	785b      	ldrb	r3, [r3, #1]
 801c7ae:	041b      	lsls	r3, r3, #16
 801c7b0:	4319      	orrs	r1, r3
 801c7b2:	4b1b      	ldr	r3, [pc, #108]	; (801c820 <MX_LWIP_Init+0x334>)
 801c7b4:	789b      	ldrb	r3, [r3, #2]
 801c7b6:	021b      	lsls	r3, r3, #8
 801c7b8:	430b      	orrs	r3, r1
 801c7ba:	4919      	ldr	r1, [pc, #100]	; (801c820 <MX_LWIP_Init+0x334>)
 801c7bc:	78c9      	ldrb	r1, [r1, #3]
 801c7be:	430b      	orrs	r3, r1
 801c7c0:	0e1b      	lsrs	r3, r3, #24
 801c7c2:	4313      	orrs	r3, r2
 801c7c4:	4a19      	ldr	r2, [pc, #100]	; (801c82c <MX_LWIP_Init+0x340>)
 801c7c6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 801c7c8:	4b19      	ldr	r3, [pc, #100]	; (801c830 <MX_LWIP_Init+0x344>)
 801c7ca:	9302      	str	r3, [sp, #8]
 801c7cc:	4b19      	ldr	r3, [pc, #100]	; (801c834 <MX_LWIP_Init+0x348>)
 801c7ce:	9301      	str	r3, [sp, #4]
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	9300      	str	r3, [sp, #0]
 801c7d4:	4b15      	ldr	r3, [pc, #84]	; (801c82c <MX_LWIP_Init+0x340>)
 801c7d6:	4a14      	ldr	r2, [pc, #80]	; (801c828 <MX_LWIP_Init+0x33c>)
 801c7d8:	4912      	ldr	r1, [pc, #72]	; (801c824 <MX_LWIP_Init+0x338>)
 801c7da:	4817      	ldr	r0, [pc, #92]	; (801c838 <MX_LWIP_Init+0x34c>)
 801c7dc:	f001 f998 	bl	801db10 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 801c7e0:	4815      	ldr	r0, [pc, #84]	; (801c838 <MX_LWIP_Init+0x34c>)
 801c7e2:	f001 fb49 	bl	801de78 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801c7e6:	4b14      	ldr	r3, [pc, #80]	; (801c838 <MX_LWIP_Init+0x34c>)
 801c7e8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c7ec:	089b      	lsrs	r3, r3, #2
 801c7ee:	f003 0301 	and.w	r3, r3, #1
 801c7f2:	b2db      	uxtb	r3, r3
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d003      	beq.n	801c800 <MX_LWIP_Init+0x314>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801c7f8:	480f      	ldr	r0, [pc, #60]	; (801c838 <MX_LWIP_Init+0x34c>)
 801c7fa:	f001 fb4d 	bl	801de98 <netif_set_up>
 801c7fe:	e002      	b.n	801c806 <MX_LWIP_Init+0x31a>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 801c800:	480d      	ldr	r0, [pc, #52]	; (801c838 <MX_LWIP_Init+0x34c>)
 801c802:	f001 fbb5 	bl	801df70 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 801c806:	490d      	ldr	r1, [pc, #52]	; (801c83c <MX_LWIP_Init+0x350>)
 801c808:	480b      	ldr	r0, [pc, #44]	; (801c838 <MX_LWIP_Init+0x34c>)
 801c80a:	f001 fc47 	bl	801e09c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 801c80e:	46bd      	mov	sp, r7
 801c810:	bd80      	pop	{r7, pc}
 801c812:	bf00      	nop
 801c814:	20000304 	.word	0x20000304
 801c818:	2000bd4c 	.word	0x2000bd4c
 801c81c:	2000bd50 	.word	0x2000bd50
 801c820:	2000bd54 	.word	0x2000bd54
 801c824:	2000bd40 	.word	0x2000bd40
 801c828:	2000bd44 	.word	0x2000bd44
 801c82c:	2000bd48 	.word	0x2000bd48
 801c830:	08021e59 	.word	0x08021e59
 801c834:	0801cbcd 	.word	0x0801cbcd
 801c838:	2000bd00 	.word	0x2000bd00
 801c83c:	0801c891 	.word	0x0801c891

0801c840 <Ethernet_Link_Periodic_Handle>:
  * @brief  Ethernet Link periodic check
  * @param  netif
  * @retval None
  */
static void Ethernet_Link_Periodic_Handle(struct netif *netif)
{
 801c840:	b580      	push	{r7, lr}
 801c842:	b082      	sub	sp, #8
 801c844:	af00      	add	r7, sp, #0
 801c846:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN 4_4_1 */
/* USER CODE END 4_4_1 */

  /* Ethernet Link every 100ms */
  if (HAL_GetTick() - EthernetLinkTimer >= 100)
 801c848:	f7f8 fd26 	bl	8015298 <HAL_GetTick>
 801c84c:	4602      	mov	r2, r0
 801c84e:	4b08      	ldr	r3, [pc, #32]	; (801c870 <Ethernet_Link_Periodic_Handle+0x30>)
 801c850:	681b      	ldr	r3, [r3, #0]
 801c852:	1ad3      	subs	r3, r2, r3
 801c854:	2b63      	cmp	r3, #99	; 0x63
 801c856:	d907      	bls.n	801c868 <Ethernet_Link_Periodic_Handle+0x28>
  {
    EthernetLinkTimer = HAL_GetTick();
 801c858:	f7f8 fd1e 	bl	8015298 <HAL_GetTick>
 801c85c:	4603      	mov	r3, r0
 801c85e:	4a04      	ldr	r2, [pc, #16]	; (801c870 <Ethernet_Link_Periodic_Handle+0x30>)
 801c860:	6013      	str	r3, [r2, #0]
    ethernet_link_check_state(netif);
 801c862:	6878      	ldr	r0, [r7, #4]
 801c864:	f000 fb10 	bl	801ce88 <ethernet_link_check_state>
  }
/* USER CODE BEGIN 4_4 */
/* USER CODE END 4_4 */
}
 801c868:	bf00      	nop
 801c86a:	3708      	adds	r7, #8
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bd80      	pop	{r7, pc}
 801c870:	2000bcfc 	.word	0x2000bcfc

0801c874 <MX_LWIP_Process>:
 * Send it to the lwIP stack for handling
 * Handle timeouts if LWIP_TIMERS is set and without RTOS
 * Handle the llink status if LWIP_NETIF_LINK_CALLBACK is set and without RTOS
 */
void MX_LWIP_Process(void)
{
 801c874:	b580      	push	{r7, lr}
 801c876:	af00      	add	r7, sp, #0
/* USER CODE BEGIN 4_1 */
/* USER CODE END 4_1 */
  ethernetif_input(&gnetif);
 801c878:	4804      	ldr	r0, [pc, #16]	; (801c88c <MX_LWIP_Process+0x18>)
 801c87a:	f000 f987 	bl	801cb8c <ethernetif_input>

/* USER CODE BEGIN 4_2 */
/* USER CODE END 4_2 */
  /* Handle timeouts */
  sys_check_timeouts();
 801c87e:	f002 fb83 	bl	801ef88 <sys_check_timeouts>

  Ethernet_Link_Periodic_Handle(&gnetif);
 801c882:	4802      	ldr	r0, [pc, #8]	; (801c88c <MX_LWIP_Process+0x18>)
 801c884:	f7ff ffdc 	bl	801c840 <Ethernet_Link_Periodic_Handle>

/* USER CODE BEGIN 4_3 */
/* USER CODE END 4_3 */
}
 801c888:	bf00      	nop
 801c88a:	bd80      	pop	{r7, pc}
 801c88c:	2000bd00 	.word	0x2000bd00

0801c890 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 801c890:	b480      	push	{r7}
 801c892:	b083      	sub	sp, #12
 801c894:	af00      	add	r7, sp, #0
 801c896:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801c898:	bf00      	nop
 801c89a:	370c      	adds	r7, #12
 801c89c:	46bd      	mov	sp, r7
 801c89e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8a2:	4770      	bx	lr

0801c8a4 <SCB_InvalidateDCache_by_Addr>:
{
 801c8a4:	b480      	push	{r7}
 801c8a6:	b087      	sub	sp, #28
 801c8a8:	af00      	add	r7, sp, #0
 801c8aa:	6078      	str	r0, [r7, #4]
 801c8ac:	6039      	str	r1, [r7, #0]
     int32_t op_size = dsize;
 801c8ae:	683b      	ldr	r3, [r7, #0]
 801c8b0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 801c8b2:	687b      	ldr	r3, [r7, #4]
 801c8b4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801c8b6:	2320      	movs	r3, #32
 801c8b8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801c8ba:	f3bf 8f4f 	dsb	sy
}
 801c8be:	bf00      	nop
    while (op_size > 0) {
 801c8c0:	e00b      	b.n	801c8da <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 801c8c2:	4a0d      	ldr	r2, [pc, #52]	; (801c8f8 <SCB_InvalidateDCache_by_Addr+0x54>)
 801c8c4:	693b      	ldr	r3, [r7, #16]
 801c8c6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801c8ca:	68fb      	ldr	r3, [r7, #12]
 801c8cc:	693a      	ldr	r2, [r7, #16]
 801c8ce:	4413      	add	r3, r2
 801c8d0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 801c8d2:	697a      	ldr	r2, [r7, #20]
 801c8d4:	68fb      	ldr	r3, [r7, #12]
 801c8d6:	1ad3      	subs	r3, r2, r3
 801c8d8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801c8da:	697b      	ldr	r3, [r7, #20]
 801c8dc:	2b00      	cmp	r3, #0
 801c8de:	dcf0      	bgt.n	801c8c2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 801c8e0:	f3bf 8f4f 	dsb	sy
}
 801c8e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801c8e6:	f3bf 8f6f 	isb	sy
}
 801c8ea:	bf00      	nop
}
 801c8ec:	bf00      	nop
 801c8ee:	371c      	adds	r7, #28
 801c8f0:	46bd      	mov	sp, r7
 801c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c8f6:	4770      	bx	lr
 801c8f8:	e000ed00 	.word	0xe000ed00

0801c8fc <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b084      	sub	sp, #16
 801c900:	af00      	add	r7, sp, #0
 801c902:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 801c904:	2300      	movs	r3, #0
 801c906:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801c908:	4b47      	ldr	r3, [pc, #284]	; (801ca28 <low_level_init+0x12c>)
 801c90a:	4a48      	ldr	r2, [pc, #288]	; (801ca2c <low_level_init+0x130>)
 801c90c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801c90e:	2300      	movs	r3, #0
 801c910:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 801c912:	2380      	movs	r3, #128	; 0x80
 801c914:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 801c916:	23e1      	movs	r3, #225	; 0xe1
 801c918:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 801c91a:	2300      	movs	r3, #0
 801c91c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 801c91e:	2300      	movs	r3, #0
 801c920:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 801c922:	2300      	movs	r3, #0
 801c924:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 801c926:	4a40      	ldr	r2, [pc, #256]	; (801ca28 <low_level_init+0x12c>)
 801c928:	f107 0308 	add.w	r3, r7, #8
 801c92c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801c92e:	4b3e      	ldr	r3, [pc, #248]	; (801ca28 <low_level_init+0x12c>)
 801c930:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801c934:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 801c936:	4b3c      	ldr	r3, [pc, #240]	; (801ca28 <low_level_init+0x12c>)
 801c938:	4a3d      	ldr	r2, [pc, #244]	; (801ca30 <low_level_init+0x134>)
 801c93a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 801c93c:	4b3a      	ldr	r3, [pc, #232]	; (801ca28 <low_level_init+0x12c>)
 801c93e:	4a3d      	ldr	r2, [pc, #244]	; (801ca34 <low_level_init+0x138>)
 801c940:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801c942:	4b39      	ldr	r3, [pc, #228]	; (801ca28 <low_level_init+0x12c>)
 801c944:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801c948:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */
	switch(EI_data.ProtocolType)
 801c94a:	4b3b      	ldr	r3, [pc, #236]	; (801ca38 <low_level_init+0x13c>)
 801c94c:	781b      	ldrb	r3, [r3, #0]
 801c94e:	2b01      	cmp	r3, #1
 801c950:	d002      	beq.n	801c958 <low_level_init+0x5c>
 801c952:	2b02      	cmp	r3, #2
 801c954:	d004      	beq.n	801c960 <low_level_init+0x64>
		break;
	case SIEMENS:
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
		break;
	default:
		return;
 801c956:	e063      	b.n	801ca20 <low_level_init+0x124>
		heth.Init.MACAddr = &EI_data.Hitachi_st.Self_MAC[CARD_INDEX][0];
 801c958:	4b33      	ldr	r3, [pc, #204]	; (801ca28 <low_level_init+0x12c>)
 801c95a:	4a38      	ldr	r2, [pc, #224]	; (801ca3c <low_level_init+0x140>)
 801c95c:	605a      	str	r2, [r3, #4]
		break;
 801c95e:	e003      	b.n	801c968 <low_level_init+0x6c>
		heth.Init.MACAddr = &EI_data.Siemens_st.Self_MAC[CARD_INDEX][0];
 801c960:	4b31      	ldr	r3, [pc, #196]	; (801ca28 <low_level_init+0x12c>)
 801c962:	4a37      	ldr	r2, [pc, #220]	; (801ca40 <low_level_init+0x144>)
 801c964:	605a      	str	r2, [r3, #4]
		break;
 801c966:	bf00      	nop
	}
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801c968:	482f      	ldr	r0, [pc, #188]	; (801ca28 <low_level_init+0x12c>)
 801c96a:	f7f9 fdbb 	bl	80164e4 <HAL_ETH_Init>
 801c96e:	4603      	mov	r3, r0
 801c970:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 801c972:	2238      	movs	r2, #56	; 0x38
 801c974:	2100      	movs	r1, #0
 801c976:	4833      	ldr	r0, [pc, #204]	; (801ca44 <low_level_init+0x148>)
 801c978:	f005 fbb0 	bl	80220dc <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801c97c:	4b31      	ldr	r3, [pc, #196]	; (801ca44 <low_level_init+0x148>)
 801c97e:	2221      	movs	r2, #33	; 0x21
 801c980:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801c982:	4b30      	ldr	r3, [pc, #192]	; (801ca44 <low_level_init+0x148>)
 801c984:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 801c988:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801c98a:	4b2e      	ldr	r3, [pc, #184]	; (801ca44 <low_level_init+0x148>)
 801c98c:	2200      	movs	r2, #0
 801c98e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 801c990:	482d      	ldr	r0, [pc, #180]	; (801ca48 <low_level_init+0x14c>)
 801c992:	f000 ff3d 	bl	801d810 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	2206      	movs	r2, #6
 801c99a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801c99e:	4b22      	ldr	r3, [pc, #136]	; (801ca28 <low_level_init+0x12c>)
 801c9a0:	685b      	ldr	r3, [r3, #4]
 801c9a2:	781a      	ldrb	r2, [r3, #0]
 801c9a4:	687b      	ldr	r3, [r7, #4]
 801c9a6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801c9aa:	4b1f      	ldr	r3, [pc, #124]	; (801ca28 <low_level_init+0x12c>)
 801c9ac:	685b      	ldr	r3, [r3, #4]
 801c9ae:	785a      	ldrb	r2, [r3, #1]
 801c9b0:	687b      	ldr	r3, [r7, #4]
 801c9b2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 801c9b6:	4b1c      	ldr	r3, [pc, #112]	; (801ca28 <low_level_init+0x12c>)
 801c9b8:	685b      	ldr	r3, [r3, #4]
 801c9ba:	789a      	ldrb	r2, [r3, #2]
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 801c9c2:	4b19      	ldr	r3, [pc, #100]	; (801ca28 <low_level_init+0x12c>)
 801c9c4:	685b      	ldr	r3, [r3, #4]
 801c9c6:	78da      	ldrb	r2, [r3, #3]
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 801c9ce:	4b16      	ldr	r3, [pc, #88]	; (801ca28 <low_level_init+0x12c>)
 801c9d0:	685b      	ldr	r3, [r3, #4]
 801c9d2:	791a      	ldrb	r2, [r3, #4]
 801c9d4:	687b      	ldr	r3, [r7, #4]
 801c9d6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 801c9da:	4b13      	ldr	r3, [pc, #76]	; (801ca28 <low_level_init+0x12c>)
 801c9dc:	685b      	ldr	r3, [r3, #4]
 801c9de:	795a      	ldrb	r2, [r3, #5]
 801c9e0:	687b      	ldr	r3, [r7, #4]
 801c9e2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 801c9e6:	687b      	ldr	r3, [r7, #4]
 801c9e8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 801c9ec:	851a      	strh	r2, [r3, #40]	; 0x28

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 801c9ee:	687b      	ldr	r3, [r7, #4]
 801c9f0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801c9f4:	f043 030a 	orr.w	r3, r3, #10
 801c9f8:	b2da      	uxtb	r2, r3
 801c9fa:	687b      	ldr	r3, [r7, #4]
 801c9fc:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  DP83848_RegisterBusIO(&DP83848, &DP83848_IOCtx);
 801ca00:	4912      	ldr	r1, [pc, #72]	; (801ca4c <low_level_init+0x150>)
 801ca02:	4813      	ldr	r0, [pc, #76]	; (801ca50 <low_level_init+0x154>)
 801ca04:	f7f8 fa87 	bl	8014f16 <DP83848_RegisterBusIO>

  /* Initialize the DP83848 ETH PHY */
  DP83848_Init(&DP83848);
 801ca08:	4811      	ldr	r0, [pc, #68]	; (801ca50 <low_level_init+0x154>)
 801ca0a:	f7f8 fab6 	bl	8014f7a <DP83848_Init>

  if (hal_eth_init_status == HAL_OK)
 801ca0e:	7bfb      	ldrb	r3, [r7, #15]
 801ca10:	2b00      	cmp	r3, #0
 801ca12:	d103      	bne.n	801ca1c <low_level_init+0x120>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 801ca14:	6878      	ldr	r0, [r7, #4]
 801ca16:	f000 fa37 	bl	801ce88 <ethernet_link_check_state>
 801ca1a:	e001      	b.n	801ca20 <low_level_init+0x124>
  }
  else
  {
    Error_Handler();
 801ca1c:	f7f6 feb0 	bl	8013780 <Error_Handler>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 801ca20:	3710      	adds	r7, #16
 801ca22:	46bd      	mov	sp, r7
 801ca24:	bd80      	pop	{r7, pc}
 801ca26:	bf00      	nop
 801ca28:	20010654 	.word	0x20010654
 801ca2c:	40028000 	.word	0x40028000
 801ca30:	20000244 	.word	0x20000244
 801ca34:	200001a4 	.word	0x200001a4
 801ca38:	20000304 	.word	0x20000304
 801ca3c:	20000349 	.word	0x20000349
 801ca40:	200005b7 	.word	0x200005b7
 801ca44:	20010704 	.word	0x20010704
 801ca48:	08028b48 	.word	0x08028b48
 801ca4c:	20000128 	.word	0x20000128
 801ca50:	2001073c 	.word	0x2001073c

0801ca54 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801ca54:	b580      	push	{r7, lr}
 801ca56:	b092      	sub	sp, #72	; 0x48
 801ca58:	af00      	add	r7, sp, #0
 801ca5a:	6078      	str	r0, [r7, #4]
 801ca5c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 801ca5e:	2300      	movs	r3, #0
 801ca60:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801ca62:	2300      	movs	r3, #0
 801ca64:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801ca66:	2300      	movs	r3, #0
 801ca68:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 801ca6c:	f107 030c 	add.w	r3, r7, #12
 801ca70:	2230      	movs	r2, #48	; 0x30
 801ca72:	2100      	movs	r1, #0
 801ca74:	4618      	mov	r0, r3
 801ca76:	f005 fb31 	bl	80220dc <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 801ca7a:	f107 030c 	add.w	r3, r7, #12
 801ca7e:	2230      	movs	r2, #48	; 0x30
 801ca80:	2100      	movs	r1, #0
 801ca82:	4618      	mov	r0, r3
 801ca84:	f005 fb2a 	bl	80220dc <memset>

  for(q = p; q != NULL; q = q->next)
 801ca88:	683b      	ldr	r3, [r7, #0]
 801ca8a:	643b      	str	r3, [r7, #64]	; 0x40
 801ca8c:	e045      	b.n	801cb1a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 801ca8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ca90:	2b03      	cmp	r3, #3
 801ca92:	d902      	bls.n	801ca9a <low_level_output+0x46>
      return ERR_IF;
 801ca94:	f06f 030b 	mvn.w	r3, #11
 801ca98:	e055      	b.n	801cb46 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 801ca9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ca9c:	6859      	ldr	r1, [r3, #4]
 801ca9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801caa0:	4613      	mov	r3, r2
 801caa2:	005b      	lsls	r3, r3, #1
 801caa4:	4413      	add	r3, r2
 801caa6:	009b      	lsls	r3, r3, #2
 801caa8:	3348      	adds	r3, #72	; 0x48
 801caaa:	443b      	add	r3, r7
 801caac:	3b3c      	subs	r3, #60	; 0x3c
 801caae:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 801cab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cab2:	895b      	ldrh	r3, [r3, #10]
 801cab4:	4619      	mov	r1, r3
 801cab6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cab8:	4613      	mov	r3, r2
 801caba:	005b      	lsls	r3, r3, #1
 801cabc:	4413      	add	r3, r2
 801cabe:	009b      	lsls	r3, r3, #2
 801cac0:	3348      	adds	r3, #72	; 0x48
 801cac2:	443b      	add	r3, r7
 801cac4:	3b38      	subs	r3, #56	; 0x38
 801cac6:	6019      	str	r1, [r3, #0]

    if(i>0)
 801cac8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801caca:	2b00      	cmp	r3, #0
 801cacc:	d011      	beq.n	801caf2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 801cace:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cad0:	1e5a      	subs	r2, r3, #1
 801cad2:	f107 000c 	add.w	r0, r7, #12
 801cad6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801cad8:	460b      	mov	r3, r1
 801cada:	005b      	lsls	r3, r3, #1
 801cadc:	440b      	add	r3, r1
 801cade:	009b      	lsls	r3, r3, #2
 801cae0:	18c1      	adds	r1, r0, r3
 801cae2:	4613      	mov	r3, r2
 801cae4:	005b      	lsls	r3, r3, #1
 801cae6:	4413      	add	r3, r2
 801cae8:	009b      	lsls	r3, r3, #2
 801caea:	3348      	adds	r3, #72	; 0x48
 801caec:	443b      	add	r3, r7
 801caee:	3b34      	subs	r3, #52	; 0x34
 801caf0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 801caf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801caf4:	681b      	ldr	r3, [r3, #0]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d109      	bne.n	801cb0e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 801cafa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801cafc:	4613      	mov	r3, r2
 801cafe:	005b      	lsls	r3, r3, #1
 801cb00:	4413      	add	r3, r2
 801cb02:	009b      	lsls	r3, r3, #2
 801cb04:	3348      	adds	r3, #72	; 0x48
 801cb06:	443b      	add	r3, r7
 801cb08:	3b34      	subs	r3, #52	; 0x34
 801cb0a:	2200      	movs	r2, #0
 801cb0c:	601a      	str	r2, [r3, #0]
    }

    i++;
 801cb0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cb10:	3301      	adds	r3, #1
 801cb12:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801cb14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	643b      	str	r3, [r7, #64]	; 0x40
 801cb1a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801cb1c:	2b00      	cmp	r3, #0
 801cb1e:	d1b6      	bne.n	801ca8e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 801cb20:	683b      	ldr	r3, [r7, #0]
 801cb22:	891b      	ldrh	r3, [r3, #8]
 801cb24:	461a      	mov	r2, r3
 801cb26:	4b0a      	ldr	r3, [pc, #40]	; (801cb50 <low_level_output+0xfc>)
 801cb28:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 801cb2a:	4a09      	ldr	r2, [pc, #36]	; (801cb50 <low_level_output+0xfc>)
 801cb2c:	f107 030c 	add.w	r3, r7, #12
 801cb30:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801cb32:	4a07      	ldr	r2, [pc, #28]	; (801cb50 <low_level_output+0xfc>)
 801cb34:	683b      	ldr	r3, [r7, #0]
 801cb36:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 801cb38:	2214      	movs	r2, #20
 801cb3a:	4905      	ldr	r1, [pc, #20]	; (801cb50 <low_level_output+0xfc>)
 801cb3c:	4805      	ldr	r0, [pc, #20]	; (801cb54 <low_level_output+0x100>)
 801cb3e:	f7f9 fe05 	bl	801674c <HAL_ETH_Transmit>

  return errval;
 801cb42:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801cb46:	4618      	mov	r0, r3
 801cb48:	3748      	adds	r7, #72	; 0x48
 801cb4a:	46bd      	mov	sp, r7
 801cb4c:	bd80      	pop	{r7, pc}
 801cb4e:	bf00      	nop
 801cb50:	20010704 	.word	0x20010704
 801cb54:	20010654 	.word	0x20010654

0801cb58 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 801cb58:	b580      	push	{r7, lr}
 801cb5a:	b084      	sub	sp, #16
 801cb5c:	af00      	add	r7, sp, #0
 801cb5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801cb60:	2300      	movs	r3, #0
 801cb62:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 801cb64:	4b07      	ldr	r3, [pc, #28]	; (801cb84 <low_level_input+0x2c>)
 801cb66:	781b      	ldrb	r3, [r3, #0]
 801cb68:	2b00      	cmp	r3, #0
 801cb6a:	d105      	bne.n	801cb78 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 801cb6c:	f107 030c 	add.w	r3, r7, #12
 801cb70:	4619      	mov	r1, r3
 801cb72:	4805      	ldr	r0, [pc, #20]	; (801cb88 <low_level_input+0x30>)
 801cb74:	f7f9 fe7e 	bl	8016874 <HAL_ETH_ReadData>
  }

  return p;
 801cb78:	68fb      	ldr	r3, [r7, #12]
}
 801cb7a:	4618      	mov	r0, r3
 801cb7c:	3710      	adds	r7, #16
 801cb7e:	46bd      	mov	sp, r7
 801cb80:	bd80      	pop	{r7, pc}
 801cb82:	bf00      	nop
 801cb84:	20010650 	.word	0x20010650
 801cb88:	20010654 	.word	0x20010654

0801cb8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 801cb8c:	b580      	push	{r7, lr}
 801cb8e:	b084      	sub	sp, #16
 801cb90:	af00      	add	r7, sp, #0
 801cb92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801cb94:	2300      	movs	r3, #0
 801cb96:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 801cb98:	6878      	ldr	r0, [r7, #4]
 801cb9a:	f7ff ffdd 	bl	801cb58 <low_level_input>
 801cb9e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 801cba0:	68fb      	ldr	r3, [r7, #12]
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d00a      	beq.n	801cbbc <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 801cba6:	687b      	ldr	r3, [r7, #4]
 801cba8:	691b      	ldr	r3, [r3, #16]
 801cbaa:	6879      	ldr	r1, [r7, #4]
 801cbac:	68f8      	ldr	r0, [r7, #12]
 801cbae:	4798      	blx	r3
 801cbb0:	4603      	mov	r3, r0
 801cbb2:	2b00      	cmp	r3, #0
 801cbb4:	d002      	beq.n	801cbbc <ethernetif_input+0x30>
      {
        pbuf_free(p);
 801cbb6:	68f8      	ldr	r0, [r7, #12]
 801cbb8:	f001 fe40 	bl	801e83c <pbuf_free>
      }
    }
  } while(p!=NULL);
 801cbbc:	68fb      	ldr	r3, [r7, #12]
 801cbbe:	2b00      	cmp	r3, #0
 801cbc0:	d1ea      	bne.n	801cb98 <ethernetif_input+0xc>
}
 801cbc2:	bf00      	nop
 801cbc4:	bf00      	nop
 801cbc6:	3710      	adds	r7, #16
 801cbc8:	46bd      	mov	sp, r7
 801cbca:	bd80      	pop	{r7, pc}

0801cbcc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 801cbcc:	b580      	push	{r7, lr}
 801cbce:	b082      	sub	sp, #8
 801cbd0:	af00      	add	r7, sp, #0
 801cbd2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 801cbd4:	687b      	ldr	r3, [r7, #4]
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d106      	bne.n	801cbe8 <ethernetif_init+0x1c>
 801cbda:	4b0e      	ldr	r3, [pc, #56]	; (801cc14 <ethernetif_init+0x48>)
 801cbdc:	f240 1287 	movw	r2, #391	; 0x187
 801cbe0:	490d      	ldr	r1, [pc, #52]	; (801cc18 <ethernetif_init+0x4c>)
 801cbe2:	480e      	ldr	r0, [pc, #56]	; (801cc1c <ethernetif_init+0x50>)
 801cbe4:	f005 fb62 	bl	80222ac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 801cbe8:	687b      	ldr	r3, [r7, #4]
 801cbea:	2273      	movs	r2, #115	; 0x73
 801cbec:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = IFNAME1;
 801cbf0:	687b      	ldr	r3, [r7, #4]
 801cbf2:	2274      	movs	r2, #116	; 0x74
 801cbf4:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 801cbf8:	687b      	ldr	r3, [r7, #4]
 801cbfa:	4a09      	ldr	r2, [pc, #36]	; (801cc20 <ethernetif_init+0x54>)
 801cbfc:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	4a08      	ldr	r2, [pc, #32]	; (801cc24 <ethernetif_init+0x58>)
 801cc02:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 801cc04:	6878      	ldr	r0, [r7, #4]
 801cc06:	f7ff fe79 	bl	801c8fc <low_level_init>

  return ERR_OK;
 801cc0a:	2300      	movs	r3, #0
}
 801cc0c:	4618      	mov	r0, r3
 801cc0e:	3708      	adds	r7, #8
 801cc10:	46bd      	mov	sp, r7
 801cc12:	bd80      	pop	{r7, pc}
 801cc14:	08026e70 	.word	0x08026e70
 801cc18:	08026ebc 	.word	0x08026ebc
 801cc1c:	08026ecc 	.word	0x08026ecc
 801cc20:	080201e9 	.word	0x080201e9
 801cc24:	0801ca55 	.word	0x0801ca55

0801cc28 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 801cc28:	b580      	push	{r7, lr}
 801cc2a:	b084      	sub	sp, #16
 801cc2c:	af00      	add	r7, sp, #0
 801cc2e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 801cc30:	687b      	ldr	r3, [r7, #4]
 801cc32:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 801cc34:	68f9      	ldr	r1, [r7, #12]
 801cc36:	4807      	ldr	r0, [pc, #28]	; (801cc54 <pbuf_free_custom+0x2c>)
 801cc38:	f000 fecc 	bl	801d9d4 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801cc3c:	4b06      	ldr	r3, [pc, #24]	; (801cc58 <pbuf_free_custom+0x30>)
 801cc3e:	781b      	ldrb	r3, [r3, #0]
 801cc40:	2b01      	cmp	r3, #1
 801cc42:	d102      	bne.n	801cc4a <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 801cc44:	4b04      	ldr	r3, [pc, #16]	; (801cc58 <pbuf_free_custom+0x30>)
 801cc46:	2200      	movs	r2, #0
 801cc48:	701a      	strb	r2, [r3, #0]
  }
}
 801cc4a:	bf00      	nop
 801cc4c:	3710      	adds	r7, #16
 801cc4e:	46bd      	mov	sp, r7
 801cc50:	bd80      	pop	{r7, pc}
 801cc52:	bf00      	nop
 801cc54:	08028b48 	.word	0x08028b48
 801cc58:	20010650 	.word	0x20010650

0801cc5c <sys_now>:
 *         when LWIP_TIMERS == 1 and NO_SYS == 1
 * @param  None
 * @retval Current Time value
 */
u32_t sys_now(void)
{
 801cc5c:	b580      	push	{r7, lr}
 801cc5e:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 801cc60:	f7f8 fb1a 	bl	8015298 <HAL_GetTick>
 801cc64:	4603      	mov	r3, r0
}
 801cc66:	4618      	mov	r0, r3
 801cc68:	bd80      	pop	{r7, pc}
	...

0801cc6c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 801cc6c:	b580      	push	{r7, lr}
 801cc6e:	b08e      	sub	sp, #56	; 0x38
 801cc70:	af00      	add	r7, sp, #0
 801cc72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801cc74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cc78:	2200      	movs	r2, #0
 801cc7a:	601a      	str	r2, [r3, #0]
 801cc7c:	605a      	str	r2, [r3, #4]
 801cc7e:	609a      	str	r2, [r3, #8]
 801cc80:	60da      	str	r2, [r3, #12]
 801cc82:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	4a52      	ldr	r2, [pc, #328]	; (801cdd4 <HAL_ETH_MspInit+0x168>)
 801cc8a:	4293      	cmp	r3, r2
 801cc8c:	f040 809e 	bne.w	801cdcc <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 801cc90:	4b51      	ldr	r3, [pc, #324]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cc92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cc94:	4a50      	ldr	r2, [pc, #320]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cc96:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801cc9a:	6313      	str	r3, [r2, #48]	; 0x30
 801cc9c:	4b4e      	ldr	r3, [pc, #312]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cc9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cca0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801cca4:	623b      	str	r3, [r7, #32]
 801cca6:	6a3b      	ldr	r3, [r7, #32]
 801cca8:	4b4b      	ldr	r3, [pc, #300]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccac:	4a4a      	ldr	r2, [pc, #296]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 801ccb2:	6313      	str	r3, [r2, #48]	; 0x30
 801ccb4:	4b48      	ldr	r3, [pc, #288]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccb8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801ccbc:	61fb      	str	r3, [r7, #28]
 801ccbe:	69fb      	ldr	r3, [r7, #28]
 801ccc0:	4b45      	ldr	r3, [pc, #276]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccc4:	4a44      	ldr	r2, [pc, #272]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801ccca:	6313      	str	r3, [r2, #48]	; 0x30
 801cccc:	4b42      	ldr	r3, [pc, #264]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccd0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 801ccd4:	61bb      	str	r3, [r7, #24]
 801ccd6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 801ccd8:	4b3f      	ldr	r3, [pc, #252]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccdc:	4a3e      	ldr	r2, [pc, #248]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccde:	f043 0304 	orr.w	r3, r3, #4
 801cce2:	6313      	str	r3, [r2, #48]	; 0x30
 801cce4:	4b3c      	ldr	r3, [pc, #240]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cce8:	f003 0304 	and.w	r3, r3, #4
 801ccec:	617b      	str	r3, [r7, #20]
 801ccee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801ccf0:	4b39      	ldr	r3, [pc, #228]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801ccf4:	4a38      	ldr	r2, [pc, #224]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccf6:	f043 0301 	orr.w	r3, r3, #1
 801ccfa:	6313      	str	r3, [r2, #48]	; 0x30
 801ccfc:	4b36      	ldr	r3, [pc, #216]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801ccfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd00:	f003 0301 	and.w	r3, r3, #1
 801cd04:	613b      	str	r3, [r7, #16]
 801cd06:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 801cd08:	4b33      	ldr	r3, [pc, #204]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cd0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd0c:	4a32      	ldr	r2, [pc, #200]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cd0e:	f043 0302 	orr.w	r3, r3, #2
 801cd12:	6313      	str	r3, [r2, #48]	; 0x30
 801cd14:	4b30      	ldr	r3, [pc, #192]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cd16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd18:	f003 0302 	and.w	r3, r3, #2
 801cd1c:	60fb      	str	r3, [r7, #12]
 801cd1e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801cd20:	4b2d      	ldr	r3, [pc, #180]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cd22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd24:	4a2c      	ldr	r2, [pc, #176]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cd26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801cd2a:	6313      	str	r3, [r2, #48]	; 0x30
 801cd2c:	4b2a      	ldr	r3, [pc, #168]	; (801cdd8 <HAL_ETH_MspInit+0x16c>)
 801cd2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801cd30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801cd34:	60bb      	str	r3, [r7, #8]
 801cd36:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    PG14     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = ETH_MDC_Pin|ETH_RXD0_Pin|ETH_RXD1_Pin;
 801cd38:	2332      	movs	r3, #50	; 0x32
 801cd3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd3c:	2302      	movs	r3, #2
 801cd3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd40:	2300      	movs	r3, #0
 801cd42:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd44:	2303      	movs	r3, #3
 801cd46:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801cd48:	230b      	movs	r3, #11
 801cd4a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801cd4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd50:	4619      	mov	r1, r3
 801cd52:	4822      	ldr	r0, [pc, #136]	; (801cddc <HAL_ETH_MspInit+0x170>)
 801cd54:	f7fa fdac 	bl	80178b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_REF_CLK_Pin|ETH_MDIO_Pin|ETH_CRS_DV_Pin;
 801cd58:	2386      	movs	r3, #134	; 0x86
 801cd5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd5c:	2302      	movs	r3, #2
 801cd5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd60:	2300      	movs	r3, #0
 801cd62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd64:	2303      	movs	r3, #3
 801cd66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801cd68:	230b      	movs	r3, #11
 801cd6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801cd6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd70:	4619      	mov	r1, r3
 801cd72:	481b      	ldr	r0, [pc, #108]	; (801cde0 <HAL_ETH_MspInit+0x174>)
 801cd74:	f7fa fd9c 	bl	80178b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TX_EN_Pin;
 801cd78:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cd7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cd7e:	2302      	movs	r3, #2
 801cd80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cd82:	2300      	movs	r3, #0
 801cd84:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cd86:	2303      	movs	r3, #3
 801cd88:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801cd8a:	230b      	movs	r3, #11
 801cd8c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(ETH_TX_EN_GPIO_Port, &GPIO_InitStruct);
 801cd8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cd92:	4619      	mov	r1, r3
 801cd94:	4813      	ldr	r0, [pc, #76]	; (801cde4 <HAL_ETH_MspInit+0x178>)
 801cd96:	f7fa fd8b 	bl	80178b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ETH_TXD0_Pin|ETH_TXD1_Pin;
 801cd9a:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 801cd9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801cda0:	2302      	movs	r3, #2
 801cda2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801cda4:	2300      	movs	r3, #0
 801cda6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801cda8:	2303      	movs	r3, #3
 801cdaa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801cdac:	230b      	movs	r3, #11
 801cdae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 801cdb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801cdb4:	4619      	mov	r1, r3
 801cdb6:	480c      	ldr	r0, [pc, #48]	; (801cde8 <HAL_ETH_MspInit+0x17c>)
 801cdb8:	f7fa fd7a 	bl	80178b0 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 1, 0);
 801cdbc:	2200      	movs	r2, #0
 801cdbe:	2101      	movs	r1, #1
 801cdc0:	203d      	movs	r0, #61	; 0x3d
 801cdc2:	f7f9 fa4a 	bl	801625a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 801cdc6:	203d      	movs	r0, #61	; 0x3d
 801cdc8:	f7f9 fa63 	bl	8016292 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 801cdcc:	bf00      	nop
 801cdce:	3738      	adds	r7, #56	; 0x38
 801cdd0:	46bd      	mov	sp, r7
 801cdd2:	bd80      	pop	{r7, pc}
 801cdd4:	40028000 	.word	0x40028000
 801cdd8:	40023800 	.word	0x40023800
 801cddc:	40020800 	.word	0x40020800
 801cde0:	40020000 	.word	0x40020000
 801cde4:	40020400 	.word	0x40020400
 801cde8:	40021800 	.word	0x40021800

0801cdec <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 801cdec:	b580      	push	{r7, lr}
 801cdee:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 801cdf0:	4802      	ldr	r0, [pc, #8]	; (801cdfc <ETH_PHY_IO_Init+0x10>)
 801cdf2:	f7fa f903 	bl	8016ffc <HAL_ETH_SetMDIOClockRange>

  return 0;
 801cdf6:	2300      	movs	r3, #0
}
 801cdf8:	4618      	mov	r0, r3
 801cdfa:	bd80      	pop	{r7, pc}
 801cdfc:	20010654 	.word	0x20010654

0801ce00 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 801ce00:	b480      	push	{r7}
 801ce02:	af00      	add	r7, sp, #0
  return 0;
 801ce04:	2300      	movs	r3, #0
}
 801ce06:	4618      	mov	r0, r3
 801ce08:	46bd      	mov	sp, r7
 801ce0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce0e:	4770      	bx	lr

0801ce10 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 801ce10:	b580      	push	{r7, lr}
 801ce12:	b084      	sub	sp, #16
 801ce14:	af00      	add	r7, sp, #0
 801ce16:	60f8      	str	r0, [r7, #12]
 801ce18:	60b9      	str	r1, [r7, #8]
 801ce1a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 801ce1c:	687b      	ldr	r3, [r7, #4]
 801ce1e:	68ba      	ldr	r2, [r7, #8]
 801ce20:	68f9      	ldr	r1, [r7, #12]
 801ce22:	4807      	ldr	r0, [pc, #28]	; (801ce40 <ETH_PHY_IO_ReadReg+0x30>)
 801ce24:	f7f9 ff52 	bl	8016ccc <HAL_ETH_ReadPHYRegister>
 801ce28:	4603      	mov	r3, r0
 801ce2a:	2b00      	cmp	r3, #0
 801ce2c:	d002      	beq.n	801ce34 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 801ce2e:	f04f 33ff 	mov.w	r3, #4294967295
 801ce32:	e000      	b.n	801ce36 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 801ce34:	2300      	movs	r3, #0
}
 801ce36:	4618      	mov	r0, r3
 801ce38:	3710      	adds	r7, #16
 801ce3a:	46bd      	mov	sp, r7
 801ce3c:	bd80      	pop	{r7, pc}
 801ce3e:	bf00      	nop
 801ce40:	20010654 	.word	0x20010654

0801ce44 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 801ce44:	b580      	push	{r7, lr}
 801ce46:	b084      	sub	sp, #16
 801ce48:	af00      	add	r7, sp, #0
 801ce4a:	60f8      	str	r0, [r7, #12]
 801ce4c:	60b9      	str	r1, [r7, #8]
 801ce4e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 801ce50:	687b      	ldr	r3, [r7, #4]
 801ce52:	68ba      	ldr	r2, [r7, #8]
 801ce54:	68f9      	ldr	r1, [r7, #12]
 801ce56:	4807      	ldr	r0, [pc, #28]	; (801ce74 <ETH_PHY_IO_WriteReg+0x30>)
 801ce58:	f7f9 ff83 	bl	8016d62 <HAL_ETH_WritePHYRegister>
 801ce5c:	4603      	mov	r3, r0
 801ce5e:	2b00      	cmp	r3, #0
 801ce60:	d002      	beq.n	801ce68 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 801ce62:	f04f 33ff 	mov.w	r3, #4294967295
 801ce66:	e000      	b.n	801ce6a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 801ce68:	2300      	movs	r3, #0
}
 801ce6a:	4618      	mov	r0, r3
 801ce6c:	3710      	adds	r7, #16
 801ce6e:	46bd      	mov	sp, r7
 801ce70:	bd80      	pop	{r7, pc}
 801ce72:	bf00      	nop
 801ce74:	20010654 	.word	0x20010654

0801ce78 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 801ce78:	b580      	push	{r7, lr}
 801ce7a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801ce7c:	f7f8 fa0c 	bl	8015298 <HAL_GetTick>
 801ce80:	4603      	mov	r3, r0
}
 801ce82:	4618      	mov	r0, r3
 801ce84:	bd80      	pop	{r7, pc}
	...

0801ce88 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 801ce88:	b580      	push	{r7, lr}
 801ce8a:	b0a0      	sub	sp, #128	; 0x80
 801ce8c:	af00      	add	r7, sp, #0
 801ce8e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 801ce90:	f107 030c 	add.w	r3, r7, #12
 801ce94:	2264      	movs	r2, #100	; 0x64
 801ce96:	2100      	movs	r1, #0
 801ce98:	4618      	mov	r0, r3
 801ce9a:	f005 f91f 	bl	80220dc <memset>
  int32_t PHYLinkState = 0;
 801ce9e:	2300      	movs	r3, #0
 801cea0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 801cea2:	2300      	movs	r3, #0
 801cea4:	67fb      	str	r3, [r7, #124]	; 0x7c
 801cea6:	2300      	movs	r3, #0
 801cea8:	67bb      	str	r3, [r7, #120]	; 0x78
 801ceaa:	2300      	movs	r3, #0
 801ceac:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = DP83848_GetLinkState(&DP83848);
 801ceae:	483a      	ldr	r0, [pc, #232]	; (801cf98 <ethernet_link_check_state+0x110>)
 801ceb0:	f7f8 f90b 	bl	80150ca <DP83848_GetLinkState>
 801ceb4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= DP83848_STATUS_LINK_DOWN))
 801ceb6:	687b      	ldr	r3, [r7, #4]
 801ceb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cebc:	089b      	lsrs	r3, r3, #2
 801cebe:	f003 0301 	and.w	r3, r3, #1
 801cec2:	b2db      	uxtb	r3, r3
 801cec4:	2b00      	cmp	r3, #0
 801cec6:	d00c      	beq.n	801cee2 <ethernet_link_check_state+0x5a>
 801cec8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ceca:	2b01      	cmp	r3, #1
 801cecc:	dc09      	bgt.n	801cee2 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 801cece:	4833      	ldr	r0, [pc, #204]	; (801cf9c <ethernet_link_check_state+0x114>)
 801ced0:	f7f9 fbe3 	bl	801669a <HAL_ETH_Stop>
    netif_set_down(netif);
 801ced4:	6878      	ldr	r0, [r7, #4]
 801ced6:	f001 f84b 	bl	801df70 <netif_set_down>
    netif_set_link_down(netif);
 801ceda:	6878      	ldr	r0, [r7, #4]
 801cedc:	f001 f8ae 	bl	801e03c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 801cee0:	e055      	b.n	801cf8e <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > DP83848_STATUS_LINK_DOWN))
 801cee2:	687b      	ldr	r3, [r7, #4]
 801cee4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801cee8:	f003 0304 	and.w	r3, r3, #4
 801ceec:	2b00      	cmp	r3, #0
 801ceee:	d14e      	bne.n	801cf8e <ethernet_link_check_state+0x106>
 801cef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cef2:	2b01      	cmp	r3, #1
 801cef4:	dd4b      	ble.n	801cf8e <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 801cef6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801cef8:	3b02      	subs	r3, #2
 801cefa:	2b03      	cmp	r3, #3
 801cefc:	d82a      	bhi.n	801cf54 <ethernet_link_check_state+0xcc>
 801cefe:	a201      	add	r2, pc, #4	; (adr r2, 801cf04 <ethernet_link_check_state+0x7c>)
 801cf00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf04:	0801cf15 	.word	0x0801cf15
 801cf08:	0801cf27 	.word	0x0801cf27
 801cf0c:	0801cf37 	.word	0x0801cf37
 801cf10:	0801cf47 	.word	0x0801cf47
      duplex = ETH_FULLDUPLEX_MODE;
 801cf14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cf18:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801cf1a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801cf1e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801cf20:	2301      	movs	r3, #1
 801cf22:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801cf24:	e017      	b.n	801cf56 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801cf26:	2300      	movs	r3, #0
 801cf28:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 801cf2a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 801cf2e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801cf30:	2301      	movs	r3, #1
 801cf32:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801cf34:	e00f      	b.n	801cf56 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 801cf36:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801cf3a:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801cf3c:	2300      	movs	r3, #0
 801cf3e:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801cf40:	2301      	movs	r3, #1
 801cf42:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801cf44:	e007      	b.n	801cf56 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 801cf46:	2300      	movs	r3, #0
 801cf48:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 801cf4a:	2300      	movs	r3, #0
 801cf4c:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 801cf4e:	2301      	movs	r3, #1
 801cf50:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 801cf52:	e000      	b.n	801cf56 <ethernet_link_check_state+0xce>
      break;
 801cf54:	bf00      	nop
    if(linkchanged)
 801cf56:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801cf58:	2b00      	cmp	r3, #0
 801cf5a:	d018      	beq.n	801cf8e <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 801cf5c:	f107 030c 	add.w	r3, r7, #12
 801cf60:	4619      	mov	r1, r3
 801cf62:	480e      	ldr	r0, [pc, #56]	; (801cf9c <ethernet_link_check_state+0x114>)
 801cf64:	f7f9 ff46 	bl	8016df4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 801cf68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801cf6a:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 801cf6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801cf6e:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 801cf70:	f107 030c 	add.w	r3, r7, #12
 801cf74:	4619      	mov	r1, r3
 801cf76:	4809      	ldr	r0, [pc, #36]	; (801cf9c <ethernet_link_check_state+0x114>)
 801cf78:	f7fa f826 	bl	8016fc8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 801cf7c:	4807      	ldr	r0, [pc, #28]	; (801cf9c <ethernet_link_check_state+0x114>)
 801cf7e:	f7f9 fb2d 	bl	80165dc <HAL_ETH_Start>
      netif_set_up(netif);
 801cf82:	6878      	ldr	r0, [r7, #4]
 801cf84:	f000 ff88 	bl	801de98 <netif_set_up>
      netif_set_link_up(netif);
 801cf88:	6878      	ldr	r0, [r7, #4]
 801cf8a:	f001 f823 	bl	801dfd4 <netif_set_link_up>
}
 801cf8e:	bf00      	nop
 801cf90:	3780      	adds	r7, #128	; 0x80
 801cf92:	46bd      	mov	sp, r7
 801cf94:	bd80      	pop	{r7, pc}
 801cf96:	bf00      	nop
 801cf98:	2001073c 	.word	0x2001073c
 801cf9c:	20010654 	.word	0x20010654

0801cfa0 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 801cfa0:	b580      	push	{r7, lr}
 801cfa2:	b086      	sub	sp, #24
 801cfa4:	af02      	add	r7, sp, #8
 801cfa6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
	struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 801cfa8:	4812      	ldr	r0, [pc, #72]	; (801cff4 <HAL_ETH_RxAllocateCallback+0x54>)
 801cfaa:	f000 fca5 	bl	801d8f8 <memp_malloc_pool>
 801cfae:	60f8      	str	r0, [r7, #12]
	if (p)
 801cfb0:	68fb      	ldr	r3, [r7, #12]
 801cfb2:	2b00      	cmp	r3, #0
 801cfb4:	d014      	beq.n	801cfe0 <HAL_ETH_RxAllocateCallback+0x40>
	{
		/* Get the buff from the struct pbuf address. */
		*buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 801cfb6:	68fb      	ldr	r3, [r7, #12]
 801cfb8:	f103 0214 	add.w	r2, r3, #20
 801cfbc:	687b      	ldr	r3, [r7, #4]
 801cfbe:	601a      	str	r2, [r3, #0]
		p->custom_free_function = pbuf_free_custom;
 801cfc0:	68fb      	ldr	r3, [r7, #12]
 801cfc2:	4a0d      	ldr	r2, [pc, #52]	; (801cff8 <HAL_ETH_RxAllocateCallback+0x58>)
 801cfc4:	611a      	str	r2, [r3, #16]
		/* Initialize the struct pbuf.
		 * This must be performed whenever a buffer's allocated because it may be
		 * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
		pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 801cfc6:	687b      	ldr	r3, [r7, #4]
 801cfc8:	681b      	ldr	r3, [r3, #0]
 801cfca:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 801cfce:	9201      	str	r2, [sp, #4]
 801cfd0:	9300      	str	r3, [sp, #0]
 801cfd2:	68fb      	ldr	r3, [r7, #12]
 801cfd4:	2241      	movs	r2, #65	; 0x41
 801cfd6:	2100      	movs	r1, #0
 801cfd8:	2000      	movs	r0, #0
 801cfda:	f001 fa75 	bl	801e4c8 <pbuf_alloced_custom>
	{
		RxAllocStatus = RX_ALLOC_ERROR;
		*buff = NULL;
	}
/* USER CODE END HAL ETH RxAllocateCallback */
}
 801cfde:	e005      	b.n	801cfec <HAL_ETH_RxAllocateCallback+0x4c>
		RxAllocStatus = RX_ALLOC_ERROR;
 801cfe0:	4b06      	ldr	r3, [pc, #24]	; (801cffc <HAL_ETH_RxAllocateCallback+0x5c>)
 801cfe2:	2201      	movs	r2, #1
 801cfe4:	701a      	strb	r2, [r3, #0]
		*buff = NULL;
 801cfe6:	687b      	ldr	r3, [r7, #4]
 801cfe8:	2200      	movs	r2, #0
 801cfea:	601a      	str	r2, [r3, #0]
}
 801cfec:	bf00      	nop
 801cfee:	3710      	adds	r7, #16
 801cff0:	46bd      	mov	sp, r7
 801cff2:	bd80      	pop	{r7, pc}
 801cff4:	08028b48 	.word	0x08028b48
 801cff8:	0801cc29 	.word	0x0801cc29
 801cffc:	20010650 	.word	0x20010650

0801d000 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 801d000:	b580      	push	{r7, lr}
 801d002:	b088      	sub	sp, #32
 801d004:	af00      	add	r7, sp, #0
 801d006:	60f8      	str	r0, [r7, #12]
 801d008:	60b9      	str	r1, [r7, #8]
 801d00a:	607a      	str	r2, [r7, #4]
 801d00c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

	struct pbuf **ppStart = (struct pbuf **)pStart;
 801d00e:	68fb      	ldr	r3, [r7, #12]
 801d010:	61bb      	str	r3, [r7, #24]
	struct pbuf **ppEnd = (struct pbuf **)pEnd;
 801d012:	68bb      	ldr	r3, [r7, #8]
 801d014:	617b      	str	r3, [r7, #20]
	struct pbuf *p = NULL;
 801d016:	2300      	movs	r3, #0
 801d018:	61fb      	str	r3, [r7, #28]

	/* Get the struct pbuf from the buff address. */
	p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 801d01a:	687b      	ldr	r3, [r7, #4]
 801d01c:	3b14      	subs	r3, #20
 801d01e:	61fb      	str	r3, [r7, #28]
	p->next = NULL;
 801d020:	69fb      	ldr	r3, [r7, #28]
 801d022:	2200      	movs	r2, #0
 801d024:	601a      	str	r2, [r3, #0]
	p->tot_len = 0;
 801d026:	69fb      	ldr	r3, [r7, #28]
 801d028:	2200      	movs	r2, #0
 801d02a:	811a      	strh	r2, [r3, #8]
	p->len = Length;
 801d02c:	69fb      	ldr	r3, [r7, #28]
 801d02e:	887a      	ldrh	r2, [r7, #2]
 801d030:	815a      	strh	r2, [r3, #10]

	/* Chain the buffer. */
	if (!*ppStart)
 801d032:	69bb      	ldr	r3, [r7, #24]
 801d034:	681b      	ldr	r3, [r3, #0]
 801d036:	2b00      	cmp	r3, #0
 801d038:	d103      	bne.n	801d042 <HAL_ETH_RxLinkCallback+0x42>
	{
		/* The first buffer of the packet. */
		*ppStart = p;
 801d03a:	69bb      	ldr	r3, [r7, #24]
 801d03c:	69fa      	ldr	r2, [r7, #28]
 801d03e:	601a      	str	r2, [r3, #0]
 801d040:	e003      	b.n	801d04a <HAL_ETH_RxLinkCallback+0x4a>
	}
	else
	{
		/* Chain the buffer to the end of the packet. */
		(*ppEnd)->next = p;
 801d042:	697b      	ldr	r3, [r7, #20]
 801d044:	681b      	ldr	r3, [r3, #0]
 801d046:	69fa      	ldr	r2, [r7, #28]
 801d048:	601a      	str	r2, [r3, #0]
	}
	*ppEnd  = p;
 801d04a:	697b      	ldr	r3, [r7, #20]
 801d04c:	69fa      	ldr	r2, [r7, #28]
 801d04e:	601a      	str	r2, [r3, #0]

	/* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
	 * set to its own length, plus the length of all the following pbufs in the chain. */
	for (p = *ppStart; p != NULL; p = p->next)
 801d050:	69bb      	ldr	r3, [r7, #24]
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	61fb      	str	r3, [r7, #28]
 801d056:	e009      	b.n	801d06c <HAL_ETH_RxLinkCallback+0x6c>
	{
		p->tot_len += Length;
 801d058:	69fb      	ldr	r3, [r7, #28]
 801d05a:	891a      	ldrh	r2, [r3, #8]
 801d05c:	887b      	ldrh	r3, [r7, #2]
 801d05e:	4413      	add	r3, r2
 801d060:	b29a      	uxth	r2, r3
 801d062:	69fb      	ldr	r3, [r7, #28]
 801d064:	811a      	strh	r2, [r3, #8]
	for (p = *ppStart; p != NULL; p = p->next)
 801d066:	69fb      	ldr	r3, [r7, #28]
 801d068:	681b      	ldr	r3, [r3, #0]
 801d06a:	61fb      	str	r3, [r7, #28]
 801d06c:	69fb      	ldr	r3, [r7, #28]
 801d06e:	2b00      	cmp	r3, #0
 801d070:	d1f2      	bne.n	801d058 <HAL_ETH_RxLinkCallback+0x58>
	}

	/* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
	SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 801d072:	887b      	ldrh	r3, [r7, #2]
 801d074:	4619      	mov	r1, r3
 801d076:	6878      	ldr	r0, [r7, #4]
 801d078:	f7ff fc14 	bl	801c8a4 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 801d07c:	bf00      	nop
 801d07e:	3720      	adds	r7, #32
 801d080:	46bd      	mov	sp, r7
 801d082:	bd80      	pop	{r7, pc}

0801d084 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801d084:	b480      	push	{r7}
 801d086:	b083      	sub	sp, #12
 801d088:	af00      	add	r7, sp, #0
 801d08a:	4603      	mov	r3, r0
 801d08c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 801d08e:	88fb      	ldrh	r3, [r7, #6]
 801d090:	021b      	lsls	r3, r3, #8
 801d092:	b21a      	sxth	r2, r3
 801d094:	88fb      	ldrh	r3, [r7, #6]
 801d096:	0a1b      	lsrs	r3, r3, #8
 801d098:	b29b      	uxth	r3, r3
 801d09a:	b21b      	sxth	r3, r3
 801d09c:	4313      	orrs	r3, r2
 801d09e:	b21b      	sxth	r3, r3
 801d0a0:	b29b      	uxth	r3, r3
}
 801d0a2:	4618      	mov	r0, r3
 801d0a4:	370c      	adds	r7, #12
 801d0a6:	46bd      	mov	sp, r7
 801d0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0ac:	4770      	bx	lr

0801d0ae <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 801d0ae:	b580      	push	{r7, lr}
 801d0b0:	b082      	sub	sp, #8
 801d0b2:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801d0b4:	2300      	movs	r3, #0
 801d0b6:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 801d0b8:	f000 f8d2 	bl	801d260 <mem_init>
  memp_init();
 801d0bc:	f000 fbd8 	bl	801d870 <memp_init>
  pbuf_init();
  netif_init();
 801d0c0:	f000 fcfc 	bl	801dabc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801d0c4:	f001 ff9a 	bl	801effc <udp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 801d0c8:	f001 ff16 	bl	801eef8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 801d0cc:	bf00      	nop
 801d0ce:	3708      	adds	r7, #8
 801d0d0:	46bd      	mov	sp, r7
 801d0d2:	bd80      	pop	{r7, pc}

0801d0d4 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 801d0d4:	b480      	push	{r7}
 801d0d6:	b083      	sub	sp, #12
 801d0d8:	af00      	add	r7, sp, #0
 801d0da:	4603      	mov	r3, r0
 801d0dc:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801d0de:	4b05      	ldr	r3, [pc, #20]	; (801d0f4 <ptr_to_mem+0x20>)
 801d0e0:	681a      	ldr	r2, [r3, #0]
 801d0e2:	88fb      	ldrh	r3, [r7, #6]
 801d0e4:	4413      	add	r3, r2
}
 801d0e6:	4618      	mov	r0, r3
 801d0e8:	370c      	adds	r7, #12
 801d0ea:	46bd      	mov	sp, r7
 801d0ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d0f0:	4770      	bx	lr
 801d0f2:	bf00      	nop
 801d0f4:	20010dc8 	.word	0x20010dc8

0801d0f8 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 801d0f8:	b480      	push	{r7}
 801d0fa:	b083      	sub	sp, #12
 801d0fc:	af00      	add	r7, sp, #0
 801d0fe:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801d100:	4b05      	ldr	r3, [pc, #20]	; (801d118 <mem_to_ptr+0x20>)
 801d102:	681b      	ldr	r3, [r3, #0]
 801d104:	687a      	ldr	r2, [r7, #4]
 801d106:	1ad3      	subs	r3, r2, r3
 801d108:	b29b      	uxth	r3, r3
}
 801d10a:	4618      	mov	r0, r3
 801d10c:	370c      	adds	r7, #12
 801d10e:	46bd      	mov	sp, r7
 801d110:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d114:	4770      	bx	lr
 801d116:	bf00      	nop
 801d118:	20010dc8 	.word	0x20010dc8

0801d11c <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 801d11c:	b590      	push	{r4, r7, lr}
 801d11e:	b085      	sub	sp, #20
 801d120:	af00      	add	r7, sp, #0
 801d122:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 801d124:	4b45      	ldr	r3, [pc, #276]	; (801d23c <plug_holes+0x120>)
 801d126:	681b      	ldr	r3, [r3, #0]
 801d128:	687a      	ldr	r2, [r7, #4]
 801d12a:	429a      	cmp	r2, r3
 801d12c:	d206      	bcs.n	801d13c <plug_holes+0x20>
 801d12e:	4b44      	ldr	r3, [pc, #272]	; (801d240 <plug_holes+0x124>)
 801d130:	f240 12df 	movw	r2, #479	; 0x1df
 801d134:	4943      	ldr	r1, [pc, #268]	; (801d244 <plug_holes+0x128>)
 801d136:	4844      	ldr	r0, [pc, #272]	; (801d248 <plug_holes+0x12c>)
 801d138:	f005 f8b8 	bl	80222ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 801d13c:	4b43      	ldr	r3, [pc, #268]	; (801d24c <plug_holes+0x130>)
 801d13e:	681b      	ldr	r3, [r3, #0]
 801d140:	687a      	ldr	r2, [r7, #4]
 801d142:	429a      	cmp	r2, r3
 801d144:	d306      	bcc.n	801d154 <plug_holes+0x38>
 801d146:	4b3e      	ldr	r3, [pc, #248]	; (801d240 <plug_holes+0x124>)
 801d148:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801d14c:	4940      	ldr	r1, [pc, #256]	; (801d250 <plug_holes+0x134>)
 801d14e:	483e      	ldr	r0, [pc, #248]	; (801d248 <plug_holes+0x12c>)
 801d150:	f005 f8ac 	bl	80222ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 801d154:	687b      	ldr	r3, [r7, #4]
 801d156:	791b      	ldrb	r3, [r3, #4]
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d006      	beq.n	801d16a <plug_holes+0x4e>
 801d15c:	4b38      	ldr	r3, [pc, #224]	; (801d240 <plug_holes+0x124>)
 801d15e:	f240 12e1 	movw	r2, #481	; 0x1e1
 801d162:	493c      	ldr	r1, [pc, #240]	; (801d254 <plug_holes+0x138>)
 801d164:	4838      	ldr	r0, [pc, #224]	; (801d248 <plug_holes+0x12c>)
 801d166:	f005 f8a1 	bl	80222ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801d16a:	687b      	ldr	r3, [r7, #4]
 801d16c:	881b      	ldrh	r3, [r3, #0]
 801d16e:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d172:	d906      	bls.n	801d182 <plug_holes+0x66>
 801d174:	4b32      	ldr	r3, [pc, #200]	; (801d240 <plug_holes+0x124>)
 801d176:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801d17a:	4937      	ldr	r1, [pc, #220]	; (801d258 <plug_holes+0x13c>)
 801d17c:	4832      	ldr	r0, [pc, #200]	; (801d248 <plug_holes+0x12c>)
 801d17e:	f005 f895 	bl	80222ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 801d182:	687b      	ldr	r3, [r7, #4]
 801d184:	881b      	ldrh	r3, [r3, #0]
 801d186:	4618      	mov	r0, r3
 801d188:	f7ff ffa4 	bl	801d0d4 <ptr_to_mem>
 801d18c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801d18e:	687a      	ldr	r2, [r7, #4]
 801d190:	68fb      	ldr	r3, [r7, #12]
 801d192:	429a      	cmp	r2, r3
 801d194:	d024      	beq.n	801d1e0 <plug_holes+0xc4>
 801d196:	68fb      	ldr	r3, [r7, #12]
 801d198:	791b      	ldrb	r3, [r3, #4]
 801d19a:	2b00      	cmp	r3, #0
 801d19c:	d120      	bne.n	801d1e0 <plug_holes+0xc4>
 801d19e:	4b2b      	ldr	r3, [pc, #172]	; (801d24c <plug_holes+0x130>)
 801d1a0:	681b      	ldr	r3, [r3, #0]
 801d1a2:	68fa      	ldr	r2, [r7, #12]
 801d1a4:	429a      	cmp	r2, r3
 801d1a6:	d01b      	beq.n	801d1e0 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801d1a8:	4b2c      	ldr	r3, [pc, #176]	; (801d25c <plug_holes+0x140>)
 801d1aa:	681b      	ldr	r3, [r3, #0]
 801d1ac:	68fa      	ldr	r2, [r7, #12]
 801d1ae:	429a      	cmp	r2, r3
 801d1b0:	d102      	bne.n	801d1b8 <plug_holes+0x9c>
      lfree = mem;
 801d1b2:	4a2a      	ldr	r2, [pc, #168]	; (801d25c <plug_holes+0x140>)
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 801d1b8:	68fb      	ldr	r3, [r7, #12]
 801d1ba:	881a      	ldrh	r2, [r3, #0]
 801d1bc:	687b      	ldr	r3, [r7, #4]
 801d1be:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801d1c0:	68fb      	ldr	r3, [r7, #12]
 801d1c2:	881b      	ldrh	r3, [r3, #0]
 801d1c4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d1c8:	d00a      	beq.n	801d1e0 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801d1ca:	68fb      	ldr	r3, [r7, #12]
 801d1cc:	881b      	ldrh	r3, [r3, #0]
 801d1ce:	4618      	mov	r0, r3
 801d1d0:	f7ff ff80 	bl	801d0d4 <ptr_to_mem>
 801d1d4:	4604      	mov	r4, r0
 801d1d6:	6878      	ldr	r0, [r7, #4]
 801d1d8:	f7ff ff8e 	bl	801d0f8 <mem_to_ptr>
 801d1dc:	4603      	mov	r3, r0
 801d1de:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 801d1e0:	687b      	ldr	r3, [r7, #4]
 801d1e2:	885b      	ldrh	r3, [r3, #2]
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f7ff ff75 	bl	801d0d4 <ptr_to_mem>
 801d1ea:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801d1ec:	68ba      	ldr	r2, [r7, #8]
 801d1ee:	687b      	ldr	r3, [r7, #4]
 801d1f0:	429a      	cmp	r2, r3
 801d1f2:	d01f      	beq.n	801d234 <plug_holes+0x118>
 801d1f4:	68bb      	ldr	r3, [r7, #8]
 801d1f6:	791b      	ldrb	r3, [r3, #4]
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	d11b      	bne.n	801d234 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801d1fc:	4b17      	ldr	r3, [pc, #92]	; (801d25c <plug_holes+0x140>)
 801d1fe:	681b      	ldr	r3, [r3, #0]
 801d200:	687a      	ldr	r2, [r7, #4]
 801d202:	429a      	cmp	r2, r3
 801d204:	d102      	bne.n	801d20c <plug_holes+0xf0>
      lfree = pmem;
 801d206:	4a15      	ldr	r2, [pc, #84]	; (801d25c <plug_holes+0x140>)
 801d208:	68bb      	ldr	r3, [r7, #8]
 801d20a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801d20c:	687b      	ldr	r3, [r7, #4]
 801d20e:	881a      	ldrh	r2, [r3, #0]
 801d210:	68bb      	ldr	r3, [r7, #8]
 801d212:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	881b      	ldrh	r3, [r3, #0]
 801d218:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d21c:	d00a      	beq.n	801d234 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 801d21e:	687b      	ldr	r3, [r7, #4]
 801d220:	881b      	ldrh	r3, [r3, #0]
 801d222:	4618      	mov	r0, r3
 801d224:	f7ff ff56 	bl	801d0d4 <ptr_to_mem>
 801d228:	4604      	mov	r4, r0
 801d22a:	68b8      	ldr	r0, [r7, #8]
 801d22c:	f7ff ff64 	bl	801d0f8 <mem_to_ptr>
 801d230:	4603      	mov	r3, r0
 801d232:	8063      	strh	r3, [r4, #2]
    }
  }
}
 801d234:	bf00      	nop
 801d236:	3714      	adds	r7, #20
 801d238:	46bd      	mov	sp, r7
 801d23a:	bd90      	pop	{r4, r7, pc}
 801d23c:	20010dc8 	.word	0x20010dc8
 801d240:	08026ef4 	.word	0x08026ef4
 801d244:	08026f54 	.word	0x08026f54
 801d248:	08026f6c 	.word	0x08026f6c
 801d24c:	20010dcc 	.word	0x20010dcc
 801d250:	08026f94 	.word	0x08026f94
 801d254:	08026fb0 	.word	0x08026fb0
 801d258:	08026fcc 	.word	0x08026fcc
 801d25c:	20010dd0 	.word	0x20010dd0

0801d260 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b082      	sub	sp, #8
 801d264:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801d266:	4b18      	ldr	r3, [pc, #96]	; (801d2c8 <mem_init+0x68>)
 801d268:	3303      	adds	r3, #3
 801d26a:	f023 0303 	bic.w	r3, r3, #3
 801d26e:	461a      	mov	r2, r3
 801d270:	4b16      	ldr	r3, [pc, #88]	; (801d2cc <mem_init+0x6c>)
 801d272:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 801d274:	4b15      	ldr	r3, [pc, #84]	; (801d2cc <mem_init+0x6c>)
 801d276:	681b      	ldr	r3, [r3, #0]
 801d278:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801d27a:	687b      	ldr	r3, [r7, #4]
 801d27c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d280:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 801d282:	687b      	ldr	r3, [r7, #4]
 801d284:	2200      	movs	r2, #0
 801d286:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801d288:	687b      	ldr	r3, [r7, #4]
 801d28a:	2200      	movs	r2, #0
 801d28c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 801d28e:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 801d292:	f7ff ff1f 	bl	801d0d4 <ptr_to_mem>
 801d296:	4603      	mov	r3, r0
 801d298:	4a0d      	ldr	r2, [pc, #52]	; (801d2d0 <mem_init+0x70>)
 801d29a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 801d29c:	4b0c      	ldr	r3, [pc, #48]	; (801d2d0 <mem_init+0x70>)
 801d29e:	681b      	ldr	r3, [r3, #0]
 801d2a0:	2201      	movs	r2, #1
 801d2a2:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 801d2a4:	4b0a      	ldr	r3, [pc, #40]	; (801d2d0 <mem_init+0x70>)
 801d2a6:	681b      	ldr	r3, [r3, #0]
 801d2a8:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d2ac:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 801d2ae:	4b08      	ldr	r3, [pc, #32]	; (801d2d0 <mem_init+0x70>)
 801d2b0:	681b      	ldr	r3, [r3, #0]
 801d2b2:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 801d2b6:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801d2b8:	4b04      	ldr	r3, [pc, #16]	; (801d2cc <mem_init+0x6c>)
 801d2ba:	681b      	ldr	r3, [r3, #0]
 801d2bc:	4a05      	ldr	r2, [pc, #20]	; (801d2d4 <mem_init+0x74>)
 801d2be:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 801d2c0:	bf00      	nop
 801d2c2:	3708      	adds	r7, #8
 801d2c4:	46bd      	mov	sp, r7
 801d2c6:	bd80      	pop	{r7, pc}
 801d2c8:	20010774 	.word	0x20010774
 801d2cc:	20010dc8 	.word	0x20010dc8
 801d2d0:	20010dcc 	.word	0x20010dcc
 801d2d4:	20010dd0 	.word	0x20010dd0

0801d2d8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 801d2d8:	b580      	push	{r7, lr}
 801d2da:	b086      	sub	sp, #24
 801d2dc:	af00      	add	r7, sp, #0
 801d2de:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 801d2e0:	6878      	ldr	r0, [r7, #4]
 801d2e2:	f7ff ff09 	bl	801d0f8 <mem_to_ptr>
 801d2e6:	4603      	mov	r3, r0
 801d2e8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801d2ea:	687b      	ldr	r3, [r7, #4]
 801d2ec:	881b      	ldrh	r3, [r3, #0]
 801d2ee:	4618      	mov	r0, r3
 801d2f0:	f7ff fef0 	bl	801d0d4 <ptr_to_mem>
 801d2f4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801d2f6:	687b      	ldr	r3, [r7, #4]
 801d2f8:	885b      	ldrh	r3, [r3, #2]
 801d2fa:	4618      	mov	r0, r3
 801d2fc:	f7ff feea 	bl	801d0d4 <ptr_to_mem>
 801d300:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d302:	687b      	ldr	r3, [r7, #4]
 801d304:	881b      	ldrh	r3, [r3, #0]
 801d306:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d30a:	d818      	bhi.n	801d33e <mem_link_valid+0x66>
 801d30c:	687b      	ldr	r3, [r7, #4]
 801d30e:	885b      	ldrh	r3, [r3, #2]
 801d310:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d314:	d813      	bhi.n	801d33e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d316:	687b      	ldr	r3, [r7, #4]
 801d318:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801d31a:	8afa      	ldrh	r2, [r7, #22]
 801d31c:	429a      	cmp	r2, r3
 801d31e:	d004      	beq.n	801d32a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d320:	68fb      	ldr	r3, [r7, #12]
 801d322:	881b      	ldrh	r3, [r3, #0]
 801d324:	8afa      	ldrh	r2, [r7, #22]
 801d326:	429a      	cmp	r2, r3
 801d328:	d109      	bne.n	801d33e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d32a:	4b08      	ldr	r3, [pc, #32]	; (801d34c <mem_link_valid+0x74>)
 801d32c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801d32e:	693a      	ldr	r2, [r7, #16]
 801d330:	429a      	cmp	r2, r3
 801d332:	d006      	beq.n	801d342 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801d334:	693b      	ldr	r3, [r7, #16]
 801d336:	885b      	ldrh	r3, [r3, #2]
 801d338:	8afa      	ldrh	r2, [r7, #22]
 801d33a:	429a      	cmp	r2, r3
 801d33c:	d001      	beq.n	801d342 <mem_link_valid+0x6a>
    return 0;
 801d33e:	2300      	movs	r3, #0
 801d340:	e000      	b.n	801d344 <mem_link_valid+0x6c>
  }
  return 1;
 801d342:	2301      	movs	r3, #1
}
 801d344:	4618      	mov	r0, r3
 801d346:	3718      	adds	r7, #24
 801d348:	46bd      	mov	sp, r7
 801d34a:	bd80      	pop	{r7, pc}
 801d34c:	20010dcc 	.word	0x20010dcc

0801d350 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 801d350:	b580      	push	{r7, lr}
 801d352:	b084      	sub	sp, #16
 801d354:	af00      	add	r7, sp, #0
 801d356:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801d358:	687b      	ldr	r3, [r7, #4]
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	d04c      	beq.n	801d3f8 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801d35e:	687b      	ldr	r3, [r7, #4]
 801d360:	f003 0303 	and.w	r3, r3, #3
 801d364:	2b00      	cmp	r3, #0
 801d366:	d007      	beq.n	801d378 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801d368:	4b25      	ldr	r3, [pc, #148]	; (801d400 <mem_free+0xb0>)
 801d36a:	f240 2273 	movw	r2, #627	; 0x273
 801d36e:	4925      	ldr	r1, [pc, #148]	; (801d404 <mem_free+0xb4>)
 801d370:	4825      	ldr	r0, [pc, #148]	; (801d408 <mem_free+0xb8>)
 801d372:	f004 ff9b 	bl	80222ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d376:	e040      	b.n	801d3fa <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d378:	687b      	ldr	r3, [r7, #4]
 801d37a:	3b08      	subs	r3, #8
 801d37c:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801d37e:	4b23      	ldr	r3, [pc, #140]	; (801d40c <mem_free+0xbc>)
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	68fa      	ldr	r2, [r7, #12]
 801d384:	429a      	cmp	r2, r3
 801d386:	d306      	bcc.n	801d396 <mem_free+0x46>
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	f103 020c 	add.w	r2, r3, #12
 801d38e:	4b20      	ldr	r3, [pc, #128]	; (801d410 <mem_free+0xc0>)
 801d390:	681b      	ldr	r3, [r3, #0]
 801d392:	429a      	cmp	r2, r3
 801d394:	d907      	bls.n	801d3a6 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 801d396:	4b1a      	ldr	r3, [pc, #104]	; (801d400 <mem_free+0xb0>)
 801d398:	f240 227f 	movw	r2, #639	; 0x27f
 801d39c:	491d      	ldr	r1, [pc, #116]	; (801d414 <mem_free+0xc4>)
 801d39e:	481a      	ldr	r0, [pc, #104]	; (801d408 <mem_free+0xb8>)
 801d3a0:	f004 ff84 	bl	80222ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d3a4:	e029      	b.n	801d3fa <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 801d3a6:	68fb      	ldr	r3, [r7, #12]
 801d3a8:	791b      	ldrb	r3, [r3, #4]
 801d3aa:	2b00      	cmp	r3, #0
 801d3ac:	d107      	bne.n	801d3be <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801d3ae:	4b14      	ldr	r3, [pc, #80]	; (801d400 <mem_free+0xb0>)
 801d3b0:	f44f 7223 	mov.w	r2, #652	; 0x28c
 801d3b4:	4918      	ldr	r1, [pc, #96]	; (801d418 <mem_free+0xc8>)
 801d3b6:	4814      	ldr	r0, [pc, #80]	; (801d408 <mem_free+0xb8>)
 801d3b8:	f004 ff78 	bl	80222ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d3bc:	e01d      	b.n	801d3fa <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801d3be:	68f8      	ldr	r0, [r7, #12]
 801d3c0:	f7ff ff8a 	bl	801d2d8 <mem_link_valid>
 801d3c4:	4603      	mov	r3, r0
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d107      	bne.n	801d3da <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 801d3ca:	4b0d      	ldr	r3, [pc, #52]	; (801d400 <mem_free+0xb0>)
 801d3cc:	f240 2295 	movw	r2, #661	; 0x295
 801d3d0:	4912      	ldr	r1, [pc, #72]	; (801d41c <mem_free+0xcc>)
 801d3d2:	480d      	ldr	r0, [pc, #52]	; (801d408 <mem_free+0xb8>)
 801d3d4:	f004 ff6a 	bl	80222ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 801d3d8:	e00f      	b.n	801d3fa <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 801d3da:	68fb      	ldr	r3, [r7, #12]
 801d3dc:	2200      	movs	r2, #0
 801d3de:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 801d3e0:	4b0f      	ldr	r3, [pc, #60]	; (801d420 <mem_free+0xd0>)
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	68fa      	ldr	r2, [r7, #12]
 801d3e6:	429a      	cmp	r2, r3
 801d3e8:	d202      	bcs.n	801d3f0 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 801d3ea:	4a0d      	ldr	r2, [pc, #52]	; (801d420 <mem_free+0xd0>)
 801d3ec:	68fb      	ldr	r3, [r7, #12]
 801d3ee:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801d3f0:	68f8      	ldr	r0, [r7, #12]
 801d3f2:	f7ff fe93 	bl	801d11c <plug_holes>
 801d3f6:	e000      	b.n	801d3fa <mem_free+0xaa>
    return;
 801d3f8:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 801d3fa:	3710      	adds	r7, #16
 801d3fc:	46bd      	mov	sp, r7
 801d3fe:	bd80      	pop	{r7, pc}
 801d400:	08026ef4 	.word	0x08026ef4
 801d404:	08026ff8 	.word	0x08026ff8
 801d408:	08026f6c 	.word	0x08026f6c
 801d40c:	20010dc8 	.word	0x20010dc8
 801d410:	20010dcc 	.word	0x20010dcc
 801d414:	0802701c 	.word	0x0802701c
 801d418:	08027038 	.word	0x08027038
 801d41c:	08027060 	.word	0x08027060
 801d420:	20010dd0 	.word	0x20010dd0

0801d424 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 801d424:	b580      	push	{r7, lr}
 801d426:	b088      	sub	sp, #32
 801d428:	af00      	add	r7, sp, #0
 801d42a:	6078      	str	r0, [r7, #4]
 801d42c:	460b      	mov	r3, r1
 801d42e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 801d430:	887b      	ldrh	r3, [r7, #2]
 801d432:	3303      	adds	r3, #3
 801d434:	b29b      	uxth	r3, r3
 801d436:	f023 0303 	bic.w	r3, r3, #3
 801d43a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801d43c:	8bfb      	ldrh	r3, [r7, #30]
 801d43e:	2b0b      	cmp	r3, #11
 801d440:	d801      	bhi.n	801d446 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 801d442:	230c      	movs	r3, #12
 801d444:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 801d446:	8bfb      	ldrh	r3, [r7, #30]
 801d448:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d44c:	d803      	bhi.n	801d456 <mem_trim+0x32>
 801d44e:	8bfa      	ldrh	r2, [r7, #30]
 801d450:	887b      	ldrh	r3, [r7, #2]
 801d452:	429a      	cmp	r2, r3
 801d454:	d201      	bcs.n	801d45a <mem_trim+0x36>
    return NULL;
 801d456:	2300      	movs	r3, #0
 801d458:	e0cc      	b.n	801d5f4 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801d45a:	4b68      	ldr	r3, [pc, #416]	; (801d5fc <mem_trim+0x1d8>)
 801d45c:	681b      	ldr	r3, [r3, #0]
 801d45e:	687a      	ldr	r2, [r7, #4]
 801d460:	429a      	cmp	r2, r3
 801d462:	d304      	bcc.n	801d46e <mem_trim+0x4a>
 801d464:	4b66      	ldr	r3, [pc, #408]	; (801d600 <mem_trim+0x1dc>)
 801d466:	681b      	ldr	r3, [r3, #0]
 801d468:	687a      	ldr	r2, [r7, #4]
 801d46a:	429a      	cmp	r2, r3
 801d46c:	d306      	bcc.n	801d47c <mem_trim+0x58>
 801d46e:	4b65      	ldr	r3, [pc, #404]	; (801d604 <mem_trim+0x1e0>)
 801d470:	f240 22d1 	movw	r2, #721	; 0x2d1
 801d474:	4964      	ldr	r1, [pc, #400]	; (801d608 <mem_trim+0x1e4>)
 801d476:	4865      	ldr	r0, [pc, #404]	; (801d60c <mem_trim+0x1e8>)
 801d478:	f004 ff18 	bl	80222ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801d47c:	4b5f      	ldr	r3, [pc, #380]	; (801d5fc <mem_trim+0x1d8>)
 801d47e:	681b      	ldr	r3, [r3, #0]
 801d480:	687a      	ldr	r2, [r7, #4]
 801d482:	429a      	cmp	r2, r3
 801d484:	d304      	bcc.n	801d490 <mem_trim+0x6c>
 801d486:	4b5e      	ldr	r3, [pc, #376]	; (801d600 <mem_trim+0x1dc>)
 801d488:	681b      	ldr	r3, [r3, #0]
 801d48a:	687a      	ldr	r2, [r7, #4]
 801d48c:	429a      	cmp	r2, r3
 801d48e:	d301      	bcc.n	801d494 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 801d490:	687b      	ldr	r3, [r7, #4]
 801d492:	e0af      	b.n	801d5f4 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801d494:	687b      	ldr	r3, [r7, #4]
 801d496:	3b08      	subs	r3, #8
 801d498:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 801d49a:	69b8      	ldr	r0, [r7, #24]
 801d49c:	f7ff fe2c 	bl	801d0f8 <mem_to_ptr>
 801d4a0:	4603      	mov	r3, r0
 801d4a2:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801d4a4:	69bb      	ldr	r3, [r7, #24]
 801d4a6:	881a      	ldrh	r2, [r3, #0]
 801d4a8:	8afb      	ldrh	r3, [r7, #22]
 801d4aa:	1ad3      	subs	r3, r2, r3
 801d4ac:	b29b      	uxth	r3, r3
 801d4ae:	3b08      	subs	r3, #8
 801d4b0:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 801d4b2:	8bfa      	ldrh	r2, [r7, #30]
 801d4b4:	8abb      	ldrh	r3, [r7, #20]
 801d4b6:	429a      	cmp	r2, r3
 801d4b8:	d906      	bls.n	801d4c8 <mem_trim+0xa4>
 801d4ba:	4b52      	ldr	r3, [pc, #328]	; (801d604 <mem_trim+0x1e0>)
 801d4bc:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 801d4c0:	4953      	ldr	r1, [pc, #332]	; (801d610 <mem_trim+0x1ec>)
 801d4c2:	4852      	ldr	r0, [pc, #328]	; (801d60c <mem_trim+0x1e8>)
 801d4c4:	f004 fef2 	bl	80222ac <iprintf>
  if (newsize > size) {
 801d4c8:	8bfa      	ldrh	r2, [r7, #30]
 801d4ca:	8abb      	ldrh	r3, [r7, #20]
 801d4cc:	429a      	cmp	r2, r3
 801d4ce:	d901      	bls.n	801d4d4 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 801d4d0:	2300      	movs	r3, #0
 801d4d2:	e08f      	b.n	801d5f4 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 801d4d4:	8bfa      	ldrh	r2, [r7, #30]
 801d4d6:	8abb      	ldrh	r3, [r7, #20]
 801d4d8:	429a      	cmp	r2, r3
 801d4da:	d101      	bne.n	801d4e0 <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 801d4dc:	687b      	ldr	r3, [r7, #4]
 801d4de:	e089      	b.n	801d5f4 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 801d4e0:	69bb      	ldr	r3, [r7, #24]
 801d4e2:	881b      	ldrh	r3, [r3, #0]
 801d4e4:	4618      	mov	r0, r3
 801d4e6:	f7ff fdf5 	bl	801d0d4 <ptr_to_mem>
 801d4ea:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 801d4ec:	693b      	ldr	r3, [r7, #16]
 801d4ee:	791b      	ldrb	r3, [r3, #4]
 801d4f0:	2b00      	cmp	r3, #0
 801d4f2:	d13f      	bne.n	801d574 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d4f4:	69bb      	ldr	r3, [r7, #24]
 801d4f6:	881b      	ldrh	r3, [r3, #0]
 801d4f8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d4fc:	d106      	bne.n	801d50c <mem_trim+0xe8>
 801d4fe:	4b41      	ldr	r3, [pc, #260]	; (801d604 <mem_trim+0x1e0>)
 801d500:	f240 22f5 	movw	r2, #757	; 0x2f5
 801d504:	4943      	ldr	r1, [pc, #268]	; (801d614 <mem_trim+0x1f0>)
 801d506:	4841      	ldr	r0, [pc, #260]	; (801d60c <mem_trim+0x1e8>)
 801d508:	f004 fed0 	bl	80222ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 801d50c:	693b      	ldr	r3, [r7, #16]
 801d50e:	881b      	ldrh	r3, [r3, #0]
 801d510:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d512:	8afa      	ldrh	r2, [r7, #22]
 801d514:	8bfb      	ldrh	r3, [r7, #30]
 801d516:	4413      	add	r3, r2
 801d518:	b29b      	uxth	r3, r3
 801d51a:	3308      	adds	r3, #8
 801d51c:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 801d51e:	4b3e      	ldr	r3, [pc, #248]	; (801d618 <mem_trim+0x1f4>)
 801d520:	681b      	ldr	r3, [r3, #0]
 801d522:	693a      	ldr	r2, [r7, #16]
 801d524:	429a      	cmp	r2, r3
 801d526:	d106      	bne.n	801d536 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 801d528:	89fb      	ldrh	r3, [r7, #14]
 801d52a:	4618      	mov	r0, r3
 801d52c:	f7ff fdd2 	bl	801d0d4 <ptr_to_mem>
 801d530:	4603      	mov	r3, r0
 801d532:	4a39      	ldr	r2, [pc, #228]	; (801d618 <mem_trim+0x1f4>)
 801d534:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801d536:	89fb      	ldrh	r3, [r7, #14]
 801d538:	4618      	mov	r0, r3
 801d53a:	f7ff fdcb 	bl	801d0d4 <ptr_to_mem>
 801d53e:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 801d540:	693b      	ldr	r3, [r7, #16]
 801d542:	2200      	movs	r2, #0
 801d544:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801d546:	693b      	ldr	r3, [r7, #16]
 801d548:	89ba      	ldrh	r2, [r7, #12]
 801d54a:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 801d54c:	693b      	ldr	r3, [r7, #16]
 801d54e:	8afa      	ldrh	r2, [r7, #22]
 801d550:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 801d552:	69bb      	ldr	r3, [r7, #24]
 801d554:	89fa      	ldrh	r2, [r7, #14]
 801d556:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d558:	693b      	ldr	r3, [r7, #16]
 801d55a:	881b      	ldrh	r3, [r3, #0]
 801d55c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d560:	d047      	beq.n	801d5f2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d562:	693b      	ldr	r3, [r7, #16]
 801d564:	881b      	ldrh	r3, [r3, #0]
 801d566:	4618      	mov	r0, r3
 801d568:	f7ff fdb4 	bl	801d0d4 <ptr_to_mem>
 801d56c:	4602      	mov	r2, r0
 801d56e:	89fb      	ldrh	r3, [r7, #14]
 801d570:	8053      	strh	r3, [r2, #2]
 801d572:	e03e      	b.n	801d5f2 <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801d574:	8bfb      	ldrh	r3, [r7, #30]
 801d576:	f103 0214 	add.w	r2, r3, #20
 801d57a:	8abb      	ldrh	r3, [r7, #20]
 801d57c:	429a      	cmp	r2, r3
 801d57e:	d838      	bhi.n	801d5f2 <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 801d580:	8afa      	ldrh	r2, [r7, #22]
 801d582:	8bfb      	ldrh	r3, [r7, #30]
 801d584:	4413      	add	r3, r2
 801d586:	b29b      	uxth	r3, r3
 801d588:	3308      	adds	r3, #8
 801d58a:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801d58c:	69bb      	ldr	r3, [r7, #24]
 801d58e:	881b      	ldrh	r3, [r3, #0]
 801d590:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d594:	d106      	bne.n	801d5a4 <mem_trim+0x180>
 801d596:	4b1b      	ldr	r3, [pc, #108]	; (801d604 <mem_trim+0x1e0>)
 801d598:	f240 3216 	movw	r2, #790	; 0x316
 801d59c:	491d      	ldr	r1, [pc, #116]	; (801d614 <mem_trim+0x1f0>)
 801d59e:	481b      	ldr	r0, [pc, #108]	; (801d60c <mem_trim+0x1e8>)
 801d5a0:	f004 fe84 	bl	80222ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801d5a4:	89fb      	ldrh	r3, [r7, #14]
 801d5a6:	4618      	mov	r0, r3
 801d5a8:	f7ff fd94 	bl	801d0d4 <ptr_to_mem>
 801d5ac:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 801d5ae:	4b1a      	ldr	r3, [pc, #104]	; (801d618 <mem_trim+0x1f4>)
 801d5b0:	681b      	ldr	r3, [r3, #0]
 801d5b2:	693a      	ldr	r2, [r7, #16]
 801d5b4:	429a      	cmp	r2, r3
 801d5b6:	d202      	bcs.n	801d5be <mem_trim+0x19a>
      lfree = mem2;
 801d5b8:	4a17      	ldr	r2, [pc, #92]	; (801d618 <mem_trim+0x1f4>)
 801d5ba:	693b      	ldr	r3, [r7, #16]
 801d5bc:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801d5be:	693b      	ldr	r3, [r7, #16]
 801d5c0:	2200      	movs	r2, #0
 801d5c2:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 801d5c4:	69bb      	ldr	r3, [r7, #24]
 801d5c6:	881a      	ldrh	r2, [r3, #0]
 801d5c8:	693b      	ldr	r3, [r7, #16]
 801d5ca:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 801d5cc:	693b      	ldr	r3, [r7, #16]
 801d5ce:	8afa      	ldrh	r2, [r7, #22]
 801d5d0:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 801d5d2:	69bb      	ldr	r3, [r7, #24]
 801d5d4:	89fa      	ldrh	r2, [r7, #14]
 801d5d6:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801d5d8:	693b      	ldr	r3, [r7, #16]
 801d5da:	881b      	ldrh	r3, [r3, #0]
 801d5dc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d5e0:	d007      	beq.n	801d5f2 <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801d5e2:	693b      	ldr	r3, [r7, #16]
 801d5e4:	881b      	ldrh	r3, [r3, #0]
 801d5e6:	4618      	mov	r0, r3
 801d5e8:	f7ff fd74 	bl	801d0d4 <ptr_to_mem>
 801d5ec:	4602      	mov	r2, r0
 801d5ee:	89fb      	ldrh	r3, [r7, #14]
 801d5f0:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801d5f2:	687b      	ldr	r3, [r7, #4]
}
 801d5f4:	4618      	mov	r0, r3
 801d5f6:	3720      	adds	r7, #32
 801d5f8:	46bd      	mov	sp, r7
 801d5fa:	bd80      	pop	{r7, pc}
 801d5fc:	20010dc8 	.word	0x20010dc8
 801d600:	20010dcc 	.word	0x20010dcc
 801d604:	08026ef4 	.word	0x08026ef4
 801d608:	08027094 	.word	0x08027094
 801d60c:	08026f6c 	.word	0x08026f6c
 801d610:	080270ac 	.word	0x080270ac
 801d614:	080270cc 	.word	0x080270cc
 801d618:	20010dd0 	.word	0x20010dd0

0801d61c <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 801d61c:	b580      	push	{r7, lr}
 801d61e:	b088      	sub	sp, #32
 801d620:	af00      	add	r7, sp, #0
 801d622:	4603      	mov	r3, r0
 801d624:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801d626:	88fb      	ldrh	r3, [r7, #6]
 801d628:	2b00      	cmp	r3, #0
 801d62a:	d101      	bne.n	801d630 <mem_malloc+0x14>
    return NULL;
 801d62c:	2300      	movs	r3, #0
 801d62e:	e0d9      	b.n	801d7e4 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 801d630:	88fb      	ldrh	r3, [r7, #6]
 801d632:	3303      	adds	r3, #3
 801d634:	b29b      	uxth	r3, r3
 801d636:	f023 0303 	bic.w	r3, r3, #3
 801d63a:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 801d63c:	8bbb      	ldrh	r3, [r7, #28]
 801d63e:	2b0b      	cmp	r3, #11
 801d640:	d801      	bhi.n	801d646 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801d642:	230c      	movs	r3, #12
 801d644:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801d646:	8bbb      	ldrh	r3, [r7, #28]
 801d648:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d64c:	d803      	bhi.n	801d656 <mem_malloc+0x3a>
 801d64e:	8bba      	ldrh	r2, [r7, #28]
 801d650:	88fb      	ldrh	r3, [r7, #6]
 801d652:	429a      	cmp	r2, r3
 801d654:	d201      	bcs.n	801d65a <mem_malloc+0x3e>
    return NULL;
 801d656:	2300      	movs	r3, #0
 801d658:	e0c4      	b.n	801d7e4 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801d65a:	4b64      	ldr	r3, [pc, #400]	; (801d7ec <mem_malloc+0x1d0>)
 801d65c:	681b      	ldr	r3, [r3, #0]
 801d65e:	4618      	mov	r0, r3
 801d660:	f7ff fd4a 	bl	801d0f8 <mem_to_ptr>
 801d664:	4603      	mov	r3, r0
 801d666:	83fb      	strh	r3, [r7, #30]
 801d668:	e0b4      	b.n	801d7d4 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801d66a:	8bfb      	ldrh	r3, [r7, #30]
 801d66c:	4618      	mov	r0, r3
 801d66e:	f7ff fd31 	bl	801d0d4 <ptr_to_mem>
 801d672:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 801d674:	697b      	ldr	r3, [r7, #20]
 801d676:	791b      	ldrb	r3, [r3, #4]
 801d678:	2b00      	cmp	r3, #0
 801d67a:	f040 80a4 	bne.w	801d7c6 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801d67e:	697b      	ldr	r3, [r7, #20]
 801d680:	881b      	ldrh	r3, [r3, #0]
 801d682:	461a      	mov	r2, r3
 801d684:	8bfb      	ldrh	r3, [r7, #30]
 801d686:	1ad3      	subs	r3, r2, r3
 801d688:	f1a3 0208 	sub.w	r2, r3, #8
 801d68c:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 801d68e:	429a      	cmp	r2, r3
 801d690:	f0c0 8099 	bcc.w	801d7c6 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801d694:	697b      	ldr	r3, [r7, #20]
 801d696:	881b      	ldrh	r3, [r3, #0]
 801d698:	461a      	mov	r2, r3
 801d69a:	8bfb      	ldrh	r3, [r7, #30]
 801d69c:	1ad3      	subs	r3, r2, r3
 801d69e:	f1a3 0208 	sub.w	r2, r3, #8
 801d6a2:	8bbb      	ldrh	r3, [r7, #28]
 801d6a4:	3314      	adds	r3, #20
 801d6a6:	429a      	cmp	r2, r3
 801d6a8:	d333      	bcc.n	801d712 <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 801d6aa:	8bfa      	ldrh	r2, [r7, #30]
 801d6ac:	8bbb      	ldrh	r3, [r7, #28]
 801d6ae:	4413      	add	r3, r2
 801d6b0:	b29b      	uxth	r3, r3
 801d6b2:	3308      	adds	r3, #8
 801d6b4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801d6b6:	8a7b      	ldrh	r3, [r7, #18]
 801d6b8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d6bc:	d106      	bne.n	801d6cc <mem_malloc+0xb0>
 801d6be:	4b4c      	ldr	r3, [pc, #304]	; (801d7f0 <mem_malloc+0x1d4>)
 801d6c0:	f240 3287 	movw	r2, #903	; 0x387
 801d6c4:	494b      	ldr	r1, [pc, #300]	; (801d7f4 <mem_malloc+0x1d8>)
 801d6c6:	484c      	ldr	r0, [pc, #304]	; (801d7f8 <mem_malloc+0x1dc>)
 801d6c8:	f004 fdf0 	bl	80222ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 801d6cc:	8a7b      	ldrh	r3, [r7, #18]
 801d6ce:	4618      	mov	r0, r3
 801d6d0:	f7ff fd00 	bl	801d0d4 <ptr_to_mem>
 801d6d4:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 801d6d6:	68fb      	ldr	r3, [r7, #12]
 801d6d8:	2200      	movs	r2, #0
 801d6da:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801d6dc:	697b      	ldr	r3, [r7, #20]
 801d6de:	881a      	ldrh	r2, [r3, #0]
 801d6e0:	68fb      	ldr	r3, [r7, #12]
 801d6e2:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 801d6e4:	68fb      	ldr	r3, [r7, #12]
 801d6e6:	8bfa      	ldrh	r2, [r7, #30]
 801d6e8:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801d6ea:	697b      	ldr	r3, [r7, #20]
 801d6ec:	8a7a      	ldrh	r2, [r7, #18]
 801d6ee:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 801d6f0:	697b      	ldr	r3, [r7, #20]
 801d6f2:	2201      	movs	r2, #1
 801d6f4:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 801d6f6:	68fb      	ldr	r3, [r7, #12]
 801d6f8:	881b      	ldrh	r3, [r3, #0]
 801d6fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 801d6fe:	d00b      	beq.n	801d718 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801d700:	68fb      	ldr	r3, [r7, #12]
 801d702:	881b      	ldrh	r3, [r3, #0]
 801d704:	4618      	mov	r0, r3
 801d706:	f7ff fce5 	bl	801d0d4 <ptr_to_mem>
 801d70a:	4602      	mov	r2, r0
 801d70c:	8a7b      	ldrh	r3, [r7, #18]
 801d70e:	8053      	strh	r3, [r2, #2]
 801d710:	e002      	b.n	801d718 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801d712:	697b      	ldr	r3, [r7, #20]
 801d714:	2201      	movs	r2, #1
 801d716:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801d718:	4b34      	ldr	r3, [pc, #208]	; (801d7ec <mem_malloc+0x1d0>)
 801d71a:	681b      	ldr	r3, [r3, #0]
 801d71c:	697a      	ldr	r2, [r7, #20]
 801d71e:	429a      	cmp	r2, r3
 801d720:	d127      	bne.n	801d772 <mem_malloc+0x156>
          struct mem *cur = lfree;
 801d722:	4b32      	ldr	r3, [pc, #200]	; (801d7ec <mem_malloc+0x1d0>)
 801d724:	681b      	ldr	r3, [r3, #0]
 801d726:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801d728:	e005      	b.n	801d736 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801d72a:	69bb      	ldr	r3, [r7, #24]
 801d72c:	881b      	ldrh	r3, [r3, #0]
 801d72e:	4618      	mov	r0, r3
 801d730:	f7ff fcd0 	bl	801d0d4 <ptr_to_mem>
 801d734:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801d736:	69bb      	ldr	r3, [r7, #24]
 801d738:	791b      	ldrb	r3, [r3, #4]
 801d73a:	2b00      	cmp	r3, #0
 801d73c:	d004      	beq.n	801d748 <mem_malloc+0x12c>
 801d73e:	4b2f      	ldr	r3, [pc, #188]	; (801d7fc <mem_malloc+0x1e0>)
 801d740:	681b      	ldr	r3, [r3, #0]
 801d742:	69ba      	ldr	r2, [r7, #24]
 801d744:	429a      	cmp	r2, r3
 801d746:	d1f0      	bne.n	801d72a <mem_malloc+0x10e>
          }
          lfree = cur;
 801d748:	4a28      	ldr	r2, [pc, #160]	; (801d7ec <mem_malloc+0x1d0>)
 801d74a:	69bb      	ldr	r3, [r7, #24]
 801d74c:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 801d74e:	4b27      	ldr	r3, [pc, #156]	; (801d7ec <mem_malloc+0x1d0>)
 801d750:	681a      	ldr	r2, [r3, #0]
 801d752:	4b2a      	ldr	r3, [pc, #168]	; (801d7fc <mem_malloc+0x1e0>)
 801d754:	681b      	ldr	r3, [r3, #0]
 801d756:	429a      	cmp	r2, r3
 801d758:	d00b      	beq.n	801d772 <mem_malloc+0x156>
 801d75a:	4b24      	ldr	r3, [pc, #144]	; (801d7ec <mem_malloc+0x1d0>)
 801d75c:	681b      	ldr	r3, [r3, #0]
 801d75e:	791b      	ldrb	r3, [r3, #4]
 801d760:	2b00      	cmp	r3, #0
 801d762:	d006      	beq.n	801d772 <mem_malloc+0x156>
 801d764:	4b22      	ldr	r3, [pc, #136]	; (801d7f0 <mem_malloc+0x1d4>)
 801d766:	f240 32b5 	movw	r2, #949	; 0x3b5
 801d76a:	4925      	ldr	r1, [pc, #148]	; (801d800 <mem_malloc+0x1e4>)
 801d76c:	4822      	ldr	r0, [pc, #136]	; (801d7f8 <mem_malloc+0x1dc>)
 801d76e:	f004 fd9d 	bl	80222ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 801d772:	8bba      	ldrh	r2, [r7, #28]
 801d774:	697b      	ldr	r3, [r7, #20]
 801d776:	4413      	add	r3, r2
 801d778:	3308      	adds	r3, #8
 801d77a:	4a20      	ldr	r2, [pc, #128]	; (801d7fc <mem_malloc+0x1e0>)
 801d77c:	6812      	ldr	r2, [r2, #0]
 801d77e:	4293      	cmp	r3, r2
 801d780:	d906      	bls.n	801d790 <mem_malloc+0x174>
 801d782:	4b1b      	ldr	r3, [pc, #108]	; (801d7f0 <mem_malloc+0x1d4>)
 801d784:	f240 32b9 	movw	r2, #953	; 0x3b9
 801d788:	491e      	ldr	r1, [pc, #120]	; (801d804 <mem_malloc+0x1e8>)
 801d78a:	481b      	ldr	r0, [pc, #108]	; (801d7f8 <mem_malloc+0x1dc>)
 801d78c:	f004 fd8e 	bl	80222ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 801d790:	697b      	ldr	r3, [r7, #20]
 801d792:	f003 0303 	and.w	r3, r3, #3
 801d796:	2b00      	cmp	r3, #0
 801d798:	d006      	beq.n	801d7a8 <mem_malloc+0x18c>
 801d79a:	4b15      	ldr	r3, [pc, #84]	; (801d7f0 <mem_malloc+0x1d4>)
 801d79c:	f240 32bb 	movw	r2, #955	; 0x3bb
 801d7a0:	4919      	ldr	r1, [pc, #100]	; (801d808 <mem_malloc+0x1ec>)
 801d7a2:	4815      	ldr	r0, [pc, #84]	; (801d7f8 <mem_malloc+0x1dc>)
 801d7a4:	f004 fd82 	bl	80222ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801d7a8:	697b      	ldr	r3, [r7, #20]
 801d7aa:	f003 0303 	and.w	r3, r3, #3
 801d7ae:	2b00      	cmp	r3, #0
 801d7b0:	d006      	beq.n	801d7c0 <mem_malloc+0x1a4>
 801d7b2:	4b0f      	ldr	r3, [pc, #60]	; (801d7f0 <mem_malloc+0x1d4>)
 801d7b4:	f240 32bd 	movw	r2, #957	; 0x3bd
 801d7b8:	4914      	ldr	r1, [pc, #80]	; (801d80c <mem_malloc+0x1f0>)
 801d7ba:	480f      	ldr	r0, [pc, #60]	; (801d7f8 <mem_malloc+0x1dc>)
 801d7bc:	f004 fd76 	bl	80222ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801d7c0:	697b      	ldr	r3, [r7, #20]
 801d7c2:	3308      	adds	r3, #8
 801d7c4:	e00e      	b.n	801d7e4 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 801d7c6:	8bfb      	ldrh	r3, [r7, #30]
 801d7c8:	4618      	mov	r0, r3
 801d7ca:	f7ff fc83 	bl	801d0d4 <ptr_to_mem>
 801d7ce:	4603      	mov	r3, r0
 801d7d0:	881b      	ldrh	r3, [r3, #0]
 801d7d2:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801d7d4:	8bfa      	ldrh	r2, [r7, #30]
 801d7d6:	8bbb      	ldrh	r3, [r7, #28]
 801d7d8:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 801d7dc:	429a      	cmp	r2, r3
 801d7de:	f4ff af44 	bcc.w	801d66a <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801d7e2:	2300      	movs	r3, #0
}
 801d7e4:	4618      	mov	r0, r3
 801d7e6:	3720      	adds	r7, #32
 801d7e8:	46bd      	mov	sp, r7
 801d7ea:	bd80      	pop	{r7, pc}
 801d7ec:	20010dd0 	.word	0x20010dd0
 801d7f0:	08026ef4 	.word	0x08026ef4
 801d7f4:	080270cc 	.word	0x080270cc
 801d7f8:	08026f6c 	.word	0x08026f6c
 801d7fc:	20010dcc 	.word	0x20010dcc
 801d800:	080270e0 	.word	0x080270e0
 801d804:	080270fc 	.word	0x080270fc
 801d808:	0802712c 	.word	0x0802712c
 801d80c:	0802715c 	.word	0x0802715c

0801d810 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801d810:	b480      	push	{r7}
 801d812:	b085      	sub	sp, #20
 801d814:	af00      	add	r7, sp, #0
 801d816:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	689b      	ldr	r3, [r3, #8]
 801d81c:	2200      	movs	r2, #0
 801d81e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801d820:	687b      	ldr	r3, [r7, #4]
 801d822:	685b      	ldr	r3, [r3, #4]
 801d824:	3303      	adds	r3, #3
 801d826:	f023 0303 	bic.w	r3, r3, #3
 801d82a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 801d82c:	2300      	movs	r3, #0
 801d82e:	60fb      	str	r3, [r7, #12]
 801d830:	e011      	b.n	801d856 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801d832:	687b      	ldr	r3, [r7, #4]
 801d834:	689b      	ldr	r3, [r3, #8]
 801d836:	681a      	ldr	r2, [r3, #0]
 801d838:	68bb      	ldr	r3, [r7, #8]
 801d83a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 801d83c:	687b      	ldr	r3, [r7, #4]
 801d83e:	689b      	ldr	r3, [r3, #8]
 801d840:	68ba      	ldr	r2, [r7, #8]
 801d842:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801d844:	687b      	ldr	r3, [r7, #4]
 801d846:	881b      	ldrh	r3, [r3, #0]
 801d848:	461a      	mov	r2, r3
 801d84a:	68bb      	ldr	r3, [r7, #8]
 801d84c:	4413      	add	r3, r2
 801d84e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 801d850:	68fb      	ldr	r3, [r7, #12]
 801d852:	3301      	adds	r3, #1
 801d854:	60fb      	str	r3, [r7, #12]
 801d856:	687b      	ldr	r3, [r7, #4]
 801d858:	885b      	ldrh	r3, [r3, #2]
 801d85a:	461a      	mov	r2, r3
 801d85c:	68fb      	ldr	r3, [r7, #12]
 801d85e:	4293      	cmp	r3, r2
 801d860:	dbe7      	blt.n	801d832 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 801d862:	bf00      	nop
 801d864:	bf00      	nop
 801d866:	3714      	adds	r7, #20
 801d868:	46bd      	mov	sp, r7
 801d86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d86e:	4770      	bx	lr

0801d870 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 801d870:	b580      	push	{r7, lr}
 801d872:	b082      	sub	sp, #8
 801d874:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801d876:	2300      	movs	r3, #0
 801d878:	80fb      	strh	r3, [r7, #6]
 801d87a:	e009      	b.n	801d890 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 801d87c:	88fb      	ldrh	r3, [r7, #6]
 801d87e:	4a08      	ldr	r2, [pc, #32]	; (801d8a0 <memp_init+0x30>)
 801d880:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d884:	4618      	mov	r0, r3
 801d886:	f7ff ffc3 	bl	801d810 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801d88a:	88fb      	ldrh	r3, [r7, #6]
 801d88c:	3301      	adds	r3, #1
 801d88e:	80fb      	strh	r3, [r7, #6]
 801d890:	88fb      	ldrh	r3, [r7, #6]
 801d892:	2b05      	cmp	r3, #5
 801d894:	d9f2      	bls.n	801d87c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801d896:	bf00      	nop
 801d898:	bf00      	nop
 801d89a:	3708      	adds	r7, #8
 801d89c:	46bd      	mov	sp, r7
 801d89e:	bd80      	pop	{r7, pc}
 801d8a0:	08028b9c 	.word	0x08028b9c

0801d8a4 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801d8a4:	b580      	push	{r7, lr}
 801d8a6:	b084      	sub	sp, #16
 801d8a8:	af00      	add	r7, sp, #0
 801d8aa:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 801d8ac:	687b      	ldr	r3, [r7, #4]
 801d8ae:	689b      	ldr	r3, [r3, #8]
 801d8b0:	681b      	ldr	r3, [r3, #0]
 801d8b2:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 801d8b4:	68fb      	ldr	r3, [r7, #12]
 801d8b6:	2b00      	cmp	r3, #0
 801d8b8:	d012      	beq.n	801d8e0 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801d8ba:	687b      	ldr	r3, [r7, #4]
 801d8bc:	689b      	ldr	r3, [r3, #8]
 801d8be:	68fa      	ldr	r2, [r7, #12]
 801d8c0:	6812      	ldr	r2, [r2, #0]
 801d8c2:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 801d8c4:	68fb      	ldr	r3, [r7, #12]
 801d8c6:	f003 0303 	and.w	r3, r3, #3
 801d8ca:	2b00      	cmp	r3, #0
 801d8cc:	d006      	beq.n	801d8dc <do_memp_malloc_pool+0x38>
 801d8ce:	4b07      	ldr	r3, [pc, #28]	; (801d8ec <do_memp_malloc_pool+0x48>)
 801d8d0:	f44f 728c 	mov.w	r2, #280	; 0x118
 801d8d4:	4906      	ldr	r1, [pc, #24]	; (801d8f0 <do_memp_malloc_pool+0x4c>)
 801d8d6:	4807      	ldr	r0, [pc, #28]	; (801d8f4 <do_memp_malloc_pool+0x50>)
 801d8d8:	f004 fce8 	bl	80222ac <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	e000      	b.n	801d8e2 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801d8e0:	2300      	movs	r3, #0
}
 801d8e2:	4618      	mov	r0, r3
 801d8e4:	3710      	adds	r7, #16
 801d8e6:	46bd      	mov	sp, r7
 801d8e8:	bd80      	pop	{r7, pc}
 801d8ea:	bf00      	nop
 801d8ec:	08027180 	.word	0x08027180
 801d8f0:	080271e0 	.word	0x080271e0
 801d8f4:	08027204 	.word	0x08027204

0801d8f8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801d8f8:	b580      	push	{r7, lr}
 801d8fa:	b082      	sub	sp, #8
 801d8fc:	af00      	add	r7, sp, #0
 801d8fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801d900:	687b      	ldr	r3, [r7, #4]
 801d902:	2b00      	cmp	r3, #0
 801d904:	d106      	bne.n	801d914 <memp_malloc_pool+0x1c>
 801d906:	4b0a      	ldr	r3, [pc, #40]	; (801d930 <memp_malloc_pool+0x38>)
 801d908:	f44f 729e 	mov.w	r2, #316	; 0x13c
 801d90c:	4909      	ldr	r1, [pc, #36]	; (801d934 <memp_malloc_pool+0x3c>)
 801d90e:	480a      	ldr	r0, [pc, #40]	; (801d938 <memp_malloc_pool+0x40>)
 801d910:	f004 fccc 	bl	80222ac <iprintf>
  if (desc == NULL) {
 801d914:	687b      	ldr	r3, [r7, #4]
 801d916:	2b00      	cmp	r3, #0
 801d918:	d101      	bne.n	801d91e <memp_malloc_pool+0x26>
    return NULL;
 801d91a:	2300      	movs	r3, #0
 801d91c:	e003      	b.n	801d926 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801d91e:	6878      	ldr	r0, [r7, #4]
 801d920:	f7ff ffc0 	bl	801d8a4 <do_memp_malloc_pool>
 801d924:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801d926:	4618      	mov	r0, r3
 801d928:	3708      	adds	r7, #8
 801d92a:	46bd      	mov	sp, r7
 801d92c:	bd80      	pop	{r7, pc}
 801d92e:	bf00      	nop
 801d930:	08027180 	.word	0x08027180
 801d934:	0802722c 	.word	0x0802722c
 801d938:	08027204 	.word	0x08027204

0801d93c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 801d93c:	b580      	push	{r7, lr}
 801d93e:	b084      	sub	sp, #16
 801d940:	af00      	add	r7, sp, #0
 801d942:	4603      	mov	r3, r0
 801d944:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801d946:	79fb      	ldrb	r3, [r7, #7]
 801d948:	2b05      	cmp	r3, #5
 801d94a:	d908      	bls.n	801d95e <memp_malloc+0x22>
 801d94c:	4b0a      	ldr	r3, [pc, #40]	; (801d978 <memp_malloc+0x3c>)
 801d94e:	f240 1257 	movw	r2, #343	; 0x157
 801d952:	490a      	ldr	r1, [pc, #40]	; (801d97c <memp_malloc+0x40>)
 801d954:	480a      	ldr	r0, [pc, #40]	; (801d980 <memp_malloc+0x44>)
 801d956:	f004 fca9 	bl	80222ac <iprintf>
 801d95a:	2300      	movs	r3, #0
 801d95c:	e008      	b.n	801d970 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801d95e:	79fb      	ldrb	r3, [r7, #7]
 801d960:	4a08      	ldr	r2, [pc, #32]	; (801d984 <memp_malloc+0x48>)
 801d962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801d966:	4618      	mov	r0, r3
 801d968:	f7ff ff9c 	bl	801d8a4 <do_memp_malloc_pool>
 801d96c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801d96e:	68fb      	ldr	r3, [r7, #12]
}
 801d970:	4618      	mov	r0, r3
 801d972:	3710      	adds	r7, #16
 801d974:	46bd      	mov	sp, r7
 801d976:	bd80      	pop	{r7, pc}
 801d978:	08027180 	.word	0x08027180
 801d97c:	08027240 	.word	0x08027240
 801d980:	08027204 	.word	0x08027204
 801d984:	08028b9c 	.word	0x08028b9c

0801d988 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801d988:	b580      	push	{r7, lr}
 801d98a:	b084      	sub	sp, #16
 801d98c:	af00      	add	r7, sp, #0
 801d98e:	6078      	str	r0, [r7, #4]
 801d990:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 801d992:	683b      	ldr	r3, [r7, #0]
 801d994:	f003 0303 	and.w	r3, r3, #3
 801d998:	2b00      	cmp	r3, #0
 801d99a:	d006      	beq.n	801d9aa <do_memp_free_pool+0x22>
 801d99c:	4b0a      	ldr	r3, [pc, #40]	; (801d9c8 <do_memp_free_pool+0x40>)
 801d99e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801d9a2:	490a      	ldr	r1, [pc, #40]	; (801d9cc <do_memp_free_pool+0x44>)
 801d9a4:	480a      	ldr	r0, [pc, #40]	; (801d9d0 <do_memp_free_pool+0x48>)
 801d9a6:	f004 fc81 	bl	80222ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801d9aa:	683b      	ldr	r3, [r7, #0]
 801d9ac:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	689b      	ldr	r3, [r3, #8]
 801d9b2:	681a      	ldr	r2, [r3, #0]
 801d9b4:	68fb      	ldr	r3, [r7, #12]
 801d9b6:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801d9b8:	687b      	ldr	r3, [r7, #4]
 801d9ba:	689b      	ldr	r3, [r3, #8]
 801d9bc:	68fa      	ldr	r2, [r7, #12]
 801d9be:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801d9c0:	bf00      	nop
 801d9c2:	3710      	adds	r7, #16
 801d9c4:	46bd      	mov	sp, r7
 801d9c6:	bd80      	pop	{r7, pc}
 801d9c8:	08027180 	.word	0x08027180
 801d9cc:	08027260 	.word	0x08027260
 801d9d0:	08027204 	.word	0x08027204

0801d9d4 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801d9d4:	b580      	push	{r7, lr}
 801d9d6:	b082      	sub	sp, #8
 801d9d8:	af00      	add	r7, sp, #0
 801d9da:	6078      	str	r0, [r7, #4]
 801d9dc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801d9de:	687b      	ldr	r3, [r7, #4]
 801d9e0:	2b00      	cmp	r3, #0
 801d9e2:	d106      	bne.n	801d9f2 <memp_free_pool+0x1e>
 801d9e4:	4b0a      	ldr	r3, [pc, #40]	; (801da10 <memp_free_pool+0x3c>)
 801d9e6:	f240 1295 	movw	r2, #405	; 0x195
 801d9ea:	490a      	ldr	r1, [pc, #40]	; (801da14 <memp_free_pool+0x40>)
 801d9ec:	480a      	ldr	r0, [pc, #40]	; (801da18 <memp_free_pool+0x44>)
 801d9ee:	f004 fc5d 	bl	80222ac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801d9f2:	687b      	ldr	r3, [r7, #4]
 801d9f4:	2b00      	cmp	r3, #0
 801d9f6:	d007      	beq.n	801da08 <memp_free_pool+0x34>
 801d9f8:	683b      	ldr	r3, [r7, #0]
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d004      	beq.n	801da08 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801d9fe:	6839      	ldr	r1, [r7, #0]
 801da00:	6878      	ldr	r0, [r7, #4]
 801da02:	f7ff ffc1 	bl	801d988 <do_memp_free_pool>
 801da06:	e000      	b.n	801da0a <memp_free_pool+0x36>
    return;
 801da08:	bf00      	nop
}
 801da0a:	3708      	adds	r7, #8
 801da0c:	46bd      	mov	sp, r7
 801da0e:	bd80      	pop	{r7, pc}
 801da10:	08027180 	.word	0x08027180
 801da14:	0802722c 	.word	0x0802722c
 801da18:	08027204 	.word	0x08027204

0801da1c <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 801da1c:	b580      	push	{r7, lr}
 801da1e:	b082      	sub	sp, #8
 801da20:	af00      	add	r7, sp, #0
 801da22:	4603      	mov	r3, r0
 801da24:	6039      	str	r1, [r7, #0]
 801da26:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801da28:	79fb      	ldrb	r3, [r7, #7]
 801da2a:	2b05      	cmp	r3, #5
 801da2c:	d907      	bls.n	801da3e <memp_free+0x22>
 801da2e:	4b0c      	ldr	r3, [pc, #48]	; (801da60 <memp_free+0x44>)
 801da30:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 801da34:	490b      	ldr	r1, [pc, #44]	; (801da64 <memp_free+0x48>)
 801da36:	480c      	ldr	r0, [pc, #48]	; (801da68 <memp_free+0x4c>)
 801da38:	f004 fc38 	bl	80222ac <iprintf>
 801da3c:	e00c      	b.n	801da58 <memp_free+0x3c>

  if (mem == NULL) {
 801da3e:	683b      	ldr	r3, [r7, #0]
 801da40:	2b00      	cmp	r3, #0
 801da42:	d008      	beq.n	801da56 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 801da44:	79fb      	ldrb	r3, [r7, #7]
 801da46:	4a09      	ldr	r2, [pc, #36]	; (801da6c <memp_free+0x50>)
 801da48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801da4c:	6839      	ldr	r1, [r7, #0]
 801da4e:	4618      	mov	r0, r3
 801da50:	f7ff ff9a 	bl	801d988 <do_memp_free_pool>
 801da54:	e000      	b.n	801da58 <memp_free+0x3c>
    return;
 801da56:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 801da58:	3708      	adds	r7, #8
 801da5a:	46bd      	mov	sp, r7
 801da5c:	bd80      	pop	{r7, pc}
 801da5e:	bf00      	nop
 801da60:	08027180 	.word	0x08027180
 801da64:	08027280 	.word	0x08027280
 801da68:	08027204 	.word	0x08027204
 801da6c:	08028b9c 	.word	0x08028b9c

0801da70 <netif_loopif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 */
static err_t
netif_loopif_init(struct netif *netif)
{
 801da70:	b580      	push	{r7, lr}
 801da72:	b082      	sub	sp, #8
 801da74:	af00      	add	r7, sp, #0
 801da76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif_loopif_init: invalid netif", netif != NULL);
 801da78:	687b      	ldr	r3, [r7, #4]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d105      	bne.n	801da8a <netif_loopif_init+0x1a>
 801da7e:	4b0b      	ldr	r3, [pc, #44]	; (801daac <netif_loopif_init+0x3c>)
 801da80:	2299      	movs	r2, #153	; 0x99
 801da82:	490b      	ldr	r1, [pc, #44]	; (801dab0 <netif_loopif_init+0x40>)
 801da84:	480b      	ldr	r0, [pc, #44]	; (801dab4 <netif_loopif_init+0x44>)
 801da86:	f004 fc11 	bl	80222ac <iprintf>
  /* initialize the snmp variables and counters inside the struct netif
   * ifSpeed: no assumption can be made!
   */
  MIB2_INIT_NETIF(netif, snmp_ifType_softwareLoopback, 0);

  netif->name[0] = 'l';
 801da8a:	687b      	ldr	r3, [r7, #4]
 801da8c:	226c      	movs	r2, #108	; 0x6c
 801da8e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  netif->name[1] = 'o';
 801da92:	687b      	ldr	r3, [r7, #4]
 801da94:	226f      	movs	r2, #111	; 0x6f
 801da96:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
#if LWIP_IPV4
  netif->output = netif_loop_output_ipv4;
 801da9a:	687b      	ldr	r3, [r7, #4]
 801da9c:	4a06      	ldr	r2, [pc, #24]	; (801dab8 <netif_loopif_init+0x48>)
 801da9e:	615a      	str	r2, [r3, #20]
#endif
#if LWIP_LOOPIF_MULTICAST
  netif_set_flags(netif, NETIF_FLAG_IGMP);
#endif
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_DISABLE_ALL);
  return ERR_OK;
 801daa0:	2300      	movs	r3, #0
}
 801daa2:	4618      	mov	r0, r3
 801daa4:	3708      	adds	r7, #8
 801daa6:	46bd      	mov	sp, r7
 801daa8:	bd80      	pop	{r7, pc}
 801daaa:	bf00      	nop
 801daac:	0802729c 	.word	0x0802729c
 801dab0:	080272fc 	.word	0x080272fc
 801dab4:	08027320 	.word	0x08027320
 801dab8:	0801e19d 	.word	0x0801e19d

0801dabc <netif_init>:
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801dabc:	b580      	push	{r7, lr}
 801dabe:	b088      	sub	sp, #32
 801dac0:	af04      	add	r7, sp, #16
#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
#define LOOPIF_ADDRINIT &loop_ipaddr, &loop_netmask, &loop_gw,
  ip4_addr_t loop_ipaddr, loop_netmask, loop_gw;
  IP4_ADDR(&loop_gw, 127, 0, 0, 1);
 801dac2:	4b0f      	ldr	r3, [pc, #60]	; (801db00 <netif_init+0x44>)
 801dac4:	607b      	str	r3, [r7, #4]
  IP4_ADDR(&loop_ipaddr, 127, 0, 0, 1);
 801dac6:	4b0e      	ldr	r3, [pc, #56]	; (801db00 <netif_init+0x44>)
 801dac8:	60fb      	str	r3, [r7, #12]
  IP4_ADDR(&loop_netmask, 255, 0, 0, 0);
 801daca:	23ff      	movs	r3, #255	; 0xff
 801dacc:	60bb      	str	r3, [r7, #8]
#else /* LWIP_IPV4 */
#define LOOPIF_ADDRINIT
#endif /* LWIP_IPV4 */

#if NO_SYS
  netif_add(&loop_netif, LOOPIF_ADDRINIT NULL, netif_loopif_init, ip_input);
 801dace:	1d3b      	adds	r3, r7, #4
 801dad0:	f107 0208 	add.w	r2, r7, #8
 801dad4:	f107 010c 	add.w	r1, r7, #12
 801dad8:	480a      	ldr	r0, [pc, #40]	; (801db04 <netif_init+0x48>)
 801dada:	9002      	str	r0, [sp, #8]
 801dadc:	480a      	ldr	r0, [pc, #40]	; (801db08 <netif_init+0x4c>)
 801dade:	9001      	str	r0, [sp, #4]
 801dae0:	2000      	movs	r0, #0
 801dae2:	9000      	str	r0, [sp, #0]
 801dae4:	4809      	ldr	r0, [pc, #36]	; (801db0c <netif_init+0x50>)
 801dae6:	f000 f813 	bl	801db10 <netif_add>
#if LWIP_IPV6
  IP_ADDR6_HOST(loop_netif.ip6_addr, 0, 0, 0, 0x00000001UL);
  loop_netif.ip6_addr_state[0] = IP6_ADDR_VALID;
#endif /* LWIP_IPV6 */

  netif_set_link_up(&loop_netif);
 801daea:	4808      	ldr	r0, [pc, #32]	; (801db0c <netif_init+0x50>)
 801daec:	f000 fa72 	bl	801dfd4 <netif_set_link_up>
  netif_set_up(&loop_netif);
 801daf0:	4806      	ldr	r0, [pc, #24]	; (801db0c <netif_init+0x50>)
 801daf2:	f000 f9d1 	bl	801de98 <netif_set_up>

#endif /* LWIP_HAVE_LOOPIF */
}
 801daf6:	bf00      	nop
 801daf8:	3710      	adds	r7, #16
 801dafa:	46bd      	mov	sp, r7
 801dafc:	bd80      	pop	{r7, pc}
 801dafe:	bf00      	nop
 801db00:	0100007f 	.word	0x0100007f
 801db04:	08020c39 	.word	0x08020c39
 801db08:	0801da71 	.word	0x0801da71
 801db0c:	20013d78 	.word	0x20013d78

0801db10 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801db10:	b580      	push	{r7, lr}
 801db12:	b086      	sub	sp, #24
 801db14:	af00      	add	r7, sp, #0
 801db16:	60f8      	str	r0, [r7, #12]
 801db18:	60b9      	str	r1, [r7, #8]
 801db1a:	607a      	str	r2, [r7, #4]
 801db1c:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801db1e:	68fb      	ldr	r3, [r7, #12]
 801db20:	2b00      	cmp	r3, #0
 801db22:	d108      	bne.n	801db36 <netif_add+0x26>
 801db24:	4b5a      	ldr	r3, [pc, #360]	; (801dc90 <netif_add+0x180>)
 801db26:	f240 1227 	movw	r2, #295	; 0x127
 801db2a:	495a      	ldr	r1, [pc, #360]	; (801dc94 <netif_add+0x184>)
 801db2c:	485a      	ldr	r0, [pc, #360]	; (801dc98 <netif_add+0x188>)
 801db2e:	f004 fbbd 	bl	80222ac <iprintf>
 801db32:	2300      	movs	r3, #0
 801db34:	e0a8      	b.n	801dc88 <netif_add+0x178>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801db36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801db38:	2b00      	cmp	r3, #0
 801db3a:	d108      	bne.n	801db4e <netif_add+0x3e>
 801db3c:	4b54      	ldr	r3, [pc, #336]	; (801dc90 <netif_add+0x180>)
 801db3e:	f44f 7294 	mov.w	r2, #296	; 0x128
 801db42:	4956      	ldr	r1, [pc, #344]	; (801dc9c <netif_add+0x18c>)
 801db44:	4854      	ldr	r0, [pc, #336]	; (801dc98 <netif_add+0x188>)
 801db46:	f004 fbb1 	bl	80222ac <iprintf>
 801db4a:	2300      	movs	r3, #0
 801db4c:	e09c      	b.n	801dc88 <netif_add+0x178>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801db4e:	68bb      	ldr	r3, [r7, #8]
 801db50:	2b00      	cmp	r3, #0
 801db52:	d101      	bne.n	801db58 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 801db54:	4b52      	ldr	r3, [pc, #328]	; (801dca0 <netif_add+0x190>)
 801db56:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	2b00      	cmp	r3, #0
 801db5c:	d101      	bne.n	801db62 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801db5e:	4b50      	ldr	r3, [pc, #320]	; (801dca0 <netif_add+0x190>)
 801db60:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801db62:	683b      	ldr	r3, [r7, #0]
 801db64:	2b00      	cmp	r3, #0
 801db66:	d101      	bne.n	801db6c <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801db68:	4b4d      	ldr	r3, [pc, #308]	; (801dca0 <netif_add+0x190>)
 801db6a:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 801db6c:	68fb      	ldr	r3, [r7, #12]
 801db6e:	2200      	movs	r2, #0
 801db70:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801db72:	68fb      	ldr	r3, [r7, #12]
 801db74:	2200      	movs	r2, #0
 801db76:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801db78:	68fb      	ldr	r3, [r7, #12]
 801db7a:	2200      	movs	r2, #0
 801db7c:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801db7e:	68fb      	ldr	r3, [r7, #12]
 801db80:	4a48      	ldr	r2, [pc, #288]	; (801dca4 <netif_add+0x194>)
 801db82:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 801db84:	68fb      	ldr	r3, [r7, #12]
 801db86:	2200      	movs	r2, #0
 801db88:	851a      	strh	r2, [r3, #40]	; 0x28
  netif->flags = 0;
 801db8a:	68fb      	ldr	r3, [r7, #12]
 801db8c:	2200      	movs	r2, #0
 801db8e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801db92:	68fb      	ldr	r3, [r7, #12]
 801db94:	2200      	movs	r2, #0
 801db96:	61da      	str	r2, [r3, #28]
#endif /* LWIP_IGMP */
#if LWIP_IPV6 && LWIP_IPV6_MLD
  netif->mld_mac_filter = NULL;
#endif /* LWIP_IPV6 && LWIP_IPV6_MLD */
#if ENABLE_LOOPBACK
  netif->loop_first = NULL;
 801db98:	68fb      	ldr	r3, [r7, #12]
 801db9a:	2200      	movs	r2, #0
 801db9c:	639a      	str	r2, [r3, #56]	; 0x38
  netif->loop_last = NULL;
 801db9e:	68fb      	ldr	r3, [r7, #12]
 801dba0:	2200      	movs	r2, #0
 801dba2:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801dba4:	68fb      	ldr	r3, [r7, #12]
 801dba6:	6a3a      	ldr	r2, [r7, #32]
 801dba8:	625a      	str	r2, [r3, #36]	; 0x24
  netif->num = netif_num;
 801dbaa:	4b3f      	ldr	r3, [pc, #252]	; (801dca8 <netif_add+0x198>)
 801dbac:	781a      	ldrb	r2, [r3, #0]
 801dbae:	68fb      	ldr	r3, [r7, #12]
 801dbb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  netif->input = input;
 801dbb4:	68fb      	ldr	r3, [r7, #12]
 801dbb6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dbb8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801dbba:	683b      	ldr	r3, [r7, #0]
 801dbbc:	687a      	ldr	r2, [r7, #4]
 801dbbe:	68b9      	ldr	r1, [r7, #8]
 801dbc0:	68f8      	ldr	r0, [r7, #12]
 801dbc2:	f000 f90f 	bl	801dde4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801dbc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dbc8:	68f8      	ldr	r0, [r7, #12]
 801dbca:	4798      	blx	r3
 801dbcc:	4603      	mov	r3, r0
 801dbce:	2b00      	cmp	r3, #0
 801dbd0:	d001      	beq.n	801dbd6 <netif_add+0xc6>
    return NULL;
 801dbd2:	2300      	movs	r3, #0
 801dbd4:	e058      	b.n	801dc88 <netif_add+0x178>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801dbd6:	68fb      	ldr	r3, [r7, #12]
 801dbd8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dbdc:	2bff      	cmp	r3, #255	; 0xff
 801dbde:	d103      	bne.n	801dbe8 <netif_add+0xd8>
        netif->num = 0;
 801dbe0:	68fb      	ldr	r3, [r7, #12]
 801dbe2:	2200      	movs	r2, #0
 801dbe4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }
      num_netifs = 0;
 801dbe8:	2300      	movs	r3, #0
 801dbea:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801dbec:	4b2f      	ldr	r3, [pc, #188]	; (801dcac <netif_add+0x19c>)
 801dbee:	681b      	ldr	r3, [r3, #0]
 801dbf0:	617b      	str	r3, [r7, #20]
 801dbf2:	e02b      	b.n	801dc4c <netif_add+0x13c>
        LWIP_ASSERT("netif already added", netif2 != netif);
 801dbf4:	697a      	ldr	r2, [r7, #20]
 801dbf6:	68fb      	ldr	r3, [r7, #12]
 801dbf8:	429a      	cmp	r2, r3
 801dbfa:	d106      	bne.n	801dc0a <netif_add+0xfa>
 801dbfc:	4b24      	ldr	r3, [pc, #144]	; (801dc90 <netif_add+0x180>)
 801dbfe:	f240 128b 	movw	r2, #395	; 0x18b
 801dc02:	492b      	ldr	r1, [pc, #172]	; (801dcb0 <netif_add+0x1a0>)
 801dc04:	4824      	ldr	r0, [pc, #144]	; (801dc98 <netif_add+0x188>)
 801dc06:	f004 fb51 	bl	80222ac <iprintf>
        num_netifs++;
 801dc0a:	693b      	ldr	r3, [r7, #16]
 801dc0c:	3301      	adds	r3, #1
 801dc0e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 801dc10:	693b      	ldr	r3, [r7, #16]
 801dc12:	2bff      	cmp	r3, #255	; 0xff
 801dc14:	dd06      	ble.n	801dc24 <netif_add+0x114>
 801dc16:	4b1e      	ldr	r3, [pc, #120]	; (801dc90 <netif_add+0x180>)
 801dc18:	f240 128d 	movw	r2, #397	; 0x18d
 801dc1c:	4925      	ldr	r1, [pc, #148]	; (801dcb4 <netif_add+0x1a4>)
 801dc1e:	481e      	ldr	r0, [pc, #120]	; (801dc98 <netif_add+0x188>)
 801dc20:	f004 fb44 	bl	80222ac <iprintf>
        if (netif2->num == netif->num) {
 801dc24:	697b      	ldr	r3, [r7, #20]
 801dc26:	f893 2034 	ldrb.w	r2, [r3, #52]	; 0x34
 801dc2a:	68fb      	ldr	r3, [r7, #12]
 801dc2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dc30:	429a      	cmp	r2, r3
 801dc32:	d108      	bne.n	801dc46 <netif_add+0x136>
          netif->num++;
 801dc34:	68fb      	ldr	r3, [r7, #12]
 801dc36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dc3a:	3301      	adds	r3, #1
 801dc3c:	b2da      	uxtb	r2, r3
 801dc3e:	68fb      	ldr	r3, [r7, #12]
 801dc40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          break;
 801dc44:	e005      	b.n	801dc52 <netif_add+0x142>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801dc46:	697b      	ldr	r3, [r7, #20]
 801dc48:	681b      	ldr	r3, [r3, #0]
 801dc4a:	617b      	str	r3, [r7, #20]
 801dc4c:	697b      	ldr	r3, [r7, #20]
 801dc4e:	2b00      	cmp	r3, #0
 801dc50:	d1d0      	bne.n	801dbf4 <netif_add+0xe4>
        }
      }
    } while (netif2 != NULL);
 801dc52:	697b      	ldr	r3, [r7, #20]
 801dc54:	2b00      	cmp	r3, #0
 801dc56:	d1be      	bne.n	801dbd6 <netif_add+0xc6>
  }
  if (netif->num == 254) {
 801dc58:	68fb      	ldr	r3, [r7, #12]
 801dc5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dc5e:	2bfe      	cmp	r3, #254	; 0xfe
 801dc60:	d103      	bne.n	801dc6a <netif_add+0x15a>
    netif_num = 0;
 801dc62:	4b11      	ldr	r3, [pc, #68]	; (801dca8 <netif_add+0x198>)
 801dc64:	2200      	movs	r2, #0
 801dc66:	701a      	strb	r2, [r3, #0]
 801dc68:	e006      	b.n	801dc78 <netif_add+0x168>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801dc6a:	68fb      	ldr	r3, [r7, #12]
 801dc6c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801dc70:	3301      	adds	r3, #1
 801dc72:	b2da      	uxtb	r2, r3
 801dc74:	4b0c      	ldr	r3, [pc, #48]	; (801dca8 <netif_add+0x198>)
 801dc76:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 801dc78:	4b0c      	ldr	r3, [pc, #48]	; (801dcac <netif_add+0x19c>)
 801dc7a:	681a      	ldr	r2, [r3, #0]
 801dc7c:	68fb      	ldr	r3, [r7, #12]
 801dc7e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 801dc80:	4a0a      	ldr	r2, [pc, #40]	; (801dcac <netif_add+0x19c>)
 801dc82:	68fb      	ldr	r3, [r7, #12]
 801dc84:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801dc86:	68fb      	ldr	r3, [r7, #12]
}
 801dc88:	4618      	mov	r0, r3
 801dc8a:	3718      	adds	r7, #24
 801dc8c:	46bd      	mov	sp, r7
 801dc8e:	bd80      	pop	{r7, pc}
 801dc90:	0802729c 	.word	0x0802729c
 801dc94:	08027380 	.word	0x08027380
 801dc98:	08027320 	.word	0x08027320
 801dc9c:	0802739c 	.word	0x0802739c
 801dca0:	08028bc4 	.word	0x08028bc4
 801dca4:	0801e1bb 	.word	0x0801e1bb
 801dca8:	20013d74 	.word	0x20013d74
 801dcac:	20013d6c 	.word	0x20013d6c
 801dcb0:	080273c0 	.word	0x080273c0
 801dcb4:	080273d4 	.word	0x080273d4

0801dcb8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801dcb8:	b580      	push	{r7, lr}
 801dcba:	b082      	sub	sp, #8
 801dcbc:	af00      	add	r7, sp, #0
 801dcbe:	6078      	str	r0, [r7, #4]
 801dcc0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 801dcc2:	6839      	ldr	r1, [r7, #0]
 801dcc4:	6878      	ldr	r0, [r7, #4]
 801dcc6:	f001 fe13 	bl	801f8f0 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801dcca:	bf00      	nop
 801dccc:	3708      	adds	r7, #8
 801dcce:	46bd      	mov	sp, r7
 801dcd0:	bd80      	pop	{r7, pc}
	...

0801dcd4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 801dcd4:	b580      	push	{r7, lr}
 801dcd6:	b086      	sub	sp, #24
 801dcd8:	af00      	add	r7, sp, #0
 801dcda:	60f8      	str	r0, [r7, #12]
 801dcdc:	60b9      	str	r1, [r7, #8]
 801dcde:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 801dce0:	68bb      	ldr	r3, [r7, #8]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d106      	bne.n	801dcf4 <netif_do_set_ipaddr+0x20>
 801dce6:	4b1d      	ldr	r3, [pc, #116]	; (801dd5c <netif_do_set_ipaddr+0x88>)
 801dce8:	f240 12cb 	movw	r2, #459	; 0x1cb
 801dcec:	491c      	ldr	r1, [pc, #112]	; (801dd60 <netif_do_set_ipaddr+0x8c>)
 801dcee:	481d      	ldr	r0, [pc, #116]	; (801dd64 <netif_do_set_ipaddr+0x90>)
 801dcf0:	f004 fadc 	bl	80222ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801dcf4:	687b      	ldr	r3, [r7, #4]
 801dcf6:	2b00      	cmp	r3, #0
 801dcf8:	d106      	bne.n	801dd08 <netif_do_set_ipaddr+0x34>
 801dcfa:	4b18      	ldr	r3, [pc, #96]	; (801dd5c <netif_do_set_ipaddr+0x88>)
 801dcfc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 801dd00:	4917      	ldr	r1, [pc, #92]	; (801dd60 <netif_do_set_ipaddr+0x8c>)
 801dd02:	4818      	ldr	r0, [pc, #96]	; (801dd64 <netif_do_set_ipaddr+0x90>)
 801dd04:	f004 fad2 	bl	80222ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 801dd08:	68bb      	ldr	r3, [r7, #8]
 801dd0a:	681a      	ldr	r2, [r3, #0]
 801dd0c:	68fb      	ldr	r3, [r7, #12]
 801dd0e:	3304      	adds	r3, #4
 801dd10:	681b      	ldr	r3, [r3, #0]
 801dd12:	429a      	cmp	r2, r3
 801dd14:	d01c      	beq.n	801dd50 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801dd16:	68bb      	ldr	r3, [r7, #8]
 801dd18:	681b      	ldr	r3, [r3, #0]
 801dd1a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801dd1c:	68fb      	ldr	r3, [r7, #12]
 801dd1e:	3304      	adds	r3, #4
 801dd20:	681a      	ldr	r2, [r3, #0]
 801dd22:	687b      	ldr	r3, [r7, #4]
 801dd24:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801dd26:	f107 0314 	add.w	r3, r7, #20
 801dd2a:	4619      	mov	r1, r3
 801dd2c:	6878      	ldr	r0, [r7, #4]
 801dd2e:	f7ff ffc3 	bl	801dcb8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801dd32:	68bb      	ldr	r3, [r7, #8]
 801dd34:	2b00      	cmp	r3, #0
 801dd36:	d002      	beq.n	801dd3e <netif_do_set_ipaddr+0x6a>
 801dd38:	68bb      	ldr	r3, [r7, #8]
 801dd3a:	681b      	ldr	r3, [r3, #0]
 801dd3c:	e000      	b.n	801dd40 <netif_do_set_ipaddr+0x6c>
 801dd3e:	2300      	movs	r3, #0
 801dd40:	68fa      	ldr	r2, [r7, #12]
 801dd42:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801dd44:	2101      	movs	r1, #1
 801dd46:	68f8      	ldr	r0, [r7, #12]
 801dd48:	f000 f8d2 	bl	801def0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801dd4c:	2301      	movs	r3, #1
 801dd4e:	e000      	b.n	801dd52 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 801dd50:	2300      	movs	r3, #0
}
 801dd52:	4618      	mov	r0, r3
 801dd54:	3718      	adds	r7, #24
 801dd56:	46bd      	mov	sp, r7
 801dd58:	bd80      	pop	{r7, pc}
 801dd5a:	bf00      	nop
 801dd5c:	0802729c 	.word	0x0802729c
 801dd60:	08027404 	.word	0x08027404
 801dd64:	08027320 	.word	0x08027320

0801dd68 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 801dd68:	b480      	push	{r7}
 801dd6a:	b085      	sub	sp, #20
 801dd6c:	af00      	add	r7, sp, #0
 801dd6e:	60f8      	str	r0, [r7, #12]
 801dd70:	60b9      	str	r1, [r7, #8]
 801dd72:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801dd74:	68bb      	ldr	r3, [r7, #8]
 801dd76:	681a      	ldr	r2, [r3, #0]
 801dd78:	68fb      	ldr	r3, [r7, #12]
 801dd7a:	3308      	adds	r3, #8
 801dd7c:	681b      	ldr	r3, [r3, #0]
 801dd7e:	429a      	cmp	r2, r3
 801dd80:	d00a      	beq.n	801dd98 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 801dd82:	68bb      	ldr	r3, [r7, #8]
 801dd84:	2b00      	cmp	r3, #0
 801dd86:	d002      	beq.n	801dd8e <netif_do_set_netmask+0x26>
 801dd88:	68bb      	ldr	r3, [r7, #8]
 801dd8a:	681b      	ldr	r3, [r3, #0]
 801dd8c:	e000      	b.n	801dd90 <netif_do_set_netmask+0x28>
 801dd8e:	2300      	movs	r3, #0
 801dd90:	68fa      	ldr	r2, [r7, #12]
 801dd92:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 801dd94:	2301      	movs	r3, #1
 801dd96:	e000      	b.n	801dd9a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 801dd98:	2300      	movs	r3, #0
}
 801dd9a:	4618      	mov	r0, r3
 801dd9c:	3714      	adds	r7, #20
 801dd9e:	46bd      	mov	sp, r7
 801dda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dda4:	4770      	bx	lr

0801dda6 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 801dda6:	b480      	push	{r7}
 801dda8:	b085      	sub	sp, #20
 801ddaa:	af00      	add	r7, sp, #0
 801ddac:	60f8      	str	r0, [r7, #12]
 801ddae:	60b9      	str	r1, [r7, #8]
 801ddb0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 801ddb2:	68bb      	ldr	r3, [r7, #8]
 801ddb4:	681a      	ldr	r2, [r3, #0]
 801ddb6:	68fb      	ldr	r3, [r7, #12]
 801ddb8:	330c      	adds	r3, #12
 801ddba:	681b      	ldr	r3, [r3, #0]
 801ddbc:	429a      	cmp	r2, r3
 801ddbe:	d00a      	beq.n	801ddd6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 801ddc0:	68bb      	ldr	r3, [r7, #8]
 801ddc2:	2b00      	cmp	r3, #0
 801ddc4:	d002      	beq.n	801ddcc <netif_do_set_gw+0x26>
 801ddc6:	68bb      	ldr	r3, [r7, #8]
 801ddc8:	681b      	ldr	r3, [r3, #0]
 801ddca:	e000      	b.n	801ddce <netif_do_set_gw+0x28>
 801ddcc:	2300      	movs	r3, #0
 801ddce:	68fa      	ldr	r2, [r7, #12]
 801ddd0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 801ddd2:	2301      	movs	r3, #1
 801ddd4:	e000      	b.n	801ddd8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 801ddd6:	2300      	movs	r3, #0
}
 801ddd8:	4618      	mov	r0, r3
 801ddda:	3714      	adds	r7, #20
 801dddc:	46bd      	mov	sp, r7
 801ddde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dde2:	4770      	bx	lr

0801dde4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801dde4:	b580      	push	{r7, lr}
 801dde6:	b088      	sub	sp, #32
 801dde8:	af00      	add	r7, sp, #0
 801ddea:	60f8      	str	r0, [r7, #12]
 801ddec:	60b9      	str	r1, [r7, #8]
 801ddee:	607a      	str	r2, [r7, #4]
 801ddf0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801ddf2:	2300      	movs	r3, #0
 801ddf4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801ddf6:	2300      	movs	r3, #0
 801ddf8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801ddfa:	68bb      	ldr	r3, [r7, #8]
 801ddfc:	2b00      	cmp	r3, #0
 801ddfe:	d101      	bne.n	801de04 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 801de00:	4b1c      	ldr	r3, [pc, #112]	; (801de74 <netif_set_addr+0x90>)
 801de02:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801de04:	687b      	ldr	r3, [r7, #4]
 801de06:	2b00      	cmp	r3, #0
 801de08:	d101      	bne.n	801de0e <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 801de0a:	4b1a      	ldr	r3, [pc, #104]	; (801de74 <netif_set_addr+0x90>)
 801de0c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801de0e:	683b      	ldr	r3, [r7, #0]
 801de10:	2b00      	cmp	r3, #0
 801de12:	d101      	bne.n	801de18 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801de14:	4b17      	ldr	r3, [pc, #92]	; (801de74 <netif_set_addr+0x90>)
 801de16:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 801de18:	68bb      	ldr	r3, [r7, #8]
 801de1a:	2b00      	cmp	r3, #0
 801de1c:	d003      	beq.n	801de26 <netif_set_addr+0x42>
 801de1e:	68bb      	ldr	r3, [r7, #8]
 801de20:	681b      	ldr	r3, [r3, #0]
 801de22:	2b00      	cmp	r3, #0
 801de24:	d101      	bne.n	801de2a <netif_set_addr+0x46>
 801de26:	2301      	movs	r3, #1
 801de28:	e000      	b.n	801de2c <netif_set_addr+0x48>
 801de2a:	2300      	movs	r3, #0
 801de2c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801de2e:	697b      	ldr	r3, [r7, #20]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d006      	beq.n	801de42 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801de34:	f107 0310 	add.w	r3, r7, #16
 801de38:	461a      	mov	r2, r3
 801de3a:	68b9      	ldr	r1, [r7, #8]
 801de3c:	68f8      	ldr	r0, [r7, #12]
 801de3e:	f7ff ff49 	bl	801dcd4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801de42:	69fa      	ldr	r2, [r7, #28]
 801de44:	6879      	ldr	r1, [r7, #4]
 801de46:	68f8      	ldr	r0, [r7, #12]
 801de48:	f7ff ff8e 	bl	801dd68 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801de4c:	69ba      	ldr	r2, [r7, #24]
 801de4e:	6839      	ldr	r1, [r7, #0]
 801de50:	68f8      	ldr	r0, [r7, #12]
 801de52:	f7ff ffa8 	bl	801dda6 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801de56:	697b      	ldr	r3, [r7, #20]
 801de58:	2b00      	cmp	r3, #0
 801de5a:	d106      	bne.n	801de6a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801de5c:	f107 0310 	add.w	r3, r7, #16
 801de60:	461a      	mov	r2, r3
 801de62:	68b9      	ldr	r1, [r7, #8]
 801de64:	68f8      	ldr	r0, [r7, #12]
 801de66:	f7ff ff35 	bl	801dcd4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801de6a:	bf00      	nop
 801de6c:	3720      	adds	r7, #32
 801de6e:	46bd      	mov	sp, r7
 801de70:	bd80      	pop	{r7, pc}
 801de72:	bf00      	nop
 801de74:	08028bc4 	.word	0x08028bc4

0801de78 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 801de78:	b480      	push	{r7}
 801de7a:	b083      	sub	sp, #12
 801de7c:	af00      	add	r7, sp, #0
 801de7e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 801de80:	4a04      	ldr	r2, [pc, #16]	; (801de94 <netif_set_default+0x1c>)
 801de82:	687b      	ldr	r3, [r7, #4]
 801de84:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 801de86:	bf00      	nop
 801de88:	370c      	adds	r7, #12
 801de8a:	46bd      	mov	sp, r7
 801de8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801de90:	4770      	bx	lr
 801de92:	bf00      	nop
 801de94:	20013d70 	.word	0x20013d70

0801de98 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 801de98:	b580      	push	{r7, lr}
 801de9a:	b082      	sub	sp, #8
 801de9c:	af00      	add	r7, sp, #0
 801de9e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 801dea0:	687b      	ldr	r3, [r7, #4]
 801dea2:	2b00      	cmp	r3, #0
 801dea4:	d107      	bne.n	801deb6 <netif_set_up+0x1e>
 801dea6:	4b0f      	ldr	r3, [pc, #60]	; (801dee4 <netif_set_up+0x4c>)
 801dea8:	f44f 7254 	mov.w	r2, #848	; 0x350
 801deac:	490e      	ldr	r1, [pc, #56]	; (801dee8 <netif_set_up+0x50>)
 801deae:	480f      	ldr	r0, [pc, #60]	; (801deec <netif_set_up+0x54>)
 801deb0:	f004 f9fc 	bl	80222ac <iprintf>
 801deb4:	e013      	b.n	801dede <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 801deb6:	687b      	ldr	r3, [r7, #4]
 801deb8:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801debc:	f003 0301 	and.w	r3, r3, #1
 801dec0:	2b00      	cmp	r3, #0
 801dec2:	d10c      	bne.n	801dede <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 801dec4:	687b      	ldr	r3, [r7, #4]
 801dec6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801deca:	f043 0301 	orr.w	r3, r3, #1
 801dece:	b2da      	uxtb	r2, r3
 801ded0:	687b      	ldr	r3, [r7, #4]
 801ded2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801ded6:	2103      	movs	r1, #3
 801ded8:	6878      	ldr	r0, [r7, #4]
 801deda:	f000 f809 	bl	801def0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 801dede:	3708      	adds	r7, #8
 801dee0:	46bd      	mov	sp, r7
 801dee2:	bd80      	pop	{r7, pc}
 801dee4:	0802729c 	.word	0x0802729c
 801dee8:	08027474 	.word	0x08027474
 801deec:	08027320 	.word	0x08027320

0801def0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 801def0:	b580      	push	{r7, lr}
 801def2:	b082      	sub	sp, #8
 801def4:	af00      	add	r7, sp, #0
 801def6:	6078      	str	r0, [r7, #4]
 801def8:	460b      	mov	r3, r1
 801defa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 801defc:	687b      	ldr	r3, [r7, #4]
 801defe:	2b00      	cmp	r3, #0
 801df00:	d106      	bne.n	801df10 <netif_issue_reports+0x20>
 801df02:	4b18      	ldr	r3, [pc, #96]	; (801df64 <netif_issue_reports+0x74>)
 801df04:	f240 326d 	movw	r2, #877	; 0x36d
 801df08:	4917      	ldr	r1, [pc, #92]	; (801df68 <netif_issue_reports+0x78>)
 801df0a:	4818      	ldr	r0, [pc, #96]	; (801df6c <netif_issue_reports+0x7c>)
 801df0c:	f004 f9ce 	bl	80222ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801df10:	687b      	ldr	r3, [r7, #4]
 801df12:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df16:	f003 0304 	and.w	r3, r3, #4
 801df1a:	2b00      	cmp	r3, #0
 801df1c:	d01e      	beq.n	801df5c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801df1e:	687b      	ldr	r3, [r7, #4]
 801df20:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df24:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 801df28:	2b00      	cmp	r3, #0
 801df2a:	d017      	beq.n	801df5c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801df2c:	78fb      	ldrb	r3, [r7, #3]
 801df2e:	f003 0301 	and.w	r3, r3, #1
 801df32:	2b00      	cmp	r3, #0
 801df34:	d013      	beq.n	801df5e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	3304      	adds	r3, #4
 801df3a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801df3c:	2b00      	cmp	r3, #0
 801df3e:	d00e      	beq.n	801df5e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 801df40:	687b      	ldr	r3, [r7, #4]
 801df42:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df46:	f003 0308 	and.w	r3, r3, #8
 801df4a:	2b00      	cmp	r3, #0
 801df4c:	d007      	beq.n	801df5e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801df4e:	687b      	ldr	r3, [r7, #4]
 801df50:	3304      	adds	r3, #4
 801df52:	4619      	mov	r1, r3
 801df54:	6878      	ldr	r0, [r7, #4]
 801df56:	f002 fc35 	bl	80207c4 <etharp_request>
 801df5a:	e000      	b.n	801df5e <netif_issue_reports+0x6e>
    return;
 801df5c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801df5e:	3708      	adds	r7, #8
 801df60:	46bd      	mov	sp, r7
 801df62:	bd80      	pop	{r7, pc}
 801df64:	0802729c 	.word	0x0802729c
 801df68:	08027490 	.word	0x08027490
 801df6c:	08027320 	.word	0x08027320

0801df70 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 801df70:	b580      	push	{r7, lr}
 801df72:	b082      	sub	sp, #8
 801df74:	af00      	add	r7, sp, #0
 801df76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 801df78:	687b      	ldr	r3, [r7, #4]
 801df7a:	2b00      	cmp	r3, #0
 801df7c:	d107      	bne.n	801df8e <netif_set_down+0x1e>
 801df7e:	4b12      	ldr	r3, [pc, #72]	; (801dfc8 <netif_set_down+0x58>)
 801df80:	f240 329b 	movw	r2, #923	; 0x39b
 801df84:	4911      	ldr	r1, [pc, #68]	; (801dfcc <netif_set_down+0x5c>)
 801df86:	4812      	ldr	r0, [pc, #72]	; (801dfd0 <netif_set_down+0x60>)
 801df88:	f004 f990 	bl	80222ac <iprintf>
 801df8c:	e019      	b.n	801dfc2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801df8e:	687b      	ldr	r3, [r7, #4]
 801df90:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801df94:	f003 0301 	and.w	r3, r3, #1
 801df98:	2b00      	cmp	r3, #0
 801df9a:	d012      	beq.n	801dfc2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801df9c:	687b      	ldr	r3, [r7, #4]
 801df9e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dfa2:	f023 0301 	bic.w	r3, r3, #1
 801dfa6:	b2da      	uxtb	r2, r3
 801dfa8:	687b      	ldr	r3, [r7, #4]
 801dfaa:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801dfae:	687b      	ldr	r3, [r7, #4]
 801dfb0:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dfb4:	f003 0308 	and.w	r3, r3, #8
 801dfb8:	2b00      	cmp	r3, #0
 801dfba:	d002      	beq.n	801dfc2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801dfbc:	6878      	ldr	r0, [r7, #4]
 801dfbe:	f001 ffbf 	bl	801ff40 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 801dfc2:	3708      	adds	r7, #8
 801dfc4:	46bd      	mov	sp, r7
 801dfc6:	bd80      	pop	{r7, pc}
 801dfc8:	0802729c 	.word	0x0802729c
 801dfcc:	080274b4 	.word	0x080274b4
 801dfd0:	08027320 	.word	0x08027320

0801dfd4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 801dfd4:	b580      	push	{r7, lr}
 801dfd6:	b082      	sub	sp, #8
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 801dfdc:	687b      	ldr	r3, [r7, #4]
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d107      	bne.n	801dff2 <netif_set_link_up+0x1e>
 801dfe2:	4b13      	ldr	r3, [pc, #76]	; (801e030 <netif_set_link_up+0x5c>)
 801dfe4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 801dfe8:	4912      	ldr	r1, [pc, #72]	; (801e034 <netif_set_link_up+0x60>)
 801dfea:	4813      	ldr	r0, [pc, #76]	; (801e038 <netif_set_link_up+0x64>)
 801dfec:	f004 f95e 	bl	80222ac <iprintf>
 801dff0:	e01b      	b.n	801e02a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801dff2:	687b      	ldr	r3, [r7, #4]
 801dff4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801dff8:	f003 0304 	and.w	r3, r3, #4
 801dffc:	2b00      	cmp	r3, #0
 801dffe:	d114      	bne.n	801e02a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 801e000:	687b      	ldr	r3, [r7, #4]
 801e002:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e006:	f043 0304 	orr.w	r3, r3, #4
 801e00a:	b2da      	uxtb	r2, r3
 801e00c:	687b      	ldr	r3, [r7, #4]
 801e00e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801e012:	2103      	movs	r1, #3
 801e014:	6878      	ldr	r0, [r7, #4]
 801e016:	f7ff ff6b 	bl	801def0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 801e01a:	687b      	ldr	r3, [r7, #4]
 801e01c:	69db      	ldr	r3, [r3, #28]
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d003      	beq.n	801e02a <netif_set_link_up+0x56>
 801e022:	687b      	ldr	r3, [r7, #4]
 801e024:	69db      	ldr	r3, [r3, #28]
 801e026:	6878      	ldr	r0, [r7, #4]
 801e028:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e02a:	3708      	adds	r7, #8
 801e02c:	46bd      	mov	sp, r7
 801e02e:	bd80      	pop	{r7, pc}
 801e030:	0802729c 	.word	0x0802729c
 801e034:	080274d4 	.word	0x080274d4
 801e038:	08027320 	.word	0x08027320

0801e03c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801e03c:	b580      	push	{r7, lr}
 801e03e:	b082      	sub	sp, #8
 801e040:	af00      	add	r7, sp, #0
 801e042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	2b00      	cmp	r3, #0
 801e048:	d107      	bne.n	801e05a <netif_set_link_down+0x1e>
 801e04a:	4b11      	ldr	r3, [pc, #68]	; (801e090 <netif_set_link_down+0x54>)
 801e04c:	f240 4206 	movw	r2, #1030	; 0x406
 801e050:	4910      	ldr	r1, [pc, #64]	; (801e094 <netif_set_link_down+0x58>)
 801e052:	4811      	ldr	r0, [pc, #68]	; (801e098 <netif_set_link_down+0x5c>)
 801e054:	f004 f92a 	bl	80222ac <iprintf>
 801e058:	e017      	b.n	801e08a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801e05a:	687b      	ldr	r3, [r7, #4]
 801e05c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e060:	f003 0304 	and.w	r3, r3, #4
 801e064:	2b00      	cmp	r3, #0
 801e066:	d010      	beq.n	801e08a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 801e068:	687b      	ldr	r3, [r7, #4]
 801e06a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 801e06e:	f023 0304 	bic.w	r3, r3, #4
 801e072:	b2da      	uxtb	r2, r3
 801e074:	687b      	ldr	r3, [r7, #4]
 801e076:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
    NETIF_LINK_CALLBACK(netif);
 801e07a:	687b      	ldr	r3, [r7, #4]
 801e07c:	69db      	ldr	r3, [r3, #28]
 801e07e:	2b00      	cmp	r3, #0
 801e080:	d003      	beq.n	801e08a <netif_set_link_down+0x4e>
 801e082:	687b      	ldr	r3, [r7, #4]
 801e084:	69db      	ldr	r3, [r3, #28]
 801e086:	6878      	ldr	r0, [r7, #4]
 801e088:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801e08a:	3708      	adds	r7, #8
 801e08c:	46bd      	mov	sp, r7
 801e08e:	bd80      	pop	{r7, pc}
 801e090:	0802729c 	.word	0x0802729c
 801e094:	080274f8 	.word	0x080274f8
 801e098:	08027320 	.word	0x08027320

0801e09c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801e09c:	b480      	push	{r7}
 801e09e:	b083      	sub	sp, #12
 801e0a0:	af00      	add	r7, sp, #0
 801e0a2:	6078      	str	r0, [r7, #4]
 801e0a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 801e0a6:	687b      	ldr	r3, [r7, #4]
 801e0a8:	2b00      	cmp	r3, #0
 801e0aa:	d002      	beq.n	801e0b2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	683a      	ldr	r2, [r7, #0]
 801e0b0:	61da      	str	r2, [r3, #28]
  }
}
 801e0b2:	bf00      	nop
 801e0b4:	370c      	adds	r7, #12
 801e0b6:	46bd      	mov	sp, r7
 801e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e0bc:	4770      	bx	lr
	...

0801e0c0 <netif_loop_output>:
 * @return ERR_OK if the packet has been sent
 *         ERR_MEM if the pbuf used to copy the packet couldn't be allocated
 */
err_t
netif_loop_output(struct netif *netif, struct pbuf *p)
{
 801e0c0:	b580      	push	{r7, lr}
 801e0c2:	b086      	sub	sp, #24
 801e0c4:	af00      	add	r7, sp, #0
 801e0c6:	6078      	str	r0, [r7, #4]
 801e0c8:	6039      	str	r1, [r7, #0]
#if LWIP_NETIF_LOOPBACK_MULTITHREADING
  u8_t schedule_poll = 0;
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */
  SYS_ARCH_DECL_PROTECT(lev);

  LWIP_ASSERT("netif_loop_output: invalid netif", netif != NULL);
 801e0ca:	687b      	ldr	r3, [r7, #4]
 801e0cc:	2b00      	cmp	r3, #0
 801e0ce:	d106      	bne.n	801e0de <netif_loop_output+0x1e>
 801e0d0:	4b2d      	ldr	r3, [pc, #180]	; (801e188 <netif_loop_output+0xc8>)
 801e0d2:	f240 424b 	movw	r2, #1099	; 0x44b
 801e0d6:	492d      	ldr	r1, [pc, #180]	; (801e18c <netif_loop_output+0xcc>)
 801e0d8:	482d      	ldr	r0, [pc, #180]	; (801e190 <netif_loop_output+0xd0>)
 801e0da:	f004 f8e7 	bl	80222ac <iprintf>
  LWIP_ASSERT("netif_loop_output: invalid pbuf", p != NULL);
 801e0de:	683b      	ldr	r3, [r7, #0]
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d106      	bne.n	801e0f2 <netif_loop_output+0x32>
 801e0e4:	4b28      	ldr	r3, [pc, #160]	; (801e188 <netif_loop_output+0xc8>)
 801e0e6:	f240 424c 	movw	r2, #1100	; 0x44c
 801e0ea:	492a      	ldr	r1, [pc, #168]	; (801e194 <netif_loop_output+0xd4>)
 801e0ec:	4828      	ldr	r0, [pc, #160]	; (801e190 <netif_loop_output+0xd0>)
 801e0ee:	f004 f8dd 	bl	80222ac <iprintf>

  /* Allocate a new pbuf */
  r = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	891b      	ldrh	r3, [r3, #8]
 801e0f6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e0fa:	4619      	mov	r1, r3
 801e0fc:	200e      	movs	r0, #14
 801e0fe:	f000 f8bb 	bl	801e278 <pbuf_alloc>
 801e102:	6138      	str	r0, [r7, #16]
  if (r == NULL) {
 801e104:	693b      	ldr	r3, [r7, #16]
 801e106:	2b00      	cmp	r3, #0
 801e108:	d102      	bne.n	801e110 <netif_loop_output+0x50>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return ERR_MEM;
 801e10a:	f04f 33ff 	mov.w	r3, #4294967295
 801e10e:	e037      	b.n	801e180 <netif_loop_output+0xc0>
  }
  netif->loop_cnt_current = (u16_t)(netif->loop_cnt_current + clen);
#endif /* LWIP_LOOPBACK_MAX_PBUFS */

  /* Copy the whole pbuf queue p into the single pbuf r */
  if ((err = pbuf_copy(r, p)) != ERR_OK) {
 801e110:	6839      	ldr	r1, [r7, #0]
 801e112:	6938      	ldr	r0, [r7, #16]
 801e114:	f000 fcba 	bl	801ea8c <pbuf_copy>
 801e118:	4603      	mov	r3, r0
 801e11a:	73fb      	strb	r3, [r7, #15]
 801e11c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e120:	2b00      	cmp	r3, #0
 801e122:	d005      	beq.n	801e130 <netif_loop_output+0x70>
    pbuf_free(r);
 801e124:	6938      	ldr	r0, [r7, #16]
 801e126:	f000 fb89 	bl	801e83c <pbuf_free>
    LINK_STATS_INC(link.memerr);
    LINK_STATS_INC(link.drop);
    MIB2_STATS_NETIF_INC(stats_if, ifoutdiscards);
    return err;
 801e12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e12e:	e027      	b.n	801e180 <netif_loop_output+0xc0>

  /* Put the packet on a linked list which gets emptied through calling
     netif_poll(). */

  /* let last point to the last pbuf in chain r */
  for (last = r; last->next != NULL; last = last->next) {
 801e130:	693b      	ldr	r3, [r7, #16]
 801e132:	617b      	str	r3, [r7, #20]
 801e134:	e002      	b.n	801e13c <netif_loop_output+0x7c>
 801e136:	697b      	ldr	r3, [r7, #20]
 801e138:	681b      	ldr	r3, [r3, #0]
 801e13a:	617b      	str	r3, [r7, #20]
 801e13c:	697b      	ldr	r3, [r7, #20]
 801e13e:	681b      	ldr	r3, [r3, #0]
 801e140:	2b00      	cmp	r3, #0
 801e142:	d1f8      	bne.n	801e136 <netif_loop_output+0x76>
    /* nothing to do here, just get to the last pbuf */
  }

  SYS_ARCH_PROTECT(lev);
  if (netif->loop_first != NULL) {
 801e144:	687b      	ldr	r3, [r7, #4]
 801e146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801e148:	2b00      	cmp	r3, #0
 801e14a:	d012      	beq.n	801e172 <netif_loop_output+0xb2>
    LWIP_ASSERT("if first != NULL, last must also be != NULL", netif->loop_last != NULL);
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e150:	2b00      	cmp	r3, #0
 801e152:	d106      	bne.n	801e162 <netif_loop_output+0xa2>
 801e154:	4b0c      	ldr	r3, [pc, #48]	; (801e188 <netif_loop_output+0xc8>)
 801e156:	f240 4277 	movw	r2, #1143	; 0x477
 801e15a:	490f      	ldr	r1, [pc, #60]	; (801e198 <netif_loop_output+0xd8>)
 801e15c:	480c      	ldr	r0, [pc, #48]	; (801e190 <netif_loop_output+0xd0>)
 801e15e:	f004 f8a5 	bl	80222ac <iprintf>
    netif->loop_last->next = r;
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801e166:	693a      	ldr	r2, [r7, #16]
 801e168:	601a      	str	r2, [r3, #0]
    netif->loop_last = last;
 801e16a:	687b      	ldr	r3, [r7, #4]
 801e16c:	697a      	ldr	r2, [r7, #20]
 801e16e:	63da      	str	r2, [r3, #60]	; 0x3c
 801e170:	e005      	b.n	801e17e <netif_loop_output+0xbe>
  } else {
    netif->loop_first = r;
 801e172:	687b      	ldr	r3, [r7, #4]
 801e174:	693a      	ldr	r2, [r7, #16]
 801e176:	639a      	str	r2, [r3, #56]	; 0x38
    netif->loop_last = last;
 801e178:	687b      	ldr	r3, [r7, #4]
 801e17a:	697a      	ldr	r2, [r7, #20]
 801e17c:	63da      	str	r2, [r3, #60]	; 0x3c
  if (schedule_poll) {
    tcpip_try_callback((tcpip_callback_fn)netif_poll, netif);
  }
#endif /* LWIP_NETIF_LOOPBACK_MULTITHREADING */

  return ERR_OK;
 801e17e:	2300      	movs	r3, #0
}
 801e180:	4618      	mov	r0, r3
 801e182:	3718      	adds	r7, #24
 801e184:	46bd      	mov	sp, r7
 801e186:	bd80      	pop	{r7, pc}
 801e188:	0802729c 	.word	0x0802729c
 801e18c:	0802751c 	.word	0x0802751c
 801e190:	08027320 	.word	0x08027320
 801e194:	08027540 	.word	0x08027540
 801e198:	08027560 	.word	0x08027560

0801e19c <netif_loop_output_ipv4>:

#if LWIP_HAVE_LOOPIF
#if LWIP_IPV4
static err_t
netif_loop_output_ipv4(struct netif *netif, struct pbuf *p, const ip4_addr_t *addr)
{
 801e19c:	b580      	push	{r7, lr}
 801e19e:	b084      	sub	sp, #16
 801e1a0:	af00      	add	r7, sp, #0
 801e1a2:	60f8      	str	r0, [r7, #12]
 801e1a4:	60b9      	str	r1, [r7, #8]
 801e1a6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(addr);
  return netif_loop_output(netif, p);
 801e1a8:	68b9      	ldr	r1, [r7, #8]
 801e1aa:	68f8      	ldr	r0, [r7, #12]
 801e1ac:	f7ff ff88 	bl	801e0c0 <netif_loop_output>
 801e1b0:	4603      	mov	r3, r0
}
 801e1b2:	4618      	mov	r0, r3
 801e1b4:	3710      	adds	r7, #16
 801e1b6:	46bd      	mov	sp, r7
 801e1b8:	bd80      	pop	{r7, pc}

0801e1ba <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801e1ba:	b480      	push	{r7}
 801e1bc:	b085      	sub	sp, #20
 801e1be:	af00      	add	r7, sp, #0
 801e1c0:	60f8      	str	r0, [r7, #12]
 801e1c2:	60b9      	str	r1, [r7, #8]
 801e1c4:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 801e1c6:	f06f 030b 	mvn.w	r3, #11
}
 801e1ca:	4618      	mov	r0, r3
 801e1cc:	3714      	adds	r7, #20
 801e1ce:	46bd      	mov	sp, r7
 801e1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e1d4:	4770      	bx	lr
	...

0801e1d8 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 801e1d8:	b480      	push	{r7}
 801e1da:	b085      	sub	sp, #20
 801e1dc:	af00      	add	r7, sp, #0
 801e1de:	4603      	mov	r3, r0
 801e1e0:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801e1e2:	79fb      	ldrb	r3, [r7, #7]
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d013      	beq.n	801e210 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 801e1e8:	4b0d      	ldr	r3, [pc, #52]	; (801e220 <netif_get_by_index+0x48>)
 801e1ea:	681b      	ldr	r3, [r3, #0]
 801e1ec:	60fb      	str	r3, [r7, #12]
 801e1ee:	e00c      	b.n	801e20a <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801e1f6:	3301      	adds	r3, #1
 801e1f8:	b2db      	uxtb	r3, r3
 801e1fa:	79fa      	ldrb	r2, [r7, #7]
 801e1fc:	429a      	cmp	r2, r3
 801e1fe:	d101      	bne.n	801e204 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801e200:	68fb      	ldr	r3, [r7, #12]
 801e202:	e006      	b.n	801e212 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 801e204:	68fb      	ldr	r3, [r7, #12]
 801e206:	681b      	ldr	r3, [r3, #0]
 801e208:	60fb      	str	r3, [r7, #12]
 801e20a:	68fb      	ldr	r3, [r7, #12]
 801e20c:	2b00      	cmp	r3, #0
 801e20e:	d1ef      	bne.n	801e1f0 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801e210:	2300      	movs	r3, #0
}
 801e212:	4618      	mov	r0, r3
 801e214:	3714      	adds	r7, #20
 801e216:	46bd      	mov	sp, r7
 801e218:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e21c:	4770      	bx	lr
 801e21e:	bf00      	nop
 801e220:	20013d6c 	.word	0x20013d6c

0801e224 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 801e224:	b480      	push	{r7}
 801e226:	b085      	sub	sp, #20
 801e228:	af00      	add	r7, sp, #0
 801e22a:	60f8      	str	r0, [r7, #12]
 801e22c:	60b9      	str	r1, [r7, #8]
 801e22e:	4611      	mov	r1, r2
 801e230:	461a      	mov	r2, r3
 801e232:	460b      	mov	r3, r1
 801e234:	80fb      	strh	r3, [r7, #6]
 801e236:	4613      	mov	r3, r2
 801e238:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801e23a:	68fb      	ldr	r3, [r7, #12]
 801e23c:	2200      	movs	r2, #0
 801e23e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 801e240:	68fb      	ldr	r3, [r7, #12]
 801e242:	68ba      	ldr	r2, [r7, #8]
 801e244:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 801e246:	68fb      	ldr	r3, [r7, #12]
 801e248:	88fa      	ldrh	r2, [r7, #6]
 801e24a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801e24c:	68fb      	ldr	r3, [r7, #12]
 801e24e:	88ba      	ldrh	r2, [r7, #4]
 801e250:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 801e252:	8b3b      	ldrh	r3, [r7, #24]
 801e254:	b2da      	uxtb	r2, r3
 801e256:	68fb      	ldr	r3, [r7, #12]
 801e258:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	7f3a      	ldrb	r2, [r7, #28]
 801e25e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 801e260:	68fb      	ldr	r3, [r7, #12]
 801e262:	2201      	movs	r2, #1
 801e264:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 801e266:	68fb      	ldr	r3, [r7, #12]
 801e268:	2200      	movs	r2, #0
 801e26a:	73da      	strb	r2, [r3, #15]
}
 801e26c:	bf00      	nop
 801e26e:	3714      	adds	r7, #20
 801e270:	46bd      	mov	sp, r7
 801e272:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e276:	4770      	bx	lr

0801e278 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 801e278:	b580      	push	{r7, lr}
 801e27a:	b08c      	sub	sp, #48	; 0x30
 801e27c:	af02      	add	r7, sp, #8
 801e27e:	4603      	mov	r3, r0
 801e280:	71fb      	strb	r3, [r7, #7]
 801e282:	460b      	mov	r3, r1
 801e284:	80bb      	strh	r3, [r7, #4]
 801e286:	4613      	mov	r3, r2
 801e288:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801e28a:	79fb      	ldrb	r3, [r7, #7]
 801e28c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801e28e:	887b      	ldrh	r3, [r7, #2]
 801e290:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e294:	d07d      	beq.n	801e392 <pbuf_alloc+0x11a>
 801e296:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801e29a:	f300 80c6 	bgt.w	801e42a <pbuf_alloc+0x1b2>
 801e29e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e2a2:	d010      	beq.n	801e2c6 <pbuf_alloc+0x4e>
 801e2a4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801e2a8:	f300 80bf 	bgt.w	801e42a <pbuf_alloc+0x1b2>
 801e2ac:	2b01      	cmp	r3, #1
 801e2ae:	d002      	beq.n	801e2b6 <pbuf_alloc+0x3e>
 801e2b0:	2b41      	cmp	r3, #65	; 0x41
 801e2b2:	f040 80ba 	bne.w	801e42a <pbuf_alloc+0x1b2>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801e2b6:	887a      	ldrh	r2, [r7, #2]
 801e2b8:	88bb      	ldrh	r3, [r7, #4]
 801e2ba:	4619      	mov	r1, r3
 801e2bc:	2000      	movs	r0, #0
 801e2be:	f000 f8cf 	bl	801e460 <pbuf_alloc_reference>
 801e2c2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801e2c4:	e0bb      	b.n	801e43e <pbuf_alloc+0x1c6>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801e2c6:	2300      	movs	r3, #0
 801e2c8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 801e2ca:	2300      	movs	r3, #0
 801e2cc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 801e2ce:	88bb      	ldrh	r3, [r7, #4]
 801e2d0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801e2d2:	2005      	movs	r0, #5
 801e2d4:	f7ff fb32 	bl	801d93c <memp_malloc>
 801e2d8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 801e2da:	693b      	ldr	r3, [r7, #16]
 801e2dc:	2b00      	cmp	r3, #0
 801e2de:	d107      	bne.n	801e2f0 <pbuf_alloc+0x78>
          PBUF_POOL_IS_EMPTY();
          /* free chain so far allocated */
          if (p) {
 801e2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e2e2:	2b00      	cmp	r3, #0
 801e2e4:	d002      	beq.n	801e2ec <pbuf_alloc+0x74>
            pbuf_free(p);
 801e2e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e2e8:	f000 faa8 	bl	801e83c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 801e2ec:	2300      	movs	r3, #0
 801e2ee:	e0a7      	b.n	801e440 <pbuf_alloc+0x1c8>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801e2f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e2f2:	3303      	adds	r3, #3
 801e2f4:	b29b      	uxth	r3, r3
 801e2f6:	f023 0303 	bic.w	r3, r3, #3
 801e2fa:	b29b      	uxth	r3, r3
 801e2fc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801e300:	b29b      	uxth	r3, r3
 801e302:	8b7a      	ldrh	r2, [r7, #26]
 801e304:	4293      	cmp	r3, r2
 801e306:	bf28      	it	cs
 801e308:	4613      	movcs	r3, r2
 801e30a:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 801e30c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e30e:	3310      	adds	r3, #16
 801e310:	693a      	ldr	r2, [r7, #16]
 801e312:	4413      	add	r3, r2
 801e314:	3303      	adds	r3, #3
 801e316:	f023 0303 	bic.w	r3, r3, #3
 801e31a:	4618      	mov	r0, r3
 801e31c:	89f9      	ldrh	r1, [r7, #14]
 801e31e:	8b7a      	ldrh	r2, [r7, #26]
 801e320:	2300      	movs	r3, #0
 801e322:	9301      	str	r3, [sp, #4]
 801e324:	887b      	ldrh	r3, [r7, #2]
 801e326:	9300      	str	r3, [sp, #0]
 801e328:	460b      	mov	r3, r1
 801e32a:	4601      	mov	r1, r0
 801e32c:	6938      	ldr	r0, [r7, #16]
 801e32e:	f7ff ff79 	bl	801e224 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801e332:	693b      	ldr	r3, [r7, #16]
 801e334:	685b      	ldr	r3, [r3, #4]
 801e336:	f003 0303 	and.w	r3, r3, #3
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d006      	beq.n	801e34c <pbuf_alloc+0xd4>
 801e33e:	4b42      	ldr	r3, [pc, #264]	; (801e448 <pbuf_alloc+0x1d0>)
 801e340:	f44f 7280 	mov.w	r2, #256	; 0x100
 801e344:	4941      	ldr	r1, [pc, #260]	; (801e44c <pbuf_alloc+0x1d4>)
 801e346:	4842      	ldr	r0, [pc, #264]	; (801e450 <pbuf_alloc+0x1d8>)
 801e348:	f003 ffb0 	bl	80222ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 801e34c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e34e:	3303      	adds	r3, #3
 801e350:	f023 0303 	bic.w	r3, r3, #3
 801e354:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801e358:	d106      	bne.n	801e368 <pbuf_alloc+0xf0>
 801e35a:	4b3b      	ldr	r3, [pc, #236]	; (801e448 <pbuf_alloc+0x1d0>)
 801e35c:	f44f 7281 	mov.w	r2, #258	; 0x102
 801e360:	493c      	ldr	r1, [pc, #240]	; (801e454 <pbuf_alloc+0x1dc>)
 801e362:	483b      	ldr	r0, [pc, #236]	; (801e450 <pbuf_alloc+0x1d8>)
 801e364:	f003 ffa2 	bl	80222ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801e368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e36a:	2b00      	cmp	r3, #0
 801e36c:	d102      	bne.n	801e374 <pbuf_alloc+0xfc>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801e36e:	693b      	ldr	r3, [r7, #16]
 801e370:	627b      	str	r3, [r7, #36]	; 0x24
 801e372:	e002      	b.n	801e37a <pbuf_alloc+0x102>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 801e374:	69fb      	ldr	r3, [r7, #28]
 801e376:	693a      	ldr	r2, [r7, #16]
 801e378:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801e37a:	693b      	ldr	r3, [r7, #16]
 801e37c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801e37e:	8b7a      	ldrh	r2, [r7, #26]
 801e380:	89fb      	ldrh	r3, [r7, #14]
 801e382:	1ad3      	subs	r3, r2, r3
 801e384:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801e386:	2300      	movs	r3, #0
 801e388:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801e38a:	8b7b      	ldrh	r3, [r7, #26]
 801e38c:	2b00      	cmp	r3, #0
 801e38e:	d1a0      	bne.n	801e2d2 <pbuf_alloc+0x5a>
      break;
 801e390:	e055      	b.n	801e43e <pbuf_alloc+0x1c6>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801e392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e394:	3303      	adds	r3, #3
 801e396:	b29b      	uxth	r3, r3
 801e398:	f023 0303 	bic.w	r3, r3, #3
 801e39c:	b29a      	uxth	r2, r3
 801e39e:	88bb      	ldrh	r3, [r7, #4]
 801e3a0:	3303      	adds	r3, #3
 801e3a2:	b29b      	uxth	r3, r3
 801e3a4:	f023 0303 	bic.w	r3, r3, #3
 801e3a8:	b29b      	uxth	r3, r3
 801e3aa:	4413      	add	r3, r2
 801e3ac:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801e3ae:	8b3b      	ldrh	r3, [r7, #24]
 801e3b0:	3310      	adds	r3, #16
 801e3b2:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e3b4:	8b3a      	ldrh	r2, [r7, #24]
 801e3b6:	88bb      	ldrh	r3, [r7, #4]
 801e3b8:	3303      	adds	r3, #3
 801e3ba:	f023 0303 	bic.w	r3, r3, #3
 801e3be:	429a      	cmp	r2, r3
 801e3c0:	d306      	bcc.n	801e3d0 <pbuf_alloc+0x158>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801e3c2:	8afa      	ldrh	r2, [r7, #22]
 801e3c4:	88bb      	ldrh	r3, [r7, #4]
 801e3c6:	3303      	adds	r3, #3
 801e3c8:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 801e3cc:	429a      	cmp	r2, r3
 801e3ce:	d201      	bcs.n	801e3d4 <pbuf_alloc+0x15c>
        return NULL;
 801e3d0:	2300      	movs	r3, #0
 801e3d2:	e035      	b.n	801e440 <pbuf_alloc+0x1c8>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 801e3d4:	8afb      	ldrh	r3, [r7, #22]
 801e3d6:	4618      	mov	r0, r3
 801e3d8:	f7ff f920 	bl	801d61c <mem_malloc>
 801e3dc:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801e3de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e3e0:	2b00      	cmp	r3, #0
 801e3e2:	d101      	bne.n	801e3e8 <pbuf_alloc+0x170>
        return NULL;
 801e3e4:	2300      	movs	r3, #0
 801e3e6:	e02b      	b.n	801e440 <pbuf_alloc+0x1c8>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 801e3e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801e3ea:	3310      	adds	r3, #16
 801e3ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e3ee:	4413      	add	r3, r2
 801e3f0:	3303      	adds	r3, #3
 801e3f2:	f023 0303 	bic.w	r3, r3, #3
 801e3f6:	4618      	mov	r0, r3
 801e3f8:	88b9      	ldrh	r1, [r7, #4]
 801e3fa:	88ba      	ldrh	r2, [r7, #4]
 801e3fc:	2300      	movs	r3, #0
 801e3fe:	9301      	str	r3, [sp, #4]
 801e400:	887b      	ldrh	r3, [r7, #2]
 801e402:	9300      	str	r3, [sp, #0]
 801e404:	460b      	mov	r3, r1
 801e406:	4601      	mov	r1, r0
 801e408:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e40a:	f7ff ff0b 	bl	801e224 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801e40e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e410:	685b      	ldr	r3, [r3, #4]
 801e412:	f003 0303 	and.w	r3, r3, #3
 801e416:	2b00      	cmp	r3, #0
 801e418:	d010      	beq.n	801e43c <pbuf_alloc+0x1c4>
 801e41a:	4b0b      	ldr	r3, [pc, #44]	; (801e448 <pbuf_alloc+0x1d0>)
 801e41c:	f44f 7291 	mov.w	r2, #290	; 0x122
 801e420:	490d      	ldr	r1, [pc, #52]	; (801e458 <pbuf_alloc+0x1e0>)
 801e422:	480b      	ldr	r0, [pc, #44]	; (801e450 <pbuf_alloc+0x1d8>)
 801e424:	f003 ff42 	bl	80222ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 801e428:	e008      	b.n	801e43c <pbuf_alloc+0x1c4>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 801e42a:	4b07      	ldr	r3, [pc, #28]	; (801e448 <pbuf_alloc+0x1d0>)
 801e42c:	f240 1227 	movw	r2, #295	; 0x127
 801e430:	490a      	ldr	r1, [pc, #40]	; (801e45c <pbuf_alloc+0x1e4>)
 801e432:	4807      	ldr	r0, [pc, #28]	; (801e450 <pbuf_alloc+0x1d8>)
 801e434:	f003 ff3a 	bl	80222ac <iprintf>
      return NULL;
 801e438:	2300      	movs	r3, #0
 801e43a:	e001      	b.n	801e440 <pbuf_alloc+0x1c8>
      break;
 801e43c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801e43e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801e440:	4618      	mov	r0, r3
 801e442:	3728      	adds	r7, #40	; 0x28
 801e444:	46bd      	mov	sp, r7
 801e446:	bd80      	pop	{r7, pc}
 801e448:	08027600 	.word	0x08027600
 801e44c:	08027660 	.word	0x08027660
 801e450:	08027690 	.word	0x08027690
 801e454:	080276b8 	.word	0x080276b8
 801e458:	080276ec 	.word	0x080276ec
 801e45c:	08027718 	.word	0x08027718

0801e460 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801e460:	b580      	push	{r7, lr}
 801e462:	b086      	sub	sp, #24
 801e464:	af02      	add	r7, sp, #8
 801e466:	6078      	str	r0, [r7, #4]
 801e468:	460b      	mov	r3, r1
 801e46a:	807b      	strh	r3, [r7, #2]
 801e46c:	4613      	mov	r3, r2
 801e46e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801e470:	883b      	ldrh	r3, [r7, #0]
 801e472:	2b41      	cmp	r3, #65	; 0x41
 801e474:	d009      	beq.n	801e48a <pbuf_alloc_reference+0x2a>
 801e476:	883b      	ldrh	r3, [r7, #0]
 801e478:	2b01      	cmp	r3, #1
 801e47a:	d006      	beq.n	801e48a <pbuf_alloc_reference+0x2a>
 801e47c:	4b0f      	ldr	r3, [pc, #60]	; (801e4bc <pbuf_alloc_reference+0x5c>)
 801e47e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801e482:	490f      	ldr	r1, [pc, #60]	; (801e4c0 <pbuf_alloc_reference+0x60>)
 801e484:	480f      	ldr	r0, [pc, #60]	; (801e4c4 <pbuf_alloc_reference+0x64>)
 801e486:	f003 ff11 	bl	80222ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 801e48a:	2004      	movs	r0, #4
 801e48c:	f7ff fa56 	bl	801d93c <memp_malloc>
 801e490:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801e492:	68fb      	ldr	r3, [r7, #12]
 801e494:	2b00      	cmp	r3, #0
 801e496:	d101      	bne.n	801e49c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 801e498:	2300      	movs	r3, #0
 801e49a:	e00b      	b.n	801e4b4 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 801e49c:	8879      	ldrh	r1, [r7, #2]
 801e49e:	887a      	ldrh	r2, [r7, #2]
 801e4a0:	2300      	movs	r3, #0
 801e4a2:	9301      	str	r3, [sp, #4]
 801e4a4:	883b      	ldrh	r3, [r7, #0]
 801e4a6:	9300      	str	r3, [sp, #0]
 801e4a8:	460b      	mov	r3, r1
 801e4aa:	6879      	ldr	r1, [r7, #4]
 801e4ac:	68f8      	ldr	r0, [r7, #12]
 801e4ae:	f7ff feb9 	bl	801e224 <pbuf_init_alloced_pbuf>
  return p;
 801e4b2:	68fb      	ldr	r3, [r7, #12]
}
 801e4b4:	4618      	mov	r0, r3
 801e4b6:	3710      	adds	r7, #16
 801e4b8:	46bd      	mov	sp, r7
 801e4ba:	bd80      	pop	{r7, pc}
 801e4bc:	08027600 	.word	0x08027600
 801e4c0:	08027734 	.word	0x08027734
 801e4c4:	08027690 	.word	0x08027690

0801e4c8 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 801e4c8:	b580      	push	{r7, lr}
 801e4ca:	b088      	sub	sp, #32
 801e4cc:	af02      	add	r7, sp, #8
 801e4ce:	607b      	str	r3, [r7, #4]
 801e4d0:	4603      	mov	r3, r0
 801e4d2:	73fb      	strb	r3, [r7, #15]
 801e4d4:	460b      	mov	r3, r1
 801e4d6:	81bb      	strh	r3, [r7, #12]
 801e4d8:	4613      	mov	r3, r2
 801e4da:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 801e4dc:	7bfb      	ldrb	r3, [r7, #15]
 801e4de:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801e4e0:	8a7b      	ldrh	r3, [r7, #18]
 801e4e2:	3303      	adds	r3, #3
 801e4e4:	f023 0203 	bic.w	r2, r3, #3
 801e4e8:	89bb      	ldrh	r3, [r7, #12]
 801e4ea:	441a      	add	r2, r3
 801e4ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801e4ee:	429a      	cmp	r2, r3
 801e4f0:	d901      	bls.n	801e4f6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	e018      	b.n	801e528 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 801e4f6:	6a3b      	ldr	r3, [r7, #32]
 801e4f8:	2b00      	cmp	r3, #0
 801e4fa:	d007      	beq.n	801e50c <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 801e4fc:	8a7b      	ldrh	r3, [r7, #18]
 801e4fe:	3303      	adds	r3, #3
 801e500:	f023 0303 	bic.w	r3, r3, #3
 801e504:	6a3a      	ldr	r2, [r7, #32]
 801e506:	4413      	add	r3, r2
 801e508:	617b      	str	r3, [r7, #20]
 801e50a:	e001      	b.n	801e510 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 801e50c:	2300      	movs	r3, #0
 801e50e:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801e510:	6878      	ldr	r0, [r7, #4]
 801e512:	89b9      	ldrh	r1, [r7, #12]
 801e514:	89ba      	ldrh	r2, [r7, #12]
 801e516:	2302      	movs	r3, #2
 801e518:	9301      	str	r3, [sp, #4]
 801e51a:	897b      	ldrh	r3, [r7, #10]
 801e51c:	9300      	str	r3, [sp, #0]
 801e51e:	460b      	mov	r3, r1
 801e520:	6979      	ldr	r1, [r7, #20]
 801e522:	f7ff fe7f 	bl	801e224 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 801e526:	687b      	ldr	r3, [r7, #4]
}
 801e528:	4618      	mov	r0, r3
 801e52a:	3718      	adds	r7, #24
 801e52c:	46bd      	mov	sp, r7
 801e52e:	bd80      	pop	{r7, pc}

0801e530 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801e530:	b580      	push	{r7, lr}
 801e532:	b084      	sub	sp, #16
 801e534:	af00      	add	r7, sp, #0
 801e536:	6078      	str	r0, [r7, #4]
 801e538:	460b      	mov	r3, r1
 801e53a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 801e53c:	687b      	ldr	r3, [r7, #4]
 801e53e:	2b00      	cmp	r3, #0
 801e540:	d106      	bne.n	801e550 <pbuf_realloc+0x20>
 801e542:	4b3a      	ldr	r3, [pc, #232]	; (801e62c <pbuf_realloc+0xfc>)
 801e544:	f44f 72cc 	mov.w	r2, #408	; 0x198
 801e548:	4939      	ldr	r1, [pc, #228]	; (801e630 <pbuf_realloc+0x100>)
 801e54a:	483a      	ldr	r0, [pc, #232]	; (801e634 <pbuf_realloc+0x104>)
 801e54c:	f003 feae 	bl	80222ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	891b      	ldrh	r3, [r3, #8]
 801e554:	887a      	ldrh	r2, [r7, #2]
 801e556:	429a      	cmp	r2, r3
 801e558:	d263      	bcs.n	801e622 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	891a      	ldrh	r2, [r3, #8]
 801e55e:	887b      	ldrh	r3, [r7, #2]
 801e560:	1ad3      	subs	r3, r2, r3
 801e562:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 801e564:	887b      	ldrh	r3, [r7, #2]
 801e566:	817b      	strh	r3, [r7, #10]
  q = p;
 801e568:	687b      	ldr	r3, [r7, #4]
 801e56a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 801e56c:	e018      	b.n	801e5a0 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 801e56e:	68fb      	ldr	r3, [r7, #12]
 801e570:	895b      	ldrh	r3, [r3, #10]
 801e572:	897a      	ldrh	r2, [r7, #10]
 801e574:	1ad3      	subs	r3, r2, r3
 801e576:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 801e578:	68fb      	ldr	r3, [r7, #12]
 801e57a:	891a      	ldrh	r2, [r3, #8]
 801e57c:	893b      	ldrh	r3, [r7, #8]
 801e57e:	1ad3      	subs	r3, r2, r3
 801e580:	b29a      	uxth	r2, r3
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 801e586:	68fb      	ldr	r3, [r7, #12]
 801e588:	681b      	ldr	r3, [r3, #0]
 801e58a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 801e58c:	68fb      	ldr	r3, [r7, #12]
 801e58e:	2b00      	cmp	r3, #0
 801e590:	d106      	bne.n	801e5a0 <pbuf_realloc+0x70>
 801e592:	4b26      	ldr	r3, [pc, #152]	; (801e62c <pbuf_realloc+0xfc>)
 801e594:	f240 12af 	movw	r2, #431	; 0x1af
 801e598:	4927      	ldr	r1, [pc, #156]	; (801e638 <pbuf_realloc+0x108>)
 801e59a:	4826      	ldr	r0, [pc, #152]	; (801e634 <pbuf_realloc+0x104>)
 801e59c:	f003 fe86 	bl	80222ac <iprintf>
  while (rem_len > q->len) {
 801e5a0:	68fb      	ldr	r3, [r7, #12]
 801e5a2:	895b      	ldrh	r3, [r3, #10]
 801e5a4:	897a      	ldrh	r2, [r7, #10]
 801e5a6:	429a      	cmp	r2, r3
 801e5a8:	d8e1      	bhi.n	801e56e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 801e5aa:	68fb      	ldr	r3, [r7, #12]
 801e5ac:	7b1b      	ldrb	r3, [r3, #12]
 801e5ae:	f003 030f 	and.w	r3, r3, #15
 801e5b2:	2b00      	cmp	r3, #0
 801e5b4:	d121      	bne.n	801e5fa <pbuf_realloc+0xca>
 801e5b6:	68fb      	ldr	r3, [r7, #12]
 801e5b8:	895b      	ldrh	r3, [r3, #10]
 801e5ba:	897a      	ldrh	r2, [r7, #10]
 801e5bc:	429a      	cmp	r2, r3
 801e5be:	d01c      	beq.n	801e5fa <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801e5c0:	68fb      	ldr	r3, [r7, #12]
 801e5c2:	7b5b      	ldrb	r3, [r3, #13]
 801e5c4:	f003 0302 	and.w	r3, r3, #2
 801e5c8:	2b00      	cmp	r3, #0
 801e5ca:	d116      	bne.n	801e5fa <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 801e5cc:	68fb      	ldr	r3, [r7, #12]
 801e5ce:	685a      	ldr	r2, [r3, #4]
 801e5d0:	68fb      	ldr	r3, [r7, #12]
 801e5d2:	1ad3      	subs	r3, r2, r3
 801e5d4:	b29a      	uxth	r2, r3
 801e5d6:	897b      	ldrh	r3, [r7, #10]
 801e5d8:	4413      	add	r3, r2
 801e5da:	b29b      	uxth	r3, r3
 801e5dc:	4619      	mov	r1, r3
 801e5de:	68f8      	ldr	r0, [r7, #12]
 801e5e0:	f7fe ff20 	bl	801d424 <mem_trim>
 801e5e4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801e5e6:	68fb      	ldr	r3, [r7, #12]
 801e5e8:	2b00      	cmp	r3, #0
 801e5ea:	d106      	bne.n	801e5fa <pbuf_realloc+0xca>
 801e5ec:	4b0f      	ldr	r3, [pc, #60]	; (801e62c <pbuf_realloc+0xfc>)
 801e5ee:	f240 12bd 	movw	r2, #445	; 0x1bd
 801e5f2:	4912      	ldr	r1, [pc, #72]	; (801e63c <pbuf_realloc+0x10c>)
 801e5f4:	480f      	ldr	r0, [pc, #60]	; (801e634 <pbuf_realloc+0x104>)
 801e5f6:	f003 fe59 	bl	80222ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 801e5fa:	68fb      	ldr	r3, [r7, #12]
 801e5fc:	897a      	ldrh	r2, [r7, #10]
 801e5fe:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801e600:	68fb      	ldr	r3, [r7, #12]
 801e602:	895a      	ldrh	r2, [r3, #10]
 801e604:	68fb      	ldr	r3, [r7, #12]
 801e606:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 801e608:	68fb      	ldr	r3, [r7, #12]
 801e60a:	681b      	ldr	r3, [r3, #0]
 801e60c:	2b00      	cmp	r3, #0
 801e60e:	d004      	beq.n	801e61a <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801e610:	68fb      	ldr	r3, [r7, #12]
 801e612:	681b      	ldr	r3, [r3, #0]
 801e614:	4618      	mov	r0, r3
 801e616:	f000 f911 	bl	801e83c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 801e61a:	68fb      	ldr	r3, [r7, #12]
 801e61c:	2200      	movs	r2, #0
 801e61e:	601a      	str	r2, [r3, #0]
 801e620:	e000      	b.n	801e624 <pbuf_realloc+0xf4>
    return;
 801e622:	bf00      	nop

}
 801e624:	3710      	adds	r7, #16
 801e626:	46bd      	mov	sp, r7
 801e628:	bd80      	pop	{r7, pc}
 801e62a:	bf00      	nop
 801e62c:	08027600 	.word	0x08027600
 801e630:	08027748 	.word	0x08027748
 801e634:	08027690 	.word	0x08027690
 801e638:	08027760 	.word	0x08027760
 801e63c:	08027778 	.word	0x08027778

0801e640 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 801e640:	b580      	push	{r7, lr}
 801e642:	b086      	sub	sp, #24
 801e644:	af00      	add	r7, sp, #0
 801e646:	60f8      	str	r0, [r7, #12]
 801e648:	60b9      	str	r1, [r7, #8]
 801e64a:	4613      	mov	r3, r2
 801e64c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e64e:	68fb      	ldr	r3, [r7, #12]
 801e650:	2b00      	cmp	r3, #0
 801e652:	d106      	bne.n	801e662 <pbuf_add_header_impl+0x22>
 801e654:	4b2b      	ldr	r3, [pc, #172]	; (801e704 <pbuf_add_header_impl+0xc4>)
 801e656:	f240 12df 	movw	r2, #479	; 0x1df
 801e65a:	492b      	ldr	r1, [pc, #172]	; (801e708 <pbuf_add_header_impl+0xc8>)
 801e65c:	482b      	ldr	r0, [pc, #172]	; (801e70c <pbuf_add_header_impl+0xcc>)
 801e65e:	f003 fe25 	bl	80222ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801e662:	68fb      	ldr	r3, [r7, #12]
 801e664:	2b00      	cmp	r3, #0
 801e666:	d003      	beq.n	801e670 <pbuf_add_header_impl+0x30>
 801e668:	68bb      	ldr	r3, [r7, #8]
 801e66a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e66e:	d301      	bcc.n	801e674 <pbuf_add_header_impl+0x34>
    return 1;
 801e670:	2301      	movs	r3, #1
 801e672:	e043      	b.n	801e6fc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 801e674:	68bb      	ldr	r3, [r7, #8]
 801e676:	2b00      	cmp	r3, #0
 801e678:	d101      	bne.n	801e67e <pbuf_add_header_impl+0x3e>
    return 0;
 801e67a:	2300      	movs	r3, #0
 801e67c:	e03e      	b.n	801e6fc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801e67e:	68bb      	ldr	r3, [r7, #8]
 801e680:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801e682:	68fb      	ldr	r3, [r7, #12]
 801e684:	891a      	ldrh	r2, [r3, #8]
 801e686:	8a7b      	ldrh	r3, [r7, #18]
 801e688:	4413      	add	r3, r2
 801e68a:	b29b      	uxth	r3, r3
 801e68c:	8a7a      	ldrh	r2, [r7, #18]
 801e68e:	429a      	cmp	r2, r3
 801e690:	d901      	bls.n	801e696 <pbuf_add_header_impl+0x56>
    return 1;
 801e692:	2301      	movs	r3, #1
 801e694:	e032      	b.n	801e6fc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 801e696:	68fb      	ldr	r3, [r7, #12]
 801e698:	7b1b      	ldrb	r3, [r3, #12]
 801e69a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 801e69c:	8a3b      	ldrh	r3, [r7, #16]
 801e69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801e6a2:	2b00      	cmp	r3, #0
 801e6a4:	d00c      	beq.n	801e6c0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 801e6a6:	68fb      	ldr	r3, [r7, #12]
 801e6a8:	685a      	ldr	r2, [r3, #4]
 801e6aa:	68bb      	ldr	r3, [r7, #8]
 801e6ac:	425b      	negs	r3, r3
 801e6ae:	4413      	add	r3, r2
 801e6b0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801e6b2:	68fb      	ldr	r3, [r7, #12]
 801e6b4:	3310      	adds	r3, #16
 801e6b6:	697a      	ldr	r2, [r7, #20]
 801e6b8:	429a      	cmp	r2, r3
 801e6ba:	d20d      	bcs.n	801e6d8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 801e6bc:	2301      	movs	r3, #1
 801e6be:	e01d      	b.n	801e6fc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801e6c0:	79fb      	ldrb	r3, [r7, #7]
 801e6c2:	2b00      	cmp	r3, #0
 801e6c4:	d006      	beq.n	801e6d4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 801e6c6:	68fb      	ldr	r3, [r7, #12]
 801e6c8:	685a      	ldr	r2, [r3, #4]
 801e6ca:	68bb      	ldr	r3, [r7, #8]
 801e6cc:	425b      	negs	r3, r3
 801e6ce:	4413      	add	r3, r2
 801e6d0:	617b      	str	r3, [r7, #20]
 801e6d2:	e001      	b.n	801e6d8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801e6d4:	2301      	movs	r3, #1
 801e6d6:	e011      	b.n	801e6fc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 801e6d8:	68fb      	ldr	r3, [r7, #12]
 801e6da:	697a      	ldr	r2, [r7, #20]
 801e6dc:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801e6de:	68fb      	ldr	r3, [r7, #12]
 801e6e0:	895a      	ldrh	r2, [r3, #10]
 801e6e2:	8a7b      	ldrh	r3, [r7, #18]
 801e6e4:	4413      	add	r3, r2
 801e6e6:	b29a      	uxth	r2, r3
 801e6e8:	68fb      	ldr	r3, [r7, #12]
 801e6ea:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 801e6ec:	68fb      	ldr	r3, [r7, #12]
 801e6ee:	891a      	ldrh	r2, [r3, #8]
 801e6f0:	8a7b      	ldrh	r3, [r7, #18]
 801e6f2:	4413      	add	r3, r2
 801e6f4:	b29a      	uxth	r2, r3
 801e6f6:	68fb      	ldr	r3, [r7, #12]
 801e6f8:	811a      	strh	r2, [r3, #8]


  return 0;
 801e6fa:	2300      	movs	r3, #0
}
 801e6fc:	4618      	mov	r0, r3
 801e6fe:	3718      	adds	r7, #24
 801e700:	46bd      	mov	sp, r7
 801e702:	bd80      	pop	{r7, pc}
 801e704:	08027600 	.word	0x08027600
 801e708:	08027794 	.word	0x08027794
 801e70c:	08027690 	.word	0x08027690

0801e710 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801e710:	b580      	push	{r7, lr}
 801e712:	b082      	sub	sp, #8
 801e714:	af00      	add	r7, sp, #0
 801e716:	6078      	str	r0, [r7, #4]
 801e718:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801e71a:	2200      	movs	r2, #0
 801e71c:	6839      	ldr	r1, [r7, #0]
 801e71e:	6878      	ldr	r0, [r7, #4]
 801e720:	f7ff ff8e 	bl	801e640 <pbuf_add_header_impl>
 801e724:	4603      	mov	r3, r0
}
 801e726:	4618      	mov	r0, r3
 801e728:	3708      	adds	r7, #8
 801e72a:	46bd      	mov	sp, r7
 801e72c:	bd80      	pop	{r7, pc}
	...

0801e730 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 801e730:	b580      	push	{r7, lr}
 801e732:	b084      	sub	sp, #16
 801e734:	af00      	add	r7, sp, #0
 801e736:	6078      	str	r0, [r7, #4]
 801e738:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801e73a:	687b      	ldr	r3, [r7, #4]
 801e73c:	2b00      	cmp	r3, #0
 801e73e:	d106      	bne.n	801e74e <pbuf_remove_header+0x1e>
 801e740:	4b20      	ldr	r3, [pc, #128]	; (801e7c4 <pbuf_remove_header+0x94>)
 801e742:	f240 224b 	movw	r2, #587	; 0x24b
 801e746:	4920      	ldr	r1, [pc, #128]	; (801e7c8 <pbuf_remove_header+0x98>)
 801e748:	4820      	ldr	r0, [pc, #128]	; (801e7cc <pbuf_remove_header+0x9c>)
 801e74a:	f003 fdaf 	bl	80222ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	2b00      	cmp	r3, #0
 801e752:	d003      	beq.n	801e75c <pbuf_remove_header+0x2c>
 801e754:	683b      	ldr	r3, [r7, #0]
 801e756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801e75a:	d301      	bcc.n	801e760 <pbuf_remove_header+0x30>
    return 1;
 801e75c:	2301      	movs	r3, #1
 801e75e:	e02c      	b.n	801e7ba <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 801e760:	683b      	ldr	r3, [r7, #0]
 801e762:	2b00      	cmp	r3, #0
 801e764:	d101      	bne.n	801e76a <pbuf_remove_header+0x3a>
    return 0;
 801e766:	2300      	movs	r3, #0
 801e768:	e027      	b.n	801e7ba <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801e76a:	683b      	ldr	r3, [r7, #0]
 801e76c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801e76e:	687b      	ldr	r3, [r7, #4]
 801e770:	895b      	ldrh	r3, [r3, #10]
 801e772:	89fa      	ldrh	r2, [r7, #14]
 801e774:	429a      	cmp	r2, r3
 801e776:	d908      	bls.n	801e78a <pbuf_remove_header+0x5a>
 801e778:	4b12      	ldr	r3, [pc, #72]	; (801e7c4 <pbuf_remove_header+0x94>)
 801e77a:	f240 2255 	movw	r2, #597	; 0x255
 801e77e:	4914      	ldr	r1, [pc, #80]	; (801e7d0 <pbuf_remove_header+0xa0>)
 801e780:	4812      	ldr	r0, [pc, #72]	; (801e7cc <pbuf_remove_header+0x9c>)
 801e782:	f003 fd93 	bl	80222ac <iprintf>
 801e786:	2301      	movs	r3, #1
 801e788:	e017      	b.n	801e7ba <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801e78a:	687b      	ldr	r3, [r7, #4]
 801e78c:	685b      	ldr	r3, [r3, #4]
 801e78e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801e790:	687b      	ldr	r3, [r7, #4]
 801e792:	685a      	ldr	r2, [r3, #4]
 801e794:	683b      	ldr	r3, [r7, #0]
 801e796:	441a      	add	r2, r3
 801e798:	687b      	ldr	r3, [r7, #4]
 801e79a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 801e79c:	687b      	ldr	r3, [r7, #4]
 801e79e:	895a      	ldrh	r2, [r3, #10]
 801e7a0:	89fb      	ldrh	r3, [r7, #14]
 801e7a2:	1ad3      	subs	r3, r2, r3
 801e7a4:	b29a      	uxth	r2, r3
 801e7a6:	687b      	ldr	r3, [r7, #4]
 801e7a8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 801e7aa:	687b      	ldr	r3, [r7, #4]
 801e7ac:	891a      	ldrh	r2, [r3, #8]
 801e7ae:	89fb      	ldrh	r3, [r7, #14]
 801e7b0:	1ad3      	subs	r3, r2, r3
 801e7b2:	b29a      	uxth	r2, r3
 801e7b4:	687b      	ldr	r3, [r7, #4]
 801e7b6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 801e7b8:	2300      	movs	r3, #0
}
 801e7ba:	4618      	mov	r0, r3
 801e7bc:	3710      	adds	r7, #16
 801e7be:	46bd      	mov	sp, r7
 801e7c0:	bd80      	pop	{r7, pc}
 801e7c2:	bf00      	nop
 801e7c4:	08027600 	.word	0x08027600
 801e7c8:	08027794 	.word	0x08027794
 801e7cc:	08027690 	.word	0x08027690
 801e7d0:	080277a0 	.word	0x080277a0

0801e7d4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801e7d4:	b580      	push	{r7, lr}
 801e7d6:	b082      	sub	sp, #8
 801e7d8:	af00      	add	r7, sp, #0
 801e7da:	6078      	str	r0, [r7, #4]
 801e7dc:	460b      	mov	r3, r1
 801e7de:	807b      	strh	r3, [r7, #2]
 801e7e0:	4613      	mov	r3, r2
 801e7e2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801e7e4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e7e8:	2b00      	cmp	r3, #0
 801e7ea:	da08      	bge.n	801e7fe <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 801e7ec:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e7f0:	425b      	negs	r3, r3
 801e7f2:	4619      	mov	r1, r3
 801e7f4:	6878      	ldr	r0, [r7, #4]
 801e7f6:	f7ff ff9b 	bl	801e730 <pbuf_remove_header>
 801e7fa:	4603      	mov	r3, r0
 801e7fc:	e007      	b.n	801e80e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801e7fe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e802:	787a      	ldrb	r2, [r7, #1]
 801e804:	4619      	mov	r1, r3
 801e806:	6878      	ldr	r0, [r7, #4]
 801e808:	f7ff ff1a 	bl	801e640 <pbuf_add_header_impl>
 801e80c:	4603      	mov	r3, r0
  }
}
 801e80e:	4618      	mov	r0, r3
 801e810:	3708      	adds	r7, #8
 801e812:	46bd      	mov	sp, r7
 801e814:	bd80      	pop	{r7, pc}

0801e816 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801e816:	b580      	push	{r7, lr}
 801e818:	b082      	sub	sp, #8
 801e81a:	af00      	add	r7, sp, #0
 801e81c:	6078      	str	r0, [r7, #4]
 801e81e:	460b      	mov	r3, r1
 801e820:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801e822:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801e826:	2201      	movs	r2, #1
 801e828:	4619      	mov	r1, r3
 801e82a:	6878      	ldr	r0, [r7, #4]
 801e82c:	f7ff ffd2 	bl	801e7d4 <pbuf_header_impl>
 801e830:	4603      	mov	r3, r0
}
 801e832:	4618      	mov	r0, r3
 801e834:	3708      	adds	r7, #8
 801e836:	46bd      	mov	sp, r7
 801e838:	bd80      	pop	{r7, pc}
	...

0801e83c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801e83c:	b580      	push	{r7, lr}
 801e83e:	b086      	sub	sp, #24
 801e840:	af00      	add	r7, sp, #0
 801e842:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801e844:	687b      	ldr	r3, [r7, #4]
 801e846:	2b00      	cmp	r3, #0
 801e848:	d10b      	bne.n	801e862 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801e84a:	687b      	ldr	r3, [r7, #4]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d106      	bne.n	801e85e <pbuf_free+0x22>
 801e850:	4b38      	ldr	r3, [pc, #224]	; (801e934 <pbuf_free+0xf8>)
 801e852:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801e856:	4938      	ldr	r1, [pc, #224]	; (801e938 <pbuf_free+0xfc>)
 801e858:	4838      	ldr	r0, [pc, #224]	; (801e93c <pbuf_free+0x100>)
 801e85a:	f003 fd27 	bl	80222ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801e85e:	2300      	movs	r3, #0
 801e860:	e063      	b.n	801e92a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801e862:	2300      	movs	r3, #0
 801e864:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801e866:	e05c      	b.n	801e922 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 801e868:	687b      	ldr	r3, [r7, #4]
 801e86a:	7b9b      	ldrb	r3, [r3, #14]
 801e86c:	2b00      	cmp	r3, #0
 801e86e:	d106      	bne.n	801e87e <pbuf_free+0x42>
 801e870:	4b30      	ldr	r3, [pc, #192]	; (801e934 <pbuf_free+0xf8>)
 801e872:	f240 22f1 	movw	r2, #753	; 0x2f1
 801e876:	4932      	ldr	r1, [pc, #200]	; (801e940 <pbuf_free+0x104>)
 801e878:	4830      	ldr	r0, [pc, #192]	; (801e93c <pbuf_free+0x100>)
 801e87a:	f003 fd17 	bl	80222ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801e87e:	687b      	ldr	r3, [r7, #4]
 801e880:	7b9b      	ldrb	r3, [r3, #14]
 801e882:	3b01      	subs	r3, #1
 801e884:	b2da      	uxtb	r2, r3
 801e886:	687b      	ldr	r3, [r7, #4]
 801e888:	739a      	strb	r2, [r3, #14]
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	7b9b      	ldrb	r3, [r3, #14]
 801e88e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 801e890:	7dbb      	ldrb	r3, [r7, #22]
 801e892:	2b00      	cmp	r3, #0
 801e894:	d143      	bne.n	801e91e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801e896:	687b      	ldr	r3, [r7, #4]
 801e898:	681b      	ldr	r3, [r3, #0]
 801e89a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	7b1b      	ldrb	r3, [r3, #12]
 801e8a0:	f003 030f 	and.w	r3, r3, #15
 801e8a4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801e8a6:	687b      	ldr	r3, [r7, #4]
 801e8a8:	7b5b      	ldrb	r3, [r3, #13]
 801e8aa:	f003 0302 	and.w	r3, r3, #2
 801e8ae:	2b00      	cmp	r3, #0
 801e8b0:	d011      	beq.n	801e8d6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801e8b2:	687b      	ldr	r3, [r7, #4]
 801e8b4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801e8b6:	68bb      	ldr	r3, [r7, #8]
 801e8b8:	691b      	ldr	r3, [r3, #16]
 801e8ba:	2b00      	cmp	r3, #0
 801e8bc:	d106      	bne.n	801e8cc <pbuf_free+0x90>
 801e8be:	4b1d      	ldr	r3, [pc, #116]	; (801e934 <pbuf_free+0xf8>)
 801e8c0:	f240 22ff 	movw	r2, #767	; 0x2ff
 801e8c4:	491f      	ldr	r1, [pc, #124]	; (801e944 <pbuf_free+0x108>)
 801e8c6:	481d      	ldr	r0, [pc, #116]	; (801e93c <pbuf_free+0x100>)
 801e8c8:	f003 fcf0 	bl	80222ac <iprintf>
        pc->custom_free_function(p);
 801e8cc:	68bb      	ldr	r3, [r7, #8]
 801e8ce:	691b      	ldr	r3, [r3, #16]
 801e8d0:	6878      	ldr	r0, [r7, #4]
 801e8d2:	4798      	blx	r3
 801e8d4:	e01d      	b.n	801e912 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801e8d6:	7bfb      	ldrb	r3, [r7, #15]
 801e8d8:	2b02      	cmp	r3, #2
 801e8da:	d104      	bne.n	801e8e6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 801e8dc:	6879      	ldr	r1, [r7, #4]
 801e8de:	2005      	movs	r0, #5
 801e8e0:	f7ff f89c 	bl	801da1c <memp_free>
 801e8e4:	e015      	b.n	801e912 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801e8e6:	7bfb      	ldrb	r3, [r7, #15]
 801e8e8:	2b01      	cmp	r3, #1
 801e8ea:	d104      	bne.n	801e8f6 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 801e8ec:	6879      	ldr	r1, [r7, #4]
 801e8ee:	2004      	movs	r0, #4
 801e8f0:	f7ff f894 	bl	801da1c <memp_free>
 801e8f4:	e00d      	b.n	801e912 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801e8f6:	7bfb      	ldrb	r3, [r7, #15]
 801e8f8:	2b00      	cmp	r3, #0
 801e8fa:	d103      	bne.n	801e904 <pbuf_free+0xc8>
          mem_free(p);
 801e8fc:	6878      	ldr	r0, [r7, #4]
 801e8fe:	f7fe fd27 	bl	801d350 <mem_free>
 801e902:	e006      	b.n	801e912 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801e904:	4b0b      	ldr	r3, [pc, #44]	; (801e934 <pbuf_free+0xf8>)
 801e906:	f240 320f 	movw	r2, #783	; 0x30f
 801e90a:	490f      	ldr	r1, [pc, #60]	; (801e948 <pbuf_free+0x10c>)
 801e90c:	480b      	ldr	r0, [pc, #44]	; (801e93c <pbuf_free+0x100>)
 801e90e:	f003 fccd 	bl	80222ac <iprintf>
        }
      }
      count++;
 801e912:	7dfb      	ldrb	r3, [r7, #23]
 801e914:	3301      	adds	r3, #1
 801e916:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 801e918:	693b      	ldr	r3, [r7, #16]
 801e91a:	607b      	str	r3, [r7, #4]
 801e91c:	e001      	b.n	801e922 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801e91e:	2300      	movs	r3, #0
 801e920:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801e922:	687b      	ldr	r3, [r7, #4]
 801e924:	2b00      	cmp	r3, #0
 801e926:	d19f      	bne.n	801e868 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 801e928:	7dfb      	ldrb	r3, [r7, #23]
}
 801e92a:	4618      	mov	r0, r3
 801e92c:	3718      	adds	r7, #24
 801e92e:	46bd      	mov	sp, r7
 801e930:	bd80      	pop	{r7, pc}
 801e932:	bf00      	nop
 801e934:	08027600 	.word	0x08027600
 801e938:	08027794 	.word	0x08027794
 801e93c:	08027690 	.word	0x08027690
 801e940:	080277c0 	.word	0x080277c0
 801e944:	080277d8 	.word	0x080277d8
 801e948:	080277fc 	.word	0x080277fc

0801e94c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801e94c:	b480      	push	{r7}
 801e94e:	b085      	sub	sp, #20
 801e950:	af00      	add	r7, sp, #0
 801e952:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801e954:	2300      	movs	r3, #0
 801e956:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 801e958:	e005      	b.n	801e966 <pbuf_clen+0x1a>
    ++len;
 801e95a:	89fb      	ldrh	r3, [r7, #14]
 801e95c:	3301      	adds	r3, #1
 801e95e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801e966:	687b      	ldr	r3, [r7, #4]
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d1f6      	bne.n	801e95a <pbuf_clen+0xe>
  }
  return len;
 801e96c:	89fb      	ldrh	r3, [r7, #14]
}
 801e96e:	4618      	mov	r0, r3
 801e970:	3714      	adds	r7, #20
 801e972:	46bd      	mov	sp, r7
 801e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e978:	4770      	bx	lr
	...

0801e97c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801e97c:	b580      	push	{r7, lr}
 801e97e:	b082      	sub	sp, #8
 801e980:	af00      	add	r7, sp, #0
 801e982:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801e984:	687b      	ldr	r3, [r7, #4]
 801e986:	2b00      	cmp	r3, #0
 801e988:	d010      	beq.n	801e9ac <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	7b9b      	ldrb	r3, [r3, #14]
 801e98e:	3301      	adds	r3, #1
 801e990:	b2da      	uxtb	r2, r3
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	7b9b      	ldrb	r3, [r3, #14]
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d106      	bne.n	801e9ac <pbuf_ref+0x30>
 801e99e:	4b05      	ldr	r3, [pc, #20]	; (801e9b4 <pbuf_ref+0x38>)
 801e9a0:	f240 3242 	movw	r2, #834	; 0x342
 801e9a4:	4904      	ldr	r1, [pc, #16]	; (801e9b8 <pbuf_ref+0x3c>)
 801e9a6:	4805      	ldr	r0, [pc, #20]	; (801e9bc <pbuf_ref+0x40>)
 801e9a8:	f003 fc80 	bl	80222ac <iprintf>
  }
}
 801e9ac:	bf00      	nop
 801e9ae:	3708      	adds	r7, #8
 801e9b0:	46bd      	mov	sp, r7
 801e9b2:	bd80      	pop	{r7, pc}
 801e9b4:	08027600 	.word	0x08027600
 801e9b8:	08027810 	.word	0x08027810
 801e9bc:	08027690 	.word	0x08027690

0801e9c0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 801e9c0:	b580      	push	{r7, lr}
 801e9c2:	b084      	sub	sp, #16
 801e9c4:	af00      	add	r7, sp, #0
 801e9c6:	6078      	str	r0, [r7, #4]
 801e9c8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801e9ca:	687b      	ldr	r3, [r7, #4]
 801e9cc:	2b00      	cmp	r3, #0
 801e9ce:	d002      	beq.n	801e9d6 <pbuf_cat+0x16>
 801e9d0:	683b      	ldr	r3, [r7, #0]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d107      	bne.n	801e9e6 <pbuf_cat+0x26>
 801e9d6:	4b20      	ldr	r3, [pc, #128]	; (801ea58 <pbuf_cat+0x98>)
 801e9d8:	f240 3259 	movw	r2, #857	; 0x359
 801e9dc:	491f      	ldr	r1, [pc, #124]	; (801ea5c <pbuf_cat+0x9c>)
 801e9de:	4820      	ldr	r0, [pc, #128]	; (801ea60 <pbuf_cat+0xa0>)
 801e9e0:	f003 fc64 	bl	80222ac <iprintf>
 801e9e4:	e034      	b.n	801ea50 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	60fb      	str	r3, [r7, #12]
 801e9ea:	e00a      	b.n	801ea02 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801e9ec:	68fb      	ldr	r3, [r7, #12]
 801e9ee:	891a      	ldrh	r2, [r3, #8]
 801e9f0:	683b      	ldr	r3, [r7, #0]
 801e9f2:	891b      	ldrh	r3, [r3, #8]
 801e9f4:	4413      	add	r3, r2
 801e9f6:	b29a      	uxth	r2, r3
 801e9f8:	68fb      	ldr	r3, [r7, #12]
 801e9fa:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801e9fc:	68fb      	ldr	r3, [r7, #12]
 801e9fe:	681b      	ldr	r3, [r3, #0]
 801ea00:	60fb      	str	r3, [r7, #12]
 801ea02:	68fb      	ldr	r3, [r7, #12]
 801ea04:	681b      	ldr	r3, [r3, #0]
 801ea06:	2b00      	cmp	r3, #0
 801ea08:	d1f0      	bne.n	801e9ec <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801ea0a:	68fb      	ldr	r3, [r7, #12]
 801ea0c:	891a      	ldrh	r2, [r3, #8]
 801ea0e:	68fb      	ldr	r3, [r7, #12]
 801ea10:	895b      	ldrh	r3, [r3, #10]
 801ea12:	429a      	cmp	r2, r3
 801ea14:	d006      	beq.n	801ea24 <pbuf_cat+0x64>
 801ea16:	4b10      	ldr	r3, [pc, #64]	; (801ea58 <pbuf_cat+0x98>)
 801ea18:	f240 3262 	movw	r2, #866	; 0x362
 801ea1c:	4911      	ldr	r1, [pc, #68]	; (801ea64 <pbuf_cat+0xa4>)
 801ea1e:	4810      	ldr	r0, [pc, #64]	; (801ea60 <pbuf_cat+0xa0>)
 801ea20:	f003 fc44 	bl	80222ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801ea24:	68fb      	ldr	r3, [r7, #12]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	2b00      	cmp	r3, #0
 801ea2a:	d006      	beq.n	801ea3a <pbuf_cat+0x7a>
 801ea2c:	4b0a      	ldr	r3, [pc, #40]	; (801ea58 <pbuf_cat+0x98>)
 801ea2e:	f240 3263 	movw	r2, #867	; 0x363
 801ea32:	490d      	ldr	r1, [pc, #52]	; (801ea68 <pbuf_cat+0xa8>)
 801ea34:	480a      	ldr	r0, [pc, #40]	; (801ea60 <pbuf_cat+0xa0>)
 801ea36:	f003 fc39 	bl	80222ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801ea3a:	68fb      	ldr	r3, [r7, #12]
 801ea3c:	891a      	ldrh	r2, [r3, #8]
 801ea3e:	683b      	ldr	r3, [r7, #0]
 801ea40:	891b      	ldrh	r3, [r3, #8]
 801ea42:	4413      	add	r3, r2
 801ea44:	b29a      	uxth	r2, r3
 801ea46:	68fb      	ldr	r3, [r7, #12]
 801ea48:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801ea4a:	68fb      	ldr	r3, [r7, #12]
 801ea4c:	683a      	ldr	r2, [r7, #0]
 801ea4e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801ea50:	3710      	adds	r7, #16
 801ea52:	46bd      	mov	sp, r7
 801ea54:	bd80      	pop	{r7, pc}
 801ea56:	bf00      	nop
 801ea58:	08027600 	.word	0x08027600
 801ea5c:	08027824 	.word	0x08027824
 801ea60:	08027690 	.word	0x08027690
 801ea64:	0802785c 	.word	0x0802785c
 801ea68:	0802788c 	.word	0x0802788c

0801ea6c <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 801ea6c:	b580      	push	{r7, lr}
 801ea6e:	b082      	sub	sp, #8
 801ea70:	af00      	add	r7, sp, #0
 801ea72:	6078      	str	r0, [r7, #4]
 801ea74:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801ea76:	6839      	ldr	r1, [r7, #0]
 801ea78:	6878      	ldr	r0, [r7, #4]
 801ea7a:	f7ff ffa1 	bl	801e9c0 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801ea7e:	6838      	ldr	r0, [r7, #0]
 801ea80:	f7ff ff7c 	bl	801e97c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 801ea84:	bf00      	nop
 801ea86:	3708      	adds	r7, #8
 801ea88:	46bd      	mov	sp, r7
 801ea8a:	bd80      	pop	{r7, pc}

0801ea8c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801ea8c:	b580      	push	{r7, lr}
 801ea8e:	b086      	sub	sp, #24
 801ea90:	af00      	add	r7, sp, #0
 801ea92:	6078      	str	r0, [r7, #4]
 801ea94:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801ea96:	2300      	movs	r3, #0
 801ea98:	617b      	str	r3, [r7, #20]
 801ea9a:	2300      	movs	r3, #0
 801ea9c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	2b00      	cmp	r3, #0
 801eaa2:	d008      	beq.n	801eab6 <pbuf_copy+0x2a>
 801eaa4:	683b      	ldr	r3, [r7, #0]
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d005      	beq.n	801eab6 <pbuf_copy+0x2a>
 801eaaa:	687b      	ldr	r3, [r7, #4]
 801eaac:	891a      	ldrh	r2, [r3, #8]
 801eaae:	683b      	ldr	r3, [r7, #0]
 801eab0:	891b      	ldrh	r3, [r3, #8]
 801eab2:	429a      	cmp	r2, r3
 801eab4:	d209      	bcs.n	801eaca <pbuf_copy+0x3e>
 801eab6:	4b57      	ldr	r3, [pc, #348]	; (801ec14 <pbuf_copy+0x188>)
 801eab8:	f240 32c9 	movw	r2, #969	; 0x3c9
 801eabc:	4956      	ldr	r1, [pc, #344]	; (801ec18 <pbuf_copy+0x18c>)
 801eabe:	4857      	ldr	r0, [pc, #348]	; (801ec1c <pbuf_copy+0x190>)
 801eac0:	f003 fbf4 	bl	80222ac <iprintf>
 801eac4:	f06f 030f 	mvn.w	r3, #15
 801eac8:	e09f      	b.n	801ec0a <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801eaca:	687b      	ldr	r3, [r7, #4]
 801eacc:	895b      	ldrh	r3, [r3, #10]
 801eace:	461a      	mov	r2, r3
 801ead0:	697b      	ldr	r3, [r7, #20]
 801ead2:	1ad2      	subs	r2, r2, r3
 801ead4:	683b      	ldr	r3, [r7, #0]
 801ead6:	895b      	ldrh	r3, [r3, #10]
 801ead8:	4619      	mov	r1, r3
 801eada:	693b      	ldr	r3, [r7, #16]
 801eadc:	1acb      	subs	r3, r1, r3
 801eade:	429a      	cmp	r2, r3
 801eae0:	d306      	bcc.n	801eaf0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 801eae2:	683b      	ldr	r3, [r7, #0]
 801eae4:	895b      	ldrh	r3, [r3, #10]
 801eae6:	461a      	mov	r2, r3
 801eae8:	693b      	ldr	r3, [r7, #16]
 801eaea:	1ad3      	subs	r3, r2, r3
 801eaec:	60fb      	str	r3, [r7, #12]
 801eaee:	e005      	b.n	801eafc <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	895b      	ldrh	r3, [r3, #10]
 801eaf4:	461a      	mov	r2, r3
 801eaf6:	697b      	ldr	r3, [r7, #20]
 801eaf8:	1ad3      	subs	r3, r2, r3
 801eafa:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 801eafc:	687b      	ldr	r3, [r7, #4]
 801eafe:	685a      	ldr	r2, [r3, #4]
 801eb00:	697b      	ldr	r3, [r7, #20]
 801eb02:	18d0      	adds	r0, r2, r3
 801eb04:	683b      	ldr	r3, [r7, #0]
 801eb06:	685a      	ldr	r2, [r3, #4]
 801eb08:	693b      	ldr	r3, [r7, #16]
 801eb0a:	4413      	add	r3, r2
 801eb0c:	68fa      	ldr	r2, [r7, #12]
 801eb0e:	4619      	mov	r1, r3
 801eb10:	f003 fabc 	bl	802208c <memcpy>
    offset_to += len;
 801eb14:	697a      	ldr	r2, [r7, #20]
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	4413      	add	r3, r2
 801eb1a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801eb1c:	693a      	ldr	r2, [r7, #16]
 801eb1e:	68fb      	ldr	r3, [r7, #12]
 801eb20:	4413      	add	r3, r2
 801eb22:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801eb24:	687b      	ldr	r3, [r7, #4]
 801eb26:	895b      	ldrh	r3, [r3, #10]
 801eb28:	461a      	mov	r2, r3
 801eb2a:	697b      	ldr	r3, [r7, #20]
 801eb2c:	4293      	cmp	r3, r2
 801eb2e:	d906      	bls.n	801eb3e <pbuf_copy+0xb2>
 801eb30:	4b38      	ldr	r3, [pc, #224]	; (801ec14 <pbuf_copy+0x188>)
 801eb32:	f240 32d9 	movw	r2, #985	; 0x3d9
 801eb36:	493a      	ldr	r1, [pc, #232]	; (801ec20 <pbuf_copy+0x194>)
 801eb38:	4838      	ldr	r0, [pc, #224]	; (801ec1c <pbuf_copy+0x190>)
 801eb3a:	f003 fbb7 	bl	80222ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801eb3e:	683b      	ldr	r3, [r7, #0]
 801eb40:	895b      	ldrh	r3, [r3, #10]
 801eb42:	461a      	mov	r2, r3
 801eb44:	693b      	ldr	r3, [r7, #16]
 801eb46:	4293      	cmp	r3, r2
 801eb48:	d906      	bls.n	801eb58 <pbuf_copy+0xcc>
 801eb4a:	4b32      	ldr	r3, [pc, #200]	; (801ec14 <pbuf_copy+0x188>)
 801eb4c:	f240 32da 	movw	r2, #986	; 0x3da
 801eb50:	4934      	ldr	r1, [pc, #208]	; (801ec24 <pbuf_copy+0x198>)
 801eb52:	4832      	ldr	r0, [pc, #200]	; (801ec1c <pbuf_copy+0x190>)
 801eb54:	f003 fbaa 	bl	80222ac <iprintf>
    if (offset_from >= p_from->len) {
 801eb58:	683b      	ldr	r3, [r7, #0]
 801eb5a:	895b      	ldrh	r3, [r3, #10]
 801eb5c:	461a      	mov	r2, r3
 801eb5e:	693b      	ldr	r3, [r7, #16]
 801eb60:	4293      	cmp	r3, r2
 801eb62:	d304      	bcc.n	801eb6e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801eb64:	2300      	movs	r3, #0
 801eb66:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801eb68:	683b      	ldr	r3, [r7, #0]
 801eb6a:	681b      	ldr	r3, [r3, #0]
 801eb6c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	895b      	ldrh	r3, [r3, #10]
 801eb72:	461a      	mov	r2, r3
 801eb74:	697b      	ldr	r3, [r7, #20]
 801eb76:	4293      	cmp	r3, r2
 801eb78:	d114      	bne.n	801eba4 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801eb7a:	2300      	movs	r3, #0
 801eb7c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	681b      	ldr	r3, [r3, #0]
 801eb82:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801eb84:	687b      	ldr	r3, [r7, #4]
 801eb86:	2b00      	cmp	r3, #0
 801eb88:	d10c      	bne.n	801eba4 <pbuf_copy+0x118>
 801eb8a:	683b      	ldr	r3, [r7, #0]
 801eb8c:	2b00      	cmp	r3, #0
 801eb8e:	d009      	beq.n	801eba4 <pbuf_copy+0x118>
 801eb90:	4b20      	ldr	r3, [pc, #128]	; (801ec14 <pbuf_copy+0x188>)
 801eb92:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801eb96:	4924      	ldr	r1, [pc, #144]	; (801ec28 <pbuf_copy+0x19c>)
 801eb98:	4820      	ldr	r0, [pc, #128]	; (801ec1c <pbuf_copy+0x190>)
 801eb9a:	f003 fb87 	bl	80222ac <iprintf>
 801eb9e:	f06f 030f 	mvn.w	r3, #15
 801eba2:	e032      	b.n	801ec0a <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 801eba4:	683b      	ldr	r3, [r7, #0]
 801eba6:	2b00      	cmp	r3, #0
 801eba8:	d013      	beq.n	801ebd2 <pbuf_copy+0x146>
 801ebaa:	683b      	ldr	r3, [r7, #0]
 801ebac:	895a      	ldrh	r2, [r3, #10]
 801ebae:	683b      	ldr	r3, [r7, #0]
 801ebb0:	891b      	ldrh	r3, [r3, #8]
 801ebb2:	429a      	cmp	r2, r3
 801ebb4:	d10d      	bne.n	801ebd2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ebb6:	683b      	ldr	r3, [r7, #0]
 801ebb8:	681b      	ldr	r3, [r3, #0]
 801ebba:	2b00      	cmp	r3, #0
 801ebbc:	d009      	beq.n	801ebd2 <pbuf_copy+0x146>
 801ebbe:	4b15      	ldr	r3, [pc, #84]	; (801ec14 <pbuf_copy+0x188>)
 801ebc0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801ebc4:	4919      	ldr	r1, [pc, #100]	; (801ec2c <pbuf_copy+0x1a0>)
 801ebc6:	4815      	ldr	r0, [pc, #84]	; (801ec1c <pbuf_copy+0x190>)
 801ebc8:	f003 fb70 	bl	80222ac <iprintf>
 801ebcc:	f06f 0305 	mvn.w	r3, #5
 801ebd0:	e01b      	b.n	801ec0a <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801ebd2:	687b      	ldr	r3, [r7, #4]
 801ebd4:	2b00      	cmp	r3, #0
 801ebd6:	d013      	beq.n	801ec00 <pbuf_copy+0x174>
 801ebd8:	687b      	ldr	r3, [r7, #4]
 801ebda:	895a      	ldrh	r2, [r3, #10]
 801ebdc:	687b      	ldr	r3, [r7, #4]
 801ebde:	891b      	ldrh	r3, [r3, #8]
 801ebe0:	429a      	cmp	r2, r3
 801ebe2:	d10d      	bne.n	801ec00 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	2b00      	cmp	r3, #0
 801ebea:	d009      	beq.n	801ec00 <pbuf_copy+0x174>
 801ebec:	4b09      	ldr	r3, [pc, #36]	; (801ec14 <pbuf_copy+0x188>)
 801ebee:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801ebf2:	490e      	ldr	r1, [pc, #56]	; (801ec2c <pbuf_copy+0x1a0>)
 801ebf4:	4809      	ldr	r0, [pc, #36]	; (801ec1c <pbuf_copy+0x190>)
 801ebf6:	f003 fb59 	bl	80222ac <iprintf>
 801ebfa:	f06f 0305 	mvn.w	r3, #5
 801ebfe:	e004      	b.n	801ec0a <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 801ec00:	683b      	ldr	r3, [r7, #0]
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	f47f af61 	bne.w	801eaca <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 801ec08:	2300      	movs	r3, #0
}
 801ec0a:	4618      	mov	r0, r3
 801ec0c:	3718      	adds	r7, #24
 801ec0e:	46bd      	mov	sp, r7
 801ec10:	bd80      	pop	{r7, pc}
 801ec12:	bf00      	nop
 801ec14:	08027600 	.word	0x08027600
 801ec18:	080278d8 	.word	0x080278d8
 801ec1c:	08027690 	.word	0x08027690
 801ec20:	08027908 	.word	0x08027908
 801ec24:	08027920 	.word	0x08027920
 801ec28:	0802793c 	.word	0x0802793c
 801ec2c:	0802794c 	.word	0x0802794c

0801ec30 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 801ec30:	b580      	push	{r7, lr}
 801ec32:	b088      	sub	sp, #32
 801ec34:	af00      	add	r7, sp, #0
 801ec36:	60f8      	str	r0, [r7, #12]
 801ec38:	60b9      	str	r1, [r7, #8]
 801ec3a:	4613      	mov	r3, r2
 801ec3c:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 801ec3e:	88fb      	ldrh	r3, [r7, #6]
 801ec40:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 801ec42:	2300      	movs	r3, #0
 801ec44:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 801ec46:	68fb      	ldr	r3, [r7, #12]
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d109      	bne.n	801ec60 <pbuf_take+0x30>
 801ec4c:	4b3a      	ldr	r3, [pc, #232]	; (801ed38 <pbuf_take+0x108>)
 801ec4e:	f240 42b3 	movw	r2, #1203	; 0x4b3
 801ec52:	493a      	ldr	r1, [pc, #232]	; (801ed3c <pbuf_take+0x10c>)
 801ec54:	483a      	ldr	r0, [pc, #232]	; (801ed40 <pbuf_take+0x110>)
 801ec56:	f003 fb29 	bl	80222ac <iprintf>
 801ec5a:	f06f 030f 	mvn.w	r3, #15
 801ec5e:	e067      	b.n	801ed30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 801ec60:	68bb      	ldr	r3, [r7, #8]
 801ec62:	2b00      	cmp	r3, #0
 801ec64:	d109      	bne.n	801ec7a <pbuf_take+0x4a>
 801ec66:	4b34      	ldr	r3, [pc, #208]	; (801ed38 <pbuf_take+0x108>)
 801ec68:	f240 42b4 	movw	r2, #1204	; 0x4b4
 801ec6c:	4935      	ldr	r1, [pc, #212]	; (801ed44 <pbuf_take+0x114>)
 801ec6e:	4834      	ldr	r0, [pc, #208]	; (801ed40 <pbuf_take+0x110>)
 801ec70:	f003 fb1c 	bl	80222ac <iprintf>
 801ec74:	f06f 030f 	mvn.w	r3, #15
 801ec78:	e05a      	b.n	801ed30 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 801ec7a:	68fb      	ldr	r3, [r7, #12]
 801ec7c:	891b      	ldrh	r3, [r3, #8]
 801ec7e:	88fa      	ldrh	r2, [r7, #6]
 801ec80:	429a      	cmp	r2, r3
 801ec82:	d909      	bls.n	801ec98 <pbuf_take+0x68>
 801ec84:	4b2c      	ldr	r3, [pc, #176]	; (801ed38 <pbuf_take+0x108>)
 801ec86:	f240 42b5 	movw	r2, #1205	; 0x4b5
 801ec8a:	492f      	ldr	r1, [pc, #188]	; (801ed48 <pbuf_take+0x118>)
 801ec8c:	482c      	ldr	r0, [pc, #176]	; (801ed40 <pbuf_take+0x110>)
 801ec8e:	f003 fb0d 	bl	80222ac <iprintf>
 801ec92:	f04f 33ff 	mov.w	r3, #4294967295
 801ec96:	e04b      	b.n	801ed30 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 801ec98:	68fb      	ldr	r3, [r7, #12]
 801ec9a:	2b00      	cmp	r3, #0
 801ec9c:	d007      	beq.n	801ecae <pbuf_take+0x7e>
 801ec9e:	68bb      	ldr	r3, [r7, #8]
 801eca0:	2b00      	cmp	r3, #0
 801eca2:	d004      	beq.n	801ecae <pbuf_take+0x7e>
 801eca4:	68fb      	ldr	r3, [r7, #12]
 801eca6:	891b      	ldrh	r3, [r3, #8]
 801eca8:	88fa      	ldrh	r2, [r7, #6]
 801ecaa:	429a      	cmp	r2, r3
 801ecac:	d902      	bls.n	801ecb4 <pbuf_take+0x84>
    return ERR_ARG;
 801ecae:	f06f 030f 	mvn.w	r3, #15
 801ecb2:	e03d      	b.n	801ed30 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ecb4:	68fb      	ldr	r3, [r7, #12]
 801ecb6:	61fb      	str	r3, [r7, #28]
 801ecb8:	e028      	b.n	801ed0c <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 801ecba:	69fb      	ldr	r3, [r7, #28]
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	d106      	bne.n	801ecce <pbuf_take+0x9e>
 801ecc0:	4b1d      	ldr	r3, [pc, #116]	; (801ed38 <pbuf_take+0x108>)
 801ecc2:	f240 42bd 	movw	r2, #1213	; 0x4bd
 801ecc6:	4921      	ldr	r1, [pc, #132]	; (801ed4c <pbuf_take+0x11c>)
 801ecc8:	481d      	ldr	r0, [pc, #116]	; (801ed40 <pbuf_take+0x110>)
 801ecca:	f003 faef 	bl	80222ac <iprintf>
    buf_copy_len = total_copy_len;
 801ecce:	697b      	ldr	r3, [r7, #20]
 801ecd0:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 801ecd2:	69fb      	ldr	r3, [r7, #28]
 801ecd4:	895b      	ldrh	r3, [r3, #10]
 801ecd6:	461a      	mov	r2, r3
 801ecd8:	69bb      	ldr	r3, [r7, #24]
 801ecda:	4293      	cmp	r3, r2
 801ecdc:	d902      	bls.n	801ece4 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 801ecde:	69fb      	ldr	r3, [r7, #28]
 801ece0:	895b      	ldrh	r3, [r3, #10]
 801ece2:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 801ece4:	69fb      	ldr	r3, [r7, #28]
 801ece6:	6858      	ldr	r0, [r3, #4]
 801ece8:	68ba      	ldr	r2, [r7, #8]
 801ecea:	693b      	ldr	r3, [r7, #16]
 801ecec:	4413      	add	r3, r2
 801ecee:	69ba      	ldr	r2, [r7, #24]
 801ecf0:	4619      	mov	r1, r3
 801ecf2:	f003 f9cb 	bl	802208c <memcpy>
    total_copy_len -= buf_copy_len;
 801ecf6:	697a      	ldr	r2, [r7, #20]
 801ecf8:	69bb      	ldr	r3, [r7, #24]
 801ecfa:	1ad3      	subs	r3, r2, r3
 801ecfc:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 801ecfe:	693a      	ldr	r2, [r7, #16]
 801ed00:	69bb      	ldr	r3, [r7, #24]
 801ed02:	4413      	add	r3, r2
 801ed04:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 801ed06:	69fb      	ldr	r3, [r7, #28]
 801ed08:	681b      	ldr	r3, [r3, #0]
 801ed0a:	61fb      	str	r3, [r7, #28]
 801ed0c:	697b      	ldr	r3, [r7, #20]
 801ed0e:	2b00      	cmp	r3, #0
 801ed10:	d1d3      	bne.n	801ecba <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 801ed12:	697b      	ldr	r3, [r7, #20]
 801ed14:	2b00      	cmp	r3, #0
 801ed16:	d103      	bne.n	801ed20 <pbuf_take+0xf0>
 801ed18:	88fb      	ldrh	r3, [r7, #6]
 801ed1a:	693a      	ldr	r2, [r7, #16]
 801ed1c:	429a      	cmp	r2, r3
 801ed1e:	d006      	beq.n	801ed2e <pbuf_take+0xfe>
 801ed20:	4b05      	ldr	r3, [pc, #20]	; (801ed38 <pbuf_take+0x108>)
 801ed22:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 801ed26:	490a      	ldr	r1, [pc, #40]	; (801ed50 <pbuf_take+0x120>)
 801ed28:	4805      	ldr	r0, [pc, #20]	; (801ed40 <pbuf_take+0x110>)
 801ed2a:	f003 fabf 	bl	80222ac <iprintf>
  return ERR_OK;
 801ed2e:	2300      	movs	r3, #0
}
 801ed30:	4618      	mov	r0, r3
 801ed32:	3720      	adds	r7, #32
 801ed34:	46bd      	mov	sp, r7
 801ed36:	bd80      	pop	{r7, pc}
 801ed38:	08027600 	.word	0x08027600
 801ed3c:	08027a08 	.word	0x08027a08
 801ed40:	08027690 	.word	0x08027690
 801ed44:	08027a20 	.word	0x08027a20
 801ed48:	08027a3c 	.word	0x08027a3c
 801ed4c:	08027a5c 	.word	0x08027a5c
 801ed50:	08027a74 	.word	0x08027a74

0801ed54 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801ed54:	b580      	push	{r7, lr}
 801ed56:	b084      	sub	sp, #16
 801ed58:	af00      	add	r7, sp, #0
 801ed5a:	4603      	mov	r3, r0
 801ed5c:	603a      	str	r2, [r7, #0]
 801ed5e:	71fb      	strb	r3, [r7, #7]
 801ed60:	460b      	mov	r3, r1
 801ed62:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801ed64:	683b      	ldr	r3, [r7, #0]
 801ed66:	8919      	ldrh	r1, [r3, #8]
 801ed68:	88ba      	ldrh	r2, [r7, #4]
 801ed6a:	79fb      	ldrb	r3, [r7, #7]
 801ed6c:	4618      	mov	r0, r3
 801ed6e:	f7ff fa83 	bl	801e278 <pbuf_alloc>
 801ed72:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801ed74:	68fb      	ldr	r3, [r7, #12]
 801ed76:	2b00      	cmp	r3, #0
 801ed78:	d101      	bne.n	801ed7e <pbuf_clone+0x2a>
    return NULL;
 801ed7a:	2300      	movs	r3, #0
 801ed7c:	e011      	b.n	801eda2 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801ed7e:	6839      	ldr	r1, [r7, #0]
 801ed80:	68f8      	ldr	r0, [r7, #12]
 801ed82:	f7ff fe83 	bl	801ea8c <pbuf_copy>
 801ed86:	4603      	mov	r3, r0
 801ed88:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801ed8a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801ed8e:	2b00      	cmp	r3, #0
 801ed90:	d006      	beq.n	801eda0 <pbuf_clone+0x4c>
 801ed92:	4b06      	ldr	r3, [pc, #24]	; (801edac <pbuf_clone+0x58>)
 801ed94:	f240 5224 	movw	r2, #1316	; 0x524
 801ed98:	4905      	ldr	r1, [pc, #20]	; (801edb0 <pbuf_clone+0x5c>)
 801ed9a:	4806      	ldr	r0, [pc, #24]	; (801edb4 <pbuf_clone+0x60>)
 801ed9c:	f003 fa86 	bl	80222ac <iprintf>
  return q;
 801eda0:	68fb      	ldr	r3, [r7, #12]
}
 801eda2:	4618      	mov	r0, r3
 801eda4:	3710      	adds	r7, #16
 801eda6:	46bd      	mov	sp, r7
 801eda8:	bd80      	pop	{r7, pc}
 801edaa:	bf00      	nop
 801edac:	08027600 	.word	0x08027600
 801edb0:	08027aa4 	.word	0x08027aa4
 801edb4:	08027690 	.word	0x08027690

0801edb8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801edb8:	b580      	push	{r7, lr}
 801edba:	b086      	sub	sp, #24
 801edbc:	af00      	add	r7, sp, #0
 801edbe:	60f8      	str	r0, [r7, #12]
 801edc0:	60b9      	str	r1, [r7, #8]
 801edc2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801edc4:	2003      	movs	r0, #3
 801edc6:	f7fe fdb9 	bl	801d93c <memp_malloc>
 801edca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801edcc:	693b      	ldr	r3, [r7, #16]
 801edce:	2b00      	cmp	r3, #0
 801edd0:	d109      	bne.n	801ede6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801edd2:	693b      	ldr	r3, [r7, #16]
 801edd4:	2b00      	cmp	r3, #0
 801edd6:	d151      	bne.n	801ee7c <sys_timeout_abs+0xc4>
 801edd8:	4b2a      	ldr	r3, [pc, #168]	; (801ee84 <sys_timeout_abs+0xcc>)
 801edda:	22be      	movs	r2, #190	; 0xbe
 801eddc:	492a      	ldr	r1, [pc, #168]	; (801ee88 <sys_timeout_abs+0xd0>)
 801edde:	482b      	ldr	r0, [pc, #172]	; (801ee8c <sys_timeout_abs+0xd4>)
 801ede0:	f003 fa64 	bl	80222ac <iprintf>
    return;
 801ede4:	e04a      	b.n	801ee7c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801ede6:	693b      	ldr	r3, [r7, #16]
 801ede8:	2200      	movs	r2, #0
 801edea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801edec:	693b      	ldr	r3, [r7, #16]
 801edee:	68ba      	ldr	r2, [r7, #8]
 801edf0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801edf2:	693b      	ldr	r3, [r7, #16]
 801edf4:	687a      	ldr	r2, [r7, #4]
 801edf6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801edf8:	693b      	ldr	r3, [r7, #16]
 801edfa:	68fa      	ldr	r2, [r7, #12]
 801edfc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801edfe:	4b24      	ldr	r3, [pc, #144]	; (801ee90 <sys_timeout_abs+0xd8>)
 801ee00:	681b      	ldr	r3, [r3, #0]
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d103      	bne.n	801ee0e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801ee06:	4a22      	ldr	r2, [pc, #136]	; (801ee90 <sys_timeout_abs+0xd8>)
 801ee08:	693b      	ldr	r3, [r7, #16]
 801ee0a:	6013      	str	r3, [r2, #0]
    return;
 801ee0c:	e037      	b.n	801ee7e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801ee0e:	693b      	ldr	r3, [r7, #16]
 801ee10:	685a      	ldr	r2, [r3, #4]
 801ee12:	4b1f      	ldr	r3, [pc, #124]	; (801ee90 <sys_timeout_abs+0xd8>)
 801ee14:	681b      	ldr	r3, [r3, #0]
 801ee16:	685b      	ldr	r3, [r3, #4]
 801ee18:	1ad3      	subs	r3, r2, r3
 801ee1a:	0fdb      	lsrs	r3, r3, #31
 801ee1c:	f003 0301 	and.w	r3, r3, #1
 801ee20:	b2db      	uxtb	r3, r3
 801ee22:	2b00      	cmp	r3, #0
 801ee24:	d007      	beq.n	801ee36 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801ee26:	4b1a      	ldr	r3, [pc, #104]	; (801ee90 <sys_timeout_abs+0xd8>)
 801ee28:	681a      	ldr	r2, [r3, #0]
 801ee2a:	693b      	ldr	r3, [r7, #16]
 801ee2c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801ee2e:	4a18      	ldr	r2, [pc, #96]	; (801ee90 <sys_timeout_abs+0xd8>)
 801ee30:	693b      	ldr	r3, [r7, #16]
 801ee32:	6013      	str	r3, [r2, #0]
 801ee34:	e023      	b.n	801ee7e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801ee36:	4b16      	ldr	r3, [pc, #88]	; (801ee90 <sys_timeout_abs+0xd8>)
 801ee38:	681b      	ldr	r3, [r3, #0]
 801ee3a:	617b      	str	r3, [r7, #20]
 801ee3c:	e01a      	b.n	801ee74 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801ee3e:	697b      	ldr	r3, [r7, #20]
 801ee40:	681b      	ldr	r3, [r3, #0]
 801ee42:	2b00      	cmp	r3, #0
 801ee44:	d00b      	beq.n	801ee5e <sys_timeout_abs+0xa6>
 801ee46:	693b      	ldr	r3, [r7, #16]
 801ee48:	685a      	ldr	r2, [r3, #4]
 801ee4a:	697b      	ldr	r3, [r7, #20]
 801ee4c:	681b      	ldr	r3, [r3, #0]
 801ee4e:	685b      	ldr	r3, [r3, #4]
 801ee50:	1ad3      	subs	r3, r2, r3
 801ee52:	0fdb      	lsrs	r3, r3, #31
 801ee54:	f003 0301 	and.w	r3, r3, #1
 801ee58:	b2db      	uxtb	r3, r3
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d007      	beq.n	801ee6e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801ee5e:	697b      	ldr	r3, [r7, #20]
 801ee60:	681a      	ldr	r2, [r3, #0]
 801ee62:	693b      	ldr	r3, [r7, #16]
 801ee64:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801ee66:	697b      	ldr	r3, [r7, #20]
 801ee68:	693a      	ldr	r2, [r7, #16]
 801ee6a:	601a      	str	r2, [r3, #0]
        break;
 801ee6c:	e007      	b.n	801ee7e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801ee6e:	697b      	ldr	r3, [r7, #20]
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	617b      	str	r3, [r7, #20]
 801ee74:	697b      	ldr	r3, [r7, #20]
 801ee76:	2b00      	cmp	r3, #0
 801ee78:	d1e1      	bne.n	801ee3e <sys_timeout_abs+0x86>
 801ee7a:	e000      	b.n	801ee7e <sys_timeout_abs+0xc6>
    return;
 801ee7c:	bf00      	nop
      }
    }
  }
}
 801ee7e:	3718      	adds	r7, #24
 801ee80:	46bd      	mov	sp, r7
 801ee82:	bd80      	pop	{r7, pc}
 801ee84:	08027ab8 	.word	0x08027ab8
 801ee88:	08027b1c 	.word	0x08027b1c
 801ee8c:	08027b5c 	.word	0x08027b5c
 801ee90:	20013db8 	.word	0x20013db8

0801ee94 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801ee94:	b580      	push	{r7, lr}
 801ee96:	b086      	sub	sp, #24
 801ee98:	af00      	add	r7, sp, #0
 801ee9a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801eea0:	697b      	ldr	r3, [r7, #20]
 801eea2:	685b      	ldr	r3, [r3, #4]
 801eea4:	4798      	blx	r3

  now = sys_now();
 801eea6:	f7fd fed9 	bl	801cc5c <sys_now>
 801eeaa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801eeac:	697b      	ldr	r3, [r7, #20]
 801eeae:	681a      	ldr	r2, [r3, #0]
 801eeb0:	4b0f      	ldr	r3, [pc, #60]	; (801eef0 <lwip_cyclic_timer+0x5c>)
 801eeb2:	681b      	ldr	r3, [r3, #0]
 801eeb4:	4413      	add	r3, r2
 801eeb6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801eeb8:	68fa      	ldr	r2, [r7, #12]
 801eeba:	693b      	ldr	r3, [r7, #16]
 801eebc:	1ad3      	subs	r3, r2, r3
 801eebe:	0fdb      	lsrs	r3, r3, #31
 801eec0:	f003 0301 	and.w	r3, r3, #1
 801eec4:	b2db      	uxtb	r3, r3
 801eec6:	2b00      	cmp	r3, #0
 801eec8:	d009      	beq.n	801eede <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801eeca:	697b      	ldr	r3, [r7, #20]
 801eecc:	681a      	ldr	r2, [r3, #0]
 801eece:	693b      	ldr	r3, [r7, #16]
 801eed0:	4413      	add	r3, r2
 801eed2:	687a      	ldr	r2, [r7, #4]
 801eed4:	4907      	ldr	r1, [pc, #28]	; (801eef4 <lwip_cyclic_timer+0x60>)
 801eed6:	4618      	mov	r0, r3
 801eed8:	f7ff ff6e 	bl	801edb8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801eedc:	e004      	b.n	801eee8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801eede:	687a      	ldr	r2, [r7, #4]
 801eee0:	4904      	ldr	r1, [pc, #16]	; (801eef4 <lwip_cyclic_timer+0x60>)
 801eee2:	68f8      	ldr	r0, [r7, #12]
 801eee4:	f7ff ff68 	bl	801edb8 <sys_timeout_abs>
}
 801eee8:	bf00      	nop
 801eeea:	3718      	adds	r7, #24
 801eeec:	46bd      	mov	sp, r7
 801eeee:	bd80      	pop	{r7, pc}
 801eef0:	20013dbc 	.word	0x20013dbc
 801eef4:	0801ee95 	.word	0x0801ee95

0801eef8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801eef8:	b580      	push	{r7, lr}
 801eefa:	b082      	sub	sp, #8
 801eefc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801eefe:	2300      	movs	r3, #0
 801ef00:	607b      	str	r3, [r7, #4]
 801ef02:	e00e      	b.n	801ef22 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801ef04:	4a0b      	ldr	r2, [pc, #44]	; (801ef34 <sys_timeouts_init+0x3c>)
 801ef06:	687b      	ldr	r3, [r7, #4]
 801ef08:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801ef0c:	687b      	ldr	r3, [r7, #4]
 801ef0e:	00db      	lsls	r3, r3, #3
 801ef10:	4a08      	ldr	r2, [pc, #32]	; (801ef34 <sys_timeouts_init+0x3c>)
 801ef12:	4413      	add	r3, r2
 801ef14:	461a      	mov	r2, r3
 801ef16:	4908      	ldr	r1, [pc, #32]	; (801ef38 <sys_timeouts_init+0x40>)
 801ef18:	f000 f810 	bl	801ef3c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801ef1c:	687b      	ldr	r3, [r7, #4]
 801ef1e:	3301      	adds	r3, #1
 801ef20:	607b      	str	r3, [r7, #4]
 801ef22:	687b      	ldr	r3, [r7, #4]
 801ef24:	2b01      	cmp	r3, #1
 801ef26:	d9ed      	bls.n	801ef04 <sys_timeouts_init+0xc>
  }
}
 801ef28:	bf00      	nop
 801ef2a:	bf00      	nop
 801ef2c:	3708      	adds	r7, #8
 801ef2e:	46bd      	mov	sp, r7
 801ef30:	bd80      	pop	{r7, pc}
 801ef32:	bf00      	nop
 801ef34:	08028bb4 	.word	0x08028bb4
 801ef38:	0801ee95 	.word	0x0801ee95

0801ef3c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801ef3c:	b580      	push	{r7, lr}
 801ef3e:	b086      	sub	sp, #24
 801ef40:	af00      	add	r7, sp, #0
 801ef42:	60f8      	str	r0, [r7, #12]
 801ef44:	60b9      	str	r1, [r7, #8]
 801ef46:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801ef4e:	d306      	bcc.n	801ef5e <sys_timeout+0x22>
 801ef50:	4b0a      	ldr	r3, [pc, #40]	; (801ef7c <sys_timeout+0x40>)
 801ef52:	f240 1229 	movw	r2, #297	; 0x129
 801ef56:	490a      	ldr	r1, [pc, #40]	; (801ef80 <sys_timeout+0x44>)
 801ef58:	480a      	ldr	r0, [pc, #40]	; (801ef84 <sys_timeout+0x48>)
 801ef5a:	f003 f9a7 	bl	80222ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801ef5e:	f7fd fe7d 	bl	801cc5c <sys_now>
 801ef62:	4602      	mov	r2, r0
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	4413      	add	r3, r2
 801ef68:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801ef6a:	687a      	ldr	r2, [r7, #4]
 801ef6c:	68b9      	ldr	r1, [r7, #8]
 801ef6e:	6978      	ldr	r0, [r7, #20]
 801ef70:	f7ff ff22 	bl	801edb8 <sys_timeout_abs>
#endif
}
 801ef74:	bf00      	nop
 801ef76:	3718      	adds	r7, #24
 801ef78:	46bd      	mov	sp, r7
 801ef7a:	bd80      	pop	{r7, pc}
 801ef7c:	08027ab8 	.word	0x08027ab8
 801ef80:	08027b84 	.word	0x08027b84
 801ef84:	08027b5c 	.word	0x08027b5c

0801ef88 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801ef88:	b580      	push	{r7, lr}
 801ef8a:	b084      	sub	sp, #16
 801ef8c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801ef8e:	f7fd fe65 	bl	801cc5c <sys_now>
 801ef92:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801ef94:	4b17      	ldr	r3, [pc, #92]	; (801eff4 <sys_check_timeouts+0x6c>)
 801ef96:	681b      	ldr	r3, [r3, #0]
 801ef98:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801ef9a:	68bb      	ldr	r3, [r7, #8]
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	d022      	beq.n	801efe6 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801efa0:	68bb      	ldr	r3, [r7, #8]
 801efa2:	685b      	ldr	r3, [r3, #4]
 801efa4:	68fa      	ldr	r2, [r7, #12]
 801efa6:	1ad3      	subs	r3, r2, r3
 801efa8:	0fdb      	lsrs	r3, r3, #31
 801efaa:	f003 0301 	and.w	r3, r3, #1
 801efae:	b2db      	uxtb	r3, r3
 801efb0:	2b00      	cmp	r3, #0
 801efb2:	d11a      	bne.n	801efea <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801efb4:	68bb      	ldr	r3, [r7, #8]
 801efb6:	681b      	ldr	r3, [r3, #0]
 801efb8:	4a0e      	ldr	r2, [pc, #56]	; (801eff4 <sys_check_timeouts+0x6c>)
 801efba:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801efbc:	68bb      	ldr	r3, [r7, #8]
 801efbe:	689b      	ldr	r3, [r3, #8]
 801efc0:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801efc2:	68bb      	ldr	r3, [r7, #8]
 801efc4:	68db      	ldr	r3, [r3, #12]
 801efc6:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801efc8:	68bb      	ldr	r3, [r7, #8]
 801efca:	685b      	ldr	r3, [r3, #4]
 801efcc:	4a0a      	ldr	r2, [pc, #40]	; (801eff8 <sys_check_timeouts+0x70>)
 801efce:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801efd0:	68b9      	ldr	r1, [r7, #8]
 801efd2:	2003      	movs	r0, #3
 801efd4:	f7fe fd22 	bl	801da1c <memp_free>
    if (handler != NULL) {
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	2b00      	cmp	r3, #0
 801efdc:	d0da      	beq.n	801ef94 <sys_check_timeouts+0xc>
      handler(arg);
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	6838      	ldr	r0, [r7, #0]
 801efe2:	4798      	blx	r3
  do {
 801efe4:	e7d6      	b.n	801ef94 <sys_check_timeouts+0xc>
      return;
 801efe6:	bf00      	nop
 801efe8:	e000      	b.n	801efec <sys_check_timeouts+0x64>
      return;
 801efea:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801efec:	3710      	adds	r7, #16
 801efee:	46bd      	mov	sp, r7
 801eff0:	bd80      	pop	{r7, pc}
 801eff2:	bf00      	nop
 801eff4:	20013db8 	.word	0x20013db8
 801eff8:	20013dbc 	.word	0x20013dbc

0801effc <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801effc:	b580      	push	{r7, lr}
 801effe:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f000:	f003 f9f8 	bl	80223f4 <rand>
 801f004:	4603      	mov	r3, r0
 801f006:	b29b      	uxth	r3, r3
 801f008:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f00c:	b29b      	uxth	r3, r3
 801f00e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f012:	b29a      	uxth	r2, r3
 801f014:	4b01      	ldr	r3, [pc, #4]	; (801f01c <udp_init+0x20>)
 801f016:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f018:	bf00      	nop
 801f01a:	bd80      	pop	{r7, pc}
 801f01c:	2000013c 	.word	0x2000013c

0801f020 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f020:	b480      	push	{r7}
 801f022:	b083      	sub	sp, #12
 801f024:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f026:	2300      	movs	r3, #0
 801f028:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f02a:	4b17      	ldr	r3, [pc, #92]	; (801f088 <udp_new_port+0x68>)
 801f02c:	881b      	ldrh	r3, [r3, #0]
 801f02e:	1c5a      	adds	r2, r3, #1
 801f030:	b291      	uxth	r1, r2
 801f032:	4a15      	ldr	r2, [pc, #84]	; (801f088 <udp_new_port+0x68>)
 801f034:	8011      	strh	r1, [r2, #0]
 801f036:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f03a:	4293      	cmp	r3, r2
 801f03c:	d103      	bne.n	801f046 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f03e:	4b12      	ldr	r3, [pc, #72]	; (801f088 <udp_new_port+0x68>)
 801f040:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f044:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f046:	4b11      	ldr	r3, [pc, #68]	; (801f08c <udp_new_port+0x6c>)
 801f048:	681b      	ldr	r3, [r3, #0]
 801f04a:	603b      	str	r3, [r7, #0]
 801f04c:	e011      	b.n	801f072 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f04e:	683b      	ldr	r3, [r7, #0]
 801f050:	8a5a      	ldrh	r2, [r3, #18]
 801f052:	4b0d      	ldr	r3, [pc, #52]	; (801f088 <udp_new_port+0x68>)
 801f054:	881b      	ldrh	r3, [r3, #0]
 801f056:	429a      	cmp	r2, r3
 801f058:	d108      	bne.n	801f06c <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801f05a:	88fb      	ldrh	r3, [r7, #6]
 801f05c:	3301      	adds	r3, #1
 801f05e:	80fb      	strh	r3, [r7, #6]
 801f060:	88fb      	ldrh	r3, [r7, #6]
 801f062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801f066:	d3e0      	bcc.n	801f02a <udp_new_port+0xa>
        return 0;
 801f068:	2300      	movs	r3, #0
 801f06a:	e007      	b.n	801f07c <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f06c:	683b      	ldr	r3, [r7, #0]
 801f06e:	68db      	ldr	r3, [r3, #12]
 801f070:	603b      	str	r3, [r7, #0]
 801f072:	683b      	ldr	r3, [r7, #0]
 801f074:	2b00      	cmp	r3, #0
 801f076:	d1ea      	bne.n	801f04e <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801f078:	4b03      	ldr	r3, [pc, #12]	; (801f088 <udp_new_port+0x68>)
 801f07a:	881b      	ldrh	r3, [r3, #0]
}
 801f07c:	4618      	mov	r0, r3
 801f07e:	370c      	adds	r7, #12
 801f080:	46bd      	mov	sp, r7
 801f082:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f086:	4770      	bx	lr
 801f088:	2000013c 	.word	0x2000013c
 801f08c:	20013dc0 	.word	0x20013dc0

0801f090 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801f090:	b580      	push	{r7, lr}
 801f092:	b084      	sub	sp, #16
 801f094:	af00      	add	r7, sp, #0
 801f096:	60f8      	str	r0, [r7, #12]
 801f098:	60b9      	str	r1, [r7, #8]
 801f09a:	4613      	mov	r3, r2
 801f09c:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801f09e:	68fb      	ldr	r3, [r7, #12]
 801f0a0:	2b00      	cmp	r3, #0
 801f0a2:	d105      	bne.n	801f0b0 <udp_input_local_match+0x20>
 801f0a4:	4b27      	ldr	r3, [pc, #156]	; (801f144 <udp_input_local_match+0xb4>)
 801f0a6:	2287      	movs	r2, #135	; 0x87
 801f0a8:	4927      	ldr	r1, [pc, #156]	; (801f148 <udp_input_local_match+0xb8>)
 801f0aa:	4828      	ldr	r0, [pc, #160]	; (801f14c <udp_input_local_match+0xbc>)
 801f0ac:	f003 f8fe 	bl	80222ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801f0b0:	68bb      	ldr	r3, [r7, #8]
 801f0b2:	2b00      	cmp	r3, #0
 801f0b4:	d105      	bne.n	801f0c2 <udp_input_local_match+0x32>
 801f0b6:	4b23      	ldr	r3, [pc, #140]	; (801f144 <udp_input_local_match+0xb4>)
 801f0b8:	2288      	movs	r2, #136	; 0x88
 801f0ba:	4925      	ldr	r1, [pc, #148]	; (801f150 <udp_input_local_match+0xc0>)
 801f0bc:	4823      	ldr	r0, [pc, #140]	; (801f14c <udp_input_local_match+0xbc>)
 801f0be:	f003 f8f5 	bl	80222ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	7a1b      	ldrb	r3, [r3, #8]
 801f0c6:	2b00      	cmp	r3, #0
 801f0c8:	d00b      	beq.n	801f0e2 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801f0ca:	68fb      	ldr	r3, [r7, #12]
 801f0cc:	7a1a      	ldrb	r2, [r3, #8]
 801f0ce:	4b21      	ldr	r3, [pc, #132]	; (801f154 <udp_input_local_match+0xc4>)
 801f0d0:	685b      	ldr	r3, [r3, #4]
 801f0d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801f0d6:	3301      	adds	r3, #1
 801f0d8:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801f0da:	429a      	cmp	r2, r3
 801f0dc:	d001      	beq.n	801f0e2 <udp_input_local_match+0x52>
    return 0;
 801f0de:	2300      	movs	r3, #0
 801f0e0:	e02b      	b.n	801f13a <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801f0e2:	79fb      	ldrb	r3, [r7, #7]
 801f0e4:	2b00      	cmp	r3, #0
 801f0e6:	d018      	beq.n	801f11a <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f0e8:	68fb      	ldr	r3, [r7, #12]
 801f0ea:	2b00      	cmp	r3, #0
 801f0ec:	d013      	beq.n	801f116 <udp_input_local_match+0x86>
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	681b      	ldr	r3, [r3, #0]
 801f0f2:	2b00      	cmp	r3, #0
 801f0f4:	d00f      	beq.n	801f116 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f0f6:	4b17      	ldr	r3, [pc, #92]	; (801f154 <udp_input_local_match+0xc4>)
 801f0f8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f0fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f0fe:	d00a      	beq.n	801f116 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	681a      	ldr	r2, [r3, #0]
 801f104:	4b13      	ldr	r3, [pc, #76]	; (801f154 <udp_input_local_match+0xc4>)
 801f106:	695b      	ldr	r3, [r3, #20]
 801f108:	405a      	eors	r2, r3
 801f10a:	68bb      	ldr	r3, [r7, #8]
 801f10c:	3308      	adds	r3, #8
 801f10e:	681b      	ldr	r3, [r3, #0]
 801f110:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801f112:	2b00      	cmp	r3, #0
 801f114:	d110      	bne.n	801f138 <udp_input_local_match+0xa8>
          return 1;
 801f116:	2301      	movs	r3, #1
 801f118:	e00f      	b.n	801f13a <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801f11a:	68fb      	ldr	r3, [r7, #12]
 801f11c:	2b00      	cmp	r3, #0
 801f11e:	d009      	beq.n	801f134 <udp_input_local_match+0xa4>
 801f120:	68fb      	ldr	r3, [r7, #12]
 801f122:	681b      	ldr	r3, [r3, #0]
 801f124:	2b00      	cmp	r3, #0
 801f126:	d005      	beq.n	801f134 <udp_input_local_match+0xa4>
 801f128:	68fb      	ldr	r3, [r7, #12]
 801f12a:	681a      	ldr	r2, [r3, #0]
 801f12c:	4b09      	ldr	r3, [pc, #36]	; (801f154 <udp_input_local_match+0xc4>)
 801f12e:	695b      	ldr	r3, [r3, #20]
 801f130:	429a      	cmp	r2, r3
 801f132:	d101      	bne.n	801f138 <udp_input_local_match+0xa8>
        return 1;
 801f134:	2301      	movs	r3, #1
 801f136:	e000      	b.n	801f13a <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801f138:	2300      	movs	r3, #0
}
 801f13a:	4618      	mov	r0, r3
 801f13c:	3710      	adds	r7, #16
 801f13e:	46bd      	mov	sp, r7
 801f140:	bd80      	pop	{r7, pc}
 801f142:	bf00      	nop
 801f144:	08027bd0 	.word	0x08027bd0
 801f148:	08027c30 	.word	0x08027c30
 801f14c:	08027c54 	.word	0x08027c54
 801f150:	08027c7c 	.word	0x08027c7c
 801f154:	2001075c 	.word	0x2001075c

0801f158 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801f158:	b590      	push	{r4, r7, lr}
 801f15a:	b08d      	sub	sp, #52	; 0x34
 801f15c:	af02      	add	r7, sp, #8
 801f15e:	6078      	str	r0, [r7, #4]
 801f160:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801f162:	2300      	movs	r3, #0
 801f164:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801f166:	687b      	ldr	r3, [r7, #4]
 801f168:	2b00      	cmp	r3, #0
 801f16a:	d105      	bne.n	801f178 <udp_input+0x20>
 801f16c:	4b7c      	ldr	r3, [pc, #496]	; (801f360 <udp_input+0x208>)
 801f16e:	22cf      	movs	r2, #207	; 0xcf
 801f170:	497c      	ldr	r1, [pc, #496]	; (801f364 <udp_input+0x20c>)
 801f172:	487d      	ldr	r0, [pc, #500]	; (801f368 <udp_input+0x210>)
 801f174:	f003 f89a 	bl	80222ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801f178:	683b      	ldr	r3, [r7, #0]
 801f17a:	2b00      	cmp	r3, #0
 801f17c:	d105      	bne.n	801f18a <udp_input+0x32>
 801f17e:	4b78      	ldr	r3, [pc, #480]	; (801f360 <udp_input+0x208>)
 801f180:	22d0      	movs	r2, #208	; 0xd0
 801f182:	497a      	ldr	r1, [pc, #488]	; (801f36c <udp_input+0x214>)
 801f184:	4878      	ldr	r0, [pc, #480]	; (801f368 <udp_input+0x210>)
 801f186:	f003 f891 	bl	80222ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	895b      	ldrh	r3, [r3, #10]
 801f18e:	2b07      	cmp	r3, #7
 801f190:	d803      	bhi.n	801f19a <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801f192:	6878      	ldr	r0, [r7, #4]
 801f194:	f7ff fb52 	bl	801e83c <pbuf_free>
    goto end;
 801f198:	e0de      	b.n	801f358 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	685b      	ldr	r3, [r3, #4]
 801f19e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801f1a0:	4b73      	ldr	r3, [pc, #460]	; (801f370 <udp_input+0x218>)
 801f1a2:	695b      	ldr	r3, [r3, #20]
 801f1a4:	4a72      	ldr	r2, [pc, #456]	; (801f370 <udp_input+0x218>)
 801f1a6:	6812      	ldr	r2, [r2, #0]
 801f1a8:	4611      	mov	r1, r2
 801f1aa:	4618      	mov	r0, r3
 801f1ac:	f001 ff44 	bl	8021038 <ip4_addr_isbroadcast_u32>
 801f1b0:	4603      	mov	r3, r0
 801f1b2:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801f1b4:	697b      	ldr	r3, [r7, #20]
 801f1b6:	881b      	ldrh	r3, [r3, #0]
 801f1b8:	b29b      	uxth	r3, r3
 801f1ba:	4618      	mov	r0, r3
 801f1bc:	f7fd ff62 	bl	801d084 <lwip_htons>
 801f1c0:	4603      	mov	r3, r0
 801f1c2:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801f1c4:	697b      	ldr	r3, [r7, #20]
 801f1c6:	885b      	ldrh	r3, [r3, #2]
 801f1c8:	b29b      	uxth	r3, r3
 801f1ca:	4618      	mov	r0, r3
 801f1cc:	f7fd ff5a 	bl	801d084 <lwip_htons>
 801f1d0:	4603      	mov	r3, r0
 801f1d2:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801f1d4:	2300      	movs	r3, #0
 801f1d6:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801f1d8:	2300      	movs	r3, #0
 801f1da:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801f1dc:	2300      	movs	r3, #0
 801f1de:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f1e0:	4b64      	ldr	r3, [pc, #400]	; (801f374 <udp_input+0x21c>)
 801f1e2:	681b      	ldr	r3, [r3, #0]
 801f1e4:	627b      	str	r3, [r7, #36]	; 0x24
 801f1e6:	e054      	b.n	801f292 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801f1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f1ea:	8a5b      	ldrh	r3, [r3, #18]
 801f1ec:	89fa      	ldrh	r2, [r7, #14]
 801f1ee:	429a      	cmp	r2, r3
 801f1f0:	d14a      	bne.n	801f288 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801f1f2:	7cfb      	ldrb	r3, [r7, #19]
 801f1f4:	461a      	mov	r2, r3
 801f1f6:	6839      	ldr	r1, [r7, #0]
 801f1f8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801f1fa:	f7ff ff49 	bl	801f090 <udp_input_local_match>
 801f1fe:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801f200:	2b00      	cmp	r3, #0
 801f202:	d041      	beq.n	801f288 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801f204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f206:	7c1b      	ldrb	r3, [r3, #16]
 801f208:	f003 0304 	and.w	r3, r3, #4
 801f20c:	2b00      	cmp	r3, #0
 801f20e:	d11d      	bne.n	801f24c <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801f210:	69fb      	ldr	r3, [r7, #28]
 801f212:	2b00      	cmp	r3, #0
 801f214:	d102      	bne.n	801f21c <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801f216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f218:	61fb      	str	r3, [r7, #28]
 801f21a:	e017      	b.n	801f24c <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801f21c:	7cfb      	ldrb	r3, [r7, #19]
 801f21e:	2b00      	cmp	r3, #0
 801f220:	d014      	beq.n	801f24c <udp_input+0xf4>
 801f222:	4b53      	ldr	r3, [pc, #332]	; (801f370 <udp_input+0x218>)
 801f224:	695b      	ldr	r3, [r3, #20]
 801f226:	f1b3 3fff 	cmp.w	r3, #4294967295
 801f22a:	d10f      	bne.n	801f24c <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801f22c:	69fb      	ldr	r3, [r7, #28]
 801f22e:	681a      	ldr	r2, [r3, #0]
 801f230:	683b      	ldr	r3, [r7, #0]
 801f232:	3304      	adds	r3, #4
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	429a      	cmp	r2, r3
 801f238:	d008      	beq.n	801f24c <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801f23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f23c:	681a      	ldr	r2, [r3, #0]
 801f23e:	683b      	ldr	r3, [r7, #0]
 801f240:	3304      	adds	r3, #4
 801f242:	681b      	ldr	r3, [r3, #0]
 801f244:	429a      	cmp	r2, r3
 801f246:	d101      	bne.n	801f24c <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801f248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f24a:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801f24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f24e:	8a9b      	ldrh	r3, [r3, #20]
 801f250:	8a3a      	ldrh	r2, [r7, #16]
 801f252:	429a      	cmp	r2, r3
 801f254:	d118      	bne.n	801f288 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f258:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801f25a:	2b00      	cmp	r3, #0
 801f25c:	d005      	beq.n	801f26a <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801f25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f260:	685a      	ldr	r2, [r3, #4]
 801f262:	4b43      	ldr	r3, [pc, #268]	; (801f370 <udp_input+0x218>)
 801f264:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801f266:	429a      	cmp	r2, r3
 801f268:	d10e      	bne.n	801f288 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801f26a:	6a3b      	ldr	r3, [r7, #32]
 801f26c:	2b00      	cmp	r3, #0
 801f26e:	d014      	beq.n	801f29a <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801f270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f272:	68da      	ldr	r2, [r3, #12]
 801f274:	6a3b      	ldr	r3, [r7, #32]
 801f276:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801f278:	4b3e      	ldr	r3, [pc, #248]	; (801f374 <udp_input+0x21c>)
 801f27a:	681a      	ldr	r2, [r3, #0]
 801f27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f27e:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801f280:	4a3c      	ldr	r2, [pc, #240]	; (801f374 <udp_input+0x21c>)
 801f282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f284:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801f286:	e008      	b.n	801f29a <udp_input+0x142>
      }
    }

    prev = pcb;
 801f288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f28a:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f28c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f28e:	68db      	ldr	r3, [r3, #12]
 801f290:	627b      	str	r3, [r7, #36]	; 0x24
 801f292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f294:	2b00      	cmp	r3, #0
 801f296:	d1a7      	bne.n	801f1e8 <udp_input+0x90>
 801f298:	e000      	b.n	801f29c <udp_input+0x144>
        break;
 801f29a:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801f29c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f29e:	2b00      	cmp	r3, #0
 801f2a0:	d101      	bne.n	801f2a6 <udp_input+0x14e>
    pcb = uncon_pcb;
 801f2a2:	69fb      	ldr	r3, [r7, #28]
 801f2a4:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801f2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d002      	beq.n	801f2b2 <udp_input+0x15a>
    for_us = 1;
 801f2ac:	2301      	movs	r3, #1
 801f2ae:	76fb      	strb	r3, [r7, #27]
 801f2b0:	e00a      	b.n	801f2c8 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801f2b2:	683b      	ldr	r3, [r7, #0]
 801f2b4:	3304      	adds	r3, #4
 801f2b6:	681a      	ldr	r2, [r3, #0]
 801f2b8:	4b2d      	ldr	r3, [pc, #180]	; (801f370 <udp_input+0x218>)
 801f2ba:	695b      	ldr	r3, [r3, #20]
 801f2bc:	429a      	cmp	r2, r3
 801f2be:	bf0c      	ite	eq
 801f2c0:	2301      	moveq	r3, #1
 801f2c2:	2300      	movne	r3, #0
 801f2c4:	b2db      	uxtb	r3, r3
 801f2c6:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801f2c8:	7efb      	ldrb	r3, [r7, #27]
 801f2ca:	2b00      	cmp	r3, #0
 801f2cc:	d041      	beq.n	801f352 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801f2ce:	2108      	movs	r1, #8
 801f2d0:	6878      	ldr	r0, [r7, #4]
 801f2d2:	f7ff fa2d 	bl	801e730 <pbuf_remove_header>
 801f2d6:	4603      	mov	r3, r0
 801f2d8:	2b00      	cmp	r3, #0
 801f2da:	d00a      	beq.n	801f2f2 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801f2dc:	4b20      	ldr	r3, [pc, #128]	; (801f360 <udp_input+0x208>)
 801f2de:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801f2e2:	4925      	ldr	r1, [pc, #148]	; (801f378 <udp_input+0x220>)
 801f2e4:	4820      	ldr	r0, [pc, #128]	; (801f368 <udp_input+0x210>)
 801f2e6:	f002 ffe1 	bl	80222ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801f2ea:	6878      	ldr	r0, [r7, #4]
 801f2ec:	f7ff faa6 	bl	801e83c <pbuf_free>
      goto end;
 801f2f0:	e032      	b.n	801f358 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801f2f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2f4:	2b00      	cmp	r3, #0
 801f2f6:	d012      	beq.n	801f31e <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801f2f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f2fa:	699b      	ldr	r3, [r3, #24]
 801f2fc:	2b00      	cmp	r3, #0
 801f2fe:	d00a      	beq.n	801f316 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801f300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f302:	699c      	ldr	r4, [r3, #24]
 801f304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801f306:	69d8      	ldr	r0, [r3, #28]
 801f308:	8a3b      	ldrh	r3, [r7, #16]
 801f30a:	9300      	str	r3, [sp, #0]
 801f30c:	4b1b      	ldr	r3, [pc, #108]	; (801f37c <udp_input+0x224>)
 801f30e:	687a      	ldr	r2, [r7, #4]
 801f310:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801f312:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801f314:	e021      	b.n	801f35a <udp_input+0x202>
        pbuf_free(p);
 801f316:	6878      	ldr	r0, [r7, #4]
 801f318:	f7ff fa90 	bl	801e83c <pbuf_free>
        goto end;
 801f31c:	e01c      	b.n	801f358 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801f31e:	7cfb      	ldrb	r3, [r7, #19]
 801f320:	2b00      	cmp	r3, #0
 801f322:	d112      	bne.n	801f34a <udp_input+0x1f2>
 801f324:	4b12      	ldr	r3, [pc, #72]	; (801f370 <udp_input+0x218>)
 801f326:	695b      	ldr	r3, [r3, #20]
 801f328:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801f32c:	2be0      	cmp	r3, #224	; 0xe0
 801f32e:	d00c      	beq.n	801f34a <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801f330:	4b0f      	ldr	r3, [pc, #60]	; (801f370 <udp_input+0x218>)
 801f332:	899b      	ldrh	r3, [r3, #12]
 801f334:	3308      	adds	r3, #8
 801f336:	b29b      	uxth	r3, r3
 801f338:	b21b      	sxth	r3, r3
 801f33a:	4619      	mov	r1, r3
 801f33c:	6878      	ldr	r0, [r7, #4]
 801f33e:	f7ff fa6a 	bl	801e816 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801f342:	2103      	movs	r1, #3
 801f344:	6878      	ldr	r0, [r7, #4]
 801f346:	f001 fb53 	bl	80209f0 <icmp_dest_unreach>
      pbuf_free(p);
 801f34a:	6878      	ldr	r0, [r7, #4]
 801f34c:	f7ff fa76 	bl	801e83c <pbuf_free>
  return;
 801f350:	e003      	b.n	801f35a <udp_input+0x202>
    pbuf_free(p);
 801f352:	6878      	ldr	r0, [r7, #4]
 801f354:	f7ff fa72 	bl	801e83c <pbuf_free>
  return;
 801f358:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801f35a:	372c      	adds	r7, #44	; 0x2c
 801f35c:	46bd      	mov	sp, r7
 801f35e:	bd90      	pop	{r4, r7, pc}
 801f360:	08027bd0 	.word	0x08027bd0
 801f364:	08027ca4 	.word	0x08027ca4
 801f368:	08027c54 	.word	0x08027c54
 801f36c:	08027cbc 	.word	0x08027cbc
 801f370:	2001075c 	.word	0x2001075c
 801f374:	20013dc0 	.word	0x20013dc0
 801f378:	08027cd8 	.word	0x08027cd8
 801f37c:	2001076c 	.word	0x2001076c

0801f380 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801f380:	b580      	push	{r7, lr}
 801f382:	b088      	sub	sp, #32
 801f384:	af02      	add	r7, sp, #8
 801f386:	60f8      	str	r0, [r7, #12]
 801f388:	60b9      	str	r1, [r7, #8]
 801f38a:	607a      	str	r2, [r7, #4]
 801f38c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	2b00      	cmp	r3, #0
 801f392:	d109      	bne.n	801f3a8 <udp_sendto+0x28>
 801f394:	4b23      	ldr	r3, [pc, #140]	; (801f424 <udp_sendto+0xa4>)
 801f396:	f44f 7206 	mov.w	r2, #536	; 0x218
 801f39a:	4923      	ldr	r1, [pc, #140]	; (801f428 <udp_sendto+0xa8>)
 801f39c:	4823      	ldr	r0, [pc, #140]	; (801f42c <udp_sendto+0xac>)
 801f39e:	f002 ff85 	bl	80222ac <iprintf>
 801f3a2:	f06f 030f 	mvn.w	r3, #15
 801f3a6:	e038      	b.n	801f41a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801f3a8:	68bb      	ldr	r3, [r7, #8]
 801f3aa:	2b00      	cmp	r3, #0
 801f3ac:	d109      	bne.n	801f3c2 <udp_sendto+0x42>
 801f3ae:	4b1d      	ldr	r3, [pc, #116]	; (801f424 <udp_sendto+0xa4>)
 801f3b0:	f240 2219 	movw	r2, #537	; 0x219
 801f3b4:	491e      	ldr	r1, [pc, #120]	; (801f430 <udp_sendto+0xb0>)
 801f3b6:	481d      	ldr	r0, [pc, #116]	; (801f42c <udp_sendto+0xac>)
 801f3b8:	f002 ff78 	bl	80222ac <iprintf>
 801f3bc:	f06f 030f 	mvn.w	r3, #15
 801f3c0:	e02b      	b.n	801f41a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f3c2:	687b      	ldr	r3, [r7, #4]
 801f3c4:	2b00      	cmp	r3, #0
 801f3c6:	d109      	bne.n	801f3dc <udp_sendto+0x5c>
 801f3c8:	4b16      	ldr	r3, [pc, #88]	; (801f424 <udp_sendto+0xa4>)
 801f3ca:	f240 221a 	movw	r2, #538	; 0x21a
 801f3ce:	4919      	ldr	r1, [pc, #100]	; (801f434 <udp_sendto+0xb4>)
 801f3d0:	4816      	ldr	r0, [pc, #88]	; (801f42c <udp_sendto+0xac>)
 801f3d2:	f002 ff6b 	bl	80222ac <iprintf>
 801f3d6:	f06f 030f 	mvn.w	r3, #15
 801f3da:	e01e      	b.n	801f41a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801f3dc:	68fb      	ldr	r3, [r7, #12]
 801f3de:	7a1b      	ldrb	r3, [r3, #8]
 801f3e0:	2b00      	cmp	r3, #0
 801f3e2:	d006      	beq.n	801f3f2 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801f3e4:	68fb      	ldr	r3, [r7, #12]
 801f3e6:	7a1b      	ldrb	r3, [r3, #8]
 801f3e8:	4618      	mov	r0, r3
 801f3ea:	f7fe fef5 	bl	801e1d8 <netif_get_by_index>
 801f3ee:	6178      	str	r0, [r7, #20]
 801f3f0:	e003      	b.n	801f3fa <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801f3f2:	6878      	ldr	r0, [r7, #4]
 801f3f4:	f001 fb86 	bl	8020b04 <ip4_route>
 801f3f8:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801f3fa:	697b      	ldr	r3, [r7, #20]
 801f3fc:	2b00      	cmp	r3, #0
 801f3fe:	d102      	bne.n	801f406 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801f400:	f06f 0303 	mvn.w	r3, #3
 801f404:	e009      	b.n	801f41a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801f406:	887a      	ldrh	r2, [r7, #2]
 801f408:	697b      	ldr	r3, [r7, #20]
 801f40a:	9300      	str	r3, [sp, #0]
 801f40c:	4613      	mov	r3, r2
 801f40e:	687a      	ldr	r2, [r7, #4]
 801f410:	68b9      	ldr	r1, [r7, #8]
 801f412:	68f8      	ldr	r0, [r7, #12]
 801f414:	f000 f810 	bl	801f438 <udp_sendto_if>
 801f418:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f41a:	4618      	mov	r0, r3
 801f41c:	3718      	adds	r7, #24
 801f41e:	46bd      	mov	sp, r7
 801f420:	bd80      	pop	{r7, pc}
 801f422:	bf00      	nop
 801f424:	08027bd0 	.word	0x08027bd0
 801f428:	08027d24 	.word	0x08027d24
 801f42c:	08027c54 	.word	0x08027c54
 801f430:	08027d3c 	.word	0x08027d3c
 801f434:	08027d58 	.word	0x08027d58

0801f438 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801f438:	b580      	push	{r7, lr}
 801f43a:	b088      	sub	sp, #32
 801f43c:	af02      	add	r7, sp, #8
 801f43e:	60f8      	str	r0, [r7, #12]
 801f440:	60b9      	str	r1, [r7, #8]
 801f442:	607a      	str	r2, [r7, #4]
 801f444:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	2b00      	cmp	r3, #0
 801f44a:	d109      	bne.n	801f460 <udp_sendto_if+0x28>
 801f44c:	4b2e      	ldr	r3, [pc, #184]	; (801f508 <udp_sendto_if+0xd0>)
 801f44e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f452:	492e      	ldr	r1, [pc, #184]	; (801f50c <udp_sendto_if+0xd4>)
 801f454:	482e      	ldr	r0, [pc, #184]	; (801f510 <udp_sendto_if+0xd8>)
 801f456:	f002 ff29 	bl	80222ac <iprintf>
 801f45a:	f06f 030f 	mvn.w	r3, #15
 801f45e:	e04f      	b.n	801f500 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801f460:	68bb      	ldr	r3, [r7, #8]
 801f462:	2b00      	cmp	r3, #0
 801f464:	d109      	bne.n	801f47a <udp_sendto_if+0x42>
 801f466:	4b28      	ldr	r3, [pc, #160]	; (801f508 <udp_sendto_if+0xd0>)
 801f468:	f240 2281 	movw	r2, #641	; 0x281
 801f46c:	4929      	ldr	r1, [pc, #164]	; (801f514 <udp_sendto_if+0xdc>)
 801f46e:	4828      	ldr	r0, [pc, #160]	; (801f510 <udp_sendto_if+0xd8>)
 801f470:	f002 ff1c 	bl	80222ac <iprintf>
 801f474:	f06f 030f 	mvn.w	r3, #15
 801f478:	e042      	b.n	801f500 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f47a:	687b      	ldr	r3, [r7, #4]
 801f47c:	2b00      	cmp	r3, #0
 801f47e:	d109      	bne.n	801f494 <udp_sendto_if+0x5c>
 801f480:	4b21      	ldr	r3, [pc, #132]	; (801f508 <udp_sendto_if+0xd0>)
 801f482:	f240 2282 	movw	r2, #642	; 0x282
 801f486:	4924      	ldr	r1, [pc, #144]	; (801f518 <udp_sendto_if+0xe0>)
 801f488:	4821      	ldr	r0, [pc, #132]	; (801f510 <udp_sendto_if+0xd8>)
 801f48a:	f002 ff0f 	bl	80222ac <iprintf>
 801f48e:	f06f 030f 	mvn.w	r3, #15
 801f492:	e035      	b.n	801f500 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801f494:	6a3b      	ldr	r3, [r7, #32]
 801f496:	2b00      	cmp	r3, #0
 801f498:	d109      	bne.n	801f4ae <udp_sendto_if+0x76>
 801f49a:	4b1b      	ldr	r3, [pc, #108]	; (801f508 <udp_sendto_if+0xd0>)
 801f49c:	f240 2283 	movw	r2, #643	; 0x283
 801f4a0:	491e      	ldr	r1, [pc, #120]	; (801f51c <udp_sendto_if+0xe4>)
 801f4a2:	481b      	ldr	r0, [pc, #108]	; (801f510 <udp_sendto_if+0xd8>)
 801f4a4:	f002 ff02 	bl	80222ac <iprintf>
 801f4a8:	f06f 030f 	mvn.w	r3, #15
 801f4ac:	e028      	b.n	801f500 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f4ae:	68fb      	ldr	r3, [r7, #12]
 801f4b0:	2b00      	cmp	r3, #0
 801f4b2:	d009      	beq.n	801f4c8 <udp_sendto_if+0x90>
 801f4b4:	68fb      	ldr	r3, [r7, #12]
 801f4b6:	681b      	ldr	r3, [r3, #0]
 801f4b8:	2b00      	cmp	r3, #0
 801f4ba:	d005      	beq.n	801f4c8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801f4bc:	68fb      	ldr	r3, [r7, #12]
 801f4be:	681b      	ldr	r3, [r3, #0]
 801f4c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801f4c4:	2be0      	cmp	r3, #224	; 0xe0
 801f4c6:	d103      	bne.n	801f4d0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801f4c8:	6a3b      	ldr	r3, [r7, #32]
 801f4ca:	3304      	adds	r3, #4
 801f4cc:	617b      	str	r3, [r7, #20]
 801f4ce:	e00b      	b.n	801f4e8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801f4d0:	68fb      	ldr	r3, [r7, #12]
 801f4d2:	681a      	ldr	r2, [r3, #0]
 801f4d4:	6a3b      	ldr	r3, [r7, #32]
 801f4d6:	3304      	adds	r3, #4
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	429a      	cmp	r2, r3
 801f4dc:	d002      	beq.n	801f4e4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801f4de:	f06f 0303 	mvn.w	r3, #3
 801f4e2:	e00d      	b.n	801f500 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801f4e8:	887a      	ldrh	r2, [r7, #2]
 801f4ea:	697b      	ldr	r3, [r7, #20]
 801f4ec:	9301      	str	r3, [sp, #4]
 801f4ee:	6a3b      	ldr	r3, [r7, #32]
 801f4f0:	9300      	str	r3, [sp, #0]
 801f4f2:	4613      	mov	r3, r2
 801f4f4:	687a      	ldr	r2, [r7, #4]
 801f4f6:	68b9      	ldr	r1, [r7, #8]
 801f4f8:	68f8      	ldr	r0, [r7, #12]
 801f4fa:	f000 f811 	bl	801f520 <udp_sendto_if_src>
 801f4fe:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801f500:	4618      	mov	r0, r3
 801f502:	3718      	adds	r7, #24
 801f504:	46bd      	mov	sp, r7
 801f506:	bd80      	pop	{r7, pc}
 801f508:	08027bd0 	.word	0x08027bd0
 801f50c:	08027d74 	.word	0x08027d74
 801f510:	08027c54 	.word	0x08027c54
 801f514:	08027d90 	.word	0x08027d90
 801f518:	08027dac 	.word	0x08027dac
 801f51c:	08027dcc 	.word	0x08027dcc

0801f520 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801f520:	b580      	push	{r7, lr}
 801f522:	b08c      	sub	sp, #48	; 0x30
 801f524:	af04      	add	r7, sp, #16
 801f526:	60f8      	str	r0, [r7, #12]
 801f528:	60b9      	str	r1, [r7, #8]
 801f52a:	607a      	str	r2, [r7, #4]
 801f52c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801f52e:	68fb      	ldr	r3, [r7, #12]
 801f530:	2b00      	cmp	r3, #0
 801f532:	d109      	bne.n	801f548 <udp_sendto_if_src+0x28>
 801f534:	4b65      	ldr	r3, [pc, #404]	; (801f6cc <udp_sendto_if_src+0x1ac>)
 801f536:	f240 22d1 	movw	r2, #721	; 0x2d1
 801f53a:	4965      	ldr	r1, [pc, #404]	; (801f6d0 <udp_sendto_if_src+0x1b0>)
 801f53c:	4865      	ldr	r0, [pc, #404]	; (801f6d4 <udp_sendto_if_src+0x1b4>)
 801f53e:	f002 feb5 	bl	80222ac <iprintf>
 801f542:	f06f 030f 	mvn.w	r3, #15
 801f546:	e0bc      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801f548:	68bb      	ldr	r3, [r7, #8]
 801f54a:	2b00      	cmp	r3, #0
 801f54c:	d109      	bne.n	801f562 <udp_sendto_if_src+0x42>
 801f54e:	4b5f      	ldr	r3, [pc, #380]	; (801f6cc <udp_sendto_if_src+0x1ac>)
 801f550:	f240 22d2 	movw	r2, #722	; 0x2d2
 801f554:	4960      	ldr	r1, [pc, #384]	; (801f6d8 <udp_sendto_if_src+0x1b8>)
 801f556:	485f      	ldr	r0, [pc, #380]	; (801f6d4 <udp_sendto_if_src+0x1b4>)
 801f558:	f002 fea8 	bl	80222ac <iprintf>
 801f55c:	f06f 030f 	mvn.w	r3, #15
 801f560:	e0af      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801f562:	687b      	ldr	r3, [r7, #4]
 801f564:	2b00      	cmp	r3, #0
 801f566:	d109      	bne.n	801f57c <udp_sendto_if_src+0x5c>
 801f568:	4b58      	ldr	r3, [pc, #352]	; (801f6cc <udp_sendto_if_src+0x1ac>)
 801f56a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801f56e:	495b      	ldr	r1, [pc, #364]	; (801f6dc <udp_sendto_if_src+0x1bc>)
 801f570:	4858      	ldr	r0, [pc, #352]	; (801f6d4 <udp_sendto_if_src+0x1b4>)
 801f572:	f002 fe9b 	bl	80222ac <iprintf>
 801f576:	f06f 030f 	mvn.w	r3, #15
 801f57a:	e0a2      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801f57c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d109      	bne.n	801f596 <udp_sendto_if_src+0x76>
 801f582:	4b52      	ldr	r3, [pc, #328]	; (801f6cc <udp_sendto_if_src+0x1ac>)
 801f584:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801f588:	4955      	ldr	r1, [pc, #340]	; (801f6e0 <udp_sendto_if_src+0x1c0>)
 801f58a:	4852      	ldr	r0, [pc, #328]	; (801f6d4 <udp_sendto_if_src+0x1b4>)
 801f58c:	f002 fe8e 	bl	80222ac <iprintf>
 801f590:	f06f 030f 	mvn.w	r3, #15
 801f594:	e095      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801f596:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f598:	2b00      	cmp	r3, #0
 801f59a:	d109      	bne.n	801f5b0 <udp_sendto_if_src+0x90>
 801f59c:	4b4b      	ldr	r3, [pc, #300]	; (801f6cc <udp_sendto_if_src+0x1ac>)
 801f59e:	f240 22d5 	movw	r2, #725	; 0x2d5
 801f5a2:	4950      	ldr	r1, [pc, #320]	; (801f6e4 <udp_sendto_if_src+0x1c4>)
 801f5a4:	484b      	ldr	r0, [pc, #300]	; (801f6d4 <udp_sendto_if_src+0x1b4>)
 801f5a6:	f002 fe81 	bl	80222ac <iprintf>
 801f5aa:	f06f 030f 	mvn.w	r3, #15
 801f5ae:	e088      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801f5b0:	68fb      	ldr	r3, [r7, #12]
 801f5b2:	8a5b      	ldrh	r3, [r3, #18]
 801f5b4:	2b00      	cmp	r3, #0
 801f5b6:	d10f      	bne.n	801f5d8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801f5b8:	68f9      	ldr	r1, [r7, #12]
 801f5ba:	68fb      	ldr	r3, [r7, #12]
 801f5bc:	8a5b      	ldrh	r3, [r3, #18]
 801f5be:	461a      	mov	r2, r3
 801f5c0:	68f8      	ldr	r0, [r7, #12]
 801f5c2:	f000 f893 	bl	801f6ec <udp_bind>
 801f5c6:	4603      	mov	r3, r0
 801f5c8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801f5ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f5ce:	2b00      	cmp	r3, #0
 801f5d0:	d002      	beq.n	801f5d8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801f5d2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801f5d6:	e074      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801f5d8:	68bb      	ldr	r3, [r7, #8]
 801f5da:	891b      	ldrh	r3, [r3, #8]
 801f5dc:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801f5e0:	4293      	cmp	r3, r2
 801f5e2:	d902      	bls.n	801f5ea <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801f5e4:	f04f 33ff 	mov.w	r3, #4294967295
 801f5e8:	e06b      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801f5ea:	2108      	movs	r1, #8
 801f5ec:	68b8      	ldr	r0, [r7, #8]
 801f5ee:	f7ff f88f 	bl	801e710 <pbuf_add_header>
 801f5f2:	4603      	mov	r3, r0
 801f5f4:	2b00      	cmp	r3, #0
 801f5f6:	d015      	beq.n	801f624 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 801f5f8:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f5fc:	2108      	movs	r1, #8
 801f5fe:	2022      	movs	r0, #34	; 0x22
 801f600:	f7fe fe3a 	bl	801e278 <pbuf_alloc>
 801f604:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 801f606:	69fb      	ldr	r3, [r7, #28]
 801f608:	2b00      	cmp	r3, #0
 801f60a:	d102      	bne.n	801f612 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 801f60c:	f04f 33ff 	mov.w	r3, #4294967295
 801f610:	e057      	b.n	801f6c2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 801f612:	68bb      	ldr	r3, [r7, #8]
 801f614:	891b      	ldrh	r3, [r3, #8]
 801f616:	2b00      	cmp	r3, #0
 801f618:	d006      	beq.n	801f628 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 801f61a:	68b9      	ldr	r1, [r7, #8]
 801f61c:	69f8      	ldr	r0, [r7, #28]
 801f61e:	f7ff fa25 	bl	801ea6c <pbuf_chain>
 801f622:	e001      	b.n	801f628 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 801f624:	68bb      	ldr	r3, [r7, #8]
 801f626:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 801f628:	69fb      	ldr	r3, [r7, #28]
 801f62a:	895b      	ldrh	r3, [r3, #10]
 801f62c:	2b07      	cmp	r3, #7
 801f62e:	d806      	bhi.n	801f63e <udp_sendto_if_src+0x11e>
 801f630:	4b26      	ldr	r3, [pc, #152]	; (801f6cc <udp_sendto_if_src+0x1ac>)
 801f632:	f240 320d 	movw	r2, #781	; 0x30d
 801f636:	492c      	ldr	r1, [pc, #176]	; (801f6e8 <udp_sendto_if_src+0x1c8>)
 801f638:	4826      	ldr	r0, [pc, #152]	; (801f6d4 <udp_sendto_if_src+0x1b4>)
 801f63a:	f002 fe37 	bl	80222ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801f63e:	69fb      	ldr	r3, [r7, #28]
 801f640:	685b      	ldr	r3, [r3, #4]
 801f642:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 801f644:	68fb      	ldr	r3, [r7, #12]
 801f646:	8a5b      	ldrh	r3, [r3, #18]
 801f648:	4618      	mov	r0, r3
 801f64a:	f7fd fd1b 	bl	801d084 <lwip_htons>
 801f64e:	4603      	mov	r3, r0
 801f650:	461a      	mov	r2, r3
 801f652:	697b      	ldr	r3, [r7, #20]
 801f654:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801f656:	887b      	ldrh	r3, [r7, #2]
 801f658:	4618      	mov	r0, r3
 801f65a:	f7fd fd13 	bl	801d084 <lwip_htons>
 801f65e:	4603      	mov	r3, r0
 801f660:	461a      	mov	r2, r3
 801f662:	697b      	ldr	r3, [r7, #20]
 801f664:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801f666:	697b      	ldr	r3, [r7, #20]
 801f668:	2200      	movs	r2, #0
 801f66a:	719a      	strb	r2, [r3, #6]
 801f66c:	2200      	movs	r2, #0
 801f66e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801f670:	69fb      	ldr	r3, [r7, #28]
 801f672:	891b      	ldrh	r3, [r3, #8]
 801f674:	4618      	mov	r0, r3
 801f676:	f7fd fd05 	bl	801d084 <lwip_htons>
 801f67a:	4603      	mov	r3, r0
 801f67c:	461a      	mov	r2, r3
 801f67e:	697b      	ldr	r3, [r7, #20]
 801f680:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801f682:	2311      	movs	r3, #17
 801f684:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801f686:	68fb      	ldr	r3, [r7, #12]
 801f688:	7adb      	ldrb	r3, [r3, #11]
 801f68a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 801f68c:	68fb      	ldr	r3, [r7, #12]
 801f68e:	7a9b      	ldrb	r3, [r3, #10]
 801f690:	7cb9      	ldrb	r1, [r7, #18]
 801f692:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801f694:	9202      	str	r2, [sp, #8]
 801f696:	7cfa      	ldrb	r2, [r7, #19]
 801f698:	9201      	str	r2, [sp, #4]
 801f69a:	9300      	str	r3, [sp, #0]
 801f69c:	460b      	mov	r3, r1
 801f69e:	687a      	ldr	r2, [r7, #4]
 801f6a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801f6a2:	69f8      	ldr	r0, [r7, #28]
 801f6a4:	f001 fc0c 	bl	8020ec0 <ip4_output_if_src>
 801f6a8:	4603      	mov	r3, r0
 801f6aa:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 801f6ac:	69fa      	ldr	r2, [r7, #28]
 801f6ae:	68bb      	ldr	r3, [r7, #8]
 801f6b0:	429a      	cmp	r2, r3
 801f6b2:	d004      	beq.n	801f6be <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 801f6b4:	69f8      	ldr	r0, [r7, #28]
 801f6b6:	f7ff f8c1 	bl	801e83c <pbuf_free>
    q = NULL;
 801f6ba:	2300      	movs	r3, #0
 801f6bc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801f6be:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801f6c2:	4618      	mov	r0, r3
 801f6c4:	3720      	adds	r7, #32
 801f6c6:	46bd      	mov	sp, r7
 801f6c8:	bd80      	pop	{r7, pc}
 801f6ca:	bf00      	nop
 801f6cc:	08027bd0 	.word	0x08027bd0
 801f6d0:	08027dec 	.word	0x08027dec
 801f6d4:	08027c54 	.word	0x08027c54
 801f6d8:	08027e0c 	.word	0x08027e0c
 801f6dc:	08027e2c 	.word	0x08027e2c
 801f6e0:	08027e50 	.word	0x08027e50
 801f6e4:	08027e74 	.word	0x08027e74
 801f6e8:	08027e98 	.word	0x08027e98

0801f6ec <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 801f6ec:	b580      	push	{r7, lr}
 801f6ee:	b086      	sub	sp, #24
 801f6f0:	af00      	add	r7, sp, #0
 801f6f2:	60f8      	str	r0, [r7, #12]
 801f6f4:	60b9      	str	r1, [r7, #8]
 801f6f6:	4613      	mov	r3, r2
 801f6f8:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 801f6fa:	68bb      	ldr	r3, [r7, #8]
 801f6fc:	2b00      	cmp	r3, #0
 801f6fe:	d101      	bne.n	801f704 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 801f700:	4b39      	ldr	r3, [pc, #228]	; (801f7e8 <udp_bind+0xfc>)
 801f702:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 801f704:	68fb      	ldr	r3, [r7, #12]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d109      	bne.n	801f71e <udp_bind+0x32>
 801f70a:	4b38      	ldr	r3, [pc, #224]	; (801f7ec <udp_bind+0x100>)
 801f70c:	f240 32b7 	movw	r2, #951	; 0x3b7
 801f710:	4937      	ldr	r1, [pc, #220]	; (801f7f0 <udp_bind+0x104>)
 801f712:	4838      	ldr	r0, [pc, #224]	; (801f7f4 <udp_bind+0x108>)
 801f714:	f002 fdca 	bl	80222ac <iprintf>
 801f718:	f06f 030f 	mvn.w	r3, #15
 801f71c:	e060      	b.n	801f7e0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 801f71e:	2300      	movs	r3, #0
 801f720:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f722:	4b35      	ldr	r3, [pc, #212]	; (801f7f8 <udp_bind+0x10c>)
 801f724:	681b      	ldr	r3, [r3, #0]
 801f726:	617b      	str	r3, [r7, #20]
 801f728:	e009      	b.n	801f73e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801f72a:	68fa      	ldr	r2, [r7, #12]
 801f72c:	697b      	ldr	r3, [r7, #20]
 801f72e:	429a      	cmp	r2, r3
 801f730:	d102      	bne.n	801f738 <udp_bind+0x4c>
      rebind = 1;
 801f732:	2301      	movs	r3, #1
 801f734:	74fb      	strb	r3, [r7, #19]
      break;
 801f736:	e005      	b.n	801f744 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f738:	697b      	ldr	r3, [r7, #20]
 801f73a:	68db      	ldr	r3, [r3, #12]
 801f73c:	617b      	str	r3, [r7, #20]
 801f73e:	697b      	ldr	r3, [r7, #20]
 801f740:	2b00      	cmp	r3, #0
 801f742:	d1f2      	bne.n	801f72a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801f744:	88fb      	ldrh	r3, [r7, #6]
 801f746:	2b00      	cmp	r3, #0
 801f748:	d109      	bne.n	801f75e <udp_bind+0x72>
    port = udp_new_port();
 801f74a:	f7ff fc69 	bl	801f020 <udp_new_port>
 801f74e:	4603      	mov	r3, r0
 801f750:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801f752:	88fb      	ldrh	r3, [r7, #6]
 801f754:	2b00      	cmp	r3, #0
 801f756:	d12c      	bne.n	801f7b2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801f758:	f06f 0307 	mvn.w	r3, #7
 801f75c:	e040      	b.n	801f7e0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f75e:	4b26      	ldr	r3, [pc, #152]	; (801f7f8 <udp_bind+0x10c>)
 801f760:	681b      	ldr	r3, [r3, #0]
 801f762:	617b      	str	r3, [r7, #20]
 801f764:	e022      	b.n	801f7ac <udp_bind+0xc0>
      if (pcb != ipcb) {
 801f766:	68fa      	ldr	r2, [r7, #12]
 801f768:	697b      	ldr	r3, [r7, #20]
 801f76a:	429a      	cmp	r2, r3
 801f76c:	d01b      	beq.n	801f7a6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801f76e:	697b      	ldr	r3, [r7, #20]
 801f770:	8a5b      	ldrh	r3, [r3, #18]
 801f772:	88fa      	ldrh	r2, [r7, #6]
 801f774:	429a      	cmp	r2, r3
 801f776:	d116      	bne.n	801f7a6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f778:	697b      	ldr	r3, [r7, #20]
 801f77a:	681a      	ldr	r2, [r3, #0]
 801f77c:	68bb      	ldr	r3, [r7, #8]
 801f77e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801f780:	429a      	cmp	r2, r3
 801f782:	d00d      	beq.n	801f7a0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f784:	68bb      	ldr	r3, [r7, #8]
 801f786:	2b00      	cmp	r3, #0
 801f788:	d00a      	beq.n	801f7a0 <udp_bind+0xb4>
 801f78a:	68bb      	ldr	r3, [r7, #8]
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	2b00      	cmp	r3, #0
 801f790:	d006      	beq.n	801f7a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f792:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801f794:	2b00      	cmp	r3, #0
 801f796:	d003      	beq.n	801f7a0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801f798:	697b      	ldr	r3, [r7, #20]
 801f79a:	681b      	ldr	r3, [r3, #0]
 801f79c:	2b00      	cmp	r3, #0
 801f79e:	d102      	bne.n	801f7a6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801f7a0:	f06f 0307 	mvn.w	r3, #7
 801f7a4:	e01c      	b.n	801f7e0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801f7a6:	697b      	ldr	r3, [r7, #20]
 801f7a8:	68db      	ldr	r3, [r3, #12]
 801f7aa:	617b      	str	r3, [r7, #20]
 801f7ac:	697b      	ldr	r3, [r7, #20]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d1d9      	bne.n	801f766 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801f7b2:	68bb      	ldr	r3, [r7, #8]
 801f7b4:	2b00      	cmp	r3, #0
 801f7b6:	d002      	beq.n	801f7be <udp_bind+0xd2>
 801f7b8:	68bb      	ldr	r3, [r7, #8]
 801f7ba:	681b      	ldr	r3, [r3, #0]
 801f7bc:	e000      	b.n	801f7c0 <udp_bind+0xd4>
 801f7be:	2300      	movs	r3, #0
 801f7c0:	68fa      	ldr	r2, [r7, #12]
 801f7c2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801f7c4:	68fb      	ldr	r3, [r7, #12]
 801f7c6:	88fa      	ldrh	r2, [r7, #6]
 801f7c8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801f7ca:	7cfb      	ldrb	r3, [r7, #19]
 801f7cc:	2b00      	cmp	r3, #0
 801f7ce:	d106      	bne.n	801f7de <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801f7d0:	4b09      	ldr	r3, [pc, #36]	; (801f7f8 <udp_bind+0x10c>)
 801f7d2:	681a      	ldr	r2, [r3, #0]
 801f7d4:	68fb      	ldr	r3, [r7, #12]
 801f7d6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801f7d8:	4a07      	ldr	r2, [pc, #28]	; (801f7f8 <udp_bind+0x10c>)
 801f7da:	68fb      	ldr	r3, [r7, #12]
 801f7dc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 801f7de:	2300      	movs	r3, #0
}
 801f7e0:	4618      	mov	r0, r3
 801f7e2:	3718      	adds	r7, #24
 801f7e4:	46bd      	mov	sp, r7
 801f7e6:	bd80      	pop	{r7, pc}
 801f7e8:	08028bc4 	.word	0x08028bc4
 801f7ec:	08027bd0 	.word	0x08027bd0
 801f7f0:	08027ec8 	.word	0x08027ec8
 801f7f4:	08027c54 	.word	0x08027c54
 801f7f8:	20013dc0 	.word	0x20013dc0

0801f7fc <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 801f7fc:	b580      	push	{r7, lr}
 801f7fe:	b084      	sub	sp, #16
 801f800:	af00      	add	r7, sp, #0
 801f802:	60f8      	str	r0, [r7, #12]
 801f804:	60b9      	str	r1, [r7, #8]
 801f806:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 801f808:	68fb      	ldr	r3, [r7, #12]
 801f80a:	2b00      	cmp	r3, #0
 801f80c:	d107      	bne.n	801f81e <udp_recv+0x22>
 801f80e:	4b08      	ldr	r3, [pc, #32]	; (801f830 <udp_recv+0x34>)
 801f810:	f240 428a 	movw	r2, #1162	; 0x48a
 801f814:	4907      	ldr	r1, [pc, #28]	; (801f834 <udp_recv+0x38>)
 801f816:	4808      	ldr	r0, [pc, #32]	; (801f838 <udp_recv+0x3c>)
 801f818:	f002 fd48 	bl	80222ac <iprintf>
 801f81c:	e005      	b.n	801f82a <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 801f81e:	68fb      	ldr	r3, [r7, #12]
 801f820:	68ba      	ldr	r2, [r7, #8]
 801f822:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801f824:	68fb      	ldr	r3, [r7, #12]
 801f826:	687a      	ldr	r2, [r7, #4]
 801f828:	61da      	str	r2, [r3, #28]
}
 801f82a:	3710      	adds	r7, #16
 801f82c:	46bd      	mov	sp, r7
 801f82e:	bd80      	pop	{r7, pc}
 801f830:	08027bd0 	.word	0x08027bd0
 801f834:	08027f34 	.word	0x08027f34
 801f838:	08027c54 	.word	0x08027c54

0801f83c <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801f83c:	b580      	push	{r7, lr}
 801f83e:	b084      	sub	sp, #16
 801f840:	af00      	add	r7, sp, #0
 801f842:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	2b00      	cmp	r3, #0
 801f848:	d107      	bne.n	801f85a <udp_remove+0x1e>
 801f84a:	4b19      	ldr	r3, [pc, #100]	; (801f8b0 <udp_remove+0x74>)
 801f84c:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801f850:	4918      	ldr	r1, [pc, #96]	; (801f8b4 <udp_remove+0x78>)
 801f852:	4819      	ldr	r0, [pc, #100]	; (801f8b8 <udp_remove+0x7c>)
 801f854:	f002 fd2a 	bl	80222ac <iprintf>
 801f858:	e026      	b.n	801f8a8 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801f85a:	4b18      	ldr	r3, [pc, #96]	; (801f8bc <udp_remove+0x80>)
 801f85c:	681b      	ldr	r3, [r3, #0]
 801f85e:	687a      	ldr	r2, [r7, #4]
 801f860:	429a      	cmp	r2, r3
 801f862:	d105      	bne.n	801f870 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801f864:	4b15      	ldr	r3, [pc, #84]	; (801f8bc <udp_remove+0x80>)
 801f866:	681b      	ldr	r3, [r3, #0]
 801f868:	68db      	ldr	r3, [r3, #12]
 801f86a:	4a14      	ldr	r2, [pc, #80]	; (801f8bc <udp_remove+0x80>)
 801f86c:	6013      	str	r3, [r2, #0]
 801f86e:	e017      	b.n	801f8a0 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f870:	4b12      	ldr	r3, [pc, #72]	; (801f8bc <udp_remove+0x80>)
 801f872:	681b      	ldr	r3, [r3, #0]
 801f874:	60fb      	str	r3, [r7, #12]
 801f876:	e010      	b.n	801f89a <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801f878:	68fb      	ldr	r3, [r7, #12]
 801f87a:	68db      	ldr	r3, [r3, #12]
 801f87c:	2b00      	cmp	r3, #0
 801f87e:	d009      	beq.n	801f894 <udp_remove+0x58>
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	68db      	ldr	r3, [r3, #12]
 801f884:	687a      	ldr	r2, [r7, #4]
 801f886:	429a      	cmp	r2, r3
 801f888:	d104      	bne.n	801f894 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801f88a:	687b      	ldr	r3, [r7, #4]
 801f88c:	68da      	ldr	r2, [r3, #12]
 801f88e:	68fb      	ldr	r3, [r7, #12]
 801f890:	60da      	str	r2, [r3, #12]
        break;
 801f892:	e005      	b.n	801f8a0 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801f894:	68fb      	ldr	r3, [r7, #12]
 801f896:	68db      	ldr	r3, [r3, #12]
 801f898:	60fb      	str	r3, [r7, #12]
 801f89a:	68fb      	ldr	r3, [r7, #12]
 801f89c:	2b00      	cmp	r3, #0
 801f89e:	d1eb      	bne.n	801f878 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801f8a0:	6879      	ldr	r1, [r7, #4]
 801f8a2:	2000      	movs	r0, #0
 801f8a4:	f7fe f8ba 	bl	801da1c <memp_free>
}
 801f8a8:	3710      	adds	r7, #16
 801f8aa:	46bd      	mov	sp, r7
 801f8ac:	bd80      	pop	{r7, pc}
 801f8ae:	bf00      	nop
 801f8b0:	08027bd0 	.word	0x08027bd0
 801f8b4:	08027f4c 	.word	0x08027f4c
 801f8b8:	08027c54 	.word	0x08027c54
 801f8bc:	20013dc0 	.word	0x20013dc0

0801f8c0 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b082      	sub	sp, #8
 801f8c4:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801f8c6:	2000      	movs	r0, #0
 801f8c8:	f7fe f838 	bl	801d93c <memp_malloc>
 801f8cc:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801f8ce:	687b      	ldr	r3, [r7, #4]
 801f8d0:	2b00      	cmp	r3, #0
 801f8d2:	d007      	beq.n	801f8e4 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801f8d4:	2220      	movs	r2, #32
 801f8d6:	2100      	movs	r1, #0
 801f8d8:	6878      	ldr	r0, [r7, #4]
 801f8da:	f002 fbff 	bl	80220dc <memset>
    pcb->ttl = UDP_TTL;
 801f8de:	687b      	ldr	r3, [r7, #4]
 801f8e0:	22ff      	movs	r2, #255	; 0xff
 801f8e2:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801f8e4:	687b      	ldr	r3, [r7, #4]
}
 801f8e6:	4618      	mov	r0, r3
 801f8e8:	3708      	adds	r7, #8
 801f8ea:	46bd      	mov	sp, r7
 801f8ec:	bd80      	pop	{r7, pc}
	...

0801f8f0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801f8f0:	b480      	push	{r7}
 801f8f2:	b085      	sub	sp, #20
 801f8f4:	af00      	add	r7, sp, #0
 801f8f6:	6078      	str	r0, [r7, #4]
 801f8f8:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801f8fa:	687b      	ldr	r3, [r7, #4]
 801f8fc:	2b00      	cmp	r3, #0
 801f8fe:	d01e      	beq.n	801f93e <udp_netif_ip_addr_changed+0x4e>
 801f900:	687b      	ldr	r3, [r7, #4]
 801f902:	681b      	ldr	r3, [r3, #0]
 801f904:	2b00      	cmp	r3, #0
 801f906:	d01a      	beq.n	801f93e <udp_netif_ip_addr_changed+0x4e>
 801f908:	683b      	ldr	r3, [r7, #0]
 801f90a:	2b00      	cmp	r3, #0
 801f90c:	d017      	beq.n	801f93e <udp_netif_ip_addr_changed+0x4e>
 801f90e:	683b      	ldr	r3, [r7, #0]
 801f910:	681b      	ldr	r3, [r3, #0]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d013      	beq.n	801f93e <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f916:	4b0d      	ldr	r3, [pc, #52]	; (801f94c <udp_netif_ip_addr_changed+0x5c>)
 801f918:	681b      	ldr	r3, [r3, #0]
 801f91a:	60fb      	str	r3, [r7, #12]
 801f91c:	e00c      	b.n	801f938 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	681a      	ldr	r2, [r3, #0]
 801f922:	687b      	ldr	r3, [r7, #4]
 801f924:	681b      	ldr	r3, [r3, #0]
 801f926:	429a      	cmp	r2, r3
 801f928:	d103      	bne.n	801f932 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801f92a:	683b      	ldr	r3, [r7, #0]
 801f92c:	681a      	ldr	r2, [r3, #0]
 801f92e:	68fb      	ldr	r3, [r7, #12]
 801f930:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801f932:	68fb      	ldr	r3, [r7, #12]
 801f934:	68db      	ldr	r3, [r3, #12]
 801f936:	60fb      	str	r3, [r7, #12]
 801f938:	68fb      	ldr	r3, [r7, #12]
 801f93a:	2b00      	cmp	r3, #0
 801f93c:	d1ef      	bne.n	801f91e <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801f93e:	bf00      	nop
 801f940:	3714      	adds	r7, #20
 801f942:	46bd      	mov	sp, r7
 801f944:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f948:	4770      	bx	lr
 801f94a:	bf00      	nop
 801f94c:	20013dc0 	.word	0x20013dc0

0801f950 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801f950:	b580      	push	{r7, lr}
 801f952:	b082      	sub	sp, #8
 801f954:	af00      	add	r7, sp, #0
 801f956:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801f958:	4915      	ldr	r1, [pc, #84]	; (801f9b0 <etharp_free_entry+0x60>)
 801f95a:	687a      	ldr	r2, [r7, #4]
 801f95c:	4613      	mov	r3, r2
 801f95e:	005b      	lsls	r3, r3, #1
 801f960:	4413      	add	r3, r2
 801f962:	00db      	lsls	r3, r3, #3
 801f964:	440b      	add	r3, r1
 801f966:	681b      	ldr	r3, [r3, #0]
 801f968:	2b00      	cmp	r3, #0
 801f96a:	d013      	beq.n	801f994 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801f96c:	4910      	ldr	r1, [pc, #64]	; (801f9b0 <etharp_free_entry+0x60>)
 801f96e:	687a      	ldr	r2, [r7, #4]
 801f970:	4613      	mov	r3, r2
 801f972:	005b      	lsls	r3, r3, #1
 801f974:	4413      	add	r3, r2
 801f976:	00db      	lsls	r3, r3, #3
 801f978:	440b      	add	r3, r1
 801f97a:	681b      	ldr	r3, [r3, #0]
 801f97c:	4618      	mov	r0, r3
 801f97e:	f7fe ff5d 	bl	801e83c <pbuf_free>
    arp_table[i].q = NULL;
 801f982:	490b      	ldr	r1, [pc, #44]	; (801f9b0 <etharp_free_entry+0x60>)
 801f984:	687a      	ldr	r2, [r7, #4]
 801f986:	4613      	mov	r3, r2
 801f988:	005b      	lsls	r3, r3, #1
 801f98a:	4413      	add	r3, r2
 801f98c:	00db      	lsls	r3, r3, #3
 801f98e:	440b      	add	r3, r1
 801f990:	2200      	movs	r2, #0
 801f992:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801f994:	4906      	ldr	r1, [pc, #24]	; (801f9b0 <etharp_free_entry+0x60>)
 801f996:	687a      	ldr	r2, [r7, #4]
 801f998:	4613      	mov	r3, r2
 801f99a:	005b      	lsls	r3, r3, #1
 801f99c:	4413      	add	r3, r2
 801f99e:	00db      	lsls	r3, r3, #3
 801f9a0:	440b      	add	r3, r1
 801f9a2:	3314      	adds	r3, #20
 801f9a4:	2200      	movs	r2, #0
 801f9a6:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801f9a8:	bf00      	nop
 801f9aa:	3708      	adds	r7, #8
 801f9ac:	46bd      	mov	sp, r7
 801f9ae:	bd80      	pop	{r7, pc}
 801f9b0:	20013dc4 	.word	0x20013dc4

0801f9b4 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801f9b4:	b580      	push	{r7, lr}
 801f9b6:	b082      	sub	sp, #8
 801f9b8:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801f9ba:	2300      	movs	r3, #0
 801f9bc:	607b      	str	r3, [r7, #4]
 801f9be:	e096      	b.n	801faee <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801f9c0:	494f      	ldr	r1, [pc, #316]	; (801fb00 <etharp_tmr+0x14c>)
 801f9c2:	687a      	ldr	r2, [r7, #4]
 801f9c4:	4613      	mov	r3, r2
 801f9c6:	005b      	lsls	r3, r3, #1
 801f9c8:	4413      	add	r3, r2
 801f9ca:	00db      	lsls	r3, r3, #3
 801f9cc:	440b      	add	r3, r1
 801f9ce:	3314      	adds	r3, #20
 801f9d0:	781b      	ldrb	r3, [r3, #0]
 801f9d2:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801f9d4:	78fb      	ldrb	r3, [r7, #3]
 801f9d6:	2b00      	cmp	r3, #0
 801f9d8:	f000 8086 	beq.w	801fae8 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801f9dc:	4948      	ldr	r1, [pc, #288]	; (801fb00 <etharp_tmr+0x14c>)
 801f9de:	687a      	ldr	r2, [r7, #4]
 801f9e0:	4613      	mov	r3, r2
 801f9e2:	005b      	lsls	r3, r3, #1
 801f9e4:	4413      	add	r3, r2
 801f9e6:	00db      	lsls	r3, r3, #3
 801f9e8:	440b      	add	r3, r1
 801f9ea:	3312      	adds	r3, #18
 801f9ec:	881b      	ldrh	r3, [r3, #0]
 801f9ee:	3301      	adds	r3, #1
 801f9f0:	b298      	uxth	r0, r3
 801f9f2:	4943      	ldr	r1, [pc, #268]	; (801fb00 <etharp_tmr+0x14c>)
 801f9f4:	687a      	ldr	r2, [r7, #4]
 801f9f6:	4613      	mov	r3, r2
 801f9f8:	005b      	lsls	r3, r3, #1
 801f9fa:	4413      	add	r3, r2
 801f9fc:	00db      	lsls	r3, r3, #3
 801f9fe:	440b      	add	r3, r1
 801fa00:	3312      	adds	r3, #18
 801fa02:	4602      	mov	r2, r0
 801fa04:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fa06:	493e      	ldr	r1, [pc, #248]	; (801fb00 <etharp_tmr+0x14c>)
 801fa08:	687a      	ldr	r2, [r7, #4]
 801fa0a:	4613      	mov	r3, r2
 801fa0c:	005b      	lsls	r3, r3, #1
 801fa0e:	4413      	add	r3, r2
 801fa10:	00db      	lsls	r3, r3, #3
 801fa12:	440b      	add	r3, r1
 801fa14:	3312      	adds	r3, #18
 801fa16:	881b      	ldrh	r3, [r3, #0]
 801fa18:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801fa1c:	d215      	bcs.n	801fa4a <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fa1e:	4938      	ldr	r1, [pc, #224]	; (801fb00 <etharp_tmr+0x14c>)
 801fa20:	687a      	ldr	r2, [r7, #4]
 801fa22:	4613      	mov	r3, r2
 801fa24:	005b      	lsls	r3, r3, #1
 801fa26:	4413      	add	r3, r2
 801fa28:	00db      	lsls	r3, r3, #3
 801fa2a:	440b      	add	r3, r1
 801fa2c:	3314      	adds	r3, #20
 801fa2e:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801fa30:	2b01      	cmp	r3, #1
 801fa32:	d10e      	bne.n	801fa52 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801fa34:	4932      	ldr	r1, [pc, #200]	; (801fb00 <etharp_tmr+0x14c>)
 801fa36:	687a      	ldr	r2, [r7, #4]
 801fa38:	4613      	mov	r3, r2
 801fa3a:	005b      	lsls	r3, r3, #1
 801fa3c:	4413      	add	r3, r2
 801fa3e:	00db      	lsls	r3, r3, #3
 801fa40:	440b      	add	r3, r1
 801fa42:	3312      	adds	r3, #18
 801fa44:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801fa46:	2b04      	cmp	r3, #4
 801fa48:	d903      	bls.n	801fa52 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801fa4a:	6878      	ldr	r0, [r7, #4]
 801fa4c:	f7ff ff80 	bl	801f950 <etharp_free_entry>
 801fa50:	e04a      	b.n	801fae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801fa52:	492b      	ldr	r1, [pc, #172]	; (801fb00 <etharp_tmr+0x14c>)
 801fa54:	687a      	ldr	r2, [r7, #4]
 801fa56:	4613      	mov	r3, r2
 801fa58:	005b      	lsls	r3, r3, #1
 801fa5a:	4413      	add	r3, r2
 801fa5c:	00db      	lsls	r3, r3, #3
 801fa5e:	440b      	add	r3, r1
 801fa60:	3314      	adds	r3, #20
 801fa62:	781b      	ldrb	r3, [r3, #0]
 801fa64:	2b03      	cmp	r3, #3
 801fa66:	d10a      	bne.n	801fa7e <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801fa68:	4925      	ldr	r1, [pc, #148]	; (801fb00 <etharp_tmr+0x14c>)
 801fa6a:	687a      	ldr	r2, [r7, #4]
 801fa6c:	4613      	mov	r3, r2
 801fa6e:	005b      	lsls	r3, r3, #1
 801fa70:	4413      	add	r3, r2
 801fa72:	00db      	lsls	r3, r3, #3
 801fa74:	440b      	add	r3, r1
 801fa76:	3314      	adds	r3, #20
 801fa78:	2204      	movs	r2, #4
 801fa7a:	701a      	strb	r2, [r3, #0]
 801fa7c:	e034      	b.n	801fae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801fa7e:	4920      	ldr	r1, [pc, #128]	; (801fb00 <etharp_tmr+0x14c>)
 801fa80:	687a      	ldr	r2, [r7, #4]
 801fa82:	4613      	mov	r3, r2
 801fa84:	005b      	lsls	r3, r3, #1
 801fa86:	4413      	add	r3, r2
 801fa88:	00db      	lsls	r3, r3, #3
 801fa8a:	440b      	add	r3, r1
 801fa8c:	3314      	adds	r3, #20
 801fa8e:	781b      	ldrb	r3, [r3, #0]
 801fa90:	2b04      	cmp	r3, #4
 801fa92:	d10a      	bne.n	801faaa <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801fa94:	491a      	ldr	r1, [pc, #104]	; (801fb00 <etharp_tmr+0x14c>)
 801fa96:	687a      	ldr	r2, [r7, #4]
 801fa98:	4613      	mov	r3, r2
 801fa9a:	005b      	lsls	r3, r3, #1
 801fa9c:	4413      	add	r3, r2
 801fa9e:	00db      	lsls	r3, r3, #3
 801faa0:	440b      	add	r3, r1
 801faa2:	3314      	adds	r3, #20
 801faa4:	2202      	movs	r2, #2
 801faa6:	701a      	strb	r2, [r3, #0]
 801faa8:	e01e      	b.n	801fae8 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801faaa:	4915      	ldr	r1, [pc, #84]	; (801fb00 <etharp_tmr+0x14c>)
 801faac:	687a      	ldr	r2, [r7, #4]
 801faae:	4613      	mov	r3, r2
 801fab0:	005b      	lsls	r3, r3, #1
 801fab2:	4413      	add	r3, r2
 801fab4:	00db      	lsls	r3, r3, #3
 801fab6:	440b      	add	r3, r1
 801fab8:	3314      	adds	r3, #20
 801faba:	781b      	ldrb	r3, [r3, #0]
 801fabc:	2b01      	cmp	r3, #1
 801fabe:	d113      	bne.n	801fae8 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801fac0:	490f      	ldr	r1, [pc, #60]	; (801fb00 <etharp_tmr+0x14c>)
 801fac2:	687a      	ldr	r2, [r7, #4]
 801fac4:	4613      	mov	r3, r2
 801fac6:	005b      	lsls	r3, r3, #1
 801fac8:	4413      	add	r3, r2
 801faca:	00db      	lsls	r3, r3, #3
 801facc:	440b      	add	r3, r1
 801face:	3308      	adds	r3, #8
 801fad0:	6818      	ldr	r0, [r3, #0]
 801fad2:	687a      	ldr	r2, [r7, #4]
 801fad4:	4613      	mov	r3, r2
 801fad6:	005b      	lsls	r3, r3, #1
 801fad8:	4413      	add	r3, r2
 801fada:	00db      	lsls	r3, r3, #3
 801fadc:	4a08      	ldr	r2, [pc, #32]	; (801fb00 <etharp_tmr+0x14c>)
 801fade:	4413      	add	r3, r2
 801fae0:	3304      	adds	r3, #4
 801fae2:	4619      	mov	r1, r3
 801fae4:	f000 fe6e 	bl	80207c4 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fae8:	687b      	ldr	r3, [r7, #4]
 801faea:	3301      	adds	r3, #1
 801faec:	607b      	str	r3, [r7, #4]
 801faee:	687b      	ldr	r3, [r7, #4]
 801faf0:	2b31      	cmp	r3, #49	; 0x31
 801faf2:	f77f af65 	ble.w	801f9c0 <etharp_tmr+0xc>
      }
    }
  }
}
 801faf6:	bf00      	nop
 801faf8:	bf00      	nop
 801fafa:	3708      	adds	r7, #8
 801fafc:	46bd      	mov	sp, r7
 801fafe:	bd80      	pop	{r7, pc}
 801fb00:	20013dc4 	.word	0x20013dc4

0801fb04 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801fb04:	b580      	push	{r7, lr}
 801fb06:	b08a      	sub	sp, #40	; 0x28
 801fb08:	af00      	add	r7, sp, #0
 801fb0a:	60f8      	str	r0, [r7, #12]
 801fb0c:	460b      	mov	r3, r1
 801fb0e:	607a      	str	r2, [r7, #4]
 801fb10:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801fb12:	2332      	movs	r3, #50	; 0x32
 801fb14:	84fb      	strh	r3, [r7, #38]	; 0x26
 801fb16:	2332      	movs	r3, #50	; 0x32
 801fb18:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801fb1a:	2332      	movs	r3, #50	; 0x32
 801fb1c:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801fb1e:	2300      	movs	r3, #0
 801fb20:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801fb22:	2332      	movs	r3, #50	; 0x32
 801fb24:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801fb26:	2300      	movs	r3, #0
 801fb28:	83bb      	strh	r3, [r7, #28]
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	837b      	strh	r3, [r7, #26]
 801fb2e:	2300      	movs	r3, #0
 801fb30:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fb32:	2300      	movs	r3, #0
 801fb34:	843b      	strh	r3, [r7, #32]
 801fb36:	e0ae      	b.n	801fc96 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801fb38:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb3c:	49a6      	ldr	r1, [pc, #664]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fb3e:	4613      	mov	r3, r2
 801fb40:	005b      	lsls	r3, r3, #1
 801fb42:	4413      	add	r3, r2
 801fb44:	00db      	lsls	r3, r3, #3
 801fb46:	440b      	add	r3, r1
 801fb48:	3314      	adds	r3, #20
 801fb4a:	781b      	ldrb	r3, [r3, #0]
 801fb4c:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801fb4e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fb52:	2b32      	cmp	r3, #50	; 0x32
 801fb54:	d105      	bne.n	801fb62 <etharp_find_entry+0x5e>
 801fb56:	7dfb      	ldrb	r3, [r7, #23]
 801fb58:	2b00      	cmp	r3, #0
 801fb5a:	d102      	bne.n	801fb62 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801fb5c:	8c3b      	ldrh	r3, [r7, #32]
 801fb5e:	847b      	strh	r3, [r7, #34]	; 0x22
 801fb60:	e095      	b.n	801fc8e <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801fb62:	7dfb      	ldrb	r3, [r7, #23]
 801fb64:	2b00      	cmp	r3, #0
 801fb66:	f000 8092 	beq.w	801fc8e <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801fb6a:	7dfb      	ldrb	r3, [r7, #23]
 801fb6c:	2b01      	cmp	r3, #1
 801fb6e:	d009      	beq.n	801fb84 <etharp_find_entry+0x80>
 801fb70:	7dfb      	ldrb	r3, [r7, #23]
 801fb72:	2b01      	cmp	r3, #1
 801fb74:	d806      	bhi.n	801fb84 <etharp_find_entry+0x80>
 801fb76:	4b99      	ldr	r3, [pc, #612]	; (801fddc <etharp_find_entry+0x2d8>)
 801fb78:	f240 1223 	movw	r2, #291	; 0x123
 801fb7c:	4998      	ldr	r1, [pc, #608]	; (801fde0 <etharp_find_entry+0x2dc>)
 801fb7e:	4899      	ldr	r0, [pc, #612]	; (801fde4 <etharp_find_entry+0x2e0>)
 801fb80:	f002 fb94 	bl	80222ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801fb84:	68fb      	ldr	r3, [r7, #12]
 801fb86:	2b00      	cmp	r3, #0
 801fb88:	d020      	beq.n	801fbcc <etharp_find_entry+0xc8>
 801fb8a:	68fb      	ldr	r3, [r7, #12]
 801fb8c:	6819      	ldr	r1, [r3, #0]
 801fb8e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fb92:	4891      	ldr	r0, [pc, #580]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fb94:	4613      	mov	r3, r2
 801fb96:	005b      	lsls	r3, r3, #1
 801fb98:	4413      	add	r3, r2
 801fb9a:	00db      	lsls	r3, r3, #3
 801fb9c:	4403      	add	r3, r0
 801fb9e:	3304      	adds	r3, #4
 801fba0:	681b      	ldr	r3, [r3, #0]
 801fba2:	4299      	cmp	r1, r3
 801fba4:	d112      	bne.n	801fbcc <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801fba6:	687b      	ldr	r3, [r7, #4]
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d00c      	beq.n	801fbc6 <etharp_find_entry+0xc2>
 801fbac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fbb0:	4989      	ldr	r1, [pc, #548]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fbb2:	4613      	mov	r3, r2
 801fbb4:	005b      	lsls	r3, r3, #1
 801fbb6:	4413      	add	r3, r2
 801fbb8:	00db      	lsls	r3, r3, #3
 801fbba:	440b      	add	r3, r1
 801fbbc:	3308      	adds	r3, #8
 801fbbe:	681b      	ldr	r3, [r3, #0]
 801fbc0:	687a      	ldr	r2, [r7, #4]
 801fbc2:	429a      	cmp	r2, r3
 801fbc4:	d102      	bne.n	801fbcc <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801fbc6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fbca:	e100      	b.n	801fdce <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801fbcc:	7dfb      	ldrb	r3, [r7, #23]
 801fbce:	2b01      	cmp	r3, #1
 801fbd0:	d140      	bne.n	801fc54 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801fbd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fbd6:	4980      	ldr	r1, [pc, #512]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fbd8:	4613      	mov	r3, r2
 801fbda:	005b      	lsls	r3, r3, #1
 801fbdc:	4413      	add	r3, r2
 801fbde:	00db      	lsls	r3, r3, #3
 801fbe0:	440b      	add	r3, r1
 801fbe2:	681b      	ldr	r3, [r3, #0]
 801fbe4:	2b00      	cmp	r3, #0
 801fbe6:	d01a      	beq.n	801fc1e <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801fbe8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fbec:	497a      	ldr	r1, [pc, #488]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fbee:	4613      	mov	r3, r2
 801fbf0:	005b      	lsls	r3, r3, #1
 801fbf2:	4413      	add	r3, r2
 801fbf4:	00db      	lsls	r3, r3, #3
 801fbf6:	440b      	add	r3, r1
 801fbf8:	3312      	adds	r3, #18
 801fbfa:	881b      	ldrh	r3, [r3, #0]
 801fbfc:	8bba      	ldrh	r2, [r7, #28]
 801fbfe:	429a      	cmp	r2, r3
 801fc00:	d845      	bhi.n	801fc8e <etharp_find_entry+0x18a>
            old_queue = i;
 801fc02:	8c3b      	ldrh	r3, [r7, #32]
 801fc04:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801fc06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc0a:	4973      	ldr	r1, [pc, #460]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fc0c:	4613      	mov	r3, r2
 801fc0e:	005b      	lsls	r3, r3, #1
 801fc10:	4413      	add	r3, r2
 801fc12:	00db      	lsls	r3, r3, #3
 801fc14:	440b      	add	r3, r1
 801fc16:	3312      	adds	r3, #18
 801fc18:	881b      	ldrh	r3, [r3, #0]
 801fc1a:	83bb      	strh	r3, [r7, #28]
 801fc1c:	e037      	b.n	801fc8e <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801fc1e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc22:	496d      	ldr	r1, [pc, #436]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fc24:	4613      	mov	r3, r2
 801fc26:	005b      	lsls	r3, r3, #1
 801fc28:	4413      	add	r3, r2
 801fc2a:	00db      	lsls	r3, r3, #3
 801fc2c:	440b      	add	r3, r1
 801fc2e:	3312      	adds	r3, #18
 801fc30:	881b      	ldrh	r3, [r3, #0]
 801fc32:	8b7a      	ldrh	r2, [r7, #26]
 801fc34:	429a      	cmp	r2, r3
 801fc36:	d82a      	bhi.n	801fc8e <etharp_find_entry+0x18a>
            old_pending = i;
 801fc38:	8c3b      	ldrh	r3, [r7, #32]
 801fc3a:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801fc3c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc40:	4965      	ldr	r1, [pc, #404]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fc42:	4613      	mov	r3, r2
 801fc44:	005b      	lsls	r3, r3, #1
 801fc46:	4413      	add	r3, r2
 801fc48:	00db      	lsls	r3, r3, #3
 801fc4a:	440b      	add	r3, r1
 801fc4c:	3312      	adds	r3, #18
 801fc4e:	881b      	ldrh	r3, [r3, #0]
 801fc50:	837b      	strh	r3, [r7, #26]
 801fc52:	e01c      	b.n	801fc8e <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801fc54:	7dfb      	ldrb	r3, [r7, #23]
 801fc56:	2b01      	cmp	r3, #1
 801fc58:	d919      	bls.n	801fc8e <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801fc5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc5e:	495e      	ldr	r1, [pc, #376]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fc60:	4613      	mov	r3, r2
 801fc62:	005b      	lsls	r3, r3, #1
 801fc64:	4413      	add	r3, r2
 801fc66:	00db      	lsls	r3, r3, #3
 801fc68:	440b      	add	r3, r1
 801fc6a:	3312      	adds	r3, #18
 801fc6c:	881b      	ldrh	r3, [r3, #0]
 801fc6e:	8b3a      	ldrh	r2, [r7, #24]
 801fc70:	429a      	cmp	r2, r3
 801fc72:	d80c      	bhi.n	801fc8e <etharp_find_entry+0x18a>
            old_stable = i;
 801fc74:	8c3b      	ldrh	r3, [r7, #32]
 801fc76:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801fc78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fc7c:	4956      	ldr	r1, [pc, #344]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fc7e:	4613      	mov	r3, r2
 801fc80:	005b      	lsls	r3, r3, #1
 801fc82:	4413      	add	r3, r2
 801fc84:	00db      	lsls	r3, r3, #3
 801fc86:	440b      	add	r3, r1
 801fc88:	3312      	adds	r3, #18
 801fc8a:	881b      	ldrh	r3, [r3, #0]
 801fc8c:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801fc8e:	8c3b      	ldrh	r3, [r7, #32]
 801fc90:	3301      	adds	r3, #1
 801fc92:	b29b      	uxth	r3, r3
 801fc94:	843b      	strh	r3, [r7, #32]
 801fc96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fc9a:	2b31      	cmp	r3, #49	; 0x31
 801fc9c:	f77f af4c 	ble.w	801fb38 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801fca0:	7afb      	ldrb	r3, [r7, #11]
 801fca2:	f003 0302 	and.w	r3, r3, #2
 801fca6:	2b00      	cmp	r3, #0
 801fca8:	d108      	bne.n	801fcbc <etharp_find_entry+0x1b8>
 801fcaa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fcae:	2b32      	cmp	r3, #50	; 0x32
 801fcb0:	d107      	bne.n	801fcc2 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801fcb2:	7afb      	ldrb	r3, [r7, #11]
 801fcb4:	f003 0301 	and.w	r3, r3, #1
 801fcb8:	2b00      	cmp	r3, #0
 801fcba:	d102      	bne.n	801fcc2 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801fcbc:	f04f 33ff 	mov.w	r3, #4294967295
 801fcc0:	e085      	b.n	801fdce <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801fcc2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801fcc6:	2b31      	cmp	r3, #49	; 0x31
 801fcc8:	dc02      	bgt.n	801fcd0 <etharp_find_entry+0x1cc>
    i = empty;
 801fcca:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801fccc:	843b      	strh	r3, [r7, #32]
 801fcce:	e039      	b.n	801fd44 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801fcd0:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801fcd4:	2b31      	cmp	r3, #49	; 0x31
 801fcd6:	dc14      	bgt.n	801fd02 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801fcd8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801fcda:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801fcdc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fce0:	493d      	ldr	r1, [pc, #244]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fce2:	4613      	mov	r3, r2
 801fce4:	005b      	lsls	r3, r3, #1
 801fce6:	4413      	add	r3, r2
 801fce8:	00db      	lsls	r3, r3, #3
 801fcea:	440b      	add	r3, r1
 801fcec:	681b      	ldr	r3, [r3, #0]
 801fcee:	2b00      	cmp	r3, #0
 801fcf0:	d018      	beq.n	801fd24 <etharp_find_entry+0x220>
 801fcf2:	4b3a      	ldr	r3, [pc, #232]	; (801fddc <etharp_find_entry+0x2d8>)
 801fcf4:	f240 126d 	movw	r2, #365	; 0x16d
 801fcf8:	493b      	ldr	r1, [pc, #236]	; (801fde8 <etharp_find_entry+0x2e4>)
 801fcfa:	483a      	ldr	r0, [pc, #232]	; (801fde4 <etharp_find_entry+0x2e0>)
 801fcfc:	f002 fad6 	bl	80222ac <iprintf>
 801fd00:	e010      	b.n	801fd24 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801fd02:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801fd06:	2b31      	cmp	r3, #49	; 0x31
 801fd08:	dc02      	bgt.n	801fd10 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801fd0a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801fd0c:	843b      	strh	r3, [r7, #32]
 801fd0e:	e009      	b.n	801fd24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801fd10:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801fd14:	2b31      	cmp	r3, #49	; 0x31
 801fd16:	dc02      	bgt.n	801fd1e <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801fd18:	8bfb      	ldrh	r3, [r7, #30]
 801fd1a:	843b      	strh	r3, [r7, #32]
 801fd1c:	e002      	b.n	801fd24 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801fd1e:	f04f 33ff 	mov.w	r3, #4294967295
 801fd22:	e054      	b.n	801fdce <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801fd24:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fd28:	2b31      	cmp	r3, #49	; 0x31
 801fd2a:	dd06      	ble.n	801fd3a <etharp_find_entry+0x236>
 801fd2c:	4b2b      	ldr	r3, [pc, #172]	; (801fddc <etharp_find_entry+0x2d8>)
 801fd2e:	f240 127f 	movw	r2, #383	; 0x17f
 801fd32:	492e      	ldr	r1, [pc, #184]	; (801fdec <etharp_find_entry+0x2e8>)
 801fd34:	482b      	ldr	r0, [pc, #172]	; (801fde4 <etharp_find_entry+0x2e0>)
 801fd36:	f002 fab9 	bl	80222ac <iprintf>
    etharp_free_entry(i);
 801fd3a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fd3e:	4618      	mov	r0, r3
 801fd40:	f7ff fe06 	bl	801f950 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801fd44:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801fd48:	2b31      	cmp	r3, #49	; 0x31
 801fd4a:	dd06      	ble.n	801fd5a <etharp_find_entry+0x256>
 801fd4c:	4b23      	ldr	r3, [pc, #140]	; (801fddc <etharp_find_entry+0x2d8>)
 801fd4e:	f240 1283 	movw	r2, #387	; 0x183
 801fd52:	4926      	ldr	r1, [pc, #152]	; (801fdec <etharp_find_entry+0x2e8>)
 801fd54:	4823      	ldr	r0, [pc, #140]	; (801fde4 <etharp_find_entry+0x2e0>)
 801fd56:	f002 faa9 	bl	80222ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801fd5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fd5e:	491e      	ldr	r1, [pc, #120]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fd60:	4613      	mov	r3, r2
 801fd62:	005b      	lsls	r3, r3, #1
 801fd64:	4413      	add	r3, r2
 801fd66:	00db      	lsls	r3, r3, #3
 801fd68:	440b      	add	r3, r1
 801fd6a:	3314      	adds	r3, #20
 801fd6c:	781b      	ldrb	r3, [r3, #0]
 801fd6e:	2b00      	cmp	r3, #0
 801fd70:	d006      	beq.n	801fd80 <etharp_find_entry+0x27c>
 801fd72:	4b1a      	ldr	r3, [pc, #104]	; (801fddc <etharp_find_entry+0x2d8>)
 801fd74:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801fd78:	491d      	ldr	r1, [pc, #116]	; (801fdf0 <etharp_find_entry+0x2ec>)
 801fd7a:	481a      	ldr	r0, [pc, #104]	; (801fde4 <etharp_find_entry+0x2e0>)
 801fd7c:	f002 fa96 	bl	80222ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801fd80:	68fb      	ldr	r3, [r7, #12]
 801fd82:	2b00      	cmp	r3, #0
 801fd84:	d00b      	beq.n	801fd9e <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801fd86:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fd8a:	68fb      	ldr	r3, [r7, #12]
 801fd8c:	6819      	ldr	r1, [r3, #0]
 801fd8e:	4812      	ldr	r0, [pc, #72]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fd90:	4613      	mov	r3, r2
 801fd92:	005b      	lsls	r3, r3, #1
 801fd94:	4413      	add	r3, r2
 801fd96:	00db      	lsls	r3, r3, #3
 801fd98:	4403      	add	r3, r0
 801fd9a:	3304      	adds	r3, #4
 801fd9c:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801fd9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fda2:	490d      	ldr	r1, [pc, #52]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fda4:	4613      	mov	r3, r2
 801fda6:	005b      	lsls	r3, r3, #1
 801fda8:	4413      	add	r3, r2
 801fdaa:	00db      	lsls	r3, r3, #3
 801fdac:	440b      	add	r3, r1
 801fdae:	3312      	adds	r3, #18
 801fdb0:	2200      	movs	r2, #0
 801fdb2:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801fdb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801fdb8:	4907      	ldr	r1, [pc, #28]	; (801fdd8 <etharp_find_entry+0x2d4>)
 801fdba:	4613      	mov	r3, r2
 801fdbc:	005b      	lsls	r3, r3, #1
 801fdbe:	4413      	add	r3, r2
 801fdc0:	00db      	lsls	r3, r3, #3
 801fdc2:	440b      	add	r3, r1
 801fdc4:	3308      	adds	r3, #8
 801fdc6:	687a      	ldr	r2, [r7, #4]
 801fdc8:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801fdca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801fdce:	4618      	mov	r0, r3
 801fdd0:	3728      	adds	r7, #40	; 0x28
 801fdd2:	46bd      	mov	sp, r7
 801fdd4:	bd80      	pop	{r7, pc}
 801fdd6:	bf00      	nop
 801fdd8:	20013dc4 	.word	0x20013dc4
 801fddc:	08027f64 	.word	0x08027f64
 801fde0:	08027fcc 	.word	0x08027fcc
 801fde4:	0802800c 	.word	0x0802800c
 801fde8:	08028034 	.word	0x08028034
 801fdec:	0802804c 	.word	0x0802804c
 801fdf0:	08028060 	.word	0x08028060

0801fdf4 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801fdf4:	b580      	push	{r7, lr}
 801fdf6:	b088      	sub	sp, #32
 801fdf8:	af02      	add	r7, sp, #8
 801fdfa:	60f8      	str	r0, [r7, #12]
 801fdfc:	60b9      	str	r1, [r7, #8]
 801fdfe:	607a      	str	r2, [r7, #4]
 801fe00:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801fe02:	68fb      	ldr	r3, [r7, #12]
 801fe04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fe08:	2b06      	cmp	r3, #6
 801fe0a:	d006      	beq.n	801fe1a <etharp_update_arp_entry+0x26>
 801fe0c:	4b48      	ldr	r3, [pc, #288]	; (801ff30 <etharp_update_arp_entry+0x13c>)
 801fe0e:	f240 12a9 	movw	r2, #425	; 0x1a9
 801fe12:	4948      	ldr	r1, [pc, #288]	; (801ff34 <etharp_update_arp_entry+0x140>)
 801fe14:	4848      	ldr	r0, [pc, #288]	; (801ff38 <etharp_update_arp_entry+0x144>)
 801fe16:	f002 fa49 	bl	80222ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801fe1a:	68bb      	ldr	r3, [r7, #8]
 801fe1c:	2b00      	cmp	r3, #0
 801fe1e:	d012      	beq.n	801fe46 <etharp_update_arp_entry+0x52>
 801fe20:	68bb      	ldr	r3, [r7, #8]
 801fe22:	681b      	ldr	r3, [r3, #0]
 801fe24:	2b00      	cmp	r3, #0
 801fe26:	d00e      	beq.n	801fe46 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801fe28:	68bb      	ldr	r3, [r7, #8]
 801fe2a:	681b      	ldr	r3, [r3, #0]
 801fe2c:	68f9      	ldr	r1, [r7, #12]
 801fe2e:	4618      	mov	r0, r3
 801fe30:	f001 f902 	bl	8021038 <ip4_addr_isbroadcast_u32>
 801fe34:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801fe36:	2b00      	cmp	r3, #0
 801fe38:	d105      	bne.n	801fe46 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801fe3a:	68bb      	ldr	r3, [r7, #8]
 801fe3c:	681b      	ldr	r3, [r3, #0]
 801fe3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801fe42:	2be0      	cmp	r3, #224	; 0xe0
 801fe44:	d102      	bne.n	801fe4c <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801fe46:	f06f 030f 	mvn.w	r3, #15
 801fe4a:	e06c      	b.n	801ff26 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801fe4c:	78fb      	ldrb	r3, [r7, #3]
 801fe4e:	68fa      	ldr	r2, [r7, #12]
 801fe50:	4619      	mov	r1, r3
 801fe52:	68b8      	ldr	r0, [r7, #8]
 801fe54:	f7ff fe56 	bl	801fb04 <etharp_find_entry>
 801fe58:	4603      	mov	r3, r0
 801fe5a:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801fe5c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801fe60:	2b00      	cmp	r3, #0
 801fe62:	da02      	bge.n	801fe6a <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801fe64:	8afb      	ldrh	r3, [r7, #22]
 801fe66:	b25b      	sxtb	r3, r3
 801fe68:	e05d      	b.n	801ff26 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801fe6a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe6e:	4933      	ldr	r1, [pc, #204]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801fe70:	4613      	mov	r3, r2
 801fe72:	005b      	lsls	r3, r3, #1
 801fe74:	4413      	add	r3, r2
 801fe76:	00db      	lsls	r3, r3, #3
 801fe78:	440b      	add	r3, r1
 801fe7a:	3314      	adds	r3, #20
 801fe7c:	2202      	movs	r2, #2
 801fe7e:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801fe80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe84:	492d      	ldr	r1, [pc, #180]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801fe86:	4613      	mov	r3, r2
 801fe88:	005b      	lsls	r3, r3, #1
 801fe8a:	4413      	add	r3, r2
 801fe8c:	00db      	lsls	r3, r3, #3
 801fe8e:	440b      	add	r3, r1
 801fe90:	3308      	adds	r3, #8
 801fe92:	68fa      	ldr	r2, [r7, #12]
 801fe94:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801fe96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fe9a:	4613      	mov	r3, r2
 801fe9c:	005b      	lsls	r3, r3, #1
 801fe9e:	4413      	add	r3, r2
 801fea0:	00db      	lsls	r3, r3, #3
 801fea2:	3308      	adds	r3, #8
 801fea4:	4a25      	ldr	r2, [pc, #148]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801fea6:	4413      	add	r3, r2
 801fea8:	3304      	adds	r3, #4
 801feaa:	2206      	movs	r2, #6
 801feac:	6879      	ldr	r1, [r7, #4]
 801feae:	4618      	mov	r0, r3
 801feb0:	f002 f8ec 	bl	802208c <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801feb4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801feb8:	4920      	ldr	r1, [pc, #128]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801feba:	4613      	mov	r3, r2
 801febc:	005b      	lsls	r3, r3, #1
 801febe:	4413      	add	r3, r2
 801fec0:	00db      	lsls	r3, r3, #3
 801fec2:	440b      	add	r3, r1
 801fec4:	3312      	adds	r3, #18
 801fec6:	2200      	movs	r2, #0
 801fec8:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801feca:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fece:	491b      	ldr	r1, [pc, #108]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801fed0:	4613      	mov	r3, r2
 801fed2:	005b      	lsls	r3, r3, #1
 801fed4:	4413      	add	r3, r2
 801fed6:	00db      	lsls	r3, r3, #3
 801fed8:	440b      	add	r3, r1
 801feda:	681b      	ldr	r3, [r3, #0]
 801fedc:	2b00      	cmp	r3, #0
 801fede:	d021      	beq.n	801ff24 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801fee0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fee4:	4915      	ldr	r1, [pc, #84]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801fee6:	4613      	mov	r3, r2
 801fee8:	005b      	lsls	r3, r3, #1
 801feea:	4413      	add	r3, r2
 801feec:	00db      	lsls	r3, r3, #3
 801feee:	440b      	add	r3, r1
 801fef0:	681b      	ldr	r3, [r3, #0]
 801fef2:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801fef4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801fef8:	4910      	ldr	r1, [pc, #64]	; (801ff3c <etharp_update_arp_entry+0x148>)
 801fefa:	4613      	mov	r3, r2
 801fefc:	005b      	lsls	r3, r3, #1
 801fefe:	4413      	add	r3, r2
 801ff00:	00db      	lsls	r3, r3, #3
 801ff02:	440b      	add	r3, r1
 801ff04:	2200      	movs	r2, #0
 801ff06:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801ff08:	68fb      	ldr	r3, [r7, #12]
 801ff0a:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 801ff0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ff12:	9300      	str	r3, [sp, #0]
 801ff14:	687b      	ldr	r3, [r7, #4]
 801ff16:	6939      	ldr	r1, [r7, #16]
 801ff18:	68f8      	ldr	r0, [r7, #12]
 801ff1a:	f002 f82b 	bl	8021f74 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801ff1e:	6938      	ldr	r0, [r7, #16]
 801ff20:	f7fe fc8c 	bl	801e83c <pbuf_free>
  }
  return ERR_OK;
 801ff24:	2300      	movs	r3, #0
}
 801ff26:	4618      	mov	r0, r3
 801ff28:	3718      	adds	r7, #24
 801ff2a:	46bd      	mov	sp, r7
 801ff2c:	bd80      	pop	{r7, pc}
 801ff2e:	bf00      	nop
 801ff30:	08027f64 	.word	0x08027f64
 801ff34:	0802808c 	.word	0x0802808c
 801ff38:	0802800c 	.word	0x0802800c
 801ff3c:	20013dc4 	.word	0x20013dc4

0801ff40 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801ff40:	b580      	push	{r7, lr}
 801ff42:	b084      	sub	sp, #16
 801ff44:	af00      	add	r7, sp, #0
 801ff46:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff48:	2300      	movs	r3, #0
 801ff4a:	60fb      	str	r3, [r7, #12]
 801ff4c:	e01e      	b.n	801ff8c <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801ff4e:	4913      	ldr	r1, [pc, #76]	; (801ff9c <etharp_cleanup_netif+0x5c>)
 801ff50:	68fa      	ldr	r2, [r7, #12]
 801ff52:	4613      	mov	r3, r2
 801ff54:	005b      	lsls	r3, r3, #1
 801ff56:	4413      	add	r3, r2
 801ff58:	00db      	lsls	r3, r3, #3
 801ff5a:	440b      	add	r3, r1
 801ff5c:	3314      	adds	r3, #20
 801ff5e:	781b      	ldrb	r3, [r3, #0]
 801ff60:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801ff62:	7afb      	ldrb	r3, [r7, #11]
 801ff64:	2b00      	cmp	r3, #0
 801ff66:	d00e      	beq.n	801ff86 <etharp_cleanup_netif+0x46>
 801ff68:	490c      	ldr	r1, [pc, #48]	; (801ff9c <etharp_cleanup_netif+0x5c>)
 801ff6a:	68fa      	ldr	r2, [r7, #12]
 801ff6c:	4613      	mov	r3, r2
 801ff6e:	005b      	lsls	r3, r3, #1
 801ff70:	4413      	add	r3, r2
 801ff72:	00db      	lsls	r3, r3, #3
 801ff74:	440b      	add	r3, r1
 801ff76:	3308      	adds	r3, #8
 801ff78:	681b      	ldr	r3, [r3, #0]
 801ff7a:	687a      	ldr	r2, [r7, #4]
 801ff7c:	429a      	cmp	r2, r3
 801ff7e:	d102      	bne.n	801ff86 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801ff80:	68f8      	ldr	r0, [r7, #12]
 801ff82:	f7ff fce5 	bl	801f950 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801ff86:	68fb      	ldr	r3, [r7, #12]
 801ff88:	3301      	adds	r3, #1
 801ff8a:	60fb      	str	r3, [r7, #12]
 801ff8c:	68fb      	ldr	r3, [r7, #12]
 801ff8e:	2b31      	cmp	r3, #49	; 0x31
 801ff90:	dddd      	ble.n	801ff4e <etharp_cleanup_netif+0xe>
    }
  }
}
 801ff92:	bf00      	nop
 801ff94:	bf00      	nop
 801ff96:	3710      	adds	r7, #16
 801ff98:	46bd      	mov	sp, r7
 801ff9a:	bd80      	pop	{r7, pc}
 801ff9c:	20013dc4 	.word	0x20013dc4

0801ffa0 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801ffa0:	b5b0      	push	{r4, r5, r7, lr}
 801ffa2:	b08a      	sub	sp, #40	; 0x28
 801ffa4:	af04      	add	r7, sp, #16
 801ffa6:	6078      	str	r0, [r7, #4]
 801ffa8:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801ffaa:	683b      	ldr	r3, [r7, #0]
 801ffac:	2b00      	cmp	r3, #0
 801ffae:	d107      	bne.n	801ffc0 <etharp_input+0x20>
 801ffb0:	4b3d      	ldr	r3, [pc, #244]	; (80200a8 <etharp_input+0x108>)
 801ffb2:	f240 228a 	movw	r2, #650	; 0x28a
 801ffb6:	493d      	ldr	r1, [pc, #244]	; (80200ac <etharp_input+0x10c>)
 801ffb8:	483d      	ldr	r0, [pc, #244]	; (80200b0 <etharp_input+0x110>)
 801ffba:	f002 f977 	bl	80222ac <iprintf>
 801ffbe:	e06f      	b.n	80200a0 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801ffc0:	687b      	ldr	r3, [r7, #4]
 801ffc2:	685b      	ldr	r3, [r3, #4]
 801ffc4:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ffc6:	693b      	ldr	r3, [r7, #16]
 801ffc8:	881b      	ldrh	r3, [r3, #0]
 801ffca:	b29b      	uxth	r3, r3
 801ffcc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801ffd0:	d10c      	bne.n	801ffec <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ffd2:	693b      	ldr	r3, [r7, #16]
 801ffd4:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801ffd6:	2b06      	cmp	r3, #6
 801ffd8:	d108      	bne.n	801ffec <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ffda:	693b      	ldr	r3, [r7, #16]
 801ffdc:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801ffde:	2b04      	cmp	r3, #4
 801ffe0:	d104      	bne.n	801ffec <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801ffe2:	693b      	ldr	r3, [r7, #16]
 801ffe4:	885b      	ldrh	r3, [r3, #2]
 801ffe6:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801ffe8:	2b08      	cmp	r3, #8
 801ffea:	d003      	beq.n	801fff4 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801ffec:	6878      	ldr	r0, [r7, #4]
 801ffee:	f7fe fc25 	bl	801e83c <pbuf_free>
    return;
 801fff2:	e055      	b.n	80200a0 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801fff4:	693b      	ldr	r3, [r7, #16]
 801fff6:	330e      	adds	r3, #14
 801fff8:	681b      	ldr	r3, [r3, #0]
 801fffa:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801fffc:	693b      	ldr	r3, [r7, #16]
 801fffe:	3318      	adds	r3, #24
 8020000:	681b      	ldr	r3, [r3, #0]
 8020002:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020004:	683b      	ldr	r3, [r7, #0]
 8020006:	3304      	adds	r3, #4
 8020008:	681b      	ldr	r3, [r3, #0]
 802000a:	2b00      	cmp	r3, #0
 802000c:	d102      	bne.n	8020014 <etharp_input+0x74>
    for_us = 0;
 802000e:	2300      	movs	r3, #0
 8020010:	75fb      	strb	r3, [r7, #23]
 8020012:	e009      	b.n	8020028 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020014:	68ba      	ldr	r2, [r7, #8]
 8020016:	683b      	ldr	r3, [r7, #0]
 8020018:	3304      	adds	r3, #4
 802001a:	681b      	ldr	r3, [r3, #0]
 802001c:	429a      	cmp	r2, r3
 802001e:	bf0c      	ite	eq
 8020020:	2301      	moveq	r3, #1
 8020022:	2300      	movne	r3, #0
 8020024:	b2db      	uxtb	r3, r3
 8020026:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020028:	693b      	ldr	r3, [r7, #16]
 802002a:	f103 0208 	add.w	r2, r3, #8
 802002e:	7dfb      	ldrb	r3, [r7, #23]
 8020030:	2b00      	cmp	r3, #0
 8020032:	d001      	beq.n	8020038 <etharp_input+0x98>
 8020034:	2301      	movs	r3, #1
 8020036:	e000      	b.n	802003a <etharp_input+0x9a>
 8020038:	2302      	movs	r3, #2
 802003a:	f107 010c 	add.w	r1, r7, #12
 802003e:	6838      	ldr	r0, [r7, #0]
 8020040:	f7ff fed8 	bl	801fdf4 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020044:	693b      	ldr	r3, [r7, #16]
 8020046:	88db      	ldrh	r3, [r3, #6]
 8020048:	b29b      	uxth	r3, r3
 802004a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 802004e:	d003      	beq.n	8020058 <etharp_input+0xb8>
 8020050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020054:	d01e      	beq.n	8020094 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8020056:	e020      	b.n	802009a <etharp_input+0xfa>
      if (for_us) {
 8020058:	7dfb      	ldrb	r3, [r7, #23]
 802005a:	2b00      	cmp	r3, #0
 802005c:	d01c      	beq.n	8020098 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 802005e:	683b      	ldr	r3, [r7, #0]
 8020060:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020064:	693b      	ldr	r3, [r7, #16]
 8020066:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 802006a:	683b      	ldr	r3, [r7, #0]
 802006c:	f103 052a 	add.w	r5, r3, #42	; 0x2a
 8020070:	683b      	ldr	r3, [r7, #0]
 8020072:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020074:	693a      	ldr	r2, [r7, #16]
 8020076:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020078:	2102      	movs	r1, #2
 802007a:	9103      	str	r1, [sp, #12]
 802007c:	f107 010c 	add.w	r1, r7, #12
 8020080:	9102      	str	r1, [sp, #8]
 8020082:	9201      	str	r2, [sp, #4]
 8020084:	9300      	str	r3, [sp, #0]
 8020086:	462b      	mov	r3, r5
 8020088:	4622      	mov	r2, r4
 802008a:	4601      	mov	r1, r0
 802008c:	6838      	ldr	r0, [r7, #0]
 802008e:	f000 faeb 	bl	8020668 <etharp_raw>
      break;
 8020092:	e001      	b.n	8020098 <etharp_input+0xf8>
      break;
 8020094:	bf00      	nop
 8020096:	e000      	b.n	802009a <etharp_input+0xfa>
      break;
 8020098:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 802009a:	6878      	ldr	r0, [r7, #4]
 802009c:	f7fe fbce 	bl	801e83c <pbuf_free>
}
 80200a0:	3718      	adds	r7, #24
 80200a2:	46bd      	mov	sp, r7
 80200a4:	bdb0      	pop	{r4, r5, r7, pc}
 80200a6:	bf00      	nop
 80200a8:	08027f64 	.word	0x08027f64
 80200ac:	080280e4 	.word	0x080280e4
 80200b0:	0802800c 	.word	0x0802800c

080200b4 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80200b4:	b580      	push	{r7, lr}
 80200b6:	b086      	sub	sp, #24
 80200b8:	af02      	add	r7, sp, #8
 80200ba:	60f8      	str	r0, [r7, #12]
 80200bc:	60b9      	str	r1, [r7, #8]
 80200be:	4613      	mov	r3, r2
 80200c0:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80200c2:	79fa      	ldrb	r2, [r7, #7]
 80200c4:	4944      	ldr	r1, [pc, #272]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 80200c6:	4613      	mov	r3, r2
 80200c8:	005b      	lsls	r3, r3, #1
 80200ca:	4413      	add	r3, r2
 80200cc:	00db      	lsls	r3, r3, #3
 80200ce:	440b      	add	r3, r1
 80200d0:	3314      	adds	r3, #20
 80200d2:	781b      	ldrb	r3, [r3, #0]
 80200d4:	2b01      	cmp	r3, #1
 80200d6:	d806      	bhi.n	80200e6 <etharp_output_to_arp_index+0x32>
 80200d8:	4b40      	ldr	r3, [pc, #256]	; (80201dc <etharp_output_to_arp_index+0x128>)
 80200da:	f240 22ee 	movw	r2, #750	; 0x2ee
 80200de:	4940      	ldr	r1, [pc, #256]	; (80201e0 <etharp_output_to_arp_index+0x12c>)
 80200e0:	4840      	ldr	r0, [pc, #256]	; (80201e4 <etharp_output_to_arp_index+0x130>)
 80200e2:	f002 f8e3 	bl	80222ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80200e6:	79fa      	ldrb	r2, [r7, #7]
 80200e8:	493b      	ldr	r1, [pc, #236]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 80200ea:	4613      	mov	r3, r2
 80200ec:	005b      	lsls	r3, r3, #1
 80200ee:	4413      	add	r3, r2
 80200f0:	00db      	lsls	r3, r3, #3
 80200f2:	440b      	add	r3, r1
 80200f4:	3314      	adds	r3, #20
 80200f6:	781b      	ldrb	r3, [r3, #0]
 80200f8:	2b02      	cmp	r3, #2
 80200fa:	d153      	bne.n	80201a4 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80200fc:	79fa      	ldrb	r2, [r7, #7]
 80200fe:	4936      	ldr	r1, [pc, #216]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 8020100:	4613      	mov	r3, r2
 8020102:	005b      	lsls	r3, r3, #1
 8020104:	4413      	add	r3, r2
 8020106:	00db      	lsls	r3, r3, #3
 8020108:	440b      	add	r3, r1
 802010a:	3312      	adds	r3, #18
 802010c:	881b      	ldrh	r3, [r3, #0]
 802010e:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8020112:	d919      	bls.n	8020148 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020114:	79fa      	ldrb	r2, [r7, #7]
 8020116:	4613      	mov	r3, r2
 8020118:	005b      	lsls	r3, r3, #1
 802011a:	4413      	add	r3, r2
 802011c:	00db      	lsls	r3, r3, #3
 802011e:	4a2e      	ldr	r2, [pc, #184]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 8020120:	4413      	add	r3, r2
 8020122:	3304      	adds	r3, #4
 8020124:	4619      	mov	r1, r3
 8020126:	68f8      	ldr	r0, [r7, #12]
 8020128:	f000 fb4c 	bl	80207c4 <etharp_request>
 802012c:	4603      	mov	r3, r0
 802012e:	2b00      	cmp	r3, #0
 8020130:	d138      	bne.n	80201a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020132:	79fa      	ldrb	r2, [r7, #7]
 8020134:	4928      	ldr	r1, [pc, #160]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 8020136:	4613      	mov	r3, r2
 8020138:	005b      	lsls	r3, r3, #1
 802013a:	4413      	add	r3, r2
 802013c:	00db      	lsls	r3, r3, #3
 802013e:	440b      	add	r3, r1
 8020140:	3314      	adds	r3, #20
 8020142:	2203      	movs	r2, #3
 8020144:	701a      	strb	r2, [r3, #0]
 8020146:	e02d      	b.n	80201a4 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020148:	79fa      	ldrb	r2, [r7, #7]
 802014a:	4923      	ldr	r1, [pc, #140]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 802014c:	4613      	mov	r3, r2
 802014e:	005b      	lsls	r3, r3, #1
 8020150:	4413      	add	r3, r2
 8020152:	00db      	lsls	r3, r3, #3
 8020154:	440b      	add	r3, r1
 8020156:	3312      	adds	r3, #18
 8020158:	881b      	ldrh	r3, [r3, #0]
 802015a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 802015e:	d321      	bcc.n	80201a4 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020160:	79fa      	ldrb	r2, [r7, #7]
 8020162:	4613      	mov	r3, r2
 8020164:	005b      	lsls	r3, r3, #1
 8020166:	4413      	add	r3, r2
 8020168:	00db      	lsls	r3, r3, #3
 802016a:	4a1b      	ldr	r2, [pc, #108]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 802016c:	4413      	add	r3, r2
 802016e:	1d19      	adds	r1, r3, #4
 8020170:	79fa      	ldrb	r2, [r7, #7]
 8020172:	4613      	mov	r3, r2
 8020174:	005b      	lsls	r3, r3, #1
 8020176:	4413      	add	r3, r2
 8020178:	00db      	lsls	r3, r3, #3
 802017a:	3308      	adds	r3, #8
 802017c:	4a16      	ldr	r2, [pc, #88]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 802017e:	4413      	add	r3, r2
 8020180:	3304      	adds	r3, #4
 8020182:	461a      	mov	r2, r3
 8020184:	68f8      	ldr	r0, [r7, #12]
 8020186:	f000 fafb 	bl	8020780 <etharp_request_dst>
 802018a:	4603      	mov	r3, r0
 802018c:	2b00      	cmp	r3, #0
 802018e:	d109      	bne.n	80201a4 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020190:	79fa      	ldrb	r2, [r7, #7]
 8020192:	4911      	ldr	r1, [pc, #68]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 8020194:	4613      	mov	r3, r2
 8020196:	005b      	lsls	r3, r3, #1
 8020198:	4413      	add	r3, r2
 802019a:	00db      	lsls	r3, r3, #3
 802019c:	440b      	add	r3, r1
 802019e:	3314      	adds	r3, #20
 80201a0:	2203      	movs	r2, #3
 80201a2:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 80201a4:	68fb      	ldr	r3, [r7, #12]
 80201a6:	f103 012a 	add.w	r1, r3, #42	; 0x2a
 80201aa:	79fa      	ldrb	r2, [r7, #7]
 80201ac:	4613      	mov	r3, r2
 80201ae:	005b      	lsls	r3, r3, #1
 80201b0:	4413      	add	r3, r2
 80201b2:	00db      	lsls	r3, r3, #3
 80201b4:	3308      	adds	r3, #8
 80201b6:	4a08      	ldr	r2, [pc, #32]	; (80201d8 <etharp_output_to_arp_index+0x124>)
 80201b8:	4413      	add	r3, r2
 80201ba:	3304      	adds	r3, #4
 80201bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80201c0:	9200      	str	r2, [sp, #0]
 80201c2:	460a      	mov	r2, r1
 80201c4:	68b9      	ldr	r1, [r7, #8]
 80201c6:	68f8      	ldr	r0, [r7, #12]
 80201c8:	f001 fed4 	bl	8021f74 <ethernet_output>
 80201cc:	4603      	mov	r3, r0
}
 80201ce:	4618      	mov	r0, r3
 80201d0:	3710      	adds	r7, #16
 80201d2:	46bd      	mov	sp, r7
 80201d4:	bd80      	pop	{r7, pc}
 80201d6:	bf00      	nop
 80201d8:	20013dc4 	.word	0x20013dc4
 80201dc:	08027f64 	.word	0x08027f64
 80201e0:	08028104 	.word	0x08028104
 80201e4:	0802800c 	.word	0x0802800c

080201e8 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80201e8:	b580      	push	{r7, lr}
 80201ea:	b08a      	sub	sp, #40	; 0x28
 80201ec:	af02      	add	r7, sp, #8
 80201ee:	60f8      	str	r0, [r7, #12]
 80201f0:	60b9      	str	r1, [r7, #8]
 80201f2:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80201f4:	687b      	ldr	r3, [r7, #4]
 80201f6:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80201f8:	68fb      	ldr	r3, [r7, #12]
 80201fa:	2b00      	cmp	r3, #0
 80201fc:	d106      	bne.n	802020c <etharp_output+0x24>
 80201fe:	4b73      	ldr	r3, [pc, #460]	; (80203cc <etharp_output+0x1e4>)
 8020200:	f240 321e 	movw	r2, #798	; 0x31e
 8020204:	4972      	ldr	r1, [pc, #456]	; (80203d0 <etharp_output+0x1e8>)
 8020206:	4873      	ldr	r0, [pc, #460]	; (80203d4 <etharp_output+0x1ec>)
 8020208:	f002 f850 	bl	80222ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 802020c:	68bb      	ldr	r3, [r7, #8]
 802020e:	2b00      	cmp	r3, #0
 8020210:	d106      	bne.n	8020220 <etharp_output+0x38>
 8020212:	4b6e      	ldr	r3, [pc, #440]	; (80203cc <etharp_output+0x1e4>)
 8020214:	f240 321f 	movw	r2, #799	; 0x31f
 8020218:	496f      	ldr	r1, [pc, #444]	; (80203d8 <etharp_output+0x1f0>)
 802021a:	486e      	ldr	r0, [pc, #440]	; (80203d4 <etharp_output+0x1ec>)
 802021c:	f002 f846 	bl	80222ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020220:	687b      	ldr	r3, [r7, #4]
 8020222:	2b00      	cmp	r3, #0
 8020224:	d106      	bne.n	8020234 <etharp_output+0x4c>
 8020226:	4b69      	ldr	r3, [pc, #420]	; (80203cc <etharp_output+0x1e4>)
 8020228:	f44f 7248 	mov.w	r2, #800	; 0x320
 802022c:	496b      	ldr	r1, [pc, #428]	; (80203dc <etharp_output+0x1f4>)
 802022e:	4869      	ldr	r0, [pc, #420]	; (80203d4 <etharp_output+0x1ec>)
 8020230:	f002 f83c 	bl	80222ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020234:	687b      	ldr	r3, [r7, #4]
 8020236:	681b      	ldr	r3, [r3, #0]
 8020238:	68f9      	ldr	r1, [r7, #12]
 802023a:	4618      	mov	r0, r3
 802023c:	f000 fefc 	bl	8021038 <ip4_addr_isbroadcast_u32>
 8020240:	4603      	mov	r3, r0
 8020242:	2b00      	cmp	r3, #0
 8020244:	d002      	beq.n	802024c <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8020246:	4b66      	ldr	r3, [pc, #408]	; (80203e0 <etharp_output+0x1f8>)
 8020248:	61fb      	str	r3, [r7, #28]
 802024a:	e0af      	b.n	80203ac <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	681b      	ldr	r3, [r3, #0]
 8020250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020254:	2be0      	cmp	r3, #224	; 0xe0
 8020256:	d118      	bne.n	802028a <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020258:	2301      	movs	r3, #1
 802025a:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 802025c:	2300      	movs	r3, #0
 802025e:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020260:	235e      	movs	r3, #94	; 0x5e
 8020262:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	3301      	adds	r3, #1
 8020268:	781b      	ldrb	r3, [r3, #0]
 802026a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 802026e:	b2db      	uxtb	r3, r3
 8020270:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020272:	687b      	ldr	r3, [r7, #4]
 8020274:	3302      	adds	r3, #2
 8020276:	781b      	ldrb	r3, [r3, #0]
 8020278:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 802027a:	687b      	ldr	r3, [r7, #4]
 802027c:	3303      	adds	r3, #3
 802027e:	781b      	ldrb	r3, [r3, #0]
 8020280:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020282:	f107 0310 	add.w	r3, r7, #16
 8020286:	61fb      	str	r3, [r7, #28]
 8020288:	e090      	b.n	80203ac <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 802028a:	687b      	ldr	r3, [r7, #4]
 802028c:	681a      	ldr	r2, [r3, #0]
 802028e:	68fb      	ldr	r3, [r7, #12]
 8020290:	3304      	adds	r3, #4
 8020292:	681b      	ldr	r3, [r3, #0]
 8020294:	405a      	eors	r2, r3
 8020296:	68fb      	ldr	r3, [r7, #12]
 8020298:	3308      	adds	r3, #8
 802029a:	681b      	ldr	r3, [r3, #0]
 802029c:	4013      	ands	r3, r2
 802029e:	2b00      	cmp	r3, #0
 80202a0:	d012      	beq.n	80202c8 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80202a2:	687b      	ldr	r3, [r7, #4]
 80202a4:	681b      	ldr	r3, [r3, #0]
 80202a6:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80202a8:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80202ac:	4293      	cmp	r3, r2
 80202ae:	d00b      	beq.n	80202c8 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80202b0:	68fb      	ldr	r3, [r7, #12]
 80202b2:	330c      	adds	r3, #12
 80202b4:	681b      	ldr	r3, [r3, #0]
 80202b6:	2b00      	cmp	r3, #0
 80202b8:	d003      	beq.n	80202c2 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80202ba:	68fb      	ldr	r3, [r7, #12]
 80202bc:	330c      	adds	r3, #12
 80202be:	61bb      	str	r3, [r7, #24]
 80202c0:	e002      	b.n	80202c8 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 80202c2:	f06f 0303 	mvn.w	r3, #3
 80202c6:	e07d      	b.n	80203c4 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80202c8:	4b46      	ldr	r3, [pc, #280]	; (80203e4 <etharp_output+0x1fc>)
 80202ca:	781b      	ldrb	r3, [r3, #0]
 80202cc:	4619      	mov	r1, r3
 80202ce:	4a46      	ldr	r2, [pc, #280]	; (80203e8 <etharp_output+0x200>)
 80202d0:	460b      	mov	r3, r1
 80202d2:	005b      	lsls	r3, r3, #1
 80202d4:	440b      	add	r3, r1
 80202d6:	00db      	lsls	r3, r3, #3
 80202d8:	4413      	add	r3, r2
 80202da:	3314      	adds	r3, #20
 80202dc:	781b      	ldrb	r3, [r3, #0]
 80202de:	2b01      	cmp	r3, #1
 80202e0:	d925      	bls.n	802032e <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 80202e2:	4b40      	ldr	r3, [pc, #256]	; (80203e4 <etharp_output+0x1fc>)
 80202e4:	781b      	ldrb	r3, [r3, #0]
 80202e6:	4619      	mov	r1, r3
 80202e8:	4a3f      	ldr	r2, [pc, #252]	; (80203e8 <etharp_output+0x200>)
 80202ea:	460b      	mov	r3, r1
 80202ec:	005b      	lsls	r3, r3, #1
 80202ee:	440b      	add	r3, r1
 80202f0:	00db      	lsls	r3, r3, #3
 80202f2:	4413      	add	r3, r2
 80202f4:	3308      	adds	r3, #8
 80202f6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80202f8:	68fa      	ldr	r2, [r7, #12]
 80202fa:	429a      	cmp	r2, r3
 80202fc:	d117      	bne.n	802032e <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80202fe:	69bb      	ldr	r3, [r7, #24]
 8020300:	681a      	ldr	r2, [r3, #0]
 8020302:	4b38      	ldr	r3, [pc, #224]	; (80203e4 <etharp_output+0x1fc>)
 8020304:	781b      	ldrb	r3, [r3, #0]
 8020306:	4618      	mov	r0, r3
 8020308:	4937      	ldr	r1, [pc, #220]	; (80203e8 <etharp_output+0x200>)
 802030a:	4603      	mov	r3, r0
 802030c:	005b      	lsls	r3, r3, #1
 802030e:	4403      	add	r3, r0
 8020310:	00db      	lsls	r3, r3, #3
 8020312:	440b      	add	r3, r1
 8020314:	3304      	adds	r3, #4
 8020316:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020318:	429a      	cmp	r2, r3
 802031a:	d108      	bne.n	802032e <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 802031c:	4b31      	ldr	r3, [pc, #196]	; (80203e4 <etharp_output+0x1fc>)
 802031e:	781b      	ldrb	r3, [r3, #0]
 8020320:	461a      	mov	r2, r3
 8020322:	68b9      	ldr	r1, [r7, #8]
 8020324:	68f8      	ldr	r0, [r7, #12]
 8020326:	f7ff fec5 	bl	80200b4 <etharp_output_to_arp_index>
 802032a:	4603      	mov	r3, r0
 802032c:	e04a      	b.n	80203c4 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 802032e:	2300      	movs	r3, #0
 8020330:	75fb      	strb	r3, [r7, #23]
 8020332:	e031      	b.n	8020398 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020334:	7dfa      	ldrb	r2, [r7, #23]
 8020336:	492c      	ldr	r1, [pc, #176]	; (80203e8 <etharp_output+0x200>)
 8020338:	4613      	mov	r3, r2
 802033a:	005b      	lsls	r3, r3, #1
 802033c:	4413      	add	r3, r2
 802033e:	00db      	lsls	r3, r3, #3
 8020340:	440b      	add	r3, r1
 8020342:	3314      	adds	r3, #20
 8020344:	781b      	ldrb	r3, [r3, #0]
 8020346:	2b01      	cmp	r3, #1
 8020348:	d923      	bls.n	8020392 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 802034a:	7dfa      	ldrb	r2, [r7, #23]
 802034c:	4926      	ldr	r1, [pc, #152]	; (80203e8 <etharp_output+0x200>)
 802034e:	4613      	mov	r3, r2
 8020350:	005b      	lsls	r3, r3, #1
 8020352:	4413      	add	r3, r2
 8020354:	00db      	lsls	r3, r3, #3
 8020356:	440b      	add	r3, r1
 8020358:	3308      	adds	r3, #8
 802035a:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 802035c:	68fa      	ldr	r2, [r7, #12]
 802035e:	429a      	cmp	r2, r3
 8020360:	d117      	bne.n	8020392 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020362:	69bb      	ldr	r3, [r7, #24]
 8020364:	6819      	ldr	r1, [r3, #0]
 8020366:	7dfa      	ldrb	r2, [r7, #23]
 8020368:	481f      	ldr	r0, [pc, #124]	; (80203e8 <etharp_output+0x200>)
 802036a:	4613      	mov	r3, r2
 802036c:	005b      	lsls	r3, r3, #1
 802036e:	4413      	add	r3, r2
 8020370:	00db      	lsls	r3, r3, #3
 8020372:	4403      	add	r3, r0
 8020374:	3304      	adds	r3, #4
 8020376:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020378:	4299      	cmp	r1, r3
 802037a:	d10a      	bne.n	8020392 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 802037c:	4a19      	ldr	r2, [pc, #100]	; (80203e4 <etharp_output+0x1fc>)
 802037e:	7dfb      	ldrb	r3, [r7, #23]
 8020380:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020382:	7dfb      	ldrb	r3, [r7, #23]
 8020384:	461a      	mov	r2, r3
 8020386:	68b9      	ldr	r1, [r7, #8]
 8020388:	68f8      	ldr	r0, [r7, #12]
 802038a:	f7ff fe93 	bl	80200b4 <etharp_output_to_arp_index>
 802038e:	4603      	mov	r3, r0
 8020390:	e018      	b.n	80203c4 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020392:	7dfb      	ldrb	r3, [r7, #23]
 8020394:	3301      	adds	r3, #1
 8020396:	75fb      	strb	r3, [r7, #23]
 8020398:	7dfb      	ldrb	r3, [r7, #23]
 802039a:	2b31      	cmp	r3, #49	; 0x31
 802039c:	d9ca      	bls.n	8020334 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 802039e:	68ba      	ldr	r2, [r7, #8]
 80203a0:	69b9      	ldr	r1, [r7, #24]
 80203a2:	68f8      	ldr	r0, [r7, #12]
 80203a4:	f000 f822 	bl	80203ec <etharp_query>
 80203a8:	4603      	mov	r3, r0
 80203aa:	e00b      	b.n	80203c4 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80203ac:	68fb      	ldr	r3, [r7, #12]
 80203ae:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 80203b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80203b6:	9300      	str	r3, [sp, #0]
 80203b8:	69fb      	ldr	r3, [r7, #28]
 80203ba:	68b9      	ldr	r1, [r7, #8]
 80203bc:	68f8      	ldr	r0, [r7, #12]
 80203be:	f001 fdd9 	bl	8021f74 <ethernet_output>
 80203c2:	4603      	mov	r3, r0
}
 80203c4:	4618      	mov	r0, r3
 80203c6:	3720      	adds	r7, #32
 80203c8:	46bd      	mov	sp, r7
 80203ca:	bd80      	pop	{r7, pc}
 80203cc:	08027f64 	.word	0x08027f64
 80203d0:	080280e4 	.word	0x080280e4
 80203d4:	0802800c 	.word	0x0802800c
 80203d8:	08028134 	.word	0x08028134
 80203dc:	080280d4 	.word	0x080280d4
 80203e0:	08028bc8 	.word	0x08028bc8
 80203e4:	20014274 	.word	0x20014274
 80203e8:	20013dc4 	.word	0x20013dc4

080203ec <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 80203ec:	b580      	push	{r7, lr}
 80203ee:	b08c      	sub	sp, #48	; 0x30
 80203f0:	af02      	add	r7, sp, #8
 80203f2:	60f8      	str	r0, [r7, #12]
 80203f4:	60b9      	str	r1, [r7, #8]
 80203f6:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80203f8:	68fb      	ldr	r3, [r7, #12]
 80203fa:	332a      	adds	r3, #42	; 0x2a
 80203fc:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80203fe:	23ff      	movs	r3, #255	; 0xff
 8020400:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020404:	2300      	movs	r3, #0
 8020406:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020408:	68bb      	ldr	r3, [r7, #8]
 802040a:	681b      	ldr	r3, [r3, #0]
 802040c:	68f9      	ldr	r1, [r7, #12]
 802040e:	4618      	mov	r0, r3
 8020410:	f000 fe12 	bl	8021038 <ip4_addr_isbroadcast_u32>
 8020414:	4603      	mov	r3, r0
 8020416:	2b00      	cmp	r3, #0
 8020418:	d10c      	bne.n	8020434 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 802041a:	68bb      	ldr	r3, [r7, #8]
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020422:	2be0      	cmp	r3, #224	; 0xe0
 8020424:	d006      	beq.n	8020434 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020426:	68bb      	ldr	r3, [r7, #8]
 8020428:	2b00      	cmp	r3, #0
 802042a:	d003      	beq.n	8020434 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 802042c:	68bb      	ldr	r3, [r7, #8]
 802042e:	681b      	ldr	r3, [r3, #0]
 8020430:	2b00      	cmp	r3, #0
 8020432:	d102      	bne.n	802043a <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020434:	f06f 030f 	mvn.w	r3, #15
 8020438:	e101      	b.n	802063e <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 802043a:	68fa      	ldr	r2, [r7, #12]
 802043c:	2101      	movs	r1, #1
 802043e:	68b8      	ldr	r0, [r7, #8]
 8020440:	f7ff fb60 	bl	801fb04 <etharp_find_entry>
 8020444:	4603      	mov	r3, r0
 8020446:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020448:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 802044c:	2b00      	cmp	r3, #0
 802044e:	da02      	bge.n	8020456 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020450:	8a7b      	ldrh	r3, [r7, #18]
 8020452:	b25b      	sxtb	r3, r3
 8020454:	e0f3      	b.n	802063e <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020456:	8a7b      	ldrh	r3, [r7, #18]
 8020458:	2b7e      	cmp	r3, #126	; 0x7e
 802045a:	d906      	bls.n	802046a <etharp_query+0x7e>
 802045c:	4b7a      	ldr	r3, [pc, #488]	; (8020648 <etharp_query+0x25c>)
 802045e:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020462:	497a      	ldr	r1, [pc, #488]	; (802064c <etharp_query+0x260>)
 8020464:	487a      	ldr	r0, [pc, #488]	; (8020650 <etharp_query+0x264>)
 8020466:	f001 ff21 	bl	80222ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 802046a:	8a7b      	ldrh	r3, [r7, #18]
 802046c:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 802046e:	7c7a      	ldrb	r2, [r7, #17]
 8020470:	4978      	ldr	r1, [pc, #480]	; (8020654 <etharp_query+0x268>)
 8020472:	4613      	mov	r3, r2
 8020474:	005b      	lsls	r3, r3, #1
 8020476:	4413      	add	r3, r2
 8020478:	00db      	lsls	r3, r3, #3
 802047a:	440b      	add	r3, r1
 802047c:	3314      	adds	r3, #20
 802047e:	781b      	ldrb	r3, [r3, #0]
 8020480:	2b00      	cmp	r3, #0
 8020482:	d115      	bne.n	80204b0 <etharp_query+0xc4>
    is_new_entry = 1;
 8020484:	2301      	movs	r3, #1
 8020486:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020488:	7c7a      	ldrb	r2, [r7, #17]
 802048a:	4972      	ldr	r1, [pc, #456]	; (8020654 <etharp_query+0x268>)
 802048c:	4613      	mov	r3, r2
 802048e:	005b      	lsls	r3, r3, #1
 8020490:	4413      	add	r3, r2
 8020492:	00db      	lsls	r3, r3, #3
 8020494:	440b      	add	r3, r1
 8020496:	3314      	adds	r3, #20
 8020498:	2201      	movs	r2, #1
 802049a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 802049c:	7c7a      	ldrb	r2, [r7, #17]
 802049e:	496d      	ldr	r1, [pc, #436]	; (8020654 <etharp_query+0x268>)
 80204a0:	4613      	mov	r3, r2
 80204a2:	005b      	lsls	r3, r3, #1
 80204a4:	4413      	add	r3, r2
 80204a6:	00db      	lsls	r3, r3, #3
 80204a8:	440b      	add	r3, r1
 80204aa:	3308      	adds	r3, #8
 80204ac:	68fa      	ldr	r2, [r7, #12]
 80204ae:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80204b0:	7c7a      	ldrb	r2, [r7, #17]
 80204b2:	4968      	ldr	r1, [pc, #416]	; (8020654 <etharp_query+0x268>)
 80204b4:	4613      	mov	r3, r2
 80204b6:	005b      	lsls	r3, r3, #1
 80204b8:	4413      	add	r3, r2
 80204ba:	00db      	lsls	r3, r3, #3
 80204bc:	440b      	add	r3, r1
 80204be:	3314      	adds	r3, #20
 80204c0:	781b      	ldrb	r3, [r3, #0]
 80204c2:	2b01      	cmp	r3, #1
 80204c4:	d011      	beq.n	80204ea <etharp_query+0xfe>
 80204c6:	7c7a      	ldrb	r2, [r7, #17]
 80204c8:	4962      	ldr	r1, [pc, #392]	; (8020654 <etharp_query+0x268>)
 80204ca:	4613      	mov	r3, r2
 80204cc:	005b      	lsls	r3, r3, #1
 80204ce:	4413      	add	r3, r2
 80204d0:	00db      	lsls	r3, r3, #3
 80204d2:	440b      	add	r3, r1
 80204d4:	3314      	adds	r3, #20
 80204d6:	781b      	ldrb	r3, [r3, #0]
 80204d8:	2b01      	cmp	r3, #1
 80204da:	d806      	bhi.n	80204ea <etharp_query+0xfe>
 80204dc:	4b5a      	ldr	r3, [pc, #360]	; (8020648 <etharp_query+0x25c>)
 80204de:	f240 32cd 	movw	r2, #973	; 0x3cd
 80204e2:	495d      	ldr	r1, [pc, #372]	; (8020658 <etharp_query+0x26c>)
 80204e4:	485a      	ldr	r0, [pc, #360]	; (8020650 <etharp_query+0x264>)
 80204e6:	f001 fee1 	bl	80222ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 80204ea:	6a3b      	ldr	r3, [r7, #32]
 80204ec:	2b00      	cmp	r3, #0
 80204ee:	d102      	bne.n	80204f6 <etharp_query+0x10a>
 80204f0:	687b      	ldr	r3, [r7, #4]
 80204f2:	2b00      	cmp	r3, #0
 80204f4:	d10c      	bne.n	8020510 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80204f6:	68b9      	ldr	r1, [r7, #8]
 80204f8:	68f8      	ldr	r0, [r7, #12]
 80204fa:	f000 f963 	bl	80207c4 <etharp_request>
 80204fe:	4603      	mov	r3, r0
 8020500:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8020504:	687b      	ldr	r3, [r7, #4]
 8020506:	2b00      	cmp	r3, #0
 8020508:	d102      	bne.n	8020510 <etharp_query+0x124>
      return result;
 802050a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 802050e:	e096      	b.n	802063e <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	2b00      	cmp	r3, #0
 8020514:	d106      	bne.n	8020524 <etharp_query+0x138>
 8020516:	4b4c      	ldr	r3, [pc, #304]	; (8020648 <etharp_query+0x25c>)
 8020518:	f240 32e1 	movw	r2, #993	; 0x3e1
 802051c:	494f      	ldr	r1, [pc, #316]	; (802065c <etharp_query+0x270>)
 802051e:	484c      	ldr	r0, [pc, #304]	; (8020650 <etharp_query+0x264>)
 8020520:	f001 fec4 	bl	80222ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8020524:	7c7a      	ldrb	r2, [r7, #17]
 8020526:	494b      	ldr	r1, [pc, #300]	; (8020654 <etharp_query+0x268>)
 8020528:	4613      	mov	r3, r2
 802052a:	005b      	lsls	r3, r3, #1
 802052c:	4413      	add	r3, r2
 802052e:	00db      	lsls	r3, r3, #3
 8020530:	440b      	add	r3, r1
 8020532:	3314      	adds	r3, #20
 8020534:	781b      	ldrb	r3, [r3, #0]
 8020536:	2b01      	cmp	r3, #1
 8020538:	d917      	bls.n	802056a <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802053a:	4a49      	ldr	r2, [pc, #292]	; (8020660 <etharp_query+0x274>)
 802053c:	7c7b      	ldrb	r3, [r7, #17]
 802053e:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8020540:	7c7a      	ldrb	r2, [r7, #17]
 8020542:	4613      	mov	r3, r2
 8020544:	005b      	lsls	r3, r3, #1
 8020546:	4413      	add	r3, r2
 8020548:	00db      	lsls	r3, r3, #3
 802054a:	3308      	adds	r3, #8
 802054c:	4a41      	ldr	r2, [pc, #260]	; (8020654 <etharp_query+0x268>)
 802054e:	4413      	add	r3, r2
 8020550:	3304      	adds	r3, #4
 8020552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020556:	9200      	str	r2, [sp, #0]
 8020558:	697a      	ldr	r2, [r7, #20]
 802055a:	6879      	ldr	r1, [r7, #4]
 802055c:	68f8      	ldr	r0, [r7, #12]
 802055e:	f001 fd09 	bl	8021f74 <ethernet_output>
 8020562:	4603      	mov	r3, r0
 8020564:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020568:	e067      	b.n	802063a <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802056a:	7c7a      	ldrb	r2, [r7, #17]
 802056c:	4939      	ldr	r1, [pc, #228]	; (8020654 <etharp_query+0x268>)
 802056e:	4613      	mov	r3, r2
 8020570:	005b      	lsls	r3, r3, #1
 8020572:	4413      	add	r3, r2
 8020574:	00db      	lsls	r3, r3, #3
 8020576:	440b      	add	r3, r1
 8020578:	3314      	adds	r3, #20
 802057a:	781b      	ldrb	r3, [r3, #0]
 802057c:	2b01      	cmp	r3, #1
 802057e:	d15c      	bne.n	802063a <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8020580:	2300      	movs	r3, #0
 8020582:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	61fb      	str	r3, [r7, #28]
    while (p) {
 8020588:	e01c      	b.n	80205c4 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802058a:	69fb      	ldr	r3, [r7, #28]
 802058c:	895a      	ldrh	r2, [r3, #10]
 802058e:	69fb      	ldr	r3, [r7, #28]
 8020590:	891b      	ldrh	r3, [r3, #8]
 8020592:	429a      	cmp	r2, r3
 8020594:	d10a      	bne.n	80205ac <etharp_query+0x1c0>
 8020596:	69fb      	ldr	r3, [r7, #28]
 8020598:	681b      	ldr	r3, [r3, #0]
 802059a:	2b00      	cmp	r3, #0
 802059c:	d006      	beq.n	80205ac <etharp_query+0x1c0>
 802059e:	4b2a      	ldr	r3, [pc, #168]	; (8020648 <etharp_query+0x25c>)
 80205a0:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80205a4:	492f      	ldr	r1, [pc, #188]	; (8020664 <etharp_query+0x278>)
 80205a6:	482a      	ldr	r0, [pc, #168]	; (8020650 <etharp_query+0x264>)
 80205a8:	f001 fe80 	bl	80222ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80205ac:	69fb      	ldr	r3, [r7, #28]
 80205ae:	7b1b      	ldrb	r3, [r3, #12]
 80205b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80205b4:	2b00      	cmp	r3, #0
 80205b6:	d002      	beq.n	80205be <etharp_query+0x1d2>
        copy_needed = 1;
 80205b8:	2301      	movs	r3, #1
 80205ba:	61bb      	str	r3, [r7, #24]
        break;
 80205bc:	e005      	b.n	80205ca <etharp_query+0x1de>
      }
      p = p->next;
 80205be:	69fb      	ldr	r3, [r7, #28]
 80205c0:	681b      	ldr	r3, [r3, #0]
 80205c2:	61fb      	str	r3, [r7, #28]
    while (p) {
 80205c4:	69fb      	ldr	r3, [r7, #28]
 80205c6:	2b00      	cmp	r3, #0
 80205c8:	d1df      	bne.n	802058a <etharp_query+0x19e>
    }
    if (copy_needed) {
 80205ca:	69bb      	ldr	r3, [r7, #24]
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d007      	beq.n	80205e0 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80205d0:	687a      	ldr	r2, [r7, #4]
 80205d2:	f44f 7120 	mov.w	r1, #640	; 0x280
 80205d6:	200e      	movs	r0, #14
 80205d8:	f7fe fbbc 	bl	801ed54 <pbuf_clone>
 80205dc:	61f8      	str	r0, [r7, #28]
 80205de:	e004      	b.n	80205ea <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80205e0:	687b      	ldr	r3, [r7, #4]
 80205e2:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80205e4:	69f8      	ldr	r0, [r7, #28]
 80205e6:	f7fe f9c9 	bl	801e97c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80205ea:	69fb      	ldr	r3, [r7, #28]
 80205ec:	2b00      	cmp	r3, #0
 80205ee:	d021      	beq.n	8020634 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80205f0:	7c7a      	ldrb	r2, [r7, #17]
 80205f2:	4918      	ldr	r1, [pc, #96]	; (8020654 <etharp_query+0x268>)
 80205f4:	4613      	mov	r3, r2
 80205f6:	005b      	lsls	r3, r3, #1
 80205f8:	4413      	add	r3, r2
 80205fa:	00db      	lsls	r3, r3, #3
 80205fc:	440b      	add	r3, r1
 80205fe:	681b      	ldr	r3, [r3, #0]
 8020600:	2b00      	cmp	r3, #0
 8020602:	d00a      	beq.n	802061a <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8020604:	7c7a      	ldrb	r2, [r7, #17]
 8020606:	4913      	ldr	r1, [pc, #76]	; (8020654 <etharp_query+0x268>)
 8020608:	4613      	mov	r3, r2
 802060a:	005b      	lsls	r3, r3, #1
 802060c:	4413      	add	r3, r2
 802060e:	00db      	lsls	r3, r3, #3
 8020610:	440b      	add	r3, r1
 8020612:	681b      	ldr	r3, [r3, #0]
 8020614:	4618      	mov	r0, r3
 8020616:	f7fe f911 	bl	801e83c <pbuf_free>
      }
      arp_table[i].q = p;
 802061a:	7c7a      	ldrb	r2, [r7, #17]
 802061c:	490d      	ldr	r1, [pc, #52]	; (8020654 <etharp_query+0x268>)
 802061e:	4613      	mov	r3, r2
 8020620:	005b      	lsls	r3, r3, #1
 8020622:	4413      	add	r3, r2
 8020624:	00db      	lsls	r3, r3, #3
 8020626:	440b      	add	r3, r1
 8020628:	69fa      	ldr	r2, [r7, #28]
 802062a:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 802062c:	2300      	movs	r3, #0
 802062e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8020632:	e002      	b.n	802063a <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8020634:	23ff      	movs	r3, #255	; 0xff
 8020636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802063a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 802063e:	4618      	mov	r0, r3
 8020640:	3728      	adds	r7, #40	; 0x28
 8020642:	46bd      	mov	sp, r7
 8020644:	bd80      	pop	{r7, pc}
 8020646:	bf00      	nop
 8020648:	08027f64 	.word	0x08027f64
 802064c:	08028140 	.word	0x08028140
 8020650:	0802800c 	.word	0x0802800c
 8020654:	20013dc4 	.word	0x20013dc4
 8020658:	08028150 	.word	0x08028150
 802065c:	08028134 	.word	0x08028134
 8020660:	20014274 	.word	0x20014274
 8020664:	08028178 	.word	0x08028178

08020668 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8020668:	b580      	push	{r7, lr}
 802066a:	b08a      	sub	sp, #40	; 0x28
 802066c:	af02      	add	r7, sp, #8
 802066e:	60f8      	str	r0, [r7, #12]
 8020670:	60b9      	str	r1, [r7, #8]
 8020672:	607a      	str	r2, [r7, #4]
 8020674:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8020676:	2300      	movs	r3, #0
 8020678:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802067a:	68fb      	ldr	r3, [r7, #12]
 802067c:	2b00      	cmp	r3, #0
 802067e:	d106      	bne.n	802068e <etharp_raw+0x26>
 8020680:	4b3a      	ldr	r3, [pc, #232]	; (802076c <etharp_raw+0x104>)
 8020682:	f240 4257 	movw	r2, #1111	; 0x457
 8020686:	493a      	ldr	r1, [pc, #232]	; (8020770 <etharp_raw+0x108>)
 8020688:	483a      	ldr	r0, [pc, #232]	; (8020774 <etharp_raw+0x10c>)
 802068a:	f001 fe0f 	bl	80222ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 802068e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020692:	211c      	movs	r1, #28
 8020694:	200e      	movs	r0, #14
 8020696:	f7fd fdef 	bl	801e278 <pbuf_alloc>
 802069a:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 802069c:	69bb      	ldr	r3, [r7, #24]
 802069e:	2b00      	cmp	r3, #0
 80206a0:	d102      	bne.n	80206a8 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80206a2:	f04f 33ff 	mov.w	r3, #4294967295
 80206a6:	e05d      	b.n	8020764 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80206a8:	69bb      	ldr	r3, [r7, #24]
 80206aa:	895b      	ldrh	r3, [r3, #10]
 80206ac:	2b1b      	cmp	r3, #27
 80206ae:	d806      	bhi.n	80206be <etharp_raw+0x56>
 80206b0:	4b2e      	ldr	r3, [pc, #184]	; (802076c <etharp_raw+0x104>)
 80206b2:	f240 4262 	movw	r2, #1122	; 0x462
 80206b6:	4930      	ldr	r1, [pc, #192]	; (8020778 <etharp_raw+0x110>)
 80206b8:	482e      	ldr	r0, [pc, #184]	; (8020774 <etharp_raw+0x10c>)
 80206ba:	f001 fdf7 	bl	80222ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80206be:	69bb      	ldr	r3, [r7, #24]
 80206c0:	685b      	ldr	r3, [r3, #4]
 80206c2:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80206c4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80206c6:	4618      	mov	r0, r3
 80206c8:	f7fc fcdc 	bl	801d084 <lwip_htons>
 80206cc:	4603      	mov	r3, r0
 80206ce:	461a      	mov	r2, r3
 80206d0:	697b      	ldr	r3, [r7, #20]
 80206d2:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80206da:	2b06      	cmp	r3, #6
 80206dc:	d006      	beq.n	80206ec <etharp_raw+0x84>
 80206de:	4b23      	ldr	r3, [pc, #140]	; (802076c <etharp_raw+0x104>)
 80206e0:	f240 4269 	movw	r2, #1129	; 0x469
 80206e4:	4925      	ldr	r1, [pc, #148]	; (802077c <etharp_raw+0x114>)
 80206e6:	4823      	ldr	r0, [pc, #140]	; (8020774 <etharp_raw+0x10c>)
 80206e8:	f001 fde0 	bl	80222ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80206ec:	697b      	ldr	r3, [r7, #20]
 80206ee:	3308      	adds	r3, #8
 80206f0:	2206      	movs	r2, #6
 80206f2:	6839      	ldr	r1, [r7, #0]
 80206f4:	4618      	mov	r0, r3
 80206f6:	f001 fcc9 	bl	802208c <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80206fa:	697b      	ldr	r3, [r7, #20]
 80206fc:	3312      	adds	r3, #18
 80206fe:	2206      	movs	r2, #6
 8020700:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8020702:	4618      	mov	r0, r3
 8020704:	f001 fcc2 	bl	802208c <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8020708:	697b      	ldr	r3, [r7, #20]
 802070a:	330e      	adds	r3, #14
 802070c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 802070e:	6812      	ldr	r2, [r2, #0]
 8020710:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8020712:	697b      	ldr	r3, [r7, #20]
 8020714:	3318      	adds	r3, #24
 8020716:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8020718:	6812      	ldr	r2, [r2, #0]
 802071a:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 802071c:	697b      	ldr	r3, [r7, #20]
 802071e:	2200      	movs	r2, #0
 8020720:	701a      	strb	r2, [r3, #0]
 8020722:	2200      	movs	r2, #0
 8020724:	f042 0201 	orr.w	r2, r2, #1
 8020728:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802072a:	697b      	ldr	r3, [r7, #20]
 802072c:	2200      	movs	r2, #0
 802072e:	f042 0208 	orr.w	r2, r2, #8
 8020732:	709a      	strb	r2, [r3, #2]
 8020734:	2200      	movs	r2, #0
 8020736:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8020738:	697b      	ldr	r3, [r7, #20]
 802073a:	2206      	movs	r2, #6
 802073c:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 802073e:	697b      	ldr	r3, [r7, #20]
 8020740:	2204      	movs	r2, #4
 8020742:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8020744:	f640 0306 	movw	r3, #2054	; 0x806
 8020748:	9300      	str	r3, [sp, #0]
 802074a:	687b      	ldr	r3, [r7, #4]
 802074c:	68ba      	ldr	r2, [r7, #8]
 802074e:	69b9      	ldr	r1, [r7, #24]
 8020750:	68f8      	ldr	r0, [r7, #12]
 8020752:	f001 fc0f 	bl	8021f74 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8020756:	69b8      	ldr	r0, [r7, #24]
 8020758:	f7fe f870 	bl	801e83c <pbuf_free>
  p = NULL;
 802075c:	2300      	movs	r3, #0
 802075e:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8020760:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8020764:	4618      	mov	r0, r3
 8020766:	3720      	adds	r7, #32
 8020768:	46bd      	mov	sp, r7
 802076a:	bd80      	pop	{r7, pc}
 802076c:	08027f64 	.word	0x08027f64
 8020770:	080280e4 	.word	0x080280e4
 8020774:	0802800c 	.word	0x0802800c
 8020778:	08028194 	.word	0x08028194
 802077c:	080281c8 	.word	0x080281c8

08020780 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8020780:	b580      	push	{r7, lr}
 8020782:	b088      	sub	sp, #32
 8020784:	af04      	add	r7, sp, #16
 8020786:	60f8      	str	r0, [r7, #12]
 8020788:	60b9      	str	r1, [r7, #8]
 802078a:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802078c:	68fb      	ldr	r3, [r7, #12]
 802078e:	f103 012a 	add.w	r1, r3, #42	; 0x2a
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8020792:	68fb      	ldr	r3, [r7, #12]
 8020794:	f103 002a 	add.w	r0, r3, #42	; 0x2a
 8020798:	68fb      	ldr	r3, [r7, #12]
 802079a:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 802079c:	2201      	movs	r2, #1
 802079e:	9203      	str	r2, [sp, #12]
 80207a0:	68ba      	ldr	r2, [r7, #8]
 80207a2:	9202      	str	r2, [sp, #8]
 80207a4:	4a06      	ldr	r2, [pc, #24]	; (80207c0 <etharp_request_dst+0x40>)
 80207a6:	9201      	str	r2, [sp, #4]
 80207a8:	9300      	str	r3, [sp, #0]
 80207aa:	4603      	mov	r3, r0
 80207ac:	687a      	ldr	r2, [r7, #4]
 80207ae:	68f8      	ldr	r0, [r7, #12]
 80207b0:	f7ff ff5a 	bl	8020668 <etharp_raw>
 80207b4:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80207b6:	4618      	mov	r0, r3
 80207b8:	3710      	adds	r7, #16
 80207ba:	46bd      	mov	sp, r7
 80207bc:	bd80      	pop	{r7, pc}
 80207be:	bf00      	nop
 80207c0:	08028bd0 	.word	0x08028bd0

080207c4 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80207c4:	b580      	push	{r7, lr}
 80207c6:	b082      	sub	sp, #8
 80207c8:	af00      	add	r7, sp, #0
 80207ca:	6078      	str	r0, [r7, #4]
 80207cc:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80207ce:	4a05      	ldr	r2, [pc, #20]	; (80207e4 <etharp_request+0x20>)
 80207d0:	6839      	ldr	r1, [r7, #0]
 80207d2:	6878      	ldr	r0, [r7, #4]
 80207d4:	f7ff ffd4 	bl	8020780 <etharp_request_dst>
 80207d8:	4603      	mov	r3, r0
}
 80207da:	4618      	mov	r0, r3
 80207dc:	3708      	adds	r7, #8
 80207de:	46bd      	mov	sp, r7
 80207e0:	bd80      	pop	{r7, pc}
 80207e2:	bf00      	nop
 80207e4:	08028bc8 	.word	0x08028bc8

080207e8 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80207e8:	b580      	push	{r7, lr}
 80207ea:	b08e      	sub	sp, #56	; 0x38
 80207ec:	af04      	add	r7, sp, #16
 80207ee:	6078      	str	r0, [r7, #4]
 80207f0:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80207f2:	4b79      	ldr	r3, [pc, #484]	; (80209d8 <icmp_input+0x1f0>)
 80207f4:	689b      	ldr	r3, [r3, #8]
 80207f6:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80207f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80207fa:	781b      	ldrb	r3, [r3, #0]
 80207fc:	f003 030f 	and.w	r3, r3, #15
 8020800:	b2db      	uxtb	r3, r3
 8020802:	009b      	lsls	r3, r3, #2
 8020804:	b2db      	uxtb	r3, r3
 8020806:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8020808:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802080a:	2b13      	cmp	r3, #19
 802080c:	f240 80cd 	bls.w	80209aa <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8020810:	687b      	ldr	r3, [r7, #4]
 8020812:	895b      	ldrh	r3, [r3, #10]
 8020814:	2b03      	cmp	r3, #3
 8020816:	f240 80ca 	bls.w	80209ae <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802081a:	687b      	ldr	r3, [r7, #4]
 802081c:	685b      	ldr	r3, [r3, #4]
 802081e:	781b      	ldrb	r3, [r3, #0]
 8020820:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8020824:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8020828:	2b00      	cmp	r3, #0
 802082a:	f000 80b7 	beq.w	802099c <icmp_input+0x1b4>
 802082e:	2b08      	cmp	r3, #8
 8020830:	f040 80b7 	bne.w	80209a2 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8020834:	4b69      	ldr	r3, [pc, #420]	; (80209dc <icmp_input+0x1f4>)
 8020836:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020838:	4b67      	ldr	r3, [pc, #412]	; (80209d8 <icmp_input+0x1f0>)
 802083a:	695b      	ldr	r3, [r3, #20]
 802083c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020840:	2be0      	cmp	r3, #224	; 0xe0
 8020842:	f000 80bb 	beq.w	80209bc <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8020846:	4b64      	ldr	r3, [pc, #400]	; (80209d8 <icmp_input+0x1f0>)
 8020848:	695b      	ldr	r3, [r3, #20]
 802084a:	4a63      	ldr	r2, [pc, #396]	; (80209d8 <icmp_input+0x1f0>)
 802084c:	6812      	ldr	r2, [r2, #0]
 802084e:	4611      	mov	r1, r2
 8020850:	4618      	mov	r0, r3
 8020852:	f000 fbf1 	bl	8021038 <ip4_addr_isbroadcast_u32>
 8020856:	4603      	mov	r3, r0
 8020858:	2b00      	cmp	r3, #0
 802085a:	f040 80b1 	bne.w	80209c0 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 802085e:	687b      	ldr	r3, [r7, #4]
 8020860:	891b      	ldrh	r3, [r3, #8]
 8020862:	2b07      	cmp	r3, #7
 8020864:	f240 80a5 	bls.w	80209b2 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020868:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802086a:	330e      	adds	r3, #14
 802086c:	4619      	mov	r1, r3
 802086e:	6878      	ldr	r0, [r7, #4]
 8020870:	f7fd ff4e 	bl	801e710 <pbuf_add_header>
 8020874:	4603      	mov	r3, r0
 8020876:	2b00      	cmp	r3, #0
 8020878:	d04b      	beq.n	8020912 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802087a:	687b      	ldr	r3, [r7, #4]
 802087c:	891a      	ldrh	r2, [r3, #8]
 802087e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020880:	4413      	add	r3, r2
 8020882:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	891b      	ldrh	r3, [r3, #8]
 8020888:	8b7a      	ldrh	r2, [r7, #26]
 802088a:	429a      	cmp	r2, r3
 802088c:	f0c0 809a 	bcc.w	80209c4 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8020890:	8b7b      	ldrh	r3, [r7, #26]
 8020892:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020896:	4619      	mov	r1, r3
 8020898:	200e      	movs	r0, #14
 802089a:	f7fd fced 	bl	801e278 <pbuf_alloc>
 802089e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80208a0:	697b      	ldr	r3, [r7, #20]
 80208a2:	2b00      	cmp	r3, #0
 80208a4:	f000 8090 	beq.w	80209c8 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80208a8:	697b      	ldr	r3, [r7, #20]
 80208aa:	895b      	ldrh	r3, [r3, #10]
 80208ac:	461a      	mov	r2, r3
 80208ae:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80208b0:	3308      	adds	r3, #8
 80208b2:	429a      	cmp	r2, r3
 80208b4:	d203      	bcs.n	80208be <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80208b6:	6978      	ldr	r0, [r7, #20]
 80208b8:	f7fd ffc0 	bl	801e83c <pbuf_free>
          goto icmperr;
 80208bc:	e085      	b.n	80209ca <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80208be:	697b      	ldr	r3, [r7, #20]
 80208c0:	685b      	ldr	r3, [r3, #4]
 80208c2:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80208c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80208c6:	4618      	mov	r0, r3
 80208c8:	f001 fbe0 	bl	802208c <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80208cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80208ce:	4619      	mov	r1, r3
 80208d0:	6978      	ldr	r0, [r7, #20]
 80208d2:	f7fd ff2d 	bl	801e730 <pbuf_remove_header>
 80208d6:	4603      	mov	r3, r0
 80208d8:	2b00      	cmp	r3, #0
 80208da:	d009      	beq.n	80208f0 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80208dc:	4b40      	ldr	r3, [pc, #256]	; (80209e0 <icmp_input+0x1f8>)
 80208de:	22b6      	movs	r2, #182	; 0xb6
 80208e0:	4940      	ldr	r1, [pc, #256]	; (80209e4 <icmp_input+0x1fc>)
 80208e2:	4841      	ldr	r0, [pc, #260]	; (80209e8 <icmp_input+0x200>)
 80208e4:	f001 fce2 	bl	80222ac <iprintf>
          pbuf_free(r);
 80208e8:	6978      	ldr	r0, [r7, #20]
 80208ea:	f7fd ffa7 	bl	801e83c <pbuf_free>
          goto icmperr;
 80208ee:	e06c      	b.n	80209ca <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80208f0:	6879      	ldr	r1, [r7, #4]
 80208f2:	6978      	ldr	r0, [r7, #20]
 80208f4:	f7fe f8ca 	bl	801ea8c <pbuf_copy>
 80208f8:	4603      	mov	r3, r0
 80208fa:	2b00      	cmp	r3, #0
 80208fc:	d003      	beq.n	8020906 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80208fe:	6978      	ldr	r0, [r7, #20]
 8020900:	f7fd ff9c 	bl	801e83c <pbuf_free>
          goto icmperr;
 8020904:	e061      	b.n	80209ca <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 8020906:	6878      	ldr	r0, [r7, #4]
 8020908:	f7fd ff98 	bl	801e83c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 802090c:	697b      	ldr	r3, [r7, #20]
 802090e:	607b      	str	r3, [r7, #4]
 8020910:	e00f      	b.n	8020932 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8020912:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8020914:	330e      	adds	r3, #14
 8020916:	4619      	mov	r1, r3
 8020918:	6878      	ldr	r0, [r7, #4]
 802091a:	f7fd ff09 	bl	801e730 <pbuf_remove_header>
 802091e:	4603      	mov	r3, r0
 8020920:	2b00      	cmp	r3, #0
 8020922:	d006      	beq.n	8020932 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8020924:	4b2e      	ldr	r3, [pc, #184]	; (80209e0 <icmp_input+0x1f8>)
 8020926:	22c7      	movs	r2, #199	; 0xc7
 8020928:	4930      	ldr	r1, [pc, #192]	; (80209ec <icmp_input+0x204>)
 802092a:	482f      	ldr	r0, [pc, #188]	; (80209e8 <icmp_input+0x200>)
 802092c:	f001 fcbe 	bl	80222ac <iprintf>
          goto icmperr;
 8020930:	e04b      	b.n	80209ca <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8020932:	687b      	ldr	r3, [r7, #4]
 8020934:	685b      	ldr	r3, [r3, #4]
 8020936:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8020938:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802093a:	4619      	mov	r1, r3
 802093c:	6878      	ldr	r0, [r7, #4]
 802093e:	f7fd fee7 	bl	801e710 <pbuf_add_header>
 8020942:	4603      	mov	r3, r0
 8020944:	2b00      	cmp	r3, #0
 8020946:	d12b      	bne.n	80209a0 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8020948:	687b      	ldr	r3, [r7, #4]
 802094a:	685b      	ldr	r3, [r3, #4]
 802094c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 802094e:	69fb      	ldr	r3, [r7, #28]
 8020950:	681a      	ldr	r2, [r3, #0]
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8020956:	4b20      	ldr	r3, [pc, #128]	; (80209d8 <icmp_input+0x1f0>)
 8020958:	691a      	ldr	r2, [r3, #16]
 802095a:	68fb      	ldr	r3, [r7, #12]
 802095c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 802095e:	693b      	ldr	r3, [r7, #16]
 8020960:	2200      	movs	r2, #0
 8020962:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8020964:	693b      	ldr	r3, [r7, #16]
 8020966:	2200      	movs	r2, #0
 8020968:	709a      	strb	r2, [r3, #2]
 802096a:	2200      	movs	r2, #0
 802096c:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 802096e:	68fb      	ldr	r3, [r7, #12]
 8020970:	22ff      	movs	r2, #255	; 0xff
 8020972:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8020974:	68fb      	ldr	r3, [r7, #12]
 8020976:	2200      	movs	r2, #0
 8020978:	729a      	strb	r2, [r3, #10]
 802097a:	2200      	movs	r2, #0
 802097c:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 802097e:	683b      	ldr	r3, [r7, #0]
 8020980:	9302      	str	r3, [sp, #8]
 8020982:	2301      	movs	r3, #1
 8020984:	9301      	str	r3, [sp, #4]
 8020986:	2300      	movs	r3, #0
 8020988:	9300      	str	r3, [sp, #0]
 802098a:	23ff      	movs	r3, #255	; 0xff
 802098c:	2200      	movs	r2, #0
 802098e:	69f9      	ldr	r1, [r7, #28]
 8020990:	6878      	ldr	r0, [r7, #4]
 8020992:	f000 fa6b 	bl	8020e6c <ip4_output_if>
 8020996:	4603      	mov	r3, r0
 8020998:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802099a:	e001      	b.n	80209a0 <icmp_input+0x1b8>
      break;
 802099c:	bf00      	nop
 802099e:	e000      	b.n	80209a2 <icmp_input+0x1ba>
      break;
 80209a0:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80209a2:	6878      	ldr	r0, [r7, #4]
 80209a4:	f7fd ff4a 	bl	801e83c <pbuf_free>
  return;
 80209a8:	e013      	b.n	80209d2 <icmp_input+0x1ea>
    goto lenerr;
 80209aa:	bf00      	nop
 80209ac:	e002      	b.n	80209b4 <icmp_input+0x1cc>
    goto lenerr;
 80209ae:	bf00      	nop
 80209b0:	e000      	b.n	80209b4 <icmp_input+0x1cc>
        goto lenerr;
 80209b2:	bf00      	nop
lenerr:
  pbuf_free(p);
 80209b4:	6878      	ldr	r0, [r7, #4]
 80209b6:	f7fd ff41 	bl	801e83c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80209ba:	e00a      	b.n	80209d2 <icmp_input+0x1ea>
        goto icmperr;
 80209bc:	bf00      	nop
 80209be:	e004      	b.n	80209ca <icmp_input+0x1e2>
        goto icmperr;
 80209c0:	bf00      	nop
 80209c2:	e002      	b.n	80209ca <icmp_input+0x1e2>
          goto icmperr;
 80209c4:	bf00      	nop
 80209c6:	e000      	b.n	80209ca <icmp_input+0x1e2>
          goto icmperr;
 80209c8:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80209ca:	6878      	ldr	r0, [r7, #4]
 80209cc:	f7fd ff36 	bl	801e83c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80209d0:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80209d2:	3728      	adds	r7, #40	; 0x28
 80209d4:	46bd      	mov	sp, r7
 80209d6:	bd80      	pop	{r7, pc}
 80209d8:	2001075c 	.word	0x2001075c
 80209dc:	20010770 	.word	0x20010770
 80209e0:	0802820c 	.word	0x0802820c
 80209e4:	08028270 	.word	0x08028270
 80209e8:	080282a8 	.word	0x080282a8
 80209ec:	080282d0 	.word	0x080282d0

080209f0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80209f0:	b580      	push	{r7, lr}
 80209f2:	b082      	sub	sp, #8
 80209f4:	af00      	add	r7, sp, #0
 80209f6:	6078      	str	r0, [r7, #4]
 80209f8:	460b      	mov	r3, r1
 80209fa:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80209fc:	78fb      	ldrb	r3, [r7, #3]
 80209fe:	461a      	mov	r2, r3
 8020a00:	2103      	movs	r1, #3
 8020a02:	6878      	ldr	r0, [r7, #4]
 8020a04:	f000 f814 	bl	8020a30 <icmp_send_response>
}
 8020a08:	bf00      	nop
 8020a0a:	3708      	adds	r7, #8
 8020a0c:	46bd      	mov	sp, r7
 8020a0e:	bd80      	pop	{r7, pc}

08020a10 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8020a10:	b580      	push	{r7, lr}
 8020a12:	b082      	sub	sp, #8
 8020a14:	af00      	add	r7, sp, #0
 8020a16:	6078      	str	r0, [r7, #4]
 8020a18:	460b      	mov	r3, r1
 8020a1a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8020a1c:	78fb      	ldrb	r3, [r7, #3]
 8020a1e:	461a      	mov	r2, r3
 8020a20:	210b      	movs	r1, #11
 8020a22:	6878      	ldr	r0, [r7, #4]
 8020a24:	f000 f804 	bl	8020a30 <icmp_send_response>
}
 8020a28:	bf00      	nop
 8020a2a:	3708      	adds	r7, #8
 8020a2c:	46bd      	mov	sp, r7
 8020a2e:	bd80      	pop	{r7, pc}

08020a30 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8020a30:	b580      	push	{r7, lr}
 8020a32:	b08c      	sub	sp, #48	; 0x30
 8020a34:	af04      	add	r7, sp, #16
 8020a36:	6078      	str	r0, [r7, #4]
 8020a38:	460b      	mov	r3, r1
 8020a3a:	70fb      	strb	r3, [r7, #3]
 8020a3c:	4613      	mov	r3, r2
 8020a3e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8020a40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8020a44:	2124      	movs	r1, #36	; 0x24
 8020a46:	2022      	movs	r0, #34	; 0x22
 8020a48:	f7fd fc16 	bl	801e278 <pbuf_alloc>
 8020a4c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8020a4e:	69fb      	ldr	r3, [r7, #28]
 8020a50:	2b00      	cmp	r3, #0
 8020a52:	d04c      	beq.n	8020aee <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8020a54:	69fb      	ldr	r3, [r7, #28]
 8020a56:	895b      	ldrh	r3, [r3, #10]
 8020a58:	2b23      	cmp	r3, #35	; 0x23
 8020a5a:	d806      	bhi.n	8020a6a <icmp_send_response+0x3a>
 8020a5c:	4b26      	ldr	r3, [pc, #152]	; (8020af8 <icmp_send_response+0xc8>)
 8020a5e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8020a62:	4926      	ldr	r1, [pc, #152]	; (8020afc <icmp_send_response+0xcc>)
 8020a64:	4826      	ldr	r0, [pc, #152]	; (8020b00 <icmp_send_response+0xd0>)
 8020a66:	f001 fc21 	bl	80222ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8020a6a:	687b      	ldr	r3, [r7, #4]
 8020a6c:	685b      	ldr	r3, [r3, #4]
 8020a6e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8020a70:	69fb      	ldr	r3, [r7, #28]
 8020a72:	685b      	ldr	r3, [r3, #4]
 8020a74:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8020a76:	697b      	ldr	r3, [r7, #20]
 8020a78:	78fa      	ldrb	r2, [r7, #3]
 8020a7a:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8020a7c:	697b      	ldr	r3, [r7, #20]
 8020a7e:	78ba      	ldrb	r2, [r7, #2]
 8020a80:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8020a82:	697b      	ldr	r3, [r7, #20]
 8020a84:	2200      	movs	r2, #0
 8020a86:	711a      	strb	r2, [r3, #4]
 8020a88:	2200      	movs	r2, #0
 8020a8a:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8020a8c:	697b      	ldr	r3, [r7, #20]
 8020a8e:	2200      	movs	r2, #0
 8020a90:	719a      	strb	r2, [r3, #6]
 8020a92:	2200      	movs	r2, #0
 8020a94:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8020a96:	69fb      	ldr	r3, [r7, #28]
 8020a98:	685b      	ldr	r3, [r3, #4]
 8020a9a:	f103 0008 	add.w	r0, r3, #8
 8020a9e:	687b      	ldr	r3, [r7, #4]
 8020aa0:	685b      	ldr	r3, [r3, #4]
 8020aa2:	221c      	movs	r2, #28
 8020aa4:	4619      	mov	r1, r3
 8020aa6:	f001 faf1 	bl	802208c <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8020aaa:	69bb      	ldr	r3, [r7, #24]
 8020aac:	68db      	ldr	r3, [r3, #12]
 8020aae:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8020ab0:	f107 030c 	add.w	r3, r7, #12
 8020ab4:	4618      	mov	r0, r3
 8020ab6:	f000 f825 	bl	8020b04 <ip4_route>
 8020aba:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8020abc:	693b      	ldr	r3, [r7, #16]
 8020abe:	2b00      	cmp	r3, #0
 8020ac0:	d011      	beq.n	8020ae6 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8020ac2:	697b      	ldr	r3, [r7, #20]
 8020ac4:	2200      	movs	r2, #0
 8020ac6:	709a      	strb	r2, [r3, #2]
 8020ac8:	2200      	movs	r2, #0
 8020aca:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8020acc:	f107 020c 	add.w	r2, r7, #12
 8020ad0:	693b      	ldr	r3, [r7, #16]
 8020ad2:	9302      	str	r3, [sp, #8]
 8020ad4:	2301      	movs	r3, #1
 8020ad6:	9301      	str	r3, [sp, #4]
 8020ad8:	2300      	movs	r3, #0
 8020ada:	9300      	str	r3, [sp, #0]
 8020adc:	23ff      	movs	r3, #255	; 0xff
 8020ade:	2100      	movs	r1, #0
 8020ae0:	69f8      	ldr	r0, [r7, #28]
 8020ae2:	f000 f9c3 	bl	8020e6c <ip4_output_if>
  }
  pbuf_free(q);
 8020ae6:	69f8      	ldr	r0, [r7, #28]
 8020ae8:	f7fd fea8 	bl	801e83c <pbuf_free>
 8020aec:	e000      	b.n	8020af0 <icmp_send_response+0xc0>
    return;
 8020aee:	bf00      	nop
}
 8020af0:	3720      	adds	r7, #32
 8020af2:	46bd      	mov	sp, r7
 8020af4:	bd80      	pop	{r7, pc}
 8020af6:	bf00      	nop
 8020af8:	0802820c 	.word	0x0802820c
 8020afc:	08028304 	.word	0x08028304
 8020b00:	080282a8 	.word	0x080282a8

08020b04 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8020b04:	b480      	push	{r7}
 8020b06:	b085      	sub	sp, #20
 8020b08:	af00      	add	r7, sp, #0
 8020b0a:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8020b0c:	4b33      	ldr	r3, [pc, #204]	; (8020bdc <ip4_route+0xd8>)
 8020b0e:	681b      	ldr	r3, [r3, #0]
 8020b10:	60fb      	str	r3, [r7, #12]
 8020b12:	e036      	b.n	8020b82 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020b14:	68fb      	ldr	r3, [r7, #12]
 8020b16:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b1a:	f003 0301 	and.w	r3, r3, #1
 8020b1e:	b2db      	uxtb	r3, r3
 8020b20:	2b00      	cmp	r3, #0
 8020b22:	d02b      	beq.n	8020b7c <ip4_route+0x78>
 8020b24:	68fb      	ldr	r3, [r7, #12]
 8020b26:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b2a:	089b      	lsrs	r3, r3, #2
 8020b2c:	f003 0301 	and.w	r3, r3, #1
 8020b30:	b2db      	uxtb	r3, r3
 8020b32:	2b00      	cmp	r3, #0
 8020b34:	d022      	beq.n	8020b7c <ip4_route+0x78>
 8020b36:	68fb      	ldr	r3, [r7, #12]
 8020b38:	3304      	adds	r3, #4
 8020b3a:	681b      	ldr	r3, [r3, #0]
 8020b3c:	2b00      	cmp	r3, #0
 8020b3e:	d01d      	beq.n	8020b7c <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	681a      	ldr	r2, [r3, #0]
 8020b44:	68fb      	ldr	r3, [r7, #12]
 8020b46:	3304      	adds	r3, #4
 8020b48:	681b      	ldr	r3, [r3, #0]
 8020b4a:	405a      	eors	r2, r3
 8020b4c:	68fb      	ldr	r3, [r7, #12]
 8020b4e:	3308      	adds	r3, #8
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	4013      	ands	r3, r2
 8020b54:	2b00      	cmp	r3, #0
 8020b56:	d101      	bne.n	8020b5c <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8020b58:	68fb      	ldr	r3, [r7, #12]
 8020b5a:	e038      	b.n	8020bce <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8020b5c:	68fb      	ldr	r3, [r7, #12]
 8020b5e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b62:	f003 0302 	and.w	r3, r3, #2
 8020b66:	2b00      	cmp	r3, #0
 8020b68:	d108      	bne.n	8020b7c <ip4_route+0x78>
 8020b6a:	687b      	ldr	r3, [r7, #4]
 8020b6c:	681a      	ldr	r2, [r3, #0]
 8020b6e:	68fb      	ldr	r3, [r7, #12]
 8020b70:	330c      	adds	r3, #12
 8020b72:	681b      	ldr	r3, [r3, #0]
 8020b74:	429a      	cmp	r2, r3
 8020b76:	d101      	bne.n	8020b7c <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8020b78:	68fb      	ldr	r3, [r7, #12]
 8020b7a:	e028      	b.n	8020bce <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8020b7c:	68fb      	ldr	r3, [r7, #12]
 8020b7e:	681b      	ldr	r3, [r3, #0]
 8020b80:	60fb      	str	r3, [r7, #12]
 8020b82:	68fb      	ldr	r3, [r7, #12]
 8020b84:	2b00      	cmp	r3, #0
 8020b86:	d1c5      	bne.n	8020b14 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020b88:	4b15      	ldr	r3, [pc, #84]	; (8020be0 <ip4_route+0xdc>)
 8020b8a:	681b      	ldr	r3, [r3, #0]
 8020b8c:	2b00      	cmp	r3, #0
 8020b8e:	d01a      	beq.n	8020bc6 <ip4_route+0xc2>
 8020b90:	4b13      	ldr	r3, [pc, #76]	; (8020be0 <ip4_route+0xdc>)
 8020b92:	681b      	ldr	r3, [r3, #0]
 8020b94:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020b98:	f003 0301 	and.w	r3, r3, #1
 8020b9c:	2b00      	cmp	r3, #0
 8020b9e:	d012      	beq.n	8020bc6 <ip4_route+0xc2>
 8020ba0:	4b0f      	ldr	r3, [pc, #60]	; (8020be0 <ip4_route+0xdc>)
 8020ba2:	681b      	ldr	r3, [r3, #0]
 8020ba4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020ba8:	f003 0304 	and.w	r3, r3, #4
 8020bac:	2b00      	cmp	r3, #0
 8020bae:	d00a      	beq.n	8020bc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020bb0:	4b0b      	ldr	r3, [pc, #44]	; (8020be0 <ip4_route+0xdc>)
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	3304      	adds	r3, #4
 8020bb6:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8020bb8:	2b00      	cmp	r3, #0
 8020bba:	d004      	beq.n	8020bc6 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	681b      	ldr	r3, [r3, #0]
 8020bc0:	b2db      	uxtb	r3, r3
 8020bc2:	2b7f      	cmp	r3, #127	; 0x7f
 8020bc4:	d101      	bne.n	8020bca <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8020bc6:	2300      	movs	r3, #0
 8020bc8:	e001      	b.n	8020bce <ip4_route+0xca>
  }

  return netif_default;
 8020bca:	4b05      	ldr	r3, [pc, #20]	; (8020be0 <ip4_route+0xdc>)
 8020bcc:	681b      	ldr	r3, [r3, #0]
}
 8020bce:	4618      	mov	r0, r3
 8020bd0:	3714      	adds	r7, #20
 8020bd2:	46bd      	mov	sp, r7
 8020bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bd8:	4770      	bx	lr
 8020bda:	bf00      	nop
 8020bdc:	20013d6c 	.word	0x20013d6c
 8020be0:	20013d70 	.word	0x20013d70

08020be4 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8020be4:	b580      	push	{r7, lr}
 8020be6:	b082      	sub	sp, #8
 8020be8:	af00      	add	r7, sp, #0
 8020bea:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8020bec:	687b      	ldr	r3, [r7, #4]
 8020bee:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020bf2:	f003 0301 	and.w	r3, r3, #1
 8020bf6:	b2db      	uxtb	r3, r3
 8020bf8:	2b00      	cmp	r3, #0
 8020bfa:	d016      	beq.n	8020c2a <ip4_input_accept+0x46>
 8020bfc:	687b      	ldr	r3, [r7, #4]
 8020bfe:	3304      	adds	r3, #4
 8020c00:	681b      	ldr	r3, [r3, #0]
 8020c02:	2b00      	cmp	r3, #0
 8020c04:	d011      	beq.n	8020c2a <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020c06:	4b0b      	ldr	r3, [pc, #44]	; (8020c34 <ip4_input_accept+0x50>)
 8020c08:	695a      	ldr	r2, [r3, #20]
 8020c0a:	687b      	ldr	r3, [r7, #4]
 8020c0c:	3304      	adds	r3, #4
 8020c0e:	681b      	ldr	r3, [r3, #0]
 8020c10:	429a      	cmp	r2, r3
 8020c12:	d008      	beq.n	8020c26 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8020c14:	4b07      	ldr	r3, [pc, #28]	; (8020c34 <ip4_input_accept+0x50>)
 8020c16:	695b      	ldr	r3, [r3, #20]
 8020c18:	6879      	ldr	r1, [r7, #4]
 8020c1a:	4618      	mov	r0, r3
 8020c1c:	f000 fa0c 	bl	8021038 <ip4_addr_isbroadcast_u32>
 8020c20:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d001      	beq.n	8020c2a <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8020c26:	2301      	movs	r3, #1
 8020c28:	e000      	b.n	8020c2c <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8020c2a:	2300      	movs	r3, #0
}
 8020c2c:	4618      	mov	r0, r3
 8020c2e:	3708      	adds	r7, #8
 8020c30:	46bd      	mov	sp, r7
 8020c32:	bd80      	pop	{r7, pc}
 8020c34:	2001075c 	.word	0x2001075c

08020c38 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8020c38:	b580      	push	{r7, lr}
 8020c3a:	b086      	sub	sp, #24
 8020c3c:	af00      	add	r7, sp, #0
 8020c3e:	6078      	str	r0, [r7, #4]
 8020c40:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8020c42:	687b      	ldr	r3, [r7, #4]
 8020c44:	685b      	ldr	r3, [r3, #4]
 8020c46:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8020c48:	697b      	ldr	r3, [r7, #20]
 8020c4a:	781b      	ldrb	r3, [r3, #0]
 8020c4c:	091b      	lsrs	r3, r3, #4
 8020c4e:	b2db      	uxtb	r3, r3
 8020c50:	2b04      	cmp	r3, #4
 8020c52:	d004      	beq.n	8020c5e <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8020c54:	6878      	ldr	r0, [r7, #4]
 8020c56:	f7fd fdf1 	bl	801e83c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8020c5a:	2300      	movs	r3, #0
 8020c5c:	e0fd      	b.n	8020e5a <ip4_input+0x222>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8020c5e:	697b      	ldr	r3, [r7, #20]
 8020c60:	781b      	ldrb	r3, [r3, #0]
 8020c62:	f003 030f 	and.w	r3, r3, #15
 8020c66:	b2db      	uxtb	r3, r3
 8020c68:	009b      	lsls	r3, r3, #2
 8020c6a:	b2db      	uxtb	r3, r3
 8020c6c:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8020c6e:	697b      	ldr	r3, [r7, #20]
 8020c70:	885b      	ldrh	r3, [r3, #2]
 8020c72:	b29b      	uxth	r3, r3
 8020c74:	4618      	mov	r0, r3
 8020c76:	f7fc fa05 	bl	801d084 <lwip_htons>
 8020c7a:	4603      	mov	r3, r0
 8020c7c:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8020c7e:	687b      	ldr	r3, [r7, #4]
 8020c80:	891b      	ldrh	r3, [r3, #8]
 8020c82:	89ba      	ldrh	r2, [r7, #12]
 8020c84:	429a      	cmp	r2, r3
 8020c86:	d204      	bcs.n	8020c92 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8020c88:	89bb      	ldrh	r3, [r7, #12]
 8020c8a:	4619      	mov	r1, r3
 8020c8c:	6878      	ldr	r0, [r7, #4]
 8020c8e:	f7fd fc4f 	bl	801e530 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	895b      	ldrh	r3, [r3, #10]
 8020c96:	89fa      	ldrh	r2, [r7, #14]
 8020c98:	429a      	cmp	r2, r3
 8020c9a:	d807      	bhi.n	8020cac <ip4_input+0x74>
 8020c9c:	687b      	ldr	r3, [r7, #4]
 8020c9e:	891b      	ldrh	r3, [r3, #8]
 8020ca0:	89ba      	ldrh	r2, [r7, #12]
 8020ca2:	429a      	cmp	r2, r3
 8020ca4:	d802      	bhi.n	8020cac <ip4_input+0x74>
 8020ca6:	89fb      	ldrh	r3, [r7, #14]
 8020ca8:	2b13      	cmp	r3, #19
 8020caa:	d804      	bhi.n	8020cb6 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8020cac:	6878      	ldr	r0, [r7, #4]
 8020cae:	f7fd fdc5 	bl	801e83c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8020cb2:	2300      	movs	r3, #0
 8020cb4:	e0d1      	b.n	8020e5a <ip4_input+0x222>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8020cb6:	697b      	ldr	r3, [r7, #20]
 8020cb8:	691b      	ldr	r3, [r3, #16]
 8020cba:	4a6a      	ldr	r2, [pc, #424]	; (8020e64 <ip4_input+0x22c>)
 8020cbc:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8020cbe:	697b      	ldr	r3, [r7, #20]
 8020cc0:	68db      	ldr	r3, [r3, #12]
 8020cc2:	4a68      	ldr	r2, [pc, #416]	; (8020e64 <ip4_input+0x22c>)
 8020cc4:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020cc6:	4b67      	ldr	r3, [pc, #412]	; (8020e64 <ip4_input+0x22c>)
 8020cc8:	695b      	ldr	r3, [r3, #20]
 8020cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020cce:	2be0      	cmp	r3, #224	; 0xe0
 8020cd0:	d112      	bne.n	8020cf8 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8020cd2:	683b      	ldr	r3, [r7, #0]
 8020cd4:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8020cd8:	f003 0301 	and.w	r3, r3, #1
 8020cdc:	b2db      	uxtb	r3, r3
 8020cde:	2b00      	cmp	r3, #0
 8020ce0:	d007      	beq.n	8020cf2 <ip4_input+0xba>
 8020ce2:	683b      	ldr	r3, [r7, #0]
 8020ce4:	3304      	adds	r3, #4
 8020ce6:	681b      	ldr	r3, [r3, #0]
 8020ce8:	2b00      	cmp	r3, #0
 8020cea:	d002      	beq.n	8020cf2 <ip4_input+0xba>
      netif = inp;
 8020cec:	683b      	ldr	r3, [r7, #0]
 8020cee:	613b      	str	r3, [r7, #16]
 8020cf0:	e02a      	b.n	8020d48 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020cf2:	2300      	movs	r3, #0
 8020cf4:	613b      	str	r3, [r7, #16]
 8020cf6:	e027      	b.n	8020d48 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8020cf8:	6838      	ldr	r0, [r7, #0]
 8020cfa:	f7ff ff73 	bl	8020be4 <ip4_input_accept>
 8020cfe:	4603      	mov	r3, r0
 8020d00:	2b00      	cmp	r3, #0
 8020d02:	d002      	beq.n	8020d0a <ip4_input+0xd2>
      netif = inp;
 8020d04:	683b      	ldr	r3, [r7, #0]
 8020d06:	613b      	str	r3, [r7, #16]
 8020d08:	e01e      	b.n	8020d48 <ip4_input+0x110>
    } else {
      netif = NULL;
 8020d0a:	2300      	movs	r3, #0
 8020d0c:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8020d0e:	4b55      	ldr	r3, [pc, #340]	; (8020e64 <ip4_input+0x22c>)
 8020d10:	695b      	ldr	r3, [r3, #20]
 8020d12:	b2db      	uxtb	r3, r3
 8020d14:	2b7f      	cmp	r3, #127	; 0x7f
 8020d16:	d017      	beq.n	8020d48 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8020d18:	4b53      	ldr	r3, [pc, #332]	; (8020e68 <ip4_input+0x230>)
 8020d1a:	681b      	ldr	r3, [r3, #0]
 8020d1c:	613b      	str	r3, [r7, #16]
 8020d1e:	e00e      	b.n	8020d3e <ip4_input+0x106>
          if (netif == inp) {
 8020d20:	693a      	ldr	r2, [r7, #16]
 8020d22:	683b      	ldr	r3, [r7, #0]
 8020d24:	429a      	cmp	r2, r3
 8020d26:	d006      	beq.n	8020d36 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8020d28:	6938      	ldr	r0, [r7, #16]
 8020d2a:	f7ff ff5b 	bl	8020be4 <ip4_input_accept>
 8020d2e:	4603      	mov	r3, r0
 8020d30:	2b00      	cmp	r3, #0
 8020d32:	d108      	bne.n	8020d46 <ip4_input+0x10e>
 8020d34:	e000      	b.n	8020d38 <ip4_input+0x100>
            continue;
 8020d36:	bf00      	nop
        NETIF_FOREACH(netif) {
 8020d38:	693b      	ldr	r3, [r7, #16]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	613b      	str	r3, [r7, #16]
 8020d3e:	693b      	ldr	r3, [r7, #16]
 8020d40:	2b00      	cmp	r3, #0
 8020d42:	d1ed      	bne.n	8020d20 <ip4_input+0xe8>
 8020d44:	e000      	b.n	8020d48 <ip4_input+0x110>
            break;
 8020d46:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8020d48:	4b46      	ldr	r3, [pc, #280]	; (8020e64 <ip4_input+0x22c>)
 8020d4a:	691b      	ldr	r3, [r3, #16]
 8020d4c:	6839      	ldr	r1, [r7, #0]
 8020d4e:	4618      	mov	r0, r3
 8020d50:	f000 f972 	bl	8021038 <ip4_addr_isbroadcast_u32>
 8020d54:	4603      	mov	r3, r0
 8020d56:	2b00      	cmp	r3, #0
 8020d58:	d105      	bne.n	8020d66 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8020d5a:	4b42      	ldr	r3, [pc, #264]	; (8020e64 <ip4_input+0x22c>)
 8020d5c:	691b      	ldr	r3, [r3, #16]
 8020d5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8020d62:	2be0      	cmp	r3, #224	; 0xe0
 8020d64:	d104      	bne.n	8020d70 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8020d66:	6878      	ldr	r0, [r7, #4]
 8020d68:	f7fd fd68 	bl	801e83c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8020d6c:	2300      	movs	r3, #0
 8020d6e:	e074      	b.n	8020e5a <ip4_input+0x222>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8020d70:	693b      	ldr	r3, [r7, #16]
 8020d72:	2b00      	cmp	r3, #0
 8020d74:	d104      	bne.n	8020d80 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8020d76:	6878      	ldr	r0, [r7, #4]
 8020d78:	f7fd fd60 	bl	801e83c <pbuf_free>
    return ERR_OK;
 8020d7c:	2300      	movs	r3, #0
 8020d7e:	e06c      	b.n	8020e5a <ip4_input+0x222>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8020d80:	697b      	ldr	r3, [r7, #20]
 8020d82:	88db      	ldrh	r3, [r3, #6]
 8020d84:	b29b      	uxth	r3, r3
 8020d86:	461a      	mov	r2, r3
 8020d88:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8020d8c:	4013      	ands	r3, r2
 8020d8e:	2b00      	cmp	r3, #0
 8020d90:	d00b      	beq.n	8020daa <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8020d92:	6878      	ldr	r0, [r7, #4]
 8020d94:	f000 fd26 	bl	80217e4 <ip4_reass>
 8020d98:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	2b00      	cmp	r3, #0
 8020d9e:	d101      	bne.n	8020da4 <ip4_input+0x16c>
      return ERR_OK;
 8020da0:	2300      	movs	r3, #0
 8020da2:	e05a      	b.n	8020e5a <ip4_input+0x222>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8020da4:	687b      	ldr	r3, [r7, #4]
 8020da6:	685b      	ldr	r3, [r3, #4]
 8020da8:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8020daa:	4a2e      	ldr	r2, [pc, #184]	; (8020e64 <ip4_input+0x22c>)
 8020dac:	693b      	ldr	r3, [r7, #16]
 8020dae:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8020db0:	4a2c      	ldr	r2, [pc, #176]	; (8020e64 <ip4_input+0x22c>)
 8020db2:	683b      	ldr	r3, [r7, #0]
 8020db4:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8020db6:	4a2b      	ldr	r2, [pc, #172]	; (8020e64 <ip4_input+0x22c>)
 8020db8:	697b      	ldr	r3, [r7, #20]
 8020dba:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8020dbc:	697b      	ldr	r3, [r7, #20]
 8020dbe:	781b      	ldrb	r3, [r3, #0]
 8020dc0:	f003 030f 	and.w	r3, r3, #15
 8020dc4:	b2db      	uxtb	r3, r3
 8020dc6:	009b      	lsls	r3, r3, #2
 8020dc8:	b2db      	uxtb	r3, r3
 8020dca:	b29a      	uxth	r2, r3
 8020dcc:	4b25      	ldr	r3, [pc, #148]	; (8020e64 <ip4_input+0x22c>)
 8020dce:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8020dd0:	89fb      	ldrh	r3, [r7, #14]
 8020dd2:	4619      	mov	r1, r3
 8020dd4:	6878      	ldr	r0, [r7, #4]
 8020dd6:	f7fd fcab 	bl	801e730 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8020dda:	697b      	ldr	r3, [r7, #20]
 8020ddc:	7a5b      	ldrb	r3, [r3, #9]
 8020dde:	2b01      	cmp	r3, #1
 8020de0:	d006      	beq.n	8020df0 <ip4_input+0x1b8>
 8020de2:	2b11      	cmp	r3, #17
 8020de4:	d109      	bne.n	8020dfa <ip4_input+0x1c2>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8020de6:	6839      	ldr	r1, [r7, #0]
 8020de8:	6878      	ldr	r0, [r7, #4]
 8020dea:	f7fe f9b5 	bl	801f158 <udp_input>
        break;
 8020dee:	e021      	b.n	8020e34 <ip4_input+0x1fc>
        break;
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8020df0:	6839      	ldr	r1, [r7, #0]
 8020df2:	6878      	ldr	r0, [r7, #4]
 8020df4:	f7ff fcf8 	bl	80207e8 <icmp_input>
        break;
 8020df8:	e01c      	b.n	8020e34 <ip4_input+0x1fc>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020dfa:	4b1a      	ldr	r3, [pc, #104]	; (8020e64 <ip4_input+0x22c>)
 8020dfc:	695b      	ldr	r3, [r3, #20]
 8020dfe:	6939      	ldr	r1, [r7, #16]
 8020e00:	4618      	mov	r0, r3
 8020e02:	f000 f919 	bl	8021038 <ip4_addr_isbroadcast_u32>
 8020e06:	4603      	mov	r3, r0
 8020e08:	2b00      	cmp	r3, #0
 8020e0a:	d10f      	bne.n	8020e2c <ip4_input+0x1f4>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8020e0c:	4b15      	ldr	r3, [pc, #84]	; (8020e64 <ip4_input+0x22c>)
 8020e0e:	695b      	ldr	r3, [r3, #20]
 8020e10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8020e14:	2be0      	cmp	r3, #224	; 0xe0
 8020e16:	d009      	beq.n	8020e2c <ip4_input+0x1f4>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8020e18:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8020e1c:	4619      	mov	r1, r3
 8020e1e:	6878      	ldr	r0, [r7, #4]
 8020e20:	f7fd fcf9 	bl	801e816 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8020e24:	2102      	movs	r1, #2
 8020e26:	6878      	ldr	r0, [r7, #4]
 8020e28:	f7ff fde2 	bl	80209f0 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8020e2c:	6878      	ldr	r0, [r7, #4]
 8020e2e:	f7fd fd05 	bl	801e83c <pbuf_free>
        break;
 8020e32:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8020e34:	4b0b      	ldr	r3, [pc, #44]	; (8020e64 <ip4_input+0x22c>)
 8020e36:	2200      	movs	r2, #0
 8020e38:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8020e3a:	4b0a      	ldr	r3, [pc, #40]	; (8020e64 <ip4_input+0x22c>)
 8020e3c:	2200      	movs	r2, #0
 8020e3e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8020e40:	4b08      	ldr	r3, [pc, #32]	; (8020e64 <ip4_input+0x22c>)
 8020e42:	2200      	movs	r2, #0
 8020e44:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8020e46:	4b07      	ldr	r3, [pc, #28]	; (8020e64 <ip4_input+0x22c>)
 8020e48:	2200      	movs	r2, #0
 8020e4a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8020e4c:	4b05      	ldr	r3, [pc, #20]	; (8020e64 <ip4_input+0x22c>)
 8020e4e:	2200      	movs	r2, #0
 8020e50:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8020e52:	4b04      	ldr	r3, [pc, #16]	; (8020e64 <ip4_input+0x22c>)
 8020e54:	2200      	movs	r2, #0
 8020e56:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8020e58:	2300      	movs	r3, #0
}
 8020e5a:	4618      	mov	r0, r3
 8020e5c:	3718      	adds	r7, #24
 8020e5e:	46bd      	mov	sp, r7
 8020e60:	bd80      	pop	{r7, pc}
 8020e62:	bf00      	nop
 8020e64:	2001075c 	.word	0x2001075c
 8020e68:	20013d6c 	.word	0x20013d6c

08020e6c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8020e6c:	b580      	push	{r7, lr}
 8020e6e:	b08a      	sub	sp, #40	; 0x28
 8020e70:	af04      	add	r7, sp, #16
 8020e72:	60f8      	str	r0, [r7, #12]
 8020e74:	60b9      	str	r1, [r7, #8]
 8020e76:	607a      	str	r2, [r7, #4]
 8020e78:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8020e7a:	68bb      	ldr	r3, [r7, #8]
 8020e7c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8020e7e:	687b      	ldr	r3, [r7, #4]
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d009      	beq.n	8020e98 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8020e84:	68bb      	ldr	r3, [r7, #8]
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d003      	beq.n	8020e92 <ip4_output_if+0x26>
 8020e8a:	68bb      	ldr	r3, [r7, #8]
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	d102      	bne.n	8020e98 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8020e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e94:	3304      	adds	r3, #4
 8020e96:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8020e98:	78fa      	ldrb	r2, [r7, #3]
 8020e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8020e9c:	9302      	str	r3, [sp, #8]
 8020e9e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8020ea2:	9301      	str	r3, [sp, #4]
 8020ea4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8020ea8:	9300      	str	r3, [sp, #0]
 8020eaa:	4613      	mov	r3, r2
 8020eac:	687a      	ldr	r2, [r7, #4]
 8020eae:	6979      	ldr	r1, [r7, #20]
 8020eb0:	68f8      	ldr	r0, [r7, #12]
 8020eb2:	f000 f805 	bl	8020ec0 <ip4_output_if_src>
 8020eb6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8020eb8:	4618      	mov	r0, r3
 8020eba:	3718      	adds	r7, #24
 8020ebc:	46bd      	mov	sp, r7
 8020ebe:	bd80      	pop	{r7, pc}

08020ec0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8020ec0:	b580      	push	{r7, lr}
 8020ec2:	b088      	sub	sp, #32
 8020ec4:	af00      	add	r7, sp, #0
 8020ec6:	60f8      	str	r0, [r7, #12]
 8020ec8:	60b9      	str	r1, [r7, #8]
 8020eca:	607a      	str	r2, [r7, #4]
 8020ecc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8020ece:	68fb      	ldr	r3, [r7, #12]
 8020ed0:	7b9b      	ldrb	r3, [r3, #14]
 8020ed2:	2b01      	cmp	r3, #1
 8020ed4:	d006      	beq.n	8020ee4 <ip4_output_if_src+0x24>
 8020ed6:	4b52      	ldr	r3, [pc, #328]	; (8021020 <ip4_output_if_src+0x160>)
 8020ed8:	f44f 7255 	mov.w	r2, #852	; 0x354
 8020edc:	4951      	ldr	r1, [pc, #324]	; (8021024 <ip4_output_if_src+0x164>)
 8020ede:	4852      	ldr	r0, [pc, #328]	; (8021028 <ip4_output_if_src+0x168>)
 8020ee0:	f001 f9e4 	bl	80222ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8020ee4:	687b      	ldr	r3, [r7, #4]
 8020ee6:	2b00      	cmp	r3, #0
 8020ee8:	d060      	beq.n	8020fac <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8020eea:	2314      	movs	r3, #20
 8020eec:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8020eee:	2114      	movs	r1, #20
 8020ef0:	68f8      	ldr	r0, [r7, #12]
 8020ef2:	f7fd fc0d 	bl	801e710 <pbuf_add_header>
 8020ef6:	4603      	mov	r3, r0
 8020ef8:	2b00      	cmp	r3, #0
 8020efa:	d002      	beq.n	8020f02 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020efc:	f06f 0301 	mvn.w	r3, #1
 8020f00:	e089      	b.n	8021016 <ip4_output_if_src+0x156>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8020f02:	68fb      	ldr	r3, [r7, #12]
 8020f04:	685b      	ldr	r3, [r3, #4]
 8020f06:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8020f08:	68fb      	ldr	r3, [r7, #12]
 8020f0a:	895b      	ldrh	r3, [r3, #10]
 8020f0c:	2b13      	cmp	r3, #19
 8020f0e:	d806      	bhi.n	8020f1e <ip4_output_if_src+0x5e>
 8020f10:	4b43      	ldr	r3, [pc, #268]	; (8021020 <ip4_output_if_src+0x160>)
 8020f12:	f44f 7262 	mov.w	r2, #904	; 0x388
 8020f16:	4945      	ldr	r1, [pc, #276]	; (802102c <ip4_output_if_src+0x16c>)
 8020f18:	4843      	ldr	r0, [pc, #268]	; (8021028 <ip4_output_if_src+0x168>)
 8020f1a:	f001 f9c7 	bl	80222ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8020f1e:	69fb      	ldr	r3, [r7, #28]
 8020f20:	78fa      	ldrb	r2, [r7, #3]
 8020f22:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8020f24:	69fb      	ldr	r3, [r7, #28]
 8020f26:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8020f2a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8020f2c:	687b      	ldr	r3, [r7, #4]
 8020f2e:	681a      	ldr	r2, [r3, #0]
 8020f30:	69fb      	ldr	r3, [r7, #28]
 8020f32:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8020f34:	8b7b      	ldrh	r3, [r7, #26]
 8020f36:	089b      	lsrs	r3, r3, #2
 8020f38:	b29b      	uxth	r3, r3
 8020f3a:	b2db      	uxtb	r3, r3
 8020f3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8020f40:	b2da      	uxtb	r2, r3
 8020f42:	69fb      	ldr	r3, [r7, #28]
 8020f44:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8020f46:	69fb      	ldr	r3, [r7, #28]
 8020f48:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8020f4c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8020f4e:	68fb      	ldr	r3, [r7, #12]
 8020f50:	891b      	ldrh	r3, [r3, #8]
 8020f52:	4618      	mov	r0, r3
 8020f54:	f7fc f896 	bl	801d084 <lwip_htons>
 8020f58:	4603      	mov	r3, r0
 8020f5a:	461a      	mov	r2, r3
 8020f5c:	69fb      	ldr	r3, [r7, #28]
 8020f5e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8020f60:	69fb      	ldr	r3, [r7, #28]
 8020f62:	2200      	movs	r2, #0
 8020f64:	719a      	strb	r2, [r3, #6]
 8020f66:	2200      	movs	r2, #0
 8020f68:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8020f6a:	4b31      	ldr	r3, [pc, #196]	; (8021030 <ip4_output_if_src+0x170>)
 8020f6c:	881b      	ldrh	r3, [r3, #0]
 8020f6e:	4618      	mov	r0, r3
 8020f70:	f7fc f888 	bl	801d084 <lwip_htons>
 8020f74:	4603      	mov	r3, r0
 8020f76:	461a      	mov	r2, r3
 8020f78:	69fb      	ldr	r3, [r7, #28]
 8020f7a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8020f7c:	4b2c      	ldr	r3, [pc, #176]	; (8021030 <ip4_output_if_src+0x170>)
 8020f7e:	881b      	ldrh	r3, [r3, #0]
 8020f80:	3301      	adds	r3, #1
 8020f82:	b29a      	uxth	r2, r3
 8020f84:	4b2a      	ldr	r3, [pc, #168]	; (8021030 <ip4_output_if_src+0x170>)
 8020f86:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8020f88:	68bb      	ldr	r3, [r7, #8]
 8020f8a:	2b00      	cmp	r3, #0
 8020f8c:	d104      	bne.n	8020f98 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8020f8e:	4b29      	ldr	r3, [pc, #164]	; (8021034 <ip4_output_if_src+0x174>)
 8020f90:	681a      	ldr	r2, [r3, #0]
 8020f92:	69fb      	ldr	r3, [r7, #28]
 8020f94:	60da      	str	r2, [r3, #12]
 8020f96:	e003      	b.n	8020fa0 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8020f98:	68bb      	ldr	r3, [r7, #8]
 8020f9a:	681a      	ldr	r2, [r3, #0]
 8020f9c:	69fb      	ldr	r3, [r7, #28]
 8020f9e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8020fa0:	69fb      	ldr	r3, [r7, #28]
 8020fa2:	2200      	movs	r2, #0
 8020fa4:	729a      	strb	r2, [r3, #10]
 8020fa6:	2200      	movs	r2, #0
 8020fa8:	72da      	strb	r2, [r3, #11]
 8020faa:	e00f      	b.n	8020fcc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8020fac:	68fb      	ldr	r3, [r7, #12]
 8020fae:	895b      	ldrh	r3, [r3, #10]
 8020fb0:	2b13      	cmp	r3, #19
 8020fb2:	d802      	bhi.n	8020fba <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8020fb4:	f06f 0301 	mvn.w	r3, #1
 8020fb8:	e02d      	b.n	8021016 <ip4_output_if_src+0x156>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8020fba:	68fb      	ldr	r3, [r7, #12]
 8020fbc:	685b      	ldr	r3, [r3, #4]
 8020fbe:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8020fc0:	69fb      	ldr	r3, [r7, #28]
 8020fc2:	691b      	ldr	r3, [r3, #16]
 8020fc4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8020fc6:	f107 0314 	add.w	r3, r7, #20
 8020fca:	607b      	str	r3, [r7, #4]

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: %c%c%"U16_F"\n", netif->name[0], netif->name[1], (u16_t)netif->num));
  ip4_debug_print(p);

#if ENABLE_LOOPBACK
  if (ip4_addr_cmp(dest, netif_ip4_addr(netif))
 8020fcc:	687b      	ldr	r3, [r7, #4]
 8020fce:	681a      	ldr	r2, [r3, #0]
 8020fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fd2:	3304      	adds	r3, #4
 8020fd4:	681b      	ldr	r3, [r3, #0]
 8020fd6:	429a      	cmp	r2, r3
 8020fd8:	d105      	bne.n	8020fe6 <ip4_output_if_src+0x126>
      || ip4_addr_isloopback(dest)
#endif /* !LWIP_HAVE_LOOPIF */
     ) {
    /* Packet to self, enqueue it for loopback */
    LWIP_DEBUGF(IP_DEBUG, ("netif_loop_output()"));
    return netif_loop_output(netif, p);
 8020fda:	68f9      	ldr	r1, [r7, #12]
 8020fdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8020fde:	f7fd f86f 	bl	801e0c0 <netif_loop_output>
 8020fe2:	4603      	mov	r3, r0
 8020fe4:	e017      	b.n	8021016 <ip4_output_if_src+0x156>
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8020fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020fea:	2b00      	cmp	r3, #0
 8020fec:	d00c      	beq.n	8021008 <ip4_output_if_src+0x148>
 8020fee:	68fb      	ldr	r3, [r7, #12]
 8020ff0:	891a      	ldrh	r2, [r3, #8]
 8020ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8020ff4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8020ff6:	429a      	cmp	r2, r3
 8020ff8:	d906      	bls.n	8021008 <ip4_output_if_src+0x148>
    return ip4_frag(p, netif, dest);
 8020ffa:	687a      	ldr	r2, [r7, #4]
 8020ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8020ffe:	68f8      	ldr	r0, [r7, #12]
 8021000:	f000 fde4 	bl	8021bcc <ip4_frag>
 8021004:	4603      	mov	r3, r0
 8021006:	e006      	b.n	8021016 <ip4_output_if_src+0x156>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802100a:	695b      	ldr	r3, [r3, #20]
 802100c:	687a      	ldr	r2, [r7, #4]
 802100e:	68f9      	ldr	r1, [r7, #12]
 8021010:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021012:	4798      	blx	r3
 8021014:	4603      	mov	r3, r0
}
 8021016:	4618      	mov	r0, r3
 8021018:	3720      	adds	r7, #32
 802101a:	46bd      	mov	sp, r7
 802101c:	bd80      	pop	{r7, pc}
 802101e:	bf00      	nop
 8021020:	08028330 	.word	0x08028330
 8021024:	08028394 	.word	0x08028394
 8021028:	080283a0 	.word	0x080283a0
 802102c:	080283c8 	.word	0x080283c8
 8021030:	20014276 	.word	0x20014276
 8021034:	08028bc4 	.word	0x08028bc4

08021038 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021038:	b480      	push	{r7}
 802103a:	b085      	sub	sp, #20
 802103c:	af00      	add	r7, sp, #0
 802103e:	6078      	str	r0, [r7, #4]
 8021040:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8021042:	687b      	ldr	r3, [r7, #4]
 8021044:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021046:	687b      	ldr	r3, [r7, #4]
 8021048:	f1b3 3fff 	cmp.w	r3, #4294967295
 802104c:	d002      	beq.n	8021054 <ip4_addr_isbroadcast_u32+0x1c>
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	2b00      	cmp	r3, #0
 8021052:	d101      	bne.n	8021058 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8021054:	2301      	movs	r3, #1
 8021056:	e02a      	b.n	80210ae <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021058:	683b      	ldr	r3, [r7, #0]
 802105a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 802105e:	f003 0302 	and.w	r3, r3, #2
 8021062:	2b00      	cmp	r3, #0
 8021064:	d101      	bne.n	802106a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8021066:	2300      	movs	r3, #0
 8021068:	e021      	b.n	80210ae <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 802106a:	683b      	ldr	r3, [r7, #0]
 802106c:	3304      	adds	r3, #4
 802106e:	681b      	ldr	r3, [r3, #0]
 8021070:	687a      	ldr	r2, [r7, #4]
 8021072:	429a      	cmp	r2, r3
 8021074:	d101      	bne.n	802107a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8021076:	2300      	movs	r3, #0
 8021078:	e019      	b.n	80210ae <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 802107a:	68fa      	ldr	r2, [r7, #12]
 802107c:	683b      	ldr	r3, [r7, #0]
 802107e:	3304      	adds	r3, #4
 8021080:	681b      	ldr	r3, [r3, #0]
 8021082:	405a      	eors	r2, r3
 8021084:	683b      	ldr	r3, [r7, #0]
 8021086:	3308      	adds	r3, #8
 8021088:	681b      	ldr	r3, [r3, #0]
 802108a:	4013      	ands	r3, r2
 802108c:	2b00      	cmp	r3, #0
 802108e:	d10d      	bne.n	80210ac <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021090:	683b      	ldr	r3, [r7, #0]
 8021092:	3308      	adds	r3, #8
 8021094:	681b      	ldr	r3, [r3, #0]
 8021096:	43da      	mvns	r2, r3
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 802109c:	683b      	ldr	r3, [r7, #0]
 802109e:	3308      	adds	r3, #8
 80210a0:	681b      	ldr	r3, [r3, #0]
 80210a2:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80210a4:	429a      	cmp	r2, r3
 80210a6:	d101      	bne.n	80210ac <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80210a8:	2301      	movs	r3, #1
 80210aa:	e000      	b.n	80210ae <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80210ac:	2300      	movs	r3, #0
  }
}
 80210ae:	4618      	mov	r0, r3
 80210b0:	3714      	adds	r7, #20
 80210b2:	46bd      	mov	sp, r7
 80210b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80210b8:	4770      	bx	lr
	...

080210bc <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80210bc:	b580      	push	{r7, lr}
 80210be:	b082      	sub	sp, #8
 80210c0:	af00      	add	r7, sp, #0
 80210c2:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 80210c4:	2210      	movs	r2, #16
 80210c6:	4904      	ldr	r1, [pc, #16]	; (80210d8 <ip4addr_ntoa+0x1c>)
 80210c8:	6878      	ldr	r0, [r7, #4]
 80210ca:	f000 f807 	bl	80210dc <ip4addr_ntoa_r>
 80210ce:	4603      	mov	r3, r0
}
 80210d0:	4618      	mov	r0, r3
 80210d2:	3708      	adds	r7, #8
 80210d4:	46bd      	mov	sp, r7
 80210d6:	bd80      	pop	{r7, pc}
 80210d8:	20014278 	.word	0x20014278

080210dc <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 80210dc:	b480      	push	{r7}
 80210de:	b08d      	sub	sp, #52	; 0x34
 80210e0:	af00      	add	r7, sp, #0
 80210e2:	60f8      	str	r0, [r7, #12]
 80210e4:	60b9      	str	r1, [r7, #8]
 80210e6:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 80210e8:	2300      	movs	r3, #0
 80210ea:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 80210ec:	68fb      	ldr	r3, [r7, #12]
 80210ee:	681b      	ldr	r3, [r3, #0]
 80210f0:	61bb      	str	r3, [r7, #24]

  rp = buf;
 80210f2:	68bb      	ldr	r3, [r7, #8]
 80210f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 80210f6:	f107 0318 	add.w	r3, r7, #24
 80210fa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80210fc:	2300      	movs	r3, #0
 80210fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021102:	e058      	b.n	80211b6 <ip4addr_ntoa_r+0xda>
    i = 0;
 8021104:	2300      	movs	r3, #0
 8021106:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 802110a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802110c:	781a      	ldrb	r2, [r3, #0]
 802110e:	4b32      	ldr	r3, [pc, #200]	; (80211d8 <ip4addr_ntoa_r+0xfc>)
 8021110:	fba3 1302 	umull	r1, r3, r3, r2
 8021114:	08d9      	lsrs	r1, r3, #3
 8021116:	460b      	mov	r3, r1
 8021118:	009b      	lsls	r3, r3, #2
 802111a:	440b      	add	r3, r1
 802111c:	005b      	lsls	r3, r3, #1
 802111e:	1ad3      	subs	r3, r2, r3
 8021120:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 8021122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021124:	781b      	ldrb	r3, [r3, #0]
 8021126:	4a2c      	ldr	r2, [pc, #176]	; (80211d8 <ip4addr_ntoa_r+0xfc>)
 8021128:	fba2 2303 	umull	r2, r3, r2, r3
 802112c:	08db      	lsrs	r3, r3, #3
 802112e:	b2da      	uxtb	r2, r3
 8021130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021132:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8021134:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021138:	1c5a      	adds	r2, r3, #1
 802113a:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 802113e:	4619      	mov	r1, r3
 8021140:	7ffb      	ldrb	r3, [r7, #31]
 8021142:	3330      	adds	r3, #48	; 0x30
 8021144:	b2da      	uxtb	r2, r3
 8021146:	f101 0330 	add.w	r3, r1, #48	; 0x30
 802114a:	443b      	add	r3, r7
 802114c:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 8021150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021152:	781b      	ldrb	r3, [r3, #0]
 8021154:	2b00      	cmp	r3, #0
 8021156:	d1d8      	bne.n	802110a <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8021158:	e011      	b.n	802117e <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 802115a:	6a3b      	ldr	r3, [r7, #32]
 802115c:	1c5a      	adds	r2, r3, #1
 802115e:	623a      	str	r2, [r7, #32]
 8021160:	687a      	ldr	r2, [r7, #4]
 8021162:	429a      	cmp	r2, r3
 8021164:	dc01      	bgt.n	802116a <ip4addr_ntoa_r+0x8e>
        return NULL;
 8021166:	2300      	movs	r3, #0
 8021168:	e030      	b.n	80211cc <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 802116a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 802116e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021170:	1c59      	adds	r1, r3, #1
 8021172:	62f9      	str	r1, [r7, #44]	; 0x2c
 8021174:	3230      	adds	r2, #48	; 0x30
 8021176:	443a      	add	r2, r7
 8021178:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 802117c:	701a      	strb	r2, [r3, #0]
    while (i--) {
 802117e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8021182:	1e5a      	subs	r2, r3, #1
 8021184:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 8021188:	2b00      	cmp	r3, #0
 802118a:	d1e6      	bne.n	802115a <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 802118c:	6a3b      	ldr	r3, [r7, #32]
 802118e:	1c5a      	adds	r2, r3, #1
 8021190:	623a      	str	r2, [r7, #32]
 8021192:	687a      	ldr	r2, [r7, #4]
 8021194:	429a      	cmp	r2, r3
 8021196:	dc01      	bgt.n	802119c <ip4addr_ntoa_r+0xc0>
      return NULL;
 8021198:	2300      	movs	r3, #0
 802119a:	e017      	b.n	80211cc <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 802119c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802119e:	1c5a      	adds	r2, r3, #1
 80211a0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80211a2:	222e      	movs	r2, #46	; 0x2e
 80211a4:	701a      	strb	r2, [r3, #0]
    ap++;
 80211a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80211a8:	3301      	adds	r3, #1
 80211aa:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80211ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80211b0:	3301      	adds	r3, #1
 80211b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80211b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80211ba:	2b03      	cmp	r3, #3
 80211bc:	d9a2      	bls.n	8021104 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80211be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211c0:	3b01      	subs	r3, #1
 80211c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80211c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80211c6:	2200      	movs	r2, #0
 80211c8:	701a      	strb	r2, [r3, #0]
  return buf;
 80211ca:	68bb      	ldr	r3, [r7, #8]
}
 80211cc:	4618      	mov	r0, r3
 80211ce:	3734      	adds	r7, #52	; 0x34
 80211d0:	46bd      	mov	sp, r7
 80211d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d6:	4770      	bx	lr
 80211d8:	cccccccd 	.word	0xcccccccd

080211dc <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80211dc:	b580      	push	{r7, lr}
 80211de:	b084      	sub	sp, #16
 80211e0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80211e2:	2300      	movs	r3, #0
 80211e4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80211e6:	4b12      	ldr	r3, [pc, #72]	; (8021230 <ip_reass_tmr+0x54>)
 80211e8:	681b      	ldr	r3, [r3, #0]
 80211ea:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80211ec:	e018      	b.n	8021220 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80211ee:	68fb      	ldr	r3, [r7, #12]
 80211f0:	7fdb      	ldrb	r3, [r3, #31]
 80211f2:	2b00      	cmp	r3, #0
 80211f4:	d00b      	beq.n	802120e <ip_reass_tmr+0x32>
      r->timer--;
 80211f6:	68fb      	ldr	r3, [r7, #12]
 80211f8:	7fdb      	ldrb	r3, [r3, #31]
 80211fa:	3b01      	subs	r3, #1
 80211fc:	b2da      	uxtb	r2, r3
 80211fe:	68fb      	ldr	r3, [r7, #12]
 8021200:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8021202:	68fb      	ldr	r3, [r7, #12]
 8021204:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021206:	68fb      	ldr	r3, [r7, #12]
 8021208:	681b      	ldr	r3, [r3, #0]
 802120a:	60fb      	str	r3, [r7, #12]
 802120c:	e008      	b.n	8021220 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 802120e:	68fb      	ldr	r3, [r7, #12]
 8021210:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8021212:	68fb      	ldr	r3, [r7, #12]
 8021214:	681b      	ldr	r3, [r3, #0]
 8021216:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021218:	68b9      	ldr	r1, [r7, #8]
 802121a:	6878      	ldr	r0, [r7, #4]
 802121c:	f000 f80a 	bl	8021234 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021220:	68fb      	ldr	r3, [r7, #12]
 8021222:	2b00      	cmp	r3, #0
 8021224:	d1e3      	bne.n	80211ee <ip_reass_tmr+0x12>
    }
  }
}
 8021226:	bf00      	nop
 8021228:	bf00      	nop
 802122a:	3710      	adds	r7, #16
 802122c:	46bd      	mov	sp, r7
 802122e:	bd80      	pop	{r7, pc}
 8021230:	20014288 	.word	0x20014288

08021234 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021234:	b580      	push	{r7, lr}
 8021236:	b088      	sub	sp, #32
 8021238:	af00      	add	r7, sp, #0
 802123a:	6078      	str	r0, [r7, #4]
 802123c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 802123e:	2300      	movs	r3, #0
 8021240:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021242:	683a      	ldr	r2, [r7, #0]
 8021244:	687b      	ldr	r3, [r7, #4]
 8021246:	429a      	cmp	r2, r3
 8021248:	d105      	bne.n	8021256 <ip_reass_free_complete_datagram+0x22>
 802124a:	4b45      	ldr	r3, [pc, #276]	; (8021360 <ip_reass_free_complete_datagram+0x12c>)
 802124c:	22ab      	movs	r2, #171	; 0xab
 802124e:	4945      	ldr	r1, [pc, #276]	; (8021364 <ip_reass_free_complete_datagram+0x130>)
 8021250:	4845      	ldr	r0, [pc, #276]	; (8021368 <ip_reass_free_complete_datagram+0x134>)
 8021252:	f001 f82b 	bl	80222ac <iprintf>
  if (prev != NULL) {
 8021256:	683b      	ldr	r3, [r7, #0]
 8021258:	2b00      	cmp	r3, #0
 802125a:	d00a      	beq.n	8021272 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 802125c:	683b      	ldr	r3, [r7, #0]
 802125e:	681b      	ldr	r3, [r3, #0]
 8021260:	687a      	ldr	r2, [r7, #4]
 8021262:	429a      	cmp	r2, r3
 8021264:	d005      	beq.n	8021272 <ip_reass_free_complete_datagram+0x3e>
 8021266:	4b3e      	ldr	r3, [pc, #248]	; (8021360 <ip_reass_free_complete_datagram+0x12c>)
 8021268:	22ad      	movs	r2, #173	; 0xad
 802126a:	4940      	ldr	r1, [pc, #256]	; (802136c <ip_reass_free_complete_datagram+0x138>)
 802126c:	483e      	ldr	r0, [pc, #248]	; (8021368 <ip_reass_free_complete_datagram+0x134>)
 802126e:	f001 f81d 	bl	80222ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021272:	687b      	ldr	r3, [r7, #4]
 8021274:	685b      	ldr	r3, [r3, #4]
 8021276:	685b      	ldr	r3, [r3, #4]
 8021278:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 802127a:	697b      	ldr	r3, [r7, #20]
 802127c:	889b      	ldrh	r3, [r3, #4]
 802127e:	b29b      	uxth	r3, r3
 8021280:	2b00      	cmp	r3, #0
 8021282:	d12a      	bne.n	80212da <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021284:	687b      	ldr	r3, [r7, #4]
 8021286:	685b      	ldr	r3, [r3, #4]
 8021288:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 802128a:	697b      	ldr	r3, [r7, #20]
 802128c:	681a      	ldr	r2, [r3, #0]
 802128e:	687b      	ldr	r3, [r7, #4]
 8021290:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021292:	69bb      	ldr	r3, [r7, #24]
 8021294:	6858      	ldr	r0, [r3, #4]
 8021296:	687b      	ldr	r3, [r7, #4]
 8021298:	3308      	adds	r3, #8
 802129a:	2214      	movs	r2, #20
 802129c:	4619      	mov	r1, r3
 802129e:	f000 fef5 	bl	802208c <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 80212a2:	2101      	movs	r1, #1
 80212a4:	69b8      	ldr	r0, [r7, #24]
 80212a6:	f7ff fbb3 	bl	8020a10 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 80212aa:	69b8      	ldr	r0, [r7, #24]
 80212ac:	f7fd fb4e 	bl	801e94c <pbuf_clen>
 80212b0:	4603      	mov	r3, r0
 80212b2:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80212b4:	8bfa      	ldrh	r2, [r7, #30]
 80212b6:	8a7b      	ldrh	r3, [r7, #18]
 80212b8:	4413      	add	r3, r2
 80212ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80212be:	db05      	blt.n	80212cc <ip_reass_free_complete_datagram+0x98>
 80212c0:	4b27      	ldr	r3, [pc, #156]	; (8021360 <ip_reass_free_complete_datagram+0x12c>)
 80212c2:	22bc      	movs	r2, #188	; 0xbc
 80212c4:	492a      	ldr	r1, [pc, #168]	; (8021370 <ip_reass_free_complete_datagram+0x13c>)
 80212c6:	4828      	ldr	r0, [pc, #160]	; (8021368 <ip_reass_free_complete_datagram+0x134>)
 80212c8:	f000 fff0 	bl	80222ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80212cc:	8bfa      	ldrh	r2, [r7, #30]
 80212ce:	8a7b      	ldrh	r3, [r7, #18]
 80212d0:	4413      	add	r3, r2
 80212d2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80212d4:	69b8      	ldr	r0, [r7, #24]
 80212d6:	f7fd fab1 	bl	801e83c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80212da:	687b      	ldr	r3, [r7, #4]
 80212dc:	685b      	ldr	r3, [r3, #4]
 80212de:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80212e0:	e01f      	b.n	8021322 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80212e2:	69bb      	ldr	r3, [r7, #24]
 80212e4:	685b      	ldr	r3, [r3, #4]
 80212e6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80212e8:	69bb      	ldr	r3, [r7, #24]
 80212ea:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80212ec:	697b      	ldr	r3, [r7, #20]
 80212ee:	681b      	ldr	r3, [r3, #0]
 80212f0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80212f2:	68f8      	ldr	r0, [r7, #12]
 80212f4:	f7fd fb2a 	bl	801e94c <pbuf_clen>
 80212f8:	4603      	mov	r3, r0
 80212fa:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80212fc:	8bfa      	ldrh	r2, [r7, #30]
 80212fe:	8a7b      	ldrh	r3, [r7, #18]
 8021300:	4413      	add	r3, r2
 8021302:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021306:	db05      	blt.n	8021314 <ip_reass_free_complete_datagram+0xe0>
 8021308:	4b15      	ldr	r3, [pc, #84]	; (8021360 <ip_reass_free_complete_datagram+0x12c>)
 802130a:	22cc      	movs	r2, #204	; 0xcc
 802130c:	4918      	ldr	r1, [pc, #96]	; (8021370 <ip_reass_free_complete_datagram+0x13c>)
 802130e:	4816      	ldr	r0, [pc, #88]	; (8021368 <ip_reass_free_complete_datagram+0x134>)
 8021310:	f000 ffcc 	bl	80222ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021314:	8bfa      	ldrh	r2, [r7, #30]
 8021316:	8a7b      	ldrh	r3, [r7, #18]
 8021318:	4413      	add	r3, r2
 802131a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 802131c:	68f8      	ldr	r0, [r7, #12]
 802131e:	f7fd fa8d 	bl	801e83c <pbuf_free>
  while (p != NULL) {
 8021322:	69bb      	ldr	r3, [r7, #24]
 8021324:	2b00      	cmp	r3, #0
 8021326:	d1dc      	bne.n	80212e2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021328:	6839      	ldr	r1, [r7, #0]
 802132a:	6878      	ldr	r0, [r7, #4]
 802132c:	f000 f8c2 	bl	80214b4 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021330:	4b10      	ldr	r3, [pc, #64]	; (8021374 <ip_reass_free_complete_datagram+0x140>)
 8021332:	881b      	ldrh	r3, [r3, #0]
 8021334:	8bfa      	ldrh	r2, [r7, #30]
 8021336:	429a      	cmp	r2, r3
 8021338:	d905      	bls.n	8021346 <ip_reass_free_complete_datagram+0x112>
 802133a:	4b09      	ldr	r3, [pc, #36]	; (8021360 <ip_reass_free_complete_datagram+0x12c>)
 802133c:	22d2      	movs	r2, #210	; 0xd2
 802133e:	490e      	ldr	r1, [pc, #56]	; (8021378 <ip_reass_free_complete_datagram+0x144>)
 8021340:	4809      	ldr	r0, [pc, #36]	; (8021368 <ip_reass_free_complete_datagram+0x134>)
 8021342:	f000 ffb3 	bl	80222ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021346:	4b0b      	ldr	r3, [pc, #44]	; (8021374 <ip_reass_free_complete_datagram+0x140>)
 8021348:	881a      	ldrh	r2, [r3, #0]
 802134a:	8bfb      	ldrh	r3, [r7, #30]
 802134c:	1ad3      	subs	r3, r2, r3
 802134e:	b29a      	uxth	r2, r3
 8021350:	4b08      	ldr	r3, [pc, #32]	; (8021374 <ip_reass_free_complete_datagram+0x140>)
 8021352:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021354:	8bfb      	ldrh	r3, [r7, #30]
}
 8021356:	4618      	mov	r0, r3
 8021358:	3720      	adds	r7, #32
 802135a:	46bd      	mov	sp, r7
 802135c:	bd80      	pop	{r7, pc}
 802135e:	bf00      	nop
 8021360:	080283f8 	.word	0x080283f8
 8021364:	08028460 	.word	0x08028460
 8021368:	0802846c 	.word	0x0802846c
 802136c:	08028494 	.word	0x08028494
 8021370:	080284a8 	.word	0x080284a8
 8021374:	2001428c 	.word	0x2001428c
 8021378:	080284c8 	.word	0x080284c8

0802137c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 802137c:	b580      	push	{r7, lr}
 802137e:	b08a      	sub	sp, #40	; 0x28
 8021380:	af00      	add	r7, sp, #0
 8021382:	6078      	str	r0, [r7, #4]
 8021384:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021386:	2300      	movs	r3, #0
 8021388:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 802138a:	2300      	movs	r3, #0
 802138c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 802138e:	2300      	movs	r3, #0
 8021390:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021392:	2300      	movs	r3, #0
 8021394:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021396:	2300      	movs	r3, #0
 8021398:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 802139a:	4b28      	ldr	r3, [pc, #160]	; (802143c <ip_reass_remove_oldest_datagram+0xc0>)
 802139c:	681b      	ldr	r3, [r3, #0]
 802139e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80213a0:	e030      	b.n	8021404 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 80213a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213a4:	695a      	ldr	r2, [r3, #20]
 80213a6:	687b      	ldr	r3, [r7, #4]
 80213a8:	68db      	ldr	r3, [r3, #12]
 80213aa:	429a      	cmp	r2, r3
 80213ac:	d10c      	bne.n	80213c8 <ip_reass_remove_oldest_datagram+0x4c>
 80213ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213b0:	699a      	ldr	r2, [r3, #24]
 80213b2:	687b      	ldr	r3, [r7, #4]
 80213b4:	691b      	ldr	r3, [r3, #16]
 80213b6:	429a      	cmp	r2, r3
 80213b8:	d106      	bne.n	80213c8 <ip_reass_remove_oldest_datagram+0x4c>
 80213ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213bc:	899a      	ldrh	r2, [r3, #12]
 80213be:	687b      	ldr	r3, [r7, #4]
 80213c0:	889b      	ldrh	r3, [r3, #4]
 80213c2:	b29b      	uxth	r3, r3
 80213c4:	429a      	cmp	r2, r3
 80213c6:	d014      	beq.n	80213f2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 80213c8:	693b      	ldr	r3, [r7, #16]
 80213ca:	3301      	adds	r3, #1
 80213cc:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 80213ce:	6a3b      	ldr	r3, [r7, #32]
 80213d0:	2b00      	cmp	r3, #0
 80213d2:	d104      	bne.n	80213de <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80213d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213d6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80213d8:	69fb      	ldr	r3, [r7, #28]
 80213da:	61bb      	str	r3, [r7, #24]
 80213dc:	e009      	b.n	80213f2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80213de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213e0:	7fda      	ldrb	r2, [r3, #31]
 80213e2:	6a3b      	ldr	r3, [r7, #32]
 80213e4:	7fdb      	ldrb	r3, [r3, #31]
 80213e6:	429a      	cmp	r2, r3
 80213e8:	d803      	bhi.n	80213f2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80213ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213ec:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80213ee:	69fb      	ldr	r3, [r7, #28]
 80213f0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80213f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213f4:	681b      	ldr	r3, [r3, #0]
 80213f6:	2b00      	cmp	r3, #0
 80213f8:	d001      	beq.n	80213fe <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80213fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80213fc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80213fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021400:	681b      	ldr	r3, [r3, #0]
 8021402:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021406:	2b00      	cmp	r3, #0
 8021408:	d1cb      	bne.n	80213a2 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 802140a:	6a3b      	ldr	r3, [r7, #32]
 802140c:	2b00      	cmp	r3, #0
 802140e:	d008      	beq.n	8021422 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021410:	69b9      	ldr	r1, [r7, #24]
 8021412:	6a38      	ldr	r0, [r7, #32]
 8021414:	f7ff ff0e 	bl	8021234 <ip_reass_free_complete_datagram>
 8021418:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 802141a:	697a      	ldr	r2, [r7, #20]
 802141c:	68fb      	ldr	r3, [r7, #12]
 802141e:	4413      	add	r3, r2
 8021420:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021422:	697a      	ldr	r2, [r7, #20]
 8021424:	683b      	ldr	r3, [r7, #0]
 8021426:	429a      	cmp	r2, r3
 8021428:	da02      	bge.n	8021430 <ip_reass_remove_oldest_datagram+0xb4>
 802142a:	693b      	ldr	r3, [r7, #16]
 802142c:	2b01      	cmp	r3, #1
 802142e:	dcac      	bgt.n	802138a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021430:	697b      	ldr	r3, [r7, #20]
}
 8021432:	4618      	mov	r0, r3
 8021434:	3728      	adds	r7, #40	; 0x28
 8021436:	46bd      	mov	sp, r7
 8021438:	bd80      	pop	{r7, pc}
 802143a:	bf00      	nop
 802143c:	20014288 	.word	0x20014288

08021440 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021440:	b580      	push	{r7, lr}
 8021442:	b084      	sub	sp, #16
 8021444:	af00      	add	r7, sp, #0
 8021446:	6078      	str	r0, [r7, #4]
 8021448:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 802144a:	2001      	movs	r0, #1
 802144c:	f7fc fa76 	bl	801d93c <memp_malloc>
 8021450:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	2b00      	cmp	r3, #0
 8021456:	d110      	bne.n	802147a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021458:	6839      	ldr	r1, [r7, #0]
 802145a:	6878      	ldr	r0, [r7, #4]
 802145c:	f7ff ff8e 	bl	802137c <ip_reass_remove_oldest_datagram>
 8021460:	4602      	mov	r2, r0
 8021462:	683b      	ldr	r3, [r7, #0]
 8021464:	4293      	cmp	r3, r2
 8021466:	dc03      	bgt.n	8021470 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021468:	2001      	movs	r0, #1
 802146a:	f7fc fa67 	bl	801d93c <memp_malloc>
 802146e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021470:	68fb      	ldr	r3, [r7, #12]
 8021472:	2b00      	cmp	r3, #0
 8021474:	d101      	bne.n	802147a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021476:	2300      	movs	r3, #0
 8021478:	e016      	b.n	80214a8 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 802147a:	2220      	movs	r2, #32
 802147c:	2100      	movs	r1, #0
 802147e:	68f8      	ldr	r0, [r7, #12]
 8021480:	f000 fe2c 	bl	80220dc <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021484:	68fb      	ldr	r3, [r7, #12]
 8021486:	220f      	movs	r2, #15
 8021488:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 802148a:	4b09      	ldr	r3, [pc, #36]	; (80214b0 <ip_reass_enqueue_new_datagram+0x70>)
 802148c:	681a      	ldr	r2, [r3, #0]
 802148e:	68fb      	ldr	r3, [r7, #12]
 8021490:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021492:	4a07      	ldr	r2, [pc, #28]	; (80214b0 <ip_reass_enqueue_new_datagram+0x70>)
 8021494:	68fb      	ldr	r3, [r7, #12]
 8021496:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021498:	68fb      	ldr	r3, [r7, #12]
 802149a:	3308      	adds	r3, #8
 802149c:	2214      	movs	r2, #20
 802149e:	6879      	ldr	r1, [r7, #4]
 80214a0:	4618      	mov	r0, r3
 80214a2:	f000 fdf3 	bl	802208c <memcpy>
  return ipr;
 80214a6:	68fb      	ldr	r3, [r7, #12]
}
 80214a8:	4618      	mov	r0, r3
 80214aa:	3710      	adds	r7, #16
 80214ac:	46bd      	mov	sp, r7
 80214ae:	bd80      	pop	{r7, pc}
 80214b0:	20014288 	.word	0x20014288

080214b4 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80214b4:	b580      	push	{r7, lr}
 80214b6:	b082      	sub	sp, #8
 80214b8:	af00      	add	r7, sp, #0
 80214ba:	6078      	str	r0, [r7, #4]
 80214bc:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 80214be:	4b10      	ldr	r3, [pc, #64]	; (8021500 <ip_reass_dequeue_datagram+0x4c>)
 80214c0:	681b      	ldr	r3, [r3, #0]
 80214c2:	687a      	ldr	r2, [r7, #4]
 80214c4:	429a      	cmp	r2, r3
 80214c6:	d104      	bne.n	80214d2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 80214c8:	687b      	ldr	r3, [r7, #4]
 80214ca:	681b      	ldr	r3, [r3, #0]
 80214cc:	4a0c      	ldr	r2, [pc, #48]	; (8021500 <ip_reass_dequeue_datagram+0x4c>)
 80214ce:	6013      	str	r3, [r2, #0]
 80214d0:	e00d      	b.n	80214ee <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80214d2:	683b      	ldr	r3, [r7, #0]
 80214d4:	2b00      	cmp	r3, #0
 80214d6:	d106      	bne.n	80214e6 <ip_reass_dequeue_datagram+0x32>
 80214d8:	4b0a      	ldr	r3, [pc, #40]	; (8021504 <ip_reass_dequeue_datagram+0x50>)
 80214da:	f240 1245 	movw	r2, #325	; 0x145
 80214de:	490a      	ldr	r1, [pc, #40]	; (8021508 <ip_reass_dequeue_datagram+0x54>)
 80214e0:	480a      	ldr	r0, [pc, #40]	; (802150c <ip_reass_dequeue_datagram+0x58>)
 80214e2:	f000 fee3 	bl	80222ac <iprintf>
    prev->next = ipr->next;
 80214e6:	687b      	ldr	r3, [r7, #4]
 80214e8:	681a      	ldr	r2, [r3, #0]
 80214ea:	683b      	ldr	r3, [r7, #0]
 80214ec:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80214ee:	6879      	ldr	r1, [r7, #4]
 80214f0:	2001      	movs	r0, #1
 80214f2:	f7fc fa93 	bl	801da1c <memp_free>
}
 80214f6:	bf00      	nop
 80214f8:	3708      	adds	r7, #8
 80214fa:	46bd      	mov	sp, r7
 80214fc:	bd80      	pop	{r7, pc}
 80214fe:	bf00      	nop
 8021500:	20014288 	.word	0x20014288
 8021504:	080283f8 	.word	0x080283f8
 8021508:	080284ec 	.word	0x080284ec
 802150c:	0802846c 	.word	0x0802846c

08021510 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021510:	b580      	push	{r7, lr}
 8021512:	b08c      	sub	sp, #48	; 0x30
 8021514:	af00      	add	r7, sp, #0
 8021516:	60f8      	str	r0, [r7, #12]
 8021518:	60b9      	str	r1, [r7, #8]
 802151a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 802151c:	2300      	movs	r3, #0
 802151e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021520:	2301      	movs	r3, #1
 8021522:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021524:	68bb      	ldr	r3, [r7, #8]
 8021526:	685b      	ldr	r3, [r3, #4]
 8021528:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802152a:	69fb      	ldr	r3, [r7, #28]
 802152c:	885b      	ldrh	r3, [r3, #2]
 802152e:	b29b      	uxth	r3, r3
 8021530:	4618      	mov	r0, r3
 8021532:	f7fb fda7 	bl	801d084 <lwip_htons>
 8021536:	4603      	mov	r3, r0
 8021538:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 802153a:	69fb      	ldr	r3, [r7, #28]
 802153c:	781b      	ldrb	r3, [r3, #0]
 802153e:	f003 030f 	and.w	r3, r3, #15
 8021542:	b2db      	uxtb	r3, r3
 8021544:	009b      	lsls	r3, r3, #2
 8021546:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021548:	7e7b      	ldrb	r3, [r7, #25]
 802154a:	b29b      	uxth	r3, r3
 802154c:	8b7a      	ldrh	r2, [r7, #26]
 802154e:	429a      	cmp	r2, r3
 8021550:	d202      	bcs.n	8021558 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021552:	f04f 33ff 	mov.w	r3, #4294967295
 8021556:	e135      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021558:	7e7b      	ldrb	r3, [r7, #25]
 802155a:	b29b      	uxth	r3, r3
 802155c:	8b7a      	ldrh	r2, [r7, #26]
 802155e:	1ad3      	subs	r3, r2, r3
 8021560:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021562:	69fb      	ldr	r3, [r7, #28]
 8021564:	88db      	ldrh	r3, [r3, #6]
 8021566:	b29b      	uxth	r3, r3
 8021568:	4618      	mov	r0, r3
 802156a:	f7fb fd8b 	bl	801d084 <lwip_htons>
 802156e:	4603      	mov	r3, r0
 8021570:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021574:	b29b      	uxth	r3, r3
 8021576:	00db      	lsls	r3, r3, #3
 8021578:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 802157a:	68bb      	ldr	r3, [r7, #8]
 802157c:	685b      	ldr	r3, [r3, #4]
 802157e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021582:	2200      	movs	r2, #0
 8021584:	701a      	strb	r2, [r3, #0]
 8021586:	2200      	movs	r2, #0
 8021588:	705a      	strb	r2, [r3, #1]
 802158a:	2200      	movs	r2, #0
 802158c:	709a      	strb	r2, [r3, #2]
 802158e:	2200      	movs	r2, #0
 8021590:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021594:	8afa      	ldrh	r2, [r7, #22]
 8021596:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021598:	8afa      	ldrh	r2, [r7, #22]
 802159a:	8b7b      	ldrh	r3, [r7, #26]
 802159c:	4413      	add	r3, r2
 802159e:	b29a      	uxth	r2, r3
 80215a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215a2:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 80215a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215a6:	88db      	ldrh	r3, [r3, #6]
 80215a8:	b29b      	uxth	r3, r3
 80215aa:	8afa      	ldrh	r2, [r7, #22]
 80215ac:	429a      	cmp	r2, r3
 80215ae:	d902      	bls.n	80215b6 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80215b0:	f04f 33ff 	mov.w	r3, #4294967295
 80215b4:	e106      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 80215b6:	68fb      	ldr	r3, [r7, #12]
 80215b8:	685b      	ldr	r3, [r3, #4]
 80215ba:	627b      	str	r3, [r7, #36]	; 0x24
 80215bc:	e068      	b.n	8021690 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 80215be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80215c0:	685b      	ldr	r3, [r3, #4]
 80215c2:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 80215c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215c6:	889b      	ldrh	r3, [r3, #4]
 80215c8:	b29a      	uxth	r2, r3
 80215ca:	693b      	ldr	r3, [r7, #16]
 80215cc:	889b      	ldrh	r3, [r3, #4]
 80215ce:	b29b      	uxth	r3, r3
 80215d0:	429a      	cmp	r2, r3
 80215d2:	d235      	bcs.n	8021640 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80215d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80215d8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80215da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215dc:	2b00      	cmp	r3, #0
 80215de:	d020      	beq.n	8021622 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80215e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215e2:	889b      	ldrh	r3, [r3, #4]
 80215e4:	b29a      	uxth	r2, r3
 80215e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80215e8:	88db      	ldrh	r3, [r3, #6]
 80215ea:	b29b      	uxth	r3, r3
 80215ec:	429a      	cmp	r2, r3
 80215ee:	d307      	bcc.n	8021600 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80215f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80215f2:	88db      	ldrh	r3, [r3, #6]
 80215f4:	b29a      	uxth	r2, r3
 80215f6:	693b      	ldr	r3, [r7, #16]
 80215f8:	889b      	ldrh	r3, [r3, #4]
 80215fa:	b29b      	uxth	r3, r3
 80215fc:	429a      	cmp	r2, r3
 80215fe:	d902      	bls.n	8021606 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021600:	f04f 33ff 	mov.w	r3, #4294967295
 8021604:	e0de      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021606:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021608:	68ba      	ldr	r2, [r7, #8]
 802160a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 802160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802160e:	88db      	ldrh	r3, [r3, #6]
 8021610:	b29a      	uxth	r2, r3
 8021612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021614:	889b      	ldrh	r3, [r3, #4]
 8021616:	b29b      	uxth	r3, r3
 8021618:	429a      	cmp	r2, r3
 802161a:	d03d      	beq.n	8021698 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802161c:	2300      	movs	r3, #0
 802161e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021620:	e03a      	b.n	8021698 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021624:	88db      	ldrh	r3, [r3, #6]
 8021626:	b29a      	uxth	r2, r3
 8021628:	693b      	ldr	r3, [r7, #16]
 802162a:	889b      	ldrh	r3, [r3, #4]
 802162c:	b29b      	uxth	r3, r3
 802162e:	429a      	cmp	r2, r3
 8021630:	d902      	bls.n	8021638 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021632:	f04f 33ff 	mov.w	r3, #4294967295
 8021636:	e0c5      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8021638:	68fb      	ldr	r3, [r7, #12]
 802163a:	68ba      	ldr	r2, [r7, #8]
 802163c:	605a      	str	r2, [r3, #4]
      break;
 802163e:	e02b      	b.n	8021698 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8021640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021642:	889b      	ldrh	r3, [r3, #4]
 8021644:	b29a      	uxth	r2, r3
 8021646:	693b      	ldr	r3, [r7, #16]
 8021648:	889b      	ldrh	r3, [r3, #4]
 802164a:	b29b      	uxth	r3, r3
 802164c:	429a      	cmp	r2, r3
 802164e:	d102      	bne.n	8021656 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021650:	f04f 33ff 	mov.w	r3, #4294967295
 8021654:	e0b6      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8021656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021658:	889b      	ldrh	r3, [r3, #4]
 802165a:	b29a      	uxth	r2, r3
 802165c:	693b      	ldr	r3, [r7, #16]
 802165e:	88db      	ldrh	r3, [r3, #6]
 8021660:	b29b      	uxth	r3, r3
 8021662:	429a      	cmp	r2, r3
 8021664:	d202      	bcs.n	802166c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021666:	f04f 33ff 	mov.w	r3, #4294967295
 802166a:	e0ab      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 802166c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802166e:	2b00      	cmp	r3, #0
 8021670:	d009      	beq.n	8021686 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8021672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021674:	88db      	ldrh	r3, [r3, #6]
 8021676:	b29a      	uxth	r2, r3
 8021678:	693b      	ldr	r3, [r7, #16]
 802167a:	889b      	ldrh	r3, [r3, #4]
 802167c:	b29b      	uxth	r3, r3
 802167e:	429a      	cmp	r2, r3
 8021680:	d001      	beq.n	8021686 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021682:	2300      	movs	r3, #0
 8021684:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8021686:	693b      	ldr	r3, [r7, #16]
 8021688:	681b      	ldr	r3, [r3, #0]
 802168a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 802168c:	693b      	ldr	r3, [r7, #16]
 802168e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8021690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021692:	2b00      	cmp	r3, #0
 8021694:	d193      	bne.n	80215be <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8021696:	e000      	b.n	802169a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8021698:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 802169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802169c:	2b00      	cmp	r3, #0
 802169e:	d12d      	bne.n	80216fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 80216a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216a2:	2b00      	cmp	r3, #0
 80216a4:	d01c      	beq.n	80216e0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 80216a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216a8:	88db      	ldrh	r3, [r3, #6]
 80216aa:	b29a      	uxth	r2, r3
 80216ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216ae:	889b      	ldrh	r3, [r3, #4]
 80216b0:	b29b      	uxth	r3, r3
 80216b2:	429a      	cmp	r2, r3
 80216b4:	d906      	bls.n	80216c4 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 80216b6:	4b45      	ldr	r3, [pc, #276]	; (80217cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80216b8:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 80216bc:	4944      	ldr	r1, [pc, #272]	; (80217d0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 80216be:	4845      	ldr	r0, [pc, #276]	; (80217d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80216c0:	f000 fdf4 	bl	80222ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80216c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216c6:	68ba      	ldr	r2, [r7, #8]
 80216c8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80216ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80216cc:	88db      	ldrh	r3, [r3, #6]
 80216ce:	b29a      	uxth	r2, r3
 80216d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80216d2:	889b      	ldrh	r3, [r3, #4]
 80216d4:	b29b      	uxth	r3, r3
 80216d6:	429a      	cmp	r2, r3
 80216d8:	d010      	beq.n	80216fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80216da:	2300      	movs	r3, #0
 80216dc:	623b      	str	r3, [r7, #32]
 80216de:	e00d      	b.n	80216fc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80216e0:	68fb      	ldr	r3, [r7, #12]
 80216e2:	685b      	ldr	r3, [r3, #4]
 80216e4:	2b00      	cmp	r3, #0
 80216e6:	d006      	beq.n	80216f6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80216e8:	4b38      	ldr	r3, [pc, #224]	; (80217cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80216ea:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80216ee:	493a      	ldr	r1, [pc, #232]	; (80217d8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80216f0:	4838      	ldr	r0, [pc, #224]	; (80217d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80216f2:	f000 fddb 	bl	80222ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80216f6:	68fb      	ldr	r3, [r7, #12]
 80216f8:	68ba      	ldr	r2, [r7, #8]
 80216fa:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80216fc:	687b      	ldr	r3, [r7, #4]
 80216fe:	2b00      	cmp	r3, #0
 8021700:	d105      	bne.n	802170e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8021702:	68fb      	ldr	r3, [r7, #12]
 8021704:	7f9b      	ldrb	r3, [r3, #30]
 8021706:	f003 0301 	and.w	r3, r3, #1
 802170a:	2b00      	cmp	r3, #0
 802170c:	d059      	beq.n	80217c2 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 802170e:	6a3b      	ldr	r3, [r7, #32]
 8021710:	2b00      	cmp	r3, #0
 8021712:	d04f      	beq.n	80217b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8021714:	68fb      	ldr	r3, [r7, #12]
 8021716:	685b      	ldr	r3, [r3, #4]
 8021718:	2b00      	cmp	r3, #0
 802171a:	d006      	beq.n	802172a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 802171c:	68fb      	ldr	r3, [r7, #12]
 802171e:	685b      	ldr	r3, [r3, #4]
 8021720:	685b      	ldr	r3, [r3, #4]
 8021722:	889b      	ldrh	r3, [r3, #4]
 8021724:	b29b      	uxth	r3, r3
 8021726:	2b00      	cmp	r3, #0
 8021728:	d002      	beq.n	8021730 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 802172a:	2300      	movs	r3, #0
 802172c:	623b      	str	r3, [r7, #32]
 802172e:	e041      	b.n	80217b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8021730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021732:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8021734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021736:	681b      	ldr	r3, [r3, #0]
 8021738:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802173a:	e012      	b.n	8021762 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 802173c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802173e:	685b      	ldr	r3, [r3, #4]
 8021740:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8021742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021744:	88db      	ldrh	r3, [r3, #6]
 8021746:	b29a      	uxth	r2, r3
 8021748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802174a:	889b      	ldrh	r3, [r3, #4]
 802174c:	b29b      	uxth	r3, r3
 802174e:	429a      	cmp	r2, r3
 8021750:	d002      	beq.n	8021758 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8021752:	2300      	movs	r3, #0
 8021754:	623b      	str	r3, [r7, #32]
            break;
 8021756:	e007      	b.n	8021768 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8021758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802175a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 802175c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802175e:	681b      	ldr	r3, [r3, #0]
 8021760:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8021762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021764:	2b00      	cmp	r3, #0
 8021766:	d1e9      	bne.n	802173c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8021768:	6a3b      	ldr	r3, [r7, #32]
 802176a:	2b00      	cmp	r3, #0
 802176c:	d022      	beq.n	80217b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802176e:	68fb      	ldr	r3, [r7, #12]
 8021770:	685b      	ldr	r3, [r3, #4]
 8021772:	2b00      	cmp	r3, #0
 8021774:	d106      	bne.n	8021784 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8021776:	4b15      	ldr	r3, [pc, #84]	; (80217cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021778:	f240 12df 	movw	r2, #479	; 0x1df
 802177c:	4917      	ldr	r1, [pc, #92]	; (80217dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802177e:	4815      	ldr	r0, [pc, #84]	; (80217d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8021780:	f000 fd94 	bl	80222ac <iprintf>
          LWIP_ASSERT("sanity check",
 8021784:	68fb      	ldr	r3, [r7, #12]
 8021786:	685b      	ldr	r3, [r3, #4]
 8021788:	685b      	ldr	r3, [r3, #4]
 802178a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 802178c:	429a      	cmp	r2, r3
 802178e:	d106      	bne.n	802179e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8021790:	4b0e      	ldr	r3, [pc, #56]	; (80217cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8021792:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8021796:	4911      	ldr	r1, [pc, #68]	; (80217dc <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8021798:	480e      	ldr	r0, [pc, #56]	; (80217d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802179a:	f000 fd87 	bl	80222ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802179e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80217a0:	681b      	ldr	r3, [r3, #0]
 80217a2:	2b00      	cmp	r3, #0
 80217a4:	d006      	beq.n	80217b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 80217a6:	4b09      	ldr	r3, [pc, #36]	; (80217cc <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80217a8:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 80217ac:	490c      	ldr	r1, [pc, #48]	; (80217e0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 80217ae:	4809      	ldr	r0, [pc, #36]	; (80217d4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80217b0:	f000 fd7c 	bl	80222ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 80217b4:	6a3b      	ldr	r3, [r7, #32]
 80217b6:	2b00      	cmp	r3, #0
 80217b8:	bf14      	ite	ne
 80217ba:	2301      	movne	r3, #1
 80217bc:	2300      	moveq	r3, #0
 80217be:	b2db      	uxtb	r3, r3
 80217c0:	e000      	b.n	80217c4 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 80217c2:	2300      	movs	r3, #0
}
 80217c4:	4618      	mov	r0, r3
 80217c6:	3730      	adds	r7, #48	; 0x30
 80217c8:	46bd      	mov	sp, r7
 80217ca:	bd80      	pop	{r7, pc}
 80217cc:	080283f8 	.word	0x080283f8
 80217d0:	08028508 	.word	0x08028508
 80217d4:	0802846c 	.word	0x0802846c
 80217d8:	08028528 	.word	0x08028528
 80217dc:	08028560 	.word	0x08028560
 80217e0:	08028570 	.word	0x08028570

080217e4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80217e4:	b580      	push	{r7, lr}
 80217e6:	b08e      	sub	sp, #56	; 0x38
 80217e8:	af00      	add	r7, sp, #0
 80217ea:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80217ec:	687b      	ldr	r3, [r7, #4]
 80217ee:	685b      	ldr	r3, [r3, #4]
 80217f0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80217f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80217f4:	781b      	ldrb	r3, [r3, #0]
 80217f6:	f003 030f 	and.w	r3, r3, #15
 80217fa:	b2db      	uxtb	r3, r3
 80217fc:	009b      	lsls	r3, r3, #2
 80217fe:	b2db      	uxtb	r3, r3
 8021800:	2b14      	cmp	r3, #20
 8021802:	f040 8171 	bne.w	8021ae8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8021806:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021808:	88db      	ldrh	r3, [r3, #6]
 802180a:	b29b      	uxth	r3, r3
 802180c:	4618      	mov	r0, r3
 802180e:	f7fb fc39 	bl	801d084 <lwip_htons>
 8021812:	4603      	mov	r3, r0
 8021814:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021818:	b29b      	uxth	r3, r3
 802181a:	00db      	lsls	r3, r3, #3
 802181c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 802181e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021820:	885b      	ldrh	r3, [r3, #2]
 8021822:	b29b      	uxth	r3, r3
 8021824:	4618      	mov	r0, r3
 8021826:	f7fb fc2d 	bl	801d084 <lwip_htons>
 802182a:	4603      	mov	r3, r0
 802182c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802182e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021830:	781b      	ldrb	r3, [r3, #0]
 8021832:	f003 030f 	and.w	r3, r3, #15
 8021836:	b2db      	uxtb	r3, r3
 8021838:	009b      	lsls	r3, r3, #2
 802183a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802183e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021842:	b29b      	uxth	r3, r3
 8021844:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021846:	429a      	cmp	r2, r3
 8021848:	f0c0 8150 	bcc.w	8021aec <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 802184c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8021850:	b29b      	uxth	r3, r3
 8021852:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8021854:	1ad3      	subs	r3, r2, r3
 8021856:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8021858:	6878      	ldr	r0, [r7, #4]
 802185a:	f7fd f877 	bl	801e94c <pbuf_clen>
 802185e:	4603      	mov	r3, r0
 8021860:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8021862:	4b8c      	ldr	r3, [pc, #560]	; (8021a94 <ip4_reass+0x2b0>)
 8021864:	881b      	ldrh	r3, [r3, #0]
 8021866:	461a      	mov	r2, r3
 8021868:	8c3b      	ldrh	r3, [r7, #32]
 802186a:	4413      	add	r3, r2
 802186c:	2b0a      	cmp	r3, #10
 802186e:	dd10      	ble.n	8021892 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8021870:	8c3b      	ldrh	r3, [r7, #32]
 8021872:	4619      	mov	r1, r3
 8021874:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8021876:	f7ff fd81 	bl	802137c <ip_reass_remove_oldest_datagram>
 802187a:	4603      	mov	r3, r0
 802187c:	2b00      	cmp	r3, #0
 802187e:	f000 8137 	beq.w	8021af0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8021882:	4b84      	ldr	r3, [pc, #528]	; (8021a94 <ip4_reass+0x2b0>)
 8021884:	881b      	ldrh	r3, [r3, #0]
 8021886:	461a      	mov	r2, r3
 8021888:	8c3b      	ldrh	r3, [r7, #32]
 802188a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802188c:	2b0a      	cmp	r3, #10
 802188e:	f300 812f 	bgt.w	8021af0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8021892:	4b81      	ldr	r3, [pc, #516]	; (8021a98 <ip4_reass+0x2b4>)
 8021894:	681b      	ldr	r3, [r3, #0]
 8021896:	633b      	str	r3, [r7, #48]	; 0x30
 8021898:	e015      	b.n	80218c6 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 802189a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802189c:	695a      	ldr	r2, [r3, #20]
 802189e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218a0:	68db      	ldr	r3, [r3, #12]
 80218a2:	429a      	cmp	r2, r3
 80218a4:	d10c      	bne.n	80218c0 <ip4_reass+0xdc>
 80218a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218a8:	699a      	ldr	r2, [r3, #24]
 80218aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218ac:	691b      	ldr	r3, [r3, #16]
 80218ae:	429a      	cmp	r2, r3
 80218b0:	d106      	bne.n	80218c0 <ip4_reass+0xdc>
 80218b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218b4:	899a      	ldrh	r2, [r3, #12]
 80218b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218b8:	889b      	ldrh	r3, [r3, #4]
 80218ba:	b29b      	uxth	r3, r3
 80218bc:	429a      	cmp	r2, r3
 80218be:	d006      	beq.n	80218ce <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 80218c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218c2:	681b      	ldr	r3, [r3, #0]
 80218c4:	633b      	str	r3, [r7, #48]	; 0x30
 80218c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218c8:	2b00      	cmp	r3, #0
 80218ca:	d1e6      	bne.n	802189a <ip4_reass+0xb6>
 80218cc:	e000      	b.n	80218d0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80218ce:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80218d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218d2:	2b00      	cmp	r3, #0
 80218d4:	d109      	bne.n	80218ea <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80218d6:	8c3b      	ldrh	r3, [r7, #32]
 80218d8:	4619      	mov	r1, r3
 80218da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80218dc:	f7ff fdb0 	bl	8021440 <ip_reass_enqueue_new_datagram>
 80218e0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80218e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80218e4:	2b00      	cmp	r3, #0
 80218e6:	d11c      	bne.n	8021922 <ip4_reass+0x13e>
      goto nullreturn;
 80218e8:	e105      	b.n	8021af6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80218ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80218ec:	88db      	ldrh	r3, [r3, #6]
 80218ee:	b29b      	uxth	r3, r3
 80218f0:	4618      	mov	r0, r3
 80218f2:	f7fb fbc7 	bl	801d084 <lwip_htons>
 80218f6:	4603      	mov	r3, r0
 80218f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	d110      	bne.n	8021922 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8021900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021902:	89db      	ldrh	r3, [r3, #14]
 8021904:	4618      	mov	r0, r3
 8021906:	f7fb fbbd 	bl	801d084 <lwip_htons>
 802190a:	4603      	mov	r3, r0
 802190c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8021910:	2b00      	cmp	r3, #0
 8021912:	d006      	beq.n	8021922 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8021914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021916:	3308      	adds	r3, #8
 8021918:	2214      	movs	r2, #20
 802191a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 802191c:	4618      	mov	r0, r3
 802191e:	f000 fbb5 	bl	802208c <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8021922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021924:	88db      	ldrh	r3, [r3, #6]
 8021926:	b29b      	uxth	r3, r3
 8021928:	f003 0320 	and.w	r3, r3, #32
 802192c:	2b00      	cmp	r3, #0
 802192e:	bf0c      	ite	eq
 8021930:	2301      	moveq	r3, #1
 8021932:	2300      	movne	r3, #0
 8021934:	b2db      	uxtb	r3, r3
 8021936:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8021938:	69fb      	ldr	r3, [r7, #28]
 802193a:	2b00      	cmp	r3, #0
 802193c:	d00e      	beq.n	802195c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802193e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021940:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8021942:	4413      	add	r3, r2
 8021944:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8021946:	8b7a      	ldrh	r2, [r7, #26]
 8021948:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 802194a:	429a      	cmp	r2, r3
 802194c:	f0c0 80a0 	bcc.w	8021a90 <ip4_reass+0x2ac>
 8021950:	8b7b      	ldrh	r3, [r7, #26]
 8021952:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8021956:	4293      	cmp	r3, r2
 8021958:	f200 809a 	bhi.w	8021a90 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 802195c:	69fa      	ldr	r2, [r7, #28]
 802195e:	6879      	ldr	r1, [r7, #4]
 8021960:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021962:	f7ff fdd5 	bl	8021510 <ip_reass_chain_frag_into_datagram_and_validate>
 8021966:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8021968:	697b      	ldr	r3, [r7, #20]
 802196a:	f1b3 3fff 	cmp.w	r3, #4294967295
 802196e:	f000 809b 	beq.w	8021aa8 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8021972:	4b48      	ldr	r3, [pc, #288]	; (8021a94 <ip4_reass+0x2b0>)
 8021974:	881a      	ldrh	r2, [r3, #0]
 8021976:	8c3b      	ldrh	r3, [r7, #32]
 8021978:	4413      	add	r3, r2
 802197a:	b29a      	uxth	r2, r3
 802197c:	4b45      	ldr	r3, [pc, #276]	; (8021a94 <ip4_reass+0x2b0>)
 802197e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8021980:	69fb      	ldr	r3, [r7, #28]
 8021982:	2b00      	cmp	r3, #0
 8021984:	d00d      	beq.n	80219a2 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8021986:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8021988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802198a:	4413      	add	r3, r2
 802198c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802198e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021990:	8a7a      	ldrh	r2, [r7, #18]
 8021992:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8021994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021996:	7f9b      	ldrb	r3, [r3, #30]
 8021998:	f043 0301 	orr.w	r3, r3, #1
 802199c:	b2da      	uxtb	r2, r3
 802199e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219a0:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 80219a2:	697b      	ldr	r3, [r7, #20]
 80219a4:	2b01      	cmp	r3, #1
 80219a6:	d171      	bne.n	8021a8c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 80219a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219aa:	8b9b      	ldrh	r3, [r3, #28]
 80219ac:	3314      	adds	r3, #20
 80219ae:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 80219b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219b2:	685b      	ldr	r3, [r3, #4]
 80219b4:	685b      	ldr	r3, [r3, #4]
 80219b6:	681b      	ldr	r3, [r3, #0]
 80219b8:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 80219ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219bc:	685b      	ldr	r3, [r3, #4]
 80219be:	685b      	ldr	r3, [r3, #4]
 80219c0:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 80219c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219c4:	3308      	adds	r3, #8
 80219c6:	2214      	movs	r2, #20
 80219c8:	4619      	mov	r1, r3
 80219ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80219cc:	f000 fb5e 	bl	802208c <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80219d0:	8a3b      	ldrh	r3, [r7, #16]
 80219d2:	4618      	mov	r0, r3
 80219d4:	f7fb fb56 	bl	801d084 <lwip_htons>
 80219d8:	4603      	mov	r3, r0
 80219da:	461a      	mov	r2, r3
 80219dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219de:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80219e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219e2:	2200      	movs	r2, #0
 80219e4:	719a      	strb	r2, [r3, #6]
 80219e6:	2200      	movs	r2, #0
 80219e8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80219ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219ec:	2200      	movs	r2, #0
 80219ee:	729a      	strb	r2, [r3, #10]
 80219f0:	2200      	movs	r2, #0
 80219f2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80219f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80219f6:	685b      	ldr	r3, [r3, #4]
 80219f8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80219fa:	e00d      	b.n	8021a18 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80219fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80219fe:	685b      	ldr	r3, [r3, #4]
 8021a00:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8021a02:	2114      	movs	r1, #20
 8021a04:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8021a06:	f7fc fe93 	bl	801e730 <pbuf_remove_header>
      pbuf_cat(p, r);
 8021a0a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021a0c:	6878      	ldr	r0, [r7, #4]
 8021a0e:	f7fc ffd7 	bl	801e9c0 <pbuf_cat>
      r = iprh->next_pbuf;
 8021a12:	68fb      	ldr	r3, [r7, #12]
 8021a14:	681b      	ldr	r3, [r3, #0]
 8021a16:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8021a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021a1a:	2b00      	cmp	r3, #0
 8021a1c:	d1ee      	bne.n	80219fc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8021a1e:	4b1e      	ldr	r3, [pc, #120]	; (8021a98 <ip4_reass+0x2b4>)
 8021a20:	681b      	ldr	r3, [r3, #0]
 8021a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a24:	429a      	cmp	r2, r3
 8021a26:	d102      	bne.n	8021a2e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8021a28:	2300      	movs	r3, #0
 8021a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021a2c:	e010      	b.n	8021a50 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021a2e:	4b1a      	ldr	r3, [pc, #104]	; (8021a98 <ip4_reass+0x2b4>)
 8021a30:	681b      	ldr	r3, [r3, #0]
 8021a32:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021a34:	e007      	b.n	8021a46 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8021a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a38:	681b      	ldr	r3, [r3, #0]
 8021a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021a3c:	429a      	cmp	r2, r3
 8021a3e:	d006      	beq.n	8021a4e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8021a40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a42:	681b      	ldr	r3, [r3, #0]
 8021a44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8021a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021a48:	2b00      	cmp	r3, #0
 8021a4a:	d1f4      	bne.n	8021a36 <ip4_reass+0x252>
 8021a4c:	e000      	b.n	8021a50 <ip4_reass+0x26c>
          break;
 8021a4e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8021a50:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021a52:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021a54:	f7ff fd2e 	bl	80214b4 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8021a58:	6878      	ldr	r0, [r7, #4]
 8021a5a:	f7fc ff77 	bl	801e94c <pbuf_clen>
 8021a5e:	4603      	mov	r3, r0
 8021a60:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8021a62:	4b0c      	ldr	r3, [pc, #48]	; (8021a94 <ip4_reass+0x2b0>)
 8021a64:	881b      	ldrh	r3, [r3, #0]
 8021a66:	8c3a      	ldrh	r2, [r7, #32]
 8021a68:	429a      	cmp	r2, r3
 8021a6a:	d906      	bls.n	8021a7a <ip4_reass+0x296>
 8021a6c:	4b0b      	ldr	r3, [pc, #44]	; (8021a9c <ip4_reass+0x2b8>)
 8021a6e:	f240 229b 	movw	r2, #667	; 0x29b
 8021a72:	490b      	ldr	r1, [pc, #44]	; (8021aa0 <ip4_reass+0x2bc>)
 8021a74:	480b      	ldr	r0, [pc, #44]	; (8021aa4 <ip4_reass+0x2c0>)
 8021a76:	f000 fc19 	bl	80222ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8021a7a:	4b06      	ldr	r3, [pc, #24]	; (8021a94 <ip4_reass+0x2b0>)
 8021a7c:	881a      	ldrh	r2, [r3, #0]
 8021a7e:	8c3b      	ldrh	r3, [r7, #32]
 8021a80:	1ad3      	subs	r3, r2, r3
 8021a82:	b29a      	uxth	r2, r3
 8021a84:	4b03      	ldr	r3, [pc, #12]	; (8021a94 <ip4_reass+0x2b0>)
 8021a86:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8021a88:	687b      	ldr	r3, [r7, #4]
 8021a8a:	e038      	b.n	8021afe <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8021a8c:	2300      	movs	r3, #0
 8021a8e:	e036      	b.n	8021afe <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8021a90:	bf00      	nop
 8021a92:	e00a      	b.n	8021aaa <ip4_reass+0x2c6>
 8021a94:	2001428c 	.word	0x2001428c
 8021a98:	20014288 	.word	0x20014288
 8021a9c:	080283f8 	.word	0x080283f8
 8021aa0:	08028594 	.word	0x08028594
 8021aa4:	0802846c 	.word	0x0802846c
    goto nullreturn_ipr;
 8021aa8:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8021aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021aac:	2b00      	cmp	r3, #0
 8021aae:	d106      	bne.n	8021abe <ip4_reass+0x2da>
 8021ab0:	4b15      	ldr	r3, [pc, #84]	; (8021b08 <ip4_reass+0x324>)
 8021ab2:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8021ab6:	4915      	ldr	r1, [pc, #84]	; (8021b0c <ip4_reass+0x328>)
 8021ab8:	4815      	ldr	r0, [pc, #84]	; (8021b10 <ip4_reass+0x32c>)
 8021aba:	f000 fbf7 	bl	80222ac <iprintf>
  if (ipr->p == NULL) {
 8021abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ac0:	685b      	ldr	r3, [r3, #4]
 8021ac2:	2b00      	cmp	r3, #0
 8021ac4:	d116      	bne.n	8021af4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8021ac6:	4b13      	ldr	r3, [pc, #76]	; (8021b14 <ip4_reass+0x330>)
 8021ac8:	681b      	ldr	r3, [r3, #0]
 8021aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8021acc:	429a      	cmp	r2, r3
 8021ace:	d006      	beq.n	8021ade <ip4_reass+0x2fa>
 8021ad0:	4b0d      	ldr	r3, [pc, #52]	; (8021b08 <ip4_reass+0x324>)
 8021ad2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8021ad6:	4910      	ldr	r1, [pc, #64]	; (8021b18 <ip4_reass+0x334>)
 8021ad8:	480d      	ldr	r0, [pc, #52]	; (8021b10 <ip4_reass+0x32c>)
 8021ada:	f000 fbe7 	bl	80222ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8021ade:	2100      	movs	r1, #0
 8021ae0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021ae2:	f7ff fce7 	bl	80214b4 <ip_reass_dequeue_datagram>
 8021ae6:	e006      	b.n	8021af6 <ip4_reass+0x312>
    goto nullreturn;
 8021ae8:	bf00      	nop
 8021aea:	e004      	b.n	8021af6 <ip4_reass+0x312>
    goto nullreturn;
 8021aec:	bf00      	nop
 8021aee:	e002      	b.n	8021af6 <ip4_reass+0x312>
      goto nullreturn;
 8021af0:	bf00      	nop
 8021af2:	e000      	b.n	8021af6 <ip4_reass+0x312>
  }

nullreturn:
 8021af4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8021af6:	6878      	ldr	r0, [r7, #4]
 8021af8:	f7fc fea0 	bl	801e83c <pbuf_free>
  return NULL;
 8021afc:	2300      	movs	r3, #0
}
 8021afe:	4618      	mov	r0, r3
 8021b00:	3738      	adds	r7, #56	; 0x38
 8021b02:	46bd      	mov	sp, r7
 8021b04:	bd80      	pop	{r7, pc}
 8021b06:	bf00      	nop
 8021b08:	080283f8 	.word	0x080283f8
 8021b0c:	080285b0 	.word	0x080285b0
 8021b10:	0802846c 	.word	0x0802846c
 8021b14:	20014288 	.word	0x20014288
 8021b18:	080285bc 	.word	0x080285bc

08021b1c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8021b1c:	b580      	push	{r7, lr}
 8021b1e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8021b20:	2002      	movs	r0, #2
 8021b22:	f7fb ff0b 	bl	801d93c <memp_malloc>
 8021b26:	4603      	mov	r3, r0
}
 8021b28:	4618      	mov	r0, r3
 8021b2a:	bd80      	pop	{r7, pc}

08021b2c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8021b2c:	b580      	push	{r7, lr}
 8021b2e:	b082      	sub	sp, #8
 8021b30:	af00      	add	r7, sp, #0
 8021b32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8021b34:	687b      	ldr	r3, [r7, #4]
 8021b36:	2b00      	cmp	r3, #0
 8021b38:	d106      	bne.n	8021b48 <ip_frag_free_pbuf_custom_ref+0x1c>
 8021b3a:	4b07      	ldr	r3, [pc, #28]	; (8021b58 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8021b3c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8021b40:	4906      	ldr	r1, [pc, #24]	; (8021b5c <ip_frag_free_pbuf_custom_ref+0x30>)
 8021b42:	4807      	ldr	r0, [pc, #28]	; (8021b60 <ip_frag_free_pbuf_custom_ref+0x34>)
 8021b44:	f000 fbb2 	bl	80222ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8021b48:	6879      	ldr	r1, [r7, #4]
 8021b4a:	2002      	movs	r0, #2
 8021b4c:	f7fb ff66 	bl	801da1c <memp_free>
}
 8021b50:	bf00      	nop
 8021b52:	3708      	adds	r7, #8
 8021b54:	46bd      	mov	sp, r7
 8021b56:	bd80      	pop	{r7, pc}
 8021b58:	080283f8 	.word	0x080283f8
 8021b5c:	080285dc 	.word	0x080285dc
 8021b60:	0802846c 	.word	0x0802846c

08021b64 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8021b64:	b580      	push	{r7, lr}
 8021b66:	b084      	sub	sp, #16
 8021b68:	af00      	add	r7, sp, #0
 8021b6a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8021b6c:	687b      	ldr	r3, [r7, #4]
 8021b6e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8021b70:	68fb      	ldr	r3, [r7, #12]
 8021b72:	2b00      	cmp	r3, #0
 8021b74:	d106      	bne.n	8021b84 <ipfrag_free_pbuf_custom+0x20>
 8021b76:	4b11      	ldr	r3, [pc, #68]	; (8021bbc <ipfrag_free_pbuf_custom+0x58>)
 8021b78:	f240 22ce 	movw	r2, #718	; 0x2ce
 8021b7c:	4910      	ldr	r1, [pc, #64]	; (8021bc0 <ipfrag_free_pbuf_custom+0x5c>)
 8021b7e:	4811      	ldr	r0, [pc, #68]	; (8021bc4 <ipfrag_free_pbuf_custom+0x60>)
 8021b80:	f000 fb94 	bl	80222ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8021b84:	68fa      	ldr	r2, [r7, #12]
 8021b86:	687b      	ldr	r3, [r7, #4]
 8021b88:	429a      	cmp	r2, r3
 8021b8a:	d006      	beq.n	8021b9a <ipfrag_free_pbuf_custom+0x36>
 8021b8c:	4b0b      	ldr	r3, [pc, #44]	; (8021bbc <ipfrag_free_pbuf_custom+0x58>)
 8021b8e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8021b92:	490d      	ldr	r1, [pc, #52]	; (8021bc8 <ipfrag_free_pbuf_custom+0x64>)
 8021b94:	480b      	ldr	r0, [pc, #44]	; (8021bc4 <ipfrag_free_pbuf_custom+0x60>)
 8021b96:	f000 fb89 	bl	80222ac <iprintf>
  if (pcr->original != NULL) {
 8021b9a:	68fb      	ldr	r3, [r7, #12]
 8021b9c:	695b      	ldr	r3, [r3, #20]
 8021b9e:	2b00      	cmp	r3, #0
 8021ba0:	d004      	beq.n	8021bac <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8021ba2:	68fb      	ldr	r3, [r7, #12]
 8021ba4:	695b      	ldr	r3, [r3, #20]
 8021ba6:	4618      	mov	r0, r3
 8021ba8:	f7fc fe48 	bl	801e83c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8021bac:	68f8      	ldr	r0, [r7, #12]
 8021bae:	f7ff ffbd 	bl	8021b2c <ip_frag_free_pbuf_custom_ref>
}
 8021bb2:	bf00      	nop
 8021bb4:	3710      	adds	r7, #16
 8021bb6:	46bd      	mov	sp, r7
 8021bb8:	bd80      	pop	{r7, pc}
 8021bba:	bf00      	nop
 8021bbc:	080283f8 	.word	0x080283f8
 8021bc0:	080285e8 	.word	0x080285e8
 8021bc4:	0802846c 	.word	0x0802846c
 8021bc8:	080285f4 	.word	0x080285f4

08021bcc <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8021bcc:	b580      	push	{r7, lr}
 8021bce:	b094      	sub	sp, #80	; 0x50
 8021bd0:	af02      	add	r7, sp, #8
 8021bd2:	60f8      	str	r0, [r7, #12]
 8021bd4:	60b9      	str	r1, [r7, #8]
 8021bd6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8021bd8:	2300      	movs	r3, #0
 8021bda:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8021bde:	68bb      	ldr	r3, [r7, #8]
 8021be0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021be2:	3b14      	subs	r3, #20
 8021be4:	2b00      	cmp	r3, #0
 8021be6:	da00      	bge.n	8021bea <ip4_frag+0x1e>
 8021be8:	3307      	adds	r3, #7
 8021bea:	10db      	asrs	r3, r3, #3
 8021bec:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8021bee:	2314      	movs	r3, #20
 8021bf0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8021bf2:	68fb      	ldr	r3, [r7, #12]
 8021bf4:	685b      	ldr	r3, [r3, #4]
 8021bf6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8021bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8021bfa:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8021bfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021bfe:	781b      	ldrb	r3, [r3, #0]
 8021c00:	f003 030f 	and.w	r3, r3, #15
 8021c04:	b2db      	uxtb	r3, r3
 8021c06:	009b      	lsls	r3, r3, #2
 8021c08:	b2db      	uxtb	r3, r3
 8021c0a:	2b14      	cmp	r3, #20
 8021c0c:	d002      	beq.n	8021c14 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8021c0e:	f06f 0305 	mvn.w	r3, #5
 8021c12:	e110      	b.n	8021e36 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8021c14:	68fb      	ldr	r3, [r7, #12]
 8021c16:	895b      	ldrh	r3, [r3, #10]
 8021c18:	2b13      	cmp	r3, #19
 8021c1a:	d809      	bhi.n	8021c30 <ip4_frag+0x64>
 8021c1c:	4b88      	ldr	r3, [pc, #544]	; (8021e40 <ip4_frag+0x274>)
 8021c1e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8021c22:	4988      	ldr	r1, [pc, #544]	; (8021e44 <ip4_frag+0x278>)
 8021c24:	4888      	ldr	r0, [pc, #544]	; (8021e48 <ip4_frag+0x27c>)
 8021c26:	f000 fb41 	bl	80222ac <iprintf>
 8021c2a:	f06f 0305 	mvn.w	r3, #5
 8021c2e:	e102      	b.n	8021e36 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8021c30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021c32:	88db      	ldrh	r3, [r3, #6]
 8021c34:	b29b      	uxth	r3, r3
 8021c36:	4618      	mov	r0, r3
 8021c38:	f7fb fa24 	bl	801d084 <lwip_htons>
 8021c3c:	4603      	mov	r3, r0
 8021c3e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8021c40:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021c42:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021c46:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8021c4a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021c4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8021c50:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8021c52:	68fb      	ldr	r3, [r7, #12]
 8021c54:	891b      	ldrh	r3, [r3, #8]
 8021c56:	3b14      	subs	r3, #20
 8021c58:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8021c5c:	e0e1      	b.n	8021e22 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8021c5e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021c60:	00db      	lsls	r3, r3, #3
 8021c62:	b29b      	uxth	r3, r3
 8021c64:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021c68:	4293      	cmp	r3, r2
 8021c6a:	bf28      	it	cs
 8021c6c:	4613      	movcs	r3, r2
 8021c6e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8021c70:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021c74:	2114      	movs	r1, #20
 8021c76:	200e      	movs	r0, #14
 8021c78:	f7fc fafe 	bl	801e278 <pbuf_alloc>
 8021c7c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8021c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c80:	2b00      	cmp	r3, #0
 8021c82:	f000 80d5 	beq.w	8021e30 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8021c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c88:	895b      	ldrh	r3, [r3, #10]
 8021c8a:	2b13      	cmp	r3, #19
 8021c8c:	d806      	bhi.n	8021c9c <ip4_frag+0xd0>
 8021c8e:	4b6c      	ldr	r3, [pc, #432]	; (8021e40 <ip4_frag+0x274>)
 8021c90:	f44f 7249 	mov.w	r2, #804	; 0x324
 8021c94:	496d      	ldr	r1, [pc, #436]	; (8021e4c <ip4_frag+0x280>)
 8021c96:	486c      	ldr	r0, [pc, #432]	; (8021e48 <ip4_frag+0x27c>)
 8021c98:	f000 fb08 	bl	80222ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8021c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021c9e:	685b      	ldr	r3, [r3, #4]
 8021ca0:	2214      	movs	r2, #20
 8021ca2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8021ca4:	4618      	mov	r0, r3
 8021ca6:	f000 f9f1 	bl	802208c <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8021caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021cac:	685b      	ldr	r3, [r3, #4]
 8021cae:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8021cb0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021cb2:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8021cb6:	e064      	b.n	8021d82 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8021cb8:	68fb      	ldr	r3, [r7, #12]
 8021cba:	895a      	ldrh	r2, [r3, #10]
 8021cbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021cbe:	1ad3      	subs	r3, r2, r3
 8021cc0:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8021cc2:	68fb      	ldr	r3, [r7, #12]
 8021cc4:	895b      	ldrh	r3, [r3, #10]
 8021cc6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021cc8:	429a      	cmp	r2, r3
 8021cca:	d906      	bls.n	8021cda <ip4_frag+0x10e>
 8021ccc:	4b5c      	ldr	r3, [pc, #368]	; (8021e40 <ip4_frag+0x274>)
 8021cce:	f240 322d 	movw	r2, #813	; 0x32d
 8021cd2:	495f      	ldr	r1, [pc, #380]	; (8021e50 <ip4_frag+0x284>)
 8021cd4:	485c      	ldr	r0, [pc, #368]	; (8021e48 <ip4_frag+0x27c>)
 8021cd6:	f000 fae9 	bl	80222ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8021cda:	8bfa      	ldrh	r2, [r7, #30]
 8021cdc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021ce0:	4293      	cmp	r3, r2
 8021ce2:	bf28      	it	cs
 8021ce4:	4613      	movcs	r3, r2
 8021ce6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8021cea:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021cee:	2b00      	cmp	r3, #0
 8021cf0:	d105      	bne.n	8021cfe <ip4_frag+0x132>
        poff = 0;
 8021cf2:	2300      	movs	r3, #0
 8021cf4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021cf6:	68fb      	ldr	r3, [r7, #12]
 8021cf8:	681b      	ldr	r3, [r3, #0]
 8021cfa:	60fb      	str	r3, [r7, #12]
        continue;
 8021cfc:	e041      	b.n	8021d82 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8021cfe:	f7ff ff0d 	bl	8021b1c <ip_frag_alloc_pbuf_custom_ref>
 8021d02:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8021d04:	69bb      	ldr	r3, [r7, #24]
 8021d06:	2b00      	cmp	r3, #0
 8021d08:	d103      	bne.n	8021d12 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8021d0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021d0c:	f7fc fd96 	bl	801e83c <pbuf_free>
        goto memerr;
 8021d10:	e08f      	b.n	8021e32 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021d12:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8021d14:	68fb      	ldr	r3, [r7, #12]
 8021d16:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8021d18:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8021d1a:	4413      	add	r3, r2
 8021d1c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8021d20:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8021d24:	9201      	str	r2, [sp, #4]
 8021d26:	9300      	str	r3, [sp, #0]
 8021d28:	4603      	mov	r3, r0
 8021d2a:	2241      	movs	r2, #65	; 0x41
 8021d2c:	2000      	movs	r0, #0
 8021d2e:	f7fc fbcb 	bl	801e4c8 <pbuf_alloced_custom>
 8021d32:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8021d34:	697b      	ldr	r3, [r7, #20]
 8021d36:	2b00      	cmp	r3, #0
 8021d38:	d106      	bne.n	8021d48 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8021d3a:	69b8      	ldr	r0, [r7, #24]
 8021d3c:	f7ff fef6 	bl	8021b2c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8021d40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021d42:	f7fc fd7b 	bl	801e83c <pbuf_free>
        goto memerr;
 8021d46:	e074      	b.n	8021e32 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8021d48:	68f8      	ldr	r0, [r7, #12]
 8021d4a:	f7fc fe17 	bl	801e97c <pbuf_ref>
      pcr->original = p;
 8021d4e:	69bb      	ldr	r3, [r7, #24]
 8021d50:	68fa      	ldr	r2, [r7, #12]
 8021d52:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8021d54:	69bb      	ldr	r3, [r7, #24]
 8021d56:	4a3f      	ldr	r2, [pc, #252]	; (8021e54 <ip4_frag+0x288>)
 8021d58:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8021d5a:	6979      	ldr	r1, [r7, #20]
 8021d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021d5e:	f7fc fe2f 	bl	801e9c0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8021d62:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8021d66:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021d6a:	1ad3      	subs	r3, r2, r3
 8021d6c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8021d70:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021d74:	2b00      	cmp	r3, #0
 8021d76:	d004      	beq.n	8021d82 <ip4_frag+0x1b6>
        poff = 0;
 8021d78:	2300      	movs	r3, #0
 8021d7a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8021d7c:	68fb      	ldr	r3, [r7, #12]
 8021d7e:	681b      	ldr	r3, [r3, #0]
 8021d80:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8021d82:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8021d86:	2b00      	cmp	r3, #0
 8021d88:	d196      	bne.n	8021cb8 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8021d8a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8021d8c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8021d90:	4413      	add	r3, r2
 8021d92:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8021d94:	68bb      	ldr	r3, [r7, #8]
 8021d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8021d98:	f1a3 0213 	sub.w	r2, r3, #19
 8021d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021da0:	429a      	cmp	r2, r3
 8021da2:	bfcc      	ite	gt
 8021da4:	2301      	movgt	r3, #1
 8021da6:	2300      	movle	r3, #0
 8021da8:	b2db      	uxtb	r3, r3
 8021daa:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8021dac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8021db0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021db4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8021db6:	6a3b      	ldr	r3, [r7, #32]
 8021db8:	2b00      	cmp	r3, #0
 8021dba:	d002      	beq.n	8021dc2 <ip4_frag+0x1f6>
 8021dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021dbe:	2b00      	cmp	r3, #0
 8021dc0:	d003      	beq.n	8021dca <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8021dc2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021dc4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8021dc8:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8021dca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8021dcc:	4618      	mov	r0, r3
 8021dce:	f7fb f959 	bl	801d084 <lwip_htons>
 8021dd2:	4603      	mov	r3, r0
 8021dd4:	461a      	mov	r2, r3
 8021dd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dd8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8021dda:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021ddc:	3314      	adds	r3, #20
 8021dde:	b29b      	uxth	r3, r3
 8021de0:	4618      	mov	r0, r3
 8021de2:	f7fb f94f 	bl	801d084 <lwip_htons>
 8021de6:	4603      	mov	r3, r0
 8021de8:	461a      	mov	r2, r3
 8021dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021dec:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8021dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021df0:	2200      	movs	r2, #0
 8021df2:	729a      	strb	r2, [r3, #10]
 8021df4:	2200      	movs	r2, #0
 8021df6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8021df8:	68bb      	ldr	r3, [r7, #8]
 8021dfa:	695b      	ldr	r3, [r3, #20]
 8021dfc:	687a      	ldr	r2, [r7, #4]
 8021dfe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8021e00:	68b8      	ldr	r0, [r7, #8]
 8021e02:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8021e04:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8021e06:	f7fc fd19 	bl	801e83c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8021e0a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8021e0e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8021e10:	1ad3      	subs	r3, r2, r3
 8021e12:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8021e16:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8021e1a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8021e1c:	4413      	add	r3, r2
 8021e1e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8021e22:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8021e26:	2b00      	cmp	r3, #0
 8021e28:	f47f af19 	bne.w	8021c5e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8021e2c:	2300      	movs	r3, #0
 8021e2e:	e002      	b.n	8021e36 <ip4_frag+0x26a>
      goto memerr;
 8021e30:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8021e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8021e36:	4618      	mov	r0, r3
 8021e38:	3748      	adds	r7, #72	; 0x48
 8021e3a:	46bd      	mov	sp, r7
 8021e3c:	bd80      	pop	{r7, pc}
 8021e3e:	bf00      	nop
 8021e40:	080283f8 	.word	0x080283f8
 8021e44:	08028600 	.word	0x08028600
 8021e48:	0802846c 	.word	0x0802846c
 8021e4c:	0802861c 	.word	0x0802861c
 8021e50:	0802863c 	.word	0x0802863c
 8021e54:	08021b65 	.word	0x08021b65

08021e58 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8021e58:	b580      	push	{r7, lr}
 8021e5a:	b086      	sub	sp, #24
 8021e5c:	af00      	add	r7, sp, #0
 8021e5e:	6078      	str	r0, [r7, #4]
 8021e60:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8021e62:	230e      	movs	r3, #14
 8021e64:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8021e66:	687b      	ldr	r3, [r7, #4]
 8021e68:	895b      	ldrh	r3, [r3, #10]
 8021e6a:	2b0e      	cmp	r3, #14
 8021e6c:	d96e      	bls.n	8021f4c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8021e6e:	687b      	ldr	r3, [r7, #4]
 8021e70:	7bdb      	ldrb	r3, [r3, #15]
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	d106      	bne.n	8021e84 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8021e76:	683b      	ldr	r3, [r7, #0]
 8021e78:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8021e7c:	3301      	adds	r3, #1
 8021e7e:	b2da      	uxtb	r2, r3
 8021e80:	687b      	ldr	r3, [r7, #4]
 8021e82:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8021e84:	687b      	ldr	r3, [r7, #4]
 8021e86:	685b      	ldr	r3, [r3, #4]
 8021e88:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8021e8a:	693b      	ldr	r3, [r7, #16]
 8021e8c:	7b1a      	ldrb	r2, [r3, #12]
 8021e8e:	7b5b      	ldrb	r3, [r3, #13]
 8021e90:	021b      	lsls	r3, r3, #8
 8021e92:	4313      	orrs	r3, r2
 8021e94:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8021e96:	693b      	ldr	r3, [r7, #16]
 8021e98:	781b      	ldrb	r3, [r3, #0]
 8021e9a:	f003 0301 	and.w	r3, r3, #1
 8021e9e:	2b00      	cmp	r3, #0
 8021ea0:	d023      	beq.n	8021eea <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8021ea2:	693b      	ldr	r3, [r7, #16]
 8021ea4:	781b      	ldrb	r3, [r3, #0]
 8021ea6:	2b01      	cmp	r3, #1
 8021ea8:	d10f      	bne.n	8021eca <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021eaa:	693b      	ldr	r3, [r7, #16]
 8021eac:	785b      	ldrb	r3, [r3, #1]
 8021eae:	2b00      	cmp	r3, #0
 8021eb0:	d11b      	bne.n	8021eea <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8021eb2:	693b      	ldr	r3, [r7, #16]
 8021eb4:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8021eb6:	2b5e      	cmp	r3, #94	; 0x5e
 8021eb8:	d117      	bne.n	8021eea <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8021eba:	687b      	ldr	r3, [r7, #4]
 8021ebc:	7b5b      	ldrb	r3, [r3, #13]
 8021ebe:	f043 0310 	orr.w	r3, r3, #16
 8021ec2:	b2da      	uxtb	r2, r3
 8021ec4:	687b      	ldr	r3, [r7, #4]
 8021ec6:	735a      	strb	r2, [r3, #13]
 8021ec8:	e00f      	b.n	8021eea <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8021eca:	693b      	ldr	r3, [r7, #16]
 8021ecc:	2206      	movs	r2, #6
 8021ece:	4928      	ldr	r1, [pc, #160]	; (8021f70 <ethernet_input+0x118>)
 8021ed0:	4618      	mov	r0, r3
 8021ed2:	f000 f8cb 	bl	802206c <memcmp>
 8021ed6:	4603      	mov	r3, r0
 8021ed8:	2b00      	cmp	r3, #0
 8021eda:	d106      	bne.n	8021eea <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8021edc:	687b      	ldr	r3, [r7, #4]
 8021ede:	7b5b      	ldrb	r3, [r3, #13]
 8021ee0:	f043 0308 	orr.w	r3, r3, #8
 8021ee4:	b2da      	uxtb	r2, r3
 8021ee6:	687b      	ldr	r3, [r7, #4]
 8021ee8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8021eea:	89fb      	ldrh	r3, [r7, #14]
 8021eec:	2b08      	cmp	r3, #8
 8021eee:	d003      	beq.n	8021ef8 <ethernet_input+0xa0>
 8021ef0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8021ef4:	d014      	beq.n	8021f20 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8021ef6:	e032      	b.n	8021f5e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021ef8:	683b      	ldr	r3, [r7, #0]
 8021efa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021efe:	f003 0308 	and.w	r3, r3, #8
 8021f02:	2b00      	cmp	r3, #0
 8021f04:	d024      	beq.n	8021f50 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021f06:	8afb      	ldrh	r3, [r7, #22]
 8021f08:	4619      	mov	r1, r3
 8021f0a:	6878      	ldr	r0, [r7, #4]
 8021f0c:	f7fc fc10 	bl	801e730 <pbuf_remove_header>
 8021f10:	4603      	mov	r3, r0
 8021f12:	2b00      	cmp	r3, #0
 8021f14:	d11e      	bne.n	8021f54 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8021f16:	6839      	ldr	r1, [r7, #0]
 8021f18:	6878      	ldr	r0, [r7, #4]
 8021f1a:	f7fe fe8d 	bl	8020c38 <ip4_input>
      break;
 8021f1e:	e013      	b.n	8021f48 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8021f20:	683b      	ldr	r3, [r7, #0]
 8021f22:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8021f26:	f003 0308 	and.w	r3, r3, #8
 8021f2a:	2b00      	cmp	r3, #0
 8021f2c:	d014      	beq.n	8021f58 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8021f2e:	8afb      	ldrh	r3, [r7, #22]
 8021f30:	4619      	mov	r1, r3
 8021f32:	6878      	ldr	r0, [r7, #4]
 8021f34:	f7fc fbfc 	bl	801e730 <pbuf_remove_header>
 8021f38:	4603      	mov	r3, r0
 8021f3a:	2b00      	cmp	r3, #0
 8021f3c:	d10e      	bne.n	8021f5c <ethernet_input+0x104>
        etharp_input(p, netif);
 8021f3e:	6839      	ldr	r1, [r7, #0]
 8021f40:	6878      	ldr	r0, [r7, #4]
 8021f42:	f7fe f82d 	bl	801ffa0 <etharp_input>
      break;
 8021f46:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8021f48:	2300      	movs	r3, #0
 8021f4a:	e00c      	b.n	8021f66 <ethernet_input+0x10e>
    goto free_and_return;
 8021f4c:	bf00      	nop
 8021f4e:	e006      	b.n	8021f5e <ethernet_input+0x106>
        goto free_and_return;
 8021f50:	bf00      	nop
 8021f52:	e004      	b.n	8021f5e <ethernet_input+0x106>
        goto free_and_return;
 8021f54:	bf00      	nop
 8021f56:	e002      	b.n	8021f5e <ethernet_input+0x106>
        goto free_and_return;
 8021f58:	bf00      	nop
 8021f5a:	e000      	b.n	8021f5e <ethernet_input+0x106>
        goto free_and_return;
 8021f5c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8021f5e:	6878      	ldr	r0, [r7, #4]
 8021f60:	f7fc fc6c 	bl	801e83c <pbuf_free>
  return ERR_OK;
 8021f64:	2300      	movs	r3, #0
}
 8021f66:	4618      	mov	r0, r3
 8021f68:	3718      	adds	r7, #24
 8021f6a:	46bd      	mov	sp, r7
 8021f6c:	bd80      	pop	{r7, pc}
 8021f6e:	bf00      	nop
 8021f70:	08028bc8 	.word	0x08028bc8

08021f74 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8021f74:	b580      	push	{r7, lr}
 8021f76:	b086      	sub	sp, #24
 8021f78:	af00      	add	r7, sp, #0
 8021f7a:	60f8      	str	r0, [r7, #12]
 8021f7c:	60b9      	str	r1, [r7, #8]
 8021f7e:	607a      	str	r2, [r7, #4]
 8021f80:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8021f82:	8c3b      	ldrh	r3, [r7, #32]
 8021f84:	4618      	mov	r0, r3
 8021f86:	f7fb f87d 	bl	801d084 <lwip_htons>
 8021f8a:	4603      	mov	r3, r0
 8021f8c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8021f8e:	210e      	movs	r1, #14
 8021f90:	68b8      	ldr	r0, [r7, #8]
 8021f92:	f7fc fbbd 	bl	801e710 <pbuf_add_header>
 8021f96:	4603      	mov	r3, r0
 8021f98:	2b00      	cmp	r3, #0
 8021f9a:	d125      	bne.n	8021fe8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8021f9c:	68bb      	ldr	r3, [r7, #8]
 8021f9e:	685b      	ldr	r3, [r3, #4]
 8021fa0:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8021fa2:	693b      	ldr	r3, [r7, #16]
 8021fa4:	8afa      	ldrh	r2, [r7, #22]
 8021fa6:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8021fa8:	693b      	ldr	r3, [r7, #16]
 8021faa:	2206      	movs	r2, #6
 8021fac:	6839      	ldr	r1, [r7, #0]
 8021fae:	4618      	mov	r0, r3
 8021fb0:	f000 f86c 	bl	802208c <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8021fb4:	693b      	ldr	r3, [r7, #16]
 8021fb6:	3306      	adds	r3, #6
 8021fb8:	2206      	movs	r2, #6
 8021fba:	6879      	ldr	r1, [r7, #4]
 8021fbc:	4618      	mov	r0, r3
 8021fbe:	f000 f865 	bl	802208c <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8021fc2:	68fb      	ldr	r3, [r7, #12]
 8021fc4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8021fc8:	2b06      	cmp	r3, #6
 8021fca:	d006      	beq.n	8021fda <ethernet_output+0x66>
 8021fcc:	4b0a      	ldr	r3, [pc, #40]	; (8021ff8 <ethernet_output+0x84>)
 8021fce:	f44f 7299 	mov.w	r2, #306	; 0x132
 8021fd2:	490a      	ldr	r1, [pc, #40]	; (8021ffc <ethernet_output+0x88>)
 8021fd4:	480a      	ldr	r0, [pc, #40]	; (8022000 <ethernet_output+0x8c>)
 8021fd6:	f000 f969 	bl	80222ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8021fda:	68fb      	ldr	r3, [r7, #12]
 8021fdc:	699b      	ldr	r3, [r3, #24]
 8021fde:	68b9      	ldr	r1, [r7, #8]
 8021fe0:	68f8      	ldr	r0, [r7, #12]
 8021fe2:	4798      	blx	r3
 8021fe4:	4603      	mov	r3, r0
 8021fe6:	e002      	b.n	8021fee <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8021fe8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8021fea:	f06f 0301 	mvn.w	r3, #1
}
 8021fee:	4618      	mov	r0, r3
 8021ff0:	3718      	adds	r7, #24
 8021ff2:	46bd      	mov	sp, r7
 8021ff4:	bd80      	pop	{r7, pc}
 8021ff6:	bf00      	nop
 8021ff8:	0802864c 	.word	0x0802864c
 8021ffc:	080286b0 	.word	0x080286b0
 8022000:	080286e4 	.word	0x080286e4

08022004 <__libc_init_array>:
 8022004:	b570      	push	{r4, r5, r6, lr}
 8022006:	4d0d      	ldr	r5, [pc, #52]	; (802203c <__libc_init_array+0x38>)
 8022008:	4c0d      	ldr	r4, [pc, #52]	; (8022040 <__libc_init_array+0x3c>)
 802200a:	1b64      	subs	r4, r4, r5
 802200c:	10a4      	asrs	r4, r4, #2
 802200e:	2600      	movs	r6, #0
 8022010:	42a6      	cmp	r6, r4
 8022012:	d109      	bne.n	8022028 <__libc_init_array+0x24>
 8022014:	4d0b      	ldr	r5, [pc, #44]	; (8022044 <__libc_init_array+0x40>)
 8022016:	4c0c      	ldr	r4, [pc, #48]	; (8022048 <__libc_init_array+0x44>)
 8022018:	f001 fbfe 	bl	8023818 <_init>
 802201c:	1b64      	subs	r4, r4, r5
 802201e:	10a4      	asrs	r4, r4, #2
 8022020:	2600      	movs	r6, #0
 8022022:	42a6      	cmp	r6, r4
 8022024:	d105      	bne.n	8022032 <__libc_init_array+0x2e>
 8022026:	bd70      	pop	{r4, r5, r6, pc}
 8022028:	f855 3b04 	ldr.w	r3, [r5], #4
 802202c:	4798      	blx	r3
 802202e:	3601      	adds	r6, #1
 8022030:	e7ee      	b.n	8022010 <__libc_init_array+0xc>
 8022032:	f855 3b04 	ldr.w	r3, [r5], #4
 8022036:	4798      	blx	r3
 8022038:	3601      	adds	r6, #1
 802203a:	e7f2      	b.n	8022022 <__libc_init_array+0x1e>
 802203c:	08028d28 	.word	0x08028d28
 8022040:	08028d28 	.word	0x08028d28
 8022044:	08028d28 	.word	0x08028d28
 8022048:	08028d2c 	.word	0x08028d2c

0802204c <malloc>:
 802204c:	4b02      	ldr	r3, [pc, #8]	; (8022058 <malloc+0xc>)
 802204e:	4601      	mov	r1, r0
 8022050:	6818      	ldr	r0, [r3, #0]
 8022052:	f000 b8b7 	b.w	80221c4 <_malloc_r>
 8022056:	bf00      	nop
 8022058:	20000140 	.word	0x20000140

0802205c <free>:
 802205c:	4b02      	ldr	r3, [pc, #8]	; (8022068 <free+0xc>)
 802205e:	4601      	mov	r1, r0
 8022060:	6818      	ldr	r0, [r3, #0]
 8022062:	f000 b843 	b.w	80220ec <_free_r>
 8022066:	bf00      	nop
 8022068:	20000140 	.word	0x20000140

0802206c <memcmp>:
 802206c:	b510      	push	{r4, lr}
 802206e:	3901      	subs	r1, #1
 8022070:	4402      	add	r2, r0
 8022072:	4290      	cmp	r0, r2
 8022074:	d101      	bne.n	802207a <memcmp+0xe>
 8022076:	2000      	movs	r0, #0
 8022078:	e005      	b.n	8022086 <memcmp+0x1a>
 802207a:	7803      	ldrb	r3, [r0, #0]
 802207c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022080:	42a3      	cmp	r3, r4
 8022082:	d001      	beq.n	8022088 <memcmp+0x1c>
 8022084:	1b18      	subs	r0, r3, r4
 8022086:	bd10      	pop	{r4, pc}
 8022088:	3001      	adds	r0, #1
 802208a:	e7f2      	b.n	8022072 <memcmp+0x6>

0802208c <memcpy>:
 802208c:	440a      	add	r2, r1
 802208e:	4291      	cmp	r1, r2
 8022090:	f100 33ff 	add.w	r3, r0, #4294967295
 8022094:	d100      	bne.n	8022098 <memcpy+0xc>
 8022096:	4770      	bx	lr
 8022098:	b510      	push	{r4, lr}
 802209a:	f811 4b01 	ldrb.w	r4, [r1], #1
 802209e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80220a2:	4291      	cmp	r1, r2
 80220a4:	d1f9      	bne.n	802209a <memcpy+0xe>
 80220a6:	bd10      	pop	{r4, pc}

080220a8 <memmove>:
 80220a8:	4288      	cmp	r0, r1
 80220aa:	b510      	push	{r4, lr}
 80220ac:	eb01 0402 	add.w	r4, r1, r2
 80220b0:	d902      	bls.n	80220b8 <memmove+0x10>
 80220b2:	4284      	cmp	r4, r0
 80220b4:	4623      	mov	r3, r4
 80220b6:	d807      	bhi.n	80220c8 <memmove+0x20>
 80220b8:	1e43      	subs	r3, r0, #1
 80220ba:	42a1      	cmp	r1, r4
 80220bc:	d008      	beq.n	80220d0 <memmove+0x28>
 80220be:	f811 2b01 	ldrb.w	r2, [r1], #1
 80220c2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80220c6:	e7f8      	b.n	80220ba <memmove+0x12>
 80220c8:	4402      	add	r2, r0
 80220ca:	4601      	mov	r1, r0
 80220cc:	428a      	cmp	r2, r1
 80220ce:	d100      	bne.n	80220d2 <memmove+0x2a>
 80220d0:	bd10      	pop	{r4, pc}
 80220d2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80220d6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80220da:	e7f7      	b.n	80220cc <memmove+0x24>

080220dc <memset>:
 80220dc:	4402      	add	r2, r0
 80220de:	4603      	mov	r3, r0
 80220e0:	4293      	cmp	r3, r2
 80220e2:	d100      	bne.n	80220e6 <memset+0xa>
 80220e4:	4770      	bx	lr
 80220e6:	f803 1b01 	strb.w	r1, [r3], #1
 80220ea:	e7f9      	b.n	80220e0 <memset+0x4>

080220ec <_free_r>:
 80220ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80220ee:	2900      	cmp	r1, #0
 80220f0:	d044      	beq.n	802217c <_free_r+0x90>
 80220f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80220f6:	9001      	str	r0, [sp, #4]
 80220f8:	2b00      	cmp	r3, #0
 80220fa:	f1a1 0404 	sub.w	r4, r1, #4
 80220fe:	bfb8      	it	lt
 8022100:	18e4      	addlt	r4, r4, r3
 8022102:	f000 fdbb 	bl	8022c7c <__malloc_lock>
 8022106:	4a1e      	ldr	r2, [pc, #120]	; (8022180 <_free_r+0x94>)
 8022108:	9801      	ldr	r0, [sp, #4]
 802210a:	6813      	ldr	r3, [r2, #0]
 802210c:	b933      	cbnz	r3, 802211c <_free_r+0x30>
 802210e:	6063      	str	r3, [r4, #4]
 8022110:	6014      	str	r4, [r2, #0]
 8022112:	b003      	add	sp, #12
 8022114:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8022118:	f000 bdb6 	b.w	8022c88 <__malloc_unlock>
 802211c:	42a3      	cmp	r3, r4
 802211e:	d908      	bls.n	8022132 <_free_r+0x46>
 8022120:	6825      	ldr	r5, [r4, #0]
 8022122:	1961      	adds	r1, r4, r5
 8022124:	428b      	cmp	r3, r1
 8022126:	bf01      	itttt	eq
 8022128:	6819      	ldreq	r1, [r3, #0]
 802212a:	685b      	ldreq	r3, [r3, #4]
 802212c:	1949      	addeq	r1, r1, r5
 802212e:	6021      	streq	r1, [r4, #0]
 8022130:	e7ed      	b.n	802210e <_free_r+0x22>
 8022132:	461a      	mov	r2, r3
 8022134:	685b      	ldr	r3, [r3, #4]
 8022136:	b10b      	cbz	r3, 802213c <_free_r+0x50>
 8022138:	42a3      	cmp	r3, r4
 802213a:	d9fa      	bls.n	8022132 <_free_r+0x46>
 802213c:	6811      	ldr	r1, [r2, #0]
 802213e:	1855      	adds	r5, r2, r1
 8022140:	42a5      	cmp	r5, r4
 8022142:	d10b      	bne.n	802215c <_free_r+0x70>
 8022144:	6824      	ldr	r4, [r4, #0]
 8022146:	4421      	add	r1, r4
 8022148:	1854      	adds	r4, r2, r1
 802214a:	42a3      	cmp	r3, r4
 802214c:	6011      	str	r1, [r2, #0]
 802214e:	d1e0      	bne.n	8022112 <_free_r+0x26>
 8022150:	681c      	ldr	r4, [r3, #0]
 8022152:	685b      	ldr	r3, [r3, #4]
 8022154:	6053      	str	r3, [r2, #4]
 8022156:	4421      	add	r1, r4
 8022158:	6011      	str	r1, [r2, #0]
 802215a:	e7da      	b.n	8022112 <_free_r+0x26>
 802215c:	d902      	bls.n	8022164 <_free_r+0x78>
 802215e:	230c      	movs	r3, #12
 8022160:	6003      	str	r3, [r0, #0]
 8022162:	e7d6      	b.n	8022112 <_free_r+0x26>
 8022164:	6825      	ldr	r5, [r4, #0]
 8022166:	1961      	adds	r1, r4, r5
 8022168:	428b      	cmp	r3, r1
 802216a:	bf04      	itt	eq
 802216c:	6819      	ldreq	r1, [r3, #0]
 802216e:	685b      	ldreq	r3, [r3, #4]
 8022170:	6063      	str	r3, [r4, #4]
 8022172:	bf04      	itt	eq
 8022174:	1949      	addeq	r1, r1, r5
 8022176:	6021      	streq	r1, [r4, #0]
 8022178:	6054      	str	r4, [r2, #4]
 802217a:	e7ca      	b.n	8022112 <_free_r+0x26>
 802217c:	b003      	add	sp, #12
 802217e:	bd30      	pop	{r4, r5, pc}
 8022180:	20014290 	.word	0x20014290

08022184 <sbrk_aligned>:
 8022184:	b570      	push	{r4, r5, r6, lr}
 8022186:	4e0e      	ldr	r6, [pc, #56]	; (80221c0 <sbrk_aligned+0x3c>)
 8022188:	460c      	mov	r4, r1
 802218a:	6831      	ldr	r1, [r6, #0]
 802218c:	4605      	mov	r5, r0
 802218e:	b911      	cbnz	r1, 8022196 <sbrk_aligned+0x12>
 8022190:	f000 f96e 	bl	8022470 <_sbrk_r>
 8022194:	6030      	str	r0, [r6, #0]
 8022196:	4621      	mov	r1, r4
 8022198:	4628      	mov	r0, r5
 802219a:	f000 f969 	bl	8022470 <_sbrk_r>
 802219e:	1c43      	adds	r3, r0, #1
 80221a0:	d00a      	beq.n	80221b8 <sbrk_aligned+0x34>
 80221a2:	1cc4      	adds	r4, r0, #3
 80221a4:	f024 0403 	bic.w	r4, r4, #3
 80221a8:	42a0      	cmp	r0, r4
 80221aa:	d007      	beq.n	80221bc <sbrk_aligned+0x38>
 80221ac:	1a21      	subs	r1, r4, r0
 80221ae:	4628      	mov	r0, r5
 80221b0:	f000 f95e 	bl	8022470 <_sbrk_r>
 80221b4:	3001      	adds	r0, #1
 80221b6:	d101      	bne.n	80221bc <sbrk_aligned+0x38>
 80221b8:	f04f 34ff 	mov.w	r4, #4294967295
 80221bc:	4620      	mov	r0, r4
 80221be:	bd70      	pop	{r4, r5, r6, pc}
 80221c0:	20014294 	.word	0x20014294

080221c4 <_malloc_r>:
 80221c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80221c8:	1ccd      	adds	r5, r1, #3
 80221ca:	f025 0503 	bic.w	r5, r5, #3
 80221ce:	3508      	adds	r5, #8
 80221d0:	2d0c      	cmp	r5, #12
 80221d2:	bf38      	it	cc
 80221d4:	250c      	movcc	r5, #12
 80221d6:	2d00      	cmp	r5, #0
 80221d8:	4607      	mov	r7, r0
 80221da:	db01      	blt.n	80221e0 <_malloc_r+0x1c>
 80221dc:	42a9      	cmp	r1, r5
 80221de:	d905      	bls.n	80221ec <_malloc_r+0x28>
 80221e0:	230c      	movs	r3, #12
 80221e2:	603b      	str	r3, [r7, #0]
 80221e4:	2600      	movs	r6, #0
 80221e6:	4630      	mov	r0, r6
 80221e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80221ec:	4e2e      	ldr	r6, [pc, #184]	; (80222a8 <_malloc_r+0xe4>)
 80221ee:	f000 fd45 	bl	8022c7c <__malloc_lock>
 80221f2:	6833      	ldr	r3, [r6, #0]
 80221f4:	461c      	mov	r4, r3
 80221f6:	bb34      	cbnz	r4, 8022246 <_malloc_r+0x82>
 80221f8:	4629      	mov	r1, r5
 80221fa:	4638      	mov	r0, r7
 80221fc:	f7ff ffc2 	bl	8022184 <sbrk_aligned>
 8022200:	1c43      	adds	r3, r0, #1
 8022202:	4604      	mov	r4, r0
 8022204:	d14d      	bne.n	80222a2 <_malloc_r+0xde>
 8022206:	6834      	ldr	r4, [r6, #0]
 8022208:	4626      	mov	r6, r4
 802220a:	2e00      	cmp	r6, #0
 802220c:	d140      	bne.n	8022290 <_malloc_r+0xcc>
 802220e:	6823      	ldr	r3, [r4, #0]
 8022210:	4631      	mov	r1, r6
 8022212:	4638      	mov	r0, r7
 8022214:	eb04 0803 	add.w	r8, r4, r3
 8022218:	f000 f92a 	bl	8022470 <_sbrk_r>
 802221c:	4580      	cmp	r8, r0
 802221e:	d13a      	bne.n	8022296 <_malloc_r+0xd2>
 8022220:	6821      	ldr	r1, [r4, #0]
 8022222:	3503      	adds	r5, #3
 8022224:	1a6d      	subs	r5, r5, r1
 8022226:	f025 0503 	bic.w	r5, r5, #3
 802222a:	3508      	adds	r5, #8
 802222c:	2d0c      	cmp	r5, #12
 802222e:	bf38      	it	cc
 8022230:	250c      	movcc	r5, #12
 8022232:	4629      	mov	r1, r5
 8022234:	4638      	mov	r0, r7
 8022236:	f7ff ffa5 	bl	8022184 <sbrk_aligned>
 802223a:	3001      	adds	r0, #1
 802223c:	d02b      	beq.n	8022296 <_malloc_r+0xd2>
 802223e:	6823      	ldr	r3, [r4, #0]
 8022240:	442b      	add	r3, r5
 8022242:	6023      	str	r3, [r4, #0]
 8022244:	e00e      	b.n	8022264 <_malloc_r+0xa0>
 8022246:	6822      	ldr	r2, [r4, #0]
 8022248:	1b52      	subs	r2, r2, r5
 802224a:	d41e      	bmi.n	802228a <_malloc_r+0xc6>
 802224c:	2a0b      	cmp	r2, #11
 802224e:	d916      	bls.n	802227e <_malloc_r+0xba>
 8022250:	1961      	adds	r1, r4, r5
 8022252:	42a3      	cmp	r3, r4
 8022254:	6025      	str	r5, [r4, #0]
 8022256:	bf18      	it	ne
 8022258:	6059      	strne	r1, [r3, #4]
 802225a:	6863      	ldr	r3, [r4, #4]
 802225c:	bf08      	it	eq
 802225e:	6031      	streq	r1, [r6, #0]
 8022260:	5162      	str	r2, [r4, r5]
 8022262:	604b      	str	r3, [r1, #4]
 8022264:	4638      	mov	r0, r7
 8022266:	f104 060b 	add.w	r6, r4, #11
 802226a:	f000 fd0d 	bl	8022c88 <__malloc_unlock>
 802226e:	f026 0607 	bic.w	r6, r6, #7
 8022272:	1d23      	adds	r3, r4, #4
 8022274:	1af2      	subs	r2, r6, r3
 8022276:	d0b6      	beq.n	80221e6 <_malloc_r+0x22>
 8022278:	1b9b      	subs	r3, r3, r6
 802227a:	50a3      	str	r3, [r4, r2]
 802227c:	e7b3      	b.n	80221e6 <_malloc_r+0x22>
 802227e:	6862      	ldr	r2, [r4, #4]
 8022280:	42a3      	cmp	r3, r4
 8022282:	bf0c      	ite	eq
 8022284:	6032      	streq	r2, [r6, #0]
 8022286:	605a      	strne	r2, [r3, #4]
 8022288:	e7ec      	b.n	8022264 <_malloc_r+0xa0>
 802228a:	4623      	mov	r3, r4
 802228c:	6864      	ldr	r4, [r4, #4]
 802228e:	e7b2      	b.n	80221f6 <_malloc_r+0x32>
 8022290:	4634      	mov	r4, r6
 8022292:	6876      	ldr	r6, [r6, #4]
 8022294:	e7b9      	b.n	802220a <_malloc_r+0x46>
 8022296:	230c      	movs	r3, #12
 8022298:	603b      	str	r3, [r7, #0]
 802229a:	4638      	mov	r0, r7
 802229c:	f000 fcf4 	bl	8022c88 <__malloc_unlock>
 80222a0:	e7a1      	b.n	80221e6 <_malloc_r+0x22>
 80222a2:	6025      	str	r5, [r4, #0]
 80222a4:	e7de      	b.n	8022264 <_malloc_r+0xa0>
 80222a6:	bf00      	nop
 80222a8:	20014290 	.word	0x20014290

080222ac <iprintf>:
 80222ac:	b40f      	push	{r0, r1, r2, r3}
 80222ae:	4b0a      	ldr	r3, [pc, #40]	; (80222d8 <iprintf+0x2c>)
 80222b0:	b513      	push	{r0, r1, r4, lr}
 80222b2:	681c      	ldr	r4, [r3, #0]
 80222b4:	b124      	cbz	r4, 80222c0 <iprintf+0x14>
 80222b6:	69a3      	ldr	r3, [r4, #24]
 80222b8:	b913      	cbnz	r3, 80222c0 <iprintf+0x14>
 80222ba:	4620      	mov	r0, r4
 80222bc:	f000 fbc6 	bl	8022a4c <__sinit>
 80222c0:	ab05      	add	r3, sp, #20
 80222c2:	9a04      	ldr	r2, [sp, #16]
 80222c4:	68a1      	ldr	r1, [r4, #8]
 80222c6:	9301      	str	r3, [sp, #4]
 80222c8:	4620      	mov	r0, r4
 80222ca:	f000 fe69 	bl	8022fa0 <_vfiprintf_r>
 80222ce:	b002      	add	sp, #8
 80222d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222d4:	b004      	add	sp, #16
 80222d6:	4770      	bx	lr
 80222d8:	20000140 	.word	0x20000140

080222dc <putchar>:
 80222dc:	4b09      	ldr	r3, [pc, #36]	; (8022304 <putchar+0x28>)
 80222de:	b513      	push	{r0, r1, r4, lr}
 80222e0:	681c      	ldr	r4, [r3, #0]
 80222e2:	4601      	mov	r1, r0
 80222e4:	b134      	cbz	r4, 80222f4 <putchar+0x18>
 80222e6:	69a3      	ldr	r3, [r4, #24]
 80222e8:	b923      	cbnz	r3, 80222f4 <putchar+0x18>
 80222ea:	9001      	str	r0, [sp, #4]
 80222ec:	4620      	mov	r0, r4
 80222ee:	f000 fbad 	bl	8022a4c <__sinit>
 80222f2:	9901      	ldr	r1, [sp, #4]
 80222f4:	68a2      	ldr	r2, [r4, #8]
 80222f6:	4620      	mov	r0, r4
 80222f8:	b002      	add	sp, #8
 80222fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80222fe:	f001 b913 	b.w	8023528 <_putc_r>
 8022302:	bf00      	nop
 8022304:	20000140 	.word	0x20000140

08022308 <_puts_r>:
 8022308:	b570      	push	{r4, r5, r6, lr}
 802230a:	460e      	mov	r6, r1
 802230c:	4605      	mov	r5, r0
 802230e:	b118      	cbz	r0, 8022318 <_puts_r+0x10>
 8022310:	6983      	ldr	r3, [r0, #24]
 8022312:	b90b      	cbnz	r3, 8022318 <_puts_r+0x10>
 8022314:	f000 fb9a 	bl	8022a4c <__sinit>
 8022318:	69ab      	ldr	r3, [r5, #24]
 802231a:	68ac      	ldr	r4, [r5, #8]
 802231c:	b913      	cbnz	r3, 8022324 <_puts_r+0x1c>
 802231e:	4628      	mov	r0, r5
 8022320:	f000 fb94 	bl	8022a4c <__sinit>
 8022324:	4b2c      	ldr	r3, [pc, #176]	; (80223d8 <_puts_r+0xd0>)
 8022326:	429c      	cmp	r4, r3
 8022328:	d120      	bne.n	802236c <_puts_r+0x64>
 802232a:	686c      	ldr	r4, [r5, #4]
 802232c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 802232e:	07db      	lsls	r3, r3, #31
 8022330:	d405      	bmi.n	802233e <_puts_r+0x36>
 8022332:	89a3      	ldrh	r3, [r4, #12]
 8022334:	0598      	lsls	r0, r3, #22
 8022336:	d402      	bmi.n	802233e <_puts_r+0x36>
 8022338:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802233a:	f000 fc37 	bl	8022bac <__retarget_lock_acquire_recursive>
 802233e:	89a3      	ldrh	r3, [r4, #12]
 8022340:	0719      	lsls	r1, r3, #28
 8022342:	d51d      	bpl.n	8022380 <_puts_r+0x78>
 8022344:	6923      	ldr	r3, [r4, #16]
 8022346:	b1db      	cbz	r3, 8022380 <_puts_r+0x78>
 8022348:	3e01      	subs	r6, #1
 802234a:	68a3      	ldr	r3, [r4, #8]
 802234c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8022350:	3b01      	subs	r3, #1
 8022352:	60a3      	str	r3, [r4, #8]
 8022354:	bb39      	cbnz	r1, 80223a6 <_puts_r+0x9e>
 8022356:	2b00      	cmp	r3, #0
 8022358:	da38      	bge.n	80223cc <_puts_r+0xc4>
 802235a:	4622      	mov	r2, r4
 802235c:	210a      	movs	r1, #10
 802235e:	4628      	mov	r0, r5
 8022360:	f000 f97c 	bl	802265c <__swbuf_r>
 8022364:	3001      	adds	r0, #1
 8022366:	d011      	beq.n	802238c <_puts_r+0x84>
 8022368:	250a      	movs	r5, #10
 802236a:	e011      	b.n	8022390 <_puts_r+0x88>
 802236c:	4b1b      	ldr	r3, [pc, #108]	; (80223dc <_puts_r+0xd4>)
 802236e:	429c      	cmp	r4, r3
 8022370:	d101      	bne.n	8022376 <_puts_r+0x6e>
 8022372:	68ac      	ldr	r4, [r5, #8]
 8022374:	e7da      	b.n	802232c <_puts_r+0x24>
 8022376:	4b1a      	ldr	r3, [pc, #104]	; (80223e0 <_puts_r+0xd8>)
 8022378:	429c      	cmp	r4, r3
 802237a:	bf08      	it	eq
 802237c:	68ec      	ldreq	r4, [r5, #12]
 802237e:	e7d5      	b.n	802232c <_puts_r+0x24>
 8022380:	4621      	mov	r1, r4
 8022382:	4628      	mov	r0, r5
 8022384:	f000 f9bc 	bl	8022700 <__swsetup_r>
 8022388:	2800      	cmp	r0, #0
 802238a:	d0dd      	beq.n	8022348 <_puts_r+0x40>
 802238c:	f04f 35ff 	mov.w	r5, #4294967295
 8022390:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022392:	07da      	lsls	r2, r3, #31
 8022394:	d405      	bmi.n	80223a2 <_puts_r+0x9a>
 8022396:	89a3      	ldrh	r3, [r4, #12]
 8022398:	059b      	lsls	r3, r3, #22
 802239a:	d402      	bmi.n	80223a2 <_puts_r+0x9a>
 802239c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802239e:	f000 fc06 	bl	8022bae <__retarget_lock_release_recursive>
 80223a2:	4628      	mov	r0, r5
 80223a4:	bd70      	pop	{r4, r5, r6, pc}
 80223a6:	2b00      	cmp	r3, #0
 80223a8:	da04      	bge.n	80223b4 <_puts_r+0xac>
 80223aa:	69a2      	ldr	r2, [r4, #24]
 80223ac:	429a      	cmp	r2, r3
 80223ae:	dc06      	bgt.n	80223be <_puts_r+0xb6>
 80223b0:	290a      	cmp	r1, #10
 80223b2:	d004      	beq.n	80223be <_puts_r+0xb6>
 80223b4:	6823      	ldr	r3, [r4, #0]
 80223b6:	1c5a      	adds	r2, r3, #1
 80223b8:	6022      	str	r2, [r4, #0]
 80223ba:	7019      	strb	r1, [r3, #0]
 80223bc:	e7c5      	b.n	802234a <_puts_r+0x42>
 80223be:	4622      	mov	r2, r4
 80223c0:	4628      	mov	r0, r5
 80223c2:	f000 f94b 	bl	802265c <__swbuf_r>
 80223c6:	3001      	adds	r0, #1
 80223c8:	d1bf      	bne.n	802234a <_puts_r+0x42>
 80223ca:	e7df      	b.n	802238c <_puts_r+0x84>
 80223cc:	6823      	ldr	r3, [r4, #0]
 80223ce:	250a      	movs	r5, #10
 80223d0:	1c5a      	adds	r2, r3, #1
 80223d2:	6022      	str	r2, [r4, #0]
 80223d4:	701d      	strb	r5, [r3, #0]
 80223d6:	e7db      	b.n	8022390 <_puts_r+0x88>
 80223d8:	08028cac 	.word	0x08028cac
 80223dc:	08028ccc 	.word	0x08028ccc
 80223e0:	08028c8c 	.word	0x08028c8c

080223e4 <puts>:
 80223e4:	4b02      	ldr	r3, [pc, #8]	; (80223f0 <puts+0xc>)
 80223e6:	4601      	mov	r1, r0
 80223e8:	6818      	ldr	r0, [r3, #0]
 80223ea:	f7ff bf8d 	b.w	8022308 <_puts_r>
 80223ee:	bf00      	nop
 80223f0:	20000140 	.word	0x20000140

080223f4 <rand>:
 80223f4:	4b16      	ldr	r3, [pc, #88]	; (8022450 <rand+0x5c>)
 80223f6:	b510      	push	{r4, lr}
 80223f8:	681c      	ldr	r4, [r3, #0]
 80223fa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80223fc:	b9b3      	cbnz	r3, 802242c <rand+0x38>
 80223fe:	2018      	movs	r0, #24
 8022400:	f7ff fe24 	bl	802204c <malloc>
 8022404:	63a0      	str	r0, [r4, #56]	; 0x38
 8022406:	b928      	cbnz	r0, 8022414 <rand+0x20>
 8022408:	4602      	mov	r2, r0
 802240a:	4b12      	ldr	r3, [pc, #72]	; (8022454 <rand+0x60>)
 802240c:	4812      	ldr	r0, [pc, #72]	; (8022458 <rand+0x64>)
 802240e:	214e      	movs	r1, #78	; 0x4e
 8022410:	f000 f9e4 	bl	80227dc <__assert_func>
 8022414:	4a11      	ldr	r2, [pc, #68]	; (802245c <rand+0x68>)
 8022416:	4b12      	ldr	r3, [pc, #72]	; (8022460 <rand+0x6c>)
 8022418:	e9c0 2300 	strd	r2, r3, [r0]
 802241c:	4b11      	ldr	r3, [pc, #68]	; (8022464 <rand+0x70>)
 802241e:	6083      	str	r3, [r0, #8]
 8022420:	230b      	movs	r3, #11
 8022422:	8183      	strh	r3, [r0, #12]
 8022424:	2201      	movs	r2, #1
 8022426:	2300      	movs	r3, #0
 8022428:	e9c0 2304 	strd	r2, r3, [r0, #16]
 802242c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 802242e:	4a0e      	ldr	r2, [pc, #56]	; (8022468 <rand+0x74>)
 8022430:	6920      	ldr	r0, [r4, #16]
 8022432:	6963      	ldr	r3, [r4, #20]
 8022434:	490d      	ldr	r1, [pc, #52]	; (802246c <rand+0x78>)
 8022436:	4342      	muls	r2, r0
 8022438:	fb01 2203 	mla	r2, r1, r3, r2
 802243c:	fba0 0101 	umull	r0, r1, r0, r1
 8022440:	1c43      	adds	r3, r0, #1
 8022442:	eb42 0001 	adc.w	r0, r2, r1
 8022446:	e9c4 3004 	strd	r3, r0, [r4, #16]
 802244a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802244e:	bd10      	pop	{r4, pc}
 8022450:	20000140 	.word	0x20000140
 8022454:	08028bdc 	.word	0x08028bdc
 8022458:	08028bf3 	.word	0x08028bf3
 802245c:	abcd330e 	.word	0xabcd330e
 8022460:	e66d1234 	.word	0xe66d1234
 8022464:	0005deec 	.word	0x0005deec
 8022468:	5851f42d 	.word	0x5851f42d
 802246c:	4c957f2d 	.word	0x4c957f2d

08022470 <_sbrk_r>:
 8022470:	b538      	push	{r3, r4, r5, lr}
 8022472:	4d06      	ldr	r5, [pc, #24]	; (802248c <_sbrk_r+0x1c>)
 8022474:	2300      	movs	r3, #0
 8022476:	4604      	mov	r4, r0
 8022478:	4608      	mov	r0, r1
 802247a:	602b      	str	r3, [r5, #0]
 802247c:	f7f2 f888 	bl	8014590 <_sbrk>
 8022480:	1c43      	adds	r3, r0, #1
 8022482:	d102      	bne.n	802248a <_sbrk_r+0x1a>
 8022484:	682b      	ldr	r3, [r5, #0]
 8022486:	b103      	cbz	r3, 802248a <_sbrk_r+0x1a>
 8022488:	6023      	str	r3, [r4, #0]
 802248a:	bd38      	pop	{r3, r4, r5, pc}
 802248c:	20014298 	.word	0x20014298

08022490 <setvbuf>:
 8022490:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8022494:	461d      	mov	r5, r3
 8022496:	4b5d      	ldr	r3, [pc, #372]	; (802260c <setvbuf+0x17c>)
 8022498:	681f      	ldr	r7, [r3, #0]
 802249a:	4604      	mov	r4, r0
 802249c:	460e      	mov	r6, r1
 802249e:	4690      	mov	r8, r2
 80224a0:	b127      	cbz	r7, 80224ac <setvbuf+0x1c>
 80224a2:	69bb      	ldr	r3, [r7, #24]
 80224a4:	b913      	cbnz	r3, 80224ac <setvbuf+0x1c>
 80224a6:	4638      	mov	r0, r7
 80224a8:	f000 fad0 	bl	8022a4c <__sinit>
 80224ac:	4b58      	ldr	r3, [pc, #352]	; (8022610 <setvbuf+0x180>)
 80224ae:	429c      	cmp	r4, r3
 80224b0:	d167      	bne.n	8022582 <setvbuf+0xf2>
 80224b2:	687c      	ldr	r4, [r7, #4]
 80224b4:	f1b8 0f02 	cmp.w	r8, #2
 80224b8:	d006      	beq.n	80224c8 <setvbuf+0x38>
 80224ba:	f1b8 0f01 	cmp.w	r8, #1
 80224be:	f200 809f 	bhi.w	8022600 <setvbuf+0x170>
 80224c2:	2d00      	cmp	r5, #0
 80224c4:	f2c0 809c 	blt.w	8022600 <setvbuf+0x170>
 80224c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80224ca:	07db      	lsls	r3, r3, #31
 80224cc:	d405      	bmi.n	80224da <setvbuf+0x4a>
 80224ce:	89a3      	ldrh	r3, [r4, #12]
 80224d0:	0598      	lsls	r0, r3, #22
 80224d2:	d402      	bmi.n	80224da <setvbuf+0x4a>
 80224d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80224d6:	f000 fb69 	bl	8022bac <__retarget_lock_acquire_recursive>
 80224da:	4621      	mov	r1, r4
 80224dc:	4638      	mov	r0, r7
 80224de:	f000 fa21 	bl	8022924 <_fflush_r>
 80224e2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80224e4:	b141      	cbz	r1, 80224f8 <setvbuf+0x68>
 80224e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80224ea:	4299      	cmp	r1, r3
 80224ec:	d002      	beq.n	80224f4 <setvbuf+0x64>
 80224ee:	4638      	mov	r0, r7
 80224f0:	f7ff fdfc 	bl	80220ec <_free_r>
 80224f4:	2300      	movs	r3, #0
 80224f6:	6363      	str	r3, [r4, #52]	; 0x34
 80224f8:	2300      	movs	r3, #0
 80224fa:	61a3      	str	r3, [r4, #24]
 80224fc:	6063      	str	r3, [r4, #4]
 80224fe:	89a3      	ldrh	r3, [r4, #12]
 8022500:	0619      	lsls	r1, r3, #24
 8022502:	d503      	bpl.n	802250c <setvbuf+0x7c>
 8022504:	6921      	ldr	r1, [r4, #16]
 8022506:	4638      	mov	r0, r7
 8022508:	f7ff fdf0 	bl	80220ec <_free_r>
 802250c:	89a3      	ldrh	r3, [r4, #12]
 802250e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8022512:	f023 0303 	bic.w	r3, r3, #3
 8022516:	f1b8 0f02 	cmp.w	r8, #2
 802251a:	81a3      	strh	r3, [r4, #12]
 802251c:	d06c      	beq.n	80225f8 <setvbuf+0x168>
 802251e:	ab01      	add	r3, sp, #4
 8022520:	466a      	mov	r2, sp
 8022522:	4621      	mov	r1, r4
 8022524:	4638      	mov	r0, r7
 8022526:	f000 fb43 	bl	8022bb0 <__swhatbuf_r>
 802252a:	89a3      	ldrh	r3, [r4, #12]
 802252c:	4318      	orrs	r0, r3
 802252e:	81a0      	strh	r0, [r4, #12]
 8022530:	2d00      	cmp	r5, #0
 8022532:	d130      	bne.n	8022596 <setvbuf+0x106>
 8022534:	9d00      	ldr	r5, [sp, #0]
 8022536:	4628      	mov	r0, r5
 8022538:	f7ff fd88 	bl	802204c <malloc>
 802253c:	4606      	mov	r6, r0
 802253e:	2800      	cmp	r0, #0
 8022540:	d155      	bne.n	80225ee <setvbuf+0x15e>
 8022542:	f8dd 9000 	ldr.w	r9, [sp]
 8022546:	45a9      	cmp	r9, r5
 8022548:	d14a      	bne.n	80225e0 <setvbuf+0x150>
 802254a:	f04f 35ff 	mov.w	r5, #4294967295
 802254e:	2200      	movs	r2, #0
 8022550:	60a2      	str	r2, [r4, #8]
 8022552:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8022556:	6022      	str	r2, [r4, #0]
 8022558:	6122      	str	r2, [r4, #16]
 802255a:	2201      	movs	r2, #1
 802255c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022560:	6162      	str	r2, [r4, #20]
 8022562:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022564:	f043 0302 	orr.w	r3, r3, #2
 8022568:	07d2      	lsls	r2, r2, #31
 802256a:	81a3      	strh	r3, [r4, #12]
 802256c:	d405      	bmi.n	802257a <setvbuf+0xea>
 802256e:	f413 7f00 	tst.w	r3, #512	; 0x200
 8022572:	d102      	bne.n	802257a <setvbuf+0xea>
 8022574:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022576:	f000 fb1a 	bl	8022bae <__retarget_lock_release_recursive>
 802257a:	4628      	mov	r0, r5
 802257c:	b003      	add	sp, #12
 802257e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8022582:	4b24      	ldr	r3, [pc, #144]	; (8022614 <setvbuf+0x184>)
 8022584:	429c      	cmp	r4, r3
 8022586:	d101      	bne.n	802258c <setvbuf+0xfc>
 8022588:	68bc      	ldr	r4, [r7, #8]
 802258a:	e793      	b.n	80224b4 <setvbuf+0x24>
 802258c:	4b22      	ldr	r3, [pc, #136]	; (8022618 <setvbuf+0x188>)
 802258e:	429c      	cmp	r4, r3
 8022590:	bf08      	it	eq
 8022592:	68fc      	ldreq	r4, [r7, #12]
 8022594:	e78e      	b.n	80224b4 <setvbuf+0x24>
 8022596:	2e00      	cmp	r6, #0
 8022598:	d0cd      	beq.n	8022536 <setvbuf+0xa6>
 802259a:	69bb      	ldr	r3, [r7, #24]
 802259c:	b913      	cbnz	r3, 80225a4 <setvbuf+0x114>
 802259e:	4638      	mov	r0, r7
 80225a0:	f000 fa54 	bl	8022a4c <__sinit>
 80225a4:	f1b8 0f01 	cmp.w	r8, #1
 80225a8:	bf08      	it	eq
 80225aa:	89a3      	ldrheq	r3, [r4, #12]
 80225ac:	6026      	str	r6, [r4, #0]
 80225ae:	bf04      	itt	eq
 80225b0:	f043 0301 	orreq.w	r3, r3, #1
 80225b4:	81a3      	strheq	r3, [r4, #12]
 80225b6:	89a2      	ldrh	r2, [r4, #12]
 80225b8:	f012 0308 	ands.w	r3, r2, #8
 80225bc:	e9c4 6504 	strd	r6, r5, [r4, #16]
 80225c0:	d01c      	beq.n	80225fc <setvbuf+0x16c>
 80225c2:	07d3      	lsls	r3, r2, #31
 80225c4:	bf41      	itttt	mi
 80225c6:	2300      	movmi	r3, #0
 80225c8:	426d      	negmi	r5, r5
 80225ca:	60a3      	strmi	r3, [r4, #8]
 80225cc:	61a5      	strmi	r5, [r4, #24]
 80225ce:	bf58      	it	pl
 80225d0:	60a5      	strpl	r5, [r4, #8]
 80225d2:	6e65      	ldr	r5, [r4, #100]	; 0x64
 80225d4:	f015 0501 	ands.w	r5, r5, #1
 80225d8:	d115      	bne.n	8022606 <setvbuf+0x176>
 80225da:	f412 7f00 	tst.w	r2, #512	; 0x200
 80225de:	e7c8      	b.n	8022572 <setvbuf+0xe2>
 80225e0:	4648      	mov	r0, r9
 80225e2:	f7ff fd33 	bl	802204c <malloc>
 80225e6:	4606      	mov	r6, r0
 80225e8:	2800      	cmp	r0, #0
 80225ea:	d0ae      	beq.n	802254a <setvbuf+0xba>
 80225ec:	464d      	mov	r5, r9
 80225ee:	89a3      	ldrh	r3, [r4, #12]
 80225f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80225f4:	81a3      	strh	r3, [r4, #12]
 80225f6:	e7d0      	b.n	802259a <setvbuf+0x10a>
 80225f8:	2500      	movs	r5, #0
 80225fa:	e7a8      	b.n	802254e <setvbuf+0xbe>
 80225fc:	60a3      	str	r3, [r4, #8]
 80225fe:	e7e8      	b.n	80225d2 <setvbuf+0x142>
 8022600:	f04f 35ff 	mov.w	r5, #4294967295
 8022604:	e7b9      	b.n	802257a <setvbuf+0xea>
 8022606:	2500      	movs	r5, #0
 8022608:	e7b7      	b.n	802257a <setvbuf+0xea>
 802260a:	bf00      	nop
 802260c:	20000140 	.word	0x20000140
 8022610:	08028cac 	.word	0x08028cac
 8022614:	08028ccc 	.word	0x08028ccc
 8022618:	08028c8c 	.word	0x08028c8c

0802261c <siprintf>:
 802261c:	b40e      	push	{r1, r2, r3}
 802261e:	b500      	push	{lr}
 8022620:	b09c      	sub	sp, #112	; 0x70
 8022622:	ab1d      	add	r3, sp, #116	; 0x74
 8022624:	9002      	str	r0, [sp, #8]
 8022626:	9006      	str	r0, [sp, #24]
 8022628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 802262c:	4809      	ldr	r0, [pc, #36]	; (8022654 <siprintf+0x38>)
 802262e:	9107      	str	r1, [sp, #28]
 8022630:	9104      	str	r1, [sp, #16]
 8022632:	4909      	ldr	r1, [pc, #36]	; (8022658 <siprintf+0x3c>)
 8022634:	f853 2b04 	ldr.w	r2, [r3], #4
 8022638:	9105      	str	r1, [sp, #20]
 802263a:	6800      	ldr	r0, [r0, #0]
 802263c:	9301      	str	r3, [sp, #4]
 802263e:	a902      	add	r1, sp, #8
 8022640:	f000 fb84 	bl	8022d4c <_svfiprintf_r>
 8022644:	9b02      	ldr	r3, [sp, #8]
 8022646:	2200      	movs	r2, #0
 8022648:	701a      	strb	r2, [r3, #0]
 802264a:	b01c      	add	sp, #112	; 0x70
 802264c:	f85d eb04 	ldr.w	lr, [sp], #4
 8022650:	b003      	add	sp, #12
 8022652:	4770      	bx	lr
 8022654:	20000140 	.word	0x20000140
 8022658:	ffff0208 	.word	0xffff0208

0802265c <__swbuf_r>:
 802265c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802265e:	460e      	mov	r6, r1
 8022660:	4614      	mov	r4, r2
 8022662:	4605      	mov	r5, r0
 8022664:	b118      	cbz	r0, 802266e <__swbuf_r+0x12>
 8022666:	6983      	ldr	r3, [r0, #24]
 8022668:	b90b      	cbnz	r3, 802266e <__swbuf_r+0x12>
 802266a:	f000 f9ef 	bl	8022a4c <__sinit>
 802266e:	4b21      	ldr	r3, [pc, #132]	; (80226f4 <__swbuf_r+0x98>)
 8022670:	429c      	cmp	r4, r3
 8022672:	d12b      	bne.n	80226cc <__swbuf_r+0x70>
 8022674:	686c      	ldr	r4, [r5, #4]
 8022676:	69a3      	ldr	r3, [r4, #24]
 8022678:	60a3      	str	r3, [r4, #8]
 802267a:	89a3      	ldrh	r3, [r4, #12]
 802267c:	071a      	lsls	r2, r3, #28
 802267e:	d52f      	bpl.n	80226e0 <__swbuf_r+0x84>
 8022680:	6923      	ldr	r3, [r4, #16]
 8022682:	b36b      	cbz	r3, 80226e0 <__swbuf_r+0x84>
 8022684:	6923      	ldr	r3, [r4, #16]
 8022686:	6820      	ldr	r0, [r4, #0]
 8022688:	1ac0      	subs	r0, r0, r3
 802268a:	6963      	ldr	r3, [r4, #20]
 802268c:	b2f6      	uxtb	r6, r6
 802268e:	4283      	cmp	r3, r0
 8022690:	4637      	mov	r7, r6
 8022692:	dc04      	bgt.n	802269e <__swbuf_r+0x42>
 8022694:	4621      	mov	r1, r4
 8022696:	4628      	mov	r0, r5
 8022698:	f000 f944 	bl	8022924 <_fflush_r>
 802269c:	bb30      	cbnz	r0, 80226ec <__swbuf_r+0x90>
 802269e:	68a3      	ldr	r3, [r4, #8]
 80226a0:	3b01      	subs	r3, #1
 80226a2:	60a3      	str	r3, [r4, #8]
 80226a4:	6823      	ldr	r3, [r4, #0]
 80226a6:	1c5a      	adds	r2, r3, #1
 80226a8:	6022      	str	r2, [r4, #0]
 80226aa:	701e      	strb	r6, [r3, #0]
 80226ac:	6963      	ldr	r3, [r4, #20]
 80226ae:	3001      	adds	r0, #1
 80226b0:	4283      	cmp	r3, r0
 80226b2:	d004      	beq.n	80226be <__swbuf_r+0x62>
 80226b4:	89a3      	ldrh	r3, [r4, #12]
 80226b6:	07db      	lsls	r3, r3, #31
 80226b8:	d506      	bpl.n	80226c8 <__swbuf_r+0x6c>
 80226ba:	2e0a      	cmp	r6, #10
 80226bc:	d104      	bne.n	80226c8 <__swbuf_r+0x6c>
 80226be:	4621      	mov	r1, r4
 80226c0:	4628      	mov	r0, r5
 80226c2:	f000 f92f 	bl	8022924 <_fflush_r>
 80226c6:	b988      	cbnz	r0, 80226ec <__swbuf_r+0x90>
 80226c8:	4638      	mov	r0, r7
 80226ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80226cc:	4b0a      	ldr	r3, [pc, #40]	; (80226f8 <__swbuf_r+0x9c>)
 80226ce:	429c      	cmp	r4, r3
 80226d0:	d101      	bne.n	80226d6 <__swbuf_r+0x7a>
 80226d2:	68ac      	ldr	r4, [r5, #8]
 80226d4:	e7cf      	b.n	8022676 <__swbuf_r+0x1a>
 80226d6:	4b09      	ldr	r3, [pc, #36]	; (80226fc <__swbuf_r+0xa0>)
 80226d8:	429c      	cmp	r4, r3
 80226da:	bf08      	it	eq
 80226dc:	68ec      	ldreq	r4, [r5, #12]
 80226de:	e7ca      	b.n	8022676 <__swbuf_r+0x1a>
 80226e0:	4621      	mov	r1, r4
 80226e2:	4628      	mov	r0, r5
 80226e4:	f000 f80c 	bl	8022700 <__swsetup_r>
 80226e8:	2800      	cmp	r0, #0
 80226ea:	d0cb      	beq.n	8022684 <__swbuf_r+0x28>
 80226ec:	f04f 37ff 	mov.w	r7, #4294967295
 80226f0:	e7ea      	b.n	80226c8 <__swbuf_r+0x6c>
 80226f2:	bf00      	nop
 80226f4:	08028cac 	.word	0x08028cac
 80226f8:	08028ccc 	.word	0x08028ccc
 80226fc:	08028c8c 	.word	0x08028c8c

08022700 <__swsetup_r>:
 8022700:	4b32      	ldr	r3, [pc, #200]	; (80227cc <__swsetup_r+0xcc>)
 8022702:	b570      	push	{r4, r5, r6, lr}
 8022704:	681d      	ldr	r5, [r3, #0]
 8022706:	4606      	mov	r6, r0
 8022708:	460c      	mov	r4, r1
 802270a:	b125      	cbz	r5, 8022716 <__swsetup_r+0x16>
 802270c:	69ab      	ldr	r3, [r5, #24]
 802270e:	b913      	cbnz	r3, 8022716 <__swsetup_r+0x16>
 8022710:	4628      	mov	r0, r5
 8022712:	f000 f99b 	bl	8022a4c <__sinit>
 8022716:	4b2e      	ldr	r3, [pc, #184]	; (80227d0 <__swsetup_r+0xd0>)
 8022718:	429c      	cmp	r4, r3
 802271a:	d10f      	bne.n	802273c <__swsetup_r+0x3c>
 802271c:	686c      	ldr	r4, [r5, #4]
 802271e:	89a3      	ldrh	r3, [r4, #12]
 8022720:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8022724:	0719      	lsls	r1, r3, #28
 8022726:	d42c      	bmi.n	8022782 <__swsetup_r+0x82>
 8022728:	06dd      	lsls	r5, r3, #27
 802272a:	d411      	bmi.n	8022750 <__swsetup_r+0x50>
 802272c:	2309      	movs	r3, #9
 802272e:	6033      	str	r3, [r6, #0]
 8022730:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8022734:	81a3      	strh	r3, [r4, #12]
 8022736:	f04f 30ff 	mov.w	r0, #4294967295
 802273a:	e03e      	b.n	80227ba <__swsetup_r+0xba>
 802273c:	4b25      	ldr	r3, [pc, #148]	; (80227d4 <__swsetup_r+0xd4>)
 802273e:	429c      	cmp	r4, r3
 8022740:	d101      	bne.n	8022746 <__swsetup_r+0x46>
 8022742:	68ac      	ldr	r4, [r5, #8]
 8022744:	e7eb      	b.n	802271e <__swsetup_r+0x1e>
 8022746:	4b24      	ldr	r3, [pc, #144]	; (80227d8 <__swsetup_r+0xd8>)
 8022748:	429c      	cmp	r4, r3
 802274a:	bf08      	it	eq
 802274c:	68ec      	ldreq	r4, [r5, #12]
 802274e:	e7e6      	b.n	802271e <__swsetup_r+0x1e>
 8022750:	0758      	lsls	r0, r3, #29
 8022752:	d512      	bpl.n	802277a <__swsetup_r+0x7a>
 8022754:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022756:	b141      	cbz	r1, 802276a <__swsetup_r+0x6a>
 8022758:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802275c:	4299      	cmp	r1, r3
 802275e:	d002      	beq.n	8022766 <__swsetup_r+0x66>
 8022760:	4630      	mov	r0, r6
 8022762:	f7ff fcc3 	bl	80220ec <_free_r>
 8022766:	2300      	movs	r3, #0
 8022768:	6363      	str	r3, [r4, #52]	; 0x34
 802276a:	89a3      	ldrh	r3, [r4, #12]
 802276c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8022770:	81a3      	strh	r3, [r4, #12]
 8022772:	2300      	movs	r3, #0
 8022774:	6063      	str	r3, [r4, #4]
 8022776:	6923      	ldr	r3, [r4, #16]
 8022778:	6023      	str	r3, [r4, #0]
 802277a:	89a3      	ldrh	r3, [r4, #12]
 802277c:	f043 0308 	orr.w	r3, r3, #8
 8022780:	81a3      	strh	r3, [r4, #12]
 8022782:	6923      	ldr	r3, [r4, #16]
 8022784:	b94b      	cbnz	r3, 802279a <__swsetup_r+0x9a>
 8022786:	89a3      	ldrh	r3, [r4, #12]
 8022788:	f403 7320 	and.w	r3, r3, #640	; 0x280
 802278c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8022790:	d003      	beq.n	802279a <__swsetup_r+0x9a>
 8022792:	4621      	mov	r1, r4
 8022794:	4630      	mov	r0, r6
 8022796:	f000 fa31 	bl	8022bfc <__smakebuf_r>
 802279a:	89a0      	ldrh	r0, [r4, #12]
 802279c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80227a0:	f010 0301 	ands.w	r3, r0, #1
 80227a4:	d00a      	beq.n	80227bc <__swsetup_r+0xbc>
 80227a6:	2300      	movs	r3, #0
 80227a8:	60a3      	str	r3, [r4, #8]
 80227aa:	6963      	ldr	r3, [r4, #20]
 80227ac:	425b      	negs	r3, r3
 80227ae:	61a3      	str	r3, [r4, #24]
 80227b0:	6923      	ldr	r3, [r4, #16]
 80227b2:	b943      	cbnz	r3, 80227c6 <__swsetup_r+0xc6>
 80227b4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80227b8:	d1ba      	bne.n	8022730 <__swsetup_r+0x30>
 80227ba:	bd70      	pop	{r4, r5, r6, pc}
 80227bc:	0781      	lsls	r1, r0, #30
 80227be:	bf58      	it	pl
 80227c0:	6963      	ldrpl	r3, [r4, #20]
 80227c2:	60a3      	str	r3, [r4, #8]
 80227c4:	e7f4      	b.n	80227b0 <__swsetup_r+0xb0>
 80227c6:	2000      	movs	r0, #0
 80227c8:	e7f7      	b.n	80227ba <__swsetup_r+0xba>
 80227ca:	bf00      	nop
 80227cc:	20000140 	.word	0x20000140
 80227d0:	08028cac 	.word	0x08028cac
 80227d4:	08028ccc 	.word	0x08028ccc
 80227d8:	08028c8c 	.word	0x08028c8c

080227dc <__assert_func>:
 80227dc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80227de:	4614      	mov	r4, r2
 80227e0:	461a      	mov	r2, r3
 80227e2:	4b09      	ldr	r3, [pc, #36]	; (8022808 <__assert_func+0x2c>)
 80227e4:	681b      	ldr	r3, [r3, #0]
 80227e6:	4605      	mov	r5, r0
 80227e8:	68d8      	ldr	r0, [r3, #12]
 80227ea:	b14c      	cbz	r4, 8022800 <__assert_func+0x24>
 80227ec:	4b07      	ldr	r3, [pc, #28]	; (802280c <__assert_func+0x30>)
 80227ee:	9100      	str	r1, [sp, #0]
 80227f0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80227f4:	4906      	ldr	r1, [pc, #24]	; (8022810 <__assert_func+0x34>)
 80227f6:	462b      	mov	r3, r5
 80227f8:	f000 f9a6 	bl	8022b48 <fiprintf>
 80227fc:	f000 ff32 	bl	8023664 <abort>
 8022800:	4b04      	ldr	r3, [pc, #16]	; (8022814 <__assert_func+0x38>)
 8022802:	461c      	mov	r4, r3
 8022804:	e7f3      	b.n	80227ee <__assert_func+0x12>
 8022806:	bf00      	nop
 8022808:	20000140 	.word	0x20000140
 802280c:	08028c4e 	.word	0x08028c4e
 8022810:	08028c5b 	.word	0x08028c5b
 8022814:	08028c89 	.word	0x08028c89

08022818 <__sflush_r>:
 8022818:	898a      	ldrh	r2, [r1, #12]
 802281a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802281e:	4605      	mov	r5, r0
 8022820:	0710      	lsls	r0, r2, #28
 8022822:	460c      	mov	r4, r1
 8022824:	d458      	bmi.n	80228d8 <__sflush_r+0xc0>
 8022826:	684b      	ldr	r3, [r1, #4]
 8022828:	2b00      	cmp	r3, #0
 802282a:	dc05      	bgt.n	8022838 <__sflush_r+0x20>
 802282c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802282e:	2b00      	cmp	r3, #0
 8022830:	dc02      	bgt.n	8022838 <__sflush_r+0x20>
 8022832:	2000      	movs	r0, #0
 8022834:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022838:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802283a:	2e00      	cmp	r6, #0
 802283c:	d0f9      	beq.n	8022832 <__sflush_r+0x1a>
 802283e:	2300      	movs	r3, #0
 8022840:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8022844:	682f      	ldr	r7, [r5, #0]
 8022846:	602b      	str	r3, [r5, #0]
 8022848:	d032      	beq.n	80228b0 <__sflush_r+0x98>
 802284a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802284c:	89a3      	ldrh	r3, [r4, #12]
 802284e:	075a      	lsls	r2, r3, #29
 8022850:	d505      	bpl.n	802285e <__sflush_r+0x46>
 8022852:	6863      	ldr	r3, [r4, #4]
 8022854:	1ac0      	subs	r0, r0, r3
 8022856:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8022858:	b10b      	cbz	r3, 802285e <__sflush_r+0x46>
 802285a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802285c:	1ac0      	subs	r0, r0, r3
 802285e:	2300      	movs	r3, #0
 8022860:	4602      	mov	r2, r0
 8022862:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8022864:	6a21      	ldr	r1, [r4, #32]
 8022866:	4628      	mov	r0, r5
 8022868:	47b0      	blx	r6
 802286a:	1c43      	adds	r3, r0, #1
 802286c:	89a3      	ldrh	r3, [r4, #12]
 802286e:	d106      	bne.n	802287e <__sflush_r+0x66>
 8022870:	6829      	ldr	r1, [r5, #0]
 8022872:	291d      	cmp	r1, #29
 8022874:	d82c      	bhi.n	80228d0 <__sflush_r+0xb8>
 8022876:	4a2a      	ldr	r2, [pc, #168]	; (8022920 <__sflush_r+0x108>)
 8022878:	40ca      	lsrs	r2, r1
 802287a:	07d6      	lsls	r6, r2, #31
 802287c:	d528      	bpl.n	80228d0 <__sflush_r+0xb8>
 802287e:	2200      	movs	r2, #0
 8022880:	6062      	str	r2, [r4, #4]
 8022882:	04d9      	lsls	r1, r3, #19
 8022884:	6922      	ldr	r2, [r4, #16]
 8022886:	6022      	str	r2, [r4, #0]
 8022888:	d504      	bpl.n	8022894 <__sflush_r+0x7c>
 802288a:	1c42      	adds	r2, r0, #1
 802288c:	d101      	bne.n	8022892 <__sflush_r+0x7a>
 802288e:	682b      	ldr	r3, [r5, #0]
 8022890:	b903      	cbnz	r3, 8022894 <__sflush_r+0x7c>
 8022892:	6560      	str	r0, [r4, #84]	; 0x54
 8022894:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8022896:	602f      	str	r7, [r5, #0]
 8022898:	2900      	cmp	r1, #0
 802289a:	d0ca      	beq.n	8022832 <__sflush_r+0x1a>
 802289c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80228a0:	4299      	cmp	r1, r3
 80228a2:	d002      	beq.n	80228aa <__sflush_r+0x92>
 80228a4:	4628      	mov	r0, r5
 80228a6:	f7ff fc21 	bl	80220ec <_free_r>
 80228aa:	2000      	movs	r0, #0
 80228ac:	6360      	str	r0, [r4, #52]	; 0x34
 80228ae:	e7c1      	b.n	8022834 <__sflush_r+0x1c>
 80228b0:	6a21      	ldr	r1, [r4, #32]
 80228b2:	2301      	movs	r3, #1
 80228b4:	4628      	mov	r0, r5
 80228b6:	47b0      	blx	r6
 80228b8:	1c41      	adds	r1, r0, #1
 80228ba:	d1c7      	bne.n	802284c <__sflush_r+0x34>
 80228bc:	682b      	ldr	r3, [r5, #0]
 80228be:	2b00      	cmp	r3, #0
 80228c0:	d0c4      	beq.n	802284c <__sflush_r+0x34>
 80228c2:	2b1d      	cmp	r3, #29
 80228c4:	d001      	beq.n	80228ca <__sflush_r+0xb2>
 80228c6:	2b16      	cmp	r3, #22
 80228c8:	d101      	bne.n	80228ce <__sflush_r+0xb6>
 80228ca:	602f      	str	r7, [r5, #0]
 80228cc:	e7b1      	b.n	8022832 <__sflush_r+0x1a>
 80228ce:	89a3      	ldrh	r3, [r4, #12]
 80228d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80228d4:	81a3      	strh	r3, [r4, #12]
 80228d6:	e7ad      	b.n	8022834 <__sflush_r+0x1c>
 80228d8:	690f      	ldr	r7, [r1, #16]
 80228da:	2f00      	cmp	r7, #0
 80228dc:	d0a9      	beq.n	8022832 <__sflush_r+0x1a>
 80228de:	0793      	lsls	r3, r2, #30
 80228e0:	680e      	ldr	r6, [r1, #0]
 80228e2:	bf08      	it	eq
 80228e4:	694b      	ldreq	r3, [r1, #20]
 80228e6:	600f      	str	r7, [r1, #0]
 80228e8:	bf18      	it	ne
 80228ea:	2300      	movne	r3, #0
 80228ec:	eba6 0807 	sub.w	r8, r6, r7
 80228f0:	608b      	str	r3, [r1, #8]
 80228f2:	f1b8 0f00 	cmp.w	r8, #0
 80228f6:	dd9c      	ble.n	8022832 <__sflush_r+0x1a>
 80228f8:	6a21      	ldr	r1, [r4, #32]
 80228fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80228fc:	4643      	mov	r3, r8
 80228fe:	463a      	mov	r2, r7
 8022900:	4628      	mov	r0, r5
 8022902:	47b0      	blx	r6
 8022904:	2800      	cmp	r0, #0
 8022906:	dc06      	bgt.n	8022916 <__sflush_r+0xfe>
 8022908:	89a3      	ldrh	r3, [r4, #12]
 802290a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 802290e:	81a3      	strh	r3, [r4, #12]
 8022910:	f04f 30ff 	mov.w	r0, #4294967295
 8022914:	e78e      	b.n	8022834 <__sflush_r+0x1c>
 8022916:	4407      	add	r7, r0
 8022918:	eba8 0800 	sub.w	r8, r8, r0
 802291c:	e7e9      	b.n	80228f2 <__sflush_r+0xda>
 802291e:	bf00      	nop
 8022920:	20400001 	.word	0x20400001

08022924 <_fflush_r>:
 8022924:	b538      	push	{r3, r4, r5, lr}
 8022926:	690b      	ldr	r3, [r1, #16]
 8022928:	4605      	mov	r5, r0
 802292a:	460c      	mov	r4, r1
 802292c:	b913      	cbnz	r3, 8022934 <_fflush_r+0x10>
 802292e:	2500      	movs	r5, #0
 8022930:	4628      	mov	r0, r5
 8022932:	bd38      	pop	{r3, r4, r5, pc}
 8022934:	b118      	cbz	r0, 802293e <_fflush_r+0x1a>
 8022936:	6983      	ldr	r3, [r0, #24]
 8022938:	b90b      	cbnz	r3, 802293e <_fflush_r+0x1a>
 802293a:	f000 f887 	bl	8022a4c <__sinit>
 802293e:	4b14      	ldr	r3, [pc, #80]	; (8022990 <_fflush_r+0x6c>)
 8022940:	429c      	cmp	r4, r3
 8022942:	d11b      	bne.n	802297c <_fflush_r+0x58>
 8022944:	686c      	ldr	r4, [r5, #4]
 8022946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802294a:	2b00      	cmp	r3, #0
 802294c:	d0ef      	beq.n	802292e <_fflush_r+0xa>
 802294e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8022950:	07d0      	lsls	r0, r2, #31
 8022952:	d404      	bmi.n	802295e <_fflush_r+0x3a>
 8022954:	0599      	lsls	r1, r3, #22
 8022956:	d402      	bmi.n	802295e <_fflush_r+0x3a>
 8022958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802295a:	f000 f927 	bl	8022bac <__retarget_lock_acquire_recursive>
 802295e:	4628      	mov	r0, r5
 8022960:	4621      	mov	r1, r4
 8022962:	f7ff ff59 	bl	8022818 <__sflush_r>
 8022966:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8022968:	07da      	lsls	r2, r3, #31
 802296a:	4605      	mov	r5, r0
 802296c:	d4e0      	bmi.n	8022930 <_fflush_r+0xc>
 802296e:	89a3      	ldrh	r3, [r4, #12]
 8022970:	059b      	lsls	r3, r3, #22
 8022972:	d4dd      	bmi.n	8022930 <_fflush_r+0xc>
 8022974:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8022976:	f000 f91a 	bl	8022bae <__retarget_lock_release_recursive>
 802297a:	e7d9      	b.n	8022930 <_fflush_r+0xc>
 802297c:	4b05      	ldr	r3, [pc, #20]	; (8022994 <_fflush_r+0x70>)
 802297e:	429c      	cmp	r4, r3
 8022980:	d101      	bne.n	8022986 <_fflush_r+0x62>
 8022982:	68ac      	ldr	r4, [r5, #8]
 8022984:	e7df      	b.n	8022946 <_fflush_r+0x22>
 8022986:	4b04      	ldr	r3, [pc, #16]	; (8022998 <_fflush_r+0x74>)
 8022988:	429c      	cmp	r4, r3
 802298a:	bf08      	it	eq
 802298c:	68ec      	ldreq	r4, [r5, #12]
 802298e:	e7da      	b.n	8022946 <_fflush_r+0x22>
 8022990:	08028cac 	.word	0x08028cac
 8022994:	08028ccc 	.word	0x08028ccc
 8022998:	08028c8c 	.word	0x08028c8c

0802299c <std>:
 802299c:	2300      	movs	r3, #0
 802299e:	b510      	push	{r4, lr}
 80229a0:	4604      	mov	r4, r0
 80229a2:	e9c0 3300 	strd	r3, r3, [r0]
 80229a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80229aa:	6083      	str	r3, [r0, #8]
 80229ac:	8181      	strh	r1, [r0, #12]
 80229ae:	6643      	str	r3, [r0, #100]	; 0x64
 80229b0:	81c2      	strh	r2, [r0, #14]
 80229b2:	6183      	str	r3, [r0, #24]
 80229b4:	4619      	mov	r1, r3
 80229b6:	2208      	movs	r2, #8
 80229b8:	305c      	adds	r0, #92	; 0x5c
 80229ba:	f7ff fb8f 	bl	80220dc <memset>
 80229be:	4b05      	ldr	r3, [pc, #20]	; (80229d4 <std+0x38>)
 80229c0:	6263      	str	r3, [r4, #36]	; 0x24
 80229c2:	4b05      	ldr	r3, [pc, #20]	; (80229d8 <std+0x3c>)
 80229c4:	62a3      	str	r3, [r4, #40]	; 0x28
 80229c6:	4b05      	ldr	r3, [pc, #20]	; (80229dc <std+0x40>)
 80229c8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80229ca:	4b05      	ldr	r3, [pc, #20]	; (80229e0 <std+0x44>)
 80229cc:	6224      	str	r4, [r4, #32]
 80229ce:	6323      	str	r3, [r4, #48]	; 0x30
 80229d0:	bd10      	pop	{r4, pc}
 80229d2:	bf00      	nop
 80229d4:	080235b9 	.word	0x080235b9
 80229d8:	080235db 	.word	0x080235db
 80229dc:	08023613 	.word	0x08023613
 80229e0:	08023637 	.word	0x08023637

080229e4 <_cleanup_r>:
 80229e4:	4901      	ldr	r1, [pc, #4]	; (80229ec <_cleanup_r+0x8>)
 80229e6:	f000 b8c1 	b.w	8022b6c <_fwalk_reent>
 80229ea:	bf00      	nop
 80229ec:	08022925 	.word	0x08022925

080229f0 <__sfmoreglue>:
 80229f0:	b570      	push	{r4, r5, r6, lr}
 80229f2:	2268      	movs	r2, #104	; 0x68
 80229f4:	1e4d      	subs	r5, r1, #1
 80229f6:	4355      	muls	r5, r2
 80229f8:	460e      	mov	r6, r1
 80229fa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80229fe:	f7ff fbe1 	bl	80221c4 <_malloc_r>
 8022a02:	4604      	mov	r4, r0
 8022a04:	b140      	cbz	r0, 8022a18 <__sfmoreglue+0x28>
 8022a06:	2100      	movs	r1, #0
 8022a08:	e9c0 1600 	strd	r1, r6, [r0]
 8022a0c:	300c      	adds	r0, #12
 8022a0e:	60a0      	str	r0, [r4, #8]
 8022a10:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8022a14:	f7ff fb62 	bl	80220dc <memset>
 8022a18:	4620      	mov	r0, r4
 8022a1a:	bd70      	pop	{r4, r5, r6, pc}

08022a1c <__sfp_lock_acquire>:
 8022a1c:	4801      	ldr	r0, [pc, #4]	; (8022a24 <__sfp_lock_acquire+0x8>)
 8022a1e:	f000 b8c5 	b.w	8022bac <__retarget_lock_acquire_recursive>
 8022a22:	bf00      	nop
 8022a24:	2001429d 	.word	0x2001429d

08022a28 <__sfp_lock_release>:
 8022a28:	4801      	ldr	r0, [pc, #4]	; (8022a30 <__sfp_lock_release+0x8>)
 8022a2a:	f000 b8c0 	b.w	8022bae <__retarget_lock_release_recursive>
 8022a2e:	bf00      	nop
 8022a30:	2001429d 	.word	0x2001429d

08022a34 <__sinit_lock_acquire>:
 8022a34:	4801      	ldr	r0, [pc, #4]	; (8022a3c <__sinit_lock_acquire+0x8>)
 8022a36:	f000 b8b9 	b.w	8022bac <__retarget_lock_acquire_recursive>
 8022a3a:	bf00      	nop
 8022a3c:	2001429e 	.word	0x2001429e

08022a40 <__sinit_lock_release>:
 8022a40:	4801      	ldr	r0, [pc, #4]	; (8022a48 <__sinit_lock_release+0x8>)
 8022a42:	f000 b8b4 	b.w	8022bae <__retarget_lock_release_recursive>
 8022a46:	bf00      	nop
 8022a48:	2001429e 	.word	0x2001429e

08022a4c <__sinit>:
 8022a4c:	b510      	push	{r4, lr}
 8022a4e:	4604      	mov	r4, r0
 8022a50:	f7ff fff0 	bl	8022a34 <__sinit_lock_acquire>
 8022a54:	69a3      	ldr	r3, [r4, #24]
 8022a56:	b11b      	cbz	r3, 8022a60 <__sinit+0x14>
 8022a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8022a5c:	f7ff bff0 	b.w	8022a40 <__sinit_lock_release>
 8022a60:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8022a64:	6523      	str	r3, [r4, #80]	; 0x50
 8022a66:	4b13      	ldr	r3, [pc, #76]	; (8022ab4 <__sinit+0x68>)
 8022a68:	4a13      	ldr	r2, [pc, #76]	; (8022ab8 <__sinit+0x6c>)
 8022a6a:	681b      	ldr	r3, [r3, #0]
 8022a6c:	62a2      	str	r2, [r4, #40]	; 0x28
 8022a6e:	42a3      	cmp	r3, r4
 8022a70:	bf04      	itt	eq
 8022a72:	2301      	moveq	r3, #1
 8022a74:	61a3      	streq	r3, [r4, #24]
 8022a76:	4620      	mov	r0, r4
 8022a78:	f000 f820 	bl	8022abc <__sfp>
 8022a7c:	6060      	str	r0, [r4, #4]
 8022a7e:	4620      	mov	r0, r4
 8022a80:	f000 f81c 	bl	8022abc <__sfp>
 8022a84:	60a0      	str	r0, [r4, #8]
 8022a86:	4620      	mov	r0, r4
 8022a88:	f000 f818 	bl	8022abc <__sfp>
 8022a8c:	2200      	movs	r2, #0
 8022a8e:	60e0      	str	r0, [r4, #12]
 8022a90:	2104      	movs	r1, #4
 8022a92:	6860      	ldr	r0, [r4, #4]
 8022a94:	f7ff ff82 	bl	802299c <std>
 8022a98:	68a0      	ldr	r0, [r4, #8]
 8022a9a:	2201      	movs	r2, #1
 8022a9c:	2109      	movs	r1, #9
 8022a9e:	f7ff ff7d 	bl	802299c <std>
 8022aa2:	68e0      	ldr	r0, [r4, #12]
 8022aa4:	2202      	movs	r2, #2
 8022aa6:	2112      	movs	r1, #18
 8022aa8:	f7ff ff78 	bl	802299c <std>
 8022aac:	2301      	movs	r3, #1
 8022aae:	61a3      	str	r3, [r4, #24]
 8022ab0:	e7d2      	b.n	8022a58 <__sinit+0xc>
 8022ab2:	bf00      	nop
 8022ab4:	08028bd8 	.word	0x08028bd8
 8022ab8:	080229e5 	.word	0x080229e5

08022abc <__sfp>:
 8022abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022abe:	4607      	mov	r7, r0
 8022ac0:	f7ff ffac 	bl	8022a1c <__sfp_lock_acquire>
 8022ac4:	4b1e      	ldr	r3, [pc, #120]	; (8022b40 <__sfp+0x84>)
 8022ac6:	681e      	ldr	r6, [r3, #0]
 8022ac8:	69b3      	ldr	r3, [r6, #24]
 8022aca:	b913      	cbnz	r3, 8022ad2 <__sfp+0x16>
 8022acc:	4630      	mov	r0, r6
 8022ace:	f7ff ffbd 	bl	8022a4c <__sinit>
 8022ad2:	3648      	adds	r6, #72	; 0x48
 8022ad4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8022ad8:	3b01      	subs	r3, #1
 8022ada:	d503      	bpl.n	8022ae4 <__sfp+0x28>
 8022adc:	6833      	ldr	r3, [r6, #0]
 8022ade:	b30b      	cbz	r3, 8022b24 <__sfp+0x68>
 8022ae0:	6836      	ldr	r6, [r6, #0]
 8022ae2:	e7f7      	b.n	8022ad4 <__sfp+0x18>
 8022ae4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8022ae8:	b9d5      	cbnz	r5, 8022b20 <__sfp+0x64>
 8022aea:	4b16      	ldr	r3, [pc, #88]	; (8022b44 <__sfp+0x88>)
 8022aec:	60e3      	str	r3, [r4, #12]
 8022aee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8022af2:	6665      	str	r5, [r4, #100]	; 0x64
 8022af4:	f000 f859 	bl	8022baa <__retarget_lock_init_recursive>
 8022af8:	f7ff ff96 	bl	8022a28 <__sfp_lock_release>
 8022afc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8022b00:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8022b04:	6025      	str	r5, [r4, #0]
 8022b06:	61a5      	str	r5, [r4, #24]
 8022b08:	2208      	movs	r2, #8
 8022b0a:	4629      	mov	r1, r5
 8022b0c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8022b10:	f7ff fae4 	bl	80220dc <memset>
 8022b14:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8022b18:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8022b1c:	4620      	mov	r0, r4
 8022b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b20:	3468      	adds	r4, #104	; 0x68
 8022b22:	e7d9      	b.n	8022ad8 <__sfp+0x1c>
 8022b24:	2104      	movs	r1, #4
 8022b26:	4638      	mov	r0, r7
 8022b28:	f7ff ff62 	bl	80229f0 <__sfmoreglue>
 8022b2c:	4604      	mov	r4, r0
 8022b2e:	6030      	str	r0, [r6, #0]
 8022b30:	2800      	cmp	r0, #0
 8022b32:	d1d5      	bne.n	8022ae0 <__sfp+0x24>
 8022b34:	f7ff ff78 	bl	8022a28 <__sfp_lock_release>
 8022b38:	230c      	movs	r3, #12
 8022b3a:	603b      	str	r3, [r7, #0]
 8022b3c:	e7ee      	b.n	8022b1c <__sfp+0x60>
 8022b3e:	bf00      	nop
 8022b40:	08028bd8 	.word	0x08028bd8
 8022b44:	ffff0001 	.word	0xffff0001

08022b48 <fiprintf>:
 8022b48:	b40e      	push	{r1, r2, r3}
 8022b4a:	b503      	push	{r0, r1, lr}
 8022b4c:	4601      	mov	r1, r0
 8022b4e:	ab03      	add	r3, sp, #12
 8022b50:	4805      	ldr	r0, [pc, #20]	; (8022b68 <fiprintf+0x20>)
 8022b52:	f853 2b04 	ldr.w	r2, [r3], #4
 8022b56:	6800      	ldr	r0, [r0, #0]
 8022b58:	9301      	str	r3, [sp, #4]
 8022b5a:	f000 fa21 	bl	8022fa0 <_vfiprintf_r>
 8022b5e:	b002      	add	sp, #8
 8022b60:	f85d eb04 	ldr.w	lr, [sp], #4
 8022b64:	b003      	add	sp, #12
 8022b66:	4770      	bx	lr
 8022b68:	20000140 	.word	0x20000140

08022b6c <_fwalk_reent>:
 8022b6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8022b70:	4606      	mov	r6, r0
 8022b72:	4688      	mov	r8, r1
 8022b74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8022b78:	2700      	movs	r7, #0
 8022b7a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8022b7e:	f1b9 0901 	subs.w	r9, r9, #1
 8022b82:	d505      	bpl.n	8022b90 <_fwalk_reent+0x24>
 8022b84:	6824      	ldr	r4, [r4, #0]
 8022b86:	2c00      	cmp	r4, #0
 8022b88:	d1f7      	bne.n	8022b7a <_fwalk_reent+0xe>
 8022b8a:	4638      	mov	r0, r7
 8022b8c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8022b90:	89ab      	ldrh	r3, [r5, #12]
 8022b92:	2b01      	cmp	r3, #1
 8022b94:	d907      	bls.n	8022ba6 <_fwalk_reent+0x3a>
 8022b96:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8022b9a:	3301      	adds	r3, #1
 8022b9c:	d003      	beq.n	8022ba6 <_fwalk_reent+0x3a>
 8022b9e:	4629      	mov	r1, r5
 8022ba0:	4630      	mov	r0, r6
 8022ba2:	47c0      	blx	r8
 8022ba4:	4307      	orrs	r7, r0
 8022ba6:	3568      	adds	r5, #104	; 0x68
 8022ba8:	e7e9      	b.n	8022b7e <_fwalk_reent+0x12>

08022baa <__retarget_lock_init_recursive>:
 8022baa:	4770      	bx	lr

08022bac <__retarget_lock_acquire_recursive>:
 8022bac:	4770      	bx	lr

08022bae <__retarget_lock_release_recursive>:
 8022bae:	4770      	bx	lr

08022bb0 <__swhatbuf_r>:
 8022bb0:	b570      	push	{r4, r5, r6, lr}
 8022bb2:	460e      	mov	r6, r1
 8022bb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022bb8:	2900      	cmp	r1, #0
 8022bba:	b096      	sub	sp, #88	; 0x58
 8022bbc:	4614      	mov	r4, r2
 8022bbe:	461d      	mov	r5, r3
 8022bc0:	da08      	bge.n	8022bd4 <__swhatbuf_r+0x24>
 8022bc2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8022bc6:	2200      	movs	r2, #0
 8022bc8:	602a      	str	r2, [r5, #0]
 8022bca:	061a      	lsls	r2, r3, #24
 8022bcc:	d410      	bmi.n	8022bf0 <__swhatbuf_r+0x40>
 8022bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8022bd2:	e00e      	b.n	8022bf2 <__swhatbuf_r+0x42>
 8022bd4:	466a      	mov	r2, sp
 8022bd6:	f000 fd5d 	bl	8023694 <_fstat_r>
 8022bda:	2800      	cmp	r0, #0
 8022bdc:	dbf1      	blt.n	8022bc2 <__swhatbuf_r+0x12>
 8022bde:	9a01      	ldr	r2, [sp, #4]
 8022be0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8022be4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8022be8:	425a      	negs	r2, r3
 8022bea:	415a      	adcs	r2, r3
 8022bec:	602a      	str	r2, [r5, #0]
 8022bee:	e7ee      	b.n	8022bce <__swhatbuf_r+0x1e>
 8022bf0:	2340      	movs	r3, #64	; 0x40
 8022bf2:	2000      	movs	r0, #0
 8022bf4:	6023      	str	r3, [r4, #0]
 8022bf6:	b016      	add	sp, #88	; 0x58
 8022bf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08022bfc <__smakebuf_r>:
 8022bfc:	898b      	ldrh	r3, [r1, #12]
 8022bfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8022c00:	079d      	lsls	r5, r3, #30
 8022c02:	4606      	mov	r6, r0
 8022c04:	460c      	mov	r4, r1
 8022c06:	d507      	bpl.n	8022c18 <__smakebuf_r+0x1c>
 8022c08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8022c0c:	6023      	str	r3, [r4, #0]
 8022c0e:	6123      	str	r3, [r4, #16]
 8022c10:	2301      	movs	r3, #1
 8022c12:	6163      	str	r3, [r4, #20]
 8022c14:	b002      	add	sp, #8
 8022c16:	bd70      	pop	{r4, r5, r6, pc}
 8022c18:	ab01      	add	r3, sp, #4
 8022c1a:	466a      	mov	r2, sp
 8022c1c:	f7ff ffc8 	bl	8022bb0 <__swhatbuf_r>
 8022c20:	9900      	ldr	r1, [sp, #0]
 8022c22:	4605      	mov	r5, r0
 8022c24:	4630      	mov	r0, r6
 8022c26:	f7ff facd 	bl	80221c4 <_malloc_r>
 8022c2a:	b948      	cbnz	r0, 8022c40 <__smakebuf_r+0x44>
 8022c2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022c30:	059a      	lsls	r2, r3, #22
 8022c32:	d4ef      	bmi.n	8022c14 <__smakebuf_r+0x18>
 8022c34:	f023 0303 	bic.w	r3, r3, #3
 8022c38:	f043 0302 	orr.w	r3, r3, #2
 8022c3c:	81a3      	strh	r3, [r4, #12]
 8022c3e:	e7e3      	b.n	8022c08 <__smakebuf_r+0xc>
 8022c40:	4b0d      	ldr	r3, [pc, #52]	; (8022c78 <__smakebuf_r+0x7c>)
 8022c42:	62b3      	str	r3, [r6, #40]	; 0x28
 8022c44:	89a3      	ldrh	r3, [r4, #12]
 8022c46:	6020      	str	r0, [r4, #0]
 8022c48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022c4c:	81a3      	strh	r3, [r4, #12]
 8022c4e:	9b00      	ldr	r3, [sp, #0]
 8022c50:	6163      	str	r3, [r4, #20]
 8022c52:	9b01      	ldr	r3, [sp, #4]
 8022c54:	6120      	str	r0, [r4, #16]
 8022c56:	b15b      	cbz	r3, 8022c70 <__smakebuf_r+0x74>
 8022c58:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022c5c:	4630      	mov	r0, r6
 8022c5e:	f000 fd2b 	bl	80236b8 <_isatty_r>
 8022c62:	b128      	cbz	r0, 8022c70 <__smakebuf_r+0x74>
 8022c64:	89a3      	ldrh	r3, [r4, #12]
 8022c66:	f023 0303 	bic.w	r3, r3, #3
 8022c6a:	f043 0301 	orr.w	r3, r3, #1
 8022c6e:	81a3      	strh	r3, [r4, #12]
 8022c70:	89a0      	ldrh	r0, [r4, #12]
 8022c72:	4305      	orrs	r5, r0
 8022c74:	81a5      	strh	r5, [r4, #12]
 8022c76:	e7cd      	b.n	8022c14 <__smakebuf_r+0x18>
 8022c78:	080229e5 	.word	0x080229e5

08022c7c <__malloc_lock>:
 8022c7c:	4801      	ldr	r0, [pc, #4]	; (8022c84 <__malloc_lock+0x8>)
 8022c7e:	f7ff bf95 	b.w	8022bac <__retarget_lock_acquire_recursive>
 8022c82:	bf00      	nop
 8022c84:	2001429c 	.word	0x2001429c

08022c88 <__malloc_unlock>:
 8022c88:	4801      	ldr	r0, [pc, #4]	; (8022c90 <__malloc_unlock+0x8>)
 8022c8a:	f7ff bf90 	b.w	8022bae <__retarget_lock_release_recursive>
 8022c8e:	bf00      	nop
 8022c90:	2001429c 	.word	0x2001429c

08022c94 <__ssputs_r>:
 8022c94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8022c98:	688e      	ldr	r6, [r1, #8]
 8022c9a:	429e      	cmp	r6, r3
 8022c9c:	4682      	mov	sl, r0
 8022c9e:	460c      	mov	r4, r1
 8022ca0:	4690      	mov	r8, r2
 8022ca2:	461f      	mov	r7, r3
 8022ca4:	d838      	bhi.n	8022d18 <__ssputs_r+0x84>
 8022ca6:	898a      	ldrh	r2, [r1, #12]
 8022ca8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8022cac:	d032      	beq.n	8022d14 <__ssputs_r+0x80>
 8022cae:	6825      	ldr	r5, [r4, #0]
 8022cb0:	6909      	ldr	r1, [r1, #16]
 8022cb2:	eba5 0901 	sub.w	r9, r5, r1
 8022cb6:	6965      	ldr	r5, [r4, #20]
 8022cb8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8022cbc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8022cc0:	3301      	adds	r3, #1
 8022cc2:	444b      	add	r3, r9
 8022cc4:	106d      	asrs	r5, r5, #1
 8022cc6:	429d      	cmp	r5, r3
 8022cc8:	bf38      	it	cc
 8022cca:	461d      	movcc	r5, r3
 8022ccc:	0553      	lsls	r3, r2, #21
 8022cce:	d531      	bpl.n	8022d34 <__ssputs_r+0xa0>
 8022cd0:	4629      	mov	r1, r5
 8022cd2:	f7ff fa77 	bl	80221c4 <_malloc_r>
 8022cd6:	4606      	mov	r6, r0
 8022cd8:	b950      	cbnz	r0, 8022cf0 <__ssputs_r+0x5c>
 8022cda:	230c      	movs	r3, #12
 8022cdc:	f8ca 3000 	str.w	r3, [sl]
 8022ce0:	89a3      	ldrh	r3, [r4, #12]
 8022ce2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8022ce6:	81a3      	strh	r3, [r4, #12]
 8022ce8:	f04f 30ff 	mov.w	r0, #4294967295
 8022cec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022cf0:	6921      	ldr	r1, [r4, #16]
 8022cf2:	464a      	mov	r2, r9
 8022cf4:	f7ff f9ca 	bl	802208c <memcpy>
 8022cf8:	89a3      	ldrh	r3, [r4, #12]
 8022cfa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8022cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8022d02:	81a3      	strh	r3, [r4, #12]
 8022d04:	6126      	str	r6, [r4, #16]
 8022d06:	6165      	str	r5, [r4, #20]
 8022d08:	444e      	add	r6, r9
 8022d0a:	eba5 0509 	sub.w	r5, r5, r9
 8022d0e:	6026      	str	r6, [r4, #0]
 8022d10:	60a5      	str	r5, [r4, #8]
 8022d12:	463e      	mov	r6, r7
 8022d14:	42be      	cmp	r6, r7
 8022d16:	d900      	bls.n	8022d1a <__ssputs_r+0x86>
 8022d18:	463e      	mov	r6, r7
 8022d1a:	6820      	ldr	r0, [r4, #0]
 8022d1c:	4632      	mov	r2, r6
 8022d1e:	4641      	mov	r1, r8
 8022d20:	f7ff f9c2 	bl	80220a8 <memmove>
 8022d24:	68a3      	ldr	r3, [r4, #8]
 8022d26:	1b9b      	subs	r3, r3, r6
 8022d28:	60a3      	str	r3, [r4, #8]
 8022d2a:	6823      	ldr	r3, [r4, #0]
 8022d2c:	4433      	add	r3, r6
 8022d2e:	6023      	str	r3, [r4, #0]
 8022d30:	2000      	movs	r0, #0
 8022d32:	e7db      	b.n	8022cec <__ssputs_r+0x58>
 8022d34:	462a      	mov	r2, r5
 8022d36:	f000 fce1 	bl	80236fc <_realloc_r>
 8022d3a:	4606      	mov	r6, r0
 8022d3c:	2800      	cmp	r0, #0
 8022d3e:	d1e1      	bne.n	8022d04 <__ssputs_r+0x70>
 8022d40:	6921      	ldr	r1, [r4, #16]
 8022d42:	4650      	mov	r0, sl
 8022d44:	f7ff f9d2 	bl	80220ec <_free_r>
 8022d48:	e7c7      	b.n	8022cda <__ssputs_r+0x46>
	...

08022d4c <_svfiprintf_r>:
 8022d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022d50:	4698      	mov	r8, r3
 8022d52:	898b      	ldrh	r3, [r1, #12]
 8022d54:	061b      	lsls	r3, r3, #24
 8022d56:	b09d      	sub	sp, #116	; 0x74
 8022d58:	4607      	mov	r7, r0
 8022d5a:	460d      	mov	r5, r1
 8022d5c:	4614      	mov	r4, r2
 8022d5e:	d50e      	bpl.n	8022d7e <_svfiprintf_r+0x32>
 8022d60:	690b      	ldr	r3, [r1, #16]
 8022d62:	b963      	cbnz	r3, 8022d7e <_svfiprintf_r+0x32>
 8022d64:	2140      	movs	r1, #64	; 0x40
 8022d66:	f7ff fa2d 	bl	80221c4 <_malloc_r>
 8022d6a:	6028      	str	r0, [r5, #0]
 8022d6c:	6128      	str	r0, [r5, #16]
 8022d6e:	b920      	cbnz	r0, 8022d7a <_svfiprintf_r+0x2e>
 8022d70:	230c      	movs	r3, #12
 8022d72:	603b      	str	r3, [r7, #0]
 8022d74:	f04f 30ff 	mov.w	r0, #4294967295
 8022d78:	e0d1      	b.n	8022f1e <_svfiprintf_r+0x1d2>
 8022d7a:	2340      	movs	r3, #64	; 0x40
 8022d7c:	616b      	str	r3, [r5, #20]
 8022d7e:	2300      	movs	r3, #0
 8022d80:	9309      	str	r3, [sp, #36]	; 0x24
 8022d82:	2320      	movs	r3, #32
 8022d84:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8022d88:	f8cd 800c 	str.w	r8, [sp, #12]
 8022d8c:	2330      	movs	r3, #48	; 0x30
 8022d8e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8022f38 <_svfiprintf_r+0x1ec>
 8022d92:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8022d96:	f04f 0901 	mov.w	r9, #1
 8022d9a:	4623      	mov	r3, r4
 8022d9c:	469a      	mov	sl, r3
 8022d9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022da2:	b10a      	cbz	r2, 8022da8 <_svfiprintf_r+0x5c>
 8022da4:	2a25      	cmp	r2, #37	; 0x25
 8022da6:	d1f9      	bne.n	8022d9c <_svfiprintf_r+0x50>
 8022da8:	ebba 0b04 	subs.w	fp, sl, r4
 8022dac:	d00b      	beq.n	8022dc6 <_svfiprintf_r+0x7a>
 8022dae:	465b      	mov	r3, fp
 8022db0:	4622      	mov	r2, r4
 8022db2:	4629      	mov	r1, r5
 8022db4:	4638      	mov	r0, r7
 8022db6:	f7ff ff6d 	bl	8022c94 <__ssputs_r>
 8022dba:	3001      	adds	r0, #1
 8022dbc:	f000 80aa 	beq.w	8022f14 <_svfiprintf_r+0x1c8>
 8022dc0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8022dc2:	445a      	add	r2, fp
 8022dc4:	9209      	str	r2, [sp, #36]	; 0x24
 8022dc6:	f89a 3000 	ldrb.w	r3, [sl]
 8022dca:	2b00      	cmp	r3, #0
 8022dcc:	f000 80a2 	beq.w	8022f14 <_svfiprintf_r+0x1c8>
 8022dd0:	2300      	movs	r3, #0
 8022dd2:	f04f 32ff 	mov.w	r2, #4294967295
 8022dd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022dda:	f10a 0a01 	add.w	sl, sl, #1
 8022dde:	9304      	str	r3, [sp, #16]
 8022de0:	9307      	str	r3, [sp, #28]
 8022de2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8022de6:	931a      	str	r3, [sp, #104]	; 0x68
 8022de8:	4654      	mov	r4, sl
 8022dea:	2205      	movs	r2, #5
 8022dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022df0:	4851      	ldr	r0, [pc, #324]	; (8022f38 <_svfiprintf_r+0x1ec>)
 8022df2:	f7dd fa3d 	bl	8000270 <memchr>
 8022df6:	9a04      	ldr	r2, [sp, #16]
 8022df8:	b9d8      	cbnz	r0, 8022e32 <_svfiprintf_r+0xe6>
 8022dfa:	06d0      	lsls	r0, r2, #27
 8022dfc:	bf44      	itt	mi
 8022dfe:	2320      	movmi	r3, #32
 8022e00:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e04:	0711      	lsls	r1, r2, #28
 8022e06:	bf44      	itt	mi
 8022e08:	232b      	movmi	r3, #43	; 0x2b
 8022e0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8022e0e:	f89a 3000 	ldrb.w	r3, [sl]
 8022e12:	2b2a      	cmp	r3, #42	; 0x2a
 8022e14:	d015      	beq.n	8022e42 <_svfiprintf_r+0xf6>
 8022e16:	9a07      	ldr	r2, [sp, #28]
 8022e18:	4654      	mov	r4, sl
 8022e1a:	2000      	movs	r0, #0
 8022e1c:	f04f 0c0a 	mov.w	ip, #10
 8022e20:	4621      	mov	r1, r4
 8022e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022e26:	3b30      	subs	r3, #48	; 0x30
 8022e28:	2b09      	cmp	r3, #9
 8022e2a:	d94e      	bls.n	8022eca <_svfiprintf_r+0x17e>
 8022e2c:	b1b0      	cbz	r0, 8022e5c <_svfiprintf_r+0x110>
 8022e2e:	9207      	str	r2, [sp, #28]
 8022e30:	e014      	b.n	8022e5c <_svfiprintf_r+0x110>
 8022e32:	eba0 0308 	sub.w	r3, r0, r8
 8022e36:	fa09 f303 	lsl.w	r3, r9, r3
 8022e3a:	4313      	orrs	r3, r2
 8022e3c:	9304      	str	r3, [sp, #16]
 8022e3e:	46a2      	mov	sl, r4
 8022e40:	e7d2      	b.n	8022de8 <_svfiprintf_r+0x9c>
 8022e42:	9b03      	ldr	r3, [sp, #12]
 8022e44:	1d19      	adds	r1, r3, #4
 8022e46:	681b      	ldr	r3, [r3, #0]
 8022e48:	9103      	str	r1, [sp, #12]
 8022e4a:	2b00      	cmp	r3, #0
 8022e4c:	bfbb      	ittet	lt
 8022e4e:	425b      	neglt	r3, r3
 8022e50:	f042 0202 	orrlt.w	r2, r2, #2
 8022e54:	9307      	strge	r3, [sp, #28]
 8022e56:	9307      	strlt	r3, [sp, #28]
 8022e58:	bfb8      	it	lt
 8022e5a:	9204      	strlt	r2, [sp, #16]
 8022e5c:	7823      	ldrb	r3, [r4, #0]
 8022e5e:	2b2e      	cmp	r3, #46	; 0x2e
 8022e60:	d10c      	bne.n	8022e7c <_svfiprintf_r+0x130>
 8022e62:	7863      	ldrb	r3, [r4, #1]
 8022e64:	2b2a      	cmp	r3, #42	; 0x2a
 8022e66:	d135      	bne.n	8022ed4 <_svfiprintf_r+0x188>
 8022e68:	9b03      	ldr	r3, [sp, #12]
 8022e6a:	1d1a      	adds	r2, r3, #4
 8022e6c:	681b      	ldr	r3, [r3, #0]
 8022e6e:	9203      	str	r2, [sp, #12]
 8022e70:	2b00      	cmp	r3, #0
 8022e72:	bfb8      	it	lt
 8022e74:	f04f 33ff 	movlt.w	r3, #4294967295
 8022e78:	3402      	adds	r4, #2
 8022e7a:	9305      	str	r3, [sp, #20]
 8022e7c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8022f48 <_svfiprintf_r+0x1fc>
 8022e80:	7821      	ldrb	r1, [r4, #0]
 8022e82:	2203      	movs	r2, #3
 8022e84:	4650      	mov	r0, sl
 8022e86:	f7dd f9f3 	bl	8000270 <memchr>
 8022e8a:	b140      	cbz	r0, 8022e9e <_svfiprintf_r+0x152>
 8022e8c:	2340      	movs	r3, #64	; 0x40
 8022e8e:	eba0 000a 	sub.w	r0, r0, sl
 8022e92:	fa03 f000 	lsl.w	r0, r3, r0
 8022e96:	9b04      	ldr	r3, [sp, #16]
 8022e98:	4303      	orrs	r3, r0
 8022e9a:	3401      	adds	r4, #1
 8022e9c:	9304      	str	r3, [sp, #16]
 8022e9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022ea2:	4826      	ldr	r0, [pc, #152]	; (8022f3c <_svfiprintf_r+0x1f0>)
 8022ea4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8022ea8:	2206      	movs	r2, #6
 8022eaa:	f7dd f9e1 	bl	8000270 <memchr>
 8022eae:	2800      	cmp	r0, #0
 8022eb0:	d038      	beq.n	8022f24 <_svfiprintf_r+0x1d8>
 8022eb2:	4b23      	ldr	r3, [pc, #140]	; (8022f40 <_svfiprintf_r+0x1f4>)
 8022eb4:	bb1b      	cbnz	r3, 8022efe <_svfiprintf_r+0x1b2>
 8022eb6:	9b03      	ldr	r3, [sp, #12]
 8022eb8:	3307      	adds	r3, #7
 8022eba:	f023 0307 	bic.w	r3, r3, #7
 8022ebe:	3308      	adds	r3, #8
 8022ec0:	9303      	str	r3, [sp, #12]
 8022ec2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8022ec4:	4433      	add	r3, r6
 8022ec6:	9309      	str	r3, [sp, #36]	; 0x24
 8022ec8:	e767      	b.n	8022d9a <_svfiprintf_r+0x4e>
 8022eca:	fb0c 3202 	mla	r2, ip, r2, r3
 8022ece:	460c      	mov	r4, r1
 8022ed0:	2001      	movs	r0, #1
 8022ed2:	e7a5      	b.n	8022e20 <_svfiprintf_r+0xd4>
 8022ed4:	2300      	movs	r3, #0
 8022ed6:	3401      	adds	r4, #1
 8022ed8:	9305      	str	r3, [sp, #20]
 8022eda:	4619      	mov	r1, r3
 8022edc:	f04f 0c0a 	mov.w	ip, #10
 8022ee0:	4620      	mov	r0, r4
 8022ee2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022ee6:	3a30      	subs	r2, #48	; 0x30
 8022ee8:	2a09      	cmp	r2, #9
 8022eea:	d903      	bls.n	8022ef4 <_svfiprintf_r+0x1a8>
 8022eec:	2b00      	cmp	r3, #0
 8022eee:	d0c5      	beq.n	8022e7c <_svfiprintf_r+0x130>
 8022ef0:	9105      	str	r1, [sp, #20]
 8022ef2:	e7c3      	b.n	8022e7c <_svfiprintf_r+0x130>
 8022ef4:	fb0c 2101 	mla	r1, ip, r1, r2
 8022ef8:	4604      	mov	r4, r0
 8022efa:	2301      	movs	r3, #1
 8022efc:	e7f0      	b.n	8022ee0 <_svfiprintf_r+0x194>
 8022efe:	ab03      	add	r3, sp, #12
 8022f00:	9300      	str	r3, [sp, #0]
 8022f02:	462a      	mov	r2, r5
 8022f04:	4b0f      	ldr	r3, [pc, #60]	; (8022f44 <_svfiprintf_r+0x1f8>)
 8022f06:	a904      	add	r1, sp, #16
 8022f08:	4638      	mov	r0, r7
 8022f0a:	f3af 8000 	nop.w
 8022f0e:	1c42      	adds	r2, r0, #1
 8022f10:	4606      	mov	r6, r0
 8022f12:	d1d6      	bne.n	8022ec2 <_svfiprintf_r+0x176>
 8022f14:	89ab      	ldrh	r3, [r5, #12]
 8022f16:	065b      	lsls	r3, r3, #25
 8022f18:	f53f af2c 	bmi.w	8022d74 <_svfiprintf_r+0x28>
 8022f1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8022f1e:	b01d      	add	sp, #116	; 0x74
 8022f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022f24:	ab03      	add	r3, sp, #12
 8022f26:	9300      	str	r3, [sp, #0]
 8022f28:	462a      	mov	r2, r5
 8022f2a:	4b06      	ldr	r3, [pc, #24]	; (8022f44 <_svfiprintf_r+0x1f8>)
 8022f2c:	a904      	add	r1, sp, #16
 8022f2e:	4638      	mov	r0, r7
 8022f30:	f000 f9d4 	bl	80232dc <_printf_i>
 8022f34:	e7eb      	b.n	8022f0e <_svfiprintf_r+0x1c2>
 8022f36:	bf00      	nop
 8022f38:	08028cec 	.word	0x08028cec
 8022f3c:	08028cf6 	.word	0x08028cf6
 8022f40:	00000000 	.word	0x00000000
 8022f44:	08022c95 	.word	0x08022c95
 8022f48:	08028cf2 	.word	0x08028cf2

08022f4c <__sfputc_r>:
 8022f4c:	6893      	ldr	r3, [r2, #8]
 8022f4e:	3b01      	subs	r3, #1
 8022f50:	2b00      	cmp	r3, #0
 8022f52:	b410      	push	{r4}
 8022f54:	6093      	str	r3, [r2, #8]
 8022f56:	da08      	bge.n	8022f6a <__sfputc_r+0x1e>
 8022f58:	6994      	ldr	r4, [r2, #24]
 8022f5a:	42a3      	cmp	r3, r4
 8022f5c:	db01      	blt.n	8022f62 <__sfputc_r+0x16>
 8022f5e:	290a      	cmp	r1, #10
 8022f60:	d103      	bne.n	8022f6a <__sfputc_r+0x1e>
 8022f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f66:	f7ff bb79 	b.w	802265c <__swbuf_r>
 8022f6a:	6813      	ldr	r3, [r2, #0]
 8022f6c:	1c58      	adds	r0, r3, #1
 8022f6e:	6010      	str	r0, [r2, #0]
 8022f70:	7019      	strb	r1, [r3, #0]
 8022f72:	4608      	mov	r0, r1
 8022f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022f78:	4770      	bx	lr

08022f7a <__sfputs_r>:
 8022f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f7c:	4606      	mov	r6, r0
 8022f7e:	460f      	mov	r7, r1
 8022f80:	4614      	mov	r4, r2
 8022f82:	18d5      	adds	r5, r2, r3
 8022f84:	42ac      	cmp	r4, r5
 8022f86:	d101      	bne.n	8022f8c <__sfputs_r+0x12>
 8022f88:	2000      	movs	r0, #0
 8022f8a:	e007      	b.n	8022f9c <__sfputs_r+0x22>
 8022f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022f90:	463a      	mov	r2, r7
 8022f92:	4630      	mov	r0, r6
 8022f94:	f7ff ffda 	bl	8022f4c <__sfputc_r>
 8022f98:	1c43      	adds	r3, r0, #1
 8022f9a:	d1f3      	bne.n	8022f84 <__sfputs_r+0xa>
 8022f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08022fa0 <_vfiprintf_r>:
 8022fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022fa4:	460d      	mov	r5, r1
 8022fa6:	b09d      	sub	sp, #116	; 0x74
 8022fa8:	4614      	mov	r4, r2
 8022faa:	4698      	mov	r8, r3
 8022fac:	4606      	mov	r6, r0
 8022fae:	b118      	cbz	r0, 8022fb8 <_vfiprintf_r+0x18>
 8022fb0:	6983      	ldr	r3, [r0, #24]
 8022fb2:	b90b      	cbnz	r3, 8022fb8 <_vfiprintf_r+0x18>
 8022fb4:	f7ff fd4a 	bl	8022a4c <__sinit>
 8022fb8:	4b89      	ldr	r3, [pc, #548]	; (80231e0 <_vfiprintf_r+0x240>)
 8022fba:	429d      	cmp	r5, r3
 8022fbc:	d11b      	bne.n	8022ff6 <_vfiprintf_r+0x56>
 8022fbe:	6875      	ldr	r5, [r6, #4]
 8022fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022fc2:	07d9      	lsls	r1, r3, #31
 8022fc4:	d405      	bmi.n	8022fd2 <_vfiprintf_r+0x32>
 8022fc6:	89ab      	ldrh	r3, [r5, #12]
 8022fc8:	059a      	lsls	r2, r3, #22
 8022fca:	d402      	bmi.n	8022fd2 <_vfiprintf_r+0x32>
 8022fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8022fce:	f7ff fded 	bl	8022bac <__retarget_lock_acquire_recursive>
 8022fd2:	89ab      	ldrh	r3, [r5, #12]
 8022fd4:	071b      	lsls	r3, r3, #28
 8022fd6:	d501      	bpl.n	8022fdc <_vfiprintf_r+0x3c>
 8022fd8:	692b      	ldr	r3, [r5, #16]
 8022fda:	b9eb      	cbnz	r3, 8023018 <_vfiprintf_r+0x78>
 8022fdc:	4629      	mov	r1, r5
 8022fde:	4630      	mov	r0, r6
 8022fe0:	f7ff fb8e 	bl	8022700 <__swsetup_r>
 8022fe4:	b1c0      	cbz	r0, 8023018 <_vfiprintf_r+0x78>
 8022fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8022fe8:	07dc      	lsls	r4, r3, #31
 8022fea:	d50e      	bpl.n	802300a <_vfiprintf_r+0x6a>
 8022fec:	f04f 30ff 	mov.w	r0, #4294967295
 8022ff0:	b01d      	add	sp, #116	; 0x74
 8022ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022ff6:	4b7b      	ldr	r3, [pc, #492]	; (80231e4 <_vfiprintf_r+0x244>)
 8022ff8:	429d      	cmp	r5, r3
 8022ffa:	d101      	bne.n	8023000 <_vfiprintf_r+0x60>
 8022ffc:	68b5      	ldr	r5, [r6, #8]
 8022ffe:	e7df      	b.n	8022fc0 <_vfiprintf_r+0x20>
 8023000:	4b79      	ldr	r3, [pc, #484]	; (80231e8 <_vfiprintf_r+0x248>)
 8023002:	429d      	cmp	r5, r3
 8023004:	bf08      	it	eq
 8023006:	68f5      	ldreq	r5, [r6, #12]
 8023008:	e7da      	b.n	8022fc0 <_vfiprintf_r+0x20>
 802300a:	89ab      	ldrh	r3, [r5, #12]
 802300c:	0598      	lsls	r0, r3, #22
 802300e:	d4ed      	bmi.n	8022fec <_vfiprintf_r+0x4c>
 8023010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8023012:	f7ff fdcc 	bl	8022bae <__retarget_lock_release_recursive>
 8023016:	e7e9      	b.n	8022fec <_vfiprintf_r+0x4c>
 8023018:	2300      	movs	r3, #0
 802301a:	9309      	str	r3, [sp, #36]	; 0x24
 802301c:	2320      	movs	r3, #32
 802301e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8023022:	f8cd 800c 	str.w	r8, [sp, #12]
 8023026:	2330      	movs	r3, #48	; 0x30
 8023028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80231ec <_vfiprintf_r+0x24c>
 802302c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8023030:	f04f 0901 	mov.w	r9, #1
 8023034:	4623      	mov	r3, r4
 8023036:	469a      	mov	sl, r3
 8023038:	f813 2b01 	ldrb.w	r2, [r3], #1
 802303c:	b10a      	cbz	r2, 8023042 <_vfiprintf_r+0xa2>
 802303e:	2a25      	cmp	r2, #37	; 0x25
 8023040:	d1f9      	bne.n	8023036 <_vfiprintf_r+0x96>
 8023042:	ebba 0b04 	subs.w	fp, sl, r4
 8023046:	d00b      	beq.n	8023060 <_vfiprintf_r+0xc0>
 8023048:	465b      	mov	r3, fp
 802304a:	4622      	mov	r2, r4
 802304c:	4629      	mov	r1, r5
 802304e:	4630      	mov	r0, r6
 8023050:	f7ff ff93 	bl	8022f7a <__sfputs_r>
 8023054:	3001      	adds	r0, #1
 8023056:	f000 80aa 	beq.w	80231ae <_vfiprintf_r+0x20e>
 802305a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 802305c:	445a      	add	r2, fp
 802305e:	9209      	str	r2, [sp, #36]	; 0x24
 8023060:	f89a 3000 	ldrb.w	r3, [sl]
 8023064:	2b00      	cmp	r3, #0
 8023066:	f000 80a2 	beq.w	80231ae <_vfiprintf_r+0x20e>
 802306a:	2300      	movs	r3, #0
 802306c:	f04f 32ff 	mov.w	r2, #4294967295
 8023070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8023074:	f10a 0a01 	add.w	sl, sl, #1
 8023078:	9304      	str	r3, [sp, #16]
 802307a:	9307      	str	r3, [sp, #28]
 802307c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8023080:	931a      	str	r3, [sp, #104]	; 0x68
 8023082:	4654      	mov	r4, sl
 8023084:	2205      	movs	r2, #5
 8023086:	f814 1b01 	ldrb.w	r1, [r4], #1
 802308a:	4858      	ldr	r0, [pc, #352]	; (80231ec <_vfiprintf_r+0x24c>)
 802308c:	f7dd f8f0 	bl	8000270 <memchr>
 8023090:	9a04      	ldr	r2, [sp, #16]
 8023092:	b9d8      	cbnz	r0, 80230cc <_vfiprintf_r+0x12c>
 8023094:	06d1      	lsls	r1, r2, #27
 8023096:	bf44      	itt	mi
 8023098:	2320      	movmi	r3, #32
 802309a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 802309e:	0713      	lsls	r3, r2, #28
 80230a0:	bf44      	itt	mi
 80230a2:	232b      	movmi	r3, #43	; 0x2b
 80230a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80230a8:	f89a 3000 	ldrb.w	r3, [sl]
 80230ac:	2b2a      	cmp	r3, #42	; 0x2a
 80230ae:	d015      	beq.n	80230dc <_vfiprintf_r+0x13c>
 80230b0:	9a07      	ldr	r2, [sp, #28]
 80230b2:	4654      	mov	r4, sl
 80230b4:	2000      	movs	r0, #0
 80230b6:	f04f 0c0a 	mov.w	ip, #10
 80230ba:	4621      	mov	r1, r4
 80230bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80230c0:	3b30      	subs	r3, #48	; 0x30
 80230c2:	2b09      	cmp	r3, #9
 80230c4:	d94e      	bls.n	8023164 <_vfiprintf_r+0x1c4>
 80230c6:	b1b0      	cbz	r0, 80230f6 <_vfiprintf_r+0x156>
 80230c8:	9207      	str	r2, [sp, #28]
 80230ca:	e014      	b.n	80230f6 <_vfiprintf_r+0x156>
 80230cc:	eba0 0308 	sub.w	r3, r0, r8
 80230d0:	fa09 f303 	lsl.w	r3, r9, r3
 80230d4:	4313      	orrs	r3, r2
 80230d6:	9304      	str	r3, [sp, #16]
 80230d8:	46a2      	mov	sl, r4
 80230da:	e7d2      	b.n	8023082 <_vfiprintf_r+0xe2>
 80230dc:	9b03      	ldr	r3, [sp, #12]
 80230de:	1d19      	adds	r1, r3, #4
 80230e0:	681b      	ldr	r3, [r3, #0]
 80230e2:	9103      	str	r1, [sp, #12]
 80230e4:	2b00      	cmp	r3, #0
 80230e6:	bfbb      	ittet	lt
 80230e8:	425b      	neglt	r3, r3
 80230ea:	f042 0202 	orrlt.w	r2, r2, #2
 80230ee:	9307      	strge	r3, [sp, #28]
 80230f0:	9307      	strlt	r3, [sp, #28]
 80230f2:	bfb8      	it	lt
 80230f4:	9204      	strlt	r2, [sp, #16]
 80230f6:	7823      	ldrb	r3, [r4, #0]
 80230f8:	2b2e      	cmp	r3, #46	; 0x2e
 80230fa:	d10c      	bne.n	8023116 <_vfiprintf_r+0x176>
 80230fc:	7863      	ldrb	r3, [r4, #1]
 80230fe:	2b2a      	cmp	r3, #42	; 0x2a
 8023100:	d135      	bne.n	802316e <_vfiprintf_r+0x1ce>
 8023102:	9b03      	ldr	r3, [sp, #12]
 8023104:	1d1a      	adds	r2, r3, #4
 8023106:	681b      	ldr	r3, [r3, #0]
 8023108:	9203      	str	r2, [sp, #12]
 802310a:	2b00      	cmp	r3, #0
 802310c:	bfb8      	it	lt
 802310e:	f04f 33ff 	movlt.w	r3, #4294967295
 8023112:	3402      	adds	r4, #2
 8023114:	9305      	str	r3, [sp, #20]
 8023116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80231fc <_vfiprintf_r+0x25c>
 802311a:	7821      	ldrb	r1, [r4, #0]
 802311c:	2203      	movs	r2, #3
 802311e:	4650      	mov	r0, sl
 8023120:	f7dd f8a6 	bl	8000270 <memchr>
 8023124:	b140      	cbz	r0, 8023138 <_vfiprintf_r+0x198>
 8023126:	2340      	movs	r3, #64	; 0x40
 8023128:	eba0 000a 	sub.w	r0, r0, sl
 802312c:	fa03 f000 	lsl.w	r0, r3, r0
 8023130:	9b04      	ldr	r3, [sp, #16]
 8023132:	4303      	orrs	r3, r0
 8023134:	3401      	adds	r4, #1
 8023136:	9304      	str	r3, [sp, #16]
 8023138:	f814 1b01 	ldrb.w	r1, [r4], #1
 802313c:	482c      	ldr	r0, [pc, #176]	; (80231f0 <_vfiprintf_r+0x250>)
 802313e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8023142:	2206      	movs	r2, #6
 8023144:	f7dd f894 	bl	8000270 <memchr>
 8023148:	2800      	cmp	r0, #0
 802314a:	d03f      	beq.n	80231cc <_vfiprintf_r+0x22c>
 802314c:	4b29      	ldr	r3, [pc, #164]	; (80231f4 <_vfiprintf_r+0x254>)
 802314e:	bb1b      	cbnz	r3, 8023198 <_vfiprintf_r+0x1f8>
 8023150:	9b03      	ldr	r3, [sp, #12]
 8023152:	3307      	adds	r3, #7
 8023154:	f023 0307 	bic.w	r3, r3, #7
 8023158:	3308      	adds	r3, #8
 802315a:	9303      	str	r3, [sp, #12]
 802315c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 802315e:	443b      	add	r3, r7
 8023160:	9309      	str	r3, [sp, #36]	; 0x24
 8023162:	e767      	b.n	8023034 <_vfiprintf_r+0x94>
 8023164:	fb0c 3202 	mla	r2, ip, r2, r3
 8023168:	460c      	mov	r4, r1
 802316a:	2001      	movs	r0, #1
 802316c:	e7a5      	b.n	80230ba <_vfiprintf_r+0x11a>
 802316e:	2300      	movs	r3, #0
 8023170:	3401      	adds	r4, #1
 8023172:	9305      	str	r3, [sp, #20]
 8023174:	4619      	mov	r1, r3
 8023176:	f04f 0c0a 	mov.w	ip, #10
 802317a:	4620      	mov	r0, r4
 802317c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8023180:	3a30      	subs	r2, #48	; 0x30
 8023182:	2a09      	cmp	r2, #9
 8023184:	d903      	bls.n	802318e <_vfiprintf_r+0x1ee>
 8023186:	2b00      	cmp	r3, #0
 8023188:	d0c5      	beq.n	8023116 <_vfiprintf_r+0x176>
 802318a:	9105      	str	r1, [sp, #20]
 802318c:	e7c3      	b.n	8023116 <_vfiprintf_r+0x176>
 802318e:	fb0c 2101 	mla	r1, ip, r1, r2
 8023192:	4604      	mov	r4, r0
 8023194:	2301      	movs	r3, #1
 8023196:	e7f0      	b.n	802317a <_vfiprintf_r+0x1da>
 8023198:	ab03      	add	r3, sp, #12
 802319a:	9300      	str	r3, [sp, #0]
 802319c:	462a      	mov	r2, r5
 802319e:	4b16      	ldr	r3, [pc, #88]	; (80231f8 <_vfiprintf_r+0x258>)
 80231a0:	a904      	add	r1, sp, #16
 80231a2:	4630      	mov	r0, r6
 80231a4:	f3af 8000 	nop.w
 80231a8:	4607      	mov	r7, r0
 80231aa:	1c78      	adds	r0, r7, #1
 80231ac:	d1d6      	bne.n	802315c <_vfiprintf_r+0x1bc>
 80231ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80231b0:	07d9      	lsls	r1, r3, #31
 80231b2:	d405      	bmi.n	80231c0 <_vfiprintf_r+0x220>
 80231b4:	89ab      	ldrh	r3, [r5, #12]
 80231b6:	059a      	lsls	r2, r3, #22
 80231b8:	d402      	bmi.n	80231c0 <_vfiprintf_r+0x220>
 80231ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80231bc:	f7ff fcf7 	bl	8022bae <__retarget_lock_release_recursive>
 80231c0:	89ab      	ldrh	r3, [r5, #12]
 80231c2:	065b      	lsls	r3, r3, #25
 80231c4:	f53f af12 	bmi.w	8022fec <_vfiprintf_r+0x4c>
 80231c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80231ca:	e711      	b.n	8022ff0 <_vfiprintf_r+0x50>
 80231cc:	ab03      	add	r3, sp, #12
 80231ce:	9300      	str	r3, [sp, #0]
 80231d0:	462a      	mov	r2, r5
 80231d2:	4b09      	ldr	r3, [pc, #36]	; (80231f8 <_vfiprintf_r+0x258>)
 80231d4:	a904      	add	r1, sp, #16
 80231d6:	4630      	mov	r0, r6
 80231d8:	f000 f880 	bl	80232dc <_printf_i>
 80231dc:	e7e4      	b.n	80231a8 <_vfiprintf_r+0x208>
 80231de:	bf00      	nop
 80231e0:	08028cac 	.word	0x08028cac
 80231e4:	08028ccc 	.word	0x08028ccc
 80231e8:	08028c8c 	.word	0x08028c8c
 80231ec:	08028cec 	.word	0x08028cec
 80231f0:	08028cf6 	.word	0x08028cf6
 80231f4:	00000000 	.word	0x00000000
 80231f8:	08022f7b 	.word	0x08022f7b
 80231fc:	08028cf2 	.word	0x08028cf2

08023200 <_printf_common>:
 8023200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8023204:	4616      	mov	r6, r2
 8023206:	4699      	mov	r9, r3
 8023208:	688a      	ldr	r2, [r1, #8]
 802320a:	690b      	ldr	r3, [r1, #16]
 802320c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8023210:	4293      	cmp	r3, r2
 8023212:	bfb8      	it	lt
 8023214:	4613      	movlt	r3, r2
 8023216:	6033      	str	r3, [r6, #0]
 8023218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 802321c:	4607      	mov	r7, r0
 802321e:	460c      	mov	r4, r1
 8023220:	b10a      	cbz	r2, 8023226 <_printf_common+0x26>
 8023222:	3301      	adds	r3, #1
 8023224:	6033      	str	r3, [r6, #0]
 8023226:	6823      	ldr	r3, [r4, #0]
 8023228:	0699      	lsls	r1, r3, #26
 802322a:	bf42      	ittt	mi
 802322c:	6833      	ldrmi	r3, [r6, #0]
 802322e:	3302      	addmi	r3, #2
 8023230:	6033      	strmi	r3, [r6, #0]
 8023232:	6825      	ldr	r5, [r4, #0]
 8023234:	f015 0506 	ands.w	r5, r5, #6
 8023238:	d106      	bne.n	8023248 <_printf_common+0x48>
 802323a:	f104 0a19 	add.w	sl, r4, #25
 802323e:	68e3      	ldr	r3, [r4, #12]
 8023240:	6832      	ldr	r2, [r6, #0]
 8023242:	1a9b      	subs	r3, r3, r2
 8023244:	42ab      	cmp	r3, r5
 8023246:	dc26      	bgt.n	8023296 <_printf_common+0x96>
 8023248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 802324c:	1e13      	subs	r3, r2, #0
 802324e:	6822      	ldr	r2, [r4, #0]
 8023250:	bf18      	it	ne
 8023252:	2301      	movne	r3, #1
 8023254:	0692      	lsls	r2, r2, #26
 8023256:	d42b      	bmi.n	80232b0 <_printf_common+0xb0>
 8023258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 802325c:	4649      	mov	r1, r9
 802325e:	4638      	mov	r0, r7
 8023260:	47c0      	blx	r8
 8023262:	3001      	adds	r0, #1
 8023264:	d01e      	beq.n	80232a4 <_printf_common+0xa4>
 8023266:	6823      	ldr	r3, [r4, #0]
 8023268:	68e5      	ldr	r5, [r4, #12]
 802326a:	6832      	ldr	r2, [r6, #0]
 802326c:	f003 0306 	and.w	r3, r3, #6
 8023270:	2b04      	cmp	r3, #4
 8023272:	bf08      	it	eq
 8023274:	1aad      	subeq	r5, r5, r2
 8023276:	68a3      	ldr	r3, [r4, #8]
 8023278:	6922      	ldr	r2, [r4, #16]
 802327a:	bf0c      	ite	eq
 802327c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8023280:	2500      	movne	r5, #0
 8023282:	4293      	cmp	r3, r2
 8023284:	bfc4      	itt	gt
 8023286:	1a9b      	subgt	r3, r3, r2
 8023288:	18ed      	addgt	r5, r5, r3
 802328a:	2600      	movs	r6, #0
 802328c:	341a      	adds	r4, #26
 802328e:	42b5      	cmp	r5, r6
 8023290:	d11a      	bne.n	80232c8 <_printf_common+0xc8>
 8023292:	2000      	movs	r0, #0
 8023294:	e008      	b.n	80232a8 <_printf_common+0xa8>
 8023296:	2301      	movs	r3, #1
 8023298:	4652      	mov	r2, sl
 802329a:	4649      	mov	r1, r9
 802329c:	4638      	mov	r0, r7
 802329e:	47c0      	blx	r8
 80232a0:	3001      	adds	r0, #1
 80232a2:	d103      	bne.n	80232ac <_printf_common+0xac>
 80232a4:	f04f 30ff 	mov.w	r0, #4294967295
 80232a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80232ac:	3501      	adds	r5, #1
 80232ae:	e7c6      	b.n	802323e <_printf_common+0x3e>
 80232b0:	18e1      	adds	r1, r4, r3
 80232b2:	1c5a      	adds	r2, r3, #1
 80232b4:	2030      	movs	r0, #48	; 0x30
 80232b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80232ba:	4422      	add	r2, r4
 80232bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80232c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80232c4:	3302      	adds	r3, #2
 80232c6:	e7c7      	b.n	8023258 <_printf_common+0x58>
 80232c8:	2301      	movs	r3, #1
 80232ca:	4622      	mov	r2, r4
 80232cc:	4649      	mov	r1, r9
 80232ce:	4638      	mov	r0, r7
 80232d0:	47c0      	blx	r8
 80232d2:	3001      	adds	r0, #1
 80232d4:	d0e6      	beq.n	80232a4 <_printf_common+0xa4>
 80232d6:	3601      	adds	r6, #1
 80232d8:	e7d9      	b.n	802328e <_printf_common+0x8e>
	...

080232dc <_printf_i>:
 80232dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80232e0:	7e0f      	ldrb	r7, [r1, #24]
 80232e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80232e4:	2f78      	cmp	r7, #120	; 0x78
 80232e6:	4691      	mov	r9, r2
 80232e8:	4680      	mov	r8, r0
 80232ea:	460c      	mov	r4, r1
 80232ec:	469a      	mov	sl, r3
 80232ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80232f2:	d807      	bhi.n	8023304 <_printf_i+0x28>
 80232f4:	2f62      	cmp	r7, #98	; 0x62
 80232f6:	d80a      	bhi.n	802330e <_printf_i+0x32>
 80232f8:	2f00      	cmp	r7, #0
 80232fa:	f000 80d8 	beq.w	80234ae <_printf_i+0x1d2>
 80232fe:	2f58      	cmp	r7, #88	; 0x58
 8023300:	f000 80a3 	beq.w	802344a <_printf_i+0x16e>
 8023304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 802330c:	e03a      	b.n	8023384 <_printf_i+0xa8>
 802330e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8023312:	2b15      	cmp	r3, #21
 8023314:	d8f6      	bhi.n	8023304 <_printf_i+0x28>
 8023316:	a101      	add	r1, pc, #4	; (adr r1, 802331c <_printf_i+0x40>)
 8023318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802331c:	08023375 	.word	0x08023375
 8023320:	08023389 	.word	0x08023389
 8023324:	08023305 	.word	0x08023305
 8023328:	08023305 	.word	0x08023305
 802332c:	08023305 	.word	0x08023305
 8023330:	08023305 	.word	0x08023305
 8023334:	08023389 	.word	0x08023389
 8023338:	08023305 	.word	0x08023305
 802333c:	08023305 	.word	0x08023305
 8023340:	08023305 	.word	0x08023305
 8023344:	08023305 	.word	0x08023305
 8023348:	08023495 	.word	0x08023495
 802334c:	080233b9 	.word	0x080233b9
 8023350:	08023477 	.word	0x08023477
 8023354:	08023305 	.word	0x08023305
 8023358:	08023305 	.word	0x08023305
 802335c:	080234b7 	.word	0x080234b7
 8023360:	08023305 	.word	0x08023305
 8023364:	080233b9 	.word	0x080233b9
 8023368:	08023305 	.word	0x08023305
 802336c:	08023305 	.word	0x08023305
 8023370:	0802347f 	.word	0x0802347f
 8023374:	682b      	ldr	r3, [r5, #0]
 8023376:	1d1a      	adds	r2, r3, #4
 8023378:	681b      	ldr	r3, [r3, #0]
 802337a:	602a      	str	r2, [r5, #0]
 802337c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8023380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8023384:	2301      	movs	r3, #1
 8023386:	e0a3      	b.n	80234d0 <_printf_i+0x1f4>
 8023388:	6820      	ldr	r0, [r4, #0]
 802338a:	6829      	ldr	r1, [r5, #0]
 802338c:	0606      	lsls	r6, r0, #24
 802338e:	f101 0304 	add.w	r3, r1, #4
 8023392:	d50a      	bpl.n	80233aa <_printf_i+0xce>
 8023394:	680e      	ldr	r6, [r1, #0]
 8023396:	602b      	str	r3, [r5, #0]
 8023398:	2e00      	cmp	r6, #0
 802339a:	da03      	bge.n	80233a4 <_printf_i+0xc8>
 802339c:	232d      	movs	r3, #45	; 0x2d
 802339e:	4276      	negs	r6, r6
 80233a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80233a4:	485e      	ldr	r0, [pc, #376]	; (8023520 <_printf_i+0x244>)
 80233a6:	230a      	movs	r3, #10
 80233a8:	e019      	b.n	80233de <_printf_i+0x102>
 80233aa:	680e      	ldr	r6, [r1, #0]
 80233ac:	602b      	str	r3, [r5, #0]
 80233ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80233b2:	bf18      	it	ne
 80233b4:	b236      	sxthne	r6, r6
 80233b6:	e7ef      	b.n	8023398 <_printf_i+0xbc>
 80233b8:	682b      	ldr	r3, [r5, #0]
 80233ba:	6820      	ldr	r0, [r4, #0]
 80233bc:	1d19      	adds	r1, r3, #4
 80233be:	6029      	str	r1, [r5, #0]
 80233c0:	0601      	lsls	r1, r0, #24
 80233c2:	d501      	bpl.n	80233c8 <_printf_i+0xec>
 80233c4:	681e      	ldr	r6, [r3, #0]
 80233c6:	e002      	b.n	80233ce <_printf_i+0xf2>
 80233c8:	0646      	lsls	r6, r0, #25
 80233ca:	d5fb      	bpl.n	80233c4 <_printf_i+0xe8>
 80233cc:	881e      	ldrh	r6, [r3, #0]
 80233ce:	4854      	ldr	r0, [pc, #336]	; (8023520 <_printf_i+0x244>)
 80233d0:	2f6f      	cmp	r7, #111	; 0x6f
 80233d2:	bf0c      	ite	eq
 80233d4:	2308      	moveq	r3, #8
 80233d6:	230a      	movne	r3, #10
 80233d8:	2100      	movs	r1, #0
 80233da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80233de:	6865      	ldr	r5, [r4, #4]
 80233e0:	60a5      	str	r5, [r4, #8]
 80233e2:	2d00      	cmp	r5, #0
 80233e4:	bfa2      	ittt	ge
 80233e6:	6821      	ldrge	r1, [r4, #0]
 80233e8:	f021 0104 	bicge.w	r1, r1, #4
 80233ec:	6021      	strge	r1, [r4, #0]
 80233ee:	b90e      	cbnz	r6, 80233f4 <_printf_i+0x118>
 80233f0:	2d00      	cmp	r5, #0
 80233f2:	d04d      	beq.n	8023490 <_printf_i+0x1b4>
 80233f4:	4615      	mov	r5, r2
 80233f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80233fa:	fb03 6711 	mls	r7, r3, r1, r6
 80233fe:	5dc7      	ldrb	r7, [r0, r7]
 8023400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8023404:	4637      	mov	r7, r6
 8023406:	42bb      	cmp	r3, r7
 8023408:	460e      	mov	r6, r1
 802340a:	d9f4      	bls.n	80233f6 <_printf_i+0x11a>
 802340c:	2b08      	cmp	r3, #8
 802340e:	d10b      	bne.n	8023428 <_printf_i+0x14c>
 8023410:	6823      	ldr	r3, [r4, #0]
 8023412:	07de      	lsls	r6, r3, #31
 8023414:	d508      	bpl.n	8023428 <_printf_i+0x14c>
 8023416:	6923      	ldr	r3, [r4, #16]
 8023418:	6861      	ldr	r1, [r4, #4]
 802341a:	4299      	cmp	r1, r3
 802341c:	bfde      	ittt	le
 802341e:	2330      	movle	r3, #48	; 0x30
 8023420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8023424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8023428:	1b52      	subs	r2, r2, r5
 802342a:	6122      	str	r2, [r4, #16]
 802342c:	f8cd a000 	str.w	sl, [sp]
 8023430:	464b      	mov	r3, r9
 8023432:	aa03      	add	r2, sp, #12
 8023434:	4621      	mov	r1, r4
 8023436:	4640      	mov	r0, r8
 8023438:	f7ff fee2 	bl	8023200 <_printf_common>
 802343c:	3001      	adds	r0, #1
 802343e:	d14c      	bne.n	80234da <_printf_i+0x1fe>
 8023440:	f04f 30ff 	mov.w	r0, #4294967295
 8023444:	b004      	add	sp, #16
 8023446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802344a:	4835      	ldr	r0, [pc, #212]	; (8023520 <_printf_i+0x244>)
 802344c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8023450:	6829      	ldr	r1, [r5, #0]
 8023452:	6823      	ldr	r3, [r4, #0]
 8023454:	f851 6b04 	ldr.w	r6, [r1], #4
 8023458:	6029      	str	r1, [r5, #0]
 802345a:	061d      	lsls	r5, r3, #24
 802345c:	d514      	bpl.n	8023488 <_printf_i+0x1ac>
 802345e:	07df      	lsls	r7, r3, #31
 8023460:	bf44      	itt	mi
 8023462:	f043 0320 	orrmi.w	r3, r3, #32
 8023466:	6023      	strmi	r3, [r4, #0]
 8023468:	b91e      	cbnz	r6, 8023472 <_printf_i+0x196>
 802346a:	6823      	ldr	r3, [r4, #0]
 802346c:	f023 0320 	bic.w	r3, r3, #32
 8023470:	6023      	str	r3, [r4, #0]
 8023472:	2310      	movs	r3, #16
 8023474:	e7b0      	b.n	80233d8 <_printf_i+0xfc>
 8023476:	6823      	ldr	r3, [r4, #0]
 8023478:	f043 0320 	orr.w	r3, r3, #32
 802347c:	6023      	str	r3, [r4, #0]
 802347e:	2378      	movs	r3, #120	; 0x78
 8023480:	4828      	ldr	r0, [pc, #160]	; (8023524 <_printf_i+0x248>)
 8023482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8023486:	e7e3      	b.n	8023450 <_printf_i+0x174>
 8023488:	0659      	lsls	r1, r3, #25
 802348a:	bf48      	it	mi
 802348c:	b2b6      	uxthmi	r6, r6
 802348e:	e7e6      	b.n	802345e <_printf_i+0x182>
 8023490:	4615      	mov	r5, r2
 8023492:	e7bb      	b.n	802340c <_printf_i+0x130>
 8023494:	682b      	ldr	r3, [r5, #0]
 8023496:	6826      	ldr	r6, [r4, #0]
 8023498:	6961      	ldr	r1, [r4, #20]
 802349a:	1d18      	adds	r0, r3, #4
 802349c:	6028      	str	r0, [r5, #0]
 802349e:	0635      	lsls	r5, r6, #24
 80234a0:	681b      	ldr	r3, [r3, #0]
 80234a2:	d501      	bpl.n	80234a8 <_printf_i+0x1cc>
 80234a4:	6019      	str	r1, [r3, #0]
 80234a6:	e002      	b.n	80234ae <_printf_i+0x1d2>
 80234a8:	0670      	lsls	r0, r6, #25
 80234aa:	d5fb      	bpl.n	80234a4 <_printf_i+0x1c8>
 80234ac:	8019      	strh	r1, [r3, #0]
 80234ae:	2300      	movs	r3, #0
 80234b0:	6123      	str	r3, [r4, #16]
 80234b2:	4615      	mov	r5, r2
 80234b4:	e7ba      	b.n	802342c <_printf_i+0x150>
 80234b6:	682b      	ldr	r3, [r5, #0]
 80234b8:	1d1a      	adds	r2, r3, #4
 80234ba:	602a      	str	r2, [r5, #0]
 80234bc:	681d      	ldr	r5, [r3, #0]
 80234be:	6862      	ldr	r2, [r4, #4]
 80234c0:	2100      	movs	r1, #0
 80234c2:	4628      	mov	r0, r5
 80234c4:	f7dc fed4 	bl	8000270 <memchr>
 80234c8:	b108      	cbz	r0, 80234ce <_printf_i+0x1f2>
 80234ca:	1b40      	subs	r0, r0, r5
 80234cc:	6060      	str	r0, [r4, #4]
 80234ce:	6863      	ldr	r3, [r4, #4]
 80234d0:	6123      	str	r3, [r4, #16]
 80234d2:	2300      	movs	r3, #0
 80234d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80234d8:	e7a8      	b.n	802342c <_printf_i+0x150>
 80234da:	6923      	ldr	r3, [r4, #16]
 80234dc:	462a      	mov	r2, r5
 80234de:	4649      	mov	r1, r9
 80234e0:	4640      	mov	r0, r8
 80234e2:	47d0      	blx	sl
 80234e4:	3001      	adds	r0, #1
 80234e6:	d0ab      	beq.n	8023440 <_printf_i+0x164>
 80234e8:	6823      	ldr	r3, [r4, #0]
 80234ea:	079b      	lsls	r3, r3, #30
 80234ec:	d413      	bmi.n	8023516 <_printf_i+0x23a>
 80234ee:	68e0      	ldr	r0, [r4, #12]
 80234f0:	9b03      	ldr	r3, [sp, #12]
 80234f2:	4298      	cmp	r0, r3
 80234f4:	bfb8      	it	lt
 80234f6:	4618      	movlt	r0, r3
 80234f8:	e7a4      	b.n	8023444 <_printf_i+0x168>
 80234fa:	2301      	movs	r3, #1
 80234fc:	4632      	mov	r2, r6
 80234fe:	4649      	mov	r1, r9
 8023500:	4640      	mov	r0, r8
 8023502:	47d0      	blx	sl
 8023504:	3001      	adds	r0, #1
 8023506:	d09b      	beq.n	8023440 <_printf_i+0x164>
 8023508:	3501      	adds	r5, #1
 802350a:	68e3      	ldr	r3, [r4, #12]
 802350c:	9903      	ldr	r1, [sp, #12]
 802350e:	1a5b      	subs	r3, r3, r1
 8023510:	42ab      	cmp	r3, r5
 8023512:	dcf2      	bgt.n	80234fa <_printf_i+0x21e>
 8023514:	e7eb      	b.n	80234ee <_printf_i+0x212>
 8023516:	2500      	movs	r5, #0
 8023518:	f104 0619 	add.w	r6, r4, #25
 802351c:	e7f5      	b.n	802350a <_printf_i+0x22e>
 802351e:	bf00      	nop
 8023520:	08028cfd 	.word	0x08028cfd
 8023524:	08028d0e 	.word	0x08028d0e

08023528 <_putc_r>:
 8023528:	b570      	push	{r4, r5, r6, lr}
 802352a:	460d      	mov	r5, r1
 802352c:	4614      	mov	r4, r2
 802352e:	4606      	mov	r6, r0
 8023530:	b118      	cbz	r0, 802353a <_putc_r+0x12>
 8023532:	6983      	ldr	r3, [r0, #24]
 8023534:	b90b      	cbnz	r3, 802353a <_putc_r+0x12>
 8023536:	f7ff fa89 	bl	8022a4c <__sinit>
 802353a:	4b1c      	ldr	r3, [pc, #112]	; (80235ac <_putc_r+0x84>)
 802353c:	429c      	cmp	r4, r3
 802353e:	d124      	bne.n	802358a <_putc_r+0x62>
 8023540:	6874      	ldr	r4, [r6, #4]
 8023542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023544:	07d8      	lsls	r0, r3, #31
 8023546:	d405      	bmi.n	8023554 <_putc_r+0x2c>
 8023548:	89a3      	ldrh	r3, [r4, #12]
 802354a:	0599      	lsls	r1, r3, #22
 802354c:	d402      	bmi.n	8023554 <_putc_r+0x2c>
 802354e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023550:	f7ff fb2c 	bl	8022bac <__retarget_lock_acquire_recursive>
 8023554:	68a3      	ldr	r3, [r4, #8]
 8023556:	3b01      	subs	r3, #1
 8023558:	2b00      	cmp	r3, #0
 802355a:	60a3      	str	r3, [r4, #8]
 802355c:	da05      	bge.n	802356a <_putc_r+0x42>
 802355e:	69a2      	ldr	r2, [r4, #24]
 8023560:	4293      	cmp	r3, r2
 8023562:	db1c      	blt.n	802359e <_putc_r+0x76>
 8023564:	b2eb      	uxtb	r3, r5
 8023566:	2b0a      	cmp	r3, #10
 8023568:	d019      	beq.n	802359e <_putc_r+0x76>
 802356a:	6823      	ldr	r3, [r4, #0]
 802356c:	1c5a      	adds	r2, r3, #1
 802356e:	6022      	str	r2, [r4, #0]
 8023570:	701d      	strb	r5, [r3, #0]
 8023572:	b2ed      	uxtb	r5, r5
 8023574:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8023576:	07da      	lsls	r2, r3, #31
 8023578:	d405      	bmi.n	8023586 <_putc_r+0x5e>
 802357a:	89a3      	ldrh	r3, [r4, #12]
 802357c:	059b      	lsls	r3, r3, #22
 802357e:	d402      	bmi.n	8023586 <_putc_r+0x5e>
 8023580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8023582:	f7ff fb14 	bl	8022bae <__retarget_lock_release_recursive>
 8023586:	4628      	mov	r0, r5
 8023588:	bd70      	pop	{r4, r5, r6, pc}
 802358a:	4b09      	ldr	r3, [pc, #36]	; (80235b0 <_putc_r+0x88>)
 802358c:	429c      	cmp	r4, r3
 802358e:	d101      	bne.n	8023594 <_putc_r+0x6c>
 8023590:	68b4      	ldr	r4, [r6, #8]
 8023592:	e7d6      	b.n	8023542 <_putc_r+0x1a>
 8023594:	4b07      	ldr	r3, [pc, #28]	; (80235b4 <_putc_r+0x8c>)
 8023596:	429c      	cmp	r4, r3
 8023598:	bf08      	it	eq
 802359a:	68f4      	ldreq	r4, [r6, #12]
 802359c:	e7d1      	b.n	8023542 <_putc_r+0x1a>
 802359e:	4629      	mov	r1, r5
 80235a0:	4622      	mov	r2, r4
 80235a2:	4630      	mov	r0, r6
 80235a4:	f7ff f85a 	bl	802265c <__swbuf_r>
 80235a8:	4605      	mov	r5, r0
 80235aa:	e7e3      	b.n	8023574 <_putc_r+0x4c>
 80235ac:	08028cac 	.word	0x08028cac
 80235b0:	08028ccc 	.word	0x08028ccc
 80235b4:	08028c8c 	.word	0x08028c8c

080235b8 <__sread>:
 80235b8:	b510      	push	{r4, lr}
 80235ba:	460c      	mov	r4, r1
 80235bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235c0:	f000 f8cc 	bl	802375c <_read_r>
 80235c4:	2800      	cmp	r0, #0
 80235c6:	bfab      	itete	ge
 80235c8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80235ca:	89a3      	ldrhlt	r3, [r4, #12]
 80235cc:	181b      	addge	r3, r3, r0
 80235ce:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80235d2:	bfac      	ite	ge
 80235d4:	6563      	strge	r3, [r4, #84]	; 0x54
 80235d6:	81a3      	strhlt	r3, [r4, #12]
 80235d8:	bd10      	pop	{r4, pc}

080235da <__swrite>:
 80235da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80235de:	461f      	mov	r7, r3
 80235e0:	898b      	ldrh	r3, [r1, #12]
 80235e2:	05db      	lsls	r3, r3, #23
 80235e4:	4605      	mov	r5, r0
 80235e6:	460c      	mov	r4, r1
 80235e8:	4616      	mov	r6, r2
 80235ea:	d505      	bpl.n	80235f8 <__swrite+0x1e>
 80235ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80235f0:	2302      	movs	r3, #2
 80235f2:	2200      	movs	r2, #0
 80235f4:	f000 f870 	bl	80236d8 <_lseek_r>
 80235f8:	89a3      	ldrh	r3, [r4, #12]
 80235fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80235fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8023602:	81a3      	strh	r3, [r4, #12]
 8023604:	4632      	mov	r2, r6
 8023606:	463b      	mov	r3, r7
 8023608:	4628      	mov	r0, r5
 802360a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802360e:	f000 b817 	b.w	8023640 <_write_r>

08023612 <__sseek>:
 8023612:	b510      	push	{r4, lr}
 8023614:	460c      	mov	r4, r1
 8023616:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802361a:	f000 f85d 	bl	80236d8 <_lseek_r>
 802361e:	1c43      	adds	r3, r0, #1
 8023620:	89a3      	ldrh	r3, [r4, #12]
 8023622:	bf15      	itete	ne
 8023624:	6560      	strne	r0, [r4, #84]	; 0x54
 8023626:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802362a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802362e:	81a3      	strheq	r3, [r4, #12]
 8023630:	bf18      	it	ne
 8023632:	81a3      	strhne	r3, [r4, #12]
 8023634:	bd10      	pop	{r4, pc}

08023636 <__sclose>:
 8023636:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802363a:	f000 b81b 	b.w	8023674 <_close_r>
	...

08023640 <_write_r>:
 8023640:	b538      	push	{r3, r4, r5, lr}
 8023642:	4d07      	ldr	r5, [pc, #28]	; (8023660 <_write_r+0x20>)
 8023644:	4604      	mov	r4, r0
 8023646:	4608      	mov	r0, r1
 8023648:	4611      	mov	r1, r2
 802364a:	2200      	movs	r2, #0
 802364c:	602a      	str	r2, [r5, #0]
 802364e:	461a      	mov	r2, r3
 8023650:	f7f0 ff4d 	bl	80144ee <_write>
 8023654:	1c43      	adds	r3, r0, #1
 8023656:	d102      	bne.n	802365e <_write_r+0x1e>
 8023658:	682b      	ldr	r3, [r5, #0]
 802365a:	b103      	cbz	r3, 802365e <_write_r+0x1e>
 802365c:	6023      	str	r3, [r4, #0]
 802365e:	bd38      	pop	{r3, r4, r5, pc}
 8023660:	20014298 	.word	0x20014298

08023664 <abort>:
 8023664:	b508      	push	{r3, lr}
 8023666:	2006      	movs	r0, #6
 8023668:	f000 f8b2 	bl	80237d0 <raise>
 802366c:	2001      	movs	r0, #1
 802366e:	f7f0 ff17 	bl	80144a0 <_exit>
	...

08023674 <_close_r>:
 8023674:	b538      	push	{r3, r4, r5, lr}
 8023676:	4d06      	ldr	r5, [pc, #24]	; (8023690 <_close_r+0x1c>)
 8023678:	2300      	movs	r3, #0
 802367a:	4604      	mov	r4, r0
 802367c:	4608      	mov	r0, r1
 802367e:	602b      	str	r3, [r5, #0]
 8023680:	f7f0 ff51 	bl	8014526 <_close>
 8023684:	1c43      	adds	r3, r0, #1
 8023686:	d102      	bne.n	802368e <_close_r+0x1a>
 8023688:	682b      	ldr	r3, [r5, #0]
 802368a:	b103      	cbz	r3, 802368e <_close_r+0x1a>
 802368c:	6023      	str	r3, [r4, #0]
 802368e:	bd38      	pop	{r3, r4, r5, pc}
 8023690:	20014298 	.word	0x20014298

08023694 <_fstat_r>:
 8023694:	b538      	push	{r3, r4, r5, lr}
 8023696:	4d07      	ldr	r5, [pc, #28]	; (80236b4 <_fstat_r+0x20>)
 8023698:	2300      	movs	r3, #0
 802369a:	4604      	mov	r4, r0
 802369c:	4608      	mov	r0, r1
 802369e:	4611      	mov	r1, r2
 80236a0:	602b      	str	r3, [r5, #0]
 80236a2:	f7f0 ff4c 	bl	801453e <_fstat>
 80236a6:	1c43      	adds	r3, r0, #1
 80236a8:	d102      	bne.n	80236b0 <_fstat_r+0x1c>
 80236aa:	682b      	ldr	r3, [r5, #0]
 80236ac:	b103      	cbz	r3, 80236b0 <_fstat_r+0x1c>
 80236ae:	6023      	str	r3, [r4, #0]
 80236b0:	bd38      	pop	{r3, r4, r5, pc}
 80236b2:	bf00      	nop
 80236b4:	20014298 	.word	0x20014298

080236b8 <_isatty_r>:
 80236b8:	b538      	push	{r3, r4, r5, lr}
 80236ba:	4d06      	ldr	r5, [pc, #24]	; (80236d4 <_isatty_r+0x1c>)
 80236bc:	2300      	movs	r3, #0
 80236be:	4604      	mov	r4, r0
 80236c0:	4608      	mov	r0, r1
 80236c2:	602b      	str	r3, [r5, #0]
 80236c4:	f7f0 ff4b 	bl	801455e <_isatty>
 80236c8:	1c43      	adds	r3, r0, #1
 80236ca:	d102      	bne.n	80236d2 <_isatty_r+0x1a>
 80236cc:	682b      	ldr	r3, [r5, #0]
 80236ce:	b103      	cbz	r3, 80236d2 <_isatty_r+0x1a>
 80236d0:	6023      	str	r3, [r4, #0]
 80236d2:	bd38      	pop	{r3, r4, r5, pc}
 80236d4:	20014298 	.word	0x20014298

080236d8 <_lseek_r>:
 80236d8:	b538      	push	{r3, r4, r5, lr}
 80236da:	4d07      	ldr	r5, [pc, #28]	; (80236f8 <_lseek_r+0x20>)
 80236dc:	4604      	mov	r4, r0
 80236de:	4608      	mov	r0, r1
 80236e0:	4611      	mov	r1, r2
 80236e2:	2200      	movs	r2, #0
 80236e4:	602a      	str	r2, [r5, #0]
 80236e6:	461a      	mov	r2, r3
 80236e8:	f7f0 ff44 	bl	8014574 <_lseek>
 80236ec:	1c43      	adds	r3, r0, #1
 80236ee:	d102      	bne.n	80236f6 <_lseek_r+0x1e>
 80236f0:	682b      	ldr	r3, [r5, #0]
 80236f2:	b103      	cbz	r3, 80236f6 <_lseek_r+0x1e>
 80236f4:	6023      	str	r3, [r4, #0]
 80236f6:	bd38      	pop	{r3, r4, r5, pc}
 80236f8:	20014298 	.word	0x20014298

080236fc <_realloc_r>:
 80236fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023700:	4680      	mov	r8, r0
 8023702:	4614      	mov	r4, r2
 8023704:	460e      	mov	r6, r1
 8023706:	b921      	cbnz	r1, 8023712 <_realloc_r+0x16>
 8023708:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802370c:	4611      	mov	r1, r2
 802370e:	f7fe bd59 	b.w	80221c4 <_malloc_r>
 8023712:	b92a      	cbnz	r2, 8023720 <_realloc_r+0x24>
 8023714:	f7fe fcea 	bl	80220ec <_free_r>
 8023718:	4625      	mov	r5, r4
 802371a:	4628      	mov	r0, r5
 802371c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023720:	f000 f872 	bl	8023808 <_malloc_usable_size_r>
 8023724:	4284      	cmp	r4, r0
 8023726:	4607      	mov	r7, r0
 8023728:	d802      	bhi.n	8023730 <_realloc_r+0x34>
 802372a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802372e:	d812      	bhi.n	8023756 <_realloc_r+0x5a>
 8023730:	4621      	mov	r1, r4
 8023732:	4640      	mov	r0, r8
 8023734:	f7fe fd46 	bl	80221c4 <_malloc_r>
 8023738:	4605      	mov	r5, r0
 802373a:	2800      	cmp	r0, #0
 802373c:	d0ed      	beq.n	802371a <_realloc_r+0x1e>
 802373e:	42bc      	cmp	r4, r7
 8023740:	4622      	mov	r2, r4
 8023742:	4631      	mov	r1, r6
 8023744:	bf28      	it	cs
 8023746:	463a      	movcs	r2, r7
 8023748:	f7fe fca0 	bl	802208c <memcpy>
 802374c:	4631      	mov	r1, r6
 802374e:	4640      	mov	r0, r8
 8023750:	f7fe fccc 	bl	80220ec <_free_r>
 8023754:	e7e1      	b.n	802371a <_realloc_r+0x1e>
 8023756:	4635      	mov	r5, r6
 8023758:	e7df      	b.n	802371a <_realloc_r+0x1e>
	...

0802375c <_read_r>:
 802375c:	b538      	push	{r3, r4, r5, lr}
 802375e:	4d07      	ldr	r5, [pc, #28]	; (802377c <_read_r+0x20>)
 8023760:	4604      	mov	r4, r0
 8023762:	4608      	mov	r0, r1
 8023764:	4611      	mov	r1, r2
 8023766:	2200      	movs	r2, #0
 8023768:	602a      	str	r2, [r5, #0]
 802376a:	461a      	mov	r2, r3
 802376c:	f7f0 fea2 	bl	80144b4 <_read>
 8023770:	1c43      	adds	r3, r0, #1
 8023772:	d102      	bne.n	802377a <_read_r+0x1e>
 8023774:	682b      	ldr	r3, [r5, #0]
 8023776:	b103      	cbz	r3, 802377a <_read_r+0x1e>
 8023778:	6023      	str	r3, [r4, #0]
 802377a:	bd38      	pop	{r3, r4, r5, pc}
 802377c:	20014298 	.word	0x20014298

08023780 <_raise_r>:
 8023780:	291f      	cmp	r1, #31
 8023782:	b538      	push	{r3, r4, r5, lr}
 8023784:	4604      	mov	r4, r0
 8023786:	460d      	mov	r5, r1
 8023788:	d904      	bls.n	8023794 <_raise_r+0x14>
 802378a:	2316      	movs	r3, #22
 802378c:	6003      	str	r3, [r0, #0]
 802378e:	f04f 30ff 	mov.w	r0, #4294967295
 8023792:	bd38      	pop	{r3, r4, r5, pc}
 8023794:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8023796:	b112      	cbz	r2, 802379e <_raise_r+0x1e>
 8023798:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802379c:	b94b      	cbnz	r3, 80237b2 <_raise_r+0x32>
 802379e:	4620      	mov	r0, r4
 80237a0:	f000 f830 	bl	8023804 <_getpid_r>
 80237a4:	462a      	mov	r2, r5
 80237a6:	4601      	mov	r1, r0
 80237a8:	4620      	mov	r0, r4
 80237aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80237ae:	f000 b817 	b.w	80237e0 <_kill_r>
 80237b2:	2b01      	cmp	r3, #1
 80237b4:	d00a      	beq.n	80237cc <_raise_r+0x4c>
 80237b6:	1c59      	adds	r1, r3, #1
 80237b8:	d103      	bne.n	80237c2 <_raise_r+0x42>
 80237ba:	2316      	movs	r3, #22
 80237bc:	6003      	str	r3, [r0, #0]
 80237be:	2001      	movs	r0, #1
 80237c0:	e7e7      	b.n	8023792 <_raise_r+0x12>
 80237c2:	2400      	movs	r4, #0
 80237c4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80237c8:	4628      	mov	r0, r5
 80237ca:	4798      	blx	r3
 80237cc:	2000      	movs	r0, #0
 80237ce:	e7e0      	b.n	8023792 <_raise_r+0x12>

080237d0 <raise>:
 80237d0:	4b02      	ldr	r3, [pc, #8]	; (80237dc <raise+0xc>)
 80237d2:	4601      	mov	r1, r0
 80237d4:	6818      	ldr	r0, [r3, #0]
 80237d6:	f7ff bfd3 	b.w	8023780 <_raise_r>
 80237da:	bf00      	nop
 80237dc:	20000140 	.word	0x20000140

080237e0 <_kill_r>:
 80237e0:	b538      	push	{r3, r4, r5, lr}
 80237e2:	4d07      	ldr	r5, [pc, #28]	; (8023800 <_kill_r+0x20>)
 80237e4:	2300      	movs	r3, #0
 80237e6:	4604      	mov	r4, r0
 80237e8:	4608      	mov	r0, r1
 80237ea:	4611      	mov	r1, r2
 80237ec:	602b      	str	r3, [r5, #0]
 80237ee:	f7f0 fe45 	bl	801447c <_kill>
 80237f2:	1c43      	adds	r3, r0, #1
 80237f4:	d102      	bne.n	80237fc <_kill_r+0x1c>
 80237f6:	682b      	ldr	r3, [r5, #0]
 80237f8:	b103      	cbz	r3, 80237fc <_kill_r+0x1c>
 80237fa:	6023      	str	r3, [r4, #0]
 80237fc:	bd38      	pop	{r3, r4, r5, pc}
 80237fe:	bf00      	nop
 8023800:	20014298 	.word	0x20014298

08023804 <_getpid_r>:
 8023804:	f7f0 be32 	b.w	801446c <_getpid>

08023808 <_malloc_usable_size_r>:
 8023808:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802380c:	1f18      	subs	r0, r3, #4
 802380e:	2b00      	cmp	r3, #0
 8023810:	bfbc      	itt	lt
 8023812:	580b      	ldrlt	r3, [r1, r0]
 8023814:	18c0      	addlt	r0, r0, r3
 8023816:	4770      	bx	lr

08023818 <_init>:
 8023818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802381a:	bf00      	nop
 802381c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802381e:	bc08      	pop	{r3}
 8023820:	469e      	mov	lr, r3
 8023822:	4770      	bx	lr

08023824 <_fini>:
 8023824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023826:	bf00      	nop
 8023828:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802382a:	bc08      	pop	{r3}
 802382c:	469e      	mov	lr, r3
 802382e:	4770      	bx	lr
